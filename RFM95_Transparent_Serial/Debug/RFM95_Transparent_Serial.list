
RFM95_Transparent_Serial.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a238  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c4  0800a3c0  0800a3c0  0001a3c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a484  0800a484  00020168  2**0
                  CONTENTS
  4 .ARM          00000008  0800a484  0800a484  0001a484  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a48c  0800a48c  00020168  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a48c  0800a48c  0001a48c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a490  0800a490  0001a490  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000168  20000000  0800a494  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020168  2**0
                  CONTENTS
 10 .bss          00001f58  20000168  20000168  00020168  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200020c0  200020c0  00020168  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020168  2**0
                  CONTENTS, READONLY
 13 .debug_info   00016d64  00000000  00000000  00020198  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003763  00000000  00000000  00036efc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001118  00000000  00000000  0003a660  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000fb0  00000000  00000000  0003b778  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022f69  00000000  00000000  0003c728  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001625f  00000000  00000000  0005f691  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000bfdb1  00000000  00000000  000758f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001356a1  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004bc8  00000000  00000000  001356f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000168 	.word	0x20000168
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800a3a8 	.word	0x0800a3a8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000016c 	.word	0x2000016c
 80001c4:	0800a3a8 	.word	0x0800a3a8

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b974 	b.w	80004c8 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468e      	mov	lr, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14d      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000206:	428a      	cmp	r2, r1
 8000208:	4694      	mov	ip, r2
 800020a:	d969      	bls.n	80002e0 <__udivmoddi4+0xe8>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b152      	cbz	r2, 8000228 <__udivmoddi4+0x30>
 8000212:	fa01 f302 	lsl.w	r3, r1, r2
 8000216:	f1c2 0120 	rsb	r1, r2, #32
 800021a:	fa20 f101 	lsr.w	r1, r0, r1
 800021e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000222:	ea41 0e03 	orr.w	lr, r1, r3
 8000226:	4094      	lsls	r4, r2
 8000228:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800022c:	0c21      	lsrs	r1, r4, #16
 800022e:	fbbe f6f8 	udiv	r6, lr, r8
 8000232:	fa1f f78c 	uxth.w	r7, ip
 8000236:	fb08 e316 	mls	r3, r8, r6, lr
 800023a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800023e:	fb06 f107 	mul.w	r1, r6, r7
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f106 30ff 	add.w	r0, r6, #4294967295
 800024e:	f080 811f 	bcs.w	8000490 <__udivmoddi4+0x298>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 811c 	bls.w	8000490 <__udivmoddi4+0x298>
 8000258:	3e02      	subs	r6, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0f8 	udiv	r0, r3, r8
 8000264:	fb08 3310 	mls	r3, r8, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 f707 	mul.w	r7, r0, r7
 8000270:	42a7      	cmp	r7, r4
 8000272:	d90a      	bls.n	800028a <__udivmoddi4+0x92>
 8000274:	eb1c 0404 	adds.w	r4, ip, r4
 8000278:	f100 33ff 	add.w	r3, r0, #4294967295
 800027c:	f080 810a 	bcs.w	8000494 <__udivmoddi4+0x29c>
 8000280:	42a7      	cmp	r7, r4
 8000282:	f240 8107 	bls.w	8000494 <__udivmoddi4+0x29c>
 8000286:	4464      	add	r4, ip
 8000288:	3802      	subs	r0, #2
 800028a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800028e:	1be4      	subs	r4, r4, r7
 8000290:	2600      	movs	r6, #0
 8000292:	b11d      	cbz	r5, 800029c <__udivmoddi4+0xa4>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c5 4300 	strd	r4, r3, [r5]
 800029c:	4631      	mov	r1, r6
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d909      	bls.n	80002ba <__udivmoddi4+0xc2>
 80002a6:	2d00      	cmp	r5, #0
 80002a8:	f000 80ef 	beq.w	800048a <__udivmoddi4+0x292>
 80002ac:	2600      	movs	r6, #0
 80002ae:	e9c5 0100 	strd	r0, r1, [r5]
 80002b2:	4630      	mov	r0, r6
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	fab3 f683 	clz	r6, r3
 80002be:	2e00      	cmp	r6, #0
 80002c0:	d14a      	bne.n	8000358 <__udivmoddi4+0x160>
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xd4>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 80f9 	bhi.w	80004be <__udivmoddi4+0x2c6>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb61 0303 	sbc.w	r3, r1, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	469e      	mov	lr, r3
 80002d6:	2d00      	cmp	r5, #0
 80002d8:	d0e0      	beq.n	800029c <__udivmoddi4+0xa4>
 80002da:	e9c5 4e00 	strd	r4, lr, [r5]
 80002de:	e7dd      	b.n	800029c <__udivmoddi4+0xa4>
 80002e0:	b902      	cbnz	r2, 80002e4 <__udivmoddi4+0xec>
 80002e2:	deff      	udf	#255	; 0xff
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	2a00      	cmp	r2, #0
 80002ea:	f040 8092 	bne.w	8000412 <__udivmoddi4+0x21a>
 80002ee:	eba1 010c 	sub.w	r1, r1, ip
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2601      	movs	r6, #1
 80002fc:	0c20      	lsrs	r0, r4, #16
 80002fe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000302:	fb07 1113 	mls	r1, r7, r3, r1
 8000306:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800030a:	fb0e f003 	mul.w	r0, lr, r3
 800030e:	4288      	cmp	r0, r1
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x12c>
 8000312:	eb1c 0101 	adds.w	r1, ip, r1
 8000316:	f103 38ff 	add.w	r8, r3, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x12a>
 800031c:	4288      	cmp	r0, r1
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2c0>
 8000322:	4643      	mov	r3, r8
 8000324:	1a09      	subs	r1, r1, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb1 f0f7 	udiv	r0, r1, r7
 800032c:	fb07 1110 	mls	r1, r7, r0, r1
 8000330:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x156>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 31ff 	add.w	r1, r0, #4294967295
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x154>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 800034c:	4608      	mov	r0, r1
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000356:	e79c      	b.n	8000292 <__udivmoddi4+0x9a>
 8000358:	f1c6 0720 	rsb	r7, r6, #32
 800035c:	40b3      	lsls	r3, r6
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa20 f407 	lsr.w	r4, r0, r7
 800036a:	fa01 f306 	lsl.w	r3, r1, r6
 800036e:	431c      	orrs	r4, r3
 8000370:	40f9      	lsrs	r1, r7
 8000372:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000376:	fa00 f306 	lsl.w	r3, r0, r6
 800037a:	fbb1 f8f9 	udiv	r8, r1, r9
 800037e:	0c20      	lsrs	r0, r4, #16
 8000380:	fa1f fe8c 	uxth.w	lr, ip
 8000384:	fb09 1118 	mls	r1, r9, r8, r1
 8000388:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800038c:	fb08 f00e 	mul.w	r0, r8, lr
 8000390:	4288      	cmp	r0, r1
 8000392:	fa02 f206 	lsl.w	r2, r2, r6
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b8>
 8000398:	eb1c 0101 	adds.w	r1, ip, r1
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2bc>
 80003a4:	4288      	cmp	r0, r1
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2bc>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4461      	add	r1, ip
 80003b0:	1a09      	subs	r1, r1, r0
 80003b2:	b2a4      	uxth	r4, r4
 80003b4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003b8:	fb09 1110 	mls	r1, r9, r0, r1
 80003bc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c4:	458e      	cmp	lr, r1
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1e2>
 80003c8:	eb1c 0101 	adds.w	r1, ip, r1
 80003cc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2b4>
 80003d2:	458e      	cmp	lr, r1
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2b4>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4461      	add	r1, ip
 80003da:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003de:	fba0 9402 	umull	r9, r4, r0, r2
 80003e2:	eba1 010e 	sub.w	r1, r1, lr
 80003e6:	42a1      	cmp	r1, r4
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46a6      	mov	lr, r4
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x2a4>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x2a0>
 80003f0:	b15d      	cbz	r5, 800040a <__udivmoddi4+0x212>
 80003f2:	ebb3 0208 	subs.w	r2, r3, r8
 80003f6:	eb61 010e 	sbc.w	r1, r1, lr
 80003fa:	fa01 f707 	lsl.w	r7, r1, r7
 80003fe:	fa22 f306 	lsr.w	r3, r2, r6
 8000402:	40f1      	lsrs	r1, r6
 8000404:	431f      	orrs	r7, r3
 8000406:	e9c5 7100 	strd	r7, r1, [r5]
 800040a:	2600      	movs	r6, #0
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	f1c2 0320 	rsb	r3, r2, #32
 8000416:	40d8      	lsrs	r0, r3
 8000418:	fa0c fc02 	lsl.w	ip, ip, r2
 800041c:	fa21 f303 	lsr.w	r3, r1, r3
 8000420:	4091      	lsls	r1, r2
 8000422:	4301      	orrs	r1, r0
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000430:	fb07 3610 	mls	r6, r7, r0, r3
 8000434:	0c0b      	lsrs	r3, r1, #16
 8000436:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800043a:	fb00 f60e 	mul.w	r6, r0, lr
 800043e:	429e      	cmp	r6, r3
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x260>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 38ff 	add.w	r8, r0, #4294967295
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b8>
 8000450:	429e      	cmp	r6, r3
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b8>
 8000454:	3802      	subs	r0, #2
 8000456:	4463      	add	r3, ip
 8000458:	1b9b      	subs	r3, r3, r6
 800045a:	b289      	uxth	r1, r1
 800045c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000460:	fb07 3316 	mls	r3, r7, r6, r3
 8000464:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000468:	fb06 f30e 	mul.w	r3, r6, lr
 800046c:	428b      	cmp	r3, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x28a>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f106 38ff 	add.w	r8, r6, #4294967295
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 800047a:	428b      	cmp	r3, r1
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800047e:	3e02      	subs	r6, #2
 8000480:	4461      	add	r1, ip
 8000482:	1ac9      	subs	r1, r1, r3
 8000484:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0x104>
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e705      	b.n	800029c <__udivmoddi4+0xa4>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e3      	b.n	800025c <__udivmoddi4+0x64>
 8000494:	4618      	mov	r0, r3
 8000496:	e6f8      	b.n	800028a <__udivmoddi4+0x92>
 8000498:	454b      	cmp	r3, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f8>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f8>
 80004a8:	4646      	mov	r6, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x28a>
 80004ac:	4620      	mov	r0, r4
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1e2>
 80004b0:	4640      	mov	r0, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x260>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b8>
 80004b8:	3b02      	subs	r3, #2
 80004ba:	4461      	add	r1, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x12c>
 80004be:	4630      	mov	r0, r6
 80004c0:	e709      	b.n	80002d6 <__udivmoddi4+0xde>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x156>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <newLoRa>:
										  |    spreading factor = 7				       |
											|           bandwidth = 125 KHz        |
											| 		    coding rate = 4/5            |
											----------------------------------------
\* ----------------------------------------------------------------------------- */
LoRa newLoRa(){
 80004cc:	b4b0      	push	{r4, r5, r7}
 80004ce:	b08f      	sub	sp, #60	; 0x3c
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	6078      	str	r0, [r7, #4]
	LoRa new_LoRa;

	new_LoRa.frequency             = 433       ;
 80004d4:	f240 13b1 	movw	r3, #433	; 0x1b1
 80004d8:	62fb      	str	r3, [r7, #44]	; 0x2c
	new_LoRa.spredingFactor        = SF_7      ;
 80004da:	2307      	movs	r3, #7
 80004dc:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
	new_LoRa.bandWidth			   = BW_125KHz ;
 80004e0:	2307      	movs	r3, #7
 80004e2:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
	new_LoRa.crcRate               = CR_4_5    ;
 80004e6:	2301      	movs	r3, #1
 80004e8:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	new_LoRa.power				   = POWER_20db;
 80004ec:	23ff      	movs	r3, #255	; 0xff
 80004ee:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	new_LoRa.overCurrentProtection = 100       ;
 80004f2:	2364      	movs	r3, #100	; 0x64
 80004f4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	new_LoRa.preamble			   = 8         ;
 80004f8:	2308      	movs	r3, #8
 80004fa:	86bb      	strh	r3, [r7, #52]	; 0x34

	return new_LoRa;
 80004fc:	687b      	ldr	r3, [r7, #4]
 80004fe:	461d      	mov	r5, r3
 8000500:	f107 040c 	add.w	r4, r7, #12
 8000504:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000506:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000508:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800050a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800050c:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8000510:	e885 0007 	stmia.w	r5, {r0, r1, r2}
}
 8000514:	6878      	ldr	r0, [r7, #4]
 8000516:	373c      	adds	r7, #60	; 0x3c
 8000518:	46bd      	mov	sp, r7
 800051a:	bcb0      	pop	{r4, r5, r7}
 800051c:	4770      	bx	lr

0800051e <LoRa_reset>:
		description : reset module
		arguments   :
			LoRa* LoRa --> LoRa object handler
		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_reset(LoRa* _LoRa){
 800051e:	b580      	push	{r7, lr}
 8000520:	b082      	sub	sp, #8
 8000522:	af00      	add	r7, sp, #0
 8000524:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(_LoRa->reset_port, _LoRa->reset_pin, GPIO_PIN_RESET);
 8000526:	687b      	ldr	r3, [r7, #4]
 8000528:	6898      	ldr	r0, [r3, #8]
 800052a:	687b      	ldr	r3, [r7, #4]
 800052c:	899b      	ldrh	r3, [r3, #12]
 800052e:	2200      	movs	r2, #0
 8000530:	4619      	mov	r1, r3
 8000532:	f001 fc3d 	bl	8001db0 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000536:	2001      	movs	r0, #1
 8000538:	f001 f8d6 	bl	80016e8 <HAL_Delay>
	HAL_GPIO_WritePin(_LoRa->reset_port, _LoRa->reset_pin, GPIO_PIN_SET);
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	6898      	ldr	r0, [r3, #8]
 8000540:	687b      	ldr	r3, [r7, #4]
 8000542:	899b      	ldrh	r3, [r3, #12]
 8000544:	2201      	movs	r2, #1
 8000546:	4619      	mov	r1, r3
 8000548:	f001 fc32 	bl	8001db0 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 800054c:	2064      	movs	r0, #100	; 0x64
 800054e:	f001 f8cb 	bl	80016e8 <HAL_Delay>
}
 8000552:	bf00      	nop
 8000554:	3708      	adds	r7, #8
 8000556:	46bd      	mov	sp, r7
 8000558:	bd80      	pop	{r7, pc}

0800055a <LoRa_gotoMode>:
		arguments   :
			LoRa* LoRa    --> LoRa object handler
			mode	        --> select from defined modes
		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_gotoMode(LoRa* _LoRa, int mode){
 800055a:	b580      	push	{r7, lr}
 800055c:	b084      	sub	sp, #16
 800055e:	af00      	add	r7, sp, #0
 8000560:	6078      	str	r0, [r7, #4]
 8000562:	6039      	str	r1, [r7, #0]
	uint8_t    read;
	uint8_t    data;

	read = LoRa_read(_LoRa, RegOpMode);
 8000564:	2101      	movs	r1, #1
 8000566:	6878      	ldr	r0, [r7, #4]
 8000568:	f000 f99f 	bl	80008aa <LoRa_read>
 800056c:	4603      	mov	r3, r0
 800056e:	73bb      	strb	r3, [r7, #14]
	data = read;
 8000570:	7bbb      	ldrb	r3, [r7, #14]
 8000572:	73fb      	strb	r3, [r7, #15]

	if(mode == SLEEP_MODE){
 8000574:	683b      	ldr	r3, [r7, #0]
 8000576:	2b00      	cmp	r3, #0
 8000578:	d107      	bne.n	800058a <LoRa_gotoMode+0x30>
		data = (read & 0xF8) | 0x00;
 800057a:	7bbb      	ldrb	r3, [r7, #14]
 800057c:	f023 0307 	bic.w	r3, r3, #7
 8000580:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = SLEEP_MODE;
 8000582:	687b      	ldr	r3, [r7, #4]
 8000584:	2200      	movs	r2, #0
 8000586:	61da      	str	r2, [r3, #28]
 8000588:	e03e      	b.n	8000608 <LoRa_gotoMode+0xae>
	}else if (mode == STNBY_MODE){
 800058a:	683b      	ldr	r3, [r7, #0]
 800058c:	2b01      	cmp	r3, #1
 800058e:	d10c      	bne.n	80005aa <LoRa_gotoMode+0x50>
		data = (read & 0xF8) | 0x01;
 8000590:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000594:	f023 0307 	bic.w	r3, r3, #7
 8000598:	b25b      	sxtb	r3, r3
 800059a:	f043 0301 	orr.w	r3, r3, #1
 800059e:	b25b      	sxtb	r3, r3
 80005a0:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = STNBY_MODE;
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	2201      	movs	r2, #1
 80005a6:	61da      	str	r2, [r3, #28]
 80005a8:	e02e      	b.n	8000608 <LoRa_gotoMode+0xae>
	}else if (mode == TRANSMIT_MODE){
 80005aa:	683b      	ldr	r3, [r7, #0]
 80005ac:	2b03      	cmp	r3, #3
 80005ae:	d10c      	bne.n	80005ca <LoRa_gotoMode+0x70>
		data = (read & 0xF8) | 0x03;
 80005b0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80005b4:	f023 0307 	bic.w	r3, r3, #7
 80005b8:	b25b      	sxtb	r3, r3
 80005ba:	f043 0303 	orr.w	r3, r3, #3
 80005be:	b25b      	sxtb	r3, r3
 80005c0:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = TRANSMIT_MODE;
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	2203      	movs	r2, #3
 80005c6:	61da      	str	r2, [r3, #28]
 80005c8:	e01e      	b.n	8000608 <LoRa_gotoMode+0xae>
	}else if (mode == RXCONTIN_MODE){
 80005ca:	683b      	ldr	r3, [r7, #0]
 80005cc:	2b05      	cmp	r3, #5
 80005ce:	d10c      	bne.n	80005ea <LoRa_gotoMode+0x90>
		data = (read & 0xF8) | 0x05;
 80005d0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80005d4:	f023 0307 	bic.w	r3, r3, #7
 80005d8:	b25b      	sxtb	r3, r3
 80005da:	f043 0305 	orr.w	r3, r3, #5
 80005de:	b25b      	sxtb	r3, r3
 80005e0:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = RXCONTIN_MODE;
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	2205      	movs	r2, #5
 80005e6:	61da      	str	r2, [r3, #28]
 80005e8:	e00e      	b.n	8000608 <LoRa_gotoMode+0xae>
	}else if (mode == RXSINGLE_MODE){
 80005ea:	683b      	ldr	r3, [r7, #0]
 80005ec:	2b06      	cmp	r3, #6
 80005ee:	d10b      	bne.n	8000608 <LoRa_gotoMode+0xae>
		data = (read & 0xF8) | 0x06;
 80005f0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80005f4:	f023 0307 	bic.w	r3, r3, #7
 80005f8:	b25b      	sxtb	r3, r3
 80005fa:	f043 0306 	orr.w	r3, r3, #6
 80005fe:	b25b      	sxtb	r3, r3
 8000600:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = RXSINGLE_MODE;
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	2206      	movs	r2, #6
 8000606:	61da      	str	r2, [r3, #28]
	}

	LoRa_write(_LoRa, RegOpMode, data);
 8000608:	7bfb      	ldrb	r3, [r7, #15]
 800060a:	461a      	mov	r2, r3
 800060c:	2101      	movs	r1, #1
 800060e:	6878      	ldr	r0, [r7, #4]
 8000610:	f000 f965 	bl	80008de <LoRa_write>
	//HAL_Delay(10);
}
 8000614:	bf00      	nop
 8000616:	3710      	adds	r7, #16
 8000618:	46bd      	mov	sp, r7
 800061a:	bd80      	pop	{r7, pc}

0800061c <LoRa_readReg>:
														you want to send
			uint8_t* output		--> pointer to the beginning of output array
			uint16_t w_length	--> detemines number of bytes that you want to read
		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_readReg(LoRa* _LoRa, uint8_t* address, uint16_t r_length, uint8_t* output, uint16_t w_length){
 800061c:	b580      	push	{r7, lr}
 800061e:	b084      	sub	sp, #16
 8000620:	af00      	add	r7, sp, #0
 8000622:	60f8      	str	r0, [r7, #12]
 8000624:	60b9      	str	r1, [r7, #8]
 8000626:	603b      	str	r3, [r7, #0]
 8000628:	4613      	mov	r3, r2
 800062a:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_RESET);
 800062c:	68fb      	ldr	r3, [r7, #12]
 800062e:	6818      	ldr	r0, [r3, #0]
 8000630:	68fb      	ldr	r3, [r7, #12]
 8000632:	889b      	ldrh	r3, [r3, #4]
 8000634:	2200      	movs	r2, #0
 8000636:	4619      	mov	r1, r3
 8000638:	f001 fbba 	bl	8001db0 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(_LoRa->hSPIx, address, r_length, TRANSMIT_TIMEOUT);
 800063c:	68fb      	ldr	r3, [r7, #12]
 800063e:	6998      	ldr	r0, [r3, #24]
 8000640:	88fa      	ldrh	r2, [r7, #6]
 8000642:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000646:	68b9      	ldr	r1, [r7, #8]
 8000648:	f003 fb29 	bl	8003c9e <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 800064c:	bf00      	nop
 800064e:	68fb      	ldr	r3, [r7, #12]
 8000650:	699b      	ldr	r3, [r3, #24]
 8000652:	4618      	mov	r0, r3
 8000654:	f003 ff12 	bl	800447c <HAL_SPI_GetState>
 8000658:	4603      	mov	r3, r0
 800065a:	2b01      	cmp	r3, #1
 800065c:	d1f7      	bne.n	800064e <LoRa_readReg+0x32>
		;
	HAL_SPI_Receive(_LoRa->hSPIx, output, w_length, RECEIVE_TIMEOUT);
 800065e:	68fb      	ldr	r3, [r7, #12]
 8000660:	6998      	ldr	r0, [r3, #24]
 8000662:	8b3a      	ldrh	r2, [r7, #24]
 8000664:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000668:	6839      	ldr	r1, [r7, #0]
 800066a:	f003 fc54 	bl	8003f16 <HAL_SPI_Receive>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 800066e:	bf00      	nop
 8000670:	68fb      	ldr	r3, [r7, #12]
 8000672:	699b      	ldr	r3, [r3, #24]
 8000674:	4618      	mov	r0, r3
 8000676:	f003 ff01 	bl	800447c <HAL_SPI_GetState>
 800067a:	4603      	mov	r3, r0
 800067c:	2b01      	cmp	r3, #1
 800067e:	d1f7      	bne.n	8000670 <LoRa_readReg+0x54>
		;
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_SET);
 8000680:	68fb      	ldr	r3, [r7, #12]
 8000682:	6818      	ldr	r0, [r3, #0]
 8000684:	68fb      	ldr	r3, [r7, #12]
 8000686:	889b      	ldrh	r3, [r3, #4]
 8000688:	2201      	movs	r2, #1
 800068a:	4619      	mov	r1, r3
 800068c:	f001 fb90 	bl	8001db0 <HAL_GPIO_WritePin>
}
 8000690:	bf00      	nop
 8000692:	3710      	adds	r7, #16
 8000694:	46bd      	mov	sp, r7
 8000696:	bd80      	pop	{r7, pc}

08000698 <LoRa_writeReg>:
														you want to send
			uint8_t* output		--> pointer to the beginning of values array
			uint16_t w_length	--> detemines number of bytes that you want to send
		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_writeReg(LoRa* _LoRa, uint8_t* address, uint16_t r_length, uint8_t* values, uint16_t w_length){
 8000698:	b580      	push	{r7, lr}
 800069a:	b084      	sub	sp, #16
 800069c:	af00      	add	r7, sp, #0
 800069e:	60f8      	str	r0, [r7, #12]
 80006a0:	60b9      	str	r1, [r7, #8]
 80006a2:	603b      	str	r3, [r7, #0]
 80006a4:	4613      	mov	r3, r2
 80006a6:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_RESET);
 80006a8:	68fb      	ldr	r3, [r7, #12]
 80006aa:	6818      	ldr	r0, [r3, #0]
 80006ac:	68fb      	ldr	r3, [r7, #12]
 80006ae:	889b      	ldrh	r3, [r3, #4]
 80006b0:	2200      	movs	r2, #0
 80006b2:	4619      	mov	r1, r3
 80006b4:	f001 fb7c 	bl	8001db0 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(_LoRa->hSPIx, address, r_length, TRANSMIT_TIMEOUT);
 80006b8:	68fb      	ldr	r3, [r7, #12]
 80006ba:	6998      	ldr	r0, [r3, #24]
 80006bc:	88fa      	ldrh	r2, [r7, #6]
 80006be:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80006c2:	68b9      	ldr	r1, [r7, #8]
 80006c4:	f003 faeb 	bl	8003c9e <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 80006c8:	bf00      	nop
 80006ca:	68fb      	ldr	r3, [r7, #12]
 80006cc:	699b      	ldr	r3, [r3, #24]
 80006ce:	4618      	mov	r0, r3
 80006d0:	f003 fed4 	bl	800447c <HAL_SPI_GetState>
 80006d4:	4603      	mov	r3, r0
 80006d6:	2b01      	cmp	r3, #1
 80006d8:	d1f7      	bne.n	80006ca <LoRa_writeReg+0x32>
		;
	HAL_SPI_Transmit(_LoRa->hSPIx, values, w_length, TRANSMIT_TIMEOUT);
 80006da:	68fb      	ldr	r3, [r7, #12]
 80006dc:	6998      	ldr	r0, [r3, #24]
 80006de:	8b3a      	ldrh	r2, [r7, #24]
 80006e0:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80006e4:	6839      	ldr	r1, [r7, #0]
 80006e6:	f003 fada 	bl	8003c9e <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 80006ea:	bf00      	nop
 80006ec:	68fb      	ldr	r3, [r7, #12]
 80006ee:	699b      	ldr	r3, [r3, #24]
 80006f0:	4618      	mov	r0, r3
 80006f2:	f003 fec3 	bl	800447c <HAL_SPI_GetState>
 80006f6:	4603      	mov	r3, r0
 80006f8:	2b01      	cmp	r3, #1
 80006fa:	d1f7      	bne.n	80006ec <LoRa_writeReg+0x54>
		;
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_SET);
 80006fc:	68fb      	ldr	r3, [r7, #12]
 80006fe:	6818      	ldr	r0, [r3, #0]
 8000700:	68fb      	ldr	r3, [r7, #12]
 8000702:	889b      	ldrh	r3, [r3, #4]
 8000704:	2201      	movs	r2, #1
 8000706:	4619      	mov	r1, r3
 8000708:	f001 fb52 	bl	8001db0 <HAL_GPIO_WritePin>
}
 800070c:	bf00      	nop
 800070e:	3710      	adds	r7, #16
 8000710:	46bd      	mov	sp, r7
 8000712:	bd80      	pop	{r7, pc}

08000714 <LoRa_setFrequency>:
		arguments   :
			LoRa* LoRa        --> LoRa object handler
			int   freq        --> desired frequency in MHz unit, e.g 434
		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setFrequency(LoRa* _LoRa, int freq){
 8000714:	b580      	push	{r7, lr}
 8000716:	b084      	sub	sp, #16
 8000718:	af00      	add	r7, sp, #0
 800071a:	6078      	str	r0, [r7, #4]
 800071c:	6039      	str	r1, [r7, #0]
	uint8_t  data;
	uint32_t F;
	F = (freq * 524288)>>5;
 800071e:	683b      	ldr	r3, [r7, #0]
 8000720:	04db      	lsls	r3, r3, #19
 8000722:	115b      	asrs	r3, r3, #5
 8000724:	60fb      	str	r3, [r7, #12]

	// write Msb:
	data = F >> 16;
 8000726:	68fb      	ldr	r3, [r7, #12]
 8000728:	0c1b      	lsrs	r3, r3, #16
 800072a:	72fb      	strb	r3, [r7, #11]
	LoRa_write(_LoRa, RegFrMsb, data);
 800072c:	7afb      	ldrb	r3, [r7, #11]
 800072e:	461a      	mov	r2, r3
 8000730:	2106      	movs	r1, #6
 8000732:	6878      	ldr	r0, [r7, #4]
 8000734:	f000 f8d3 	bl	80008de <LoRa_write>
	HAL_Delay(5);
 8000738:	2005      	movs	r0, #5
 800073a:	f000 ffd5 	bl	80016e8 <HAL_Delay>

	// write Mid:
	data = F >> 8;
 800073e:	68fb      	ldr	r3, [r7, #12]
 8000740:	0a1b      	lsrs	r3, r3, #8
 8000742:	72fb      	strb	r3, [r7, #11]
	LoRa_write(_LoRa, RegFrMid, data);
 8000744:	7afb      	ldrb	r3, [r7, #11]
 8000746:	461a      	mov	r2, r3
 8000748:	2107      	movs	r1, #7
 800074a:	6878      	ldr	r0, [r7, #4]
 800074c:	f000 f8c7 	bl	80008de <LoRa_write>
	HAL_Delay(5);
 8000750:	2005      	movs	r0, #5
 8000752:	f000 ffc9 	bl	80016e8 <HAL_Delay>

	// write Lsb:
	data = F >> 0;
 8000756:	68fb      	ldr	r3, [r7, #12]
 8000758:	72fb      	strb	r3, [r7, #11]
	LoRa_write(_LoRa, RegFrLsb, data);
 800075a:	7afb      	ldrb	r3, [r7, #11]
 800075c:	461a      	mov	r2, r3
 800075e:	2108      	movs	r1, #8
 8000760:	6878      	ldr	r0, [r7, #4]
 8000762:	f000 f8bc 	bl	80008de <LoRa_write>
	HAL_Delay(5);
 8000766:	2005      	movs	r0, #5
 8000768:	f000 ffbe 	bl	80016e8 <HAL_Delay>
}
 800076c:	bf00      	nop
 800076e:	3710      	adds	r7, #16
 8000770:	46bd      	mov	sp, r7
 8000772:	bd80      	pop	{r7, pc}

08000774 <LoRa_setSpreadingFactor>:
		arguments   :
			LoRa* LoRa        --> LoRa object handler
			int   SP          --> desired spreading factor e.g 7
		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setSpreadingFactor(LoRa* _LoRa, int SF){
 8000774:	b580      	push	{r7, lr}
 8000776:	b084      	sub	sp, #16
 8000778:	af00      	add	r7, sp, #0
 800077a:	6078      	str	r0, [r7, #4]
 800077c:	6039      	str	r1, [r7, #0]
	uint8_t	data;
	uint8_t	read;

	if(SF>12)
 800077e:	683b      	ldr	r3, [r7, #0]
 8000780:	2b0c      	cmp	r3, #12
 8000782:	dd01      	ble.n	8000788 <LoRa_setSpreadingFactor+0x14>
		SF = 12;
 8000784:	230c      	movs	r3, #12
 8000786:	603b      	str	r3, [r7, #0]
	if(SF<7)
 8000788:	683b      	ldr	r3, [r7, #0]
 800078a:	2b06      	cmp	r3, #6
 800078c:	dc01      	bgt.n	8000792 <LoRa_setSpreadingFactor+0x1e>
		SF = 7;
 800078e:	2307      	movs	r3, #7
 8000790:	603b      	str	r3, [r7, #0]

	read = LoRa_read(_LoRa, RegModemConfig2);
 8000792:	211e      	movs	r1, #30
 8000794:	6878      	ldr	r0, [r7, #4]
 8000796:	f000 f888 	bl	80008aa <LoRa_read>
 800079a:	4603      	mov	r3, r0
 800079c:	73fb      	strb	r3, [r7, #15]
	HAL_Delay(10);
 800079e:	200a      	movs	r0, #10
 80007a0:	f000 ffa2 	bl	80016e8 <HAL_Delay>

	data = (SF << 4) + (read & 0x0F);
 80007a4:	683b      	ldr	r3, [r7, #0]
 80007a6:	b2db      	uxtb	r3, r3
 80007a8:	011b      	lsls	r3, r3, #4
 80007aa:	b2da      	uxtb	r2, r3
 80007ac:	7bfb      	ldrb	r3, [r7, #15]
 80007ae:	f003 030f 	and.w	r3, r3, #15
 80007b2:	b2db      	uxtb	r3, r3
 80007b4:	4413      	add	r3, r2
 80007b6:	73bb      	strb	r3, [r7, #14]
	LoRa_write(_LoRa, RegModemConfig2, data);
 80007b8:	7bbb      	ldrb	r3, [r7, #14]
 80007ba:	461a      	mov	r2, r3
 80007bc:	211e      	movs	r1, #30
 80007be:	6878      	ldr	r0, [r7, #4]
 80007c0:	f000 f88d 	bl	80008de <LoRa_write>
	HAL_Delay(10);
 80007c4:	200a      	movs	r0, #10
 80007c6:	f000 ff8f 	bl	80016e8 <HAL_Delay>
}
 80007ca:	bf00      	nop
 80007cc:	3710      	adds	r7, #16
 80007ce:	46bd      	mov	sp, r7
 80007d0:	bd80      	pop	{r7, pc}

080007d2 <LoRa_setPower>:
		arguments   :
			LoRa* LoRa        --> LoRa object handler
			int   power       --> desired power e.g POWER_17db
		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setPower(LoRa* _LoRa, uint8_t power){
 80007d2:	b580      	push	{r7, lr}
 80007d4:	b082      	sub	sp, #8
 80007d6:	af00      	add	r7, sp, #0
 80007d8:	6078      	str	r0, [r7, #4]
 80007da:	460b      	mov	r3, r1
 80007dc:	70fb      	strb	r3, [r7, #3]
	LoRa_write(_LoRa, RegPaConfig, power);
 80007de:	78fb      	ldrb	r3, [r7, #3]
 80007e0:	461a      	mov	r2, r3
 80007e2:	2109      	movs	r1, #9
 80007e4:	6878      	ldr	r0, [r7, #4]
 80007e6:	f000 f87a 	bl	80008de <LoRa_write>
	HAL_Delay(10);
 80007ea:	200a      	movs	r0, #10
 80007ec:	f000 ff7c 	bl	80016e8 <HAL_Delay>
}
 80007f0:	bf00      	nop
 80007f2:	3708      	adds	r7, #8
 80007f4:	46bd      	mov	sp, r7
 80007f6:	bd80      	pop	{r7, pc}

080007f8 <LoRa_setOCP>:
		arguments   :
			LoRa* LoRa        --> LoRa object handler
			int   current     --> desired max currnet in mA, e.g 120
		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setOCP(LoRa* _LoRa, uint8_t current){
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b084      	sub	sp, #16
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	6078      	str	r0, [r7, #4]
 8000800:	460b      	mov	r3, r1
 8000802:	70fb      	strb	r3, [r7, #3]
	uint8_t	OcpTrim = 0;
 8000804:	2300      	movs	r3, #0
 8000806:	73fb      	strb	r3, [r7, #15]

	if(current<45)
 8000808:	78fb      	ldrb	r3, [r7, #3]
 800080a:	2b2c      	cmp	r3, #44	; 0x2c
 800080c:	d801      	bhi.n	8000812 <LoRa_setOCP+0x1a>
		current = 45;
 800080e:	232d      	movs	r3, #45	; 0x2d
 8000810:	70fb      	strb	r3, [r7, #3]
	if(current>240)
 8000812:	78fb      	ldrb	r3, [r7, #3]
 8000814:	2bf0      	cmp	r3, #240	; 0xf0
 8000816:	d901      	bls.n	800081c <LoRa_setOCP+0x24>
		current = 240;
 8000818:	23f0      	movs	r3, #240	; 0xf0
 800081a:	70fb      	strb	r3, [r7, #3]

	if(current <= 120)
 800081c:	78fb      	ldrb	r3, [r7, #3]
 800081e:	2b78      	cmp	r3, #120	; 0x78
 8000820:	d809      	bhi.n	8000836 <LoRa_setOCP+0x3e>
		OcpTrim = (current - 45)/5;
 8000822:	78fb      	ldrb	r3, [r7, #3]
 8000824:	3b2d      	subs	r3, #45	; 0x2d
 8000826:	4a12      	ldr	r2, [pc, #72]	; (8000870 <LoRa_setOCP+0x78>)
 8000828:	fb82 1203 	smull	r1, r2, r2, r3
 800082c:	1052      	asrs	r2, r2, #1
 800082e:	17db      	asrs	r3, r3, #31
 8000830:	1ad3      	subs	r3, r2, r3
 8000832:	73fb      	strb	r3, [r7, #15]
 8000834:	e00b      	b.n	800084e <LoRa_setOCP+0x56>
	else if(current <= 240)
 8000836:	78fb      	ldrb	r3, [r7, #3]
 8000838:	2bf0      	cmp	r3, #240	; 0xf0
 800083a:	d808      	bhi.n	800084e <LoRa_setOCP+0x56>
		OcpTrim = (current + 30)/10;
 800083c:	78fb      	ldrb	r3, [r7, #3]
 800083e:	331e      	adds	r3, #30
 8000840:	4a0b      	ldr	r2, [pc, #44]	; (8000870 <LoRa_setOCP+0x78>)
 8000842:	fb82 1203 	smull	r1, r2, r2, r3
 8000846:	1092      	asrs	r2, r2, #2
 8000848:	17db      	asrs	r3, r3, #31
 800084a:	1ad3      	subs	r3, r2, r3
 800084c:	73fb      	strb	r3, [r7, #15]

	OcpTrim = OcpTrim + (1 << 5);
 800084e:	7bfb      	ldrb	r3, [r7, #15]
 8000850:	3320      	adds	r3, #32
 8000852:	73fb      	strb	r3, [r7, #15]
	LoRa_write(_LoRa, RegOcp, OcpTrim);
 8000854:	7bfb      	ldrb	r3, [r7, #15]
 8000856:	461a      	mov	r2, r3
 8000858:	210b      	movs	r1, #11
 800085a:	6878      	ldr	r0, [r7, #4]
 800085c:	f000 f83f 	bl	80008de <LoRa_write>
	HAL_Delay(10);
 8000860:	200a      	movs	r0, #10
 8000862:	f000 ff41 	bl	80016e8 <HAL_Delay>
}
 8000866:	bf00      	nop
 8000868:	3710      	adds	r7, #16
 800086a:	46bd      	mov	sp, r7
 800086c:	bd80      	pop	{r7, pc}
 800086e:	bf00      	nop
 8000870:	66666667 	.word	0x66666667

08000874 <LoRa_setTOMsb_setCRCon>:
		description : set timeout msb to 0xFF + set CRC enable.
		arguments   :
			LoRa* LoRa        --> LoRa object handler
		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setTOMsb_setCRCon(LoRa* _LoRa){
 8000874:	b580      	push	{r7, lr}
 8000876:	b084      	sub	sp, #16
 8000878:	af00      	add	r7, sp, #0
 800087a:	6078      	str	r0, [r7, #4]
	uint8_t read, data;

	read = LoRa_read(_LoRa, RegModemConfig2);
 800087c:	211e      	movs	r1, #30
 800087e:	6878      	ldr	r0, [r7, #4]
 8000880:	f000 f813 	bl	80008aa <LoRa_read>
 8000884:	4603      	mov	r3, r0
 8000886:	73fb      	strb	r3, [r7, #15]

	data = read | 0x07;
 8000888:	7bfb      	ldrb	r3, [r7, #15]
 800088a:	f043 0307 	orr.w	r3, r3, #7
 800088e:	73bb      	strb	r3, [r7, #14]
	LoRa_write(_LoRa, RegModemConfig2, data);\
 8000890:	7bbb      	ldrb	r3, [r7, #14]
 8000892:	461a      	mov	r2, r3
 8000894:	211e      	movs	r1, #30
 8000896:	6878      	ldr	r0, [r7, #4]
 8000898:	f000 f821 	bl	80008de <LoRa_write>
	HAL_Delay(10);
 800089c:	200a      	movs	r0, #10
 800089e:	f000 ff23 	bl	80016e8 <HAL_Delay>
}
 80008a2:	bf00      	nop
 80008a4:	3710      	adds	r7, #16
 80008a6:	46bd      	mov	sp, r7
 80008a8:	bd80      	pop	{r7, pc}

080008aa <LoRa_read>:
		arguments   :
			LoRa*   LoRa        --> LoRa object handler
			uint8_t address     -->	address of the register e.g 0x1D
		returns     : register value
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_read(LoRa* _LoRa, uint8_t address){
 80008aa:	b580      	push	{r7, lr}
 80008ac:	b086      	sub	sp, #24
 80008ae:	af02      	add	r7, sp, #8
 80008b0:	6078      	str	r0, [r7, #4]
 80008b2:	460b      	mov	r3, r1
 80008b4:	70fb      	strb	r3, [r7, #3]
	uint8_t read_data;
	uint8_t data_addr;

	data_addr = address & 0x7F;
 80008b6:	78fb      	ldrb	r3, [r7, #3]
 80008b8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80008bc:	b2db      	uxtb	r3, r3
 80008be:	73bb      	strb	r3, [r7, #14]
	LoRa_readReg(_LoRa, &data_addr, 1, &read_data, 1);
 80008c0:	f107 030f 	add.w	r3, r7, #15
 80008c4:	f107 010e 	add.w	r1, r7, #14
 80008c8:	2201      	movs	r2, #1
 80008ca:	9200      	str	r2, [sp, #0]
 80008cc:	2201      	movs	r2, #1
 80008ce:	6878      	ldr	r0, [r7, #4]
 80008d0:	f7ff fea4 	bl	800061c <LoRa_readReg>
	//HAL_Delay(5);

	return read_data;
 80008d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80008d6:	4618      	mov	r0, r3
 80008d8:	3710      	adds	r7, #16
 80008da:	46bd      	mov	sp, r7
 80008dc:	bd80      	pop	{r7, pc}

080008de <LoRa_write>:
			LoRa*   LoRa        --> LoRa object handler
			uint8_t address     -->	address of the register e.g 0x1D
			uint8_t value       --> value that you want to write
		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_write(LoRa* _LoRa, uint8_t address, uint8_t value){
 80008de:	b580      	push	{r7, lr}
 80008e0:	b086      	sub	sp, #24
 80008e2:	af02      	add	r7, sp, #8
 80008e4:	6078      	str	r0, [r7, #4]
 80008e6:	460b      	mov	r3, r1
 80008e8:	70fb      	strb	r3, [r7, #3]
 80008ea:	4613      	mov	r3, r2
 80008ec:	70bb      	strb	r3, [r7, #2]
	uint8_t data;
	uint8_t addr;

	addr = address | 0x80;
 80008ee:	78fb      	ldrb	r3, [r7, #3]
 80008f0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80008f4:	b2db      	uxtb	r3, r3
 80008f6:	73bb      	strb	r3, [r7, #14]
	data = value;
 80008f8:	78bb      	ldrb	r3, [r7, #2]
 80008fa:	73fb      	strb	r3, [r7, #15]
	LoRa_writeReg(_LoRa, &addr, 1, &data, 1);
 80008fc:	f107 030f 	add.w	r3, r7, #15
 8000900:	f107 010e 	add.w	r1, r7, #14
 8000904:	2201      	movs	r2, #1
 8000906:	9200      	str	r2, [sp, #0]
 8000908:	2201      	movs	r2, #1
 800090a:	6878      	ldr	r0, [r7, #4]
 800090c:	f7ff fec4 	bl	8000698 <LoRa_writeReg>
	//HAL_Delay(5);
}
 8000910:	bf00      	nop
 8000912:	3710      	adds	r7, #16
 8000914:	46bd      	mov	sp, r7
 8000916:	bd80      	pop	{r7, pc}

08000918 <LoRa_BurstWrite>:
			LoRa*   LoRa        --> LoRa object handler
			uint8_t address     -->	address of the register e.g 0x1D
			uint8_t *value      --> address of values that you want to write
		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_BurstWrite(LoRa* _LoRa, uint8_t address, uint8_t *value, uint8_t length){
 8000918:	b580      	push	{r7, lr}
 800091a:	b086      	sub	sp, #24
 800091c:	af00      	add	r7, sp, #0
 800091e:	60f8      	str	r0, [r7, #12]
 8000920:	607a      	str	r2, [r7, #4]
 8000922:	461a      	mov	r2, r3
 8000924:	460b      	mov	r3, r1
 8000926:	72fb      	strb	r3, [r7, #11]
 8000928:	4613      	mov	r3, r2
 800092a:	72bb      	strb	r3, [r7, #10]
	uint8_t addr;
	addr = address | 0x80;
 800092c:	7afb      	ldrb	r3, [r7, #11]
 800092e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000932:	b2db      	uxtb	r3, r3
 8000934:	75fb      	strb	r3, [r7, #23]

	//NSS = 1
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_RESET);
 8000936:	68fb      	ldr	r3, [r7, #12]
 8000938:	6818      	ldr	r0, [r3, #0]
 800093a:	68fb      	ldr	r3, [r7, #12]
 800093c:	889b      	ldrh	r3, [r3, #4]
 800093e:	2200      	movs	r2, #0
 8000940:	4619      	mov	r1, r3
 8000942:	f001 fa35 	bl	8001db0 <HAL_GPIO_WritePin>
	//say module thai I want to write in RegFiFo
	HAL_SPI_Transmit(_LoRa->hSPIx, &addr, 1, TRANSMIT_TIMEOUT);
 8000946:	68fb      	ldr	r3, [r7, #12]
 8000948:	6998      	ldr	r0, [r3, #24]
 800094a:	f107 0117 	add.w	r1, r7, #23
 800094e:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000952:	2201      	movs	r2, #1
 8000954:	f003 f9a3 	bl	8003c9e <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8000958:	bf00      	nop
 800095a:	68fb      	ldr	r3, [r7, #12]
 800095c:	699b      	ldr	r3, [r3, #24]
 800095e:	4618      	mov	r0, r3
 8000960:	f003 fd8c 	bl	800447c <HAL_SPI_GetState>
 8000964:	4603      	mov	r3, r0
 8000966:	2b01      	cmp	r3, #1
 8000968:	d1f7      	bne.n	800095a <LoRa_BurstWrite+0x42>
		;
	//Write data in FiFo
	HAL_SPI_Transmit(_LoRa->hSPIx, value, length, TRANSMIT_TIMEOUT);
 800096a:	68fb      	ldr	r3, [r7, #12]
 800096c:	6998      	ldr	r0, [r3, #24]
 800096e:	7abb      	ldrb	r3, [r7, #10]
 8000970:	b29a      	uxth	r2, r3
 8000972:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000976:	6879      	ldr	r1, [r7, #4]
 8000978:	f003 f991 	bl	8003c9e <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 800097c:	bf00      	nop
 800097e:	68fb      	ldr	r3, [r7, #12]
 8000980:	699b      	ldr	r3, [r3, #24]
 8000982:	4618      	mov	r0, r3
 8000984:	f003 fd7a 	bl	800447c <HAL_SPI_GetState>
 8000988:	4603      	mov	r3, r0
 800098a:	2b01      	cmp	r3, #1
 800098c:	d1f7      	bne.n	800097e <LoRa_BurstWrite+0x66>
		;
	//NSS = 0
	//HAL_Delay(5);
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_SET);
 800098e:	68fb      	ldr	r3, [r7, #12]
 8000990:	6818      	ldr	r0, [r3, #0]
 8000992:	68fb      	ldr	r3, [r7, #12]
 8000994:	889b      	ldrh	r3, [r3, #4]
 8000996:	2201      	movs	r2, #1
 8000998:	4619      	mov	r1, r3
 800099a:	f001 fa09 	bl	8001db0 <HAL_GPIO_WritePin>
}
 800099e:	bf00      	nop
 80009a0:	3718      	adds	r7, #24
 80009a2:	46bd      	mov	sp, r7
 80009a4:	bd80      	pop	{r7, pc}

080009a6 <LoRa_isvalid>:
		description : check the LoRa instruct values
		arguments   :
			LoRa* LoRa --> LoRa object handler
		returns     : returns 1 if all of the values were given, otherwise returns 0
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_isvalid(LoRa* _LoRa){
 80009a6:	b480      	push	{r7}
 80009a8:	b083      	sub	sp, #12
 80009aa:	af00      	add	r7, sp, #0
 80009ac:	6078      	str	r0, [r7, #4]

	return 1;
 80009ae:	2301      	movs	r3, #1
}
 80009b0:	4618      	mov	r0, r3
 80009b2:	370c      	adds	r7, #12
 80009b4:	46bd      	mov	sp, r7
 80009b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ba:	4770      	bx	lr

080009bc <LoRa_transmit>:
			uint8_t  data			--> A pointer to the data you wanna send
			uint8_t	 length   --> Size of your data in Bytes
			uint16_t timeOut	--> Timeout in milliseconds
		returns     : 1 in case of success, 0 in case of timeout
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_transmit(LoRa* _LoRa, uint8_t* data, uint8_t length, uint16_t timeout){
 80009bc:	b580      	push	{r7, lr}
 80009be:	b086      	sub	sp, #24
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	60f8      	str	r0, [r7, #12]
 80009c4:	60b9      	str	r1, [r7, #8]
 80009c6:	4611      	mov	r1, r2
 80009c8:	461a      	mov	r2, r3
 80009ca:	460b      	mov	r3, r1
 80009cc:	71fb      	strb	r3, [r7, #7]
 80009ce:	4613      	mov	r3, r2
 80009d0:	80bb      	strh	r3, [r7, #4]
	uint8_t read;

	int mode = _LoRa->current_mode;
 80009d2:	68fb      	ldr	r3, [r7, #12]
 80009d4:	69db      	ldr	r3, [r3, #28]
 80009d6:	617b      	str	r3, [r7, #20]
	LoRa_gotoMode(_LoRa, STNBY_MODE);
 80009d8:	2101      	movs	r1, #1
 80009da:	68f8      	ldr	r0, [r7, #12]
 80009dc:	f7ff fdbd 	bl	800055a <LoRa_gotoMode>
	read = LoRa_read(_LoRa, RegFiFoTxBaseAddr);
 80009e0:	210e      	movs	r1, #14
 80009e2:	68f8      	ldr	r0, [r7, #12]
 80009e4:	f7ff ff61 	bl	80008aa <LoRa_read>
 80009e8:	4603      	mov	r3, r0
 80009ea:	74fb      	strb	r3, [r7, #19]
	LoRa_write(_LoRa, RegFiFoAddPtr, read);
 80009ec:	7cfb      	ldrb	r3, [r7, #19]
 80009ee:	461a      	mov	r2, r3
 80009f0:	210d      	movs	r1, #13
 80009f2:	68f8      	ldr	r0, [r7, #12]
 80009f4:	f7ff ff73 	bl	80008de <LoRa_write>
	LoRa_write(_LoRa, RegPayloadLength, length);
 80009f8:	79fb      	ldrb	r3, [r7, #7]
 80009fa:	461a      	mov	r2, r3
 80009fc:	2122      	movs	r1, #34	; 0x22
 80009fe:	68f8      	ldr	r0, [r7, #12]
 8000a00:	f7ff ff6d 	bl	80008de <LoRa_write>
	LoRa_BurstWrite(_LoRa, RegFiFo, data, length);
 8000a04:	79fb      	ldrb	r3, [r7, #7]
 8000a06:	68ba      	ldr	r2, [r7, #8]
 8000a08:	2100      	movs	r1, #0
 8000a0a:	68f8      	ldr	r0, [r7, #12]
 8000a0c:	f7ff ff84 	bl	8000918 <LoRa_BurstWrite>
	LoRa_gotoMode(_LoRa, TRANSMIT_MODE);
 8000a10:	2103      	movs	r1, #3
 8000a12:	68f8      	ldr	r0, [r7, #12]
 8000a14:	f7ff fda1 	bl	800055a <LoRa_gotoMode>
	while(1){
		read = LoRa_read(_LoRa, RegIrqFlags);
 8000a18:	2112      	movs	r1, #18
 8000a1a:	68f8      	ldr	r0, [r7, #12]
 8000a1c:	f7ff ff45 	bl	80008aa <LoRa_read>
 8000a20:	4603      	mov	r3, r0
 8000a22:	74fb      	strb	r3, [r7, #19]
		if((read & 0x08)!=0){
 8000a24:	7cfb      	ldrb	r3, [r7, #19]
 8000a26:	f003 0308 	and.w	r3, r3, #8
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d00a      	beq.n	8000a44 <LoRa_transmit+0x88>
			LoRa_write(_LoRa, RegIrqFlags, 0xFF);
 8000a2e:	22ff      	movs	r2, #255	; 0xff
 8000a30:	2112      	movs	r1, #18
 8000a32:	68f8      	ldr	r0, [r7, #12]
 8000a34:	f7ff ff53 	bl	80008de <LoRa_write>
			LoRa_gotoMode(_LoRa, mode);
 8000a38:	6979      	ldr	r1, [r7, #20]
 8000a3a:	68f8      	ldr	r0, [r7, #12]
 8000a3c:	f7ff fd8d 	bl	800055a <LoRa_gotoMode>
			return 1;
 8000a40:	2301      	movs	r3, #1
 8000a42:	e00f      	b.n	8000a64 <LoRa_transmit+0xa8>
		}
		else{
			if(--timeout==0){
 8000a44:	88bb      	ldrh	r3, [r7, #4]
 8000a46:	3b01      	subs	r3, #1
 8000a48:	80bb      	strh	r3, [r7, #4]
 8000a4a:	88bb      	ldrh	r3, [r7, #4]
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d105      	bne.n	8000a5c <LoRa_transmit+0xa0>
				LoRa_gotoMode(_LoRa, mode);
 8000a50:	6979      	ldr	r1, [r7, #20]
 8000a52:	68f8      	ldr	r0, [r7, #12]
 8000a54:	f7ff fd81 	bl	800055a <LoRa_gotoMode>
				return 0;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	e003      	b.n	8000a64 <LoRa_transmit+0xa8>
			}
		}
		HAL_Delay(1);
 8000a5c:	2001      	movs	r0, #1
 8000a5e:	f000 fe43 	bl	80016e8 <HAL_Delay>
		read = LoRa_read(_LoRa, RegIrqFlags);
 8000a62:	e7d9      	b.n	8000a18 <LoRa_transmit+0x5c>
	}

}
 8000a64:	4618      	mov	r0, r3
 8000a66:	3718      	adds	r7, #24
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	bd80      	pop	{r7, pc}

08000a6c <LoRa_startReceiving>:
		description : Start receiving continuously
		arguments   :
			LoRa*    LoRa     --> LoRa object handler
		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_startReceiving(LoRa* _LoRa){
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b082      	sub	sp, #8
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	6078      	str	r0, [r7, #4]
	LoRa_gotoMode(_LoRa, RXCONTIN_MODE);
 8000a74:	2105      	movs	r1, #5
 8000a76:	6878      	ldr	r0, [r7, #4]
 8000a78:	f7ff fd6f 	bl	800055a <LoRa_gotoMode>
}
 8000a7c:	bf00      	nop
 8000a7e:	3708      	adds	r7, #8
 8000a80:	46bd      	mov	sp, r7
 8000a82:	bd80      	pop	{r7, pc}

08000a84 <LoRa_receive>:
			LoRa*    LoRa     --> LoRa object handler
			uint8_t  data			--> A pointer to the array that you want to write bytes in it
			uint8_t	 length   --> Determines how many bytes you want to read
		returns     : The number of bytes received
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_receive(LoRa* _LoRa, uint8_t* data, uint8_t length){
 8000a84:	b590      	push	{r4, r7, lr}
 8000a86:	b089      	sub	sp, #36	; 0x24
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	60f8      	str	r0, [r7, #12]
 8000a8c:	60b9      	str	r1, [r7, #8]
 8000a8e:	4613      	mov	r3, r2
 8000a90:	71fb      	strb	r3, [r7, #7]
	uint8_t read;
	uint8_t number_of_bytes;
	uint8_t min = 0;
 8000a92:	2300      	movs	r3, #0
 8000a94:	77fb      	strb	r3, [r7, #31]

	for(int i=0; i<length; i++)
 8000a96:	2300      	movs	r3, #0
 8000a98:	61bb      	str	r3, [r7, #24]
 8000a9a:	e007      	b.n	8000aac <LoRa_receive+0x28>
		data[i]=0;
 8000a9c:	69bb      	ldr	r3, [r7, #24]
 8000a9e:	68ba      	ldr	r2, [r7, #8]
 8000aa0:	4413      	add	r3, r2
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	701a      	strb	r2, [r3, #0]
	for(int i=0; i<length; i++)
 8000aa6:	69bb      	ldr	r3, [r7, #24]
 8000aa8:	3301      	adds	r3, #1
 8000aaa:	61bb      	str	r3, [r7, #24]
 8000aac:	79fb      	ldrb	r3, [r7, #7]
 8000aae:	69ba      	ldr	r2, [r7, #24]
 8000ab0:	429a      	cmp	r2, r3
 8000ab2:	dbf3      	blt.n	8000a9c <LoRa_receive+0x18>

	LoRa_gotoMode(_LoRa, STNBY_MODE);
 8000ab4:	2101      	movs	r1, #1
 8000ab6:	68f8      	ldr	r0, [r7, #12]
 8000ab8:	f7ff fd4f 	bl	800055a <LoRa_gotoMode>
	read = LoRa_read(_LoRa, RegIrqFlags);
 8000abc:	2112      	movs	r1, #18
 8000abe:	68f8      	ldr	r0, [r7, #12]
 8000ac0:	f7ff fef3 	bl	80008aa <LoRa_read>
 8000ac4:	4603      	mov	r3, r0
 8000ac6:	74fb      	strb	r3, [r7, #19]
	if((read & 0x40) != 0){
 8000ac8:	7cfb      	ldrb	r3, [r7, #19]
 8000aca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d02f      	beq.n	8000b32 <LoRa_receive+0xae>
		LoRa_write(_LoRa, RegIrqFlags, 0xFF);
 8000ad2:	22ff      	movs	r2, #255	; 0xff
 8000ad4:	2112      	movs	r1, #18
 8000ad6:	68f8      	ldr	r0, [r7, #12]
 8000ad8:	f7ff ff01 	bl	80008de <LoRa_write>
		number_of_bytes = LoRa_read(_LoRa, RegRxNbBytes);
 8000adc:	2113      	movs	r1, #19
 8000ade:	68f8      	ldr	r0, [r7, #12]
 8000ae0:	f7ff fee3 	bl	80008aa <LoRa_read>
 8000ae4:	4603      	mov	r3, r0
 8000ae6:	74bb      	strb	r3, [r7, #18]
		read = LoRa_read(_LoRa, RegFiFoRxCurrentAddr);
 8000ae8:	2110      	movs	r1, #16
 8000aea:	68f8      	ldr	r0, [r7, #12]
 8000aec:	f7ff fedd 	bl	80008aa <LoRa_read>
 8000af0:	4603      	mov	r3, r0
 8000af2:	74fb      	strb	r3, [r7, #19]
		LoRa_write(_LoRa, RegFiFoAddPtr, read);
 8000af4:	7cfb      	ldrb	r3, [r7, #19]
 8000af6:	461a      	mov	r2, r3
 8000af8:	210d      	movs	r1, #13
 8000afa:	68f8      	ldr	r0, [r7, #12]
 8000afc:	f7ff feef 	bl	80008de <LoRa_write>
		min = length >= number_of_bytes ? number_of_bytes : length;
 8000b00:	7cba      	ldrb	r2, [r7, #18]
 8000b02:	79fb      	ldrb	r3, [r7, #7]
 8000b04:	4293      	cmp	r3, r2
 8000b06:	bf28      	it	cs
 8000b08:	4613      	movcs	r3, r2
 8000b0a:	77fb      	strb	r3, [r7, #31]
		for(int i=0; i<min; i++)
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	617b      	str	r3, [r7, #20]
 8000b10:	e00b      	b.n	8000b2a <LoRa_receive+0xa6>
			data[i] = LoRa_read(_LoRa, RegFiFo);
 8000b12:	697b      	ldr	r3, [r7, #20]
 8000b14:	68ba      	ldr	r2, [r7, #8]
 8000b16:	18d4      	adds	r4, r2, r3
 8000b18:	2100      	movs	r1, #0
 8000b1a:	68f8      	ldr	r0, [r7, #12]
 8000b1c:	f7ff fec5 	bl	80008aa <LoRa_read>
 8000b20:	4603      	mov	r3, r0
 8000b22:	7023      	strb	r3, [r4, #0]
		for(int i=0; i<min; i++)
 8000b24:	697b      	ldr	r3, [r7, #20]
 8000b26:	3301      	adds	r3, #1
 8000b28:	617b      	str	r3, [r7, #20]
 8000b2a:	7ffb      	ldrb	r3, [r7, #31]
 8000b2c:	697a      	ldr	r2, [r7, #20]
 8000b2e:	429a      	cmp	r2, r3
 8000b30:	dbef      	blt.n	8000b12 <LoRa_receive+0x8e>
	}
	LoRa_gotoMode(_LoRa, RXCONTIN_MODE);
 8000b32:	2105      	movs	r1, #5
 8000b34:	68f8      	ldr	r0, [r7, #12]
 8000b36:	f7ff fd10 	bl	800055a <LoRa_gotoMode>
    return min;
 8000b3a:	7ffb      	ldrb	r3, [r7, #31]
}
 8000b3c:	4618      	mov	r0, r3
 8000b3e:	3724      	adds	r7, #36	; 0x24
 8000b40:	46bd      	mov	sp, r7
 8000b42:	bd90      	pop	{r4, r7, pc}

08000b44 <LoRa_init>:
		description : initialize and set the right setting according to LoRa sruct vars
		arguments   :
			LoRa* LoRa        --> LoRa object handler
		returns     : Nothing
\* ----------------------------------------------------------------------------- */
uint16_t LoRa_init(LoRa* _LoRa){
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b084      	sub	sp, #16
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	6078      	str	r0, [r7, #4]
	uint8_t    data;
	uint8_t    read;

	if(LoRa_isvalid(_LoRa)){
 8000b4c:	6878      	ldr	r0, [r7, #4]
 8000b4e:	f7ff ff2a 	bl	80009a6 <LoRa_isvalid>
 8000b52:	4603      	mov	r3, r0
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	f000 8093 	beq.w	8000c80 <LoRa_init+0x13c>
		// goto sleep mode:
			LoRa_gotoMode(_LoRa, SLEEP_MODE);
 8000b5a:	2100      	movs	r1, #0
 8000b5c:	6878      	ldr	r0, [r7, #4]
 8000b5e:	f7ff fcfc 	bl	800055a <LoRa_gotoMode>
			HAL_Delay(10);
 8000b62:	200a      	movs	r0, #10
 8000b64:	f000 fdc0 	bl	80016e8 <HAL_Delay>

		// turn on lora mode:
			read = LoRa_read(_LoRa, RegOpMode);
 8000b68:	2101      	movs	r1, #1
 8000b6a:	6878      	ldr	r0, [r7, #4]
 8000b6c:	f7ff fe9d 	bl	80008aa <LoRa_read>
 8000b70:	4603      	mov	r3, r0
 8000b72:	73fb      	strb	r3, [r7, #15]
			HAL_Delay(10);
 8000b74:	200a      	movs	r0, #10
 8000b76:	f000 fdb7 	bl	80016e8 <HAL_Delay>
			data = read | 0x80;
 8000b7a:	7bfb      	ldrb	r3, [r7, #15]
 8000b7c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000b80:	73bb      	strb	r3, [r7, #14]
			LoRa_write(_LoRa, RegOpMode, data);
 8000b82:	7bbb      	ldrb	r3, [r7, #14]
 8000b84:	461a      	mov	r2, r3
 8000b86:	2101      	movs	r1, #1
 8000b88:	6878      	ldr	r0, [r7, #4]
 8000b8a:	f7ff fea8 	bl	80008de <LoRa_write>
			HAL_Delay(100);
 8000b8e:	2064      	movs	r0, #100	; 0x64
 8000b90:	f000 fdaa 	bl	80016e8 <HAL_Delay>

		// set frequency:
			LoRa_setFrequency(_LoRa, _LoRa->frequency);
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	6a1b      	ldr	r3, [r3, #32]
 8000b98:	4619      	mov	r1, r3
 8000b9a:	6878      	ldr	r0, [r7, #4]
 8000b9c:	f7ff fdba 	bl	8000714 <LoRa_setFrequency>

		// set output power gain:
			LoRa_setPower(_LoRa, _LoRa->power);
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8000ba6:	4619      	mov	r1, r3
 8000ba8:	6878      	ldr	r0, [r7, #4]
 8000baa:	f7ff fe12 	bl	80007d2 <LoRa_setPower>

		// set over current protection:
			LoRa_setOCP(_LoRa, _LoRa->overCurrentProtection);
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8000bb4:	4619      	mov	r1, r3
 8000bb6:	6878      	ldr	r0, [r7, #4]
 8000bb8:	f7ff fe1e 	bl	80007f8 <LoRa_setOCP>

		// set LNA gain:
			LoRa_write(_LoRa, RegLna, 0x23);
 8000bbc:	2223      	movs	r2, #35	; 0x23
 8000bbe:	210c      	movs	r1, #12
 8000bc0:	6878      	ldr	r0, [r7, #4]
 8000bc2:	f7ff fe8c 	bl	80008de <LoRa_write>

		// set spreading factor, CRC on, and Timeout Msb:
			LoRa_setTOMsb_setCRCon(_LoRa);
 8000bc6:	6878      	ldr	r0, [r7, #4]
 8000bc8:	f7ff fe54 	bl	8000874 <LoRa_setTOMsb_setCRCon>
			LoRa_setSpreadingFactor(_LoRa, _LoRa->spredingFactor);
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000bd2:	4619      	mov	r1, r3
 8000bd4:	6878      	ldr	r0, [r7, #4]
 8000bd6:	f7ff fdcd 	bl	8000774 <LoRa_setSpreadingFactor>

		// set Timeout Lsb:
			LoRa_write(_LoRa, RegSymbTimeoutL, 0xFF);
 8000bda:	22ff      	movs	r2, #255	; 0xff
 8000bdc:	211f      	movs	r1, #31
 8000bde:	6878      	ldr	r0, [r7, #4]
 8000be0:	f7ff fe7d 	bl	80008de <LoRa_write>

		// set bandwidth, coding rate and expilicit mode:
			// 8 bit RegModemConfig --> | X | X | X | X | X | X | X | X |
			//       bits represent --> |   bandwidth   |     CR    |I/E|
			data = 0;
 8000be4:	2300      	movs	r3, #0
 8000be6:	73bb      	strb	r3, [r7, #14]
			data = (_LoRa->bandWidth << 4) + (_LoRa->crcRate << 1);
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000bee:	011b      	lsls	r3, r3, #4
 8000bf0:	b2da      	uxtb	r2, r3
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8000bf8:	005b      	lsls	r3, r3, #1
 8000bfa:	b2db      	uxtb	r3, r3
 8000bfc:	4413      	add	r3, r2
 8000bfe:	73bb      	strb	r3, [r7, #14]
			LoRa_write(_LoRa, RegModemConfig1, data);
 8000c00:	7bbb      	ldrb	r3, [r7, #14]
 8000c02:	461a      	mov	r2, r3
 8000c04:	211d      	movs	r1, #29
 8000c06:	6878      	ldr	r0, [r7, #4]
 8000c08:	f7ff fe69 	bl	80008de <LoRa_write>

		// set preamble:
			LoRa_write(_LoRa, RegPreambleMsb, _LoRa->preamble >> 8);
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000c10:	0a1b      	lsrs	r3, r3, #8
 8000c12:	b29b      	uxth	r3, r3
 8000c14:	b2db      	uxtb	r3, r3
 8000c16:	461a      	mov	r2, r3
 8000c18:	2120      	movs	r1, #32
 8000c1a:	6878      	ldr	r0, [r7, #4]
 8000c1c:	f7ff fe5f 	bl	80008de <LoRa_write>
			LoRa_write(_LoRa, RegPreambleLsb, _LoRa->preamble >> 0);
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000c24:	b2db      	uxtb	r3, r3
 8000c26:	461a      	mov	r2, r3
 8000c28:	2121      	movs	r1, #33	; 0x21
 8000c2a:	6878      	ldr	r0, [r7, #4]
 8000c2c:	f7ff fe57 	bl	80008de <LoRa_write>

		// DIO mapping:   --> DIO: RxDone
			read = LoRa_read(_LoRa, RegDioMapping1);
 8000c30:	2140      	movs	r1, #64	; 0x40
 8000c32:	6878      	ldr	r0, [r7, #4]
 8000c34:	f7ff fe39 	bl	80008aa <LoRa_read>
 8000c38:	4603      	mov	r3, r0
 8000c3a:	73fb      	strb	r3, [r7, #15]
			data = read | 0x3F;
 8000c3c:	7bfb      	ldrb	r3, [r7, #15]
 8000c3e:	f043 033f 	orr.w	r3, r3, #63	; 0x3f
 8000c42:	73bb      	strb	r3, [r7, #14]
			LoRa_write(_LoRa, RegDioMapping1, data);
 8000c44:	7bbb      	ldrb	r3, [r7, #14]
 8000c46:	461a      	mov	r2, r3
 8000c48:	2140      	movs	r1, #64	; 0x40
 8000c4a:	6878      	ldr	r0, [r7, #4]
 8000c4c:	f7ff fe47 	bl	80008de <LoRa_write>

		// goto standby mode:
			LoRa_gotoMode(_LoRa, STNBY_MODE);
 8000c50:	2101      	movs	r1, #1
 8000c52:	6878      	ldr	r0, [r7, #4]
 8000c54:	f7ff fc81 	bl	800055a <LoRa_gotoMode>
			_LoRa->current_mode = STNBY_MODE;
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	2201      	movs	r2, #1
 8000c5c:	61da      	str	r2, [r3, #28]
			HAL_Delay(10);
 8000c5e:	200a      	movs	r0, #10
 8000c60:	f000 fd42 	bl	80016e8 <HAL_Delay>

			read = LoRa_read(_LoRa, RegVersion);
 8000c64:	2142      	movs	r1, #66	; 0x42
 8000c66:	6878      	ldr	r0, [r7, #4]
 8000c68:	f7ff fe1f 	bl	80008aa <LoRa_read>
 8000c6c:	4603      	mov	r3, r0
 8000c6e:	73fb      	strb	r3, [r7, #15]
			if(read == 0x12)
 8000c70:	7bfb      	ldrb	r3, [r7, #15]
 8000c72:	2b12      	cmp	r3, #18
 8000c74:	d101      	bne.n	8000c7a <LoRa_init+0x136>
				return LORA_OK;
 8000c76:	23c8      	movs	r3, #200	; 0xc8
 8000c78:	e004      	b.n	8000c84 <LoRa_init+0x140>
			else
				return LORA_NOT_FOUND;
 8000c7a:	f44f 73ca 	mov.w	r3, #404	; 0x194
 8000c7e:	e001      	b.n	8000c84 <LoRa_init+0x140>
	}
	else {
		return LORA_UNAVAILABLE;
 8000c80:	f240 13f7 	movw	r3, #503	; 0x1f7
	}
}
 8000c84:	4618      	mov	r0, r3
 8000c86:	3710      	adds	r7, #16
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	bd80      	pop	{r7, pc}

08000c8c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c8c:	b5b0      	push	{r4, r5, r7, lr}
 8000c8e:	b08c      	sub	sp, #48	; 0x30
 8000c90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  RetargetInit(USB_UART);
 8000c92:	4b46      	ldr	r3, [pc, #280]	; (8000dac <main+0x120>)
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	4618      	mov	r0, r3
 8000c98:	f000 fa4e 	bl	8001138 <RetargetInit>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c9c:	f000 fcb2 	bl	8001604 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ca0:	f000 f896 	bl	8000dd0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ca4:	f000 f988 	bl	8000fb8 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000ca8:	f000 f932 	bl	8000f10 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000cac:	f000 f95a 	bl	8000f64 <MX_USART2_UART_Init>
  MX_USB_DEVICE_Init();
 8000cb0:	f008 fa0c 	bl	80090cc <MX_USB_DEVICE_Init>
  MX_SPI1_Init();
 8000cb4:	f000 f8f6 	bl	8000ea4 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  // UART interrupt init
  HAL_UART_Receive_IT (USB_UART, UART_Buff, sizeof(UART_Buff));
 8000cb8:	4b3c      	ldr	r3, [pc, #240]	; (8000dac <main+0x120>)
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000cc0:	493b      	ldr	r1, [pc, #236]	; (8000db0 <main+0x124>)
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	f003 fe99 	bl	80049fa <HAL_UART_Receive_IT>

  // LoRa Class definitions
  LoRaClass = newLoRa();
 8000cc8:	4c3a      	ldr	r4, [pc, #232]	; (8000db4 <main+0x128>)
 8000cca:	463b      	mov	r3, r7
 8000ccc:	4618      	mov	r0, r3
 8000cce:	f7ff fbfd 	bl	80004cc <newLoRa>
 8000cd2:	4625      	mov	r5, r4
 8000cd4:	463c      	mov	r4, r7
 8000cd6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000cd8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000cda:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000cdc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000cde:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8000ce2:	e885 0007 	stmia.w	r5, {r0, r1, r2}
  LoRaClass.hSPIx                 = RF_SPI;
 8000ce6:	4b34      	ldr	r3, [pc, #208]	; (8000db8 <main+0x12c>)
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	4a32      	ldr	r2, [pc, #200]	; (8000db4 <main+0x128>)
 8000cec:	6193      	str	r3, [r2, #24]
  LoRaClass.CS_port               = RF_SPI_NSS_GPIO_Port;
 8000cee:	4b31      	ldr	r3, [pc, #196]	; (8000db4 <main+0x128>)
 8000cf0:	4a32      	ldr	r2, [pc, #200]	; (8000dbc <main+0x130>)
 8000cf2:	601a      	str	r2, [r3, #0]
  LoRaClass.CS_pin                = RF_SPI_NSS_Pin;
 8000cf4:	4b2f      	ldr	r3, [pc, #188]	; (8000db4 <main+0x128>)
 8000cf6:	2210      	movs	r2, #16
 8000cf8:	809a      	strh	r2, [r3, #4]
  LoRaClass.reset_port            = RESET_RF_GPIO_Port;
 8000cfa:	4b2e      	ldr	r3, [pc, #184]	; (8000db4 <main+0x128>)
 8000cfc:	4a30      	ldr	r2, [pc, #192]	; (8000dc0 <main+0x134>)
 8000cfe:	609a      	str	r2, [r3, #8]
  LoRaClass.reset_pin             = RESET_RF_Pin;
 8000d00:	4b2c      	ldr	r3, [pc, #176]	; (8000db4 <main+0x128>)
 8000d02:	2201      	movs	r2, #1
 8000d04:	819a      	strh	r2, [r3, #12]
  LoRaClass.DIO0_port			  = IO1_RF_GPIO_Port;
 8000d06:	4b2b      	ldr	r3, [pc, #172]	; (8000db4 <main+0x128>)
 8000d08:	4a2d      	ldr	r2, [pc, #180]	; (8000dc0 <main+0x134>)
 8000d0a:	611a      	str	r2, [r3, #16]
  LoRaClass.DIO0_pin			  = IO1_RF_Pin;
 8000d0c:	4b29      	ldr	r3, [pc, #164]	; (8000db4 <main+0x128>)
 8000d0e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000d12:	829a      	strh	r2, [r3, #20]

  LoRaClass.frequency             = 915;
 8000d14:	4b27      	ldr	r3, [pc, #156]	; (8000db4 <main+0x128>)
 8000d16:	f240 3293 	movw	r2, #915	; 0x393
 8000d1a:	621a      	str	r2, [r3, #32]
  LoRaClass.spredingFactor        = SF_7;						// default = SF_7
 8000d1c:	4b25      	ldr	r3, [pc, #148]	; (8000db4 <main+0x128>)
 8000d1e:	2207      	movs	r2, #7
 8000d20:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  LoRaClass.bandWidth			  = BW_125KHz;				  	// default = BW_125KHz
 8000d24:	4b23      	ldr	r3, [pc, #140]	; (8000db4 <main+0x128>)
 8000d26:	2207      	movs	r2, #7
 8000d28:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  LoRaClass.crcRate				  = CR_4_5;						// default = CR_4_5
 8000d2c:	4b21      	ldr	r3, [pc, #132]	; (8000db4 <main+0x128>)
 8000d2e:	2201      	movs	r2, #1
 8000d30:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  LoRaClass.power			      = POWER_20db;					// default = 20db
 8000d34:	4b1f      	ldr	r3, [pc, #124]	; (8000db4 <main+0x128>)
 8000d36:	22ff      	movs	r2, #255	; 0xff
 8000d38:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  LoRaClass.overCurrentProtection = 120; 						// default = 100 mA
 8000d3c:	4b1d      	ldr	r3, [pc, #116]	; (8000db4 <main+0x128>)
 8000d3e:	2278      	movs	r2, #120	; 0x78
 8000d40:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  LoRaClass.preamble			  = 10;		  					// default = 8;
 8000d44:	4b1b      	ldr	r3, [pc, #108]	; (8000db4 <main+0x128>)
 8000d46:	220a      	movs	r2, #10
 8000d48:	851a      	strh	r2, [r3, #40]	; 0x28

  LoRa_reset(&LoRaClass);
 8000d4a:	481a      	ldr	r0, [pc, #104]	; (8000db4 <main+0x128>)
 8000d4c:	f7ff fbe7 	bl	800051e <LoRa_reset>
  LoRa_init(&LoRaClass);
 8000d50:	4818      	ldr	r0, [pc, #96]	; (8000db4 <main+0x128>)
 8000d52:	f7ff fef7 	bl	8000b44 <LoRa_init>

  // START CONTINUOUS RECEIVING -----------------------------------
  LoRa_startReceiving(&LoRaClass);
 8000d56:	4817      	ldr	r0, [pc, #92]	; (8000db4 <main+0x128>)
 8000d58:	f7ff fe88 	bl	8000a6c <LoRa_startReceiving>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  if(RF_avilable_bytes) {
 8000d5c:	4b19      	ldr	r3, [pc, #100]	; (8000dc4 <main+0x138>)
 8000d5e:	781b      	ldrb	r3, [r3, #0]
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d013      	beq.n	8000d8c <main+0x100>
		  // Bytes in RF RX buffer to read
		  // Read bytes into buffer
		  LoRa_receive(&LoRaClass, RF_RX_Buff, RF_avilable_bytes);
 8000d64:	4b17      	ldr	r3, [pc, #92]	; (8000dc4 <main+0x138>)
 8000d66:	781b      	ldrb	r3, [r3, #0]
 8000d68:	461a      	mov	r2, r3
 8000d6a:	4917      	ldr	r1, [pc, #92]	; (8000dc8 <main+0x13c>)
 8000d6c:	4811      	ldr	r0, [pc, #68]	; (8000db4 <main+0x128>)
 8000d6e:	f7ff fe89 	bl	8000a84 <LoRa_receive>
		  // Transmit bytes from RF_RX_Buff over UART
		  HAL_UART_Transmit(USB_UART, RF_RX_Buff, RF_avilable_bytes, 1000);
 8000d72:	4b0e      	ldr	r3, [pc, #56]	; (8000dac <main+0x120>)
 8000d74:	6818      	ldr	r0, [r3, #0]
 8000d76:	4b13      	ldr	r3, [pc, #76]	; (8000dc4 <main+0x138>)
 8000d78:	781b      	ldrb	r3, [r3, #0]
 8000d7a:	b29a      	uxth	r2, r3
 8000d7c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d80:	4911      	ldr	r1, [pc, #68]	; (8000dc8 <main+0x13c>)
 8000d82:	f003 fd06 	bl	8004792 <HAL_UART_Transmit>
		  RF_avilable_bytes = 0;
 8000d86:	4b0f      	ldr	r3, [pc, #60]	; (8000dc4 <main+0x138>)
 8000d88:	2200      	movs	r2, #0
 8000d8a:	701a      	strb	r2, [r3, #0]
	  }

	  if(UART_READY) {
 8000d8c:	4b0f      	ldr	r3, [pc, #60]	; (8000dcc <main+0x140>)
 8000d8e:	781b      	ldrb	r3, [r3, #0]
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d0e3      	beq.n	8000d5c <main+0xd0>
		  UART_READY = false;
 8000d94:	4b0d      	ldr	r3, [pc, #52]	; (8000dcc <main+0x140>)
 8000d96:	2200      	movs	r2, #0
 8000d98:	701a      	strb	r2, [r3, #0]
		  // Transmit UART buffer over RF
		  if (!LoRa_transmit(&LoRaClass, UART_Buff, (uint8_t)sizeof(UART_Buff), 1000)) {
 8000d9a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d9e:	2200      	movs	r2, #0
 8000da0:	4903      	ldr	r1, [pc, #12]	; (8000db0 <main+0x124>)
 8000da2:	4804      	ldr	r0, [pc, #16]	; (8000db4 <main+0x128>)
 8000da4:	f7ff fe0a 	bl	80009bc <LoRa_transmit>
	  if(RF_avilable_bytes) {
 8000da8:	e7d8      	b.n	8000d5c <main+0xd0>
 8000daa:	bf00      	nop
 8000dac:	20000000 	.word	0x20000000
 8000db0:	20000368 	.word	0x20000368
 8000db4:	2000046c 	.word	0x2000046c
 8000db8:	20000004 	.word	0x20000004
 8000dbc:	40020000 	.word	0x40020000
 8000dc0:	40020400 	.word	0x40020400
 8000dc4:	20000264 	.word	0x20000264
 8000dc8:	20000268 	.word	0x20000268
 8000dcc:	20000468 	.word	0x20000468

08000dd0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b094      	sub	sp, #80	; 0x50
 8000dd4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000dd6:	f107 0320 	add.w	r3, r7, #32
 8000dda:	2230      	movs	r2, #48	; 0x30
 8000ddc:	2100      	movs	r1, #0
 8000dde:	4618      	mov	r0, r3
 8000de0:	f008 fe94 	bl	8009b0c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000de4:	f107 030c 	add.w	r3, r7, #12
 8000de8:	2200      	movs	r2, #0
 8000dea:	601a      	str	r2, [r3, #0]
 8000dec:	605a      	str	r2, [r3, #4]
 8000dee:	609a      	str	r2, [r3, #8]
 8000df0:	60da      	str	r2, [r3, #12]
 8000df2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000df4:	2300      	movs	r3, #0
 8000df6:	60bb      	str	r3, [r7, #8]
 8000df8:	4b28      	ldr	r3, [pc, #160]	; (8000e9c <SystemClock_Config+0xcc>)
 8000dfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dfc:	4a27      	ldr	r2, [pc, #156]	; (8000e9c <SystemClock_Config+0xcc>)
 8000dfe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e02:	6413      	str	r3, [r2, #64]	; 0x40
 8000e04:	4b25      	ldr	r3, [pc, #148]	; (8000e9c <SystemClock_Config+0xcc>)
 8000e06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e08:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e0c:	60bb      	str	r3, [r7, #8]
 8000e0e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e10:	2300      	movs	r3, #0
 8000e12:	607b      	str	r3, [r7, #4]
 8000e14:	4b22      	ldr	r3, [pc, #136]	; (8000ea0 <SystemClock_Config+0xd0>)
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	4a21      	ldr	r2, [pc, #132]	; (8000ea0 <SystemClock_Config+0xd0>)
 8000e1a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e1e:	6013      	str	r3, [r2, #0]
 8000e20:	4b1f      	ldr	r3, [pc, #124]	; (8000ea0 <SystemClock_Config+0xd0>)
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e28:	607b      	str	r3, [r7, #4]
 8000e2a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000e2c:	2301      	movs	r3, #1
 8000e2e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000e30:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000e34:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e36:	2302      	movs	r3, #2
 8000e38:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000e3a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000e3e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 12;
 8000e40:	230c      	movs	r3, #12
 8000e42:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000e44:	23a8      	movs	r3, #168	; 0xa8
 8000e46:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000e48:	2302      	movs	r3, #2
 8000e4a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000e4c:	2307      	movs	r3, #7
 8000e4e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e50:	f107 0320 	add.w	r3, r7, #32
 8000e54:	4618      	mov	r0, r3
 8000e56:	f002 fa41 	bl	80032dc <HAL_RCC_OscConfig>
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d001      	beq.n	8000e64 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000e60:	f000 f964 	bl	800112c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e64:	230f      	movs	r3, #15
 8000e66:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e68:	2302      	movs	r3, #2
 8000e6a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000e70:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000e74:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000e76:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e7a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000e7c:	f107 030c 	add.w	r3, r7, #12
 8000e80:	2105      	movs	r1, #5
 8000e82:	4618      	mov	r0, r3
 8000e84:	f002 fca2 	bl	80037cc <HAL_RCC_ClockConfig>
 8000e88:	4603      	mov	r3, r0
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d001      	beq.n	8000e92 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000e8e:	f000 f94d 	bl	800112c <Error_Handler>
  }
}
 8000e92:	bf00      	nop
 8000e94:	3750      	adds	r7, #80	; 0x50
 8000e96:	46bd      	mov	sp, r7
 8000e98:	bd80      	pop	{r7, pc}
 8000e9a:	bf00      	nop
 8000e9c:	40023800 	.word	0x40023800
 8000ea0:	40007000 	.word	0x40007000

08000ea4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000ea8:	4b17      	ldr	r3, [pc, #92]	; (8000f08 <MX_SPI1_Init+0x64>)
 8000eaa:	4a18      	ldr	r2, [pc, #96]	; (8000f0c <MX_SPI1_Init+0x68>)
 8000eac:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000eae:	4b16      	ldr	r3, [pc, #88]	; (8000f08 <MX_SPI1_Init+0x64>)
 8000eb0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000eb4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000eb6:	4b14      	ldr	r3, [pc, #80]	; (8000f08 <MX_SPI1_Init+0x64>)
 8000eb8:	2200      	movs	r2, #0
 8000eba:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000ebc:	4b12      	ldr	r3, [pc, #72]	; (8000f08 <MX_SPI1_Init+0x64>)
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000ec2:	4b11      	ldr	r3, [pc, #68]	; (8000f08 <MX_SPI1_Init+0x64>)
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000ec8:	4b0f      	ldr	r3, [pc, #60]	; (8000f08 <MX_SPI1_Init+0x64>)
 8000eca:	2200      	movs	r2, #0
 8000ecc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000ece:	4b0e      	ldr	r3, [pc, #56]	; (8000f08 <MX_SPI1_Init+0x64>)
 8000ed0:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000ed4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000ed6:	4b0c      	ldr	r3, [pc, #48]	; (8000f08 <MX_SPI1_Init+0x64>)
 8000ed8:	2200      	movs	r2, #0
 8000eda:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000edc:	4b0a      	ldr	r3, [pc, #40]	; (8000f08 <MX_SPI1_Init+0x64>)
 8000ede:	2200      	movs	r2, #0
 8000ee0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000ee2:	4b09      	ldr	r3, [pc, #36]	; (8000f08 <MX_SPI1_Init+0x64>)
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000ee8:	4b07      	ldr	r3, [pc, #28]	; (8000f08 <MX_SPI1_Init+0x64>)
 8000eea:	2200      	movs	r2, #0
 8000eec:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000eee:	4b06      	ldr	r3, [pc, #24]	; (8000f08 <MX_SPI1_Init+0x64>)
 8000ef0:	220a      	movs	r2, #10
 8000ef2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000ef4:	4804      	ldr	r0, [pc, #16]	; (8000f08 <MX_SPI1_Init+0x64>)
 8000ef6:	f002 fe49 	bl	8003b8c <HAL_SPI_Init>
 8000efa:	4603      	mov	r3, r0
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d001      	beq.n	8000f04 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000f00:	f000 f914 	bl	800112c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000f04:	bf00      	nop
 8000f06:	bd80      	pop	{r7, pc}
 8000f08:	20000184 	.word	0x20000184
 8000f0c:	40013000 	.word	0x40013000

08000f10 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000f14:	4b11      	ldr	r3, [pc, #68]	; (8000f5c <MX_USART1_UART_Init+0x4c>)
 8000f16:	4a12      	ldr	r2, [pc, #72]	; (8000f60 <MX_USART1_UART_Init+0x50>)
 8000f18:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000f1a:	4b10      	ldr	r3, [pc, #64]	; (8000f5c <MX_USART1_UART_Init+0x4c>)
 8000f1c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000f20:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000f22:	4b0e      	ldr	r3, [pc, #56]	; (8000f5c <MX_USART1_UART_Init+0x4c>)
 8000f24:	2200      	movs	r2, #0
 8000f26:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000f28:	4b0c      	ldr	r3, [pc, #48]	; (8000f5c <MX_USART1_UART_Init+0x4c>)
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000f2e:	4b0b      	ldr	r3, [pc, #44]	; (8000f5c <MX_USART1_UART_Init+0x4c>)
 8000f30:	2200      	movs	r2, #0
 8000f32:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000f34:	4b09      	ldr	r3, [pc, #36]	; (8000f5c <MX_USART1_UART_Init+0x4c>)
 8000f36:	220c      	movs	r2, #12
 8000f38:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 8000f3a:	4b08      	ldr	r3, [pc, #32]	; (8000f5c <MX_USART1_UART_Init+0x4c>)
 8000f3c:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000f40:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f42:	4b06      	ldr	r3, [pc, #24]	; (8000f5c <MX_USART1_UART_Init+0x4c>)
 8000f44:	2200      	movs	r2, #0
 8000f46:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000f48:	4804      	ldr	r0, [pc, #16]	; (8000f5c <MX_USART1_UART_Init+0x4c>)
 8000f4a:	f003 fbd5 	bl	80046f8 <HAL_UART_Init>
 8000f4e:	4603      	mov	r3, r0
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d001      	beq.n	8000f58 <MX_USART1_UART_Init+0x48>
  {
    Error_Handler();
 8000f54:	f000 f8ea 	bl	800112c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000f58:	bf00      	nop
 8000f5a:	bd80      	pop	{r7, pc}
 8000f5c:	200001dc 	.word	0x200001dc
 8000f60:	40011000 	.word	0x40011000

08000f64 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000f68:	4b11      	ldr	r3, [pc, #68]	; (8000fb0 <MX_USART2_UART_Init+0x4c>)
 8000f6a:	4a12      	ldr	r2, [pc, #72]	; (8000fb4 <MX_USART2_UART_Init+0x50>)
 8000f6c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000f6e:	4b10      	ldr	r3, [pc, #64]	; (8000fb0 <MX_USART2_UART_Init+0x4c>)
 8000f70:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000f74:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000f76:	4b0e      	ldr	r3, [pc, #56]	; (8000fb0 <MX_USART2_UART_Init+0x4c>)
 8000f78:	2200      	movs	r2, #0
 8000f7a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000f7c:	4b0c      	ldr	r3, [pc, #48]	; (8000fb0 <MX_USART2_UART_Init+0x4c>)
 8000f7e:	2200      	movs	r2, #0
 8000f80:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000f82:	4b0b      	ldr	r3, [pc, #44]	; (8000fb0 <MX_USART2_UART_Init+0x4c>)
 8000f84:	2200      	movs	r2, #0
 8000f86:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000f88:	4b09      	ldr	r3, [pc, #36]	; (8000fb0 <MX_USART2_UART_Init+0x4c>)
 8000f8a:	220c      	movs	r2, #12
 8000f8c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 8000f8e:	4b08      	ldr	r3, [pc, #32]	; (8000fb0 <MX_USART2_UART_Init+0x4c>)
 8000f90:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000f94:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f96:	4b06      	ldr	r3, [pc, #24]	; (8000fb0 <MX_USART2_UART_Init+0x4c>)
 8000f98:	2200      	movs	r2, #0
 8000f9a:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000f9c:	4804      	ldr	r0, [pc, #16]	; (8000fb0 <MX_USART2_UART_Init+0x4c>)
 8000f9e:	f003 fbab 	bl	80046f8 <HAL_UART_Init>
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d001      	beq.n	8000fac <MX_USART2_UART_Init+0x48>
  {
    Error_Handler();
 8000fa8:	f000 f8c0 	bl	800112c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000fac:	bf00      	nop
 8000fae:	bd80      	pop	{r7, pc}
 8000fb0:	20000220 	.word	0x20000220
 8000fb4:	40004400 	.word	0x40004400

08000fb8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b08a      	sub	sp, #40	; 0x28
 8000fbc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fbe:	f107 0314 	add.w	r3, r7, #20
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	601a      	str	r2, [r3, #0]
 8000fc6:	605a      	str	r2, [r3, #4]
 8000fc8:	609a      	str	r2, [r3, #8]
 8000fca:	60da      	str	r2, [r3, #12]
 8000fcc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fce:	2300      	movs	r3, #0
 8000fd0:	613b      	str	r3, [r7, #16]
 8000fd2:	4b45      	ldr	r3, [pc, #276]	; (80010e8 <MX_GPIO_Init+0x130>)
 8000fd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fd6:	4a44      	ldr	r2, [pc, #272]	; (80010e8 <MX_GPIO_Init+0x130>)
 8000fd8:	f043 0304 	orr.w	r3, r3, #4
 8000fdc:	6313      	str	r3, [r2, #48]	; 0x30
 8000fde:	4b42      	ldr	r3, [pc, #264]	; (80010e8 <MX_GPIO_Init+0x130>)
 8000fe0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fe2:	f003 0304 	and.w	r3, r3, #4
 8000fe6:	613b      	str	r3, [r7, #16]
 8000fe8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000fea:	2300      	movs	r3, #0
 8000fec:	60fb      	str	r3, [r7, #12]
 8000fee:	4b3e      	ldr	r3, [pc, #248]	; (80010e8 <MX_GPIO_Init+0x130>)
 8000ff0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ff2:	4a3d      	ldr	r2, [pc, #244]	; (80010e8 <MX_GPIO_Init+0x130>)
 8000ff4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ff8:	6313      	str	r3, [r2, #48]	; 0x30
 8000ffa:	4b3b      	ldr	r3, [pc, #236]	; (80010e8 <MX_GPIO_Init+0x130>)
 8000ffc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ffe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001002:	60fb      	str	r3, [r7, #12]
 8001004:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001006:	2300      	movs	r3, #0
 8001008:	60bb      	str	r3, [r7, #8]
 800100a:	4b37      	ldr	r3, [pc, #220]	; (80010e8 <MX_GPIO_Init+0x130>)
 800100c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800100e:	4a36      	ldr	r2, [pc, #216]	; (80010e8 <MX_GPIO_Init+0x130>)
 8001010:	f043 0301 	orr.w	r3, r3, #1
 8001014:	6313      	str	r3, [r2, #48]	; 0x30
 8001016:	4b34      	ldr	r3, [pc, #208]	; (80010e8 <MX_GPIO_Init+0x130>)
 8001018:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800101a:	f003 0301 	and.w	r3, r3, #1
 800101e:	60bb      	str	r3, [r7, #8]
 8001020:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001022:	2300      	movs	r3, #0
 8001024:	607b      	str	r3, [r7, #4]
 8001026:	4b30      	ldr	r3, [pc, #192]	; (80010e8 <MX_GPIO_Init+0x130>)
 8001028:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800102a:	4a2f      	ldr	r2, [pc, #188]	; (80010e8 <MX_GPIO_Init+0x130>)
 800102c:	f043 0302 	orr.w	r3, r3, #2
 8001030:	6313      	str	r3, [r2, #48]	; 0x30
 8001032:	4b2d      	ldr	r3, [pc, #180]	; (80010e8 <MX_GPIO_Init+0x130>)
 8001034:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001036:	f003 0302 	and.w	r3, r3, #2
 800103a:	607b      	str	r3, [r7, #4]
 800103c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800103e:	2300      	movs	r3, #0
 8001040:	603b      	str	r3, [r7, #0]
 8001042:	4b29      	ldr	r3, [pc, #164]	; (80010e8 <MX_GPIO_Init+0x130>)
 8001044:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001046:	4a28      	ldr	r2, [pc, #160]	; (80010e8 <MX_GPIO_Init+0x130>)
 8001048:	f043 0308 	orr.w	r3, r3, #8
 800104c:	6313      	str	r3, [r2, #48]	; 0x30
 800104e:	4b26      	ldr	r3, [pc, #152]	; (80010e8 <MX_GPIO_Init+0x130>)
 8001050:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001052:	f003 0308 	and.w	r3, r3, #8
 8001056:	603b      	str	r3, [r7, #0]
 8001058:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RESET_RF_GPIO_Port, RESET_RF_Pin, GPIO_PIN_RESET);
 800105a:	2200      	movs	r2, #0
 800105c:	2101      	movs	r1, #1
 800105e:	4823      	ldr	r0, [pc, #140]	; (80010ec <MX_GPIO_Init+0x134>)
 8001060:	f000 fea6 	bl	8001db0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(INDICATOR_LED_GPIO_Port, INDICATOR_LED_Pin, GPIO_PIN_RESET);
 8001064:	2200      	movs	r2, #0
 8001066:	2104      	movs	r1, #4
 8001068:	4821      	ldr	r0, [pc, #132]	; (80010f0 <MX_GPIO_Init+0x138>)
 800106a:	f000 fea1 	bl	8001db0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : RESET_RF_Pin */
  GPIO_InitStruct.Pin = RESET_RF_Pin;
 800106e:	2301      	movs	r3, #1
 8001070:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001072:	2301      	movs	r3, #1
 8001074:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001076:	2300      	movs	r3, #0
 8001078:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800107a:	2300      	movs	r3, #0
 800107c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(RESET_RF_GPIO_Port, &GPIO_InitStruct);
 800107e:	f107 0314 	add.w	r3, r7, #20
 8001082:	4619      	mov	r1, r3
 8001084:	4819      	ldr	r0, [pc, #100]	; (80010ec <MX_GPIO_Init+0x134>)
 8001086:	f000 fcf7 	bl	8001a78 <HAL_GPIO_Init>

  /*Configure GPIO pins : IO0_RF_Pin IO1_RF_Pin IO2_RF_Pin IO3_RF_Pin
                           IO4_RF_Pin */
  GPIO_InitStruct.Pin = IO0_RF_Pin|IO1_RF_Pin|IO2_RF_Pin|IO3_RF_Pin
 800108a:	f643 4302 	movw	r3, #15362	; 0x3c02
 800108e:	617b      	str	r3, [r7, #20]
                          |IO4_RF_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001090:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001094:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001096:	2300      	movs	r3, #0
 8001098:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800109a:	f107 0314 	add.w	r3, r7, #20
 800109e:	4619      	mov	r1, r3
 80010a0:	4812      	ldr	r0, [pc, #72]	; (80010ec <MX_GPIO_Init+0x134>)
 80010a2:	f000 fce9 	bl	8001a78 <HAL_GPIO_Init>

  /*Configure GPIO pin : IO5_RF_Pin */
  GPIO_InitStruct.Pin = IO5_RF_Pin;
 80010a6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80010aa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80010ac:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80010b0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b2:	2300      	movs	r3, #0
 80010b4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(IO5_RF_GPIO_Port, &GPIO_InitStruct);
 80010b6:	f107 0314 	add.w	r3, r7, #20
 80010ba:	4619      	mov	r1, r3
 80010bc:	480d      	ldr	r0, [pc, #52]	; (80010f4 <MX_GPIO_Init+0x13c>)
 80010be:	f000 fcdb 	bl	8001a78 <HAL_GPIO_Init>

  /*Configure GPIO pin : INDICATOR_LED_Pin */
  GPIO_InitStruct.Pin = INDICATOR_LED_Pin;
 80010c2:	2304      	movs	r3, #4
 80010c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010c6:	2301      	movs	r3, #1
 80010c8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ca:	2300      	movs	r3, #0
 80010cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010ce:	2300      	movs	r3, #0
 80010d0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(INDICATOR_LED_GPIO_Port, &GPIO_InitStruct);
 80010d2:	f107 0314 	add.w	r3, r7, #20
 80010d6:	4619      	mov	r1, r3
 80010d8:	4805      	ldr	r0, [pc, #20]	; (80010f0 <MX_GPIO_Init+0x138>)
 80010da:	f000 fccd 	bl	8001a78 <HAL_GPIO_Init>

}
 80010de:	bf00      	nop
 80010e0:	3728      	adds	r7, #40	; 0x28
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bd80      	pop	{r7, pc}
 80010e6:	bf00      	nop
 80010e8:	40023800 	.word	0x40023800
 80010ec:	40020400 	.word	0x40020400
 80010f0:	40020c00 	.word	0x40020c00
 80010f4:	40020000 	.word	0x40020000

080010f8 <HAL_UART_RxCpltCallback>:
		RF_avilable_bytes = LoRa_received_bytes(&LoRaClass);
	}
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b082      	sub	sp, #8
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
    HAL_UART_Receive_IT(USB_UART, UART_Buff, sizeof(UART_Buff));
 8001100:	4b07      	ldr	r3, [pc, #28]	; (8001120 <HAL_UART_RxCpltCallback+0x28>)
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001108:	4906      	ldr	r1, [pc, #24]	; (8001124 <HAL_UART_RxCpltCallback+0x2c>)
 800110a:	4618      	mov	r0, r3
 800110c:	f003 fc75 	bl	80049fa <HAL_UART_Receive_IT>
    UART_READY = true;
 8001110:	4b05      	ldr	r3, [pc, #20]	; (8001128 <HAL_UART_RxCpltCallback+0x30>)
 8001112:	2201      	movs	r2, #1
 8001114:	701a      	strb	r2, [r3, #0]
}
 8001116:	bf00      	nop
 8001118:	3708      	adds	r7, #8
 800111a:	46bd      	mov	sp, r7
 800111c:	bd80      	pop	{r7, pc}
 800111e:	bf00      	nop
 8001120:	20000000 	.word	0x20000000
 8001124:	20000368 	.word	0x20000368
 8001128:	20000468 	.word	0x20000468

0800112c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800112c:	b480      	push	{r7}
 800112e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001130:	b672      	cpsid	i
}
 8001132:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001134:	e7fe      	b.n	8001134 <Error_Handler+0x8>
	...

08001138 <RetargetInit>:
#define STDOUT_FILENO 1
#define STDERR_FILENO 2

UART_HandleTypeDef *gHuart;

void RetargetInit(UART_HandleTypeDef *huart) {
 8001138:	b580      	push	{r7, lr}
 800113a:	b082      	sub	sp, #8
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
  gHuart = huart;
 8001140:	4a07      	ldr	r2, [pc, #28]	; (8001160 <RetargetInit+0x28>)
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	6013      	str	r3, [r2, #0]

  /* Disable I/O buffering for STDOUT stream, so that
   * chars are sent out as soon as they are printed. */
  setvbuf(stdout, NULL, _IONBF, 0);
 8001146:	4b07      	ldr	r3, [pc, #28]	; (8001164 <RetargetInit+0x2c>)
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	6898      	ldr	r0, [r3, #8]
 800114c:	2300      	movs	r3, #0
 800114e:	2202      	movs	r2, #2
 8001150:	2100      	movs	r1, #0
 8001152:	f008 fce3 	bl	8009b1c <setvbuf>
}
 8001156:	bf00      	nop
 8001158:	3708      	adds	r7, #8
 800115a:	46bd      	mov	sp, r7
 800115c:	bd80      	pop	{r7, pc}
 800115e:	bf00      	nop
 8001160:	20000498 	.word	0x20000498
 8001164:	20000104 	.word	0x20000104

08001168 <_write>:

  errno = EBADF;
  return 0;
}

int _write(int fd, char* ptr, int len) {
 8001168:	b580      	push	{r7, lr}
 800116a:	b086      	sub	sp, #24
 800116c:	af00      	add	r7, sp, #0
 800116e:	60f8      	str	r0, [r7, #12]
 8001170:	60b9      	str	r1, [r7, #8]
 8001172:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDOUT_FILENO || fd == STDERR_FILENO) {
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	2b01      	cmp	r3, #1
 8001178:	d002      	beq.n	8001180 <_write+0x18>
 800117a:	68fb      	ldr	r3, [r7, #12]
 800117c:	2b02      	cmp	r3, #2
 800117e:	d111      	bne.n	80011a4 <_write+0x3c>
    hstatus = HAL_UART_Transmit(gHuart, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 8001180:	4b0e      	ldr	r3, [pc, #56]	; (80011bc <_write+0x54>)
 8001182:	6818      	ldr	r0, [r3, #0]
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	b29a      	uxth	r2, r3
 8001188:	f04f 33ff 	mov.w	r3, #4294967295
 800118c:	68b9      	ldr	r1, [r7, #8]
 800118e:	f003 fb00 	bl	8004792 <HAL_UART_Transmit>
 8001192:	4603      	mov	r3, r0
 8001194:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 8001196:	7dfb      	ldrb	r3, [r7, #23]
 8001198:	2b00      	cmp	r3, #0
 800119a:	d101      	bne.n	80011a0 <_write+0x38>
      return len;
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	e008      	b.n	80011b2 <_write+0x4a>
    else
      return EIO;
 80011a0:	2305      	movs	r3, #5
 80011a2:	e006      	b.n	80011b2 <_write+0x4a>
  }
  errno = EBADF;
 80011a4:	f008 fc88 	bl	8009ab8 <__errno>
 80011a8:	4603      	mov	r3, r0
 80011aa:	2209      	movs	r2, #9
 80011ac:	601a      	str	r2, [r3, #0]
  return -1;
 80011ae:	f04f 33ff 	mov.w	r3, #4294967295
}
 80011b2:	4618      	mov	r0, r3
 80011b4:	3718      	adds	r7, #24
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bd80      	pop	{r7, pc}
 80011ba:	bf00      	nop
 80011bc:	20000498 	.word	0x20000498

080011c0 <_close>:

int _close(int fd) {
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b082      	sub	sp, #8
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	db04      	blt.n	80011d8 <_close+0x18>
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	2b02      	cmp	r3, #2
 80011d2:	dc01      	bgt.n	80011d8 <_close+0x18>
    return 0;
 80011d4:	2300      	movs	r3, #0
 80011d6:	e006      	b.n	80011e6 <_close+0x26>

  errno = EBADF;
 80011d8:	f008 fc6e 	bl	8009ab8 <__errno>
 80011dc:	4603      	mov	r3, r0
 80011de:	2209      	movs	r2, #9
 80011e0:	601a      	str	r2, [r3, #0]
  return -1;
 80011e2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80011e6:	4618      	mov	r0, r3
 80011e8:	3708      	adds	r7, #8
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bd80      	pop	{r7, pc}

080011ee <_lseek>:

int _lseek(int fd, int ptr, int dir) {
 80011ee:	b580      	push	{r7, lr}
 80011f0:	b084      	sub	sp, #16
 80011f2:	af00      	add	r7, sp, #0
 80011f4:	60f8      	str	r0, [r7, #12]
 80011f6:	60b9      	str	r1, [r7, #8]
 80011f8:	607a      	str	r2, [r7, #4]
  (void) fd;
  (void) ptr;
  (void) dir;

  errno = EBADF;
 80011fa:	f008 fc5d 	bl	8009ab8 <__errno>
 80011fe:	4603      	mov	r3, r0
 8001200:	2209      	movs	r2, #9
 8001202:	601a      	str	r2, [r3, #0]
  return -1;
 8001204:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001208:	4618      	mov	r0, r3
 800120a:	3710      	adds	r7, #16
 800120c:	46bd      	mov	sp, r7
 800120e:	bd80      	pop	{r7, pc}

08001210 <_read>:

int _read(int fd, char* ptr, int len) {
 8001210:	b580      	push	{r7, lr}
 8001212:	b086      	sub	sp, #24
 8001214:	af00      	add	r7, sp, #0
 8001216:	60f8      	str	r0, [r7, #12]
 8001218:	60b9      	str	r1, [r7, #8]
 800121a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDIN_FILENO) {
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	2b00      	cmp	r3, #0
 8001220:	d110      	bne.n	8001244 <_read+0x34>
    hstatus = HAL_UART_Receive(gHuart, (uint8_t *) ptr, 1, HAL_MAX_DELAY);
 8001222:	4b0e      	ldr	r3, [pc, #56]	; (800125c <_read+0x4c>)
 8001224:	6818      	ldr	r0, [r3, #0]
 8001226:	f04f 33ff 	mov.w	r3, #4294967295
 800122a:	2201      	movs	r2, #1
 800122c:	68b9      	ldr	r1, [r7, #8]
 800122e:	f003 fb42 	bl	80048b6 <HAL_UART_Receive>
 8001232:	4603      	mov	r3, r0
 8001234:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 8001236:	7dfb      	ldrb	r3, [r7, #23]
 8001238:	2b00      	cmp	r3, #0
 800123a:	d101      	bne.n	8001240 <_read+0x30>
      return 1;
 800123c:	2301      	movs	r3, #1
 800123e:	e008      	b.n	8001252 <_read+0x42>
    else
      return EIO;
 8001240:	2305      	movs	r3, #5
 8001242:	e006      	b.n	8001252 <_read+0x42>
  }
  errno = EBADF;
 8001244:	f008 fc38 	bl	8009ab8 <__errno>
 8001248:	4603      	mov	r3, r0
 800124a:	2209      	movs	r2, #9
 800124c:	601a      	str	r2, [r3, #0]
  return -1;
 800124e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001252:	4618      	mov	r0, r3
 8001254:	3718      	adds	r7, #24
 8001256:	46bd      	mov	sp, r7
 8001258:	bd80      	pop	{r7, pc}
 800125a:	bf00      	nop
 800125c:	20000498 	.word	0x20000498

08001260 <_fstat>:

int _fstat(int fd, struct stat* st) {
 8001260:	b580      	push	{r7, lr}
 8001262:	b082      	sub	sp, #8
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
 8001268:	6039      	str	r1, [r7, #0]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO) {
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	2b00      	cmp	r3, #0
 800126e:	db08      	blt.n	8001282 <_fstat+0x22>
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	2b02      	cmp	r3, #2
 8001274:	dc05      	bgt.n	8001282 <_fstat+0x22>
    st->st_mode = S_IFCHR;
 8001276:	683b      	ldr	r3, [r7, #0]
 8001278:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800127c:	605a      	str	r2, [r3, #4]
    return 0;
 800127e:	2300      	movs	r3, #0
 8001280:	e005      	b.n	800128e <_fstat+0x2e>
  }

  errno = EBADF;
 8001282:	f008 fc19 	bl	8009ab8 <__errno>
 8001286:	4603      	mov	r3, r0
 8001288:	2209      	movs	r2, #9
 800128a:	601a      	str	r2, [r3, #0]
  return 0;
 800128c:	2300      	movs	r3, #0
}
 800128e:	4618      	mov	r0, r3
 8001290:	3708      	adds	r7, #8
 8001292:	46bd      	mov	sp, r7
 8001294:	bd80      	pop	{r7, pc}
	...

08001298 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001298:	b480      	push	{r7}
 800129a:	b083      	sub	sp, #12
 800129c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800129e:	2300      	movs	r3, #0
 80012a0:	607b      	str	r3, [r7, #4]
 80012a2:	4b10      	ldr	r3, [pc, #64]	; (80012e4 <HAL_MspInit+0x4c>)
 80012a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012a6:	4a0f      	ldr	r2, [pc, #60]	; (80012e4 <HAL_MspInit+0x4c>)
 80012a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012ac:	6453      	str	r3, [r2, #68]	; 0x44
 80012ae:	4b0d      	ldr	r3, [pc, #52]	; (80012e4 <HAL_MspInit+0x4c>)
 80012b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012b6:	607b      	str	r3, [r7, #4]
 80012b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012ba:	2300      	movs	r3, #0
 80012bc:	603b      	str	r3, [r7, #0]
 80012be:	4b09      	ldr	r3, [pc, #36]	; (80012e4 <HAL_MspInit+0x4c>)
 80012c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012c2:	4a08      	ldr	r2, [pc, #32]	; (80012e4 <HAL_MspInit+0x4c>)
 80012c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012c8:	6413      	str	r3, [r2, #64]	; 0x40
 80012ca:	4b06      	ldr	r3, [pc, #24]	; (80012e4 <HAL_MspInit+0x4c>)
 80012cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012d2:	603b      	str	r3, [r7, #0]
 80012d4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012d6:	bf00      	nop
 80012d8:	370c      	adds	r7, #12
 80012da:	46bd      	mov	sp, r7
 80012dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e0:	4770      	bx	lr
 80012e2:	bf00      	nop
 80012e4:	40023800 	.word	0x40023800

080012e8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b08a      	sub	sp, #40	; 0x28
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012f0:	f107 0314 	add.w	r3, r7, #20
 80012f4:	2200      	movs	r2, #0
 80012f6:	601a      	str	r2, [r3, #0]
 80012f8:	605a      	str	r2, [r3, #4]
 80012fa:	609a      	str	r2, [r3, #8]
 80012fc:	60da      	str	r2, [r3, #12]
 80012fe:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	4a19      	ldr	r2, [pc, #100]	; (800136c <HAL_SPI_MspInit+0x84>)
 8001306:	4293      	cmp	r3, r2
 8001308:	d12b      	bne.n	8001362 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800130a:	2300      	movs	r3, #0
 800130c:	613b      	str	r3, [r7, #16]
 800130e:	4b18      	ldr	r3, [pc, #96]	; (8001370 <HAL_SPI_MspInit+0x88>)
 8001310:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001312:	4a17      	ldr	r2, [pc, #92]	; (8001370 <HAL_SPI_MspInit+0x88>)
 8001314:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001318:	6453      	str	r3, [r2, #68]	; 0x44
 800131a:	4b15      	ldr	r3, [pc, #84]	; (8001370 <HAL_SPI_MspInit+0x88>)
 800131c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800131e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001322:	613b      	str	r3, [r7, #16]
 8001324:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001326:	2300      	movs	r3, #0
 8001328:	60fb      	str	r3, [r7, #12]
 800132a:	4b11      	ldr	r3, [pc, #68]	; (8001370 <HAL_SPI_MspInit+0x88>)
 800132c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800132e:	4a10      	ldr	r2, [pc, #64]	; (8001370 <HAL_SPI_MspInit+0x88>)
 8001330:	f043 0301 	orr.w	r3, r3, #1
 8001334:	6313      	str	r3, [r2, #48]	; 0x30
 8001336:	4b0e      	ldr	r3, [pc, #56]	; (8001370 <HAL_SPI_MspInit+0x88>)
 8001338:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800133a:	f003 0301 	and.w	r3, r3, #1
 800133e:	60fb      	str	r3, [r7, #12]
 8001340:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = RF_SPI_NSS_Pin|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001342:	23f0      	movs	r3, #240	; 0xf0
 8001344:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001346:	2302      	movs	r3, #2
 8001348:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800134a:	2300      	movs	r3, #0
 800134c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800134e:	2303      	movs	r3, #3
 8001350:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001352:	2305      	movs	r3, #5
 8001354:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001356:	f107 0314 	add.w	r3, r7, #20
 800135a:	4619      	mov	r1, r3
 800135c:	4805      	ldr	r0, [pc, #20]	; (8001374 <HAL_SPI_MspInit+0x8c>)
 800135e:	f000 fb8b 	bl	8001a78 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001362:	bf00      	nop
 8001364:	3728      	adds	r7, #40	; 0x28
 8001366:	46bd      	mov	sp, r7
 8001368:	bd80      	pop	{r7, pc}
 800136a:	bf00      	nop
 800136c:	40013000 	.word	0x40013000
 8001370:	40023800 	.word	0x40023800
 8001374:	40020000 	.word	0x40020000

08001378 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b08c      	sub	sp, #48	; 0x30
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001380:	f107 031c 	add.w	r3, r7, #28
 8001384:	2200      	movs	r2, #0
 8001386:	601a      	str	r2, [r3, #0]
 8001388:	605a      	str	r2, [r3, #4]
 800138a:	609a      	str	r2, [r3, #8]
 800138c:	60da      	str	r2, [r3, #12]
 800138e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	4a3a      	ldr	r2, [pc, #232]	; (8001480 <HAL_UART_MspInit+0x108>)
 8001396:	4293      	cmp	r3, r2
 8001398:	d135      	bne.n	8001406 <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800139a:	2300      	movs	r3, #0
 800139c:	61bb      	str	r3, [r7, #24]
 800139e:	4b39      	ldr	r3, [pc, #228]	; (8001484 <HAL_UART_MspInit+0x10c>)
 80013a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013a2:	4a38      	ldr	r2, [pc, #224]	; (8001484 <HAL_UART_MspInit+0x10c>)
 80013a4:	f043 0310 	orr.w	r3, r3, #16
 80013a8:	6453      	str	r3, [r2, #68]	; 0x44
 80013aa:	4b36      	ldr	r3, [pc, #216]	; (8001484 <HAL_UART_MspInit+0x10c>)
 80013ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013ae:	f003 0310 	and.w	r3, r3, #16
 80013b2:	61bb      	str	r3, [r7, #24]
 80013b4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013b6:	2300      	movs	r3, #0
 80013b8:	617b      	str	r3, [r7, #20]
 80013ba:	4b32      	ldr	r3, [pc, #200]	; (8001484 <HAL_UART_MspInit+0x10c>)
 80013bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013be:	4a31      	ldr	r2, [pc, #196]	; (8001484 <HAL_UART_MspInit+0x10c>)
 80013c0:	f043 0301 	orr.w	r3, r3, #1
 80013c4:	6313      	str	r3, [r2, #48]	; 0x30
 80013c6:	4b2f      	ldr	r3, [pc, #188]	; (8001484 <HAL_UART_MspInit+0x10c>)
 80013c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ca:	f003 0301 	and.w	r3, r3, #1
 80013ce:	617b      	str	r3, [r7, #20]
 80013d0:	697b      	ldr	r3, [r7, #20]
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    PA11     ------> USART1_CTS
    PA12     ------> USART1_RTS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 80013d2:	f44f 53f0 	mov.w	r3, #7680	; 0x1e00
 80013d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013d8:	2302      	movs	r3, #2
 80013da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013dc:	2300      	movs	r3, #0
 80013de:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013e0:	2303      	movs	r3, #3
 80013e2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80013e4:	2307      	movs	r3, #7
 80013e6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013e8:	f107 031c 	add.w	r3, r7, #28
 80013ec:	4619      	mov	r1, r3
 80013ee:	4826      	ldr	r0, [pc, #152]	; (8001488 <HAL_UART_MspInit+0x110>)
 80013f0:	f000 fb42 	bl	8001a78 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80013f4:	2200      	movs	r2, #0
 80013f6:	2100      	movs	r1, #0
 80013f8:	2025      	movs	r0, #37	; 0x25
 80013fa:	f000 fa74 	bl	80018e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80013fe:	2025      	movs	r0, #37	; 0x25
 8001400:	f000 fa8d 	bl	800191e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001404:	e038      	b.n	8001478 <HAL_UART_MspInit+0x100>
  else if(huart->Instance==USART2)
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	4a20      	ldr	r2, [pc, #128]	; (800148c <HAL_UART_MspInit+0x114>)
 800140c:	4293      	cmp	r3, r2
 800140e:	d133      	bne.n	8001478 <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001410:	2300      	movs	r3, #0
 8001412:	613b      	str	r3, [r7, #16]
 8001414:	4b1b      	ldr	r3, [pc, #108]	; (8001484 <HAL_UART_MspInit+0x10c>)
 8001416:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001418:	4a1a      	ldr	r2, [pc, #104]	; (8001484 <HAL_UART_MspInit+0x10c>)
 800141a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800141e:	6413      	str	r3, [r2, #64]	; 0x40
 8001420:	4b18      	ldr	r3, [pc, #96]	; (8001484 <HAL_UART_MspInit+0x10c>)
 8001422:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001424:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001428:	613b      	str	r3, [r7, #16]
 800142a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800142c:	2300      	movs	r3, #0
 800142e:	60fb      	str	r3, [r7, #12]
 8001430:	4b14      	ldr	r3, [pc, #80]	; (8001484 <HAL_UART_MspInit+0x10c>)
 8001432:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001434:	4a13      	ldr	r2, [pc, #76]	; (8001484 <HAL_UART_MspInit+0x10c>)
 8001436:	f043 0301 	orr.w	r3, r3, #1
 800143a:	6313      	str	r3, [r2, #48]	; 0x30
 800143c:	4b11      	ldr	r3, [pc, #68]	; (8001484 <HAL_UART_MspInit+0x10c>)
 800143e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001440:	f003 0301 	and.w	r3, r3, #1
 8001444:	60fb      	str	r3, [r7, #12]
 8001446:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8001448:	230f      	movs	r3, #15
 800144a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800144c:	2302      	movs	r3, #2
 800144e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001450:	2300      	movs	r3, #0
 8001452:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001454:	2303      	movs	r3, #3
 8001456:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001458:	2307      	movs	r3, #7
 800145a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800145c:	f107 031c 	add.w	r3, r7, #28
 8001460:	4619      	mov	r1, r3
 8001462:	4809      	ldr	r0, [pc, #36]	; (8001488 <HAL_UART_MspInit+0x110>)
 8001464:	f000 fb08 	bl	8001a78 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001468:	2200      	movs	r2, #0
 800146a:	2100      	movs	r1, #0
 800146c:	2026      	movs	r0, #38	; 0x26
 800146e:	f000 fa3a 	bl	80018e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001472:	2026      	movs	r0, #38	; 0x26
 8001474:	f000 fa53 	bl	800191e <HAL_NVIC_EnableIRQ>
}
 8001478:	bf00      	nop
 800147a:	3730      	adds	r7, #48	; 0x30
 800147c:	46bd      	mov	sp, r7
 800147e:	bd80      	pop	{r7, pc}
 8001480:	40011000 	.word	0x40011000
 8001484:	40023800 	.word	0x40023800
 8001488:	40020000 	.word	0x40020000
 800148c:	40004400 	.word	0x40004400

08001490 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001490:	b480      	push	{r7}
 8001492:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001494:	e7fe      	b.n	8001494 <NMI_Handler+0x4>

08001496 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001496:	b480      	push	{r7}
 8001498:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800149a:	e7fe      	b.n	800149a <HardFault_Handler+0x4>

0800149c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800149c:	b480      	push	{r7}
 800149e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014a0:	e7fe      	b.n	80014a0 <MemManage_Handler+0x4>

080014a2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014a2:	b480      	push	{r7}
 80014a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014a6:	e7fe      	b.n	80014a6 <BusFault_Handler+0x4>

080014a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014a8:	b480      	push	{r7}
 80014aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014ac:	e7fe      	b.n	80014ac <UsageFault_Handler+0x4>

080014ae <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80014ae:	b480      	push	{r7}
 80014b0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80014b2:	bf00      	nop
 80014b4:	46bd      	mov	sp, r7
 80014b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ba:	4770      	bx	lr

080014bc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014bc:	b480      	push	{r7}
 80014be:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014c0:	bf00      	nop
 80014c2:	46bd      	mov	sp, r7
 80014c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c8:	4770      	bx	lr

080014ca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014ca:	b480      	push	{r7}
 80014cc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014ce:	bf00      	nop
 80014d0:	46bd      	mov	sp, r7
 80014d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d6:	4770      	bx	lr

080014d8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014dc:	f000 f8e4 	bl	80016a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80014e0:	bf00      	nop
 80014e2:	bd80      	pop	{r7, pc}

080014e4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80014e8:	4802      	ldr	r0, [pc, #8]	; (80014f4 <USART1_IRQHandler+0x10>)
 80014ea:	f003 fab7 	bl	8004a5c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80014ee:	bf00      	nop
 80014f0:	bd80      	pop	{r7, pc}
 80014f2:	bf00      	nop
 80014f4:	200001dc 	.word	0x200001dc

080014f8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80014fc:	4802      	ldr	r0, [pc, #8]	; (8001508 <USART2_IRQHandler+0x10>)
 80014fe:	f003 faad 	bl	8004a5c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001502:	bf00      	nop
 8001504:	bd80      	pop	{r7, pc}
 8001506:	bf00      	nop
 8001508:	20000220 	.word	0x20000220

0800150c <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
 8001510:	4802      	ldr	r0, [pc, #8]	; (800151c <OTG_HS_IRQHandler+0x10>)
 8001512:	f000 fdb6 	bl	8002082 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 8001516:	bf00      	nop
 8001518:	bd80      	pop	{r7, pc}
 800151a:	bf00      	nop
 800151c:	20001984 	.word	0x20001984

08001520 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	b086      	sub	sp, #24
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001528:	4a14      	ldr	r2, [pc, #80]	; (800157c <_sbrk+0x5c>)
 800152a:	4b15      	ldr	r3, [pc, #84]	; (8001580 <_sbrk+0x60>)
 800152c:	1ad3      	subs	r3, r2, r3
 800152e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001530:	697b      	ldr	r3, [r7, #20]
 8001532:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001534:	4b13      	ldr	r3, [pc, #76]	; (8001584 <_sbrk+0x64>)
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	2b00      	cmp	r3, #0
 800153a:	d102      	bne.n	8001542 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800153c:	4b11      	ldr	r3, [pc, #68]	; (8001584 <_sbrk+0x64>)
 800153e:	4a12      	ldr	r2, [pc, #72]	; (8001588 <_sbrk+0x68>)
 8001540:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001542:	4b10      	ldr	r3, [pc, #64]	; (8001584 <_sbrk+0x64>)
 8001544:	681a      	ldr	r2, [r3, #0]
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	4413      	add	r3, r2
 800154a:	693a      	ldr	r2, [r7, #16]
 800154c:	429a      	cmp	r2, r3
 800154e:	d207      	bcs.n	8001560 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001550:	f008 fab2 	bl	8009ab8 <__errno>
 8001554:	4603      	mov	r3, r0
 8001556:	220c      	movs	r2, #12
 8001558:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800155a:	f04f 33ff 	mov.w	r3, #4294967295
 800155e:	e009      	b.n	8001574 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001560:	4b08      	ldr	r3, [pc, #32]	; (8001584 <_sbrk+0x64>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001566:	4b07      	ldr	r3, [pc, #28]	; (8001584 <_sbrk+0x64>)
 8001568:	681a      	ldr	r2, [r3, #0]
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	4413      	add	r3, r2
 800156e:	4a05      	ldr	r2, [pc, #20]	; (8001584 <_sbrk+0x64>)
 8001570:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001572:	68fb      	ldr	r3, [r7, #12]
}
 8001574:	4618      	mov	r0, r3
 8001576:	3718      	adds	r7, #24
 8001578:	46bd      	mov	sp, r7
 800157a:	bd80      	pop	{r7, pc}
 800157c:	20020000 	.word	0x20020000
 8001580:	00000400 	.word	0x00000400
 8001584:	2000049c 	.word	0x2000049c
 8001588:	200020c0 	.word	0x200020c0

0800158c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800158c:	b480      	push	{r7}
 800158e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001590:	4b06      	ldr	r3, [pc, #24]	; (80015ac <SystemInit+0x20>)
 8001592:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001596:	4a05      	ldr	r2, [pc, #20]	; (80015ac <SystemInit+0x20>)
 8001598:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800159c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80015a0:	bf00      	nop
 80015a2:	46bd      	mov	sp, r7
 80015a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a8:	4770      	bx	lr
 80015aa:	bf00      	nop
 80015ac:	e000ed00 	.word	0xe000ed00

080015b0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80015b0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80015e8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80015b4:	480d      	ldr	r0, [pc, #52]	; (80015ec <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80015b6:	490e      	ldr	r1, [pc, #56]	; (80015f0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80015b8:	4a0e      	ldr	r2, [pc, #56]	; (80015f4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80015ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80015bc:	e002      	b.n	80015c4 <LoopCopyDataInit>

080015be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80015be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015c2:	3304      	adds	r3, #4

080015c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80015c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80015c8:	d3f9      	bcc.n	80015be <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80015ca:	4a0b      	ldr	r2, [pc, #44]	; (80015f8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80015cc:	4c0b      	ldr	r4, [pc, #44]	; (80015fc <LoopFillZerobss+0x26>)
  movs r3, #0
 80015ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80015d0:	e001      	b.n	80015d6 <LoopFillZerobss>

080015d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80015d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80015d4:	3204      	adds	r2, #4

080015d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80015d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80015d8:	d3fb      	bcc.n	80015d2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80015da:	f7ff ffd7 	bl	800158c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80015de:	f008 fa71 	bl	8009ac4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80015e2:	f7ff fb53 	bl	8000c8c <main>
  bx  lr    
 80015e6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80015e8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80015ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80015f0:	20000168 	.word	0x20000168
  ldr r2, =_sidata
 80015f4:	0800a494 	.word	0x0800a494
  ldr r2, =_sbss
 80015f8:	20000168 	.word	0x20000168
  ldr r4, =_ebss
 80015fc:	200020c0 	.word	0x200020c0

08001600 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001600:	e7fe      	b.n	8001600 <ADC_IRQHandler>
	...

08001604 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001608:	4b0e      	ldr	r3, [pc, #56]	; (8001644 <HAL_Init+0x40>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	4a0d      	ldr	r2, [pc, #52]	; (8001644 <HAL_Init+0x40>)
 800160e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001612:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001614:	4b0b      	ldr	r3, [pc, #44]	; (8001644 <HAL_Init+0x40>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	4a0a      	ldr	r2, [pc, #40]	; (8001644 <HAL_Init+0x40>)
 800161a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800161e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001620:	4b08      	ldr	r3, [pc, #32]	; (8001644 <HAL_Init+0x40>)
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	4a07      	ldr	r2, [pc, #28]	; (8001644 <HAL_Init+0x40>)
 8001626:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800162a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800162c:	2003      	movs	r0, #3
 800162e:	f000 f94f 	bl	80018d0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001632:	200f      	movs	r0, #15
 8001634:	f000 f808 	bl	8001648 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001638:	f7ff fe2e 	bl	8001298 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800163c:	2300      	movs	r3, #0
}
 800163e:	4618      	mov	r0, r3
 8001640:	bd80      	pop	{r7, pc}
 8001642:	bf00      	nop
 8001644:	40023c00 	.word	0x40023c00

08001648 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b082      	sub	sp, #8
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001650:	4b12      	ldr	r3, [pc, #72]	; (800169c <HAL_InitTick+0x54>)
 8001652:	681a      	ldr	r2, [r3, #0]
 8001654:	4b12      	ldr	r3, [pc, #72]	; (80016a0 <HAL_InitTick+0x58>)
 8001656:	781b      	ldrb	r3, [r3, #0]
 8001658:	4619      	mov	r1, r3
 800165a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800165e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001662:	fbb2 f3f3 	udiv	r3, r2, r3
 8001666:	4618      	mov	r0, r3
 8001668:	f000 f967 	bl	800193a <HAL_SYSTICK_Config>
 800166c:	4603      	mov	r3, r0
 800166e:	2b00      	cmp	r3, #0
 8001670:	d001      	beq.n	8001676 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001672:	2301      	movs	r3, #1
 8001674:	e00e      	b.n	8001694 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	2b0f      	cmp	r3, #15
 800167a:	d80a      	bhi.n	8001692 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800167c:	2200      	movs	r2, #0
 800167e:	6879      	ldr	r1, [r7, #4]
 8001680:	f04f 30ff 	mov.w	r0, #4294967295
 8001684:	f000 f92f 	bl	80018e6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001688:	4a06      	ldr	r2, [pc, #24]	; (80016a4 <HAL_InitTick+0x5c>)
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800168e:	2300      	movs	r3, #0
 8001690:	e000      	b.n	8001694 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001692:	2301      	movs	r3, #1
}
 8001694:	4618      	mov	r0, r3
 8001696:	3708      	adds	r7, #8
 8001698:	46bd      	mov	sp, r7
 800169a:	bd80      	pop	{r7, pc}
 800169c:	20000008 	.word	0x20000008
 80016a0:	20000010 	.word	0x20000010
 80016a4:	2000000c 	.word	0x2000000c

080016a8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016a8:	b480      	push	{r7}
 80016aa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80016ac:	4b06      	ldr	r3, [pc, #24]	; (80016c8 <HAL_IncTick+0x20>)
 80016ae:	781b      	ldrb	r3, [r3, #0]
 80016b0:	461a      	mov	r2, r3
 80016b2:	4b06      	ldr	r3, [pc, #24]	; (80016cc <HAL_IncTick+0x24>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	4413      	add	r3, r2
 80016b8:	4a04      	ldr	r2, [pc, #16]	; (80016cc <HAL_IncTick+0x24>)
 80016ba:	6013      	str	r3, [r2, #0]
}
 80016bc:	bf00      	nop
 80016be:	46bd      	mov	sp, r7
 80016c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c4:	4770      	bx	lr
 80016c6:	bf00      	nop
 80016c8:	20000010 	.word	0x20000010
 80016cc:	200004a0 	.word	0x200004a0

080016d0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016d0:	b480      	push	{r7}
 80016d2:	af00      	add	r7, sp, #0
  return uwTick;
 80016d4:	4b03      	ldr	r3, [pc, #12]	; (80016e4 <HAL_GetTick+0x14>)
 80016d6:	681b      	ldr	r3, [r3, #0]
}
 80016d8:	4618      	mov	r0, r3
 80016da:	46bd      	mov	sp, r7
 80016dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e0:	4770      	bx	lr
 80016e2:	bf00      	nop
 80016e4:	200004a0 	.word	0x200004a0

080016e8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b084      	sub	sp, #16
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80016f0:	f7ff ffee 	bl	80016d0 <HAL_GetTick>
 80016f4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001700:	d005      	beq.n	800170e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001702:	4b0a      	ldr	r3, [pc, #40]	; (800172c <HAL_Delay+0x44>)
 8001704:	781b      	ldrb	r3, [r3, #0]
 8001706:	461a      	mov	r2, r3
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	4413      	add	r3, r2
 800170c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800170e:	bf00      	nop
 8001710:	f7ff ffde 	bl	80016d0 <HAL_GetTick>
 8001714:	4602      	mov	r2, r0
 8001716:	68bb      	ldr	r3, [r7, #8]
 8001718:	1ad3      	subs	r3, r2, r3
 800171a:	68fa      	ldr	r2, [r7, #12]
 800171c:	429a      	cmp	r2, r3
 800171e:	d8f7      	bhi.n	8001710 <HAL_Delay+0x28>
  {
  }
}
 8001720:	bf00      	nop
 8001722:	bf00      	nop
 8001724:	3710      	adds	r7, #16
 8001726:	46bd      	mov	sp, r7
 8001728:	bd80      	pop	{r7, pc}
 800172a:	bf00      	nop
 800172c:	20000010 	.word	0x20000010

08001730 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001730:	b480      	push	{r7}
 8001732:	b085      	sub	sp, #20
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	f003 0307 	and.w	r3, r3, #7
 800173e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001740:	4b0c      	ldr	r3, [pc, #48]	; (8001774 <__NVIC_SetPriorityGrouping+0x44>)
 8001742:	68db      	ldr	r3, [r3, #12]
 8001744:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001746:	68ba      	ldr	r2, [r7, #8]
 8001748:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800174c:	4013      	ands	r3, r2
 800174e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001754:	68bb      	ldr	r3, [r7, #8]
 8001756:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001758:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800175c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001760:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001762:	4a04      	ldr	r2, [pc, #16]	; (8001774 <__NVIC_SetPriorityGrouping+0x44>)
 8001764:	68bb      	ldr	r3, [r7, #8]
 8001766:	60d3      	str	r3, [r2, #12]
}
 8001768:	bf00      	nop
 800176a:	3714      	adds	r7, #20
 800176c:	46bd      	mov	sp, r7
 800176e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001772:	4770      	bx	lr
 8001774:	e000ed00 	.word	0xe000ed00

08001778 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001778:	b480      	push	{r7}
 800177a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800177c:	4b04      	ldr	r3, [pc, #16]	; (8001790 <__NVIC_GetPriorityGrouping+0x18>)
 800177e:	68db      	ldr	r3, [r3, #12]
 8001780:	0a1b      	lsrs	r3, r3, #8
 8001782:	f003 0307 	and.w	r3, r3, #7
}
 8001786:	4618      	mov	r0, r3
 8001788:	46bd      	mov	sp, r7
 800178a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178e:	4770      	bx	lr
 8001790:	e000ed00 	.word	0xe000ed00

08001794 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001794:	b480      	push	{r7}
 8001796:	b083      	sub	sp, #12
 8001798:	af00      	add	r7, sp, #0
 800179a:	4603      	mov	r3, r0
 800179c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800179e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	db0b      	blt.n	80017be <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80017a6:	79fb      	ldrb	r3, [r7, #7]
 80017a8:	f003 021f 	and.w	r2, r3, #31
 80017ac:	4907      	ldr	r1, [pc, #28]	; (80017cc <__NVIC_EnableIRQ+0x38>)
 80017ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017b2:	095b      	lsrs	r3, r3, #5
 80017b4:	2001      	movs	r0, #1
 80017b6:	fa00 f202 	lsl.w	r2, r0, r2
 80017ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80017be:	bf00      	nop
 80017c0:	370c      	adds	r7, #12
 80017c2:	46bd      	mov	sp, r7
 80017c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c8:	4770      	bx	lr
 80017ca:	bf00      	nop
 80017cc:	e000e100 	.word	0xe000e100

080017d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80017d0:	b480      	push	{r7}
 80017d2:	b083      	sub	sp, #12
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	4603      	mov	r3, r0
 80017d8:	6039      	str	r1, [r7, #0]
 80017da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	db0a      	blt.n	80017fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017e4:	683b      	ldr	r3, [r7, #0]
 80017e6:	b2da      	uxtb	r2, r3
 80017e8:	490c      	ldr	r1, [pc, #48]	; (800181c <__NVIC_SetPriority+0x4c>)
 80017ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017ee:	0112      	lsls	r2, r2, #4
 80017f0:	b2d2      	uxtb	r2, r2
 80017f2:	440b      	add	r3, r1
 80017f4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80017f8:	e00a      	b.n	8001810 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017fa:	683b      	ldr	r3, [r7, #0]
 80017fc:	b2da      	uxtb	r2, r3
 80017fe:	4908      	ldr	r1, [pc, #32]	; (8001820 <__NVIC_SetPriority+0x50>)
 8001800:	79fb      	ldrb	r3, [r7, #7]
 8001802:	f003 030f 	and.w	r3, r3, #15
 8001806:	3b04      	subs	r3, #4
 8001808:	0112      	lsls	r2, r2, #4
 800180a:	b2d2      	uxtb	r2, r2
 800180c:	440b      	add	r3, r1
 800180e:	761a      	strb	r2, [r3, #24]
}
 8001810:	bf00      	nop
 8001812:	370c      	adds	r7, #12
 8001814:	46bd      	mov	sp, r7
 8001816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181a:	4770      	bx	lr
 800181c:	e000e100 	.word	0xe000e100
 8001820:	e000ed00 	.word	0xe000ed00

08001824 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001824:	b480      	push	{r7}
 8001826:	b089      	sub	sp, #36	; 0x24
 8001828:	af00      	add	r7, sp, #0
 800182a:	60f8      	str	r0, [r7, #12]
 800182c:	60b9      	str	r1, [r7, #8]
 800182e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	f003 0307 	and.w	r3, r3, #7
 8001836:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001838:	69fb      	ldr	r3, [r7, #28]
 800183a:	f1c3 0307 	rsb	r3, r3, #7
 800183e:	2b04      	cmp	r3, #4
 8001840:	bf28      	it	cs
 8001842:	2304      	movcs	r3, #4
 8001844:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001846:	69fb      	ldr	r3, [r7, #28]
 8001848:	3304      	adds	r3, #4
 800184a:	2b06      	cmp	r3, #6
 800184c:	d902      	bls.n	8001854 <NVIC_EncodePriority+0x30>
 800184e:	69fb      	ldr	r3, [r7, #28]
 8001850:	3b03      	subs	r3, #3
 8001852:	e000      	b.n	8001856 <NVIC_EncodePriority+0x32>
 8001854:	2300      	movs	r3, #0
 8001856:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001858:	f04f 32ff 	mov.w	r2, #4294967295
 800185c:	69bb      	ldr	r3, [r7, #24]
 800185e:	fa02 f303 	lsl.w	r3, r2, r3
 8001862:	43da      	mvns	r2, r3
 8001864:	68bb      	ldr	r3, [r7, #8]
 8001866:	401a      	ands	r2, r3
 8001868:	697b      	ldr	r3, [r7, #20]
 800186a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800186c:	f04f 31ff 	mov.w	r1, #4294967295
 8001870:	697b      	ldr	r3, [r7, #20]
 8001872:	fa01 f303 	lsl.w	r3, r1, r3
 8001876:	43d9      	mvns	r1, r3
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800187c:	4313      	orrs	r3, r2
         );
}
 800187e:	4618      	mov	r0, r3
 8001880:	3724      	adds	r7, #36	; 0x24
 8001882:	46bd      	mov	sp, r7
 8001884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001888:	4770      	bx	lr
	...

0800188c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	b082      	sub	sp, #8
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	3b01      	subs	r3, #1
 8001898:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800189c:	d301      	bcc.n	80018a2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800189e:	2301      	movs	r3, #1
 80018a0:	e00f      	b.n	80018c2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80018a2:	4a0a      	ldr	r2, [pc, #40]	; (80018cc <SysTick_Config+0x40>)
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	3b01      	subs	r3, #1
 80018a8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80018aa:	210f      	movs	r1, #15
 80018ac:	f04f 30ff 	mov.w	r0, #4294967295
 80018b0:	f7ff ff8e 	bl	80017d0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80018b4:	4b05      	ldr	r3, [pc, #20]	; (80018cc <SysTick_Config+0x40>)
 80018b6:	2200      	movs	r2, #0
 80018b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80018ba:	4b04      	ldr	r3, [pc, #16]	; (80018cc <SysTick_Config+0x40>)
 80018bc:	2207      	movs	r2, #7
 80018be:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80018c0:	2300      	movs	r3, #0
}
 80018c2:	4618      	mov	r0, r3
 80018c4:	3708      	adds	r7, #8
 80018c6:	46bd      	mov	sp, r7
 80018c8:	bd80      	pop	{r7, pc}
 80018ca:	bf00      	nop
 80018cc:	e000e010 	.word	0xe000e010

080018d0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b082      	sub	sp, #8
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80018d8:	6878      	ldr	r0, [r7, #4]
 80018da:	f7ff ff29 	bl	8001730 <__NVIC_SetPriorityGrouping>
}
 80018de:	bf00      	nop
 80018e0:	3708      	adds	r7, #8
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bd80      	pop	{r7, pc}

080018e6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80018e6:	b580      	push	{r7, lr}
 80018e8:	b086      	sub	sp, #24
 80018ea:	af00      	add	r7, sp, #0
 80018ec:	4603      	mov	r3, r0
 80018ee:	60b9      	str	r1, [r7, #8]
 80018f0:	607a      	str	r2, [r7, #4]
 80018f2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80018f4:	2300      	movs	r3, #0
 80018f6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80018f8:	f7ff ff3e 	bl	8001778 <__NVIC_GetPriorityGrouping>
 80018fc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80018fe:	687a      	ldr	r2, [r7, #4]
 8001900:	68b9      	ldr	r1, [r7, #8]
 8001902:	6978      	ldr	r0, [r7, #20]
 8001904:	f7ff ff8e 	bl	8001824 <NVIC_EncodePriority>
 8001908:	4602      	mov	r2, r0
 800190a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800190e:	4611      	mov	r1, r2
 8001910:	4618      	mov	r0, r3
 8001912:	f7ff ff5d 	bl	80017d0 <__NVIC_SetPriority>
}
 8001916:	bf00      	nop
 8001918:	3718      	adds	r7, #24
 800191a:	46bd      	mov	sp, r7
 800191c:	bd80      	pop	{r7, pc}

0800191e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800191e:	b580      	push	{r7, lr}
 8001920:	b082      	sub	sp, #8
 8001922:	af00      	add	r7, sp, #0
 8001924:	4603      	mov	r3, r0
 8001926:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001928:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800192c:	4618      	mov	r0, r3
 800192e:	f7ff ff31 	bl	8001794 <__NVIC_EnableIRQ>
}
 8001932:	bf00      	nop
 8001934:	3708      	adds	r7, #8
 8001936:	46bd      	mov	sp, r7
 8001938:	bd80      	pop	{r7, pc}

0800193a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800193a:	b580      	push	{r7, lr}
 800193c:	b082      	sub	sp, #8
 800193e:	af00      	add	r7, sp, #0
 8001940:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001942:	6878      	ldr	r0, [r7, #4]
 8001944:	f7ff ffa2 	bl	800188c <SysTick_Config>
 8001948:	4603      	mov	r3, r0
}
 800194a:	4618      	mov	r0, r3
 800194c:	3708      	adds	r7, #8
 800194e:	46bd      	mov	sp, r7
 8001950:	bd80      	pop	{r7, pc}

08001952 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001952:	b580      	push	{r7, lr}
 8001954:	b084      	sub	sp, #16
 8001956:	af00      	add	r7, sp, #0
 8001958:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800195e:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001960:	f7ff feb6 	bl	80016d0 <HAL_GetTick>
 8001964:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800196c:	b2db      	uxtb	r3, r3
 800196e:	2b02      	cmp	r3, #2
 8001970:	d008      	beq.n	8001984 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	2280      	movs	r2, #128	; 0x80
 8001976:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	2200      	movs	r2, #0
 800197c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001980:	2301      	movs	r3, #1
 8001982:	e052      	b.n	8001a2a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	681a      	ldr	r2, [r3, #0]
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f022 0216 	bic.w	r2, r2, #22
 8001992:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	695a      	ldr	r2, [r3, #20]
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80019a2:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d103      	bne.n	80019b4 <HAL_DMA_Abort+0x62>
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d007      	beq.n	80019c4 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	681a      	ldr	r2, [r3, #0]
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	f022 0208 	bic.w	r2, r2, #8
 80019c2:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	681a      	ldr	r2, [r3, #0]
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f022 0201 	bic.w	r2, r2, #1
 80019d2:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80019d4:	e013      	b.n	80019fe <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80019d6:	f7ff fe7b 	bl	80016d0 <HAL_GetTick>
 80019da:	4602      	mov	r2, r0
 80019dc:	68bb      	ldr	r3, [r7, #8]
 80019de:	1ad3      	subs	r3, r2, r3
 80019e0:	2b05      	cmp	r3, #5
 80019e2:	d90c      	bls.n	80019fe <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	2220      	movs	r2, #32
 80019e8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	2203      	movs	r2, #3
 80019ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	2200      	movs	r2, #0
 80019f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80019fa:	2303      	movs	r3, #3
 80019fc:	e015      	b.n	8001a2a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	f003 0301 	and.w	r3, r3, #1
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d1e4      	bne.n	80019d6 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a10:	223f      	movs	r2, #63	; 0x3f
 8001a12:	409a      	lsls	r2, r3
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	2201      	movs	r2, #1
 8001a1c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	2200      	movs	r2, #0
 8001a24:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001a28:	2300      	movs	r3, #0
}
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	3710      	adds	r7, #16
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bd80      	pop	{r7, pc}

08001a32 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001a32:	b480      	push	{r7}
 8001a34:	b083      	sub	sp, #12
 8001a36:	af00      	add	r7, sp, #0
 8001a38:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001a40:	b2db      	uxtb	r3, r3
 8001a42:	2b02      	cmp	r3, #2
 8001a44:	d004      	beq.n	8001a50 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	2280      	movs	r2, #128	; 0x80
 8001a4a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001a4c:	2301      	movs	r3, #1
 8001a4e:	e00c      	b.n	8001a6a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	2205      	movs	r2, #5
 8001a54:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	681a      	ldr	r2, [r3, #0]
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	f022 0201 	bic.w	r2, r2, #1
 8001a66:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001a68:	2300      	movs	r3, #0
}
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	370c      	adds	r7, #12
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a74:	4770      	bx	lr
	...

08001a78 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	b089      	sub	sp, #36	; 0x24
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
 8001a80:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001a82:	2300      	movs	r3, #0
 8001a84:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001a86:	2300      	movs	r3, #0
 8001a88:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a8e:	2300      	movs	r3, #0
 8001a90:	61fb      	str	r3, [r7, #28]
 8001a92:	e16b      	b.n	8001d6c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001a94:	2201      	movs	r2, #1
 8001a96:	69fb      	ldr	r3, [r7, #28]
 8001a98:	fa02 f303 	lsl.w	r3, r2, r3
 8001a9c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a9e:	683b      	ldr	r3, [r7, #0]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	697a      	ldr	r2, [r7, #20]
 8001aa4:	4013      	ands	r3, r2
 8001aa6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001aa8:	693a      	ldr	r2, [r7, #16]
 8001aaa:	697b      	ldr	r3, [r7, #20]
 8001aac:	429a      	cmp	r2, r3
 8001aae:	f040 815a 	bne.w	8001d66 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001ab2:	683b      	ldr	r3, [r7, #0]
 8001ab4:	685b      	ldr	r3, [r3, #4]
 8001ab6:	f003 0303 	and.w	r3, r3, #3
 8001aba:	2b01      	cmp	r3, #1
 8001abc:	d005      	beq.n	8001aca <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001abe:	683b      	ldr	r3, [r7, #0]
 8001ac0:	685b      	ldr	r3, [r3, #4]
 8001ac2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001ac6:	2b02      	cmp	r3, #2
 8001ac8:	d130      	bne.n	8001b2c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	689b      	ldr	r3, [r3, #8]
 8001ace:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001ad0:	69fb      	ldr	r3, [r7, #28]
 8001ad2:	005b      	lsls	r3, r3, #1
 8001ad4:	2203      	movs	r2, #3
 8001ad6:	fa02 f303 	lsl.w	r3, r2, r3
 8001ada:	43db      	mvns	r3, r3
 8001adc:	69ba      	ldr	r2, [r7, #24]
 8001ade:	4013      	ands	r3, r2
 8001ae0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001ae2:	683b      	ldr	r3, [r7, #0]
 8001ae4:	68da      	ldr	r2, [r3, #12]
 8001ae6:	69fb      	ldr	r3, [r7, #28]
 8001ae8:	005b      	lsls	r3, r3, #1
 8001aea:	fa02 f303 	lsl.w	r3, r2, r3
 8001aee:	69ba      	ldr	r2, [r7, #24]
 8001af0:	4313      	orrs	r3, r2
 8001af2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	69ba      	ldr	r2, [r7, #24]
 8001af8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	685b      	ldr	r3, [r3, #4]
 8001afe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001b00:	2201      	movs	r2, #1
 8001b02:	69fb      	ldr	r3, [r7, #28]
 8001b04:	fa02 f303 	lsl.w	r3, r2, r3
 8001b08:	43db      	mvns	r3, r3
 8001b0a:	69ba      	ldr	r2, [r7, #24]
 8001b0c:	4013      	ands	r3, r2
 8001b0e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001b10:	683b      	ldr	r3, [r7, #0]
 8001b12:	685b      	ldr	r3, [r3, #4]
 8001b14:	091b      	lsrs	r3, r3, #4
 8001b16:	f003 0201 	and.w	r2, r3, #1
 8001b1a:	69fb      	ldr	r3, [r7, #28]
 8001b1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b20:	69ba      	ldr	r2, [r7, #24]
 8001b22:	4313      	orrs	r3, r2
 8001b24:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	69ba      	ldr	r2, [r7, #24]
 8001b2a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001b2c:	683b      	ldr	r3, [r7, #0]
 8001b2e:	685b      	ldr	r3, [r3, #4]
 8001b30:	f003 0303 	and.w	r3, r3, #3
 8001b34:	2b03      	cmp	r3, #3
 8001b36:	d017      	beq.n	8001b68 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	68db      	ldr	r3, [r3, #12]
 8001b3c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001b3e:	69fb      	ldr	r3, [r7, #28]
 8001b40:	005b      	lsls	r3, r3, #1
 8001b42:	2203      	movs	r2, #3
 8001b44:	fa02 f303 	lsl.w	r3, r2, r3
 8001b48:	43db      	mvns	r3, r3
 8001b4a:	69ba      	ldr	r2, [r7, #24]
 8001b4c:	4013      	ands	r3, r2
 8001b4e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001b50:	683b      	ldr	r3, [r7, #0]
 8001b52:	689a      	ldr	r2, [r3, #8]
 8001b54:	69fb      	ldr	r3, [r7, #28]
 8001b56:	005b      	lsls	r3, r3, #1
 8001b58:	fa02 f303 	lsl.w	r3, r2, r3
 8001b5c:	69ba      	ldr	r2, [r7, #24]
 8001b5e:	4313      	orrs	r3, r2
 8001b60:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	69ba      	ldr	r2, [r7, #24]
 8001b66:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b68:	683b      	ldr	r3, [r7, #0]
 8001b6a:	685b      	ldr	r3, [r3, #4]
 8001b6c:	f003 0303 	and.w	r3, r3, #3
 8001b70:	2b02      	cmp	r3, #2
 8001b72:	d123      	bne.n	8001bbc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001b74:	69fb      	ldr	r3, [r7, #28]
 8001b76:	08da      	lsrs	r2, r3, #3
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	3208      	adds	r2, #8
 8001b7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b80:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001b82:	69fb      	ldr	r3, [r7, #28]
 8001b84:	f003 0307 	and.w	r3, r3, #7
 8001b88:	009b      	lsls	r3, r3, #2
 8001b8a:	220f      	movs	r2, #15
 8001b8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b90:	43db      	mvns	r3, r3
 8001b92:	69ba      	ldr	r2, [r7, #24]
 8001b94:	4013      	ands	r3, r2
 8001b96:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001b98:	683b      	ldr	r3, [r7, #0]
 8001b9a:	691a      	ldr	r2, [r3, #16]
 8001b9c:	69fb      	ldr	r3, [r7, #28]
 8001b9e:	f003 0307 	and.w	r3, r3, #7
 8001ba2:	009b      	lsls	r3, r3, #2
 8001ba4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba8:	69ba      	ldr	r2, [r7, #24]
 8001baa:	4313      	orrs	r3, r2
 8001bac:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001bae:	69fb      	ldr	r3, [r7, #28]
 8001bb0:	08da      	lsrs	r2, r3, #3
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	3208      	adds	r2, #8
 8001bb6:	69b9      	ldr	r1, [r7, #24]
 8001bb8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001bc2:	69fb      	ldr	r3, [r7, #28]
 8001bc4:	005b      	lsls	r3, r3, #1
 8001bc6:	2203      	movs	r2, #3
 8001bc8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bcc:	43db      	mvns	r3, r3
 8001bce:	69ba      	ldr	r2, [r7, #24]
 8001bd0:	4013      	ands	r3, r2
 8001bd2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001bd4:	683b      	ldr	r3, [r7, #0]
 8001bd6:	685b      	ldr	r3, [r3, #4]
 8001bd8:	f003 0203 	and.w	r2, r3, #3
 8001bdc:	69fb      	ldr	r3, [r7, #28]
 8001bde:	005b      	lsls	r3, r3, #1
 8001be0:	fa02 f303 	lsl.w	r3, r2, r3
 8001be4:	69ba      	ldr	r2, [r7, #24]
 8001be6:	4313      	orrs	r3, r2
 8001be8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	69ba      	ldr	r2, [r7, #24]
 8001bee:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001bf0:	683b      	ldr	r3, [r7, #0]
 8001bf2:	685b      	ldr	r3, [r3, #4]
 8001bf4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	f000 80b4 	beq.w	8001d66 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bfe:	2300      	movs	r3, #0
 8001c00:	60fb      	str	r3, [r7, #12]
 8001c02:	4b60      	ldr	r3, [pc, #384]	; (8001d84 <HAL_GPIO_Init+0x30c>)
 8001c04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c06:	4a5f      	ldr	r2, [pc, #380]	; (8001d84 <HAL_GPIO_Init+0x30c>)
 8001c08:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c0c:	6453      	str	r3, [r2, #68]	; 0x44
 8001c0e:	4b5d      	ldr	r3, [pc, #372]	; (8001d84 <HAL_GPIO_Init+0x30c>)
 8001c10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c12:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c16:	60fb      	str	r3, [r7, #12]
 8001c18:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001c1a:	4a5b      	ldr	r2, [pc, #364]	; (8001d88 <HAL_GPIO_Init+0x310>)
 8001c1c:	69fb      	ldr	r3, [r7, #28]
 8001c1e:	089b      	lsrs	r3, r3, #2
 8001c20:	3302      	adds	r3, #2
 8001c22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c26:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001c28:	69fb      	ldr	r3, [r7, #28]
 8001c2a:	f003 0303 	and.w	r3, r3, #3
 8001c2e:	009b      	lsls	r3, r3, #2
 8001c30:	220f      	movs	r2, #15
 8001c32:	fa02 f303 	lsl.w	r3, r2, r3
 8001c36:	43db      	mvns	r3, r3
 8001c38:	69ba      	ldr	r2, [r7, #24]
 8001c3a:	4013      	ands	r3, r2
 8001c3c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	4a52      	ldr	r2, [pc, #328]	; (8001d8c <HAL_GPIO_Init+0x314>)
 8001c42:	4293      	cmp	r3, r2
 8001c44:	d02b      	beq.n	8001c9e <HAL_GPIO_Init+0x226>
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	4a51      	ldr	r2, [pc, #324]	; (8001d90 <HAL_GPIO_Init+0x318>)
 8001c4a:	4293      	cmp	r3, r2
 8001c4c:	d025      	beq.n	8001c9a <HAL_GPIO_Init+0x222>
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	4a50      	ldr	r2, [pc, #320]	; (8001d94 <HAL_GPIO_Init+0x31c>)
 8001c52:	4293      	cmp	r3, r2
 8001c54:	d01f      	beq.n	8001c96 <HAL_GPIO_Init+0x21e>
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	4a4f      	ldr	r2, [pc, #316]	; (8001d98 <HAL_GPIO_Init+0x320>)
 8001c5a:	4293      	cmp	r3, r2
 8001c5c:	d019      	beq.n	8001c92 <HAL_GPIO_Init+0x21a>
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	4a4e      	ldr	r2, [pc, #312]	; (8001d9c <HAL_GPIO_Init+0x324>)
 8001c62:	4293      	cmp	r3, r2
 8001c64:	d013      	beq.n	8001c8e <HAL_GPIO_Init+0x216>
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	4a4d      	ldr	r2, [pc, #308]	; (8001da0 <HAL_GPIO_Init+0x328>)
 8001c6a:	4293      	cmp	r3, r2
 8001c6c:	d00d      	beq.n	8001c8a <HAL_GPIO_Init+0x212>
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	4a4c      	ldr	r2, [pc, #304]	; (8001da4 <HAL_GPIO_Init+0x32c>)
 8001c72:	4293      	cmp	r3, r2
 8001c74:	d007      	beq.n	8001c86 <HAL_GPIO_Init+0x20e>
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	4a4b      	ldr	r2, [pc, #300]	; (8001da8 <HAL_GPIO_Init+0x330>)
 8001c7a:	4293      	cmp	r3, r2
 8001c7c:	d101      	bne.n	8001c82 <HAL_GPIO_Init+0x20a>
 8001c7e:	2307      	movs	r3, #7
 8001c80:	e00e      	b.n	8001ca0 <HAL_GPIO_Init+0x228>
 8001c82:	2308      	movs	r3, #8
 8001c84:	e00c      	b.n	8001ca0 <HAL_GPIO_Init+0x228>
 8001c86:	2306      	movs	r3, #6
 8001c88:	e00a      	b.n	8001ca0 <HAL_GPIO_Init+0x228>
 8001c8a:	2305      	movs	r3, #5
 8001c8c:	e008      	b.n	8001ca0 <HAL_GPIO_Init+0x228>
 8001c8e:	2304      	movs	r3, #4
 8001c90:	e006      	b.n	8001ca0 <HAL_GPIO_Init+0x228>
 8001c92:	2303      	movs	r3, #3
 8001c94:	e004      	b.n	8001ca0 <HAL_GPIO_Init+0x228>
 8001c96:	2302      	movs	r3, #2
 8001c98:	e002      	b.n	8001ca0 <HAL_GPIO_Init+0x228>
 8001c9a:	2301      	movs	r3, #1
 8001c9c:	e000      	b.n	8001ca0 <HAL_GPIO_Init+0x228>
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	69fa      	ldr	r2, [r7, #28]
 8001ca2:	f002 0203 	and.w	r2, r2, #3
 8001ca6:	0092      	lsls	r2, r2, #2
 8001ca8:	4093      	lsls	r3, r2
 8001caa:	69ba      	ldr	r2, [r7, #24]
 8001cac:	4313      	orrs	r3, r2
 8001cae:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001cb0:	4935      	ldr	r1, [pc, #212]	; (8001d88 <HAL_GPIO_Init+0x310>)
 8001cb2:	69fb      	ldr	r3, [r7, #28]
 8001cb4:	089b      	lsrs	r3, r3, #2
 8001cb6:	3302      	adds	r3, #2
 8001cb8:	69ba      	ldr	r2, [r7, #24]
 8001cba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001cbe:	4b3b      	ldr	r3, [pc, #236]	; (8001dac <HAL_GPIO_Init+0x334>)
 8001cc0:	689b      	ldr	r3, [r3, #8]
 8001cc2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cc4:	693b      	ldr	r3, [r7, #16]
 8001cc6:	43db      	mvns	r3, r3
 8001cc8:	69ba      	ldr	r2, [r7, #24]
 8001cca:	4013      	ands	r3, r2
 8001ccc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001cce:	683b      	ldr	r3, [r7, #0]
 8001cd0:	685b      	ldr	r3, [r3, #4]
 8001cd2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d003      	beq.n	8001ce2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001cda:	69ba      	ldr	r2, [r7, #24]
 8001cdc:	693b      	ldr	r3, [r7, #16]
 8001cde:	4313      	orrs	r3, r2
 8001ce0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001ce2:	4a32      	ldr	r2, [pc, #200]	; (8001dac <HAL_GPIO_Init+0x334>)
 8001ce4:	69bb      	ldr	r3, [r7, #24]
 8001ce6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001ce8:	4b30      	ldr	r3, [pc, #192]	; (8001dac <HAL_GPIO_Init+0x334>)
 8001cea:	68db      	ldr	r3, [r3, #12]
 8001cec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cee:	693b      	ldr	r3, [r7, #16]
 8001cf0:	43db      	mvns	r3, r3
 8001cf2:	69ba      	ldr	r2, [r7, #24]
 8001cf4:	4013      	ands	r3, r2
 8001cf6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001cf8:	683b      	ldr	r3, [r7, #0]
 8001cfa:	685b      	ldr	r3, [r3, #4]
 8001cfc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d003      	beq.n	8001d0c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001d04:	69ba      	ldr	r2, [r7, #24]
 8001d06:	693b      	ldr	r3, [r7, #16]
 8001d08:	4313      	orrs	r3, r2
 8001d0a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001d0c:	4a27      	ldr	r2, [pc, #156]	; (8001dac <HAL_GPIO_Init+0x334>)
 8001d0e:	69bb      	ldr	r3, [r7, #24]
 8001d10:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001d12:	4b26      	ldr	r3, [pc, #152]	; (8001dac <HAL_GPIO_Init+0x334>)
 8001d14:	685b      	ldr	r3, [r3, #4]
 8001d16:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d18:	693b      	ldr	r3, [r7, #16]
 8001d1a:	43db      	mvns	r3, r3
 8001d1c:	69ba      	ldr	r2, [r7, #24]
 8001d1e:	4013      	ands	r3, r2
 8001d20:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001d22:	683b      	ldr	r3, [r7, #0]
 8001d24:	685b      	ldr	r3, [r3, #4]
 8001d26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d003      	beq.n	8001d36 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001d2e:	69ba      	ldr	r2, [r7, #24]
 8001d30:	693b      	ldr	r3, [r7, #16]
 8001d32:	4313      	orrs	r3, r2
 8001d34:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001d36:	4a1d      	ldr	r2, [pc, #116]	; (8001dac <HAL_GPIO_Init+0x334>)
 8001d38:	69bb      	ldr	r3, [r7, #24]
 8001d3a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001d3c:	4b1b      	ldr	r3, [pc, #108]	; (8001dac <HAL_GPIO_Init+0x334>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d42:	693b      	ldr	r3, [r7, #16]
 8001d44:	43db      	mvns	r3, r3
 8001d46:	69ba      	ldr	r2, [r7, #24]
 8001d48:	4013      	ands	r3, r2
 8001d4a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001d4c:	683b      	ldr	r3, [r7, #0]
 8001d4e:	685b      	ldr	r3, [r3, #4]
 8001d50:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d003      	beq.n	8001d60 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001d58:	69ba      	ldr	r2, [r7, #24]
 8001d5a:	693b      	ldr	r3, [r7, #16]
 8001d5c:	4313      	orrs	r3, r2
 8001d5e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001d60:	4a12      	ldr	r2, [pc, #72]	; (8001dac <HAL_GPIO_Init+0x334>)
 8001d62:	69bb      	ldr	r3, [r7, #24]
 8001d64:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d66:	69fb      	ldr	r3, [r7, #28]
 8001d68:	3301      	adds	r3, #1
 8001d6a:	61fb      	str	r3, [r7, #28]
 8001d6c:	69fb      	ldr	r3, [r7, #28]
 8001d6e:	2b0f      	cmp	r3, #15
 8001d70:	f67f ae90 	bls.w	8001a94 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001d74:	bf00      	nop
 8001d76:	bf00      	nop
 8001d78:	3724      	adds	r7, #36	; 0x24
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d80:	4770      	bx	lr
 8001d82:	bf00      	nop
 8001d84:	40023800 	.word	0x40023800
 8001d88:	40013800 	.word	0x40013800
 8001d8c:	40020000 	.word	0x40020000
 8001d90:	40020400 	.word	0x40020400
 8001d94:	40020800 	.word	0x40020800
 8001d98:	40020c00 	.word	0x40020c00
 8001d9c:	40021000 	.word	0x40021000
 8001da0:	40021400 	.word	0x40021400
 8001da4:	40021800 	.word	0x40021800
 8001da8:	40021c00 	.word	0x40021c00
 8001dac:	40013c00 	.word	0x40013c00

08001db0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001db0:	b480      	push	{r7}
 8001db2:	b083      	sub	sp, #12
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
 8001db8:	460b      	mov	r3, r1
 8001dba:	807b      	strh	r3, [r7, #2]
 8001dbc:	4613      	mov	r3, r2
 8001dbe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001dc0:	787b      	ldrb	r3, [r7, #1]
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d003      	beq.n	8001dce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001dc6:	887a      	ldrh	r2, [r7, #2]
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001dcc:	e003      	b.n	8001dd6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001dce:	887b      	ldrh	r3, [r7, #2]
 8001dd0:	041a      	lsls	r2, r3, #16
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	619a      	str	r2, [r3, #24]
}
 8001dd6:	bf00      	nop
 8001dd8:	370c      	adds	r7, #12
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de0:	4770      	bx	lr

08001de2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001de2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001de4:	b08f      	sub	sp, #60	; 0x3c
 8001de6:	af0a      	add	r7, sp, #40	; 0x28
 8001de8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d101      	bne.n	8001df4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001df0:	2301      	movs	r3, #1
 8001df2:	e10f      	b.n	8002014 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8001e00:	b2db      	uxtb	r3, r3
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d106      	bne.n	8001e14 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	2200      	movs	r2, #0
 8001e0a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001e0e:	6878      	ldr	r0, [r7, #4]
 8001e10:	f007 fb3c 	bl	800948c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	2203      	movs	r2, #3
 8001e18:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001e1c:	68bb      	ldr	r3, [r7, #8]
 8001e1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d102      	bne.n	8001e2e <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	4618      	mov	r0, r3
 8001e34:	f003 fe8f 	bl	8005b56 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	603b      	str	r3, [r7, #0]
 8001e3e:	687e      	ldr	r6, [r7, #4]
 8001e40:	466d      	mov	r5, sp
 8001e42:	f106 0410 	add.w	r4, r6, #16
 8001e46:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e48:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e4a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e4c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e4e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001e52:	e885 0003 	stmia.w	r5, {r0, r1}
 8001e56:	1d33      	adds	r3, r6, #4
 8001e58:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001e5a:	6838      	ldr	r0, [r7, #0]
 8001e5c:	f003 fd66 	bl	800592c <USB_CoreInit>
 8001e60:	4603      	mov	r3, r0
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d005      	beq.n	8001e72 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	2202      	movs	r2, #2
 8001e6a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001e6e:	2301      	movs	r3, #1
 8001e70:	e0d0      	b.n	8002014 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	2100      	movs	r1, #0
 8001e78:	4618      	mov	r0, r3
 8001e7a:	f003 fe7d 	bl	8005b78 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001e7e:	2300      	movs	r3, #0
 8001e80:	73fb      	strb	r3, [r7, #15]
 8001e82:	e04a      	b.n	8001f1a <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001e84:	7bfa      	ldrb	r2, [r7, #15]
 8001e86:	6879      	ldr	r1, [r7, #4]
 8001e88:	4613      	mov	r3, r2
 8001e8a:	00db      	lsls	r3, r3, #3
 8001e8c:	4413      	add	r3, r2
 8001e8e:	009b      	lsls	r3, r3, #2
 8001e90:	440b      	add	r3, r1
 8001e92:	333d      	adds	r3, #61	; 0x3d
 8001e94:	2201      	movs	r2, #1
 8001e96:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001e98:	7bfa      	ldrb	r2, [r7, #15]
 8001e9a:	6879      	ldr	r1, [r7, #4]
 8001e9c:	4613      	mov	r3, r2
 8001e9e:	00db      	lsls	r3, r3, #3
 8001ea0:	4413      	add	r3, r2
 8001ea2:	009b      	lsls	r3, r3, #2
 8001ea4:	440b      	add	r3, r1
 8001ea6:	333c      	adds	r3, #60	; 0x3c
 8001ea8:	7bfa      	ldrb	r2, [r7, #15]
 8001eaa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001eac:	7bfa      	ldrb	r2, [r7, #15]
 8001eae:	7bfb      	ldrb	r3, [r7, #15]
 8001eb0:	b298      	uxth	r0, r3
 8001eb2:	6879      	ldr	r1, [r7, #4]
 8001eb4:	4613      	mov	r3, r2
 8001eb6:	00db      	lsls	r3, r3, #3
 8001eb8:	4413      	add	r3, r2
 8001eba:	009b      	lsls	r3, r3, #2
 8001ebc:	440b      	add	r3, r1
 8001ebe:	3344      	adds	r3, #68	; 0x44
 8001ec0:	4602      	mov	r2, r0
 8001ec2:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001ec4:	7bfa      	ldrb	r2, [r7, #15]
 8001ec6:	6879      	ldr	r1, [r7, #4]
 8001ec8:	4613      	mov	r3, r2
 8001eca:	00db      	lsls	r3, r3, #3
 8001ecc:	4413      	add	r3, r2
 8001ece:	009b      	lsls	r3, r3, #2
 8001ed0:	440b      	add	r3, r1
 8001ed2:	3340      	adds	r3, #64	; 0x40
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001ed8:	7bfa      	ldrb	r2, [r7, #15]
 8001eda:	6879      	ldr	r1, [r7, #4]
 8001edc:	4613      	mov	r3, r2
 8001ede:	00db      	lsls	r3, r3, #3
 8001ee0:	4413      	add	r3, r2
 8001ee2:	009b      	lsls	r3, r3, #2
 8001ee4:	440b      	add	r3, r1
 8001ee6:	3348      	adds	r3, #72	; 0x48
 8001ee8:	2200      	movs	r2, #0
 8001eea:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001eec:	7bfa      	ldrb	r2, [r7, #15]
 8001eee:	6879      	ldr	r1, [r7, #4]
 8001ef0:	4613      	mov	r3, r2
 8001ef2:	00db      	lsls	r3, r3, #3
 8001ef4:	4413      	add	r3, r2
 8001ef6:	009b      	lsls	r3, r3, #2
 8001ef8:	440b      	add	r3, r1
 8001efa:	334c      	adds	r3, #76	; 0x4c
 8001efc:	2200      	movs	r2, #0
 8001efe:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001f00:	7bfa      	ldrb	r2, [r7, #15]
 8001f02:	6879      	ldr	r1, [r7, #4]
 8001f04:	4613      	mov	r3, r2
 8001f06:	00db      	lsls	r3, r3, #3
 8001f08:	4413      	add	r3, r2
 8001f0a:	009b      	lsls	r3, r3, #2
 8001f0c:	440b      	add	r3, r1
 8001f0e:	3354      	adds	r3, #84	; 0x54
 8001f10:	2200      	movs	r2, #0
 8001f12:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f14:	7bfb      	ldrb	r3, [r7, #15]
 8001f16:	3301      	adds	r3, #1
 8001f18:	73fb      	strb	r3, [r7, #15]
 8001f1a:	7bfa      	ldrb	r2, [r7, #15]
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	685b      	ldr	r3, [r3, #4]
 8001f20:	429a      	cmp	r2, r3
 8001f22:	d3af      	bcc.n	8001e84 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f24:	2300      	movs	r3, #0
 8001f26:	73fb      	strb	r3, [r7, #15]
 8001f28:	e044      	b.n	8001fb4 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001f2a:	7bfa      	ldrb	r2, [r7, #15]
 8001f2c:	6879      	ldr	r1, [r7, #4]
 8001f2e:	4613      	mov	r3, r2
 8001f30:	00db      	lsls	r3, r3, #3
 8001f32:	4413      	add	r3, r2
 8001f34:	009b      	lsls	r3, r3, #2
 8001f36:	440b      	add	r3, r1
 8001f38:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001f40:	7bfa      	ldrb	r2, [r7, #15]
 8001f42:	6879      	ldr	r1, [r7, #4]
 8001f44:	4613      	mov	r3, r2
 8001f46:	00db      	lsls	r3, r3, #3
 8001f48:	4413      	add	r3, r2
 8001f4a:	009b      	lsls	r3, r3, #2
 8001f4c:	440b      	add	r3, r1
 8001f4e:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8001f52:	7bfa      	ldrb	r2, [r7, #15]
 8001f54:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001f56:	7bfa      	ldrb	r2, [r7, #15]
 8001f58:	6879      	ldr	r1, [r7, #4]
 8001f5a:	4613      	mov	r3, r2
 8001f5c:	00db      	lsls	r3, r3, #3
 8001f5e:	4413      	add	r3, r2
 8001f60:	009b      	lsls	r3, r3, #2
 8001f62:	440b      	add	r3, r1
 8001f64:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001f68:	2200      	movs	r2, #0
 8001f6a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001f6c:	7bfa      	ldrb	r2, [r7, #15]
 8001f6e:	6879      	ldr	r1, [r7, #4]
 8001f70:	4613      	mov	r3, r2
 8001f72:	00db      	lsls	r3, r3, #3
 8001f74:	4413      	add	r3, r2
 8001f76:	009b      	lsls	r3, r3, #2
 8001f78:	440b      	add	r3, r1
 8001f7a:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8001f7e:	2200      	movs	r2, #0
 8001f80:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001f82:	7bfa      	ldrb	r2, [r7, #15]
 8001f84:	6879      	ldr	r1, [r7, #4]
 8001f86:	4613      	mov	r3, r2
 8001f88:	00db      	lsls	r3, r3, #3
 8001f8a:	4413      	add	r3, r2
 8001f8c:	009b      	lsls	r3, r3, #2
 8001f8e:	440b      	add	r3, r1
 8001f90:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8001f94:	2200      	movs	r2, #0
 8001f96:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001f98:	7bfa      	ldrb	r2, [r7, #15]
 8001f9a:	6879      	ldr	r1, [r7, #4]
 8001f9c:	4613      	mov	r3, r2
 8001f9e:	00db      	lsls	r3, r3, #3
 8001fa0:	4413      	add	r3, r2
 8001fa2:	009b      	lsls	r3, r3, #2
 8001fa4:	440b      	add	r3, r1
 8001fa6:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8001faa:	2200      	movs	r2, #0
 8001fac:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001fae:	7bfb      	ldrb	r3, [r7, #15]
 8001fb0:	3301      	adds	r3, #1
 8001fb2:	73fb      	strb	r3, [r7, #15]
 8001fb4:	7bfa      	ldrb	r2, [r7, #15]
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	685b      	ldr	r3, [r3, #4]
 8001fba:	429a      	cmp	r2, r3
 8001fbc:	d3b5      	bcc.n	8001f2a <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	603b      	str	r3, [r7, #0]
 8001fc4:	687e      	ldr	r6, [r7, #4]
 8001fc6:	466d      	mov	r5, sp
 8001fc8:	f106 0410 	add.w	r4, r6, #16
 8001fcc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001fce:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001fd0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001fd2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001fd4:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001fd8:	e885 0003 	stmia.w	r5, {r0, r1}
 8001fdc:	1d33      	adds	r3, r6, #4
 8001fde:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001fe0:	6838      	ldr	r0, [r7, #0]
 8001fe2:	f003 fe15 	bl	8005c10 <USB_DevInit>
 8001fe6:	4603      	mov	r3, r0
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d005      	beq.n	8001ff8 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	2202      	movs	r2, #2
 8001ff0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001ff4:	2301      	movs	r3, #1
 8001ff6:	e00d      	b.n	8002014 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	2201      	movs	r2, #1
 8002004:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	4618      	mov	r0, r3
 800200e:	f004 ff64 	bl	8006eda <USB_DevDisconnect>

  return HAL_OK;
 8002012:	2300      	movs	r3, #0
}
 8002014:	4618      	mov	r0, r3
 8002016:	3714      	adds	r7, #20
 8002018:	46bd      	mov	sp, r7
 800201a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800201c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	b084      	sub	sp, #16
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002030:	2b01      	cmp	r3, #1
 8002032:	d101      	bne.n	8002038 <HAL_PCD_Start+0x1c>
 8002034:	2302      	movs	r3, #2
 8002036:	e020      	b.n	800207a <HAL_PCD_Start+0x5e>
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	2201      	movs	r2, #1
 800203c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002044:	2b01      	cmp	r3, #1
 8002046:	d109      	bne.n	800205c <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800204c:	2b01      	cmp	r3, #1
 800204e:	d005      	beq.n	800205c <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002054:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	4618      	mov	r0, r3
 8002062:	f003 fd67 	bl	8005b34 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	4618      	mov	r0, r3
 800206c:	f004 ff14 	bl	8006e98 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	2200      	movs	r2, #0
 8002074:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002078:	2300      	movs	r3, #0
}
 800207a:	4618      	mov	r0, r3
 800207c:	3710      	adds	r7, #16
 800207e:	46bd      	mov	sp, r7
 8002080:	bd80      	pop	{r7, pc}

08002082 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002082:	b590      	push	{r4, r7, lr}
 8002084:	b08d      	sub	sp, #52	; 0x34
 8002086:	af00      	add	r7, sp, #0
 8002088:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002090:	6a3b      	ldr	r3, [r7, #32]
 8002092:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	4618      	mov	r0, r3
 800209a:	f004 ffd2 	bl	8007042 <USB_GetMode>
 800209e:	4603      	mov	r3, r0
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	f040 848a 	bne.w	80029ba <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	4618      	mov	r0, r3
 80020ac:	f004 ff36 	bl	8006f1c <USB_ReadInterrupts>
 80020b0:	4603      	mov	r3, r0
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	f000 8480 	beq.w	80029b8 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80020b8:	69fb      	ldr	r3, [r7, #28]
 80020ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80020be:	689b      	ldr	r3, [r3, #8]
 80020c0:	0a1b      	lsrs	r3, r3, #8
 80020c2:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	4618      	mov	r0, r3
 80020d2:	f004 ff23 	bl	8006f1c <USB_ReadInterrupts>
 80020d6:	4603      	mov	r3, r0
 80020d8:	f003 0302 	and.w	r3, r3, #2
 80020dc:	2b02      	cmp	r3, #2
 80020de:	d107      	bne.n	80020f0 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	695a      	ldr	r2, [r3, #20]
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f002 0202 	and.w	r2, r2, #2
 80020ee:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	4618      	mov	r0, r3
 80020f6:	f004 ff11 	bl	8006f1c <USB_ReadInterrupts>
 80020fa:	4603      	mov	r3, r0
 80020fc:	f003 0310 	and.w	r3, r3, #16
 8002100:	2b10      	cmp	r3, #16
 8002102:	d161      	bne.n	80021c8 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	699a      	ldr	r2, [r3, #24]
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f022 0210 	bic.w	r2, r2, #16
 8002112:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8002114:	6a3b      	ldr	r3, [r7, #32]
 8002116:	6a1b      	ldr	r3, [r3, #32]
 8002118:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800211a:	69bb      	ldr	r3, [r7, #24]
 800211c:	f003 020f 	and.w	r2, r3, #15
 8002120:	4613      	mov	r3, r2
 8002122:	00db      	lsls	r3, r3, #3
 8002124:	4413      	add	r3, r2
 8002126:	009b      	lsls	r3, r3, #2
 8002128:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800212c:	687a      	ldr	r2, [r7, #4]
 800212e:	4413      	add	r3, r2
 8002130:	3304      	adds	r3, #4
 8002132:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002134:	69bb      	ldr	r3, [r7, #24]
 8002136:	0c5b      	lsrs	r3, r3, #17
 8002138:	f003 030f 	and.w	r3, r3, #15
 800213c:	2b02      	cmp	r3, #2
 800213e:	d124      	bne.n	800218a <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002140:	69ba      	ldr	r2, [r7, #24]
 8002142:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8002146:	4013      	ands	r3, r2
 8002148:	2b00      	cmp	r3, #0
 800214a:	d035      	beq.n	80021b8 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800214c:	697b      	ldr	r3, [r7, #20]
 800214e:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002150:	69bb      	ldr	r3, [r7, #24]
 8002152:	091b      	lsrs	r3, r3, #4
 8002154:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002156:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800215a:	b29b      	uxth	r3, r3
 800215c:	461a      	mov	r2, r3
 800215e:	6a38      	ldr	r0, [r7, #32]
 8002160:	f004 fd48 	bl	8006bf4 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002164:	697b      	ldr	r3, [r7, #20]
 8002166:	691a      	ldr	r2, [r3, #16]
 8002168:	69bb      	ldr	r3, [r7, #24]
 800216a:	091b      	lsrs	r3, r3, #4
 800216c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002170:	441a      	add	r2, r3
 8002172:	697b      	ldr	r3, [r7, #20]
 8002174:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002176:	697b      	ldr	r3, [r7, #20]
 8002178:	6a1a      	ldr	r2, [r3, #32]
 800217a:	69bb      	ldr	r3, [r7, #24]
 800217c:	091b      	lsrs	r3, r3, #4
 800217e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002182:	441a      	add	r2, r3
 8002184:	697b      	ldr	r3, [r7, #20]
 8002186:	621a      	str	r2, [r3, #32]
 8002188:	e016      	b.n	80021b8 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800218a:	69bb      	ldr	r3, [r7, #24]
 800218c:	0c5b      	lsrs	r3, r3, #17
 800218e:	f003 030f 	and.w	r3, r3, #15
 8002192:	2b06      	cmp	r3, #6
 8002194:	d110      	bne.n	80021b8 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800219c:	2208      	movs	r2, #8
 800219e:	4619      	mov	r1, r3
 80021a0:	6a38      	ldr	r0, [r7, #32]
 80021a2:	f004 fd27 	bl	8006bf4 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80021a6:	697b      	ldr	r3, [r7, #20]
 80021a8:	6a1a      	ldr	r2, [r3, #32]
 80021aa:	69bb      	ldr	r3, [r7, #24]
 80021ac:	091b      	lsrs	r3, r3, #4
 80021ae:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80021b2:	441a      	add	r2, r3
 80021b4:	697b      	ldr	r3, [r7, #20]
 80021b6:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	699a      	ldr	r2, [r3, #24]
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f042 0210 	orr.w	r2, r2, #16
 80021c6:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	4618      	mov	r0, r3
 80021ce:	f004 fea5 	bl	8006f1c <USB_ReadInterrupts>
 80021d2:	4603      	mov	r3, r0
 80021d4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80021d8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80021dc:	f040 80a7 	bne.w	800232e <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80021e0:	2300      	movs	r3, #0
 80021e2:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	4618      	mov	r0, r3
 80021ea:	f004 feaa 	bl	8006f42 <USB_ReadDevAllOutEpInterrupt>
 80021ee:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80021f0:	e099      	b.n	8002326 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80021f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021f4:	f003 0301 	and.w	r3, r3, #1
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	f000 808e 	beq.w	800231a <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002204:	b2d2      	uxtb	r2, r2
 8002206:	4611      	mov	r1, r2
 8002208:	4618      	mov	r0, r3
 800220a:	f004 fece 	bl	8006faa <USB_ReadDevOutEPInterrupt>
 800220e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002210:	693b      	ldr	r3, [r7, #16]
 8002212:	f003 0301 	and.w	r3, r3, #1
 8002216:	2b00      	cmp	r3, #0
 8002218:	d00c      	beq.n	8002234 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800221a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800221c:	015a      	lsls	r2, r3, #5
 800221e:	69fb      	ldr	r3, [r7, #28]
 8002220:	4413      	add	r3, r2
 8002222:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002226:	461a      	mov	r2, r3
 8002228:	2301      	movs	r3, #1
 800222a:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800222c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800222e:	6878      	ldr	r0, [r7, #4]
 8002230:	f000 fec2 	bl	8002fb8 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002234:	693b      	ldr	r3, [r7, #16]
 8002236:	f003 0308 	and.w	r3, r3, #8
 800223a:	2b00      	cmp	r3, #0
 800223c:	d00c      	beq.n	8002258 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800223e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002240:	015a      	lsls	r2, r3, #5
 8002242:	69fb      	ldr	r3, [r7, #28]
 8002244:	4413      	add	r3, r2
 8002246:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800224a:	461a      	mov	r2, r3
 800224c:	2308      	movs	r3, #8
 800224e:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002250:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002252:	6878      	ldr	r0, [r7, #4]
 8002254:	f000 ff98 	bl	8003188 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002258:	693b      	ldr	r3, [r7, #16]
 800225a:	f003 0310 	and.w	r3, r3, #16
 800225e:	2b00      	cmp	r3, #0
 8002260:	d008      	beq.n	8002274 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002262:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002264:	015a      	lsls	r2, r3, #5
 8002266:	69fb      	ldr	r3, [r7, #28]
 8002268:	4413      	add	r3, r2
 800226a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800226e:	461a      	mov	r2, r3
 8002270:	2310      	movs	r3, #16
 8002272:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8002274:	693b      	ldr	r3, [r7, #16]
 8002276:	f003 0302 	and.w	r3, r3, #2
 800227a:	2b00      	cmp	r3, #0
 800227c:	d030      	beq.n	80022e0 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800227e:	6a3b      	ldr	r3, [r7, #32]
 8002280:	695b      	ldr	r3, [r3, #20]
 8002282:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002286:	2b80      	cmp	r3, #128	; 0x80
 8002288:	d109      	bne.n	800229e <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800228a:	69fb      	ldr	r3, [r7, #28]
 800228c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002290:	685b      	ldr	r3, [r3, #4]
 8002292:	69fa      	ldr	r2, [r7, #28]
 8002294:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002298:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800229c:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800229e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022a0:	4613      	mov	r3, r2
 80022a2:	00db      	lsls	r3, r3, #3
 80022a4:	4413      	add	r3, r2
 80022a6:	009b      	lsls	r3, r3, #2
 80022a8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80022ac:	687a      	ldr	r2, [r7, #4]
 80022ae:	4413      	add	r3, r2
 80022b0:	3304      	adds	r3, #4
 80022b2:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80022b4:	697b      	ldr	r3, [r7, #20]
 80022b6:	78db      	ldrb	r3, [r3, #3]
 80022b8:	2b01      	cmp	r3, #1
 80022ba:	d108      	bne.n	80022ce <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80022bc:	697b      	ldr	r3, [r7, #20]
 80022be:	2200      	movs	r2, #0
 80022c0:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80022c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022c4:	b2db      	uxtb	r3, r3
 80022c6:	4619      	mov	r1, r3
 80022c8:	6878      	ldr	r0, [r7, #4]
 80022ca:	f007 f9e1 	bl	8009690 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80022ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022d0:	015a      	lsls	r2, r3, #5
 80022d2:	69fb      	ldr	r3, [r7, #28]
 80022d4:	4413      	add	r3, r2
 80022d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80022da:	461a      	mov	r2, r3
 80022dc:	2302      	movs	r3, #2
 80022de:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80022e0:	693b      	ldr	r3, [r7, #16]
 80022e2:	f003 0320 	and.w	r3, r3, #32
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d008      	beq.n	80022fc <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80022ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022ec:	015a      	lsls	r2, r3, #5
 80022ee:	69fb      	ldr	r3, [r7, #28]
 80022f0:	4413      	add	r3, r2
 80022f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80022f6:	461a      	mov	r2, r3
 80022f8:	2320      	movs	r3, #32
 80022fa:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80022fc:	693b      	ldr	r3, [r7, #16]
 80022fe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002302:	2b00      	cmp	r3, #0
 8002304:	d009      	beq.n	800231a <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002306:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002308:	015a      	lsls	r2, r3, #5
 800230a:	69fb      	ldr	r3, [r7, #28]
 800230c:	4413      	add	r3, r2
 800230e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002312:	461a      	mov	r2, r3
 8002314:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002318:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800231a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800231c:	3301      	adds	r3, #1
 800231e:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002320:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002322:	085b      	lsrs	r3, r3, #1
 8002324:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002326:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002328:	2b00      	cmp	r3, #0
 800232a:	f47f af62 	bne.w	80021f2 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	4618      	mov	r0, r3
 8002334:	f004 fdf2 	bl	8006f1c <USB_ReadInterrupts>
 8002338:	4603      	mov	r3, r0
 800233a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800233e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002342:	f040 80db 	bne.w	80024fc <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	4618      	mov	r0, r3
 800234c:	f004 fe13 	bl	8006f76 <USB_ReadDevAllInEpInterrupt>
 8002350:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8002352:	2300      	movs	r3, #0
 8002354:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8002356:	e0cd      	b.n	80024f4 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002358:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800235a:	f003 0301 	and.w	r3, r3, #1
 800235e:	2b00      	cmp	r3, #0
 8002360:	f000 80c2 	beq.w	80024e8 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800236a:	b2d2      	uxtb	r2, r2
 800236c:	4611      	mov	r1, r2
 800236e:	4618      	mov	r0, r3
 8002370:	f004 fe39 	bl	8006fe6 <USB_ReadDevInEPInterrupt>
 8002374:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002376:	693b      	ldr	r3, [r7, #16]
 8002378:	f003 0301 	and.w	r3, r3, #1
 800237c:	2b00      	cmp	r3, #0
 800237e:	d057      	beq.n	8002430 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002382:	f003 030f 	and.w	r3, r3, #15
 8002386:	2201      	movs	r2, #1
 8002388:	fa02 f303 	lsl.w	r3, r2, r3
 800238c:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800238e:	69fb      	ldr	r3, [r7, #28]
 8002390:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002394:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	43db      	mvns	r3, r3
 800239a:	69f9      	ldr	r1, [r7, #28]
 800239c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80023a0:	4013      	ands	r3, r2
 80023a2:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80023a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023a6:	015a      	lsls	r2, r3, #5
 80023a8:	69fb      	ldr	r3, [r7, #28]
 80023aa:	4413      	add	r3, r2
 80023ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80023b0:	461a      	mov	r2, r3
 80023b2:	2301      	movs	r3, #1
 80023b4:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	691b      	ldr	r3, [r3, #16]
 80023ba:	2b01      	cmp	r3, #1
 80023bc:	d132      	bne.n	8002424 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80023be:	6879      	ldr	r1, [r7, #4]
 80023c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023c2:	4613      	mov	r3, r2
 80023c4:	00db      	lsls	r3, r3, #3
 80023c6:	4413      	add	r3, r2
 80023c8:	009b      	lsls	r3, r3, #2
 80023ca:	440b      	add	r3, r1
 80023cc:	334c      	adds	r3, #76	; 0x4c
 80023ce:	6819      	ldr	r1, [r3, #0]
 80023d0:	6878      	ldr	r0, [r7, #4]
 80023d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023d4:	4613      	mov	r3, r2
 80023d6:	00db      	lsls	r3, r3, #3
 80023d8:	4413      	add	r3, r2
 80023da:	009b      	lsls	r3, r3, #2
 80023dc:	4403      	add	r3, r0
 80023de:	3348      	adds	r3, #72	; 0x48
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	4419      	add	r1, r3
 80023e4:	6878      	ldr	r0, [r7, #4]
 80023e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023e8:	4613      	mov	r3, r2
 80023ea:	00db      	lsls	r3, r3, #3
 80023ec:	4413      	add	r3, r2
 80023ee:	009b      	lsls	r3, r3, #2
 80023f0:	4403      	add	r3, r0
 80023f2:	334c      	adds	r3, #76	; 0x4c
 80023f4:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80023f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d113      	bne.n	8002424 <HAL_PCD_IRQHandler+0x3a2>
 80023fc:	6879      	ldr	r1, [r7, #4]
 80023fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002400:	4613      	mov	r3, r2
 8002402:	00db      	lsls	r3, r3, #3
 8002404:	4413      	add	r3, r2
 8002406:	009b      	lsls	r3, r3, #2
 8002408:	440b      	add	r3, r1
 800240a:	3354      	adds	r3, #84	; 0x54
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	2b00      	cmp	r3, #0
 8002410:	d108      	bne.n	8002424 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	6818      	ldr	r0, [r3, #0]
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800241c:	461a      	mov	r2, r3
 800241e:	2101      	movs	r1, #1
 8002420:	f004 fe40 	bl	80070a4 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002424:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002426:	b2db      	uxtb	r3, r3
 8002428:	4619      	mov	r1, r3
 800242a:	6878      	ldr	r0, [r7, #4]
 800242c:	f007 f8ab 	bl	8009586 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002430:	693b      	ldr	r3, [r7, #16]
 8002432:	f003 0308 	and.w	r3, r3, #8
 8002436:	2b00      	cmp	r3, #0
 8002438:	d008      	beq.n	800244c <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800243a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800243c:	015a      	lsls	r2, r3, #5
 800243e:	69fb      	ldr	r3, [r7, #28]
 8002440:	4413      	add	r3, r2
 8002442:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002446:	461a      	mov	r2, r3
 8002448:	2308      	movs	r3, #8
 800244a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800244c:	693b      	ldr	r3, [r7, #16]
 800244e:	f003 0310 	and.w	r3, r3, #16
 8002452:	2b00      	cmp	r3, #0
 8002454:	d008      	beq.n	8002468 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002458:	015a      	lsls	r2, r3, #5
 800245a:	69fb      	ldr	r3, [r7, #28]
 800245c:	4413      	add	r3, r2
 800245e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002462:	461a      	mov	r2, r3
 8002464:	2310      	movs	r3, #16
 8002466:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002468:	693b      	ldr	r3, [r7, #16]
 800246a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800246e:	2b00      	cmp	r3, #0
 8002470:	d008      	beq.n	8002484 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002472:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002474:	015a      	lsls	r2, r3, #5
 8002476:	69fb      	ldr	r3, [r7, #28]
 8002478:	4413      	add	r3, r2
 800247a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800247e:	461a      	mov	r2, r3
 8002480:	2340      	movs	r3, #64	; 0x40
 8002482:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002484:	693b      	ldr	r3, [r7, #16]
 8002486:	f003 0302 	and.w	r3, r3, #2
 800248a:	2b00      	cmp	r3, #0
 800248c:	d023      	beq.n	80024d6 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800248e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002490:	6a38      	ldr	r0, [r7, #32]
 8002492:	f003 fd21 	bl	8005ed8 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8002496:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002498:	4613      	mov	r3, r2
 800249a:	00db      	lsls	r3, r3, #3
 800249c:	4413      	add	r3, r2
 800249e:	009b      	lsls	r3, r3, #2
 80024a0:	3338      	adds	r3, #56	; 0x38
 80024a2:	687a      	ldr	r2, [r7, #4]
 80024a4:	4413      	add	r3, r2
 80024a6:	3304      	adds	r3, #4
 80024a8:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80024aa:	697b      	ldr	r3, [r7, #20]
 80024ac:	78db      	ldrb	r3, [r3, #3]
 80024ae:	2b01      	cmp	r3, #1
 80024b0:	d108      	bne.n	80024c4 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80024b2:	697b      	ldr	r3, [r7, #20]
 80024b4:	2200      	movs	r2, #0
 80024b6:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80024b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ba:	b2db      	uxtb	r3, r3
 80024bc:	4619      	mov	r1, r3
 80024be:	6878      	ldr	r0, [r7, #4]
 80024c0:	f007 f8f8 	bl	80096b4 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80024c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024c6:	015a      	lsls	r2, r3, #5
 80024c8:	69fb      	ldr	r3, [r7, #28]
 80024ca:	4413      	add	r3, r2
 80024cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80024d0:	461a      	mov	r2, r3
 80024d2:	2302      	movs	r3, #2
 80024d4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80024d6:	693b      	ldr	r3, [r7, #16]
 80024d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d003      	beq.n	80024e8 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80024e0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80024e2:	6878      	ldr	r0, [r7, #4]
 80024e4:	f000 fcdb 	bl	8002e9e <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80024e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ea:	3301      	adds	r3, #1
 80024ec:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80024ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024f0:	085b      	lsrs	r3, r3, #1
 80024f2:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80024f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	f47f af2e 	bne.w	8002358 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	4618      	mov	r0, r3
 8002502:	f004 fd0b 	bl	8006f1c <USB_ReadInterrupts>
 8002506:	4603      	mov	r3, r0
 8002508:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800250c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002510:	d122      	bne.n	8002558 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002512:	69fb      	ldr	r3, [r7, #28]
 8002514:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002518:	685b      	ldr	r3, [r3, #4]
 800251a:	69fa      	ldr	r2, [r7, #28]
 800251c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002520:	f023 0301 	bic.w	r3, r3, #1
 8002524:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 800252c:	2b01      	cmp	r3, #1
 800252e:	d108      	bne.n	8002542 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	2200      	movs	r2, #0
 8002534:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002538:	2100      	movs	r1, #0
 800253a:	6878      	ldr	r0, [r7, #4]
 800253c:	f000 fec2 	bl	80032c4 <HAL_PCDEx_LPM_Callback>
 8002540:	e002      	b.n	8002548 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002542:	6878      	ldr	r0, [r7, #4]
 8002544:	f007 f896 	bl	8009674 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	695a      	ldr	r2, [r3, #20]
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8002556:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	4618      	mov	r0, r3
 800255e:	f004 fcdd 	bl	8006f1c <USB_ReadInterrupts>
 8002562:	4603      	mov	r3, r0
 8002564:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002568:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800256c:	d112      	bne.n	8002594 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800256e:	69fb      	ldr	r3, [r7, #28]
 8002570:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002574:	689b      	ldr	r3, [r3, #8]
 8002576:	f003 0301 	and.w	r3, r3, #1
 800257a:	2b01      	cmp	r3, #1
 800257c:	d102      	bne.n	8002584 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800257e:	6878      	ldr	r0, [r7, #4]
 8002580:	f007 f852 	bl	8009628 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	695a      	ldr	r2, [r3, #20]
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8002592:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	4618      	mov	r0, r3
 800259a:	f004 fcbf 	bl	8006f1c <USB_ReadInterrupts>
 800259e:	4603      	mov	r3, r0
 80025a0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80025a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80025a8:	f040 80b7 	bne.w	800271a <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80025ac:	69fb      	ldr	r3, [r7, #28]
 80025ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80025b2:	685b      	ldr	r3, [r3, #4]
 80025b4:	69fa      	ldr	r2, [r7, #28]
 80025b6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80025ba:	f023 0301 	bic.w	r3, r3, #1
 80025be:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	2110      	movs	r1, #16
 80025c6:	4618      	mov	r0, r3
 80025c8:	f003 fc86 	bl	8005ed8 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80025cc:	2300      	movs	r3, #0
 80025ce:	62fb      	str	r3, [r7, #44]	; 0x2c
 80025d0:	e046      	b.n	8002660 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80025d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025d4:	015a      	lsls	r2, r3, #5
 80025d6:	69fb      	ldr	r3, [r7, #28]
 80025d8:	4413      	add	r3, r2
 80025da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80025de:	461a      	mov	r2, r3
 80025e0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80025e4:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80025e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025e8:	015a      	lsls	r2, r3, #5
 80025ea:	69fb      	ldr	r3, [r7, #28]
 80025ec:	4413      	add	r3, r2
 80025ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80025f6:	0151      	lsls	r1, r2, #5
 80025f8:	69fa      	ldr	r2, [r7, #28]
 80025fa:	440a      	add	r2, r1
 80025fc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002600:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002604:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002606:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002608:	015a      	lsls	r2, r3, #5
 800260a:	69fb      	ldr	r3, [r7, #28]
 800260c:	4413      	add	r3, r2
 800260e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002612:	461a      	mov	r2, r3
 8002614:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002618:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800261a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800261c:	015a      	lsls	r2, r3, #5
 800261e:	69fb      	ldr	r3, [r7, #28]
 8002620:	4413      	add	r3, r2
 8002622:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800262a:	0151      	lsls	r1, r2, #5
 800262c:	69fa      	ldr	r2, [r7, #28]
 800262e:	440a      	add	r2, r1
 8002630:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002634:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002638:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800263a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800263c:	015a      	lsls	r2, r3, #5
 800263e:	69fb      	ldr	r3, [r7, #28]
 8002640:	4413      	add	r3, r2
 8002642:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800264a:	0151      	lsls	r1, r2, #5
 800264c:	69fa      	ldr	r2, [r7, #28]
 800264e:	440a      	add	r2, r1
 8002650:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002654:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002658:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800265a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800265c:	3301      	adds	r3, #1
 800265e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	685b      	ldr	r3, [r3, #4]
 8002664:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002666:	429a      	cmp	r2, r3
 8002668:	d3b3      	bcc.n	80025d2 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800266a:	69fb      	ldr	r3, [r7, #28]
 800266c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002670:	69db      	ldr	r3, [r3, #28]
 8002672:	69fa      	ldr	r2, [r7, #28]
 8002674:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002678:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800267c:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002682:	2b00      	cmp	r3, #0
 8002684:	d016      	beq.n	80026b4 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002686:	69fb      	ldr	r3, [r7, #28]
 8002688:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800268c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002690:	69fa      	ldr	r2, [r7, #28]
 8002692:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002696:	f043 030b 	orr.w	r3, r3, #11
 800269a:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800269e:	69fb      	ldr	r3, [r7, #28]
 80026a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80026a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026a6:	69fa      	ldr	r2, [r7, #28]
 80026a8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80026ac:	f043 030b 	orr.w	r3, r3, #11
 80026b0:	6453      	str	r3, [r2, #68]	; 0x44
 80026b2:	e015      	b.n	80026e0 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80026b4:	69fb      	ldr	r3, [r7, #28]
 80026b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80026ba:	695b      	ldr	r3, [r3, #20]
 80026bc:	69fa      	ldr	r2, [r7, #28]
 80026be:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80026c2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80026c6:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80026ca:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80026cc:	69fb      	ldr	r3, [r7, #28]
 80026ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80026d2:	691b      	ldr	r3, [r3, #16]
 80026d4:	69fa      	ldr	r2, [r7, #28]
 80026d6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80026da:	f043 030b 	orr.w	r3, r3, #11
 80026de:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80026e0:	69fb      	ldr	r3, [r7, #28]
 80026e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	69fa      	ldr	r2, [r7, #28]
 80026ea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80026ee:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80026f2:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	6818      	ldr	r0, [r3, #0]
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	691b      	ldr	r3, [r3, #16]
 80026fc:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002704:	461a      	mov	r2, r3
 8002706:	f004 fccd 	bl	80070a4 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	695a      	ldr	r2, [r3, #20]
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8002718:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	4618      	mov	r0, r3
 8002720:	f004 fbfc 	bl	8006f1c <USB_ReadInterrupts>
 8002724:	4603      	mov	r3, r0
 8002726:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800272a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800272e:	d124      	bne.n	800277a <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	4618      	mov	r0, r3
 8002736:	f004 fc92 	bl	800705e <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	4618      	mov	r0, r3
 8002740:	f003 fc47 	bl	8005fd2 <USB_GetDevSpeed>
 8002744:	4603      	mov	r3, r0
 8002746:	461a      	mov	r2, r3
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681c      	ldr	r4, [r3, #0]
 8002750:	f001 f9e8 	bl	8003b24 <HAL_RCC_GetHCLKFreq>
 8002754:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800275a:	b2db      	uxtb	r3, r3
 800275c:	461a      	mov	r2, r3
 800275e:	4620      	mov	r0, r4
 8002760:	f003 f946 	bl	80059f0 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002764:	6878      	ldr	r0, [r7, #4]
 8002766:	f006 ff36 	bl	80095d6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	695a      	ldr	r2, [r3, #20]
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8002778:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	4618      	mov	r0, r3
 8002780:	f004 fbcc 	bl	8006f1c <USB_ReadInterrupts>
 8002784:	4603      	mov	r3, r0
 8002786:	f003 0308 	and.w	r3, r3, #8
 800278a:	2b08      	cmp	r3, #8
 800278c:	d10a      	bne.n	80027a4 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800278e:	6878      	ldr	r0, [r7, #4]
 8002790:	f006 ff13 	bl	80095ba <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	695a      	ldr	r2, [r3, #20]
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f002 0208 	and.w	r2, r2, #8
 80027a2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	4618      	mov	r0, r3
 80027aa:	f004 fbb7 	bl	8006f1c <USB_ReadInterrupts>
 80027ae:	4603      	mov	r3, r0
 80027b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027b4:	2b80      	cmp	r3, #128	; 0x80
 80027b6:	d122      	bne.n	80027fe <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80027b8:	6a3b      	ldr	r3, [r7, #32]
 80027ba:	699b      	ldr	r3, [r3, #24]
 80027bc:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80027c0:	6a3b      	ldr	r3, [r7, #32]
 80027c2:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80027c4:	2301      	movs	r3, #1
 80027c6:	627b      	str	r3, [r7, #36]	; 0x24
 80027c8:	e014      	b.n	80027f4 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80027ca:	6879      	ldr	r1, [r7, #4]
 80027cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027ce:	4613      	mov	r3, r2
 80027d0:	00db      	lsls	r3, r3, #3
 80027d2:	4413      	add	r3, r2
 80027d4:	009b      	lsls	r3, r3, #2
 80027d6:	440b      	add	r3, r1
 80027d8:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80027dc:	781b      	ldrb	r3, [r3, #0]
 80027de:	2b01      	cmp	r3, #1
 80027e0:	d105      	bne.n	80027ee <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80027e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027e4:	b2db      	uxtb	r3, r3
 80027e6:	4619      	mov	r1, r3
 80027e8:	6878      	ldr	r0, [r7, #4]
 80027ea:	f000 fb27 	bl	8002e3c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80027ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027f0:	3301      	adds	r3, #1
 80027f2:	627b      	str	r3, [r7, #36]	; 0x24
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	685b      	ldr	r3, [r3, #4]
 80027f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027fa:	429a      	cmp	r2, r3
 80027fc:	d3e5      	bcc.n	80027ca <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	4618      	mov	r0, r3
 8002804:	f004 fb8a 	bl	8006f1c <USB_ReadInterrupts>
 8002808:	4603      	mov	r3, r0
 800280a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800280e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002812:	d13b      	bne.n	800288c <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002814:	2301      	movs	r3, #1
 8002816:	627b      	str	r3, [r7, #36]	; 0x24
 8002818:	e02b      	b.n	8002872 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800281a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800281c:	015a      	lsls	r2, r3, #5
 800281e:	69fb      	ldr	r3, [r7, #28]
 8002820:	4413      	add	r3, r2
 8002822:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800282a:	6879      	ldr	r1, [r7, #4]
 800282c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800282e:	4613      	mov	r3, r2
 8002830:	00db      	lsls	r3, r3, #3
 8002832:	4413      	add	r3, r2
 8002834:	009b      	lsls	r3, r3, #2
 8002836:	440b      	add	r3, r1
 8002838:	3340      	adds	r3, #64	; 0x40
 800283a:	781b      	ldrb	r3, [r3, #0]
 800283c:	2b01      	cmp	r3, #1
 800283e:	d115      	bne.n	800286c <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8002840:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002842:	2b00      	cmp	r3, #0
 8002844:	da12      	bge.n	800286c <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8002846:	6879      	ldr	r1, [r7, #4]
 8002848:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800284a:	4613      	mov	r3, r2
 800284c:	00db      	lsls	r3, r3, #3
 800284e:	4413      	add	r3, r2
 8002850:	009b      	lsls	r3, r3, #2
 8002852:	440b      	add	r3, r1
 8002854:	333f      	adds	r3, #63	; 0x3f
 8002856:	2201      	movs	r2, #1
 8002858:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800285a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800285c:	b2db      	uxtb	r3, r3
 800285e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002862:	b2db      	uxtb	r3, r3
 8002864:	4619      	mov	r1, r3
 8002866:	6878      	ldr	r0, [r7, #4]
 8002868:	f000 fae8 	bl	8002e3c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800286c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800286e:	3301      	adds	r3, #1
 8002870:	627b      	str	r3, [r7, #36]	; 0x24
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	685b      	ldr	r3, [r3, #4]
 8002876:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002878:	429a      	cmp	r2, r3
 800287a:	d3ce      	bcc.n	800281a <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	695a      	ldr	r2, [r3, #20]
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800288a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	4618      	mov	r0, r3
 8002892:	f004 fb43 	bl	8006f1c <USB_ReadInterrupts>
 8002896:	4603      	mov	r3, r0
 8002898:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800289c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80028a0:	d155      	bne.n	800294e <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80028a2:	2301      	movs	r3, #1
 80028a4:	627b      	str	r3, [r7, #36]	; 0x24
 80028a6:	e045      	b.n	8002934 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80028a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028aa:	015a      	lsls	r2, r3, #5
 80028ac:	69fb      	ldr	r3, [r7, #28]
 80028ae:	4413      	add	r3, r2
 80028b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80028b8:	6879      	ldr	r1, [r7, #4]
 80028ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028bc:	4613      	mov	r3, r2
 80028be:	00db      	lsls	r3, r3, #3
 80028c0:	4413      	add	r3, r2
 80028c2:	009b      	lsls	r3, r3, #2
 80028c4:	440b      	add	r3, r1
 80028c6:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80028ca:	781b      	ldrb	r3, [r3, #0]
 80028cc:	2b01      	cmp	r3, #1
 80028ce:	d12e      	bne.n	800292e <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80028d0:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	da2b      	bge.n	800292e <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80028d6:	69bb      	ldr	r3, [r7, #24]
 80028d8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 80028e2:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80028e6:	429a      	cmp	r2, r3
 80028e8:	d121      	bne.n	800292e <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80028ea:	6879      	ldr	r1, [r7, #4]
 80028ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028ee:	4613      	mov	r3, r2
 80028f0:	00db      	lsls	r3, r3, #3
 80028f2:	4413      	add	r3, r2
 80028f4:	009b      	lsls	r3, r3, #2
 80028f6:	440b      	add	r3, r1
 80028f8:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80028fc:	2201      	movs	r2, #1
 80028fe:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8002900:	6a3b      	ldr	r3, [r7, #32]
 8002902:	699b      	ldr	r3, [r3, #24]
 8002904:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002908:	6a3b      	ldr	r3, [r7, #32]
 800290a:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 800290c:	6a3b      	ldr	r3, [r7, #32]
 800290e:	695b      	ldr	r3, [r3, #20]
 8002910:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002914:	2b00      	cmp	r3, #0
 8002916:	d10a      	bne.n	800292e <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8002918:	69fb      	ldr	r3, [r7, #28]
 800291a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800291e:	685b      	ldr	r3, [r3, #4]
 8002920:	69fa      	ldr	r2, [r7, #28]
 8002922:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002926:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800292a:	6053      	str	r3, [r2, #4]
            break;
 800292c:	e007      	b.n	800293e <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800292e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002930:	3301      	adds	r3, #1
 8002932:	627b      	str	r3, [r7, #36]	; 0x24
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	685b      	ldr	r3, [r3, #4]
 8002938:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800293a:	429a      	cmp	r2, r3
 800293c:	d3b4      	bcc.n	80028a8 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	695a      	ldr	r2, [r3, #20]
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800294c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	4618      	mov	r0, r3
 8002954:	f004 fae2 	bl	8006f1c <USB_ReadInterrupts>
 8002958:	4603      	mov	r3, r0
 800295a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800295e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002962:	d10a      	bne.n	800297a <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002964:	6878      	ldr	r0, [r7, #4]
 8002966:	f006 feb7 	bl	80096d8 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	695a      	ldr	r2, [r3, #20]
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002978:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	4618      	mov	r0, r3
 8002980:	f004 facc 	bl	8006f1c <USB_ReadInterrupts>
 8002984:	4603      	mov	r3, r0
 8002986:	f003 0304 	and.w	r3, r3, #4
 800298a:	2b04      	cmp	r3, #4
 800298c:	d115      	bne.n	80029ba <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	685b      	ldr	r3, [r3, #4]
 8002994:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002996:	69bb      	ldr	r3, [r7, #24]
 8002998:	f003 0304 	and.w	r3, r3, #4
 800299c:	2b00      	cmp	r3, #0
 800299e:	d002      	beq.n	80029a6 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80029a0:	6878      	ldr	r0, [r7, #4]
 80029a2:	f006 fea7 	bl	80096f4 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	6859      	ldr	r1, [r3, #4]
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	69ba      	ldr	r2, [r7, #24]
 80029b2:	430a      	orrs	r2, r1
 80029b4:	605a      	str	r2, [r3, #4]
 80029b6:	e000      	b.n	80029ba <HAL_PCD_IRQHandler+0x938>
      return;
 80029b8:	bf00      	nop
    }
  }
}
 80029ba:	3734      	adds	r7, #52	; 0x34
 80029bc:	46bd      	mov	sp, r7
 80029be:	bd90      	pop	{r4, r7, pc}

080029c0 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80029c0:	b580      	push	{r7, lr}
 80029c2:	b082      	sub	sp, #8
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]
 80029c8:	460b      	mov	r3, r1
 80029ca:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80029d2:	2b01      	cmp	r3, #1
 80029d4:	d101      	bne.n	80029da <HAL_PCD_SetAddress+0x1a>
 80029d6:	2302      	movs	r3, #2
 80029d8:	e013      	b.n	8002a02 <HAL_PCD_SetAddress+0x42>
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	2201      	movs	r2, #1
 80029de:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	78fa      	ldrb	r2, [r7, #3]
 80029e6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	78fa      	ldrb	r2, [r7, #3]
 80029f0:	4611      	mov	r1, r2
 80029f2:	4618      	mov	r0, r3
 80029f4:	f004 fa2a 	bl	8006e4c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	2200      	movs	r2, #0
 80029fc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002a00:	2300      	movs	r3, #0
}
 8002a02:	4618      	mov	r0, r3
 8002a04:	3708      	adds	r7, #8
 8002a06:	46bd      	mov	sp, r7
 8002a08:	bd80      	pop	{r7, pc}

08002a0a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002a0a:	b580      	push	{r7, lr}
 8002a0c:	b084      	sub	sp, #16
 8002a0e:	af00      	add	r7, sp, #0
 8002a10:	6078      	str	r0, [r7, #4]
 8002a12:	4608      	mov	r0, r1
 8002a14:	4611      	mov	r1, r2
 8002a16:	461a      	mov	r2, r3
 8002a18:	4603      	mov	r3, r0
 8002a1a:	70fb      	strb	r3, [r7, #3]
 8002a1c:	460b      	mov	r3, r1
 8002a1e:	803b      	strh	r3, [r7, #0]
 8002a20:	4613      	mov	r3, r2
 8002a22:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002a24:	2300      	movs	r3, #0
 8002a26:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002a28:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	da0f      	bge.n	8002a50 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002a30:	78fb      	ldrb	r3, [r7, #3]
 8002a32:	f003 020f 	and.w	r2, r3, #15
 8002a36:	4613      	mov	r3, r2
 8002a38:	00db      	lsls	r3, r3, #3
 8002a3a:	4413      	add	r3, r2
 8002a3c:	009b      	lsls	r3, r3, #2
 8002a3e:	3338      	adds	r3, #56	; 0x38
 8002a40:	687a      	ldr	r2, [r7, #4]
 8002a42:	4413      	add	r3, r2
 8002a44:	3304      	adds	r3, #4
 8002a46:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	2201      	movs	r2, #1
 8002a4c:	705a      	strb	r2, [r3, #1]
 8002a4e:	e00f      	b.n	8002a70 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002a50:	78fb      	ldrb	r3, [r7, #3]
 8002a52:	f003 020f 	and.w	r2, r3, #15
 8002a56:	4613      	mov	r3, r2
 8002a58:	00db      	lsls	r3, r3, #3
 8002a5a:	4413      	add	r3, r2
 8002a5c:	009b      	lsls	r3, r3, #2
 8002a5e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002a62:	687a      	ldr	r2, [r7, #4]
 8002a64:	4413      	add	r3, r2
 8002a66:	3304      	adds	r3, #4
 8002a68:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002a70:	78fb      	ldrb	r3, [r7, #3]
 8002a72:	f003 030f 	and.w	r3, r3, #15
 8002a76:	b2da      	uxtb	r2, r3
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002a7c:	883a      	ldrh	r2, [r7, #0]
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	78ba      	ldrb	r2, [r7, #2]
 8002a86:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	785b      	ldrb	r3, [r3, #1]
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d004      	beq.n	8002a9a <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	781b      	ldrb	r3, [r3, #0]
 8002a94:	b29a      	uxth	r2, r3
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002a9a:	78bb      	ldrb	r3, [r7, #2]
 8002a9c:	2b02      	cmp	r3, #2
 8002a9e:	d102      	bne.n	8002aa6 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002aac:	2b01      	cmp	r3, #1
 8002aae:	d101      	bne.n	8002ab4 <HAL_PCD_EP_Open+0xaa>
 8002ab0:	2302      	movs	r3, #2
 8002ab2:	e00e      	b.n	8002ad2 <HAL_PCD_EP_Open+0xc8>
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	2201      	movs	r2, #1
 8002ab8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	68f9      	ldr	r1, [r7, #12]
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	f003 faaa 	bl	800601c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	2200      	movs	r2, #0
 8002acc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8002ad0:	7afb      	ldrb	r3, [r7, #11]
}
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	3710      	adds	r7, #16
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	bd80      	pop	{r7, pc}

08002ada <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002ada:	b580      	push	{r7, lr}
 8002adc:	b084      	sub	sp, #16
 8002ade:	af00      	add	r7, sp, #0
 8002ae0:	6078      	str	r0, [r7, #4]
 8002ae2:	460b      	mov	r3, r1
 8002ae4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002ae6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	da0f      	bge.n	8002b0e <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002aee:	78fb      	ldrb	r3, [r7, #3]
 8002af0:	f003 020f 	and.w	r2, r3, #15
 8002af4:	4613      	mov	r3, r2
 8002af6:	00db      	lsls	r3, r3, #3
 8002af8:	4413      	add	r3, r2
 8002afa:	009b      	lsls	r3, r3, #2
 8002afc:	3338      	adds	r3, #56	; 0x38
 8002afe:	687a      	ldr	r2, [r7, #4]
 8002b00:	4413      	add	r3, r2
 8002b02:	3304      	adds	r3, #4
 8002b04:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	2201      	movs	r2, #1
 8002b0a:	705a      	strb	r2, [r3, #1]
 8002b0c:	e00f      	b.n	8002b2e <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002b0e:	78fb      	ldrb	r3, [r7, #3]
 8002b10:	f003 020f 	and.w	r2, r3, #15
 8002b14:	4613      	mov	r3, r2
 8002b16:	00db      	lsls	r3, r3, #3
 8002b18:	4413      	add	r3, r2
 8002b1a:	009b      	lsls	r3, r3, #2
 8002b1c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002b20:	687a      	ldr	r2, [r7, #4]
 8002b22:	4413      	add	r3, r2
 8002b24:	3304      	adds	r3, #4
 8002b26:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002b2e:	78fb      	ldrb	r3, [r7, #3]
 8002b30:	f003 030f 	and.w	r3, r3, #15
 8002b34:	b2da      	uxtb	r2, r3
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002b40:	2b01      	cmp	r3, #1
 8002b42:	d101      	bne.n	8002b48 <HAL_PCD_EP_Close+0x6e>
 8002b44:	2302      	movs	r3, #2
 8002b46:	e00e      	b.n	8002b66 <HAL_PCD_EP_Close+0x8c>
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	2201      	movs	r2, #1
 8002b4c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	68f9      	ldr	r1, [r7, #12]
 8002b56:	4618      	mov	r0, r3
 8002b58:	f003 fae8 	bl	800612c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	2200      	movs	r2, #0
 8002b60:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8002b64:	2300      	movs	r3, #0
}
 8002b66:	4618      	mov	r0, r3
 8002b68:	3710      	adds	r7, #16
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	bd80      	pop	{r7, pc}

08002b6e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002b6e:	b580      	push	{r7, lr}
 8002b70:	b086      	sub	sp, #24
 8002b72:	af00      	add	r7, sp, #0
 8002b74:	60f8      	str	r0, [r7, #12]
 8002b76:	607a      	str	r2, [r7, #4]
 8002b78:	603b      	str	r3, [r7, #0]
 8002b7a:	460b      	mov	r3, r1
 8002b7c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002b7e:	7afb      	ldrb	r3, [r7, #11]
 8002b80:	f003 020f 	and.w	r2, r3, #15
 8002b84:	4613      	mov	r3, r2
 8002b86:	00db      	lsls	r3, r3, #3
 8002b88:	4413      	add	r3, r2
 8002b8a:	009b      	lsls	r3, r3, #2
 8002b8c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002b90:	68fa      	ldr	r2, [r7, #12]
 8002b92:	4413      	add	r3, r2
 8002b94:	3304      	adds	r3, #4
 8002b96:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002b98:	697b      	ldr	r3, [r7, #20]
 8002b9a:	687a      	ldr	r2, [r7, #4]
 8002b9c:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8002b9e:	697b      	ldr	r3, [r7, #20]
 8002ba0:	683a      	ldr	r2, [r7, #0]
 8002ba2:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002ba4:	697b      	ldr	r3, [r7, #20]
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8002baa:	697b      	ldr	r3, [r7, #20]
 8002bac:	2200      	movs	r2, #0
 8002bae:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002bb0:	7afb      	ldrb	r3, [r7, #11]
 8002bb2:	f003 030f 	and.w	r3, r3, #15
 8002bb6:	b2da      	uxtb	r2, r3
 8002bb8:	697b      	ldr	r3, [r7, #20]
 8002bba:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	691b      	ldr	r3, [r3, #16]
 8002bc0:	2b01      	cmp	r3, #1
 8002bc2:	d102      	bne.n	8002bca <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002bc4:	687a      	ldr	r2, [r7, #4]
 8002bc6:	697b      	ldr	r3, [r7, #20]
 8002bc8:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002bca:	7afb      	ldrb	r3, [r7, #11]
 8002bcc:	f003 030f 	and.w	r3, r3, #15
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d109      	bne.n	8002be8 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	6818      	ldr	r0, [r3, #0]
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	691b      	ldr	r3, [r3, #16]
 8002bdc:	b2db      	uxtb	r3, r3
 8002bde:	461a      	mov	r2, r3
 8002be0:	6979      	ldr	r1, [r7, #20]
 8002be2:	f003 fdc7 	bl	8006774 <USB_EP0StartXfer>
 8002be6:	e008      	b.n	8002bfa <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	6818      	ldr	r0, [r3, #0]
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	691b      	ldr	r3, [r3, #16]
 8002bf0:	b2db      	uxtb	r3, r3
 8002bf2:	461a      	mov	r2, r3
 8002bf4:	6979      	ldr	r1, [r7, #20]
 8002bf6:	f003 fb75 	bl	80062e4 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002bfa:	2300      	movs	r3, #0
}
 8002bfc:	4618      	mov	r0, r3
 8002bfe:	3718      	adds	r7, #24
 8002c00:	46bd      	mov	sp, r7
 8002c02:	bd80      	pop	{r7, pc}

08002c04 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002c04:	b480      	push	{r7}
 8002c06:	b083      	sub	sp, #12
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	6078      	str	r0, [r7, #4]
 8002c0c:	460b      	mov	r3, r1
 8002c0e:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002c10:	78fb      	ldrb	r3, [r7, #3]
 8002c12:	f003 020f 	and.w	r2, r3, #15
 8002c16:	6879      	ldr	r1, [r7, #4]
 8002c18:	4613      	mov	r3, r2
 8002c1a:	00db      	lsls	r3, r3, #3
 8002c1c:	4413      	add	r3, r2
 8002c1e:	009b      	lsls	r3, r3, #2
 8002c20:	440b      	add	r3, r1
 8002c22:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8002c26:	681b      	ldr	r3, [r3, #0]
}
 8002c28:	4618      	mov	r0, r3
 8002c2a:	370c      	adds	r7, #12
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c32:	4770      	bx	lr

08002c34 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	b086      	sub	sp, #24
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	60f8      	str	r0, [r7, #12]
 8002c3c:	607a      	str	r2, [r7, #4]
 8002c3e:	603b      	str	r3, [r7, #0]
 8002c40:	460b      	mov	r3, r1
 8002c42:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002c44:	7afb      	ldrb	r3, [r7, #11]
 8002c46:	f003 020f 	and.w	r2, r3, #15
 8002c4a:	4613      	mov	r3, r2
 8002c4c:	00db      	lsls	r3, r3, #3
 8002c4e:	4413      	add	r3, r2
 8002c50:	009b      	lsls	r3, r3, #2
 8002c52:	3338      	adds	r3, #56	; 0x38
 8002c54:	68fa      	ldr	r2, [r7, #12]
 8002c56:	4413      	add	r3, r2
 8002c58:	3304      	adds	r3, #4
 8002c5a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002c5c:	697b      	ldr	r3, [r7, #20]
 8002c5e:	687a      	ldr	r2, [r7, #4]
 8002c60:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8002c62:	697b      	ldr	r3, [r7, #20]
 8002c64:	683a      	ldr	r2, [r7, #0]
 8002c66:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002c68:	697b      	ldr	r3, [r7, #20]
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8002c6e:	697b      	ldr	r3, [r7, #20]
 8002c70:	2201      	movs	r2, #1
 8002c72:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002c74:	7afb      	ldrb	r3, [r7, #11]
 8002c76:	f003 030f 	and.w	r3, r3, #15
 8002c7a:	b2da      	uxtb	r2, r3
 8002c7c:	697b      	ldr	r3, [r7, #20]
 8002c7e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	691b      	ldr	r3, [r3, #16]
 8002c84:	2b01      	cmp	r3, #1
 8002c86:	d102      	bne.n	8002c8e <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002c88:	687a      	ldr	r2, [r7, #4]
 8002c8a:	697b      	ldr	r3, [r7, #20]
 8002c8c:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002c8e:	7afb      	ldrb	r3, [r7, #11]
 8002c90:	f003 030f 	and.w	r3, r3, #15
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d109      	bne.n	8002cac <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	6818      	ldr	r0, [r3, #0]
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	691b      	ldr	r3, [r3, #16]
 8002ca0:	b2db      	uxtb	r3, r3
 8002ca2:	461a      	mov	r2, r3
 8002ca4:	6979      	ldr	r1, [r7, #20]
 8002ca6:	f003 fd65 	bl	8006774 <USB_EP0StartXfer>
 8002caa:	e008      	b.n	8002cbe <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	6818      	ldr	r0, [r3, #0]
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	691b      	ldr	r3, [r3, #16]
 8002cb4:	b2db      	uxtb	r3, r3
 8002cb6:	461a      	mov	r2, r3
 8002cb8:	6979      	ldr	r1, [r7, #20]
 8002cba:	f003 fb13 	bl	80062e4 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002cbe:	2300      	movs	r3, #0
}
 8002cc0:	4618      	mov	r0, r3
 8002cc2:	3718      	adds	r7, #24
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	bd80      	pop	{r7, pc}

08002cc8 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	b084      	sub	sp, #16
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]
 8002cd0:	460b      	mov	r3, r1
 8002cd2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002cd4:	78fb      	ldrb	r3, [r7, #3]
 8002cd6:	f003 020f 	and.w	r2, r3, #15
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	685b      	ldr	r3, [r3, #4]
 8002cde:	429a      	cmp	r2, r3
 8002ce0:	d901      	bls.n	8002ce6 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002ce2:	2301      	movs	r3, #1
 8002ce4:	e050      	b.n	8002d88 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002ce6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	da0f      	bge.n	8002d0e <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002cee:	78fb      	ldrb	r3, [r7, #3]
 8002cf0:	f003 020f 	and.w	r2, r3, #15
 8002cf4:	4613      	mov	r3, r2
 8002cf6:	00db      	lsls	r3, r3, #3
 8002cf8:	4413      	add	r3, r2
 8002cfa:	009b      	lsls	r3, r3, #2
 8002cfc:	3338      	adds	r3, #56	; 0x38
 8002cfe:	687a      	ldr	r2, [r7, #4]
 8002d00:	4413      	add	r3, r2
 8002d02:	3304      	adds	r3, #4
 8002d04:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	2201      	movs	r2, #1
 8002d0a:	705a      	strb	r2, [r3, #1]
 8002d0c:	e00d      	b.n	8002d2a <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002d0e:	78fa      	ldrb	r2, [r7, #3]
 8002d10:	4613      	mov	r3, r2
 8002d12:	00db      	lsls	r3, r3, #3
 8002d14:	4413      	add	r3, r2
 8002d16:	009b      	lsls	r3, r3, #2
 8002d18:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002d1c:	687a      	ldr	r2, [r7, #4]
 8002d1e:	4413      	add	r3, r2
 8002d20:	3304      	adds	r3, #4
 8002d22:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	2200      	movs	r2, #0
 8002d28:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	2201      	movs	r2, #1
 8002d2e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002d30:	78fb      	ldrb	r3, [r7, #3]
 8002d32:	f003 030f 	and.w	r3, r3, #15
 8002d36:	b2da      	uxtb	r2, r3
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002d42:	2b01      	cmp	r3, #1
 8002d44:	d101      	bne.n	8002d4a <HAL_PCD_EP_SetStall+0x82>
 8002d46:	2302      	movs	r3, #2
 8002d48:	e01e      	b.n	8002d88 <HAL_PCD_EP_SetStall+0xc0>
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	2201      	movs	r2, #1
 8002d4e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	68f9      	ldr	r1, [r7, #12]
 8002d58:	4618      	mov	r0, r3
 8002d5a:	f003 ffa3 	bl	8006ca4 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002d5e:	78fb      	ldrb	r3, [r7, #3]
 8002d60:	f003 030f 	and.w	r3, r3, #15
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d10a      	bne.n	8002d7e <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	6818      	ldr	r0, [r3, #0]
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	691b      	ldr	r3, [r3, #16]
 8002d70:	b2d9      	uxtb	r1, r3
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002d78:	461a      	mov	r2, r3
 8002d7a:	f004 f993 	bl	80070a4 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	2200      	movs	r2, #0
 8002d82:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002d86:	2300      	movs	r3, #0
}
 8002d88:	4618      	mov	r0, r3
 8002d8a:	3710      	adds	r7, #16
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	bd80      	pop	{r7, pc}

08002d90 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	b084      	sub	sp, #16
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	6078      	str	r0, [r7, #4]
 8002d98:	460b      	mov	r3, r1
 8002d9a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002d9c:	78fb      	ldrb	r3, [r7, #3]
 8002d9e:	f003 020f 	and.w	r2, r3, #15
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	685b      	ldr	r3, [r3, #4]
 8002da6:	429a      	cmp	r2, r3
 8002da8:	d901      	bls.n	8002dae <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002daa:	2301      	movs	r3, #1
 8002dac:	e042      	b.n	8002e34 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002dae:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	da0f      	bge.n	8002dd6 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002db6:	78fb      	ldrb	r3, [r7, #3]
 8002db8:	f003 020f 	and.w	r2, r3, #15
 8002dbc:	4613      	mov	r3, r2
 8002dbe:	00db      	lsls	r3, r3, #3
 8002dc0:	4413      	add	r3, r2
 8002dc2:	009b      	lsls	r3, r3, #2
 8002dc4:	3338      	adds	r3, #56	; 0x38
 8002dc6:	687a      	ldr	r2, [r7, #4]
 8002dc8:	4413      	add	r3, r2
 8002dca:	3304      	adds	r3, #4
 8002dcc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	2201      	movs	r2, #1
 8002dd2:	705a      	strb	r2, [r3, #1]
 8002dd4:	e00f      	b.n	8002df6 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002dd6:	78fb      	ldrb	r3, [r7, #3]
 8002dd8:	f003 020f 	and.w	r2, r3, #15
 8002ddc:	4613      	mov	r3, r2
 8002dde:	00db      	lsls	r3, r3, #3
 8002de0:	4413      	add	r3, r2
 8002de2:	009b      	lsls	r3, r3, #2
 8002de4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002de8:	687a      	ldr	r2, [r7, #4]
 8002dea:	4413      	add	r3, r2
 8002dec:	3304      	adds	r3, #4
 8002dee:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	2200      	movs	r2, #0
 8002df4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	2200      	movs	r2, #0
 8002dfa:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002dfc:	78fb      	ldrb	r3, [r7, #3]
 8002dfe:	f003 030f 	and.w	r3, r3, #15
 8002e02:	b2da      	uxtb	r2, r3
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002e0e:	2b01      	cmp	r3, #1
 8002e10:	d101      	bne.n	8002e16 <HAL_PCD_EP_ClrStall+0x86>
 8002e12:	2302      	movs	r3, #2
 8002e14:	e00e      	b.n	8002e34 <HAL_PCD_EP_ClrStall+0xa4>
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	2201      	movs	r2, #1
 8002e1a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	68f9      	ldr	r1, [r7, #12]
 8002e24:	4618      	mov	r0, r3
 8002e26:	f003 ffab 	bl	8006d80 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002e32:	2300      	movs	r3, #0
}
 8002e34:	4618      	mov	r0, r3
 8002e36:	3710      	adds	r7, #16
 8002e38:	46bd      	mov	sp, r7
 8002e3a:	bd80      	pop	{r7, pc}

08002e3c <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	b084      	sub	sp, #16
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]
 8002e44:	460b      	mov	r3, r1
 8002e46:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8002e48:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	da0c      	bge.n	8002e6a <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002e50:	78fb      	ldrb	r3, [r7, #3]
 8002e52:	f003 020f 	and.w	r2, r3, #15
 8002e56:	4613      	mov	r3, r2
 8002e58:	00db      	lsls	r3, r3, #3
 8002e5a:	4413      	add	r3, r2
 8002e5c:	009b      	lsls	r3, r3, #2
 8002e5e:	3338      	adds	r3, #56	; 0x38
 8002e60:	687a      	ldr	r2, [r7, #4]
 8002e62:	4413      	add	r3, r2
 8002e64:	3304      	adds	r3, #4
 8002e66:	60fb      	str	r3, [r7, #12]
 8002e68:	e00c      	b.n	8002e84 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002e6a:	78fb      	ldrb	r3, [r7, #3]
 8002e6c:	f003 020f 	and.w	r2, r3, #15
 8002e70:	4613      	mov	r3, r2
 8002e72:	00db      	lsls	r3, r3, #3
 8002e74:	4413      	add	r3, r2
 8002e76:	009b      	lsls	r3, r3, #2
 8002e78:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002e7c:	687a      	ldr	r2, [r7, #4]
 8002e7e:	4413      	add	r3, r2
 8002e80:	3304      	adds	r3, #4
 8002e82:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	68f9      	ldr	r1, [r7, #12]
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	f003 fdca 	bl	8006a24 <USB_EPStopXfer>
 8002e90:	4603      	mov	r3, r0
 8002e92:	72fb      	strb	r3, [r7, #11]

  return ret;
 8002e94:	7afb      	ldrb	r3, [r7, #11]
}
 8002e96:	4618      	mov	r0, r3
 8002e98:	3710      	adds	r7, #16
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	bd80      	pop	{r7, pc}

08002e9e <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002e9e:	b580      	push	{r7, lr}
 8002ea0:	b08a      	sub	sp, #40	; 0x28
 8002ea2:	af02      	add	r7, sp, #8
 8002ea4:	6078      	str	r0, [r7, #4]
 8002ea6:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002eae:	697b      	ldr	r3, [r7, #20]
 8002eb0:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002eb2:	683a      	ldr	r2, [r7, #0]
 8002eb4:	4613      	mov	r3, r2
 8002eb6:	00db      	lsls	r3, r3, #3
 8002eb8:	4413      	add	r3, r2
 8002eba:	009b      	lsls	r3, r3, #2
 8002ebc:	3338      	adds	r3, #56	; 0x38
 8002ebe:	687a      	ldr	r2, [r7, #4]
 8002ec0:	4413      	add	r3, r2
 8002ec2:	3304      	adds	r3, #4
 8002ec4:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	6a1a      	ldr	r2, [r3, #32]
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	699b      	ldr	r3, [r3, #24]
 8002ece:	429a      	cmp	r2, r3
 8002ed0:	d901      	bls.n	8002ed6 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002ed2:	2301      	movs	r3, #1
 8002ed4:	e06c      	b.n	8002fb0 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	699a      	ldr	r2, [r3, #24]
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	6a1b      	ldr	r3, [r3, #32]
 8002ede:	1ad3      	subs	r3, r2, r3
 8002ee0:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	68db      	ldr	r3, [r3, #12]
 8002ee6:	69fa      	ldr	r2, [r7, #28]
 8002ee8:	429a      	cmp	r2, r3
 8002eea:	d902      	bls.n	8002ef2 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	68db      	ldr	r3, [r3, #12]
 8002ef0:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002ef2:	69fb      	ldr	r3, [r7, #28]
 8002ef4:	3303      	adds	r3, #3
 8002ef6:	089b      	lsrs	r3, r3, #2
 8002ef8:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002efa:	e02b      	b.n	8002f54 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	699a      	ldr	r2, [r3, #24]
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	6a1b      	ldr	r3, [r3, #32]
 8002f04:	1ad3      	subs	r3, r2, r3
 8002f06:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	68db      	ldr	r3, [r3, #12]
 8002f0c:	69fa      	ldr	r2, [r7, #28]
 8002f0e:	429a      	cmp	r2, r3
 8002f10:	d902      	bls.n	8002f18 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	68db      	ldr	r3, [r3, #12]
 8002f16:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002f18:	69fb      	ldr	r3, [r7, #28]
 8002f1a:	3303      	adds	r3, #3
 8002f1c:	089b      	lsrs	r3, r3, #2
 8002f1e:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	6919      	ldr	r1, [r3, #16]
 8002f24:	683b      	ldr	r3, [r7, #0]
 8002f26:	b2da      	uxtb	r2, r3
 8002f28:	69fb      	ldr	r3, [r7, #28]
 8002f2a:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002f30:	b2db      	uxtb	r3, r3
 8002f32:	9300      	str	r3, [sp, #0]
 8002f34:	4603      	mov	r3, r0
 8002f36:	6978      	ldr	r0, [r7, #20]
 8002f38:	f003 fe1e 	bl	8006b78 <USB_WritePacket>

    ep->xfer_buff  += len;
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	691a      	ldr	r2, [r3, #16]
 8002f40:	69fb      	ldr	r3, [r7, #28]
 8002f42:	441a      	add	r2, r3
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	6a1a      	ldr	r2, [r3, #32]
 8002f4c:	69fb      	ldr	r3, [r7, #28]
 8002f4e:	441a      	add	r2, r3
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002f54:	683b      	ldr	r3, [r7, #0]
 8002f56:	015a      	lsls	r2, r3, #5
 8002f58:	693b      	ldr	r3, [r7, #16]
 8002f5a:	4413      	add	r3, r2
 8002f5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002f60:	699b      	ldr	r3, [r3, #24]
 8002f62:	b29b      	uxth	r3, r3
 8002f64:	69ba      	ldr	r2, [r7, #24]
 8002f66:	429a      	cmp	r2, r3
 8002f68:	d809      	bhi.n	8002f7e <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	6a1a      	ldr	r2, [r3, #32]
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002f72:	429a      	cmp	r2, r3
 8002f74:	d203      	bcs.n	8002f7e <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	699b      	ldr	r3, [r3, #24]
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d1be      	bne.n	8002efc <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	699a      	ldr	r2, [r3, #24]
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	6a1b      	ldr	r3, [r3, #32]
 8002f86:	429a      	cmp	r2, r3
 8002f88:	d811      	bhi.n	8002fae <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002f8a:	683b      	ldr	r3, [r7, #0]
 8002f8c:	f003 030f 	and.w	r3, r3, #15
 8002f90:	2201      	movs	r2, #1
 8002f92:	fa02 f303 	lsl.w	r3, r2, r3
 8002f96:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002f98:	693b      	ldr	r3, [r7, #16]
 8002f9a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002f9e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002fa0:	68bb      	ldr	r3, [r7, #8]
 8002fa2:	43db      	mvns	r3, r3
 8002fa4:	6939      	ldr	r1, [r7, #16]
 8002fa6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002faa:	4013      	ands	r3, r2
 8002fac:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8002fae:	2300      	movs	r3, #0
}
 8002fb0:	4618      	mov	r0, r3
 8002fb2:	3720      	adds	r7, #32
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	bd80      	pop	{r7, pc}

08002fb8 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	b088      	sub	sp, #32
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]
 8002fc0:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002fc8:	69fb      	ldr	r3, [r7, #28]
 8002fca:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002fcc:	69fb      	ldr	r3, [r7, #28]
 8002fce:	333c      	adds	r3, #60	; 0x3c
 8002fd0:	3304      	adds	r3, #4
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002fd6:	683b      	ldr	r3, [r7, #0]
 8002fd8:	015a      	lsls	r2, r3, #5
 8002fda:	69bb      	ldr	r3, [r7, #24]
 8002fdc:	4413      	add	r3, r2
 8002fde:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002fe2:	689b      	ldr	r3, [r3, #8]
 8002fe4:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	691b      	ldr	r3, [r3, #16]
 8002fea:	2b01      	cmp	r3, #1
 8002fec:	d17b      	bne.n	80030e6 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8002fee:	693b      	ldr	r3, [r7, #16]
 8002ff0:	f003 0308 	and.w	r3, r3, #8
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d015      	beq.n	8003024 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002ff8:	697b      	ldr	r3, [r7, #20]
 8002ffa:	4a61      	ldr	r2, [pc, #388]	; (8003180 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002ffc:	4293      	cmp	r3, r2
 8002ffe:	f240 80b9 	bls.w	8003174 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003002:	693b      	ldr	r3, [r7, #16]
 8003004:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003008:	2b00      	cmp	r3, #0
 800300a:	f000 80b3 	beq.w	8003174 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800300e:	683b      	ldr	r3, [r7, #0]
 8003010:	015a      	lsls	r2, r3, #5
 8003012:	69bb      	ldr	r3, [r7, #24]
 8003014:	4413      	add	r3, r2
 8003016:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800301a:	461a      	mov	r2, r3
 800301c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003020:	6093      	str	r3, [r2, #8]
 8003022:	e0a7      	b.n	8003174 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003024:	693b      	ldr	r3, [r7, #16]
 8003026:	f003 0320 	and.w	r3, r3, #32
 800302a:	2b00      	cmp	r3, #0
 800302c:	d009      	beq.n	8003042 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800302e:	683b      	ldr	r3, [r7, #0]
 8003030:	015a      	lsls	r2, r3, #5
 8003032:	69bb      	ldr	r3, [r7, #24]
 8003034:	4413      	add	r3, r2
 8003036:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800303a:	461a      	mov	r2, r3
 800303c:	2320      	movs	r3, #32
 800303e:	6093      	str	r3, [r2, #8]
 8003040:	e098      	b.n	8003174 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003042:	693b      	ldr	r3, [r7, #16]
 8003044:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003048:	2b00      	cmp	r3, #0
 800304a:	f040 8093 	bne.w	8003174 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800304e:	697b      	ldr	r3, [r7, #20]
 8003050:	4a4b      	ldr	r2, [pc, #300]	; (8003180 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003052:	4293      	cmp	r3, r2
 8003054:	d90f      	bls.n	8003076 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003056:	693b      	ldr	r3, [r7, #16]
 8003058:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800305c:	2b00      	cmp	r3, #0
 800305e:	d00a      	beq.n	8003076 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003060:	683b      	ldr	r3, [r7, #0]
 8003062:	015a      	lsls	r2, r3, #5
 8003064:	69bb      	ldr	r3, [r7, #24]
 8003066:	4413      	add	r3, r2
 8003068:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800306c:	461a      	mov	r2, r3
 800306e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003072:	6093      	str	r3, [r2, #8]
 8003074:	e07e      	b.n	8003174 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8003076:	683a      	ldr	r2, [r7, #0]
 8003078:	4613      	mov	r3, r2
 800307a:	00db      	lsls	r3, r3, #3
 800307c:	4413      	add	r3, r2
 800307e:	009b      	lsls	r3, r3, #2
 8003080:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003084:	687a      	ldr	r2, [r7, #4]
 8003086:	4413      	add	r3, r2
 8003088:	3304      	adds	r3, #4
 800308a:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	69da      	ldr	r2, [r3, #28]
 8003090:	683b      	ldr	r3, [r7, #0]
 8003092:	0159      	lsls	r1, r3, #5
 8003094:	69bb      	ldr	r3, [r7, #24]
 8003096:	440b      	add	r3, r1
 8003098:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800309c:	691b      	ldr	r3, [r3, #16]
 800309e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80030a2:	1ad2      	subs	r2, r2, r3
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 80030a8:	683b      	ldr	r3, [r7, #0]
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d114      	bne.n	80030d8 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	699b      	ldr	r3, [r3, #24]
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d109      	bne.n	80030ca <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	6818      	ldr	r0, [r3, #0]
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80030c0:	461a      	mov	r2, r3
 80030c2:	2101      	movs	r1, #1
 80030c4:	f003 ffee 	bl	80070a4 <USB_EP0_OutStart>
 80030c8:	e006      	b.n	80030d8 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	691a      	ldr	r2, [r3, #16]
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	6a1b      	ldr	r3, [r3, #32]
 80030d2:	441a      	add	r2, r3
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80030d8:	683b      	ldr	r3, [r7, #0]
 80030da:	b2db      	uxtb	r3, r3
 80030dc:	4619      	mov	r1, r3
 80030de:	6878      	ldr	r0, [r7, #4]
 80030e0:	f006 fa36 	bl	8009550 <HAL_PCD_DataOutStageCallback>
 80030e4:	e046      	b.n	8003174 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80030e6:	697b      	ldr	r3, [r7, #20]
 80030e8:	4a26      	ldr	r2, [pc, #152]	; (8003184 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80030ea:	4293      	cmp	r3, r2
 80030ec:	d124      	bne.n	8003138 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80030ee:	693b      	ldr	r3, [r7, #16]
 80030f0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d00a      	beq.n	800310e <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80030f8:	683b      	ldr	r3, [r7, #0]
 80030fa:	015a      	lsls	r2, r3, #5
 80030fc:	69bb      	ldr	r3, [r7, #24]
 80030fe:	4413      	add	r3, r2
 8003100:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003104:	461a      	mov	r2, r3
 8003106:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800310a:	6093      	str	r3, [r2, #8]
 800310c:	e032      	b.n	8003174 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800310e:	693b      	ldr	r3, [r7, #16]
 8003110:	f003 0320 	and.w	r3, r3, #32
 8003114:	2b00      	cmp	r3, #0
 8003116:	d008      	beq.n	800312a <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003118:	683b      	ldr	r3, [r7, #0]
 800311a:	015a      	lsls	r2, r3, #5
 800311c:	69bb      	ldr	r3, [r7, #24]
 800311e:	4413      	add	r3, r2
 8003120:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003124:	461a      	mov	r2, r3
 8003126:	2320      	movs	r3, #32
 8003128:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800312a:	683b      	ldr	r3, [r7, #0]
 800312c:	b2db      	uxtb	r3, r3
 800312e:	4619      	mov	r1, r3
 8003130:	6878      	ldr	r0, [r7, #4]
 8003132:	f006 fa0d 	bl	8009550 <HAL_PCD_DataOutStageCallback>
 8003136:	e01d      	b.n	8003174 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003138:	683b      	ldr	r3, [r7, #0]
 800313a:	2b00      	cmp	r3, #0
 800313c:	d114      	bne.n	8003168 <PCD_EP_OutXfrComplete_int+0x1b0>
 800313e:	6879      	ldr	r1, [r7, #4]
 8003140:	683a      	ldr	r2, [r7, #0]
 8003142:	4613      	mov	r3, r2
 8003144:	00db      	lsls	r3, r3, #3
 8003146:	4413      	add	r3, r2
 8003148:	009b      	lsls	r3, r3, #2
 800314a:	440b      	add	r3, r1
 800314c:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	2b00      	cmp	r3, #0
 8003154:	d108      	bne.n	8003168 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	6818      	ldr	r0, [r3, #0]
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003160:	461a      	mov	r2, r3
 8003162:	2100      	movs	r1, #0
 8003164:	f003 ff9e 	bl	80070a4 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003168:	683b      	ldr	r3, [r7, #0]
 800316a:	b2db      	uxtb	r3, r3
 800316c:	4619      	mov	r1, r3
 800316e:	6878      	ldr	r0, [r7, #4]
 8003170:	f006 f9ee 	bl	8009550 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003174:	2300      	movs	r3, #0
}
 8003176:	4618      	mov	r0, r3
 8003178:	3720      	adds	r7, #32
 800317a:	46bd      	mov	sp, r7
 800317c:	bd80      	pop	{r7, pc}
 800317e:	bf00      	nop
 8003180:	4f54300a 	.word	0x4f54300a
 8003184:	4f54310a 	.word	0x4f54310a

08003188 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003188:	b580      	push	{r7, lr}
 800318a:	b086      	sub	sp, #24
 800318c:	af00      	add	r7, sp, #0
 800318e:	6078      	str	r0, [r7, #4]
 8003190:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003198:	697b      	ldr	r3, [r7, #20]
 800319a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800319c:	697b      	ldr	r3, [r7, #20]
 800319e:	333c      	adds	r3, #60	; 0x3c
 80031a0:	3304      	adds	r3, #4
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80031a6:	683b      	ldr	r3, [r7, #0]
 80031a8:	015a      	lsls	r2, r3, #5
 80031aa:	693b      	ldr	r3, [r7, #16]
 80031ac:	4413      	add	r3, r2
 80031ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80031b2:	689b      	ldr	r3, [r3, #8]
 80031b4:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	4a15      	ldr	r2, [pc, #84]	; (8003210 <PCD_EP_OutSetupPacket_int+0x88>)
 80031ba:	4293      	cmp	r3, r2
 80031bc:	d90e      	bls.n	80031dc <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80031be:	68bb      	ldr	r3, [r7, #8]
 80031c0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d009      	beq.n	80031dc <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80031c8:	683b      	ldr	r3, [r7, #0]
 80031ca:	015a      	lsls	r2, r3, #5
 80031cc:	693b      	ldr	r3, [r7, #16]
 80031ce:	4413      	add	r3, r2
 80031d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80031d4:	461a      	mov	r2, r3
 80031d6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80031da:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80031dc:	6878      	ldr	r0, [r7, #4]
 80031de:	f006 f9a5 	bl	800952c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	4a0a      	ldr	r2, [pc, #40]	; (8003210 <PCD_EP_OutSetupPacket_int+0x88>)
 80031e6:	4293      	cmp	r3, r2
 80031e8:	d90c      	bls.n	8003204 <PCD_EP_OutSetupPacket_int+0x7c>
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	691b      	ldr	r3, [r3, #16]
 80031ee:	2b01      	cmp	r3, #1
 80031f0:	d108      	bne.n	8003204 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	6818      	ldr	r0, [r3, #0]
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80031fc:	461a      	mov	r2, r3
 80031fe:	2101      	movs	r1, #1
 8003200:	f003 ff50 	bl	80070a4 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003204:	2300      	movs	r3, #0
}
 8003206:	4618      	mov	r0, r3
 8003208:	3718      	adds	r7, #24
 800320a:	46bd      	mov	sp, r7
 800320c:	bd80      	pop	{r7, pc}
 800320e:	bf00      	nop
 8003210:	4f54300a 	.word	0x4f54300a

08003214 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003214:	b480      	push	{r7}
 8003216:	b085      	sub	sp, #20
 8003218:	af00      	add	r7, sp, #0
 800321a:	6078      	str	r0, [r7, #4]
 800321c:	460b      	mov	r3, r1
 800321e:	70fb      	strb	r3, [r7, #3]
 8003220:	4613      	mov	r3, r2
 8003222:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800322a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800322c:	78fb      	ldrb	r3, [r7, #3]
 800322e:	2b00      	cmp	r3, #0
 8003230:	d107      	bne.n	8003242 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003232:	883b      	ldrh	r3, [r7, #0]
 8003234:	0419      	lsls	r1, r3, #16
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	68ba      	ldr	r2, [r7, #8]
 800323c:	430a      	orrs	r2, r1
 800323e:	629a      	str	r2, [r3, #40]	; 0x28
 8003240:	e028      	b.n	8003294 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003248:	0c1b      	lsrs	r3, r3, #16
 800324a:	68ba      	ldr	r2, [r7, #8]
 800324c:	4413      	add	r3, r2
 800324e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003250:	2300      	movs	r3, #0
 8003252:	73fb      	strb	r3, [r7, #15]
 8003254:	e00d      	b.n	8003272 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681a      	ldr	r2, [r3, #0]
 800325a:	7bfb      	ldrb	r3, [r7, #15]
 800325c:	3340      	adds	r3, #64	; 0x40
 800325e:	009b      	lsls	r3, r3, #2
 8003260:	4413      	add	r3, r2
 8003262:	685b      	ldr	r3, [r3, #4]
 8003264:	0c1b      	lsrs	r3, r3, #16
 8003266:	68ba      	ldr	r2, [r7, #8]
 8003268:	4413      	add	r3, r2
 800326a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800326c:	7bfb      	ldrb	r3, [r7, #15]
 800326e:	3301      	adds	r3, #1
 8003270:	73fb      	strb	r3, [r7, #15]
 8003272:	7bfa      	ldrb	r2, [r7, #15]
 8003274:	78fb      	ldrb	r3, [r7, #3]
 8003276:	3b01      	subs	r3, #1
 8003278:	429a      	cmp	r2, r3
 800327a:	d3ec      	bcc.n	8003256 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800327c:	883b      	ldrh	r3, [r7, #0]
 800327e:	0418      	lsls	r0, r3, #16
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	6819      	ldr	r1, [r3, #0]
 8003284:	78fb      	ldrb	r3, [r7, #3]
 8003286:	3b01      	subs	r3, #1
 8003288:	68ba      	ldr	r2, [r7, #8]
 800328a:	4302      	orrs	r2, r0
 800328c:	3340      	adds	r3, #64	; 0x40
 800328e:	009b      	lsls	r3, r3, #2
 8003290:	440b      	add	r3, r1
 8003292:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003294:	2300      	movs	r3, #0
}
 8003296:	4618      	mov	r0, r3
 8003298:	3714      	adds	r7, #20
 800329a:	46bd      	mov	sp, r7
 800329c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a0:	4770      	bx	lr

080032a2 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80032a2:	b480      	push	{r7}
 80032a4:	b083      	sub	sp, #12
 80032a6:	af00      	add	r7, sp, #0
 80032a8:	6078      	str	r0, [r7, #4]
 80032aa:	460b      	mov	r3, r1
 80032ac:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	887a      	ldrh	r2, [r7, #2]
 80032b4:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80032b6:	2300      	movs	r3, #0
}
 80032b8:	4618      	mov	r0, r3
 80032ba:	370c      	adds	r7, #12
 80032bc:	46bd      	mov	sp, r7
 80032be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c2:	4770      	bx	lr

080032c4 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80032c4:	b480      	push	{r7}
 80032c6:	b083      	sub	sp, #12
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	6078      	str	r0, [r7, #4]
 80032cc:	460b      	mov	r3, r1
 80032ce:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80032d0:	bf00      	nop
 80032d2:	370c      	adds	r7, #12
 80032d4:	46bd      	mov	sp, r7
 80032d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032da:	4770      	bx	lr

080032dc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80032dc:	b580      	push	{r7, lr}
 80032de:	b086      	sub	sp, #24
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d101      	bne.n	80032ee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80032ea:	2301      	movs	r3, #1
 80032ec:	e267      	b.n	80037be <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f003 0301 	and.w	r3, r3, #1
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d075      	beq.n	80033e6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80032fa:	4b88      	ldr	r3, [pc, #544]	; (800351c <HAL_RCC_OscConfig+0x240>)
 80032fc:	689b      	ldr	r3, [r3, #8]
 80032fe:	f003 030c 	and.w	r3, r3, #12
 8003302:	2b04      	cmp	r3, #4
 8003304:	d00c      	beq.n	8003320 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003306:	4b85      	ldr	r3, [pc, #532]	; (800351c <HAL_RCC_OscConfig+0x240>)
 8003308:	689b      	ldr	r3, [r3, #8]
 800330a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800330e:	2b08      	cmp	r3, #8
 8003310:	d112      	bne.n	8003338 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003312:	4b82      	ldr	r3, [pc, #520]	; (800351c <HAL_RCC_OscConfig+0x240>)
 8003314:	685b      	ldr	r3, [r3, #4]
 8003316:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800331a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800331e:	d10b      	bne.n	8003338 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003320:	4b7e      	ldr	r3, [pc, #504]	; (800351c <HAL_RCC_OscConfig+0x240>)
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003328:	2b00      	cmp	r3, #0
 800332a:	d05b      	beq.n	80033e4 <HAL_RCC_OscConfig+0x108>
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	685b      	ldr	r3, [r3, #4]
 8003330:	2b00      	cmp	r3, #0
 8003332:	d157      	bne.n	80033e4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003334:	2301      	movs	r3, #1
 8003336:	e242      	b.n	80037be <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	685b      	ldr	r3, [r3, #4]
 800333c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003340:	d106      	bne.n	8003350 <HAL_RCC_OscConfig+0x74>
 8003342:	4b76      	ldr	r3, [pc, #472]	; (800351c <HAL_RCC_OscConfig+0x240>)
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	4a75      	ldr	r2, [pc, #468]	; (800351c <HAL_RCC_OscConfig+0x240>)
 8003348:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800334c:	6013      	str	r3, [r2, #0]
 800334e:	e01d      	b.n	800338c <HAL_RCC_OscConfig+0xb0>
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	685b      	ldr	r3, [r3, #4]
 8003354:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003358:	d10c      	bne.n	8003374 <HAL_RCC_OscConfig+0x98>
 800335a:	4b70      	ldr	r3, [pc, #448]	; (800351c <HAL_RCC_OscConfig+0x240>)
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	4a6f      	ldr	r2, [pc, #444]	; (800351c <HAL_RCC_OscConfig+0x240>)
 8003360:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003364:	6013      	str	r3, [r2, #0]
 8003366:	4b6d      	ldr	r3, [pc, #436]	; (800351c <HAL_RCC_OscConfig+0x240>)
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	4a6c      	ldr	r2, [pc, #432]	; (800351c <HAL_RCC_OscConfig+0x240>)
 800336c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003370:	6013      	str	r3, [r2, #0]
 8003372:	e00b      	b.n	800338c <HAL_RCC_OscConfig+0xb0>
 8003374:	4b69      	ldr	r3, [pc, #420]	; (800351c <HAL_RCC_OscConfig+0x240>)
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	4a68      	ldr	r2, [pc, #416]	; (800351c <HAL_RCC_OscConfig+0x240>)
 800337a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800337e:	6013      	str	r3, [r2, #0]
 8003380:	4b66      	ldr	r3, [pc, #408]	; (800351c <HAL_RCC_OscConfig+0x240>)
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	4a65      	ldr	r2, [pc, #404]	; (800351c <HAL_RCC_OscConfig+0x240>)
 8003386:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800338a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	685b      	ldr	r3, [r3, #4]
 8003390:	2b00      	cmp	r3, #0
 8003392:	d013      	beq.n	80033bc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003394:	f7fe f99c 	bl	80016d0 <HAL_GetTick>
 8003398:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800339a:	e008      	b.n	80033ae <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800339c:	f7fe f998 	bl	80016d0 <HAL_GetTick>
 80033a0:	4602      	mov	r2, r0
 80033a2:	693b      	ldr	r3, [r7, #16]
 80033a4:	1ad3      	subs	r3, r2, r3
 80033a6:	2b64      	cmp	r3, #100	; 0x64
 80033a8:	d901      	bls.n	80033ae <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80033aa:	2303      	movs	r3, #3
 80033ac:	e207      	b.n	80037be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033ae:	4b5b      	ldr	r3, [pc, #364]	; (800351c <HAL_RCC_OscConfig+0x240>)
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d0f0      	beq.n	800339c <HAL_RCC_OscConfig+0xc0>
 80033ba:	e014      	b.n	80033e6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033bc:	f7fe f988 	bl	80016d0 <HAL_GetTick>
 80033c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80033c2:	e008      	b.n	80033d6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80033c4:	f7fe f984 	bl	80016d0 <HAL_GetTick>
 80033c8:	4602      	mov	r2, r0
 80033ca:	693b      	ldr	r3, [r7, #16]
 80033cc:	1ad3      	subs	r3, r2, r3
 80033ce:	2b64      	cmp	r3, #100	; 0x64
 80033d0:	d901      	bls.n	80033d6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80033d2:	2303      	movs	r3, #3
 80033d4:	e1f3      	b.n	80037be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80033d6:	4b51      	ldr	r3, [pc, #324]	; (800351c <HAL_RCC_OscConfig+0x240>)
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d1f0      	bne.n	80033c4 <HAL_RCC_OscConfig+0xe8>
 80033e2:	e000      	b.n	80033e6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f003 0302 	and.w	r3, r3, #2
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d063      	beq.n	80034ba <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80033f2:	4b4a      	ldr	r3, [pc, #296]	; (800351c <HAL_RCC_OscConfig+0x240>)
 80033f4:	689b      	ldr	r3, [r3, #8]
 80033f6:	f003 030c 	and.w	r3, r3, #12
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d00b      	beq.n	8003416 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80033fe:	4b47      	ldr	r3, [pc, #284]	; (800351c <HAL_RCC_OscConfig+0x240>)
 8003400:	689b      	ldr	r3, [r3, #8]
 8003402:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003406:	2b08      	cmp	r3, #8
 8003408:	d11c      	bne.n	8003444 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800340a:	4b44      	ldr	r3, [pc, #272]	; (800351c <HAL_RCC_OscConfig+0x240>)
 800340c:	685b      	ldr	r3, [r3, #4]
 800340e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003412:	2b00      	cmp	r3, #0
 8003414:	d116      	bne.n	8003444 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003416:	4b41      	ldr	r3, [pc, #260]	; (800351c <HAL_RCC_OscConfig+0x240>)
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f003 0302 	and.w	r3, r3, #2
 800341e:	2b00      	cmp	r3, #0
 8003420:	d005      	beq.n	800342e <HAL_RCC_OscConfig+0x152>
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	68db      	ldr	r3, [r3, #12]
 8003426:	2b01      	cmp	r3, #1
 8003428:	d001      	beq.n	800342e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800342a:	2301      	movs	r3, #1
 800342c:	e1c7      	b.n	80037be <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800342e:	4b3b      	ldr	r3, [pc, #236]	; (800351c <HAL_RCC_OscConfig+0x240>)
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	691b      	ldr	r3, [r3, #16]
 800343a:	00db      	lsls	r3, r3, #3
 800343c:	4937      	ldr	r1, [pc, #220]	; (800351c <HAL_RCC_OscConfig+0x240>)
 800343e:	4313      	orrs	r3, r2
 8003440:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003442:	e03a      	b.n	80034ba <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	68db      	ldr	r3, [r3, #12]
 8003448:	2b00      	cmp	r3, #0
 800344a:	d020      	beq.n	800348e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800344c:	4b34      	ldr	r3, [pc, #208]	; (8003520 <HAL_RCC_OscConfig+0x244>)
 800344e:	2201      	movs	r2, #1
 8003450:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003452:	f7fe f93d 	bl	80016d0 <HAL_GetTick>
 8003456:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003458:	e008      	b.n	800346c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800345a:	f7fe f939 	bl	80016d0 <HAL_GetTick>
 800345e:	4602      	mov	r2, r0
 8003460:	693b      	ldr	r3, [r7, #16]
 8003462:	1ad3      	subs	r3, r2, r3
 8003464:	2b02      	cmp	r3, #2
 8003466:	d901      	bls.n	800346c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003468:	2303      	movs	r3, #3
 800346a:	e1a8      	b.n	80037be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800346c:	4b2b      	ldr	r3, [pc, #172]	; (800351c <HAL_RCC_OscConfig+0x240>)
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f003 0302 	and.w	r3, r3, #2
 8003474:	2b00      	cmp	r3, #0
 8003476:	d0f0      	beq.n	800345a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003478:	4b28      	ldr	r3, [pc, #160]	; (800351c <HAL_RCC_OscConfig+0x240>)
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	691b      	ldr	r3, [r3, #16]
 8003484:	00db      	lsls	r3, r3, #3
 8003486:	4925      	ldr	r1, [pc, #148]	; (800351c <HAL_RCC_OscConfig+0x240>)
 8003488:	4313      	orrs	r3, r2
 800348a:	600b      	str	r3, [r1, #0]
 800348c:	e015      	b.n	80034ba <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800348e:	4b24      	ldr	r3, [pc, #144]	; (8003520 <HAL_RCC_OscConfig+0x244>)
 8003490:	2200      	movs	r2, #0
 8003492:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003494:	f7fe f91c 	bl	80016d0 <HAL_GetTick>
 8003498:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800349a:	e008      	b.n	80034ae <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800349c:	f7fe f918 	bl	80016d0 <HAL_GetTick>
 80034a0:	4602      	mov	r2, r0
 80034a2:	693b      	ldr	r3, [r7, #16]
 80034a4:	1ad3      	subs	r3, r2, r3
 80034a6:	2b02      	cmp	r3, #2
 80034a8:	d901      	bls.n	80034ae <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80034aa:	2303      	movs	r3, #3
 80034ac:	e187      	b.n	80037be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80034ae:	4b1b      	ldr	r3, [pc, #108]	; (800351c <HAL_RCC_OscConfig+0x240>)
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f003 0302 	and.w	r3, r3, #2
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d1f0      	bne.n	800349c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f003 0308 	and.w	r3, r3, #8
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d036      	beq.n	8003534 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	695b      	ldr	r3, [r3, #20]
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d016      	beq.n	80034fc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80034ce:	4b15      	ldr	r3, [pc, #84]	; (8003524 <HAL_RCC_OscConfig+0x248>)
 80034d0:	2201      	movs	r2, #1
 80034d2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034d4:	f7fe f8fc 	bl	80016d0 <HAL_GetTick>
 80034d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80034da:	e008      	b.n	80034ee <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80034dc:	f7fe f8f8 	bl	80016d0 <HAL_GetTick>
 80034e0:	4602      	mov	r2, r0
 80034e2:	693b      	ldr	r3, [r7, #16]
 80034e4:	1ad3      	subs	r3, r2, r3
 80034e6:	2b02      	cmp	r3, #2
 80034e8:	d901      	bls.n	80034ee <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80034ea:	2303      	movs	r3, #3
 80034ec:	e167      	b.n	80037be <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80034ee:	4b0b      	ldr	r3, [pc, #44]	; (800351c <HAL_RCC_OscConfig+0x240>)
 80034f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80034f2:	f003 0302 	and.w	r3, r3, #2
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d0f0      	beq.n	80034dc <HAL_RCC_OscConfig+0x200>
 80034fa:	e01b      	b.n	8003534 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80034fc:	4b09      	ldr	r3, [pc, #36]	; (8003524 <HAL_RCC_OscConfig+0x248>)
 80034fe:	2200      	movs	r2, #0
 8003500:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003502:	f7fe f8e5 	bl	80016d0 <HAL_GetTick>
 8003506:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003508:	e00e      	b.n	8003528 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800350a:	f7fe f8e1 	bl	80016d0 <HAL_GetTick>
 800350e:	4602      	mov	r2, r0
 8003510:	693b      	ldr	r3, [r7, #16]
 8003512:	1ad3      	subs	r3, r2, r3
 8003514:	2b02      	cmp	r3, #2
 8003516:	d907      	bls.n	8003528 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003518:	2303      	movs	r3, #3
 800351a:	e150      	b.n	80037be <HAL_RCC_OscConfig+0x4e2>
 800351c:	40023800 	.word	0x40023800
 8003520:	42470000 	.word	0x42470000
 8003524:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003528:	4b88      	ldr	r3, [pc, #544]	; (800374c <HAL_RCC_OscConfig+0x470>)
 800352a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800352c:	f003 0302 	and.w	r3, r3, #2
 8003530:	2b00      	cmp	r3, #0
 8003532:	d1ea      	bne.n	800350a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f003 0304 	and.w	r3, r3, #4
 800353c:	2b00      	cmp	r3, #0
 800353e:	f000 8097 	beq.w	8003670 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003542:	2300      	movs	r3, #0
 8003544:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003546:	4b81      	ldr	r3, [pc, #516]	; (800374c <HAL_RCC_OscConfig+0x470>)
 8003548:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800354a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800354e:	2b00      	cmp	r3, #0
 8003550:	d10f      	bne.n	8003572 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003552:	2300      	movs	r3, #0
 8003554:	60bb      	str	r3, [r7, #8]
 8003556:	4b7d      	ldr	r3, [pc, #500]	; (800374c <HAL_RCC_OscConfig+0x470>)
 8003558:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800355a:	4a7c      	ldr	r2, [pc, #496]	; (800374c <HAL_RCC_OscConfig+0x470>)
 800355c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003560:	6413      	str	r3, [r2, #64]	; 0x40
 8003562:	4b7a      	ldr	r3, [pc, #488]	; (800374c <HAL_RCC_OscConfig+0x470>)
 8003564:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003566:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800356a:	60bb      	str	r3, [r7, #8]
 800356c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800356e:	2301      	movs	r3, #1
 8003570:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003572:	4b77      	ldr	r3, [pc, #476]	; (8003750 <HAL_RCC_OscConfig+0x474>)
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800357a:	2b00      	cmp	r3, #0
 800357c:	d118      	bne.n	80035b0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800357e:	4b74      	ldr	r3, [pc, #464]	; (8003750 <HAL_RCC_OscConfig+0x474>)
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	4a73      	ldr	r2, [pc, #460]	; (8003750 <HAL_RCC_OscConfig+0x474>)
 8003584:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003588:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800358a:	f7fe f8a1 	bl	80016d0 <HAL_GetTick>
 800358e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003590:	e008      	b.n	80035a4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003592:	f7fe f89d 	bl	80016d0 <HAL_GetTick>
 8003596:	4602      	mov	r2, r0
 8003598:	693b      	ldr	r3, [r7, #16]
 800359a:	1ad3      	subs	r3, r2, r3
 800359c:	2b02      	cmp	r3, #2
 800359e:	d901      	bls.n	80035a4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80035a0:	2303      	movs	r3, #3
 80035a2:	e10c      	b.n	80037be <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035a4:	4b6a      	ldr	r3, [pc, #424]	; (8003750 <HAL_RCC_OscConfig+0x474>)
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d0f0      	beq.n	8003592 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	689b      	ldr	r3, [r3, #8]
 80035b4:	2b01      	cmp	r3, #1
 80035b6:	d106      	bne.n	80035c6 <HAL_RCC_OscConfig+0x2ea>
 80035b8:	4b64      	ldr	r3, [pc, #400]	; (800374c <HAL_RCC_OscConfig+0x470>)
 80035ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035bc:	4a63      	ldr	r2, [pc, #396]	; (800374c <HAL_RCC_OscConfig+0x470>)
 80035be:	f043 0301 	orr.w	r3, r3, #1
 80035c2:	6713      	str	r3, [r2, #112]	; 0x70
 80035c4:	e01c      	b.n	8003600 <HAL_RCC_OscConfig+0x324>
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	689b      	ldr	r3, [r3, #8]
 80035ca:	2b05      	cmp	r3, #5
 80035cc:	d10c      	bne.n	80035e8 <HAL_RCC_OscConfig+0x30c>
 80035ce:	4b5f      	ldr	r3, [pc, #380]	; (800374c <HAL_RCC_OscConfig+0x470>)
 80035d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035d2:	4a5e      	ldr	r2, [pc, #376]	; (800374c <HAL_RCC_OscConfig+0x470>)
 80035d4:	f043 0304 	orr.w	r3, r3, #4
 80035d8:	6713      	str	r3, [r2, #112]	; 0x70
 80035da:	4b5c      	ldr	r3, [pc, #368]	; (800374c <HAL_RCC_OscConfig+0x470>)
 80035dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035de:	4a5b      	ldr	r2, [pc, #364]	; (800374c <HAL_RCC_OscConfig+0x470>)
 80035e0:	f043 0301 	orr.w	r3, r3, #1
 80035e4:	6713      	str	r3, [r2, #112]	; 0x70
 80035e6:	e00b      	b.n	8003600 <HAL_RCC_OscConfig+0x324>
 80035e8:	4b58      	ldr	r3, [pc, #352]	; (800374c <HAL_RCC_OscConfig+0x470>)
 80035ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035ec:	4a57      	ldr	r2, [pc, #348]	; (800374c <HAL_RCC_OscConfig+0x470>)
 80035ee:	f023 0301 	bic.w	r3, r3, #1
 80035f2:	6713      	str	r3, [r2, #112]	; 0x70
 80035f4:	4b55      	ldr	r3, [pc, #340]	; (800374c <HAL_RCC_OscConfig+0x470>)
 80035f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035f8:	4a54      	ldr	r2, [pc, #336]	; (800374c <HAL_RCC_OscConfig+0x470>)
 80035fa:	f023 0304 	bic.w	r3, r3, #4
 80035fe:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	689b      	ldr	r3, [r3, #8]
 8003604:	2b00      	cmp	r3, #0
 8003606:	d015      	beq.n	8003634 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003608:	f7fe f862 	bl	80016d0 <HAL_GetTick>
 800360c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800360e:	e00a      	b.n	8003626 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003610:	f7fe f85e 	bl	80016d0 <HAL_GetTick>
 8003614:	4602      	mov	r2, r0
 8003616:	693b      	ldr	r3, [r7, #16]
 8003618:	1ad3      	subs	r3, r2, r3
 800361a:	f241 3288 	movw	r2, #5000	; 0x1388
 800361e:	4293      	cmp	r3, r2
 8003620:	d901      	bls.n	8003626 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003622:	2303      	movs	r3, #3
 8003624:	e0cb      	b.n	80037be <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003626:	4b49      	ldr	r3, [pc, #292]	; (800374c <HAL_RCC_OscConfig+0x470>)
 8003628:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800362a:	f003 0302 	and.w	r3, r3, #2
 800362e:	2b00      	cmp	r3, #0
 8003630:	d0ee      	beq.n	8003610 <HAL_RCC_OscConfig+0x334>
 8003632:	e014      	b.n	800365e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003634:	f7fe f84c 	bl	80016d0 <HAL_GetTick>
 8003638:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800363a:	e00a      	b.n	8003652 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800363c:	f7fe f848 	bl	80016d0 <HAL_GetTick>
 8003640:	4602      	mov	r2, r0
 8003642:	693b      	ldr	r3, [r7, #16]
 8003644:	1ad3      	subs	r3, r2, r3
 8003646:	f241 3288 	movw	r2, #5000	; 0x1388
 800364a:	4293      	cmp	r3, r2
 800364c:	d901      	bls.n	8003652 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800364e:	2303      	movs	r3, #3
 8003650:	e0b5      	b.n	80037be <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003652:	4b3e      	ldr	r3, [pc, #248]	; (800374c <HAL_RCC_OscConfig+0x470>)
 8003654:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003656:	f003 0302 	and.w	r3, r3, #2
 800365a:	2b00      	cmp	r3, #0
 800365c:	d1ee      	bne.n	800363c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800365e:	7dfb      	ldrb	r3, [r7, #23]
 8003660:	2b01      	cmp	r3, #1
 8003662:	d105      	bne.n	8003670 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003664:	4b39      	ldr	r3, [pc, #228]	; (800374c <HAL_RCC_OscConfig+0x470>)
 8003666:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003668:	4a38      	ldr	r2, [pc, #224]	; (800374c <HAL_RCC_OscConfig+0x470>)
 800366a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800366e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	699b      	ldr	r3, [r3, #24]
 8003674:	2b00      	cmp	r3, #0
 8003676:	f000 80a1 	beq.w	80037bc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800367a:	4b34      	ldr	r3, [pc, #208]	; (800374c <HAL_RCC_OscConfig+0x470>)
 800367c:	689b      	ldr	r3, [r3, #8]
 800367e:	f003 030c 	and.w	r3, r3, #12
 8003682:	2b08      	cmp	r3, #8
 8003684:	d05c      	beq.n	8003740 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	699b      	ldr	r3, [r3, #24]
 800368a:	2b02      	cmp	r3, #2
 800368c:	d141      	bne.n	8003712 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800368e:	4b31      	ldr	r3, [pc, #196]	; (8003754 <HAL_RCC_OscConfig+0x478>)
 8003690:	2200      	movs	r2, #0
 8003692:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003694:	f7fe f81c 	bl	80016d0 <HAL_GetTick>
 8003698:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800369a:	e008      	b.n	80036ae <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800369c:	f7fe f818 	bl	80016d0 <HAL_GetTick>
 80036a0:	4602      	mov	r2, r0
 80036a2:	693b      	ldr	r3, [r7, #16]
 80036a4:	1ad3      	subs	r3, r2, r3
 80036a6:	2b02      	cmp	r3, #2
 80036a8:	d901      	bls.n	80036ae <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80036aa:	2303      	movs	r3, #3
 80036ac:	e087      	b.n	80037be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036ae:	4b27      	ldr	r3, [pc, #156]	; (800374c <HAL_RCC_OscConfig+0x470>)
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d1f0      	bne.n	800369c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	69da      	ldr	r2, [r3, #28]
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6a1b      	ldr	r3, [r3, #32]
 80036c2:	431a      	orrs	r2, r3
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036c8:	019b      	lsls	r3, r3, #6
 80036ca:	431a      	orrs	r2, r3
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036d0:	085b      	lsrs	r3, r3, #1
 80036d2:	3b01      	subs	r3, #1
 80036d4:	041b      	lsls	r3, r3, #16
 80036d6:	431a      	orrs	r2, r3
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036dc:	061b      	lsls	r3, r3, #24
 80036de:	491b      	ldr	r1, [pc, #108]	; (800374c <HAL_RCC_OscConfig+0x470>)
 80036e0:	4313      	orrs	r3, r2
 80036e2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80036e4:	4b1b      	ldr	r3, [pc, #108]	; (8003754 <HAL_RCC_OscConfig+0x478>)
 80036e6:	2201      	movs	r2, #1
 80036e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036ea:	f7fd fff1 	bl	80016d0 <HAL_GetTick>
 80036ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80036f0:	e008      	b.n	8003704 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80036f2:	f7fd ffed 	bl	80016d0 <HAL_GetTick>
 80036f6:	4602      	mov	r2, r0
 80036f8:	693b      	ldr	r3, [r7, #16]
 80036fa:	1ad3      	subs	r3, r2, r3
 80036fc:	2b02      	cmp	r3, #2
 80036fe:	d901      	bls.n	8003704 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003700:	2303      	movs	r3, #3
 8003702:	e05c      	b.n	80037be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003704:	4b11      	ldr	r3, [pc, #68]	; (800374c <HAL_RCC_OscConfig+0x470>)
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800370c:	2b00      	cmp	r3, #0
 800370e:	d0f0      	beq.n	80036f2 <HAL_RCC_OscConfig+0x416>
 8003710:	e054      	b.n	80037bc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003712:	4b10      	ldr	r3, [pc, #64]	; (8003754 <HAL_RCC_OscConfig+0x478>)
 8003714:	2200      	movs	r2, #0
 8003716:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003718:	f7fd ffda 	bl	80016d0 <HAL_GetTick>
 800371c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800371e:	e008      	b.n	8003732 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003720:	f7fd ffd6 	bl	80016d0 <HAL_GetTick>
 8003724:	4602      	mov	r2, r0
 8003726:	693b      	ldr	r3, [r7, #16]
 8003728:	1ad3      	subs	r3, r2, r3
 800372a:	2b02      	cmp	r3, #2
 800372c:	d901      	bls.n	8003732 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800372e:	2303      	movs	r3, #3
 8003730:	e045      	b.n	80037be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003732:	4b06      	ldr	r3, [pc, #24]	; (800374c <HAL_RCC_OscConfig+0x470>)
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800373a:	2b00      	cmp	r3, #0
 800373c:	d1f0      	bne.n	8003720 <HAL_RCC_OscConfig+0x444>
 800373e:	e03d      	b.n	80037bc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	699b      	ldr	r3, [r3, #24]
 8003744:	2b01      	cmp	r3, #1
 8003746:	d107      	bne.n	8003758 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003748:	2301      	movs	r3, #1
 800374a:	e038      	b.n	80037be <HAL_RCC_OscConfig+0x4e2>
 800374c:	40023800 	.word	0x40023800
 8003750:	40007000 	.word	0x40007000
 8003754:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003758:	4b1b      	ldr	r3, [pc, #108]	; (80037c8 <HAL_RCC_OscConfig+0x4ec>)
 800375a:	685b      	ldr	r3, [r3, #4]
 800375c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	699b      	ldr	r3, [r3, #24]
 8003762:	2b01      	cmp	r3, #1
 8003764:	d028      	beq.n	80037b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003770:	429a      	cmp	r2, r3
 8003772:	d121      	bne.n	80037b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800377e:	429a      	cmp	r2, r3
 8003780:	d11a      	bne.n	80037b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003782:	68fa      	ldr	r2, [r7, #12]
 8003784:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003788:	4013      	ands	r3, r2
 800378a:	687a      	ldr	r2, [r7, #4]
 800378c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800378e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003790:	4293      	cmp	r3, r2
 8003792:	d111      	bne.n	80037b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800379e:	085b      	lsrs	r3, r3, #1
 80037a0:	3b01      	subs	r3, #1
 80037a2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80037a4:	429a      	cmp	r2, r3
 80037a6:	d107      	bne.n	80037b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037b2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80037b4:	429a      	cmp	r2, r3
 80037b6:	d001      	beq.n	80037bc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80037b8:	2301      	movs	r3, #1
 80037ba:	e000      	b.n	80037be <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80037bc:	2300      	movs	r3, #0
}
 80037be:	4618      	mov	r0, r3
 80037c0:	3718      	adds	r7, #24
 80037c2:	46bd      	mov	sp, r7
 80037c4:	bd80      	pop	{r7, pc}
 80037c6:	bf00      	nop
 80037c8:	40023800 	.word	0x40023800

080037cc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80037cc:	b580      	push	{r7, lr}
 80037ce:	b084      	sub	sp, #16
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	6078      	str	r0, [r7, #4]
 80037d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d101      	bne.n	80037e0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80037dc:	2301      	movs	r3, #1
 80037de:	e0cc      	b.n	800397a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80037e0:	4b68      	ldr	r3, [pc, #416]	; (8003984 <HAL_RCC_ClockConfig+0x1b8>)
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f003 0307 	and.w	r3, r3, #7
 80037e8:	683a      	ldr	r2, [r7, #0]
 80037ea:	429a      	cmp	r2, r3
 80037ec:	d90c      	bls.n	8003808 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037ee:	4b65      	ldr	r3, [pc, #404]	; (8003984 <HAL_RCC_ClockConfig+0x1b8>)
 80037f0:	683a      	ldr	r2, [r7, #0]
 80037f2:	b2d2      	uxtb	r2, r2
 80037f4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80037f6:	4b63      	ldr	r3, [pc, #396]	; (8003984 <HAL_RCC_ClockConfig+0x1b8>)
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f003 0307 	and.w	r3, r3, #7
 80037fe:	683a      	ldr	r2, [r7, #0]
 8003800:	429a      	cmp	r2, r3
 8003802:	d001      	beq.n	8003808 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003804:	2301      	movs	r3, #1
 8003806:	e0b8      	b.n	800397a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f003 0302 	and.w	r3, r3, #2
 8003810:	2b00      	cmp	r3, #0
 8003812:	d020      	beq.n	8003856 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f003 0304 	and.w	r3, r3, #4
 800381c:	2b00      	cmp	r3, #0
 800381e:	d005      	beq.n	800382c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003820:	4b59      	ldr	r3, [pc, #356]	; (8003988 <HAL_RCC_ClockConfig+0x1bc>)
 8003822:	689b      	ldr	r3, [r3, #8]
 8003824:	4a58      	ldr	r2, [pc, #352]	; (8003988 <HAL_RCC_ClockConfig+0x1bc>)
 8003826:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800382a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f003 0308 	and.w	r3, r3, #8
 8003834:	2b00      	cmp	r3, #0
 8003836:	d005      	beq.n	8003844 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003838:	4b53      	ldr	r3, [pc, #332]	; (8003988 <HAL_RCC_ClockConfig+0x1bc>)
 800383a:	689b      	ldr	r3, [r3, #8]
 800383c:	4a52      	ldr	r2, [pc, #328]	; (8003988 <HAL_RCC_ClockConfig+0x1bc>)
 800383e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003842:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003844:	4b50      	ldr	r3, [pc, #320]	; (8003988 <HAL_RCC_ClockConfig+0x1bc>)
 8003846:	689b      	ldr	r3, [r3, #8]
 8003848:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	689b      	ldr	r3, [r3, #8]
 8003850:	494d      	ldr	r1, [pc, #308]	; (8003988 <HAL_RCC_ClockConfig+0x1bc>)
 8003852:	4313      	orrs	r3, r2
 8003854:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f003 0301 	and.w	r3, r3, #1
 800385e:	2b00      	cmp	r3, #0
 8003860:	d044      	beq.n	80038ec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	685b      	ldr	r3, [r3, #4]
 8003866:	2b01      	cmp	r3, #1
 8003868:	d107      	bne.n	800387a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800386a:	4b47      	ldr	r3, [pc, #284]	; (8003988 <HAL_RCC_ClockConfig+0x1bc>)
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003872:	2b00      	cmp	r3, #0
 8003874:	d119      	bne.n	80038aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003876:	2301      	movs	r3, #1
 8003878:	e07f      	b.n	800397a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	685b      	ldr	r3, [r3, #4]
 800387e:	2b02      	cmp	r3, #2
 8003880:	d003      	beq.n	800388a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003886:	2b03      	cmp	r3, #3
 8003888:	d107      	bne.n	800389a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800388a:	4b3f      	ldr	r3, [pc, #252]	; (8003988 <HAL_RCC_ClockConfig+0x1bc>)
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003892:	2b00      	cmp	r3, #0
 8003894:	d109      	bne.n	80038aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003896:	2301      	movs	r3, #1
 8003898:	e06f      	b.n	800397a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800389a:	4b3b      	ldr	r3, [pc, #236]	; (8003988 <HAL_RCC_ClockConfig+0x1bc>)
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f003 0302 	and.w	r3, r3, #2
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d101      	bne.n	80038aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80038a6:	2301      	movs	r3, #1
 80038a8:	e067      	b.n	800397a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80038aa:	4b37      	ldr	r3, [pc, #220]	; (8003988 <HAL_RCC_ClockConfig+0x1bc>)
 80038ac:	689b      	ldr	r3, [r3, #8]
 80038ae:	f023 0203 	bic.w	r2, r3, #3
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	685b      	ldr	r3, [r3, #4]
 80038b6:	4934      	ldr	r1, [pc, #208]	; (8003988 <HAL_RCC_ClockConfig+0x1bc>)
 80038b8:	4313      	orrs	r3, r2
 80038ba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80038bc:	f7fd ff08 	bl	80016d0 <HAL_GetTick>
 80038c0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038c2:	e00a      	b.n	80038da <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80038c4:	f7fd ff04 	bl	80016d0 <HAL_GetTick>
 80038c8:	4602      	mov	r2, r0
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	1ad3      	subs	r3, r2, r3
 80038ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80038d2:	4293      	cmp	r3, r2
 80038d4:	d901      	bls.n	80038da <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80038d6:	2303      	movs	r3, #3
 80038d8:	e04f      	b.n	800397a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038da:	4b2b      	ldr	r3, [pc, #172]	; (8003988 <HAL_RCC_ClockConfig+0x1bc>)
 80038dc:	689b      	ldr	r3, [r3, #8]
 80038de:	f003 020c 	and.w	r2, r3, #12
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	685b      	ldr	r3, [r3, #4]
 80038e6:	009b      	lsls	r3, r3, #2
 80038e8:	429a      	cmp	r2, r3
 80038ea:	d1eb      	bne.n	80038c4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80038ec:	4b25      	ldr	r3, [pc, #148]	; (8003984 <HAL_RCC_ClockConfig+0x1b8>)
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f003 0307 	and.w	r3, r3, #7
 80038f4:	683a      	ldr	r2, [r7, #0]
 80038f6:	429a      	cmp	r2, r3
 80038f8:	d20c      	bcs.n	8003914 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038fa:	4b22      	ldr	r3, [pc, #136]	; (8003984 <HAL_RCC_ClockConfig+0x1b8>)
 80038fc:	683a      	ldr	r2, [r7, #0]
 80038fe:	b2d2      	uxtb	r2, r2
 8003900:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003902:	4b20      	ldr	r3, [pc, #128]	; (8003984 <HAL_RCC_ClockConfig+0x1b8>)
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f003 0307 	and.w	r3, r3, #7
 800390a:	683a      	ldr	r2, [r7, #0]
 800390c:	429a      	cmp	r2, r3
 800390e:	d001      	beq.n	8003914 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003910:	2301      	movs	r3, #1
 8003912:	e032      	b.n	800397a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f003 0304 	and.w	r3, r3, #4
 800391c:	2b00      	cmp	r3, #0
 800391e:	d008      	beq.n	8003932 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003920:	4b19      	ldr	r3, [pc, #100]	; (8003988 <HAL_RCC_ClockConfig+0x1bc>)
 8003922:	689b      	ldr	r3, [r3, #8]
 8003924:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	68db      	ldr	r3, [r3, #12]
 800392c:	4916      	ldr	r1, [pc, #88]	; (8003988 <HAL_RCC_ClockConfig+0x1bc>)
 800392e:	4313      	orrs	r3, r2
 8003930:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f003 0308 	and.w	r3, r3, #8
 800393a:	2b00      	cmp	r3, #0
 800393c:	d009      	beq.n	8003952 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800393e:	4b12      	ldr	r3, [pc, #72]	; (8003988 <HAL_RCC_ClockConfig+0x1bc>)
 8003940:	689b      	ldr	r3, [r3, #8]
 8003942:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	691b      	ldr	r3, [r3, #16]
 800394a:	00db      	lsls	r3, r3, #3
 800394c:	490e      	ldr	r1, [pc, #56]	; (8003988 <HAL_RCC_ClockConfig+0x1bc>)
 800394e:	4313      	orrs	r3, r2
 8003950:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003952:	f000 f821 	bl	8003998 <HAL_RCC_GetSysClockFreq>
 8003956:	4602      	mov	r2, r0
 8003958:	4b0b      	ldr	r3, [pc, #44]	; (8003988 <HAL_RCC_ClockConfig+0x1bc>)
 800395a:	689b      	ldr	r3, [r3, #8]
 800395c:	091b      	lsrs	r3, r3, #4
 800395e:	f003 030f 	and.w	r3, r3, #15
 8003962:	490a      	ldr	r1, [pc, #40]	; (800398c <HAL_RCC_ClockConfig+0x1c0>)
 8003964:	5ccb      	ldrb	r3, [r1, r3]
 8003966:	fa22 f303 	lsr.w	r3, r2, r3
 800396a:	4a09      	ldr	r2, [pc, #36]	; (8003990 <HAL_RCC_ClockConfig+0x1c4>)
 800396c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800396e:	4b09      	ldr	r3, [pc, #36]	; (8003994 <HAL_RCC_ClockConfig+0x1c8>)
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	4618      	mov	r0, r3
 8003974:	f7fd fe68 	bl	8001648 <HAL_InitTick>

  return HAL_OK;
 8003978:	2300      	movs	r3, #0
}
 800397a:	4618      	mov	r0, r3
 800397c:	3710      	adds	r7, #16
 800397e:	46bd      	mov	sp, r7
 8003980:	bd80      	pop	{r7, pc}
 8003982:	bf00      	nop
 8003984:	40023c00 	.word	0x40023c00
 8003988:	40023800 	.word	0x40023800
 800398c:	0800a408 	.word	0x0800a408
 8003990:	20000008 	.word	0x20000008
 8003994:	2000000c 	.word	0x2000000c

08003998 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003998:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800399c:	b090      	sub	sp, #64	; 0x40
 800399e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80039a0:	2300      	movs	r3, #0
 80039a2:	637b      	str	r3, [r7, #52]	; 0x34
 80039a4:	2300      	movs	r3, #0
 80039a6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80039a8:	2300      	movs	r3, #0
 80039aa:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80039ac:	2300      	movs	r3, #0
 80039ae:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80039b0:	4b59      	ldr	r3, [pc, #356]	; (8003b18 <HAL_RCC_GetSysClockFreq+0x180>)
 80039b2:	689b      	ldr	r3, [r3, #8]
 80039b4:	f003 030c 	and.w	r3, r3, #12
 80039b8:	2b08      	cmp	r3, #8
 80039ba:	d00d      	beq.n	80039d8 <HAL_RCC_GetSysClockFreq+0x40>
 80039bc:	2b08      	cmp	r3, #8
 80039be:	f200 80a1 	bhi.w	8003b04 <HAL_RCC_GetSysClockFreq+0x16c>
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d002      	beq.n	80039cc <HAL_RCC_GetSysClockFreq+0x34>
 80039c6:	2b04      	cmp	r3, #4
 80039c8:	d003      	beq.n	80039d2 <HAL_RCC_GetSysClockFreq+0x3a>
 80039ca:	e09b      	b.n	8003b04 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80039cc:	4b53      	ldr	r3, [pc, #332]	; (8003b1c <HAL_RCC_GetSysClockFreq+0x184>)
 80039ce:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80039d0:	e09b      	b.n	8003b0a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80039d2:	4b53      	ldr	r3, [pc, #332]	; (8003b20 <HAL_RCC_GetSysClockFreq+0x188>)
 80039d4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80039d6:	e098      	b.n	8003b0a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80039d8:	4b4f      	ldr	r3, [pc, #316]	; (8003b18 <HAL_RCC_GetSysClockFreq+0x180>)
 80039da:	685b      	ldr	r3, [r3, #4]
 80039dc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80039e0:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80039e2:	4b4d      	ldr	r3, [pc, #308]	; (8003b18 <HAL_RCC_GetSysClockFreq+0x180>)
 80039e4:	685b      	ldr	r3, [r3, #4]
 80039e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d028      	beq.n	8003a40 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80039ee:	4b4a      	ldr	r3, [pc, #296]	; (8003b18 <HAL_RCC_GetSysClockFreq+0x180>)
 80039f0:	685b      	ldr	r3, [r3, #4]
 80039f2:	099b      	lsrs	r3, r3, #6
 80039f4:	2200      	movs	r2, #0
 80039f6:	623b      	str	r3, [r7, #32]
 80039f8:	627a      	str	r2, [r7, #36]	; 0x24
 80039fa:	6a3b      	ldr	r3, [r7, #32]
 80039fc:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003a00:	2100      	movs	r1, #0
 8003a02:	4b47      	ldr	r3, [pc, #284]	; (8003b20 <HAL_RCC_GetSysClockFreq+0x188>)
 8003a04:	fb03 f201 	mul.w	r2, r3, r1
 8003a08:	2300      	movs	r3, #0
 8003a0a:	fb00 f303 	mul.w	r3, r0, r3
 8003a0e:	4413      	add	r3, r2
 8003a10:	4a43      	ldr	r2, [pc, #268]	; (8003b20 <HAL_RCC_GetSysClockFreq+0x188>)
 8003a12:	fba0 1202 	umull	r1, r2, r0, r2
 8003a16:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003a18:	460a      	mov	r2, r1
 8003a1a:	62ba      	str	r2, [r7, #40]	; 0x28
 8003a1c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003a1e:	4413      	add	r3, r2
 8003a20:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003a22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a24:	2200      	movs	r2, #0
 8003a26:	61bb      	str	r3, [r7, #24]
 8003a28:	61fa      	str	r2, [r7, #28]
 8003a2a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003a2e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003a32:	f7fc fbc9 	bl	80001c8 <__aeabi_uldivmod>
 8003a36:	4602      	mov	r2, r0
 8003a38:	460b      	mov	r3, r1
 8003a3a:	4613      	mov	r3, r2
 8003a3c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003a3e:	e053      	b.n	8003ae8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a40:	4b35      	ldr	r3, [pc, #212]	; (8003b18 <HAL_RCC_GetSysClockFreq+0x180>)
 8003a42:	685b      	ldr	r3, [r3, #4]
 8003a44:	099b      	lsrs	r3, r3, #6
 8003a46:	2200      	movs	r2, #0
 8003a48:	613b      	str	r3, [r7, #16]
 8003a4a:	617a      	str	r2, [r7, #20]
 8003a4c:	693b      	ldr	r3, [r7, #16]
 8003a4e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003a52:	f04f 0b00 	mov.w	fp, #0
 8003a56:	4652      	mov	r2, sl
 8003a58:	465b      	mov	r3, fp
 8003a5a:	f04f 0000 	mov.w	r0, #0
 8003a5e:	f04f 0100 	mov.w	r1, #0
 8003a62:	0159      	lsls	r1, r3, #5
 8003a64:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003a68:	0150      	lsls	r0, r2, #5
 8003a6a:	4602      	mov	r2, r0
 8003a6c:	460b      	mov	r3, r1
 8003a6e:	ebb2 080a 	subs.w	r8, r2, sl
 8003a72:	eb63 090b 	sbc.w	r9, r3, fp
 8003a76:	f04f 0200 	mov.w	r2, #0
 8003a7a:	f04f 0300 	mov.w	r3, #0
 8003a7e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003a82:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003a86:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003a8a:	ebb2 0408 	subs.w	r4, r2, r8
 8003a8e:	eb63 0509 	sbc.w	r5, r3, r9
 8003a92:	f04f 0200 	mov.w	r2, #0
 8003a96:	f04f 0300 	mov.w	r3, #0
 8003a9a:	00eb      	lsls	r3, r5, #3
 8003a9c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003aa0:	00e2      	lsls	r2, r4, #3
 8003aa2:	4614      	mov	r4, r2
 8003aa4:	461d      	mov	r5, r3
 8003aa6:	eb14 030a 	adds.w	r3, r4, sl
 8003aaa:	603b      	str	r3, [r7, #0]
 8003aac:	eb45 030b 	adc.w	r3, r5, fp
 8003ab0:	607b      	str	r3, [r7, #4]
 8003ab2:	f04f 0200 	mov.w	r2, #0
 8003ab6:	f04f 0300 	mov.w	r3, #0
 8003aba:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003abe:	4629      	mov	r1, r5
 8003ac0:	028b      	lsls	r3, r1, #10
 8003ac2:	4621      	mov	r1, r4
 8003ac4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003ac8:	4621      	mov	r1, r4
 8003aca:	028a      	lsls	r2, r1, #10
 8003acc:	4610      	mov	r0, r2
 8003ace:	4619      	mov	r1, r3
 8003ad0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ad2:	2200      	movs	r2, #0
 8003ad4:	60bb      	str	r3, [r7, #8]
 8003ad6:	60fa      	str	r2, [r7, #12]
 8003ad8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003adc:	f7fc fb74 	bl	80001c8 <__aeabi_uldivmod>
 8003ae0:	4602      	mov	r2, r0
 8003ae2:	460b      	mov	r3, r1
 8003ae4:	4613      	mov	r3, r2
 8003ae6:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003ae8:	4b0b      	ldr	r3, [pc, #44]	; (8003b18 <HAL_RCC_GetSysClockFreq+0x180>)
 8003aea:	685b      	ldr	r3, [r3, #4]
 8003aec:	0c1b      	lsrs	r3, r3, #16
 8003aee:	f003 0303 	and.w	r3, r3, #3
 8003af2:	3301      	adds	r3, #1
 8003af4:	005b      	lsls	r3, r3, #1
 8003af6:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8003af8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003afa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003afc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b00:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003b02:	e002      	b.n	8003b0a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003b04:	4b05      	ldr	r3, [pc, #20]	; (8003b1c <HAL_RCC_GetSysClockFreq+0x184>)
 8003b06:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003b08:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003b0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003b0c:	4618      	mov	r0, r3
 8003b0e:	3740      	adds	r7, #64	; 0x40
 8003b10:	46bd      	mov	sp, r7
 8003b12:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003b16:	bf00      	nop
 8003b18:	40023800 	.word	0x40023800
 8003b1c:	00f42400 	.word	0x00f42400
 8003b20:	016e3600 	.word	0x016e3600

08003b24 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003b24:	b480      	push	{r7}
 8003b26:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003b28:	4b03      	ldr	r3, [pc, #12]	; (8003b38 <HAL_RCC_GetHCLKFreq+0x14>)
 8003b2a:	681b      	ldr	r3, [r3, #0]
}
 8003b2c:	4618      	mov	r0, r3
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b34:	4770      	bx	lr
 8003b36:	bf00      	nop
 8003b38:	20000008 	.word	0x20000008

08003b3c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003b3c:	b580      	push	{r7, lr}
 8003b3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003b40:	f7ff fff0 	bl	8003b24 <HAL_RCC_GetHCLKFreq>
 8003b44:	4602      	mov	r2, r0
 8003b46:	4b05      	ldr	r3, [pc, #20]	; (8003b5c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003b48:	689b      	ldr	r3, [r3, #8]
 8003b4a:	0a9b      	lsrs	r3, r3, #10
 8003b4c:	f003 0307 	and.w	r3, r3, #7
 8003b50:	4903      	ldr	r1, [pc, #12]	; (8003b60 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003b52:	5ccb      	ldrb	r3, [r1, r3]
 8003b54:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b58:	4618      	mov	r0, r3
 8003b5a:	bd80      	pop	{r7, pc}
 8003b5c:	40023800 	.word	0x40023800
 8003b60:	0800a418 	.word	0x0800a418

08003b64 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003b64:	b580      	push	{r7, lr}
 8003b66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003b68:	f7ff ffdc 	bl	8003b24 <HAL_RCC_GetHCLKFreq>
 8003b6c:	4602      	mov	r2, r0
 8003b6e:	4b05      	ldr	r3, [pc, #20]	; (8003b84 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003b70:	689b      	ldr	r3, [r3, #8]
 8003b72:	0b5b      	lsrs	r3, r3, #13
 8003b74:	f003 0307 	and.w	r3, r3, #7
 8003b78:	4903      	ldr	r1, [pc, #12]	; (8003b88 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003b7a:	5ccb      	ldrb	r3, [r1, r3]
 8003b7c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b80:	4618      	mov	r0, r3
 8003b82:	bd80      	pop	{r7, pc}
 8003b84:	40023800 	.word	0x40023800
 8003b88:	0800a418 	.word	0x0800a418

08003b8c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003b8c:	b580      	push	{r7, lr}
 8003b8e:	b082      	sub	sp, #8
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d101      	bne.n	8003b9e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003b9a:	2301      	movs	r3, #1
 8003b9c:	e07b      	b.n	8003c96 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d108      	bne.n	8003bb8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	685b      	ldr	r3, [r3, #4]
 8003baa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003bae:	d009      	beq.n	8003bc4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	2200      	movs	r2, #0
 8003bb4:	61da      	str	r2, [r3, #28]
 8003bb6:	e005      	b.n	8003bc4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	2200      	movs	r2, #0
 8003bbc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	2200      	movs	r2, #0
 8003bc2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	2200      	movs	r2, #0
 8003bc8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003bd0:	b2db      	uxtb	r3, r3
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d106      	bne.n	8003be4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	2200      	movs	r2, #0
 8003bda:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003bde:	6878      	ldr	r0, [r7, #4]
 8003be0:	f7fd fb82 	bl	80012e8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	2202      	movs	r2, #2
 8003be8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	681a      	ldr	r2, [r3, #0]
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003bfa:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	685b      	ldr	r3, [r3, #4]
 8003c00:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	689b      	ldr	r3, [r3, #8]
 8003c08:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003c0c:	431a      	orrs	r2, r3
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	68db      	ldr	r3, [r3, #12]
 8003c12:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003c16:	431a      	orrs	r2, r3
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	691b      	ldr	r3, [r3, #16]
 8003c1c:	f003 0302 	and.w	r3, r3, #2
 8003c20:	431a      	orrs	r2, r3
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	695b      	ldr	r3, [r3, #20]
 8003c26:	f003 0301 	and.w	r3, r3, #1
 8003c2a:	431a      	orrs	r2, r3
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	699b      	ldr	r3, [r3, #24]
 8003c30:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003c34:	431a      	orrs	r2, r3
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	69db      	ldr	r3, [r3, #28]
 8003c3a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003c3e:	431a      	orrs	r2, r3
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	6a1b      	ldr	r3, [r3, #32]
 8003c44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c48:	ea42 0103 	orr.w	r1, r2, r3
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c50:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	430a      	orrs	r2, r1
 8003c5a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	699b      	ldr	r3, [r3, #24]
 8003c60:	0c1b      	lsrs	r3, r3, #16
 8003c62:	f003 0104 	and.w	r1, r3, #4
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c6a:	f003 0210 	and.w	r2, r3, #16
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	430a      	orrs	r2, r1
 8003c74:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	69da      	ldr	r2, [r3, #28]
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003c84:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	2200      	movs	r2, #0
 8003c8a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	2201      	movs	r2, #1
 8003c90:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003c94:	2300      	movs	r3, #0
}
 8003c96:	4618      	mov	r0, r3
 8003c98:	3708      	adds	r7, #8
 8003c9a:	46bd      	mov	sp, r7
 8003c9c:	bd80      	pop	{r7, pc}

08003c9e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003c9e:	b580      	push	{r7, lr}
 8003ca0:	b088      	sub	sp, #32
 8003ca2:	af00      	add	r7, sp, #0
 8003ca4:	60f8      	str	r0, [r7, #12]
 8003ca6:	60b9      	str	r1, [r7, #8]
 8003ca8:	603b      	str	r3, [r7, #0]
 8003caa:	4613      	mov	r3, r2
 8003cac:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003cae:	2300      	movs	r3, #0
 8003cb0:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003cb8:	2b01      	cmp	r3, #1
 8003cba:	d101      	bne.n	8003cc0 <HAL_SPI_Transmit+0x22>
 8003cbc:	2302      	movs	r3, #2
 8003cbe:	e126      	b.n	8003f0e <HAL_SPI_Transmit+0x270>
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	2201      	movs	r2, #1
 8003cc4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003cc8:	f7fd fd02 	bl	80016d0 <HAL_GetTick>
 8003ccc:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003cce:	88fb      	ldrh	r3, [r7, #6]
 8003cd0:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003cd8:	b2db      	uxtb	r3, r3
 8003cda:	2b01      	cmp	r3, #1
 8003cdc:	d002      	beq.n	8003ce4 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003cde:	2302      	movs	r3, #2
 8003ce0:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003ce2:	e10b      	b.n	8003efc <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8003ce4:	68bb      	ldr	r3, [r7, #8]
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d002      	beq.n	8003cf0 <HAL_SPI_Transmit+0x52>
 8003cea:	88fb      	ldrh	r3, [r7, #6]
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d102      	bne.n	8003cf6 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003cf0:	2301      	movs	r3, #1
 8003cf2:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003cf4:	e102      	b.n	8003efc <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	2203      	movs	r2, #3
 8003cfa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	2200      	movs	r2, #0
 8003d02:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	68ba      	ldr	r2, [r7, #8]
 8003d08:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	88fa      	ldrh	r2, [r7, #6]
 8003d0e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	88fa      	ldrh	r2, [r7, #6]
 8003d14:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	2200      	movs	r2, #0
 8003d1a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	2200      	movs	r2, #0
 8003d20:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	2200      	movs	r2, #0
 8003d26:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	2200      	movs	r2, #0
 8003d2c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	2200      	movs	r2, #0
 8003d32:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	689b      	ldr	r3, [r3, #8]
 8003d38:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003d3c:	d10f      	bne.n	8003d5e <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	681a      	ldr	r2, [r3, #0]
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003d4c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	681a      	ldr	r2, [r3, #0]
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003d5c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d68:	2b40      	cmp	r3, #64	; 0x40
 8003d6a:	d007      	beq.n	8003d7c <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	681a      	ldr	r2, [r3, #0]
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003d7a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	68db      	ldr	r3, [r3, #12]
 8003d80:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003d84:	d14b      	bne.n	8003e1e <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	685b      	ldr	r3, [r3, #4]
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d002      	beq.n	8003d94 <HAL_SPI_Transmit+0xf6>
 8003d8e:	8afb      	ldrh	r3, [r7, #22]
 8003d90:	2b01      	cmp	r3, #1
 8003d92:	d13e      	bne.n	8003e12 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d98:	881a      	ldrh	r2, [r3, #0]
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003da4:	1c9a      	adds	r2, r3, #2
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003dae:	b29b      	uxth	r3, r3
 8003db0:	3b01      	subs	r3, #1
 8003db2:	b29a      	uxth	r2, r3
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003db8:	e02b      	b.n	8003e12 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	689b      	ldr	r3, [r3, #8]
 8003dc0:	f003 0302 	and.w	r3, r3, #2
 8003dc4:	2b02      	cmp	r3, #2
 8003dc6:	d112      	bne.n	8003dee <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dcc:	881a      	ldrh	r2, [r3, #0]
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dd8:	1c9a      	adds	r2, r3, #2
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003de2:	b29b      	uxth	r3, r3
 8003de4:	3b01      	subs	r3, #1
 8003de6:	b29a      	uxth	r2, r3
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	86da      	strh	r2, [r3, #54]	; 0x36
 8003dec:	e011      	b.n	8003e12 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003dee:	f7fd fc6f 	bl	80016d0 <HAL_GetTick>
 8003df2:	4602      	mov	r2, r0
 8003df4:	69bb      	ldr	r3, [r7, #24]
 8003df6:	1ad3      	subs	r3, r2, r3
 8003df8:	683a      	ldr	r2, [r7, #0]
 8003dfa:	429a      	cmp	r2, r3
 8003dfc:	d803      	bhi.n	8003e06 <HAL_SPI_Transmit+0x168>
 8003dfe:	683b      	ldr	r3, [r7, #0]
 8003e00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e04:	d102      	bne.n	8003e0c <HAL_SPI_Transmit+0x16e>
 8003e06:	683b      	ldr	r3, [r7, #0]
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d102      	bne.n	8003e12 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8003e0c:	2303      	movs	r3, #3
 8003e0e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003e10:	e074      	b.n	8003efc <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003e16:	b29b      	uxth	r3, r3
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d1ce      	bne.n	8003dba <HAL_SPI_Transmit+0x11c>
 8003e1c:	e04c      	b.n	8003eb8 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	685b      	ldr	r3, [r3, #4]
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d002      	beq.n	8003e2c <HAL_SPI_Transmit+0x18e>
 8003e26:	8afb      	ldrh	r3, [r7, #22]
 8003e28:	2b01      	cmp	r3, #1
 8003e2a:	d140      	bne.n	8003eae <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	330c      	adds	r3, #12
 8003e36:	7812      	ldrb	r2, [r2, #0]
 8003e38:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e3e:	1c5a      	adds	r2, r3, #1
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003e48:	b29b      	uxth	r3, r3
 8003e4a:	3b01      	subs	r3, #1
 8003e4c:	b29a      	uxth	r2, r3
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003e52:	e02c      	b.n	8003eae <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	689b      	ldr	r3, [r3, #8]
 8003e5a:	f003 0302 	and.w	r3, r3, #2
 8003e5e:	2b02      	cmp	r3, #2
 8003e60:	d113      	bne.n	8003e8a <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	330c      	adds	r3, #12
 8003e6c:	7812      	ldrb	r2, [r2, #0]
 8003e6e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e74:	1c5a      	adds	r2, r3, #1
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003e7e:	b29b      	uxth	r3, r3
 8003e80:	3b01      	subs	r3, #1
 8003e82:	b29a      	uxth	r2, r3
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	86da      	strh	r2, [r3, #54]	; 0x36
 8003e88:	e011      	b.n	8003eae <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003e8a:	f7fd fc21 	bl	80016d0 <HAL_GetTick>
 8003e8e:	4602      	mov	r2, r0
 8003e90:	69bb      	ldr	r3, [r7, #24]
 8003e92:	1ad3      	subs	r3, r2, r3
 8003e94:	683a      	ldr	r2, [r7, #0]
 8003e96:	429a      	cmp	r2, r3
 8003e98:	d803      	bhi.n	8003ea2 <HAL_SPI_Transmit+0x204>
 8003e9a:	683b      	ldr	r3, [r7, #0]
 8003e9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ea0:	d102      	bne.n	8003ea8 <HAL_SPI_Transmit+0x20a>
 8003ea2:	683b      	ldr	r3, [r7, #0]
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d102      	bne.n	8003eae <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8003ea8:	2303      	movs	r3, #3
 8003eaa:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003eac:	e026      	b.n	8003efc <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003eb2:	b29b      	uxth	r3, r3
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d1cd      	bne.n	8003e54 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003eb8:	69ba      	ldr	r2, [r7, #24]
 8003eba:	6839      	ldr	r1, [r7, #0]
 8003ebc:	68f8      	ldr	r0, [r7, #12]
 8003ebe:	f000 fbd9 	bl	8004674 <SPI_EndRxTxTransaction>
 8003ec2:	4603      	mov	r3, r0
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d002      	beq.n	8003ece <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	2220      	movs	r2, #32
 8003ecc:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	689b      	ldr	r3, [r3, #8]
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d10a      	bne.n	8003eec <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003ed6:	2300      	movs	r3, #0
 8003ed8:	613b      	str	r3, [r7, #16]
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	68db      	ldr	r3, [r3, #12]
 8003ee0:	613b      	str	r3, [r7, #16]
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	689b      	ldr	r3, [r3, #8]
 8003ee8:	613b      	str	r3, [r7, #16]
 8003eea:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d002      	beq.n	8003efa <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8003ef4:	2301      	movs	r3, #1
 8003ef6:	77fb      	strb	r3, [r7, #31]
 8003ef8:	e000      	b.n	8003efc <HAL_SPI_Transmit+0x25e>
  }

error:
 8003efa:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	2201      	movs	r2, #1
 8003f00:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	2200      	movs	r2, #0
 8003f08:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003f0c:	7ffb      	ldrb	r3, [r7, #31]
}
 8003f0e:	4618      	mov	r0, r3
 8003f10:	3720      	adds	r7, #32
 8003f12:	46bd      	mov	sp, r7
 8003f14:	bd80      	pop	{r7, pc}

08003f16 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003f16:	b580      	push	{r7, lr}
 8003f18:	b088      	sub	sp, #32
 8003f1a:	af02      	add	r7, sp, #8
 8003f1c:	60f8      	str	r0, [r7, #12]
 8003f1e:	60b9      	str	r1, [r7, #8]
 8003f20:	603b      	str	r3, [r7, #0]
 8003f22:	4613      	mov	r3, r2
 8003f24:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003f26:	2300      	movs	r3, #0
 8003f28:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	685b      	ldr	r3, [r3, #4]
 8003f2e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003f32:	d112      	bne.n	8003f5a <HAL_SPI_Receive+0x44>
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	689b      	ldr	r3, [r3, #8]
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d10e      	bne.n	8003f5a <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	2204      	movs	r2, #4
 8003f40:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003f44:	88fa      	ldrh	r2, [r7, #6]
 8003f46:	683b      	ldr	r3, [r7, #0]
 8003f48:	9300      	str	r3, [sp, #0]
 8003f4a:	4613      	mov	r3, r2
 8003f4c:	68ba      	ldr	r2, [r7, #8]
 8003f4e:	68b9      	ldr	r1, [r7, #8]
 8003f50:	68f8      	ldr	r0, [r7, #12]
 8003f52:	f000 f8f1 	bl	8004138 <HAL_SPI_TransmitReceive>
 8003f56:	4603      	mov	r3, r0
 8003f58:	e0ea      	b.n	8004130 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003f60:	2b01      	cmp	r3, #1
 8003f62:	d101      	bne.n	8003f68 <HAL_SPI_Receive+0x52>
 8003f64:	2302      	movs	r3, #2
 8003f66:	e0e3      	b.n	8004130 <HAL_SPI_Receive+0x21a>
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	2201      	movs	r2, #1
 8003f6c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003f70:	f7fd fbae 	bl	80016d0 <HAL_GetTick>
 8003f74:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003f7c:	b2db      	uxtb	r3, r3
 8003f7e:	2b01      	cmp	r3, #1
 8003f80:	d002      	beq.n	8003f88 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8003f82:	2302      	movs	r3, #2
 8003f84:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003f86:	e0ca      	b.n	800411e <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8003f88:	68bb      	ldr	r3, [r7, #8]
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d002      	beq.n	8003f94 <HAL_SPI_Receive+0x7e>
 8003f8e:	88fb      	ldrh	r3, [r7, #6]
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d102      	bne.n	8003f9a <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8003f94:	2301      	movs	r3, #1
 8003f96:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003f98:	e0c1      	b.n	800411e <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	2204      	movs	r2, #4
 8003f9e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	2200      	movs	r2, #0
 8003fa6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	68ba      	ldr	r2, [r7, #8]
 8003fac:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	88fa      	ldrh	r2, [r7, #6]
 8003fb2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	88fa      	ldrh	r2, [r7, #6]
 8003fb8:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	2200      	movs	r2, #0
 8003fbe:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	2200      	movs	r2, #0
 8003fc4:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	2200      	movs	r2, #0
 8003fca:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	2200      	movs	r2, #0
 8003fd0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	2200      	movs	r2, #0
 8003fd6:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	689b      	ldr	r3, [r3, #8]
 8003fdc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003fe0:	d10f      	bne.n	8004002 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	681a      	ldr	r2, [r3, #0]
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003ff0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	681a      	ldr	r2, [r3, #0]
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004000:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800400c:	2b40      	cmp	r3, #64	; 0x40
 800400e:	d007      	beq.n	8004020 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	681a      	ldr	r2, [r3, #0]
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800401e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	68db      	ldr	r3, [r3, #12]
 8004024:	2b00      	cmp	r3, #0
 8004026:	d162      	bne.n	80040ee <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004028:	e02e      	b.n	8004088 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	689b      	ldr	r3, [r3, #8]
 8004030:	f003 0301 	and.w	r3, r3, #1
 8004034:	2b01      	cmp	r3, #1
 8004036:	d115      	bne.n	8004064 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f103 020c 	add.w	r2, r3, #12
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004044:	7812      	ldrb	r2, [r2, #0]
 8004046:	b2d2      	uxtb	r2, r2
 8004048:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800404e:	1c5a      	adds	r2, r3, #1
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004058:	b29b      	uxth	r3, r3
 800405a:	3b01      	subs	r3, #1
 800405c:	b29a      	uxth	r2, r3
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004062:	e011      	b.n	8004088 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004064:	f7fd fb34 	bl	80016d0 <HAL_GetTick>
 8004068:	4602      	mov	r2, r0
 800406a:	693b      	ldr	r3, [r7, #16]
 800406c:	1ad3      	subs	r3, r2, r3
 800406e:	683a      	ldr	r2, [r7, #0]
 8004070:	429a      	cmp	r2, r3
 8004072:	d803      	bhi.n	800407c <HAL_SPI_Receive+0x166>
 8004074:	683b      	ldr	r3, [r7, #0]
 8004076:	f1b3 3fff 	cmp.w	r3, #4294967295
 800407a:	d102      	bne.n	8004082 <HAL_SPI_Receive+0x16c>
 800407c:	683b      	ldr	r3, [r7, #0]
 800407e:	2b00      	cmp	r3, #0
 8004080:	d102      	bne.n	8004088 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8004082:	2303      	movs	r3, #3
 8004084:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004086:	e04a      	b.n	800411e <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800408c:	b29b      	uxth	r3, r3
 800408e:	2b00      	cmp	r3, #0
 8004090:	d1cb      	bne.n	800402a <HAL_SPI_Receive+0x114>
 8004092:	e031      	b.n	80040f8 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	689b      	ldr	r3, [r3, #8]
 800409a:	f003 0301 	and.w	r3, r3, #1
 800409e:	2b01      	cmp	r3, #1
 80040a0:	d113      	bne.n	80040ca <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	68da      	ldr	r2, [r3, #12]
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040ac:	b292      	uxth	r2, r2
 80040ae:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040b4:	1c9a      	adds	r2, r3, #2
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80040be:	b29b      	uxth	r3, r3
 80040c0:	3b01      	subs	r3, #1
 80040c2:	b29a      	uxth	r2, r3
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	87da      	strh	r2, [r3, #62]	; 0x3e
 80040c8:	e011      	b.n	80040ee <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80040ca:	f7fd fb01 	bl	80016d0 <HAL_GetTick>
 80040ce:	4602      	mov	r2, r0
 80040d0:	693b      	ldr	r3, [r7, #16]
 80040d2:	1ad3      	subs	r3, r2, r3
 80040d4:	683a      	ldr	r2, [r7, #0]
 80040d6:	429a      	cmp	r2, r3
 80040d8:	d803      	bhi.n	80040e2 <HAL_SPI_Receive+0x1cc>
 80040da:	683b      	ldr	r3, [r7, #0]
 80040dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040e0:	d102      	bne.n	80040e8 <HAL_SPI_Receive+0x1d2>
 80040e2:	683b      	ldr	r3, [r7, #0]
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d102      	bne.n	80040ee <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 80040e8:	2303      	movs	r3, #3
 80040ea:	75fb      	strb	r3, [r7, #23]
          goto error;
 80040ec:	e017      	b.n	800411e <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80040f2:	b29b      	uxth	r3, r3
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d1cd      	bne.n	8004094 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80040f8:	693a      	ldr	r2, [r7, #16]
 80040fa:	6839      	ldr	r1, [r7, #0]
 80040fc:	68f8      	ldr	r0, [r7, #12]
 80040fe:	f000 fa53 	bl	80045a8 <SPI_EndRxTransaction>
 8004102:	4603      	mov	r3, r0
 8004104:	2b00      	cmp	r3, #0
 8004106:	d002      	beq.n	800410e <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	2220      	movs	r2, #32
 800410c:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004112:	2b00      	cmp	r3, #0
 8004114:	d002      	beq.n	800411c <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8004116:	2301      	movs	r3, #1
 8004118:	75fb      	strb	r3, [r7, #23]
 800411a:	e000      	b.n	800411e <HAL_SPI_Receive+0x208>
  }

error :
 800411c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	2201      	movs	r2, #1
 8004122:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	2200      	movs	r2, #0
 800412a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800412e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004130:	4618      	mov	r0, r3
 8004132:	3718      	adds	r7, #24
 8004134:	46bd      	mov	sp, r7
 8004136:	bd80      	pop	{r7, pc}

08004138 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004138:	b580      	push	{r7, lr}
 800413a:	b08c      	sub	sp, #48	; 0x30
 800413c:	af00      	add	r7, sp, #0
 800413e:	60f8      	str	r0, [r7, #12]
 8004140:	60b9      	str	r1, [r7, #8]
 8004142:	607a      	str	r2, [r7, #4]
 8004144:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004146:	2301      	movs	r3, #1
 8004148:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800414a:	2300      	movs	r3, #0
 800414c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004156:	2b01      	cmp	r3, #1
 8004158:	d101      	bne.n	800415e <HAL_SPI_TransmitReceive+0x26>
 800415a:	2302      	movs	r3, #2
 800415c:	e18a      	b.n	8004474 <HAL_SPI_TransmitReceive+0x33c>
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	2201      	movs	r2, #1
 8004162:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004166:	f7fd fab3 	bl	80016d0 <HAL_GetTick>
 800416a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004172:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	685b      	ldr	r3, [r3, #4]
 800417a:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800417c:	887b      	ldrh	r3, [r7, #2]
 800417e:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004180:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004184:	2b01      	cmp	r3, #1
 8004186:	d00f      	beq.n	80041a8 <HAL_SPI_TransmitReceive+0x70>
 8004188:	69fb      	ldr	r3, [r7, #28]
 800418a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800418e:	d107      	bne.n	80041a0 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	689b      	ldr	r3, [r3, #8]
 8004194:	2b00      	cmp	r3, #0
 8004196:	d103      	bne.n	80041a0 <HAL_SPI_TransmitReceive+0x68>
 8004198:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800419c:	2b04      	cmp	r3, #4
 800419e:	d003      	beq.n	80041a8 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80041a0:	2302      	movs	r3, #2
 80041a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80041a6:	e15b      	b.n	8004460 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80041a8:	68bb      	ldr	r3, [r7, #8]
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d005      	beq.n	80041ba <HAL_SPI_TransmitReceive+0x82>
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d002      	beq.n	80041ba <HAL_SPI_TransmitReceive+0x82>
 80041b4:	887b      	ldrh	r3, [r7, #2]
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d103      	bne.n	80041c2 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80041ba:	2301      	movs	r3, #1
 80041bc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80041c0:	e14e      	b.n	8004460 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80041c8:	b2db      	uxtb	r3, r3
 80041ca:	2b04      	cmp	r3, #4
 80041cc:	d003      	beq.n	80041d6 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	2205      	movs	r2, #5
 80041d2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	2200      	movs	r2, #0
 80041da:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	687a      	ldr	r2, [r7, #4]
 80041e0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	887a      	ldrh	r2, [r7, #2]
 80041e6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	887a      	ldrh	r2, [r7, #2]
 80041ec:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	68ba      	ldr	r2, [r7, #8]
 80041f2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	887a      	ldrh	r2, [r7, #2]
 80041f8:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	887a      	ldrh	r2, [r7, #2]
 80041fe:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	2200      	movs	r2, #0
 8004204:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	2200      	movs	r2, #0
 800420a:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004216:	2b40      	cmp	r3, #64	; 0x40
 8004218:	d007      	beq.n	800422a <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	681a      	ldr	r2, [r3, #0]
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004228:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	68db      	ldr	r3, [r3, #12]
 800422e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004232:	d178      	bne.n	8004326 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	685b      	ldr	r3, [r3, #4]
 8004238:	2b00      	cmp	r3, #0
 800423a:	d002      	beq.n	8004242 <HAL_SPI_TransmitReceive+0x10a>
 800423c:	8b7b      	ldrh	r3, [r7, #26]
 800423e:	2b01      	cmp	r3, #1
 8004240:	d166      	bne.n	8004310 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004246:	881a      	ldrh	r2, [r3, #0]
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004252:	1c9a      	adds	r2, r3, #2
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800425c:	b29b      	uxth	r3, r3
 800425e:	3b01      	subs	r3, #1
 8004260:	b29a      	uxth	r2, r3
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004266:	e053      	b.n	8004310 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	689b      	ldr	r3, [r3, #8]
 800426e:	f003 0302 	and.w	r3, r3, #2
 8004272:	2b02      	cmp	r3, #2
 8004274:	d11b      	bne.n	80042ae <HAL_SPI_TransmitReceive+0x176>
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800427a:	b29b      	uxth	r3, r3
 800427c:	2b00      	cmp	r3, #0
 800427e:	d016      	beq.n	80042ae <HAL_SPI_TransmitReceive+0x176>
 8004280:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004282:	2b01      	cmp	r3, #1
 8004284:	d113      	bne.n	80042ae <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800428a:	881a      	ldrh	r2, [r3, #0]
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004296:	1c9a      	adds	r2, r3, #2
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80042a0:	b29b      	uxth	r3, r3
 80042a2:	3b01      	subs	r3, #1
 80042a4:	b29a      	uxth	r2, r3
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80042aa:	2300      	movs	r3, #0
 80042ac:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	689b      	ldr	r3, [r3, #8]
 80042b4:	f003 0301 	and.w	r3, r3, #1
 80042b8:	2b01      	cmp	r3, #1
 80042ba:	d119      	bne.n	80042f0 <HAL_SPI_TransmitReceive+0x1b8>
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80042c0:	b29b      	uxth	r3, r3
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d014      	beq.n	80042f0 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	68da      	ldr	r2, [r3, #12]
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042d0:	b292      	uxth	r2, r2
 80042d2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042d8:	1c9a      	adds	r2, r3, #2
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80042e2:	b29b      	uxth	r3, r3
 80042e4:	3b01      	subs	r3, #1
 80042e6:	b29a      	uxth	r2, r3
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80042ec:	2301      	movs	r3, #1
 80042ee:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80042f0:	f7fd f9ee 	bl	80016d0 <HAL_GetTick>
 80042f4:	4602      	mov	r2, r0
 80042f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042f8:	1ad3      	subs	r3, r2, r3
 80042fa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80042fc:	429a      	cmp	r2, r3
 80042fe:	d807      	bhi.n	8004310 <HAL_SPI_TransmitReceive+0x1d8>
 8004300:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004302:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004306:	d003      	beq.n	8004310 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8004308:	2303      	movs	r3, #3
 800430a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800430e:	e0a7      	b.n	8004460 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004314:	b29b      	uxth	r3, r3
 8004316:	2b00      	cmp	r3, #0
 8004318:	d1a6      	bne.n	8004268 <HAL_SPI_TransmitReceive+0x130>
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800431e:	b29b      	uxth	r3, r3
 8004320:	2b00      	cmp	r3, #0
 8004322:	d1a1      	bne.n	8004268 <HAL_SPI_TransmitReceive+0x130>
 8004324:	e07c      	b.n	8004420 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	685b      	ldr	r3, [r3, #4]
 800432a:	2b00      	cmp	r3, #0
 800432c:	d002      	beq.n	8004334 <HAL_SPI_TransmitReceive+0x1fc>
 800432e:	8b7b      	ldrh	r3, [r7, #26]
 8004330:	2b01      	cmp	r3, #1
 8004332:	d16b      	bne.n	800440c <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	330c      	adds	r3, #12
 800433e:	7812      	ldrb	r2, [r2, #0]
 8004340:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004346:	1c5a      	adds	r2, r3, #1
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004350:	b29b      	uxth	r3, r3
 8004352:	3b01      	subs	r3, #1
 8004354:	b29a      	uxth	r2, r3
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800435a:	e057      	b.n	800440c <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	689b      	ldr	r3, [r3, #8]
 8004362:	f003 0302 	and.w	r3, r3, #2
 8004366:	2b02      	cmp	r3, #2
 8004368:	d11c      	bne.n	80043a4 <HAL_SPI_TransmitReceive+0x26c>
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800436e:	b29b      	uxth	r3, r3
 8004370:	2b00      	cmp	r3, #0
 8004372:	d017      	beq.n	80043a4 <HAL_SPI_TransmitReceive+0x26c>
 8004374:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004376:	2b01      	cmp	r3, #1
 8004378:	d114      	bne.n	80043a4 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	330c      	adds	r3, #12
 8004384:	7812      	ldrb	r2, [r2, #0]
 8004386:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800438c:	1c5a      	adds	r2, r3, #1
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004396:	b29b      	uxth	r3, r3
 8004398:	3b01      	subs	r3, #1
 800439a:	b29a      	uxth	r2, r3
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80043a0:	2300      	movs	r3, #0
 80043a2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	689b      	ldr	r3, [r3, #8]
 80043aa:	f003 0301 	and.w	r3, r3, #1
 80043ae:	2b01      	cmp	r3, #1
 80043b0:	d119      	bne.n	80043e6 <HAL_SPI_TransmitReceive+0x2ae>
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80043b6:	b29b      	uxth	r3, r3
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d014      	beq.n	80043e6 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	68da      	ldr	r2, [r3, #12]
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043c6:	b2d2      	uxtb	r2, r2
 80043c8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043ce:	1c5a      	adds	r2, r3, #1
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80043d8:	b29b      	uxth	r3, r3
 80043da:	3b01      	subs	r3, #1
 80043dc:	b29a      	uxth	r2, r3
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80043e2:	2301      	movs	r3, #1
 80043e4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80043e6:	f7fd f973 	bl	80016d0 <HAL_GetTick>
 80043ea:	4602      	mov	r2, r0
 80043ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043ee:	1ad3      	subs	r3, r2, r3
 80043f0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80043f2:	429a      	cmp	r2, r3
 80043f4:	d803      	bhi.n	80043fe <HAL_SPI_TransmitReceive+0x2c6>
 80043f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043fc:	d102      	bne.n	8004404 <HAL_SPI_TransmitReceive+0x2cc>
 80043fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004400:	2b00      	cmp	r3, #0
 8004402:	d103      	bne.n	800440c <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8004404:	2303      	movs	r3, #3
 8004406:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800440a:	e029      	b.n	8004460 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004410:	b29b      	uxth	r3, r3
 8004412:	2b00      	cmp	r3, #0
 8004414:	d1a2      	bne.n	800435c <HAL_SPI_TransmitReceive+0x224>
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800441a:	b29b      	uxth	r3, r3
 800441c:	2b00      	cmp	r3, #0
 800441e:	d19d      	bne.n	800435c <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004420:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004422:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004424:	68f8      	ldr	r0, [r7, #12]
 8004426:	f000 f925 	bl	8004674 <SPI_EndRxTxTransaction>
 800442a:	4603      	mov	r3, r0
 800442c:	2b00      	cmp	r3, #0
 800442e:	d006      	beq.n	800443e <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8004430:	2301      	movs	r3, #1
 8004432:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	2220      	movs	r2, #32
 800443a:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800443c:	e010      	b.n	8004460 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	689b      	ldr	r3, [r3, #8]
 8004442:	2b00      	cmp	r3, #0
 8004444:	d10b      	bne.n	800445e <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004446:	2300      	movs	r3, #0
 8004448:	617b      	str	r3, [r7, #20]
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	68db      	ldr	r3, [r3, #12]
 8004450:	617b      	str	r3, [r7, #20]
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	689b      	ldr	r3, [r3, #8]
 8004458:	617b      	str	r3, [r7, #20]
 800445a:	697b      	ldr	r3, [r7, #20]
 800445c:	e000      	b.n	8004460 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800445e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	2201      	movs	r2, #1
 8004464:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	2200      	movs	r2, #0
 800446c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004470:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8004474:	4618      	mov	r0, r3
 8004476:	3730      	adds	r7, #48	; 0x30
 8004478:	46bd      	mov	sp, r7
 800447a:	bd80      	pop	{r7, pc}

0800447c <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 800447c:	b480      	push	{r7}
 800447e:	b083      	sub	sp, #12
 8004480:	af00      	add	r7, sp, #0
 8004482:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800448a:	b2db      	uxtb	r3, r3
}
 800448c:	4618      	mov	r0, r3
 800448e:	370c      	adds	r7, #12
 8004490:	46bd      	mov	sp, r7
 8004492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004496:	4770      	bx	lr

08004498 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004498:	b580      	push	{r7, lr}
 800449a:	b088      	sub	sp, #32
 800449c:	af00      	add	r7, sp, #0
 800449e:	60f8      	str	r0, [r7, #12]
 80044a0:	60b9      	str	r1, [r7, #8]
 80044a2:	603b      	str	r3, [r7, #0]
 80044a4:	4613      	mov	r3, r2
 80044a6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80044a8:	f7fd f912 	bl	80016d0 <HAL_GetTick>
 80044ac:	4602      	mov	r2, r0
 80044ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044b0:	1a9b      	subs	r3, r3, r2
 80044b2:	683a      	ldr	r2, [r7, #0]
 80044b4:	4413      	add	r3, r2
 80044b6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80044b8:	f7fd f90a 	bl	80016d0 <HAL_GetTick>
 80044bc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80044be:	4b39      	ldr	r3, [pc, #228]	; (80045a4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	015b      	lsls	r3, r3, #5
 80044c4:	0d1b      	lsrs	r3, r3, #20
 80044c6:	69fa      	ldr	r2, [r7, #28]
 80044c8:	fb02 f303 	mul.w	r3, r2, r3
 80044cc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80044ce:	e054      	b.n	800457a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80044d0:	683b      	ldr	r3, [r7, #0]
 80044d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044d6:	d050      	beq.n	800457a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80044d8:	f7fd f8fa 	bl	80016d0 <HAL_GetTick>
 80044dc:	4602      	mov	r2, r0
 80044de:	69bb      	ldr	r3, [r7, #24]
 80044e0:	1ad3      	subs	r3, r2, r3
 80044e2:	69fa      	ldr	r2, [r7, #28]
 80044e4:	429a      	cmp	r2, r3
 80044e6:	d902      	bls.n	80044ee <SPI_WaitFlagStateUntilTimeout+0x56>
 80044e8:	69fb      	ldr	r3, [r7, #28]
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d13d      	bne.n	800456a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	685a      	ldr	r2, [r3, #4]
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80044fc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	685b      	ldr	r3, [r3, #4]
 8004502:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004506:	d111      	bne.n	800452c <SPI_WaitFlagStateUntilTimeout+0x94>
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	689b      	ldr	r3, [r3, #8]
 800450c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004510:	d004      	beq.n	800451c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	689b      	ldr	r3, [r3, #8]
 8004516:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800451a:	d107      	bne.n	800452c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	681a      	ldr	r2, [r3, #0]
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800452a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004530:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004534:	d10f      	bne.n	8004556 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	681a      	ldr	r2, [r3, #0]
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004544:	601a      	str	r2, [r3, #0]
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	681a      	ldr	r2, [r3, #0]
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004554:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	2201      	movs	r2, #1
 800455a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	2200      	movs	r2, #0
 8004562:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8004566:	2303      	movs	r3, #3
 8004568:	e017      	b.n	800459a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800456a:	697b      	ldr	r3, [r7, #20]
 800456c:	2b00      	cmp	r3, #0
 800456e:	d101      	bne.n	8004574 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004570:	2300      	movs	r3, #0
 8004572:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004574:	697b      	ldr	r3, [r7, #20]
 8004576:	3b01      	subs	r3, #1
 8004578:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	689a      	ldr	r2, [r3, #8]
 8004580:	68bb      	ldr	r3, [r7, #8]
 8004582:	4013      	ands	r3, r2
 8004584:	68ba      	ldr	r2, [r7, #8]
 8004586:	429a      	cmp	r2, r3
 8004588:	bf0c      	ite	eq
 800458a:	2301      	moveq	r3, #1
 800458c:	2300      	movne	r3, #0
 800458e:	b2db      	uxtb	r3, r3
 8004590:	461a      	mov	r2, r3
 8004592:	79fb      	ldrb	r3, [r7, #7]
 8004594:	429a      	cmp	r2, r3
 8004596:	d19b      	bne.n	80044d0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004598:	2300      	movs	r3, #0
}
 800459a:	4618      	mov	r0, r3
 800459c:	3720      	adds	r7, #32
 800459e:	46bd      	mov	sp, r7
 80045a0:	bd80      	pop	{r7, pc}
 80045a2:	bf00      	nop
 80045a4:	20000008 	.word	0x20000008

080045a8 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80045a8:	b580      	push	{r7, lr}
 80045aa:	b086      	sub	sp, #24
 80045ac:	af02      	add	r7, sp, #8
 80045ae:	60f8      	str	r0, [r7, #12]
 80045b0:	60b9      	str	r1, [r7, #8]
 80045b2:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	685b      	ldr	r3, [r3, #4]
 80045b8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80045bc:	d111      	bne.n	80045e2 <SPI_EndRxTransaction+0x3a>
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	689b      	ldr	r3, [r3, #8]
 80045c2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80045c6:	d004      	beq.n	80045d2 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	689b      	ldr	r3, [r3, #8]
 80045cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80045d0:	d107      	bne.n	80045e2 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	681a      	ldr	r2, [r3, #0]
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80045e0:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	685b      	ldr	r3, [r3, #4]
 80045e6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80045ea:	d12a      	bne.n	8004642 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	689b      	ldr	r3, [r3, #8]
 80045f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80045f4:	d012      	beq.n	800461c <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	9300      	str	r3, [sp, #0]
 80045fa:	68bb      	ldr	r3, [r7, #8]
 80045fc:	2200      	movs	r2, #0
 80045fe:	2180      	movs	r1, #128	; 0x80
 8004600:	68f8      	ldr	r0, [r7, #12]
 8004602:	f7ff ff49 	bl	8004498 <SPI_WaitFlagStateUntilTimeout>
 8004606:	4603      	mov	r3, r0
 8004608:	2b00      	cmp	r3, #0
 800460a:	d02d      	beq.n	8004668 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004610:	f043 0220 	orr.w	r2, r3, #32
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8004618:	2303      	movs	r3, #3
 800461a:	e026      	b.n	800466a <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	9300      	str	r3, [sp, #0]
 8004620:	68bb      	ldr	r3, [r7, #8]
 8004622:	2200      	movs	r2, #0
 8004624:	2101      	movs	r1, #1
 8004626:	68f8      	ldr	r0, [r7, #12]
 8004628:	f7ff ff36 	bl	8004498 <SPI_WaitFlagStateUntilTimeout>
 800462c:	4603      	mov	r3, r0
 800462e:	2b00      	cmp	r3, #0
 8004630:	d01a      	beq.n	8004668 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004636:	f043 0220 	orr.w	r2, r3, #32
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800463e:	2303      	movs	r3, #3
 8004640:	e013      	b.n	800466a <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	9300      	str	r3, [sp, #0]
 8004646:	68bb      	ldr	r3, [r7, #8]
 8004648:	2200      	movs	r2, #0
 800464a:	2101      	movs	r1, #1
 800464c:	68f8      	ldr	r0, [r7, #12]
 800464e:	f7ff ff23 	bl	8004498 <SPI_WaitFlagStateUntilTimeout>
 8004652:	4603      	mov	r3, r0
 8004654:	2b00      	cmp	r3, #0
 8004656:	d007      	beq.n	8004668 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800465c:	f043 0220 	orr.w	r2, r3, #32
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004664:	2303      	movs	r3, #3
 8004666:	e000      	b.n	800466a <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8004668:	2300      	movs	r3, #0
}
 800466a:	4618      	mov	r0, r3
 800466c:	3710      	adds	r7, #16
 800466e:	46bd      	mov	sp, r7
 8004670:	bd80      	pop	{r7, pc}
	...

08004674 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004674:	b580      	push	{r7, lr}
 8004676:	b088      	sub	sp, #32
 8004678:	af02      	add	r7, sp, #8
 800467a:	60f8      	str	r0, [r7, #12]
 800467c:	60b9      	str	r1, [r7, #8]
 800467e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004680:	4b1b      	ldr	r3, [pc, #108]	; (80046f0 <SPI_EndRxTxTransaction+0x7c>)
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	4a1b      	ldr	r2, [pc, #108]	; (80046f4 <SPI_EndRxTxTransaction+0x80>)
 8004686:	fba2 2303 	umull	r2, r3, r2, r3
 800468a:	0d5b      	lsrs	r3, r3, #21
 800468c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004690:	fb02 f303 	mul.w	r3, r2, r3
 8004694:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	685b      	ldr	r3, [r3, #4]
 800469a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800469e:	d112      	bne.n	80046c6 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	9300      	str	r3, [sp, #0]
 80046a4:	68bb      	ldr	r3, [r7, #8]
 80046a6:	2200      	movs	r2, #0
 80046a8:	2180      	movs	r1, #128	; 0x80
 80046aa:	68f8      	ldr	r0, [r7, #12]
 80046ac:	f7ff fef4 	bl	8004498 <SPI_WaitFlagStateUntilTimeout>
 80046b0:	4603      	mov	r3, r0
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d016      	beq.n	80046e4 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046ba:	f043 0220 	orr.w	r2, r3, #32
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80046c2:	2303      	movs	r3, #3
 80046c4:	e00f      	b.n	80046e6 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80046c6:	697b      	ldr	r3, [r7, #20]
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d00a      	beq.n	80046e2 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80046cc:	697b      	ldr	r3, [r7, #20]
 80046ce:	3b01      	subs	r3, #1
 80046d0:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	689b      	ldr	r3, [r3, #8]
 80046d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046dc:	2b80      	cmp	r3, #128	; 0x80
 80046de:	d0f2      	beq.n	80046c6 <SPI_EndRxTxTransaction+0x52>
 80046e0:	e000      	b.n	80046e4 <SPI_EndRxTxTransaction+0x70>
        break;
 80046e2:	bf00      	nop
  }

  return HAL_OK;
 80046e4:	2300      	movs	r3, #0
}
 80046e6:	4618      	mov	r0, r3
 80046e8:	3718      	adds	r7, #24
 80046ea:	46bd      	mov	sp, r7
 80046ec:	bd80      	pop	{r7, pc}
 80046ee:	bf00      	nop
 80046f0:	20000008 	.word	0x20000008
 80046f4:	165e9f81 	.word	0x165e9f81

080046f8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80046f8:	b580      	push	{r7, lr}
 80046fa:	b082      	sub	sp, #8
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	2b00      	cmp	r3, #0
 8004704:	d101      	bne.n	800470a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004706:	2301      	movs	r3, #1
 8004708:	e03f      	b.n	800478a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004710:	b2db      	uxtb	r3, r3
 8004712:	2b00      	cmp	r3, #0
 8004714:	d106      	bne.n	8004724 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	2200      	movs	r2, #0
 800471a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800471e:	6878      	ldr	r0, [r7, #4]
 8004720:	f7fc fe2a 	bl	8001378 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	2224      	movs	r2, #36	; 0x24
 8004728:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	68da      	ldr	r2, [r3, #12]
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800473a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800473c:	6878      	ldr	r0, [r7, #4]
 800473e:	f000 fe81 	bl	8005444 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	691a      	ldr	r2, [r3, #16]
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004750:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	695a      	ldr	r2, [r3, #20]
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004760:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	68da      	ldr	r2, [r3, #12]
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004770:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	2200      	movs	r2, #0
 8004776:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	2220      	movs	r2, #32
 800477c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	2220      	movs	r2, #32
 8004784:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004788:	2300      	movs	r3, #0
}
 800478a:	4618      	mov	r0, r3
 800478c:	3708      	adds	r7, #8
 800478e:	46bd      	mov	sp, r7
 8004790:	bd80      	pop	{r7, pc}

08004792 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004792:	b580      	push	{r7, lr}
 8004794:	b08a      	sub	sp, #40	; 0x28
 8004796:	af02      	add	r7, sp, #8
 8004798:	60f8      	str	r0, [r7, #12]
 800479a:	60b9      	str	r1, [r7, #8]
 800479c:	603b      	str	r3, [r7, #0]
 800479e:	4613      	mov	r3, r2
 80047a0:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80047a2:	2300      	movs	r3, #0
 80047a4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047ac:	b2db      	uxtb	r3, r3
 80047ae:	2b20      	cmp	r3, #32
 80047b0:	d17c      	bne.n	80048ac <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80047b2:	68bb      	ldr	r3, [r7, #8]
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d002      	beq.n	80047be <HAL_UART_Transmit+0x2c>
 80047b8:	88fb      	ldrh	r3, [r7, #6]
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d101      	bne.n	80047c2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80047be:	2301      	movs	r3, #1
 80047c0:	e075      	b.n	80048ae <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80047c8:	2b01      	cmp	r3, #1
 80047ca:	d101      	bne.n	80047d0 <HAL_UART_Transmit+0x3e>
 80047cc:	2302      	movs	r3, #2
 80047ce:	e06e      	b.n	80048ae <HAL_UART_Transmit+0x11c>
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	2201      	movs	r2, #1
 80047d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	2200      	movs	r2, #0
 80047dc:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	2221      	movs	r2, #33	; 0x21
 80047e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80047e6:	f7fc ff73 	bl	80016d0 <HAL_GetTick>
 80047ea:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	88fa      	ldrh	r2, [r7, #6]
 80047f0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	88fa      	ldrh	r2, [r7, #6]
 80047f6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	689b      	ldr	r3, [r3, #8]
 80047fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004800:	d108      	bne.n	8004814 <HAL_UART_Transmit+0x82>
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	691b      	ldr	r3, [r3, #16]
 8004806:	2b00      	cmp	r3, #0
 8004808:	d104      	bne.n	8004814 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800480a:	2300      	movs	r3, #0
 800480c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800480e:	68bb      	ldr	r3, [r7, #8]
 8004810:	61bb      	str	r3, [r7, #24]
 8004812:	e003      	b.n	800481c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004814:	68bb      	ldr	r3, [r7, #8]
 8004816:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004818:	2300      	movs	r3, #0
 800481a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	2200      	movs	r2, #0
 8004820:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004824:	e02a      	b.n	800487c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004826:	683b      	ldr	r3, [r7, #0]
 8004828:	9300      	str	r3, [sp, #0]
 800482a:	697b      	ldr	r3, [r7, #20]
 800482c:	2200      	movs	r2, #0
 800482e:	2180      	movs	r1, #128	; 0x80
 8004830:	68f8      	ldr	r0, [r7, #12]
 8004832:	f000 fbc1 	bl	8004fb8 <UART_WaitOnFlagUntilTimeout>
 8004836:	4603      	mov	r3, r0
 8004838:	2b00      	cmp	r3, #0
 800483a:	d001      	beq.n	8004840 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800483c:	2303      	movs	r3, #3
 800483e:	e036      	b.n	80048ae <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004840:	69fb      	ldr	r3, [r7, #28]
 8004842:	2b00      	cmp	r3, #0
 8004844:	d10b      	bne.n	800485e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004846:	69bb      	ldr	r3, [r7, #24]
 8004848:	881b      	ldrh	r3, [r3, #0]
 800484a:	461a      	mov	r2, r3
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004854:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004856:	69bb      	ldr	r3, [r7, #24]
 8004858:	3302      	adds	r3, #2
 800485a:	61bb      	str	r3, [r7, #24]
 800485c:	e007      	b.n	800486e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800485e:	69fb      	ldr	r3, [r7, #28]
 8004860:	781a      	ldrb	r2, [r3, #0]
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004868:	69fb      	ldr	r3, [r7, #28]
 800486a:	3301      	adds	r3, #1
 800486c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004872:	b29b      	uxth	r3, r3
 8004874:	3b01      	subs	r3, #1
 8004876:	b29a      	uxth	r2, r3
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004880:	b29b      	uxth	r3, r3
 8004882:	2b00      	cmp	r3, #0
 8004884:	d1cf      	bne.n	8004826 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004886:	683b      	ldr	r3, [r7, #0]
 8004888:	9300      	str	r3, [sp, #0]
 800488a:	697b      	ldr	r3, [r7, #20]
 800488c:	2200      	movs	r2, #0
 800488e:	2140      	movs	r1, #64	; 0x40
 8004890:	68f8      	ldr	r0, [r7, #12]
 8004892:	f000 fb91 	bl	8004fb8 <UART_WaitOnFlagUntilTimeout>
 8004896:	4603      	mov	r3, r0
 8004898:	2b00      	cmp	r3, #0
 800489a:	d001      	beq.n	80048a0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800489c:	2303      	movs	r3, #3
 800489e:	e006      	b.n	80048ae <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	2220      	movs	r2, #32
 80048a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80048a8:	2300      	movs	r3, #0
 80048aa:	e000      	b.n	80048ae <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80048ac:	2302      	movs	r3, #2
  }
}
 80048ae:	4618      	mov	r0, r3
 80048b0:	3720      	adds	r7, #32
 80048b2:	46bd      	mov	sp, r7
 80048b4:	bd80      	pop	{r7, pc}

080048b6 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80048b6:	b580      	push	{r7, lr}
 80048b8:	b08a      	sub	sp, #40	; 0x28
 80048ba:	af02      	add	r7, sp, #8
 80048bc:	60f8      	str	r0, [r7, #12]
 80048be:	60b9      	str	r1, [r7, #8]
 80048c0:	603b      	str	r3, [r7, #0]
 80048c2:	4613      	mov	r3, r2
 80048c4:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80048c6:	2300      	movs	r3, #0
 80048c8:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80048d0:	b2db      	uxtb	r3, r3
 80048d2:	2b20      	cmp	r3, #32
 80048d4:	f040 808c 	bne.w	80049f0 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 80048d8:	68bb      	ldr	r3, [r7, #8]
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d002      	beq.n	80048e4 <HAL_UART_Receive+0x2e>
 80048de:	88fb      	ldrh	r3, [r7, #6]
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d101      	bne.n	80048e8 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80048e4:	2301      	movs	r3, #1
 80048e6:	e084      	b.n	80049f2 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80048ee:	2b01      	cmp	r3, #1
 80048f0:	d101      	bne.n	80048f6 <HAL_UART_Receive+0x40>
 80048f2:	2302      	movs	r3, #2
 80048f4:	e07d      	b.n	80049f2 <HAL_UART_Receive+0x13c>
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	2201      	movs	r2, #1
 80048fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	2200      	movs	r2, #0
 8004902:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	2222      	movs	r2, #34	; 0x22
 8004908:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	2200      	movs	r2, #0
 8004910:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004912:	f7fc fedd 	bl	80016d0 <HAL_GetTick>
 8004916:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	88fa      	ldrh	r2, [r7, #6]
 800491c:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	88fa      	ldrh	r2, [r7, #6]
 8004922:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	689b      	ldr	r3, [r3, #8]
 8004928:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800492c:	d108      	bne.n	8004940 <HAL_UART_Receive+0x8a>
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	691b      	ldr	r3, [r3, #16]
 8004932:	2b00      	cmp	r3, #0
 8004934:	d104      	bne.n	8004940 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8004936:	2300      	movs	r3, #0
 8004938:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800493a:	68bb      	ldr	r3, [r7, #8]
 800493c:	61bb      	str	r3, [r7, #24]
 800493e:	e003      	b.n	8004948 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8004940:	68bb      	ldr	r3, [r7, #8]
 8004942:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004944:	2300      	movs	r3, #0
 8004946:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	2200      	movs	r2, #0
 800494c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8004950:	e043      	b.n	80049da <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8004952:	683b      	ldr	r3, [r7, #0]
 8004954:	9300      	str	r3, [sp, #0]
 8004956:	697b      	ldr	r3, [r7, #20]
 8004958:	2200      	movs	r2, #0
 800495a:	2120      	movs	r1, #32
 800495c:	68f8      	ldr	r0, [r7, #12]
 800495e:	f000 fb2b 	bl	8004fb8 <UART_WaitOnFlagUntilTimeout>
 8004962:	4603      	mov	r3, r0
 8004964:	2b00      	cmp	r3, #0
 8004966:	d001      	beq.n	800496c <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8004968:	2303      	movs	r3, #3
 800496a:	e042      	b.n	80049f2 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 800496c:	69fb      	ldr	r3, [r7, #28]
 800496e:	2b00      	cmp	r3, #0
 8004970:	d10c      	bne.n	800498c <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	685b      	ldr	r3, [r3, #4]
 8004978:	b29b      	uxth	r3, r3
 800497a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800497e:	b29a      	uxth	r2, r3
 8004980:	69bb      	ldr	r3, [r7, #24]
 8004982:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8004984:	69bb      	ldr	r3, [r7, #24]
 8004986:	3302      	adds	r3, #2
 8004988:	61bb      	str	r3, [r7, #24]
 800498a:	e01f      	b.n	80049cc <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	689b      	ldr	r3, [r3, #8]
 8004990:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004994:	d007      	beq.n	80049a6 <HAL_UART_Receive+0xf0>
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	689b      	ldr	r3, [r3, #8]
 800499a:	2b00      	cmp	r3, #0
 800499c:	d10a      	bne.n	80049b4 <HAL_UART_Receive+0xfe>
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	691b      	ldr	r3, [r3, #16]
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d106      	bne.n	80049b4 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	685b      	ldr	r3, [r3, #4]
 80049ac:	b2da      	uxtb	r2, r3
 80049ae:	69fb      	ldr	r3, [r7, #28]
 80049b0:	701a      	strb	r2, [r3, #0]
 80049b2:	e008      	b.n	80049c6 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	685b      	ldr	r3, [r3, #4]
 80049ba:	b2db      	uxtb	r3, r3
 80049bc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80049c0:	b2da      	uxtb	r2, r3
 80049c2:	69fb      	ldr	r3, [r7, #28]
 80049c4:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 80049c6:	69fb      	ldr	r3, [r7, #28]
 80049c8:	3301      	adds	r3, #1
 80049ca:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80049d0:	b29b      	uxth	r3, r3
 80049d2:	3b01      	subs	r3, #1
 80049d4:	b29a      	uxth	r2, r3
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80049de:	b29b      	uxth	r3, r3
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d1b6      	bne.n	8004952 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	2220      	movs	r2, #32
 80049e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 80049ec:	2300      	movs	r3, #0
 80049ee:	e000      	b.n	80049f2 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 80049f0:	2302      	movs	r3, #2
  }
}
 80049f2:	4618      	mov	r0, r3
 80049f4:	3720      	adds	r7, #32
 80049f6:	46bd      	mov	sp, r7
 80049f8:	bd80      	pop	{r7, pc}

080049fa <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80049fa:	b580      	push	{r7, lr}
 80049fc:	b084      	sub	sp, #16
 80049fe:	af00      	add	r7, sp, #0
 8004a00:	60f8      	str	r0, [r7, #12]
 8004a02:	60b9      	str	r1, [r7, #8]
 8004a04:	4613      	mov	r3, r2
 8004a06:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004a0e:	b2db      	uxtb	r3, r3
 8004a10:	2b20      	cmp	r3, #32
 8004a12:	d11d      	bne.n	8004a50 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8004a14:	68bb      	ldr	r3, [r7, #8]
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d002      	beq.n	8004a20 <HAL_UART_Receive_IT+0x26>
 8004a1a:	88fb      	ldrh	r3, [r7, #6]
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d101      	bne.n	8004a24 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004a20:	2301      	movs	r3, #1
 8004a22:	e016      	b.n	8004a52 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a2a:	2b01      	cmp	r3, #1
 8004a2c:	d101      	bne.n	8004a32 <HAL_UART_Receive_IT+0x38>
 8004a2e:	2302      	movs	r3, #2
 8004a30:	e00f      	b.n	8004a52 <HAL_UART_Receive_IT+0x58>
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	2201      	movs	r2, #1
 8004a36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	2200      	movs	r2, #0
 8004a3e:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004a40:	88fb      	ldrh	r3, [r7, #6]
 8004a42:	461a      	mov	r2, r3
 8004a44:	68b9      	ldr	r1, [r7, #8]
 8004a46:	68f8      	ldr	r0, [r7, #12]
 8004a48:	f000 fb24 	bl	8005094 <UART_Start_Receive_IT>
 8004a4c:	4603      	mov	r3, r0
 8004a4e:	e000      	b.n	8004a52 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8004a50:	2302      	movs	r3, #2
  }
}
 8004a52:	4618      	mov	r0, r3
 8004a54:	3710      	adds	r7, #16
 8004a56:	46bd      	mov	sp, r7
 8004a58:	bd80      	pop	{r7, pc}
	...

08004a5c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004a5c:	b580      	push	{r7, lr}
 8004a5e:	b0ba      	sub	sp, #232	; 0xe8
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	68db      	ldr	r3, [r3, #12]
 8004a74:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	695b      	ldr	r3, [r3, #20]
 8004a7e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8004a82:	2300      	movs	r3, #0
 8004a84:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8004a88:	2300      	movs	r3, #0
 8004a8a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004a8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a92:	f003 030f 	and.w	r3, r3, #15
 8004a96:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8004a9a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d10f      	bne.n	8004ac2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004aa2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004aa6:	f003 0320 	and.w	r3, r3, #32
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d009      	beq.n	8004ac2 <HAL_UART_IRQHandler+0x66>
 8004aae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004ab2:	f003 0320 	and.w	r3, r3, #32
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d003      	beq.n	8004ac2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004aba:	6878      	ldr	r0, [r7, #4]
 8004abc:	f000 fc07 	bl	80052ce <UART_Receive_IT>
      return;
 8004ac0:	e256      	b.n	8004f70 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004ac2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	f000 80de 	beq.w	8004c88 <HAL_UART_IRQHandler+0x22c>
 8004acc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004ad0:	f003 0301 	and.w	r3, r3, #1
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d106      	bne.n	8004ae6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004ad8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004adc:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	f000 80d1 	beq.w	8004c88 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004ae6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004aea:	f003 0301 	and.w	r3, r3, #1
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d00b      	beq.n	8004b0a <HAL_UART_IRQHandler+0xae>
 8004af2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004af6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d005      	beq.n	8004b0a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b02:	f043 0201 	orr.w	r2, r3, #1
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004b0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b0e:	f003 0304 	and.w	r3, r3, #4
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d00b      	beq.n	8004b2e <HAL_UART_IRQHandler+0xd2>
 8004b16:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004b1a:	f003 0301 	and.w	r3, r3, #1
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d005      	beq.n	8004b2e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b26:	f043 0202 	orr.w	r2, r3, #2
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004b2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b32:	f003 0302 	and.w	r3, r3, #2
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d00b      	beq.n	8004b52 <HAL_UART_IRQHandler+0xf6>
 8004b3a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004b3e:	f003 0301 	and.w	r3, r3, #1
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d005      	beq.n	8004b52 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b4a:	f043 0204 	orr.w	r2, r3, #4
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004b52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b56:	f003 0308 	and.w	r3, r3, #8
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d011      	beq.n	8004b82 <HAL_UART_IRQHandler+0x126>
 8004b5e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004b62:	f003 0320 	and.w	r3, r3, #32
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d105      	bne.n	8004b76 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004b6a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004b6e:	f003 0301 	and.w	r3, r3, #1
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d005      	beq.n	8004b82 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b7a:	f043 0208 	orr.w	r2, r3, #8
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	f000 81ed 	beq.w	8004f66 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004b8c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b90:	f003 0320 	and.w	r3, r3, #32
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d008      	beq.n	8004baa <HAL_UART_IRQHandler+0x14e>
 8004b98:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004b9c:	f003 0320 	and.w	r3, r3, #32
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d002      	beq.n	8004baa <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004ba4:	6878      	ldr	r0, [r7, #4]
 8004ba6:	f000 fb92 	bl	80052ce <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	695b      	ldr	r3, [r3, #20]
 8004bb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bb4:	2b40      	cmp	r3, #64	; 0x40
 8004bb6:	bf0c      	ite	eq
 8004bb8:	2301      	moveq	r3, #1
 8004bba:	2300      	movne	r3, #0
 8004bbc:	b2db      	uxtb	r3, r3
 8004bbe:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bc6:	f003 0308 	and.w	r3, r3, #8
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d103      	bne.n	8004bd6 <HAL_UART_IRQHandler+0x17a>
 8004bce:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d04f      	beq.n	8004c76 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004bd6:	6878      	ldr	r0, [r7, #4]
 8004bd8:	f000 fa9a 	bl	8005110 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	695b      	ldr	r3, [r3, #20]
 8004be2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004be6:	2b40      	cmp	r3, #64	; 0x40
 8004be8:	d141      	bne.n	8004c6e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	3314      	adds	r3, #20
 8004bf0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bf4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004bf8:	e853 3f00 	ldrex	r3, [r3]
 8004bfc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004c00:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004c04:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004c08:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	3314      	adds	r3, #20
 8004c12:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004c16:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004c1a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c1e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004c22:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004c26:	e841 2300 	strex	r3, r2, [r1]
 8004c2a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004c2e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d1d9      	bne.n	8004bea <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d013      	beq.n	8004c66 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c42:	4a7d      	ldr	r2, [pc, #500]	; (8004e38 <HAL_UART_IRQHandler+0x3dc>)
 8004c44:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c4a:	4618      	mov	r0, r3
 8004c4c:	f7fc fef1 	bl	8001a32 <HAL_DMA_Abort_IT>
 8004c50:	4603      	mov	r3, r0
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d016      	beq.n	8004c84 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c5a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c5c:	687a      	ldr	r2, [r7, #4]
 8004c5e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004c60:	4610      	mov	r0, r2
 8004c62:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c64:	e00e      	b.n	8004c84 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004c66:	6878      	ldr	r0, [r7, #4]
 8004c68:	f000 f990 	bl	8004f8c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c6c:	e00a      	b.n	8004c84 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004c6e:	6878      	ldr	r0, [r7, #4]
 8004c70:	f000 f98c 	bl	8004f8c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c74:	e006      	b.n	8004c84 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004c76:	6878      	ldr	r0, [r7, #4]
 8004c78:	f000 f988 	bl	8004f8c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	2200      	movs	r2, #0
 8004c80:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8004c82:	e170      	b.n	8004f66 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c84:	bf00      	nop
    return;
 8004c86:	e16e      	b.n	8004f66 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c8c:	2b01      	cmp	r3, #1
 8004c8e:	f040 814a 	bne.w	8004f26 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004c92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c96:	f003 0310 	and.w	r3, r3, #16
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	f000 8143 	beq.w	8004f26 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004ca0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004ca4:	f003 0310 	and.w	r3, r3, #16
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	f000 813c 	beq.w	8004f26 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004cae:	2300      	movs	r3, #0
 8004cb0:	60bb      	str	r3, [r7, #8]
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	60bb      	str	r3, [r7, #8]
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	685b      	ldr	r3, [r3, #4]
 8004cc0:	60bb      	str	r3, [r7, #8]
 8004cc2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	695b      	ldr	r3, [r3, #20]
 8004cca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cce:	2b40      	cmp	r3, #64	; 0x40
 8004cd0:	f040 80b4 	bne.w	8004e3c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	685b      	ldr	r3, [r3, #4]
 8004cdc:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004ce0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	f000 8140 	beq.w	8004f6a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004cee:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004cf2:	429a      	cmp	r2, r3
 8004cf4:	f080 8139 	bcs.w	8004f6a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004cfe:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d04:	69db      	ldr	r3, [r3, #28]
 8004d06:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004d0a:	f000 8088 	beq.w	8004e1e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	330c      	adds	r3, #12
 8004d14:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d18:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004d1c:	e853 3f00 	ldrex	r3, [r3]
 8004d20:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004d24:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004d28:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004d2c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	330c      	adds	r3, #12
 8004d36:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8004d3a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004d3e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d42:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004d46:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004d4a:	e841 2300 	strex	r3, r2, [r1]
 8004d4e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004d52:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d1d9      	bne.n	8004d0e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	3314      	adds	r3, #20
 8004d60:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d62:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004d64:	e853 3f00 	ldrex	r3, [r3]
 8004d68:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004d6a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004d6c:	f023 0301 	bic.w	r3, r3, #1
 8004d70:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	3314      	adds	r3, #20
 8004d7a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004d7e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004d82:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d84:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004d86:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004d8a:	e841 2300 	strex	r3, r2, [r1]
 8004d8e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004d90:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d1e1      	bne.n	8004d5a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	3314      	adds	r3, #20
 8004d9c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d9e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004da0:	e853 3f00 	ldrex	r3, [r3]
 8004da4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004da6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004da8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004dac:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	3314      	adds	r3, #20
 8004db6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004dba:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004dbc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dbe:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004dc0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004dc2:	e841 2300 	strex	r3, r2, [r1]
 8004dc6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004dc8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d1e3      	bne.n	8004d96 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	2220      	movs	r2, #32
 8004dd2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	2200      	movs	r2, #0
 8004dda:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	330c      	adds	r3, #12
 8004de2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004de4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004de6:	e853 3f00 	ldrex	r3, [r3]
 8004dea:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004dec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004dee:	f023 0310 	bic.w	r3, r3, #16
 8004df2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	330c      	adds	r3, #12
 8004dfc:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004e00:	65ba      	str	r2, [r7, #88]	; 0x58
 8004e02:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e04:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004e06:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004e08:	e841 2300 	strex	r3, r2, [r1]
 8004e0c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004e0e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d1e3      	bne.n	8004ddc <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e18:	4618      	mov	r0, r3
 8004e1a:	f7fc fd9a 	bl	8001952 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004e26:	b29b      	uxth	r3, r3
 8004e28:	1ad3      	subs	r3, r2, r3
 8004e2a:	b29b      	uxth	r3, r3
 8004e2c:	4619      	mov	r1, r3
 8004e2e:	6878      	ldr	r0, [r7, #4]
 8004e30:	f000 f8b6 	bl	8004fa0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004e34:	e099      	b.n	8004f6a <HAL_UART_IRQHandler+0x50e>
 8004e36:	bf00      	nop
 8004e38:	080051d7 	.word	0x080051d7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004e44:	b29b      	uxth	r3, r3
 8004e46:	1ad3      	subs	r3, r2, r3
 8004e48:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004e50:	b29b      	uxth	r3, r3
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	f000 808b 	beq.w	8004f6e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8004e58:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	f000 8086 	beq.w	8004f6e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	330c      	adds	r3, #12
 8004e68:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e6c:	e853 3f00 	ldrex	r3, [r3]
 8004e70:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004e72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e74:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004e78:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	330c      	adds	r3, #12
 8004e82:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8004e86:	647a      	str	r2, [r7, #68]	; 0x44
 8004e88:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e8a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004e8c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004e8e:	e841 2300 	strex	r3, r2, [r1]
 8004e92:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004e94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d1e3      	bne.n	8004e62 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	3314      	adds	r3, #20
 8004ea0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ea4:	e853 3f00 	ldrex	r3, [r3]
 8004ea8:	623b      	str	r3, [r7, #32]
   return(result);
 8004eaa:	6a3b      	ldr	r3, [r7, #32]
 8004eac:	f023 0301 	bic.w	r3, r3, #1
 8004eb0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	3314      	adds	r3, #20
 8004eba:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004ebe:	633a      	str	r2, [r7, #48]	; 0x30
 8004ec0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ec2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004ec4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004ec6:	e841 2300 	strex	r3, r2, [r1]
 8004eca:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004ecc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d1e3      	bne.n	8004e9a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	2220      	movs	r2, #32
 8004ed6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	2200      	movs	r2, #0
 8004ede:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	330c      	adds	r3, #12
 8004ee6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ee8:	693b      	ldr	r3, [r7, #16]
 8004eea:	e853 3f00 	ldrex	r3, [r3]
 8004eee:	60fb      	str	r3, [r7, #12]
   return(result);
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	f023 0310 	bic.w	r3, r3, #16
 8004ef6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	330c      	adds	r3, #12
 8004f00:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004f04:	61fa      	str	r2, [r7, #28]
 8004f06:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f08:	69b9      	ldr	r1, [r7, #24]
 8004f0a:	69fa      	ldr	r2, [r7, #28]
 8004f0c:	e841 2300 	strex	r3, r2, [r1]
 8004f10:	617b      	str	r3, [r7, #20]
   return(result);
 8004f12:	697b      	ldr	r3, [r7, #20]
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d1e3      	bne.n	8004ee0 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004f18:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004f1c:	4619      	mov	r1, r3
 8004f1e:	6878      	ldr	r0, [r7, #4]
 8004f20:	f000 f83e 	bl	8004fa0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004f24:	e023      	b.n	8004f6e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004f26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d009      	beq.n	8004f46 <HAL_UART_IRQHandler+0x4ea>
 8004f32:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004f36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d003      	beq.n	8004f46 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8004f3e:	6878      	ldr	r0, [r7, #4]
 8004f40:	f000 f95d 	bl	80051fe <UART_Transmit_IT>
    return;
 8004f44:	e014      	b.n	8004f70 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004f46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d00e      	beq.n	8004f70 <HAL_UART_IRQHandler+0x514>
 8004f52:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004f56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d008      	beq.n	8004f70 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8004f5e:	6878      	ldr	r0, [r7, #4]
 8004f60:	f000 f99d 	bl	800529e <UART_EndTransmit_IT>
    return;
 8004f64:	e004      	b.n	8004f70 <HAL_UART_IRQHandler+0x514>
    return;
 8004f66:	bf00      	nop
 8004f68:	e002      	b.n	8004f70 <HAL_UART_IRQHandler+0x514>
      return;
 8004f6a:	bf00      	nop
 8004f6c:	e000      	b.n	8004f70 <HAL_UART_IRQHandler+0x514>
      return;
 8004f6e:	bf00      	nop
  }
}
 8004f70:	37e8      	adds	r7, #232	; 0xe8
 8004f72:	46bd      	mov	sp, r7
 8004f74:	bd80      	pop	{r7, pc}
 8004f76:	bf00      	nop

08004f78 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004f78:	b480      	push	{r7}
 8004f7a:	b083      	sub	sp, #12
 8004f7c:	af00      	add	r7, sp, #0
 8004f7e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004f80:	bf00      	nop
 8004f82:	370c      	adds	r7, #12
 8004f84:	46bd      	mov	sp, r7
 8004f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f8a:	4770      	bx	lr

08004f8c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004f8c:	b480      	push	{r7}
 8004f8e:	b083      	sub	sp, #12
 8004f90:	af00      	add	r7, sp, #0
 8004f92:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004f94:	bf00      	nop
 8004f96:	370c      	adds	r7, #12
 8004f98:	46bd      	mov	sp, r7
 8004f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f9e:	4770      	bx	lr

08004fa0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004fa0:	b480      	push	{r7}
 8004fa2:	b083      	sub	sp, #12
 8004fa4:	af00      	add	r7, sp, #0
 8004fa6:	6078      	str	r0, [r7, #4]
 8004fa8:	460b      	mov	r3, r1
 8004faa:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004fac:	bf00      	nop
 8004fae:	370c      	adds	r7, #12
 8004fb0:	46bd      	mov	sp, r7
 8004fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb6:	4770      	bx	lr

08004fb8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004fb8:	b580      	push	{r7, lr}
 8004fba:	b090      	sub	sp, #64	; 0x40
 8004fbc:	af00      	add	r7, sp, #0
 8004fbe:	60f8      	str	r0, [r7, #12]
 8004fc0:	60b9      	str	r1, [r7, #8]
 8004fc2:	603b      	str	r3, [r7, #0]
 8004fc4:	4613      	mov	r3, r2
 8004fc6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004fc8:	e050      	b.n	800506c <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004fca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004fcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fd0:	d04c      	beq.n	800506c <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004fd2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d007      	beq.n	8004fe8 <UART_WaitOnFlagUntilTimeout+0x30>
 8004fd8:	f7fc fb7a 	bl	80016d0 <HAL_GetTick>
 8004fdc:	4602      	mov	r2, r0
 8004fde:	683b      	ldr	r3, [r7, #0]
 8004fe0:	1ad3      	subs	r3, r2, r3
 8004fe2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004fe4:	429a      	cmp	r2, r3
 8004fe6:	d241      	bcs.n	800506c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	330c      	adds	r3, #12
 8004fee:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ff0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ff2:	e853 3f00 	ldrex	r3, [r3]
 8004ff6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004ff8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ffa:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004ffe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	330c      	adds	r3, #12
 8005006:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005008:	637a      	str	r2, [r7, #52]	; 0x34
 800500a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800500c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800500e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005010:	e841 2300 	strex	r3, r2, [r1]
 8005014:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005016:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005018:	2b00      	cmp	r3, #0
 800501a:	d1e5      	bne.n	8004fe8 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	3314      	adds	r3, #20
 8005022:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005024:	697b      	ldr	r3, [r7, #20]
 8005026:	e853 3f00 	ldrex	r3, [r3]
 800502a:	613b      	str	r3, [r7, #16]
   return(result);
 800502c:	693b      	ldr	r3, [r7, #16]
 800502e:	f023 0301 	bic.w	r3, r3, #1
 8005032:	63bb      	str	r3, [r7, #56]	; 0x38
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	3314      	adds	r3, #20
 800503a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800503c:	623a      	str	r2, [r7, #32]
 800503e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005040:	69f9      	ldr	r1, [r7, #28]
 8005042:	6a3a      	ldr	r2, [r7, #32]
 8005044:	e841 2300 	strex	r3, r2, [r1]
 8005048:	61bb      	str	r3, [r7, #24]
   return(result);
 800504a:	69bb      	ldr	r3, [r7, #24]
 800504c:	2b00      	cmp	r3, #0
 800504e:	d1e5      	bne.n	800501c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	2220      	movs	r2, #32
 8005054:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	2220      	movs	r2, #32
 800505c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	2200      	movs	r2, #0
 8005064:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8005068:	2303      	movs	r3, #3
 800506a:	e00f      	b.n	800508c <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	681a      	ldr	r2, [r3, #0]
 8005072:	68bb      	ldr	r3, [r7, #8]
 8005074:	4013      	ands	r3, r2
 8005076:	68ba      	ldr	r2, [r7, #8]
 8005078:	429a      	cmp	r2, r3
 800507a:	bf0c      	ite	eq
 800507c:	2301      	moveq	r3, #1
 800507e:	2300      	movne	r3, #0
 8005080:	b2db      	uxtb	r3, r3
 8005082:	461a      	mov	r2, r3
 8005084:	79fb      	ldrb	r3, [r7, #7]
 8005086:	429a      	cmp	r2, r3
 8005088:	d09f      	beq.n	8004fca <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800508a:	2300      	movs	r3, #0
}
 800508c:	4618      	mov	r0, r3
 800508e:	3740      	adds	r7, #64	; 0x40
 8005090:	46bd      	mov	sp, r7
 8005092:	bd80      	pop	{r7, pc}

08005094 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005094:	b480      	push	{r7}
 8005096:	b085      	sub	sp, #20
 8005098:	af00      	add	r7, sp, #0
 800509a:	60f8      	str	r0, [r7, #12]
 800509c:	60b9      	str	r1, [r7, #8]
 800509e:	4613      	mov	r3, r2
 80050a0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	68ba      	ldr	r2, [r7, #8]
 80050a6:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	88fa      	ldrh	r2, [r7, #6]
 80050ac:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	88fa      	ldrh	r2, [r7, #6]
 80050b2:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	2200      	movs	r2, #0
 80050b8:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	2222      	movs	r2, #34	; 0x22
 80050be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	2200      	movs	r2, #0
 80050c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	691b      	ldr	r3, [r3, #16]
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d007      	beq.n	80050e2 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	68da      	ldr	r2, [r3, #12]
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80050e0:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	695a      	ldr	r2, [r3, #20]
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	f042 0201 	orr.w	r2, r2, #1
 80050f0:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	68da      	ldr	r2, [r3, #12]
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	f042 0220 	orr.w	r2, r2, #32
 8005100:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005102:	2300      	movs	r3, #0
}
 8005104:	4618      	mov	r0, r3
 8005106:	3714      	adds	r7, #20
 8005108:	46bd      	mov	sp, r7
 800510a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800510e:	4770      	bx	lr

08005110 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005110:	b480      	push	{r7}
 8005112:	b095      	sub	sp, #84	; 0x54
 8005114:	af00      	add	r7, sp, #0
 8005116:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	330c      	adds	r3, #12
 800511e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005120:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005122:	e853 3f00 	ldrex	r3, [r3]
 8005126:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005128:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800512a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800512e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	330c      	adds	r3, #12
 8005136:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005138:	643a      	str	r2, [r7, #64]	; 0x40
 800513a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800513c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800513e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005140:	e841 2300 	strex	r3, r2, [r1]
 8005144:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005146:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005148:	2b00      	cmp	r3, #0
 800514a:	d1e5      	bne.n	8005118 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	3314      	adds	r3, #20
 8005152:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005154:	6a3b      	ldr	r3, [r7, #32]
 8005156:	e853 3f00 	ldrex	r3, [r3]
 800515a:	61fb      	str	r3, [r7, #28]
   return(result);
 800515c:	69fb      	ldr	r3, [r7, #28]
 800515e:	f023 0301 	bic.w	r3, r3, #1
 8005162:	64bb      	str	r3, [r7, #72]	; 0x48
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	3314      	adds	r3, #20
 800516a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800516c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800516e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005170:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005172:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005174:	e841 2300 	strex	r3, r2, [r1]
 8005178:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800517a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800517c:	2b00      	cmp	r3, #0
 800517e:	d1e5      	bne.n	800514c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005184:	2b01      	cmp	r3, #1
 8005186:	d119      	bne.n	80051bc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	330c      	adds	r3, #12
 800518e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	e853 3f00 	ldrex	r3, [r3]
 8005196:	60bb      	str	r3, [r7, #8]
   return(result);
 8005198:	68bb      	ldr	r3, [r7, #8]
 800519a:	f023 0310 	bic.w	r3, r3, #16
 800519e:	647b      	str	r3, [r7, #68]	; 0x44
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	330c      	adds	r3, #12
 80051a6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80051a8:	61ba      	str	r2, [r7, #24]
 80051aa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051ac:	6979      	ldr	r1, [r7, #20]
 80051ae:	69ba      	ldr	r2, [r7, #24]
 80051b0:	e841 2300 	strex	r3, r2, [r1]
 80051b4:	613b      	str	r3, [r7, #16]
   return(result);
 80051b6:	693b      	ldr	r3, [r7, #16]
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d1e5      	bne.n	8005188 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	2220      	movs	r2, #32
 80051c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	2200      	movs	r2, #0
 80051c8:	631a      	str	r2, [r3, #48]	; 0x30
}
 80051ca:	bf00      	nop
 80051cc:	3754      	adds	r7, #84	; 0x54
 80051ce:	46bd      	mov	sp, r7
 80051d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d4:	4770      	bx	lr

080051d6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80051d6:	b580      	push	{r7, lr}
 80051d8:	b084      	sub	sp, #16
 80051da:	af00      	add	r7, sp, #0
 80051dc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051e2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	2200      	movs	r2, #0
 80051e8:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	2200      	movs	r2, #0
 80051ee:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80051f0:	68f8      	ldr	r0, [r7, #12]
 80051f2:	f7ff fecb 	bl	8004f8c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80051f6:	bf00      	nop
 80051f8:	3710      	adds	r7, #16
 80051fa:	46bd      	mov	sp, r7
 80051fc:	bd80      	pop	{r7, pc}

080051fe <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80051fe:	b480      	push	{r7}
 8005200:	b085      	sub	sp, #20
 8005202:	af00      	add	r7, sp, #0
 8005204:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800520c:	b2db      	uxtb	r3, r3
 800520e:	2b21      	cmp	r3, #33	; 0x21
 8005210:	d13e      	bne.n	8005290 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	689b      	ldr	r3, [r3, #8]
 8005216:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800521a:	d114      	bne.n	8005246 <UART_Transmit_IT+0x48>
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	691b      	ldr	r3, [r3, #16]
 8005220:	2b00      	cmp	r3, #0
 8005222:	d110      	bne.n	8005246 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	6a1b      	ldr	r3, [r3, #32]
 8005228:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	881b      	ldrh	r3, [r3, #0]
 800522e:	461a      	mov	r2, r3
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005238:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	6a1b      	ldr	r3, [r3, #32]
 800523e:	1c9a      	adds	r2, r3, #2
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	621a      	str	r2, [r3, #32]
 8005244:	e008      	b.n	8005258 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	6a1b      	ldr	r3, [r3, #32]
 800524a:	1c59      	adds	r1, r3, #1
 800524c:	687a      	ldr	r2, [r7, #4]
 800524e:	6211      	str	r1, [r2, #32]
 8005250:	781a      	ldrb	r2, [r3, #0]
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800525c:	b29b      	uxth	r3, r3
 800525e:	3b01      	subs	r3, #1
 8005260:	b29b      	uxth	r3, r3
 8005262:	687a      	ldr	r2, [r7, #4]
 8005264:	4619      	mov	r1, r3
 8005266:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005268:	2b00      	cmp	r3, #0
 800526a:	d10f      	bne.n	800528c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	68da      	ldr	r2, [r3, #12]
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800527a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	68da      	ldr	r2, [r3, #12]
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800528a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800528c:	2300      	movs	r3, #0
 800528e:	e000      	b.n	8005292 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005290:	2302      	movs	r3, #2
  }
}
 8005292:	4618      	mov	r0, r3
 8005294:	3714      	adds	r7, #20
 8005296:	46bd      	mov	sp, r7
 8005298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800529c:	4770      	bx	lr

0800529e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800529e:	b580      	push	{r7, lr}
 80052a0:	b082      	sub	sp, #8
 80052a2:	af00      	add	r7, sp, #0
 80052a4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	68da      	ldr	r2, [r3, #12]
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80052b4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	2220      	movs	r2, #32
 80052ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80052be:	6878      	ldr	r0, [r7, #4]
 80052c0:	f7ff fe5a 	bl	8004f78 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80052c4:	2300      	movs	r3, #0
}
 80052c6:	4618      	mov	r0, r3
 80052c8:	3708      	adds	r7, #8
 80052ca:	46bd      	mov	sp, r7
 80052cc:	bd80      	pop	{r7, pc}

080052ce <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80052ce:	b580      	push	{r7, lr}
 80052d0:	b08c      	sub	sp, #48	; 0x30
 80052d2:	af00      	add	r7, sp, #0
 80052d4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80052dc:	b2db      	uxtb	r3, r3
 80052de:	2b22      	cmp	r3, #34	; 0x22
 80052e0:	f040 80ab 	bne.w	800543a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	689b      	ldr	r3, [r3, #8]
 80052e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80052ec:	d117      	bne.n	800531e <UART_Receive_IT+0x50>
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	691b      	ldr	r3, [r3, #16]
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d113      	bne.n	800531e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80052f6:	2300      	movs	r3, #0
 80052f8:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052fe:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	685b      	ldr	r3, [r3, #4]
 8005306:	b29b      	uxth	r3, r3
 8005308:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800530c:	b29a      	uxth	r2, r3
 800530e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005310:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005316:	1c9a      	adds	r2, r3, #2
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	629a      	str	r2, [r3, #40]	; 0x28
 800531c:	e026      	b.n	800536c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005322:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8005324:	2300      	movs	r3, #0
 8005326:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	689b      	ldr	r3, [r3, #8]
 800532c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005330:	d007      	beq.n	8005342 <UART_Receive_IT+0x74>
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	689b      	ldr	r3, [r3, #8]
 8005336:	2b00      	cmp	r3, #0
 8005338:	d10a      	bne.n	8005350 <UART_Receive_IT+0x82>
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	691b      	ldr	r3, [r3, #16]
 800533e:	2b00      	cmp	r3, #0
 8005340:	d106      	bne.n	8005350 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	685b      	ldr	r3, [r3, #4]
 8005348:	b2da      	uxtb	r2, r3
 800534a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800534c:	701a      	strb	r2, [r3, #0]
 800534e:	e008      	b.n	8005362 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	685b      	ldr	r3, [r3, #4]
 8005356:	b2db      	uxtb	r3, r3
 8005358:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800535c:	b2da      	uxtb	r2, r3
 800535e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005360:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005366:	1c5a      	adds	r2, r3, #1
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005370:	b29b      	uxth	r3, r3
 8005372:	3b01      	subs	r3, #1
 8005374:	b29b      	uxth	r3, r3
 8005376:	687a      	ldr	r2, [r7, #4]
 8005378:	4619      	mov	r1, r3
 800537a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800537c:	2b00      	cmp	r3, #0
 800537e:	d15a      	bne.n	8005436 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	68da      	ldr	r2, [r3, #12]
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	f022 0220 	bic.w	r2, r2, #32
 800538e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	68da      	ldr	r2, [r3, #12]
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800539e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	695a      	ldr	r2, [r3, #20]
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	f022 0201 	bic.w	r2, r2, #1
 80053ae:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	2220      	movs	r2, #32
 80053b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053bc:	2b01      	cmp	r3, #1
 80053be:	d135      	bne.n	800542c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	2200      	movs	r2, #0
 80053c4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	330c      	adds	r3, #12
 80053cc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053ce:	697b      	ldr	r3, [r7, #20]
 80053d0:	e853 3f00 	ldrex	r3, [r3]
 80053d4:	613b      	str	r3, [r7, #16]
   return(result);
 80053d6:	693b      	ldr	r3, [r7, #16]
 80053d8:	f023 0310 	bic.w	r3, r3, #16
 80053dc:	627b      	str	r3, [r7, #36]	; 0x24
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	330c      	adds	r3, #12
 80053e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80053e6:	623a      	str	r2, [r7, #32]
 80053e8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053ea:	69f9      	ldr	r1, [r7, #28]
 80053ec:	6a3a      	ldr	r2, [r7, #32]
 80053ee:	e841 2300 	strex	r3, r2, [r1]
 80053f2:	61bb      	str	r3, [r7, #24]
   return(result);
 80053f4:	69bb      	ldr	r3, [r7, #24]
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d1e5      	bne.n	80053c6 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	f003 0310 	and.w	r3, r3, #16
 8005404:	2b10      	cmp	r3, #16
 8005406:	d10a      	bne.n	800541e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005408:	2300      	movs	r3, #0
 800540a:	60fb      	str	r3, [r7, #12]
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	60fb      	str	r3, [r7, #12]
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	685b      	ldr	r3, [r3, #4]
 800541a:	60fb      	str	r3, [r7, #12]
 800541c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005422:	4619      	mov	r1, r3
 8005424:	6878      	ldr	r0, [r7, #4]
 8005426:	f7ff fdbb 	bl	8004fa0 <HAL_UARTEx_RxEventCallback>
 800542a:	e002      	b.n	8005432 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800542c:	6878      	ldr	r0, [r7, #4]
 800542e:	f7fb fe63 	bl	80010f8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005432:	2300      	movs	r3, #0
 8005434:	e002      	b.n	800543c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8005436:	2300      	movs	r3, #0
 8005438:	e000      	b.n	800543c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800543a:	2302      	movs	r3, #2
  }
}
 800543c:	4618      	mov	r0, r3
 800543e:	3730      	adds	r7, #48	; 0x30
 8005440:	46bd      	mov	sp, r7
 8005442:	bd80      	pop	{r7, pc}

08005444 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005444:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005448:	b0c0      	sub	sp, #256	; 0x100
 800544a:	af00      	add	r7, sp, #0
 800544c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005450:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	691b      	ldr	r3, [r3, #16]
 8005458:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800545c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005460:	68d9      	ldr	r1, [r3, #12]
 8005462:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005466:	681a      	ldr	r2, [r3, #0]
 8005468:	ea40 0301 	orr.w	r3, r0, r1
 800546c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800546e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005472:	689a      	ldr	r2, [r3, #8]
 8005474:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005478:	691b      	ldr	r3, [r3, #16]
 800547a:	431a      	orrs	r2, r3
 800547c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005480:	695b      	ldr	r3, [r3, #20]
 8005482:	431a      	orrs	r2, r3
 8005484:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005488:	69db      	ldr	r3, [r3, #28]
 800548a:	4313      	orrs	r3, r2
 800548c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005490:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	68db      	ldr	r3, [r3, #12]
 8005498:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800549c:	f021 010c 	bic.w	r1, r1, #12
 80054a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80054a4:	681a      	ldr	r2, [r3, #0]
 80054a6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80054aa:	430b      	orrs	r3, r1
 80054ac:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80054ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	695b      	ldr	r3, [r3, #20]
 80054b6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80054ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80054be:	6999      	ldr	r1, [r3, #24]
 80054c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80054c4:	681a      	ldr	r2, [r3, #0]
 80054c6:	ea40 0301 	orr.w	r3, r0, r1
 80054ca:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80054cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80054d0:	681a      	ldr	r2, [r3, #0]
 80054d2:	4b8f      	ldr	r3, [pc, #572]	; (8005710 <UART_SetConfig+0x2cc>)
 80054d4:	429a      	cmp	r2, r3
 80054d6:	d005      	beq.n	80054e4 <UART_SetConfig+0xa0>
 80054d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80054dc:	681a      	ldr	r2, [r3, #0]
 80054de:	4b8d      	ldr	r3, [pc, #564]	; (8005714 <UART_SetConfig+0x2d0>)
 80054e0:	429a      	cmp	r2, r3
 80054e2:	d104      	bne.n	80054ee <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80054e4:	f7fe fb3e 	bl	8003b64 <HAL_RCC_GetPCLK2Freq>
 80054e8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80054ec:	e003      	b.n	80054f6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80054ee:	f7fe fb25 	bl	8003b3c <HAL_RCC_GetPCLK1Freq>
 80054f2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80054f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80054fa:	69db      	ldr	r3, [r3, #28]
 80054fc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005500:	f040 810c 	bne.w	800571c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005504:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005508:	2200      	movs	r2, #0
 800550a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800550e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8005512:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8005516:	4622      	mov	r2, r4
 8005518:	462b      	mov	r3, r5
 800551a:	1891      	adds	r1, r2, r2
 800551c:	65b9      	str	r1, [r7, #88]	; 0x58
 800551e:	415b      	adcs	r3, r3
 8005520:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005522:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005526:	4621      	mov	r1, r4
 8005528:	eb12 0801 	adds.w	r8, r2, r1
 800552c:	4629      	mov	r1, r5
 800552e:	eb43 0901 	adc.w	r9, r3, r1
 8005532:	f04f 0200 	mov.w	r2, #0
 8005536:	f04f 0300 	mov.w	r3, #0
 800553a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800553e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005542:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005546:	4690      	mov	r8, r2
 8005548:	4699      	mov	r9, r3
 800554a:	4623      	mov	r3, r4
 800554c:	eb18 0303 	adds.w	r3, r8, r3
 8005550:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005554:	462b      	mov	r3, r5
 8005556:	eb49 0303 	adc.w	r3, r9, r3
 800555a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800555e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005562:	685b      	ldr	r3, [r3, #4]
 8005564:	2200      	movs	r2, #0
 8005566:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800556a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800556e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005572:	460b      	mov	r3, r1
 8005574:	18db      	adds	r3, r3, r3
 8005576:	653b      	str	r3, [r7, #80]	; 0x50
 8005578:	4613      	mov	r3, r2
 800557a:	eb42 0303 	adc.w	r3, r2, r3
 800557e:	657b      	str	r3, [r7, #84]	; 0x54
 8005580:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005584:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005588:	f7fa fe1e 	bl	80001c8 <__aeabi_uldivmod>
 800558c:	4602      	mov	r2, r0
 800558e:	460b      	mov	r3, r1
 8005590:	4b61      	ldr	r3, [pc, #388]	; (8005718 <UART_SetConfig+0x2d4>)
 8005592:	fba3 2302 	umull	r2, r3, r3, r2
 8005596:	095b      	lsrs	r3, r3, #5
 8005598:	011c      	lsls	r4, r3, #4
 800559a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800559e:	2200      	movs	r2, #0
 80055a0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80055a4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80055a8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80055ac:	4642      	mov	r2, r8
 80055ae:	464b      	mov	r3, r9
 80055b0:	1891      	adds	r1, r2, r2
 80055b2:	64b9      	str	r1, [r7, #72]	; 0x48
 80055b4:	415b      	adcs	r3, r3
 80055b6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80055b8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80055bc:	4641      	mov	r1, r8
 80055be:	eb12 0a01 	adds.w	sl, r2, r1
 80055c2:	4649      	mov	r1, r9
 80055c4:	eb43 0b01 	adc.w	fp, r3, r1
 80055c8:	f04f 0200 	mov.w	r2, #0
 80055cc:	f04f 0300 	mov.w	r3, #0
 80055d0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80055d4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80055d8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80055dc:	4692      	mov	sl, r2
 80055de:	469b      	mov	fp, r3
 80055e0:	4643      	mov	r3, r8
 80055e2:	eb1a 0303 	adds.w	r3, sl, r3
 80055e6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80055ea:	464b      	mov	r3, r9
 80055ec:	eb4b 0303 	adc.w	r3, fp, r3
 80055f0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80055f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055f8:	685b      	ldr	r3, [r3, #4]
 80055fa:	2200      	movs	r2, #0
 80055fc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005600:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005604:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005608:	460b      	mov	r3, r1
 800560a:	18db      	adds	r3, r3, r3
 800560c:	643b      	str	r3, [r7, #64]	; 0x40
 800560e:	4613      	mov	r3, r2
 8005610:	eb42 0303 	adc.w	r3, r2, r3
 8005614:	647b      	str	r3, [r7, #68]	; 0x44
 8005616:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800561a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800561e:	f7fa fdd3 	bl	80001c8 <__aeabi_uldivmod>
 8005622:	4602      	mov	r2, r0
 8005624:	460b      	mov	r3, r1
 8005626:	4611      	mov	r1, r2
 8005628:	4b3b      	ldr	r3, [pc, #236]	; (8005718 <UART_SetConfig+0x2d4>)
 800562a:	fba3 2301 	umull	r2, r3, r3, r1
 800562e:	095b      	lsrs	r3, r3, #5
 8005630:	2264      	movs	r2, #100	; 0x64
 8005632:	fb02 f303 	mul.w	r3, r2, r3
 8005636:	1acb      	subs	r3, r1, r3
 8005638:	00db      	lsls	r3, r3, #3
 800563a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800563e:	4b36      	ldr	r3, [pc, #216]	; (8005718 <UART_SetConfig+0x2d4>)
 8005640:	fba3 2302 	umull	r2, r3, r3, r2
 8005644:	095b      	lsrs	r3, r3, #5
 8005646:	005b      	lsls	r3, r3, #1
 8005648:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800564c:	441c      	add	r4, r3
 800564e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005652:	2200      	movs	r2, #0
 8005654:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005658:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800565c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005660:	4642      	mov	r2, r8
 8005662:	464b      	mov	r3, r9
 8005664:	1891      	adds	r1, r2, r2
 8005666:	63b9      	str	r1, [r7, #56]	; 0x38
 8005668:	415b      	adcs	r3, r3
 800566a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800566c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005670:	4641      	mov	r1, r8
 8005672:	1851      	adds	r1, r2, r1
 8005674:	6339      	str	r1, [r7, #48]	; 0x30
 8005676:	4649      	mov	r1, r9
 8005678:	414b      	adcs	r3, r1
 800567a:	637b      	str	r3, [r7, #52]	; 0x34
 800567c:	f04f 0200 	mov.w	r2, #0
 8005680:	f04f 0300 	mov.w	r3, #0
 8005684:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005688:	4659      	mov	r1, fp
 800568a:	00cb      	lsls	r3, r1, #3
 800568c:	4651      	mov	r1, sl
 800568e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005692:	4651      	mov	r1, sl
 8005694:	00ca      	lsls	r2, r1, #3
 8005696:	4610      	mov	r0, r2
 8005698:	4619      	mov	r1, r3
 800569a:	4603      	mov	r3, r0
 800569c:	4642      	mov	r2, r8
 800569e:	189b      	adds	r3, r3, r2
 80056a0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80056a4:	464b      	mov	r3, r9
 80056a6:	460a      	mov	r2, r1
 80056a8:	eb42 0303 	adc.w	r3, r2, r3
 80056ac:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80056b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80056b4:	685b      	ldr	r3, [r3, #4]
 80056b6:	2200      	movs	r2, #0
 80056b8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80056bc:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80056c0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80056c4:	460b      	mov	r3, r1
 80056c6:	18db      	adds	r3, r3, r3
 80056c8:	62bb      	str	r3, [r7, #40]	; 0x28
 80056ca:	4613      	mov	r3, r2
 80056cc:	eb42 0303 	adc.w	r3, r2, r3
 80056d0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80056d2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80056d6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80056da:	f7fa fd75 	bl	80001c8 <__aeabi_uldivmod>
 80056de:	4602      	mov	r2, r0
 80056e0:	460b      	mov	r3, r1
 80056e2:	4b0d      	ldr	r3, [pc, #52]	; (8005718 <UART_SetConfig+0x2d4>)
 80056e4:	fba3 1302 	umull	r1, r3, r3, r2
 80056e8:	095b      	lsrs	r3, r3, #5
 80056ea:	2164      	movs	r1, #100	; 0x64
 80056ec:	fb01 f303 	mul.w	r3, r1, r3
 80056f0:	1ad3      	subs	r3, r2, r3
 80056f2:	00db      	lsls	r3, r3, #3
 80056f4:	3332      	adds	r3, #50	; 0x32
 80056f6:	4a08      	ldr	r2, [pc, #32]	; (8005718 <UART_SetConfig+0x2d4>)
 80056f8:	fba2 2303 	umull	r2, r3, r2, r3
 80056fc:	095b      	lsrs	r3, r3, #5
 80056fe:	f003 0207 	and.w	r2, r3, #7
 8005702:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	4422      	add	r2, r4
 800570a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800570c:	e105      	b.n	800591a <UART_SetConfig+0x4d6>
 800570e:	bf00      	nop
 8005710:	40011000 	.word	0x40011000
 8005714:	40011400 	.word	0x40011400
 8005718:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800571c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005720:	2200      	movs	r2, #0
 8005722:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005726:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800572a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800572e:	4642      	mov	r2, r8
 8005730:	464b      	mov	r3, r9
 8005732:	1891      	adds	r1, r2, r2
 8005734:	6239      	str	r1, [r7, #32]
 8005736:	415b      	adcs	r3, r3
 8005738:	627b      	str	r3, [r7, #36]	; 0x24
 800573a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800573e:	4641      	mov	r1, r8
 8005740:	1854      	adds	r4, r2, r1
 8005742:	4649      	mov	r1, r9
 8005744:	eb43 0501 	adc.w	r5, r3, r1
 8005748:	f04f 0200 	mov.w	r2, #0
 800574c:	f04f 0300 	mov.w	r3, #0
 8005750:	00eb      	lsls	r3, r5, #3
 8005752:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005756:	00e2      	lsls	r2, r4, #3
 8005758:	4614      	mov	r4, r2
 800575a:	461d      	mov	r5, r3
 800575c:	4643      	mov	r3, r8
 800575e:	18e3      	adds	r3, r4, r3
 8005760:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005764:	464b      	mov	r3, r9
 8005766:	eb45 0303 	adc.w	r3, r5, r3
 800576a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800576e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005772:	685b      	ldr	r3, [r3, #4]
 8005774:	2200      	movs	r2, #0
 8005776:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800577a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800577e:	f04f 0200 	mov.w	r2, #0
 8005782:	f04f 0300 	mov.w	r3, #0
 8005786:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800578a:	4629      	mov	r1, r5
 800578c:	008b      	lsls	r3, r1, #2
 800578e:	4621      	mov	r1, r4
 8005790:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005794:	4621      	mov	r1, r4
 8005796:	008a      	lsls	r2, r1, #2
 8005798:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800579c:	f7fa fd14 	bl	80001c8 <__aeabi_uldivmod>
 80057a0:	4602      	mov	r2, r0
 80057a2:	460b      	mov	r3, r1
 80057a4:	4b60      	ldr	r3, [pc, #384]	; (8005928 <UART_SetConfig+0x4e4>)
 80057a6:	fba3 2302 	umull	r2, r3, r3, r2
 80057aa:	095b      	lsrs	r3, r3, #5
 80057ac:	011c      	lsls	r4, r3, #4
 80057ae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80057b2:	2200      	movs	r2, #0
 80057b4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80057b8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80057bc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80057c0:	4642      	mov	r2, r8
 80057c2:	464b      	mov	r3, r9
 80057c4:	1891      	adds	r1, r2, r2
 80057c6:	61b9      	str	r1, [r7, #24]
 80057c8:	415b      	adcs	r3, r3
 80057ca:	61fb      	str	r3, [r7, #28]
 80057cc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80057d0:	4641      	mov	r1, r8
 80057d2:	1851      	adds	r1, r2, r1
 80057d4:	6139      	str	r1, [r7, #16]
 80057d6:	4649      	mov	r1, r9
 80057d8:	414b      	adcs	r3, r1
 80057da:	617b      	str	r3, [r7, #20]
 80057dc:	f04f 0200 	mov.w	r2, #0
 80057e0:	f04f 0300 	mov.w	r3, #0
 80057e4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80057e8:	4659      	mov	r1, fp
 80057ea:	00cb      	lsls	r3, r1, #3
 80057ec:	4651      	mov	r1, sl
 80057ee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80057f2:	4651      	mov	r1, sl
 80057f4:	00ca      	lsls	r2, r1, #3
 80057f6:	4610      	mov	r0, r2
 80057f8:	4619      	mov	r1, r3
 80057fa:	4603      	mov	r3, r0
 80057fc:	4642      	mov	r2, r8
 80057fe:	189b      	adds	r3, r3, r2
 8005800:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005804:	464b      	mov	r3, r9
 8005806:	460a      	mov	r2, r1
 8005808:	eb42 0303 	adc.w	r3, r2, r3
 800580c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005810:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005814:	685b      	ldr	r3, [r3, #4]
 8005816:	2200      	movs	r2, #0
 8005818:	67bb      	str	r3, [r7, #120]	; 0x78
 800581a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800581c:	f04f 0200 	mov.w	r2, #0
 8005820:	f04f 0300 	mov.w	r3, #0
 8005824:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005828:	4649      	mov	r1, r9
 800582a:	008b      	lsls	r3, r1, #2
 800582c:	4641      	mov	r1, r8
 800582e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005832:	4641      	mov	r1, r8
 8005834:	008a      	lsls	r2, r1, #2
 8005836:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800583a:	f7fa fcc5 	bl	80001c8 <__aeabi_uldivmod>
 800583e:	4602      	mov	r2, r0
 8005840:	460b      	mov	r3, r1
 8005842:	4b39      	ldr	r3, [pc, #228]	; (8005928 <UART_SetConfig+0x4e4>)
 8005844:	fba3 1302 	umull	r1, r3, r3, r2
 8005848:	095b      	lsrs	r3, r3, #5
 800584a:	2164      	movs	r1, #100	; 0x64
 800584c:	fb01 f303 	mul.w	r3, r1, r3
 8005850:	1ad3      	subs	r3, r2, r3
 8005852:	011b      	lsls	r3, r3, #4
 8005854:	3332      	adds	r3, #50	; 0x32
 8005856:	4a34      	ldr	r2, [pc, #208]	; (8005928 <UART_SetConfig+0x4e4>)
 8005858:	fba2 2303 	umull	r2, r3, r2, r3
 800585c:	095b      	lsrs	r3, r3, #5
 800585e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005862:	441c      	add	r4, r3
 8005864:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005868:	2200      	movs	r2, #0
 800586a:	673b      	str	r3, [r7, #112]	; 0x70
 800586c:	677a      	str	r2, [r7, #116]	; 0x74
 800586e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005872:	4642      	mov	r2, r8
 8005874:	464b      	mov	r3, r9
 8005876:	1891      	adds	r1, r2, r2
 8005878:	60b9      	str	r1, [r7, #8]
 800587a:	415b      	adcs	r3, r3
 800587c:	60fb      	str	r3, [r7, #12]
 800587e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005882:	4641      	mov	r1, r8
 8005884:	1851      	adds	r1, r2, r1
 8005886:	6039      	str	r1, [r7, #0]
 8005888:	4649      	mov	r1, r9
 800588a:	414b      	adcs	r3, r1
 800588c:	607b      	str	r3, [r7, #4]
 800588e:	f04f 0200 	mov.w	r2, #0
 8005892:	f04f 0300 	mov.w	r3, #0
 8005896:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800589a:	4659      	mov	r1, fp
 800589c:	00cb      	lsls	r3, r1, #3
 800589e:	4651      	mov	r1, sl
 80058a0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80058a4:	4651      	mov	r1, sl
 80058a6:	00ca      	lsls	r2, r1, #3
 80058a8:	4610      	mov	r0, r2
 80058aa:	4619      	mov	r1, r3
 80058ac:	4603      	mov	r3, r0
 80058ae:	4642      	mov	r2, r8
 80058b0:	189b      	adds	r3, r3, r2
 80058b2:	66bb      	str	r3, [r7, #104]	; 0x68
 80058b4:	464b      	mov	r3, r9
 80058b6:	460a      	mov	r2, r1
 80058b8:	eb42 0303 	adc.w	r3, r2, r3
 80058bc:	66fb      	str	r3, [r7, #108]	; 0x6c
 80058be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058c2:	685b      	ldr	r3, [r3, #4]
 80058c4:	2200      	movs	r2, #0
 80058c6:	663b      	str	r3, [r7, #96]	; 0x60
 80058c8:	667a      	str	r2, [r7, #100]	; 0x64
 80058ca:	f04f 0200 	mov.w	r2, #0
 80058ce:	f04f 0300 	mov.w	r3, #0
 80058d2:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80058d6:	4649      	mov	r1, r9
 80058d8:	008b      	lsls	r3, r1, #2
 80058da:	4641      	mov	r1, r8
 80058dc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80058e0:	4641      	mov	r1, r8
 80058e2:	008a      	lsls	r2, r1, #2
 80058e4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80058e8:	f7fa fc6e 	bl	80001c8 <__aeabi_uldivmod>
 80058ec:	4602      	mov	r2, r0
 80058ee:	460b      	mov	r3, r1
 80058f0:	4b0d      	ldr	r3, [pc, #52]	; (8005928 <UART_SetConfig+0x4e4>)
 80058f2:	fba3 1302 	umull	r1, r3, r3, r2
 80058f6:	095b      	lsrs	r3, r3, #5
 80058f8:	2164      	movs	r1, #100	; 0x64
 80058fa:	fb01 f303 	mul.w	r3, r1, r3
 80058fe:	1ad3      	subs	r3, r2, r3
 8005900:	011b      	lsls	r3, r3, #4
 8005902:	3332      	adds	r3, #50	; 0x32
 8005904:	4a08      	ldr	r2, [pc, #32]	; (8005928 <UART_SetConfig+0x4e4>)
 8005906:	fba2 2303 	umull	r2, r3, r2, r3
 800590a:	095b      	lsrs	r3, r3, #5
 800590c:	f003 020f 	and.w	r2, r3, #15
 8005910:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	4422      	add	r2, r4
 8005918:	609a      	str	r2, [r3, #8]
}
 800591a:	bf00      	nop
 800591c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005920:	46bd      	mov	sp, r7
 8005922:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005926:	bf00      	nop
 8005928:	51eb851f 	.word	0x51eb851f

0800592c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800592c:	b084      	sub	sp, #16
 800592e:	b580      	push	{r7, lr}
 8005930:	b084      	sub	sp, #16
 8005932:	af00      	add	r7, sp, #0
 8005934:	6078      	str	r0, [r7, #4]
 8005936:	f107 001c 	add.w	r0, r7, #28
 800593a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800593e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005940:	2b01      	cmp	r3, #1
 8005942:	d122      	bne.n	800598a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005948:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	68db      	ldr	r3, [r3, #12]
 8005954:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8005958:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800595c:	687a      	ldr	r2, [r7, #4]
 800595e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	68db      	ldr	r3, [r3, #12]
 8005964:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800596c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800596e:	2b01      	cmp	r3, #1
 8005970:	d105      	bne.n	800597e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	68db      	ldr	r3, [r3, #12]
 8005976:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800597e:	6878      	ldr	r0, [r7, #4]
 8005980:	f001 fbee 	bl	8007160 <USB_CoreReset>
 8005984:	4603      	mov	r3, r0
 8005986:	73fb      	strb	r3, [r7, #15]
 8005988:	e01a      	b.n	80059c0 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	68db      	ldr	r3, [r3, #12]
 800598e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005996:	6878      	ldr	r0, [r7, #4]
 8005998:	f001 fbe2 	bl	8007160 <USB_CoreReset>
 800599c:	4603      	mov	r3, r0
 800599e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80059a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d106      	bne.n	80059b4 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059aa:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	639a      	str	r2, [r3, #56]	; 0x38
 80059b2:	e005      	b.n	80059c0 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059b8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80059c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059c2:	2b01      	cmp	r3, #1
 80059c4:	d10b      	bne.n	80059de <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	689b      	ldr	r3, [r3, #8]
 80059ca:	f043 0206 	orr.w	r2, r3, #6
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	689b      	ldr	r3, [r3, #8]
 80059d6:	f043 0220 	orr.w	r2, r3, #32
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80059de:	7bfb      	ldrb	r3, [r7, #15]
}
 80059e0:	4618      	mov	r0, r3
 80059e2:	3710      	adds	r7, #16
 80059e4:	46bd      	mov	sp, r7
 80059e6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80059ea:	b004      	add	sp, #16
 80059ec:	4770      	bx	lr
	...

080059f0 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80059f0:	b480      	push	{r7}
 80059f2:	b087      	sub	sp, #28
 80059f4:	af00      	add	r7, sp, #0
 80059f6:	60f8      	str	r0, [r7, #12]
 80059f8:	60b9      	str	r1, [r7, #8]
 80059fa:	4613      	mov	r3, r2
 80059fc:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80059fe:	79fb      	ldrb	r3, [r7, #7]
 8005a00:	2b02      	cmp	r3, #2
 8005a02:	d165      	bne.n	8005ad0 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8005a04:	68bb      	ldr	r3, [r7, #8]
 8005a06:	4a41      	ldr	r2, [pc, #260]	; (8005b0c <USB_SetTurnaroundTime+0x11c>)
 8005a08:	4293      	cmp	r3, r2
 8005a0a:	d906      	bls.n	8005a1a <USB_SetTurnaroundTime+0x2a>
 8005a0c:	68bb      	ldr	r3, [r7, #8]
 8005a0e:	4a40      	ldr	r2, [pc, #256]	; (8005b10 <USB_SetTurnaroundTime+0x120>)
 8005a10:	4293      	cmp	r3, r2
 8005a12:	d202      	bcs.n	8005a1a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8005a14:	230f      	movs	r3, #15
 8005a16:	617b      	str	r3, [r7, #20]
 8005a18:	e062      	b.n	8005ae0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8005a1a:	68bb      	ldr	r3, [r7, #8]
 8005a1c:	4a3c      	ldr	r2, [pc, #240]	; (8005b10 <USB_SetTurnaroundTime+0x120>)
 8005a1e:	4293      	cmp	r3, r2
 8005a20:	d306      	bcc.n	8005a30 <USB_SetTurnaroundTime+0x40>
 8005a22:	68bb      	ldr	r3, [r7, #8]
 8005a24:	4a3b      	ldr	r2, [pc, #236]	; (8005b14 <USB_SetTurnaroundTime+0x124>)
 8005a26:	4293      	cmp	r3, r2
 8005a28:	d202      	bcs.n	8005a30 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8005a2a:	230e      	movs	r3, #14
 8005a2c:	617b      	str	r3, [r7, #20]
 8005a2e:	e057      	b.n	8005ae0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8005a30:	68bb      	ldr	r3, [r7, #8]
 8005a32:	4a38      	ldr	r2, [pc, #224]	; (8005b14 <USB_SetTurnaroundTime+0x124>)
 8005a34:	4293      	cmp	r3, r2
 8005a36:	d306      	bcc.n	8005a46 <USB_SetTurnaroundTime+0x56>
 8005a38:	68bb      	ldr	r3, [r7, #8]
 8005a3a:	4a37      	ldr	r2, [pc, #220]	; (8005b18 <USB_SetTurnaroundTime+0x128>)
 8005a3c:	4293      	cmp	r3, r2
 8005a3e:	d202      	bcs.n	8005a46 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8005a40:	230d      	movs	r3, #13
 8005a42:	617b      	str	r3, [r7, #20]
 8005a44:	e04c      	b.n	8005ae0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8005a46:	68bb      	ldr	r3, [r7, #8]
 8005a48:	4a33      	ldr	r2, [pc, #204]	; (8005b18 <USB_SetTurnaroundTime+0x128>)
 8005a4a:	4293      	cmp	r3, r2
 8005a4c:	d306      	bcc.n	8005a5c <USB_SetTurnaroundTime+0x6c>
 8005a4e:	68bb      	ldr	r3, [r7, #8]
 8005a50:	4a32      	ldr	r2, [pc, #200]	; (8005b1c <USB_SetTurnaroundTime+0x12c>)
 8005a52:	4293      	cmp	r3, r2
 8005a54:	d802      	bhi.n	8005a5c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8005a56:	230c      	movs	r3, #12
 8005a58:	617b      	str	r3, [r7, #20]
 8005a5a:	e041      	b.n	8005ae0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8005a5c:	68bb      	ldr	r3, [r7, #8]
 8005a5e:	4a2f      	ldr	r2, [pc, #188]	; (8005b1c <USB_SetTurnaroundTime+0x12c>)
 8005a60:	4293      	cmp	r3, r2
 8005a62:	d906      	bls.n	8005a72 <USB_SetTurnaroundTime+0x82>
 8005a64:	68bb      	ldr	r3, [r7, #8]
 8005a66:	4a2e      	ldr	r2, [pc, #184]	; (8005b20 <USB_SetTurnaroundTime+0x130>)
 8005a68:	4293      	cmp	r3, r2
 8005a6a:	d802      	bhi.n	8005a72 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8005a6c:	230b      	movs	r3, #11
 8005a6e:	617b      	str	r3, [r7, #20]
 8005a70:	e036      	b.n	8005ae0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8005a72:	68bb      	ldr	r3, [r7, #8]
 8005a74:	4a2a      	ldr	r2, [pc, #168]	; (8005b20 <USB_SetTurnaroundTime+0x130>)
 8005a76:	4293      	cmp	r3, r2
 8005a78:	d906      	bls.n	8005a88 <USB_SetTurnaroundTime+0x98>
 8005a7a:	68bb      	ldr	r3, [r7, #8]
 8005a7c:	4a29      	ldr	r2, [pc, #164]	; (8005b24 <USB_SetTurnaroundTime+0x134>)
 8005a7e:	4293      	cmp	r3, r2
 8005a80:	d802      	bhi.n	8005a88 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8005a82:	230a      	movs	r3, #10
 8005a84:	617b      	str	r3, [r7, #20]
 8005a86:	e02b      	b.n	8005ae0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8005a88:	68bb      	ldr	r3, [r7, #8]
 8005a8a:	4a26      	ldr	r2, [pc, #152]	; (8005b24 <USB_SetTurnaroundTime+0x134>)
 8005a8c:	4293      	cmp	r3, r2
 8005a8e:	d906      	bls.n	8005a9e <USB_SetTurnaroundTime+0xae>
 8005a90:	68bb      	ldr	r3, [r7, #8]
 8005a92:	4a25      	ldr	r2, [pc, #148]	; (8005b28 <USB_SetTurnaroundTime+0x138>)
 8005a94:	4293      	cmp	r3, r2
 8005a96:	d202      	bcs.n	8005a9e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8005a98:	2309      	movs	r3, #9
 8005a9a:	617b      	str	r3, [r7, #20]
 8005a9c:	e020      	b.n	8005ae0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8005a9e:	68bb      	ldr	r3, [r7, #8]
 8005aa0:	4a21      	ldr	r2, [pc, #132]	; (8005b28 <USB_SetTurnaroundTime+0x138>)
 8005aa2:	4293      	cmp	r3, r2
 8005aa4:	d306      	bcc.n	8005ab4 <USB_SetTurnaroundTime+0xc4>
 8005aa6:	68bb      	ldr	r3, [r7, #8]
 8005aa8:	4a20      	ldr	r2, [pc, #128]	; (8005b2c <USB_SetTurnaroundTime+0x13c>)
 8005aaa:	4293      	cmp	r3, r2
 8005aac:	d802      	bhi.n	8005ab4 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8005aae:	2308      	movs	r3, #8
 8005ab0:	617b      	str	r3, [r7, #20]
 8005ab2:	e015      	b.n	8005ae0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8005ab4:	68bb      	ldr	r3, [r7, #8]
 8005ab6:	4a1d      	ldr	r2, [pc, #116]	; (8005b2c <USB_SetTurnaroundTime+0x13c>)
 8005ab8:	4293      	cmp	r3, r2
 8005aba:	d906      	bls.n	8005aca <USB_SetTurnaroundTime+0xda>
 8005abc:	68bb      	ldr	r3, [r7, #8]
 8005abe:	4a1c      	ldr	r2, [pc, #112]	; (8005b30 <USB_SetTurnaroundTime+0x140>)
 8005ac0:	4293      	cmp	r3, r2
 8005ac2:	d202      	bcs.n	8005aca <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8005ac4:	2307      	movs	r3, #7
 8005ac6:	617b      	str	r3, [r7, #20]
 8005ac8:	e00a      	b.n	8005ae0 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8005aca:	2306      	movs	r3, #6
 8005acc:	617b      	str	r3, [r7, #20]
 8005ace:	e007      	b.n	8005ae0 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8005ad0:	79fb      	ldrb	r3, [r7, #7]
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d102      	bne.n	8005adc <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8005ad6:	2309      	movs	r3, #9
 8005ad8:	617b      	str	r3, [r7, #20]
 8005ada:	e001      	b.n	8005ae0 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8005adc:	2309      	movs	r3, #9
 8005ade:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	68db      	ldr	r3, [r3, #12]
 8005ae4:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	68da      	ldr	r2, [r3, #12]
 8005af0:	697b      	ldr	r3, [r7, #20]
 8005af2:	029b      	lsls	r3, r3, #10
 8005af4:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8005af8:	431a      	orrs	r2, r3
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005afe:	2300      	movs	r3, #0
}
 8005b00:	4618      	mov	r0, r3
 8005b02:	371c      	adds	r7, #28
 8005b04:	46bd      	mov	sp, r7
 8005b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b0a:	4770      	bx	lr
 8005b0c:	00d8acbf 	.word	0x00d8acbf
 8005b10:	00e4e1c0 	.word	0x00e4e1c0
 8005b14:	00f42400 	.word	0x00f42400
 8005b18:	01067380 	.word	0x01067380
 8005b1c:	011a499f 	.word	0x011a499f
 8005b20:	01312cff 	.word	0x01312cff
 8005b24:	014ca43f 	.word	0x014ca43f
 8005b28:	016e3600 	.word	0x016e3600
 8005b2c:	01a6ab1f 	.word	0x01a6ab1f
 8005b30:	01e84800 	.word	0x01e84800

08005b34 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005b34:	b480      	push	{r7}
 8005b36:	b083      	sub	sp, #12
 8005b38:	af00      	add	r7, sp, #0
 8005b3a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	689b      	ldr	r3, [r3, #8]
 8005b40:	f043 0201 	orr.w	r2, r3, #1
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005b48:	2300      	movs	r3, #0
}
 8005b4a:	4618      	mov	r0, r3
 8005b4c:	370c      	adds	r7, #12
 8005b4e:	46bd      	mov	sp, r7
 8005b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b54:	4770      	bx	lr

08005b56 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005b56:	b480      	push	{r7}
 8005b58:	b083      	sub	sp, #12
 8005b5a:	af00      	add	r7, sp, #0
 8005b5c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	689b      	ldr	r3, [r3, #8]
 8005b62:	f023 0201 	bic.w	r2, r3, #1
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005b6a:	2300      	movs	r3, #0
}
 8005b6c:	4618      	mov	r0, r3
 8005b6e:	370c      	adds	r7, #12
 8005b70:	46bd      	mov	sp, r7
 8005b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b76:	4770      	bx	lr

08005b78 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005b78:	b580      	push	{r7, lr}
 8005b7a:	b084      	sub	sp, #16
 8005b7c:	af00      	add	r7, sp, #0
 8005b7e:	6078      	str	r0, [r7, #4]
 8005b80:	460b      	mov	r3, r1
 8005b82:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005b84:	2300      	movs	r3, #0
 8005b86:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	68db      	ldr	r3, [r3, #12]
 8005b8c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005b94:	78fb      	ldrb	r3, [r7, #3]
 8005b96:	2b01      	cmp	r3, #1
 8005b98:	d115      	bne.n	8005bc6 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	68db      	ldr	r3, [r3, #12]
 8005b9e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005ba6:	2001      	movs	r0, #1
 8005ba8:	f7fb fd9e 	bl	80016e8 <HAL_Delay>
      ms++;
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	3301      	adds	r3, #1
 8005bb0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8005bb2:	6878      	ldr	r0, [r7, #4]
 8005bb4:	f001 fa45 	bl	8007042 <USB_GetMode>
 8005bb8:	4603      	mov	r3, r0
 8005bba:	2b01      	cmp	r3, #1
 8005bbc:	d01e      	beq.n	8005bfc <USB_SetCurrentMode+0x84>
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	2b31      	cmp	r3, #49	; 0x31
 8005bc2:	d9f0      	bls.n	8005ba6 <USB_SetCurrentMode+0x2e>
 8005bc4:	e01a      	b.n	8005bfc <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005bc6:	78fb      	ldrb	r3, [r7, #3]
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d115      	bne.n	8005bf8 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	68db      	ldr	r3, [r3, #12]
 8005bd0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005bd8:	2001      	movs	r0, #1
 8005bda:	f7fb fd85 	bl	80016e8 <HAL_Delay>
      ms++;
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	3301      	adds	r3, #1
 8005be2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8005be4:	6878      	ldr	r0, [r7, #4]
 8005be6:	f001 fa2c 	bl	8007042 <USB_GetMode>
 8005bea:	4603      	mov	r3, r0
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d005      	beq.n	8005bfc <USB_SetCurrentMode+0x84>
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	2b31      	cmp	r3, #49	; 0x31
 8005bf4:	d9f0      	bls.n	8005bd8 <USB_SetCurrentMode+0x60>
 8005bf6:	e001      	b.n	8005bfc <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005bf8:	2301      	movs	r3, #1
 8005bfa:	e005      	b.n	8005c08 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	2b32      	cmp	r3, #50	; 0x32
 8005c00:	d101      	bne.n	8005c06 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005c02:	2301      	movs	r3, #1
 8005c04:	e000      	b.n	8005c08 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005c06:	2300      	movs	r3, #0
}
 8005c08:	4618      	mov	r0, r3
 8005c0a:	3710      	adds	r7, #16
 8005c0c:	46bd      	mov	sp, r7
 8005c0e:	bd80      	pop	{r7, pc}

08005c10 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005c10:	b084      	sub	sp, #16
 8005c12:	b580      	push	{r7, lr}
 8005c14:	b086      	sub	sp, #24
 8005c16:	af00      	add	r7, sp, #0
 8005c18:	6078      	str	r0, [r7, #4]
 8005c1a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005c1e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005c22:	2300      	movs	r3, #0
 8005c24:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005c2a:	2300      	movs	r3, #0
 8005c2c:	613b      	str	r3, [r7, #16]
 8005c2e:	e009      	b.n	8005c44 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005c30:	687a      	ldr	r2, [r7, #4]
 8005c32:	693b      	ldr	r3, [r7, #16]
 8005c34:	3340      	adds	r3, #64	; 0x40
 8005c36:	009b      	lsls	r3, r3, #2
 8005c38:	4413      	add	r3, r2
 8005c3a:	2200      	movs	r2, #0
 8005c3c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005c3e:	693b      	ldr	r3, [r7, #16]
 8005c40:	3301      	adds	r3, #1
 8005c42:	613b      	str	r3, [r7, #16]
 8005c44:	693b      	ldr	r3, [r7, #16]
 8005c46:	2b0e      	cmp	r3, #14
 8005c48:	d9f2      	bls.n	8005c30 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005c4a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d11c      	bne.n	8005c8a <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c56:	685b      	ldr	r3, [r3, #4]
 8005c58:	68fa      	ldr	r2, [r7, #12]
 8005c5a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005c5e:	f043 0302 	orr.w	r3, r3, #2
 8005c62:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c68:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c74:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c80:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	639a      	str	r2, [r3, #56]	; 0x38
 8005c88:	e00b      	b.n	8005ca2 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c8e:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c9a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005ca8:	461a      	mov	r2, r3
 8005caa:	2300      	movs	r3, #0
 8005cac:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005cb4:	4619      	mov	r1, r3
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005cbc:	461a      	mov	r2, r3
 8005cbe:	680b      	ldr	r3, [r1, #0]
 8005cc0:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005cc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cc4:	2b01      	cmp	r3, #1
 8005cc6:	d10c      	bne.n	8005ce2 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005cc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d104      	bne.n	8005cd8 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005cce:	2100      	movs	r1, #0
 8005cd0:	6878      	ldr	r0, [r7, #4]
 8005cd2:	f000 f965 	bl	8005fa0 <USB_SetDevSpeed>
 8005cd6:	e008      	b.n	8005cea <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005cd8:	2101      	movs	r1, #1
 8005cda:	6878      	ldr	r0, [r7, #4]
 8005cdc:	f000 f960 	bl	8005fa0 <USB_SetDevSpeed>
 8005ce0:	e003      	b.n	8005cea <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005ce2:	2103      	movs	r1, #3
 8005ce4:	6878      	ldr	r0, [r7, #4]
 8005ce6:	f000 f95b 	bl	8005fa0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005cea:	2110      	movs	r1, #16
 8005cec:	6878      	ldr	r0, [r7, #4]
 8005cee:	f000 f8f3 	bl	8005ed8 <USB_FlushTxFifo>
 8005cf2:	4603      	mov	r3, r0
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d001      	beq.n	8005cfc <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8005cf8:	2301      	movs	r3, #1
 8005cfa:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005cfc:	6878      	ldr	r0, [r7, #4]
 8005cfe:	f000 f91f 	bl	8005f40 <USB_FlushRxFifo>
 8005d02:	4603      	mov	r3, r0
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d001      	beq.n	8005d0c <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8005d08:	2301      	movs	r3, #1
 8005d0a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d12:	461a      	mov	r2, r3
 8005d14:	2300      	movs	r3, #0
 8005d16:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d1e:	461a      	mov	r2, r3
 8005d20:	2300      	movs	r3, #0
 8005d22:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d2a:	461a      	mov	r2, r3
 8005d2c:	2300      	movs	r3, #0
 8005d2e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005d30:	2300      	movs	r3, #0
 8005d32:	613b      	str	r3, [r7, #16]
 8005d34:	e043      	b.n	8005dbe <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005d36:	693b      	ldr	r3, [r7, #16]
 8005d38:	015a      	lsls	r2, r3, #5
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	4413      	add	r3, r2
 8005d3e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005d48:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005d4c:	d118      	bne.n	8005d80 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8005d4e:	693b      	ldr	r3, [r7, #16]
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d10a      	bne.n	8005d6a <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005d54:	693b      	ldr	r3, [r7, #16]
 8005d56:	015a      	lsls	r2, r3, #5
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	4413      	add	r3, r2
 8005d5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d60:	461a      	mov	r2, r3
 8005d62:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005d66:	6013      	str	r3, [r2, #0]
 8005d68:	e013      	b.n	8005d92 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005d6a:	693b      	ldr	r3, [r7, #16]
 8005d6c:	015a      	lsls	r2, r3, #5
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	4413      	add	r3, r2
 8005d72:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d76:	461a      	mov	r2, r3
 8005d78:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005d7c:	6013      	str	r3, [r2, #0]
 8005d7e:	e008      	b.n	8005d92 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005d80:	693b      	ldr	r3, [r7, #16]
 8005d82:	015a      	lsls	r2, r3, #5
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	4413      	add	r3, r2
 8005d88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d8c:	461a      	mov	r2, r3
 8005d8e:	2300      	movs	r3, #0
 8005d90:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005d92:	693b      	ldr	r3, [r7, #16]
 8005d94:	015a      	lsls	r2, r3, #5
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	4413      	add	r3, r2
 8005d9a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d9e:	461a      	mov	r2, r3
 8005da0:	2300      	movs	r3, #0
 8005da2:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005da4:	693b      	ldr	r3, [r7, #16]
 8005da6:	015a      	lsls	r2, r3, #5
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	4413      	add	r3, r2
 8005dac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005db0:	461a      	mov	r2, r3
 8005db2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005db6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005db8:	693b      	ldr	r3, [r7, #16]
 8005dba:	3301      	adds	r3, #1
 8005dbc:	613b      	str	r3, [r7, #16]
 8005dbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dc0:	693a      	ldr	r2, [r7, #16]
 8005dc2:	429a      	cmp	r2, r3
 8005dc4:	d3b7      	bcc.n	8005d36 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005dc6:	2300      	movs	r3, #0
 8005dc8:	613b      	str	r3, [r7, #16]
 8005dca:	e043      	b.n	8005e54 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005dcc:	693b      	ldr	r3, [r7, #16]
 8005dce:	015a      	lsls	r2, r3, #5
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	4413      	add	r3, r2
 8005dd4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005dde:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005de2:	d118      	bne.n	8005e16 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8005de4:	693b      	ldr	r3, [r7, #16]
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d10a      	bne.n	8005e00 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005dea:	693b      	ldr	r3, [r7, #16]
 8005dec:	015a      	lsls	r2, r3, #5
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	4413      	add	r3, r2
 8005df2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005df6:	461a      	mov	r2, r3
 8005df8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005dfc:	6013      	str	r3, [r2, #0]
 8005dfe:	e013      	b.n	8005e28 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005e00:	693b      	ldr	r3, [r7, #16]
 8005e02:	015a      	lsls	r2, r3, #5
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	4413      	add	r3, r2
 8005e08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e0c:	461a      	mov	r2, r3
 8005e0e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005e12:	6013      	str	r3, [r2, #0]
 8005e14:	e008      	b.n	8005e28 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005e16:	693b      	ldr	r3, [r7, #16]
 8005e18:	015a      	lsls	r2, r3, #5
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	4413      	add	r3, r2
 8005e1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e22:	461a      	mov	r2, r3
 8005e24:	2300      	movs	r3, #0
 8005e26:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005e28:	693b      	ldr	r3, [r7, #16]
 8005e2a:	015a      	lsls	r2, r3, #5
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	4413      	add	r3, r2
 8005e30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e34:	461a      	mov	r2, r3
 8005e36:	2300      	movs	r3, #0
 8005e38:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005e3a:	693b      	ldr	r3, [r7, #16]
 8005e3c:	015a      	lsls	r2, r3, #5
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	4413      	add	r3, r2
 8005e42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e46:	461a      	mov	r2, r3
 8005e48:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005e4c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005e4e:	693b      	ldr	r3, [r7, #16]
 8005e50:	3301      	adds	r3, #1
 8005e52:	613b      	str	r3, [r7, #16]
 8005e54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e56:	693a      	ldr	r2, [r7, #16]
 8005e58:	429a      	cmp	r2, r3
 8005e5a:	d3b7      	bcc.n	8005dcc <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e62:	691b      	ldr	r3, [r3, #16]
 8005e64:	68fa      	ldr	r2, [r7, #12]
 8005e66:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005e6a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005e6e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	2200      	movs	r2, #0
 8005e74:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005e7c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005e7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d105      	bne.n	8005e90 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	699b      	ldr	r3, [r3, #24]
 8005e88:	f043 0210 	orr.w	r2, r3, #16
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	699a      	ldr	r2, [r3, #24]
 8005e94:	4b0f      	ldr	r3, [pc, #60]	; (8005ed4 <USB_DevInit+0x2c4>)
 8005e96:	4313      	orrs	r3, r2
 8005e98:	687a      	ldr	r2, [r7, #4]
 8005e9a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005e9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d005      	beq.n	8005eae <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	699b      	ldr	r3, [r3, #24]
 8005ea6:	f043 0208 	orr.w	r2, r3, #8
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005eae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005eb0:	2b01      	cmp	r3, #1
 8005eb2:	d107      	bne.n	8005ec4 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	699b      	ldr	r3, [r3, #24]
 8005eb8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005ebc:	f043 0304 	orr.w	r3, r3, #4
 8005ec0:	687a      	ldr	r2, [r7, #4]
 8005ec2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005ec4:	7dfb      	ldrb	r3, [r7, #23]
}
 8005ec6:	4618      	mov	r0, r3
 8005ec8:	3718      	adds	r7, #24
 8005eca:	46bd      	mov	sp, r7
 8005ecc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005ed0:	b004      	add	sp, #16
 8005ed2:	4770      	bx	lr
 8005ed4:	803c3800 	.word	0x803c3800

08005ed8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005ed8:	b480      	push	{r7}
 8005eda:	b085      	sub	sp, #20
 8005edc:	af00      	add	r7, sp, #0
 8005ede:	6078      	str	r0, [r7, #4]
 8005ee0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005ee2:	2300      	movs	r3, #0
 8005ee4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	3301      	adds	r3, #1
 8005eea:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	4a13      	ldr	r2, [pc, #76]	; (8005f3c <USB_FlushTxFifo+0x64>)
 8005ef0:	4293      	cmp	r3, r2
 8005ef2:	d901      	bls.n	8005ef8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005ef4:	2303      	movs	r3, #3
 8005ef6:	e01b      	b.n	8005f30 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	691b      	ldr	r3, [r3, #16]
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	daf2      	bge.n	8005ee6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005f00:	2300      	movs	r3, #0
 8005f02:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005f04:	683b      	ldr	r3, [r7, #0]
 8005f06:	019b      	lsls	r3, r3, #6
 8005f08:	f043 0220 	orr.w	r2, r3, #32
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	3301      	adds	r3, #1
 8005f14:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	4a08      	ldr	r2, [pc, #32]	; (8005f3c <USB_FlushTxFifo+0x64>)
 8005f1a:	4293      	cmp	r3, r2
 8005f1c:	d901      	bls.n	8005f22 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005f1e:	2303      	movs	r3, #3
 8005f20:	e006      	b.n	8005f30 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	691b      	ldr	r3, [r3, #16]
 8005f26:	f003 0320 	and.w	r3, r3, #32
 8005f2a:	2b20      	cmp	r3, #32
 8005f2c:	d0f0      	beq.n	8005f10 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005f2e:	2300      	movs	r3, #0
}
 8005f30:	4618      	mov	r0, r3
 8005f32:	3714      	adds	r7, #20
 8005f34:	46bd      	mov	sp, r7
 8005f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f3a:	4770      	bx	lr
 8005f3c:	00030d40 	.word	0x00030d40

08005f40 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005f40:	b480      	push	{r7}
 8005f42:	b085      	sub	sp, #20
 8005f44:	af00      	add	r7, sp, #0
 8005f46:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005f48:	2300      	movs	r3, #0
 8005f4a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	3301      	adds	r3, #1
 8005f50:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	4a11      	ldr	r2, [pc, #68]	; (8005f9c <USB_FlushRxFifo+0x5c>)
 8005f56:	4293      	cmp	r3, r2
 8005f58:	d901      	bls.n	8005f5e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005f5a:	2303      	movs	r3, #3
 8005f5c:	e018      	b.n	8005f90 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	691b      	ldr	r3, [r3, #16]
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	daf2      	bge.n	8005f4c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005f66:	2300      	movs	r3, #0
 8005f68:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	2210      	movs	r2, #16
 8005f6e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	3301      	adds	r3, #1
 8005f74:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	4a08      	ldr	r2, [pc, #32]	; (8005f9c <USB_FlushRxFifo+0x5c>)
 8005f7a:	4293      	cmp	r3, r2
 8005f7c:	d901      	bls.n	8005f82 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005f7e:	2303      	movs	r3, #3
 8005f80:	e006      	b.n	8005f90 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	691b      	ldr	r3, [r3, #16]
 8005f86:	f003 0310 	and.w	r3, r3, #16
 8005f8a:	2b10      	cmp	r3, #16
 8005f8c:	d0f0      	beq.n	8005f70 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005f8e:	2300      	movs	r3, #0
}
 8005f90:	4618      	mov	r0, r3
 8005f92:	3714      	adds	r7, #20
 8005f94:	46bd      	mov	sp, r7
 8005f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f9a:	4770      	bx	lr
 8005f9c:	00030d40 	.word	0x00030d40

08005fa0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005fa0:	b480      	push	{r7}
 8005fa2:	b085      	sub	sp, #20
 8005fa4:	af00      	add	r7, sp, #0
 8005fa6:	6078      	str	r0, [r7, #4]
 8005fa8:	460b      	mov	r3, r1
 8005faa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005fb6:	681a      	ldr	r2, [r3, #0]
 8005fb8:	78fb      	ldrb	r3, [r7, #3]
 8005fba:	68f9      	ldr	r1, [r7, #12]
 8005fbc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005fc0:	4313      	orrs	r3, r2
 8005fc2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005fc4:	2300      	movs	r3, #0
}
 8005fc6:	4618      	mov	r0, r3
 8005fc8:	3714      	adds	r7, #20
 8005fca:	46bd      	mov	sp, r7
 8005fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd0:	4770      	bx	lr

08005fd2 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8005fd2:	b480      	push	{r7}
 8005fd4:	b087      	sub	sp, #28
 8005fd6:	af00      	add	r7, sp, #0
 8005fd8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8005fde:	693b      	ldr	r3, [r7, #16]
 8005fe0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005fe4:	689b      	ldr	r3, [r3, #8]
 8005fe6:	f003 0306 	and.w	r3, r3, #6
 8005fea:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d102      	bne.n	8005ff8 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8005ff2:	2300      	movs	r3, #0
 8005ff4:	75fb      	strb	r3, [r7, #23]
 8005ff6:	e00a      	b.n	800600e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	2b02      	cmp	r3, #2
 8005ffc:	d002      	beq.n	8006004 <USB_GetDevSpeed+0x32>
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	2b06      	cmp	r3, #6
 8006002:	d102      	bne.n	800600a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8006004:	2302      	movs	r3, #2
 8006006:	75fb      	strb	r3, [r7, #23]
 8006008:	e001      	b.n	800600e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800600a:	230f      	movs	r3, #15
 800600c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800600e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006010:	4618      	mov	r0, r3
 8006012:	371c      	adds	r7, #28
 8006014:	46bd      	mov	sp, r7
 8006016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800601a:	4770      	bx	lr

0800601c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800601c:	b480      	push	{r7}
 800601e:	b085      	sub	sp, #20
 8006020:	af00      	add	r7, sp, #0
 8006022:	6078      	str	r0, [r7, #4]
 8006024:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800602a:	683b      	ldr	r3, [r7, #0]
 800602c:	781b      	ldrb	r3, [r3, #0]
 800602e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006030:	683b      	ldr	r3, [r7, #0]
 8006032:	785b      	ldrb	r3, [r3, #1]
 8006034:	2b01      	cmp	r3, #1
 8006036:	d13a      	bne.n	80060ae <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800603e:	69da      	ldr	r2, [r3, #28]
 8006040:	683b      	ldr	r3, [r7, #0]
 8006042:	781b      	ldrb	r3, [r3, #0]
 8006044:	f003 030f 	and.w	r3, r3, #15
 8006048:	2101      	movs	r1, #1
 800604a:	fa01 f303 	lsl.w	r3, r1, r3
 800604e:	b29b      	uxth	r3, r3
 8006050:	68f9      	ldr	r1, [r7, #12]
 8006052:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006056:	4313      	orrs	r3, r2
 8006058:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800605a:	68bb      	ldr	r3, [r7, #8]
 800605c:	015a      	lsls	r2, r3, #5
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	4413      	add	r3, r2
 8006062:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800606c:	2b00      	cmp	r3, #0
 800606e:	d155      	bne.n	800611c <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006070:	68bb      	ldr	r3, [r7, #8]
 8006072:	015a      	lsls	r2, r3, #5
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	4413      	add	r3, r2
 8006078:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800607c:	681a      	ldr	r2, [r3, #0]
 800607e:	683b      	ldr	r3, [r7, #0]
 8006080:	68db      	ldr	r3, [r3, #12]
 8006082:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006086:	683b      	ldr	r3, [r7, #0]
 8006088:	791b      	ldrb	r3, [r3, #4]
 800608a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800608c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800608e:	68bb      	ldr	r3, [r7, #8]
 8006090:	059b      	lsls	r3, r3, #22
 8006092:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006094:	4313      	orrs	r3, r2
 8006096:	68ba      	ldr	r2, [r7, #8]
 8006098:	0151      	lsls	r1, r2, #5
 800609a:	68fa      	ldr	r2, [r7, #12]
 800609c:	440a      	add	r2, r1
 800609e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80060a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80060a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80060aa:	6013      	str	r3, [r2, #0]
 80060ac:	e036      	b.n	800611c <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80060b4:	69da      	ldr	r2, [r3, #28]
 80060b6:	683b      	ldr	r3, [r7, #0]
 80060b8:	781b      	ldrb	r3, [r3, #0]
 80060ba:	f003 030f 	and.w	r3, r3, #15
 80060be:	2101      	movs	r1, #1
 80060c0:	fa01 f303 	lsl.w	r3, r1, r3
 80060c4:	041b      	lsls	r3, r3, #16
 80060c6:	68f9      	ldr	r1, [r7, #12]
 80060c8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80060cc:	4313      	orrs	r3, r2
 80060ce:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80060d0:	68bb      	ldr	r3, [r7, #8]
 80060d2:	015a      	lsls	r2, r3, #5
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	4413      	add	r3, r2
 80060d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d11a      	bne.n	800611c <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80060e6:	68bb      	ldr	r3, [r7, #8]
 80060e8:	015a      	lsls	r2, r3, #5
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	4413      	add	r3, r2
 80060ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060f2:	681a      	ldr	r2, [r3, #0]
 80060f4:	683b      	ldr	r3, [r7, #0]
 80060f6:	68db      	ldr	r3, [r3, #12]
 80060f8:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80060fc:	683b      	ldr	r3, [r7, #0]
 80060fe:	791b      	ldrb	r3, [r3, #4]
 8006100:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006102:	430b      	orrs	r3, r1
 8006104:	4313      	orrs	r3, r2
 8006106:	68ba      	ldr	r2, [r7, #8]
 8006108:	0151      	lsls	r1, r2, #5
 800610a:	68fa      	ldr	r2, [r7, #12]
 800610c:	440a      	add	r2, r1
 800610e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006112:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006116:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800611a:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800611c:	2300      	movs	r3, #0
}
 800611e:	4618      	mov	r0, r3
 8006120:	3714      	adds	r7, #20
 8006122:	46bd      	mov	sp, r7
 8006124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006128:	4770      	bx	lr
	...

0800612c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800612c:	b480      	push	{r7}
 800612e:	b085      	sub	sp, #20
 8006130:	af00      	add	r7, sp, #0
 8006132:	6078      	str	r0, [r7, #4]
 8006134:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800613a:	683b      	ldr	r3, [r7, #0]
 800613c:	781b      	ldrb	r3, [r3, #0]
 800613e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8006140:	683b      	ldr	r3, [r7, #0]
 8006142:	785b      	ldrb	r3, [r3, #1]
 8006144:	2b01      	cmp	r3, #1
 8006146:	d161      	bne.n	800620c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006148:	68bb      	ldr	r3, [r7, #8]
 800614a:	015a      	lsls	r2, r3, #5
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	4413      	add	r3, r2
 8006150:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800615a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800615e:	d11f      	bne.n	80061a0 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8006160:	68bb      	ldr	r3, [r7, #8]
 8006162:	015a      	lsls	r2, r3, #5
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	4413      	add	r3, r2
 8006168:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	68ba      	ldr	r2, [r7, #8]
 8006170:	0151      	lsls	r1, r2, #5
 8006172:	68fa      	ldr	r2, [r7, #12]
 8006174:	440a      	add	r2, r1
 8006176:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800617a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800617e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8006180:	68bb      	ldr	r3, [r7, #8]
 8006182:	015a      	lsls	r2, r3, #5
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	4413      	add	r3, r2
 8006188:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	68ba      	ldr	r2, [r7, #8]
 8006190:	0151      	lsls	r1, r2, #5
 8006192:	68fa      	ldr	r2, [r7, #12]
 8006194:	440a      	add	r2, r1
 8006196:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800619a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800619e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80061a6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80061a8:	683b      	ldr	r3, [r7, #0]
 80061aa:	781b      	ldrb	r3, [r3, #0]
 80061ac:	f003 030f 	and.w	r3, r3, #15
 80061b0:	2101      	movs	r1, #1
 80061b2:	fa01 f303 	lsl.w	r3, r1, r3
 80061b6:	b29b      	uxth	r3, r3
 80061b8:	43db      	mvns	r3, r3
 80061ba:	68f9      	ldr	r1, [r7, #12]
 80061bc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80061c0:	4013      	ands	r3, r2
 80061c2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80061ca:	69da      	ldr	r2, [r3, #28]
 80061cc:	683b      	ldr	r3, [r7, #0]
 80061ce:	781b      	ldrb	r3, [r3, #0]
 80061d0:	f003 030f 	and.w	r3, r3, #15
 80061d4:	2101      	movs	r1, #1
 80061d6:	fa01 f303 	lsl.w	r3, r1, r3
 80061da:	b29b      	uxth	r3, r3
 80061dc:	43db      	mvns	r3, r3
 80061de:	68f9      	ldr	r1, [r7, #12]
 80061e0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80061e4:	4013      	ands	r3, r2
 80061e6:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80061e8:	68bb      	ldr	r3, [r7, #8]
 80061ea:	015a      	lsls	r2, r3, #5
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	4413      	add	r3, r2
 80061f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061f4:	681a      	ldr	r2, [r3, #0]
 80061f6:	68bb      	ldr	r3, [r7, #8]
 80061f8:	0159      	lsls	r1, r3, #5
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	440b      	add	r3, r1
 80061fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006202:	4619      	mov	r1, r3
 8006204:	4b35      	ldr	r3, [pc, #212]	; (80062dc <USB_DeactivateEndpoint+0x1b0>)
 8006206:	4013      	ands	r3, r2
 8006208:	600b      	str	r3, [r1, #0]
 800620a:	e060      	b.n	80062ce <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800620c:	68bb      	ldr	r3, [r7, #8]
 800620e:	015a      	lsls	r2, r3, #5
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	4413      	add	r3, r2
 8006214:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800621e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006222:	d11f      	bne.n	8006264 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8006224:	68bb      	ldr	r3, [r7, #8]
 8006226:	015a      	lsls	r2, r3, #5
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	4413      	add	r3, r2
 800622c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	68ba      	ldr	r2, [r7, #8]
 8006234:	0151      	lsls	r1, r2, #5
 8006236:	68fa      	ldr	r2, [r7, #12]
 8006238:	440a      	add	r2, r1
 800623a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800623e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006242:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8006244:	68bb      	ldr	r3, [r7, #8]
 8006246:	015a      	lsls	r2, r3, #5
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	4413      	add	r3, r2
 800624c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	68ba      	ldr	r2, [r7, #8]
 8006254:	0151      	lsls	r1, r2, #5
 8006256:	68fa      	ldr	r2, [r7, #12]
 8006258:	440a      	add	r2, r1
 800625a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800625e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006262:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800626a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800626c:	683b      	ldr	r3, [r7, #0]
 800626e:	781b      	ldrb	r3, [r3, #0]
 8006270:	f003 030f 	and.w	r3, r3, #15
 8006274:	2101      	movs	r1, #1
 8006276:	fa01 f303 	lsl.w	r3, r1, r3
 800627a:	041b      	lsls	r3, r3, #16
 800627c:	43db      	mvns	r3, r3
 800627e:	68f9      	ldr	r1, [r7, #12]
 8006280:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006284:	4013      	ands	r3, r2
 8006286:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800628e:	69da      	ldr	r2, [r3, #28]
 8006290:	683b      	ldr	r3, [r7, #0]
 8006292:	781b      	ldrb	r3, [r3, #0]
 8006294:	f003 030f 	and.w	r3, r3, #15
 8006298:	2101      	movs	r1, #1
 800629a:	fa01 f303 	lsl.w	r3, r1, r3
 800629e:	041b      	lsls	r3, r3, #16
 80062a0:	43db      	mvns	r3, r3
 80062a2:	68f9      	ldr	r1, [r7, #12]
 80062a4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80062a8:	4013      	ands	r3, r2
 80062aa:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80062ac:	68bb      	ldr	r3, [r7, #8]
 80062ae:	015a      	lsls	r2, r3, #5
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	4413      	add	r3, r2
 80062b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062b8:	681a      	ldr	r2, [r3, #0]
 80062ba:	68bb      	ldr	r3, [r7, #8]
 80062bc:	0159      	lsls	r1, r3, #5
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	440b      	add	r3, r1
 80062c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062c6:	4619      	mov	r1, r3
 80062c8:	4b05      	ldr	r3, [pc, #20]	; (80062e0 <USB_DeactivateEndpoint+0x1b4>)
 80062ca:	4013      	ands	r3, r2
 80062cc:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80062ce:	2300      	movs	r3, #0
}
 80062d0:	4618      	mov	r0, r3
 80062d2:	3714      	adds	r7, #20
 80062d4:	46bd      	mov	sp, r7
 80062d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062da:	4770      	bx	lr
 80062dc:	ec337800 	.word	0xec337800
 80062e0:	eff37800 	.word	0xeff37800

080062e4 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80062e4:	b580      	push	{r7, lr}
 80062e6:	b08a      	sub	sp, #40	; 0x28
 80062e8:	af02      	add	r7, sp, #8
 80062ea:	60f8      	str	r0, [r7, #12]
 80062ec:	60b9      	str	r1, [r7, #8]
 80062ee:	4613      	mov	r3, r2
 80062f0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80062f6:	68bb      	ldr	r3, [r7, #8]
 80062f8:	781b      	ldrb	r3, [r3, #0]
 80062fa:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80062fc:	68bb      	ldr	r3, [r7, #8]
 80062fe:	785b      	ldrb	r3, [r3, #1]
 8006300:	2b01      	cmp	r3, #1
 8006302:	f040 815c 	bne.w	80065be <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8006306:	68bb      	ldr	r3, [r7, #8]
 8006308:	699b      	ldr	r3, [r3, #24]
 800630a:	2b00      	cmp	r3, #0
 800630c:	d132      	bne.n	8006374 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800630e:	69bb      	ldr	r3, [r7, #24]
 8006310:	015a      	lsls	r2, r3, #5
 8006312:	69fb      	ldr	r3, [r7, #28]
 8006314:	4413      	add	r3, r2
 8006316:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800631a:	691b      	ldr	r3, [r3, #16]
 800631c:	69ba      	ldr	r2, [r7, #24]
 800631e:	0151      	lsls	r1, r2, #5
 8006320:	69fa      	ldr	r2, [r7, #28]
 8006322:	440a      	add	r2, r1
 8006324:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006328:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800632c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006330:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006332:	69bb      	ldr	r3, [r7, #24]
 8006334:	015a      	lsls	r2, r3, #5
 8006336:	69fb      	ldr	r3, [r7, #28]
 8006338:	4413      	add	r3, r2
 800633a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800633e:	691b      	ldr	r3, [r3, #16]
 8006340:	69ba      	ldr	r2, [r7, #24]
 8006342:	0151      	lsls	r1, r2, #5
 8006344:	69fa      	ldr	r2, [r7, #28]
 8006346:	440a      	add	r2, r1
 8006348:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800634c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006350:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006352:	69bb      	ldr	r3, [r7, #24]
 8006354:	015a      	lsls	r2, r3, #5
 8006356:	69fb      	ldr	r3, [r7, #28]
 8006358:	4413      	add	r3, r2
 800635a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800635e:	691b      	ldr	r3, [r3, #16]
 8006360:	69ba      	ldr	r2, [r7, #24]
 8006362:	0151      	lsls	r1, r2, #5
 8006364:	69fa      	ldr	r2, [r7, #28]
 8006366:	440a      	add	r2, r1
 8006368:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800636c:	0cdb      	lsrs	r3, r3, #19
 800636e:	04db      	lsls	r3, r3, #19
 8006370:	6113      	str	r3, [r2, #16]
 8006372:	e074      	b.n	800645e <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006374:	69bb      	ldr	r3, [r7, #24]
 8006376:	015a      	lsls	r2, r3, #5
 8006378:	69fb      	ldr	r3, [r7, #28]
 800637a:	4413      	add	r3, r2
 800637c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006380:	691b      	ldr	r3, [r3, #16]
 8006382:	69ba      	ldr	r2, [r7, #24]
 8006384:	0151      	lsls	r1, r2, #5
 8006386:	69fa      	ldr	r2, [r7, #28]
 8006388:	440a      	add	r2, r1
 800638a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800638e:	0cdb      	lsrs	r3, r3, #19
 8006390:	04db      	lsls	r3, r3, #19
 8006392:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006394:	69bb      	ldr	r3, [r7, #24]
 8006396:	015a      	lsls	r2, r3, #5
 8006398:	69fb      	ldr	r3, [r7, #28]
 800639a:	4413      	add	r3, r2
 800639c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063a0:	691b      	ldr	r3, [r3, #16]
 80063a2:	69ba      	ldr	r2, [r7, #24]
 80063a4:	0151      	lsls	r1, r2, #5
 80063a6:	69fa      	ldr	r2, [r7, #28]
 80063a8:	440a      	add	r2, r1
 80063aa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80063ae:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80063b2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80063b6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80063b8:	69bb      	ldr	r3, [r7, #24]
 80063ba:	015a      	lsls	r2, r3, #5
 80063bc:	69fb      	ldr	r3, [r7, #28]
 80063be:	4413      	add	r3, r2
 80063c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063c4:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80063c6:	68bb      	ldr	r3, [r7, #8]
 80063c8:	6999      	ldr	r1, [r3, #24]
 80063ca:	68bb      	ldr	r3, [r7, #8]
 80063cc:	68db      	ldr	r3, [r3, #12]
 80063ce:	440b      	add	r3, r1
 80063d0:	1e59      	subs	r1, r3, #1
 80063d2:	68bb      	ldr	r3, [r7, #8]
 80063d4:	68db      	ldr	r3, [r3, #12]
 80063d6:	fbb1 f3f3 	udiv	r3, r1, r3
 80063da:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80063dc:	4b9d      	ldr	r3, [pc, #628]	; (8006654 <USB_EPStartXfer+0x370>)
 80063de:	400b      	ands	r3, r1
 80063e0:	69b9      	ldr	r1, [r7, #24]
 80063e2:	0148      	lsls	r0, r1, #5
 80063e4:	69f9      	ldr	r1, [r7, #28]
 80063e6:	4401      	add	r1, r0
 80063e8:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80063ec:	4313      	orrs	r3, r2
 80063ee:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80063f0:	69bb      	ldr	r3, [r7, #24]
 80063f2:	015a      	lsls	r2, r3, #5
 80063f4:	69fb      	ldr	r3, [r7, #28]
 80063f6:	4413      	add	r3, r2
 80063f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063fc:	691a      	ldr	r2, [r3, #16]
 80063fe:	68bb      	ldr	r3, [r7, #8]
 8006400:	699b      	ldr	r3, [r3, #24]
 8006402:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006406:	69b9      	ldr	r1, [r7, #24]
 8006408:	0148      	lsls	r0, r1, #5
 800640a:	69f9      	ldr	r1, [r7, #28]
 800640c:	4401      	add	r1, r0
 800640e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006412:	4313      	orrs	r3, r2
 8006414:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8006416:	68bb      	ldr	r3, [r7, #8]
 8006418:	791b      	ldrb	r3, [r3, #4]
 800641a:	2b01      	cmp	r3, #1
 800641c:	d11f      	bne.n	800645e <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800641e:	69bb      	ldr	r3, [r7, #24]
 8006420:	015a      	lsls	r2, r3, #5
 8006422:	69fb      	ldr	r3, [r7, #28]
 8006424:	4413      	add	r3, r2
 8006426:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800642a:	691b      	ldr	r3, [r3, #16]
 800642c:	69ba      	ldr	r2, [r7, #24]
 800642e:	0151      	lsls	r1, r2, #5
 8006430:	69fa      	ldr	r2, [r7, #28]
 8006432:	440a      	add	r2, r1
 8006434:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006438:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800643c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800643e:	69bb      	ldr	r3, [r7, #24]
 8006440:	015a      	lsls	r2, r3, #5
 8006442:	69fb      	ldr	r3, [r7, #28]
 8006444:	4413      	add	r3, r2
 8006446:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800644a:	691b      	ldr	r3, [r3, #16]
 800644c:	69ba      	ldr	r2, [r7, #24]
 800644e:	0151      	lsls	r1, r2, #5
 8006450:	69fa      	ldr	r2, [r7, #28]
 8006452:	440a      	add	r2, r1
 8006454:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006458:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800645c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800645e:	79fb      	ldrb	r3, [r7, #7]
 8006460:	2b01      	cmp	r3, #1
 8006462:	d14b      	bne.n	80064fc <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006464:	68bb      	ldr	r3, [r7, #8]
 8006466:	695b      	ldr	r3, [r3, #20]
 8006468:	2b00      	cmp	r3, #0
 800646a:	d009      	beq.n	8006480 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800646c:	69bb      	ldr	r3, [r7, #24]
 800646e:	015a      	lsls	r2, r3, #5
 8006470:	69fb      	ldr	r3, [r7, #28]
 8006472:	4413      	add	r3, r2
 8006474:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006478:	461a      	mov	r2, r3
 800647a:	68bb      	ldr	r3, [r7, #8]
 800647c:	695b      	ldr	r3, [r3, #20]
 800647e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8006480:	68bb      	ldr	r3, [r7, #8]
 8006482:	791b      	ldrb	r3, [r3, #4]
 8006484:	2b01      	cmp	r3, #1
 8006486:	d128      	bne.n	80064da <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006488:	69fb      	ldr	r3, [r7, #28]
 800648a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800648e:	689b      	ldr	r3, [r3, #8]
 8006490:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006494:	2b00      	cmp	r3, #0
 8006496:	d110      	bne.n	80064ba <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006498:	69bb      	ldr	r3, [r7, #24]
 800649a:	015a      	lsls	r2, r3, #5
 800649c:	69fb      	ldr	r3, [r7, #28]
 800649e:	4413      	add	r3, r2
 80064a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	69ba      	ldr	r2, [r7, #24]
 80064a8:	0151      	lsls	r1, r2, #5
 80064aa:	69fa      	ldr	r2, [r7, #28]
 80064ac:	440a      	add	r2, r1
 80064ae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80064b2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80064b6:	6013      	str	r3, [r2, #0]
 80064b8:	e00f      	b.n	80064da <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80064ba:	69bb      	ldr	r3, [r7, #24]
 80064bc:	015a      	lsls	r2, r3, #5
 80064be:	69fb      	ldr	r3, [r7, #28]
 80064c0:	4413      	add	r3, r2
 80064c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	69ba      	ldr	r2, [r7, #24]
 80064ca:	0151      	lsls	r1, r2, #5
 80064cc:	69fa      	ldr	r2, [r7, #28]
 80064ce:	440a      	add	r2, r1
 80064d0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80064d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80064d8:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80064da:	69bb      	ldr	r3, [r7, #24]
 80064dc:	015a      	lsls	r2, r3, #5
 80064de:	69fb      	ldr	r3, [r7, #28]
 80064e0:	4413      	add	r3, r2
 80064e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	69ba      	ldr	r2, [r7, #24]
 80064ea:	0151      	lsls	r1, r2, #5
 80064ec:	69fa      	ldr	r2, [r7, #28]
 80064ee:	440a      	add	r2, r1
 80064f0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80064f4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80064f8:	6013      	str	r3, [r2, #0]
 80064fa:	e133      	b.n	8006764 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80064fc:	69bb      	ldr	r3, [r7, #24]
 80064fe:	015a      	lsls	r2, r3, #5
 8006500:	69fb      	ldr	r3, [r7, #28]
 8006502:	4413      	add	r3, r2
 8006504:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	69ba      	ldr	r2, [r7, #24]
 800650c:	0151      	lsls	r1, r2, #5
 800650e:	69fa      	ldr	r2, [r7, #28]
 8006510:	440a      	add	r2, r1
 8006512:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006516:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800651a:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800651c:	68bb      	ldr	r3, [r7, #8]
 800651e:	791b      	ldrb	r3, [r3, #4]
 8006520:	2b01      	cmp	r3, #1
 8006522:	d015      	beq.n	8006550 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8006524:	68bb      	ldr	r3, [r7, #8]
 8006526:	699b      	ldr	r3, [r3, #24]
 8006528:	2b00      	cmp	r3, #0
 800652a:	f000 811b 	beq.w	8006764 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800652e:	69fb      	ldr	r3, [r7, #28]
 8006530:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006534:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006536:	68bb      	ldr	r3, [r7, #8]
 8006538:	781b      	ldrb	r3, [r3, #0]
 800653a:	f003 030f 	and.w	r3, r3, #15
 800653e:	2101      	movs	r1, #1
 8006540:	fa01 f303 	lsl.w	r3, r1, r3
 8006544:	69f9      	ldr	r1, [r7, #28]
 8006546:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800654a:	4313      	orrs	r3, r2
 800654c:	634b      	str	r3, [r1, #52]	; 0x34
 800654e:	e109      	b.n	8006764 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006550:	69fb      	ldr	r3, [r7, #28]
 8006552:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006556:	689b      	ldr	r3, [r3, #8]
 8006558:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800655c:	2b00      	cmp	r3, #0
 800655e:	d110      	bne.n	8006582 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006560:	69bb      	ldr	r3, [r7, #24]
 8006562:	015a      	lsls	r2, r3, #5
 8006564:	69fb      	ldr	r3, [r7, #28]
 8006566:	4413      	add	r3, r2
 8006568:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	69ba      	ldr	r2, [r7, #24]
 8006570:	0151      	lsls	r1, r2, #5
 8006572:	69fa      	ldr	r2, [r7, #28]
 8006574:	440a      	add	r2, r1
 8006576:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800657a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800657e:	6013      	str	r3, [r2, #0]
 8006580:	e00f      	b.n	80065a2 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006582:	69bb      	ldr	r3, [r7, #24]
 8006584:	015a      	lsls	r2, r3, #5
 8006586:	69fb      	ldr	r3, [r7, #28]
 8006588:	4413      	add	r3, r2
 800658a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	69ba      	ldr	r2, [r7, #24]
 8006592:	0151      	lsls	r1, r2, #5
 8006594:	69fa      	ldr	r2, [r7, #28]
 8006596:	440a      	add	r2, r1
 8006598:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800659c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80065a0:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80065a2:	68bb      	ldr	r3, [r7, #8]
 80065a4:	6919      	ldr	r1, [r3, #16]
 80065a6:	68bb      	ldr	r3, [r7, #8]
 80065a8:	781a      	ldrb	r2, [r3, #0]
 80065aa:	68bb      	ldr	r3, [r7, #8]
 80065ac:	699b      	ldr	r3, [r3, #24]
 80065ae:	b298      	uxth	r0, r3
 80065b0:	79fb      	ldrb	r3, [r7, #7]
 80065b2:	9300      	str	r3, [sp, #0]
 80065b4:	4603      	mov	r3, r0
 80065b6:	68f8      	ldr	r0, [r7, #12]
 80065b8:	f000 fade 	bl	8006b78 <USB_WritePacket>
 80065bc:	e0d2      	b.n	8006764 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80065be:	69bb      	ldr	r3, [r7, #24]
 80065c0:	015a      	lsls	r2, r3, #5
 80065c2:	69fb      	ldr	r3, [r7, #28]
 80065c4:	4413      	add	r3, r2
 80065c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065ca:	691b      	ldr	r3, [r3, #16]
 80065cc:	69ba      	ldr	r2, [r7, #24]
 80065ce:	0151      	lsls	r1, r2, #5
 80065d0:	69fa      	ldr	r2, [r7, #28]
 80065d2:	440a      	add	r2, r1
 80065d4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80065d8:	0cdb      	lsrs	r3, r3, #19
 80065da:	04db      	lsls	r3, r3, #19
 80065dc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80065de:	69bb      	ldr	r3, [r7, #24]
 80065e0:	015a      	lsls	r2, r3, #5
 80065e2:	69fb      	ldr	r3, [r7, #28]
 80065e4:	4413      	add	r3, r2
 80065e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065ea:	691b      	ldr	r3, [r3, #16]
 80065ec:	69ba      	ldr	r2, [r7, #24]
 80065ee:	0151      	lsls	r1, r2, #5
 80065f0:	69fa      	ldr	r2, [r7, #28]
 80065f2:	440a      	add	r2, r1
 80065f4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80065f8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80065fc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006600:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8006602:	68bb      	ldr	r3, [r7, #8]
 8006604:	699b      	ldr	r3, [r3, #24]
 8006606:	2b00      	cmp	r3, #0
 8006608:	d126      	bne.n	8006658 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800660a:	69bb      	ldr	r3, [r7, #24]
 800660c:	015a      	lsls	r2, r3, #5
 800660e:	69fb      	ldr	r3, [r7, #28]
 8006610:	4413      	add	r3, r2
 8006612:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006616:	691a      	ldr	r2, [r3, #16]
 8006618:	68bb      	ldr	r3, [r7, #8]
 800661a:	68db      	ldr	r3, [r3, #12]
 800661c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006620:	69b9      	ldr	r1, [r7, #24]
 8006622:	0148      	lsls	r0, r1, #5
 8006624:	69f9      	ldr	r1, [r7, #28]
 8006626:	4401      	add	r1, r0
 8006628:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800662c:	4313      	orrs	r3, r2
 800662e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006630:	69bb      	ldr	r3, [r7, #24]
 8006632:	015a      	lsls	r2, r3, #5
 8006634:	69fb      	ldr	r3, [r7, #28]
 8006636:	4413      	add	r3, r2
 8006638:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800663c:	691b      	ldr	r3, [r3, #16]
 800663e:	69ba      	ldr	r2, [r7, #24]
 8006640:	0151      	lsls	r1, r2, #5
 8006642:	69fa      	ldr	r2, [r7, #28]
 8006644:	440a      	add	r2, r1
 8006646:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800664a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800664e:	6113      	str	r3, [r2, #16]
 8006650:	e03a      	b.n	80066c8 <USB_EPStartXfer+0x3e4>
 8006652:	bf00      	nop
 8006654:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8006658:	68bb      	ldr	r3, [r7, #8]
 800665a:	699a      	ldr	r2, [r3, #24]
 800665c:	68bb      	ldr	r3, [r7, #8]
 800665e:	68db      	ldr	r3, [r3, #12]
 8006660:	4413      	add	r3, r2
 8006662:	1e5a      	subs	r2, r3, #1
 8006664:	68bb      	ldr	r3, [r7, #8]
 8006666:	68db      	ldr	r3, [r3, #12]
 8006668:	fbb2 f3f3 	udiv	r3, r2, r3
 800666c:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 800666e:	68bb      	ldr	r3, [r7, #8]
 8006670:	68db      	ldr	r3, [r3, #12]
 8006672:	8afa      	ldrh	r2, [r7, #22]
 8006674:	fb03 f202 	mul.w	r2, r3, r2
 8006678:	68bb      	ldr	r3, [r7, #8]
 800667a:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800667c:	69bb      	ldr	r3, [r7, #24]
 800667e:	015a      	lsls	r2, r3, #5
 8006680:	69fb      	ldr	r3, [r7, #28]
 8006682:	4413      	add	r3, r2
 8006684:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006688:	691a      	ldr	r2, [r3, #16]
 800668a:	8afb      	ldrh	r3, [r7, #22]
 800668c:	04d9      	lsls	r1, r3, #19
 800668e:	4b38      	ldr	r3, [pc, #224]	; (8006770 <USB_EPStartXfer+0x48c>)
 8006690:	400b      	ands	r3, r1
 8006692:	69b9      	ldr	r1, [r7, #24]
 8006694:	0148      	lsls	r0, r1, #5
 8006696:	69f9      	ldr	r1, [r7, #28]
 8006698:	4401      	add	r1, r0
 800669a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800669e:	4313      	orrs	r3, r2
 80066a0:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80066a2:	69bb      	ldr	r3, [r7, #24]
 80066a4:	015a      	lsls	r2, r3, #5
 80066a6:	69fb      	ldr	r3, [r7, #28]
 80066a8:	4413      	add	r3, r2
 80066aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066ae:	691a      	ldr	r2, [r3, #16]
 80066b0:	68bb      	ldr	r3, [r7, #8]
 80066b2:	69db      	ldr	r3, [r3, #28]
 80066b4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80066b8:	69b9      	ldr	r1, [r7, #24]
 80066ba:	0148      	lsls	r0, r1, #5
 80066bc:	69f9      	ldr	r1, [r7, #28]
 80066be:	4401      	add	r1, r0
 80066c0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80066c4:	4313      	orrs	r3, r2
 80066c6:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80066c8:	79fb      	ldrb	r3, [r7, #7]
 80066ca:	2b01      	cmp	r3, #1
 80066cc:	d10d      	bne.n	80066ea <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80066ce:	68bb      	ldr	r3, [r7, #8]
 80066d0:	691b      	ldr	r3, [r3, #16]
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d009      	beq.n	80066ea <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80066d6:	68bb      	ldr	r3, [r7, #8]
 80066d8:	6919      	ldr	r1, [r3, #16]
 80066da:	69bb      	ldr	r3, [r7, #24]
 80066dc:	015a      	lsls	r2, r3, #5
 80066de:	69fb      	ldr	r3, [r7, #28]
 80066e0:	4413      	add	r3, r2
 80066e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066e6:	460a      	mov	r2, r1
 80066e8:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80066ea:	68bb      	ldr	r3, [r7, #8]
 80066ec:	791b      	ldrb	r3, [r3, #4]
 80066ee:	2b01      	cmp	r3, #1
 80066f0:	d128      	bne.n	8006744 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80066f2:	69fb      	ldr	r3, [r7, #28]
 80066f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80066f8:	689b      	ldr	r3, [r3, #8]
 80066fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d110      	bne.n	8006724 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8006702:	69bb      	ldr	r3, [r7, #24]
 8006704:	015a      	lsls	r2, r3, #5
 8006706:	69fb      	ldr	r3, [r7, #28]
 8006708:	4413      	add	r3, r2
 800670a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	69ba      	ldr	r2, [r7, #24]
 8006712:	0151      	lsls	r1, r2, #5
 8006714:	69fa      	ldr	r2, [r7, #28]
 8006716:	440a      	add	r2, r1
 8006718:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800671c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006720:	6013      	str	r3, [r2, #0]
 8006722:	e00f      	b.n	8006744 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8006724:	69bb      	ldr	r3, [r7, #24]
 8006726:	015a      	lsls	r2, r3, #5
 8006728:	69fb      	ldr	r3, [r7, #28]
 800672a:	4413      	add	r3, r2
 800672c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	69ba      	ldr	r2, [r7, #24]
 8006734:	0151      	lsls	r1, r2, #5
 8006736:	69fa      	ldr	r2, [r7, #28]
 8006738:	440a      	add	r2, r1
 800673a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800673e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006742:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006744:	69bb      	ldr	r3, [r7, #24]
 8006746:	015a      	lsls	r2, r3, #5
 8006748:	69fb      	ldr	r3, [r7, #28]
 800674a:	4413      	add	r3, r2
 800674c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	69ba      	ldr	r2, [r7, #24]
 8006754:	0151      	lsls	r1, r2, #5
 8006756:	69fa      	ldr	r2, [r7, #28]
 8006758:	440a      	add	r2, r1
 800675a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800675e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006762:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006764:	2300      	movs	r3, #0
}
 8006766:	4618      	mov	r0, r3
 8006768:	3720      	adds	r7, #32
 800676a:	46bd      	mov	sp, r7
 800676c:	bd80      	pop	{r7, pc}
 800676e:	bf00      	nop
 8006770:	1ff80000 	.word	0x1ff80000

08006774 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006774:	b480      	push	{r7}
 8006776:	b087      	sub	sp, #28
 8006778:	af00      	add	r7, sp, #0
 800677a:	60f8      	str	r0, [r7, #12]
 800677c:	60b9      	str	r1, [r7, #8]
 800677e:	4613      	mov	r3, r2
 8006780:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8006786:	68bb      	ldr	r3, [r7, #8]
 8006788:	781b      	ldrb	r3, [r3, #0]
 800678a:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800678c:	68bb      	ldr	r3, [r7, #8]
 800678e:	785b      	ldrb	r3, [r3, #1]
 8006790:	2b01      	cmp	r3, #1
 8006792:	f040 80ce 	bne.w	8006932 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8006796:	68bb      	ldr	r3, [r7, #8]
 8006798:	699b      	ldr	r3, [r3, #24]
 800679a:	2b00      	cmp	r3, #0
 800679c:	d132      	bne.n	8006804 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800679e:	693b      	ldr	r3, [r7, #16]
 80067a0:	015a      	lsls	r2, r3, #5
 80067a2:	697b      	ldr	r3, [r7, #20]
 80067a4:	4413      	add	r3, r2
 80067a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80067aa:	691b      	ldr	r3, [r3, #16]
 80067ac:	693a      	ldr	r2, [r7, #16]
 80067ae:	0151      	lsls	r1, r2, #5
 80067b0:	697a      	ldr	r2, [r7, #20]
 80067b2:	440a      	add	r2, r1
 80067b4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80067b8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80067bc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80067c0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80067c2:	693b      	ldr	r3, [r7, #16]
 80067c4:	015a      	lsls	r2, r3, #5
 80067c6:	697b      	ldr	r3, [r7, #20]
 80067c8:	4413      	add	r3, r2
 80067ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80067ce:	691b      	ldr	r3, [r3, #16]
 80067d0:	693a      	ldr	r2, [r7, #16]
 80067d2:	0151      	lsls	r1, r2, #5
 80067d4:	697a      	ldr	r2, [r7, #20]
 80067d6:	440a      	add	r2, r1
 80067d8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80067dc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80067e0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80067e2:	693b      	ldr	r3, [r7, #16]
 80067e4:	015a      	lsls	r2, r3, #5
 80067e6:	697b      	ldr	r3, [r7, #20]
 80067e8:	4413      	add	r3, r2
 80067ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80067ee:	691b      	ldr	r3, [r3, #16]
 80067f0:	693a      	ldr	r2, [r7, #16]
 80067f2:	0151      	lsls	r1, r2, #5
 80067f4:	697a      	ldr	r2, [r7, #20]
 80067f6:	440a      	add	r2, r1
 80067f8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80067fc:	0cdb      	lsrs	r3, r3, #19
 80067fe:	04db      	lsls	r3, r3, #19
 8006800:	6113      	str	r3, [r2, #16]
 8006802:	e04e      	b.n	80068a2 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006804:	693b      	ldr	r3, [r7, #16]
 8006806:	015a      	lsls	r2, r3, #5
 8006808:	697b      	ldr	r3, [r7, #20]
 800680a:	4413      	add	r3, r2
 800680c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006810:	691b      	ldr	r3, [r3, #16]
 8006812:	693a      	ldr	r2, [r7, #16]
 8006814:	0151      	lsls	r1, r2, #5
 8006816:	697a      	ldr	r2, [r7, #20]
 8006818:	440a      	add	r2, r1
 800681a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800681e:	0cdb      	lsrs	r3, r3, #19
 8006820:	04db      	lsls	r3, r3, #19
 8006822:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006824:	693b      	ldr	r3, [r7, #16]
 8006826:	015a      	lsls	r2, r3, #5
 8006828:	697b      	ldr	r3, [r7, #20]
 800682a:	4413      	add	r3, r2
 800682c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006830:	691b      	ldr	r3, [r3, #16]
 8006832:	693a      	ldr	r2, [r7, #16]
 8006834:	0151      	lsls	r1, r2, #5
 8006836:	697a      	ldr	r2, [r7, #20]
 8006838:	440a      	add	r2, r1
 800683a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800683e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006842:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006846:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8006848:	68bb      	ldr	r3, [r7, #8]
 800684a:	699a      	ldr	r2, [r3, #24]
 800684c:	68bb      	ldr	r3, [r7, #8]
 800684e:	68db      	ldr	r3, [r3, #12]
 8006850:	429a      	cmp	r2, r3
 8006852:	d903      	bls.n	800685c <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8006854:	68bb      	ldr	r3, [r7, #8]
 8006856:	68da      	ldr	r2, [r3, #12]
 8006858:	68bb      	ldr	r3, [r7, #8]
 800685a:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800685c:	693b      	ldr	r3, [r7, #16]
 800685e:	015a      	lsls	r2, r3, #5
 8006860:	697b      	ldr	r3, [r7, #20]
 8006862:	4413      	add	r3, r2
 8006864:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006868:	691b      	ldr	r3, [r3, #16]
 800686a:	693a      	ldr	r2, [r7, #16]
 800686c:	0151      	lsls	r1, r2, #5
 800686e:	697a      	ldr	r2, [r7, #20]
 8006870:	440a      	add	r2, r1
 8006872:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006876:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800687a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800687c:	693b      	ldr	r3, [r7, #16]
 800687e:	015a      	lsls	r2, r3, #5
 8006880:	697b      	ldr	r3, [r7, #20]
 8006882:	4413      	add	r3, r2
 8006884:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006888:	691a      	ldr	r2, [r3, #16]
 800688a:	68bb      	ldr	r3, [r7, #8]
 800688c:	699b      	ldr	r3, [r3, #24]
 800688e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006892:	6939      	ldr	r1, [r7, #16]
 8006894:	0148      	lsls	r0, r1, #5
 8006896:	6979      	ldr	r1, [r7, #20]
 8006898:	4401      	add	r1, r0
 800689a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800689e:	4313      	orrs	r3, r2
 80068a0:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80068a2:	79fb      	ldrb	r3, [r7, #7]
 80068a4:	2b01      	cmp	r3, #1
 80068a6:	d11e      	bne.n	80068e6 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80068a8:	68bb      	ldr	r3, [r7, #8]
 80068aa:	695b      	ldr	r3, [r3, #20]
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d009      	beq.n	80068c4 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80068b0:	693b      	ldr	r3, [r7, #16]
 80068b2:	015a      	lsls	r2, r3, #5
 80068b4:	697b      	ldr	r3, [r7, #20]
 80068b6:	4413      	add	r3, r2
 80068b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80068bc:	461a      	mov	r2, r3
 80068be:	68bb      	ldr	r3, [r7, #8]
 80068c0:	695b      	ldr	r3, [r3, #20]
 80068c2:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80068c4:	693b      	ldr	r3, [r7, #16]
 80068c6:	015a      	lsls	r2, r3, #5
 80068c8:	697b      	ldr	r3, [r7, #20]
 80068ca:	4413      	add	r3, r2
 80068cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	693a      	ldr	r2, [r7, #16]
 80068d4:	0151      	lsls	r1, r2, #5
 80068d6:	697a      	ldr	r2, [r7, #20]
 80068d8:	440a      	add	r2, r1
 80068da:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80068de:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80068e2:	6013      	str	r3, [r2, #0]
 80068e4:	e097      	b.n	8006a16 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80068e6:	693b      	ldr	r3, [r7, #16]
 80068e8:	015a      	lsls	r2, r3, #5
 80068ea:	697b      	ldr	r3, [r7, #20]
 80068ec:	4413      	add	r3, r2
 80068ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	693a      	ldr	r2, [r7, #16]
 80068f6:	0151      	lsls	r1, r2, #5
 80068f8:	697a      	ldr	r2, [r7, #20]
 80068fa:	440a      	add	r2, r1
 80068fc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006900:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006904:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8006906:	68bb      	ldr	r3, [r7, #8]
 8006908:	699b      	ldr	r3, [r3, #24]
 800690a:	2b00      	cmp	r3, #0
 800690c:	f000 8083 	beq.w	8006a16 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8006910:	697b      	ldr	r3, [r7, #20]
 8006912:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006916:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006918:	68bb      	ldr	r3, [r7, #8]
 800691a:	781b      	ldrb	r3, [r3, #0]
 800691c:	f003 030f 	and.w	r3, r3, #15
 8006920:	2101      	movs	r1, #1
 8006922:	fa01 f303 	lsl.w	r3, r1, r3
 8006926:	6979      	ldr	r1, [r7, #20]
 8006928:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800692c:	4313      	orrs	r3, r2
 800692e:	634b      	str	r3, [r1, #52]	; 0x34
 8006930:	e071      	b.n	8006a16 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006932:	693b      	ldr	r3, [r7, #16]
 8006934:	015a      	lsls	r2, r3, #5
 8006936:	697b      	ldr	r3, [r7, #20]
 8006938:	4413      	add	r3, r2
 800693a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800693e:	691b      	ldr	r3, [r3, #16]
 8006940:	693a      	ldr	r2, [r7, #16]
 8006942:	0151      	lsls	r1, r2, #5
 8006944:	697a      	ldr	r2, [r7, #20]
 8006946:	440a      	add	r2, r1
 8006948:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800694c:	0cdb      	lsrs	r3, r3, #19
 800694e:	04db      	lsls	r3, r3, #19
 8006950:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006952:	693b      	ldr	r3, [r7, #16]
 8006954:	015a      	lsls	r2, r3, #5
 8006956:	697b      	ldr	r3, [r7, #20]
 8006958:	4413      	add	r3, r2
 800695a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800695e:	691b      	ldr	r3, [r3, #16]
 8006960:	693a      	ldr	r2, [r7, #16]
 8006962:	0151      	lsls	r1, r2, #5
 8006964:	697a      	ldr	r2, [r7, #20]
 8006966:	440a      	add	r2, r1
 8006968:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800696c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006970:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006974:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8006976:	68bb      	ldr	r3, [r7, #8]
 8006978:	699b      	ldr	r3, [r3, #24]
 800697a:	2b00      	cmp	r3, #0
 800697c:	d003      	beq.n	8006986 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 800697e:	68bb      	ldr	r3, [r7, #8]
 8006980:	68da      	ldr	r2, [r3, #12]
 8006982:	68bb      	ldr	r3, [r7, #8]
 8006984:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8006986:	68bb      	ldr	r3, [r7, #8]
 8006988:	68da      	ldr	r2, [r3, #12]
 800698a:	68bb      	ldr	r3, [r7, #8]
 800698c:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800698e:	693b      	ldr	r3, [r7, #16]
 8006990:	015a      	lsls	r2, r3, #5
 8006992:	697b      	ldr	r3, [r7, #20]
 8006994:	4413      	add	r3, r2
 8006996:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800699a:	691b      	ldr	r3, [r3, #16]
 800699c:	693a      	ldr	r2, [r7, #16]
 800699e:	0151      	lsls	r1, r2, #5
 80069a0:	697a      	ldr	r2, [r7, #20]
 80069a2:	440a      	add	r2, r1
 80069a4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80069a8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80069ac:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80069ae:	693b      	ldr	r3, [r7, #16]
 80069b0:	015a      	lsls	r2, r3, #5
 80069b2:	697b      	ldr	r3, [r7, #20]
 80069b4:	4413      	add	r3, r2
 80069b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069ba:	691a      	ldr	r2, [r3, #16]
 80069bc:	68bb      	ldr	r3, [r7, #8]
 80069be:	69db      	ldr	r3, [r3, #28]
 80069c0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80069c4:	6939      	ldr	r1, [r7, #16]
 80069c6:	0148      	lsls	r0, r1, #5
 80069c8:	6979      	ldr	r1, [r7, #20]
 80069ca:	4401      	add	r1, r0
 80069cc:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80069d0:	4313      	orrs	r3, r2
 80069d2:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 80069d4:	79fb      	ldrb	r3, [r7, #7]
 80069d6:	2b01      	cmp	r3, #1
 80069d8:	d10d      	bne.n	80069f6 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80069da:	68bb      	ldr	r3, [r7, #8]
 80069dc:	691b      	ldr	r3, [r3, #16]
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d009      	beq.n	80069f6 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80069e2:	68bb      	ldr	r3, [r7, #8]
 80069e4:	6919      	ldr	r1, [r3, #16]
 80069e6:	693b      	ldr	r3, [r7, #16]
 80069e8:	015a      	lsls	r2, r3, #5
 80069ea:	697b      	ldr	r3, [r7, #20]
 80069ec:	4413      	add	r3, r2
 80069ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069f2:	460a      	mov	r2, r1
 80069f4:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80069f6:	693b      	ldr	r3, [r7, #16]
 80069f8:	015a      	lsls	r2, r3, #5
 80069fa:	697b      	ldr	r3, [r7, #20]
 80069fc:	4413      	add	r3, r2
 80069fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	693a      	ldr	r2, [r7, #16]
 8006a06:	0151      	lsls	r1, r2, #5
 8006a08:	697a      	ldr	r2, [r7, #20]
 8006a0a:	440a      	add	r2, r1
 8006a0c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006a10:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006a14:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006a16:	2300      	movs	r3, #0
}
 8006a18:	4618      	mov	r0, r3
 8006a1a:	371c      	adds	r7, #28
 8006a1c:	46bd      	mov	sp, r7
 8006a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a22:	4770      	bx	lr

08006a24 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006a24:	b480      	push	{r7}
 8006a26:	b087      	sub	sp, #28
 8006a28:	af00      	add	r7, sp, #0
 8006a2a:	6078      	str	r0, [r7, #4]
 8006a2c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006a2e:	2300      	movs	r3, #0
 8006a30:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8006a32:	2300      	movs	r3, #0
 8006a34:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006a3a:	683b      	ldr	r3, [r7, #0]
 8006a3c:	785b      	ldrb	r3, [r3, #1]
 8006a3e:	2b01      	cmp	r3, #1
 8006a40:	d14a      	bne.n	8006ad8 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006a42:	683b      	ldr	r3, [r7, #0]
 8006a44:	781b      	ldrb	r3, [r3, #0]
 8006a46:	015a      	lsls	r2, r3, #5
 8006a48:	693b      	ldr	r3, [r7, #16]
 8006a4a:	4413      	add	r3, r2
 8006a4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006a56:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006a5a:	f040 8086 	bne.w	8006b6a <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8006a5e:	683b      	ldr	r3, [r7, #0]
 8006a60:	781b      	ldrb	r3, [r3, #0]
 8006a62:	015a      	lsls	r2, r3, #5
 8006a64:	693b      	ldr	r3, [r7, #16]
 8006a66:	4413      	add	r3, r2
 8006a68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	683a      	ldr	r2, [r7, #0]
 8006a70:	7812      	ldrb	r2, [r2, #0]
 8006a72:	0151      	lsls	r1, r2, #5
 8006a74:	693a      	ldr	r2, [r7, #16]
 8006a76:	440a      	add	r2, r1
 8006a78:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006a7c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006a80:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8006a82:	683b      	ldr	r3, [r7, #0]
 8006a84:	781b      	ldrb	r3, [r3, #0]
 8006a86:	015a      	lsls	r2, r3, #5
 8006a88:	693b      	ldr	r3, [r7, #16]
 8006a8a:	4413      	add	r3, r2
 8006a8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	683a      	ldr	r2, [r7, #0]
 8006a94:	7812      	ldrb	r2, [r2, #0]
 8006a96:	0151      	lsls	r1, r2, #5
 8006a98:	693a      	ldr	r2, [r7, #16]
 8006a9a:	440a      	add	r2, r1
 8006a9c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006aa0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006aa4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	3301      	adds	r3, #1
 8006aaa:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	f242 7210 	movw	r2, #10000	; 0x2710
 8006ab2:	4293      	cmp	r3, r2
 8006ab4:	d902      	bls.n	8006abc <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8006ab6:	2301      	movs	r3, #1
 8006ab8:	75fb      	strb	r3, [r7, #23]
          break;
 8006aba:	e056      	b.n	8006b6a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8006abc:	683b      	ldr	r3, [r7, #0]
 8006abe:	781b      	ldrb	r3, [r3, #0]
 8006ac0:	015a      	lsls	r2, r3, #5
 8006ac2:	693b      	ldr	r3, [r7, #16]
 8006ac4:	4413      	add	r3, r2
 8006ac6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006ad0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006ad4:	d0e7      	beq.n	8006aa6 <USB_EPStopXfer+0x82>
 8006ad6:	e048      	b.n	8006b6a <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006ad8:	683b      	ldr	r3, [r7, #0]
 8006ada:	781b      	ldrb	r3, [r3, #0]
 8006adc:	015a      	lsls	r2, r3, #5
 8006ade:	693b      	ldr	r3, [r7, #16]
 8006ae0:	4413      	add	r3, r2
 8006ae2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006aec:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006af0:	d13b      	bne.n	8006b6a <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8006af2:	683b      	ldr	r3, [r7, #0]
 8006af4:	781b      	ldrb	r3, [r3, #0]
 8006af6:	015a      	lsls	r2, r3, #5
 8006af8:	693b      	ldr	r3, [r7, #16]
 8006afa:	4413      	add	r3, r2
 8006afc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	683a      	ldr	r2, [r7, #0]
 8006b04:	7812      	ldrb	r2, [r2, #0]
 8006b06:	0151      	lsls	r1, r2, #5
 8006b08:	693a      	ldr	r2, [r7, #16]
 8006b0a:	440a      	add	r2, r1
 8006b0c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006b10:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006b14:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8006b16:	683b      	ldr	r3, [r7, #0]
 8006b18:	781b      	ldrb	r3, [r3, #0]
 8006b1a:	015a      	lsls	r2, r3, #5
 8006b1c:	693b      	ldr	r3, [r7, #16]
 8006b1e:	4413      	add	r3, r2
 8006b20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	683a      	ldr	r2, [r7, #0]
 8006b28:	7812      	ldrb	r2, [r2, #0]
 8006b2a:	0151      	lsls	r1, r2, #5
 8006b2c:	693a      	ldr	r2, [r7, #16]
 8006b2e:	440a      	add	r2, r1
 8006b30:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006b34:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006b38:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	3301      	adds	r3, #1
 8006b3e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	f242 7210 	movw	r2, #10000	; 0x2710
 8006b46:	4293      	cmp	r3, r2
 8006b48:	d902      	bls.n	8006b50 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8006b4a:	2301      	movs	r3, #1
 8006b4c:	75fb      	strb	r3, [r7, #23]
          break;
 8006b4e:	e00c      	b.n	8006b6a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8006b50:	683b      	ldr	r3, [r7, #0]
 8006b52:	781b      	ldrb	r3, [r3, #0]
 8006b54:	015a      	lsls	r2, r3, #5
 8006b56:	693b      	ldr	r3, [r7, #16]
 8006b58:	4413      	add	r3, r2
 8006b5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006b64:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006b68:	d0e7      	beq.n	8006b3a <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8006b6a:	7dfb      	ldrb	r3, [r7, #23]
}
 8006b6c:	4618      	mov	r0, r3
 8006b6e:	371c      	adds	r7, #28
 8006b70:	46bd      	mov	sp, r7
 8006b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b76:	4770      	bx	lr

08006b78 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8006b78:	b480      	push	{r7}
 8006b7a:	b089      	sub	sp, #36	; 0x24
 8006b7c:	af00      	add	r7, sp, #0
 8006b7e:	60f8      	str	r0, [r7, #12]
 8006b80:	60b9      	str	r1, [r7, #8]
 8006b82:	4611      	mov	r1, r2
 8006b84:	461a      	mov	r2, r3
 8006b86:	460b      	mov	r3, r1
 8006b88:	71fb      	strb	r3, [r7, #7]
 8006b8a:	4613      	mov	r3, r2
 8006b8c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8006b92:	68bb      	ldr	r3, [r7, #8]
 8006b94:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8006b96:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d123      	bne.n	8006be6 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8006b9e:	88bb      	ldrh	r3, [r7, #4]
 8006ba0:	3303      	adds	r3, #3
 8006ba2:	089b      	lsrs	r3, r3, #2
 8006ba4:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8006ba6:	2300      	movs	r3, #0
 8006ba8:	61bb      	str	r3, [r7, #24]
 8006baa:	e018      	b.n	8006bde <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006bac:	79fb      	ldrb	r3, [r7, #7]
 8006bae:	031a      	lsls	r2, r3, #12
 8006bb0:	697b      	ldr	r3, [r7, #20]
 8006bb2:	4413      	add	r3, r2
 8006bb4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006bb8:	461a      	mov	r2, r3
 8006bba:	69fb      	ldr	r3, [r7, #28]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006bc0:	69fb      	ldr	r3, [r7, #28]
 8006bc2:	3301      	adds	r3, #1
 8006bc4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006bc6:	69fb      	ldr	r3, [r7, #28]
 8006bc8:	3301      	adds	r3, #1
 8006bca:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006bcc:	69fb      	ldr	r3, [r7, #28]
 8006bce:	3301      	adds	r3, #1
 8006bd0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006bd2:	69fb      	ldr	r3, [r7, #28]
 8006bd4:	3301      	adds	r3, #1
 8006bd6:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006bd8:	69bb      	ldr	r3, [r7, #24]
 8006bda:	3301      	adds	r3, #1
 8006bdc:	61bb      	str	r3, [r7, #24]
 8006bde:	69ba      	ldr	r2, [r7, #24]
 8006be0:	693b      	ldr	r3, [r7, #16]
 8006be2:	429a      	cmp	r2, r3
 8006be4:	d3e2      	bcc.n	8006bac <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8006be6:	2300      	movs	r3, #0
}
 8006be8:	4618      	mov	r0, r3
 8006bea:	3724      	adds	r7, #36	; 0x24
 8006bec:	46bd      	mov	sp, r7
 8006bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf2:	4770      	bx	lr

08006bf4 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006bf4:	b480      	push	{r7}
 8006bf6:	b08b      	sub	sp, #44	; 0x2c
 8006bf8:	af00      	add	r7, sp, #0
 8006bfa:	60f8      	str	r0, [r7, #12]
 8006bfc:	60b9      	str	r1, [r7, #8]
 8006bfe:	4613      	mov	r3, r2
 8006c00:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8006c06:	68bb      	ldr	r3, [r7, #8]
 8006c08:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8006c0a:	88fb      	ldrh	r3, [r7, #6]
 8006c0c:	089b      	lsrs	r3, r3, #2
 8006c0e:	b29b      	uxth	r3, r3
 8006c10:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8006c12:	88fb      	ldrh	r3, [r7, #6]
 8006c14:	f003 0303 	and.w	r3, r3, #3
 8006c18:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8006c1a:	2300      	movs	r3, #0
 8006c1c:	623b      	str	r3, [r7, #32]
 8006c1e:	e014      	b.n	8006c4a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006c20:	69bb      	ldr	r3, [r7, #24]
 8006c22:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006c26:	681a      	ldr	r2, [r3, #0]
 8006c28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c2a:	601a      	str	r2, [r3, #0]
    pDest++;
 8006c2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c2e:	3301      	adds	r3, #1
 8006c30:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006c32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c34:	3301      	adds	r3, #1
 8006c36:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006c38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c3a:	3301      	adds	r3, #1
 8006c3c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006c3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c40:	3301      	adds	r3, #1
 8006c42:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8006c44:	6a3b      	ldr	r3, [r7, #32]
 8006c46:	3301      	adds	r3, #1
 8006c48:	623b      	str	r3, [r7, #32]
 8006c4a:	6a3a      	ldr	r2, [r7, #32]
 8006c4c:	697b      	ldr	r3, [r7, #20]
 8006c4e:	429a      	cmp	r2, r3
 8006c50:	d3e6      	bcc.n	8006c20 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8006c52:	8bfb      	ldrh	r3, [r7, #30]
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d01e      	beq.n	8006c96 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8006c58:	2300      	movs	r3, #0
 8006c5a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8006c5c:	69bb      	ldr	r3, [r7, #24]
 8006c5e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006c62:	461a      	mov	r2, r3
 8006c64:	f107 0310 	add.w	r3, r7, #16
 8006c68:	6812      	ldr	r2, [r2, #0]
 8006c6a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8006c6c:	693a      	ldr	r2, [r7, #16]
 8006c6e:	6a3b      	ldr	r3, [r7, #32]
 8006c70:	b2db      	uxtb	r3, r3
 8006c72:	00db      	lsls	r3, r3, #3
 8006c74:	fa22 f303 	lsr.w	r3, r2, r3
 8006c78:	b2da      	uxtb	r2, r3
 8006c7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c7c:	701a      	strb	r2, [r3, #0]
      i++;
 8006c7e:	6a3b      	ldr	r3, [r7, #32]
 8006c80:	3301      	adds	r3, #1
 8006c82:	623b      	str	r3, [r7, #32]
      pDest++;
 8006c84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c86:	3301      	adds	r3, #1
 8006c88:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8006c8a:	8bfb      	ldrh	r3, [r7, #30]
 8006c8c:	3b01      	subs	r3, #1
 8006c8e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8006c90:	8bfb      	ldrh	r3, [r7, #30]
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d1ea      	bne.n	8006c6c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8006c96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006c98:	4618      	mov	r0, r3
 8006c9a:	372c      	adds	r7, #44	; 0x2c
 8006c9c:	46bd      	mov	sp, r7
 8006c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca2:	4770      	bx	lr

08006ca4 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006ca4:	b480      	push	{r7}
 8006ca6:	b085      	sub	sp, #20
 8006ca8:	af00      	add	r7, sp, #0
 8006caa:	6078      	str	r0, [r7, #4]
 8006cac:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006cb2:	683b      	ldr	r3, [r7, #0]
 8006cb4:	781b      	ldrb	r3, [r3, #0]
 8006cb6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006cb8:	683b      	ldr	r3, [r7, #0]
 8006cba:	785b      	ldrb	r3, [r3, #1]
 8006cbc:	2b01      	cmp	r3, #1
 8006cbe:	d12c      	bne.n	8006d1a <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006cc0:	68bb      	ldr	r3, [r7, #8]
 8006cc2:	015a      	lsls	r2, r3, #5
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	4413      	add	r3, r2
 8006cc8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	db12      	blt.n	8006cf8 <USB_EPSetStall+0x54>
 8006cd2:	68bb      	ldr	r3, [r7, #8]
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d00f      	beq.n	8006cf8 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8006cd8:	68bb      	ldr	r3, [r7, #8]
 8006cda:	015a      	lsls	r2, r3, #5
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	4413      	add	r3, r2
 8006ce0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	68ba      	ldr	r2, [r7, #8]
 8006ce8:	0151      	lsls	r1, r2, #5
 8006cea:	68fa      	ldr	r2, [r7, #12]
 8006cec:	440a      	add	r2, r1
 8006cee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006cf2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006cf6:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8006cf8:	68bb      	ldr	r3, [r7, #8]
 8006cfa:	015a      	lsls	r2, r3, #5
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	4413      	add	r3, r2
 8006d00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	68ba      	ldr	r2, [r7, #8]
 8006d08:	0151      	lsls	r1, r2, #5
 8006d0a:	68fa      	ldr	r2, [r7, #12]
 8006d0c:	440a      	add	r2, r1
 8006d0e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006d12:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006d16:	6013      	str	r3, [r2, #0]
 8006d18:	e02b      	b.n	8006d72 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006d1a:	68bb      	ldr	r3, [r7, #8]
 8006d1c:	015a      	lsls	r2, r3, #5
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	4413      	add	r3, r2
 8006d22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	db12      	blt.n	8006d52 <USB_EPSetStall+0xae>
 8006d2c:	68bb      	ldr	r3, [r7, #8]
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d00f      	beq.n	8006d52 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8006d32:	68bb      	ldr	r3, [r7, #8]
 8006d34:	015a      	lsls	r2, r3, #5
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	4413      	add	r3, r2
 8006d3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	68ba      	ldr	r2, [r7, #8]
 8006d42:	0151      	lsls	r1, r2, #5
 8006d44:	68fa      	ldr	r2, [r7, #12]
 8006d46:	440a      	add	r2, r1
 8006d48:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006d4c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006d50:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8006d52:	68bb      	ldr	r3, [r7, #8]
 8006d54:	015a      	lsls	r2, r3, #5
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	4413      	add	r3, r2
 8006d5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	68ba      	ldr	r2, [r7, #8]
 8006d62:	0151      	lsls	r1, r2, #5
 8006d64:	68fa      	ldr	r2, [r7, #12]
 8006d66:	440a      	add	r2, r1
 8006d68:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006d6c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006d70:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006d72:	2300      	movs	r3, #0
}
 8006d74:	4618      	mov	r0, r3
 8006d76:	3714      	adds	r7, #20
 8006d78:	46bd      	mov	sp, r7
 8006d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d7e:	4770      	bx	lr

08006d80 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006d80:	b480      	push	{r7}
 8006d82:	b085      	sub	sp, #20
 8006d84:	af00      	add	r7, sp, #0
 8006d86:	6078      	str	r0, [r7, #4]
 8006d88:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006d8e:	683b      	ldr	r3, [r7, #0]
 8006d90:	781b      	ldrb	r3, [r3, #0]
 8006d92:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006d94:	683b      	ldr	r3, [r7, #0]
 8006d96:	785b      	ldrb	r3, [r3, #1]
 8006d98:	2b01      	cmp	r3, #1
 8006d9a:	d128      	bne.n	8006dee <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006d9c:	68bb      	ldr	r3, [r7, #8]
 8006d9e:	015a      	lsls	r2, r3, #5
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	4413      	add	r3, r2
 8006da4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	68ba      	ldr	r2, [r7, #8]
 8006dac:	0151      	lsls	r1, r2, #5
 8006dae:	68fa      	ldr	r2, [r7, #12]
 8006db0:	440a      	add	r2, r1
 8006db2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006db6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006dba:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006dbc:	683b      	ldr	r3, [r7, #0]
 8006dbe:	791b      	ldrb	r3, [r3, #4]
 8006dc0:	2b03      	cmp	r3, #3
 8006dc2:	d003      	beq.n	8006dcc <USB_EPClearStall+0x4c>
 8006dc4:	683b      	ldr	r3, [r7, #0]
 8006dc6:	791b      	ldrb	r3, [r3, #4]
 8006dc8:	2b02      	cmp	r3, #2
 8006dca:	d138      	bne.n	8006e3e <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006dcc:	68bb      	ldr	r3, [r7, #8]
 8006dce:	015a      	lsls	r2, r3, #5
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	4413      	add	r3, r2
 8006dd4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	68ba      	ldr	r2, [r7, #8]
 8006ddc:	0151      	lsls	r1, r2, #5
 8006dde:	68fa      	ldr	r2, [r7, #12]
 8006de0:	440a      	add	r2, r1
 8006de2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006de6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006dea:	6013      	str	r3, [r2, #0]
 8006dec:	e027      	b.n	8006e3e <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8006dee:	68bb      	ldr	r3, [r7, #8]
 8006df0:	015a      	lsls	r2, r3, #5
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	4413      	add	r3, r2
 8006df6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	68ba      	ldr	r2, [r7, #8]
 8006dfe:	0151      	lsls	r1, r2, #5
 8006e00:	68fa      	ldr	r2, [r7, #12]
 8006e02:	440a      	add	r2, r1
 8006e04:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006e08:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006e0c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006e0e:	683b      	ldr	r3, [r7, #0]
 8006e10:	791b      	ldrb	r3, [r3, #4]
 8006e12:	2b03      	cmp	r3, #3
 8006e14:	d003      	beq.n	8006e1e <USB_EPClearStall+0x9e>
 8006e16:	683b      	ldr	r3, [r7, #0]
 8006e18:	791b      	ldrb	r3, [r3, #4]
 8006e1a:	2b02      	cmp	r3, #2
 8006e1c:	d10f      	bne.n	8006e3e <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006e1e:	68bb      	ldr	r3, [r7, #8]
 8006e20:	015a      	lsls	r2, r3, #5
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	4413      	add	r3, r2
 8006e26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	68ba      	ldr	r2, [r7, #8]
 8006e2e:	0151      	lsls	r1, r2, #5
 8006e30:	68fa      	ldr	r2, [r7, #12]
 8006e32:	440a      	add	r2, r1
 8006e34:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006e38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006e3c:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8006e3e:	2300      	movs	r3, #0
}
 8006e40:	4618      	mov	r0, r3
 8006e42:	3714      	adds	r7, #20
 8006e44:	46bd      	mov	sp, r7
 8006e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e4a:	4770      	bx	lr

08006e4c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8006e4c:	b480      	push	{r7}
 8006e4e:	b085      	sub	sp, #20
 8006e50:	af00      	add	r7, sp, #0
 8006e52:	6078      	str	r0, [r7, #4]
 8006e54:	460b      	mov	r3, r1
 8006e56:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	68fa      	ldr	r2, [r7, #12]
 8006e66:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006e6a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8006e6e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e76:	681a      	ldr	r2, [r3, #0]
 8006e78:	78fb      	ldrb	r3, [r7, #3]
 8006e7a:	011b      	lsls	r3, r3, #4
 8006e7c:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8006e80:	68f9      	ldr	r1, [r7, #12]
 8006e82:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006e86:	4313      	orrs	r3, r2
 8006e88:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8006e8a:	2300      	movs	r3, #0
}
 8006e8c:	4618      	mov	r0, r3
 8006e8e:	3714      	adds	r7, #20
 8006e90:	46bd      	mov	sp, r7
 8006e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e96:	4770      	bx	lr

08006e98 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006e98:	b480      	push	{r7}
 8006e9a:	b085      	sub	sp, #20
 8006e9c:	af00      	add	r7, sp, #0
 8006e9e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	68fa      	ldr	r2, [r7, #12]
 8006eae:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006eb2:	f023 0303 	bic.w	r3, r3, #3
 8006eb6:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ebe:	685b      	ldr	r3, [r3, #4]
 8006ec0:	68fa      	ldr	r2, [r7, #12]
 8006ec2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006ec6:	f023 0302 	bic.w	r3, r3, #2
 8006eca:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006ecc:	2300      	movs	r3, #0
}
 8006ece:	4618      	mov	r0, r3
 8006ed0:	3714      	adds	r7, #20
 8006ed2:	46bd      	mov	sp, r7
 8006ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed8:	4770      	bx	lr

08006eda <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006eda:	b480      	push	{r7}
 8006edc:	b085      	sub	sp, #20
 8006ede:	af00      	add	r7, sp, #0
 8006ee0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	68fa      	ldr	r2, [r7, #12]
 8006ef0:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006ef4:	f023 0303 	bic.w	r3, r3, #3
 8006ef8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f00:	685b      	ldr	r3, [r3, #4]
 8006f02:	68fa      	ldr	r2, [r7, #12]
 8006f04:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006f08:	f043 0302 	orr.w	r3, r3, #2
 8006f0c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006f0e:	2300      	movs	r3, #0
}
 8006f10:	4618      	mov	r0, r3
 8006f12:	3714      	adds	r7, #20
 8006f14:	46bd      	mov	sp, r7
 8006f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f1a:	4770      	bx	lr

08006f1c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8006f1c:	b480      	push	{r7}
 8006f1e:	b085      	sub	sp, #20
 8006f20:	af00      	add	r7, sp, #0
 8006f22:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	695b      	ldr	r3, [r3, #20]
 8006f28:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	699b      	ldr	r3, [r3, #24]
 8006f2e:	68fa      	ldr	r2, [r7, #12]
 8006f30:	4013      	ands	r3, r2
 8006f32:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006f34:	68fb      	ldr	r3, [r7, #12]
}
 8006f36:	4618      	mov	r0, r3
 8006f38:	3714      	adds	r7, #20
 8006f3a:	46bd      	mov	sp, r7
 8006f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f40:	4770      	bx	lr

08006f42 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006f42:	b480      	push	{r7}
 8006f44:	b085      	sub	sp, #20
 8006f46:	af00      	add	r7, sp, #0
 8006f48:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f54:	699b      	ldr	r3, [r3, #24]
 8006f56:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f5e:	69db      	ldr	r3, [r3, #28]
 8006f60:	68ba      	ldr	r2, [r7, #8]
 8006f62:	4013      	ands	r3, r2
 8006f64:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8006f66:	68bb      	ldr	r3, [r7, #8]
 8006f68:	0c1b      	lsrs	r3, r3, #16
}
 8006f6a:	4618      	mov	r0, r3
 8006f6c:	3714      	adds	r7, #20
 8006f6e:	46bd      	mov	sp, r7
 8006f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f74:	4770      	bx	lr

08006f76 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006f76:	b480      	push	{r7}
 8006f78:	b085      	sub	sp, #20
 8006f7a:	af00      	add	r7, sp, #0
 8006f7c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f88:	699b      	ldr	r3, [r3, #24]
 8006f8a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f92:	69db      	ldr	r3, [r3, #28]
 8006f94:	68ba      	ldr	r2, [r7, #8]
 8006f96:	4013      	ands	r3, r2
 8006f98:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8006f9a:	68bb      	ldr	r3, [r7, #8]
 8006f9c:	b29b      	uxth	r3, r3
}
 8006f9e:	4618      	mov	r0, r3
 8006fa0:	3714      	adds	r7, #20
 8006fa2:	46bd      	mov	sp, r7
 8006fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa8:	4770      	bx	lr

08006faa <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006faa:	b480      	push	{r7}
 8006fac:	b085      	sub	sp, #20
 8006fae:	af00      	add	r7, sp, #0
 8006fb0:	6078      	str	r0, [r7, #4]
 8006fb2:	460b      	mov	r3, r1
 8006fb4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8006fba:	78fb      	ldrb	r3, [r7, #3]
 8006fbc:	015a      	lsls	r2, r3, #5
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	4413      	add	r3, r2
 8006fc2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006fc6:	689b      	ldr	r3, [r3, #8]
 8006fc8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006fd0:	695b      	ldr	r3, [r3, #20]
 8006fd2:	68ba      	ldr	r2, [r7, #8]
 8006fd4:	4013      	ands	r3, r2
 8006fd6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006fd8:	68bb      	ldr	r3, [r7, #8]
}
 8006fda:	4618      	mov	r0, r3
 8006fdc:	3714      	adds	r7, #20
 8006fde:	46bd      	mov	sp, r7
 8006fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe4:	4770      	bx	lr

08006fe6 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006fe6:	b480      	push	{r7}
 8006fe8:	b087      	sub	sp, #28
 8006fea:	af00      	add	r7, sp, #0
 8006fec:	6078      	str	r0, [r7, #4]
 8006fee:	460b      	mov	r3, r1
 8006ff0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8006ff6:	697b      	ldr	r3, [r7, #20]
 8006ff8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ffc:	691b      	ldr	r3, [r3, #16]
 8006ffe:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8007000:	697b      	ldr	r3, [r7, #20]
 8007002:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007006:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007008:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800700a:	78fb      	ldrb	r3, [r7, #3]
 800700c:	f003 030f 	and.w	r3, r3, #15
 8007010:	68fa      	ldr	r2, [r7, #12]
 8007012:	fa22 f303 	lsr.w	r3, r2, r3
 8007016:	01db      	lsls	r3, r3, #7
 8007018:	b2db      	uxtb	r3, r3
 800701a:	693a      	ldr	r2, [r7, #16]
 800701c:	4313      	orrs	r3, r2
 800701e:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8007020:	78fb      	ldrb	r3, [r7, #3]
 8007022:	015a      	lsls	r2, r3, #5
 8007024:	697b      	ldr	r3, [r7, #20]
 8007026:	4413      	add	r3, r2
 8007028:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800702c:	689b      	ldr	r3, [r3, #8]
 800702e:	693a      	ldr	r2, [r7, #16]
 8007030:	4013      	ands	r3, r2
 8007032:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007034:	68bb      	ldr	r3, [r7, #8]
}
 8007036:	4618      	mov	r0, r3
 8007038:	371c      	adds	r7, #28
 800703a:	46bd      	mov	sp, r7
 800703c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007040:	4770      	bx	lr

08007042 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8007042:	b480      	push	{r7}
 8007044:	b083      	sub	sp, #12
 8007046:	af00      	add	r7, sp, #0
 8007048:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	695b      	ldr	r3, [r3, #20]
 800704e:	f003 0301 	and.w	r3, r3, #1
}
 8007052:	4618      	mov	r0, r3
 8007054:	370c      	adds	r7, #12
 8007056:	46bd      	mov	sp, r7
 8007058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800705c:	4770      	bx	lr

0800705e <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800705e:	b480      	push	{r7}
 8007060:	b085      	sub	sp, #20
 8007062:	af00      	add	r7, sp, #0
 8007064:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	68fa      	ldr	r2, [r7, #12]
 8007074:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007078:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800707c:	f023 0307 	bic.w	r3, r3, #7
 8007080:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007088:	685b      	ldr	r3, [r3, #4]
 800708a:	68fa      	ldr	r2, [r7, #12]
 800708c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007090:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007094:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007096:	2300      	movs	r3, #0
}
 8007098:	4618      	mov	r0, r3
 800709a:	3714      	adds	r7, #20
 800709c:	46bd      	mov	sp, r7
 800709e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a2:	4770      	bx	lr

080070a4 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80070a4:	b480      	push	{r7}
 80070a6:	b087      	sub	sp, #28
 80070a8:	af00      	add	r7, sp, #0
 80070aa:	60f8      	str	r0, [r7, #12]
 80070ac:	460b      	mov	r3, r1
 80070ae:	607a      	str	r2, [r7, #4]
 80070b0:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	333c      	adds	r3, #60	; 0x3c
 80070ba:	3304      	adds	r3, #4
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80070c0:	693b      	ldr	r3, [r7, #16]
 80070c2:	4a26      	ldr	r2, [pc, #152]	; (800715c <USB_EP0_OutStart+0xb8>)
 80070c4:	4293      	cmp	r3, r2
 80070c6:	d90a      	bls.n	80070de <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80070c8:	697b      	ldr	r3, [r7, #20]
 80070ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80070d4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80070d8:	d101      	bne.n	80070de <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80070da:	2300      	movs	r3, #0
 80070dc:	e037      	b.n	800714e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80070de:	697b      	ldr	r3, [r7, #20]
 80070e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80070e4:	461a      	mov	r2, r3
 80070e6:	2300      	movs	r3, #0
 80070e8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80070ea:	697b      	ldr	r3, [r7, #20]
 80070ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80070f0:	691b      	ldr	r3, [r3, #16]
 80070f2:	697a      	ldr	r2, [r7, #20]
 80070f4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80070f8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80070fc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80070fe:	697b      	ldr	r3, [r7, #20]
 8007100:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007104:	691b      	ldr	r3, [r3, #16]
 8007106:	697a      	ldr	r2, [r7, #20]
 8007108:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800710c:	f043 0318 	orr.w	r3, r3, #24
 8007110:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8007112:	697b      	ldr	r3, [r7, #20]
 8007114:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007118:	691b      	ldr	r3, [r3, #16]
 800711a:	697a      	ldr	r2, [r7, #20]
 800711c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007120:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8007124:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8007126:	7afb      	ldrb	r3, [r7, #11]
 8007128:	2b01      	cmp	r3, #1
 800712a:	d10f      	bne.n	800714c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800712c:	697b      	ldr	r3, [r7, #20]
 800712e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007132:	461a      	mov	r2, r3
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8007138:	697b      	ldr	r3, [r7, #20]
 800713a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	697a      	ldr	r2, [r7, #20]
 8007142:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007146:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800714a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800714c:	2300      	movs	r3, #0
}
 800714e:	4618      	mov	r0, r3
 8007150:	371c      	adds	r7, #28
 8007152:	46bd      	mov	sp, r7
 8007154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007158:	4770      	bx	lr
 800715a:	bf00      	nop
 800715c:	4f54300a 	.word	0x4f54300a

08007160 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007160:	b480      	push	{r7}
 8007162:	b085      	sub	sp, #20
 8007164:	af00      	add	r7, sp, #0
 8007166:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007168:	2300      	movs	r3, #0
 800716a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	3301      	adds	r3, #1
 8007170:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	4a13      	ldr	r2, [pc, #76]	; (80071c4 <USB_CoreReset+0x64>)
 8007176:	4293      	cmp	r3, r2
 8007178:	d901      	bls.n	800717e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800717a:	2303      	movs	r3, #3
 800717c:	e01b      	b.n	80071b6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	691b      	ldr	r3, [r3, #16]
 8007182:	2b00      	cmp	r3, #0
 8007184:	daf2      	bge.n	800716c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007186:	2300      	movs	r3, #0
 8007188:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	691b      	ldr	r3, [r3, #16]
 800718e:	f043 0201 	orr.w	r2, r3, #1
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	3301      	adds	r3, #1
 800719a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	4a09      	ldr	r2, [pc, #36]	; (80071c4 <USB_CoreReset+0x64>)
 80071a0:	4293      	cmp	r3, r2
 80071a2:	d901      	bls.n	80071a8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80071a4:	2303      	movs	r3, #3
 80071a6:	e006      	b.n	80071b6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	691b      	ldr	r3, [r3, #16]
 80071ac:	f003 0301 	and.w	r3, r3, #1
 80071b0:	2b01      	cmp	r3, #1
 80071b2:	d0f0      	beq.n	8007196 <USB_CoreReset+0x36>

  return HAL_OK;
 80071b4:	2300      	movs	r3, #0
}
 80071b6:	4618      	mov	r0, r3
 80071b8:	3714      	adds	r7, #20
 80071ba:	46bd      	mov	sp, r7
 80071bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071c0:	4770      	bx	lr
 80071c2:	bf00      	nop
 80071c4:	00030d40 	.word	0x00030d40

080071c8 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80071c8:	b580      	push	{r7, lr}
 80071ca:	b084      	sub	sp, #16
 80071cc:	af00      	add	r7, sp, #0
 80071ce:	6078      	str	r0, [r7, #4]
 80071d0:	460b      	mov	r3, r1
 80071d2:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80071d4:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80071d8:	f002 fc2a 	bl	8009a30 <USBD_static_malloc>
 80071dc:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d109      	bne.n	80071f8 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	32b0      	adds	r2, #176	; 0xb0
 80071ee:	2100      	movs	r1, #0
 80071f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 80071f4:	2302      	movs	r3, #2
 80071f6:	e0d4      	b.n	80073a2 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 80071f8:	f44f 7207 	mov.w	r2, #540	; 0x21c
 80071fc:	2100      	movs	r1, #0
 80071fe:	68f8      	ldr	r0, [r7, #12]
 8007200:	f002 fc84 	bl	8009b0c <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	32b0      	adds	r2, #176	; 0xb0
 800720e:	68f9      	ldr	r1, [r7, #12]
 8007210:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	32b0      	adds	r2, #176	; 0xb0
 800721e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	7c1b      	ldrb	r3, [r3, #16]
 800722c:	2b00      	cmp	r3, #0
 800722e:	d138      	bne.n	80072a2 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8007230:	4b5e      	ldr	r3, [pc, #376]	; (80073ac <USBD_CDC_Init+0x1e4>)
 8007232:	7819      	ldrb	r1, [r3, #0]
 8007234:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007238:	2202      	movs	r2, #2
 800723a:	6878      	ldr	r0, [r7, #4]
 800723c:	f002 fad5 	bl	80097ea <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8007240:	4b5a      	ldr	r3, [pc, #360]	; (80073ac <USBD_CDC_Init+0x1e4>)
 8007242:	781b      	ldrb	r3, [r3, #0]
 8007244:	f003 020f 	and.w	r2, r3, #15
 8007248:	6879      	ldr	r1, [r7, #4]
 800724a:	4613      	mov	r3, r2
 800724c:	009b      	lsls	r3, r3, #2
 800724e:	4413      	add	r3, r2
 8007250:	009b      	lsls	r3, r3, #2
 8007252:	440b      	add	r3, r1
 8007254:	3324      	adds	r3, #36	; 0x24
 8007256:	2201      	movs	r2, #1
 8007258:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800725a:	4b55      	ldr	r3, [pc, #340]	; (80073b0 <USBD_CDC_Init+0x1e8>)
 800725c:	7819      	ldrb	r1, [r3, #0]
 800725e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007262:	2202      	movs	r2, #2
 8007264:	6878      	ldr	r0, [r7, #4]
 8007266:	f002 fac0 	bl	80097ea <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800726a:	4b51      	ldr	r3, [pc, #324]	; (80073b0 <USBD_CDC_Init+0x1e8>)
 800726c:	781b      	ldrb	r3, [r3, #0]
 800726e:	f003 020f 	and.w	r2, r3, #15
 8007272:	6879      	ldr	r1, [r7, #4]
 8007274:	4613      	mov	r3, r2
 8007276:	009b      	lsls	r3, r3, #2
 8007278:	4413      	add	r3, r2
 800727a:	009b      	lsls	r3, r3, #2
 800727c:	440b      	add	r3, r1
 800727e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007282:	2201      	movs	r2, #1
 8007284:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8007286:	4b4b      	ldr	r3, [pc, #300]	; (80073b4 <USBD_CDC_Init+0x1ec>)
 8007288:	781b      	ldrb	r3, [r3, #0]
 800728a:	f003 020f 	and.w	r2, r3, #15
 800728e:	6879      	ldr	r1, [r7, #4]
 8007290:	4613      	mov	r3, r2
 8007292:	009b      	lsls	r3, r3, #2
 8007294:	4413      	add	r3, r2
 8007296:	009b      	lsls	r3, r3, #2
 8007298:	440b      	add	r3, r1
 800729a:	3326      	adds	r3, #38	; 0x26
 800729c:	2210      	movs	r2, #16
 800729e:	801a      	strh	r2, [r3, #0]
 80072a0:	e035      	b.n	800730e <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80072a2:	4b42      	ldr	r3, [pc, #264]	; (80073ac <USBD_CDC_Init+0x1e4>)
 80072a4:	7819      	ldrb	r1, [r3, #0]
 80072a6:	2340      	movs	r3, #64	; 0x40
 80072a8:	2202      	movs	r2, #2
 80072aa:	6878      	ldr	r0, [r7, #4]
 80072ac:	f002 fa9d 	bl	80097ea <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80072b0:	4b3e      	ldr	r3, [pc, #248]	; (80073ac <USBD_CDC_Init+0x1e4>)
 80072b2:	781b      	ldrb	r3, [r3, #0]
 80072b4:	f003 020f 	and.w	r2, r3, #15
 80072b8:	6879      	ldr	r1, [r7, #4]
 80072ba:	4613      	mov	r3, r2
 80072bc:	009b      	lsls	r3, r3, #2
 80072be:	4413      	add	r3, r2
 80072c0:	009b      	lsls	r3, r3, #2
 80072c2:	440b      	add	r3, r1
 80072c4:	3324      	adds	r3, #36	; 0x24
 80072c6:	2201      	movs	r2, #1
 80072c8:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80072ca:	4b39      	ldr	r3, [pc, #228]	; (80073b0 <USBD_CDC_Init+0x1e8>)
 80072cc:	7819      	ldrb	r1, [r3, #0]
 80072ce:	2340      	movs	r3, #64	; 0x40
 80072d0:	2202      	movs	r2, #2
 80072d2:	6878      	ldr	r0, [r7, #4]
 80072d4:	f002 fa89 	bl	80097ea <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80072d8:	4b35      	ldr	r3, [pc, #212]	; (80073b0 <USBD_CDC_Init+0x1e8>)
 80072da:	781b      	ldrb	r3, [r3, #0]
 80072dc:	f003 020f 	and.w	r2, r3, #15
 80072e0:	6879      	ldr	r1, [r7, #4]
 80072e2:	4613      	mov	r3, r2
 80072e4:	009b      	lsls	r3, r3, #2
 80072e6:	4413      	add	r3, r2
 80072e8:	009b      	lsls	r3, r3, #2
 80072ea:	440b      	add	r3, r1
 80072ec:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80072f0:	2201      	movs	r2, #1
 80072f2:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80072f4:	4b2f      	ldr	r3, [pc, #188]	; (80073b4 <USBD_CDC_Init+0x1ec>)
 80072f6:	781b      	ldrb	r3, [r3, #0]
 80072f8:	f003 020f 	and.w	r2, r3, #15
 80072fc:	6879      	ldr	r1, [r7, #4]
 80072fe:	4613      	mov	r3, r2
 8007300:	009b      	lsls	r3, r3, #2
 8007302:	4413      	add	r3, r2
 8007304:	009b      	lsls	r3, r3, #2
 8007306:	440b      	add	r3, r1
 8007308:	3326      	adds	r3, #38	; 0x26
 800730a:	2210      	movs	r2, #16
 800730c:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800730e:	4b29      	ldr	r3, [pc, #164]	; (80073b4 <USBD_CDC_Init+0x1ec>)
 8007310:	7819      	ldrb	r1, [r3, #0]
 8007312:	2308      	movs	r3, #8
 8007314:	2203      	movs	r2, #3
 8007316:	6878      	ldr	r0, [r7, #4]
 8007318:	f002 fa67 	bl	80097ea <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800731c:	4b25      	ldr	r3, [pc, #148]	; (80073b4 <USBD_CDC_Init+0x1ec>)
 800731e:	781b      	ldrb	r3, [r3, #0]
 8007320:	f003 020f 	and.w	r2, r3, #15
 8007324:	6879      	ldr	r1, [r7, #4]
 8007326:	4613      	mov	r3, r2
 8007328:	009b      	lsls	r3, r3, #2
 800732a:	4413      	add	r3, r2
 800732c:	009b      	lsls	r3, r3, #2
 800732e:	440b      	add	r3, r1
 8007330:	3324      	adds	r3, #36	; 0x24
 8007332:	2201      	movs	r2, #1
 8007334:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	2200      	movs	r2, #0
 800733a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007344:	687a      	ldr	r2, [r7, #4]
 8007346:	33b0      	adds	r3, #176	; 0xb0
 8007348:	009b      	lsls	r3, r3, #2
 800734a:	4413      	add	r3, r2
 800734c:	685b      	ldr	r3, [r3, #4]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	2200      	movs	r2, #0
 8007356:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	2200      	movs	r2, #0
 800735e:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8007368:	2b00      	cmp	r3, #0
 800736a:	d101      	bne.n	8007370 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800736c:	2302      	movs	r3, #2
 800736e:	e018      	b.n	80073a2 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	7c1b      	ldrb	r3, [r3, #16]
 8007374:	2b00      	cmp	r3, #0
 8007376:	d10a      	bne.n	800738e <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007378:	4b0d      	ldr	r3, [pc, #52]	; (80073b0 <USBD_CDC_Init+0x1e8>)
 800737a:	7819      	ldrb	r1, [r3, #0]
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007382:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007386:	6878      	ldr	r0, [r7, #4]
 8007388:	f002 fb1e 	bl	80099c8 <USBD_LL_PrepareReceive>
 800738c:	e008      	b.n	80073a0 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800738e:	4b08      	ldr	r3, [pc, #32]	; (80073b0 <USBD_CDC_Init+0x1e8>)
 8007390:	7819      	ldrb	r1, [r3, #0]
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007398:	2340      	movs	r3, #64	; 0x40
 800739a:	6878      	ldr	r0, [r7, #4]
 800739c:	f002 fb14 	bl	80099c8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80073a0:	2300      	movs	r3, #0
}
 80073a2:	4618      	mov	r0, r3
 80073a4:	3710      	adds	r7, #16
 80073a6:	46bd      	mov	sp, r7
 80073a8:	bd80      	pop	{r7, pc}
 80073aa:	bf00      	nop
 80073ac:	2000009b 	.word	0x2000009b
 80073b0:	2000009c 	.word	0x2000009c
 80073b4:	2000009d 	.word	0x2000009d

080073b8 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80073b8:	b580      	push	{r7, lr}
 80073ba:	b082      	sub	sp, #8
 80073bc:	af00      	add	r7, sp, #0
 80073be:	6078      	str	r0, [r7, #4]
 80073c0:	460b      	mov	r3, r1
 80073c2:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 80073c4:	4b3a      	ldr	r3, [pc, #232]	; (80074b0 <USBD_CDC_DeInit+0xf8>)
 80073c6:	781b      	ldrb	r3, [r3, #0]
 80073c8:	4619      	mov	r1, r3
 80073ca:	6878      	ldr	r0, [r7, #4]
 80073cc:	f002 fa33 	bl	8009836 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 80073d0:	4b37      	ldr	r3, [pc, #220]	; (80074b0 <USBD_CDC_DeInit+0xf8>)
 80073d2:	781b      	ldrb	r3, [r3, #0]
 80073d4:	f003 020f 	and.w	r2, r3, #15
 80073d8:	6879      	ldr	r1, [r7, #4]
 80073da:	4613      	mov	r3, r2
 80073dc:	009b      	lsls	r3, r3, #2
 80073de:	4413      	add	r3, r2
 80073e0:	009b      	lsls	r3, r3, #2
 80073e2:	440b      	add	r3, r1
 80073e4:	3324      	adds	r3, #36	; 0x24
 80073e6:	2200      	movs	r2, #0
 80073e8:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 80073ea:	4b32      	ldr	r3, [pc, #200]	; (80074b4 <USBD_CDC_DeInit+0xfc>)
 80073ec:	781b      	ldrb	r3, [r3, #0]
 80073ee:	4619      	mov	r1, r3
 80073f0:	6878      	ldr	r0, [r7, #4]
 80073f2:	f002 fa20 	bl	8009836 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 80073f6:	4b2f      	ldr	r3, [pc, #188]	; (80074b4 <USBD_CDC_DeInit+0xfc>)
 80073f8:	781b      	ldrb	r3, [r3, #0]
 80073fa:	f003 020f 	and.w	r2, r3, #15
 80073fe:	6879      	ldr	r1, [r7, #4]
 8007400:	4613      	mov	r3, r2
 8007402:	009b      	lsls	r3, r3, #2
 8007404:	4413      	add	r3, r2
 8007406:	009b      	lsls	r3, r3, #2
 8007408:	440b      	add	r3, r1
 800740a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800740e:	2200      	movs	r2, #0
 8007410:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8007412:	4b29      	ldr	r3, [pc, #164]	; (80074b8 <USBD_CDC_DeInit+0x100>)
 8007414:	781b      	ldrb	r3, [r3, #0]
 8007416:	4619      	mov	r1, r3
 8007418:	6878      	ldr	r0, [r7, #4]
 800741a:	f002 fa0c 	bl	8009836 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800741e:	4b26      	ldr	r3, [pc, #152]	; (80074b8 <USBD_CDC_DeInit+0x100>)
 8007420:	781b      	ldrb	r3, [r3, #0]
 8007422:	f003 020f 	and.w	r2, r3, #15
 8007426:	6879      	ldr	r1, [r7, #4]
 8007428:	4613      	mov	r3, r2
 800742a:	009b      	lsls	r3, r3, #2
 800742c:	4413      	add	r3, r2
 800742e:	009b      	lsls	r3, r3, #2
 8007430:	440b      	add	r3, r1
 8007432:	3324      	adds	r3, #36	; 0x24
 8007434:	2200      	movs	r2, #0
 8007436:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8007438:	4b1f      	ldr	r3, [pc, #124]	; (80074b8 <USBD_CDC_DeInit+0x100>)
 800743a:	781b      	ldrb	r3, [r3, #0]
 800743c:	f003 020f 	and.w	r2, r3, #15
 8007440:	6879      	ldr	r1, [r7, #4]
 8007442:	4613      	mov	r3, r2
 8007444:	009b      	lsls	r3, r3, #2
 8007446:	4413      	add	r3, r2
 8007448:	009b      	lsls	r3, r3, #2
 800744a:	440b      	add	r3, r1
 800744c:	3326      	adds	r3, #38	; 0x26
 800744e:	2200      	movs	r2, #0
 8007450:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	32b0      	adds	r2, #176	; 0xb0
 800745c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007460:	2b00      	cmp	r3, #0
 8007462:	d01f      	beq.n	80074a4 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800746a:	687a      	ldr	r2, [r7, #4]
 800746c:	33b0      	adds	r3, #176	; 0xb0
 800746e:	009b      	lsls	r3, r3, #2
 8007470:	4413      	add	r3, r2
 8007472:	685b      	ldr	r3, [r3, #4]
 8007474:	685b      	ldr	r3, [r3, #4]
 8007476:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	32b0      	adds	r2, #176	; 0xb0
 8007482:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007486:	4618      	mov	r0, r3
 8007488:	f002 fae0 	bl	8009a4c <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	32b0      	adds	r2, #176	; 0xb0
 8007496:	2100      	movs	r1, #0
 8007498:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	2200      	movs	r2, #0
 80074a0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 80074a4:	2300      	movs	r3, #0
}
 80074a6:	4618      	mov	r0, r3
 80074a8:	3708      	adds	r7, #8
 80074aa:	46bd      	mov	sp, r7
 80074ac:	bd80      	pop	{r7, pc}
 80074ae:	bf00      	nop
 80074b0:	2000009b 	.word	0x2000009b
 80074b4:	2000009c 	.word	0x2000009c
 80074b8:	2000009d 	.word	0x2000009d

080074bc <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80074bc:	b580      	push	{r7, lr}
 80074be:	b086      	sub	sp, #24
 80074c0:	af00      	add	r7, sp, #0
 80074c2:	6078      	str	r0, [r7, #4]
 80074c4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	32b0      	adds	r2, #176	; 0xb0
 80074d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80074d4:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80074d6:	2300      	movs	r3, #0
 80074d8:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80074da:	2300      	movs	r3, #0
 80074dc:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80074de:	2300      	movs	r3, #0
 80074e0:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80074e2:	693b      	ldr	r3, [r7, #16]
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d101      	bne.n	80074ec <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 80074e8:	2303      	movs	r3, #3
 80074ea:	e0bf      	b.n	800766c <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80074ec:	683b      	ldr	r3, [r7, #0]
 80074ee:	781b      	ldrb	r3, [r3, #0]
 80074f0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d050      	beq.n	800759a <USBD_CDC_Setup+0xde>
 80074f8:	2b20      	cmp	r3, #32
 80074fa:	f040 80af 	bne.w	800765c <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80074fe:	683b      	ldr	r3, [r7, #0]
 8007500:	88db      	ldrh	r3, [r3, #6]
 8007502:	2b00      	cmp	r3, #0
 8007504:	d03a      	beq.n	800757c <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8007506:	683b      	ldr	r3, [r7, #0]
 8007508:	781b      	ldrb	r3, [r3, #0]
 800750a:	b25b      	sxtb	r3, r3
 800750c:	2b00      	cmp	r3, #0
 800750e:	da1b      	bge.n	8007548 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007516:	687a      	ldr	r2, [r7, #4]
 8007518:	33b0      	adds	r3, #176	; 0xb0
 800751a:	009b      	lsls	r3, r3, #2
 800751c:	4413      	add	r3, r2
 800751e:	685b      	ldr	r3, [r3, #4]
 8007520:	689b      	ldr	r3, [r3, #8]
 8007522:	683a      	ldr	r2, [r7, #0]
 8007524:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8007526:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007528:	683a      	ldr	r2, [r7, #0]
 800752a:	88d2      	ldrh	r2, [r2, #6]
 800752c:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800752e:	683b      	ldr	r3, [r7, #0]
 8007530:	88db      	ldrh	r3, [r3, #6]
 8007532:	2b07      	cmp	r3, #7
 8007534:	bf28      	it	cs
 8007536:	2307      	movcs	r3, #7
 8007538:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800753a:	693b      	ldr	r3, [r7, #16]
 800753c:	89fa      	ldrh	r2, [r7, #14]
 800753e:	4619      	mov	r1, r3
 8007540:	6878      	ldr	r0, [r7, #4]
 8007542:	f001 fd43 	bl	8008fcc <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8007546:	e090      	b.n	800766a <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8007548:	683b      	ldr	r3, [r7, #0]
 800754a:	785a      	ldrb	r2, [r3, #1]
 800754c:	693b      	ldr	r3, [r7, #16]
 800754e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8007552:	683b      	ldr	r3, [r7, #0]
 8007554:	88db      	ldrh	r3, [r3, #6]
 8007556:	2b3f      	cmp	r3, #63	; 0x3f
 8007558:	d803      	bhi.n	8007562 <USBD_CDC_Setup+0xa6>
 800755a:	683b      	ldr	r3, [r7, #0]
 800755c:	88db      	ldrh	r3, [r3, #6]
 800755e:	b2da      	uxtb	r2, r3
 8007560:	e000      	b.n	8007564 <USBD_CDC_Setup+0xa8>
 8007562:	2240      	movs	r2, #64	; 0x40
 8007564:	693b      	ldr	r3, [r7, #16]
 8007566:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800756a:	6939      	ldr	r1, [r7, #16]
 800756c:	693b      	ldr	r3, [r7, #16]
 800756e:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8007572:	461a      	mov	r2, r3
 8007574:	6878      	ldr	r0, [r7, #4]
 8007576:	f001 fd55 	bl	8009024 <USBD_CtlPrepareRx>
      break;
 800757a:	e076      	b.n	800766a <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007582:	687a      	ldr	r2, [r7, #4]
 8007584:	33b0      	adds	r3, #176	; 0xb0
 8007586:	009b      	lsls	r3, r3, #2
 8007588:	4413      	add	r3, r2
 800758a:	685b      	ldr	r3, [r3, #4]
 800758c:	689b      	ldr	r3, [r3, #8]
 800758e:	683a      	ldr	r2, [r7, #0]
 8007590:	7850      	ldrb	r0, [r2, #1]
 8007592:	2200      	movs	r2, #0
 8007594:	6839      	ldr	r1, [r7, #0]
 8007596:	4798      	blx	r3
      break;
 8007598:	e067      	b.n	800766a <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800759a:	683b      	ldr	r3, [r7, #0]
 800759c:	785b      	ldrb	r3, [r3, #1]
 800759e:	2b0b      	cmp	r3, #11
 80075a0:	d851      	bhi.n	8007646 <USBD_CDC_Setup+0x18a>
 80075a2:	a201      	add	r2, pc, #4	; (adr r2, 80075a8 <USBD_CDC_Setup+0xec>)
 80075a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075a8:	080075d9 	.word	0x080075d9
 80075ac:	08007655 	.word	0x08007655
 80075b0:	08007647 	.word	0x08007647
 80075b4:	08007647 	.word	0x08007647
 80075b8:	08007647 	.word	0x08007647
 80075bc:	08007647 	.word	0x08007647
 80075c0:	08007647 	.word	0x08007647
 80075c4:	08007647 	.word	0x08007647
 80075c8:	08007647 	.word	0x08007647
 80075cc:	08007647 	.word	0x08007647
 80075d0:	08007603 	.word	0x08007603
 80075d4:	0800762d 	.word	0x0800762d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80075de:	b2db      	uxtb	r3, r3
 80075e0:	2b03      	cmp	r3, #3
 80075e2:	d107      	bne.n	80075f4 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80075e4:	f107 030a 	add.w	r3, r7, #10
 80075e8:	2202      	movs	r2, #2
 80075ea:	4619      	mov	r1, r3
 80075ec:	6878      	ldr	r0, [r7, #4]
 80075ee:	f001 fced 	bl	8008fcc <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80075f2:	e032      	b.n	800765a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80075f4:	6839      	ldr	r1, [r7, #0]
 80075f6:	6878      	ldr	r0, [r7, #4]
 80075f8:	f001 fc77 	bl	8008eea <USBD_CtlError>
            ret = USBD_FAIL;
 80075fc:	2303      	movs	r3, #3
 80075fe:	75fb      	strb	r3, [r7, #23]
          break;
 8007600:	e02b      	b.n	800765a <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007608:	b2db      	uxtb	r3, r3
 800760a:	2b03      	cmp	r3, #3
 800760c:	d107      	bne.n	800761e <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800760e:	f107 030d 	add.w	r3, r7, #13
 8007612:	2201      	movs	r2, #1
 8007614:	4619      	mov	r1, r3
 8007616:	6878      	ldr	r0, [r7, #4]
 8007618:	f001 fcd8 	bl	8008fcc <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800761c:	e01d      	b.n	800765a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800761e:	6839      	ldr	r1, [r7, #0]
 8007620:	6878      	ldr	r0, [r7, #4]
 8007622:	f001 fc62 	bl	8008eea <USBD_CtlError>
            ret = USBD_FAIL;
 8007626:	2303      	movs	r3, #3
 8007628:	75fb      	strb	r3, [r7, #23]
          break;
 800762a:	e016      	b.n	800765a <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007632:	b2db      	uxtb	r3, r3
 8007634:	2b03      	cmp	r3, #3
 8007636:	d00f      	beq.n	8007658 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8007638:	6839      	ldr	r1, [r7, #0]
 800763a:	6878      	ldr	r0, [r7, #4]
 800763c:	f001 fc55 	bl	8008eea <USBD_CtlError>
            ret = USBD_FAIL;
 8007640:	2303      	movs	r3, #3
 8007642:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8007644:	e008      	b.n	8007658 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8007646:	6839      	ldr	r1, [r7, #0]
 8007648:	6878      	ldr	r0, [r7, #4]
 800764a:	f001 fc4e 	bl	8008eea <USBD_CtlError>
          ret = USBD_FAIL;
 800764e:	2303      	movs	r3, #3
 8007650:	75fb      	strb	r3, [r7, #23]
          break;
 8007652:	e002      	b.n	800765a <USBD_CDC_Setup+0x19e>
          break;
 8007654:	bf00      	nop
 8007656:	e008      	b.n	800766a <USBD_CDC_Setup+0x1ae>
          break;
 8007658:	bf00      	nop
      }
      break;
 800765a:	e006      	b.n	800766a <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800765c:	6839      	ldr	r1, [r7, #0]
 800765e:	6878      	ldr	r0, [r7, #4]
 8007660:	f001 fc43 	bl	8008eea <USBD_CtlError>
      ret = USBD_FAIL;
 8007664:	2303      	movs	r3, #3
 8007666:	75fb      	strb	r3, [r7, #23]
      break;
 8007668:	bf00      	nop
  }

  return (uint8_t)ret;
 800766a:	7dfb      	ldrb	r3, [r7, #23]
}
 800766c:	4618      	mov	r0, r3
 800766e:	3718      	adds	r7, #24
 8007670:	46bd      	mov	sp, r7
 8007672:	bd80      	pop	{r7, pc}

08007674 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007674:	b580      	push	{r7, lr}
 8007676:	b084      	sub	sp, #16
 8007678:	af00      	add	r7, sp, #0
 800767a:	6078      	str	r0, [r7, #4]
 800767c:	460b      	mov	r3, r1
 800767e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007686:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	32b0      	adds	r2, #176	; 0xb0
 8007692:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007696:	2b00      	cmp	r3, #0
 8007698:	d101      	bne.n	800769e <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800769a:	2303      	movs	r3, #3
 800769c:	e065      	b.n	800776a <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	32b0      	adds	r2, #176	; 0xb0
 80076a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80076ac:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80076ae:	78fb      	ldrb	r3, [r7, #3]
 80076b0:	f003 020f 	and.w	r2, r3, #15
 80076b4:	6879      	ldr	r1, [r7, #4]
 80076b6:	4613      	mov	r3, r2
 80076b8:	009b      	lsls	r3, r3, #2
 80076ba:	4413      	add	r3, r2
 80076bc:	009b      	lsls	r3, r3, #2
 80076be:	440b      	add	r3, r1
 80076c0:	3318      	adds	r3, #24
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d02f      	beq.n	8007728 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 80076c8:	78fb      	ldrb	r3, [r7, #3]
 80076ca:	f003 020f 	and.w	r2, r3, #15
 80076ce:	6879      	ldr	r1, [r7, #4]
 80076d0:	4613      	mov	r3, r2
 80076d2:	009b      	lsls	r3, r3, #2
 80076d4:	4413      	add	r3, r2
 80076d6:	009b      	lsls	r3, r3, #2
 80076d8:	440b      	add	r3, r1
 80076da:	3318      	adds	r3, #24
 80076dc:	681a      	ldr	r2, [r3, #0]
 80076de:	78fb      	ldrb	r3, [r7, #3]
 80076e0:	f003 010f 	and.w	r1, r3, #15
 80076e4:	68f8      	ldr	r0, [r7, #12]
 80076e6:	460b      	mov	r3, r1
 80076e8:	00db      	lsls	r3, r3, #3
 80076ea:	440b      	add	r3, r1
 80076ec:	009b      	lsls	r3, r3, #2
 80076ee:	4403      	add	r3, r0
 80076f0:	3348      	adds	r3, #72	; 0x48
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	fbb2 f1f3 	udiv	r1, r2, r3
 80076f8:	fb01 f303 	mul.w	r3, r1, r3
 80076fc:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d112      	bne.n	8007728 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8007702:	78fb      	ldrb	r3, [r7, #3]
 8007704:	f003 020f 	and.w	r2, r3, #15
 8007708:	6879      	ldr	r1, [r7, #4]
 800770a:	4613      	mov	r3, r2
 800770c:	009b      	lsls	r3, r3, #2
 800770e:	4413      	add	r3, r2
 8007710:	009b      	lsls	r3, r3, #2
 8007712:	440b      	add	r3, r1
 8007714:	3318      	adds	r3, #24
 8007716:	2200      	movs	r2, #0
 8007718:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800771a:	78f9      	ldrb	r1, [r7, #3]
 800771c:	2300      	movs	r3, #0
 800771e:	2200      	movs	r2, #0
 8007720:	6878      	ldr	r0, [r7, #4]
 8007722:	f002 f930 	bl	8009986 <USBD_LL_Transmit>
 8007726:	e01f      	b.n	8007768 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8007728:	68bb      	ldr	r3, [r7, #8]
 800772a:	2200      	movs	r2, #0
 800772c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007736:	687a      	ldr	r2, [r7, #4]
 8007738:	33b0      	adds	r3, #176	; 0xb0
 800773a:	009b      	lsls	r3, r3, #2
 800773c:	4413      	add	r3, r2
 800773e:	685b      	ldr	r3, [r3, #4]
 8007740:	691b      	ldr	r3, [r3, #16]
 8007742:	2b00      	cmp	r3, #0
 8007744:	d010      	beq.n	8007768 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800774c:	687a      	ldr	r2, [r7, #4]
 800774e:	33b0      	adds	r3, #176	; 0xb0
 8007750:	009b      	lsls	r3, r3, #2
 8007752:	4413      	add	r3, r2
 8007754:	685b      	ldr	r3, [r3, #4]
 8007756:	691b      	ldr	r3, [r3, #16]
 8007758:	68ba      	ldr	r2, [r7, #8]
 800775a:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800775e:	68ba      	ldr	r2, [r7, #8]
 8007760:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8007764:	78fa      	ldrb	r2, [r7, #3]
 8007766:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8007768:	2300      	movs	r3, #0
}
 800776a:	4618      	mov	r0, r3
 800776c:	3710      	adds	r7, #16
 800776e:	46bd      	mov	sp, r7
 8007770:	bd80      	pop	{r7, pc}

08007772 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007772:	b580      	push	{r7, lr}
 8007774:	b084      	sub	sp, #16
 8007776:	af00      	add	r7, sp, #0
 8007778:	6078      	str	r0, [r7, #4]
 800777a:	460b      	mov	r3, r1
 800777c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	32b0      	adds	r2, #176	; 0xb0
 8007788:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800778c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	32b0      	adds	r2, #176	; 0xb0
 8007798:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800779c:	2b00      	cmp	r3, #0
 800779e:	d101      	bne.n	80077a4 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 80077a0:	2303      	movs	r3, #3
 80077a2:	e01a      	b.n	80077da <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80077a4:	78fb      	ldrb	r3, [r7, #3]
 80077a6:	4619      	mov	r1, r3
 80077a8:	6878      	ldr	r0, [r7, #4]
 80077aa:	f002 f92e 	bl	8009a0a <USBD_LL_GetRxDataSize>
 80077ae:	4602      	mov	r2, r0
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80077bc:	687a      	ldr	r2, [r7, #4]
 80077be:	33b0      	adds	r3, #176	; 0xb0
 80077c0:	009b      	lsls	r3, r3, #2
 80077c2:	4413      	add	r3, r2
 80077c4:	685b      	ldr	r3, [r3, #4]
 80077c6:	68db      	ldr	r3, [r3, #12]
 80077c8:	68fa      	ldr	r2, [r7, #12]
 80077ca:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80077ce:	68fa      	ldr	r2, [r7, #12]
 80077d0:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80077d4:	4611      	mov	r1, r2
 80077d6:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80077d8:	2300      	movs	r3, #0
}
 80077da:	4618      	mov	r0, r3
 80077dc:	3710      	adds	r7, #16
 80077de:	46bd      	mov	sp, r7
 80077e0:	bd80      	pop	{r7, pc}

080077e2 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80077e2:	b580      	push	{r7, lr}
 80077e4:	b084      	sub	sp, #16
 80077e6:	af00      	add	r7, sp, #0
 80077e8:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	32b0      	adds	r2, #176	; 0xb0
 80077f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80077f8:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d101      	bne.n	8007804 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007800:	2303      	movs	r3, #3
 8007802:	e025      	b.n	8007850 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800780a:	687a      	ldr	r2, [r7, #4]
 800780c:	33b0      	adds	r3, #176	; 0xb0
 800780e:	009b      	lsls	r3, r3, #2
 8007810:	4413      	add	r3, r2
 8007812:	685b      	ldr	r3, [r3, #4]
 8007814:	2b00      	cmp	r3, #0
 8007816:	d01a      	beq.n	800784e <USBD_CDC_EP0_RxReady+0x6c>
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800781e:	2bff      	cmp	r3, #255	; 0xff
 8007820:	d015      	beq.n	800784e <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007828:	687a      	ldr	r2, [r7, #4]
 800782a:	33b0      	adds	r3, #176	; 0xb0
 800782c:	009b      	lsls	r3, r3, #2
 800782e:	4413      	add	r3, r2
 8007830:	685b      	ldr	r3, [r3, #4]
 8007832:	689b      	ldr	r3, [r3, #8]
 8007834:	68fa      	ldr	r2, [r7, #12]
 8007836:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 800783a:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800783c:	68fa      	ldr	r2, [r7, #12]
 800783e:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8007842:	b292      	uxth	r2, r2
 8007844:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	22ff      	movs	r2, #255	; 0xff
 800784a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800784e:	2300      	movs	r3, #0
}
 8007850:	4618      	mov	r0, r3
 8007852:	3710      	adds	r7, #16
 8007854:	46bd      	mov	sp, r7
 8007856:	bd80      	pop	{r7, pc}

08007858 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8007858:	b580      	push	{r7, lr}
 800785a:	b086      	sub	sp, #24
 800785c:	af00      	add	r7, sp, #0
 800785e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007860:	2182      	movs	r1, #130	; 0x82
 8007862:	4818      	ldr	r0, [pc, #96]	; (80078c4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007864:	f000 fd09 	bl	800827a <USBD_GetEpDesc>
 8007868:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800786a:	2101      	movs	r1, #1
 800786c:	4815      	ldr	r0, [pc, #84]	; (80078c4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800786e:	f000 fd04 	bl	800827a <USBD_GetEpDesc>
 8007872:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007874:	2181      	movs	r1, #129	; 0x81
 8007876:	4813      	ldr	r0, [pc, #76]	; (80078c4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007878:	f000 fcff 	bl	800827a <USBD_GetEpDesc>
 800787c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800787e:	697b      	ldr	r3, [r7, #20]
 8007880:	2b00      	cmp	r3, #0
 8007882:	d002      	beq.n	800788a <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8007884:	697b      	ldr	r3, [r7, #20]
 8007886:	2210      	movs	r2, #16
 8007888:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800788a:	693b      	ldr	r3, [r7, #16]
 800788c:	2b00      	cmp	r3, #0
 800788e:	d006      	beq.n	800789e <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007890:	693b      	ldr	r3, [r7, #16]
 8007892:	2200      	movs	r2, #0
 8007894:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007898:	711a      	strb	r2, [r3, #4]
 800789a:	2200      	movs	r2, #0
 800789c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d006      	beq.n	80078b2 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	2200      	movs	r2, #0
 80078a8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80078ac:	711a      	strb	r2, [r3, #4]
 80078ae:	2200      	movs	r2, #0
 80078b0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	2243      	movs	r2, #67	; 0x43
 80078b6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80078b8:	4b02      	ldr	r3, [pc, #8]	; (80078c4 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 80078ba:	4618      	mov	r0, r3
 80078bc:	3718      	adds	r7, #24
 80078be:	46bd      	mov	sp, r7
 80078c0:	bd80      	pop	{r7, pc}
 80078c2:	bf00      	nop
 80078c4:	20000058 	.word	0x20000058

080078c8 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80078c8:	b580      	push	{r7, lr}
 80078ca:	b086      	sub	sp, #24
 80078cc:	af00      	add	r7, sp, #0
 80078ce:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80078d0:	2182      	movs	r1, #130	; 0x82
 80078d2:	4818      	ldr	r0, [pc, #96]	; (8007934 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80078d4:	f000 fcd1 	bl	800827a <USBD_GetEpDesc>
 80078d8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80078da:	2101      	movs	r1, #1
 80078dc:	4815      	ldr	r0, [pc, #84]	; (8007934 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80078de:	f000 fccc 	bl	800827a <USBD_GetEpDesc>
 80078e2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80078e4:	2181      	movs	r1, #129	; 0x81
 80078e6:	4813      	ldr	r0, [pc, #76]	; (8007934 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80078e8:	f000 fcc7 	bl	800827a <USBD_GetEpDesc>
 80078ec:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80078ee:	697b      	ldr	r3, [r7, #20]
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d002      	beq.n	80078fa <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 80078f4:	697b      	ldr	r3, [r7, #20]
 80078f6:	2210      	movs	r2, #16
 80078f8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80078fa:	693b      	ldr	r3, [r7, #16]
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d006      	beq.n	800790e <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8007900:	693b      	ldr	r3, [r7, #16]
 8007902:	2200      	movs	r2, #0
 8007904:	711a      	strb	r2, [r3, #4]
 8007906:	2200      	movs	r2, #0
 8007908:	f042 0202 	orr.w	r2, r2, #2
 800790c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	2b00      	cmp	r3, #0
 8007912:	d006      	beq.n	8007922 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	2200      	movs	r2, #0
 8007918:	711a      	strb	r2, [r3, #4]
 800791a:	2200      	movs	r2, #0
 800791c:	f042 0202 	orr.w	r2, r2, #2
 8007920:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	2243      	movs	r2, #67	; 0x43
 8007926:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007928:	4b02      	ldr	r3, [pc, #8]	; (8007934 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800792a:	4618      	mov	r0, r3
 800792c:	3718      	adds	r7, #24
 800792e:	46bd      	mov	sp, r7
 8007930:	bd80      	pop	{r7, pc}
 8007932:	bf00      	nop
 8007934:	20000058 	.word	0x20000058

08007938 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007938:	b580      	push	{r7, lr}
 800793a:	b086      	sub	sp, #24
 800793c:	af00      	add	r7, sp, #0
 800793e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007940:	2182      	movs	r1, #130	; 0x82
 8007942:	4818      	ldr	r0, [pc, #96]	; (80079a4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007944:	f000 fc99 	bl	800827a <USBD_GetEpDesc>
 8007948:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800794a:	2101      	movs	r1, #1
 800794c:	4815      	ldr	r0, [pc, #84]	; (80079a4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800794e:	f000 fc94 	bl	800827a <USBD_GetEpDesc>
 8007952:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007954:	2181      	movs	r1, #129	; 0x81
 8007956:	4813      	ldr	r0, [pc, #76]	; (80079a4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007958:	f000 fc8f 	bl	800827a <USBD_GetEpDesc>
 800795c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800795e:	697b      	ldr	r3, [r7, #20]
 8007960:	2b00      	cmp	r3, #0
 8007962:	d002      	beq.n	800796a <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8007964:	697b      	ldr	r3, [r7, #20]
 8007966:	2210      	movs	r2, #16
 8007968:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800796a:	693b      	ldr	r3, [r7, #16]
 800796c:	2b00      	cmp	r3, #0
 800796e:	d006      	beq.n	800797e <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007970:	693b      	ldr	r3, [r7, #16]
 8007972:	2200      	movs	r2, #0
 8007974:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007978:	711a      	strb	r2, [r3, #4]
 800797a:	2200      	movs	r2, #0
 800797c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	2b00      	cmp	r3, #0
 8007982:	d006      	beq.n	8007992 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	2200      	movs	r2, #0
 8007988:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800798c:	711a      	strb	r2, [r3, #4]
 800798e:	2200      	movs	r2, #0
 8007990:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	2243      	movs	r2, #67	; 0x43
 8007996:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007998:	4b02      	ldr	r3, [pc, #8]	; (80079a4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800799a:	4618      	mov	r0, r3
 800799c:	3718      	adds	r7, #24
 800799e:	46bd      	mov	sp, r7
 80079a0:	bd80      	pop	{r7, pc}
 80079a2:	bf00      	nop
 80079a4:	20000058 	.word	0x20000058

080079a8 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80079a8:	b480      	push	{r7}
 80079aa:	b083      	sub	sp, #12
 80079ac:	af00      	add	r7, sp, #0
 80079ae:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	220a      	movs	r2, #10
 80079b4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80079b6:	4b03      	ldr	r3, [pc, #12]	; (80079c4 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80079b8:	4618      	mov	r0, r3
 80079ba:	370c      	adds	r7, #12
 80079bc:	46bd      	mov	sp, r7
 80079be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079c2:	4770      	bx	lr
 80079c4:	20000014 	.word	0x20000014

080079c8 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80079c8:	b480      	push	{r7}
 80079ca:	b083      	sub	sp, #12
 80079cc:	af00      	add	r7, sp, #0
 80079ce:	6078      	str	r0, [r7, #4]
 80079d0:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80079d2:	683b      	ldr	r3, [r7, #0]
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d101      	bne.n	80079dc <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80079d8:	2303      	movs	r3, #3
 80079da:	e009      	b.n	80079f0 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80079e2:	687a      	ldr	r2, [r7, #4]
 80079e4:	33b0      	adds	r3, #176	; 0xb0
 80079e6:	009b      	lsls	r3, r3, #2
 80079e8:	4413      	add	r3, r2
 80079ea:	683a      	ldr	r2, [r7, #0]
 80079ec:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 80079ee:	2300      	movs	r3, #0
}
 80079f0:	4618      	mov	r0, r3
 80079f2:	370c      	adds	r7, #12
 80079f4:	46bd      	mov	sp, r7
 80079f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079fa:	4770      	bx	lr

080079fc <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80079fc:	b480      	push	{r7}
 80079fe:	b087      	sub	sp, #28
 8007a00:	af00      	add	r7, sp, #0
 8007a02:	60f8      	str	r0, [r7, #12]
 8007a04:	60b9      	str	r1, [r7, #8]
 8007a06:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	32b0      	adds	r2, #176	; 0xb0
 8007a12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a16:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8007a18:	697b      	ldr	r3, [r7, #20]
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d101      	bne.n	8007a22 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8007a1e:	2303      	movs	r3, #3
 8007a20:	e008      	b.n	8007a34 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8007a22:	697b      	ldr	r3, [r7, #20]
 8007a24:	68ba      	ldr	r2, [r7, #8]
 8007a26:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8007a2a:	697b      	ldr	r3, [r7, #20]
 8007a2c:	687a      	ldr	r2, [r7, #4]
 8007a2e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8007a32:	2300      	movs	r3, #0
}
 8007a34:	4618      	mov	r0, r3
 8007a36:	371c      	adds	r7, #28
 8007a38:	46bd      	mov	sp, r7
 8007a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a3e:	4770      	bx	lr

08007a40 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8007a40:	b480      	push	{r7}
 8007a42:	b085      	sub	sp, #20
 8007a44:	af00      	add	r7, sp, #0
 8007a46:	6078      	str	r0, [r7, #4]
 8007a48:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	32b0      	adds	r2, #176	; 0xb0
 8007a54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a58:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d101      	bne.n	8007a64 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8007a60:	2303      	movs	r3, #3
 8007a62:	e004      	b.n	8007a6e <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	683a      	ldr	r2, [r7, #0]
 8007a68:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8007a6c:	2300      	movs	r3, #0
}
 8007a6e:	4618      	mov	r0, r3
 8007a70:	3714      	adds	r7, #20
 8007a72:	46bd      	mov	sp, r7
 8007a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a78:	4770      	bx	lr
	...

08007a7c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8007a7c:	b580      	push	{r7, lr}
 8007a7e:	b084      	sub	sp, #16
 8007a80:	af00      	add	r7, sp, #0
 8007a82:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	32b0      	adds	r2, #176	; 0xb0
 8007a8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a92:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	32b0      	adds	r2, #176	; 0xb0
 8007a9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d101      	bne.n	8007aaa <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8007aa6:	2303      	movs	r3, #3
 8007aa8:	e018      	b.n	8007adc <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	7c1b      	ldrb	r3, [r3, #16]
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d10a      	bne.n	8007ac8 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007ab2:	4b0c      	ldr	r3, [pc, #48]	; (8007ae4 <USBD_CDC_ReceivePacket+0x68>)
 8007ab4:	7819      	ldrb	r1, [r3, #0]
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007abc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007ac0:	6878      	ldr	r0, [r7, #4]
 8007ac2:	f001 ff81 	bl	80099c8 <USBD_LL_PrepareReceive>
 8007ac6:	e008      	b.n	8007ada <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007ac8:	4b06      	ldr	r3, [pc, #24]	; (8007ae4 <USBD_CDC_ReceivePacket+0x68>)
 8007aca:	7819      	ldrb	r1, [r3, #0]
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007ad2:	2340      	movs	r3, #64	; 0x40
 8007ad4:	6878      	ldr	r0, [r7, #4]
 8007ad6:	f001 ff77 	bl	80099c8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007ada:	2300      	movs	r3, #0
}
 8007adc:	4618      	mov	r0, r3
 8007ade:	3710      	adds	r7, #16
 8007ae0:	46bd      	mov	sp, r7
 8007ae2:	bd80      	pop	{r7, pc}
 8007ae4:	2000009c 	.word	0x2000009c

08007ae8 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007ae8:	b580      	push	{r7, lr}
 8007aea:	b086      	sub	sp, #24
 8007aec:	af00      	add	r7, sp, #0
 8007aee:	60f8      	str	r0, [r7, #12]
 8007af0:	60b9      	str	r1, [r7, #8]
 8007af2:	4613      	mov	r3, r2
 8007af4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d101      	bne.n	8007b00 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8007afc:	2303      	movs	r3, #3
 8007afe:	e01f      	b.n	8007b40 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	2200      	movs	r2, #0
 8007b04:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	2200      	movs	r2, #0
 8007b0c:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	2200      	movs	r2, #0
 8007b14:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007b18:	68bb      	ldr	r3, [r7, #8]
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d003      	beq.n	8007b26 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	68ba      	ldr	r2, [r7, #8]
 8007b22:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	2201      	movs	r2, #1
 8007b2a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	79fa      	ldrb	r2, [r7, #7]
 8007b32:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8007b34:	68f8      	ldr	r0, [r7, #12]
 8007b36:	f001 fdeb 	bl	8009710 <USBD_LL_Init>
 8007b3a:	4603      	mov	r3, r0
 8007b3c:	75fb      	strb	r3, [r7, #23]

  return ret;
 8007b3e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007b40:	4618      	mov	r0, r3
 8007b42:	3718      	adds	r7, #24
 8007b44:	46bd      	mov	sp, r7
 8007b46:	bd80      	pop	{r7, pc}

08007b48 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007b48:	b580      	push	{r7, lr}
 8007b4a:	b084      	sub	sp, #16
 8007b4c:	af00      	add	r7, sp, #0
 8007b4e:	6078      	str	r0, [r7, #4]
 8007b50:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007b52:	2300      	movs	r3, #0
 8007b54:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8007b56:	683b      	ldr	r3, [r7, #0]
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d101      	bne.n	8007b60 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8007b5c:	2303      	movs	r3, #3
 8007b5e:	e025      	b.n	8007bac <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	683a      	ldr	r2, [r7, #0]
 8007b64:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	32ae      	adds	r2, #174	; 0xae
 8007b72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d00f      	beq.n	8007b9c <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	32ae      	adds	r2, #174	; 0xae
 8007b86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b8c:	f107 020e 	add.w	r2, r7, #14
 8007b90:	4610      	mov	r0, r2
 8007b92:	4798      	blx	r3
 8007b94:	4602      	mov	r2, r0
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8007ba2:	1c5a      	adds	r2, r3, #1
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8007baa:	2300      	movs	r3, #0
}
 8007bac:	4618      	mov	r0, r3
 8007bae:	3710      	adds	r7, #16
 8007bb0:	46bd      	mov	sp, r7
 8007bb2:	bd80      	pop	{r7, pc}

08007bb4 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007bb4:	b580      	push	{r7, lr}
 8007bb6:	b082      	sub	sp, #8
 8007bb8:	af00      	add	r7, sp, #0
 8007bba:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8007bbc:	6878      	ldr	r0, [r7, #4]
 8007bbe:	f001 fdf9 	bl	80097b4 <USBD_LL_Start>
 8007bc2:	4603      	mov	r3, r0
}
 8007bc4:	4618      	mov	r0, r3
 8007bc6:	3708      	adds	r7, #8
 8007bc8:	46bd      	mov	sp, r7
 8007bca:	bd80      	pop	{r7, pc}

08007bcc <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8007bcc:	b480      	push	{r7}
 8007bce:	b083      	sub	sp, #12
 8007bd0:	af00      	add	r7, sp, #0
 8007bd2:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007bd4:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8007bd6:	4618      	mov	r0, r3
 8007bd8:	370c      	adds	r7, #12
 8007bda:	46bd      	mov	sp, r7
 8007bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007be0:	4770      	bx	lr

08007be2 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007be2:	b580      	push	{r7, lr}
 8007be4:	b084      	sub	sp, #16
 8007be6:	af00      	add	r7, sp, #0
 8007be8:	6078      	str	r0, [r7, #4]
 8007bea:	460b      	mov	r3, r1
 8007bec:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8007bee:	2300      	movs	r3, #0
 8007bf0:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d009      	beq.n	8007c10 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	78fa      	ldrb	r2, [r7, #3]
 8007c06:	4611      	mov	r1, r2
 8007c08:	6878      	ldr	r0, [r7, #4]
 8007c0a:	4798      	blx	r3
 8007c0c:	4603      	mov	r3, r0
 8007c0e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007c10:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c12:	4618      	mov	r0, r3
 8007c14:	3710      	adds	r7, #16
 8007c16:	46bd      	mov	sp, r7
 8007c18:	bd80      	pop	{r7, pc}

08007c1a <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007c1a:	b580      	push	{r7, lr}
 8007c1c:	b084      	sub	sp, #16
 8007c1e:	af00      	add	r7, sp, #0
 8007c20:	6078      	str	r0, [r7, #4]
 8007c22:	460b      	mov	r3, r1
 8007c24:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8007c26:	2300      	movs	r3, #0
 8007c28:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c30:	685b      	ldr	r3, [r3, #4]
 8007c32:	78fa      	ldrb	r2, [r7, #3]
 8007c34:	4611      	mov	r1, r2
 8007c36:	6878      	ldr	r0, [r7, #4]
 8007c38:	4798      	blx	r3
 8007c3a:	4603      	mov	r3, r0
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d001      	beq.n	8007c44 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8007c40:	2303      	movs	r3, #3
 8007c42:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007c44:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c46:	4618      	mov	r0, r3
 8007c48:	3710      	adds	r7, #16
 8007c4a:	46bd      	mov	sp, r7
 8007c4c:	bd80      	pop	{r7, pc}

08007c4e <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007c4e:	b580      	push	{r7, lr}
 8007c50:	b084      	sub	sp, #16
 8007c52:	af00      	add	r7, sp, #0
 8007c54:	6078      	str	r0, [r7, #4]
 8007c56:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007c5e:	6839      	ldr	r1, [r7, #0]
 8007c60:	4618      	mov	r0, r3
 8007c62:	f001 f908 	bl	8008e76 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	2201      	movs	r2, #1
 8007c6a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8007c74:	461a      	mov	r2, r3
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007c82:	f003 031f 	and.w	r3, r3, #31
 8007c86:	2b02      	cmp	r3, #2
 8007c88:	d01a      	beq.n	8007cc0 <USBD_LL_SetupStage+0x72>
 8007c8a:	2b02      	cmp	r3, #2
 8007c8c:	d822      	bhi.n	8007cd4 <USBD_LL_SetupStage+0x86>
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d002      	beq.n	8007c98 <USBD_LL_SetupStage+0x4a>
 8007c92:	2b01      	cmp	r3, #1
 8007c94:	d00a      	beq.n	8007cac <USBD_LL_SetupStage+0x5e>
 8007c96:	e01d      	b.n	8007cd4 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007c9e:	4619      	mov	r1, r3
 8007ca0:	6878      	ldr	r0, [r7, #4]
 8007ca2:	f000 fb5f 	bl	8008364 <USBD_StdDevReq>
 8007ca6:	4603      	mov	r3, r0
 8007ca8:	73fb      	strb	r3, [r7, #15]
      break;
 8007caa:	e020      	b.n	8007cee <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007cb2:	4619      	mov	r1, r3
 8007cb4:	6878      	ldr	r0, [r7, #4]
 8007cb6:	f000 fbc7 	bl	8008448 <USBD_StdItfReq>
 8007cba:	4603      	mov	r3, r0
 8007cbc:	73fb      	strb	r3, [r7, #15]
      break;
 8007cbe:	e016      	b.n	8007cee <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007cc6:	4619      	mov	r1, r3
 8007cc8:	6878      	ldr	r0, [r7, #4]
 8007cca:	f000 fc29 	bl	8008520 <USBD_StdEPReq>
 8007cce:	4603      	mov	r3, r0
 8007cd0:	73fb      	strb	r3, [r7, #15]
      break;
 8007cd2:	e00c      	b.n	8007cee <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007cda:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007cde:	b2db      	uxtb	r3, r3
 8007ce0:	4619      	mov	r1, r3
 8007ce2:	6878      	ldr	r0, [r7, #4]
 8007ce4:	f001 fdc6 	bl	8009874 <USBD_LL_StallEP>
 8007ce8:	4603      	mov	r3, r0
 8007cea:	73fb      	strb	r3, [r7, #15]
      break;
 8007cec:	bf00      	nop
  }

  return ret;
 8007cee:	7bfb      	ldrb	r3, [r7, #15]
}
 8007cf0:	4618      	mov	r0, r3
 8007cf2:	3710      	adds	r7, #16
 8007cf4:	46bd      	mov	sp, r7
 8007cf6:	bd80      	pop	{r7, pc}

08007cf8 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007cf8:	b580      	push	{r7, lr}
 8007cfa:	b086      	sub	sp, #24
 8007cfc:	af00      	add	r7, sp, #0
 8007cfe:	60f8      	str	r0, [r7, #12]
 8007d00:	460b      	mov	r3, r1
 8007d02:	607a      	str	r2, [r7, #4]
 8007d04:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8007d06:	2300      	movs	r3, #0
 8007d08:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8007d0a:	7afb      	ldrb	r3, [r7, #11]
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d16e      	bne.n	8007dee <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8007d16:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007d1e:	2b03      	cmp	r3, #3
 8007d20:	f040 8098 	bne.w	8007e54 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8007d24:	693b      	ldr	r3, [r7, #16]
 8007d26:	689a      	ldr	r2, [r3, #8]
 8007d28:	693b      	ldr	r3, [r7, #16]
 8007d2a:	68db      	ldr	r3, [r3, #12]
 8007d2c:	429a      	cmp	r2, r3
 8007d2e:	d913      	bls.n	8007d58 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8007d30:	693b      	ldr	r3, [r7, #16]
 8007d32:	689a      	ldr	r2, [r3, #8]
 8007d34:	693b      	ldr	r3, [r7, #16]
 8007d36:	68db      	ldr	r3, [r3, #12]
 8007d38:	1ad2      	subs	r2, r2, r3
 8007d3a:	693b      	ldr	r3, [r7, #16]
 8007d3c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8007d3e:	693b      	ldr	r3, [r7, #16]
 8007d40:	68da      	ldr	r2, [r3, #12]
 8007d42:	693b      	ldr	r3, [r7, #16]
 8007d44:	689b      	ldr	r3, [r3, #8]
 8007d46:	4293      	cmp	r3, r2
 8007d48:	bf28      	it	cs
 8007d4a:	4613      	movcs	r3, r2
 8007d4c:	461a      	mov	r2, r3
 8007d4e:	6879      	ldr	r1, [r7, #4]
 8007d50:	68f8      	ldr	r0, [r7, #12]
 8007d52:	f001 f984 	bl	800905e <USBD_CtlContinueRx>
 8007d56:	e07d      	b.n	8007e54 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007d5e:	f003 031f 	and.w	r3, r3, #31
 8007d62:	2b02      	cmp	r3, #2
 8007d64:	d014      	beq.n	8007d90 <USBD_LL_DataOutStage+0x98>
 8007d66:	2b02      	cmp	r3, #2
 8007d68:	d81d      	bhi.n	8007da6 <USBD_LL_DataOutStage+0xae>
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d002      	beq.n	8007d74 <USBD_LL_DataOutStage+0x7c>
 8007d6e:	2b01      	cmp	r3, #1
 8007d70:	d003      	beq.n	8007d7a <USBD_LL_DataOutStage+0x82>
 8007d72:	e018      	b.n	8007da6 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8007d74:	2300      	movs	r3, #0
 8007d76:	75bb      	strb	r3, [r7, #22]
            break;
 8007d78:	e018      	b.n	8007dac <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8007d80:	b2db      	uxtb	r3, r3
 8007d82:	4619      	mov	r1, r3
 8007d84:	68f8      	ldr	r0, [r7, #12]
 8007d86:	f000 fa5e 	bl	8008246 <USBD_CoreFindIF>
 8007d8a:	4603      	mov	r3, r0
 8007d8c:	75bb      	strb	r3, [r7, #22]
            break;
 8007d8e:	e00d      	b.n	8007dac <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8007d96:	b2db      	uxtb	r3, r3
 8007d98:	4619      	mov	r1, r3
 8007d9a:	68f8      	ldr	r0, [r7, #12]
 8007d9c:	f000 fa60 	bl	8008260 <USBD_CoreFindEP>
 8007da0:	4603      	mov	r3, r0
 8007da2:	75bb      	strb	r3, [r7, #22]
            break;
 8007da4:	e002      	b.n	8007dac <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8007da6:	2300      	movs	r3, #0
 8007da8:	75bb      	strb	r3, [r7, #22]
            break;
 8007daa:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8007dac:	7dbb      	ldrb	r3, [r7, #22]
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d119      	bne.n	8007de6 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007db8:	b2db      	uxtb	r3, r3
 8007dba:	2b03      	cmp	r3, #3
 8007dbc:	d113      	bne.n	8007de6 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8007dbe:	7dba      	ldrb	r2, [r7, #22]
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	32ae      	adds	r2, #174	; 0xae
 8007dc4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007dc8:	691b      	ldr	r3, [r3, #16]
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d00b      	beq.n	8007de6 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8007dce:	7dba      	ldrb	r2, [r7, #22]
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8007dd6:	7dba      	ldrb	r2, [r7, #22]
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	32ae      	adds	r2, #174	; 0xae
 8007ddc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007de0:	691b      	ldr	r3, [r3, #16]
 8007de2:	68f8      	ldr	r0, [r7, #12]
 8007de4:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8007de6:	68f8      	ldr	r0, [r7, #12]
 8007de8:	f001 f94a 	bl	8009080 <USBD_CtlSendStatus>
 8007dec:	e032      	b.n	8007e54 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8007dee:	7afb      	ldrb	r3, [r7, #11]
 8007df0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007df4:	b2db      	uxtb	r3, r3
 8007df6:	4619      	mov	r1, r3
 8007df8:	68f8      	ldr	r0, [r7, #12]
 8007dfa:	f000 fa31 	bl	8008260 <USBD_CoreFindEP>
 8007dfe:	4603      	mov	r3, r0
 8007e00:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007e02:	7dbb      	ldrb	r3, [r7, #22]
 8007e04:	2bff      	cmp	r3, #255	; 0xff
 8007e06:	d025      	beq.n	8007e54 <USBD_LL_DataOutStage+0x15c>
 8007e08:	7dbb      	ldrb	r3, [r7, #22]
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d122      	bne.n	8007e54 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007e14:	b2db      	uxtb	r3, r3
 8007e16:	2b03      	cmp	r3, #3
 8007e18:	d117      	bne.n	8007e4a <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8007e1a:	7dba      	ldrb	r2, [r7, #22]
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	32ae      	adds	r2, #174	; 0xae
 8007e20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e24:	699b      	ldr	r3, [r3, #24]
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d00f      	beq.n	8007e4a <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8007e2a:	7dba      	ldrb	r2, [r7, #22]
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8007e32:	7dba      	ldrb	r2, [r7, #22]
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	32ae      	adds	r2, #174	; 0xae
 8007e38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e3c:	699b      	ldr	r3, [r3, #24]
 8007e3e:	7afa      	ldrb	r2, [r7, #11]
 8007e40:	4611      	mov	r1, r2
 8007e42:	68f8      	ldr	r0, [r7, #12]
 8007e44:	4798      	blx	r3
 8007e46:	4603      	mov	r3, r0
 8007e48:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8007e4a:	7dfb      	ldrb	r3, [r7, #23]
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	d001      	beq.n	8007e54 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8007e50:	7dfb      	ldrb	r3, [r7, #23]
 8007e52:	e000      	b.n	8007e56 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8007e54:	2300      	movs	r3, #0
}
 8007e56:	4618      	mov	r0, r3
 8007e58:	3718      	adds	r7, #24
 8007e5a:	46bd      	mov	sp, r7
 8007e5c:	bd80      	pop	{r7, pc}

08007e5e <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007e5e:	b580      	push	{r7, lr}
 8007e60:	b086      	sub	sp, #24
 8007e62:	af00      	add	r7, sp, #0
 8007e64:	60f8      	str	r0, [r7, #12]
 8007e66:	460b      	mov	r3, r1
 8007e68:	607a      	str	r2, [r7, #4]
 8007e6a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8007e6c:	7afb      	ldrb	r3, [r7, #11]
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d16f      	bne.n	8007f52 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	3314      	adds	r3, #20
 8007e76:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007e7e:	2b02      	cmp	r3, #2
 8007e80:	d15a      	bne.n	8007f38 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8007e82:	693b      	ldr	r3, [r7, #16]
 8007e84:	689a      	ldr	r2, [r3, #8]
 8007e86:	693b      	ldr	r3, [r7, #16]
 8007e88:	68db      	ldr	r3, [r3, #12]
 8007e8a:	429a      	cmp	r2, r3
 8007e8c:	d914      	bls.n	8007eb8 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8007e8e:	693b      	ldr	r3, [r7, #16]
 8007e90:	689a      	ldr	r2, [r3, #8]
 8007e92:	693b      	ldr	r3, [r7, #16]
 8007e94:	68db      	ldr	r3, [r3, #12]
 8007e96:	1ad2      	subs	r2, r2, r3
 8007e98:	693b      	ldr	r3, [r7, #16]
 8007e9a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8007e9c:	693b      	ldr	r3, [r7, #16]
 8007e9e:	689b      	ldr	r3, [r3, #8]
 8007ea0:	461a      	mov	r2, r3
 8007ea2:	6879      	ldr	r1, [r7, #4]
 8007ea4:	68f8      	ldr	r0, [r7, #12]
 8007ea6:	f001 f8ac 	bl	8009002 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007eaa:	2300      	movs	r3, #0
 8007eac:	2200      	movs	r2, #0
 8007eae:	2100      	movs	r1, #0
 8007eb0:	68f8      	ldr	r0, [r7, #12]
 8007eb2:	f001 fd89 	bl	80099c8 <USBD_LL_PrepareReceive>
 8007eb6:	e03f      	b.n	8007f38 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8007eb8:	693b      	ldr	r3, [r7, #16]
 8007eba:	68da      	ldr	r2, [r3, #12]
 8007ebc:	693b      	ldr	r3, [r7, #16]
 8007ebe:	689b      	ldr	r3, [r3, #8]
 8007ec0:	429a      	cmp	r2, r3
 8007ec2:	d11c      	bne.n	8007efe <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8007ec4:	693b      	ldr	r3, [r7, #16]
 8007ec6:	685a      	ldr	r2, [r3, #4]
 8007ec8:	693b      	ldr	r3, [r7, #16]
 8007eca:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8007ecc:	429a      	cmp	r2, r3
 8007ece:	d316      	bcc.n	8007efe <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8007ed0:	693b      	ldr	r3, [r7, #16]
 8007ed2:	685a      	ldr	r2, [r3, #4]
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007eda:	429a      	cmp	r2, r3
 8007edc:	d20f      	bcs.n	8007efe <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007ede:	2200      	movs	r2, #0
 8007ee0:	2100      	movs	r1, #0
 8007ee2:	68f8      	ldr	r0, [r7, #12]
 8007ee4:	f001 f88d 	bl	8009002 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	2200      	movs	r2, #0
 8007eec:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007ef0:	2300      	movs	r3, #0
 8007ef2:	2200      	movs	r2, #0
 8007ef4:	2100      	movs	r1, #0
 8007ef6:	68f8      	ldr	r0, [r7, #12]
 8007ef8:	f001 fd66 	bl	80099c8 <USBD_LL_PrepareReceive>
 8007efc:	e01c      	b.n	8007f38 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007f04:	b2db      	uxtb	r3, r3
 8007f06:	2b03      	cmp	r3, #3
 8007f08:	d10f      	bne.n	8007f2a <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f10:	68db      	ldr	r3, [r3, #12]
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d009      	beq.n	8007f2a <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	2200      	movs	r2, #0
 8007f1a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f24:	68db      	ldr	r3, [r3, #12]
 8007f26:	68f8      	ldr	r0, [r7, #12]
 8007f28:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8007f2a:	2180      	movs	r1, #128	; 0x80
 8007f2c:	68f8      	ldr	r0, [r7, #12]
 8007f2e:	f001 fca1 	bl	8009874 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8007f32:	68f8      	ldr	r0, [r7, #12]
 8007f34:	f001 f8b7 	bl	80090a6 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d03a      	beq.n	8007fb8 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8007f42:	68f8      	ldr	r0, [r7, #12]
 8007f44:	f7ff fe42 	bl	8007bcc <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	2200      	movs	r2, #0
 8007f4c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8007f50:	e032      	b.n	8007fb8 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8007f52:	7afb      	ldrb	r3, [r7, #11]
 8007f54:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007f58:	b2db      	uxtb	r3, r3
 8007f5a:	4619      	mov	r1, r3
 8007f5c:	68f8      	ldr	r0, [r7, #12]
 8007f5e:	f000 f97f 	bl	8008260 <USBD_CoreFindEP>
 8007f62:	4603      	mov	r3, r0
 8007f64:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007f66:	7dfb      	ldrb	r3, [r7, #23]
 8007f68:	2bff      	cmp	r3, #255	; 0xff
 8007f6a:	d025      	beq.n	8007fb8 <USBD_LL_DataInStage+0x15a>
 8007f6c:	7dfb      	ldrb	r3, [r7, #23]
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d122      	bne.n	8007fb8 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007f78:	b2db      	uxtb	r3, r3
 8007f7a:	2b03      	cmp	r3, #3
 8007f7c:	d11c      	bne.n	8007fb8 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8007f7e:	7dfa      	ldrb	r2, [r7, #23]
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	32ae      	adds	r2, #174	; 0xae
 8007f84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f88:	695b      	ldr	r3, [r3, #20]
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	d014      	beq.n	8007fb8 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8007f8e:	7dfa      	ldrb	r2, [r7, #23]
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8007f96:	7dfa      	ldrb	r2, [r7, #23]
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	32ae      	adds	r2, #174	; 0xae
 8007f9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007fa0:	695b      	ldr	r3, [r3, #20]
 8007fa2:	7afa      	ldrb	r2, [r7, #11]
 8007fa4:	4611      	mov	r1, r2
 8007fa6:	68f8      	ldr	r0, [r7, #12]
 8007fa8:	4798      	blx	r3
 8007faa:	4603      	mov	r3, r0
 8007fac:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8007fae:	7dbb      	ldrb	r3, [r7, #22]
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d001      	beq.n	8007fb8 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8007fb4:	7dbb      	ldrb	r3, [r7, #22]
 8007fb6:	e000      	b.n	8007fba <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8007fb8:	2300      	movs	r3, #0
}
 8007fba:	4618      	mov	r0, r3
 8007fbc:	3718      	adds	r7, #24
 8007fbe:	46bd      	mov	sp, r7
 8007fc0:	bd80      	pop	{r7, pc}

08007fc2 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007fc2:	b580      	push	{r7, lr}
 8007fc4:	b084      	sub	sp, #16
 8007fc6:	af00      	add	r7, sp, #0
 8007fc8:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8007fca:	2300      	movs	r3, #0
 8007fcc:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	2201      	movs	r2, #1
 8007fd2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	2200      	movs	r2, #0
 8007fda:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	2200      	movs	r2, #0
 8007fe2:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	2200      	movs	r2, #0
 8007fe8:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	2200      	movs	r2, #0
 8007ff0:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d014      	beq.n	8008028 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008004:	685b      	ldr	r3, [r3, #4]
 8008006:	2b00      	cmp	r3, #0
 8008008:	d00e      	beq.n	8008028 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008010:	685b      	ldr	r3, [r3, #4]
 8008012:	687a      	ldr	r2, [r7, #4]
 8008014:	6852      	ldr	r2, [r2, #4]
 8008016:	b2d2      	uxtb	r2, r2
 8008018:	4611      	mov	r1, r2
 800801a:	6878      	ldr	r0, [r7, #4]
 800801c:	4798      	blx	r3
 800801e:	4603      	mov	r3, r0
 8008020:	2b00      	cmp	r3, #0
 8008022:	d001      	beq.n	8008028 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8008024:	2303      	movs	r3, #3
 8008026:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008028:	2340      	movs	r3, #64	; 0x40
 800802a:	2200      	movs	r2, #0
 800802c:	2100      	movs	r1, #0
 800802e:	6878      	ldr	r0, [r7, #4]
 8008030:	f001 fbdb 	bl	80097ea <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	2201      	movs	r2, #1
 8008038:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	2240      	movs	r2, #64	; 0x40
 8008040:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008044:	2340      	movs	r3, #64	; 0x40
 8008046:	2200      	movs	r2, #0
 8008048:	2180      	movs	r1, #128	; 0x80
 800804a:	6878      	ldr	r0, [r7, #4]
 800804c:	f001 fbcd 	bl	80097ea <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	2201      	movs	r2, #1
 8008054:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	2240      	movs	r2, #64	; 0x40
 800805a:	621a      	str	r2, [r3, #32]

  return ret;
 800805c:	7bfb      	ldrb	r3, [r7, #15]
}
 800805e:	4618      	mov	r0, r3
 8008060:	3710      	adds	r7, #16
 8008062:	46bd      	mov	sp, r7
 8008064:	bd80      	pop	{r7, pc}

08008066 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8008066:	b480      	push	{r7}
 8008068:	b083      	sub	sp, #12
 800806a:	af00      	add	r7, sp, #0
 800806c:	6078      	str	r0, [r7, #4]
 800806e:	460b      	mov	r3, r1
 8008070:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	78fa      	ldrb	r2, [r7, #3]
 8008076:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8008078:	2300      	movs	r3, #0
}
 800807a:	4618      	mov	r0, r3
 800807c:	370c      	adds	r7, #12
 800807e:	46bd      	mov	sp, r7
 8008080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008084:	4770      	bx	lr

08008086 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8008086:	b480      	push	{r7}
 8008088:	b083      	sub	sp, #12
 800808a:	af00      	add	r7, sp, #0
 800808c:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008094:	b2da      	uxtb	r2, r3
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	2204      	movs	r2, #4
 80080a0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80080a4:	2300      	movs	r3, #0
}
 80080a6:	4618      	mov	r0, r3
 80080a8:	370c      	adds	r7, #12
 80080aa:	46bd      	mov	sp, r7
 80080ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080b0:	4770      	bx	lr

080080b2 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80080b2:	b480      	push	{r7}
 80080b4:	b083      	sub	sp, #12
 80080b6:	af00      	add	r7, sp, #0
 80080b8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80080c0:	b2db      	uxtb	r3, r3
 80080c2:	2b04      	cmp	r3, #4
 80080c4:	d106      	bne.n	80080d4 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 80080cc:	b2da      	uxtb	r2, r3
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80080d4:	2300      	movs	r3, #0
}
 80080d6:	4618      	mov	r0, r3
 80080d8:	370c      	adds	r7, #12
 80080da:	46bd      	mov	sp, r7
 80080dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080e0:	4770      	bx	lr

080080e2 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80080e2:	b580      	push	{r7, lr}
 80080e4:	b082      	sub	sp, #8
 80080e6:	af00      	add	r7, sp, #0
 80080e8:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80080f0:	b2db      	uxtb	r3, r3
 80080f2:	2b03      	cmp	r3, #3
 80080f4:	d110      	bne.n	8008118 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d00b      	beq.n	8008118 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008106:	69db      	ldr	r3, [r3, #28]
 8008108:	2b00      	cmp	r3, #0
 800810a:	d005      	beq.n	8008118 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008112:	69db      	ldr	r3, [r3, #28]
 8008114:	6878      	ldr	r0, [r7, #4]
 8008116:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8008118:	2300      	movs	r3, #0
}
 800811a:	4618      	mov	r0, r3
 800811c:	3708      	adds	r7, #8
 800811e:	46bd      	mov	sp, r7
 8008120:	bd80      	pop	{r7, pc}

08008122 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8008122:	b580      	push	{r7, lr}
 8008124:	b082      	sub	sp, #8
 8008126:	af00      	add	r7, sp, #0
 8008128:	6078      	str	r0, [r7, #4]
 800812a:	460b      	mov	r3, r1
 800812c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	32ae      	adds	r2, #174	; 0xae
 8008138:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800813c:	2b00      	cmp	r3, #0
 800813e:	d101      	bne.n	8008144 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8008140:	2303      	movs	r3, #3
 8008142:	e01c      	b.n	800817e <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800814a:	b2db      	uxtb	r3, r3
 800814c:	2b03      	cmp	r3, #3
 800814e:	d115      	bne.n	800817c <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	32ae      	adds	r2, #174	; 0xae
 800815a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800815e:	6a1b      	ldr	r3, [r3, #32]
 8008160:	2b00      	cmp	r3, #0
 8008162:	d00b      	beq.n	800817c <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	32ae      	adds	r2, #174	; 0xae
 800816e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008172:	6a1b      	ldr	r3, [r3, #32]
 8008174:	78fa      	ldrb	r2, [r7, #3]
 8008176:	4611      	mov	r1, r2
 8008178:	6878      	ldr	r0, [r7, #4]
 800817a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800817c:	2300      	movs	r3, #0
}
 800817e:	4618      	mov	r0, r3
 8008180:	3708      	adds	r7, #8
 8008182:	46bd      	mov	sp, r7
 8008184:	bd80      	pop	{r7, pc}

08008186 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8008186:	b580      	push	{r7, lr}
 8008188:	b082      	sub	sp, #8
 800818a:	af00      	add	r7, sp, #0
 800818c:	6078      	str	r0, [r7, #4]
 800818e:	460b      	mov	r3, r1
 8008190:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	32ae      	adds	r2, #174	; 0xae
 800819c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d101      	bne.n	80081a8 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 80081a4:	2303      	movs	r3, #3
 80081a6:	e01c      	b.n	80081e2 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80081ae:	b2db      	uxtb	r3, r3
 80081b0:	2b03      	cmp	r3, #3
 80081b2:	d115      	bne.n	80081e0 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	32ae      	adds	r2, #174	; 0xae
 80081be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80081c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	d00b      	beq.n	80081e0 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	32ae      	adds	r2, #174	; 0xae
 80081d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80081d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081d8:	78fa      	ldrb	r2, [r7, #3]
 80081da:	4611      	mov	r1, r2
 80081dc:	6878      	ldr	r0, [r7, #4]
 80081de:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80081e0:	2300      	movs	r3, #0
}
 80081e2:	4618      	mov	r0, r3
 80081e4:	3708      	adds	r7, #8
 80081e6:	46bd      	mov	sp, r7
 80081e8:	bd80      	pop	{r7, pc}

080081ea <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80081ea:	b480      	push	{r7}
 80081ec:	b083      	sub	sp, #12
 80081ee:	af00      	add	r7, sp, #0
 80081f0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80081f2:	2300      	movs	r3, #0
}
 80081f4:	4618      	mov	r0, r3
 80081f6:	370c      	adds	r7, #12
 80081f8:	46bd      	mov	sp, r7
 80081fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081fe:	4770      	bx	lr

08008200 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8008200:	b580      	push	{r7, lr}
 8008202:	b084      	sub	sp, #16
 8008204:	af00      	add	r7, sp, #0
 8008206:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8008208:	2300      	movs	r3, #0
 800820a:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	2201      	movs	r2, #1
 8008210:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800821a:	2b00      	cmp	r3, #0
 800821c:	d00e      	beq.n	800823c <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008224:	685b      	ldr	r3, [r3, #4]
 8008226:	687a      	ldr	r2, [r7, #4]
 8008228:	6852      	ldr	r2, [r2, #4]
 800822a:	b2d2      	uxtb	r2, r2
 800822c:	4611      	mov	r1, r2
 800822e:	6878      	ldr	r0, [r7, #4]
 8008230:	4798      	blx	r3
 8008232:	4603      	mov	r3, r0
 8008234:	2b00      	cmp	r3, #0
 8008236:	d001      	beq.n	800823c <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8008238:	2303      	movs	r3, #3
 800823a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800823c:	7bfb      	ldrb	r3, [r7, #15]
}
 800823e:	4618      	mov	r0, r3
 8008240:	3710      	adds	r7, #16
 8008242:	46bd      	mov	sp, r7
 8008244:	bd80      	pop	{r7, pc}

08008246 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8008246:	b480      	push	{r7}
 8008248:	b083      	sub	sp, #12
 800824a:	af00      	add	r7, sp, #0
 800824c:	6078      	str	r0, [r7, #4]
 800824e:	460b      	mov	r3, r1
 8008250:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8008252:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8008254:	4618      	mov	r0, r3
 8008256:	370c      	adds	r7, #12
 8008258:	46bd      	mov	sp, r7
 800825a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800825e:	4770      	bx	lr

08008260 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8008260:	b480      	push	{r7}
 8008262:	b083      	sub	sp, #12
 8008264:	af00      	add	r7, sp, #0
 8008266:	6078      	str	r0, [r7, #4]
 8008268:	460b      	mov	r3, r1
 800826a:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800826c:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800826e:	4618      	mov	r0, r3
 8008270:	370c      	adds	r7, #12
 8008272:	46bd      	mov	sp, r7
 8008274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008278:	4770      	bx	lr

0800827a <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800827a:	b580      	push	{r7, lr}
 800827c:	b086      	sub	sp, #24
 800827e:	af00      	add	r7, sp, #0
 8008280:	6078      	str	r0, [r7, #4]
 8008282:	460b      	mov	r3, r1
 8008284:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800828e:	2300      	movs	r3, #0
 8008290:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	885b      	ldrh	r3, [r3, #2]
 8008296:	b29a      	uxth	r2, r3
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	781b      	ldrb	r3, [r3, #0]
 800829c:	b29b      	uxth	r3, r3
 800829e:	429a      	cmp	r2, r3
 80082a0:	d920      	bls.n	80082e4 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	781b      	ldrb	r3, [r3, #0]
 80082a6:	b29b      	uxth	r3, r3
 80082a8:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 80082aa:	e013      	b.n	80082d4 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 80082ac:	f107 030a 	add.w	r3, r7, #10
 80082b0:	4619      	mov	r1, r3
 80082b2:	6978      	ldr	r0, [r7, #20]
 80082b4:	f000 f81b 	bl	80082ee <USBD_GetNextDesc>
 80082b8:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80082ba:	697b      	ldr	r3, [r7, #20]
 80082bc:	785b      	ldrb	r3, [r3, #1]
 80082be:	2b05      	cmp	r3, #5
 80082c0:	d108      	bne.n	80082d4 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 80082c2:	697b      	ldr	r3, [r7, #20]
 80082c4:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 80082c6:	693b      	ldr	r3, [r7, #16]
 80082c8:	789b      	ldrb	r3, [r3, #2]
 80082ca:	78fa      	ldrb	r2, [r7, #3]
 80082cc:	429a      	cmp	r2, r3
 80082ce:	d008      	beq.n	80082e2 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 80082d0:	2300      	movs	r3, #0
 80082d2:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	885b      	ldrh	r3, [r3, #2]
 80082d8:	b29a      	uxth	r2, r3
 80082da:	897b      	ldrh	r3, [r7, #10]
 80082dc:	429a      	cmp	r2, r3
 80082de:	d8e5      	bhi.n	80082ac <USBD_GetEpDesc+0x32>
 80082e0:	e000      	b.n	80082e4 <USBD_GetEpDesc+0x6a>
          break;
 80082e2:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 80082e4:	693b      	ldr	r3, [r7, #16]
}
 80082e6:	4618      	mov	r0, r3
 80082e8:	3718      	adds	r7, #24
 80082ea:	46bd      	mov	sp, r7
 80082ec:	bd80      	pop	{r7, pc}

080082ee <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80082ee:	b480      	push	{r7}
 80082f0:	b085      	sub	sp, #20
 80082f2:	af00      	add	r7, sp, #0
 80082f4:	6078      	str	r0, [r7, #4]
 80082f6:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 80082fc:	683b      	ldr	r3, [r7, #0]
 80082fe:	881a      	ldrh	r2, [r3, #0]
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	781b      	ldrb	r3, [r3, #0]
 8008304:	b29b      	uxth	r3, r3
 8008306:	4413      	add	r3, r2
 8008308:	b29a      	uxth	r2, r3
 800830a:	683b      	ldr	r3, [r7, #0]
 800830c:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	781b      	ldrb	r3, [r3, #0]
 8008312:	461a      	mov	r2, r3
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	4413      	add	r3, r2
 8008318:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800831a:	68fb      	ldr	r3, [r7, #12]
}
 800831c:	4618      	mov	r0, r3
 800831e:	3714      	adds	r7, #20
 8008320:	46bd      	mov	sp, r7
 8008322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008326:	4770      	bx	lr

08008328 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8008328:	b480      	push	{r7}
 800832a:	b087      	sub	sp, #28
 800832c:	af00      	add	r7, sp, #0
 800832e:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8008334:	697b      	ldr	r3, [r7, #20]
 8008336:	781b      	ldrb	r3, [r3, #0]
 8008338:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800833a:	697b      	ldr	r3, [r7, #20]
 800833c:	3301      	adds	r3, #1
 800833e:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8008340:	697b      	ldr	r3, [r7, #20]
 8008342:	781b      	ldrb	r3, [r3, #0]
 8008344:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8008346:	8a3b      	ldrh	r3, [r7, #16]
 8008348:	021b      	lsls	r3, r3, #8
 800834a:	b21a      	sxth	r2, r3
 800834c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008350:	4313      	orrs	r3, r2
 8008352:	b21b      	sxth	r3, r3
 8008354:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8008356:	89fb      	ldrh	r3, [r7, #14]
}
 8008358:	4618      	mov	r0, r3
 800835a:	371c      	adds	r7, #28
 800835c:	46bd      	mov	sp, r7
 800835e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008362:	4770      	bx	lr

08008364 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008364:	b580      	push	{r7, lr}
 8008366:	b084      	sub	sp, #16
 8008368:	af00      	add	r7, sp, #0
 800836a:	6078      	str	r0, [r7, #4]
 800836c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800836e:	2300      	movs	r3, #0
 8008370:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008372:	683b      	ldr	r3, [r7, #0]
 8008374:	781b      	ldrb	r3, [r3, #0]
 8008376:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800837a:	2b40      	cmp	r3, #64	; 0x40
 800837c:	d005      	beq.n	800838a <USBD_StdDevReq+0x26>
 800837e:	2b40      	cmp	r3, #64	; 0x40
 8008380:	d857      	bhi.n	8008432 <USBD_StdDevReq+0xce>
 8008382:	2b00      	cmp	r3, #0
 8008384:	d00f      	beq.n	80083a6 <USBD_StdDevReq+0x42>
 8008386:	2b20      	cmp	r3, #32
 8008388:	d153      	bne.n	8008432 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	32ae      	adds	r2, #174	; 0xae
 8008394:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008398:	689b      	ldr	r3, [r3, #8]
 800839a:	6839      	ldr	r1, [r7, #0]
 800839c:	6878      	ldr	r0, [r7, #4]
 800839e:	4798      	blx	r3
 80083a0:	4603      	mov	r3, r0
 80083a2:	73fb      	strb	r3, [r7, #15]
      break;
 80083a4:	e04a      	b.n	800843c <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80083a6:	683b      	ldr	r3, [r7, #0]
 80083a8:	785b      	ldrb	r3, [r3, #1]
 80083aa:	2b09      	cmp	r3, #9
 80083ac:	d83b      	bhi.n	8008426 <USBD_StdDevReq+0xc2>
 80083ae:	a201      	add	r2, pc, #4	; (adr r2, 80083b4 <USBD_StdDevReq+0x50>)
 80083b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083b4:	08008409 	.word	0x08008409
 80083b8:	0800841d 	.word	0x0800841d
 80083bc:	08008427 	.word	0x08008427
 80083c0:	08008413 	.word	0x08008413
 80083c4:	08008427 	.word	0x08008427
 80083c8:	080083e7 	.word	0x080083e7
 80083cc:	080083dd 	.word	0x080083dd
 80083d0:	08008427 	.word	0x08008427
 80083d4:	080083ff 	.word	0x080083ff
 80083d8:	080083f1 	.word	0x080083f1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80083dc:	6839      	ldr	r1, [r7, #0]
 80083de:	6878      	ldr	r0, [r7, #4]
 80083e0:	f000 fa3c 	bl	800885c <USBD_GetDescriptor>
          break;
 80083e4:	e024      	b.n	8008430 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80083e6:	6839      	ldr	r1, [r7, #0]
 80083e8:	6878      	ldr	r0, [r7, #4]
 80083ea:	f000 fba1 	bl	8008b30 <USBD_SetAddress>
          break;
 80083ee:	e01f      	b.n	8008430 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80083f0:	6839      	ldr	r1, [r7, #0]
 80083f2:	6878      	ldr	r0, [r7, #4]
 80083f4:	f000 fbe0 	bl	8008bb8 <USBD_SetConfig>
 80083f8:	4603      	mov	r3, r0
 80083fa:	73fb      	strb	r3, [r7, #15]
          break;
 80083fc:	e018      	b.n	8008430 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80083fe:	6839      	ldr	r1, [r7, #0]
 8008400:	6878      	ldr	r0, [r7, #4]
 8008402:	f000 fc83 	bl	8008d0c <USBD_GetConfig>
          break;
 8008406:	e013      	b.n	8008430 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8008408:	6839      	ldr	r1, [r7, #0]
 800840a:	6878      	ldr	r0, [r7, #4]
 800840c:	f000 fcb4 	bl	8008d78 <USBD_GetStatus>
          break;
 8008410:	e00e      	b.n	8008430 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8008412:	6839      	ldr	r1, [r7, #0]
 8008414:	6878      	ldr	r0, [r7, #4]
 8008416:	f000 fce3 	bl	8008de0 <USBD_SetFeature>
          break;
 800841a:	e009      	b.n	8008430 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800841c:	6839      	ldr	r1, [r7, #0]
 800841e:	6878      	ldr	r0, [r7, #4]
 8008420:	f000 fd07 	bl	8008e32 <USBD_ClrFeature>
          break;
 8008424:	e004      	b.n	8008430 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8008426:	6839      	ldr	r1, [r7, #0]
 8008428:	6878      	ldr	r0, [r7, #4]
 800842a:	f000 fd5e 	bl	8008eea <USBD_CtlError>
          break;
 800842e:	bf00      	nop
      }
      break;
 8008430:	e004      	b.n	800843c <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8008432:	6839      	ldr	r1, [r7, #0]
 8008434:	6878      	ldr	r0, [r7, #4]
 8008436:	f000 fd58 	bl	8008eea <USBD_CtlError>
      break;
 800843a:	bf00      	nop
  }

  return ret;
 800843c:	7bfb      	ldrb	r3, [r7, #15]
}
 800843e:	4618      	mov	r0, r3
 8008440:	3710      	adds	r7, #16
 8008442:	46bd      	mov	sp, r7
 8008444:	bd80      	pop	{r7, pc}
 8008446:	bf00      	nop

08008448 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008448:	b580      	push	{r7, lr}
 800844a:	b084      	sub	sp, #16
 800844c:	af00      	add	r7, sp, #0
 800844e:	6078      	str	r0, [r7, #4]
 8008450:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008452:	2300      	movs	r3, #0
 8008454:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008456:	683b      	ldr	r3, [r7, #0]
 8008458:	781b      	ldrb	r3, [r3, #0]
 800845a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800845e:	2b40      	cmp	r3, #64	; 0x40
 8008460:	d005      	beq.n	800846e <USBD_StdItfReq+0x26>
 8008462:	2b40      	cmp	r3, #64	; 0x40
 8008464:	d852      	bhi.n	800850c <USBD_StdItfReq+0xc4>
 8008466:	2b00      	cmp	r3, #0
 8008468:	d001      	beq.n	800846e <USBD_StdItfReq+0x26>
 800846a:	2b20      	cmp	r3, #32
 800846c:	d14e      	bne.n	800850c <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008474:	b2db      	uxtb	r3, r3
 8008476:	3b01      	subs	r3, #1
 8008478:	2b02      	cmp	r3, #2
 800847a:	d840      	bhi.n	80084fe <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800847c:	683b      	ldr	r3, [r7, #0]
 800847e:	889b      	ldrh	r3, [r3, #4]
 8008480:	b2db      	uxtb	r3, r3
 8008482:	2b01      	cmp	r3, #1
 8008484:	d836      	bhi.n	80084f4 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8008486:	683b      	ldr	r3, [r7, #0]
 8008488:	889b      	ldrh	r3, [r3, #4]
 800848a:	b2db      	uxtb	r3, r3
 800848c:	4619      	mov	r1, r3
 800848e:	6878      	ldr	r0, [r7, #4]
 8008490:	f7ff fed9 	bl	8008246 <USBD_CoreFindIF>
 8008494:	4603      	mov	r3, r0
 8008496:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008498:	7bbb      	ldrb	r3, [r7, #14]
 800849a:	2bff      	cmp	r3, #255	; 0xff
 800849c:	d01d      	beq.n	80084da <USBD_StdItfReq+0x92>
 800849e:	7bbb      	ldrb	r3, [r7, #14]
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	d11a      	bne.n	80084da <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 80084a4:	7bba      	ldrb	r2, [r7, #14]
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	32ae      	adds	r2, #174	; 0xae
 80084aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80084ae:	689b      	ldr	r3, [r3, #8]
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	d00f      	beq.n	80084d4 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 80084b4:	7bba      	ldrb	r2, [r7, #14]
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80084bc:	7bba      	ldrb	r2, [r7, #14]
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	32ae      	adds	r2, #174	; 0xae
 80084c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80084c6:	689b      	ldr	r3, [r3, #8]
 80084c8:	6839      	ldr	r1, [r7, #0]
 80084ca:	6878      	ldr	r0, [r7, #4]
 80084cc:	4798      	blx	r3
 80084ce:	4603      	mov	r3, r0
 80084d0:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80084d2:	e004      	b.n	80084de <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 80084d4:	2303      	movs	r3, #3
 80084d6:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80084d8:	e001      	b.n	80084de <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 80084da:	2303      	movs	r3, #3
 80084dc:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80084de:	683b      	ldr	r3, [r7, #0]
 80084e0:	88db      	ldrh	r3, [r3, #6]
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	d110      	bne.n	8008508 <USBD_StdItfReq+0xc0>
 80084e6:	7bfb      	ldrb	r3, [r7, #15]
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	d10d      	bne.n	8008508 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 80084ec:	6878      	ldr	r0, [r7, #4]
 80084ee:	f000 fdc7 	bl	8009080 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80084f2:	e009      	b.n	8008508 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 80084f4:	6839      	ldr	r1, [r7, #0]
 80084f6:	6878      	ldr	r0, [r7, #4]
 80084f8:	f000 fcf7 	bl	8008eea <USBD_CtlError>
          break;
 80084fc:	e004      	b.n	8008508 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 80084fe:	6839      	ldr	r1, [r7, #0]
 8008500:	6878      	ldr	r0, [r7, #4]
 8008502:	f000 fcf2 	bl	8008eea <USBD_CtlError>
          break;
 8008506:	e000      	b.n	800850a <USBD_StdItfReq+0xc2>
          break;
 8008508:	bf00      	nop
      }
      break;
 800850a:	e004      	b.n	8008516 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800850c:	6839      	ldr	r1, [r7, #0]
 800850e:	6878      	ldr	r0, [r7, #4]
 8008510:	f000 fceb 	bl	8008eea <USBD_CtlError>
      break;
 8008514:	bf00      	nop
  }

  return ret;
 8008516:	7bfb      	ldrb	r3, [r7, #15]
}
 8008518:	4618      	mov	r0, r3
 800851a:	3710      	adds	r7, #16
 800851c:	46bd      	mov	sp, r7
 800851e:	bd80      	pop	{r7, pc}

08008520 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008520:	b580      	push	{r7, lr}
 8008522:	b084      	sub	sp, #16
 8008524:	af00      	add	r7, sp, #0
 8008526:	6078      	str	r0, [r7, #4]
 8008528:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800852a:	2300      	movs	r3, #0
 800852c:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800852e:	683b      	ldr	r3, [r7, #0]
 8008530:	889b      	ldrh	r3, [r3, #4]
 8008532:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008534:	683b      	ldr	r3, [r7, #0]
 8008536:	781b      	ldrb	r3, [r3, #0]
 8008538:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800853c:	2b40      	cmp	r3, #64	; 0x40
 800853e:	d007      	beq.n	8008550 <USBD_StdEPReq+0x30>
 8008540:	2b40      	cmp	r3, #64	; 0x40
 8008542:	f200 817f 	bhi.w	8008844 <USBD_StdEPReq+0x324>
 8008546:	2b00      	cmp	r3, #0
 8008548:	d02a      	beq.n	80085a0 <USBD_StdEPReq+0x80>
 800854a:	2b20      	cmp	r3, #32
 800854c:	f040 817a 	bne.w	8008844 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8008550:	7bbb      	ldrb	r3, [r7, #14]
 8008552:	4619      	mov	r1, r3
 8008554:	6878      	ldr	r0, [r7, #4]
 8008556:	f7ff fe83 	bl	8008260 <USBD_CoreFindEP>
 800855a:	4603      	mov	r3, r0
 800855c:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800855e:	7b7b      	ldrb	r3, [r7, #13]
 8008560:	2bff      	cmp	r3, #255	; 0xff
 8008562:	f000 8174 	beq.w	800884e <USBD_StdEPReq+0x32e>
 8008566:	7b7b      	ldrb	r3, [r7, #13]
 8008568:	2b00      	cmp	r3, #0
 800856a:	f040 8170 	bne.w	800884e <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800856e:	7b7a      	ldrb	r2, [r7, #13]
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8008576:	7b7a      	ldrb	r2, [r7, #13]
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	32ae      	adds	r2, #174	; 0xae
 800857c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008580:	689b      	ldr	r3, [r3, #8]
 8008582:	2b00      	cmp	r3, #0
 8008584:	f000 8163 	beq.w	800884e <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8008588:	7b7a      	ldrb	r2, [r7, #13]
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	32ae      	adds	r2, #174	; 0xae
 800858e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008592:	689b      	ldr	r3, [r3, #8]
 8008594:	6839      	ldr	r1, [r7, #0]
 8008596:	6878      	ldr	r0, [r7, #4]
 8008598:	4798      	blx	r3
 800859a:	4603      	mov	r3, r0
 800859c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800859e:	e156      	b.n	800884e <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80085a0:	683b      	ldr	r3, [r7, #0]
 80085a2:	785b      	ldrb	r3, [r3, #1]
 80085a4:	2b03      	cmp	r3, #3
 80085a6:	d008      	beq.n	80085ba <USBD_StdEPReq+0x9a>
 80085a8:	2b03      	cmp	r3, #3
 80085aa:	f300 8145 	bgt.w	8008838 <USBD_StdEPReq+0x318>
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	f000 809b 	beq.w	80086ea <USBD_StdEPReq+0x1ca>
 80085b4:	2b01      	cmp	r3, #1
 80085b6:	d03c      	beq.n	8008632 <USBD_StdEPReq+0x112>
 80085b8:	e13e      	b.n	8008838 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80085c0:	b2db      	uxtb	r3, r3
 80085c2:	2b02      	cmp	r3, #2
 80085c4:	d002      	beq.n	80085cc <USBD_StdEPReq+0xac>
 80085c6:	2b03      	cmp	r3, #3
 80085c8:	d016      	beq.n	80085f8 <USBD_StdEPReq+0xd8>
 80085ca:	e02c      	b.n	8008626 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80085cc:	7bbb      	ldrb	r3, [r7, #14]
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	d00d      	beq.n	80085ee <USBD_StdEPReq+0xce>
 80085d2:	7bbb      	ldrb	r3, [r7, #14]
 80085d4:	2b80      	cmp	r3, #128	; 0x80
 80085d6:	d00a      	beq.n	80085ee <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80085d8:	7bbb      	ldrb	r3, [r7, #14]
 80085da:	4619      	mov	r1, r3
 80085dc:	6878      	ldr	r0, [r7, #4]
 80085de:	f001 f949 	bl	8009874 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80085e2:	2180      	movs	r1, #128	; 0x80
 80085e4:	6878      	ldr	r0, [r7, #4]
 80085e6:	f001 f945 	bl	8009874 <USBD_LL_StallEP>
 80085ea:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80085ec:	e020      	b.n	8008630 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 80085ee:	6839      	ldr	r1, [r7, #0]
 80085f0:	6878      	ldr	r0, [r7, #4]
 80085f2:	f000 fc7a 	bl	8008eea <USBD_CtlError>
              break;
 80085f6:	e01b      	b.n	8008630 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80085f8:	683b      	ldr	r3, [r7, #0]
 80085fa:	885b      	ldrh	r3, [r3, #2]
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d10e      	bne.n	800861e <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008600:	7bbb      	ldrb	r3, [r7, #14]
 8008602:	2b00      	cmp	r3, #0
 8008604:	d00b      	beq.n	800861e <USBD_StdEPReq+0xfe>
 8008606:	7bbb      	ldrb	r3, [r7, #14]
 8008608:	2b80      	cmp	r3, #128	; 0x80
 800860a:	d008      	beq.n	800861e <USBD_StdEPReq+0xfe>
 800860c:	683b      	ldr	r3, [r7, #0]
 800860e:	88db      	ldrh	r3, [r3, #6]
 8008610:	2b00      	cmp	r3, #0
 8008612:	d104      	bne.n	800861e <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8008614:	7bbb      	ldrb	r3, [r7, #14]
 8008616:	4619      	mov	r1, r3
 8008618:	6878      	ldr	r0, [r7, #4]
 800861a:	f001 f92b 	bl	8009874 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800861e:	6878      	ldr	r0, [r7, #4]
 8008620:	f000 fd2e 	bl	8009080 <USBD_CtlSendStatus>

              break;
 8008624:	e004      	b.n	8008630 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8008626:	6839      	ldr	r1, [r7, #0]
 8008628:	6878      	ldr	r0, [r7, #4]
 800862a:	f000 fc5e 	bl	8008eea <USBD_CtlError>
              break;
 800862e:	bf00      	nop
          }
          break;
 8008630:	e107      	b.n	8008842 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008638:	b2db      	uxtb	r3, r3
 800863a:	2b02      	cmp	r3, #2
 800863c:	d002      	beq.n	8008644 <USBD_StdEPReq+0x124>
 800863e:	2b03      	cmp	r3, #3
 8008640:	d016      	beq.n	8008670 <USBD_StdEPReq+0x150>
 8008642:	e04b      	b.n	80086dc <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008644:	7bbb      	ldrb	r3, [r7, #14]
 8008646:	2b00      	cmp	r3, #0
 8008648:	d00d      	beq.n	8008666 <USBD_StdEPReq+0x146>
 800864a:	7bbb      	ldrb	r3, [r7, #14]
 800864c:	2b80      	cmp	r3, #128	; 0x80
 800864e:	d00a      	beq.n	8008666 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008650:	7bbb      	ldrb	r3, [r7, #14]
 8008652:	4619      	mov	r1, r3
 8008654:	6878      	ldr	r0, [r7, #4]
 8008656:	f001 f90d 	bl	8009874 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800865a:	2180      	movs	r1, #128	; 0x80
 800865c:	6878      	ldr	r0, [r7, #4]
 800865e:	f001 f909 	bl	8009874 <USBD_LL_StallEP>
 8008662:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008664:	e040      	b.n	80086e8 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8008666:	6839      	ldr	r1, [r7, #0]
 8008668:	6878      	ldr	r0, [r7, #4]
 800866a:	f000 fc3e 	bl	8008eea <USBD_CtlError>
              break;
 800866e:	e03b      	b.n	80086e8 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008670:	683b      	ldr	r3, [r7, #0]
 8008672:	885b      	ldrh	r3, [r3, #2]
 8008674:	2b00      	cmp	r3, #0
 8008676:	d136      	bne.n	80086e6 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008678:	7bbb      	ldrb	r3, [r7, #14]
 800867a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800867e:	2b00      	cmp	r3, #0
 8008680:	d004      	beq.n	800868c <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8008682:	7bbb      	ldrb	r3, [r7, #14]
 8008684:	4619      	mov	r1, r3
 8008686:	6878      	ldr	r0, [r7, #4]
 8008688:	f001 f913 	bl	80098b2 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800868c:	6878      	ldr	r0, [r7, #4]
 800868e:	f000 fcf7 	bl	8009080 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8008692:	7bbb      	ldrb	r3, [r7, #14]
 8008694:	4619      	mov	r1, r3
 8008696:	6878      	ldr	r0, [r7, #4]
 8008698:	f7ff fde2 	bl	8008260 <USBD_CoreFindEP>
 800869c:	4603      	mov	r3, r0
 800869e:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80086a0:	7b7b      	ldrb	r3, [r7, #13]
 80086a2:	2bff      	cmp	r3, #255	; 0xff
 80086a4:	d01f      	beq.n	80086e6 <USBD_StdEPReq+0x1c6>
 80086a6:	7b7b      	ldrb	r3, [r7, #13]
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	d11c      	bne.n	80086e6 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 80086ac:	7b7a      	ldrb	r2, [r7, #13]
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 80086b4:	7b7a      	ldrb	r2, [r7, #13]
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	32ae      	adds	r2, #174	; 0xae
 80086ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80086be:	689b      	ldr	r3, [r3, #8]
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	d010      	beq.n	80086e6 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80086c4:	7b7a      	ldrb	r2, [r7, #13]
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	32ae      	adds	r2, #174	; 0xae
 80086ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80086ce:	689b      	ldr	r3, [r3, #8]
 80086d0:	6839      	ldr	r1, [r7, #0]
 80086d2:	6878      	ldr	r0, [r7, #4]
 80086d4:	4798      	blx	r3
 80086d6:	4603      	mov	r3, r0
 80086d8:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 80086da:	e004      	b.n	80086e6 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 80086dc:	6839      	ldr	r1, [r7, #0]
 80086de:	6878      	ldr	r0, [r7, #4]
 80086e0:	f000 fc03 	bl	8008eea <USBD_CtlError>
              break;
 80086e4:	e000      	b.n	80086e8 <USBD_StdEPReq+0x1c8>
              break;
 80086e6:	bf00      	nop
          }
          break;
 80086e8:	e0ab      	b.n	8008842 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80086f0:	b2db      	uxtb	r3, r3
 80086f2:	2b02      	cmp	r3, #2
 80086f4:	d002      	beq.n	80086fc <USBD_StdEPReq+0x1dc>
 80086f6:	2b03      	cmp	r3, #3
 80086f8:	d032      	beq.n	8008760 <USBD_StdEPReq+0x240>
 80086fa:	e097      	b.n	800882c <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80086fc:	7bbb      	ldrb	r3, [r7, #14]
 80086fe:	2b00      	cmp	r3, #0
 8008700:	d007      	beq.n	8008712 <USBD_StdEPReq+0x1f2>
 8008702:	7bbb      	ldrb	r3, [r7, #14]
 8008704:	2b80      	cmp	r3, #128	; 0x80
 8008706:	d004      	beq.n	8008712 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8008708:	6839      	ldr	r1, [r7, #0]
 800870a:	6878      	ldr	r0, [r7, #4]
 800870c:	f000 fbed 	bl	8008eea <USBD_CtlError>
                break;
 8008710:	e091      	b.n	8008836 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008712:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008716:	2b00      	cmp	r3, #0
 8008718:	da0b      	bge.n	8008732 <USBD_StdEPReq+0x212>
 800871a:	7bbb      	ldrb	r3, [r7, #14]
 800871c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008720:	4613      	mov	r3, r2
 8008722:	009b      	lsls	r3, r3, #2
 8008724:	4413      	add	r3, r2
 8008726:	009b      	lsls	r3, r3, #2
 8008728:	3310      	adds	r3, #16
 800872a:	687a      	ldr	r2, [r7, #4]
 800872c:	4413      	add	r3, r2
 800872e:	3304      	adds	r3, #4
 8008730:	e00b      	b.n	800874a <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008732:	7bbb      	ldrb	r3, [r7, #14]
 8008734:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008738:	4613      	mov	r3, r2
 800873a:	009b      	lsls	r3, r3, #2
 800873c:	4413      	add	r3, r2
 800873e:	009b      	lsls	r3, r3, #2
 8008740:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008744:	687a      	ldr	r2, [r7, #4]
 8008746:	4413      	add	r3, r2
 8008748:	3304      	adds	r3, #4
 800874a:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800874c:	68bb      	ldr	r3, [r7, #8]
 800874e:	2200      	movs	r2, #0
 8008750:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008752:	68bb      	ldr	r3, [r7, #8]
 8008754:	2202      	movs	r2, #2
 8008756:	4619      	mov	r1, r3
 8008758:	6878      	ldr	r0, [r7, #4]
 800875a:	f000 fc37 	bl	8008fcc <USBD_CtlSendData>
              break;
 800875e:	e06a      	b.n	8008836 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8008760:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008764:	2b00      	cmp	r3, #0
 8008766:	da11      	bge.n	800878c <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008768:	7bbb      	ldrb	r3, [r7, #14]
 800876a:	f003 020f 	and.w	r2, r3, #15
 800876e:	6879      	ldr	r1, [r7, #4]
 8008770:	4613      	mov	r3, r2
 8008772:	009b      	lsls	r3, r3, #2
 8008774:	4413      	add	r3, r2
 8008776:	009b      	lsls	r3, r3, #2
 8008778:	440b      	add	r3, r1
 800877a:	3324      	adds	r3, #36	; 0x24
 800877c:	881b      	ldrh	r3, [r3, #0]
 800877e:	2b00      	cmp	r3, #0
 8008780:	d117      	bne.n	80087b2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8008782:	6839      	ldr	r1, [r7, #0]
 8008784:	6878      	ldr	r0, [r7, #4]
 8008786:	f000 fbb0 	bl	8008eea <USBD_CtlError>
                  break;
 800878a:	e054      	b.n	8008836 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800878c:	7bbb      	ldrb	r3, [r7, #14]
 800878e:	f003 020f 	and.w	r2, r3, #15
 8008792:	6879      	ldr	r1, [r7, #4]
 8008794:	4613      	mov	r3, r2
 8008796:	009b      	lsls	r3, r3, #2
 8008798:	4413      	add	r3, r2
 800879a:	009b      	lsls	r3, r3, #2
 800879c:	440b      	add	r3, r1
 800879e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80087a2:	881b      	ldrh	r3, [r3, #0]
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	d104      	bne.n	80087b2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80087a8:	6839      	ldr	r1, [r7, #0]
 80087aa:	6878      	ldr	r0, [r7, #4]
 80087ac:	f000 fb9d 	bl	8008eea <USBD_CtlError>
                  break;
 80087b0:	e041      	b.n	8008836 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80087b2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	da0b      	bge.n	80087d2 <USBD_StdEPReq+0x2b2>
 80087ba:	7bbb      	ldrb	r3, [r7, #14]
 80087bc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80087c0:	4613      	mov	r3, r2
 80087c2:	009b      	lsls	r3, r3, #2
 80087c4:	4413      	add	r3, r2
 80087c6:	009b      	lsls	r3, r3, #2
 80087c8:	3310      	adds	r3, #16
 80087ca:	687a      	ldr	r2, [r7, #4]
 80087cc:	4413      	add	r3, r2
 80087ce:	3304      	adds	r3, #4
 80087d0:	e00b      	b.n	80087ea <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80087d2:	7bbb      	ldrb	r3, [r7, #14]
 80087d4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80087d8:	4613      	mov	r3, r2
 80087da:	009b      	lsls	r3, r3, #2
 80087dc:	4413      	add	r3, r2
 80087de:	009b      	lsls	r3, r3, #2
 80087e0:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80087e4:	687a      	ldr	r2, [r7, #4]
 80087e6:	4413      	add	r3, r2
 80087e8:	3304      	adds	r3, #4
 80087ea:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80087ec:	7bbb      	ldrb	r3, [r7, #14]
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	d002      	beq.n	80087f8 <USBD_StdEPReq+0x2d8>
 80087f2:	7bbb      	ldrb	r3, [r7, #14]
 80087f4:	2b80      	cmp	r3, #128	; 0x80
 80087f6:	d103      	bne.n	8008800 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 80087f8:	68bb      	ldr	r3, [r7, #8]
 80087fa:	2200      	movs	r2, #0
 80087fc:	601a      	str	r2, [r3, #0]
 80087fe:	e00e      	b.n	800881e <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8008800:	7bbb      	ldrb	r3, [r7, #14]
 8008802:	4619      	mov	r1, r3
 8008804:	6878      	ldr	r0, [r7, #4]
 8008806:	f001 f873 	bl	80098f0 <USBD_LL_IsStallEP>
 800880a:	4603      	mov	r3, r0
 800880c:	2b00      	cmp	r3, #0
 800880e:	d003      	beq.n	8008818 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8008810:	68bb      	ldr	r3, [r7, #8]
 8008812:	2201      	movs	r2, #1
 8008814:	601a      	str	r2, [r3, #0]
 8008816:	e002      	b.n	800881e <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8008818:	68bb      	ldr	r3, [r7, #8]
 800881a:	2200      	movs	r2, #0
 800881c:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800881e:	68bb      	ldr	r3, [r7, #8]
 8008820:	2202      	movs	r2, #2
 8008822:	4619      	mov	r1, r3
 8008824:	6878      	ldr	r0, [r7, #4]
 8008826:	f000 fbd1 	bl	8008fcc <USBD_CtlSendData>
              break;
 800882a:	e004      	b.n	8008836 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800882c:	6839      	ldr	r1, [r7, #0]
 800882e:	6878      	ldr	r0, [r7, #4]
 8008830:	f000 fb5b 	bl	8008eea <USBD_CtlError>
              break;
 8008834:	bf00      	nop
          }
          break;
 8008836:	e004      	b.n	8008842 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8008838:	6839      	ldr	r1, [r7, #0]
 800883a:	6878      	ldr	r0, [r7, #4]
 800883c:	f000 fb55 	bl	8008eea <USBD_CtlError>
          break;
 8008840:	bf00      	nop
      }
      break;
 8008842:	e005      	b.n	8008850 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8008844:	6839      	ldr	r1, [r7, #0]
 8008846:	6878      	ldr	r0, [r7, #4]
 8008848:	f000 fb4f 	bl	8008eea <USBD_CtlError>
      break;
 800884c:	e000      	b.n	8008850 <USBD_StdEPReq+0x330>
      break;
 800884e:	bf00      	nop
  }

  return ret;
 8008850:	7bfb      	ldrb	r3, [r7, #15]
}
 8008852:	4618      	mov	r0, r3
 8008854:	3710      	adds	r7, #16
 8008856:	46bd      	mov	sp, r7
 8008858:	bd80      	pop	{r7, pc}
	...

0800885c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800885c:	b580      	push	{r7, lr}
 800885e:	b084      	sub	sp, #16
 8008860:	af00      	add	r7, sp, #0
 8008862:	6078      	str	r0, [r7, #4]
 8008864:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008866:	2300      	movs	r3, #0
 8008868:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800886a:	2300      	movs	r3, #0
 800886c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800886e:	2300      	movs	r3, #0
 8008870:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8008872:	683b      	ldr	r3, [r7, #0]
 8008874:	885b      	ldrh	r3, [r3, #2]
 8008876:	0a1b      	lsrs	r3, r3, #8
 8008878:	b29b      	uxth	r3, r3
 800887a:	3b01      	subs	r3, #1
 800887c:	2b06      	cmp	r3, #6
 800887e:	f200 8128 	bhi.w	8008ad2 <USBD_GetDescriptor+0x276>
 8008882:	a201      	add	r2, pc, #4	; (adr r2, 8008888 <USBD_GetDescriptor+0x2c>)
 8008884:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008888:	080088a5 	.word	0x080088a5
 800888c:	080088bd 	.word	0x080088bd
 8008890:	080088fd 	.word	0x080088fd
 8008894:	08008ad3 	.word	0x08008ad3
 8008898:	08008ad3 	.word	0x08008ad3
 800889c:	08008a73 	.word	0x08008a73
 80088a0:	08008a9f 	.word	0x08008a9f
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	687a      	ldr	r2, [r7, #4]
 80088ae:	7c12      	ldrb	r2, [r2, #16]
 80088b0:	f107 0108 	add.w	r1, r7, #8
 80088b4:	4610      	mov	r0, r2
 80088b6:	4798      	blx	r3
 80088b8:	60f8      	str	r0, [r7, #12]
      break;
 80088ba:	e112      	b.n	8008ae2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	7c1b      	ldrb	r3, [r3, #16]
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	d10d      	bne.n	80088e0 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80088ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088cc:	f107 0208 	add.w	r2, r7, #8
 80088d0:	4610      	mov	r0, r2
 80088d2:	4798      	blx	r3
 80088d4:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80088d6:	68fb      	ldr	r3, [r7, #12]
 80088d8:	3301      	adds	r3, #1
 80088da:	2202      	movs	r2, #2
 80088dc:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80088de:	e100      	b.n	8008ae2 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80088e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088e8:	f107 0208 	add.w	r2, r7, #8
 80088ec:	4610      	mov	r0, r2
 80088ee:	4798      	blx	r3
 80088f0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	3301      	adds	r3, #1
 80088f6:	2202      	movs	r2, #2
 80088f8:	701a      	strb	r2, [r3, #0]
      break;
 80088fa:	e0f2      	b.n	8008ae2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80088fc:	683b      	ldr	r3, [r7, #0]
 80088fe:	885b      	ldrh	r3, [r3, #2]
 8008900:	b2db      	uxtb	r3, r3
 8008902:	2b05      	cmp	r3, #5
 8008904:	f200 80ac 	bhi.w	8008a60 <USBD_GetDescriptor+0x204>
 8008908:	a201      	add	r2, pc, #4	; (adr r2, 8008910 <USBD_GetDescriptor+0xb4>)
 800890a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800890e:	bf00      	nop
 8008910:	08008929 	.word	0x08008929
 8008914:	0800895d 	.word	0x0800895d
 8008918:	08008991 	.word	0x08008991
 800891c:	080089c5 	.word	0x080089c5
 8008920:	080089f9 	.word	0x080089f9
 8008924:	08008a2d 	.word	0x08008a2d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800892e:	685b      	ldr	r3, [r3, #4]
 8008930:	2b00      	cmp	r3, #0
 8008932:	d00b      	beq.n	800894c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800893a:	685b      	ldr	r3, [r3, #4]
 800893c:	687a      	ldr	r2, [r7, #4]
 800893e:	7c12      	ldrb	r2, [r2, #16]
 8008940:	f107 0108 	add.w	r1, r7, #8
 8008944:	4610      	mov	r0, r2
 8008946:	4798      	blx	r3
 8008948:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800894a:	e091      	b.n	8008a70 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800894c:	6839      	ldr	r1, [r7, #0]
 800894e:	6878      	ldr	r0, [r7, #4]
 8008950:	f000 facb 	bl	8008eea <USBD_CtlError>
            err++;
 8008954:	7afb      	ldrb	r3, [r7, #11]
 8008956:	3301      	adds	r3, #1
 8008958:	72fb      	strb	r3, [r7, #11]
          break;
 800895a:	e089      	b.n	8008a70 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008962:	689b      	ldr	r3, [r3, #8]
 8008964:	2b00      	cmp	r3, #0
 8008966:	d00b      	beq.n	8008980 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800896e:	689b      	ldr	r3, [r3, #8]
 8008970:	687a      	ldr	r2, [r7, #4]
 8008972:	7c12      	ldrb	r2, [r2, #16]
 8008974:	f107 0108 	add.w	r1, r7, #8
 8008978:	4610      	mov	r0, r2
 800897a:	4798      	blx	r3
 800897c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800897e:	e077      	b.n	8008a70 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008980:	6839      	ldr	r1, [r7, #0]
 8008982:	6878      	ldr	r0, [r7, #4]
 8008984:	f000 fab1 	bl	8008eea <USBD_CtlError>
            err++;
 8008988:	7afb      	ldrb	r3, [r7, #11]
 800898a:	3301      	adds	r3, #1
 800898c:	72fb      	strb	r3, [r7, #11]
          break;
 800898e:	e06f      	b.n	8008a70 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008996:	68db      	ldr	r3, [r3, #12]
 8008998:	2b00      	cmp	r3, #0
 800899a:	d00b      	beq.n	80089b4 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80089a2:	68db      	ldr	r3, [r3, #12]
 80089a4:	687a      	ldr	r2, [r7, #4]
 80089a6:	7c12      	ldrb	r2, [r2, #16]
 80089a8:	f107 0108 	add.w	r1, r7, #8
 80089ac:	4610      	mov	r0, r2
 80089ae:	4798      	blx	r3
 80089b0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80089b2:	e05d      	b.n	8008a70 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80089b4:	6839      	ldr	r1, [r7, #0]
 80089b6:	6878      	ldr	r0, [r7, #4]
 80089b8:	f000 fa97 	bl	8008eea <USBD_CtlError>
            err++;
 80089bc:	7afb      	ldrb	r3, [r7, #11]
 80089be:	3301      	adds	r3, #1
 80089c0:	72fb      	strb	r3, [r7, #11]
          break;
 80089c2:	e055      	b.n	8008a70 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80089ca:	691b      	ldr	r3, [r3, #16]
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	d00b      	beq.n	80089e8 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80089d6:	691b      	ldr	r3, [r3, #16]
 80089d8:	687a      	ldr	r2, [r7, #4]
 80089da:	7c12      	ldrb	r2, [r2, #16]
 80089dc:	f107 0108 	add.w	r1, r7, #8
 80089e0:	4610      	mov	r0, r2
 80089e2:	4798      	blx	r3
 80089e4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80089e6:	e043      	b.n	8008a70 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80089e8:	6839      	ldr	r1, [r7, #0]
 80089ea:	6878      	ldr	r0, [r7, #4]
 80089ec:	f000 fa7d 	bl	8008eea <USBD_CtlError>
            err++;
 80089f0:	7afb      	ldrb	r3, [r7, #11]
 80089f2:	3301      	adds	r3, #1
 80089f4:	72fb      	strb	r3, [r7, #11]
          break;
 80089f6:	e03b      	b.n	8008a70 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80089fe:	695b      	ldr	r3, [r3, #20]
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	d00b      	beq.n	8008a1c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008a0a:	695b      	ldr	r3, [r3, #20]
 8008a0c:	687a      	ldr	r2, [r7, #4]
 8008a0e:	7c12      	ldrb	r2, [r2, #16]
 8008a10:	f107 0108 	add.w	r1, r7, #8
 8008a14:	4610      	mov	r0, r2
 8008a16:	4798      	blx	r3
 8008a18:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008a1a:	e029      	b.n	8008a70 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008a1c:	6839      	ldr	r1, [r7, #0]
 8008a1e:	6878      	ldr	r0, [r7, #4]
 8008a20:	f000 fa63 	bl	8008eea <USBD_CtlError>
            err++;
 8008a24:	7afb      	ldrb	r3, [r7, #11]
 8008a26:	3301      	adds	r3, #1
 8008a28:	72fb      	strb	r3, [r7, #11]
          break;
 8008a2a:	e021      	b.n	8008a70 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008a32:	699b      	ldr	r3, [r3, #24]
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	d00b      	beq.n	8008a50 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008a3e:	699b      	ldr	r3, [r3, #24]
 8008a40:	687a      	ldr	r2, [r7, #4]
 8008a42:	7c12      	ldrb	r2, [r2, #16]
 8008a44:	f107 0108 	add.w	r1, r7, #8
 8008a48:	4610      	mov	r0, r2
 8008a4a:	4798      	blx	r3
 8008a4c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008a4e:	e00f      	b.n	8008a70 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008a50:	6839      	ldr	r1, [r7, #0]
 8008a52:	6878      	ldr	r0, [r7, #4]
 8008a54:	f000 fa49 	bl	8008eea <USBD_CtlError>
            err++;
 8008a58:	7afb      	ldrb	r3, [r7, #11]
 8008a5a:	3301      	adds	r3, #1
 8008a5c:	72fb      	strb	r3, [r7, #11]
          break;
 8008a5e:	e007      	b.n	8008a70 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8008a60:	6839      	ldr	r1, [r7, #0]
 8008a62:	6878      	ldr	r0, [r7, #4]
 8008a64:	f000 fa41 	bl	8008eea <USBD_CtlError>
          err++;
 8008a68:	7afb      	ldrb	r3, [r7, #11]
 8008a6a:	3301      	adds	r3, #1
 8008a6c:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8008a6e:	bf00      	nop
      }
      break;
 8008a70:	e037      	b.n	8008ae2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	7c1b      	ldrb	r3, [r3, #16]
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	d109      	bne.n	8008a8e <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008a80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a82:	f107 0208 	add.w	r2, r7, #8
 8008a86:	4610      	mov	r0, r2
 8008a88:	4798      	blx	r3
 8008a8a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008a8c:	e029      	b.n	8008ae2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008a8e:	6839      	ldr	r1, [r7, #0]
 8008a90:	6878      	ldr	r0, [r7, #4]
 8008a92:	f000 fa2a 	bl	8008eea <USBD_CtlError>
        err++;
 8008a96:	7afb      	ldrb	r3, [r7, #11]
 8008a98:	3301      	adds	r3, #1
 8008a9a:	72fb      	strb	r3, [r7, #11]
      break;
 8008a9c:	e021      	b.n	8008ae2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	7c1b      	ldrb	r3, [r3, #16]
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	d10d      	bne.n	8008ac2 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008aae:	f107 0208 	add.w	r2, r7, #8
 8008ab2:	4610      	mov	r0, r2
 8008ab4:	4798      	blx	r3
 8008ab6:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	3301      	adds	r3, #1
 8008abc:	2207      	movs	r2, #7
 8008abe:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008ac0:	e00f      	b.n	8008ae2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008ac2:	6839      	ldr	r1, [r7, #0]
 8008ac4:	6878      	ldr	r0, [r7, #4]
 8008ac6:	f000 fa10 	bl	8008eea <USBD_CtlError>
        err++;
 8008aca:	7afb      	ldrb	r3, [r7, #11]
 8008acc:	3301      	adds	r3, #1
 8008ace:	72fb      	strb	r3, [r7, #11]
      break;
 8008ad0:	e007      	b.n	8008ae2 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8008ad2:	6839      	ldr	r1, [r7, #0]
 8008ad4:	6878      	ldr	r0, [r7, #4]
 8008ad6:	f000 fa08 	bl	8008eea <USBD_CtlError>
      err++;
 8008ada:	7afb      	ldrb	r3, [r7, #11]
 8008adc:	3301      	adds	r3, #1
 8008ade:	72fb      	strb	r3, [r7, #11]
      break;
 8008ae0:	bf00      	nop
  }

  if (err != 0U)
 8008ae2:	7afb      	ldrb	r3, [r7, #11]
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	d11e      	bne.n	8008b26 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8008ae8:	683b      	ldr	r3, [r7, #0]
 8008aea:	88db      	ldrh	r3, [r3, #6]
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	d016      	beq.n	8008b1e <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8008af0:	893b      	ldrh	r3, [r7, #8]
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	d00e      	beq.n	8008b14 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8008af6:	683b      	ldr	r3, [r7, #0]
 8008af8:	88da      	ldrh	r2, [r3, #6]
 8008afa:	893b      	ldrh	r3, [r7, #8]
 8008afc:	4293      	cmp	r3, r2
 8008afe:	bf28      	it	cs
 8008b00:	4613      	movcs	r3, r2
 8008b02:	b29b      	uxth	r3, r3
 8008b04:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8008b06:	893b      	ldrh	r3, [r7, #8]
 8008b08:	461a      	mov	r2, r3
 8008b0a:	68f9      	ldr	r1, [r7, #12]
 8008b0c:	6878      	ldr	r0, [r7, #4]
 8008b0e:	f000 fa5d 	bl	8008fcc <USBD_CtlSendData>
 8008b12:	e009      	b.n	8008b28 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8008b14:	6839      	ldr	r1, [r7, #0]
 8008b16:	6878      	ldr	r0, [r7, #4]
 8008b18:	f000 f9e7 	bl	8008eea <USBD_CtlError>
 8008b1c:	e004      	b.n	8008b28 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8008b1e:	6878      	ldr	r0, [r7, #4]
 8008b20:	f000 faae 	bl	8009080 <USBD_CtlSendStatus>
 8008b24:	e000      	b.n	8008b28 <USBD_GetDescriptor+0x2cc>
    return;
 8008b26:	bf00      	nop
  }
}
 8008b28:	3710      	adds	r7, #16
 8008b2a:	46bd      	mov	sp, r7
 8008b2c:	bd80      	pop	{r7, pc}
 8008b2e:	bf00      	nop

08008b30 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008b30:	b580      	push	{r7, lr}
 8008b32:	b084      	sub	sp, #16
 8008b34:	af00      	add	r7, sp, #0
 8008b36:	6078      	str	r0, [r7, #4]
 8008b38:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008b3a:	683b      	ldr	r3, [r7, #0]
 8008b3c:	889b      	ldrh	r3, [r3, #4]
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	d131      	bne.n	8008ba6 <USBD_SetAddress+0x76>
 8008b42:	683b      	ldr	r3, [r7, #0]
 8008b44:	88db      	ldrh	r3, [r3, #6]
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	d12d      	bne.n	8008ba6 <USBD_SetAddress+0x76>
 8008b4a:	683b      	ldr	r3, [r7, #0]
 8008b4c:	885b      	ldrh	r3, [r3, #2]
 8008b4e:	2b7f      	cmp	r3, #127	; 0x7f
 8008b50:	d829      	bhi.n	8008ba6 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008b52:	683b      	ldr	r3, [r7, #0]
 8008b54:	885b      	ldrh	r3, [r3, #2]
 8008b56:	b2db      	uxtb	r3, r3
 8008b58:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008b5c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008b64:	b2db      	uxtb	r3, r3
 8008b66:	2b03      	cmp	r3, #3
 8008b68:	d104      	bne.n	8008b74 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8008b6a:	6839      	ldr	r1, [r7, #0]
 8008b6c:	6878      	ldr	r0, [r7, #4]
 8008b6e:	f000 f9bc 	bl	8008eea <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008b72:	e01d      	b.n	8008bb0 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	7bfa      	ldrb	r2, [r7, #15]
 8008b78:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008b7c:	7bfb      	ldrb	r3, [r7, #15]
 8008b7e:	4619      	mov	r1, r3
 8008b80:	6878      	ldr	r0, [r7, #4]
 8008b82:	f000 fee1 	bl	8009948 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8008b86:	6878      	ldr	r0, [r7, #4]
 8008b88:	f000 fa7a 	bl	8009080 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008b8c:	7bfb      	ldrb	r3, [r7, #15]
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	d004      	beq.n	8008b9c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	2202      	movs	r2, #2
 8008b96:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008b9a:	e009      	b.n	8008bb0 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	2201      	movs	r2, #1
 8008ba0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008ba4:	e004      	b.n	8008bb0 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008ba6:	6839      	ldr	r1, [r7, #0]
 8008ba8:	6878      	ldr	r0, [r7, #4]
 8008baa:	f000 f99e 	bl	8008eea <USBD_CtlError>
  }
}
 8008bae:	bf00      	nop
 8008bb0:	bf00      	nop
 8008bb2:	3710      	adds	r7, #16
 8008bb4:	46bd      	mov	sp, r7
 8008bb6:	bd80      	pop	{r7, pc}

08008bb8 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008bb8:	b580      	push	{r7, lr}
 8008bba:	b084      	sub	sp, #16
 8008bbc:	af00      	add	r7, sp, #0
 8008bbe:	6078      	str	r0, [r7, #4]
 8008bc0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008bc2:	2300      	movs	r3, #0
 8008bc4:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008bc6:	683b      	ldr	r3, [r7, #0]
 8008bc8:	885b      	ldrh	r3, [r3, #2]
 8008bca:	b2da      	uxtb	r2, r3
 8008bcc:	4b4e      	ldr	r3, [pc, #312]	; (8008d08 <USBD_SetConfig+0x150>)
 8008bce:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008bd0:	4b4d      	ldr	r3, [pc, #308]	; (8008d08 <USBD_SetConfig+0x150>)
 8008bd2:	781b      	ldrb	r3, [r3, #0]
 8008bd4:	2b01      	cmp	r3, #1
 8008bd6:	d905      	bls.n	8008be4 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8008bd8:	6839      	ldr	r1, [r7, #0]
 8008bda:	6878      	ldr	r0, [r7, #4]
 8008bdc:	f000 f985 	bl	8008eea <USBD_CtlError>
    return USBD_FAIL;
 8008be0:	2303      	movs	r3, #3
 8008be2:	e08c      	b.n	8008cfe <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008bea:	b2db      	uxtb	r3, r3
 8008bec:	2b02      	cmp	r3, #2
 8008bee:	d002      	beq.n	8008bf6 <USBD_SetConfig+0x3e>
 8008bf0:	2b03      	cmp	r3, #3
 8008bf2:	d029      	beq.n	8008c48 <USBD_SetConfig+0x90>
 8008bf4:	e075      	b.n	8008ce2 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8008bf6:	4b44      	ldr	r3, [pc, #272]	; (8008d08 <USBD_SetConfig+0x150>)
 8008bf8:	781b      	ldrb	r3, [r3, #0]
 8008bfa:	2b00      	cmp	r3, #0
 8008bfc:	d020      	beq.n	8008c40 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8008bfe:	4b42      	ldr	r3, [pc, #264]	; (8008d08 <USBD_SetConfig+0x150>)
 8008c00:	781b      	ldrb	r3, [r3, #0]
 8008c02:	461a      	mov	r2, r3
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008c08:	4b3f      	ldr	r3, [pc, #252]	; (8008d08 <USBD_SetConfig+0x150>)
 8008c0a:	781b      	ldrb	r3, [r3, #0]
 8008c0c:	4619      	mov	r1, r3
 8008c0e:	6878      	ldr	r0, [r7, #4]
 8008c10:	f7fe ffe7 	bl	8007be2 <USBD_SetClassConfig>
 8008c14:	4603      	mov	r3, r0
 8008c16:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8008c18:	7bfb      	ldrb	r3, [r7, #15]
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	d008      	beq.n	8008c30 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8008c1e:	6839      	ldr	r1, [r7, #0]
 8008c20:	6878      	ldr	r0, [r7, #4]
 8008c22:	f000 f962 	bl	8008eea <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	2202      	movs	r2, #2
 8008c2a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008c2e:	e065      	b.n	8008cfc <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8008c30:	6878      	ldr	r0, [r7, #4]
 8008c32:	f000 fa25 	bl	8009080 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	2203      	movs	r2, #3
 8008c3a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8008c3e:	e05d      	b.n	8008cfc <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8008c40:	6878      	ldr	r0, [r7, #4]
 8008c42:	f000 fa1d 	bl	8009080 <USBD_CtlSendStatus>
      break;
 8008c46:	e059      	b.n	8008cfc <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8008c48:	4b2f      	ldr	r3, [pc, #188]	; (8008d08 <USBD_SetConfig+0x150>)
 8008c4a:	781b      	ldrb	r3, [r3, #0]
 8008c4c:	2b00      	cmp	r3, #0
 8008c4e:	d112      	bne.n	8008c76 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	2202      	movs	r2, #2
 8008c54:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8008c58:	4b2b      	ldr	r3, [pc, #172]	; (8008d08 <USBD_SetConfig+0x150>)
 8008c5a:	781b      	ldrb	r3, [r3, #0]
 8008c5c:	461a      	mov	r2, r3
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008c62:	4b29      	ldr	r3, [pc, #164]	; (8008d08 <USBD_SetConfig+0x150>)
 8008c64:	781b      	ldrb	r3, [r3, #0]
 8008c66:	4619      	mov	r1, r3
 8008c68:	6878      	ldr	r0, [r7, #4]
 8008c6a:	f7fe ffd6 	bl	8007c1a <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8008c6e:	6878      	ldr	r0, [r7, #4]
 8008c70:	f000 fa06 	bl	8009080 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008c74:	e042      	b.n	8008cfc <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8008c76:	4b24      	ldr	r3, [pc, #144]	; (8008d08 <USBD_SetConfig+0x150>)
 8008c78:	781b      	ldrb	r3, [r3, #0]
 8008c7a:	461a      	mov	r2, r3
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	685b      	ldr	r3, [r3, #4]
 8008c80:	429a      	cmp	r2, r3
 8008c82:	d02a      	beq.n	8008cda <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	685b      	ldr	r3, [r3, #4]
 8008c88:	b2db      	uxtb	r3, r3
 8008c8a:	4619      	mov	r1, r3
 8008c8c:	6878      	ldr	r0, [r7, #4]
 8008c8e:	f7fe ffc4 	bl	8007c1a <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8008c92:	4b1d      	ldr	r3, [pc, #116]	; (8008d08 <USBD_SetConfig+0x150>)
 8008c94:	781b      	ldrb	r3, [r3, #0]
 8008c96:	461a      	mov	r2, r3
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008c9c:	4b1a      	ldr	r3, [pc, #104]	; (8008d08 <USBD_SetConfig+0x150>)
 8008c9e:	781b      	ldrb	r3, [r3, #0]
 8008ca0:	4619      	mov	r1, r3
 8008ca2:	6878      	ldr	r0, [r7, #4]
 8008ca4:	f7fe ff9d 	bl	8007be2 <USBD_SetClassConfig>
 8008ca8:	4603      	mov	r3, r0
 8008caa:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8008cac:	7bfb      	ldrb	r3, [r7, #15]
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	d00f      	beq.n	8008cd2 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8008cb2:	6839      	ldr	r1, [r7, #0]
 8008cb4:	6878      	ldr	r0, [r7, #4]
 8008cb6:	f000 f918 	bl	8008eea <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	685b      	ldr	r3, [r3, #4]
 8008cbe:	b2db      	uxtb	r3, r3
 8008cc0:	4619      	mov	r1, r3
 8008cc2:	6878      	ldr	r0, [r7, #4]
 8008cc4:	f7fe ffa9 	bl	8007c1a <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	2202      	movs	r2, #2
 8008ccc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8008cd0:	e014      	b.n	8008cfc <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8008cd2:	6878      	ldr	r0, [r7, #4]
 8008cd4:	f000 f9d4 	bl	8009080 <USBD_CtlSendStatus>
      break;
 8008cd8:	e010      	b.n	8008cfc <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8008cda:	6878      	ldr	r0, [r7, #4]
 8008cdc:	f000 f9d0 	bl	8009080 <USBD_CtlSendStatus>
      break;
 8008ce0:	e00c      	b.n	8008cfc <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8008ce2:	6839      	ldr	r1, [r7, #0]
 8008ce4:	6878      	ldr	r0, [r7, #4]
 8008ce6:	f000 f900 	bl	8008eea <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008cea:	4b07      	ldr	r3, [pc, #28]	; (8008d08 <USBD_SetConfig+0x150>)
 8008cec:	781b      	ldrb	r3, [r3, #0]
 8008cee:	4619      	mov	r1, r3
 8008cf0:	6878      	ldr	r0, [r7, #4]
 8008cf2:	f7fe ff92 	bl	8007c1a <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8008cf6:	2303      	movs	r3, #3
 8008cf8:	73fb      	strb	r3, [r7, #15]
      break;
 8008cfa:	bf00      	nop
  }

  return ret;
 8008cfc:	7bfb      	ldrb	r3, [r7, #15]
}
 8008cfe:	4618      	mov	r0, r3
 8008d00:	3710      	adds	r7, #16
 8008d02:	46bd      	mov	sp, r7
 8008d04:	bd80      	pop	{r7, pc}
 8008d06:	bf00      	nop
 8008d08:	200004a4 	.word	0x200004a4

08008d0c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008d0c:	b580      	push	{r7, lr}
 8008d0e:	b082      	sub	sp, #8
 8008d10:	af00      	add	r7, sp, #0
 8008d12:	6078      	str	r0, [r7, #4]
 8008d14:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008d16:	683b      	ldr	r3, [r7, #0]
 8008d18:	88db      	ldrh	r3, [r3, #6]
 8008d1a:	2b01      	cmp	r3, #1
 8008d1c:	d004      	beq.n	8008d28 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8008d1e:	6839      	ldr	r1, [r7, #0]
 8008d20:	6878      	ldr	r0, [r7, #4]
 8008d22:	f000 f8e2 	bl	8008eea <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8008d26:	e023      	b.n	8008d70 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008d2e:	b2db      	uxtb	r3, r3
 8008d30:	2b02      	cmp	r3, #2
 8008d32:	dc02      	bgt.n	8008d3a <USBD_GetConfig+0x2e>
 8008d34:	2b00      	cmp	r3, #0
 8008d36:	dc03      	bgt.n	8008d40 <USBD_GetConfig+0x34>
 8008d38:	e015      	b.n	8008d66 <USBD_GetConfig+0x5a>
 8008d3a:	2b03      	cmp	r3, #3
 8008d3c:	d00b      	beq.n	8008d56 <USBD_GetConfig+0x4a>
 8008d3e:	e012      	b.n	8008d66 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	2200      	movs	r2, #0
 8008d44:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	3308      	adds	r3, #8
 8008d4a:	2201      	movs	r2, #1
 8008d4c:	4619      	mov	r1, r3
 8008d4e:	6878      	ldr	r0, [r7, #4]
 8008d50:	f000 f93c 	bl	8008fcc <USBD_CtlSendData>
        break;
 8008d54:	e00c      	b.n	8008d70 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	3304      	adds	r3, #4
 8008d5a:	2201      	movs	r2, #1
 8008d5c:	4619      	mov	r1, r3
 8008d5e:	6878      	ldr	r0, [r7, #4]
 8008d60:	f000 f934 	bl	8008fcc <USBD_CtlSendData>
        break;
 8008d64:	e004      	b.n	8008d70 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8008d66:	6839      	ldr	r1, [r7, #0]
 8008d68:	6878      	ldr	r0, [r7, #4]
 8008d6a:	f000 f8be 	bl	8008eea <USBD_CtlError>
        break;
 8008d6e:	bf00      	nop
}
 8008d70:	bf00      	nop
 8008d72:	3708      	adds	r7, #8
 8008d74:	46bd      	mov	sp, r7
 8008d76:	bd80      	pop	{r7, pc}

08008d78 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008d78:	b580      	push	{r7, lr}
 8008d7a:	b082      	sub	sp, #8
 8008d7c:	af00      	add	r7, sp, #0
 8008d7e:	6078      	str	r0, [r7, #4]
 8008d80:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008d88:	b2db      	uxtb	r3, r3
 8008d8a:	3b01      	subs	r3, #1
 8008d8c:	2b02      	cmp	r3, #2
 8008d8e:	d81e      	bhi.n	8008dce <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008d90:	683b      	ldr	r3, [r7, #0]
 8008d92:	88db      	ldrh	r3, [r3, #6]
 8008d94:	2b02      	cmp	r3, #2
 8008d96:	d004      	beq.n	8008da2 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8008d98:	6839      	ldr	r1, [r7, #0]
 8008d9a:	6878      	ldr	r0, [r7, #4]
 8008d9c:	f000 f8a5 	bl	8008eea <USBD_CtlError>
        break;
 8008da0:	e01a      	b.n	8008dd8 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	2201      	movs	r2, #1
 8008da6:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	d005      	beq.n	8008dbe <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	68db      	ldr	r3, [r3, #12]
 8008db6:	f043 0202 	orr.w	r2, r3, #2
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	330c      	adds	r3, #12
 8008dc2:	2202      	movs	r2, #2
 8008dc4:	4619      	mov	r1, r3
 8008dc6:	6878      	ldr	r0, [r7, #4]
 8008dc8:	f000 f900 	bl	8008fcc <USBD_CtlSendData>
      break;
 8008dcc:	e004      	b.n	8008dd8 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8008dce:	6839      	ldr	r1, [r7, #0]
 8008dd0:	6878      	ldr	r0, [r7, #4]
 8008dd2:	f000 f88a 	bl	8008eea <USBD_CtlError>
      break;
 8008dd6:	bf00      	nop
  }
}
 8008dd8:	bf00      	nop
 8008dda:	3708      	adds	r7, #8
 8008ddc:	46bd      	mov	sp, r7
 8008dde:	bd80      	pop	{r7, pc}

08008de0 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008de0:	b580      	push	{r7, lr}
 8008de2:	b082      	sub	sp, #8
 8008de4:	af00      	add	r7, sp, #0
 8008de6:	6078      	str	r0, [r7, #4]
 8008de8:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008dea:	683b      	ldr	r3, [r7, #0]
 8008dec:	885b      	ldrh	r3, [r3, #2]
 8008dee:	2b01      	cmp	r3, #1
 8008df0:	d107      	bne.n	8008e02 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	2201      	movs	r2, #1
 8008df6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8008dfa:	6878      	ldr	r0, [r7, #4]
 8008dfc:	f000 f940 	bl	8009080 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8008e00:	e013      	b.n	8008e2a <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8008e02:	683b      	ldr	r3, [r7, #0]
 8008e04:	885b      	ldrh	r3, [r3, #2]
 8008e06:	2b02      	cmp	r3, #2
 8008e08:	d10b      	bne.n	8008e22 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 8008e0a:	683b      	ldr	r3, [r7, #0]
 8008e0c:	889b      	ldrh	r3, [r3, #4]
 8008e0e:	0a1b      	lsrs	r3, r3, #8
 8008e10:	b29b      	uxth	r3, r3
 8008e12:	b2da      	uxtb	r2, r3
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8008e1a:	6878      	ldr	r0, [r7, #4]
 8008e1c:	f000 f930 	bl	8009080 <USBD_CtlSendStatus>
}
 8008e20:	e003      	b.n	8008e2a <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8008e22:	6839      	ldr	r1, [r7, #0]
 8008e24:	6878      	ldr	r0, [r7, #4]
 8008e26:	f000 f860 	bl	8008eea <USBD_CtlError>
}
 8008e2a:	bf00      	nop
 8008e2c:	3708      	adds	r7, #8
 8008e2e:	46bd      	mov	sp, r7
 8008e30:	bd80      	pop	{r7, pc}

08008e32 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008e32:	b580      	push	{r7, lr}
 8008e34:	b082      	sub	sp, #8
 8008e36:	af00      	add	r7, sp, #0
 8008e38:	6078      	str	r0, [r7, #4]
 8008e3a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008e42:	b2db      	uxtb	r3, r3
 8008e44:	3b01      	subs	r3, #1
 8008e46:	2b02      	cmp	r3, #2
 8008e48:	d80b      	bhi.n	8008e62 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008e4a:	683b      	ldr	r3, [r7, #0]
 8008e4c:	885b      	ldrh	r3, [r3, #2]
 8008e4e:	2b01      	cmp	r3, #1
 8008e50:	d10c      	bne.n	8008e6c <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	2200      	movs	r2, #0
 8008e56:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8008e5a:	6878      	ldr	r0, [r7, #4]
 8008e5c:	f000 f910 	bl	8009080 <USBD_CtlSendStatus>
      }
      break;
 8008e60:	e004      	b.n	8008e6c <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8008e62:	6839      	ldr	r1, [r7, #0]
 8008e64:	6878      	ldr	r0, [r7, #4]
 8008e66:	f000 f840 	bl	8008eea <USBD_CtlError>
      break;
 8008e6a:	e000      	b.n	8008e6e <USBD_ClrFeature+0x3c>
      break;
 8008e6c:	bf00      	nop
  }
}
 8008e6e:	bf00      	nop
 8008e70:	3708      	adds	r7, #8
 8008e72:	46bd      	mov	sp, r7
 8008e74:	bd80      	pop	{r7, pc}

08008e76 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008e76:	b580      	push	{r7, lr}
 8008e78:	b084      	sub	sp, #16
 8008e7a:	af00      	add	r7, sp, #0
 8008e7c:	6078      	str	r0, [r7, #4]
 8008e7e:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8008e80:	683b      	ldr	r3, [r7, #0]
 8008e82:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8008e84:	68fb      	ldr	r3, [r7, #12]
 8008e86:	781a      	ldrb	r2, [r3, #0]
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8008e8c:	68fb      	ldr	r3, [r7, #12]
 8008e8e:	3301      	adds	r3, #1
 8008e90:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8008e92:	68fb      	ldr	r3, [r7, #12]
 8008e94:	781a      	ldrb	r2, [r3, #0]
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	3301      	adds	r3, #1
 8008e9e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8008ea0:	68f8      	ldr	r0, [r7, #12]
 8008ea2:	f7ff fa41 	bl	8008328 <SWAPBYTE>
 8008ea6:	4603      	mov	r3, r0
 8008ea8:	461a      	mov	r2, r3
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8008eae:	68fb      	ldr	r3, [r7, #12]
 8008eb0:	3301      	adds	r3, #1
 8008eb2:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008eb4:	68fb      	ldr	r3, [r7, #12]
 8008eb6:	3301      	adds	r3, #1
 8008eb8:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8008eba:	68f8      	ldr	r0, [r7, #12]
 8008ebc:	f7ff fa34 	bl	8008328 <SWAPBYTE>
 8008ec0:	4603      	mov	r3, r0
 8008ec2:	461a      	mov	r2, r3
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8008ec8:	68fb      	ldr	r3, [r7, #12]
 8008eca:	3301      	adds	r3, #1
 8008ecc:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008ece:	68fb      	ldr	r3, [r7, #12]
 8008ed0:	3301      	adds	r3, #1
 8008ed2:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8008ed4:	68f8      	ldr	r0, [r7, #12]
 8008ed6:	f7ff fa27 	bl	8008328 <SWAPBYTE>
 8008eda:	4603      	mov	r3, r0
 8008edc:	461a      	mov	r2, r3
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	80da      	strh	r2, [r3, #6]
}
 8008ee2:	bf00      	nop
 8008ee4:	3710      	adds	r7, #16
 8008ee6:	46bd      	mov	sp, r7
 8008ee8:	bd80      	pop	{r7, pc}

08008eea <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008eea:	b580      	push	{r7, lr}
 8008eec:	b082      	sub	sp, #8
 8008eee:	af00      	add	r7, sp, #0
 8008ef0:	6078      	str	r0, [r7, #4]
 8008ef2:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8008ef4:	2180      	movs	r1, #128	; 0x80
 8008ef6:	6878      	ldr	r0, [r7, #4]
 8008ef8:	f000 fcbc 	bl	8009874 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8008efc:	2100      	movs	r1, #0
 8008efe:	6878      	ldr	r0, [r7, #4]
 8008f00:	f000 fcb8 	bl	8009874 <USBD_LL_StallEP>
}
 8008f04:	bf00      	nop
 8008f06:	3708      	adds	r7, #8
 8008f08:	46bd      	mov	sp, r7
 8008f0a:	bd80      	pop	{r7, pc}

08008f0c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008f0c:	b580      	push	{r7, lr}
 8008f0e:	b086      	sub	sp, #24
 8008f10:	af00      	add	r7, sp, #0
 8008f12:	60f8      	str	r0, [r7, #12]
 8008f14:	60b9      	str	r1, [r7, #8]
 8008f16:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008f18:	2300      	movs	r3, #0
 8008f1a:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8008f1c:	68fb      	ldr	r3, [r7, #12]
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	d036      	beq.n	8008f90 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8008f22:	68fb      	ldr	r3, [r7, #12]
 8008f24:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8008f26:	6938      	ldr	r0, [r7, #16]
 8008f28:	f000 f836 	bl	8008f98 <USBD_GetLen>
 8008f2c:	4603      	mov	r3, r0
 8008f2e:	3301      	adds	r3, #1
 8008f30:	b29b      	uxth	r3, r3
 8008f32:	005b      	lsls	r3, r3, #1
 8008f34:	b29a      	uxth	r2, r3
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8008f3a:	7dfb      	ldrb	r3, [r7, #23]
 8008f3c:	68ba      	ldr	r2, [r7, #8]
 8008f3e:	4413      	add	r3, r2
 8008f40:	687a      	ldr	r2, [r7, #4]
 8008f42:	7812      	ldrb	r2, [r2, #0]
 8008f44:	701a      	strb	r2, [r3, #0]
  idx++;
 8008f46:	7dfb      	ldrb	r3, [r7, #23]
 8008f48:	3301      	adds	r3, #1
 8008f4a:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8008f4c:	7dfb      	ldrb	r3, [r7, #23]
 8008f4e:	68ba      	ldr	r2, [r7, #8]
 8008f50:	4413      	add	r3, r2
 8008f52:	2203      	movs	r2, #3
 8008f54:	701a      	strb	r2, [r3, #0]
  idx++;
 8008f56:	7dfb      	ldrb	r3, [r7, #23]
 8008f58:	3301      	adds	r3, #1
 8008f5a:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8008f5c:	e013      	b.n	8008f86 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8008f5e:	7dfb      	ldrb	r3, [r7, #23]
 8008f60:	68ba      	ldr	r2, [r7, #8]
 8008f62:	4413      	add	r3, r2
 8008f64:	693a      	ldr	r2, [r7, #16]
 8008f66:	7812      	ldrb	r2, [r2, #0]
 8008f68:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8008f6a:	693b      	ldr	r3, [r7, #16]
 8008f6c:	3301      	adds	r3, #1
 8008f6e:	613b      	str	r3, [r7, #16]
    idx++;
 8008f70:	7dfb      	ldrb	r3, [r7, #23]
 8008f72:	3301      	adds	r3, #1
 8008f74:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8008f76:	7dfb      	ldrb	r3, [r7, #23]
 8008f78:	68ba      	ldr	r2, [r7, #8]
 8008f7a:	4413      	add	r3, r2
 8008f7c:	2200      	movs	r2, #0
 8008f7e:	701a      	strb	r2, [r3, #0]
    idx++;
 8008f80:	7dfb      	ldrb	r3, [r7, #23]
 8008f82:	3301      	adds	r3, #1
 8008f84:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8008f86:	693b      	ldr	r3, [r7, #16]
 8008f88:	781b      	ldrb	r3, [r3, #0]
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	d1e7      	bne.n	8008f5e <USBD_GetString+0x52>
 8008f8e:	e000      	b.n	8008f92 <USBD_GetString+0x86>
    return;
 8008f90:	bf00      	nop
  }
}
 8008f92:	3718      	adds	r7, #24
 8008f94:	46bd      	mov	sp, r7
 8008f96:	bd80      	pop	{r7, pc}

08008f98 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008f98:	b480      	push	{r7}
 8008f9a:	b085      	sub	sp, #20
 8008f9c:	af00      	add	r7, sp, #0
 8008f9e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008fa0:	2300      	movs	r3, #0
 8008fa2:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8008fa8:	e005      	b.n	8008fb6 <USBD_GetLen+0x1e>
  {
    len++;
 8008faa:	7bfb      	ldrb	r3, [r7, #15]
 8008fac:	3301      	adds	r3, #1
 8008fae:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8008fb0:	68bb      	ldr	r3, [r7, #8]
 8008fb2:	3301      	adds	r3, #1
 8008fb4:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8008fb6:	68bb      	ldr	r3, [r7, #8]
 8008fb8:	781b      	ldrb	r3, [r3, #0]
 8008fba:	2b00      	cmp	r3, #0
 8008fbc:	d1f5      	bne.n	8008faa <USBD_GetLen+0x12>
  }

  return len;
 8008fbe:	7bfb      	ldrb	r3, [r7, #15]
}
 8008fc0:	4618      	mov	r0, r3
 8008fc2:	3714      	adds	r7, #20
 8008fc4:	46bd      	mov	sp, r7
 8008fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fca:	4770      	bx	lr

08008fcc <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8008fcc:	b580      	push	{r7, lr}
 8008fce:	b084      	sub	sp, #16
 8008fd0:	af00      	add	r7, sp, #0
 8008fd2:	60f8      	str	r0, [r7, #12]
 8008fd4:	60b9      	str	r1, [r7, #8]
 8008fd6:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008fd8:	68fb      	ldr	r3, [r7, #12]
 8008fda:	2202      	movs	r2, #2
 8008fdc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8008fe0:	68fb      	ldr	r3, [r7, #12]
 8008fe2:	687a      	ldr	r2, [r7, #4]
 8008fe4:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8008fe6:	68fb      	ldr	r3, [r7, #12]
 8008fe8:	687a      	ldr	r2, [r7, #4]
 8008fea:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	68ba      	ldr	r2, [r7, #8]
 8008ff0:	2100      	movs	r1, #0
 8008ff2:	68f8      	ldr	r0, [r7, #12]
 8008ff4:	f000 fcc7 	bl	8009986 <USBD_LL_Transmit>

  return USBD_OK;
 8008ff8:	2300      	movs	r3, #0
}
 8008ffa:	4618      	mov	r0, r3
 8008ffc:	3710      	adds	r7, #16
 8008ffe:	46bd      	mov	sp, r7
 8009000:	bd80      	pop	{r7, pc}

08009002 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8009002:	b580      	push	{r7, lr}
 8009004:	b084      	sub	sp, #16
 8009006:	af00      	add	r7, sp, #0
 8009008:	60f8      	str	r0, [r7, #12]
 800900a:	60b9      	str	r1, [r7, #8]
 800900c:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	68ba      	ldr	r2, [r7, #8]
 8009012:	2100      	movs	r1, #0
 8009014:	68f8      	ldr	r0, [r7, #12]
 8009016:	f000 fcb6 	bl	8009986 <USBD_LL_Transmit>

  return USBD_OK;
 800901a:	2300      	movs	r3, #0
}
 800901c:	4618      	mov	r0, r3
 800901e:	3710      	adds	r7, #16
 8009020:	46bd      	mov	sp, r7
 8009022:	bd80      	pop	{r7, pc}

08009024 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8009024:	b580      	push	{r7, lr}
 8009026:	b084      	sub	sp, #16
 8009028:	af00      	add	r7, sp, #0
 800902a:	60f8      	str	r0, [r7, #12]
 800902c:	60b9      	str	r1, [r7, #8]
 800902e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8009030:	68fb      	ldr	r3, [r7, #12]
 8009032:	2203      	movs	r2, #3
 8009034:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8009038:	68fb      	ldr	r3, [r7, #12]
 800903a:	687a      	ldr	r2, [r7, #4]
 800903c:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8009040:	68fb      	ldr	r3, [r7, #12]
 8009042:	687a      	ldr	r2, [r7, #4]
 8009044:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	68ba      	ldr	r2, [r7, #8]
 800904c:	2100      	movs	r1, #0
 800904e:	68f8      	ldr	r0, [r7, #12]
 8009050:	f000 fcba 	bl	80099c8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009054:	2300      	movs	r3, #0
}
 8009056:	4618      	mov	r0, r3
 8009058:	3710      	adds	r7, #16
 800905a:	46bd      	mov	sp, r7
 800905c:	bd80      	pop	{r7, pc}

0800905e <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800905e:	b580      	push	{r7, lr}
 8009060:	b084      	sub	sp, #16
 8009062:	af00      	add	r7, sp, #0
 8009064:	60f8      	str	r0, [r7, #12]
 8009066:	60b9      	str	r1, [r7, #8]
 8009068:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	68ba      	ldr	r2, [r7, #8]
 800906e:	2100      	movs	r1, #0
 8009070:	68f8      	ldr	r0, [r7, #12]
 8009072:	f000 fca9 	bl	80099c8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009076:	2300      	movs	r3, #0
}
 8009078:	4618      	mov	r0, r3
 800907a:	3710      	adds	r7, #16
 800907c:	46bd      	mov	sp, r7
 800907e:	bd80      	pop	{r7, pc}

08009080 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8009080:	b580      	push	{r7, lr}
 8009082:	b082      	sub	sp, #8
 8009084:	af00      	add	r7, sp, #0
 8009086:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	2204      	movs	r2, #4
 800908c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009090:	2300      	movs	r3, #0
 8009092:	2200      	movs	r2, #0
 8009094:	2100      	movs	r1, #0
 8009096:	6878      	ldr	r0, [r7, #4]
 8009098:	f000 fc75 	bl	8009986 <USBD_LL_Transmit>

  return USBD_OK;
 800909c:	2300      	movs	r3, #0
}
 800909e:	4618      	mov	r0, r3
 80090a0:	3708      	adds	r7, #8
 80090a2:	46bd      	mov	sp, r7
 80090a4:	bd80      	pop	{r7, pc}

080090a6 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80090a6:	b580      	push	{r7, lr}
 80090a8:	b082      	sub	sp, #8
 80090aa:	af00      	add	r7, sp, #0
 80090ac:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	2205      	movs	r2, #5
 80090b2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80090b6:	2300      	movs	r3, #0
 80090b8:	2200      	movs	r2, #0
 80090ba:	2100      	movs	r1, #0
 80090bc:	6878      	ldr	r0, [r7, #4]
 80090be:	f000 fc83 	bl	80099c8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80090c2:	2300      	movs	r3, #0
}
 80090c4:	4618      	mov	r0, r3
 80090c6:	3708      	adds	r7, #8
 80090c8:	46bd      	mov	sp, r7
 80090ca:	bd80      	pop	{r7, pc}

080090cc <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80090cc:	b580      	push	{r7, lr}
 80090ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceHS, &HS_Desc, DEVICE_HS) != USBD_OK)
 80090d0:	2201      	movs	r2, #1
 80090d2:	4912      	ldr	r1, [pc, #72]	; (800911c <MX_USB_DEVICE_Init+0x50>)
 80090d4:	4812      	ldr	r0, [pc, #72]	; (8009120 <MX_USB_DEVICE_Init+0x54>)
 80090d6:	f7fe fd07 	bl	8007ae8 <USBD_Init>
 80090da:	4603      	mov	r3, r0
 80090dc:	2b00      	cmp	r3, #0
 80090de:	d001      	beq.n	80090e4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80090e0:	f7f8 f824 	bl	800112c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceHS, &USBD_CDC) != USBD_OK)
 80090e4:	490f      	ldr	r1, [pc, #60]	; (8009124 <MX_USB_DEVICE_Init+0x58>)
 80090e6:	480e      	ldr	r0, [pc, #56]	; (8009120 <MX_USB_DEVICE_Init+0x54>)
 80090e8:	f7fe fd2e 	bl	8007b48 <USBD_RegisterClass>
 80090ec:	4603      	mov	r3, r0
 80090ee:	2b00      	cmp	r3, #0
 80090f0:	d001      	beq.n	80090f6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80090f2:	f7f8 f81b 	bl	800112c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceHS, &USBD_Interface_fops_HS) != USBD_OK)
 80090f6:	490c      	ldr	r1, [pc, #48]	; (8009128 <MX_USB_DEVICE_Init+0x5c>)
 80090f8:	4809      	ldr	r0, [pc, #36]	; (8009120 <MX_USB_DEVICE_Init+0x54>)
 80090fa:	f7fe fc65 	bl	80079c8 <USBD_CDC_RegisterInterface>
 80090fe:	4603      	mov	r3, r0
 8009100:	2b00      	cmp	r3, #0
 8009102:	d001      	beq.n	8009108 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8009104:	f7f8 f812 	bl	800112c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceHS) != USBD_OK)
 8009108:	4805      	ldr	r0, [pc, #20]	; (8009120 <MX_USB_DEVICE_Init+0x54>)
 800910a:	f7fe fd53 	bl	8007bb4 <USBD_Start>
 800910e:	4603      	mov	r3, r0
 8009110:	2b00      	cmp	r3, #0
 8009112:	d001      	beq.n	8009118 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8009114:	f7f8 f80a 	bl	800112c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8009118:	bf00      	nop
 800911a:	bd80      	pop	{r7, pc}
 800911c:	200000b4 	.word	0x200000b4
 8009120:	200004a8 	.word	0x200004a8
 8009124:	20000020 	.word	0x20000020
 8009128:	200000a0 	.word	0x200000a0

0800912c <CDC_Init_HS>:
/**
  * @brief  Initializes the CDC media low layer over the USB HS IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_HS(void)
{
 800912c:	b580      	push	{r7, lr}
 800912e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, UserTxBufferHS, 0);
 8009130:	2200      	movs	r2, #0
 8009132:	4905      	ldr	r1, [pc, #20]	; (8009148 <CDC_Init_HS+0x1c>)
 8009134:	4805      	ldr	r0, [pc, #20]	; (800914c <CDC_Init_HS+0x20>)
 8009136:	f7fe fc61 	bl	80079fc <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, UserRxBufferHS);
 800913a:	4905      	ldr	r1, [pc, #20]	; (8009150 <CDC_Init_HS+0x24>)
 800913c:	4803      	ldr	r0, [pc, #12]	; (800914c <CDC_Init_HS+0x20>)
 800913e:	f7fe fc7f 	bl	8007a40 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8009142:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 8009144:	4618      	mov	r0, r3
 8009146:	bd80      	pop	{r7, pc}
 8009148:	20000f84 	.word	0x20000f84
 800914c:	200004a8 	.word	0x200004a8
 8009150:	20000784 	.word	0x20000784

08009154 <CDC_DeInit_HS>:
  * @brief  DeInitializes the CDC media low layer
  * @param  None
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_HS(void)
{
 8009154:	b480      	push	{r7}
 8009156:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 9 */
  return (USBD_OK);
 8009158:	2300      	movs	r3, #0
  /* USER CODE END 9 */
}
 800915a:	4618      	mov	r0, r3
 800915c:	46bd      	mov	sp, r7
 800915e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009162:	4770      	bx	lr

08009164 <CDC_Control_HS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_HS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8009164:	b480      	push	{r7}
 8009166:	b083      	sub	sp, #12
 8009168:	af00      	add	r7, sp, #0
 800916a:	4603      	mov	r3, r0
 800916c:	6039      	str	r1, [r7, #0]
 800916e:	71fb      	strb	r3, [r7, #7]
 8009170:	4613      	mov	r3, r2
 8009172:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 10 */
  switch(cmd)
 8009174:	79fb      	ldrb	r3, [r7, #7]
 8009176:	2b23      	cmp	r3, #35	; 0x23
 8009178:	d84a      	bhi.n	8009210 <CDC_Control_HS+0xac>
 800917a:	a201      	add	r2, pc, #4	; (adr r2, 8009180 <CDC_Control_HS+0x1c>)
 800917c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009180:	08009211 	.word	0x08009211
 8009184:	08009211 	.word	0x08009211
 8009188:	08009211 	.word	0x08009211
 800918c:	08009211 	.word	0x08009211
 8009190:	08009211 	.word	0x08009211
 8009194:	08009211 	.word	0x08009211
 8009198:	08009211 	.word	0x08009211
 800919c:	08009211 	.word	0x08009211
 80091a0:	08009211 	.word	0x08009211
 80091a4:	08009211 	.word	0x08009211
 80091a8:	08009211 	.word	0x08009211
 80091ac:	08009211 	.word	0x08009211
 80091b0:	08009211 	.word	0x08009211
 80091b4:	08009211 	.word	0x08009211
 80091b8:	08009211 	.word	0x08009211
 80091bc:	08009211 	.word	0x08009211
 80091c0:	08009211 	.word	0x08009211
 80091c4:	08009211 	.word	0x08009211
 80091c8:	08009211 	.word	0x08009211
 80091cc:	08009211 	.word	0x08009211
 80091d0:	08009211 	.word	0x08009211
 80091d4:	08009211 	.word	0x08009211
 80091d8:	08009211 	.word	0x08009211
 80091dc:	08009211 	.word	0x08009211
 80091e0:	08009211 	.word	0x08009211
 80091e4:	08009211 	.word	0x08009211
 80091e8:	08009211 	.word	0x08009211
 80091ec:	08009211 	.word	0x08009211
 80091f0:	08009211 	.word	0x08009211
 80091f4:	08009211 	.word	0x08009211
 80091f8:	08009211 	.word	0x08009211
 80091fc:	08009211 	.word	0x08009211
 8009200:	08009211 	.word	0x08009211
 8009204:	08009211 	.word	0x08009211
 8009208:	08009211 	.word	0x08009211
 800920c:	08009211 	.word	0x08009211
  case CDC_SEND_BREAK:

    break;

  default:
    break;
 8009210:	bf00      	nop
  }

  return (USBD_OK);
 8009212:	2300      	movs	r3, #0
  /* USER CODE END 10 */
}
 8009214:	4618      	mov	r0, r3
 8009216:	370c      	adds	r7, #12
 8009218:	46bd      	mov	sp, r7
 800921a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800921e:	4770      	bx	lr

08009220 <CDC_Receive_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAILL
  */
static int8_t CDC_Receive_HS(uint8_t* Buf, uint32_t *Len)
{
 8009220:	b580      	push	{r7, lr}
 8009222:	b082      	sub	sp, #8
 8009224:	af00      	add	r7, sp, #0
 8009226:	6078      	str	r0, [r7, #4]
 8009228:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 11 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, &Buf[0]);
 800922a:	6879      	ldr	r1, [r7, #4]
 800922c:	4805      	ldr	r0, [pc, #20]	; (8009244 <CDC_Receive_HS+0x24>)
 800922e:	f7fe fc07 	bl	8007a40 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceHS);
 8009232:	4804      	ldr	r0, [pc, #16]	; (8009244 <CDC_Receive_HS+0x24>)
 8009234:	f7fe fc22 	bl	8007a7c <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8009238:	2300      	movs	r3, #0
  /* USER CODE END 11 */
}
 800923a:	4618      	mov	r0, r3
 800923c:	3708      	adds	r7, #8
 800923e:	46bd      	mov	sp, r7
 8009240:	bd80      	pop	{r7, pc}
 8009242:	bf00      	nop
 8009244:	200004a8 	.word	0x200004a8

08009248 <CDC_TransmitCplt_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_HS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8009248:	b480      	push	{r7}
 800924a:	b087      	sub	sp, #28
 800924c:	af00      	add	r7, sp, #0
 800924e:	60f8      	str	r0, [r7, #12]
 8009250:	60b9      	str	r1, [r7, #8]
 8009252:	4613      	mov	r3, r2
 8009254:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8009256:	2300      	movs	r3, #0
 8009258:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 14 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 14 */
  return result;
 800925a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800925e:	4618      	mov	r0, r3
 8009260:	371c      	adds	r7, #28
 8009262:	46bd      	mov	sp, r7
 8009264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009268:	4770      	bx	lr
	...

0800926c <USBD_HS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800926c:	b480      	push	{r7}
 800926e:	b083      	sub	sp, #12
 8009270:	af00      	add	r7, sp, #0
 8009272:	4603      	mov	r3, r0
 8009274:	6039      	str	r1, [r7, #0]
 8009276:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_HS_DeviceDesc);
 8009278:	683b      	ldr	r3, [r7, #0]
 800927a:	2212      	movs	r2, #18
 800927c:	801a      	strh	r2, [r3, #0]
  return USBD_HS_DeviceDesc;
 800927e:	4b03      	ldr	r3, [pc, #12]	; (800928c <USBD_HS_DeviceDescriptor+0x20>)
}
 8009280:	4618      	mov	r0, r3
 8009282:	370c      	adds	r7, #12
 8009284:	46bd      	mov	sp, r7
 8009286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800928a:	4770      	bx	lr
 800928c:	200000d0 	.word	0x200000d0

08009290 <USBD_HS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009290:	b480      	push	{r7}
 8009292:	b083      	sub	sp, #12
 8009294:	af00      	add	r7, sp, #0
 8009296:	4603      	mov	r3, r0
 8009298:	6039      	str	r1, [r7, #0]
 800929a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800929c:	683b      	ldr	r3, [r7, #0]
 800929e:	2204      	movs	r2, #4
 80092a0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80092a2:	4b03      	ldr	r3, [pc, #12]	; (80092b0 <USBD_HS_LangIDStrDescriptor+0x20>)
}
 80092a4:	4618      	mov	r0, r3
 80092a6:	370c      	adds	r7, #12
 80092a8:	46bd      	mov	sp, r7
 80092aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ae:	4770      	bx	lr
 80092b0:	200000e4 	.word	0x200000e4

080092b4 <USBD_HS_ProductStrDescriptor>:
  * @param  speed : current device speed
  * @param  length : pointer to data length variable
  * @retval pointer to descriptor buffer
  */
uint8_t * USBD_HS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80092b4:	b580      	push	{r7, lr}
 80092b6:	b082      	sub	sp, #8
 80092b8:	af00      	add	r7, sp, #0
 80092ba:	4603      	mov	r3, r0
 80092bc:	6039      	str	r1, [r7, #0]
 80092be:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80092c0:	79fb      	ldrb	r3, [r7, #7]
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	d105      	bne.n	80092d2 <USBD_HS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 80092c6:	683a      	ldr	r2, [r7, #0]
 80092c8:	4907      	ldr	r1, [pc, #28]	; (80092e8 <USBD_HS_ProductStrDescriptor+0x34>)
 80092ca:	4808      	ldr	r0, [pc, #32]	; (80092ec <USBD_HS_ProductStrDescriptor+0x38>)
 80092cc:	f7ff fe1e 	bl	8008f0c <USBD_GetString>
 80092d0:	e004      	b.n	80092dc <USBD_HS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 80092d2:	683a      	ldr	r2, [r7, #0]
 80092d4:	4904      	ldr	r1, [pc, #16]	; (80092e8 <USBD_HS_ProductStrDescriptor+0x34>)
 80092d6:	4805      	ldr	r0, [pc, #20]	; (80092ec <USBD_HS_ProductStrDescriptor+0x38>)
 80092d8:	f7ff fe18 	bl	8008f0c <USBD_GetString>
  }
  return USBD_StrDesc;
 80092dc:	4b02      	ldr	r3, [pc, #8]	; (80092e8 <USBD_HS_ProductStrDescriptor+0x34>)
}
 80092de:	4618      	mov	r0, r3
 80092e0:	3708      	adds	r7, #8
 80092e2:	46bd      	mov	sp, r7
 80092e4:	bd80      	pop	{r7, pc}
 80092e6:	bf00      	nop
 80092e8:	20001784 	.word	0x20001784
 80092ec:	0800a3c0 	.word	0x0800a3c0

080092f0 <USBD_HS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80092f0:	b580      	push	{r7, lr}
 80092f2:	b082      	sub	sp, #8
 80092f4:	af00      	add	r7, sp, #0
 80092f6:	4603      	mov	r3, r0
 80092f8:	6039      	str	r1, [r7, #0]
 80092fa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80092fc:	683a      	ldr	r2, [r7, #0]
 80092fe:	4904      	ldr	r1, [pc, #16]	; (8009310 <USBD_HS_ManufacturerStrDescriptor+0x20>)
 8009300:	4804      	ldr	r0, [pc, #16]	; (8009314 <USBD_HS_ManufacturerStrDescriptor+0x24>)
 8009302:	f7ff fe03 	bl	8008f0c <USBD_GetString>
  return USBD_StrDesc;
 8009306:	4b02      	ldr	r3, [pc, #8]	; (8009310 <USBD_HS_ManufacturerStrDescriptor+0x20>)
}
 8009308:	4618      	mov	r0, r3
 800930a:	3708      	adds	r7, #8
 800930c:	46bd      	mov	sp, r7
 800930e:	bd80      	pop	{r7, pc}
 8009310:	20001784 	.word	0x20001784
 8009314:	0800a3d8 	.word	0x0800a3d8

08009318 <USBD_HS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009318:	b580      	push	{r7, lr}
 800931a:	b082      	sub	sp, #8
 800931c:	af00      	add	r7, sp, #0
 800931e:	4603      	mov	r3, r0
 8009320:	6039      	str	r1, [r7, #0]
 8009322:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8009324:	683b      	ldr	r3, [r7, #0]
 8009326:	221a      	movs	r2, #26
 8009328:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800932a:	f000 f843 	bl	80093b4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_HS_SerialStrDescriptor */

  /* USER CODE END USBD_HS_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 800932e:	4b02      	ldr	r3, [pc, #8]	; (8009338 <USBD_HS_SerialStrDescriptor+0x20>)
}
 8009330:	4618      	mov	r0, r3
 8009332:	3708      	adds	r7, #8
 8009334:	46bd      	mov	sp, r7
 8009336:	bd80      	pop	{r7, pc}
 8009338:	200000e8 	.word	0x200000e8

0800933c <USBD_HS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800933c:	b580      	push	{r7, lr}
 800933e:	b082      	sub	sp, #8
 8009340:	af00      	add	r7, sp, #0
 8009342:	4603      	mov	r3, r0
 8009344:	6039      	str	r1, [r7, #0]
 8009346:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8009348:	79fb      	ldrb	r3, [r7, #7]
 800934a:	2b00      	cmp	r3, #0
 800934c:	d105      	bne.n	800935a <USBD_HS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 800934e:	683a      	ldr	r2, [r7, #0]
 8009350:	4907      	ldr	r1, [pc, #28]	; (8009370 <USBD_HS_ConfigStrDescriptor+0x34>)
 8009352:	4808      	ldr	r0, [pc, #32]	; (8009374 <USBD_HS_ConfigStrDescriptor+0x38>)
 8009354:	f7ff fdda 	bl	8008f0c <USBD_GetString>
 8009358:	e004      	b.n	8009364 <USBD_HS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 800935a:	683a      	ldr	r2, [r7, #0]
 800935c:	4904      	ldr	r1, [pc, #16]	; (8009370 <USBD_HS_ConfigStrDescriptor+0x34>)
 800935e:	4805      	ldr	r0, [pc, #20]	; (8009374 <USBD_HS_ConfigStrDescriptor+0x38>)
 8009360:	f7ff fdd4 	bl	8008f0c <USBD_GetString>
  }
  return USBD_StrDesc;
 8009364:	4b02      	ldr	r3, [pc, #8]	; (8009370 <USBD_HS_ConfigStrDescriptor+0x34>)
}
 8009366:	4618      	mov	r0, r3
 8009368:	3708      	adds	r7, #8
 800936a:	46bd      	mov	sp, r7
 800936c:	bd80      	pop	{r7, pc}
 800936e:	bf00      	nop
 8009370:	20001784 	.word	0x20001784
 8009374:	0800a3ec 	.word	0x0800a3ec

08009378 <USBD_HS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009378:	b580      	push	{r7, lr}
 800937a:	b082      	sub	sp, #8
 800937c:	af00      	add	r7, sp, #0
 800937e:	4603      	mov	r3, r0
 8009380:	6039      	str	r1, [r7, #0]
 8009382:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009384:	79fb      	ldrb	r3, [r7, #7]
 8009386:	2b00      	cmp	r3, #0
 8009388:	d105      	bne.n	8009396 <USBD_HS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 800938a:	683a      	ldr	r2, [r7, #0]
 800938c:	4907      	ldr	r1, [pc, #28]	; (80093ac <USBD_HS_InterfaceStrDescriptor+0x34>)
 800938e:	4808      	ldr	r0, [pc, #32]	; (80093b0 <USBD_HS_InterfaceStrDescriptor+0x38>)
 8009390:	f7ff fdbc 	bl	8008f0c <USBD_GetString>
 8009394:	e004      	b.n	80093a0 <USBD_HS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 8009396:	683a      	ldr	r2, [r7, #0]
 8009398:	4904      	ldr	r1, [pc, #16]	; (80093ac <USBD_HS_InterfaceStrDescriptor+0x34>)
 800939a:	4805      	ldr	r0, [pc, #20]	; (80093b0 <USBD_HS_InterfaceStrDescriptor+0x38>)
 800939c:	f7ff fdb6 	bl	8008f0c <USBD_GetString>
  }
  return USBD_StrDesc;
 80093a0:	4b02      	ldr	r3, [pc, #8]	; (80093ac <USBD_HS_InterfaceStrDescriptor+0x34>)
}
 80093a2:	4618      	mov	r0, r3
 80093a4:	3708      	adds	r7, #8
 80093a6:	46bd      	mov	sp, r7
 80093a8:	bd80      	pop	{r7, pc}
 80093aa:	bf00      	nop
 80093ac:	20001784 	.word	0x20001784
 80093b0:	0800a3f8 	.word	0x0800a3f8

080093b4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80093b4:	b580      	push	{r7, lr}
 80093b6:	b084      	sub	sp, #16
 80093b8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80093ba:	4b0f      	ldr	r3, [pc, #60]	; (80093f8 <Get_SerialNum+0x44>)
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80093c0:	4b0e      	ldr	r3, [pc, #56]	; (80093fc <Get_SerialNum+0x48>)
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80093c6:	4b0e      	ldr	r3, [pc, #56]	; (8009400 <Get_SerialNum+0x4c>)
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80093cc:	68fa      	ldr	r2, [r7, #12]
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	4413      	add	r3, r2
 80093d2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80093d4:	68fb      	ldr	r3, [r7, #12]
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	d009      	beq.n	80093ee <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80093da:	2208      	movs	r2, #8
 80093dc:	4909      	ldr	r1, [pc, #36]	; (8009404 <Get_SerialNum+0x50>)
 80093de:	68f8      	ldr	r0, [r7, #12]
 80093e0:	f000 f814 	bl	800940c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80093e4:	2204      	movs	r2, #4
 80093e6:	4908      	ldr	r1, [pc, #32]	; (8009408 <Get_SerialNum+0x54>)
 80093e8:	68b8      	ldr	r0, [r7, #8]
 80093ea:	f000 f80f 	bl	800940c <IntToUnicode>
  }
}
 80093ee:	bf00      	nop
 80093f0:	3710      	adds	r7, #16
 80093f2:	46bd      	mov	sp, r7
 80093f4:	bd80      	pop	{r7, pc}
 80093f6:	bf00      	nop
 80093f8:	1fff7a10 	.word	0x1fff7a10
 80093fc:	1fff7a14 	.word	0x1fff7a14
 8009400:	1fff7a18 	.word	0x1fff7a18
 8009404:	200000ea 	.word	0x200000ea
 8009408:	200000fa 	.word	0x200000fa

0800940c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800940c:	b480      	push	{r7}
 800940e:	b087      	sub	sp, #28
 8009410:	af00      	add	r7, sp, #0
 8009412:	60f8      	str	r0, [r7, #12]
 8009414:	60b9      	str	r1, [r7, #8]
 8009416:	4613      	mov	r3, r2
 8009418:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800941a:	2300      	movs	r3, #0
 800941c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800941e:	2300      	movs	r3, #0
 8009420:	75fb      	strb	r3, [r7, #23]
 8009422:	e027      	b.n	8009474 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8009424:	68fb      	ldr	r3, [r7, #12]
 8009426:	0f1b      	lsrs	r3, r3, #28
 8009428:	2b09      	cmp	r3, #9
 800942a:	d80b      	bhi.n	8009444 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800942c:	68fb      	ldr	r3, [r7, #12]
 800942e:	0f1b      	lsrs	r3, r3, #28
 8009430:	b2da      	uxtb	r2, r3
 8009432:	7dfb      	ldrb	r3, [r7, #23]
 8009434:	005b      	lsls	r3, r3, #1
 8009436:	4619      	mov	r1, r3
 8009438:	68bb      	ldr	r3, [r7, #8]
 800943a:	440b      	add	r3, r1
 800943c:	3230      	adds	r2, #48	; 0x30
 800943e:	b2d2      	uxtb	r2, r2
 8009440:	701a      	strb	r2, [r3, #0]
 8009442:	e00a      	b.n	800945a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009444:	68fb      	ldr	r3, [r7, #12]
 8009446:	0f1b      	lsrs	r3, r3, #28
 8009448:	b2da      	uxtb	r2, r3
 800944a:	7dfb      	ldrb	r3, [r7, #23]
 800944c:	005b      	lsls	r3, r3, #1
 800944e:	4619      	mov	r1, r3
 8009450:	68bb      	ldr	r3, [r7, #8]
 8009452:	440b      	add	r3, r1
 8009454:	3237      	adds	r2, #55	; 0x37
 8009456:	b2d2      	uxtb	r2, r2
 8009458:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800945a:	68fb      	ldr	r3, [r7, #12]
 800945c:	011b      	lsls	r3, r3, #4
 800945e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009460:	7dfb      	ldrb	r3, [r7, #23]
 8009462:	005b      	lsls	r3, r3, #1
 8009464:	3301      	adds	r3, #1
 8009466:	68ba      	ldr	r2, [r7, #8]
 8009468:	4413      	add	r3, r2
 800946a:	2200      	movs	r2, #0
 800946c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800946e:	7dfb      	ldrb	r3, [r7, #23]
 8009470:	3301      	adds	r3, #1
 8009472:	75fb      	strb	r3, [r7, #23]
 8009474:	7dfa      	ldrb	r2, [r7, #23]
 8009476:	79fb      	ldrb	r3, [r7, #7]
 8009478:	429a      	cmp	r2, r3
 800947a:	d3d3      	bcc.n	8009424 <IntToUnicode+0x18>
  }
}
 800947c:	bf00      	nop
 800947e:	bf00      	nop
 8009480:	371c      	adds	r7, #28
 8009482:	46bd      	mov	sp, r7
 8009484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009488:	4770      	bx	lr
	...

0800948c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800948c:	b580      	push	{r7, lr}
 800948e:	b08a      	sub	sp, #40	; 0x28
 8009490:	af00      	add	r7, sp, #0
 8009492:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009494:	f107 0314 	add.w	r3, r7, #20
 8009498:	2200      	movs	r2, #0
 800949a:	601a      	str	r2, [r3, #0]
 800949c:	605a      	str	r2, [r3, #4]
 800949e:	609a      	str	r2, [r3, #8]
 80094a0:	60da      	str	r2, [r3, #12]
 80094a2:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_HS)
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	4a1d      	ldr	r2, [pc, #116]	; (8009520 <HAL_PCD_MspInit+0x94>)
 80094aa:	4293      	cmp	r3, r2
 80094ac:	d134      	bne.n	8009518 <HAL_PCD_MspInit+0x8c>
  {
  /* USER CODE BEGIN USB_OTG_HS_MspInit 0 */

  /* USER CODE END USB_OTG_HS_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80094ae:	2300      	movs	r3, #0
 80094b0:	613b      	str	r3, [r7, #16]
 80094b2:	4b1c      	ldr	r3, [pc, #112]	; (8009524 <HAL_PCD_MspInit+0x98>)
 80094b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80094b6:	4a1b      	ldr	r2, [pc, #108]	; (8009524 <HAL_PCD_MspInit+0x98>)
 80094b8:	f043 0302 	orr.w	r3, r3, #2
 80094bc:	6313      	str	r3, [r2, #48]	; 0x30
 80094be:	4b19      	ldr	r3, [pc, #100]	; (8009524 <HAL_PCD_MspInit+0x98>)
 80094c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80094c2:	f003 0302 	and.w	r3, r3, #2
 80094c6:	613b      	str	r3, [r7, #16]
 80094c8:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_HS GPIO Configuration
    PB14     ------> USB_OTG_HS_DM
    PB15     ------> USB_OTG_HS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80094ca:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80094ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80094d0:	2302      	movs	r3, #2
 80094d2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80094d4:	2300      	movs	r3, #0
 80094d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80094d8:	2303      	movs	r3, #3
 80094da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 80094dc:	230c      	movs	r3, #12
 80094de:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80094e0:	f107 0314 	add.w	r3, r7, #20
 80094e4:	4619      	mov	r1, r3
 80094e6:	4810      	ldr	r0, [pc, #64]	; (8009528 <HAL_PCD_MspInit+0x9c>)
 80094e8:	f7f8 fac6 	bl	8001a78 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 80094ec:	2300      	movs	r3, #0
 80094ee:	60fb      	str	r3, [r7, #12]
 80094f0:	4b0c      	ldr	r3, [pc, #48]	; (8009524 <HAL_PCD_MspInit+0x98>)
 80094f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80094f4:	4a0b      	ldr	r2, [pc, #44]	; (8009524 <HAL_PCD_MspInit+0x98>)
 80094f6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80094fa:	6313      	str	r3, [r2, #48]	; 0x30
 80094fc:	4b09      	ldr	r3, [pc, #36]	; (8009524 <HAL_PCD_MspInit+0x98>)
 80094fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009500:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009504:	60fb      	str	r3, [r7, #12]
 8009506:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 0, 0);
 8009508:	2200      	movs	r2, #0
 800950a:	2100      	movs	r1, #0
 800950c:	204d      	movs	r0, #77	; 0x4d
 800950e:	f7f8 f9ea 	bl	80018e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 8009512:	204d      	movs	r0, #77	; 0x4d
 8009514:	f7f8 fa03 	bl	800191e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 8009518:	bf00      	nop
 800951a:	3728      	adds	r7, #40	; 0x28
 800951c:	46bd      	mov	sp, r7
 800951e:	bd80      	pop	{r7, pc}
 8009520:	40040000 	.word	0x40040000
 8009524:	40023800 	.word	0x40023800
 8009528:	40020400 	.word	0x40020400

0800952c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800952c:	b580      	push	{r7, lr}
 800952e:	b082      	sub	sp, #8
 8009530:	af00      	add	r7, sp, #0
 8009532:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8009540:	4619      	mov	r1, r3
 8009542:	4610      	mov	r0, r2
 8009544:	f7fe fb83 	bl	8007c4e <USBD_LL_SetupStage>
}
 8009548:	bf00      	nop
 800954a:	3708      	adds	r7, #8
 800954c:	46bd      	mov	sp, r7
 800954e:	bd80      	pop	{r7, pc}

08009550 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009550:	b580      	push	{r7, lr}
 8009552:	b082      	sub	sp, #8
 8009554:	af00      	add	r7, sp, #0
 8009556:	6078      	str	r0, [r7, #4]
 8009558:	460b      	mov	r3, r1
 800955a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8009562:	78fa      	ldrb	r2, [r7, #3]
 8009564:	6879      	ldr	r1, [r7, #4]
 8009566:	4613      	mov	r3, r2
 8009568:	00db      	lsls	r3, r3, #3
 800956a:	4413      	add	r3, r2
 800956c:	009b      	lsls	r3, r3, #2
 800956e:	440b      	add	r3, r1
 8009570:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8009574:	681a      	ldr	r2, [r3, #0]
 8009576:	78fb      	ldrb	r3, [r7, #3]
 8009578:	4619      	mov	r1, r3
 800957a:	f7fe fbbd 	bl	8007cf8 <USBD_LL_DataOutStage>
}
 800957e:	bf00      	nop
 8009580:	3708      	adds	r7, #8
 8009582:	46bd      	mov	sp, r7
 8009584:	bd80      	pop	{r7, pc}

08009586 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009586:	b580      	push	{r7, lr}
 8009588:	b082      	sub	sp, #8
 800958a:	af00      	add	r7, sp, #0
 800958c:	6078      	str	r0, [r7, #4]
 800958e:	460b      	mov	r3, r1
 8009590:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8009598:	78fa      	ldrb	r2, [r7, #3]
 800959a:	6879      	ldr	r1, [r7, #4]
 800959c:	4613      	mov	r3, r2
 800959e:	00db      	lsls	r3, r3, #3
 80095a0:	4413      	add	r3, r2
 80095a2:	009b      	lsls	r3, r3, #2
 80095a4:	440b      	add	r3, r1
 80095a6:	334c      	adds	r3, #76	; 0x4c
 80095a8:	681a      	ldr	r2, [r3, #0]
 80095aa:	78fb      	ldrb	r3, [r7, #3]
 80095ac:	4619      	mov	r1, r3
 80095ae:	f7fe fc56 	bl	8007e5e <USBD_LL_DataInStage>
}
 80095b2:	bf00      	nop
 80095b4:	3708      	adds	r7, #8
 80095b6:	46bd      	mov	sp, r7
 80095b8:	bd80      	pop	{r7, pc}

080095ba <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80095ba:	b580      	push	{r7, lr}
 80095bc:	b082      	sub	sp, #8
 80095be:	af00      	add	r7, sp, #0
 80095c0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80095c8:	4618      	mov	r0, r3
 80095ca:	f7fe fd8a 	bl	80080e2 <USBD_LL_SOF>
}
 80095ce:	bf00      	nop
 80095d0:	3708      	adds	r7, #8
 80095d2:	46bd      	mov	sp, r7
 80095d4:	bd80      	pop	{r7, pc}

080095d6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80095d6:	b580      	push	{r7, lr}
 80095d8:	b084      	sub	sp, #16
 80095da:	af00      	add	r7, sp, #0
 80095dc:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80095de:	2301      	movs	r3, #1
 80095e0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	68db      	ldr	r3, [r3, #12]
 80095e6:	2b00      	cmp	r3, #0
 80095e8:	d102      	bne.n	80095f0 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 80095ea:	2300      	movs	r3, #0
 80095ec:	73fb      	strb	r3, [r7, #15]
 80095ee:	e008      	b.n	8009602 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	68db      	ldr	r3, [r3, #12]
 80095f4:	2b02      	cmp	r3, #2
 80095f6:	d102      	bne.n	80095fe <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 80095f8:	2301      	movs	r3, #1
 80095fa:	73fb      	strb	r3, [r7, #15]
 80095fc:	e001      	b.n	8009602 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 80095fe:	f7f7 fd95 	bl	800112c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009608:	7bfa      	ldrb	r2, [r7, #15]
 800960a:	4611      	mov	r1, r2
 800960c:	4618      	mov	r0, r3
 800960e:	f7fe fd2a 	bl	8008066 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009618:	4618      	mov	r0, r3
 800961a:	f7fe fcd2 	bl	8007fc2 <USBD_LL_Reset>
}
 800961e:	bf00      	nop
 8009620:	3710      	adds	r7, #16
 8009622:	46bd      	mov	sp, r7
 8009624:	bd80      	pop	{r7, pc}
	...

08009628 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009628:	b580      	push	{r7, lr}
 800962a:	b082      	sub	sp, #8
 800962c:	af00      	add	r7, sp, #0
 800962e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009636:	4618      	mov	r0, r3
 8009638:	f7fe fd25 	bl	8008086 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	681b      	ldr	r3, [r3, #0]
 8009640:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009644:	681b      	ldr	r3, [r3, #0]
 8009646:	687a      	ldr	r2, [r7, #4]
 8009648:	6812      	ldr	r2, [r2, #0]
 800964a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800964e:	f043 0301 	orr.w	r3, r3, #1
 8009652:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	6a1b      	ldr	r3, [r3, #32]
 8009658:	2b00      	cmp	r3, #0
 800965a:	d005      	beq.n	8009668 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800965c:	4b04      	ldr	r3, [pc, #16]	; (8009670 <HAL_PCD_SuspendCallback+0x48>)
 800965e:	691b      	ldr	r3, [r3, #16]
 8009660:	4a03      	ldr	r2, [pc, #12]	; (8009670 <HAL_PCD_SuspendCallback+0x48>)
 8009662:	f043 0306 	orr.w	r3, r3, #6
 8009666:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8009668:	bf00      	nop
 800966a:	3708      	adds	r7, #8
 800966c:	46bd      	mov	sp, r7
 800966e:	bd80      	pop	{r7, pc}
 8009670:	e000ed00 	.word	0xe000ed00

08009674 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009674:	b580      	push	{r7, lr}
 8009676:	b082      	sub	sp, #8
 8009678:	af00      	add	r7, sp, #0
 800967a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009682:	4618      	mov	r0, r3
 8009684:	f7fe fd15 	bl	80080b2 <USBD_LL_Resume>
}
 8009688:	bf00      	nop
 800968a:	3708      	adds	r7, #8
 800968c:	46bd      	mov	sp, r7
 800968e:	bd80      	pop	{r7, pc}

08009690 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009690:	b580      	push	{r7, lr}
 8009692:	b082      	sub	sp, #8
 8009694:	af00      	add	r7, sp, #0
 8009696:	6078      	str	r0, [r7, #4]
 8009698:	460b      	mov	r3, r1
 800969a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80096a2:	78fa      	ldrb	r2, [r7, #3]
 80096a4:	4611      	mov	r1, r2
 80096a6:	4618      	mov	r0, r3
 80096a8:	f7fe fd6d 	bl	8008186 <USBD_LL_IsoOUTIncomplete>
}
 80096ac:	bf00      	nop
 80096ae:	3708      	adds	r7, #8
 80096b0:	46bd      	mov	sp, r7
 80096b2:	bd80      	pop	{r7, pc}

080096b4 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80096b4:	b580      	push	{r7, lr}
 80096b6:	b082      	sub	sp, #8
 80096b8:	af00      	add	r7, sp, #0
 80096ba:	6078      	str	r0, [r7, #4]
 80096bc:	460b      	mov	r3, r1
 80096be:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80096c6:	78fa      	ldrb	r2, [r7, #3]
 80096c8:	4611      	mov	r1, r2
 80096ca:	4618      	mov	r0, r3
 80096cc:	f7fe fd29 	bl	8008122 <USBD_LL_IsoINIncomplete>
}
 80096d0:	bf00      	nop
 80096d2:	3708      	adds	r7, #8
 80096d4:	46bd      	mov	sp, r7
 80096d6:	bd80      	pop	{r7, pc}

080096d8 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80096d8:	b580      	push	{r7, lr}
 80096da:	b082      	sub	sp, #8
 80096dc:	af00      	add	r7, sp, #0
 80096de:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80096e6:	4618      	mov	r0, r3
 80096e8:	f7fe fd7f 	bl	80081ea <USBD_LL_DevConnected>
}
 80096ec:	bf00      	nop
 80096ee:	3708      	adds	r7, #8
 80096f0:	46bd      	mov	sp, r7
 80096f2:	bd80      	pop	{r7, pc}

080096f4 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80096f4:	b580      	push	{r7, lr}
 80096f6:	b082      	sub	sp, #8
 80096f8:	af00      	add	r7, sp, #0
 80096fa:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009702:	4618      	mov	r0, r3
 8009704:	f7fe fd7c 	bl	8008200 <USBD_LL_DevDisconnected>
}
 8009708:	bf00      	nop
 800970a:	3708      	adds	r7, #8
 800970c:	46bd      	mov	sp, r7
 800970e:	bd80      	pop	{r7, pc}

08009710 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009710:	b580      	push	{r7, lr}
 8009712:	b082      	sub	sp, #8
 8009714:	af00      	add	r7, sp, #0
 8009716:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_HS) {
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	781b      	ldrb	r3, [r3, #0]
 800971c:	2b01      	cmp	r3, #1
 800971e:	d140      	bne.n	80097a2 <USBD_LL_Init+0x92>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_HS.pData = pdev;
 8009720:	4a22      	ldr	r2, [pc, #136]	; (80097ac <USBD_LL_Init+0x9c>)
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_HS;
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	4a20      	ldr	r2, [pc, #128]	; (80097ac <USBD_LL_Init+0x9c>)
 800972c:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 8009730:	4b1e      	ldr	r3, [pc, #120]	; (80097ac <USBD_LL_Init+0x9c>)
 8009732:	4a1f      	ldr	r2, [pc, #124]	; (80097b0 <USBD_LL_Init+0xa0>)
 8009734:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_HS.Init.dev_endpoints = 6;
 8009736:	4b1d      	ldr	r3, [pc, #116]	; (80097ac <USBD_LL_Init+0x9c>)
 8009738:	2206      	movs	r2, #6
 800973a:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_FULL;
 800973c:	4b1b      	ldr	r3, [pc, #108]	; (80097ac <USBD_LL_Init+0x9c>)
 800973e:	2202      	movs	r2, #2
 8009740:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 8009742:	4b1a      	ldr	r3, [pc, #104]	; (80097ac <USBD_LL_Init+0x9c>)
 8009744:	2200      	movs	r2, #0
 8009746:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 8009748:	4b18      	ldr	r3, [pc, #96]	; (80097ac <USBD_LL_Init+0x9c>)
 800974a:	2202      	movs	r2, #2
 800974c:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 800974e:	4b17      	ldr	r3, [pc, #92]	; (80097ac <USBD_LL_Init+0x9c>)
 8009750:	2200      	movs	r2, #0
 8009752:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 8009754:	4b15      	ldr	r3, [pc, #84]	; (80097ac <USBD_LL_Init+0x9c>)
 8009756:	2200      	movs	r2, #0
 8009758:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 800975a:	4b14      	ldr	r3, [pc, #80]	; (80097ac <USBD_LL_Init+0x9c>)
 800975c:	2200      	movs	r2, #0
 800975e:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 8009760:	4b12      	ldr	r3, [pc, #72]	; (80097ac <USBD_LL_Init+0x9c>)
 8009762:	2200      	movs	r2, #0
 8009764:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 8009766:	4b11      	ldr	r3, [pc, #68]	; (80097ac <USBD_LL_Init+0x9c>)
 8009768:	2200      	movs	r2, #0
 800976a:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 800976c:	4b0f      	ldr	r3, [pc, #60]	; (80097ac <USBD_LL_Init+0x9c>)
 800976e:	2200      	movs	r2, #0
 8009770:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 8009772:	480e      	ldr	r0, [pc, #56]	; (80097ac <USBD_LL_Init+0x9c>)
 8009774:	f7f8 fb35 	bl	8001de2 <HAL_PCD_Init>
 8009778:	4603      	mov	r3, r0
 800977a:	2b00      	cmp	r3, #0
 800977c:	d001      	beq.n	8009782 <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 800977e:	f7f7 fcd5 	bl	800112c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_HS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_HS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_HS, 0x200);
 8009782:	f44f 7100 	mov.w	r1, #512	; 0x200
 8009786:	4809      	ldr	r0, [pc, #36]	; (80097ac <USBD_LL_Init+0x9c>)
 8009788:	f7f9 fd8b 	bl	80032a2 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 0, 0x80);
 800978c:	2280      	movs	r2, #128	; 0x80
 800978e:	2100      	movs	r1, #0
 8009790:	4806      	ldr	r0, [pc, #24]	; (80097ac <USBD_LL_Init+0x9c>)
 8009792:	f7f9 fd3f 	bl	8003214 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 1, 0x174);
 8009796:	f44f 72ba 	mov.w	r2, #372	; 0x174
 800979a:	2101      	movs	r1, #1
 800979c:	4803      	ldr	r0, [pc, #12]	; (80097ac <USBD_LL_Init+0x9c>)
 800979e:	f7f9 fd39 	bl	8003214 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80097a2:	2300      	movs	r3, #0
}
 80097a4:	4618      	mov	r0, r3
 80097a6:	3708      	adds	r7, #8
 80097a8:	46bd      	mov	sp, r7
 80097aa:	bd80      	pop	{r7, pc}
 80097ac:	20001984 	.word	0x20001984
 80097b0:	40040000 	.word	0x40040000

080097b4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80097b4:	b580      	push	{r7, lr}
 80097b6:	b084      	sub	sp, #16
 80097b8:	af00      	add	r7, sp, #0
 80097ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80097bc:	2300      	movs	r3, #0
 80097be:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80097c0:	2300      	movs	r3, #0
 80097c2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80097ca:	4618      	mov	r0, r3
 80097cc:	f7f8 fc26 	bl	800201c <HAL_PCD_Start>
 80097d0:	4603      	mov	r3, r0
 80097d2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80097d4:	7bfb      	ldrb	r3, [r7, #15]
 80097d6:	4618      	mov	r0, r3
 80097d8:	f000 f942 	bl	8009a60 <USBD_Get_USB_Status>
 80097dc:	4603      	mov	r3, r0
 80097de:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80097e0:	7bbb      	ldrb	r3, [r7, #14]
}
 80097e2:	4618      	mov	r0, r3
 80097e4:	3710      	adds	r7, #16
 80097e6:	46bd      	mov	sp, r7
 80097e8:	bd80      	pop	{r7, pc}

080097ea <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80097ea:	b580      	push	{r7, lr}
 80097ec:	b084      	sub	sp, #16
 80097ee:	af00      	add	r7, sp, #0
 80097f0:	6078      	str	r0, [r7, #4]
 80097f2:	4608      	mov	r0, r1
 80097f4:	4611      	mov	r1, r2
 80097f6:	461a      	mov	r2, r3
 80097f8:	4603      	mov	r3, r0
 80097fa:	70fb      	strb	r3, [r7, #3]
 80097fc:	460b      	mov	r3, r1
 80097fe:	70bb      	strb	r3, [r7, #2]
 8009800:	4613      	mov	r3, r2
 8009802:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009804:	2300      	movs	r3, #0
 8009806:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009808:	2300      	movs	r3, #0
 800980a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8009812:	78bb      	ldrb	r3, [r7, #2]
 8009814:	883a      	ldrh	r2, [r7, #0]
 8009816:	78f9      	ldrb	r1, [r7, #3]
 8009818:	f7f9 f8f7 	bl	8002a0a <HAL_PCD_EP_Open>
 800981c:	4603      	mov	r3, r0
 800981e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009820:	7bfb      	ldrb	r3, [r7, #15]
 8009822:	4618      	mov	r0, r3
 8009824:	f000 f91c 	bl	8009a60 <USBD_Get_USB_Status>
 8009828:	4603      	mov	r3, r0
 800982a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800982c:	7bbb      	ldrb	r3, [r7, #14]
}
 800982e:	4618      	mov	r0, r3
 8009830:	3710      	adds	r7, #16
 8009832:	46bd      	mov	sp, r7
 8009834:	bd80      	pop	{r7, pc}

08009836 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009836:	b580      	push	{r7, lr}
 8009838:	b084      	sub	sp, #16
 800983a:	af00      	add	r7, sp, #0
 800983c:	6078      	str	r0, [r7, #4]
 800983e:	460b      	mov	r3, r1
 8009840:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009842:	2300      	movs	r3, #0
 8009844:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009846:	2300      	movs	r3, #0
 8009848:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009850:	78fa      	ldrb	r2, [r7, #3]
 8009852:	4611      	mov	r1, r2
 8009854:	4618      	mov	r0, r3
 8009856:	f7f9 f940 	bl	8002ada <HAL_PCD_EP_Close>
 800985a:	4603      	mov	r3, r0
 800985c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800985e:	7bfb      	ldrb	r3, [r7, #15]
 8009860:	4618      	mov	r0, r3
 8009862:	f000 f8fd 	bl	8009a60 <USBD_Get_USB_Status>
 8009866:	4603      	mov	r3, r0
 8009868:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800986a:	7bbb      	ldrb	r3, [r7, #14]
}
 800986c:	4618      	mov	r0, r3
 800986e:	3710      	adds	r7, #16
 8009870:	46bd      	mov	sp, r7
 8009872:	bd80      	pop	{r7, pc}

08009874 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009874:	b580      	push	{r7, lr}
 8009876:	b084      	sub	sp, #16
 8009878:	af00      	add	r7, sp, #0
 800987a:	6078      	str	r0, [r7, #4]
 800987c:	460b      	mov	r3, r1
 800987e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009880:	2300      	movs	r3, #0
 8009882:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009884:	2300      	movs	r3, #0
 8009886:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800988e:	78fa      	ldrb	r2, [r7, #3]
 8009890:	4611      	mov	r1, r2
 8009892:	4618      	mov	r0, r3
 8009894:	f7f9 fa18 	bl	8002cc8 <HAL_PCD_EP_SetStall>
 8009898:	4603      	mov	r3, r0
 800989a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800989c:	7bfb      	ldrb	r3, [r7, #15]
 800989e:	4618      	mov	r0, r3
 80098a0:	f000 f8de 	bl	8009a60 <USBD_Get_USB_Status>
 80098a4:	4603      	mov	r3, r0
 80098a6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80098a8:	7bbb      	ldrb	r3, [r7, #14]
}
 80098aa:	4618      	mov	r0, r3
 80098ac:	3710      	adds	r7, #16
 80098ae:	46bd      	mov	sp, r7
 80098b0:	bd80      	pop	{r7, pc}

080098b2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80098b2:	b580      	push	{r7, lr}
 80098b4:	b084      	sub	sp, #16
 80098b6:	af00      	add	r7, sp, #0
 80098b8:	6078      	str	r0, [r7, #4]
 80098ba:	460b      	mov	r3, r1
 80098bc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80098be:	2300      	movs	r3, #0
 80098c0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80098c2:	2300      	movs	r3, #0
 80098c4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80098cc:	78fa      	ldrb	r2, [r7, #3]
 80098ce:	4611      	mov	r1, r2
 80098d0:	4618      	mov	r0, r3
 80098d2:	f7f9 fa5d 	bl	8002d90 <HAL_PCD_EP_ClrStall>
 80098d6:	4603      	mov	r3, r0
 80098d8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80098da:	7bfb      	ldrb	r3, [r7, #15]
 80098dc:	4618      	mov	r0, r3
 80098de:	f000 f8bf 	bl	8009a60 <USBD_Get_USB_Status>
 80098e2:	4603      	mov	r3, r0
 80098e4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80098e6:	7bbb      	ldrb	r3, [r7, #14]
}
 80098e8:	4618      	mov	r0, r3
 80098ea:	3710      	adds	r7, #16
 80098ec:	46bd      	mov	sp, r7
 80098ee:	bd80      	pop	{r7, pc}

080098f0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80098f0:	b480      	push	{r7}
 80098f2:	b085      	sub	sp, #20
 80098f4:	af00      	add	r7, sp, #0
 80098f6:	6078      	str	r0, [r7, #4]
 80098f8:	460b      	mov	r3, r1
 80098fa:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009902:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8009904:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009908:	2b00      	cmp	r3, #0
 800990a:	da0b      	bge.n	8009924 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800990c:	78fb      	ldrb	r3, [r7, #3]
 800990e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009912:	68f9      	ldr	r1, [r7, #12]
 8009914:	4613      	mov	r3, r2
 8009916:	00db      	lsls	r3, r3, #3
 8009918:	4413      	add	r3, r2
 800991a:	009b      	lsls	r3, r3, #2
 800991c:	440b      	add	r3, r1
 800991e:	333e      	adds	r3, #62	; 0x3e
 8009920:	781b      	ldrb	r3, [r3, #0]
 8009922:	e00b      	b.n	800993c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8009924:	78fb      	ldrb	r3, [r7, #3]
 8009926:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800992a:	68f9      	ldr	r1, [r7, #12]
 800992c:	4613      	mov	r3, r2
 800992e:	00db      	lsls	r3, r3, #3
 8009930:	4413      	add	r3, r2
 8009932:	009b      	lsls	r3, r3, #2
 8009934:	440b      	add	r3, r1
 8009936:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800993a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800993c:	4618      	mov	r0, r3
 800993e:	3714      	adds	r7, #20
 8009940:	46bd      	mov	sp, r7
 8009942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009946:	4770      	bx	lr

08009948 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8009948:	b580      	push	{r7, lr}
 800994a:	b084      	sub	sp, #16
 800994c:	af00      	add	r7, sp, #0
 800994e:	6078      	str	r0, [r7, #4]
 8009950:	460b      	mov	r3, r1
 8009952:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009954:	2300      	movs	r3, #0
 8009956:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009958:	2300      	movs	r3, #0
 800995a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009962:	78fa      	ldrb	r2, [r7, #3]
 8009964:	4611      	mov	r1, r2
 8009966:	4618      	mov	r0, r3
 8009968:	f7f9 f82a 	bl	80029c0 <HAL_PCD_SetAddress>
 800996c:	4603      	mov	r3, r0
 800996e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009970:	7bfb      	ldrb	r3, [r7, #15]
 8009972:	4618      	mov	r0, r3
 8009974:	f000 f874 	bl	8009a60 <USBD_Get_USB_Status>
 8009978:	4603      	mov	r3, r0
 800997a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800997c:	7bbb      	ldrb	r3, [r7, #14]
}
 800997e:	4618      	mov	r0, r3
 8009980:	3710      	adds	r7, #16
 8009982:	46bd      	mov	sp, r7
 8009984:	bd80      	pop	{r7, pc}

08009986 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009986:	b580      	push	{r7, lr}
 8009988:	b086      	sub	sp, #24
 800998a:	af00      	add	r7, sp, #0
 800998c:	60f8      	str	r0, [r7, #12]
 800998e:	607a      	str	r2, [r7, #4]
 8009990:	603b      	str	r3, [r7, #0]
 8009992:	460b      	mov	r3, r1
 8009994:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009996:	2300      	movs	r3, #0
 8009998:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800999a:	2300      	movs	r3, #0
 800999c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800999e:	68fb      	ldr	r3, [r7, #12]
 80099a0:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80099a4:	7af9      	ldrb	r1, [r7, #11]
 80099a6:	683b      	ldr	r3, [r7, #0]
 80099a8:	687a      	ldr	r2, [r7, #4]
 80099aa:	f7f9 f943 	bl	8002c34 <HAL_PCD_EP_Transmit>
 80099ae:	4603      	mov	r3, r0
 80099b0:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80099b2:	7dfb      	ldrb	r3, [r7, #23]
 80099b4:	4618      	mov	r0, r3
 80099b6:	f000 f853 	bl	8009a60 <USBD_Get_USB_Status>
 80099ba:	4603      	mov	r3, r0
 80099bc:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80099be:	7dbb      	ldrb	r3, [r7, #22]
}
 80099c0:	4618      	mov	r0, r3
 80099c2:	3718      	adds	r7, #24
 80099c4:	46bd      	mov	sp, r7
 80099c6:	bd80      	pop	{r7, pc}

080099c8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80099c8:	b580      	push	{r7, lr}
 80099ca:	b086      	sub	sp, #24
 80099cc:	af00      	add	r7, sp, #0
 80099ce:	60f8      	str	r0, [r7, #12]
 80099d0:	607a      	str	r2, [r7, #4]
 80099d2:	603b      	str	r3, [r7, #0]
 80099d4:	460b      	mov	r3, r1
 80099d6:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80099d8:	2300      	movs	r3, #0
 80099da:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80099dc:	2300      	movs	r3, #0
 80099de:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80099e0:	68fb      	ldr	r3, [r7, #12]
 80099e2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80099e6:	7af9      	ldrb	r1, [r7, #11]
 80099e8:	683b      	ldr	r3, [r7, #0]
 80099ea:	687a      	ldr	r2, [r7, #4]
 80099ec:	f7f9 f8bf 	bl	8002b6e <HAL_PCD_EP_Receive>
 80099f0:	4603      	mov	r3, r0
 80099f2:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80099f4:	7dfb      	ldrb	r3, [r7, #23]
 80099f6:	4618      	mov	r0, r3
 80099f8:	f000 f832 	bl	8009a60 <USBD_Get_USB_Status>
 80099fc:	4603      	mov	r3, r0
 80099fe:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009a00:	7dbb      	ldrb	r3, [r7, #22]
}
 8009a02:	4618      	mov	r0, r3
 8009a04:	3718      	adds	r7, #24
 8009a06:	46bd      	mov	sp, r7
 8009a08:	bd80      	pop	{r7, pc}

08009a0a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009a0a:	b580      	push	{r7, lr}
 8009a0c:	b082      	sub	sp, #8
 8009a0e:	af00      	add	r7, sp, #0
 8009a10:	6078      	str	r0, [r7, #4]
 8009a12:	460b      	mov	r3, r1
 8009a14:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009a1c:	78fa      	ldrb	r2, [r7, #3]
 8009a1e:	4611      	mov	r1, r2
 8009a20:	4618      	mov	r0, r3
 8009a22:	f7f9 f8ef 	bl	8002c04 <HAL_PCD_EP_GetRxCount>
 8009a26:	4603      	mov	r3, r0
}
 8009a28:	4618      	mov	r0, r3
 8009a2a:	3708      	adds	r7, #8
 8009a2c:	46bd      	mov	sp, r7
 8009a2e:	bd80      	pop	{r7, pc}

08009a30 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8009a30:	b480      	push	{r7}
 8009a32:	b083      	sub	sp, #12
 8009a34:	af00      	add	r7, sp, #0
 8009a36:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8009a38:	4b03      	ldr	r3, [pc, #12]	; (8009a48 <USBD_static_malloc+0x18>)
}
 8009a3a:	4618      	mov	r0, r3
 8009a3c:	370c      	adds	r7, #12
 8009a3e:	46bd      	mov	sp, r7
 8009a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a44:	4770      	bx	lr
 8009a46:	bf00      	nop
 8009a48:	20001e90 	.word	0x20001e90

08009a4c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8009a4c:	b480      	push	{r7}
 8009a4e:	b083      	sub	sp, #12
 8009a50:	af00      	add	r7, sp, #0
 8009a52:	6078      	str	r0, [r7, #4]

}
 8009a54:	bf00      	nop
 8009a56:	370c      	adds	r7, #12
 8009a58:	46bd      	mov	sp, r7
 8009a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a5e:	4770      	bx	lr

08009a60 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009a60:	b480      	push	{r7}
 8009a62:	b085      	sub	sp, #20
 8009a64:	af00      	add	r7, sp, #0
 8009a66:	4603      	mov	r3, r0
 8009a68:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009a6a:	2300      	movs	r3, #0
 8009a6c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009a6e:	79fb      	ldrb	r3, [r7, #7]
 8009a70:	2b03      	cmp	r3, #3
 8009a72:	d817      	bhi.n	8009aa4 <USBD_Get_USB_Status+0x44>
 8009a74:	a201      	add	r2, pc, #4	; (adr r2, 8009a7c <USBD_Get_USB_Status+0x1c>)
 8009a76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a7a:	bf00      	nop
 8009a7c:	08009a8d 	.word	0x08009a8d
 8009a80:	08009a93 	.word	0x08009a93
 8009a84:	08009a99 	.word	0x08009a99
 8009a88:	08009a9f 	.word	0x08009a9f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009a8c:	2300      	movs	r3, #0
 8009a8e:	73fb      	strb	r3, [r7, #15]
    break;
 8009a90:	e00b      	b.n	8009aaa <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009a92:	2303      	movs	r3, #3
 8009a94:	73fb      	strb	r3, [r7, #15]
    break;
 8009a96:	e008      	b.n	8009aaa <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009a98:	2301      	movs	r3, #1
 8009a9a:	73fb      	strb	r3, [r7, #15]
    break;
 8009a9c:	e005      	b.n	8009aaa <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009a9e:	2303      	movs	r3, #3
 8009aa0:	73fb      	strb	r3, [r7, #15]
    break;
 8009aa2:	e002      	b.n	8009aaa <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009aa4:	2303      	movs	r3, #3
 8009aa6:	73fb      	strb	r3, [r7, #15]
    break;
 8009aa8:	bf00      	nop
  }
  return usb_status;
 8009aaa:	7bfb      	ldrb	r3, [r7, #15]
}
 8009aac:	4618      	mov	r0, r3
 8009aae:	3714      	adds	r7, #20
 8009ab0:	46bd      	mov	sp, r7
 8009ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ab6:	4770      	bx	lr

08009ab8 <__errno>:
 8009ab8:	4b01      	ldr	r3, [pc, #4]	; (8009ac0 <__errno+0x8>)
 8009aba:	6818      	ldr	r0, [r3, #0]
 8009abc:	4770      	bx	lr
 8009abe:	bf00      	nop
 8009ac0:	20000104 	.word	0x20000104

08009ac4 <__libc_init_array>:
 8009ac4:	b570      	push	{r4, r5, r6, lr}
 8009ac6:	4d0d      	ldr	r5, [pc, #52]	; (8009afc <__libc_init_array+0x38>)
 8009ac8:	4c0d      	ldr	r4, [pc, #52]	; (8009b00 <__libc_init_array+0x3c>)
 8009aca:	1b64      	subs	r4, r4, r5
 8009acc:	10a4      	asrs	r4, r4, #2
 8009ace:	2600      	movs	r6, #0
 8009ad0:	42a6      	cmp	r6, r4
 8009ad2:	d109      	bne.n	8009ae8 <__libc_init_array+0x24>
 8009ad4:	4d0b      	ldr	r5, [pc, #44]	; (8009b04 <__libc_init_array+0x40>)
 8009ad6:	4c0c      	ldr	r4, [pc, #48]	; (8009b08 <__libc_init_array+0x44>)
 8009ad8:	f000 fc66 	bl	800a3a8 <_init>
 8009adc:	1b64      	subs	r4, r4, r5
 8009ade:	10a4      	asrs	r4, r4, #2
 8009ae0:	2600      	movs	r6, #0
 8009ae2:	42a6      	cmp	r6, r4
 8009ae4:	d105      	bne.n	8009af2 <__libc_init_array+0x2e>
 8009ae6:	bd70      	pop	{r4, r5, r6, pc}
 8009ae8:	f855 3b04 	ldr.w	r3, [r5], #4
 8009aec:	4798      	blx	r3
 8009aee:	3601      	adds	r6, #1
 8009af0:	e7ee      	b.n	8009ad0 <__libc_init_array+0xc>
 8009af2:	f855 3b04 	ldr.w	r3, [r5], #4
 8009af6:	4798      	blx	r3
 8009af8:	3601      	adds	r6, #1
 8009afa:	e7f2      	b.n	8009ae2 <__libc_init_array+0x1e>
 8009afc:	0800a48c 	.word	0x0800a48c
 8009b00:	0800a48c 	.word	0x0800a48c
 8009b04:	0800a48c 	.word	0x0800a48c
 8009b08:	0800a490 	.word	0x0800a490

08009b0c <memset>:
 8009b0c:	4402      	add	r2, r0
 8009b0e:	4603      	mov	r3, r0
 8009b10:	4293      	cmp	r3, r2
 8009b12:	d100      	bne.n	8009b16 <memset+0xa>
 8009b14:	4770      	bx	lr
 8009b16:	f803 1b01 	strb.w	r1, [r3], #1
 8009b1a:	e7f9      	b.n	8009b10 <memset+0x4>

08009b1c <setvbuf>:
 8009b1c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009b20:	461d      	mov	r5, r3
 8009b22:	4b5d      	ldr	r3, [pc, #372]	; (8009c98 <setvbuf+0x17c>)
 8009b24:	681f      	ldr	r7, [r3, #0]
 8009b26:	4604      	mov	r4, r0
 8009b28:	460e      	mov	r6, r1
 8009b2a:	4690      	mov	r8, r2
 8009b2c:	b127      	cbz	r7, 8009b38 <setvbuf+0x1c>
 8009b2e:	69bb      	ldr	r3, [r7, #24]
 8009b30:	b913      	cbnz	r3, 8009b38 <setvbuf+0x1c>
 8009b32:	4638      	mov	r0, r7
 8009b34:	f000 f9d2 	bl	8009edc <__sinit>
 8009b38:	4b58      	ldr	r3, [pc, #352]	; (8009c9c <setvbuf+0x180>)
 8009b3a:	429c      	cmp	r4, r3
 8009b3c:	d167      	bne.n	8009c0e <setvbuf+0xf2>
 8009b3e:	687c      	ldr	r4, [r7, #4]
 8009b40:	f1b8 0f02 	cmp.w	r8, #2
 8009b44:	d006      	beq.n	8009b54 <setvbuf+0x38>
 8009b46:	f1b8 0f01 	cmp.w	r8, #1
 8009b4a:	f200 809f 	bhi.w	8009c8c <setvbuf+0x170>
 8009b4e:	2d00      	cmp	r5, #0
 8009b50:	f2c0 809c 	blt.w	8009c8c <setvbuf+0x170>
 8009b54:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009b56:	07db      	lsls	r3, r3, #31
 8009b58:	d405      	bmi.n	8009b66 <setvbuf+0x4a>
 8009b5a:	89a3      	ldrh	r3, [r4, #12]
 8009b5c:	0598      	lsls	r0, r3, #22
 8009b5e:	d402      	bmi.n	8009b66 <setvbuf+0x4a>
 8009b60:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009b62:	f000 fa59 	bl	800a018 <__retarget_lock_acquire_recursive>
 8009b66:	4621      	mov	r1, r4
 8009b68:	4638      	mov	r0, r7
 8009b6a:	f000 f923 	bl	8009db4 <_fflush_r>
 8009b6e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009b70:	b141      	cbz	r1, 8009b84 <setvbuf+0x68>
 8009b72:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009b76:	4299      	cmp	r1, r3
 8009b78:	d002      	beq.n	8009b80 <setvbuf+0x64>
 8009b7a:	4638      	mov	r0, r7
 8009b7c:	f000 fa7c 	bl	800a078 <_free_r>
 8009b80:	2300      	movs	r3, #0
 8009b82:	6363      	str	r3, [r4, #52]	; 0x34
 8009b84:	2300      	movs	r3, #0
 8009b86:	61a3      	str	r3, [r4, #24]
 8009b88:	6063      	str	r3, [r4, #4]
 8009b8a:	89a3      	ldrh	r3, [r4, #12]
 8009b8c:	0619      	lsls	r1, r3, #24
 8009b8e:	d503      	bpl.n	8009b98 <setvbuf+0x7c>
 8009b90:	6921      	ldr	r1, [r4, #16]
 8009b92:	4638      	mov	r0, r7
 8009b94:	f000 fa70 	bl	800a078 <_free_r>
 8009b98:	89a3      	ldrh	r3, [r4, #12]
 8009b9a:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 8009b9e:	f023 0303 	bic.w	r3, r3, #3
 8009ba2:	f1b8 0f02 	cmp.w	r8, #2
 8009ba6:	81a3      	strh	r3, [r4, #12]
 8009ba8:	d06c      	beq.n	8009c84 <setvbuf+0x168>
 8009baa:	ab01      	add	r3, sp, #4
 8009bac:	466a      	mov	r2, sp
 8009bae:	4621      	mov	r1, r4
 8009bb0:	4638      	mov	r0, r7
 8009bb2:	f000 fa33 	bl	800a01c <__swhatbuf_r>
 8009bb6:	89a3      	ldrh	r3, [r4, #12]
 8009bb8:	4318      	orrs	r0, r3
 8009bba:	81a0      	strh	r0, [r4, #12]
 8009bbc:	2d00      	cmp	r5, #0
 8009bbe:	d130      	bne.n	8009c22 <setvbuf+0x106>
 8009bc0:	9d00      	ldr	r5, [sp, #0]
 8009bc2:	4628      	mov	r0, r5
 8009bc4:	f000 fa50 	bl	800a068 <malloc>
 8009bc8:	4606      	mov	r6, r0
 8009bca:	2800      	cmp	r0, #0
 8009bcc:	d155      	bne.n	8009c7a <setvbuf+0x15e>
 8009bce:	f8dd 9000 	ldr.w	r9, [sp]
 8009bd2:	45a9      	cmp	r9, r5
 8009bd4:	d14a      	bne.n	8009c6c <setvbuf+0x150>
 8009bd6:	f04f 35ff 	mov.w	r5, #4294967295
 8009bda:	2200      	movs	r2, #0
 8009bdc:	60a2      	str	r2, [r4, #8]
 8009bde:	f104 0247 	add.w	r2, r4, #71	; 0x47
 8009be2:	6022      	str	r2, [r4, #0]
 8009be4:	6122      	str	r2, [r4, #16]
 8009be6:	2201      	movs	r2, #1
 8009be8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009bec:	6162      	str	r2, [r4, #20]
 8009bee:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009bf0:	f043 0302 	orr.w	r3, r3, #2
 8009bf4:	07d2      	lsls	r2, r2, #31
 8009bf6:	81a3      	strh	r3, [r4, #12]
 8009bf8:	d405      	bmi.n	8009c06 <setvbuf+0xea>
 8009bfa:	f413 7f00 	tst.w	r3, #512	; 0x200
 8009bfe:	d102      	bne.n	8009c06 <setvbuf+0xea>
 8009c00:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009c02:	f000 fa0a 	bl	800a01a <__retarget_lock_release_recursive>
 8009c06:	4628      	mov	r0, r5
 8009c08:	b003      	add	sp, #12
 8009c0a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009c0e:	4b24      	ldr	r3, [pc, #144]	; (8009ca0 <setvbuf+0x184>)
 8009c10:	429c      	cmp	r4, r3
 8009c12:	d101      	bne.n	8009c18 <setvbuf+0xfc>
 8009c14:	68bc      	ldr	r4, [r7, #8]
 8009c16:	e793      	b.n	8009b40 <setvbuf+0x24>
 8009c18:	4b22      	ldr	r3, [pc, #136]	; (8009ca4 <setvbuf+0x188>)
 8009c1a:	429c      	cmp	r4, r3
 8009c1c:	bf08      	it	eq
 8009c1e:	68fc      	ldreq	r4, [r7, #12]
 8009c20:	e78e      	b.n	8009b40 <setvbuf+0x24>
 8009c22:	2e00      	cmp	r6, #0
 8009c24:	d0cd      	beq.n	8009bc2 <setvbuf+0xa6>
 8009c26:	69bb      	ldr	r3, [r7, #24]
 8009c28:	b913      	cbnz	r3, 8009c30 <setvbuf+0x114>
 8009c2a:	4638      	mov	r0, r7
 8009c2c:	f000 f956 	bl	8009edc <__sinit>
 8009c30:	f1b8 0f01 	cmp.w	r8, #1
 8009c34:	bf08      	it	eq
 8009c36:	89a3      	ldrheq	r3, [r4, #12]
 8009c38:	6026      	str	r6, [r4, #0]
 8009c3a:	bf04      	itt	eq
 8009c3c:	f043 0301 	orreq.w	r3, r3, #1
 8009c40:	81a3      	strheq	r3, [r4, #12]
 8009c42:	89a2      	ldrh	r2, [r4, #12]
 8009c44:	f012 0308 	ands.w	r3, r2, #8
 8009c48:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8009c4c:	d01c      	beq.n	8009c88 <setvbuf+0x16c>
 8009c4e:	07d3      	lsls	r3, r2, #31
 8009c50:	bf41      	itttt	mi
 8009c52:	2300      	movmi	r3, #0
 8009c54:	426d      	negmi	r5, r5
 8009c56:	60a3      	strmi	r3, [r4, #8]
 8009c58:	61a5      	strmi	r5, [r4, #24]
 8009c5a:	bf58      	it	pl
 8009c5c:	60a5      	strpl	r5, [r4, #8]
 8009c5e:	6e65      	ldr	r5, [r4, #100]	; 0x64
 8009c60:	f015 0501 	ands.w	r5, r5, #1
 8009c64:	d115      	bne.n	8009c92 <setvbuf+0x176>
 8009c66:	f412 7f00 	tst.w	r2, #512	; 0x200
 8009c6a:	e7c8      	b.n	8009bfe <setvbuf+0xe2>
 8009c6c:	4648      	mov	r0, r9
 8009c6e:	f000 f9fb 	bl	800a068 <malloc>
 8009c72:	4606      	mov	r6, r0
 8009c74:	2800      	cmp	r0, #0
 8009c76:	d0ae      	beq.n	8009bd6 <setvbuf+0xba>
 8009c78:	464d      	mov	r5, r9
 8009c7a:	89a3      	ldrh	r3, [r4, #12]
 8009c7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009c80:	81a3      	strh	r3, [r4, #12]
 8009c82:	e7d0      	b.n	8009c26 <setvbuf+0x10a>
 8009c84:	2500      	movs	r5, #0
 8009c86:	e7a8      	b.n	8009bda <setvbuf+0xbe>
 8009c88:	60a3      	str	r3, [r4, #8]
 8009c8a:	e7e8      	b.n	8009c5e <setvbuf+0x142>
 8009c8c:	f04f 35ff 	mov.w	r5, #4294967295
 8009c90:	e7b9      	b.n	8009c06 <setvbuf+0xea>
 8009c92:	2500      	movs	r5, #0
 8009c94:	e7b7      	b.n	8009c06 <setvbuf+0xea>
 8009c96:	bf00      	nop
 8009c98:	20000104 	.word	0x20000104
 8009c9c:	0800a444 	.word	0x0800a444
 8009ca0:	0800a464 	.word	0x0800a464
 8009ca4:	0800a424 	.word	0x0800a424

08009ca8 <__sflush_r>:
 8009ca8:	898a      	ldrh	r2, [r1, #12]
 8009caa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009cae:	4605      	mov	r5, r0
 8009cb0:	0710      	lsls	r0, r2, #28
 8009cb2:	460c      	mov	r4, r1
 8009cb4:	d458      	bmi.n	8009d68 <__sflush_r+0xc0>
 8009cb6:	684b      	ldr	r3, [r1, #4]
 8009cb8:	2b00      	cmp	r3, #0
 8009cba:	dc05      	bgt.n	8009cc8 <__sflush_r+0x20>
 8009cbc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009cbe:	2b00      	cmp	r3, #0
 8009cc0:	dc02      	bgt.n	8009cc8 <__sflush_r+0x20>
 8009cc2:	2000      	movs	r0, #0
 8009cc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009cc8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009cca:	2e00      	cmp	r6, #0
 8009ccc:	d0f9      	beq.n	8009cc2 <__sflush_r+0x1a>
 8009cce:	2300      	movs	r3, #0
 8009cd0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009cd4:	682f      	ldr	r7, [r5, #0]
 8009cd6:	602b      	str	r3, [r5, #0]
 8009cd8:	d032      	beq.n	8009d40 <__sflush_r+0x98>
 8009cda:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009cdc:	89a3      	ldrh	r3, [r4, #12]
 8009cde:	075a      	lsls	r2, r3, #29
 8009ce0:	d505      	bpl.n	8009cee <__sflush_r+0x46>
 8009ce2:	6863      	ldr	r3, [r4, #4]
 8009ce4:	1ac0      	subs	r0, r0, r3
 8009ce6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009ce8:	b10b      	cbz	r3, 8009cee <__sflush_r+0x46>
 8009cea:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009cec:	1ac0      	subs	r0, r0, r3
 8009cee:	2300      	movs	r3, #0
 8009cf0:	4602      	mov	r2, r0
 8009cf2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009cf4:	6a21      	ldr	r1, [r4, #32]
 8009cf6:	4628      	mov	r0, r5
 8009cf8:	47b0      	blx	r6
 8009cfa:	1c43      	adds	r3, r0, #1
 8009cfc:	89a3      	ldrh	r3, [r4, #12]
 8009cfe:	d106      	bne.n	8009d0e <__sflush_r+0x66>
 8009d00:	6829      	ldr	r1, [r5, #0]
 8009d02:	291d      	cmp	r1, #29
 8009d04:	d82c      	bhi.n	8009d60 <__sflush_r+0xb8>
 8009d06:	4a2a      	ldr	r2, [pc, #168]	; (8009db0 <__sflush_r+0x108>)
 8009d08:	40ca      	lsrs	r2, r1
 8009d0a:	07d6      	lsls	r6, r2, #31
 8009d0c:	d528      	bpl.n	8009d60 <__sflush_r+0xb8>
 8009d0e:	2200      	movs	r2, #0
 8009d10:	6062      	str	r2, [r4, #4]
 8009d12:	04d9      	lsls	r1, r3, #19
 8009d14:	6922      	ldr	r2, [r4, #16]
 8009d16:	6022      	str	r2, [r4, #0]
 8009d18:	d504      	bpl.n	8009d24 <__sflush_r+0x7c>
 8009d1a:	1c42      	adds	r2, r0, #1
 8009d1c:	d101      	bne.n	8009d22 <__sflush_r+0x7a>
 8009d1e:	682b      	ldr	r3, [r5, #0]
 8009d20:	b903      	cbnz	r3, 8009d24 <__sflush_r+0x7c>
 8009d22:	6560      	str	r0, [r4, #84]	; 0x54
 8009d24:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009d26:	602f      	str	r7, [r5, #0]
 8009d28:	2900      	cmp	r1, #0
 8009d2a:	d0ca      	beq.n	8009cc2 <__sflush_r+0x1a>
 8009d2c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009d30:	4299      	cmp	r1, r3
 8009d32:	d002      	beq.n	8009d3a <__sflush_r+0x92>
 8009d34:	4628      	mov	r0, r5
 8009d36:	f000 f99f 	bl	800a078 <_free_r>
 8009d3a:	2000      	movs	r0, #0
 8009d3c:	6360      	str	r0, [r4, #52]	; 0x34
 8009d3e:	e7c1      	b.n	8009cc4 <__sflush_r+0x1c>
 8009d40:	6a21      	ldr	r1, [r4, #32]
 8009d42:	2301      	movs	r3, #1
 8009d44:	4628      	mov	r0, r5
 8009d46:	47b0      	blx	r6
 8009d48:	1c41      	adds	r1, r0, #1
 8009d4a:	d1c7      	bne.n	8009cdc <__sflush_r+0x34>
 8009d4c:	682b      	ldr	r3, [r5, #0]
 8009d4e:	2b00      	cmp	r3, #0
 8009d50:	d0c4      	beq.n	8009cdc <__sflush_r+0x34>
 8009d52:	2b1d      	cmp	r3, #29
 8009d54:	d001      	beq.n	8009d5a <__sflush_r+0xb2>
 8009d56:	2b16      	cmp	r3, #22
 8009d58:	d101      	bne.n	8009d5e <__sflush_r+0xb6>
 8009d5a:	602f      	str	r7, [r5, #0]
 8009d5c:	e7b1      	b.n	8009cc2 <__sflush_r+0x1a>
 8009d5e:	89a3      	ldrh	r3, [r4, #12]
 8009d60:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009d64:	81a3      	strh	r3, [r4, #12]
 8009d66:	e7ad      	b.n	8009cc4 <__sflush_r+0x1c>
 8009d68:	690f      	ldr	r7, [r1, #16]
 8009d6a:	2f00      	cmp	r7, #0
 8009d6c:	d0a9      	beq.n	8009cc2 <__sflush_r+0x1a>
 8009d6e:	0793      	lsls	r3, r2, #30
 8009d70:	680e      	ldr	r6, [r1, #0]
 8009d72:	bf08      	it	eq
 8009d74:	694b      	ldreq	r3, [r1, #20]
 8009d76:	600f      	str	r7, [r1, #0]
 8009d78:	bf18      	it	ne
 8009d7a:	2300      	movne	r3, #0
 8009d7c:	eba6 0807 	sub.w	r8, r6, r7
 8009d80:	608b      	str	r3, [r1, #8]
 8009d82:	f1b8 0f00 	cmp.w	r8, #0
 8009d86:	dd9c      	ble.n	8009cc2 <__sflush_r+0x1a>
 8009d88:	6a21      	ldr	r1, [r4, #32]
 8009d8a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009d8c:	4643      	mov	r3, r8
 8009d8e:	463a      	mov	r2, r7
 8009d90:	4628      	mov	r0, r5
 8009d92:	47b0      	blx	r6
 8009d94:	2800      	cmp	r0, #0
 8009d96:	dc06      	bgt.n	8009da6 <__sflush_r+0xfe>
 8009d98:	89a3      	ldrh	r3, [r4, #12]
 8009d9a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009d9e:	81a3      	strh	r3, [r4, #12]
 8009da0:	f04f 30ff 	mov.w	r0, #4294967295
 8009da4:	e78e      	b.n	8009cc4 <__sflush_r+0x1c>
 8009da6:	4407      	add	r7, r0
 8009da8:	eba8 0800 	sub.w	r8, r8, r0
 8009dac:	e7e9      	b.n	8009d82 <__sflush_r+0xda>
 8009dae:	bf00      	nop
 8009db0:	20400001 	.word	0x20400001

08009db4 <_fflush_r>:
 8009db4:	b538      	push	{r3, r4, r5, lr}
 8009db6:	690b      	ldr	r3, [r1, #16]
 8009db8:	4605      	mov	r5, r0
 8009dba:	460c      	mov	r4, r1
 8009dbc:	b913      	cbnz	r3, 8009dc4 <_fflush_r+0x10>
 8009dbe:	2500      	movs	r5, #0
 8009dc0:	4628      	mov	r0, r5
 8009dc2:	bd38      	pop	{r3, r4, r5, pc}
 8009dc4:	b118      	cbz	r0, 8009dce <_fflush_r+0x1a>
 8009dc6:	6983      	ldr	r3, [r0, #24]
 8009dc8:	b90b      	cbnz	r3, 8009dce <_fflush_r+0x1a>
 8009dca:	f000 f887 	bl	8009edc <__sinit>
 8009dce:	4b14      	ldr	r3, [pc, #80]	; (8009e20 <_fflush_r+0x6c>)
 8009dd0:	429c      	cmp	r4, r3
 8009dd2:	d11b      	bne.n	8009e0c <_fflush_r+0x58>
 8009dd4:	686c      	ldr	r4, [r5, #4]
 8009dd6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009dda:	2b00      	cmp	r3, #0
 8009ddc:	d0ef      	beq.n	8009dbe <_fflush_r+0xa>
 8009dde:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009de0:	07d0      	lsls	r0, r2, #31
 8009de2:	d404      	bmi.n	8009dee <_fflush_r+0x3a>
 8009de4:	0599      	lsls	r1, r3, #22
 8009de6:	d402      	bmi.n	8009dee <_fflush_r+0x3a>
 8009de8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009dea:	f000 f915 	bl	800a018 <__retarget_lock_acquire_recursive>
 8009dee:	4628      	mov	r0, r5
 8009df0:	4621      	mov	r1, r4
 8009df2:	f7ff ff59 	bl	8009ca8 <__sflush_r>
 8009df6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009df8:	07da      	lsls	r2, r3, #31
 8009dfa:	4605      	mov	r5, r0
 8009dfc:	d4e0      	bmi.n	8009dc0 <_fflush_r+0xc>
 8009dfe:	89a3      	ldrh	r3, [r4, #12]
 8009e00:	059b      	lsls	r3, r3, #22
 8009e02:	d4dd      	bmi.n	8009dc0 <_fflush_r+0xc>
 8009e04:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009e06:	f000 f908 	bl	800a01a <__retarget_lock_release_recursive>
 8009e0a:	e7d9      	b.n	8009dc0 <_fflush_r+0xc>
 8009e0c:	4b05      	ldr	r3, [pc, #20]	; (8009e24 <_fflush_r+0x70>)
 8009e0e:	429c      	cmp	r4, r3
 8009e10:	d101      	bne.n	8009e16 <_fflush_r+0x62>
 8009e12:	68ac      	ldr	r4, [r5, #8]
 8009e14:	e7df      	b.n	8009dd6 <_fflush_r+0x22>
 8009e16:	4b04      	ldr	r3, [pc, #16]	; (8009e28 <_fflush_r+0x74>)
 8009e18:	429c      	cmp	r4, r3
 8009e1a:	bf08      	it	eq
 8009e1c:	68ec      	ldreq	r4, [r5, #12]
 8009e1e:	e7da      	b.n	8009dd6 <_fflush_r+0x22>
 8009e20:	0800a444 	.word	0x0800a444
 8009e24:	0800a464 	.word	0x0800a464
 8009e28:	0800a424 	.word	0x0800a424

08009e2c <std>:
 8009e2c:	2300      	movs	r3, #0
 8009e2e:	b510      	push	{r4, lr}
 8009e30:	4604      	mov	r4, r0
 8009e32:	e9c0 3300 	strd	r3, r3, [r0]
 8009e36:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009e3a:	6083      	str	r3, [r0, #8]
 8009e3c:	8181      	strh	r1, [r0, #12]
 8009e3e:	6643      	str	r3, [r0, #100]	; 0x64
 8009e40:	81c2      	strh	r2, [r0, #14]
 8009e42:	6183      	str	r3, [r0, #24]
 8009e44:	4619      	mov	r1, r3
 8009e46:	2208      	movs	r2, #8
 8009e48:	305c      	adds	r0, #92	; 0x5c
 8009e4a:	f7ff fe5f 	bl	8009b0c <memset>
 8009e4e:	4b05      	ldr	r3, [pc, #20]	; (8009e64 <std+0x38>)
 8009e50:	6263      	str	r3, [r4, #36]	; 0x24
 8009e52:	4b05      	ldr	r3, [pc, #20]	; (8009e68 <std+0x3c>)
 8009e54:	62a3      	str	r3, [r4, #40]	; 0x28
 8009e56:	4b05      	ldr	r3, [pc, #20]	; (8009e6c <std+0x40>)
 8009e58:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009e5a:	4b05      	ldr	r3, [pc, #20]	; (8009e70 <std+0x44>)
 8009e5c:	6224      	str	r4, [r4, #32]
 8009e5e:	6323      	str	r3, [r4, #48]	; 0x30
 8009e60:	bd10      	pop	{r4, pc}
 8009e62:	bf00      	nop
 8009e64:	0800a259 	.word	0x0800a259
 8009e68:	0800a27b 	.word	0x0800a27b
 8009e6c:	0800a2b3 	.word	0x0800a2b3
 8009e70:	0800a2d7 	.word	0x0800a2d7

08009e74 <_cleanup_r>:
 8009e74:	4901      	ldr	r1, [pc, #4]	; (8009e7c <_cleanup_r+0x8>)
 8009e76:	f000 b8af 	b.w	8009fd8 <_fwalk_reent>
 8009e7a:	bf00      	nop
 8009e7c:	08009db5 	.word	0x08009db5

08009e80 <__sfmoreglue>:
 8009e80:	b570      	push	{r4, r5, r6, lr}
 8009e82:	2268      	movs	r2, #104	; 0x68
 8009e84:	1e4d      	subs	r5, r1, #1
 8009e86:	4355      	muls	r5, r2
 8009e88:	460e      	mov	r6, r1
 8009e8a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009e8e:	f000 f95f 	bl	800a150 <_malloc_r>
 8009e92:	4604      	mov	r4, r0
 8009e94:	b140      	cbz	r0, 8009ea8 <__sfmoreglue+0x28>
 8009e96:	2100      	movs	r1, #0
 8009e98:	e9c0 1600 	strd	r1, r6, [r0]
 8009e9c:	300c      	adds	r0, #12
 8009e9e:	60a0      	str	r0, [r4, #8]
 8009ea0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009ea4:	f7ff fe32 	bl	8009b0c <memset>
 8009ea8:	4620      	mov	r0, r4
 8009eaa:	bd70      	pop	{r4, r5, r6, pc}

08009eac <__sfp_lock_acquire>:
 8009eac:	4801      	ldr	r0, [pc, #4]	; (8009eb4 <__sfp_lock_acquire+0x8>)
 8009eae:	f000 b8b3 	b.w	800a018 <__retarget_lock_acquire_recursive>
 8009eb2:	bf00      	nop
 8009eb4:	200020b1 	.word	0x200020b1

08009eb8 <__sfp_lock_release>:
 8009eb8:	4801      	ldr	r0, [pc, #4]	; (8009ec0 <__sfp_lock_release+0x8>)
 8009eba:	f000 b8ae 	b.w	800a01a <__retarget_lock_release_recursive>
 8009ebe:	bf00      	nop
 8009ec0:	200020b1 	.word	0x200020b1

08009ec4 <__sinit_lock_acquire>:
 8009ec4:	4801      	ldr	r0, [pc, #4]	; (8009ecc <__sinit_lock_acquire+0x8>)
 8009ec6:	f000 b8a7 	b.w	800a018 <__retarget_lock_acquire_recursive>
 8009eca:	bf00      	nop
 8009ecc:	200020b2 	.word	0x200020b2

08009ed0 <__sinit_lock_release>:
 8009ed0:	4801      	ldr	r0, [pc, #4]	; (8009ed8 <__sinit_lock_release+0x8>)
 8009ed2:	f000 b8a2 	b.w	800a01a <__retarget_lock_release_recursive>
 8009ed6:	bf00      	nop
 8009ed8:	200020b2 	.word	0x200020b2

08009edc <__sinit>:
 8009edc:	b510      	push	{r4, lr}
 8009ede:	4604      	mov	r4, r0
 8009ee0:	f7ff fff0 	bl	8009ec4 <__sinit_lock_acquire>
 8009ee4:	69a3      	ldr	r3, [r4, #24]
 8009ee6:	b11b      	cbz	r3, 8009ef0 <__sinit+0x14>
 8009ee8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009eec:	f7ff bff0 	b.w	8009ed0 <__sinit_lock_release>
 8009ef0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009ef4:	6523      	str	r3, [r4, #80]	; 0x50
 8009ef6:	4b13      	ldr	r3, [pc, #76]	; (8009f44 <__sinit+0x68>)
 8009ef8:	4a13      	ldr	r2, [pc, #76]	; (8009f48 <__sinit+0x6c>)
 8009efa:	681b      	ldr	r3, [r3, #0]
 8009efc:	62a2      	str	r2, [r4, #40]	; 0x28
 8009efe:	42a3      	cmp	r3, r4
 8009f00:	bf04      	itt	eq
 8009f02:	2301      	moveq	r3, #1
 8009f04:	61a3      	streq	r3, [r4, #24]
 8009f06:	4620      	mov	r0, r4
 8009f08:	f000 f820 	bl	8009f4c <__sfp>
 8009f0c:	6060      	str	r0, [r4, #4]
 8009f0e:	4620      	mov	r0, r4
 8009f10:	f000 f81c 	bl	8009f4c <__sfp>
 8009f14:	60a0      	str	r0, [r4, #8]
 8009f16:	4620      	mov	r0, r4
 8009f18:	f000 f818 	bl	8009f4c <__sfp>
 8009f1c:	2200      	movs	r2, #0
 8009f1e:	60e0      	str	r0, [r4, #12]
 8009f20:	2104      	movs	r1, #4
 8009f22:	6860      	ldr	r0, [r4, #4]
 8009f24:	f7ff ff82 	bl	8009e2c <std>
 8009f28:	68a0      	ldr	r0, [r4, #8]
 8009f2a:	2201      	movs	r2, #1
 8009f2c:	2109      	movs	r1, #9
 8009f2e:	f7ff ff7d 	bl	8009e2c <std>
 8009f32:	68e0      	ldr	r0, [r4, #12]
 8009f34:	2202      	movs	r2, #2
 8009f36:	2112      	movs	r1, #18
 8009f38:	f7ff ff78 	bl	8009e2c <std>
 8009f3c:	2301      	movs	r3, #1
 8009f3e:	61a3      	str	r3, [r4, #24]
 8009f40:	e7d2      	b.n	8009ee8 <__sinit+0xc>
 8009f42:	bf00      	nop
 8009f44:	0800a420 	.word	0x0800a420
 8009f48:	08009e75 	.word	0x08009e75

08009f4c <__sfp>:
 8009f4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f4e:	4607      	mov	r7, r0
 8009f50:	f7ff ffac 	bl	8009eac <__sfp_lock_acquire>
 8009f54:	4b1e      	ldr	r3, [pc, #120]	; (8009fd0 <__sfp+0x84>)
 8009f56:	681e      	ldr	r6, [r3, #0]
 8009f58:	69b3      	ldr	r3, [r6, #24]
 8009f5a:	b913      	cbnz	r3, 8009f62 <__sfp+0x16>
 8009f5c:	4630      	mov	r0, r6
 8009f5e:	f7ff ffbd 	bl	8009edc <__sinit>
 8009f62:	3648      	adds	r6, #72	; 0x48
 8009f64:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009f68:	3b01      	subs	r3, #1
 8009f6a:	d503      	bpl.n	8009f74 <__sfp+0x28>
 8009f6c:	6833      	ldr	r3, [r6, #0]
 8009f6e:	b30b      	cbz	r3, 8009fb4 <__sfp+0x68>
 8009f70:	6836      	ldr	r6, [r6, #0]
 8009f72:	e7f7      	b.n	8009f64 <__sfp+0x18>
 8009f74:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009f78:	b9d5      	cbnz	r5, 8009fb0 <__sfp+0x64>
 8009f7a:	4b16      	ldr	r3, [pc, #88]	; (8009fd4 <__sfp+0x88>)
 8009f7c:	60e3      	str	r3, [r4, #12]
 8009f7e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009f82:	6665      	str	r5, [r4, #100]	; 0x64
 8009f84:	f000 f847 	bl	800a016 <__retarget_lock_init_recursive>
 8009f88:	f7ff ff96 	bl	8009eb8 <__sfp_lock_release>
 8009f8c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009f90:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009f94:	6025      	str	r5, [r4, #0]
 8009f96:	61a5      	str	r5, [r4, #24]
 8009f98:	2208      	movs	r2, #8
 8009f9a:	4629      	mov	r1, r5
 8009f9c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009fa0:	f7ff fdb4 	bl	8009b0c <memset>
 8009fa4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009fa8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009fac:	4620      	mov	r0, r4
 8009fae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009fb0:	3468      	adds	r4, #104	; 0x68
 8009fb2:	e7d9      	b.n	8009f68 <__sfp+0x1c>
 8009fb4:	2104      	movs	r1, #4
 8009fb6:	4638      	mov	r0, r7
 8009fb8:	f7ff ff62 	bl	8009e80 <__sfmoreglue>
 8009fbc:	4604      	mov	r4, r0
 8009fbe:	6030      	str	r0, [r6, #0]
 8009fc0:	2800      	cmp	r0, #0
 8009fc2:	d1d5      	bne.n	8009f70 <__sfp+0x24>
 8009fc4:	f7ff ff78 	bl	8009eb8 <__sfp_lock_release>
 8009fc8:	230c      	movs	r3, #12
 8009fca:	603b      	str	r3, [r7, #0]
 8009fcc:	e7ee      	b.n	8009fac <__sfp+0x60>
 8009fce:	bf00      	nop
 8009fd0:	0800a420 	.word	0x0800a420
 8009fd4:	ffff0001 	.word	0xffff0001

08009fd8 <_fwalk_reent>:
 8009fd8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009fdc:	4606      	mov	r6, r0
 8009fde:	4688      	mov	r8, r1
 8009fe0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009fe4:	2700      	movs	r7, #0
 8009fe6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009fea:	f1b9 0901 	subs.w	r9, r9, #1
 8009fee:	d505      	bpl.n	8009ffc <_fwalk_reent+0x24>
 8009ff0:	6824      	ldr	r4, [r4, #0]
 8009ff2:	2c00      	cmp	r4, #0
 8009ff4:	d1f7      	bne.n	8009fe6 <_fwalk_reent+0xe>
 8009ff6:	4638      	mov	r0, r7
 8009ff8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009ffc:	89ab      	ldrh	r3, [r5, #12]
 8009ffe:	2b01      	cmp	r3, #1
 800a000:	d907      	bls.n	800a012 <_fwalk_reent+0x3a>
 800a002:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a006:	3301      	adds	r3, #1
 800a008:	d003      	beq.n	800a012 <_fwalk_reent+0x3a>
 800a00a:	4629      	mov	r1, r5
 800a00c:	4630      	mov	r0, r6
 800a00e:	47c0      	blx	r8
 800a010:	4307      	orrs	r7, r0
 800a012:	3568      	adds	r5, #104	; 0x68
 800a014:	e7e9      	b.n	8009fea <_fwalk_reent+0x12>

0800a016 <__retarget_lock_init_recursive>:
 800a016:	4770      	bx	lr

0800a018 <__retarget_lock_acquire_recursive>:
 800a018:	4770      	bx	lr

0800a01a <__retarget_lock_release_recursive>:
 800a01a:	4770      	bx	lr

0800a01c <__swhatbuf_r>:
 800a01c:	b570      	push	{r4, r5, r6, lr}
 800a01e:	460e      	mov	r6, r1
 800a020:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a024:	2900      	cmp	r1, #0
 800a026:	b096      	sub	sp, #88	; 0x58
 800a028:	4614      	mov	r4, r2
 800a02a:	461d      	mov	r5, r3
 800a02c:	da08      	bge.n	800a040 <__swhatbuf_r+0x24>
 800a02e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800a032:	2200      	movs	r2, #0
 800a034:	602a      	str	r2, [r5, #0]
 800a036:	061a      	lsls	r2, r3, #24
 800a038:	d410      	bmi.n	800a05c <__swhatbuf_r+0x40>
 800a03a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a03e:	e00e      	b.n	800a05e <__swhatbuf_r+0x42>
 800a040:	466a      	mov	r2, sp
 800a042:	f000 f96f 	bl	800a324 <_fstat_r>
 800a046:	2800      	cmp	r0, #0
 800a048:	dbf1      	blt.n	800a02e <__swhatbuf_r+0x12>
 800a04a:	9a01      	ldr	r2, [sp, #4]
 800a04c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a050:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a054:	425a      	negs	r2, r3
 800a056:	415a      	adcs	r2, r3
 800a058:	602a      	str	r2, [r5, #0]
 800a05a:	e7ee      	b.n	800a03a <__swhatbuf_r+0x1e>
 800a05c:	2340      	movs	r3, #64	; 0x40
 800a05e:	2000      	movs	r0, #0
 800a060:	6023      	str	r3, [r4, #0]
 800a062:	b016      	add	sp, #88	; 0x58
 800a064:	bd70      	pop	{r4, r5, r6, pc}
	...

0800a068 <malloc>:
 800a068:	4b02      	ldr	r3, [pc, #8]	; (800a074 <malloc+0xc>)
 800a06a:	4601      	mov	r1, r0
 800a06c:	6818      	ldr	r0, [r3, #0]
 800a06e:	f000 b86f 	b.w	800a150 <_malloc_r>
 800a072:	bf00      	nop
 800a074:	20000104 	.word	0x20000104

0800a078 <_free_r>:
 800a078:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a07a:	2900      	cmp	r1, #0
 800a07c:	d044      	beq.n	800a108 <_free_r+0x90>
 800a07e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a082:	9001      	str	r0, [sp, #4]
 800a084:	2b00      	cmp	r3, #0
 800a086:	f1a1 0404 	sub.w	r4, r1, #4
 800a08a:	bfb8      	it	lt
 800a08c:	18e4      	addlt	r4, r4, r3
 800a08e:	f000 f96d 	bl	800a36c <__malloc_lock>
 800a092:	4a1e      	ldr	r2, [pc, #120]	; (800a10c <_free_r+0x94>)
 800a094:	9801      	ldr	r0, [sp, #4]
 800a096:	6813      	ldr	r3, [r2, #0]
 800a098:	b933      	cbnz	r3, 800a0a8 <_free_r+0x30>
 800a09a:	6063      	str	r3, [r4, #4]
 800a09c:	6014      	str	r4, [r2, #0]
 800a09e:	b003      	add	sp, #12
 800a0a0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a0a4:	f000 b968 	b.w	800a378 <__malloc_unlock>
 800a0a8:	42a3      	cmp	r3, r4
 800a0aa:	d908      	bls.n	800a0be <_free_r+0x46>
 800a0ac:	6825      	ldr	r5, [r4, #0]
 800a0ae:	1961      	adds	r1, r4, r5
 800a0b0:	428b      	cmp	r3, r1
 800a0b2:	bf01      	itttt	eq
 800a0b4:	6819      	ldreq	r1, [r3, #0]
 800a0b6:	685b      	ldreq	r3, [r3, #4]
 800a0b8:	1949      	addeq	r1, r1, r5
 800a0ba:	6021      	streq	r1, [r4, #0]
 800a0bc:	e7ed      	b.n	800a09a <_free_r+0x22>
 800a0be:	461a      	mov	r2, r3
 800a0c0:	685b      	ldr	r3, [r3, #4]
 800a0c2:	b10b      	cbz	r3, 800a0c8 <_free_r+0x50>
 800a0c4:	42a3      	cmp	r3, r4
 800a0c6:	d9fa      	bls.n	800a0be <_free_r+0x46>
 800a0c8:	6811      	ldr	r1, [r2, #0]
 800a0ca:	1855      	adds	r5, r2, r1
 800a0cc:	42a5      	cmp	r5, r4
 800a0ce:	d10b      	bne.n	800a0e8 <_free_r+0x70>
 800a0d0:	6824      	ldr	r4, [r4, #0]
 800a0d2:	4421      	add	r1, r4
 800a0d4:	1854      	adds	r4, r2, r1
 800a0d6:	42a3      	cmp	r3, r4
 800a0d8:	6011      	str	r1, [r2, #0]
 800a0da:	d1e0      	bne.n	800a09e <_free_r+0x26>
 800a0dc:	681c      	ldr	r4, [r3, #0]
 800a0de:	685b      	ldr	r3, [r3, #4]
 800a0e0:	6053      	str	r3, [r2, #4]
 800a0e2:	4421      	add	r1, r4
 800a0e4:	6011      	str	r1, [r2, #0]
 800a0e6:	e7da      	b.n	800a09e <_free_r+0x26>
 800a0e8:	d902      	bls.n	800a0f0 <_free_r+0x78>
 800a0ea:	230c      	movs	r3, #12
 800a0ec:	6003      	str	r3, [r0, #0]
 800a0ee:	e7d6      	b.n	800a09e <_free_r+0x26>
 800a0f0:	6825      	ldr	r5, [r4, #0]
 800a0f2:	1961      	adds	r1, r4, r5
 800a0f4:	428b      	cmp	r3, r1
 800a0f6:	bf04      	itt	eq
 800a0f8:	6819      	ldreq	r1, [r3, #0]
 800a0fa:	685b      	ldreq	r3, [r3, #4]
 800a0fc:	6063      	str	r3, [r4, #4]
 800a0fe:	bf04      	itt	eq
 800a100:	1949      	addeq	r1, r1, r5
 800a102:	6021      	streq	r1, [r4, #0]
 800a104:	6054      	str	r4, [r2, #4]
 800a106:	e7ca      	b.n	800a09e <_free_r+0x26>
 800a108:	b003      	add	sp, #12
 800a10a:	bd30      	pop	{r4, r5, pc}
 800a10c:	200020b4 	.word	0x200020b4

0800a110 <sbrk_aligned>:
 800a110:	b570      	push	{r4, r5, r6, lr}
 800a112:	4e0e      	ldr	r6, [pc, #56]	; (800a14c <sbrk_aligned+0x3c>)
 800a114:	460c      	mov	r4, r1
 800a116:	6831      	ldr	r1, [r6, #0]
 800a118:	4605      	mov	r5, r0
 800a11a:	b911      	cbnz	r1, 800a122 <sbrk_aligned+0x12>
 800a11c:	f000 f88c 	bl	800a238 <_sbrk_r>
 800a120:	6030      	str	r0, [r6, #0]
 800a122:	4621      	mov	r1, r4
 800a124:	4628      	mov	r0, r5
 800a126:	f000 f887 	bl	800a238 <_sbrk_r>
 800a12a:	1c43      	adds	r3, r0, #1
 800a12c:	d00a      	beq.n	800a144 <sbrk_aligned+0x34>
 800a12e:	1cc4      	adds	r4, r0, #3
 800a130:	f024 0403 	bic.w	r4, r4, #3
 800a134:	42a0      	cmp	r0, r4
 800a136:	d007      	beq.n	800a148 <sbrk_aligned+0x38>
 800a138:	1a21      	subs	r1, r4, r0
 800a13a:	4628      	mov	r0, r5
 800a13c:	f000 f87c 	bl	800a238 <_sbrk_r>
 800a140:	3001      	adds	r0, #1
 800a142:	d101      	bne.n	800a148 <sbrk_aligned+0x38>
 800a144:	f04f 34ff 	mov.w	r4, #4294967295
 800a148:	4620      	mov	r0, r4
 800a14a:	bd70      	pop	{r4, r5, r6, pc}
 800a14c:	200020b8 	.word	0x200020b8

0800a150 <_malloc_r>:
 800a150:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a154:	1ccd      	adds	r5, r1, #3
 800a156:	f025 0503 	bic.w	r5, r5, #3
 800a15a:	3508      	adds	r5, #8
 800a15c:	2d0c      	cmp	r5, #12
 800a15e:	bf38      	it	cc
 800a160:	250c      	movcc	r5, #12
 800a162:	2d00      	cmp	r5, #0
 800a164:	4607      	mov	r7, r0
 800a166:	db01      	blt.n	800a16c <_malloc_r+0x1c>
 800a168:	42a9      	cmp	r1, r5
 800a16a:	d905      	bls.n	800a178 <_malloc_r+0x28>
 800a16c:	230c      	movs	r3, #12
 800a16e:	603b      	str	r3, [r7, #0]
 800a170:	2600      	movs	r6, #0
 800a172:	4630      	mov	r0, r6
 800a174:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a178:	4e2e      	ldr	r6, [pc, #184]	; (800a234 <_malloc_r+0xe4>)
 800a17a:	f000 f8f7 	bl	800a36c <__malloc_lock>
 800a17e:	6833      	ldr	r3, [r6, #0]
 800a180:	461c      	mov	r4, r3
 800a182:	bb34      	cbnz	r4, 800a1d2 <_malloc_r+0x82>
 800a184:	4629      	mov	r1, r5
 800a186:	4638      	mov	r0, r7
 800a188:	f7ff ffc2 	bl	800a110 <sbrk_aligned>
 800a18c:	1c43      	adds	r3, r0, #1
 800a18e:	4604      	mov	r4, r0
 800a190:	d14d      	bne.n	800a22e <_malloc_r+0xde>
 800a192:	6834      	ldr	r4, [r6, #0]
 800a194:	4626      	mov	r6, r4
 800a196:	2e00      	cmp	r6, #0
 800a198:	d140      	bne.n	800a21c <_malloc_r+0xcc>
 800a19a:	6823      	ldr	r3, [r4, #0]
 800a19c:	4631      	mov	r1, r6
 800a19e:	4638      	mov	r0, r7
 800a1a0:	eb04 0803 	add.w	r8, r4, r3
 800a1a4:	f000 f848 	bl	800a238 <_sbrk_r>
 800a1a8:	4580      	cmp	r8, r0
 800a1aa:	d13a      	bne.n	800a222 <_malloc_r+0xd2>
 800a1ac:	6821      	ldr	r1, [r4, #0]
 800a1ae:	3503      	adds	r5, #3
 800a1b0:	1a6d      	subs	r5, r5, r1
 800a1b2:	f025 0503 	bic.w	r5, r5, #3
 800a1b6:	3508      	adds	r5, #8
 800a1b8:	2d0c      	cmp	r5, #12
 800a1ba:	bf38      	it	cc
 800a1bc:	250c      	movcc	r5, #12
 800a1be:	4629      	mov	r1, r5
 800a1c0:	4638      	mov	r0, r7
 800a1c2:	f7ff ffa5 	bl	800a110 <sbrk_aligned>
 800a1c6:	3001      	adds	r0, #1
 800a1c8:	d02b      	beq.n	800a222 <_malloc_r+0xd2>
 800a1ca:	6823      	ldr	r3, [r4, #0]
 800a1cc:	442b      	add	r3, r5
 800a1ce:	6023      	str	r3, [r4, #0]
 800a1d0:	e00e      	b.n	800a1f0 <_malloc_r+0xa0>
 800a1d2:	6822      	ldr	r2, [r4, #0]
 800a1d4:	1b52      	subs	r2, r2, r5
 800a1d6:	d41e      	bmi.n	800a216 <_malloc_r+0xc6>
 800a1d8:	2a0b      	cmp	r2, #11
 800a1da:	d916      	bls.n	800a20a <_malloc_r+0xba>
 800a1dc:	1961      	adds	r1, r4, r5
 800a1de:	42a3      	cmp	r3, r4
 800a1e0:	6025      	str	r5, [r4, #0]
 800a1e2:	bf18      	it	ne
 800a1e4:	6059      	strne	r1, [r3, #4]
 800a1e6:	6863      	ldr	r3, [r4, #4]
 800a1e8:	bf08      	it	eq
 800a1ea:	6031      	streq	r1, [r6, #0]
 800a1ec:	5162      	str	r2, [r4, r5]
 800a1ee:	604b      	str	r3, [r1, #4]
 800a1f0:	4638      	mov	r0, r7
 800a1f2:	f104 060b 	add.w	r6, r4, #11
 800a1f6:	f000 f8bf 	bl	800a378 <__malloc_unlock>
 800a1fa:	f026 0607 	bic.w	r6, r6, #7
 800a1fe:	1d23      	adds	r3, r4, #4
 800a200:	1af2      	subs	r2, r6, r3
 800a202:	d0b6      	beq.n	800a172 <_malloc_r+0x22>
 800a204:	1b9b      	subs	r3, r3, r6
 800a206:	50a3      	str	r3, [r4, r2]
 800a208:	e7b3      	b.n	800a172 <_malloc_r+0x22>
 800a20a:	6862      	ldr	r2, [r4, #4]
 800a20c:	42a3      	cmp	r3, r4
 800a20e:	bf0c      	ite	eq
 800a210:	6032      	streq	r2, [r6, #0]
 800a212:	605a      	strne	r2, [r3, #4]
 800a214:	e7ec      	b.n	800a1f0 <_malloc_r+0xa0>
 800a216:	4623      	mov	r3, r4
 800a218:	6864      	ldr	r4, [r4, #4]
 800a21a:	e7b2      	b.n	800a182 <_malloc_r+0x32>
 800a21c:	4634      	mov	r4, r6
 800a21e:	6876      	ldr	r6, [r6, #4]
 800a220:	e7b9      	b.n	800a196 <_malloc_r+0x46>
 800a222:	230c      	movs	r3, #12
 800a224:	603b      	str	r3, [r7, #0]
 800a226:	4638      	mov	r0, r7
 800a228:	f000 f8a6 	bl	800a378 <__malloc_unlock>
 800a22c:	e7a1      	b.n	800a172 <_malloc_r+0x22>
 800a22e:	6025      	str	r5, [r4, #0]
 800a230:	e7de      	b.n	800a1f0 <_malloc_r+0xa0>
 800a232:	bf00      	nop
 800a234:	200020b4 	.word	0x200020b4

0800a238 <_sbrk_r>:
 800a238:	b538      	push	{r3, r4, r5, lr}
 800a23a:	4d06      	ldr	r5, [pc, #24]	; (800a254 <_sbrk_r+0x1c>)
 800a23c:	2300      	movs	r3, #0
 800a23e:	4604      	mov	r4, r0
 800a240:	4608      	mov	r0, r1
 800a242:	602b      	str	r3, [r5, #0]
 800a244:	f7f7 f96c 	bl	8001520 <_sbrk>
 800a248:	1c43      	adds	r3, r0, #1
 800a24a:	d102      	bne.n	800a252 <_sbrk_r+0x1a>
 800a24c:	682b      	ldr	r3, [r5, #0]
 800a24e:	b103      	cbz	r3, 800a252 <_sbrk_r+0x1a>
 800a250:	6023      	str	r3, [r4, #0]
 800a252:	bd38      	pop	{r3, r4, r5, pc}
 800a254:	200020bc 	.word	0x200020bc

0800a258 <__sread>:
 800a258:	b510      	push	{r4, lr}
 800a25a:	460c      	mov	r4, r1
 800a25c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a260:	f000 f890 	bl	800a384 <_read_r>
 800a264:	2800      	cmp	r0, #0
 800a266:	bfab      	itete	ge
 800a268:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a26a:	89a3      	ldrhlt	r3, [r4, #12]
 800a26c:	181b      	addge	r3, r3, r0
 800a26e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a272:	bfac      	ite	ge
 800a274:	6563      	strge	r3, [r4, #84]	; 0x54
 800a276:	81a3      	strhlt	r3, [r4, #12]
 800a278:	bd10      	pop	{r4, pc}

0800a27a <__swrite>:
 800a27a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a27e:	461f      	mov	r7, r3
 800a280:	898b      	ldrh	r3, [r1, #12]
 800a282:	05db      	lsls	r3, r3, #23
 800a284:	4605      	mov	r5, r0
 800a286:	460c      	mov	r4, r1
 800a288:	4616      	mov	r6, r2
 800a28a:	d505      	bpl.n	800a298 <__swrite+0x1e>
 800a28c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a290:	2302      	movs	r3, #2
 800a292:	2200      	movs	r2, #0
 800a294:	f000 f858 	bl	800a348 <_lseek_r>
 800a298:	89a3      	ldrh	r3, [r4, #12]
 800a29a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a29e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a2a2:	81a3      	strh	r3, [r4, #12]
 800a2a4:	4632      	mov	r2, r6
 800a2a6:	463b      	mov	r3, r7
 800a2a8:	4628      	mov	r0, r5
 800a2aa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a2ae:	f000 b817 	b.w	800a2e0 <_write_r>

0800a2b2 <__sseek>:
 800a2b2:	b510      	push	{r4, lr}
 800a2b4:	460c      	mov	r4, r1
 800a2b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a2ba:	f000 f845 	bl	800a348 <_lseek_r>
 800a2be:	1c43      	adds	r3, r0, #1
 800a2c0:	89a3      	ldrh	r3, [r4, #12]
 800a2c2:	bf15      	itete	ne
 800a2c4:	6560      	strne	r0, [r4, #84]	; 0x54
 800a2c6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a2ca:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a2ce:	81a3      	strheq	r3, [r4, #12]
 800a2d0:	bf18      	it	ne
 800a2d2:	81a3      	strhne	r3, [r4, #12]
 800a2d4:	bd10      	pop	{r4, pc}

0800a2d6 <__sclose>:
 800a2d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a2da:	f000 b813 	b.w	800a304 <_close_r>
	...

0800a2e0 <_write_r>:
 800a2e0:	b538      	push	{r3, r4, r5, lr}
 800a2e2:	4d07      	ldr	r5, [pc, #28]	; (800a300 <_write_r+0x20>)
 800a2e4:	4604      	mov	r4, r0
 800a2e6:	4608      	mov	r0, r1
 800a2e8:	4611      	mov	r1, r2
 800a2ea:	2200      	movs	r2, #0
 800a2ec:	602a      	str	r2, [r5, #0]
 800a2ee:	461a      	mov	r2, r3
 800a2f0:	f7f6 ff3a 	bl	8001168 <_write>
 800a2f4:	1c43      	adds	r3, r0, #1
 800a2f6:	d102      	bne.n	800a2fe <_write_r+0x1e>
 800a2f8:	682b      	ldr	r3, [r5, #0]
 800a2fa:	b103      	cbz	r3, 800a2fe <_write_r+0x1e>
 800a2fc:	6023      	str	r3, [r4, #0]
 800a2fe:	bd38      	pop	{r3, r4, r5, pc}
 800a300:	200020bc 	.word	0x200020bc

0800a304 <_close_r>:
 800a304:	b538      	push	{r3, r4, r5, lr}
 800a306:	4d06      	ldr	r5, [pc, #24]	; (800a320 <_close_r+0x1c>)
 800a308:	2300      	movs	r3, #0
 800a30a:	4604      	mov	r4, r0
 800a30c:	4608      	mov	r0, r1
 800a30e:	602b      	str	r3, [r5, #0]
 800a310:	f7f6 ff56 	bl	80011c0 <_close>
 800a314:	1c43      	adds	r3, r0, #1
 800a316:	d102      	bne.n	800a31e <_close_r+0x1a>
 800a318:	682b      	ldr	r3, [r5, #0]
 800a31a:	b103      	cbz	r3, 800a31e <_close_r+0x1a>
 800a31c:	6023      	str	r3, [r4, #0]
 800a31e:	bd38      	pop	{r3, r4, r5, pc}
 800a320:	200020bc 	.word	0x200020bc

0800a324 <_fstat_r>:
 800a324:	b538      	push	{r3, r4, r5, lr}
 800a326:	4d07      	ldr	r5, [pc, #28]	; (800a344 <_fstat_r+0x20>)
 800a328:	2300      	movs	r3, #0
 800a32a:	4604      	mov	r4, r0
 800a32c:	4608      	mov	r0, r1
 800a32e:	4611      	mov	r1, r2
 800a330:	602b      	str	r3, [r5, #0]
 800a332:	f7f6 ff95 	bl	8001260 <_fstat>
 800a336:	1c43      	adds	r3, r0, #1
 800a338:	d102      	bne.n	800a340 <_fstat_r+0x1c>
 800a33a:	682b      	ldr	r3, [r5, #0]
 800a33c:	b103      	cbz	r3, 800a340 <_fstat_r+0x1c>
 800a33e:	6023      	str	r3, [r4, #0]
 800a340:	bd38      	pop	{r3, r4, r5, pc}
 800a342:	bf00      	nop
 800a344:	200020bc 	.word	0x200020bc

0800a348 <_lseek_r>:
 800a348:	b538      	push	{r3, r4, r5, lr}
 800a34a:	4d07      	ldr	r5, [pc, #28]	; (800a368 <_lseek_r+0x20>)
 800a34c:	4604      	mov	r4, r0
 800a34e:	4608      	mov	r0, r1
 800a350:	4611      	mov	r1, r2
 800a352:	2200      	movs	r2, #0
 800a354:	602a      	str	r2, [r5, #0]
 800a356:	461a      	mov	r2, r3
 800a358:	f7f6 ff49 	bl	80011ee <_lseek>
 800a35c:	1c43      	adds	r3, r0, #1
 800a35e:	d102      	bne.n	800a366 <_lseek_r+0x1e>
 800a360:	682b      	ldr	r3, [r5, #0]
 800a362:	b103      	cbz	r3, 800a366 <_lseek_r+0x1e>
 800a364:	6023      	str	r3, [r4, #0]
 800a366:	bd38      	pop	{r3, r4, r5, pc}
 800a368:	200020bc 	.word	0x200020bc

0800a36c <__malloc_lock>:
 800a36c:	4801      	ldr	r0, [pc, #4]	; (800a374 <__malloc_lock+0x8>)
 800a36e:	f7ff be53 	b.w	800a018 <__retarget_lock_acquire_recursive>
 800a372:	bf00      	nop
 800a374:	200020b0 	.word	0x200020b0

0800a378 <__malloc_unlock>:
 800a378:	4801      	ldr	r0, [pc, #4]	; (800a380 <__malloc_unlock+0x8>)
 800a37a:	f7ff be4e 	b.w	800a01a <__retarget_lock_release_recursive>
 800a37e:	bf00      	nop
 800a380:	200020b0 	.word	0x200020b0

0800a384 <_read_r>:
 800a384:	b538      	push	{r3, r4, r5, lr}
 800a386:	4d07      	ldr	r5, [pc, #28]	; (800a3a4 <_read_r+0x20>)
 800a388:	4604      	mov	r4, r0
 800a38a:	4608      	mov	r0, r1
 800a38c:	4611      	mov	r1, r2
 800a38e:	2200      	movs	r2, #0
 800a390:	602a      	str	r2, [r5, #0]
 800a392:	461a      	mov	r2, r3
 800a394:	f7f6 ff3c 	bl	8001210 <_read>
 800a398:	1c43      	adds	r3, r0, #1
 800a39a:	d102      	bne.n	800a3a2 <_read_r+0x1e>
 800a39c:	682b      	ldr	r3, [r5, #0]
 800a39e:	b103      	cbz	r3, 800a3a2 <_read_r+0x1e>
 800a3a0:	6023      	str	r3, [r4, #0]
 800a3a2:	bd38      	pop	{r3, r4, r5, pc}
 800a3a4:	200020bc 	.word	0x200020bc

0800a3a8 <_init>:
 800a3a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a3aa:	bf00      	nop
 800a3ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a3ae:	bc08      	pop	{r3}
 800a3b0:	469e      	mov	lr, r3
 800a3b2:	4770      	bx	lr

0800a3b4 <_fini>:
 800a3b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a3b6:	bf00      	nop
 800a3b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a3ba:	bc08      	pop	{r3}
 800a3bc:	469e      	mov	lr, r3
 800a3be:	4770      	bx	lr
