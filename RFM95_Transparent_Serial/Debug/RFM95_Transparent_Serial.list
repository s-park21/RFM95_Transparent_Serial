
RFM95_Transparent_Serial.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a604  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c4  0800a78c  0800a78c  0001a78c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a850  0800a850  00020170  2**0
                  CONTENTS
  4 .ARM          00000008  0800a850  0800a850  0001a850  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a858  0800a858  00020170  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a858  0800a858  0001a858  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a85c  0800a85c  0001a85c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000170  20000000  0800a860  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020170  2**0
                  CONTENTS
 10 .bss          00001f68  20000170  20000170  00020170  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200020d8  200020d8  00020170  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020170  2**0
                  CONTENTS, READONLY
 13 .debug_info   00017231  00000000  00000000  000201a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000037da  00000000  00000000  000373d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001130  00000000  00000000  0003abb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000fc8  00000000  00000000  0003bce0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022fae  00000000  00000000  0003cca8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00016348  00000000  00000000  0005fc56  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000bfebd  00000000  00000000  00075f9e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00135e5b  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004c70  00000000  00000000  00135eac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000170 	.word	0x20000170
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800a774 	.word	0x0800a774

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000174 	.word	0x20000174
 80001c4:	0800a774 	.word	0x0800a774

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b974 	b.w	80004c8 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468e      	mov	lr, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14d      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000206:	428a      	cmp	r2, r1
 8000208:	4694      	mov	ip, r2
 800020a:	d969      	bls.n	80002e0 <__udivmoddi4+0xe8>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b152      	cbz	r2, 8000228 <__udivmoddi4+0x30>
 8000212:	fa01 f302 	lsl.w	r3, r1, r2
 8000216:	f1c2 0120 	rsb	r1, r2, #32
 800021a:	fa20 f101 	lsr.w	r1, r0, r1
 800021e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000222:	ea41 0e03 	orr.w	lr, r1, r3
 8000226:	4094      	lsls	r4, r2
 8000228:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800022c:	0c21      	lsrs	r1, r4, #16
 800022e:	fbbe f6f8 	udiv	r6, lr, r8
 8000232:	fa1f f78c 	uxth.w	r7, ip
 8000236:	fb08 e316 	mls	r3, r8, r6, lr
 800023a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800023e:	fb06 f107 	mul.w	r1, r6, r7
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f106 30ff 	add.w	r0, r6, #4294967295
 800024e:	f080 811f 	bcs.w	8000490 <__udivmoddi4+0x298>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 811c 	bls.w	8000490 <__udivmoddi4+0x298>
 8000258:	3e02      	subs	r6, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0f8 	udiv	r0, r3, r8
 8000264:	fb08 3310 	mls	r3, r8, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 f707 	mul.w	r7, r0, r7
 8000270:	42a7      	cmp	r7, r4
 8000272:	d90a      	bls.n	800028a <__udivmoddi4+0x92>
 8000274:	eb1c 0404 	adds.w	r4, ip, r4
 8000278:	f100 33ff 	add.w	r3, r0, #4294967295
 800027c:	f080 810a 	bcs.w	8000494 <__udivmoddi4+0x29c>
 8000280:	42a7      	cmp	r7, r4
 8000282:	f240 8107 	bls.w	8000494 <__udivmoddi4+0x29c>
 8000286:	4464      	add	r4, ip
 8000288:	3802      	subs	r0, #2
 800028a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800028e:	1be4      	subs	r4, r4, r7
 8000290:	2600      	movs	r6, #0
 8000292:	b11d      	cbz	r5, 800029c <__udivmoddi4+0xa4>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c5 4300 	strd	r4, r3, [r5]
 800029c:	4631      	mov	r1, r6
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d909      	bls.n	80002ba <__udivmoddi4+0xc2>
 80002a6:	2d00      	cmp	r5, #0
 80002a8:	f000 80ef 	beq.w	800048a <__udivmoddi4+0x292>
 80002ac:	2600      	movs	r6, #0
 80002ae:	e9c5 0100 	strd	r0, r1, [r5]
 80002b2:	4630      	mov	r0, r6
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	fab3 f683 	clz	r6, r3
 80002be:	2e00      	cmp	r6, #0
 80002c0:	d14a      	bne.n	8000358 <__udivmoddi4+0x160>
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xd4>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 80f9 	bhi.w	80004be <__udivmoddi4+0x2c6>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb61 0303 	sbc.w	r3, r1, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	469e      	mov	lr, r3
 80002d6:	2d00      	cmp	r5, #0
 80002d8:	d0e0      	beq.n	800029c <__udivmoddi4+0xa4>
 80002da:	e9c5 4e00 	strd	r4, lr, [r5]
 80002de:	e7dd      	b.n	800029c <__udivmoddi4+0xa4>
 80002e0:	b902      	cbnz	r2, 80002e4 <__udivmoddi4+0xec>
 80002e2:	deff      	udf	#255	; 0xff
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	2a00      	cmp	r2, #0
 80002ea:	f040 8092 	bne.w	8000412 <__udivmoddi4+0x21a>
 80002ee:	eba1 010c 	sub.w	r1, r1, ip
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2601      	movs	r6, #1
 80002fc:	0c20      	lsrs	r0, r4, #16
 80002fe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000302:	fb07 1113 	mls	r1, r7, r3, r1
 8000306:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800030a:	fb0e f003 	mul.w	r0, lr, r3
 800030e:	4288      	cmp	r0, r1
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x12c>
 8000312:	eb1c 0101 	adds.w	r1, ip, r1
 8000316:	f103 38ff 	add.w	r8, r3, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x12a>
 800031c:	4288      	cmp	r0, r1
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2c0>
 8000322:	4643      	mov	r3, r8
 8000324:	1a09      	subs	r1, r1, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb1 f0f7 	udiv	r0, r1, r7
 800032c:	fb07 1110 	mls	r1, r7, r0, r1
 8000330:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x156>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 31ff 	add.w	r1, r0, #4294967295
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x154>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 800034c:	4608      	mov	r0, r1
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000356:	e79c      	b.n	8000292 <__udivmoddi4+0x9a>
 8000358:	f1c6 0720 	rsb	r7, r6, #32
 800035c:	40b3      	lsls	r3, r6
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa20 f407 	lsr.w	r4, r0, r7
 800036a:	fa01 f306 	lsl.w	r3, r1, r6
 800036e:	431c      	orrs	r4, r3
 8000370:	40f9      	lsrs	r1, r7
 8000372:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000376:	fa00 f306 	lsl.w	r3, r0, r6
 800037a:	fbb1 f8f9 	udiv	r8, r1, r9
 800037e:	0c20      	lsrs	r0, r4, #16
 8000380:	fa1f fe8c 	uxth.w	lr, ip
 8000384:	fb09 1118 	mls	r1, r9, r8, r1
 8000388:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800038c:	fb08 f00e 	mul.w	r0, r8, lr
 8000390:	4288      	cmp	r0, r1
 8000392:	fa02 f206 	lsl.w	r2, r2, r6
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b8>
 8000398:	eb1c 0101 	adds.w	r1, ip, r1
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2bc>
 80003a4:	4288      	cmp	r0, r1
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2bc>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4461      	add	r1, ip
 80003b0:	1a09      	subs	r1, r1, r0
 80003b2:	b2a4      	uxth	r4, r4
 80003b4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003b8:	fb09 1110 	mls	r1, r9, r0, r1
 80003bc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c4:	458e      	cmp	lr, r1
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1e2>
 80003c8:	eb1c 0101 	adds.w	r1, ip, r1
 80003cc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2b4>
 80003d2:	458e      	cmp	lr, r1
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2b4>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4461      	add	r1, ip
 80003da:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003de:	fba0 9402 	umull	r9, r4, r0, r2
 80003e2:	eba1 010e 	sub.w	r1, r1, lr
 80003e6:	42a1      	cmp	r1, r4
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46a6      	mov	lr, r4
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x2a4>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x2a0>
 80003f0:	b15d      	cbz	r5, 800040a <__udivmoddi4+0x212>
 80003f2:	ebb3 0208 	subs.w	r2, r3, r8
 80003f6:	eb61 010e 	sbc.w	r1, r1, lr
 80003fa:	fa01 f707 	lsl.w	r7, r1, r7
 80003fe:	fa22 f306 	lsr.w	r3, r2, r6
 8000402:	40f1      	lsrs	r1, r6
 8000404:	431f      	orrs	r7, r3
 8000406:	e9c5 7100 	strd	r7, r1, [r5]
 800040a:	2600      	movs	r6, #0
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	f1c2 0320 	rsb	r3, r2, #32
 8000416:	40d8      	lsrs	r0, r3
 8000418:	fa0c fc02 	lsl.w	ip, ip, r2
 800041c:	fa21 f303 	lsr.w	r3, r1, r3
 8000420:	4091      	lsls	r1, r2
 8000422:	4301      	orrs	r1, r0
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000430:	fb07 3610 	mls	r6, r7, r0, r3
 8000434:	0c0b      	lsrs	r3, r1, #16
 8000436:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800043a:	fb00 f60e 	mul.w	r6, r0, lr
 800043e:	429e      	cmp	r6, r3
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x260>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 38ff 	add.w	r8, r0, #4294967295
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b8>
 8000450:	429e      	cmp	r6, r3
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b8>
 8000454:	3802      	subs	r0, #2
 8000456:	4463      	add	r3, ip
 8000458:	1b9b      	subs	r3, r3, r6
 800045a:	b289      	uxth	r1, r1
 800045c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000460:	fb07 3316 	mls	r3, r7, r6, r3
 8000464:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000468:	fb06 f30e 	mul.w	r3, r6, lr
 800046c:	428b      	cmp	r3, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x28a>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f106 38ff 	add.w	r8, r6, #4294967295
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 800047a:	428b      	cmp	r3, r1
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800047e:	3e02      	subs	r6, #2
 8000480:	4461      	add	r1, ip
 8000482:	1ac9      	subs	r1, r1, r3
 8000484:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0x104>
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e705      	b.n	800029c <__udivmoddi4+0xa4>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e3      	b.n	800025c <__udivmoddi4+0x64>
 8000494:	4618      	mov	r0, r3
 8000496:	e6f8      	b.n	800028a <__udivmoddi4+0x92>
 8000498:	454b      	cmp	r3, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f8>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f8>
 80004a8:	4646      	mov	r6, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x28a>
 80004ac:	4620      	mov	r0, r4
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1e2>
 80004b0:	4640      	mov	r0, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x260>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b8>
 80004b8:	3b02      	subs	r3, #2
 80004ba:	4461      	add	r1, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x12c>
 80004be:	4630      	mov	r0, r6
 80004c0:	e709      	b.n	80002d6 <__udivmoddi4+0xde>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x156>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <newLoRa>:
										  |    spreading factor = 7				       |
											|           bandwidth = 125 KHz        |
											| 		    coding rate = 4/5            |
											----------------------------------------
\* ----------------------------------------------------------------------------- */
LoRa newLoRa(){
 80004cc:	b4b0      	push	{r4, r5, r7}
 80004ce:	b08f      	sub	sp, #60	; 0x3c
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	6078      	str	r0, [r7, #4]
	LoRa new_LoRa;

	new_LoRa.frequency             = 433       ;
 80004d4:	f240 13b1 	movw	r3, #433	; 0x1b1
 80004d8:	62fb      	str	r3, [r7, #44]	; 0x2c
	new_LoRa.spredingFactor        = SF_7      ;
 80004da:	2307      	movs	r3, #7
 80004dc:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
	new_LoRa.bandWidth			   = BW_125KHz ;
 80004e0:	2307      	movs	r3, #7
 80004e2:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
	new_LoRa.crcRate               = CR_4_5    ;
 80004e6:	2301      	movs	r3, #1
 80004e8:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	new_LoRa.power				   = POWER_20db;
 80004ec:	23ff      	movs	r3, #255	; 0xff
 80004ee:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	new_LoRa.overCurrentProtection = 100       ;
 80004f2:	2364      	movs	r3, #100	; 0x64
 80004f4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	new_LoRa.preamble			   = 8         ;
 80004f8:	2308      	movs	r3, #8
 80004fa:	86bb      	strh	r3, [r7, #52]	; 0x34

	return new_LoRa;
 80004fc:	687b      	ldr	r3, [r7, #4]
 80004fe:	461d      	mov	r5, r3
 8000500:	f107 040c 	add.w	r4, r7, #12
 8000504:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000506:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000508:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800050a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800050c:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8000510:	e885 0007 	stmia.w	r5, {r0, r1, r2}
}
 8000514:	6878      	ldr	r0, [r7, #4]
 8000516:	373c      	adds	r7, #60	; 0x3c
 8000518:	46bd      	mov	sp, r7
 800051a:	bcb0      	pop	{r4, r5, r7}
 800051c:	4770      	bx	lr

0800051e <LoRa_reset>:
		description : reset module
		arguments   :
			LoRa* LoRa --> LoRa object handler
		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_reset(LoRa* _LoRa){
 800051e:	b580      	push	{r7, lr}
 8000520:	b082      	sub	sp, #8
 8000522:	af00      	add	r7, sp, #0
 8000524:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(_LoRa->reset_port, _LoRa->reset_pin, GPIO_PIN_RESET);
 8000526:	687b      	ldr	r3, [r7, #4]
 8000528:	6898      	ldr	r0, [r3, #8]
 800052a:	687b      	ldr	r3, [r7, #4]
 800052c:	899b      	ldrh	r3, [r3, #12]
 800052e:	2200      	movs	r2, #0
 8000530:	4619      	mov	r1, r3
 8000532:	f001 fd5d 	bl	8001ff0 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000536:	2001      	movs	r0, #1
 8000538:	f001 f9f6 	bl	8001928 <HAL_Delay>
	HAL_GPIO_WritePin(_LoRa->reset_port, _LoRa->reset_pin, GPIO_PIN_SET);
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	6898      	ldr	r0, [r3, #8]
 8000540:	687b      	ldr	r3, [r7, #4]
 8000542:	899b      	ldrh	r3, [r3, #12]
 8000544:	2201      	movs	r2, #1
 8000546:	4619      	mov	r1, r3
 8000548:	f001 fd52 	bl	8001ff0 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 800054c:	2064      	movs	r0, #100	; 0x64
 800054e:	f001 f9eb 	bl	8001928 <HAL_Delay>
}
 8000552:	bf00      	nop
 8000554:	3708      	adds	r7, #8
 8000556:	46bd      	mov	sp, r7
 8000558:	bd80      	pop	{r7, pc}

0800055a <LoRa_gotoMode>:
		arguments   :
			LoRa* LoRa    --> LoRa object handler
			mode	        --> select from defined modes
		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_gotoMode(LoRa* _LoRa, int mode){
 800055a:	b580      	push	{r7, lr}
 800055c:	b084      	sub	sp, #16
 800055e:	af00      	add	r7, sp, #0
 8000560:	6078      	str	r0, [r7, #4]
 8000562:	6039      	str	r1, [r7, #0]
	uint8_t    read;
	uint8_t    data;

	read = LoRa_read(_LoRa, RegOpMode);
 8000564:	2101      	movs	r1, #1
 8000566:	6878      	ldr	r0, [r7, #4]
 8000568:	f000 f99f 	bl	80008aa <LoRa_read>
 800056c:	4603      	mov	r3, r0
 800056e:	73bb      	strb	r3, [r7, #14]
	data = read;
 8000570:	7bbb      	ldrb	r3, [r7, #14]
 8000572:	73fb      	strb	r3, [r7, #15]

	if(mode == SLEEP_MODE){
 8000574:	683b      	ldr	r3, [r7, #0]
 8000576:	2b00      	cmp	r3, #0
 8000578:	d107      	bne.n	800058a <LoRa_gotoMode+0x30>
		data = (read & 0xF8) | 0x00;
 800057a:	7bbb      	ldrb	r3, [r7, #14]
 800057c:	f023 0307 	bic.w	r3, r3, #7
 8000580:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = SLEEP_MODE;
 8000582:	687b      	ldr	r3, [r7, #4]
 8000584:	2200      	movs	r2, #0
 8000586:	61da      	str	r2, [r3, #28]
 8000588:	e03e      	b.n	8000608 <LoRa_gotoMode+0xae>
	}else if (mode == STNBY_MODE){
 800058a:	683b      	ldr	r3, [r7, #0]
 800058c:	2b01      	cmp	r3, #1
 800058e:	d10c      	bne.n	80005aa <LoRa_gotoMode+0x50>
		data = (read & 0xF8) | 0x01;
 8000590:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000594:	f023 0307 	bic.w	r3, r3, #7
 8000598:	b25b      	sxtb	r3, r3
 800059a:	f043 0301 	orr.w	r3, r3, #1
 800059e:	b25b      	sxtb	r3, r3
 80005a0:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = STNBY_MODE;
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	2201      	movs	r2, #1
 80005a6:	61da      	str	r2, [r3, #28]
 80005a8:	e02e      	b.n	8000608 <LoRa_gotoMode+0xae>
	}else if (mode == TRANSMIT_MODE){
 80005aa:	683b      	ldr	r3, [r7, #0]
 80005ac:	2b03      	cmp	r3, #3
 80005ae:	d10c      	bne.n	80005ca <LoRa_gotoMode+0x70>
		data = (read & 0xF8) | 0x03;
 80005b0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80005b4:	f023 0307 	bic.w	r3, r3, #7
 80005b8:	b25b      	sxtb	r3, r3
 80005ba:	f043 0303 	orr.w	r3, r3, #3
 80005be:	b25b      	sxtb	r3, r3
 80005c0:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = TRANSMIT_MODE;
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	2203      	movs	r2, #3
 80005c6:	61da      	str	r2, [r3, #28]
 80005c8:	e01e      	b.n	8000608 <LoRa_gotoMode+0xae>
	}else if (mode == RXCONTIN_MODE){
 80005ca:	683b      	ldr	r3, [r7, #0]
 80005cc:	2b05      	cmp	r3, #5
 80005ce:	d10c      	bne.n	80005ea <LoRa_gotoMode+0x90>
		data = (read & 0xF8) | 0x05;
 80005d0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80005d4:	f023 0307 	bic.w	r3, r3, #7
 80005d8:	b25b      	sxtb	r3, r3
 80005da:	f043 0305 	orr.w	r3, r3, #5
 80005de:	b25b      	sxtb	r3, r3
 80005e0:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = RXCONTIN_MODE;
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	2205      	movs	r2, #5
 80005e6:	61da      	str	r2, [r3, #28]
 80005e8:	e00e      	b.n	8000608 <LoRa_gotoMode+0xae>
	}else if (mode == RXSINGLE_MODE){
 80005ea:	683b      	ldr	r3, [r7, #0]
 80005ec:	2b06      	cmp	r3, #6
 80005ee:	d10b      	bne.n	8000608 <LoRa_gotoMode+0xae>
		data = (read & 0xF8) | 0x06;
 80005f0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80005f4:	f023 0307 	bic.w	r3, r3, #7
 80005f8:	b25b      	sxtb	r3, r3
 80005fa:	f043 0306 	orr.w	r3, r3, #6
 80005fe:	b25b      	sxtb	r3, r3
 8000600:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = RXSINGLE_MODE;
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	2206      	movs	r2, #6
 8000606:	61da      	str	r2, [r3, #28]
	}

	LoRa_write(_LoRa, RegOpMode, data);
 8000608:	7bfb      	ldrb	r3, [r7, #15]
 800060a:	461a      	mov	r2, r3
 800060c:	2101      	movs	r1, #1
 800060e:	6878      	ldr	r0, [r7, #4]
 8000610:	f000 f965 	bl	80008de <LoRa_write>
	//HAL_Delay(10);
}
 8000614:	bf00      	nop
 8000616:	3710      	adds	r7, #16
 8000618:	46bd      	mov	sp, r7
 800061a:	bd80      	pop	{r7, pc}

0800061c <LoRa_readReg>:
														you want to send
			uint8_t* output		--> pointer to the beginning of output array
			uint16_t w_length	--> detemines number of bytes that you want to read
		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_readReg(LoRa* _LoRa, uint8_t* address, uint16_t r_length, uint8_t* output, uint16_t w_length){
 800061c:	b580      	push	{r7, lr}
 800061e:	b084      	sub	sp, #16
 8000620:	af00      	add	r7, sp, #0
 8000622:	60f8      	str	r0, [r7, #12]
 8000624:	60b9      	str	r1, [r7, #8]
 8000626:	603b      	str	r3, [r7, #0]
 8000628:	4613      	mov	r3, r2
 800062a:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_RESET);
 800062c:	68fb      	ldr	r3, [r7, #12]
 800062e:	6818      	ldr	r0, [r3, #0]
 8000630:	68fb      	ldr	r3, [r7, #12]
 8000632:	889b      	ldrh	r3, [r3, #4]
 8000634:	2200      	movs	r2, #0
 8000636:	4619      	mov	r1, r3
 8000638:	f001 fcda 	bl	8001ff0 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(_LoRa->hSPIx, address, r_length, TRANSMIT_TIMEOUT);
 800063c:	68fb      	ldr	r3, [r7, #12]
 800063e:	6998      	ldr	r0, [r3, #24]
 8000640:	88fa      	ldrh	r2, [r7, #6]
 8000642:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000646:	68b9      	ldr	r1, [r7, #8]
 8000648:	f003 fc63 	bl	8003f12 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 800064c:	bf00      	nop
 800064e:	68fb      	ldr	r3, [r7, #12]
 8000650:	699b      	ldr	r3, [r3, #24]
 8000652:	4618      	mov	r0, r3
 8000654:	f004 f84c 	bl	80046f0 <HAL_SPI_GetState>
 8000658:	4603      	mov	r3, r0
 800065a:	2b01      	cmp	r3, #1
 800065c:	d1f7      	bne.n	800064e <LoRa_readReg+0x32>
		;
	HAL_SPI_Receive(_LoRa->hSPIx, output, w_length, RECEIVE_TIMEOUT);
 800065e:	68fb      	ldr	r3, [r7, #12]
 8000660:	6998      	ldr	r0, [r3, #24]
 8000662:	8b3a      	ldrh	r2, [r7, #24]
 8000664:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000668:	6839      	ldr	r1, [r7, #0]
 800066a:	f003 fd8e 	bl	800418a <HAL_SPI_Receive>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 800066e:	bf00      	nop
 8000670:	68fb      	ldr	r3, [r7, #12]
 8000672:	699b      	ldr	r3, [r3, #24]
 8000674:	4618      	mov	r0, r3
 8000676:	f004 f83b 	bl	80046f0 <HAL_SPI_GetState>
 800067a:	4603      	mov	r3, r0
 800067c:	2b01      	cmp	r3, #1
 800067e:	d1f7      	bne.n	8000670 <LoRa_readReg+0x54>
		;
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_SET);
 8000680:	68fb      	ldr	r3, [r7, #12]
 8000682:	6818      	ldr	r0, [r3, #0]
 8000684:	68fb      	ldr	r3, [r7, #12]
 8000686:	889b      	ldrh	r3, [r3, #4]
 8000688:	2201      	movs	r2, #1
 800068a:	4619      	mov	r1, r3
 800068c:	f001 fcb0 	bl	8001ff0 <HAL_GPIO_WritePin>
}
 8000690:	bf00      	nop
 8000692:	3710      	adds	r7, #16
 8000694:	46bd      	mov	sp, r7
 8000696:	bd80      	pop	{r7, pc}

08000698 <LoRa_writeReg>:
														you want to send
			uint8_t* output		--> pointer to the beginning of values array
			uint16_t w_length	--> detemines number of bytes that you want to send
		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_writeReg(LoRa* _LoRa, uint8_t* address, uint16_t r_length, uint8_t* values, uint16_t w_length){
 8000698:	b580      	push	{r7, lr}
 800069a:	b084      	sub	sp, #16
 800069c:	af00      	add	r7, sp, #0
 800069e:	60f8      	str	r0, [r7, #12]
 80006a0:	60b9      	str	r1, [r7, #8]
 80006a2:	603b      	str	r3, [r7, #0]
 80006a4:	4613      	mov	r3, r2
 80006a6:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_RESET);
 80006a8:	68fb      	ldr	r3, [r7, #12]
 80006aa:	6818      	ldr	r0, [r3, #0]
 80006ac:	68fb      	ldr	r3, [r7, #12]
 80006ae:	889b      	ldrh	r3, [r3, #4]
 80006b0:	2200      	movs	r2, #0
 80006b2:	4619      	mov	r1, r3
 80006b4:	f001 fc9c 	bl	8001ff0 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(_LoRa->hSPIx, address, r_length, TRANSMIT_TIMEOUT);
 80006b8:	68fb      	ldr	r3, [r7, #12]
 80006ba:	6998      	ldr	r0, [r3, #24]
 80006bc:	88fa      	ldrh	r2, [r7, #6]
 80006be:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80006c2:	68b9      	ldr	r1, [r7, #8]
 80006c4:	f003 fc25 	bl	8003f12 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 80006c8:	bf00      	nop
 80006ca:	68fb      	ldr	r3, [r7, #12]
 80006cc:	699b      	ldr	r3, [r3, #24]
 80006ce:	4618      	mov	r0, r3
 80006d0:	f004 f80e 	bl	80046f0 <HAL_SPI_GetState>
 80006d4:	4603      	mov	r3, r0
 80006d6:	2b01      	cmp	r3, #1
 80006d8:	d1f7      	bne.n	80006ca <LoRa_writeReg+0x32>
		;
	HAL_SPI_Transmit(_LoRa->hSPIx, values, w_length, TRANSMIT_TIMEOUT);
 80006da:	68fb      	ldr	r3, [r7, #12]
 80006dc:	6998      	ldr	r0, [r3, #24]
 80006de:	8b3a      	ldrh	r2, [r7, #24]
 80006e0:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80006e4:	6839      	ldr	r1, [r7, #0]
 80006e6:	f003 fc14 	bl	8003f12 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 80006ea:	bf00      	nop
 80006ec:	68fb      	ldr	r3, [r7, #12]
 80006ee:	699b      	ldr	r3, [r3, #24]
 80006f0:	4618      	mov	r0, r3
 80006f2:	f003 fffd 	bl	80046f0 <HAL_SPI_GetState>
 80006f6:	4603      	mov	r3, r0
 80006f8:	2b01      	cmp	r3, #1
 80006fa:	d1f7      	bne.n	80006ec <LoRa_writeReg+0x54>
		;
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_SET);
 80006fc:	68fb      	ldr	r3, [r7, #12]
 80006fe:	6818      	ldr	r0, [r3, #0]
 8000700:	68fb      	ldr	r3, [r7, #12]
 8000702:	889b      	ldrh	r3, [r3, #4]
 8000704:	2201      	movs	r2, #1
 8000706:	4619      	mov	r1, r3
 8000708:	f001 fc72 	bl	8001ff0 <HAL_GPIO_WritePin>
}
 800070c:	bf00      	nop
 800070e:	3710      	adds	r7, #16
 8000710:	46bd      	mov	sp, r7
 8000712:	bd80      	pop	{r7, pc}

08000714 <LoRa_setFrequency>:
		arguments   :
			LoRa* LoRa        --> LoRa object handler
			int   freq        --> desired frequency in MHz unit, e.g 434
		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setFrequency(LoRa* _LoRa, int freq){
 8000714:	b580      	push	{r7, lr}
 8000716:	b084      	sub	sp, #16
 8000718:	af00      	add	r7, sp, #0
 800071a:	6078      	str	r0, [r7, #4]
 800071c:	6039      	str	r1, [r7, #0]
	uint8_t  data;
	uint32_t F;
	F = (freq * 524288)>>5;
 800071e:	683b      	ldr	r3, [r7, #0]
 8000720:	04db      	lsls	r3, r3, #19
 8000722:	115b      	asrs	r3, r3, #5
 8000724:	60fb      	str	r3, [r7, #12]

	// write Msb:
	data = F >> 16;
 8000726:	68fb      	ldr	r3, [r7, #12]
 8000728:	0c1b      	lsrs	r3, r3, #16
 800072a:	72fb      	strb	r3, [r7, #11]
	LoRa_write(_LoRa, RegFrMsb, data);
 800072c:	7afb      	ldrb	r3, [r7, #11]
 800072e:	461a      	mov	r2, r3
 8000730:	2106      	movs	r1, #6
 8000732:	6878      	ldr	r0, [r7, #4]
 8000734:	f000 f8d3 	bl	80008de <LoRa_write>
	HAL_Delay(5);
 8000738:	2005      	movs	r0, #5
 800073a:	f001 f8f5 	bl	8001928 <HAL_Delay>

	// write Mid:
	data = F >> 8;
 800073e:	68fb      	ldr	r3, [r7, #12]
 8000740:	0a1b      	lsrs	r3, r3, #8
 8000742:	72fb      	strb	r3, [r7, #11]
	LoRa_write(_LoRa, RegFrMid, data);
 8000744:	7afb      	ldrb	r3, [r7, #11]
 8000746:	461a      	mov	r2, r3
 8000748:	2107      	movs	r1, #7
 800074a:	6878      	ldr	r0, [r7, #4]
 800074c:	f000 f8c7 	bl	80008de <LoRa_write>
	HAL_Delay(5);
 8000750:	2005      	movs	r0, #5
 8000752:	f001 f8e9 	bl	8001928 <HAL_Delay>

	// write Lsb:
	data = F >> 0;
 8000756:	68fb      	ldr	r3, [r7, #12]
 8000758:	72fb      	strb	r3, [r7, #11]
	LoRa_write(_LoRa, RegFrLsb, data);
 800075a:	7afb      	ldrb	r3, [r7, #11]
 800075c:	461a      	mov	r2, r3
 800075e:	2108      	movs	r1, #8
 8000760:	6878      	ldr	r0, [r7, #4]
 8000762:	f000 f8bc 	bl	80008de <LoRa_write>
	HAL_Delay(5);
 8000766:	2005      	movs	r0, #5
 8000768:	f001 f8de 	bl	8001928 <HAL_Delay>
}
 800076c:	bf00      	nop
 800076e:	3710      	adds	r7, #16
 8000770:	46bd      	mov	sp, r7
 8000772:	bd80      	pop	{r7, pc}

08000774 <LoRa_setSpreadingFactor>:
		arguments   :
			LoRa* LoRa        --> LoRa object handler
			int   SP          --> desired spreading factor e.g 7
		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setSpreadingFactor(LoRa* _LoRa, int SF){
 8000774:	b580      	push	{r7, lr}
 8000776:	b084      	sub	sp, #16
 8000778:	af00      	add	r7, sp, #0
 800077a:	6078      	str	r0, [r7, #4]
 800077c:	6039      	str	r1, [r7, #0]
	uint8_t	data;
	uint8_t	read;

	if(SF>12)
 800077e:	683b      	ldr	r3, [r7, #0]
 8000780:	2b0c      	cmp	r3, #12
 8000782:	dd01      	ble.n	8000788 <LoRa_setSpreadingFactor+0x14>
		SF = 12;
 8000784:	230c      	movs	r3, #12
 8000786:	603b      	str	r3, [r7, #0]
	if(SF<7)
 8000788:	683b      	ldr	r3, [r7, #0]
 800078a:	2b06      	cmp	r3, #6
 800078c:	dc01      	bgt.n	8000792 <LoRa_setSpreadingFactor+0x1e>
		SF = 7;
 800078e:	2307      	movs	r3, #7
 8000790:	603b      	str	r3, [r7, #0]

	read = LoRa_read(_LoRa, RegModemConfig2);
 8000792:	211e      	movs	r1, #30
 8000794:	6878      	ldr	r0, [r7, #4]
 8000796:	f000 f888 	bl	80008aa <LoRa_read>
 800079a:	4603      	mov	r3, r0
 800079c:	73fb      	strb	r3, [r7, #15]
	HAL_Delay(10);
 800079e:	200a      	movs	r0, #10
 80007a0:	f001 f8c2 	bl	8001928 <HAL_Delay>

	data = (SF << 4) + (read & 0x0F);
 80007a4:	683b      	ldr	r3, [r7, #0]
 80007a6:	b2db      	uxtb	r3, r3
 80007a8:	011b      	lsls	r3, r3, #4
 80007aa:	b2da      	uxtb	r2, r3
 80007ac:	7bfb      	ldrb	r3, [r7, #15]
 80007ae:	f003 030f 	and.w	r3, r3, #15
 80007b2:	b2db      	uxtb	r3, r3
 80007b4:	4413      	add	r3, r2
 80007b6:	73bb      	strb	r3, [r7, #14]
	LoRa_write(_LoRa, RegModemConfig2, data);
 80007b8:	7bbb      	ldrb	r3, [r7, #14]
 80007ba:	461a      	mov	r2, r3
 80007bc:	211e      	movs	r1, #30
 80007be:	6878      	ldr	r0, [r7, #4]
 80007c0:	f000 f88d 	bl	80008de <LoRa_write>
	HAL_Delay(10);
 80007c4:	200a      	movs	r0, #10
 80007c6:	f001 f8af 	bl	8001928 <HAL_Delay>
}
 80007ca:	bf00      	nop
 80007cc:	3710      	adds	r7, #16
 80007ce:	46bd      	mov	sp, r7
 80007d0:	bd80      	pop	{r7, pc}

080007d2 <LoRa_setPower>:
		arguments   :
			LoRa* LoRa        --> LoRa object handler
			int   power       --> desired power e.g POWER_17db
		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setPower(LoRa* _LoRa, uint8_t power){
 80007d2:	b580      	push	{r7, lr}
 80007d4:	b082      	sub	sp, #8
 80007d6:	af00      	add	r7, sp, #0
 80007d8:	6078      	str	r0, [r7, #4]
 80007da:	460b      	mov	r3, r1
 80007dc:	70fb      	strb	r3, [r7, #3]
	LoRa_write(_LoRa, RegPaConfig, power);
 80007de:	78fb      	ldrb	r3, [r7, #3]
 80007e0:	461a      	mov	r2, r3
 80007e2:	2109      	movs	r1, #9
 80007e4:	6878      	ldr	r0, [r7, #4]
 80007e6:	f000 f87a 	bl	80008de <LoRa_write>
	HAL_Delay(10);
 80007ea:	200a      	movs	r0, #10
 80007ec:	f001 f89c 	bl	8001928 <HAL_Delay>
}
 80007f0:	bf00      	nop
 80007f2:	3708      	adds	r7, #8
 80007f4:	46bd      	mov	sp, r7
 80007f6:	bd80      	pop	{r7, pc}

080007f8 <LoRa_setOCP>:
		arguments   :
			LoRa* LoRa        --> LoRa object handler
			int   current     --> desired max currnet in mA, e.g 120
		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setOCP(LoRa* _LoRa, uint8_t current){
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b084      	sub	sp, #16
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	6078      	str	r0, [r7, #4]
 8000800:	460b      	mov	r3, r1
 8000802:	70fb      	strb	r3, [r7, #3]
	uint8_t	OcpTrim = 0;
 8000804:	2300      	movs	r3, #0
 8000806:	73fb      	strb	r3, [r7, #15]

	if(current<45)
 8000808:	78fb      	ldrb	r3, [r7, #3]
 800080a:	2b2c      	cmp	r3, #44	; 0x2c
 800080c:	d801      	bhi.n	8000812 <LoRa_setOCP+0x1a>
		current = 45;
 800080e:	232d      	movs	r3, #45	; 0x2d
 8000810:	70fb      	strb	r3, [r7, #3]
	if(current>240)
 8000812:	78fb      	ldrb	r3, [r7, #3]
 8000814:	2bf0      	cmp	r3, #240	; 0xf0
 8000816:	d901      	bls.n	800081c <LoRa_setOCP+0x24>
		current = 240;
 8000818:	23f0      	movs	r3, #240	; 0xf0
 800081a:	70fb      	strb	r3, [r7, #3]

	if(current <= 120)
 800081c:	78fb      	ldrb	r3, [r7, #3]
 800081e:	2b78      	cmp	r3, #120	; 0x78
 8000820:	d809      	bhi.n	8000836 <LoRa_setOCP+0x3e>
		OcpTrim = (current - 45)/5;
 8000822:	78fb      	ldrb	r3, [r7, #3]
 8000824:	3b2d      	subs	r3, #45	; 0x2d
 8000826:	4a12      	ldr	r2, [pc, #72]	; (8000870 <LoRa_setOCP+0x78>)
 8000828:	fb82 1203 	smull	r1, r2, r2, r3
 800082c:	1052      	asrs	r2, r2, #1
 800082e:	17db      	asrs	r3, r3, #31
 8000830:	1ad3      	subs	r3, r2, r3
 8000832:	73fb      	strb	r3, [r7, #15]
 8000834:	e00b      	b.n	800084e <LoRa_setOCP+0x56>
	else if(current <= 240)
 8000836:	78fb      	ldrb	r3, [r7, #3]
 8000838:	2bf0      	cmp	r3, #240	; 0xf0
 800083a:	d808      	bhi.n	800084e <LoRa_setOCP+0x56>
		OcpTrim = (current + 30)/10;
 800083c:	78fb      	ldrb	r3, [r7, #3]
 800083e:	331e      	adds	r3, #30
 8000840:	4a0b      	ldr	r2, [pc, #44]	; (8000870 <LoRa_setOCP+0x78>)
 8000842:	fb82 1203 	smull	r1, r2, r2, r3
 8000846:	1092      	asrs	r2, r2, #2
 8000848:	17db      	asrs	r3, r3, #31
 800084a:	1ad3      	subs	r3, r2, r3
 800084c:	73fb      	strb	r3, [r7, #15]

	OcpTrim = OcpTrim + (1 << 5);
 800084e:	7bfb      	ldrb	r3, [r7, #15]
 8000850:	3320      	adds	r3, #32
 8000852:	73fb      	strb	r3, [r7, #15]
	LoRa_write(_LoRa, RegOcp, OcpTrim);
 8000854:	7bfb      	ldrb	r3, [r7, #15]
 8000856:	461a      	mov	r2, r3
 8000858:	210b      	movs	r1, #11
 800085a:	6878      	ldr	r0, [r7, #4]
 800085c:	f000 f83f 	bl	80008de <LoRa_write>
	HAL_Delay(10);
 8000860:	200a      	movs	r0, #10
 8000862:	f001 f861 	bl	8001928 <HAL_Delay>
}
 8000866:	bf00      	nop
 8000868:	3710      	adds	r7, #16
 800086a:	46bd      	mov	sp, r7
 800086c:	bd80      	pop	{r7, pc}
 800086e:	bf00      	nop
 8000870:	66666667 	.word	0x66666667

08000874 <LoRa_setTOMsb_setCRCon>:
		description : set timeout msb to 0xFF + set CRC enable.
		arguments   :
			LoRa* LoRa        --> LoRa object handler
		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setTOMsb_setCRCon(LoRa* _LoRa){
 8000874:	b580      	push	{r7, lr}
 8000876:	b084      	sub	sp, #16
 8000878:	af00      	add	r7, sp, #0
 800087a:	6078      	str	r0, [r7, #4]
	uint8_t read, data;

	read = LoRa_read(_LoRa, RegModemConfig2);
 800087c:	211e      	movs	r1, #30
 800087e:	6878      	ldr	r0, [r7, #4]
 8000880:	f000 f813 	bl	80008aa <LoRa_read>
 8000884:	4603      	mov	r3, r0
 8000886:	73fb      	strb	r3, [r7, #15]

	data = read | 0x07;
 8000888:	7bfb      	ldrb	r3, [r7, #15]
 800088a:	f043 0307 	orr.w	r3, r3, #7
 800088e:	73bb      	strb	r3, [r7, #14]
	LoRa_write(_LoRa, RegModemConfig2, data);\
 8000890:	7bbb      	ldrb	r3, [r7, #14]
 8000892:	461a      	mov	r2, r3
 8000894:	211e      	movs	r1, #30
 8000896:	6878      	ldr	r0, [r7, #4]
 8000898:	f000 f821 	bl	80008de <LoRa_write>
	HAL_Delay(10);
 800089c:	200a      	movs	r0, #10
 800089e:	f001 f843 	bl	8001928 <HAL_Delay>
}
 80008a2:	bf00      	nop
 80008a4:	3710      	adds	r7, #16
 80008a6:	46bd      	mov	sp, r7
 80008a8:	bd80      	pop	{r7, pc}

080008aa <LoRa_read>:
		arguments   :
			LoRa*   LoRa        --> LoRa object handler
			uint8_t address     -->	address of the register e.g 0x1D
		returns     : register value
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_read(LoRa* _LoRa, uint8_t address){
 80008aa:	b580      	push	{r7, lr}
 80008ac:	b086      	sub	sp, #24
 80008ae:	af02      	add	r7, sp, #8
 80008b0:	6078      	str	r0, [r7, #4]
 80008b2:	460b      	mov	r3, r1
 80008b4:	70fb      	strb	r3, [r7, #3]
	uint8_t read_data;
	uint8_t data_addr;

	data_addr = address & 0x7F;
 80008b6:	78fb      	ldrb	r3, [r7, #3]
 80008b8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80008bc:	b2db      	uxtb	r3, r3
 80008be:	73bb      	strb	r3, [r7, #14]
	LoRa_readReg(_LoRa, &data_addr, 1, &read_data, 1);
 80008c0:	f107 030f 	add.w	r3, r7, #15
 80008c4:	f107 010e 	add.w	r1, r7, #14
 80008c8:	2201      	movs	r2, #1
 80008ca:	9200      	str	r2, [sp, #0]
 80008cc:	2201      	movs	r2, #1
 80008ce:	6878      	ldr	r0, [r7, #4]
 80008d0:	f7ff fea4 	bl	800061c <LoRa_readReg>
	//HAL_Delay(5);

	return read_data;
 80008d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80008d6:	4618      	mov	r0, r3
 80008d8:	3710      	adds	r7, #16
 80008da:	46bd      	mov	sp, r7
 80008dc:	bd80      	pop	{r7, pc}

080008de <LoRa_write>:
			LoRa*   LoRa        --> LoRa object handler
			uint8_t address     -->	address of the register e.g 0x1D
			uint8_t value       --> value that you want to write
		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_write(LoRa* _LoRa, uint8_t address, uint8_t value){
 80008de:	b580      	push	{r7, lr}
 80008e0:	b086      	sub	sp, #24
 80008e2:	af02      	add	r7, sp, #8
 80008e4:	6078      	str	r0, [r7, #4]
 80008e6:	460b      	mov	r3, r1
 80008e8:	70fb      	strb	r3, [r7, #3]
 80008ea:	4613      	mov	r3, r2
 80008ec:	70bb      	strb	r3, [r7, #2]
	uint8_t data;
	uint8_t addr;

	addr = address | 0x80;
 80008ee:	78fb      	ldrb	r3, [r7, #3]
 80008f0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80008f4:	b2db      	uxtb	r3, r3
 80008f6:	73bb      	strb	r3, [r7, #14]
	data = value;
 80008f8:	78bb      	ldrb	r3, [r7, #2]
 80008fa:	73fb      	strb	r3, [r7, #15]
	LoRa_writeReg(_LoRa, &addr, 1, &data, 1);
 80008fc:	f107 030f 	add.w	r3, r7, #15
 8000900:	f107 010e 	add.w	r1, r7, #14
 8000904:	2201      	movs	r2, #1
 8000906:	9200      	str	r2, [sp, #0]
 8000908:	2201      	movs	r2, #1
 800090a:	6878      	ldr	r0, [r7, #4]
 800090c:	f7ff fec4 	bl	8000698 <LoRa_writeReg>
	//HAL_Delay(5);
}
 8000910:	bf00      	nop
 8000912:	3710      	adds	r7, #16
 8000914:	46bd      	mov	sp, r7
 8000916:	bd80      	pop	{r7, pc}

08000918 <LoRa_BurstWrite>:
			LoRa*   LoRa        --> LoRa object handler
			uint8_t address     -->	address of the register e.g 0x1D
			uint8_t *value      --> address of values that you want to write
		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_BurstWrite(LoRa* _LoRa, uint8_t address, uint8_t *value, uint8_t length){
 8000918:	b580      	push	{r7, lr}
 800091a:	b086      	sub	sp, #24
 800091c:	af00      	add	r7, sp, #0
 800091e:	60f8      	str	r0, [r7, #12]
 8000920:	607a      	str	r2, [r7, #4]
 8000922:	461a      	mov	r2, r3
 8000924:	460b      	mov	r3, r1
 8000926:	72fb      	strb	r3, [r7, #11]
 8000928:	4613      	mov	r3, r2
 800092a:	72bb      	strb	r3, [r7, #10]
	uint8_t addr;
	addr = address | 0x80;
 800092c:	7afb      	ldrb	r3, [r7, #11]
 800092e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000932:	b2db      	uxtb	r3, r3
 8000934:	75fb      	strb	r3, [r7, #23]

	//NSS = 1
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_RESET);
 8000936:	68fb      	ldr	r3, [r7, #12]
 8000938:	6818      	ldr	r0, [r3, #0]
 800093a:	68fb      	ldr	r3, [r7, #12]
 800093c:	889b      	ldrh	r3, [r3, #4]
 800093e:	2200      	movs	r2, #0
 8000940:	4619      	mov	r1, r3
 8000942:	f001 fb55 	bl	8001ff0 <HAL_GPIO_WritePin>
	//say module thai I want to write in RegFiFo
	HAL_SPI_Transmit(_LoRa->hSPIx, &addr, 1, TRANSMIT_TIMEOUT);
 8000946:	68fb      	ldr	r3, [r7, #12]
 8000948:	6998      	ldr	r0, [r3, #24]
 800094a:	f107 0117 	add.w	r1, r7, #23
 800094e:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000952:	2201      	movs	r2, #1
 8000954:	f003 fadd 	bl	8003f12 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8000958:	bf00      	nop
 800095a:	68fb      	ldr	r3, [r7, #12]
 800095c:	699b      	ldr	r3, [r3, #24]
 800095e:	4618      	mov	r0, r3
 8000960:	f003 fec6 	bl	80046f0 <HAL_SPI_GetState>
 8000964:	4603      	mov	r3, r0
 8000966:	2b01      	cmp	r3, #1
 8000968:	d1f7      	bne.n	800095a <LoRa_BurstWrite+0x42>
		;
	//Write data in FiFo
	HAL_SPI_Transmit(_LoRa->hSPIx, value, length, TRANSMIT_TIMEOUT);
 800096a:	68fb      	ldr	r3, [r7, #12]
 800096c:	6998      	ldr	r0, [r3, #24]
 800096e:	7abb      	ldrb	r3, [r7, #10]
 8000970:	b29a      	uxth	r2, r3
 8000972:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000976:	6879      	ldr	r1, [r7, #4]
 8000978:	f003 facb 	bl	8003f12 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 800097c:	bf00      	nop
 800097e:	68fb      	ldr	r3, [r7, #12]
 8000980:	699b      	ldr	r3, [r3, #24]
 8000982:	4618      	mov	r0, r3
 8000984:	f003 feb4 	bl	80046f0 <HAL_SPI_GetState>
 8000988:	4603      	mov	r3, r0
 800098a:	2b01      	cmp	r3, #1
 800098c:	d1f7      	bne.n	800097e <LoRa_BurstWrite+0x66>
		;
	//NSS = 0
	//HAL_Delay(5);
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_SET);
 800098e:	68fb      	ldr	r3, [r7, #12]
 8000990:	6818      	ldr	r0, [r3, #0]
 8000992:	68fb      	ldr	r3, [r7, #12]
 8000994:	889b      	ldrh	r3, [r3, #4]
 8000996:	2201      	movs	r2, #1
 8000998:	4619      	mov	r1, r3
 800099a:	f001 fb29 	bl	8001ff0 <HAL_GPIO_WritePin>
}
 800099e:	bf00      	nop
 80009a0:	3718      	adds	r7, #24
 80009a2:	46bd      	mov	sp, r7
 80009a4:	bd80      	pop	{r7, pc}

080009a6 <LoRa_isvalid>:
		description : check the LoRa instruct values
		arguments   :
			LoRa* LoRa --> LoRa object handler
		returns     : returns 1 if all of the values were given, otherwise returns 0
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_isvalid(LoRa* _LoRa){
 80009a6:	b480      	push	{r7}
 80009a8:	b083      	sub	sp, #12
 80009aa:	af00      	add	r7, sp, #0
 80009ac:	6078      	str	r0, [r7, #4]

	return 1;
 80009ae:	2301      	movs	r3, #1
}
 80009b0:	4618      	mov	r0, r3
 80009b2:	370c      	adds	r7, #12
 80009b4:	46bd      	mov	sp, r7
 80009b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ba:	4770      	bx	lr

080009bc <LoRa_transmit>:
			uint8_t  data			--> A pointer to the data you wanna send
			uint8_t	 length   --> Size of your data in Bytes
			uint16_t timeOut	--> Timeout in milliseconds
		returns     : 1 in case of success, 0 in case of timeout
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_transmit(LoRa* _LoRa, uint8_t* data, uint8_t length, uint16_t timeout){
 80009bc:	b580      	push	{r7, lr}
 80009be:	b086      	sub	sp, #24
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	60f8      	str	r0, [r7, #12]
 80009c4:	60b9      	str	r1, [r7, #8]
 80009c6:	4611      	mov	r1, r2
 80009c8:	461a      	mov	r2, r3
 80009ca:	460b      	mov	r3, r1
 80009cc:	71fb      	strb	r3, [r7, #7]
 80009ce:	4613      	mov	r3, r2
 80009d0:	80bb      	strh	r3, [r7, #4]
	uint8_t read;

	int mode = _LoRa->current_mode;
 80009d2:	68fb      	ldr	r3, [r7, #12]
 80009d4:	69db      	ldr	r3, [r3, #28]
 80009d6:	617b      	str	r3, [r7, #20]
	LoRa_gotoMode(_LoRa, STNBY_MODE);
 80009d8:	2101      	movs	r1, #1
 80009da:	68f8      	ldr	r0, [r7, #12]
 80009dc:	f7ff fdbd 	bl	800055a <LoRa_gotoMode>
	read = LoRa_read(_LoRa, RegFiFoTxBaseAddr);
 80009e0:	210e      	movs	r1, #14
 80009e2:	68f8      	ldr	r0, [r7, #12]
 80009e4:	f7ff ff61 	bl	80008aa <LoRa_read>
 80009e8:	4603      	mov	r3, r0
 80009ea:	74fb      	strb	r3, [r7, #19]
	LoRa_write(_LoRa, RegFiFoAddPtr, read);
 80009ec:	7cfb      	ldrb	r3, [r7, #19]
 80009ee:	461a      	mov	r2, r3
 80009f0:	210d      	movs	r1, #13
 80009f2:	68f8      	ldr	r0, [r7, #12]
 80009f4:	f7ff ff73 	bl	80008de <LoRa_write>
	LoRa_write(_LoRa, RegPayloadLength, length);
 80009f8:	79fb      	ldrb	r3, [r7, #7]
 80009fa:	461a      	mov	r2, r3
 80009fc:	2122      	movs	r1, #34	; 0x22
 80009fe:	68f8      	ldr	r0, [r7, #12]
 8000a00:	f7ff ff6d 	bl	80008de <LoRa_write>
	LoRa_BurstWrite(_LoRa, RegFiFo, data, length);
 8000a04:	79fb      	ldrb	r3, [r7, #7]
 8000a06:	68ba      	ldr	r2, [r7, #8]
 8000a08:	2100      	movs	r1, #0
 8000a0a:	68f8      	ldr	r0, [r7, #12]
 8000a0c:	f7ff ff84 	bl	8000918 <LoRa_BurstWrite>
	LoRa_gotoMode(_LoRa, TRANSMIT_MODE);
 8000a10:	2103      	movs	r1, #3
 8000a12:	68f8      	ldr	r0, [r7, #12]
 8000a14:	f7ff fda1 	bl	800055a <LoRa_gotoMode>
	while(1){
		read = LoRa_read(_LoRa, RegIrqFlags);
 8000a18:	2112      	movs	r1, #18
 8000a1a:	68f8      	ldr	r0, [r7, #12]
 8000a1c:	f7ff ff45 	bl	80008aa <LoRa_read>
 8000a20:	4603      	mov	r3, r0
 8000a22:	74fb      	strb	r3, [r7, #19]
		if((read & 0x08)!=0){
 8000a24:	7cfb      	ldrb	r3, [r7, #19]
 8000a26:	f003 0308 	and.w	r3, r3, #8
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d00a      	beq.n	8000a44 <LoRa_transmit+0x88>
			LoRa_write(_LoRa, RegIrqFlags, 0xFF);
 8000a2e:	22ff      	movs	r2, #255	; 0xff
 8000a30:	2112      	movs	r1, #18
 8000a32:	68f8      	ldr	r0, [r7, #12]
 8000a34:	f7ff ff53 	bl	80008de <LoRa_write>
			LoRa_gotoMode(_LoRa, mode);
 8000a38:	6979      	ldr	r1, [r7, #20]
 8000a3a:	68f8      	ldr	r0, [r7, #12]
 8000a3c:	f7ff fd8d 	bl	800055a <LoRa_gotoMode>
			return 1;
 8000a40:	2301      	movs	r3, #1
 8000a42:	e00f      	b.n	8000a64 <LoRa_transmit+0xa8>
		}
		else{
			if(--timeout==0){
 8000a44:	88bb      	ldrh	r3, [r7, #4]
 8000a46:	3b01      	subs	r3, #1
 8000a48:	80bb      	strh	r3, [r7, #4]
 8000a4a:	88bb      	ldrh	r3, [r7, #4]
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d105      	bne.n	8000a5c <LoRa_transmit+0xa0>
				LoRa_gotoMode(_LoRa, mode);
 8000a50:	6979      	ldr	r1, [r7, #20]
 8000a52:	68f8      	ldr	r0, [r7, #12]
 8000a54:	f7ff fd81 	bl	800055a <LoRa_gotoMode>
				return 0;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	e003      	b.n	8000a64 <LoRa_transmit+0xa8>
			}
		}
		HAL_Delay(1);
 8000a5c:	2001      	movs	r0, #1
 8000a5e:	f000 ff63 	bl	8001928 <HAL_Delay>
		read = LoRa_read(_LoRa, RegIrqFlags);
 8000a62:	e7d9      	b.n	8000a18 <LoRa_transmit+0x5c>
	}

}
 8000a64:	4618      	mov	r0, r3
 8000a66:	3718      	adds	r7, #24
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	bd80      	pop	{r7, pc}

08000a6c <LoRa_startReceiving>:
		description : Start receiving continuously
		arguments   :
			LoRa*    LoRa     --> LoRa object handler
		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_startReceiving(LoRa* _LoRa){
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b082      	sub	sp, #8
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	6078      	str	r0, [r7, #4]
	LoRa_gotoMode(_LoRa, RXCONTIN_MODE);
 8000a74:	2105      	movs	r1, #5
 8000a76:	6878      	ldr	r0, [r7, #4]
 8000a78:	f7ff fd6f 	bl	800055a <LoRa_gotoMode>
}
 8000a7c:	bf00      	nop
 8000a7e:	3708      	adds	r7, #8
 8000a80:	46bd      	mov	sp, r7
 8000a82:	bd80      	pop	{r7, pc}

08000a84 <LoRa_receive>:
			LoRa*    LoRa     --> LoRa object handler
			uint8_t  data			--> A pointer to the array that you want to write bytes in it
			uint8_t	 length   --> Determines how many bytes you want to read
		returns     : The number of bytes received
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_receive(LoRa* _LoRa, uint8_t* data, uint8_t length){
 8000a84:	b590      	push	{r4, r7, lr}
 8000a86:	b089      	sub	sp, #36	; 0x24
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	60f8      	str	r0, [r7, #12]
 8000a8c:	60b9      	str	r1, [r7, #8]
 8000a8e:	4613      	mov	r3, r2
 8000a90:	71fb      	strb	r3, [r7, #7]
	uint8_t read;
	uint8_t number_of_bytes;
	uint8_t min = 0;
 8000a92:	2300      	movs	r3, #0
 8000a94:	77fb      	strb	r3, [r7, #31]

	for(int i=0; i<length; i++)
 8000a96:	2300      	movs	r3, #0
 8000a98:	61bb      	str	r3, [r7, #24]
 8000a9a:	e007      	b.n	8000aac <LoRa_receive+0x28>
		data[i]=0;
 8000a9c:	69bb      	ldr	r3, [r7, #24]
 8000a9e:	68ba      	ldr	r2, [r7, #8]
 8000aa0:	4413      	add	r3, r2
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	701a      	strb	r2, [r3, #0]
	for(int i=0; i<length; i++)
 8000aa6:	69bb      	ldr	r3, [r7, #24]
 8000aa8:	3301      	adds	r3, #1
 8000aaa:	61bb      	str	r3, [r7, #24]
 8000aac:	79fb      	ldrb	r3, [r7, #7]
 8000aae:	69ba      	ldr	r2, [r7, #24]
 8000ab0:	429a      	cmp	r2, r3
 8000ab2:	dbf3      	blt.n	8000a9c <LoRa_receive+0x18>

	LoRa_gotoMode(_LoRa, STNBY_MODE);
 8000ab4:	2101      	movs	r1, #1
 8000ab6:	68f8      	ldr	r0, [r7, #12]
 8000ab8:	f7ff fd4f 	bl	800055a <LoRa_gotoMode>
	read = LoRa_read(_LoRa, RegIrqFlags);
 8000abc:	2112      	movs	r1, #18
 8000abe:	68f8      	ldr	r0, [r7, #12]
 8000ac0:	f7ff fef3 	bl	80008aa <LoRa_read>
 8000ac4:	4603      	mov	r3, r0
 8000ac6:	74fb      	strb	r3, [r7, #19]
	if((read & 0x40) != 0){
 8000ac8:	7cfb      	ldrb	r3, [r7, #19]
 8000aca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d02f      	beq.n	8000b32 <LoRa_receive+0xae>
		LoRa_write(_LoRa, RegIrqFlags, 0xFF);
 8000ad2:	22ff      	movs	r2, #255	; 0xff
 8000ad4:	2112      	movs	r1, #18
 8000ad6:	68f8      	ldr	r0, [r7, #12]
 8000ad8:	f7ff ff01 	bl	80008de <LoRa_write>
		number_of_bytes = LoRa_read(_LoRa, RegRxNbBytes);
 8000adc:	2113      	movs	r1, #19
 8000ade:	68f8      	ldr	r0, [r7, #12]
 8000ae0:	f7ff fee3 	bl	80008aa <LoRa_read>
 8000ae4:	4603      	mov	r3, r0
 8000ae6:	74bb      	strb	r3, [r7, #18]
		read = LoRa_read(_LoRa, RegFiFoRxCurrentAddr);
 8000ae8:	2110      	movs	r1, #16
 8000aea:	68f8      	ldr	r0, [r7, #12]
 8000aec:	f7ff fedd 	bl	80008aa <LoRa_read>
 8000af0:	4603      	mov	r3, r0
 8000af2:	74fb      	strb	r3, [r7, #19]
		LoRa_write(_LoRa, RegFiFoAddPtr, read);
 8000af4:	7cfb      	ldrb	r3, [r7, #19]
 8000af6:	461a      	mov	r2, r3
 8000af8:	210d      	movs	r1, #13
 8000afa:	68f8      	ldr	r0, [r7, #12]
 8000afc:	f7ff feef 	bl	80008de <LoRa_write>
		min = length >= number_of_bytes ? number_of_bytes : length;
 8000b00:	7cba      	ldrb	r2, [r7, #18]
 8000b02:	79fb      	ldrb	r3, [r7, #7]
 8000b04:	4293      	cmp	r3, r2
 8000b06:	bf28      	it	cs
 8000b08:	4613      	movcs	r3, r2
 8000b0a:	77fb      	strb	r3, [r7, #31]
		for(int i=0; i<min; i++)
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	617b      	str	r3, [r7, #20]
 8000b10:	e00b      	b.n	8000b2a <LoRa_receive+0xa6>
			data[i] = LoRa_read(_LoRa, RegFiFo);
 8000b12:	697b      	ldr	r3, [r7, #20]
 8000b14:	68ba      	ldr	r2, [r7, #8]
 8000b16:	18d4      	adds	r4, r2, r3
 8000b18:	2100      	movs	r1, #0
 8000b1a:	68f8      	ldr	r0, [r7, #12]
 8000b1c:	f7ff fec5 	bl	80008aa <LoRa_read>
 8000b20:	4603      	mov	r3, r0
 8000b22:	7023      	strb	r3, [r4, #0]
		for(int i=0; i<min; i++)
 8000b24:	697b      	ldr	r3, [r7, #20]
 8000b26:	3301      	adds	r3, #1
 8000b28:	617b      	str	r3, [r7, #20]
 8000b2a:	7ffb      	ldrb	r3, [r7, #31]
 8000b2c:	697a      	ldr	r2, [r7, #20]
 8000b2e:	429a      	cmp	r2, r3
 8000b30:	dbef      	blt.n	8000b12 <LoRa_receive+0x8e>
	}
	LoRa_gotoMode(_LoRa, RXCONTIN_MODE);
 8000b32:	2105      	movs	r1, #5
 8000b34:	68f8      	ldr	r0, [r7, #12]
 8000b36:	f7ff fd10 	bl	800055a <LoRa_gotoMode>
    return min;
 8000b3a:	7ffb      	ldrb	r3, [r7, #31]
}
 8000b3c:	4618      	mov	r0, r3
 8000b3e:	3724      	adds	r7, #36	; 0x24
 8000b40:	46bd      	mov	sp, r7
 8000b42:	bd90      	pop	{r4, r7, pc}

08000b44 <LoRa_init>:
		description : initialize and set the right setting according to LoRa sruct vars
		arguments   :
			LoRa* LoRa        --> LoRa object handler
		returns     : Nothing
\* ----------------------------------------------------------------------------- */
uint16_t LoRa_init(LoRa* _LoRa){
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b084      	sub	sp, #16
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	6078      	str	r0, [r7, #4]
	uint8_t    data;
	uint8_t    read;

	if(LoRa_isvalid(_LoRa)){
 8000b4c:	6878      	ldr	r0, [r7, #4]
 8000b4e:	f7ff ff2a 	bl	80009a6 <LoRa_isvalid>
 8000b52:	4603      	mov	r3, r0
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	f000 8093 	beq.w	8000c80 <LoRa_init+0x13c>
		// goto sleep mode:
			LoRa_gotoMode(_LoRa, SLEEP_MODE);
 8000b5a:	2100      	movs	r1, #0
 8000b5c:	6878      	ldr	r0, [r7, #4]
 8000b5e:	f7ff fcfc 	bl	800055a <LoRa_gotoMode>
			HAL_Delay(10);
 8000b62:	200a      	movs	r0, #10
 8000b64:	f000 fee0 	bl	8001928 <HAL_Delay>

		// turn on lora mode:
			read = LoRa_read(_LoRa, RegOpMode);
 8000b68:	2101      	movs	r1, #1
 8000b6a:	6878      	ldr	r0, [r7, #4]
 8000b6c:	f7ff fe9d 	bl	80008aa <LoRa_read>
 8000b70:	4603      	mov	r3, r0
 8000b72:	73fb      	strb	r3, [r7, #15]
			HAL_Delay(10);
 8000b74:	200a      	movs	r0, #10
 8000b76:	f000 fed7 	bl	8001928 <HAL_Delay>
			data = read | 0x80;
 8000b7a:	7bfb      	ldrb	r3, [r7, #15]
 8000b7c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000b80:	73bb      	strb	r3, [r7, #14]
			LoRa_write(_LoRa, RegOpMode, data);
 8000b82:	7bbb      	ldrb	r3, [r7, #14]
 8000b84:	461a      	mov	r2, r3
 8000b86:	2101      	movs	r1, #1
 8000b88:	6878      	ldr	r0, [r7, #4]
 8000b8a:	f7ff fea8 	bl	80008de <LoRa_write>
			HAL_Delay(100);
 8000b8e:	2064      	movs	r0, #100	; 0x64
 8000b90:	f000 feca 	bl	8001928 <HAL_Delay>

		// set frequency:
			LoRa_setFrequency(_LoRa, _LoRa->frequency);
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	6a1b      	ldr	r3, [r3, #32]
 8000b98:	4619      	mov	r1, r3
 8000b9a:	6878      	ldr	r0, [r7, #4]
 8000b9c:	f7ff fdba 	bl	8000714 <LoRa_setFrequency>

		// set output power gain:
			LoRa_setPower(_LoRa, _LoRa->power);
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8000ba6:	4619      	mov	r1, r3
 8000ba8:	6878      	ldr	r0, [r7, #4]
 8000baa:	f7ff fe12 	bl	80007d2 <LoRa_setPower>

		// set over current protection:
			LoRa_setOCP(_LoRa, _LoRa->overCurrentProtection);
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8000bb4:	4619      	mov	r1, r3
 8000bb6:	6878      	ldr	r0, [r7, #4]
 8000bb8:	f7ff fe1e 	bl	80007f8 <LoRa_setOCP>

		// set LNA gain:
			LoRa_write(_LoRa, RegLna, 0x23);
 8000bbc:	2223      	movs	r2, #35	; 0x23
 8000bbe:	210c      	movs	r1, #12
 8000bc0:	6878      	ldr	r0, [r7, #4]
 8000bc2:	f7ff fe8c 	bl	80008de <LoRa_write>

		// set spreading factor, CRC on, and Timeout Msb:
			LoRa_setTOMsb_setCRCon(_LoRa);
 8000bc6:	6878      	ldr	r0, [r7, #4]
 8000bc8:	f7ff fe54 	bl	8000874 <LoRa_setTOMsb_setCRCon>
			LoRa_setSpreadingFactor(_LoRa, _LoRa->spredingFactor);
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000bd2:	4619      	mov	r1, r3
 8000bd4:	6878      	ldr	r0, [r7, #4]
 8000bd6:	f7ff fdcd 	bl	8000774 <LoRa_setSpreadingFactor>

		// set Timeout Lsb:
			LoRa_write(_LoRa, RegSymbTimeoutL, 0xFF);
 8000bda:	22ff      	movs	r2, #255	; 0xff
 8000bdc:	211f      	movs	r1, #31
 8000bde:	6878      	ldr	r0, [r7, #4]
 8000be0:	f7ff fe7d 	bl	80008de <LoRa_write>

		// set bandwidth, coding rate and expilicit mode:
			// 8 bit RegModemConfig --> | X | X | X | X | X | X | X | X |
			//       bits represent --> |   bandwidth   |     CR    |I/E|
			data = 0;
 8000be4:	2300      	movs	r3, #0
 8000be6:	73bb      	strb	r3, [r7, #14]
			data = (_LoRa->bandWidth << 4) + (_LoRa->crcRate << 1);
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000bee:	011b      	lsls	r3, r3, #4
 8000bf0:	b2da      	uxtb	r2, r3
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8000bf8:	005b      	lsls	r3, r3, #1
 8000bfa:	b2db      	uxtb	r3, r3
 8000bfc:	4413      	add	r3, r2
 8000bfe:	73bb      	strb	r3, [r7, #14]
			LoRa_write(_LoRa, RegModemConfig1, data);
 8000c00:	7bbb      	ldrb	r3, [r7, #14]
 8000c02:	461a      	mov	r2, r3
 8000c04:	211d      	movs	r1, #29
 8000c06:	6878      	ldr	r0, [r7, #4]
 8000c08:	f7ff fe69 	bl	80008de <LoRa_write>

		// set preamble:
			LoRa_write(_LoRa, RegPreambleMsb, _LoRa->preamble >> 8);
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000c10:	0a1b      	lsrs	r3, r3, #8
 8000c12:	b29b      	uxth	r3, r3
 8000c14:	b2db      	uxtb	r3, r3
 8000c16:	461a      	mov	r2, r3
 8000c18:	2120      	movs	r1, #32
 8000c1a:	6878      	ldr	r0, [r7, #4]
 8000c1c:	f7ff fe5f 	bl	80008de <LoRa_write>
			LoRa_write(_LoRa, RegPreambleLsb, _LoRa->preamble >> 0);
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000c24:	b2db      	uxtb	r3, r3
 8000c26:	461a      	mov	r2, r3
 8000c28:	2121      	movs	r1, #33	; 0x21
 8000c2a:	6878      	ldr	r0, [r7, #4]
 8000c2c:	f7ff fe57 	bl	80008de <LoRa_write>

		// DIO mapping:   --> DIO: RxDone
			read = LoRa_read(_LoRa, RegDioMapping1);
 8000c30:	2140      	movs	r1, #64	; 0x40
 8000c32:	6878      	ldr	r0, [r7, #4]
 8000c34:	f7ff fe39 	bl	80008aa <LoRa_read>
 8000c38:	4603      	mov	r3, r0
 8000c3a:	73fb      	strb	r3, [r7, #15]
			data = read | 0x3F;
 8000c3c:	7bfb      	ldrb	r3, [r7, #15]
 8000c3e:	f043 033f 	orr.w	r3, r3, #63	; 0x3f
 8000c42:	73bb      	strb	r3, [r7, #14]
			LoRa_write(_LoRa, RegDioMapping1, data);
 8000c44:	7bbb      	ldrb	r3, [r7, #14]
 8000c46:	461a      	mov	r2, r3
 8000c48:	2140      	movs	r1, #64	; 0x40
 8000c4a:	6878      	ldr	r0, [r7, #4]
 8000c4c:	f7ff fe47 	bl	80008de <LoRa_write>

		// goto standby mode:
			LoRa_gotoMode(_LoRa, STNBY_MODE);
 8000c50:	2101      	movs	r1, #1
 8000c52:	6878      	ldr	r0, [r7, #4]
 8000c54:	f7ff fc81 	bl	800055a <LoRa_gotoMode>
			_LoRa->current_mode = STNBY_MODE;
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	2201      	movs	r2, #1
 8000c5c:	61da      	str	r2, [r3, #28]
			HAL_Delay(10);
 8000c5e:	200a      	movs	r0, #10
 8000c60:	f000 fe62 	bl	8001928 <HAL_Delay>

			read = LoRa_read(_LoRa, RegVersion);
 8000c64:	2142      	movs	r1, #66	; 0x42
 8000c66:	6878      	ldr	r0, [r7, #4]
 8000c68:	f7ff fe1f 	bl	80008aa <LoRa_read>
 8000c6c:	4603      	mov	r3, r0
 8000c6e:	73fb      	strb	r3, [r7, #15]
			if(read == 0x12)
 8000c70:	7bfb      	ldrb	r3, [r7, #15]
 8000c72:	2b12      	cmp	r3, #18
 8000c74:	d101      	bne.n	8000c7a <LoRa_init+0x136>
				return LORA_OK;
 8000c76:	23c8      	movs	r3, #200	; 0xc8
 8000c78:	e004      	b.n	8000c84 <LoRa_init+0x140>
			else
				return LORA_NOT_FOUND;
 8000c7a:	f44f 73ca 	mov.w	r3, #404	; 0x194
 8000c7e:	e001      	b.n	8000c84 <LoRa_init+0x140>
	}
	else {
		return LORA_UNAVAILABLE;
 8000c80:	f240 13f7 	movw	r3, #503	; 0x1f7
	}
}
 8000c84:	4618      	mov	r0, r3
 8000c86:	3710      	adds	r7, #16
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	bd80      	pop	{r7, pc}

08000c8c <LoRa_received_bytes>:
		description : check number of bytes available in FIFO RX buffer
		arguments   :
			LoRa* LoRa        --> LoRa object handler
		returns     : 8 bit integer, number of bytes available to read from FIFO RX buffer
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_received_bytes(LoRa* _LoRa) {
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b082      	sub	sp, #8
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]
	return LoRa_read(_LoRa, RegRxNbBytes);
 8000c94:	2113      	movs	r1, #19
 8000c96:	6878      	ldr	r0, [r7, #4]
 8000c98:	f7ff fe07 	bl	80008aa <LoRa_read>
 8000c9c:	4603      	mov	r3, r0
}
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	3708      	adds	r7, #8
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bd80      	pop	{r7, pc}
	...

08000ca8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ca8:	b5b0      	push	{r4, r5, r7, lr}
 8000caa:	b0d0      	sub	sp, #320	; 0x140
 8000cac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  RetargetInit(USB_UART);
 8000cae:	4b8d      	ldr	r3, [pc, #564]	; (8000ee4 <main+0x23c>)
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	f000 fb44 	bl	8001340 <RetargetInit>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000cb8:	f000 fdc4 	bl	8001844 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000cbc:	f000 f930 	bl	8000f20 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000cc0:	f000 fa22 	bl	8001108 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000cc4:	f000 f9cc 	bl	8001060 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000cc8:	f000 f9f4 	bl	80010b4 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 8000ccc:	f000 f992 	bl	8000ff4 <MX_SPI1_Init>
  MX_USB_DEVICE_Init();
 8000cd0:	f008 fb7c 	bl	80093cc <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */

  // UART interrupt init
  HAL_UART_Receive_IT (USB_UART, UART_Buff, sizeof(UART_Buff));
 8000cd4:	4b83      	ldr	r3, [pc, #524]	; (8000ee4 <main+0x23c>)
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	220c      	movs	r2, #12
 8000cda:	4983      	ldr	r1, [pc, #524]	; (8000ee8 <main+0x240>)
 8000cdc:	4618      	mov	r0, r3
 8000cde:	f003 ffc6 	bl	8004c6e <HAL_UART_Receive_IT>

  // LoRa Class definitions
  LoRaClass = newLoRa();
 8000ce2:	4c82      	ldr	r4, [pc, #520]	; (8000eec <main+0x244>)
 8000ce4:	463b      	mov	r3, r7
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	f7ff fbf0 	bl	80004cc <newLoRa>
 8000cec:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8000cf0:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8000cf4:	461d      	mov	r5, r3
 8000cf6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000cf8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000cfa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000cfc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000cfe:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000d02:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  LoRaClass.hSPIx                 = RF_SPI;
 8000d06:	4b7a      	ldr	r3, [pc, #488]	; (8000ef0 <main+0x248>)
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	4a78      	ldr	r2, [pc, #480]	; (8000eec <main+0x244>)
 8000d0c:	6193      	str	r3, [r2, #24]
  LoRaClass.CS_port               = RF_SPI_NSS_GPIO_Port;
 8000d0e:	4b77      	ldr	r3, [pc, #476]	; (8000eec <main+0x244>)
 8000d10:	4a78      	ldr	r2, [pc, #480]	; (8000ef4 <main+0x24c>)
 8000d12:	601a      	str	r2, [r3, #0]
  LoRaClass.CS_pin                = RF_SPI_NSS_Pin;
 8000d14:	4b75      	ldr	r3, [pc, #468]	; (8000eec <main+0x244>)
 8000d16:	2210      	movs	r2, #16
 8000d18:	809a      	strh	r2, [r3, #4]
  LoRaClass.reset_port            = RESET_RF_GPIO_Port;
 8000d1a:	4b74      	ldr	r3, [pc, #464]	; (8000eec <main+0x244>)
 8000d1c:	4a76      	ldr	r2, [pc, #472]	; (8000ef8 <main+0x250>)
 8000d1e:	609a      	str	r2, [r3, #8]
  LoRaClass.reset_pin             = RESET_RF_Pin;
 8000d20:	4b72      	ldr	r3, [pc, #456]	; (8000eec <main+0x244>)
 8000d22:	2201      	movs	r2, #1
 8000d24:	819a      	strh	r2, [r3, #12]
  LoRaClass.DIO0_port			  = IO0_RF_GPIO_Port;
 8000d26:	4b71      	ldr	r3, [pc, #452]	; (8000eec <main+0x244>)
 8000d28:	4a73      	ldr	r2, [pc, #460]	; (8000ef8 <main+0x250>)
 8000d2a:	611a      	str	r2, [r3, #16]
  LoRaClass.DIO0_pin			  = IO0_RF_Pin;
 8000d2c:	4b6f      	ldr	r3, [pc, #444]	; (8000eec <main+0x244>)
 8000d2e:	2202      	movs	r2, #2
 8000d30:	829a      	strh	r2, [r3, #20]

  LoRaClass.frequency             = 915;
 8000d32:	4b6e      	ldr	r3, [pc, #440]	; (8000eec <main+0x244>)
 8000d34:	f240 3293 	movw	r2, #915	; 0x393
 8000d38:	621a      	str	r2, [r3, #32]
  LoRaClass.spredingFactor        = SF_7;						// default = SF_7
 8000d3a:	4b6c      	ldr	r3, [pc, #432]	; (8000eec <main+0x244>)
 8000d3c:	2207      	movs	r2, #7
 8000d3e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  LoRaClass.bandWidth			  = BW_125KHz;				  	// default = BW_125KHz
 8000d42:	4b6a      	ldr	r3, [pc, #424]	; (8000eec <main+0x244>)
 8000d44:	2207      	movs	r2, #7
 8000d46:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  LoRaClass.crcRate				  = CR_4_5;						// default = CR_4_5
 8000d4a:	4b68      	ldr	r3, [pc, #416]	; (8000eec <main+0x244>)
 8000d4c:	2201      	movs	r2, #1
 8000d4e:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  LoRaClass.power			      = POWER_20db;					// default = 20db
 8000d52:	4b66      	ldr	r3, [pc, #408]	; (8000eec <main+0x244>)
 8000d54:	22ff      	movs	r2, #255	; 0xff
 8000d56:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  LoRaClass.overCurrentProtection = 120; 						// default = 100 mA
 8000d5a:	4b64      	ldr	r3, [pc, #400]	; (8000eec <main+0x244>)
 8000d5c:	2278      	movs	r2, #120	; 0x78
 8000d5e:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  LoRaClass.preamble			  = 10;		  					// default = 8;
 8000d62:	4b62      	ldr	r3, [pc, #392]	; (8000eec <main+0x244>)
 8000d64:	220a      	movs	r2, #10
 8000d66:	851a      	strh	r2, [r3, #40]	; 0x28

  HAL_GPIO_WritePin(RF_SPI_NSS_GPIO_Port, RF_SPI_NSS_Pin, GPIO_PIN_SET);
 8000d68:	2201      	movs	r2, #1
 8000d6a:	2110      	movs	r1, #16
 8000d6c:	4861      	ldr	r0, [pc, #388]	; (8000ef4 <main+0x24c>)
 8000d6e:	f001 f93f 	bl	8001ff0 <HAL_GPIO_WritePin>

  LoRa_reset(&LoRaClass);
 8000d72:	485e      	ldr	r0, [pc, #376]	; (8000eec <main+0x244>)
 8000d74:	f7ff fbd3 	bl	800051e <LoRa_reset>
  uint32_t result = LoRa_init(&LoRaClass);
 8000d78:	485c      	ldr	r0, [pc, #368]	; (8000eec <main+0x244>)
 8000d7a:	f7ff fee3 	bl	8000b44 <LoRa_init>
 8000d7e:	4603      	mov	r3, r0
 8000d80:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c

  if(result == LORA_NOT_FOUND) {
 8000d84:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8000d88:	f5b3 7fca 	cmp.w	r3, #404	; 0x194
 8000d8c:	d103      	bne.n	8000d96 <main+0xee>
	  Blocking_LED_Blink(1);
 8000d8e:	2001      	movs	r0, #1
 8000d90:	f000 faae 	bl	80012f0 <Blocking_LED_Blink>
 8000d94:	e008      	b.n	8000da8 <main+0x100>
  }
  else if(result == LORA_UNAVAILABLE) {
 8000d96:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8000d9a:	f240 12f7 	movw	r2, #503	; 0x1f7
 8000d9e:	4293      	cmp	r3, r2
 8000da0:	d102      	bne.n	8000da8 <main+0x100>
	  Blocking_LED_Blink(1);
 8000da2:	2001      	movs	r0, #1
 8000da4:	f000 faa4 	bl	80012f0 <Blocking_LED_Blink>
  }

  // START CONTINUOUS RECEIVING -----------------------------------
  LoRa_startReceiving(&LoRaClass);
 8000da8:	4850      	ldr	r0, [pc, #320]	; (8000eec <main+0x244>)
 8000daa:	f7ff fe5f 	bl	8000a6c <LoRa_startReceiving>
//	  uint8_t outputArr[10];
//	  memset(outputArr, '\0', sizeof(outputArr));
//	  LoRa_readReg(&LoRaClass, RegVersion, sizeof(RegVersion), outputArr, 4);
//	  CDC_Transmit_HS(outputArr, sizeof(outputArr));

	  if(RF_available_bytes) {
 8000dae:	4b53      	ldr	r3, [pc, #332]	; (8000efc <main+0x254>)
 8000db0:	781b      	ldrb	r3, [r3, #0]
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d02e      	beq.n	8000e14 <main+0x16c>
		  HAL_GPIO_WritePin(INDICATOR_LED_GPIO_Port, INDICATOR_LED_Pin, GPIO_PIN_SET);
 8000db6:	2201      	movs	r2, #1
 8000db8:	2104      	movs	r1, #4
 8000dba:	4851      	ldr	r0, [pc, #324]	; (8000f00 <main+0x258>)
 8000dbc:	f001 f918 	bl	8001ff0 <HAL_GPIO_WritePin>
		  // Bytes in RF RX buffer to read
		  // Read bytes into buffer
		  LoRa_receive(&LoRaClass, RF_RX_Buff, RF_available_bytes);
 8000dc0:	4b4e      	ldr	r3, [pc, #312]	; (8000efc <main+0x254>)
 8000dc2:	781b      	ldrb	r3, [r3, #0]
 8000dc4:	461a      	mov	r2, r3
 8000dc6:	494f      	ldr	r1, [pc, #316]	; (8000f04 <main+0x25c>)
 8000dc8:	4848      	ldr	r0, [pc, #288]	; (8000eec <main+0x244>)
 8000dca:	f7ff fe5b 	bl	8000a84 <LoRa_receive>
		  // Check packet identifier
		  if(!memcmp(RF_RX_Buff, (uint8_t*)header_string, 5)) {
 8000dce:	2205      	movs	r2, #5
 8000dd0:	494d      	ldr	r1, [pc, #308]	; (8000f08 <main+0x260>)
 8000dd2:	484c      	ldr	r0, [pc, #304]	; (8000f04 <main+0x25c>)
 8000dd4:	f009 f862 	bl	8009e9c <memcmp>
 8000dd8:	4603      	mov	r3, r0
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d112      	bne.n	8000e04 <main+0x15c>
			  // Header byte is correct
			  // Transmit bytes from RF_RX_Buff over UART not including packet identifier
			  HAL_UART_Transmit(USB_UART, &RF_RX_Buff[sizeof(header_string)], RF_available_bytes-sizeof(header_string), 1000);
 8000dde:	4b41      	ldr	r3, [pc, #260]	; (8000ee4 <main+0x23c>)
 8000de0:	6818      	ldr	r0, [r3, #0]
 8000de2:	4b46      	ldr	r3, [pc, #280]	; (8000efc <main+0x254>)
 8000de4:	781b      	ldrb	r3, [r3, #0]
 8000de6:	b29b      	uxth	r3, r3
 8000de8:	3b05      	subs	r3, #5
 8000dea:	b29a      	uxth	r2, r3
 8000dec:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000df0:	4946      	ldr	r1, [pc, #280]	; (8000f0c <main+0x264>)
 8000df2:	f003 fe08 	bl	8004a06 <HAL_UART_Transmit>
			  // Transmit bytes from RF_RX Buff over USB not including packet identifier
			  CDC_Transmit_HS(&RF_RX_Buff[sizeof(header_string)], RF_available_bytes-sizeof(header_string));
 8000df6:	4b41      	ldr	r3, [pc, #260]	; (8000efc <main+0x254>)
 8000df8:	781b      	ldrb	r3, [r3, #0]
 8000dfa:	3b05      	subs	r3, #5
 8000dfc:	4619      	mov	r1, r3
 8000dfe:	4843      	ldr	r0, [pc, #268]	; (8000f0c <main+0x264>)
 8000e00:	f008 fbc4 	bl	800958c <CDC_Transmit_HS>
		  }

		  HAL_GPIO_WritePin(INDICATOR_LED_GPIO_Port, INDICATOR_LED_Pin, GPIO_PIN_RESET);
 8000e04:	2200      	movs	r2, #0
 8000e06:	2104      	movs	r1, #4
 8000e08:	483d      	ldr	r0, [pc, #244]	; (8000f00 <main+0x258>)
 8000e0a:	f001 f8f1 	bl	8001ff0 <HAL_GPIO_WritePin>
		  RF_available_bytes = 0;
 8000e0e:	4b3b      	ldr	r3, [pc, #236]	; (8000efc <main+0x254>)
 8000e10:	2200      	movs	r2, #0
 8000e12:	701a      	strb	r2, [r3, #0]
	  }

	  if(UART_READY) {
 8000e14:	4b3e      	ldr	r3, [pc, #248]	; (8000f10 <main+0x268>)
 8000e16:	781b      	ldrb	r3, [r3, #0]
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d02c      	beq.n	8000e76 <main+0x1ce>
		  HAL_GPIO_WritePin(INDICATOR_LED_GPIO_Port, INDICATOR_LED_Pin, GPIO_PIN_SET);
 8000e1c:	2201      	movs	r2, #1
 8000e1e:	2104      	movs	r1, #4
 8000e20:	4837      	ldr	r0, [pc, #220]	; (8000f00 <main+0x258>)
 8000e22:	f001 f8e5 	bl	8001ff0 <HAL_GPIO_WritePin>
		  UART_READY = false;
 8000e26:	4b3a      	ldr	r3, [pc, #232]	; (8000f10 <main+0x268>)
 8000e28:	2200      	movs	r2, #0
 8000e2a:	701a      	strb	r2, [r3, #0]
		  uint8_t sendBuff[256+5];
		  // Add packet identifier
		  memcpy(&sendBuff, (uint8_t*)header_string, sizeof(header_string));
 8000e2c:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8000e30:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000e34:	4a34      	ldr	r2, [pc, #208]	; (8000f08 <main+0x260>)
 8000e36:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000e3a:	6018      	str	r0, [r3, #0]
 8000e3c:	3304      	adds	r3, #4
 8000e3e:	7019      	strb	r1, [r3, #0]
		  memcpy(&sendBuff[sizeof(header_string)], &UART_Buff, sizeof(UART_Buff));
 8000e40:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8000e44:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000e48:	4a27      	ldr	r2, [pc, #156]	; (8000ee8 <main+0x240>)
 8000e4a:	1d5c      	adds	r4, r3, #5
 8000e4c:	4613      	mov	r3, r2
 8000e4e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8000e50:	6020      	str	r0, [r4, #0]
 8000e52:	6061      	str	r1, [r4, #4]
 8000e54:	60a2      	str	r2, [r4, #8]
		  // Transmit UART buffer over RF
		  if (!LoRa_transmit(&LoRaClass, sendBuff, (uint8_t)(sizeof(header_string)+sizeof(UART_Buff)), 1000)) {
 8000e56:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8000e5a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e5e:	2211      	movs	r2, #17
 8000e60:	4822      	ldr	r0, [pc, #136]	; (8000eec <main+0x244>)
 8000e62:	f7ff fdab 	bl	80009bc <LoRa_transmit>
			  // Print error msg
		  }
		  LoRa_startReceiving(&LoRaClass);
 8000e66:	4821      	ldr	r0, [pc, #132]	; (8000eec <main+0x244>)
 8000e68:	f7ff fe00 	bl	8000a6c <LoRa_startReceiving>
		  HAL_GPIO_WritePin(INDICATOR_LED_GPIO_Port, INDICATOR_LED_Pin, GPIO_PIN_RESET);
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	2104      	movs	r1, #4
 8000e70:	4823      	ldr	r0, [pc, #140]	; (8000f00 <main+0x258>)
 8000e72:	f001 f8bd 	bl	8001ff0 <HAL_GPIO_WritePin>
	  }

	  if(USB_READY) {
 8000e76:	4b27      	ldr	r3, [pc, #156]	; (8000f14 <main+0x26c>)
 8000e78:	781b      	ldrb	r3, [r3, #0]
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d097      	beq.n	8000dae <main+0x106>
		  HAL_GPIO_WritePin(INDICATOR_LED_GPIO_Port, INDICATOR_LED_Pin, GPIO_PIN_SET);
 8000e7e:	2201      	movs	r2, #1
 8000e80:	2104      	movs	r1, #4
 8000e82:	481f      	ldr	r0, [pc, #124]	; (8000f00 <main+0x258>)
 8000e84:	f001 f8b4 	bl	8001ff0 <HAL_GPIO_WritePin>
		  uint8_t sendBuff[256+5];
		  // Add packet identifier
		  memcpy(&sendBuff, (uint8_t*)header_string, sizeof(header_string));
 8000e88:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8000e8c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000e90:	4a1d      	ldr	r2, [pc, #116]	; (8000f08 <main+0x260>)
 8000e92:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000e96:	6018      	str	r0, [r3, #0]
 8000e98:	3304      	adds	r3, #4
 8000e9a:	7019      	strb	r1, [r3, #0]
		  memcpy(&sendBuff[sizeof(header_string)], &USB_Buff, USB_rx_data_len);
 8000e9c:	4b1e      	ldr	r3, [pc, #120]	; (8000f18 <main+0x270>)
 8000e9e:	781b      	ldrb	r3, [r3, #0]
 8000ea0:	461a      	mov	r2, r3
 8000ea2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000ea6:	3305      	adds	r3, #5
 8000ea8:	491c      	ldr	r1, [pc, #112]	; (8000f1c <main+0x274>)
 8000eaa:	4618      	mov	r0, r3
 8000eac:	f009 f806 	bl	8009ebc <memcpy>
		  // Transmit USB buffer over RF
		  if (!LoRa_transmit(&LoRaClass, sendBuff, USB_rx_data_len+sizeof(header_string), 1000)) {
 8000eb0:	4b19      	ldr	r3, [pc, #100]	; (8000f18 <main+0x270>)
 8000eb2:	781b      	ldrb	r3, [r3, #0]
 8000eb4:	3305      	adds	r3, #5
 8000eb6:	b2da      	uxtb	r2, r3
 8000eb8:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8000ebc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ec0:	480a      	ldr	r0, [pc, #40]	; (8000eec <main+0x244>)
 8000ec2:	f7ff fd7b 	bl	80009bc <LoRa_transmit>
		  			  // Print error msg
		  }
		  USB_READY = false;
 8000ec6:	4b13      	ldr	r3, [pc, #76]	; (8000f14 <main+0x26c>)
 8000ec8:	2200      	movs	r2, #0
 8000eca:	701a      	strb	r2, [r3, #0]
		  USB_rx_data_len = 0;
 8000ecc:	4b12      	ldr	r3, [pc, #72]	; (8000f18 <main+0x270>)
 8000ece:	2200      	movs	r2, #0
 8000ed0:	701a      	strb	r2, [r3, #0]
		  LoRa_startReceiving(&LoRaClass);
 8000ed2:	4806      	ldr	r0, [pc, #24]	; (8000eec <main+0x244>)
 8000ed4:	f7ff fdca 	bl	8000a6c <LoRa_startReceiving>
		  HAL_GPIO_WritePin(INDICATOR_LED_GPIO_Port, INDICATOR_LED_Pin, GPIO_PIN_RESET);
 8000ed8:	2200      	movs	r2, #0
 8000eda:	2104      	movs	r1, #4
 8000edc:	4808      	ldr	r0, [pc, #32]	; (8000f00 <main+0x258>)
 8000ede:	f001 f887 	bl	8001ff0 <HAL_GPIO_WritePin>
	  if(RF_available_bytes) {
 8000ee2:	e764      	b.n	8000dae <main+0x106>
 8000ee4:	20000000 	.word	0x20000000
 8000ee8:	20000370 	.word	0x20000370
 8000eec:	20000484 	.word	0x20000484
 8000ef0:	20000004 	.word	0x20000004
 8000ef4:	40020000 	.word	0x40020000
 8000ef8:	40020400 	.word	0x40020400
 8000efc:	2000026c 	.word	0x2000026c
 8000f00:	40020c00 	.word	0x40020c00
 8000f04:	20000270 	.word	0x20000270
 8000f08:	20000008 	.word	0x20000008
 8000f0c:	20000275 	.word	0x20000275
 8000f10:	2000037c 	.word	0x2000037c
 8000f14:	20000480 	.word	0x20000480
 8000f18:	20000481 	.word	0x20000481
 8000f1c:	20000380 	.word	0x20000380

08000f20 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b094      	sub	sp, #80	; 0x50
 8000f24:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f26:	f107 0320 	add.w	r3, r7, #32
 8000f2a:	2230      	movs	r2, #48	; 0x30
 8000f2c:	2100      	movs	r1, #0
 8000f2e:	4618      	mov	r0, r3
 8000f30:	f008 ffd2 	bl	8009ed8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f34:	f107 030c 	add.w	r3, r7, #12
 8000f38:	2200      	movs	r2, #0
 8000f3a:	601a      	str	r2, [r3, #0]
 8000f3c:	605a      	str	r2, [r3, #4]
 8000f3e:	609a      	str	r2, [r3, #8]
 8000f40:	60da      	str	r2, [r3, #12]
 8000f42:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f44:	2300      	movs	r3, #0
 8000f46:	60bb      	str	r3, [r7, #8]
 8000f48:	4b28      	ldr	r3, [pc, #160]	; (8000fec <SystemClock_Config+0xcc>)
 8000f4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f4c:	4a27      	ldr	r2, [pc, #156]	; (8000fec <SystemClock_Config+0xcc>)
 8000f4e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f52:	6413      	str	r3, [r2, #64]	; 0x40
 8000f54:	4b25      	ldr	r3, [pc, #148]	; (8000fec <SystemClock_Config+0xcc>)
 8000f56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f58:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f5c:	60bb      	str	r3, [r7, #8]
 8000f5e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f60:	2300      	movs	r3, #0
 8000f62:	607b      	str	r3, [r7, #4]
 8000f64:	4b22      	ldr	r3, [pc, #136]	; (8000ff0 <SystemClock_Config+0xd0>)
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	4a21      	ldr	r2, [pc, #132]	; (8000ff0 <SystemClock_Config+0xd0>)
 8000f6a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f6e:	6013      	str	r3, [r2, #0]
 8000f70:	4b1f      	ldr	r3, [pc, #124]	; (8000ff0 <SystemClock_Config+0xd0>)
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f78:	607b      	str	r3, [r7, #4]
 8000f7a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000f7c:	2301      	movs	r3, #1
 8000f7e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000f80:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000f84:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f86:	2302      	movs	r3, #2
 8000f88:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000f8a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000f8e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 12;
 8000f90:	230c      	movs	r3, #12
 8000f92:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000f94:	23a8      	movs	r3, #168	; 0xa8
 8000f96:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000f98:	2302      	movs	r3, #2
 8000f9a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000f9c:	2307      	movs	r3, #7
 8000f9e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fa0:	f107 0320 	add.w	r3, r7, #32
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	f002 fad3 	bl	8003550 <HAL_RCC_OscConfig>
 8000faa:	4603      	mov	r3, r0
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d001      	beq.n	8000fb4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000fb0:	f000 f9c0 	bl	8001334 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fb4:	230f      	movs	r3, #15
 8000fb6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fb8:	2302      	movs	r3, #2
 8000fba:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000fc0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000fc4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000fc6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fca:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000fcc:	f107 030c 	add.w	r3, r7, #12
 8000fd0:	2105      	movs	r1, #5
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	f002 fd34 	bl	8003a40 <HAL_RCC_ClockConfig>
 8000fd8:	4603      	mov	r3, r0
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d001      	beq.n	8000fe2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000fde:	f000 f9a9 	bl	8001334 <Error_Handler>
  }
}
 8000fe2:	bf00      	nop
 8000fe4:	3750      	adds	r7, #80	; 0x50
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bd80      	pop	{r7, pc}
 8000fea:	bf00      	nop
 8000fec:	40023800 	.word	0x40023800
 8000ff0:	40007000 	.word	0x40007000

08000ff4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000ff8:	4b17      	ldr	r3, [pc, #92]	; (8001058 <MX_SPI1_Init+0x64>)
 8000ffa:	4a18      	ldr	r2, [pc, #96]	; (800105c <MX_SPI1_Init+0x68>)
 8000ffc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000ffe:	4b16      	ldr	r3, [pc, #88]	; (8001058 <MX_SPI1_Init+0x64>)
 8001000:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001004:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001006:	4b14      	ldr	r3, [pc, #80]	; (8001058 <MX_SPI1_Init+0x64>)
 8001008:	2200      	movs	r2, #0
 800100a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800100c:	4b12      	ldr	r3, [pc, #72]	; (8001058 <MX_SPI1_Init+0x64>)
 800100e:	2200      	movs	r2, #0
 8001010:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001012:	4b11      	ldr	r3, [pc, #68]	; (8001058 <MX_SPI1_Init+0x64>)
 8001014:	2200      	movs	r2, #0
 8001016:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001018:	4b0f      	ldr	r3, [pc, #60]	; (8001058 <MX_SPI1_Init+0x64>)
 800101a:	2200      	movs	r2, #0
 800101c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800101e:	4b0e      	ldr	r3, [pc, #56]	; (8001058 <MX_SPI1_Init+0x64>)
 8001020:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001024:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8001026:	4b0c      	ldr	r3, [pc, #48]	; (8001058 <MX_SPI1_Init+0x64>)
 8001028:	2230      	movs	r2, #48	; 0x30
 800102a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800102c:	4b0a      	ldr	r3, [pc, #40]	; (8001058 <MX_SPI1_Init+0x64>)
 800102e:	2200      	movs	r2, #0
 8001030:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001032:	4b09      	ldr	r3, [pc, #36]	; (8001058 <MX_SPI1_Init+0x64>)
 8001034:	2200      	movs	r2, #0
 8001036:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001038:	4b07      	ldr	r3, [pc, #28]	; (8001058 <MX_SPI1_Init+0x64>)
 800103a:	2200      	movs	r2, #0
 800103c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800103e:	4b06      	ldr	r3, [pc, #24]	; (8001058 <MX_SPI1_Init+0x64>)
 8001040:	220a      	movs	r2, #10
 8001042:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001044:	4804      	ldr	r0, [pc, #16]	; (8001058 <MX_SPI1_Init+0x64>)
 8001046:	f002 fedb 	bl	8003e00 <HAL_SPI_Init>
 800104a:	4603      	mov	r3, r0
 800104c:	2b00      	cmp	r3, #0
 800104e:	d001      	beq.n	8001054 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001050:	f000 f970 	bl	8001334 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001054:	bf00      	nop
 8001056:	bd80      	pop	{r7, pc}
 8001058:	2000018c 	.word	0x2000018c
 800105c:	40013000 	.word	0x40013000

08001060 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001064:	4b11      	ldr	r3, [pc, #68]	; (80010ac <MX_USART1_UART_Init+0x4c>)
 8001066:	4a12      	ldr	r2, [pc, #72]	; (80010b0 <MX_USART1_UART_Init+0x50>)
 8001068:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800106a:	4b10      	ldr	r3, [pc, #64]	; (80010ac <MX_USART1_UART_Init+0x4c>)
 800106c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001070:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001072:	4b0e      	ldr	r3, [pc, #56]	; (80010ac <MX_USART1_UART_Init+0x4c>)
 8001074:	2200      	movs	r2, #0
 8001076:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001078:	4b0c      	ldr	r3, [pc, #48]	; (80010ac <MX_USART1_UART_Init+0x4c>)
 800107a:	2200      	movs	r2, #0
 800107c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800107e:	4b0b      	ldr	r3, [pc, #44]	; (80010ac <MX_USART1_UART_Init+0x4c>)
 8001080:	2200      	movs	r2, #0
 8001082:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001084:	4b09      	ldr	r3, [pc, #36]	; (80010ac <MX_USART1_UART_Init+0x4c>)
 8001086:	220c      	movs	r2, #12
 8001088:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800108a:	4b08      	ldr	r3, [pc, #32]	; (80010ac <MX_USART1_UART_Init+0x4c>)
 800108c:	2200      	movs	r2, #0
 800108e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001090:	4b06      	ldr	r3, [pc, #24]	; (80010ac <MX_USART1_UART_Init+0x4c>)
 8001092:	2200      	movs	r2, #0
 8001094:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001096:	4805      	ldr	r0, [pc, #20]	; (80010ac <MX_USART1_UART_Init+0x4c>)
 8001098:	f003 fc68 	bl	800496c <HAL_UART_Init>
 800109c:	4603      	mov	r3, r0
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d001      	beq.n	80010a6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80010a2:	f000 f947 	bl	8001334 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80010a6:	bf00      	nop
 80010a8:	bd80      	pop	{r7, pc}
 80010aa:	bf00      	nop
 80010ac:	200001e4 	.word	0x200001e4
 80010b0:	40011000 	.word	0x40011000

080010b4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80010b8:	4b11      	ldr	r3, [pc, #68]	; (8001100 <MX_USART2_UART_Init+0x4c>)
 80010ba:	4a12      	ldr	r2, [pc, #72]	; (8001104 <MX_USART2_UART_Init+0x50>)
 80010bc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80010be:	4b10      	ldr	r3, [pc, #64]	; (8001100 <MX_USART2_UART_Init+0x4c>)
 80010c0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80010c4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80010c6:	4b0e      	ldr	r3, [pc, #56]	; (8001100 <MX_USART2_UART_Init+0x4c>)
 80010c8:	2200      	movs	r2, #0
 80010ca:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80010cc:	4b0c      	ldr	r3, [pc, #48]	; (8001100 <MX_USART2_UART_Init+0x4c>)
 80010ce:	2200      	movs	r2, #0
 80010d0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80010d2:	4b0b      	ldr	r3, [pc, #44]	; (8001100 <MX_USART2_UART_Init+0x4c>)
 80010d4:	2200      	movs	r2, #0
 80010d6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80010d8:	4b09      	ldr	r3, [pc, #36]	; (8001100 <MX_USART2_UART_Init+0x4c>)
 80010da:	220c      	movs	r2, #12
 80010dc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 80010de:	4b08      	ldr	r3, [pc, #32]	; (8001100 <MX_USART2_UART_Init+0x4c>)
 80010e0:	f44f 7240 	mov.w	r2, #768	; 0x300
 80010e4:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80010e6:	4b06      	ldr	r3, [pc, #24]	; (8001100 <MX_USART2_UART_Init+0x4c>)
 80010e8:	2200      	movs	r2, #0
 80010ea:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80010ec:	4804      	ldr	r0, [pc, #16]	; (8001100 <MX_USART2_UART_Init+0x4c>)
 80010ee:	f003 fc3d 	bl	800496c <HAL_UART_Init>
 80010f2:	4603      	mov	r3, r0
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d001      	beq.n	80010fc <MX_USART2_UART_Init+0x48>
  {
    Error_Handler();
 80010f8:	f000 f91c 	bl	8001334 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80010fc:	bf00      	nop
 80010fe:	bd80      	pop	{r7, pc}
 8001100:	20000228 	.word	0x20000228
 8001104:	40004400 	.word	0x40004400

08001108 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b08a      	sub	sp, #40	; 0x28
 800110c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800110e:	f107 0314 	add.w	r3, r7, #20
 8001112:	2200      	movs	r2, #0
 8001114:	601a      	str	r2, [r3, #0]
 8001116:	605a      	str	r2, [r3, #4]
 8001118:	609a      	str	r2, [r3, #8]
 800111a:	60da      	str	r2, [r3, #12]
 800111c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800111e:	2300      	movs	r3, #0
 8001120:	613b      	str	r3, [r7, #16]
 8001122:	4b56      	ldr	r3, [pc, #344]	; (800127c <MX_GPIO_Init+0x174>)
 8001124:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001126:	4a55      	ldr	r2, [pc, #340]	; (800127c <MX_GPIO_Init+0x174>)
 8001128:	f043 0304 	orr.w	r3, r3, #4
 800112c:	6313      	str	r3, [r2, #48]	; 0x30
 800112e:	4b53      	ldr	r3, [pc, #332]	; (800127c <MX_GPIO_Init+0x174>)
 8001130:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001132:	f003 0304 	and.w	r3, r3, #4
 8001136:	613b      	str	r3, [r7, #16]
 8001138:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800113a:	2300      	movs	r3, #0
 800113c:	60fb      	str	r3, [r7, #12]
 800113e:	4b4f      	ldr	r3, [pc, #316]	; (800127c <MX_GPIO_Init+0x174>)
 8001140:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001142:	4a4e      	ldr	r2, [pc, #312]	; (800127c <MX_GPIO_Init+0x174>)
 8001144:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001148:	6313      	str	r3, [r2, #48]	; 0x30
 800114a:	4b4c      	ldr	r3, [pc, #304]	; (800127c <MX_GPIO_Init+0x174>)
 800114c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800114e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001152:	60fb      	str	r3, [r7, #12]
 8001154:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001156:	2300      	movs	r3, #0
 8001158:	60bb      	str	r3, [r7, #8]
 800115a:	4b48      	ldr	r3, [pc, #288]	; (800127c <MX_GPIO_Init+0x174>)
 800115c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800115e:	4a47      	ldr	r2, [pc, #284]	; (800127c <MX_GPIO_Init+0x174>)
 8001160:	f043 0301 	orr.w	r3, r3, #1
 8001164:	6313      	str	r3, [r2, #48]	; 0x30
 8001166:	4b45      	ldr	r3, [pc, #276]	; (800127c <MX_GPIO_Init+0x174>)
 8001168:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800116a:	f003 0301 	and.w	r3, r3, #1
 800116e:	60bb      	str	r3, [r7, #8]
 8001170:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001172:	2300      	movs	r3, #0
 8001174:	607b      	str	r3, [r7, #4]
 8001176:	4b41      	ldr	r3, [pc, #260]	; (800127c <MX_GPIO_Init+0x174>)
 8001178:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800117a:	4a40      	ldr	r2, [pc, #256]	; (800127c <MX_GPIO_Init+0x174>)
 800117c:	f043 0302 	orr.w	r3, r3, #2
 8001180:	6313      	str	r3, [r2, #48]	; 0x30
 8001182:	4b3e      	ldr	r3, [pc, #248]	; (800127c <MX_GPIO_Init+0x174>)
 8001184:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001186:	f003 0302 	and.w	r3, r3, #2
 800118a:	607b      	str	r3, [r7, #4]
 800118c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800118e:	2300      	movs	r3, #0
 8001190:	603b      	str	r3, [r7, #0]
 8001192:	4b3a      	ldr	r3, [pc, #232]	; (800127c <MX_GPIO_Init+0x174>)
 8001194:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001196:	4a39      	ldr	r2, [pc, #228]	; (800127c <MX_GPIO_Init+0x174>)
 8001198:	f043 0308 	orr.w	r3, r3, #8
 800119c:	6313      	str	r3, [r2, #48]	; 0x30
 800119e:	4b37      	ldr	r3, [pc, #220]	; (800127c <MX_GPIO_Init+0x174>)
 80011a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011a2:	f003 0308 	and.w	r3, r3, #8
 80011a6:	603b      	str	r3, [r7, #0]
 80011a8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RF_SPI_NSS_GPIO_Port, RF_SPI_NSS_Pin, GPIO_PIN_RESET);
 80011aa:	2200      	movs	r2, #0
 80011ac:	2110      	movs	r1, #16
 80011ae:	4834      	ldr	r0, [pc, #208]	; (8001280 <MX_GPIO_Init+0x178>)
 80011b0:	f000 ff1e 	bl	8001ff0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RESET_RF_GPIO_Port, RESET_RF_Pin, GPIO_PIN_RESET);
 80011b4:	2200      	movs	r2, #0
 80011b6:	2101      	movs	r1, #1
 80011b8:	4832      	ldr	r0, [pc, #200]	; (8001284 <MX_GPIO_Init+0x17c>)
 80011ba:	f000 ff19 	bl	8001ff0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(INDICATOR_LED_GPIO_Port, INDICATOR_LED_Pin, GPIO_PIN_RESET);
 80011be:	2200      	movs	r2, #0
 80011c0:	2104      	movs	r1, #4
 80011c2:	4831      	ldr	r0, [pc, #196]	; (8001288 <MX_GPIO_Init+0x180>)
 80011c4:	f000 ff14 	bl	8001ff0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : RF_SPI_NSS_Pin */
  GPIO_InitStruct.Pin = RF_SPI_NSS_Pin;
 80011c8:	2310      	movs	r3, #16
 80011ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011cc:	2301      	movs	r3, #1
 80011ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d0:	2300      	movs	r3, #0
 80011d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011d4:	2300      	movs	r3, #0
 80011d6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(RF_SPI_NSS_GPIO_Port, &GPIO_InitStruct);
 80011d8:	f107 0314 	add.w	r3, r7, #20
 80011dc:	4619      	mov	r1, r3
 80011de:	4828      	ldr	r0, [pc, #160]	; (8001280 <MX_GPIO_Init+0x178>)
 80011e0:	f000 fd6a 	bl	8001cb8 <HAL_GPIO_Init>

  /*Configure GPIO pin : RESET_RF_Pin */
  GPIO_InitStruct.Pin = RESET_RF_Pin;
 80011e4:	2301      	movs	r3, #1
 80011e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011e8:	2301      	movs	r3, #1
 80011ea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ec:	2300      	movs	r3, #0
 80011ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011f0:	2300      	movs	r3, #0
 80011f2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(RESET_RF_GPIO_Port, &GPIO_InitStruct);
 80011f4:	f107 0314 	add.w	r3, r7, #20
 80011f8:	4619      	mov	r1, r3
 80011fa:	4822      	ldr	r0, [pc, #136]	; (8001284 <MX_GPIO_Init+0x17c>)
 80011fc:	f000 fd5c 	bl	8001cb8 <HAL_GPIO_Init>

  /*Configure GPIO pins : IO0_RF_Pin IO1_RF_Pin IO2_RF_Pin IO3_RF_Pin
                           IO4_RF_Pin */
  GPIO_InitStruct.Pin = IO0_RF_Pin|IO1_RF_Pin|IO2_RF_Pin|IO3_RF_Pin
 8001200:	f643 4302 	movw	r3, #15362	; 0x3c02
 8001204:	617b      	str	r3, [r7, #20]
                          |IO4_RF_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001206:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800120a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800120c:	2300      	movs	r3, #0
 800120e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001210:	f107 0314 	add.w	r3, r7, #20
 8001214:	4619      	mov	r1, r3
 8001216:	481b      	ldr	r0, [pc, #108]	; (8001284 <MX_GPIO_Init+0x17c>)
 8001218:	f000 fd4e 	bl	8001cb8 <HAL_GPIO_Init>

  /*Configure GPIO pin : IO5_RF_Pin */
  GPIO_InitStruct.Pin = IO5_RF_Pin;
 800121c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001220:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001222:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001226:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001228:	2300      	movs	r3, #0
 800122a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(IO5_RF_GPIO_Port, &GPIO_InitStruct);
 800122c:	f107 0314 	add.w	r3, r7, #20
 8001230:	4619      	mov	r1, r3
 8001232:	4813      	ldr	r0, [pc, #76]	; (8001280 <MX_GPIO_Init+0x178>)
 8001234:	f000 fd40 	bl	8001cb8 <HAL_GPIO_Init>

  /*Configure GPIO pin : INDICATOR_LED_Pin */
  GPIO_InitStruct.Pin = INDICATOR_LED_Pin;
 8001238:	2304      	movs	r3, #4
 800123a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800123c:	2301      	movs	r3, #1
 800123e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001240:	2300      	movs	r3, #0
 8001242:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001244:	2300      	movs	r3, #0
 8001246:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(INDICATOR_LED_GPIO_Port, &GPIO_InitStruct);
 8001248:	f107 0314 	add.w	r3, r7, #20
 800124c:	4619      	mov	r1, r3
 800124e:	480e      	ldr	r0, [pc, #56]	; (8001288 <MX_GPIO_Init+0x180>)
 8001250:	f000 fd32 	bl	8001cb8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8001254:	2200      	movs	r2, #0
 8001256:	2100      	movs	r1, #0
 8001258:	2007      	movs	r0, #7
 800125a:	f000 fc64 	bl	8001b26 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 800125e:	2007      	movs	r0, #7
 8001260:	f000 fc7d 	bl	8001b5e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001264:	2200      	movs	r2, #0
 8001266:	2100      	movs	r1, #0
 8001268:	2028      	movs	r0, #40	; 0x28
 800126a:	f000 fc5c 	bl	8001b26 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800126e:	2028      	movs	r0, #40	; 0x28
 8001270:	f000 fc75 	bl	8001b5e <HAL_NVIC_EnableIRQ>

}
 8001274:	bf00      	nop
 8001276:	3728      	adds	r7, #40	; 0x28
 8001278:	46bd      	mov	sp, r7
 800127a:	bd80      	pop	{r7, pc}
 800127c:	40023800 	.word	0x40023800
 8001280:	40020000 	.word	0x40020000
 8001284:	40020400 	.word	0x40020400
 8001288:	40020c00 	.word	0x40020c00

0800128c <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 800128c:	b580      	push	{r7, lr}
 800128e:	b082      	sub	sp, #8
 8001290:	af00      	add	r7, sp, #0
 8001292:	4603      	mov	r3, r0
 8001294:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == LoRaClass.DIO0_pin){
 8001296:	4b08      	ldr	r3, [pc, #32]	; (80012b8 <HAL_GPIO_EXTI_Callback+0x2c>)
 8001298:	8a9b      	ldrh	r3, [r3, #20]
 800129a:	88fa      	ldrh	r2, [r7, #6]
 800129c:	429a      	cmp	r2, r3
 800129e:	d106      	bne.n	80012ae <HAL_GPIO_EXTI_Callback+0x22>
		RF_available_bytes = LoRa_received_bytes(&LoRaClass);
 80012a0:	4805      	ldr	r0, [pc, #20]	; (80012b8 <HAL_GPIO_EXTI_Callback+0x2c>)
 80012a2:	f7ff fcf3 	bl	8000c8c <LoRa_received_bytes>
 80012a6:	4603      	mov	r3, r0
 80012a8:	461a      	mov	r2, r3
 80012aa:	4b04      	ldr	r3, [pc, #16]	; (80012bc <HAL_GPIO_EXTI_Callback+0x30>)
 80012ac:	701a      	strb	r2, [r3, #0]
	}
}
 80012ae:	bf00      	nop
 80012b0:	3708      	adds	r7, #8
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bd80      	pop	{r7, pc}
 80012b6:	bf00      	nop
 80012b8:	20000484 	.word	0x20000484
 80012bc:	2000026c 	.word	0x2000026c

080012c0 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b082      	sub	sp, #8
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
    HAL_UART_Receive_IT(USB_UART, UART_Buff, sizeof(UART_Buff));
 80012c8:	4b06      	ldr	r3, [pc, #24]	; (80012e4 <HAL_UART_RxCpltCallback+0x24>)
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	220c      	movs	r2, #12
 80012ce:	4906      	ldr	r1, [pc, #24]	; (80012e8 <HAL_UART_RxCpltCallback+0x28>)
 80012d0:	4618      	mov	r0, r3
 80012d2:	f003 fccc 	bl	8004c6e <HAL_UART_Receive_IT>
    UART_READY = true;
 80012d6:	4b05      	ldr	r3, [pc, #20]	; (80012ec <HAL_UART_RxCpltCallback+0x2c>)
 80012d8:	2201      	movs	r2, #1
 80012da:	701a      	strb	r2, [r3, #0]
}
 80012dc:	bf00      	nop
 80012de:	3708      	adds	r7, #8
 80012e0:	46bd      	mov	sp, r7
 80012e2:	bd80      	pop	{r7, pc}
 80012e4:	20000000 	.word	0x20000000
 80012e8:	20000370 	.word	0x20000370
 80012ec:	2000037c 	.word	0x2000037c

080012f0 <Blocking_LED_Blink>:

void Blocking_LED_Blink(uint8_t freq) {
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b082      	sub	sp, #8
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	4603      	mov	r3, r0
 80012f8:	71fb      	strb	r3, [r7, #7]
	while(1) {
		HAL_GPIO_WritePin(INDICATOR_LED_GPIO_Port, INDICATOR_LED_Pin, GPIO_PIN_SET);
 80012fa:	2201      	movs	r2, #1
 80012fc:	2104      	movs	r1, #4
 80012fe:	480c      	ldr	r0, [pc, #48]	; (8001330 <Blocking_LED_Blink+0x40>)
 8001300:	f000 fe76 	bl	8001ff0 <HAL_GPIO_WritePin>
		HAL_Delay(1000/freq);
 8001304:	79fb      	ldrb	r3, [r7, #7]
 8001306:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800130a:	fb92 f3f3 	sdiv	r3, r2, r3
 800130e:	4618      	mov	r0, r3
 8001310:	f000 fb0a 	bl	8001928 <HAL_Delay>
		HAL_GPIO_WritePin(INDICATOR_LED_GPIO_Port, INDICATOR_LED_Pin, GPIO_PIN_RESET);
 8001314:	2200      	movs	r2, #0
 8001316:	2104      	movs	r1, #4
 8001318:	4805      	ldr	r0, [pc, #20]	; (8001330 <Blocking_LED_Blink+0x40>)
 800131a:	f000 fe69 	bl	8001ff0 <HAL_GPIO_WritePin>
		HAL_Delay(1000/freq);
 800131e:	79fb      	ldrb	r3, [r7, #7]
 8001320:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001324:	fb92 f3f3 	sdiv	r3, r2, r3
 8001328:	4618      	mov	r0, r3
 800132a:	f000 fafd 	bl	8001928 <HAL_Delay>
		HAL_GPIO_WritePin(INDICATOR_LED_GPIO_Port, INDICATOR_LED_Pin, GPIO_PIN_SET);
 800132e:	e7e4      	b.n	80012fa <Blocking_LED_Blink+0xa>
 8001330:	40020c00 	.word	0x40020c00

08001334 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001334:	b480      	push	{r7}
 8001336:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001338:	b672      	cpsid	i
}
 800133a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800133c:	e7fe      	b.n	800133c <Error_Handler+0x8>
	...

08001340 <RetargetInit>:
#define STDOUT_FILENO 1
#define STDERR_FILENO 2

UART_HandleTypeDef *gHuart;

void RetargetInit(UART_HandleTypeDef *huart) {
 8001340:	b580      	push	{r7, lr}
 8001342:	b082      	sub	sp, #8
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
  gHuart = huart;
 8001348:	4a07      	ldr	r2, [pc, #28]	; (8001368 <RetargetInit+0x28>)
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	6013      	str	r3, [r2, #0]

  /* Disable I/O buffering for STDOUT stream, so that
   * chars are sent out as soon as they are printed. */
  setvbuf(stdout, NULL, _IONBF, 0);
 800134e:	4b07      	ldr	r3, [pc, #28]	; (800136c <RetargetInit+0x2c>)
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	6898      	ldr	r0, [r3, #8]
 8001354:	2300      	movs	r3, #0
 8001356:	2202      	movs	r2, #2
 8001358:	2100      	movs	r1, #0
 800135a:	f008 fdc5 	bl	8009ee8 <setvbuf>
}
 800135e:	bf00      	nop
 8001360:	3708      	adds	r7, #8
 8001362:	46bd      	mov	sp, r7
 8001364:	bd80      	pop	{r7, pc}
 8001366:	bf00      	nop
 8001368:	200004b0 	.word	0x200004b0
 800136c:	2000010c 	.word	0x2000010c

08001370 <_write>:

  errno = EBADF;
  return 0;
}

int _write(int fd, char* ptr, int len) {
 8001370:	b580      	push	{r7, lr}
 8001372:	b086      	sub	sp, #24
 8001374:	af00      	add	r7, sp, #0
 8001376:	60f8      	str	r0, [r7, #12]
 8001378:	60b9      	str	r1, [r7, #8]
 800137a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDOUT_FILENO || fd == STDERR_FILENO) {
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	2b01      	cmp	r3, #1
 8001380:	d002      	beq.n	8001388 <_write+0x18>
 8001382:	68fb      	ldr	r3, [r7, #12]
 8001384:	2b02      	cmp	r3, #2
 8001386:	d111      	bne.n	80013ac <_write+0x3c>
    hstatus = HAL_UART_Transmit(gHuart, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 8001388:	4b0e      	ldr	r3, [pc, #56]	; (80013c4 <_write+0x54>)
 800138a:	6818      	ldr	r0, [r3, #0]
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	b29a      	uxth	r2, r3
 8001390:	f04f 33ff 	mov.w	r3, #4294967295
 8001394:	68b9      	ldr	r1, [r7, #8]
 8001396:	f003 fb36 	bl	8004a06 <HAL_UART_Transmit>
 800139a:	4603      	mov	r3, r0
 800139c:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 800139e:	7dfb      	ldrb	r3, [r7, #23]
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d101      	bne.n	80013a8 <_write+0x38>
      return len;
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	e008      	b.n	80013ba <_write+0x4a>
    else
      return EIO;
 80013a8:	2305      	movs	r3, #5
 80013aa:	e006      	b.n	80013ba <_write+0x4a>
  }
  errno = EBADF;
 80013ac:	f008 fd4c 	bl	8009e48 <__errno>
 80013b0:	4603      	mov	r3, r0
 80013b2:	2209      	movs	r2, #9
 80013b4:	601a      	str	r2, [r3, #0]
  return -1;
 80013b6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80013ba:	4618      	mov	r0, r3
 80013bc:	3718      	adds	r7, #24
 80013be:	46bd      	mov	sp, r7
 80013c0:	bd80      	pop	{r7, pc}
 80013c2:	bf00      	nop
 80013c4:	200004b0 	.word	0x200004b0

080013c8 <_close>:

int _close(int fd) {
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b082      	sub	sp, #8
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	db04      	blt.n	80013e0 <_close+0x18>
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	2b02      	cmp	r3, #2
 80013da:	dc01      	bgt.n	80013e0 <_close+0x18>
    return 0;
 80013dc:	2300      	movs	r3, #0
 80013de:	e006      	b.n	80013ee <_close+0x26>

  errno = EBADF;
 80013e0:	f008 fd32 	bl	8009e48 <__errno>
 80013e4:	4603      	mov	r3, r0
 80013e6:	2209      	movs	r2, #9
 80013e8:	601a      	str	r2, [r3, #0]
  return -1;
 80013ea:	f04f 33ff 	mov.w	r3, #4294967295
}
 80013ee:	4618      	mov	r0, r3
 80013f0:	3708      	adds	r7, #8
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bd80      	pop	{r7, pc}

080013f6 <_lseek>:

int _lseek(int fd, int ptr, int dir) {
 80013f6:	b580      	push	{r7, lr}
 80013f8:	b084      	sub	sp, #16
 80013fa:	af00      	add	r7, sp, #0
 80013fc:	60f8      	str	r0, [r7, #12]
 80013fe:	60b9      	str	r1, [r7, #8]
 8001400:	607a      	str	r2, [r7, #4]
  (void) fd;
  (void) ptr;
  (void) dir;

  errno = EBADF;
 8001402:	f008 fd21 	bl	8009e48 <__errno>
 8001406:	4603      	mov	r3, r0
 8001408:	2209      	movs	r2, #9
 800140a:	601a      	str	r2, [r3, #0]
  return -1;
 800140c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001410:	4618      	mov	r0, r3
 8001412:	3710      	adds	r7, #16
 8001414:	46bd      	mov	sp, r7
 8001416:	bd80      	pop	{r7, pc}

08001418 <_read>:

int _read(int fd, char* ptr, int len) {
 8001418:	b580      	push	{r7, lr}
 800141a:	b086      	sub	sp, #24
 800141c:	af00      	add	r7, sp, #0
 800141e:	60f8      	str	r0, [r7, #12]
 8001420:	60b9      	str	r1, [r7, #8]
 8001422:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDIN_FILENO) {
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	2b00      	cmp	r3, #0
 8001428:	d110      	bne.n	800144c <_read+0x34>
    hstatus = HAL_UART_Receive(gHuart, (uint8_t *) ptr, 1, HAL_MAX_DELAY);
 800142a:	4b0e      	ldr	r3, [pc, #56]	; (8001464 <_read+0x4c>)
 800142c:	6818      	ldr	r0, [r3, #0]
 800142e:	f04f 33ff 	mov.w	r3, #4294967295
 8001432:	2201      	movs	r2, #1
 8001434:	68b9      	ldr	r1, [r7, #8]
 8001436:	f003 fb78 	bl	8004b2a <HAL_UART_Receive>
 800143a:	4603      	mov	r3, r0
 800143c:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 800143e:	7dfb      	ldrb	r3, [r7, #23]
 8001440:	2b00      	cmp	r3, #0
 8001442:	d101      	bne.n	8001448 <_read+0x30>
      return 1;
 8001444:	2301      	movs	r3, #1
 8001446:	e008      	b.n	800145a <_read+0x42>
    else
      return EIO;
 8001448:	2305      	movs	r3, #5
 800144a:	e006      	b.n	800145a <_read+0x42>
  }
  errno = EBADF;
 800144c:	f008 fcfc 	bl	8009e48 <__errno>
 8001450:	4603      	mov	r3, r0
 8001452:	2209      	movs	r2, #9
 8001454:	601a      	str	r2, [r3, #0]
  return -1;
 8001456:	f04f 33ff 	mov.w	r3, #4294967295
}
 800145a:	4618      	mov	r0, r3
 800145c:	3718      	adds	r7, #24
 800145e:	46bd      	mov	sp, r7
 8001460:	bd80      	pop	{r7, pc}
 8001462:	bf00      	nop
 8001464:	200004b0 	.word	0x200004b0

08001468 <_fstat>:

int _fstat(int fd, struct stat* st) {
 8001468:	b580      	push	{r7, lr}
 800146a:	b082      	sub	sp, #8
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
 8001470:	6039      	str	r1, [r7, #0]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO) {
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	2b00      	cmp	r3, #0
 8001476:	db08      	blt.n	800148a <_fstat+0x22>
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	2b02      	cmp	r3, #2
 800147c:	dc05      	bgt.n	800148a <_fstat+0x22>
    st->st_mode = S_IFCHR;
 800147e:	683b      	ldr	r3, [r7, #0]
 8001480:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001484:	605a      	str	r2, [r3, #4]
    return 0;
 8001486:	2300      	movs	r3, #0
 8001488:	e005      	b.n	8001496 <_fstat+0x2e>
  }

  errno = EBADF;
 800148a:	f008 fcdd 	bl	8009e48 <__errno>
 800148e:	4603      	mov	r3, r0
 8001490:	2209      	movs	r2, #9
 8001492:	601a      	str	r2, [r3, #0]
  return 0;
 8001494:	2300      	movs	r3, #0
}
 8001496:	4618      	mov	r0, r3
 8001498:	3708      	adds	r7, #8
 800149a:	46bd      	mov	sp, r7
 800149c:	bd80      	pop	{r7, pc}
	...

080014a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014a0:	b480      	push	{r7}
 80014a2:	b083      	sub	sp, #12
 80014a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014a6:	2300      	movs	r3, #0
 80014a8:	607b      	str	r3, [r7, #4]
 80014aa:	4b10      	ldr	r3, [pc, #64]	; (80014ec <HAL_MspInit+0x4c>)
 80014ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014ae:	4a0f      	ldr	r2, [pc, #60]	; (80014ec <HAL_MspInit+0x4c>)
 80014b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014b4:	6453      	str	r3, [r2, #68]	; 0x44
 80014b6:	4b0d      	ldr	r3, [pc, #52]	; (80014ec <HAL_MspInit+0x4c>)
 80014b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80014be:	607b      	str	r3, [r7, #4]
 80014c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80014c2:	2300      	movs	r3, #0
 80014c4:	603b      	str	r3, [r7, #0]
 80014c6:	4b09      	ldr	r3, [pc, #36]	; (80014ec <HAL_MspInit+0x4c>)
 80014c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ca:	4a08      	ldr	r2, [pc, #32]	; (80014ec <HAL_MspInit+0x4c>)
 80014cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014d0:	6413      	str	r3, [r2, #64]	; 0x40
 80014d2:	4b06      	ldr	r3, [pc, #24]	; (80014ec <HAL_MspInit+0x4c>)
 80014d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014da:	603b      	str	r3, [r7, #0]
 80014dc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014de:	bf00      	nop
 80014e0:	370c      	adds	r7, #12
 80014e2:	46bd      	mov	sp, r7
 80014e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e8:	4770      	bx	lr
 80014ea:	bf00      	nop
 80014ec:	40023800 	.word	0x40023800

080014f0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b08a      	sub	sp, #40	; 0x28
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014f8:	f107 0314 	add.w	r3, r7, #20
 80014fc:	2200      	movs	r2, #0
 80014fe:	601a      	str	r2, [r3, #0]
 8001500:	605a      	str	r2, [r3, #4]
 8001502:	609a      	str	r2, [r3, #8]
 8001504:	60da      	str	r2, [r3, #12]
 8001506:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	4a19      	ldr	r2, [pc, #100]	; (8001574 <HAL_SPI_MspInit+0x84>)
 800150e:	4293      	cmp	r3, r2
 8001510:	d12b      	bne.n	800156a <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001512:	2300      	movs	r3, #0
 8001514:	613b      	str	r3, [r7, #16]
 8001516:	4b18      	ldr	r3, [pc, #96]	; (8001578 <HAL_SPI_MspInit+0x88>)
 8001518:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800151a:	4a17      	ldr	r2, [pc, #92]	; (8001578 <HAL_SPI_MspInit+0x88>)
 800151c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001520:	6453      	str	r3, [r2, #68]	; 0x44
 8001522:	4b15      	ldr	r3, [pc, #84]	; (8001578 <HAL_SPI_MspInit+0x88>)
 8001524:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001526:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800152a:	613b      	str	r3, [r7, #16]
 800152c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800152e:	2300      	movs	r3, #0
 8001530:	60fb      	str	r3, [r7, #12]
 8001532:	4b11      	ldr	r3, [pc, #68]	; (8001578 <HAL_SPI_MspInit+0x88>)
 8001534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001536:	4a10      	ldr	r2, [pc, #64]	; (8001578 <HAL_SPI_MspInit+0x88>)
 8001538:	f043 0301 	orr.w	r3, r3, #1
 800153c:	6313      	str	r3, [r2, #48]	; 0x30
 800153e:	4b0e      	ldr	r3, [pc, #56]	; (8001578 <HAL_SPI_MspInit+0x88>)
 8001540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001542:	f003 0301 	and.w	r3, r3, #1
 8001546:	60fb      	str	r3, [r7, #12]
 8001548:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800154a:	23e0      	movs	r3, #224	; 0xe0
 800154c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800154e:	2302      	movs	r3, #2
 8001550:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001552:	2300      	movs	r3, #0
 8001554:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001556:	2303      	movs	r3, #3
 8001558:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800155a:	2305      	movs	r3, #5
 800155c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800155e:	f107 0314 	add.w	r3, r7, #20
 8001562:	4619      	mov	r1, r3
 8001564:	4805      	ldr	r0, [pc, #20]	; (800157c <HAL_SPI_MspInit+0x8c>)
 8001566:	f000 fba7 	bl	8001cb8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800156a:	bf00      	nop
 800156c:	3728      	adds	r7, #40	; 0x28
 800156e:	46bd      	mov	sp, r7
 8001570:	bd80      	pop	{r7, pc}
 8001572:	bf00      	nop
 8001574:	40013000 	.word	0x40013000
 8001578:	40023800 	.word	0x40023800
 800157c:	40020000 	.word	0x40020000

08001580 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b08c      	sub	sp, #48	; 0x30
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001588:	f107 031c 	add.w	r3, r7, #28
 800158c:	2200      	movs	r2, #0
 800158e:	601a      	str	r2, [r3, #0]
 8001590:	605a      	str	r2, [r3, #4]
 8001592:	609a      	str	r2, [r3, #8]
 8001594:	60da      	str	r2, [r3, #12]
 8001596:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	4a3a      	ldr	r2, [pc, #232]	; (8001688 <HAL_UART_MspInit+0x108>)
 800159e:	4293      	cmp	r3, r2
 80015a0:	d135      	bne.n	800160e <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80015a2:	2300      	movs	r3, #0
 80015a4:	61bb      	str	r3, [r7, #24]
 80015a6:	4b39      	ldr	r3, [pc, #228]	; (800168c <HAL_UART_MspInit+0x10c>)
 80015a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015aa:	4a38      	ldr	r2, [pc, #224]	; (800168c <HAL_UART_MspInit+0x10c>)
 80015ac:	f043 0310 	orr.w	r3, r3, #16
 80015b0:	6453      	str	r3, [r2, #68]	; 0x44
 80015b2:	4b36      	ldr	r3, [pc, #216]	; (800168c <HAL_UART_MspInit+0x10c>)
 80015b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015b6:	f003 0310 	and.w	r3, r3, #16
 80015ba:	61bb      	str	r3, [r7, #24]
 80015bc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015be:	2300      	movs	r3, #0
 80015c0:	617b      	str	r3, [r7, #20]
 80015c2:	4b32      	ldr	r3, [pc, #200]	; (800168c <HAL_UART_MspInit+0x10c>)
 80015c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015c6:	4a31      	ldr	r2, [pc, #196]	; (800168c <HAL_UART_MspInit+0x10c>)
 80015c8:	f043 0301 	orr.w	r3, r3, #1
 80015cc:	6313      	str	r3, [r2, #48]	; 0x30
 80015ce:	4b2f      	ldr	r3, [pc, #188]	; (800168c <HAL_UART_MspInit+0x10c>)
 80015d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015d2:	f003 0301 	and.w	r3, r3, #1
 80015d6:	617b      	str	r3, [r7, #20]
 80015d8:	697b      	ldr	r3, [r7, #20]
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    PA11     ------> USART1_CTS
    PA12     ------> USART1_RTS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 80015da:	f44f 53f0 	mov.w	r3, #7680	; 0x1e00
 80015de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015e0:	2302      	movs	r3, #2
 80015e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015e4:	2300      	movs	r3, #0
 80015e6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015e8:	2303      	movs	r3, #3
 80015ea:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80015ec:	2307      	movs	r3, #7
 80015ee:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015f0:	f107 031c 	add.w	r3, r7, #28
 80015f4:	4619      	mov	r1, r3
 80015f6:	4826      	ldr	r0, [pc, #152]	; (8001690 <HAL_UART_MspInit+0x110>)
 80015f8:	f000 fb5e 	bl	8001cb8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80015fc:	2200      	movs	r2, #0
 80015fe:	2100      	movs	r1, #0
 8001600:	2025      	movs	r0, #37	; 0x25
 8001602:	f000 fa90 	bl	8001b26 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001606:	2025      	movs	r0, #37	; 0x25
 8001608:	f000 faa9 	bl	8001b5e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800160c:	e038      	b.n	8001680 <HAL_UART_MspInit+0x100>
  else if(huart->Instance==USART2)
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	4a20      	ldr	r2, [pc, #128]	; (8001694 <HAL_UART_MspInit+0x114>)
 8001614:	4293      	cmp	r3, r2
 8001616:	d133      	bne.n	8001680 <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001618:	2300      	movs	r3, #0
 800161a:	613b      	str	r3, [r7, #16]
 800161c:	4b1b      	ldr	r3, [pc, #108]	; (800168c <HAL_UART_MspInit+0x10c>)
 800161e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001620:	4a1a      	ldr	r2, [pc, #104]	; (800168c <HAL_UART_MspInit+0x10c>)
 8001622:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001626:	6413      	str	r3, [r2, #64]	; 0x40
 8001628:	4b18      	ldr	r3, [pc, #96]	; (800168c <HAL_UART_MspInit+0x10c>)
 800162a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800162c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001630:	613b      	str	r3, [r7, #16]
 8001632:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001634:	2300      	movs	r3, #0
 8001636:	60fb      	str	r3, [r7, #12]
 8001638:	4b14      	ldr	r3, [pc, #80]	; (800168c <HAL_UART_MspInit+0x10c>)
 800163a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800163c:	4a13      	ldr	r2, [pc, #76]	; (800168c <HAL_UART_MspInit+0x10c>)
 800163e:	f043 0301 	orr.w	r3, r3, #1
 8001642:	6313      	str	r3, [r2, #48]	; 0x30
 8001644:	4b11      	ldr	r3, [pc, #68]	; (800168c <HAL_UART_MspInit+0x10c>)
 8001646:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001648:	f003 0301 	and.w	r3, r3, #1
 800164c:	60fb      	str	r3, [r7, #12]
 800164e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8001650:	230f      	movs	r3, #15
 8001652:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001654:	2302      	movs	r3, #2
 8001656:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001658:	2300      	movs	r3, #0
 800165a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800165c:	2303      	movs	r3, #3
 800165e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001660:	2307      	movs	r3, #7
 8001662:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001664:	f107 031c 	add.w	r3, r7, #28
 8001668:	4619      	mov	r1, r3
 800166a:	4809      	ldr	r0, [pc, #36]	; (8001690 <HAL_UART_MspInit+0x110>)
 800166c:	f000 fb24 	bl	8001cb8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001670:	2200      	movs	r2, #0
 8001672:	2100      	movs	r1, #0
 8001674:	2026      	movs	r0, #38	; 0x26
 8001676:	f000 fa56 	bl	8001b26 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800167a:	2026      	movs	r0, #38	; 0x26
 800167c:	f000 fa6f 	bl	8001b5e <HAL_NVIC_EnableIRQ>
}
 8001680:	bf00      	nop
 8001682:	3730      	adds	r7, #48	; 0x30
 8001684:	46bd      	mov	sp, r7
 8001686:	bd80      	pop	{r7, pc}
 8001688:	40011000 	.word	0x40011000
 800168c:	40023800 	.word	0x40023800
 8001690:	40020000 	.word	0x40020000
 8001694:	40004400 	.word	0x40004400

08001698 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001698:	b480      	push	{r7}
 800169a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800169c:	e7fe      	b.n	800169c <NMI_Handler+0x4>

0800169e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800169e:	b480      	push	{r7}
 80016a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016a2:	e7fe      	b.n	80016a2 <HardFault_Handler+0x4>

080016a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016a4:	b480      	push	{r7}
 80016a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016a8:	e7fe      	b.n	80016a8 <MemManage_Handler+0x4>

080016aa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016aa:	b480      	push	{r7}
 80016ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016ae:	e7fe      	b.n	80016ae <BusFault_Handler+0x4>

080016b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016b0:	b480      	push	{r7}
 80016b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016b4:	e7fe      	b.n	80016b4 <UsageFault_Handler+0x4>

080016b6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80016b6:	b480      	push	{r7}
 80016b8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80016ba:	bf00      	nop
 80016bc:	46bd      	mov	sp, r7
 80016be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c2:	4770      	bx	lr

080016c4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016c4:	b480      	push	{r7}
 80016c6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016c8:	bf00      	nop
 80016ca:	46bd      	mov	sp, r7
 80016cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d0:	4770      	bx	lr

080016d2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80016d2:	b480      	push	{r7}
 80016d4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80016d6:	bf00      	nop
 80016d8:	46bd      	mov	sp, r7
 80016da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016de:	4770      	bx	lr

080016e0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80016e4:	f000 f900 	bl	80018e8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80016e8:	bf00      	nop
 80016ea:	bd80      	pop	{r7, pc}

080016ec <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(IO0_RF_Pin);
 80016f0:	2002      	movs	r0, #2
 80016f2:	f000 fc97 	bl	8002024 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 80016f6:	bf00      	nop
 80016f8:	bd80      	pop	{r7, pc}
	...

080016fc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001700:	4802      	ldr	r0, [pc, #8]	; (800170c <USART1_IRQHandler+0x10>)
 8001702:	f003 fae5 	bl	8004cd0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001706:	bf00      	nop
 8001708:	bd80      	pop	{r7, pc}
 800170a:	bf00      	nop
 800170c:	200001e4 	.word	0x200001e4

08001710 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001714:	4802      	ldr	r0, [pc, #8]	; (8001720 <USART2_IRQHandler+0x10>)
 8001716:	f003 fadb 	bl	8004cd0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800171a:	bf00      	nop
 800171c:	bd80      	pop	{r7, pc}
 800171e:	bf00      	nop
 8001720:	20000228 	.word	0x20000228

08001724 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(IO1_RF_Pin);
 8001728:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800172c:	f000 fc7a 	bl	8002024 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(IO2_RF_Pin);
 8001730:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8001734:	f000 fc76 	bl	8002024 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(IO3_RF_Pin);
 8001738:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800173c:	f000 fc72 	bl	8002024 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(IO4_RF_Pin);
 8001740:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001744:	f000 fc6e 	bl	8002024 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001748:	bf00      	nop
 800174a:	bd80      	pop	{r7, pc}

0800174c <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
 8001750:	4802      	ldr	r0, [pc, #8]	; (800175c <OTG_HS_IRQHandler+0x10>)
 8001752:	f000 fdcf 	bl	80022f4 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 8001756:	bf00      	nop
 8001758:	bd80      	pop	{r7, pc}
 800175a:	bf00      	nop
 800175c:	2000199c 	.word	0x2000199c

08001760 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b086      	sub	sp, #24
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001768:	4a14      	ldr	r2, [pc, #80]	; (80017bc <_sbrk+0x5c>)
 800176a:	4b15      	ldr	r3, [pc, #84]	; (80017c0 <_sbrk+0x60>)
 800176c:	1ad3      	subs	r3, r2, r3
 800176e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001770:	697b      	ldr	r3, [r7, #20]
 8001772:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001774:	4b13      	ldr	r3, [pc, #76]	; (80017c4 <_sbrk+0x64>)
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	2b00      	cmp	r3, #0
 800177a:	d102      	bne.n	8001782 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800177c:	4b11      	ldr	r3, [pc, #68]	; (80017c4 <_sbrk+0x64>)
 800177e:	4a12      	ldr	r2, [pc, #72]	; (80017c8 <_sbrk+0x68>)
 8001780:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001782:	4b10      	ldr	r3, [pc, #64]	; (80017c4 <_sbrk+0x64>)
 8001784:	681a      	ldr	r2, [r3, #0]
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	4413      	add	r3, r2
 800178a:	693a      	ldr	r2, [r7, #16]
 800178c:	429a      	cmp	r2, r3
 800178e:	d207      	bcs.n	80017a0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001790:	f008 fb5a 	bl	8009e48 <__errno>
 8001794:	4603      	mov	r3, r0
 8001796:	220c      	movs	r2, #12
 8001798:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800179a:	f04f 33ff 	mov.w	r3, #4294967295
 800179e:	e009      	b.n	80017b4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80017a0:	4b08      	ldr	r3, [pc, #32]	; (80017c4 <_sbrk+0x64>)
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80017a6:	4b07      	ldr	r3, [pc, #28]	; (80017c4 <_sbrk+0x64>)
 80017a8:	681a      	ldr	r2, [r3, #0]
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	4413      	add	r3, r2
 80017ae:	4a05      	ldr	r2, [pc, #20]	; (80017c4 <_sbrk+0x64>)
 80017b0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80017b2:	68fb      	ldr	r3, [r7, #12]
}
 80017b4:	4618      	mov	r0, r3
 80017b6:	3718      	adds	r7, #24
 80017b8:	46bd      	mov	sp, r7
 80017ba:	bd80      	pop	{r7, pc}
 80017bc:	20020000 	.word	0x20020000
 80017c0:	00000400 	.word	0x00000400
 80017c4:	200004b4 	.word	0x200004b4
 80017c8:	200020d8 	.word	0x200020d8

080017cc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80017cc:	b480      	push	{r7}
 80017ce:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80017d0:	4b06      	ldr	r3, [pc, #24]	; (80017ec <SystemInit+0x20>)
 80017d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80017d6:	4a05      	ldr	r2, [pc, #20]	; (80017ec <SystemInit+0x20>)
 80017d8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80017dc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80017e0:	bf00      	nop
 80017e2:	46bd      	mov	sp, r7
 80017e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e8:	4770      	bx	lr
 80017ea:	bf00      	nop
 80017ec:	e000ed00 	.word	0xe000ed00

080017f0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80017f0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001828 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80017f4:	480d      	ldr	r0, [pc, #52]	; (800182c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80017f6:	490e      	ldr	r1, [pc, #56]	; (8001830 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80017f8:	4a0e      	ldr	r2, [pc, #56]	; (8001834 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80017fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80017fc:	e002      	b.n	8001804 <LoopCopyDataInit>

080017fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001800:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001802:	3304      	adds	r3, #4

08001804 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001804:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001806:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001808:	d3f9      	bcc.n	80017fe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800180a:	4a0b      	ldr	r2, [pc, #44]	; (8001838 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800180c:	4c0b      	ldr	r4, [pc, #44]	; (800183c <LoopFillZerobss+0x26>)
  movs r3, #0
 800180e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001810:	e001      	b.n	8001816 <LoopFillZerobss>

08001812 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001812:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001814:	3204      	adds	r2, #4

08001816 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001816:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001818:	d3fb      	bcc.n	8001812 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800181a:	f7ff ffd7 	bl	80017cc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800181e:	f008 fb19 	bl	8009e54 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001822:	f7ff fa41 	bl	8000ca8 <main>
  bx  lr    
 8001826:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001828:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800182c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001830:	20000170 	.word	0x20000170
  ldr r2, =_sidata
 8001834:	0800a860 	.word	0x0800a860
  ldr r2, =_sbss
 8001838:	20000170 	.word	0x20000170
  ldr r4, =_ebss
 800183c:	200020d8 	.word	0x200020d8

08001840 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001840:	e7fe      	b.n	8001840 <ADC_IRQHandler>
	...

08001844 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001848:	4b0e      	ldr	r3, [pc, #56]	; (8001884 <HAL_Init+0x40>)
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	4a0d      	ldr	r2, [pc, #52]	; (8001884 <HAL_Init+0x40>)
 800184e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001852:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001854:	4b0b      	ldr	r3, [pc, #44]	; (8001884 <HAL_Init+0x40>)
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	4a0a      	ldr	r2, [pc, #40]	; (8001884 <HAL_Init+0x40>)
 800185a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800185e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001860:	4b08      	ldr	r3, [pc, #32]	; (8001884 <HAL_Init+0x40>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	4a07      	ldr	r2, [pc, #28]	; (8001884 <HAL_Init+0x40>)
 8001866:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800186a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800186c:	2003      	movs	r0, #3
 800186e:	f000 f94f 	bl	8001b10 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001872:	200f      	movs	r0, #15
 8001874:	f000 f808 	bl	8001888 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001878:	f7ff fe12 	bl	80014a0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800187c:	2300      	movs	r3, #0
}
 800187e:	4618      	mov	r0, r3
 8001880:	bd80      	pop	{r7, pc}
 8001882:	bf00      	nop
 8001884:	40023c00 	.word	0x40023c00

08001888 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	b082      	sub	sp, #8
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001890:	4b12      	ldr	r3, [pc, #72]	; (80018dc <HAL_InitTick+0x54>)
 8001892:	681a      	ldr	r2, [r3, #0]
 8001894:	4b12      	ldr	r3, [pc, #72]	; (80018e0 <HAL_InitTick+0x58>)
 8001896:	781b      	ldrb	r3, [r3, #0]
 8001898:	4619      	mov	r1, r3
 800189a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800189e:	fbb3 f3f1 	udiv	r3, r3, r1
 80018a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80018a6:	4618      	mov	r0, r3
 80018a8:	f000 f967 	bl	8001b7a <HAL_SYSTICK_Config>
 80018ac:	4603      	mov	r3, r0
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d001      	beq.n	80018b6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80018b2:	2301      	movs	r3, #1
 80018b4:	e00e      	b.n	80018d4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	2b0f      	cmp	r3, #15
 80018ba:	d80a      	bhi.n	80018d2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80018bc:	2200      	movs	r2, #0
 80018be:	6879      	ldr	r1, [r7, #4]
 80018c0:	f04f 30ff 	mov.w	r0, #4294967295
 80018c4:	f000 f92f 	bl	8001b26 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80018c8:	4a06      	ldr	r2, [pc, #24]	; (80018e4 <HAL_InitTick+0x5c>)
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80018ce:	2300      	movs	r3, #0
 80018d0:	e000      	b.n	80018d4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80018d2:	2301      	movs	r3, #1
}
 80018d4:	4618      	mov	r0, r3
 80018d6:	3708      	adds	r7, #8
 80018d8:	46bd      	mov	sp, r7
 80018da:	bd80      	pop	{r7, pc}
 80018dc:	20000010 	.word	0x20000010
 80018e0:	20000018 	.word	0x20000018
 80018e4:	20000014 	.word	0x20000014

080018e8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018e8:	b480      	push	{r7}
 80018ea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80018ec:	4b06      	ldr	r3, [pc, #24]	; (8001908 <HAL_IncTick+0x20>)
 80018ee:	781b      	ldrb	r3, [r3, #0]
 80018f0:	461a      	mov	r2, r3
 80018f2:	4b06      	ldr	r3, [pc, #24]	; (800190c <HAL_IncTick+0x24>)
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	4413      	add	r3, r2
 80018f8:	4a04      	ldr	r2, [pc, #16]	; (800190c <HAL_IncTick+0x24>)
 80018fa:	6013      	str	r3, [r2, #0]
}
 80018fc:	bf00      	nop
 80018fe:	46bd      	mov	sp, r7
 8001900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001904:	4770      	bx	lr
 8001906:	bf00      	nop
 8001908:	20000018 	.word	0x20000018
 800190c:	200004b8 	.word	0x200004b8

08001910 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001910:	b480      	push	{r7}
 8001912:	af00      	add	r7, sp, #0
  return uwTick;
 8001914:	4b03      	ldr	r3, [pc, #12]	; (8001924 <HAL_GetTick+0x14>)
 8001916:	681b      	ldr	r3, [r3, #0]
}
 8001918:	4618      	mov	r0, r3
 800191a:	46bd      	mov	sp, r7
 800191c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001920:	4770      	bx	lr
 8001922:	bf00      	nop
 8001924:	200004b8 	.word	0x200004b8

08001928 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b084      	sub	sp, #16
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001930:	f7ff ffee 	bl	8001910 <HAL_GetTick>
 8001934:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001940:	d005      	beq.n	800194e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001942:	4b0a      	ldr	r3, [pc, #40]	; (800196c <HAL_Delay+0x44>)
 8001944:	781b      	ldrb	r3, [r3, #0]
 8001946:	461a      	mov	r2, r3
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	4413      	add	r3, r2
 800194c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800194e:	bf00      	nop
 8001950:	f7ff ffde 	bl	8001910 <HAL_GetTick>
 8001954:	4602      	mov	r2, r0
 8001956:	68bb      	ldr	r3, [r7, #8]
 8001958:	1ad3      	subs	r3, r2, r3
 800195a:	68fa      	ldr	r2, [r7, #12]
 800195c:	429a      	cmp	r2, r3
 800195e:	d8f7      	bhi.n	8001950 <HAL_Delay+0x28>
  {
  }
}
 8001960:	bf00      	nop
 8001962:	bf00      	nop
 8001964:	3710      	adds	r7, #16
 8001966:	46bd      	mov	sp, r7
 8001968:	bd80      	pop	{r7, pc}
 800196a:	bf00      	nop
 800196c:	20000018 	.word	0x20000018

08001970 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001970:	b480      	push	{r7}
 8001972:	b085      	sub	sp, #20
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	f003 0307 	and.w	r3, r3, #7
 800197e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001980:	4b0c      	ldr	r3, [pc, #48]	; (80019b4 <__NVIC_SetPriorityGrouping+0x44>)
 8001982:	68db      	ldr	r3, [r3, #12]
 8001984:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001986:	68ba      	ldr	r2, [r7, #8]
 8001988:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800198c:	4013      	ands	r3, r2
 800198e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001994:	68bb      	ldr	r3, [r7, #8]
 8001996:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001998:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800199c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80019a2:	4a04      	ldr	r2, [pc, #16]	; (80019b4 <__NVIC_SetPriorityGrouping+0x44>)
 80019a4:	68bb      	ldr	r3, [r7, #8]
 80019a6:	60d3      	str	r3, [r2, #12]
}
 80019a8:	bf00      	nop
 80019aa:	3714      	adds	r7, #20
 80019ac:	46bd      	mov	sp, r7
 80019ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b2:	4770      	bx	lr
 80019b4:	e000ed00 	.word	0xe000ed00

080019b8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80019b8:	b480      	push	{r7}
 80019ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80019bc:	4b04      	ldr	r3, [pc, #16]	; (80019d0 <__NVIC_GetPriorityGrouping+0x18>)
 80019be:	68db      	ldr	r3, [r3, #12]
 80019c0:	0a1b      	lsrs	r3, r3, #8
 80019c2:	f003 0307 	and.w	r3, r3, #7
}
 80019c6:	4618      	mov	r0, r3
 80019c8:	46bd      	mov	sp, r7
 80019ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ce:	4770      	bx	lr
 80019d0:	e000ed00 	.word	0xe000ed00

080019d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019d4:	b480      	push	{r7}
 80019d6:	b083      	sub	sp, #12
 80019d8:	af00      	add	r7, sp, #0
 80019da:	4603      	mov	r3, r0
 80019dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	db0b      	blt.n	80019fe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80019e6:	79fb      	ldrb	r3, [r7, #7]
 80019e8:	f003 021f 	and.w	r2, r3, #31
 80019ec:	4907      	ldr	r1, [pc, #28]	; (8001a0c <__NVIC_EnableIRQ+0x38>)
 80019ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019f2:	095b      	lsrs	r3, r3, #5
 80019f4:	2001      	movs	r0, #1
 80019f6:	fa00 f202 	lsl.w	r2, r0, r2
 80019fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80019fe:	bf00      	nop
 8001a00:	370c      	adds	r7, #12
 8001a02:	46bd      	mov	sp, r7
 8001a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a08:	4770      	bx	lr
 8001a0a:	bf00      	nop
 8001a0c:	e000e100 	.word	0xe000e100

08001a10 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a10:	b480      	push	{r7}
 8001a12:	b083      	sub	sp, #12
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	4603      	mov	r3, r0
 8001a18:	6039      	str	r1, [r7, #0]
 8001a1a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	db0a      	blt.n	8001a3a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a24:	683b      	ldr	r3, [r7, #0]
 8001a26:	b2da      	uxtb	r2, r3
 8001a28:	490c      	ldr	r1, [pc, #48]	; (8001a5c <__NVIC_SetPriority+0x4c>)
 8001a2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a2e:	0112      	lsls	r2, r2, #4
 8001a30:	b2d2      	uxtb	r2, r2
 8001a32:	440b      	add	r3, r1
 8001a34:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a38:	e00a      	b.n	8001a50 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a3a:	683b      	ldr	r3, [r7, #0]
 8001a3c:	b2da      	uxtb	r2, r3
 8001a3e:	4908      	ldr	r1, [pc, #32]	; (8001a60 <__NVIC_SetPriority+0x50>)
 8001a40:	79fb      	ldrb	r3, [r7, #7]
 8001a42:	f003 030f 	and.w	r3, r3, #15
 8001a46:	3b04      	subs	r3, #4
 8001a48:	0112      	lsls	r2, r2, #4
 8001a4a:	b2d2      	uxtb	r2, r2
 8001a4c:	440b      	add	r3, r1
 8001a4e:	761a      	strb	r2, [r3, #24]
}
 8001a50:	bf00      	nop
 8001a52:	370c      	adds	r7, #12
 8001a54:	46bd      	mov	sp, r7
 8001a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5a:	4770      	bx	lr
 8001a5c:	e000e100 	.word	0xe000e100
 8001a60:	e000ed00 	.word	0xe000ed00

08001a64 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a64:	b480      	push	{r7}
 8001a66:	b089      	sub	sp, #36	; 0x24
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	60f8      	str	r0, [r7, #12]
 8001a6c:	60b9      	str	r1, [r7, #8]
 8001a6e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	f003 0307 	and.w	r3, r3, #7
 8001a76:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a78:	69fb      	ldr	r3, [r7, #28]
 8001a7a:	f1c3 0307 	rsb	r3, r3, #7
 8001a7e:	2b04      	cmp	r3, #4
 8001a80:	bf28      	it	cs
 8001a82:	2304      	movcs	r3, #4
 8001a84:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a86:	69fb      	ldr	r3, [r7, #28]
 8001a88:	3304      	adds	r3, #4
 8001a8a:	2b06      	cmp	r3, #6
 8001a8c:	d902      	bls.n	8001a94 <NVIC_EncodePriority+0x30>
 8001a8e:	69fb      	ldr	r3, [r7, #28]
 8001a90:	3b03      	subs	r3, #3
 8001a92:	e000      	b.n	8001a96 <NVIC_EncodePriority+0x32>
 8001a94:	2300      	movs	r3, #0
 8001a96:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a98:	f04f 32ff 	mov.w	r2, #4294967295
 8001a9c:	69bb      	ldr	r3, [r7, #24]
 8001a9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa2:	43da      	mvns	r2, r3
 8001aa4:	68bb      	ldr	r3, [r7, #8]
 8001aa6:	401a      	ands	r2, r3
 8001aa8:	697b      	ldr	r3, [r7, #20]
 8001aaa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001aac:	f04f 31ff 	mov.w	r1, #4294967295
 8001ab0:	697b      	ldr	r3, [r7, #20]
 8001ab2:	fa01 f303 	lsl.w	r3, r1, r3
 8001ab6:	43d9      	mvns	r1, r3
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001abc:	4313      	orrs	r3, r2
         );
}
 8001abe:	4618      	mov	r0, r3
 8001ac0:	3724      	adds	r7, #36	; 0x24
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac8:	4770      	bx	lr
	...

08001acc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b082      	sub	sp, #8
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	3b01      	subs	r3, #1
 8001ad8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001adc:	d301      	bcc.n	8001ae2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001ade:	2301      	movs	r3, #1
 8001ae0:	e00f      	b.n	8001b02 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ae2:	4a0a      	ldr	r2, [pc, #40]	; (8001b0c <SysTick_Config+0x40>)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	3b01      	subs	r3, #1
 8001ae8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001aea:	210f      	movs	r1, #15
 8001aec:	f04f 30ff 	mov.w	r0, #4294967295
 8001af0:	f7ff ff8e 	bl	8001a10 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001af4:	4b05      	ldr	r3, [pc, #20]	; (8001b0c <SysTick_Config+0x40>)
 8001af6:	2200      	movs	r2, #0
 8001af8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001afa:	4b04      	ldr	r3, [pc, #16]	; (8001b0c <SysTick_Config+0x40>)
 8001afc:	2207      	movs	r2, #7
 8001afe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b00:	2300      	movs	r3, #0
}
 8001b02:	4618      	mov	r0, r3
 8001b04:	3708      	adds	r7, #8
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bd80      	pop	{r7, pc}
 8001b0a:	bf00      	nop
 8001b0c:	e000e010 	.word	0xe000e010

08001b10 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b082      	sub	sp, #8
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b18:	6878      	ldr	r0, [r7, #4]
 8001b1a:	f7ff ff29 	bl	8001970 <__NVIC_SetPriorityGrouping>
}
 8001b1e:	bf00      	nop
 8001b20:	3708      	adds	r7, #8
 8001b22:	46bd      	mov	sp, r7
 8001b24:	bd80      	pop	{r7, pc}

08001b26 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b26:	b580      	push	{r7, lr}
 8001b28:	b086      	sub	sp, #24
 8001b2a:	af00      	add	r7, sp, #0
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	60b9      	str	r1, [r7, #8]
 8001b30:	607a      	str	r2, [r7, #4]
 8001b32:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b34:	2300      	movs	r3, #0
 8001b36:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b38:	f7ff ff3e 	bl	80019b8 <__NVIC_GetPriorityGrouping>
 8001b3c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b3e:	687a      	ldr	r2, [r7, #4]
 8001b40:	68b9      	ldr	r1, [r7, #8]
 8001b42:	6978      	ldr	r0, [r7, #20]
 8001b44:	f7ff ff8e 	bl	8001a64 <NVIC_EncodePriority>
 8001b48:	4602      	mov	r2, r0
 8001b4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b4e:	4611      	mov	r1, r2
 8001b50:	4618      	mov	r0, r3
 8001b52:	f7ff ff5d 	bl	8001a10 <__NVIC_SetPriority>
}
 8001b56:	bf00      	nop
 8001b58:	3718      	adds	r7, #24
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bd80      	pop	{r7, pc}

08001b5e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b5e:	b580      	push	{r7, lr}
 8001b60:	b082      	sub	sp, #8
 8001b62:	af00      	add	r7, sp, #0
 8001b64:	4603      	mov	r3, r0
 8001b66:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	f7ff ff31 	bl	80019d4 <__NVIC_EnableIRQ>
}
 8001b72:	bf00      	nop
 8001b74:	3708      	adds	r7, #8
 8001b76:	46bd      	mov	sp, r7
 8001b78:	bd80      	pop	{r7, pc}

08001b7a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b7a:	b580      	push	{r7, lr}
 8001b7c:	b082      	sub	sp, #8
 8001b7e:	af00      	add	r7, sp, #0
 8001b80:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b82:	6878      	ldr	r0, [r7, #4]
 8001b84:	f7ff ffa2 	bl	8001acc <SysTick_Config>
 8001b88:	4603      	mov	r3, r0
}
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	3708      	adds	r7, #8
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	bd80      	pop	{r7, pc}

08001b92 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001b92:	b580      	push	{r7, lr}
 8001b94:	b084      	sub	sp, #16
 8001b96:	af00      	add	r7, sp, #0
 8001b98:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b9e:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001ba0:	f7ff feb6 	bl	8001910 <HAL_GetTick>
 8001ba4:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001bac:	b2db      	uxtb	r3, r3
 8001bae:	2b02      	cmp	r3, #2
 8001bb0:	d008      	beq.n	8001bc4 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	2280      	movs	r2, #128	; 0x80
 8001bb6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	2200      	movs	r2, #0
 8001bbc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001bc0:	2301      	movs	r3, #1
 8001bc2:	e052      	b.n	8001c6a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	681a      	ldr	r2, [r3, #0]
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f022 0216 	bic.w	r2, r2, #22
 8001bd2:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	695a      	ldr	r2, [r3, #20]
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001be2:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d103      	bne.n	8001bf4 <HAL_DMA_Abort+0x62>
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d007      	beq.n	8001c04 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	681a      	ldr	r2, [r3, #0]
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f022 0208 	bic.w	r2, r2, #8
 8001c02:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	681a      	ldr	r2, [r3, #0]
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f022 0201 	bic.w	r2, r2, #1
 8001c12:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001c14:	e013      	b.n	8001c3e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001c16:	f7ff fe7b 	bl	8001910 <HAL_GetTick>
 8001c1a:	4602      	mov	r2, r0
 8001c1c:	68bb      	ldr	r3, [r7, #8]
 8001c1e:	1ad3      	subs	r3, r2, r3
 8001c20:	2b05      	cmp	r3, #5
 8001c22:	d90c      	bls.n	8001c3e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	2220      	movs	r2, #32
 8001c28:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	2203      	movs	r2, #3
 8001c2e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	2200      	movs	r2, #0
 8001c36:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001c3a:	2303      	movs	r3, #3
 8001c3c:	e015      	b.n	8001c6a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	f003 0301 	and.w	r3, r3, #1
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d1e4      	bne.n	8001c16 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c50:	223f      	movs	r2, #63	; 0x3f
 8001c52:	409a      	lsls	r2, r3
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	2201      	movs	r2, #1
 8001c5c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	2200      	movs	r2, #0
 8001c64:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001c68:	2300      	movs	r3, #0
}
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	3710      	adds	r7, #16
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	bd80      	pop	{r7, pc}

08001c72 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001c72:	b480      	push	{r7}
 8001c74:	b083      	sub	sp, #12
 8001c76:	af00      	add	r7, sp, #0
 8001c78:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001c80:	b2db      	uxtb	r3, r3
 8001c82:	2b02      	cmp	r3, #2
 8001c84:	d004      	beq.n	8001c90 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	2280      	movs	r2, #128	; 0x80
 8001c8a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001c8c:	2301      	movs	r3, #1
 8001c8e:	e00c      	b.n	8001caa <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	2205      	movs	r2, #5
 8001c94:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	681a      	ldr	r2, [r3, #0]
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f022 0201 	bic.w	r2, r2, #1
 8001ca6:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001ca8:	2300      	movs	r3, #0
}
 8001caa:	4618      	mov	r0, r3
 8001cac:	370c      	adds	r7, #12
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb4:	4770      	bx	lr
	...

08001cb8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001cb8:	b480      	push	{r7}
 8001cba:	b089      	sub	sp, #36	; 0x24
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
 8001cc0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001cca:	2300      	movs	r3, #0
 8001ccc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001cce:	2300      	movs	r3, #0
 8001cd0:	61fb      	str	r3, [r7, #28]
 8001cd2:	e16b      	b.n	8001fac <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001cd4:	2201      	movs	r2, #1
 8001cd6:	69fb      	ldr	r3, [r7, #28]
 8001cd8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cdc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001cde:	683b      	ldr	r3, [r7, #0]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	697a      	ldr	r2, [r7, #20]
 8001ce4:	4013      	ands	r3, r2
 8001ce6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001ce8:	693a      	ldr	r2, [r7, #16]
 8001cea:	697b      	ldr	r3, [r7, #20]
 8001cec:	429a      	cmp	r2, r3
 8001cee:	f040 815a 	bne.w	8001fa6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001cf2:	683b      	ldr	r3, [r7, #0]
 8001cf4:	685b      	ldr	r3, [r3, #4]
 8001cf6:	f003 0303 	and.w	r3, r3, #3
 8001cfa:	2b01      	cmp	r3, #1
 8001cfc:	d005      	beq.n	8001d0a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001cfe:	683b      	ldr	r3, [r7, #0]
 8001d00:	685b      	ldr	r3, [r3, #4]
 8001d02:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001d06:	2b02      	cmp	r3, #2
 8001d08:	d130      	bne.n	8001d6c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	689b      	ldr	r3, [r3, #8]
 8001d0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001d10:	69fb      	ldr	r3, [r7, #28]
 8001d12:	005b      	lsls	r3, r3, #1
 8001d14:	2203      	movs	r2, #3
 8001d16:	fa02 f303 	lsl.w	r3, r2, r3
 8001d1a:	43db      	mvns	r3, r3
 8001d1c:	69ba      	ldr	r2, [r7, #24]
 8001d1e:	4013      	ands	r3, r2
 8001d20:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001d22:	683b      	ldr	r3, [r7, #0]
 8001d24:	68da      	ldr	r2, [r3, #12]
 8001d26:	69fb      	ldr	r3, [r7, #28]
 8001d28:	005b      	lsls	r3, r3, #1
 8001d2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d2e:	69ba      	ldr	r2, [r7, #24]
 8001d30:	4313      	orrs	r3, r2
 8001d32:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	69ba      	ldr	r2, [r7, #24]
 8001d38:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	685b      	ldr	r3, [r3, #4]
 8001d3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001d40:	2201      	movs	r2, #1
 8001d42:	69fb      	ldr	r3, [r7, #28]
 8001d44:	fa02 f303 	lsl.w	r3, r2, r3
 8001d48:	43db      	mvns	r3, r3
 8001d4a:	69ba      	ldr	r2, [r7, #24]
 8001d4c:	4013      	ands	r3, r2
 8001d4e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001d50:	683b      	ldr	r3, [r7, #0]
 8001d52:	685b      	ldr	r3, [r3, #4]
 8001d54:	091b      	lsrs	r3, r3, #4
 8001d56:	f003 0201 	and.w	r2, r3, #1
 8001d5a:	69fb      	ldr	r3, [r7, #28]
 8001d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d60:	69ba      	ldr	r2, [r7, #24]
 8001d62:	4313      	orrs	r3, r2
 8001d64:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	69ba      	ldr	r2, [r7, #24]
 8001d6a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001d6c:	683b      	ldr	r3, [r7, #0]
 8001d6e:	685b      	ldr	r3, [r3, #4]
 8001d70:	f003 0303 	and.w	r3, r3, #3
 8001d74:	2b03      	cmp	r3, #3
 8001d76:	d017      	beq.n	8001da8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	68db      	ldr	r3, [r3, #12]
 8001d7c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001d7e:	69fb      	ldr	r3, [r7, #28]
 8001d80:	005b      	lsls	r3, r3, #1
 8001d82:	2203      	movs	r2, #3
 8001d84:	fa02 f303 	lsl.w	r3, r2, r3
 8001d88:	43db      	mvns	r3, r3
 8001d8a:	69ba      	ldr	r2, [r7, #24]
 8001d8c:	4013      	ands	r3, r2
 8001d8e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001d90:	683b      	ldr	r3, [r7, #0]
 8001d92:	689a      	ldr	r2, [r3, #8]
 8001d94:	69fb      	ldr	r3, [r7, #28]
 8001d96:	005b      	lsls	r3, r3, #1
 8001d98:	fa02 f303 	lsl.w	r3, r2, r3
 8001d9c:	69ba      	ldr	r2, [r7, #24]
 8001d9e:	4313      	orrs	r3, r2
 8001da0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	69ba      	ldr	r2, [r7, #24]
 8001da6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001da8:	683b      	ldr	r3, [r7, #0]
 8001daa:	685b      	ldr	r3, [r3, #4]
 8001dac:	f003 0303 	and.w	r3, r3, #3
 8001db0:	2b02      	cmp	r3, #2
 8001db2:	d123      	bne.n	8001dfc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001db4:	69fb      	ldr	r3, [r7, #28]
 8001db6:	08da      	lsrs	r2, r3, #3
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	3208      	adds	r2, #8
 8001dbc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001dc0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001dc2:	69fb      	ldr	r3, [r7, #28]
 8001dc4:	f003 0307 	and.w	r3, r3, #7
 8001dc8:	009b      	lsls	r3, r3, #2
 8001dca:	220f      	movs	r2, #15
 8001dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd0:	43db      	mvns	r3, r3
 8001dd2:	69ba      	ldr	r2, [r7, #24]
 8001dd4:	4013      	ands	r3, r2
 8001dd6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	691a      	ldr	r2, [r3, #16]
 8001ddc:	69fb      	ldr	r3, [r7, #28]
 8001dde:	f003 0307 	and.w	r3, r3, #7
 8001de2:	009b      	lsls	r3, r3, #2
 8001de4:	fa02 f303 	lsl.w	r3, r2, r3
 8001de8:	69ba      	ldr	r2, [r7, #24]
 8001dea:	4313      	orrs	r3, r2
 8001dec:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001dee:	69fb      	ldr	r3, [r7, #28]
 8001df0:	08da      	lsrs	r2, r3, #3
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	3208      	adds	r2, #8
 8001df6:	69b9      	ldr	r1, [r7, #24]
 8001df8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001e02:	69fb      	ldr	r3, [r7, #28]
 8001e04:	005b      	lsls	r3, r3, #1
 8001e06:	2203      	movs	r2, #3
 8001e08:	fa02 f303 	lsl.w	r3, r2, r3
 8001e0c:	43db      	mvns	r3, r3
 8001e0e:	69ba      	ldr	r2, [r7, #24]
 8001e10:	4013      	ands	r3, r2
 8001e12:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001e14:	683b      	ldr	r3, [r7, #0]
 8001e16:	685b      	ldr	r3, [r3, #4]
 8001e18:	f003 0203 	and.w	r2, r3, #3
 8001e1c:	69fb      	ldr	r3, [r7, #28]
 8001e1e:	005b      	lsls	r3, r3, #1
 8001e20:	fa02 f303 	lsl.w	r3, r2, r3
 8001e24:	69ba      	ldr	r2, [r7, #24]
 8001e26:	4313      	orrs	r3, r2
 8001e28:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	69ba      	ldr	r2, [r7, #24]
 8001e2e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	685b      	ldr	r3, [r3, #4]
 8001e34:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	f000 80b4 	beq.w	8001fa6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e3e:	2300      	movs	r3, #0
 8001e40:	60fb      	str	r3, [r7, #12]
 8001e42:	4b60      	ldr	r3, [pc, #384]	; (8001fc4 <HAL_GPIO_Init+0x30c>)
 8001e44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e46:	4a5f      	ldr	r2, [pc, #380]	; (8001fc4 <HAL_GPIO_Init+0x30c>)
 8001e48:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e4c:	6453      	str	r3, [r2, #68]	; 0x44
 8001e4e:	4b5d      	ldr	r3, [pc, #372]	; (8001fc4 <HAL_GPIO_Init+0x30c>)
 8001e50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e52:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e56:	60fb      	str	r3, [r7, #12]
 8001e58:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001e5a:	4a5b      	ldr	r2, [pc, #364]	; (8001fc8 <HAL_GPIO_Init+0x310>)
 8001e5c:	69fb      	ldr	r3, [r7, #28]
 8001e5e:	089b      	lsrs	r3, r3, #2
 8001e60:	3302      	adds	r3, #2
 8001e62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e66:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001e68:	69fb      	ldr	r3, [r7, #28]
 8001e6a:	f003 0303 	and.w	r3, r3, #3
 8001e6e:	009b      	lsls	r3, r3, #2
 8001e70:	220f      	movs	r2, #15
 8001e72:	fa02 f303 	lsl.w	r3, r2, r3
 8001e76:	43db      	mvns	r3, r3
 8001e78:	69ba      	ldr	r2, [r7, #24]
 8001e7a:	4013      	ands	r3, r2
 8001e7c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	4a52      	ldr	r2, [pc, #328]	; (8001fcc <HAL_GPIO_Init+0x314>)
 8001e82:	4293      	cmp	r3, r2
 8001e84:	d02b      	beq.n	8001ede <HAL_GPIO_Init+0x226>
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	4a51      	ldr	r2, [pc, #324]	; (8001fd0 <HAL_GPIO_Init+0x318>)
 8001e8a:	4293      	cmp	r3, r2
 8001e8c:	d025      	beq.n	8001eda <HAL_GPIO_Init+0x222>
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	4a50      	ldr	r2, [pc, #320]	; (8001fd4 <HAL_GPIO_Init+0x31c>)
 8001e92:	4293      	cmp	r3, r2
 8001e94:	d01f      	beq.n	8001ed6 <HAL_GPIO_Init+0x21e>
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	4a4f      	ldr	r2, [pc, #316]	; (8001fd8 <HAL_GPIO_Init+0x320>)
 8001e9a:	4293      	cmp	r3, r2
 8001e9c:	d019      	beq.n	8001ed2 <HAL_GPIO_Init+0x21a>
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	4a4e      	ldr	r2, [pc, #312]	; (8001fdc <HAL_GPIO_Init+0x324>)
 8001ea2:	4293      	cmp	r3, r2
 8001ea4:	d013      	beq.n	8001ece <HAL_GPIO_Init+0x216>
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	4a4d      	ldr	r2, [pc, #308]	; (8001fe0 <HAL_GPIO_Init+0x328>)
 8001eaa:	4293      	cmp	r3, r2
 8001eac:	d00d      	beq.n	8001eca <HAL_GPIO_Init+0x212>
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	4a4c      	ldr	r2, [pc, #304]	; (8001fe4 <HAL_GPIO_Init+0x32c>)
 8001eb2:	4293      	cmp	r3, r2
 8001eb4:	d007      	beq.n	8001ec6 <HAL_GPIO_Init+0x20e>
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	4a4b      	ldr	r2, [pc, #300]	; (8001fe8 <HAL_GPIO_Init+0x330>)
 8001eba:	4293      	cmp	r3, r2
 8001ebc:	d101      	bne.n	8001ec2 <HAL_GPIO_Init+0x20a>
 8001ebe:	2307      	movs	r3, #7
 8001ec0:	e00e      	b.n	8001ee0 <HAL_GPIO_Init+0x228>
 8001ec2:	2308      	movs	r3, #8
 8001ec4:	e00c      	b.n	8001ee0 <HAL_GPIO_Init+0x228>
 8001ec6:	2306      	movs	r3, #6
 8001ec8:	e00a      	b.n	8001ee0 <HAL_GPIO_Init+0x228>
 8001eca:	2305      	movs	r3, #5
 8001ecc:	e008      	b.n	8001ee0 <HAL_GPIO_Init+0x228>
 8001ece:	2304      	movs	r3, #4
 8001ed0:	e006      	b.n	8001ee0 <HAL_GPIO_Init+0x228>
 8001ed2:	2303      	movs	r3, #3
 8001ed4:	e004      	b.n	8001ee0 <HAL_GPIO_Init+0x228>
 8001ed6:	2302      	movs	r3, #2
 8001ed8:	e002      	b.n	8001ee0 <HAL_GPIO_Init+0x228>
 8001eda:	2301      	movs	r3, #1
 8001edc:	e000      	b.n	8001ee0 <HAL_GPIO_Init+0x228>
 8001ede:	2300      	movs	r3, #0
 8001ee0:	69fa      	ldr	r2, [r7, #28]
 8001ee2:	f002 0203 	and.w	r2, r2, #3
 8001ee6:	0092      	lsls	r2, r2, #2
 8001ee8:	4093      	lsls	r3, r2
 8001eea:	69ba      	ldr	r2, [r7, #24]
 8001eec:	4313      	orrs	r3, r2
 8001eee:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001ef0:	4935      	ldr	r1, [pc, #212]	; (8001fc8 <HAL_GPIO_Init+0x310>)
 8001ef2:	69fb      	ldr	r3, [r7, #28]
 8001ef4:	089b      	lsrs	r3, r3, #2
 8001ef6:	3302      	adds	r3, #2
 8001ef8:	69ba      	ldr	r2, [r7, #24]
 8001efa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001efe:	4b3b      	ldr	r3, [pc, #236]	; (8001fec <HAL_GPIO_Init+0x334>)
 8001f00:	689b      	ldr	r3, [r3, #8]
 8001f02:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f04:	693b      	ldr	r3, [r7, #16]
 8001f06:	43db      	mvns	r3, r3
 8001f08:	69ba      	ldr	r2, [r7, #24]
 8001f0a:	4013      	ands	r3, r2
 8001f0c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001f0e:	683b      	ldr	r3, [r7, #0]
 8001f10:	685b      	ldr	r3, [r3, #4]
 8001f12:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d003      	beq.n	8001f22 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001f1a:	69ba      	ldr	r2, [r7, #24]
 8001f1c:	693b      	ldr	r3, [r7, #16]
 8001f1e:	4313      	orrs	r3, r2
 8001f20:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001f22:	4a32      	ldr	r2, [pc, #200]	; (8001fec <HAL_GPIO_Init+0x334>)
 8001f24:	69bb      	ldr	r3, [r7, #24]
 8001f26:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001f28:	4b30      	ldr	r3, [pc, #192]	; (8001fec <HAL_GPIO_Init+0x334>)
 8001f2a:	68db      	ldr	r3, [r3, #12]
 8001f2c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f2e:	693b      	ldr	r3, [r7, #16]
 8001f30:	43db      	mvns	r3, r3
 8001f32:	69ba      	ldr	r2, [r7, #24]
 8001f34:	4013      	ands	r3, r2
 8001f36:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	685b      	ldr	r3, [r3, #4]
 8001f3c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d003      	beq.n	8001f4c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001f44:	69ba      	ldr	r2, [r7, #24]
 8001f46:	693b      	ldr	r3, [r7, #16]
 8001f48:	4313      	orrs	r3, r2
 8001f4a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001f4c:	4a27      	ldr	r2, [pc, #156]	; (8001fec <HAL_GPIO_Init+0x334>)
 8001f4e:	69bb      	ldr	r3, [r7, #24]
 8001f50:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001f52:	4b26      	ldr	r3, [pc, #152]	; (8001fec <HAL_GPIO_Init+0x334>)
 8001f54:	685b      	ldr	r3, [r3, #4]
 8001f56:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f58:	693b      	ldr	r3, [r7, #16]
 8001f5a:	43db      	mvns	r3, r3
 8001f5c:	69ba      	ldr	r2, [r7, #24]
 8001f5e:	4013      	ands	r3, r2
 8001f60:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001f62:	683b      	ldr	r3, [r7, #0]
 8001f64:	685b      	ldr	r3, [r3, #4]
 8001f66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d003      	beq.n	8001f76 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001f6e:	69ba      	ldr	r2, [r7, #24]
 8001f70:	693b      	ldr	r3, [r7, #16]
 8001f72:	4313      	orrs	r3, r2
 8001f74:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001f76:	4a1d      	ldr	r2, [pc, #116]	; (8001fec <HAL_GPIO_Init+0x334>)
 8001f78:	69bb      	ldr	r3, [r7, #24]
 8001f7a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001f7c:	4b1b      	ldr	r3, [pc, #108]	; (8001fec <HAL_GPIO_Init+0x334>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f82:	693b      	ldr	r3, [r7, #16]
 8001f84:	43db      	mvns	r3, r3
 8001f86:	69ba      	ldr	r2, [r7, #24]
 8001f88:	4013      	ands	r3, r2
 8001f8a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001f8c:	683b      	ldr	r3, [r7, #0]
 8001f8e:	685b      	ldr	r3, [r3, #4]
 8001f90:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d003      	beq.n	8001fa0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001f98:	69ba      	ldr	r2, [r7, #24]
 8001f9a:	693b      	ldr	r3, [r7, #16]
 8001f9c:	4313      	orrs	r3, r2
 8001f9e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001fa0:	4a12      	ldr	r2, [pc, #72]	; (8001fec <HAL_GPIO_Init+0x334>)
 8001fa2:	69bb      	ldr	r3, [r7, #24]
 8001fa4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001fa6:	69fb      	ldr	r3, [r7, #28]
 8001fa8:	3301      	adds	r3, #1
 8001faa:	61fb      	str	r3, [r7, #28]
 8001fac:	69fb      	ldr	r3, [r7, #28]
 8001fae:	2b0f      	cmp	r3, #15
 8001fb0:	f67f ae90 	bls.w	8001cd4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001fb4:	bf00      	nop
 8001fb6:	bf00      	nop
 8001fb8:	3724      	adds	r7, #36	; 0x24
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc0:	4770      	bx	lr
 8001fc2:	bf00      	nop
 8001fc4:	40023800 	.word	0x40023800
 8001fc8:	40013800 	.word	0x40013800
 8001fcc:	40020000 	.word	0x40020000
 8001fd0:	40020400 	.word	0x40020400
 8001fd4:	40020800 	.word	0x40020800
 8001fd8:	40020c00 	.word	0x40020c00
 8001fdc:	40021000 	.word	0x40021000
 8001fe0:	40021400 	.word	0x40021400
 8001fe4:	40021800 	.word	0x40021800
 8001fe8:	40021c00 	.word	0x40021c00
 8001fec:	40013c00 	.word	0x40013c00

08001ff0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ff0:	b480      	push	{r7}
 8001ff2:	b083      	sub	sp, #12
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
 8001ff8:	460b      	mov	r3, r1
 8001ffa:	807b      	strh	r3, [r7, #2]
 8001ffc:	4613      	mov	r3, r2
 8001ffe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002000:	787b      	ldrb	r3, [r7, #1]
 8002002:	2b00      	cmp	r3, #0
 8002004:	d003      	beq.n	800200e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002006:	887a      	ldrh	r2, [r7, #2]
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800200c:	e003      	b.n	8002016 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800200e:	887b      	ldrh	r3, [r7, #2]
 8002010:	041a      	lsls	r2, r3, #16
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	619a      	str	r2, [r3, #24]
}
 8002016:	bf00      	nop
 8002018:	370c      	adds	r7, #12
 800201a:	46bd      	mov	sp, r7
 800201c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002020:	4770      	bx	lr
	...

08002024 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	b082      	sub	sp, #8
 8002028:	af00      	add	r7, sp, #0
 800202a:	4603      	mov	r3, r0
 800202c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800202e:	4b08      	ldr	r3, [pc, #32]	; (8002050 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002030:	695a      	ldr	r2, [r3, #20]
 8002032:	88fb      	ldrh	r3, [r7, #6]
 8002034:	4013      	ands	r3, r2
 8002036:	2b00      	cmp	r3, #0
 8002038:	d006      	beq.n	8002048 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800203a:	4a05      	ldr	r2, [pc, #20]	; (8002050 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800203c:	88fb      	ldrh	r3, [r7, #6]
 800203e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002040:	88fb      	ldrh	r3, [r7, #6]
 8002042:	4618      	mov	r0, r3
 8002044:	f7ff f922 	bl	800128c <HAL_GPIO_EXTI_Callback>
  }
}
 8002048:	bf00      	nop
 800204a:	3708      	adds	r7, #8
 800204c:	46bd      	mov	sp, r7
 800204e:	bd80      	pop	{r7, pc}
 8002050:	40013c00 	.word	0x40013c00

08002054 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002054:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002056:	b08f      	sub	sp, #60	; 0x3c
 8002058:	af0a      	add	r7, sp, #40	; 0x28
 800205a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	2b00      	cmp	r3, #0
 8002060:	d101      	bne.n	8002066 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002062:	2301      	movs	r3, #1
 8002064:	e10f      	b.n	8002286 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8002072:	b2db      	uxtb	r3, r3
 8002074:	2b00      	cmp	r3, #0
 8002076:	d106      	bne.n	8002086 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	2200      	movs	r2, #0
 800207c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002080:	6878      	ldr	r0, [r7, #4]
 8002082:	f007 fbcb 	bl	800981c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	2203      	movs	r2, #3
 800208a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800208e:	68bb      	ldr	r3, [r7, #8]
 8002090:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002092:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002096:	2b00      	cmp	r3, #0
 8002098:	d102      	bne.n	80020a0 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	2200      	movs	r2, #0
 800209e:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	4618      	mov	r0, r3
 80020a6:	f003 fe90 	bl	8005dca <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	603b      	str	r3, [r7, #0]
 80020b0:	687e      	ldr	r6, [r7, #4]
 80020b2:	466d      	mov	r5, sp
 80020b4:	f106 0410 	add.w	r4, r6, #16
 80020b8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80020ba:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80020bc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80020be:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80020c0:	e894 0003 	ldmia.w	r4, {r0, r1}
 80020c4:	e885 0003 	stmia.w	r5, {r0, r1}
 80020c8:	1d33      	adds	r3, r6, #4
 80020ca:	cb0e      	ldmia	r3, {r1, r2, r3}
 80020cc:	6838      	ldr	r0, [r7, #0]
 80020ce:	f003 fd67 	bl	8005ba0 <USB_CoreInit>
 80020d2:	4603      	mov	r3, r0
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d005      	beq.n	80020e4 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	2202      	movs	r2, #2
 80020dc:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80020e0:	2301      	movs	r3, #1
 80020e2:	e0d0      	b.n	8002286 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	2100      	movs	r1, #0
 80020ea:	4618      	mov	r0, r3
 80020ec:	f003 fe7e 	bl	8005dec <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80020f0:	2300      	movs	r3, #0
 80020f2:	73fb      	strb	r3, [r7, #15]
 80020f4:	e04a      	b.n	800218c <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80020f6:	7bfa      	ldrb	r2, [r7, #15]
 80020f8:	6879      	ldr	r1, [r7, #4]
 80020fa:	4613      	mov	r3, r2
 80020fc:	00db      	lsls	r3, r3, #3
 80020fe:	4413      	add	r3, r2
 8002100:	009b      	lsls	r3, r3, #2
 8002102:	440b      	add	r3, r1
 8002104:	333d      	adds	r3, #61	; 0x3d
 8002106:	2201      	movs	r2, #1
 8002108:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800210a:	7bfa      	ldrb	r2, [r7, #15]
 800210c:	6879      	ldr	r1, [r7, #4]
 800210e:	4613      	mov	r3, r2
 8002110:	00db      	lsls	r3, r3, #3
 8002112:	4413      	add	r3, r2
 8002114:	009b      	lsls	r3, r3, #2
 8002116:	440b      	add	r3, r1
 8002118:	333c      	adds	r3, #60	; 0x3c
 800211a:	7bfa      	ldrb	r2, [r7, #15]
 800211c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800211e:	7bfa      	ldrb	r2, [r7, #15]
 8002120:	7bfb      	ldrb	r3, [r7, #15]
 8002122:	b298      	uxth	r0, r3
 8002124:	6879      	ldr	r1, [r7, #4]
 8002126:	4613      	mov	r3, r2
 8002128:	00db      	lsls	r3, r3, #3
 800212a:	4413      	add	r3, r2
 800212c:	009b      	lsls	r3, r3, #2
 800212e:	440b      	add	r3, r1
 8002130:	3344      	adds	r3, #68	; 0x44
 8002132:	4602      	mov	r2, r0
 8002134:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002136:	7bfa      	ldrb	r2, [r7, #15]
 8002138:	6879      	ldr	r1, [r7, #4]
 800213a:	4613      	mov	r3, r2
 800213c:	00db      	lsls	r3, r3, #3
 800213e:	4413      	add	r3, r2
 8002140:	009b      	lsls	r3, r3, #2
 8002142:	440b      	add	r3, r1
 8002144:	3340      	adds	r3, #64	; 0x40
 8002146:	2200      	movs	r2, #0
 8002148:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800214a:	7bfa      	ldrb	r2, [r7, #15]
 800214c:	6879      	ldr	r1, [r7, #4]
 800214e:	4613      	mov	r3, r2
 8002150:	00db      	lsls	r3, r3, #3
 8002152:	4413      	add	r3, r2
 8002154:	009b      	lsls	r3, r3, #2
 8002156:	440b      	add	r3, r1
 8002158:	3348      	adds	r3, #72	; 0x48
 800215a:	2200      	movs	r2, #0
 800215c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800215e:	7bfa      	ldrb	r2, [r7, #15]
 8002160:	6879      	ldr	r1, [r7, #4]
 8002162:	4613      	mov	r3, r2
 8002164:	00db      	lsls	r3, r3, #3
 8002166:	4413      	add	r3, r2
 8002168:	009b      	lsls	r3, r3, #2
 800216a:	440b      	add	r3, r1
 800216c:	334c      	adds	r3, #76	; 0x4c
 800216e:	2200      	movs	r2, #0
 8002170:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002172:	7bfa      	ldrb	r2, [r7, #15]
 8002174:	6879      	ldr	r1, [r7, #4]
 8002176:	4613      	mov	r3, r2
 8002178:	00db      	lsls	r3, r3, #3
 800217a:	4413      	add	r3, r2
 800217c:	009b      	lsls	r3, r3, #2
 800217e:	440b      	add	r3, r1
 8002180:	3354      	adds	r3, #84	; 0x54
 8002182:	2200      	movs	r2, #0
 8002184:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002186:	7bfb      	ldrb	r3, [r7, #15]
 8002188:	3301      	adds	r3, #1
 800218a:	73fb      	strb	r3, [r7, #15]
 800218c:	7bfa      	ldrb	r2, [r7, #15]
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	685b      	ldr	r3, [r3, #4]
 8002192:	429a      	cmp	r2, r3
 8002194:	d3af      	bcc.n	80020f6 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002196:	2300      	movs	r3, #0
 8002198:	73fb      	strb	r3, [r7, #15]
 800219a:	e044      	b.n	8002226 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800219c:	7bfa      	ldrb	r2, [r7, #15]
 800219e:	6879      	ldr	r1, [r7, #4]
 80021a0:	4613      	mov	r3, r2
 80021a2:	00db      	lsls	r3, r3, #3
 80021a4:	4413      	add	r3, r2
 80021a6:	009b      	lsls	r3, r3, #2
 80021a8:	440b      	add	r3, r1
 80021aa:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80021ae:	2200      	movs	r2, #0
 80021b0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80021b2:	7bfa      	ldrb	r2, [r7, #15]
 80021b4:	6879      	ldr	r1, [r7, #4]
 80021b6:	4613      	mov	r3, r2
 80021b8:	00db      	lsls	r3, r3, #3
 80021ba:	4413      	add	r3, r2
 80021bc:	009b      	lsls	r3, r3, #2
 80021be:	440b      	add	r3, r1
 80021c0:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80021c4:	7bfa      	ldrb	r2, [r7, #15]
 80021c6:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80021c8:	7bfa      	ldrb	r2, [r7, #15]
 80021ca:	6879      	ldr	r1, [r7, #4]
 80021cc:	4613      	mov	r3, r2
 80021ce:	00db      	lsls	r3, r3, #3
 80021d0:	4413      	add	r3, r2
 80021d2:	009b      	lsls	r3, r3, #2
 80021d4:	440b      	add	r3, r1
 80021d6:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80021da:	2200      	movs	r2, #0
 80021dc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80021de:	7bfa      	ldrb	r2, [r7, #15]
 80021e0:	6879      	ldr	r1, [r7, #4]
 80021e2:	4613      	mov	r3, r2
 80021e4:	00db      	lsls	r3, r3, #3
 80021e6:	4413      	add	r3, r2
 80021e8:	009b      	lsls	r3, r3, #2
 80021ea:	440b      	add	r3, r1
 80021ec:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80021f0:	2200      	movs	r2, #0
 80021f2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80021f4:	7bfa      	ldrb	r2, [r7, #15]
 80021f6:	6879      	ldr	r1, [r7, #4]
 80021f8:	4613      	mov	r3, r2
 80021fa:	00db      	lsls	r3, r3, #3
 80021fc:	4413      	add	r3, r2
 80021fe:	009b      	lsls	r3, r3, #2
 8002200:	440b      	add	r3, r1
 8002202:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8002206:	2200      	movs	r2, #0
 8002208:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800220a:	7bfa      	ldrb	r2, [r7, #15]
 800220c:	6879      	ldr	r1, [r7, #4]
 800220e:	4613      	mov	r3, r2
 8002210:	00db      	lsls	r3, r3, #3
 8002212:	4413      	add	r3, r2
 8002214:	009b      	lsls	r3, r3, #2
 8002216:	440b      	add	r3, r1
 8002218:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800221c:	2200      	movs	r2, #0
 800221e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002220:	7bfb      	ldrb	r3, [r7, #15]
 8002222:	3301      	adds	r3, #1
 8002224:	73fb      	strb	r3, [r7, #15]
 8002226:	7bfa      	ldrb	r2, [r7, #15]
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	685b      	ldr	r3, [r3, #4]
 800222c:	429a      	cmp	r2, r3
 800222e:	d3b5      	bcc.n	800219c <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	603b      	str	r3, [r7, #0]
 8002236:	687e      	ldr	r6, [r7, #4]
 8002238:	466d      	mov	r5, sp
 800223a:	f106 0410 	add.w	r4, r6, #16
 800223e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002240:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002242:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002244:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002246:	e894 0003 	ldmia.w	r4, {r0, r1}
 800224a:	e885 0003 	stmia.w	r5, {r0, r1}
 800224e:	1d33      	adds	r3, r6, #4
 8002250:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002252:	6838      	ldr	r0, [r7, #0]
 8002254:	f003 fe16 	bl	8005e84 <USB_DevInit>
 8002258:	4603      	mov	r3, r0
 800225a:	2b00      	cmp	r3, #0
 800225c:	d005      	beq.n	800226a <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	2202      	movs	r2, #2
 8002262:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002266:	2301      	movs	r3, #1
 8002268:	e00d      	b.n	8002286 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	2200      	movs	r2, #0
 800226e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	2201      	movs	r2, #1
 8002276:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	4618      	mov	r0, r3
 8002280:	f004 ff65 	bl	800714e <USB_DevDisconnect>

  return HAL_OK;
 8002284:	2300      	movs	r3, #0
}
 8002286:	4618      	mov	r0, r3
 8002288:	3714      	adds	r7, #20
 800228a:	46bd      	mov	sp, r7
 800228c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800228e <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800228e:	b580      	push	{r7, lr}
 8002290:	b084      	sub	sp, #16
 8002292:	af00      	add	r7, sp, #0
 8002294:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80022a2:	2b01      	cmp	r3, #1
 80022a4:	d101      	bne.n	80022aa <HAL_PCD_Start+0x1c>
 80022a6:	2302      	movs	r3, #2
 80022a8:	e020      	b.n	80022ec <HAL_PCD_Start+0x5e>
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	2201      	movs	r2, #1
 80022ae:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022b6:	2b01      	cmp	r3, #1
 80022b8:	d109      	bne.n	80022ce <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80022be:	2b01      	cmp	r3, #1
 80022c0:	d005      	beq.n	80022ce <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022c6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	4618      	mov	r0, r3
 80022d4:	f003 fd68 	bl	8005da8 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	4618      	mov	r0, r3
 80022de:	f004 ff15 	bl	800710c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	2200      	movs	r2, #0
 80022e6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80022ea:	2300      	movs	r3, #0
}
 80022ec:	4618      	mov	r0, r3
 80022ee:	3710      	adds	r7, #16
 80022f0:	46bd      	mov	sp, r7
 80022f2:	bd80      	pop	{r7, pc}

080022f4 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80022f4:	b590      	push	{r4, r7, lr}
 80022f6:	b08d      	sub	sp, #52	; 0x34
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002302:	6a3b      	ldr	r3, [r7, #32]
 8002304:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	4618      	mov	r0, r3
 800230c:	f004 ffd3 	bl	80072b6 <USB_GetMode>
 8002310:	4603      	mov	r3, r0
 8002312:	2b00      	cmp	r3, #0
 8002314:	f040 848a 	bne.w	8002c2c <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	4618      	mov	r0, r3
 800231e:	f004 ff37 	bl	8007190 <USB_ReadInterrupts>
 8002322:	4603      	mov	r3, r0
 8002324:	2b00      	cmp	r3, #0
 8002326:	f000 8480 	beq.w	8002c2a <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800232a:	69fb      	ldr	r3, [r7, #28]
 800232c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002330:	689b      	ldr	r3, [r3, #8]
 8002332:	0a1b      	lsrs	r3, r3, #8
 8002334:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	4618      	mov	r0, r3
 8002344:	f004 ff24 	bl	8007190 <USB_ReadInterrupts>
 8002348:	4603      	mov	r3, r0
 800234a:	f003 0302 	and.w	r3, r3, #2
 800234e:	2b02      	cmp	r3, #2
 8002350:	d107      	bne.n	8002362 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	695a      	ldr	r2, [r3, #20]
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f002 0202 	and.w	r2, r2, #2
 8002360:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	4618      	mov	r0, r3
 8002368:	f004 ff12 	bl	8007190 <USB_ReadInterrupts>
 800236c:	4603      	mov	r3, r0
 800236e:	f003 0310 	and.w	r3, r3, #16
 8002372:	2b10      	cmp	r3, #16
 8002374:	d161      	bne.n	800243a <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	699a      	ldr	r2, [r3, #24]
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f022 0210 	bic.w	r2, r2, #16
 8002384:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8002386:	6a3b      	ldr	r3, [r7, #32]
 8002388:	6a1b      	ldr	r3, [r3, #32]
 800238a:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800238c:	69bb      	ldr	r3, [r7, #24]
 800238e:	f003 020f 	and.w	r2, r3, #15
 8002392:	4613      	mov	r3, r2
 8002394:	00db      	lsls	r3, r3, #3
 8002396:	4413      	add	r3, r2
 8002398:	009b      	lsls	r3, r3, #2
 800239a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800239e:	687a      	ldr	r2, [r7, #4]
 80023a0:	4413      	add	r3, r2
 80023a2:	3304      	adds	r3, #4
 80023a4:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80023a6:	69bb      	ldr	r3, [r7, #24]
 80023a8:	0c5b      	lsrs	r3, r3, #17
 80023aa:	f003 030f 	and.w	r3, r3, #15
 80023ae:	2b02      	cmp	r3, #2
 80023b0:	d124      	bne.n	80023fc <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80023b2:	69ba      	ldr	r2, [r7, #24]
 80023b4:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80023b8:	4013      	ands	r3, r2
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d035      	beq.n	800242a <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80023be:	697b      	ldr	r3, [r7, #20]
 80023c0:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80023c2:	69bb      	ldr	r3, [r7, #24]
 80023c4:	091b      	lsrs	r3, r3, #4
 80023c6:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80023c8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80023cc:	b29b      	uxth	r3, r3
 80023ce:	461a      	mov	r2, r3
 80023d0:	6a38      	ldr	r0, [r7, #32]
 80023d2:	f004 fd49 	bl	8006e68 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80023d6:	697b      	ldr	r3, [r7, #20]
 80023d8:	691a      	ldr	r2, [r3, #16]
 80023da:	69bb      	ldr	r3, [r7, #24]
 80023dc:	091b      	lsrs	r3, r3, #4
 80023de:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80023e2:	441a      	add	r2, r3
 80023e4:	697b      	ldr	r3, [r7, #20]
 80023e6:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80023e8:	697b      	ldr	r3, [r7, #20]
 80023ea:	6a1a      	ldr	r2, [r3, #32]
 80023ec:	69bb      	ldr	r3, [r7, #24]
 80023ee:	091b      	lsrs	r3, r3, #4
 80023f0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80023f4:	441a      	add	r2, r3
 80023f6:	697b      	ldr	r3, [r7, #20]
 80023f8:	621a      	str	r2, [r3, #32]
 80023fa:	e016      	b.n	800242a <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80023fc:	69bb      	ldr	r3, [r7, #24]
 80023fe:	0c5b      	lsrs	r3, r3, #17
 8002400:	f003 030f 	and.w	r3, r3, #15
 8002404:	2b06      	cmp	r3, #6
 8002406:	d110      	bne.n	800242a <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800240e:	2208      	movs	r2, #8
 8002410:	4619      	mov	r1, r3
 8002412:	6a38      	ldr	r0, [r7, #32]
 8002414:	f004 fd28 	bl	8006e68 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002418:	697b      	ldr	r3, [r7, #20]
 800241a:	6a1a      	ldr	r2, [r3, #32]
 800241c:	69bb      	ldr	r3, [r7, #24]
 800241e:	091b      	lsrs	r3, r3, #4
 8002420:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002424:	441a      	add	r2, r3
 8002426:	697b      	ldr	r3, [r7, #20]
 8002428:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	699a      	ldr	r2, [r3, #24]
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f042 0210 	orr.w	r2, r2, #16
 8002438:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	4618      	mov	r0, r3
 8002440:	f004 fea6 	bl	8007190 <USB_ReadInterrupts>
 8002444:	4603      	mov	r3, r0
 8002446:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800244a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800244e:	f040 80a7 	bne.w	80025a0 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8002452:	2300      	movs	r3, #0
 8002454:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	4618      	mov	r0, r3
 800245c:	f004 feab 	bl	80071b6 <USB_ReadDevAllOutEpInterrupt>
 8002460:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8002462:	e099      	b.n	8002598 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002464:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002466:	f003 0301 	and.w	r3, r3, #1
 800246a:	2b00      	cmp	r3, #0
 800246c:	f000 808e 	beq.w	800258c <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002476:	b2d2      	uxtb	r2, r2
 8002478:	4611      	mov	r1, r2
 800247a:	4618      	mov	r0, r3
 800247c:	f004 fecf 	bl	800721e <USB_ReadDevOutEPInterrupt>
 8002480:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002482:	693b      	ldr	r3, [r7, #16]
 8002484:	f003 0301 	and.w	r3, r3, #1
 8002488:	2b00      	cmp	r3, #0
 800248a:	d00c      	beq.n	80024a6 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800248c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800248e:	015a      	lsls	r2, r3, #5
 8002490:	69fb      	ldr	r3, [r7, #28]
 8002492:	4413      	add	r3, r2
 8002494:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002498:	461a      	mov	r2, r3
 800249a:	2301      	movs	r3, #1
 800249c:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800249e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80024a0:	6878      	ldr	r0, [r7, #4]
 80024a2:	f000 fec3 	bl	800322c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80024a6:	693b      	ldr	r3, [r7, #16]
 80024a8:	f003 0308 	and.w	r3, r3, #8
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d00c      	beq.n	80024ca <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80024b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024b2:	015a      	lsls	r2, r3, #5
 80024b4:	69fb      	ldr	r3, [r7, #28]
 80024b6:	4413      	add	r3, r2
 80024b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80024bc:	461a      	mov	r2, r3
 80024be:	2308      	movs	r3, #8
 80024c0:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80024c2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80024c4:	6878      	ldr	r0, [r7, #4]
 80024c6:	f000 ff99 	bl	80033fc <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80024ca:	693b      	ldr	r3, [r7, #16]
 80024cc:	f003 0310 	and.w	r3, r3, #16
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d008      	beq.n	80024e6 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80024d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024d6:	015a      	lsls	r2, r3, #5
 80024d8:	69fb      	ldr	r3, [r7, #28]
 80024da:	4413      	add	r3, r2
 80024dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80024e0:	461a      	mov	r2, r3
 80024e2:	2310      	movs	r3, #16
 80024e4:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80024e6:	693b      	ldr	r3, [r7, #16]
 80024e8:	f003 0302 	and.w	r3, r3, #2
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d030      	beq.n	8002552 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80024f0:	6a3b      	ldr	r3, [r7, #32]
 80024f2:	695b      	ldr	r3, [r3, #20]
 80024f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024f8:	2b80      	cmp	r3, #128	; 0x80
 80024fa:	d109      	bne.n	8002510 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80024fc:	69fb      	ldr	r3, [r7, #28]
 80024fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002502:	685b      	ldr	r3, [r3, #4]
 8002504:	69fa      	ldr	r2, [r7, #28]
 8002506:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800250a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800250e:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8002510:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002512:	4613      	mov	r3, r2
 8002514:	00db      	lsls	r3, r3, #3
 8002516:	4413      	add	r3, r2
 8002518:	009b      	lsls	r3, r3, #2
 800251a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800251e:	687a      	ldr	r2, [r7, #4]
 8002520:	4413      	add	r3, r2
 8002522:	3304      	adds	r3, #4
 8002524:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002526:	697b      	ldr	r3, [r7, #20]
 8002528:	78db      	ldrb	r3, [r3, #3]
 800252a:	2b01      	cmp	r3, #1
 800252c:	d108      	bne.n	8002540 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800252e:	697b      	ldr	r3, [r7, #20]
 8002530:	2200      	movs	r2, #0
 8002532:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002536:	b2db      	uxtb	r3, r3
 8002538:	4619      	mov	r1, r3
 800253a:	6878      	ldr	r0, [r7, #4]
 800253c:	f007 fa70 	bl	8009a20 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8002540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002542:	015a      	lsls	r2, r3, #5
 8002544:	69fb      	ldr	r3, [r7, #28]
 8002546:	4413      	add	r3, r2
 8002548:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800254c:	461a      	mov	r2, r3
 800254e:	2302      	movs	r3, #2
 8002550:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002552:	693b      	ldr	r3, [r7, #16]
 8002554:	f003 0320 	and.w	r3, r3, #32
 8002558:	2b00      	cmp	r3, #0
 800255a:	d008      	beq.n	800256e <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800255c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800255e:	015a      	lsls	r2, r3, #5
 8002560:	69fb      	ldr	r3, [r7, #28]
 8002562:	4413      	add	r3, r2
 8002564:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002568:	461a      	mov	r2, r3
 800256a:	2320      	movs	r3, #32
 800256c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800256e:	693b      	ldr	r3, [r7, #16]
 8002570:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002574:	2b00      	cmp	r3, #0
 8002576:	d009      	beq.n	800258c <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002578:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800257a:	015a      	lsls	r2, r3, #5
 800257c:	69fb      	ldr	r3, [r7, #28]
 800257e:	4413      	add	r3, r2
 8002580:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002584:	461a      	mov	r2, r3
 8002586:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800258a:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800258c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800258e:	3301      	adds	r3, #1
 8002590:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002592:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002594:	085b      	lsrs	r3, r3, #1
 8002596:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002598:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800259a:	2b00      	cmp	r3, #0
 800259c:	f47f af62 	bne.w	8002464 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	4618      	mov	r0, r3
 80025a6:	f004 fdf3 	bl	8007190 <USB_ReadInterrupts>
 80025aa:	4603      	mov	r3, r0
 80025ac:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80025b0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80025b4:	f040 80db 	bne.w	800276e <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	4618      	mov	r0, r3
 80025be:	f004 fe14 	bl	80071ea <USB_ReadDevAllInEpInterrupt>
 80025c2:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80025c4:	2300      	movs	r3, #0
 80025c6:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80025c8:	e0cd      	b.n	8002766 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80025ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025cc:	f003 0301 	and.w	r3, r3, #1
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	f000 80c2 	beq.w	800275a <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025dc:	b2d2      	uxtb	r2, r2
 80025de:	4611      	mov	r1, r2
 80025e0:	4618      	mov	r0, r3
 80025e2:	f004 fe3a 	bl	800725a <USB_ReadDevInEPInterrupt>
 80025e6:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80025e8:	693b      	ldr	r3, [r7, #16]
 80025ea:	f003 0301 	and.w	r3, r3, #1
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d057      	beq.n	80026a2 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80025f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025f4:	f003 030f 	and.w	r3, r3, #15
 80025f8:	2201      	movs	r2, #1
 80025fa:	fa02 f303 	lsl.w	r3, r2, r3
 80025fe:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002600:	69fb      	ldr	r3, [r7, #28]
 8002602:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002606:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	43db      	mvns	r3, r3
 800260c:	69f9      	ldr	r1, [r7, #28]
 800260e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002612:	4013      	ands	r3, r2
 8002614:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002618:	015a      	lsls	r2, r3, #5
 800261a:	69fb      	ldr	r3, [r7, #28]
 800261c:	4413      	add	r3, r2
 800261e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002622:	461a      	mov	r2, r3
 8002624:	2301      	movs	r3, #1
 8002626:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	691b      	ldr	r3, [r3, #16]
 800262c:	2b01      	cmp	r3, #1
 800262e:	d132      	bne.n	8002696 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002630:	6879      	ldr	r1, [r7, #4]
 8002632:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002634:	4613      	mov	r3, r2
 8002636:	00db      	lsls	r3, r3, #3
 8002638:	4413      	add	r3, r2
 800263a:	009b      	lsls	r3, r3, #2
 800263c:	440b      	add	r3, r1
 800263e:	334c      	adds	r3, #76	; 0x4c
 8002640:	6819      	ldr	r1, [r3, #0]
 8002642:	6878      	ldr	r0, [r7, #4]
 8002644:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002646:	4613      	mov	r3, r2
 8002648:	00db      	lsls	r3, r3, #3
 800264a:	4413      	add	r3, r2
 800264c:	009b      	lsls	r3, r3, #2
 800264e:	4403      	add	r3, r0
 8002650:	3348      	adds	r3, #72	; 0x48
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	4419      	add	r1, r3
 8002656:	6878      	ldr	r0, [r7, #4]
 8002658:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800265a:	4613      	mov	r3, r2
 800265c:	00db      	lsls	r3, r3, #3
 800265e:	4413      	add	r3, r2
 8002660:	009b      	lsls	r3, r3, #2
 8002662:	4403      	add	r3, r0
 8002664:	334c      	adds	r3, #76	; 0x4c
 8002666:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800266a:	2b00      	cmp	r3, #0
 800266c:	d113      	bne.n	8002696 <HAL_PCD_IRQHandler+0x3a2>
 800266e:	6879      	ldr	r1, [r7, #4]
 8002670:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002672:	4613      	mov	r3, r2
 8002674:	00db      	lsls	r3, r3, #3
 8002676:	4413      	add	r3, r2
 8002678:	009b      	lsls	r3, r3, #2
 800267a:	440b      	add	r3, r1
 800267c:	3354      	adds	r3, #84	; 0x54
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	2b00      	cmp	r3, #0
 8002682:	d108      	bne.n	8002696 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	6818      	ldr	r0, [r3, #0]
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800268e:	461a      	mov	r2, r3
 8002690:	2101      	movs	r1, #1
 8002692:	f004 fe41 	bl	8007318 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002698:	b2db      	uxtb	r3, r3
 800269a:	4619      	mov	r1, r3
 800269c:	6878      	ldr	r0, [r7, #4]
 800269e:	f007 f93a 	bl	8009916 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80026a2:	693b      	ldr	r3, [r7, #16]
 80026a4:	f003 0308 	and.w	r3, r3, #8
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d008      	beq.n	80026be <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80026ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026ae:	015a      	lsls	r2, r3, #5
 80026b0:	69fb      	ldr	r3, [r7, #28]
 80026b2:	4413      	add	r3, r2
 80026b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80026b8:	461a      	mov	r2, r3
 80026ba:	2308      	movs	r3, #8
 80026bc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80026be:	693b      	ldr	r3, [r7, #16]
 80026c0:	f003 0310 	and.w	r3, r3, #16
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d008      	beq.n	80026da <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80026c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026ca:	015a      	lsls	r2, r3, #5
 80026cc:	69fb      	ldr	r3, [r7, #28]
 80026ce:	4413      	add	r3, r2
 80026d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80026d4:	461a      	mov	r2, r3
 80026d6:	2310      	movs	r3, #16
 80026d8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80026da:	693b      	ldr	r3, [r7, #16]
 80026dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d008      	beq.n	80026f6 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80026e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026e6:	015a      	lsls	r2, r3, #5
 80026e8:	69fb      	ldr	r3, [r7, #28]
 80026ea:	4413      	add	r3, r2
 80026ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80026f0:	461a      	mov	r2, r3
 80026f2:	2340      	movs	r3, #64	; 0x40
 80026f4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80026f6:	693b      	ldr	r3, [r7, #16]
 80026f8:	f003 0302 	and.w	r3, r3, #2
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d023      	beq.n	8002748 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8002700:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002702:	6a38      	ldr	r0, [r7, #32]
 8002704:	f003 fd22 	bl	800614c <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8002708:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800270a:	4613      	mov	r3, r2
 800270c:	00db      	lsls	r3, r3, #3
 800270e:	4413      	add	r3, r2
 8002710:	009b      	lsls	r3, r3, #2
 8002712:	3338      	adds	r3, #56	; 0x38
 8002714:	687a      	ldr	r2, [r7, #4]
 8002716:	4413      	add	r3, r2
 8002718:	3304      	adds	r3, #4
 800271a:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800271c:	697b      	ldr	r3, [r7, #20]
 800271e:	78db      	ldrb	r3, [r3, #3]
 8002720:	2b01      	cmp	r3, #1
 8002722:	d108      	bne.n	8002736 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8002724:	697b      	ldr	r3, [r7, #20]
 8002726:	2200      	movs	r2, #0
 8002728:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800272a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800272c:	b2db      	uxtb	r3, r3
 800272e:	4619      	mov	r1, r3
 8002730:	6878      	ldr	r0, [r7, #4]
 8002732:	f007 f987 	bl	8009a44 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002738:	015a      	lsls	r2, r3, #5
 800273a:	69fb      	ldr	r3, [r7, #28]
 800273c:	4413      	add	r3, r2
 800273e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002742:	461a      	mov	r2, r3
 8002744:	2302      	movs	r3, #2
 8002746:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002748:	693b      	ldr	r3, [r7, #16]
 800274a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800274e:	2b00      	cmp	r3, #0
 8002750:	d003      	beq.n	800275a <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002752:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002754:	6878      	ldr	r0, [r7, #4]
 8002756:	f000 fcdb 	bl	8003110 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800275a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800275c:	3301      	adds	r3, #1
 800275e:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002760:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002762:	085b      	lsrs	r3, r3, #1
 8002764:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002766:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002768:	2b00      	cmp	r3, #0
 800276a:	f47f af2e 	bne.w	80025ca <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	4618      	mov	r0, r3
 8002774:	f004 fd0c 	bl	8007190 <USB_ReadInterrupts>
 8002778:	4603      	mov	r3, r0
 800277a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800277e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002782:	d122      	bne.n	80027ca <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002784:	69fb      	ldr	r3, [r7, #28]
 8002786:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800278a:	685b      	ldr	r3, [r3, #4]
 800278c:	69fa      	ldr	r2, [r7, #28]
 800278e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002792:	f023 0301 	bic.w	r3, r3, #1
 8002796:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 800279e:	2b01      	cmp	r3, #1
 80027a0:	d108      	bne.n	80027b4 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	2200      	movs	r2, #0
 80027a6:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80027aa:	2100      	movs	r1, #0
 80027ac:	6878      	ldr	r0, [r7, #4]
 80027ae:	f000 fec3 	bl	8003538 <HAL_PCDEx_LPM_Callback>
 80027b2:	e002      	b.n	80027ba <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80027b4:	6878      	ldr	r0, [r7, #4]
 80027b6:	f007 f925 	bl	8009a04 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	695a      	ldr	r2, [r3, #20]
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80027c8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	4618      	mov	r0, r3
 80027d0:	f004 fcde 	bl	8007190 <USB_ReadInterrupts>
 80027d4:	4603      	mov	r3, r0
 80027d6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80027da:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80027de:	d112      	bne.n	8002806 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80027e0:	69fb      	ldr	r3, [r7, #28]
 80027e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80027e6:	689b      	ldr	r3, [r3, #8]
 80027e8:	f003 0301 	and.w	r3, r3, #1
 80027ec:	2b01      	cmp	r3, #1
 80027ee:	d102      	bne.n	80027f6 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80027f0:	6878      	ldr	r0, [r7, #4]
 80027f2:	f007 f8e1 	bl	80099b8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	695a      	ldr	r2, [r3, #20]
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8002804:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	4618      	mov	r0, r3
 800280c:	f004 fcc0 	bl	8007190 <USB_ReadInterrupts>
 8002810:	4603      	mov	r3, r0
 8002812:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002816:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800281a:	f040 80b7 	bne.w	800298c <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800281e:	69fb      	ldr	r3, [r7, #28]
 8002820:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002824:	685b      	ldr	r3, [r3, #4]
 8002826:	69fa      	ldr	r2, [r7, #28]
 8002828:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800282c:	f023 0301 	bic.w	r3, r3, #1
 8002830:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	2110      	movs	r1, #16
 8002838:	4618      	mov	r0, r3
 800283a:	f003 fc87 	bl	800614c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800283e:	2300      	movs	r3, #0
 8002840:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002842:	e046      	b.n	80028d2 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002844:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002846:	015a      	lsls	r2, r3, #5
 8002848:	69fb      	ldr	r3, [r7, #28]
 800284a:	4413      	add	r3, r2
 800284c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002850:	461a      	mov	r2, r3
 8002852:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002856:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002858:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800285a:	015a      	lsls	r2, r3, #5
 800285c:	69fb      	ldr	r3, [r7, #28]
 800285e:	4413      	add	r3, r2
 8002860:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002868:	0151      	lsls	r1, r2, #5
 800286a:	69fa      	ldr	r2, [r7, #28]
 800286c:	440a      	add	r2, r1
 800286e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002872:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002876:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002878:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800287a:	015a      	lsls	r2, r3, #5
 800287c:	69fb      	ldr	r3, [r7, #28]
 800287e:	4413      	add	r3, r2
 8002880:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002884:	461a      	mov	r2, r3
 8002886:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800288a:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800288c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800288e:	015a      	lsls	r2, r3, #5
 8002890:	69fb      	ldr	r3, [r7, #28]
 8002892:	4413      	add	r3, r2
 8002894:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800289c:	0151      	lsls	r1, r2, #5
 800289e:	69fa      	ldr	r2, [r7, #28]
 80028a0:	440a      	add	r2, r1
 80028a2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80028a6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80028aa:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80028ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028ae:	015a      	lsls	r2, r3, #5
 80028b0:	69fb      	ldr	r3, [r7, #28]
 80028b2:	4413      	add	r3, r2
 80028b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80028bc:	0151      	lsls	r1, r2, #5
 80028be:	69fa      	ldr	r2, [r7, #28]
 80028c0:	440a      	add	r2, r1
 80028c2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80028c6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80028ca:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80028cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028ce:	3301      	adds	r3, #1
 80028d0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	685b      	ldr	r3, [r3, #4]
 80028d6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80028d8:	429a      	cmp	r2, r3
 80028da:	d3b3      	bcc.n	8002844 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80028dc:	69fb      	ldr	r3, [r7, #28]
 80028de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80028e2:	69db      	ldr	r3, [r3, #28]
 80028e4:	69fa      	ldr	r2, [r7, #28]
 80028e6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80028ea:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80028ee:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d016      	beq.n	8002926 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80028f8:	69fb      	ldr	r3, [r7, #28]
 80028fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80028fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002902:	69fa      	ldr	r2, [r7, #28]
 8002904:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002908:	f043 030b 	orr.w	r3, r3, #11
 800290c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002910:	69fb      	ldr	r3, [r7, #28]
 8002912:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002916:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002918:	69fa      	ldr	r2, [r7, #28]
 800291a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800291e:	f043 030b 	orr.w	r3, r3, #11
 8002922:	6453      	str	r3, [r2, #68]	; 0x44
 8002924:	e015      	b.n	8002952 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002926:	69fb      	ldr	r3, [r7, #28]
 8002928:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800292c:	695b      	ldr	r3, [r3, #20]
 800292e:	69fa      	ldr	r2, [r7, #28]
 8002930:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002934:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002938:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800293c:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800293e:	69fb      	ldr	r3, [r7, #28]
 8002940:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002944:	691b      	ldr	r3, [r3, #16]
 8002946:	69fa      	ldr	r2, [r7, #28]
 8002948:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800294c:	f043 030b 	orr.w	r3, r3, #11
 8002950:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002952:	69fb      	ldr	r3, [r7, #28]
 8002954:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	69fa      	ldr	r2, [r7, #28]
 800295c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002960:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8002964:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	6818      	ldr	r0, [r3, #0]
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	691b      	ldr	r3, [r3, #16]
 800296e:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002976:	461a      	mov	r2, r3
 8002978:	f004 fcce 	bl	8007318 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	695a      	ldr	r2, [r3, #20]
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800298a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	4618      	mov	r0, r3
 8002992:	f004 fbfd 	bl	8007190 <USB_ReadInterrupts>
 8002996:	4603      	mov	r3, r0
 8002998:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800299c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80029a0:	d124      	bne.n	80029ec <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	4618      	mov	r0, r3
 80029a8:	f004 fc93 	bl	80072d2 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	4618      	mov	r0, r3
 80029b2:	f003 fc48 	bl	8006246 <USB_GetDevSpeed>
 80029b6:	4603      	mov	r3, r0
 80029b8:	461a      	mov	r2, r3
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681c      	ldr	r4, [r3, #0]
 80029c2:	f001 f9e9 	bl	8003d98 <HAL_RCC_GetHCLKFreq>
 80029c6:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80029cc:	b2db      	uxtb	r3, r3
 80029ce:	461a      	mov	r2, r3
 80029d0:	4620      	mov	r0, r4
 80029d2:	f003 f947 	bl	8005c64 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80029d6:	6878      	ldr	r0, [r7, #4]
 80029d8:	f006 ffc5 	bl	8009966 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	695a      	ldr	r2, [r3, #20]
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80029ea:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	4618      	mov	r0, r3
 80029f2:	f004 fbcd 	bl	8007190 <USB_ReadInterrupts>
 80029f6:	4603      	mov	r3, r0
 80029f8:	f003 0308 	and.w	r3, r3, #8
 80029fc:	2b08      	cmp	r3, #8
 80029fe:	d10a      	bne.n	8002a16 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002a00:	6878      	ldr	r0, [r7, #4]
 8002a02:	f006 ffa2 	bl	800994a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	695a      	ldr	r2, [r3, #20]
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f002 0208 	and.w	r2, r2, #8
 8002a14:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	f004 fbb8 	bl	8007190 <USB_ReadInterrupts>
 8002a20:	4603      	mov	r3, r0
 8002a22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a26:	2b80      	cmp	r3, #128	; 0x80
 8002a28:	d122      	bne.n	8002a70 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8002a2a:	6a3b      	ldr	r3, [r7, #32]
 8002a2c:	699b      	ldr	r3, [r3, #24]
 8002a2e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002a32:	6a3b      	ldr	r3, [r7, #32]
 8002a34:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002a36:	2301      	movs	r3, #1
 8002a38:	627b      	str	r3, [r7, #36]	; 0x24
 8002a3a:	e014      	b.n	8002a66 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8002a3c:	6879      	ldr	r1, [r7, #4]
 8002a3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a40:	4613      	mov	r3, r2
 8002a42:	00db      	lsls	r3, r3, #3
 8002a44:	4413      	add	r3, r2
 8002a46:	009b      	lsls	r3, r3, #2
 8002a48:	440b      	add	r3, r1
 8002a4a:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8002a4e:	781b      	ldrb	r3, [r3, #0]
 8002a50:	2b01      	cmp	r3, #1
 8002a52:	d105      	bne.n	8002a60 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8002a54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a56:	b2db      	uxtb	r3, r3
 8002a58:	4619      	mov	r1, r3
 8002a5a:	6878      	ldr	r0, [r7, #4]
 8002a5c:	f000 fb27 	bl	80030ae <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002a60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a62:	3301      	adds	r3, #1
 8002a64:	627b      	str	r3, [r7, #36]	; 0x24
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	685b      	ldr	r3, [r3, #4]
 8002a6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a6c:	429a      	cmp	r2, r3
 8002a6e:	d3e5      	bcc.n	8002a3c <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	4618      	mov	r0, r3
 8002a76:	f004 fb8b 	bl	8007190 <USB_ReadInterrupts>
 8002a7a:	4603      	mov	r3, r0
 8002a7c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a80:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002a84:	d13b      	bne.n	8002afe <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002a86:	2301      	movs	r3, #1
 8002a88:	627b      	str	r3, [r7, #36]	; 0x24
 8002a8a:	e02b      	b.n	8002ae4 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8002a8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a8e:	015a      	lsls	r2, r3, #5
 8002a90:	69fb      	ldr	r3, [r7, #28]
 8002a92:	4413      	add	r3, r2
 8002a94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002a9c:	6879      	ldr	r1, [r7, #4]
 8002a9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002aa0:	4613      	mov	r3, r2
 8002aa2:	00db      	lsls	r3, r3, #3
 8002aa4:	4413      	add	r3, r2
 8002aa6:	009b      	lsls	r3, r3, #2
 8002aa8:	440b      	add	r3, r1
 8002aaa:	3340      	adds	r3, #64	; 0x40
 8002aac:	781b      	ldrb	r3, [r3, #0]
 8002aae:	2b01      	cmp	r3, #1
 8002ab0:	d115      	bne.n	8002ade <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8002ab2:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	da12      	bge.n	8002ade <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8002ab8:	6879      	ldr	r1, [r7, #4]
 8002aba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002abc:	4613      	mov	r3, r2
 8002abe:	00db      	lsls	r3, r3, #3
 8002ac0:	4413      	add	r3, r2
 8002ac2:	009b      	lsls	r3, r3, #2
 8002ac4:	440b      	add	r3, r1
 8002ac6:	333f      	adds	r3, #63	; 0x3f
 8002ac8:	2201      	movs	r2, #1
 8002aca:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8002acc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ace:	b2db      	uxtb	r3, r3
 8002ad0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002ad4:	b2db      	uxtb	r3, r3
 8002ad6:	4619      	mov	r1, r3
 8002ad8:	6878      	ldr	r0, [r7, #4]
 8002ada:	f000 fae8 	bl	80030ae <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002ade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ae0:	3301      	adds	r3, #1
 8002ae2:	627b      	str	r3, [r7, #36]	; 0x24
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	685b      	ldr	r3, [r3, #4]
 8002ae8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002aea:	429a      	cmp	r2, r3
 8002aec:	d3ce      	bcc.n	8002a8c <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	695a      	ldr	r2, [r3, #20]
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8002afc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	4618      	mov	r0, r3
 8002b04:	f004 fb44 	bl	8007190 <USB_ReadInterrupts>
 8002b08:	4603      	mov	r3, r0
 8002b0a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b0e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002b12:	d155      	bne.n	8002bc0 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002b14:	2301      	movs	r3, #1
 8002b16:	627b      	str	r3, [r7, #36]	; 0x24
 8002b18:	e045      	b.n	8002ba6 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8002b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b1c:	015a      	lsls	r2, r3, #5
 8002b1e:	69fb      	ldr	r3, [r7, #28]
 8002b20:	4413      	add	r3, r2
 8002b22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002b2a:	6879      	ldr	r1, [r7, #4]
 8002b2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b2e:	4613      	mov	r3, r2
 8002b30:	00db      	lsls	r3, r3, #3
 8002b32:	4413      	add	r3, r2
 8002b34:	009b      	lsls	r3, r3, #2
 8002b36:	440b      	add	r3, r1
 8002b38:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002b3c:	781b      	ldrb	r3, [r3, #0]
 8002b3e:	2b01      	cmp	r3, #1
 8002b40:	d12e      	bne.n	8002ba0 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002b42:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	da2b      	bge.n	8002ba0 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8002b48:	69bb      	ldr	r3, [r7, #24]
 8002b4a:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8002b54:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002b58:	429a      	cmp	r2, r3
 8002b5a:	d121      	bne.n	8002ba0 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8002b5c:	6879      	ldr	r1, [r7, #4]
 8002b5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b60:	4613      	mov	r3, r2
 8002b62:	00db      	lsls	r3, r3, #3
 8002b64:	4413      	add	r3, r2
 8002b66:	009b      	lsls	r3, r3, #2
 8002b68:	440b      	add	r3, r1
 8002b6a:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8002b6e:	2201      	movs	r2, #1
 8002b70:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8002b72:	6a3b      	ldr	r3, [r7, #32]
 8002b74:	699b      	ldr	r3, [r3, #24]
 8002b76:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002b7a:	6a3b      	ldr	r3, [r7, #32]
 8002b7c:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8002b7e:	6a3b      	ldr	r3, [r7, #32]
 8002b80:	695b      	ldr	r3, [r3, #20]
 8002b82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d10a      	bne.n	8002ba0 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8002b8a:	69fb      	ldr	r3, [r7, #28]
 8002b8c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002b90:	685b      	ldr	r3, [r3, #4]
 8002b92:	69fa      	ldr	r2, [r7, #28]
 8002b94:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002b98:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002b9c:	6053      	str	r3, [r2, #4]
            break;
 8002b9e:	e007      	b.n	8002bb0 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002ba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ba2:	3301      	adds	r3, #1
 8002ba4:	627b      	str	r3, [r7, #36]	; 0x24
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	685b      	ldr	r3, [r3, #4]
 8002baa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002bac:	429a      	cmp	r2, r3
 8002bae:	d3b4      	bcc.n	8002b1a <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	695a      	ldr	r2, [r3, #20]
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8002bbe:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	4618      	mov	r0, r3
 8002bc6:	f004 fae3 	bl	8007190 <USB_ReadInterrupts>
 8002bca:	4603      	mov	r3, r0
 8002bcc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002bd0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002bd4:	d10a      	bne.n	8002bec <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002bd6:	6878      	ldr	r0, [r7, #4]
 8002bd8:	f006 ff46 	bl	8009a68 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	695a      	ldr	r2, [r3, #20]
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002bea:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	f004 facd 	bl	8007190 <USB_ReadInterrupts>
 8002bf6:	4603      	mov	r3, r0
 8002bf8:	f003 0304 	and.w	r3, r3, #4
 8002bfc:	2b04      	cmp	r3, #4
 8002bfe:	d115      	bne.n	8002c2c <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	685b      	ldr	r3, [r3, #4]
 8002c06:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002c08:	69bb      	ldr	r3, [r7, #24]
 8002c0a:	f003 0304 	and.w	r3, r3, #4
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d002      	beq.n	8002c18 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002c12:	6878      	ldr	r0, [r7, #4]
 8002c14:	f006 ff36 	bl	8009a84 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	6859      	ldr	r1, [r3, #4]
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	69ba      	ldr	r2, [r7, #24]
 8002c24:	430a      	orrs	r2, r1
 8002c26:	605a      	str	r2, [r3, #4]
 8002c28:	e000      	b.n	8002c2c <HAL_PCD_IRQHandler+0x938>
      return;
 8002c2a:	bf00      	nop
    }
  }
}
 8002c2c:	3734      	adds	r7, #52	; 0x34
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	bd90      	pop	{r4, r7, pc}

08002c32 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002c32:	b580      	push	{r7, lr}
 8002c34:	b082      	sub	sp, #8
 8002c36:	af00      	add	r7, sp, #0
 8002c38:	6078      	str	r0, [r7, #4]
 8002c3a:	460b      	mov	r3, r1
 8002c3c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002c44:	2b01      	cmp	r3, #1
 8002c46:	d101      	bne.n	8002c4c <HAL_PCD_SetAddress+0x1a>
 8002c48:	2302      	movs	r3, #2
 8002c4a:	e013      	b.n	8002c74 <HAL_PCD_SetAddress+0x42>
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	2201      	movs	r2, #1
 8002c50:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	78fa      	ldrb	r2, [r7, #3]
 8002c58:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	78fa      	ldrb	r2, [r7, #3]
 8002c62:	4611      	mov	r1, r2
 8002c64:	4618      	mov	r0, r3
 8002c66:	f004 fa2b 	bl	80070c0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002c72:	2300      	movs	r3, #0
}
 8002c74:	4618      	mov	r0, r3
 8002c76:	3708      	adds	r7, #8
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	bd80      	pop	{r7, pc}

08002c7c <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	b084      	sub	sp, #16
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]
 8002c84:	4608      	mov	r0, r1
 8002c86:	4611      	mov	r1, r2
 8002c88:	461a      	mov	r2, r3
 8002c8a:	4603      	mov	r3, r0
 8002c8c:	70fb      	strb	r3, [r7, #3]
 8002c8e:	460b      	mov	r3, r1
 8002c90:	803b      	strh	r3, [r7, #0]
 8002c92:	4613      	mov	r3, r2
 8002c94:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002c96:	2300      	movs	r3, #0
 8002c98:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002c9a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	da0f      	bge.n	8002cc2 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002ca2:	78fb      	ldrb	r3, [r7, #3]
 8002ca4:	f003 020f 	and.w	r2, r3, #15
 8002ca8:	4613      	mov	r3, r2
 8002caa:	00db      	lsls	r3, r3, #3
 8002cac:	4413      	add	r3, r2
 8002cae:	009b      	lsls	r3, r3, #2
 8002cb0:	3338      	adds	r3, #56	; 0x38
 8002cb2:	687a      	ldr	r2, [r7, #4]
 8002cb4:	4413      	add	r3, r2
 8002cb6:	3304      	adds	r3, #4
 8002cb8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	2201      	movs	r2, #1
 8002cbe:	705a      	strb	r2, [r3, #1]
 8002cc0:	e00f      	b.n	8002ce2 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002cc2:	78fb      	ldrb	r3, [r7, #3]
 8002cc4:	f003 020f 	and.w	r2, r3, #15
 8002cc8:	4613      	mov	r3, r2
 8002cca:	00db      	lsls	r3, r3, #3
 8002ccc:	4413      	add	r3, r2
 8002cce:	009b      	lsls	r3, r3, #2
 8002cd0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002cd4:	687a      	ldr	r2, [r7, #4]
 8002cd6:	4413      	add	r3, r2
 8002cd8:	3304      	adds	r3, #4
 8002cda:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	2200      	movs	r2, #0
 8002ce0:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002ce2:	78fb      	ldrb	r3, [r7, #3]
 8002ce4:	f003 030f 	and.w	r3, r3, #15
 8002ce8:	b2da      	uxtb	r2, r3
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002cee:	883a      	ldrh	r2, [r7, #0]
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	78ba      	ldrb	r2, [r7, #2]
 8002cf8:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	785b      	ldrb	r3, [r3, #1]
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d004      	beq.n	8002d0c <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	781b      	ldrb	r3, [r3, #0]
 8002d06:	b29a      	uxth	r2, r3
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002d0c:	78bb      	ldrb	r3, [r7, #2]
 8002d0e:	2b02      	cmp	r3, #2
 8002d10:	d102      	bne.n	8002d18 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	2200      	movs	r2, #0
 8002d16:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002d1e:	2b01      	cmp	r3, #1
 8002d20:	d101      	bne.n	8002d26 <HAL_PCD_EP_Open+0xaa>
 8002d22:	2302      	movs	r3, #2
 8002d24:	e00e      	b.n	8002d44 <HAL_PCD_EP_Open+0xc8>
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	2201      	movs	r2, #1
 8002d2a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	68f9      	ldr	r1, [r7, #12]
 8002d34:	4618      	mov	r0, r3
 8002d36:	f003 faab 	bl	8006290 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8002d42:	7afb      	ldrb	r3, [r7, #11]
}
 8002d44:	4618      	mov	r0, r3
 8002d46:	3710      	adds	r7, #16
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	bd80      	pop	{r7, pc}

08002d4c <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	b084      	sub	sp, #16
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	6078      	str	r0, [r7, #4]
 8002d54:	460b      	mov	r3, r1
 8002d56:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002d58:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	da0f      	bge.n	8002d80 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002d60:	78fb      	ldrb	r3, [r7, #3]
 8002d62:	f003 020f 	and.w	r2, r3, #15
 8002d66:	4613      	mov	r3, r2
 8002d68:	00db      	lsls	r3, r3, #3
 8002d6a:	4413      	add	r3, r2
 8002d6c:	009b      	lsls	r3, r3, #2
 8002d6e:	3338      	adds	r3, #56	; 0x38
 8002d70:	687a      	ldr	r2, [r7, #4]
 8002d72:	4413      	add	r3, r2
 8002d74:	3304      	adds	r3, #4
 8002d76:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	2201      	movs	r2, #1
 8002d7c:	705a      	strb	r2, [r3, #1]
 8002d7e:	e00f      	b.n	8002da0 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002d80:	78fb      	ldrb	r3, [r7, #3]
 8002d82:	f003 020f 	and.w	r2, r3, #15
 8002d86:	4613      	mov	r3, r2
 8002d88:	00db      	lsls	r3, r3, #3
 8002d8a:	4413      	add	r3, r2
 8002d8c:	009b      	lsls	r3, r3, #2
 8002d8e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002d92:	687a      	ldr	r2, [r7, #4]
 8002d94:	4413      	add	r3, r2
 8002d96:	3304      	adds	r3, #4
 8002d98:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002da0:	78fb      	ldrb	r3, [r7, #3]
 8002da2:	f003 030f 	and.w	r3, r3, #15
 8002da6:	b2da      	uxtb	r2, r3
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002db2:	2b01      	cmp	r3, #1
 8002db4:	d101      	bne.n	8002dba <HAL_PCD_EP_Close+0x6e>
 8002db6:	2302      	movs	r3, #2
 8002db8:	e00e      	b.n	8002dd8 <HAL_PCD_EP_Close+0x8c>
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	2201      	movs	r2, #1
 8002dbe:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	68f9      	ldr	r1, [r7, #12]
 8002dc8:	4618      	mov	r0, r3
 8002dca:	f003 fae9 	bl	80063a0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8002dd6:	2300      	movs	r3, #0
}
 8002dd8:	4618      	mov	r0, r3
 8002dda:	3710      	adds	r7, #16
 8002ddc:	46bd      	mov	sp, r7
 8002dde:	bd80      	pop	{r7, pc}

08002de0 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002de0:	b580      	push	{r7, lr}
 8002de2:	b086      	sub	sp, #24
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	60f8      	str	r0, [r7, #12]
 8002de8:	607a      	str	r2, [r7, #4]
 8002dea:	603b      	str	r3, [r7, #0]
 8002dec:	460b      	mov	r3, r1
 8002dee:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002df0:	7afb      	ldrb	r3, [r7, #11]
 8002df2:	f003 020f 	and.w	r2, r3, #15
 8002df6:	4613      	mov	r3, r2
 8002df8:	00db      	lsls	r3, r3, #3
 8002dfa:	4413      	add	r3, r2
 8002dfc:	009b      	lsls	r3, r3, #2
 8002dfe:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002e02:	68fa      	ldr	r2, [r7, #12]
 8002e04:	4413      	add	r3, r2
 8002e06:	3304      	adds	r3, #4
 8002e08:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002e0a:	697b      	ldr	r3, [r7, #20]
 8002e0c:	687a      	ldr	r2, [r7, #4]
 8002e0e:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8002e10:	697b      	ldr	r3, [r7, #20]
 8002e12:	683a      	ldr	r2, [r7, #0]
 8002e14:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002e16:	697b      	ldr	r3, [r7, #20]
 8002e18:	2200      	movs	r2, #0
 8002e1a:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8002e1c:	697b      	ldr	r3, [r7, #20]
 8002e1e:	2200      	movs	r2, #0
 8002e20:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002e22:	7afb      	ldrb	r3, [r7, #11]
 8002e24:	f003 030f 	and.w	r3, r3, #15
 8002e28:	b2da      	uxtb	r2, r3
 8002e2a:	697b      	ldr	r3, [r7, #20]
 8002e2c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	691b      	ldr	r3, [r3, #16]
 8002e32:	2b01      	cmp	r3, #1
 8002e34:	d102      	bne.n	8002e3c <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002e36:	687a      	ldr	r2, [r7, #4]
 8002e38:	697b      	ldr	r3, [r7, #20]
 8002e3a:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002e3c:	7afb      	ldrb	r3, [r7, #11]
 8002e3e:	f003 030f 	and.w	r3, r3, #15
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d109      	bne.n	8002e5a <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	6818      	ldr	r0, [r3, #0]
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	691b      	ldr	r3, [r3, #16]
 8002e4e:	b2db      	uxtb	r3, r3
 8002e50:	461a      	mov	r2, r3
 8002e52:	6979      	ldr	r1, [r7, #20]
 8002e54:	f003 fdc8 	bl	80069e8 <USB_EP0StartXfer>
 8002e58:	e008      	b.n	8002e6c <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	6818      	ldr	r0, [r3, #0]
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	691b      	ldr	r3, [r3, #16]
 8002e62:	b2db      	uxtb	r3, r3
 8002e64:	461a      	mov	r2, r3
 8002e66:	6979      	ldr	r1, [r7, #20]
 8002e68:	f003 fb76 	bl	8006558 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002e6c:	2300      	movs	r3, #0
}
 8002e6e:	4618      	mov	r0, r3
 8002e70:	3718      	adds	r7, #24
 8002e72:	46bd      	mov	sp, r7
 8002e74:	bd80      	pop	{r7, pc}

08002e76 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002e76:	b480      	push	{r7}
 8002e78:	b083      	sub	sp, #12
 8002e7a:	af00      	add	r7, sp, #0
 8002e7c:	6078      	str	r0, [r7, #4]
 8002e7e:	460b      	mov	r3, r1
 8002e80:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002e82:	78fb      	ldrb	r3, [r7, #3]
 8002e84:	f003 020f 	and.w	r2, r3, #15
 8002e88:	6879      	ldr	r1, [r7, #4]
 8002e8a:	4613      	mov	r3, r2
 8002e8c:	00db      	lsls	r3, r3, #3
 8002e8e:	4413      	add	r3, r2
 8002e90:	009b      	lsls	r3, r3, #2
 8002e92:	440b      	add	r3, r1
 8002e94:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8002e98:	681b      	ldr	r3, [r3, #0]
}
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	370c      	adds	r7, #12
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea4:	4770      	bx	lr

08002ea6 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002ea6:	b580      	push	{r7, lr}
 8002ea8:	b086      	sub	sp, #24
 8002eaa:	af00      	add	r7, sp, #0
 8002eac:	60f8      	str	r0, [r7, #12]
 8002eae:	607a      	str	r2, [r7, #4]
 8002eb0:	603b      	str	r3, [r7, #0]
 8002eb2:	460b      	mov	r3, r1
 8002eb4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002eb6:	7afb      	ldrb	r3, [r7, #11]
 8002eb8:	f003 020f 	and.w	r2, r3, #15
 8002ebc:	4613      	mov	r3, r2
 8002ebe:	00db      	lsls	r3, r3, #3
 8002ec0:	4413      	add	r3, r2
 8002ec2:	009b      	lsls	r3, r3, #2
 8002ec4:	3338      	adds	r3, #56	; 0x38
 8002ec6:	68fa      	ldr	r2, [r7, #12]
 8002ec8:	4413      	add	r3, r2
 8002eca:	3304      	adds	r3, #4
 8002ecc:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002ece:	697b      	ldr	r3, [r7, #20]
 8002ed0:	687a      	ldr	r2, [r7, #4]
 8002ed2:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8002ed4:	697b      	ldr	r3, [r7, #20]
 8002ed6:	683a      	ldr	r2, [r7, #0]
 8002ed8:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002eda:	697b      	ldr	r3, [r7, #20]
 8002edc:	2200      	movs	r2, #0
 8002ede:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8002ee0:	697b      	ldr	r3, [r7, #20]
 8002ee2:	2201      	movs	r2, #1
 8002ee4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002ee6:	7afb      	ldrb	r3, [r7, #11]
 8002ee8:	f003 030f 	and.w	r3, r3, #15
 8002eec:	b2da      	uxtb	r2, r3
 8002eee:	697b      	ldr	r3, [r7, #20]
 8002ef0:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	691b      	ldr	r3, [r3, #16]
 8002ef6:	2b01      	cmp	r3, #1
 8002ef8:	d102      	bne.n	8002f00 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002efa:	687a      	ldr	r2, [r7, #4]
 8002efc:	697b      	ldr	r3, [r7, #20]
 8002efe:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002f00:	7afb      	ldrb	r3, [r7, #11]
 8002f02:	f003 030f 	and.w	r3, r3, #15
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d109      	bne.n	8002f1e <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	6818      	ldr	r0, [r3, #0]
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	691b      	ldr	r3, [r3, #16]
 8002f12:	b2db      	uxtb	r3, r3
 8002f14:	461a      	mov	r2, r3
 8002f16:	6979      	ldr	r1, [r7, #20]
 8002f18:	f003 fd66 	bl	80069e8 <USB_EP0StartXfer>
 8002f1c:	e008      	b.n	8002f30 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	6818      	ldr	r0, [r3, #0]
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	691b      	ldr	r3, [r3, #16]
 8002f26:	b2db      	uxtb	r3, r3
 8002f28:	461a      	mov	r2, r3
 8002f2a:	6979      	ldr	r1, [r7, #20]
 8002f2c:	f003 fb14 	bl	8006558 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002f30:	2300      	movs	r3, #0
}
 8002f32:	4618      	mov	r0, r3
 8002f34:	3718      	adds	r7, #24
 8002f36:	46bd      	mov	sp, r7
 8002f38:	bd80      	pop	{r7, pc}

08002f3a <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002f3a:	b580      	push	{r7, lr}
 8002f3c:	b084      	sub	sp, #16
 8002f3e:	af00      	add	r7, sp, #0
 8002f40:	6078      	str	r0, [r7, #4]
 8002f42:	460b      	mov	r3, r1
 8002f44:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002f46:	78fb      	ldrb	r3, [r7, #3]
 8002f48:	f003 020f 	and.w	r2, r3, #15
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	685b      	ldr	r3, [r3, #4]
 8002f50:	429a      	cmp	r2, r3
 8002f52:	d901      	bls.n	8002f58 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002f54:	2301      	movs	r3, #1
 8002f56:	e050      	b.n	8002ffa <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002f58:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	da0f      	bge.n	8002f80 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002f60:	78fb      	ldrb	r3, [r7, #3]
 8002f62:	f003 020f 	and.w	r2, r3, #15
 8002f66:	4613      	mov	r3, r2
 8002f68:	00db      	lsls	r3, r3, #3
 8002f6a:	4413      	add	r3, r2
 8002f6c:	009b      	lsls	r3, r3, #2
 8002f6e:	3338      	adds	r3, #56	; 0x38
 8002f70:	687a      	ldr	r2, [r7, #4]
 8002f72:	4413      	add	r3, r2
 8002f74:	3304      	adds	r3, #4
 8002f76:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	2201      	movs	r2, #1
 8002f7c:	705a      	strb	r2, [r3, #1]
 8002f7e:	e00d      	b.n	8002f9c <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002f80:	78fa      	ldrb	r2, [r7, #3]
 8002f82:	4613      	mov	r3, r2
 8002f84:	00db      	lsls	r3, r3, #3
 8002f86:	4413      	add	r3, r2
 8002f88:	009b      	lsls	r3, r3, #2
 8002f8a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002f8e:	687a      	ldr	r2, [r7, #4]
 8002f90:	4413      	add	r3, r2
 8002f92:	3304      	adds	r3, #4
 8002f94:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	2200      	movs	r2, #0
 8002f9a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	2201      	movs	r2, #1
 8002fa0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002fa2:	78fb      	ldrb	r3, [r7, #3]
 8002fa4:	f003 030f 	and.w	r3, r3, #15
 8002fa8:	b2da      	uxtb	r2, r3
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002fb4:	2b01      	cmp	r3, #1
 8002fb6:	d101      	bne.n	8002fbc <HAL_PCD_EP_SetStall+0x82>
 8002fb8:	2302      	movs	r3, #2
 8002fba:	e01e      	b.n	8002ffa <HAL_PCD_EP_SetStall+0xc0>
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	2201      	movs	r2, #1
 8002fc0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	68f9      	ldr	r1, [r7, #12]
 8002fca:	4618      	mov	r0, r3
 8002fcc:	f003 ffa4 	bl	8006f18 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002fd0:	78fb      	ldrb	r3, [r7, #3]
 8002fd2:	f003 030f 	and.w	r3, r3, #15
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d10a      	bne.n	8002ff0 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	6818      	ldr	r0, [r3, #0]
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	691b      	ldr	r3, [r3, #16]
 8002fe2:	b2d9      	uxtb	r1, r3
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002fea:	461a      	mov	r2, r3
 8002fec:	f004 f994 	bl	8007318 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002ff8:	2300      	movs	r3, #0
}
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	3710      	adds	r7, #16
 8002ffe:	46bd      	mov	sp, r7
 8003000:	bd80      	pop	{r7, pc}

08003002 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003002:	b580      	push	{r7, lr}
 8003004:	b084      	sub	sp, #16
 8003006:	af00      	add	r7, sp, #0
 8003008:	6078      	str	r0, [r7, #4]
 800300a:	460b      	mov	r3, r1
 800300c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800300e:	78fb      	ldrb	r3, [r7, #3]
 8003010:	f003 020f 	and.w	r2, r3, #15
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	685b      	ldr	r3, [r3, #4]
 8003018:	429a      	cmp	r2, r3
 800301a:	d901      	bls.n	8003020 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800301c:	2301      	movs	r3, #1
 800301e:	e042      	b.n	80030a6 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003020:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003024:	2b00      	cmp	r3, #0
 8003026:	da0f      	bge.n	8003048 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003028:	78fb      	ldrb	r3, [r7, #3]
 800302a:	f003 020f 	and.w	r2, r3, #15
 800302e:	4613      	mov	r3, r2
 8003030:	00db      	lsls	r3, r3, #3
 8003032:	4413      	add	r3, r2
 8003034:	009b      	lsls	r3, r3, #2
 8003036:	3338      	adds	r3, #56	; 0x38
 8003038:	687a      	ldr	r2, [r7, #4]
 800303a:	4413      	add	r3, r2
 800303c:	3304      	adds	r3, #4
 800303e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	2201      	movs	r2, #1
 8003044:	705a      	strb	r2, [r3, #1]
 8003046:	e00f      	b.n	8003068 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003048:	78fb      	ldrb	r3, [r7, #3]
 800304a:	f003 020f 	and.w	r2, r3, #15
 800304e:	4613      	mov	r3, r2
 8003050:	00db      	lsls	r3, r3, #3
 8003052:	4413      	add	r3, r2
 8003054:	009b      	lsls	r3, r3, #2
 8003056:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800305a:	687a      	ldr	r2, [r7, #4]
 800305c:	4413      	add	r3, r2
 800305e:	3304      	adds	r3, #4
 8003060:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	2200      	movs	r2, #0
 8003066:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	2200      	movs	r2, #0
 800306c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800306e:	78fb      	ldrb	r3, [r7, #3]
 8003070:	f003 030f 	and.w	r3, r3, #15
 8003074:	b2da      	uxtb	r2, r3
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003080:	2b01      	cmp	r3, #1
 8003082:	d101      	bne.n	8003088 <HAL_PCD_EP_ClrStall+0x86>
 8003084:	2302      	movs	r3, #2
 8003086:	e00e      	b.n	80030a6 <HAL_PCD_EP_ClrStall+0xa4>
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	2201      	movs	r2, #1
 800308c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	68f9      	ldr	r1, [r7, #12]
 8003096:	4618      	mov	r0, r3
 8003098:	f003 ffac 	bl	8006ff4 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	2200      	movs	r2, #0
 80030a0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80030a4:	2300      	movs	r3, #0
}
 80030a6:	4618      	mov	r0, r3
 80030a8:	3710      	adds	r7, #16
 80030aa:	46bd      	mov	sp, r7
 80030ac:	bd80      	pop	{r7, pc}

080030ae <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80030ae:	b580      	push	{r7, lr}
 80030b0:	b084      	sub	sp, #16
 80030b2:	af00      	add	r7, sp, #0
 80030b4:	6078      	str	r0, [r7, #4]
 80030b6:	460b      	mov	r3, r1
 80030b8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80030ba:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80030be:	2b00      	cmp	r3, #0
 80030c0:	da0c      	bge.n	80030dc <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80030c2:	78fb      	ldrb	r3, [r7, #3]
 80030c4:	f003 020f 	and.w	r2, r3, #15
 80030c8:	4613      	mov	r3, r2
 80030ca:	00db      	lsls	r3, r3, #3
 80030cc:	4413      	add	r3, r2
 80030ce:	009b      	lsls	r3, r3, #2
 80030d0:	3338      	adds	r3, #56	; 0x38
 80030d2:	687a      	ldr	r2, [r7, #4]
 80030d4:	4413      	add	r3, r2
 80030d6:	3304      	adds	r3, #4
 80030d8:	60fb      	str	r3, [r7, #12]
 80030da:	e00c      	b.n	80030f6 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80030dc:	78fb      	ldrb	r3, [r7, #3]
 80030de:	f003 020f 	and.w	r2, r3, #15
 80030e2:	4613      	mov	r3, r2
 80030e4:	00db      	lsls	r3, r3, #3
 80030e6:	4413      	add	r3, r2
 80030e8:	009b      	lsls	r3, r3, #2
 80030ea:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80030ee:	687a      	ldr	r2, [r7, #4]
 80030f0:	4413      	add	r3, r2
 80030f2:	3304      	adds	r3, #4
 80030f4:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	68f9      	ldr	r1, [r7, #12]
 80030fc:	4618      	mov	r0, r3
 80030fe:	f003 fdcb 	bl	8006c98 <USB_EPStopXfer>
 8003102:	4603      	mov	r3, r0
 8003104:	72fb      	strb	r3, [r7, #11]

  return ret;
 8003106:	7afb      	ldrb	r3, [r7, #11]
}
 8003108:	4618      	mov	r0, r3
 800310a:	3710      	adds	r7, #16
 800310c:	46bd      	mov	sp, r7
 800310e:	bd80      	pop	{r7, pc}

08003110 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003110:	b580      	push	{r7, lr}
 8003112:	b08a      	sub	sp, #40	; 0x28
 8003114:	af02      	add	r7, sp, #8
 8003116:	6078      	str	r0, [r7, #4]
 8003118:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003120:	697b      	ldr	r3, [r7, #20]
 8003122:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003124:	683a      	ldr	r2, [r7, #0]
 8003126:	4613      	mov	r3, r2
 8003128:	00db      	lsls	r3, r3, #3
 800312a:	4413      	add	r3, r2
 800312c:	009b      	lsls	r3, r3, #2
 800312e:	3338      	adds	r3, #56	; 0x38
 8003130:	687a      	ldr	r2, [r7, #4]
 8003132:	4413      	add	r3, r2
 8003134:	3304      	adds	r3, #4
 8003136:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	6a1a      	ldr	r2, [r3, #32]
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	699b      	ldr	r3, [r3, #24]
 8003140:	429a      	cmp	r2, r3
 8003142:	d901      	bls.n	8003148 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003144:	2301      	movs	r3, #1
 8003146:	e06c      	b.n	8003222 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	699a      	ldr	r2, [r3, #24]
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	6a1b      	ldr	r3, [r3, #32]
 8003150:	1ad3      	subs	r3, r2, r3
 8003152:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	68db      	ldr	r3, [r3, #12]
 8003158:	69fa      	ldr	r2, [r7, #28]
 800315a:	429a      	cmp	r2, r3
 800315c:	d902      	bls.n	8003164 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	68db      	ldr	r3, [r3, #12]
 8003162:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003164:	69fb      	ldr	r3, [r7, #28]
 8003166:	3303      	adds	r3, #3
 8003168:	089b      	lsrs	r3, r3, #2
 800316a:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800316c:	e02b      	b.n	80031c6 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	699a      	ldr	r2, [r3, #24]
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	6a1b      	ldr	r3, [r3, #32]
 8003176:	1ad3      	subs	r3, r2, r3
 8003178:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	68db      	ldr	r3, [r3, #12]
 800317e:	69fa      	ldr	r2, [r7, #28]
 8003180:	429a      	cmp	r2, r3
 8003182:	d902      	bls.n	800318a <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	68db      	ldr	r3, [r3, #12]
 8003188:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800318a:	69fb      	ldr	r3, [r7, #28]
 800318c:	3303      	adds	r3, #3
 800318e:	089b      	lsrs	r3, r3, #2
 8003190:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	6919      	ldr	r1, [r3, #16]
 8003196:	683b      	ldr	r3, [r7, #0]
 8003198:	b2da      	uxtb	r2, r3
 800319a:	69fb      	ldr	r3, [r7, #28]
 800319c:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80031a2:	b2db      	uxtb	r3, r3
 80031a4:	9300      	str	r3, [sp, #0]
 80031a6:	4603      	mov	r3, r0
 80031a8:	6978      	ldr	r0, [r7, #20]
 80031aa:	f003 fe1f 	bl	8006dec <USB_WritePacket>

    ep->xfer_buff  += len;
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	691a      	ldr	r2, [r3, #16]
 80031b2:	69fb      	ldr	r3, [r7, #28]
 80031b4:	441a      	add	r2, r3
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	6a1a      	ldr	r2, [r3, #32]
 80031be:	69fb      	ldr	r3, [r7, #28]
 80031c0:	441a      	add	r2, r3
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80031c6:	683b      	ldr	r3, [r7, #0]
 80031c8:	015a      	lsls	r2, r3, #5
 80031ca:	693b      	ldr	r3, [r7, #16]
 80031cc:	4413      	add	r3, r2
 80031ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80031d2:	699b      	ldr	r3, [r3, #24]
 80031d4:	b29b      	uxth	r3, r3
 80031d6:	69ba      	ldr	r2, [r7, #24]
 80031d8:	429a      	cmp	r2, r3
 80031da:	d809      	bhi.n	80031f0 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	6a1a      	ldr	r2, [r3, #32]
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80031e4:	429a      	cmp	r2, r3
 80031e6:	d203      	bcs.n	80031f0 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	699b      	ldr	r3, [r3, #24]
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d1be      	bne.n	800316e <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	699a      	ldr	r2, [r3, #24]
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	6a1b      	ldr	r3, [r3, #32]
 80031f8:	429a      	cmp	r2, r3
 80031fa:	d811      	bhi.n	8003220 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80031fc:	683b      	ldr	r3, [r7, #0]
 80031fe:	f003 030f 	and.w	r3, r3, #15
 8003202:	2201      	movs	r2, #1
 8003204:	fa02 f303 	lsl.w	r3, r2, r3
 8003208:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800320a:	693b      	ldr	r3, [r7, #16]
 800320c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003210:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003212:	68bb      	ldr	r3, [r7, #8]
 8003214:	43db      	mvns	r3, r3
 8003216:	6939      	ldr	r1, [r7, #16]
 8003218:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800321c:	4013      	ands	r3, r2
 800321e:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8003220:	2300      	movs	r3, #0
}
 8003222:	4618      	mov	r0, r3
 8003224:	3720      	adds	r7, #32
 8003226:	46bd      	mov	sp, r7
 8003228:	bd80      	pop	{r7, pc}
	...

0800322c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800322c:	b580      	push	{r7, lr}
 800322e:	b088      	sub	sp, #32
 8003230:	af00      	add	r7, sp, #0
 8003232:	6078      	str	r0, [r7, #4]
 8003234:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800323c:	69fb      	ldr	r3, [r7, #28]
 800323e:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003240:	69fb      	ldr	r3, [r7, #28]
 8003242:	333c      	adds	r3, #60	; 0x3c
 8003244:	3304      	adds	r3, #4
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800324a:	683b      	ldr	r3, [r7, #0]
 800324c:	015a      	lsls	r2, r3, #5
 800324e:	69bb      	ldr	r3, [r7, #24]
 8003250:	4413      	add	r3, r2
 8003252:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003256:	689b      	ldr	r3, [r3, #8]
 8003258:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	691b      	ldr	r3, [r3, #16]
 800325e:	2b01      	cmp	r3, #1
 8003260:	d17b      	bne.n	800335a <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003262:	693b      	ldr	r3, [r7, #16]
 8003264:	f003 0308 	and.w	r3, r3, #8
 8003268:	2b00      	cmp	r3, #0
 800326a:	d015      	beq.n	8003298 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800326c:	697b      	ldr	r3, [r7, #20]
 800326e:	4a61      	ldr	r2, [pc, #388]	; (80033f4 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003270:	4293      	cmp	r3, r2
 8003272:	f240 80b9 	bls.w	80033e8 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003276:	693b      	ldr	r3, [r7, #16]
 8003278:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800327c:	2b00      	cmp	r3, #0
 800327e:	f000 80b3 	beq.w	80033e8 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003282:	683b      	ldr	r3, [r7, #0]
 8003284:	015a      	lsls	r2, r3, #5
 8003286:	69bb      	ldr	r3, [r7, #24]
 8003288:	4413      	add	r3, r2
 800328a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800328e:	461a      	mov	r2, r3
 8003290:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003294:	6093      	str	r3, [r2, #8]
 8003296:	e0a7      	b.n	80033e8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003298:	693b      	ldr	r3, [r7, #16]
 800329a:	f003 0320 	and.w	r3, r3, #32
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d009      	beq.n	80032b6 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80032a2:	683b      	ldr	r3, [r7, #0]
 80032a4:	015a      	lsls	r2, r3, #5
 80032a6:	69bb      	ldr	r3, [r7, #24]
 80032a8:	4413      	add	r3, r2
 80032aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80032ae:	461a      	mov	r2, r3
 80032b0:	2320      	movs	r3, #32
 80032b2:	6093      	str	r3, [r2, #8]
 80032b4:	e098      	b.n	80033e8 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80032b6:	693b      	ldr	r3, [r7, #16]
 80032b8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80032bc:	2b00      	cmp	r3, #0
 80032be:	f040 8093 	bne.w	80033e8 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80032c2:	697b      	ldr	r3, [r7, #20]
 80032c4:	4a4b      	ldr	r2, [pc, #300]	; (80033f4 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80032c6:	4293      	cmp	r3, r2
 80032c8:	d90f      	bls.n	80032ea <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80032ca:	693b      	ldr	r3, [r7, #16]
 80032cc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d00a      	beq.n	80032ea <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80032d4:	683b      	ldr	r3, [r7, #0]
 80032d6:	015a      	lsls	r2, r3, #5
 80032d8:	69bb      	ldr	r3, [r7, #24]
 80032da:	4413      	add	r3, r2
 80032dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80032e0:	461a      	mov	r2, r3
 80032e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80032e6:	6093      	str	r3, [r2, #8]
 80032e8:	e07e      	b.n	80033e8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80032ea:	683a      	ldr	r2, [r7, #0]
 80032ec:	4613      	mov	r3, r2
 80032ee:	00db      	lsls	r3, r3, #3
 80032f0:	4413      	add	r3, r2
 80032f2:	009b      	lsls	r3, r3, #2
 80032f4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80032f8:	687a      	ldr	r2, [r7, #4]
 80032fa:	4413      	add	r3, r2
 80032fc:	3304      	adds	r3, #4
 80032fe:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	69da      	ldr	r2, [r3, #28]
 8003304:	683b      	ldr	r3, [r7, #0]
 8003306:	0159      	lsls	r1, r3, #5
 8003308:	69bb      	ldr	r3, [r7, #24]
 800330a:	440b      	add	r3, r1
 800330c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003310:	691b      	ldr	r3, [r3, #16]
 8003312:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003316:	1ad2      	subs	r2, r2, r3
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 800331c:	683b      	ldr	r3, [r7, #0]
 800331e:	2b00      	cmp	r3, #0
 8003320:	d114      	bne.n	800334c <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	699b      	ldr	r3, [r3, #24]
 8003326:	2b00      	cmp	r3, #0
 8003328:	d109      	bne.n	800333e <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	6818      	ldr	r0, [r3, #0]
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003334:	461a      	mov	r2, r3
 8003336:	2101      	movs	r1, #1
 8003338:	f003 ffee 	bl	8007318 <USB_EP0_OutStart>
 800333c:	e006      	b.n	800334c <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	691a      	ldr	r2, [r3, #16]
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	6a1b      	ldr	r3, [r3, #32]
 8003346:	441a      	add	r2, r3
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800334c:	683b      	ldr	r3, [r7, #0]
 800334e:	b2db      	uxtb	r3, r3
 8003350:	4619      	mov	r1, r3
 8003352:	6878      	ldr	r0, [r7, #4]
 8003354:	f006 fac4 	bl	80098e0 <HAL_PCD_DataOutStageCallback>
 8003358:	e046      	b.n	80033e8 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800335a:	697b      	ldr	r3, [r7, #20]
 800335c:	4a26      	ldr	r2, [pc, #152]	; (80033f8 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800335e:	4293      	cmp	r3, r2
 8003360:	d124      	bne.n	80033ac <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003362:	693b      	ldr	r3, [r7, #16]
 8003364:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003368:	2b00      	cmp	r3, #0
 800336a:	d00a      	beq.n	8003382 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800336c:	683b      	ldr	r3, [r7, #0]
 800336e:	015a      	lsls	r2, r3, #5
 8003370:	69bb      	ldr	r3, [r7, #24]
 8003372:	4413      	add	r3, r2
 8003374:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003378:	461a      	mov	r2, r3
 800337a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800337e:	6093      	str	r3, [r2, #8]
 8003380:	e032      	b.n	80033e8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003382:	693b      	ldr	r3, [r7, #16]
 8003384:	f003 0320 	and.w	r3, r3, #32
 8003388:	2b00      	cmp	r3, #0
 800338a:	d008      	beq.n	800339e <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800338c:	683b      	ldr	r3, [r7, #0]
 800338e:	015a      	lsls	r2, r3, #5
 8003390:	69bb      	ldr	r3, [r7, #24]
 8003392:	4413      	add	r3, r2
 8003394:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003398:	461a      	mov	r2, r3
 800339a:	2320      	movs	r3, #32
 800339c:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800339e:	683b      	ldr	r3, [r7, #0]
 80033a0:	b2db      	uxtb	r3, r3
 80033a2:	4619      	mov	r1, r3
 80033a4:	6878      	ldr	r0, [r7, #4]
 80033a6:	f006 fa9b 	bl	80098e0 <HAL_PCD_DataOutStageCallback>
 80033aa:	e01d      	b.n	80033e8 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80033ac:	683b      	ldr	r3, [r7, #0]
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d114      	bne.n	80033dc <PCD_EP_OutXfrComplete_int+0x1b0>
 80033b2:	6879      	ldr	r1, [r7, #4]
 80033b4:	683a      	ldr	r2, [r7, #0]
 80033b6:	4613      	mov	r3, r2
 80033b8:	00db      	lsls	r3, r3, #3
 80033ba:	4413      	add	r3, r2
 80033bc:	009b      	lsls	r3, r3, #2
 80033be:	440b      	add	r3, r1
 80033c0:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d108      	bne.n	80033dc <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	6818      	ldr	r0, [r3, #0]
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80033d4:	461a      	mov	r2, r3
 80033d6:	2100      	movs	r1, #0
 80033d8:	f003 ff9e 	bl	8007318 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80033dc:	683b      	ldr	r3, [r7, #0]
 80033de:	b2db      	uxtb	r3, r3
 80033e0:	4619      	mov	r1, r3
 80033e2:	6878      	ldr	r0, [r7, #4]
 80033e4:	f006 fa7c 	bl	80098e0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80033e8:	2300      	movs	r3, #0
}
 80033ea:	4618      	mov	r0, r3
 80033ec:	3720      	adds	r7, #32
 80033ee:	46bd      	mov	sp, r7
 80033f0:	bd80      	pop	{r7, pc}
 80033f2:	bf00      	nop
 80033f4:	4f54300a 	.word	0x4f54300a
 80033f8:	4f54310a 	.word	0x4f54310a

080033fc <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80033fc:	b580      	push	{r7, lr}
 80033fe:	b086      	sub	sp, #24
 8003400:	af00      	add	r7, sp, #0
 8003402:	6078      	str	r0, [r7, #4]
 8003404:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800340c:	697b      	ldr	r3, [r7, #20]
 800340e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003410:	697b      	ldr	r3, [r7, #20]
 8003412:	333c      	adds	r3, #60	; 0x3c
 8003414:	3304      	adds	r3, #4
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800341a:	683b      	ldr	r3, [r7, #0]
 800341c:	015a      	lsls	r2, r3, #5
 800341e:	693b      	ldr	r3, [r7, #16]
 8003420:	4413      	add	r3, r2
 8003422:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003426:	689b      	ldr	r3, [r3, #8]
 8003428:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	4a15      	ldr	r2, [pc, #84]	; (8003484 <PCD_EP_OutSetupPacket_int+0x88>)
 800342e:	4293      	cmp	r3, r2
 8003430:	d90e      	bls.n	8003450 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003432:	68bb      	ldr	r3, [r7, #8]
 8003434:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003438:	2b00      	cmp	r3, #0
 800343a:	d009      	beq.n	8003450 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800343c:	683b      	ldr	r3, [r7, #0]
 800343e:	015a      	lsls	r2, r3, #5
 8003440:	693b      	ldr	r3, [r7, #16]
 8003442:	4413      	add	r3, r2
 8003444:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003448:	461a      	mov	r2, r3
 800344a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800344e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003450:	6878      	ldr	r0, [r7, #4]
 8003452:	f006 fa33 	bl	80098bc <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	4a0a      	ldr	r2, [pc, #40]	; (8003484 <PCD_EP_OutSetupPacket_int+0x88>)
 800345a:	4293      	cmp	r3, r2
 800345c:	d90c      	bls.n	8003478 <PCD_EP_OutSetupPacket_int+0x7c>
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	691b      	ldr	r3, [r3, #16]
 8003462:	2b01      	cmp	r3, #1
 8003464:	d108      	bne.n	8003478 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	6818      	ldr	r0, [r3, #0]
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003470:	461a      	mov	r2, r3
 8003472:	2101      	movs	r1, #1
 8003474:	f003 ff50 	bl	8007318 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003478:	2300      	movs	r3, #0
}
 800347a:	4618      	mov	r0, r3
 800347c:	3718      	adds	r7, #24
 800347e:	46bd      	mov	sp, r7
 8003480:	bd80      	pop	{r7, pc}
 8003482:	bf00      	nop
 8003484:	4f54300a 	.word	0x4f54300a

08003488 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003488:	b480      	push	{r7}
 800348a:	b085      	sub	sp, #20
 800348c:	af00      	add	r7, sp, #0
 800348e:	6078      	str	r0, [r7, #4]
 8003490:	460b      	mov	r3, r1
 8003492:	70fb      	strb	r3, [r7, #3]
 8003494:	4613      	mov	r3, r2
 8003496:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800349e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80034a0:	78fb      	ldrb	r3, [r7, #3]
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d107      	bne.n	80034b6 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80034a6:	883b      	ldrh	r3, [r7, #0]
 80034a8:	0419      	lsls	r1, r3, #16
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	68ba      	ldr	r2, [r7, #8]
 80034b0:	430a      	orrs	r2, r1
 80034b2:	629a      	str	r2, [r3, #40]	; 0x28
 80034b4:	e028      	b.n	8003508 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034bc:	0c1b      	lsrs	r3, r3, #16
 80034be:	68ba      	ldr	r2, [r7, #8]
 80034c0:	4413      	add	r3, r2
 80034c2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80034c4:	2300      	movs	r3, #0
 80034c6:	73fb      	strb	r3, [r7, #15]
 80034c8:	e00d      	b.n	80034e6 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681a      	ldr	r2, [r3, #0]
 80034ce:	7bfb      	ldrb	r3, [r7, #15]
 80034d0:	3340      	adds	r3, #64	; 0x40
 80034d2:	009b      	lsls	r3, r3, #2
 80034d4:	4413      	add	r3, r2
 80034d6:	685b      	ldr	r3, [r3, #4]
 80034d8:	0c1b      	lsrs	r3, r3, #16
 80034da:	68ba      	ldr	r2, [r7, #8]
 80034dc:	4413      	add	r3, r2
 80034de:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80034e0:	7bfb      	ldrb	r3, [r7, #15]
 80034e2:	3301      	adds	r3, #1
 80034e4:	73fb      	strb	r3, [r7, #15]
 80034e6:	7bfa      	ldrb	r2, [r7, #15]
 80034e8:	78fb      	ldrb	r3, [r7, #3]
 80034ea:	3b01      	subs	r3, #1
 80034ec:	429a      	cmp	r2, r3
 80034ee:	d3ec      	bcc.n	80034ca <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80034f0:	883b      	ldrh	r3, [r7, #0]
 80034f2:	0418      	lsls	r0, r3, #16
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	6819      	ldr	r1, [r3, #0]
 80034f8:	78fb      	ldrb	r3, [r7, #3]
 80034fa:	3b01      	subs	r3, #1
 80034fc:	68ba      	ldr	r2, [r7, #8]
 80034fe:	4302      	orrs	r2, r0
 8003500:	3340      	adds	r3, #64	; 0x40
 8003502:	009b      	lsls	r3, r3, #2
 8003504:	440b      	add	r3, r1
 8003506:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003508:	2300      	movs	r3, #0
}
 800350a:	4618      	mov	r0, r3
 800350c:	3714      	adds	r7, #20
 800350e:	46bd      	mov	sp, r7
 8003510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003514:	4770      	bx	lr

08003516 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003516:	b480      	push	{r7}
 8003518:	b083      	sub	sp, #12
 800351a:	af00      	add	r7, sp, #0
 800351c:	6078      	str	r0, [r7, #4]
 800351e:	460b      	mov	r3, r1
 8003520:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	887a      	ldrh	r2, [r7, #2]
 8003528:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800352a:	2300      	movs	r3, #0
}
 800352c:	4618      	mov	r0, r3
 800352e:	370c      	adds	r7, #12
 8003530:	46bd      	mov	sp, r7
 8003532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003536:	4770      	bx	lr

08003538 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003538:	b480      	push	{r7}
 800353a:	b083      	sub	sp, #12
 800353c:	af00      	add	r7, sp, #0
 800353e:	6078      	str	r0, [r7, #4]
 8003540:	460b      	mov	r3, r1
 8003542:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003544:	bf00      	nop
 8003546:	370c      	adds	r7, #12
 8003548:	46bd      	mov	sp, r7
 800354a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354e:	4770      	bx	lr

08003550 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003550:	b580      	push	{r7, lr}
 8003552:	b086      	sub	sp, #24
 8003554:	af00      	add	r7, sp, #0
 8003556:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	2b00      	cmp	r3, #0
 800355c:	d101      	bne.n	8003562 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800355e:	2301      	movs	r3, #1
 8003560:	e267      	b.n	8003a32 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f003 0301 	and.w	r3, r3, #1
 800356a:	2b00      	cmp	r3, #0
 800356c:	d075      	beq.n	800365a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800356e:	4b88      	ldr	r3, [pc, #544]	; (8003790 <HAL_RCC_OscConfig+0x240>)
 8003570:	689b      	ldr	r3, [r3, #8]
 8003572:	f003 030c 	and.w	r3, r3, #12
 8003576:	2b04      	cmp	r3, #4
 8003578:	d00c      	beq.n	8003594 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800357a:	4b85      	ldr	r3, [pc, #532]	; (8003790 <HAL_RCC_OscConfig+0x240>)
 800357c:	689b      	ldr	r3, [r3, #8]
 800357e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003582:	2b08      	cmp	r3, #8
 8003584:	d112      	bne.n	80035ac <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003586:	4b82      	ldr	r3, [pc, #520]	; (8003790 <HAL_RCC_OscConfig+0x240>)
 8003588:	685b      	ldr	r3, [r3, #4]
 800358a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800358e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003592:	d10b      	bne.n	80035ac <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003594:	4b7e      	ldr	r3, [pc, #504]	; (8003790 <HAL_RCC_OscConfig+0x240>)
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800359c:	2b00      	cmp	r3, #0
 800359e:	d05b      	beq.n	8003658 <HAL_RCC_OscConfig+0x108>
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	685b      	ldr	r3, [r3, #4]
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d157      	bne.n	8003658 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80035a8:	2301      	movs	r3, #1
 80035aa:	e242      	b.n	8003a32 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	685b      	ldr	r3, [r3, #4]
 80035b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80035b4:	d106      	bne.n	80035c4 <HAL_RCC_OscConfig+0x74>
 80035b6:	4b76      	ldr	r3, [pc, #472]	; (8003790 <HAL_RCC_OscConfig+0x240>)
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	4a75      	ldr	r2, [pc, #468]	; (8003790 <HAL_RCC_OscConfig+0x240>)
 80035bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035c0:	6013      	str	r3, [r2, #0]
 80035c2:	e01d      	b.n	8003600 <HAL_RCC_OscConfig+0xb0>
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	685b      	ldr	r3, [r3, #4]
 80035c8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80035cc:	d10c      	bne.n	80035e8 <HAL_RCC_OscConfig+0x98>
 80035ce:	4b70      	ldr	r3, [pc, #448]	; (8003790 <HAL_RCC_OscConfig+0x240>)
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	4a6f      	ldr	r2, [pc, #444]	; (8003790 <HAL_RCC_OscConfig+0x240>)
 80035d4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80035d8:	6013      	str	r3, [r2, #0]
 80035da:	4b6d      	ldr	r3, [pc, #436]	; (8003790 <HAL_RCC_OscConfig+0x240>)
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	4a6c      	ldr	r2, [pc, #432]	; (8003790 <HAL_RCC_OscConfig+0x240>)
 80035e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035e4:	6013      	str	r3, [r2, #0]
 80035e6:	e00b      	b.n	8003600 <HAL_RCC_OscConfig+0xb0>
 80035e8:	4b69      	ldr	r3, [pc, #420]	; (8003790 <HAL_RCC_OscConfig+0x240>)
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	4a68      	ldr	r2, [pc, #416]	; (8003790 <HAL_RCC_OscConfig+0x240>)
 80035ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80035f2:	6013      	str	r3, [r2, #0]
 80035f4:	4b66      	ldr	r3, [pc, #408]	; (8003790 <HAL_RCC_OscConfig+0x240>)
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	4a65      	ldr	r2, [pc, #404]	; (8003790 <HAL_RCC_OscConfig+0x240>)
 80035fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80035fe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	685b      	ldr	r3, [r3, #4]
 8003604:	2b00      	cmp	r3, #0
 8003606:	d013      	beq.n	8003630 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003608:	f7fe f982 	bl	8001910 <HAL_GetTick>
 800360c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800360e:	e008      	b.n	8003622 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003610:	f7fe f97e 	bl	8001910 <HAL_GetTick>
 8003614:	4602      	mov	r2, r0
 8003616:	693b      	ldr	r3, [r7, #16]
 8003618:	1ad3      	subs	r3, r2, r3
 800361a:	2b64      	cmp	r3, #100	; 0x64
 800361c:	d901      	bls.n	8003622 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800361e:	2303      	movs	r3, #3
 8003620:	e207      	b.n	8003a32 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003622:	4b5b      	ldr	r3, [pc, #364]	; (8003790 <HAL_RCC_OscConfig+0x240>)
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800362a:	2b00      	cmp	r3, #0
 800362c:	d0f0      	beq.n	8003610 <HAL_RCC_OscConfig+0xc0>
 800362e:	e014      	b.n	800365a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003630:	f7fe f96e 	bl	8001910 <HAL_GetTick>
 8003634:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003636:	e008      	b.n	800364a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003638:	f7fe f96a 	bl	8001910 <HAL_GetTick>
 800363c:	4602      	mov	r2, r0
 800363e:	693b      	ldr	r3, [r7, #16]
 8003640:	1ad3      	subs	r3, r2, r3
 8003642:	2b64      	cmp	r3, #100	; 0x64
 8003644:	d901      	bls.n	800364a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003646:	2303      	movs	r3, #3
 8003648:	e1f3      	b.n	8003a32 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800364a:	4b51      	ldr	r3, [pc, #324]	; (8003790 <HAL_RCC_OscConfig+0x240>)
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003652:	2b00      	cmp	r3, #0
 8003654:	d1f0      	bne.n	8003638 <HAL_RCC_OscConfig+0xe8>
 8003656:	e000      	b.n	800365a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003658:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f003 0302 	and.w	r3, r3, #2
 8003662:	2b00      	cmp	r3, #0
 8003664:	d063      	beq.n	800372e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003666:	4b4a      	ldr	r3, [pc, #296]	; (8003790 <HAL_RCC_OscConfig+0x240>)
 8003668:	689b      	ldr	r3, [r3, #8]
 800366a:	f003 030c 	and.w	r3, r3, #12
 800366e:	2b00      	cmp	r3, #0
 8003670:	d00b      	beq.n	800368a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003672:	4b47      	ldr	r3, [pc, #284]	; (8003790 <HAL_RCC_OscConfig+0x240>)
 8003674:	689b      	ldr	r3, [r3, #8]
 8003676:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800367a:	2b08      	cmp	r3, #8
 800367c:	d11c      	bne.n	80036b8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800367e:	4b44      	ldr	r3, [pc, #272]	; (8003790 <HAL_RCC_OscConfig+0x240>)
 8003680:	685b      	ldr	r3, [r3, #4]
 8003682:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003686:	2b00      	cmp	r3, #0
 8003688:	d116      	bne.n	80036b8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800368a:	4b41      	ldr	r3, [pc, #260]	; (8003790 <HAL_RCC_OscConfig+0x240>)
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f003 0302 	and.w	r3, r3, #2
 8003692:	2b00      	cmp	r3, #0
 8003694:	d005      	beq.n	80036a2 <HAL_RCC_OscConfig+0x152>
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	68db      	ldr	r3, [r3, #12]
 800369a:	2b01      	cmp	r3, #1
 800369c:	d001      	beq.n	80036a2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800369e:	2301      	movs	r3, #1
 80036a0:	e1c7      	b.n	8003a32 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036a2:	4b3b      	ldr	r3, [pc, #236]	; (8003790 <HAL_RCC_OscConfig+0x240>)
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	691b      	ldr	r3, [r3, #16]
 80036ae:	00db      	lsls	r3, r3, #3
 80036b0:	4937      	ldr	r1, [pc, #220]	; (8003790 <HAL_RCC_OscConfig+0x240>)
 80036b2:	4313      	orrs	r3, r2
 80036b4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80036b6:	e03a      	b.n	800372e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	68db      	ldr	r3, [r3, #12]
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d020      	beq.n	8003702 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80036c0:	4b34      	ldr	r3, [pc, #208]	; (8003794 <HAL_RCC_OscConfig+0x244>)
 80036c2:	2201      	movs	r2, #1
 80036c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036c6:	f7fe f923 	bl	8001910 <HAL_GetTick>
 80036ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036cc:	e008      	b.n	80036e0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80036ce:	f7fe f91f 	bl	8001910 <HAL_GetTick>
 80036d2:	4602      	mov	r2, r0
 80036d4:	693b      	ldr	r3, [r7, #16]
 80036d6:	1ad3      	subs	r3, r2, r3
 80036d8:	2b02      	cmp	r3, #2
 80036da:	d901      	bls.n	80036e0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80036dc:	2303      	movs	r3, #3
 80036de:	e1a8      	b.n	8003a32 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036e0:	4b2b      	ldr	r3, [pc, #172]	; (8003790 <HAL_RCC_OscConfig+0x240>)
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f003 0302 	and.w	r3, r3, #2
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d0f0      	beq.n	80036ce <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036ec:	4b28      	ldr	r3, [pc, #160]	; (8003790 <HAL_RCC_OscConfig+0x240>)
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	691b      	ldr	r3, [r3, #16]
 80036f8:	00db      	lsls	r3, r3, #3
 80036fa:	4925      	ldr	r1, [pc, #148]	; (8003790 <HAL_RCC_OscConfig+0x240>)
 80036fc:	4313      	orrs	r3, r2
 80036fe:	600b      	str	r3, [r1, #0]
 8003700:	e015      	b.n	800372e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003702:	4b24      	ldr	r3, [pc, #144]	; (8003794 <HAL_RCC_OscConfig+0x244>)
 8003704:	2200      	movs	r2, #0
 8003706:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003708:	f7fe f902 	bl	8001910 <HAL_GetTick>
 800370c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800370e:	e008      	b.n	8003722 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003710:	f7fe f8fe 	bl	8001910 <HAL_GetTick>
 8003714:	4602      	mov	r2, r0
 8003716:	693b      	ldr	r3, [r7, #16]
 8003718:	1ad3      	subs	r3, r2, r3
 800371a:	2b02      	cmp	r3, #2
 800371c:	d901      	bls.n	8003722 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800371e:	2303      	movs	r3, #3
 8003720:	e187      	b.n	8003a32 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003722:	4b1b      	ldr	r3, [pc, #108]	; (8003790 <HAL_RCC_OscConfig+0x240>)
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f003 0302 	and.w	r3, r3, #2
 800372a:	2b00      	cmp	r3, #0
 800372c:	d1f0      	bne.n	8003710 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f003 0308 	and.w	r3, r3, #8
 8003736:	2b00      	cmp	r3, #0
 8003738:	d036      	beq.n	80037a8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	695b      	ldr	r3, [r3, #20]
 800373e:	2b00      	cmp	r3, #0
 8003740:	d016      	beq.n	8003770 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003742:	4b15      	ldr	r3, [pc, #84]	; (8003798 <HAL_RCC_OscConfig+0x248>)
 8003744:	2201      	movs	r2, #1
 8003746:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003748:	f7fe f8e2 	bl	8001910 <HAL_GetTick>
 800374c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800374e:	e008      	b.n	8003762 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003750:	f7fe f8de 	bl	8001910 <HAL_GetTick>
 8003754:	4602      	mov	r2, r0
 8003756:	693b      	ldr	r3, [r7, #16]
 8003758:	1ad3      	subs	r3, r2, r3
 800375a:	2b02      	cmp	r3, #2
 800375c:	d901      	bls.n	8003762 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800375e:	2303      	movs	r3, #3
 8003760:	e167      	b.n	8003a32 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003762:	4b0b      	ldr	r3, [pc, #44]	; (8003790 <HAL_RCC_OscConfig+0x240>)
 8003764:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003766:	f003 0302 	and.w	r3, r3, #2
 800376a:	2b00      	cmp	r3, #0
 800376c:	d0f0      	beq.n	8003750 <HAL_RCC_OscConfig+0x200>
 800376e:	e01b      	b.n	80037a8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003770:	4b09      	ldr	r3, [pc, #36]	; (8003798 <HAL_RCC_OscConfig+0x248>)
 8003772:	2200      	movs	r2, #0
 8003774:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003776:	f7fe f8cb 	bl	8001910 <HAL_GetTick>
 800377a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800377c:	e00e      	b.n	800379c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800377e:	f7fe f8c7 	bl	8001910 <HAL_GetTick>
 8003782:	4602      	mov	r2, r0
 8003784:	693b      	ldr	r3, [r7, #16]
 8003786:	1ad3      	subs	r3, r2, r3
 8003788:	2b02      	cmp	r3, #2
 800378a:	d907      	bls.n	800379c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800378c:	2303      	movs	r3, #3
 800378e:	e150      	b.n	8003a32 <HAL_RCC_OscConfig+0x4e2>
 8003790:	40023800 	.word	0x40023800
 8003794:	42470000 	.word	0x42470000
 8003798:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800379c:	4b88      	ldr	r3, [pc, #544]	; (80039c0 <HAL_RCC_OscConfig+0x470>)
 800379e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80037a0:	f003 0302 	and.w	r3, r3, #2
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d1ea      	bne.n	800377e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f003 0304 	and.w	r3, r3, #4
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	f000 8097 	beq.w	80038e4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80037b6:	2300      	movs	r3, #0
 80037b8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80037ba:	4b81      	ldr	r3, [pc, #516]	; (80039c0 <HAL_RCC_OscConfig+0x470>)
 80037bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d10f      	bne.n	80037e6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80037c6:	2300      	movs	r3, #0
 80037c8:	60bb      	str	r3, [r7, #8]
 80037ca:	4b7d      	ldr	r3, [pc, #500]	; (80039c0 <HAL_RCC_OscConfig+0x470>)
 80037cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037ce:	4a7c      	ldr	r2, [pc, #496]	; (80039c0 <HAL_RCC_OscConfig+0x470>)
 80037d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80037d4:	6413      	str	r3, [r2, #64]	; 0x40
 80037d6:	4b7a      	ldr	r3, [pc, #488]	; (80039c0 <HAL_RCC_OscConfig+0x470>)
 80037d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037de:	60bb      	str	r3, [r7, #8]
 80037e0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80037e2:	2301      	movs	r3, #1
 80037e4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037e6:	4b77      	ldr	r3, [pc, #476]	; (80039c4 <HAL_RCC_OscConfig+0x474>)
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d118      	bne.n	8003824 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80037f2:	4b74      	ldr	r3, [pc, #464]	; (80039c4 <HAL_RCC_OscConfig+0x474>)
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	4a73      	ldr	r2, [pc, #460]	; (80039c4 <HAL_RCC_OscConfig+0x474>)
 80037f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80037fc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80037fe:	f7fe f887 	bl	8001910 <HAL_GetTick>
 8003802:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003804:	e008      	b.n	8003818 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003806:	f7fe f883 	bl	8001910 <HAL_GetTick>
 800380a:	4602      	mov	r2, r0
 800380c:	693b      	ldr	r3, [r7, #16]
 800380e:	1ad3      	subs	r3, r2, r3
 8003810:	2b02      	cmp	r3, #2
 8003812:	d901      	bls.n	8003818 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003814:	2303      	movs	r3, #3
 8003816:	e10c      	b.n	8003a32 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003818:	4b6a      	ldr	r3, [pc, #424]	; (80039c4 <HAL_RCC_OscConfig+0x474>)
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003820:	2b00      	cmp	r3, #0
 8003822:	d0f0      	beq.n	8003806 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	689b      	ldr	r3, [r3, #8]
 8003828:	2b01      	cmp	r3, #1
 800382a:	d106      	bne.n	800383a <HAL_RCC_OscConfig+0x2ea>
 800382c:	4b64      	ldr	r3, [pc, #400]	; (80039c0 <HAL_RCC_OscConfig+0x470>)
 800382e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003830:	4a63      	ldr	r2, [pc, #396]	; (80039c0 <HAL_RCC_OscConfig+0x470>)
 8003832:	f043 0301 	orr.w	r3, r3, #1
 8003836:	6713      	str	r3, [r2, #112]	; 0x70
 8003838:	e01c      	b.n	8003874 <HAL_RCC_OscConfig+0x324>
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	689b      	ldr	r3, [r3, #8]
 800383e:	2b05      	cmp	r3, #5
 8003840:	d10c      	bne.n	800385c <HAL_RCC_OscConfig+0x30c>
 8003842:	4b5f      	ldr	r3, [pc, #380]	; (80039c0 <HAL_RCC_OscConfig+0x470>)
 8003844:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003846:	4a5e      	ldr	r2, [pc, #376]	; (80039c0 <HAL_RCC_OscConfig+0x470>)
 8003848:	f043 0304 	orr.w	r3, r3, #4
 800384c:	6713      	str	r3, [r2, #112]	; 0x70
 800384e:	4b5c      	ldr	r3, [pc, #368]	; (80039c0 <HAL_RCC_OscConfig+0x470>)
 8003850:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003852:	4a5b      	ldr	r2, [pc, #364]	; (80039c0 <HAL_RCC_OscConfig+0x470>)
 8003854:	f043 0301 	orr.w	r3, r3, #1
 8003858:	6713      	str	r3, [r2, #112]	; 0x70
 800385a:	e00b      	b.n	8003874 <HAL_RCC_OscConfig+0x324>
 800385c:	4b58      	ldr	r3, [pc, #352]	; (80039c0 <HAL_RCC_OscConfig+0x470>)
 800385e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003860:	4a57      	ldr	r2, [pc, #348]	; (80039c0 <HAL_RCC_OscConfig+0x470>)
 8003862:	f023 0301 	bic.w	r3, r3, #1
 8003866:	6713      	str	r3, [r2, #112]	; 0x70
 8003868:	4b55      	ldr	r3, [pc, #340]	; (80039c0 <HAL_RCC_OscConfig+0x470>)
 800386a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800386c:	4a54      	ldr	r2, [pc, #336]	; (80039c0 <HAL_RCC_OscConfig+0x470>)
 800386e:	f023 0304 	bic.w	r3, r3, #4
 8003872:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	689b      	ldr	r3, [r3, #8]
 8003878:	2b00      	cmp	r3, #0
 800387a:	d015      	beq.n	80038a8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800387c:	f7fe f848 	bl	8001910 <HAL_GetTick>
 8003880:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003882:	e00a      	b.n	800389a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003884:	f7fe f844 	bl	8001910 <HAL_GetTick>
 8003888:	4602      	mov	r2, r0
 800388a:	693b      	ldr	r3, [r7, #16]
 800388c:	1ad3      	subs	r3, r2, r3
 800388e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003892:	4293      	cmp	r3, r2
 8003894:	d901      	bls.n	800389a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003896:	2303      	movs	r3, #3
 8003898:	e0cb      	b.n	8003a32 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800389a:	4b49      	ldr	r3, [pc, #292]	; (80039c0 <HAL_RCC_OscConfig+0x470>)
 800389c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800389e:	f003 0302 	and.w	r3, r3, #2
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d0ee      	beq.n	8003884 <HAL_RCC_OscConfig+0x334>
 80038a6:	e014      	b.n	80038d2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80038a8:	f7fe f832 	bl	8001910 <HAL_GetTick>
 80038ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80038ae:	e00a      	b.n	80038c6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80038b0:	f7fe f82e 	bl	8001910 <HAL_GetTick>
 80038b4:	4602      	mov	r2, r0
 80038b6:	693b      	ldr	r3, [r7, #16]
 80038b8:	1ad3      	subs	r3, r2, r3
 80038ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80038be:	4293      	cmp	r3, r2
 80038c0:	d901      	bls.n	80038c6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80038c2:	2303      	movs	r3, #3
 80038c4:	e0b5      	b.n	8003a32 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80038c6:	4b3e      	ldr	r3, [pc, #248]	; (80039c0 <HAL_RCC_OscConfig+0x470>)
 80038c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038ca:	f003 0302 	and.w	r3, r3, #2
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d1ee      	bne.n	80038b0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80038d2:	7dfb      	ldrb	r3, [r7, #23]
 80038d4:	2b01      	cmp	r3, #1
 80038d6:	d105      	bne.n	80038e4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80038d8:	4b39      	ldr	r3, [pc, #228]	; (80039c0 <HAL_RCC_OscConfig+0x470>)
 80038da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038dc:	4a38      	ldr	r2, [pc, #224]	; (80039c0 <HAL_RCC_OscConfig+0x470>)
 80038de:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80038e2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	699b      	ldr	r3, [r3, #24]
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	f000 80a1 	beq.w	8003a30 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80038ee:	4b34      	ldr	r3, [pc, #208]	; (80039c0 <HAL_RCC_OscConfig+0x470>)
 80038f0:	689b      	ldr	r3, [r3, #8]
 80038f2:	f003 030c 	and.w	r3, r3, #12
 80038f6:	2b08      	cmp	r3, #8
 80038f8:	d05c      	beq.n	80039b4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	699b      	ldr	r3, [r3, #24]
 80038fe:	2b02      	cmp	r3, #2
 8003900:	d141      	bne.n	8003986 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003902:	4b31      	ldr	r3, [pc, #196]	; (80039c8 <HAL_RCC_OscConfig+0x478>)
 8003904:	2200      	movs	r2, #0
 8003906:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003908:	f7fe f802 	bl	8001910 <HAL_GetTick>
 800390c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800390e:	e008      	b.n	8003922 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003910:	f7fd fffe 	bl	8001910 <HAL_GetTick>
 8003914:	4602      	mov	r2, r0
 8003916:	693b      	ldr	r3, [r7, #16]
 8003918:	1ad3      	subs	r3, r2, r3
 800391a:	2b02      	cmp	r3, #2
 800391c:	d901      	bls.n	8003922 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800391e:	2303      	movs	r3, #3
 8003920:	e087      	b.n	8003a32 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003922:	4b27      	ldr	r3, [pc, #156]	; (80039c0 <HAL_RCC_OscConfig+0x470>)
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800392a:	2b00      	cmp	r3, #0
 800392c:	d1f0      	bne.n	8003910 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	69da      	ldr	r2, [r3, #28]
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	6a1b      	ldr	r3, [r3, #32]
 8003936:	431a      	orrs	r2, r3
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800393c:	019b      	lsls	r3, r3, #6
 800393e:	431a      	orrs	r2, r3
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003944:	085b      	lsrs	r3, r3, #1
 8003946:	3b01      	subs	r3, #1
 8003948:	041b      	lsls	r3, r3, #16
 800394a:	431a      	orrs	r2, r3
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003950:	061b      	lsls	r3, r3, #24
 8003952:	491b      	ldr	r1, [pc, #108]	; (80039c0 <HAL_RCC_OscConfig+0x470>)
 8003954:	4313      	orrs	r3, r2
 8003956:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003958:	4b1b      	ldr	r3, [pc, #108]	; (80039c8 <HAL_RCC_OscConfig+0x478>)
 800395a:	2201      	movs	r2, #1
 800395c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800395e:	f7fd ffd7 	bl	8001910 <HAL_GetTick>
 8003962:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003964:	e008      	b.n	8003978 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003966:	f7fd ffd3 	bl	8001910 <HAL_GetTick>
 800396a:	4602      	mov	r2, r0
 800396c:	693b      	ldr	r3, [r7, #16]
 800396e:	1ad3      	subs	r3, r2, r3
 8003970:	2b02      	cmp	r3, #2
 8003972:	d901      	bls.n	8003978 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003974:	2303      	movs	r3, #3
 8003976:	e05c      	b.n	8003a32 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003978:	4b11      	ldr	r3, [pc, #68]	; (80039c0 <HAL_RCC_OscConfig+0x470>)
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003980:	2b00      	cmp	r3, #0
 8003982:	d0f0      	beq.n	8003966 <HAL_RCC_OscConfig+0x416>
 8003984:	e054      	b.n	8003a30 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003986:	4b10      	ldr	r3, [pc, #64]	; (80039c8 <HAL_RCC_OscConfig+0x478>)
 8003988:	2200      	movs	r2, #0
 800398a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800398c:	f7fd ffc0 	bl	8001910 <HAL_GetTick>
 8003990:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003992:	e008      	b.n	80039a6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003994:	f7fd ffbc 	bl	8001910 <HAL_GetTick>
 8003998:	4602      	mov	r2, r0
 800399a:	693b      	ldr	r3, [r7, #16]
 800399c:	1ad3      	subs	r3, r2, r3
 800399e:	2b02      	cmp	r3, #2
 80039a0:	d901      	bls.n	80039a6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80039a2:	2303      	movs	r3, #3
 80039a4:	e045      	b.n	8003a32 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80039a6:	4b06      	ldr	r3, [pc, #24]	; (80039c0 <HAL_RCC_OscConfig+0x470>)
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d1f0      	bne.n	8003994 <HAL_RCC_OscConfig+0x444>
 80039b2:	e03d      	b.n	8003a30 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	699b      	ldr	r3, [r3, #24]
 80039b8:	2b01      	cmp	r3, #1
 80039ba:	d107      	bne.n	80039cc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80039bc:	2301      	movs	r3, #1
 80039be:	e038      	b.n	8003a32 <HAL_RCC_OscConfig+0x4e2>
 80039c0:	40023800 	.word	0x40023800
 80039c4:	40007000 	.word	0x40007000
 80039c8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80039cc:	4b1b      	ldr	r3, [pc, #108]	; (8003a3c <HAL_RCC_OscConfig+0x4ec>)
 80039ce:	685b      	ldr	r3, [r3, #4]
 80039d0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	699b      	ldr	r3, [r3, #24]
 80039d6:	2b01      	cmp	r3, #1
 80039d8:	d028      	beq.n	8003a2c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80039e4:	429a      	cmp	r2, r3
 80039e6:	d121      	bne.n	8003a2c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80039f2:	429a      	cmp	r2, r3
 80039f4:	d11a      	bne.n	8003a2c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80039f6:	68fa      	ldr	r2, [r7, #12]
 80039f8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80039fc:	4013      	ands	r3, r2
 80039fe:	687a      	ldr	r2, [r7, #4]
 8003a00:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003a02:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003a04:	4293      	cmp	r3, r2
 8003a06:	d111      	bne.n	8003a2c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a12:	085b      	lsrs	r3, r3, #1
 8003a14:	3b01      	subs	r3, #1
 8003a16:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003a18:	429a      	cmp	r2, r3
 8003a1a:	d107      	bne.n	8003a2c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a26:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003a28:	429a      	cmp	r2, r3
 8003a2a:	d001      	beq.n	8003a30 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003a2c:	2301      	movs	r3, #1
 8003a2e:	e000      	b.n	8003a32 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003a30:	2300      	movs	r3, #0
}
 8003a32:	4618      	mov	r0, r3
 8003a34:	3718      	adds	r7, #24
 8003a36:	46bd      	mov	sp, r7
 8003a38:	bd80      	pop	{r7, pc}
 8003a3a:	bf00      	nop
 8003a3c:	40023800 	.word	0x40023800

08003a40 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003a40:	b580      	push	{r7, lr}
 8003a42:	b084      	sub	sp, #16
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	6078      	str	r0, [r7, #4]
 8003a48:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d101      	bne.n	8003a54 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003a50:	2301      	movs	r3, #1
 8003a52:	e0cc      	b.n	8003bee <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003a54:	4b68      	ldr	r3, [pc, #416]	; (8003bf8 <HAL_RCC_ClockConfig+0x1b8>)
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f003 0307 	and.w	r3, r3, #7
 8003a5c:	683a      	ldr	r2, [r7, #0]
 8003a5e:	429a      	cmp	r2, r3
 8003a60:	d90c      	bls.n	8003a7c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a62:	4b65      	ldr	r3, [pc, #404]	; (8003bf8 <HAL_RCC_ClockConfig+0x1b8>)
 8003a64:	683a      	ldr	r2, [r7, #0]
 8003a66:	b2d2      	uxtb	r2, r2
 8003a68:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a6a:	4b63      	ldr	r3, [pc, #396]	; (8003bf8 <HAL_RCC_ClockConfig+0x1b8>)
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f003 0307 	and.w	r3, r3, #7
 8003a72:	683a      	ldr	r2, [r7, #0]
 8003a74:	429a      	cmp	r2, r3
 8003a76:	d001      	beq.n	8003a7c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003a78:	2301      	movs	r3, #1
 8003a7a:	e0b8      	b.n	8003bee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f003 0302 	and.w	r3, r3, #2
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d020      	beq.n	8003aca <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f003 0304 	and.w	r3, r3, #4
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d005      	beq.n	8003aa0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003a94:	4b59      	ldr	r3, [pc, #356]	; (8003bfc <HAL_RCC_ClockConfig+0x1bc>)
 8003a96:	689b      	ldr	r3, [r3, #8]
 8003a98:	4a58      	ldr	r2, [pc, #352]	; (8003bfc <HAL_RCC_ClockConfig+0x1bc>)
 8003a9a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003a9e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f003 0308 	and.w	r3, r3, #8
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d005      	beq.n	8003ab8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003aac:	4b53      	ldr	r3, [pc, #332]	; (8003bfc <HAL_RCC_ClockConfig+0x1bc>)
 8003aae:	689b      	ldr	r3, [r3, #8]
 8003ab0:	4a52      	ldr	r2, [pc, #328]	; (8003bfc <HAL_RCC_ClockConfig+0x1bc>)
 8003ab2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003ab6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ab8:	4b50      	ldr	r3, [pc, #320]	; (8003bfc <HAL_RCC_ClockConfig+0x1bc>)
 8003aba:	689b      	ldr	r3, [r3, #8]
 8003abc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	689b      	ldr	r3, [r3, #8]
 8003ac4:	494d      	ldr	r1, [pc, #308]	; (8003bfc <HAL_RCC_ClockConfig+0x1bc>)
 8003ac6:	4313      	orrs	r3, r2
 8003ac8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f003 0301 	and.w	r3, r3, #1
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d044      	beq.n	8003b60 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	685b      	ldr	r3, [r3, #4]
 8003ada:	2b01      	cmp	r3, #1
 8003adc:	d107      	bne.n	8003aee <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ade:	4b47      	ldr	r3, [pc, #284]	; (8003bfc <HAL_RCC_ClockConfig+0x1bc>)
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d119      	bne.n	8003b1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003aea:	2301      	movs	r3, #1
 8003aec:	e07f      	b.n	8003bee <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	685b      	ldr	r3, [r3, #4]
 8003af2:	2b02      	cmp	r3, #2
 8003af4:	d003      	beq.n	8003afe <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003afa:	2b03      	cmp	r3, #3
 8003afc:	d107      	bne.n	8003b0e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003afe:	4b3f      	ldr	r3, [pc, #252]	; (8003bfc <HAL_RCC_ClockConfig+0x1bc>)
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d109      	bne.n	8003b1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b0a:	2301      	movs	r3, #1
 8003b0c:	e06f      	b.n	8003bee <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b0e:	4b3b      	ldr	r3, [pc, #236]	; (8003bfc <HAL_RCC_ClockConfig+0x1bc>)
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f003 0302 	and.w	r3, r3, #2
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d101      	bne.n	8003b1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b1a:	2301      	movs	r3, #1
 8003b1c:	e067      	b.n	8003bee <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003b1e:	4b37      	ldr	r3, [pc, #220]	; (8003bfc <HAL_RCC_ClockConfig+0x1bc>)
 8003b20:	689b      	ldr	r3, [r3, #8]
 8003b22:	f023 0203 	bic.w	r2, r3, #3
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	685b      	ldr	r3, [r3, #4]
 8003b2a:	4934      	ldr	r1, [pc, #208]	; (8003bfc <HAL_RCC_ClockConfig+0x1bc>)
 8003b2c:	4313      	orrs	r3, r2
 8003b2e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003b30:	f7fd feee 	bl	8001910 <HAL_GetTick>
 8003b34:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b36:	e00a      	b.n	8003b4e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b38:	f7fd feea 	bl	8001910 <HAL_GetTick>
 8003b3c:	4602      	mov	r2, r0
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	1ad3      	subs	r3, r2, r3
 8003b42:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b46:	4293      	cmp	r3, r2
 8003b48:	d901      	bls.n	8003b4e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003b4a:	2303      	movs	r3, #3
 8003b4c:	e04f      	b.n	8003bee <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b4e:	4b2b      	ldr	r3, [pc, #172]	; (8003bfc <HAL_RCC_ClockConfig+0x1bc>)
 8003b50:	689b      	ldr	r3, [r3, #8]
 8003b52:	f003 020c 	and.w	r2, r3, #12
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	685b      	ldr	r3, [r3, #4]
 8003b5a:	009b      	lsls	r3, r3, #2
 8003b5c:	429a      	cmp	r2, r3
 8003b5e:	d1eb      	bne.n	8003b38 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003b60:	4b25      	ldr	r3, [pc, #148]	; (8003bf8 <HAL_RCC_ClockConfig+0x1b8>)
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f003 0307 	and.w	r3, r3, #7
 8003b68:	683a      	ldr	r2, [r7, #0]
 8003b6a:	429a      	cmp	r2, r3
 8003b6c:	d20c      	bcs.n	8003b88 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b6e:	4b22      	ldr	r3, [pc, #136]	; (8003bf8 <HAL_RCC_ClockConfig+0x1b8>)
 8003b70:	683a      	ldr	r2, [r7, #0]
 8003b72:	b2d2      	uxtb	r2, r2
 8003b74:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b76:	4b20      	ldr	r3, [pc, #128]	; (8003bf8 <HAL_RCC_ClockConfig+0x1b8>)
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f003 0307 	and.w	r3, r3, #7
 8003b7e:	683a      	ldr	r2, [r7, #0]
 8003b80:	429a      	cmp	r2, r3
 8003b82:	d001      	beq.n	8003b88 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003b84:	2301      	movs	r3, #1
 8003b86:	e032      	b.n	8003bee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f003 0304 	and.w	r3, r3, #4
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d008      	beq.n	8003ba6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003b94:	4b19      	ldr	r3, [pc, #100]	; (8003bfc <HAL_RCC_ClockConfig+0x1bc>)
 8003b96:	689b      	ldr	r3, [r3, #8]
 8003b98:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	68db      	ldr	r3, [r3, #12]
 8003ba0:	4916      	ldr	r1, [pc, #88]	; (8003bfc <HAL_RCC_ClockConfig+0x1bc>)
 8003ba2:	4313      	orrs	r3, r2
 8003ba4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f003 0308 	and.w	r3, r3, #8
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d009      	beq.n	8003bc6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003bb2:	4b12      	ldr	r3, [pc, #72]	; (8003bfc <HAL_RCC_ClockConfig+0x1bc>)
 8003bb4:	689b      	ldr	r3, [r3, #8]
 8003bb6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	691b      	ldr	r3, [r3, #16]
 8003bbe:	00db      	lsls	r3, r3, #3
 8003bc0:	490e      	ldr	r1, [pc, #56]	; (8003bfc <HAL_RCC_ClockConfig+0x1bc>)
 8003bc2:	4313      	orrs	r3, r2
 8003bc4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003bc6:	f000 f821 	bl	8003c0c <HAL_RCC_GetSysClockFreq>
 8003bca:	4602      	mov	r2, r0
 8003bcc:	4b0b      	ldr	r3, [pc, #44]	; (8003bfc <HAL_RCC_ClockConfig+0x1bc>)
 8003bce:	689b      	ldr	r3, [r3, #8]
 8003bd0:	091b      	lsrs	r3, r3, #4
 8003bd2:	f003 030f 	and.w	r3, r3, #15
 8003bd6:	490a      	ldr	r1, [pc, #40]	; (8003c00 <HAL_RCC_ClockConfig+0x1c0>)
 8003bd8:	5ccb      	ldrb	r3, [r1, r3]
 8003bda:	fa22 f303 	lsr.w	r3, r2, r3
 8003bde:	4a09      	ldr	r2, [pc, #36]	; (8003c04 <HAL_RCC_ClockConfig+0x1c4>)
 8003be0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003be2:	4b09      	ldr	r3, [pc, #36]	; (8003c08 <HAL_RCC_ClockConfig+0x1c8>)
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	4618      	mov	r0, r3
 8003be8:	f7fd fe4e 	bl	8001888 <HAL_InitTick>

  return HAL_OK;
 8003bec:	2300      	movs	r3, #0
}
 8003bee:	4618      	mov	r0, r3
 8003bf0:	3710      	adds	r7, #16
 8003bf2:	46bd      	mov	sp, r7
 8003bf4:	bd80      	pop	{r7, pc}
 8003bf6:	bf00      	nop
 8003bf8:	40023c00 	.word	0x40023c00
 8003bfc:	40023800 	.word	0x40023800
 8003c00:	0800a7d4 	.word	0x0800a7d4
 8003c04:	20000010 	.word	0x20000010
 8003c08:	20000014 	.word	0x20000014

08003c0c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003c0c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003c10:	b090      	sub	sp, #64	; 0x40
 8003c12:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003c14:	2300      	movs	r3, #0
 8003c16:	637b      	str	r3, [r7, #52]	; 0x34
 8003c18:	2300      	movs	r3, #0
 8003c1a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003c1c:	2300      	movs	r3, #0
 8003c1e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8003c20:	2300      	movs	r3, #0
 8003c22:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003c24:	4b59      	ldr	r3, [pc, #356]	; (8003d8c <HAL_RCC_GetSysClockFreq+0x180>)
 8003c26:	689b      	ldr	r3, [r3, #8]
 8003c28:	f003 030c 	and.w	r3, r3, #12
 8003c2c:	2b08      	cmp	r3, #8
 8003c2e:	d00d      	beq.n	8003c4c <HAL_RCC_GetSysClockFreq+0x40>
 8003c30:	2b08      	cmp	r3, #8
 8003c32:	f200 80a1 	bhi.w	8003d78 <HAL_RCC_GetSysClockFreq+0x16c>
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d002      	beq.n	8003c40 <HAL_RCC_GetSysClockFreq+0x34>
 8003c3a:	2b04      	cmp	r3, #4
 8003c3c:	d003      	beq.n	8003c46 <HAL_RCC_GetSysClockFreq+0x3a>
 8003c3e:	e09b      	b.n	8003d78 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003c40:	4b53      	ldr	r3, [pc, #332]	; (8003d90 <HAL_RCC_GetSysClockFreq+0x184>)
 8003c42:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8003c44:	e09b      	b.n	8003d7e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003c46:	4b53      	ldr	r3, [pc, #332]	; (8003d94 <HAL_RCC_GetSysClockFreq+0x188>)
 8003c48:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003c4a:	e098      	b.n	8003d7e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003c4c:	4b4f      	ldr	r3, [pc, #316]	; (8003d8c <HAL_RCC_GetSysClockFreq+0x180>)
 8003c4e:	685b      	ldr	r3, [r3, #4]
 8003c50:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003c54:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003c56:	4b4d      	ldr	r3, [pc, #308]	; (8003d8c <HAL_RCC_GetSysClockFreq+0x180>)
 8003c58:	685b      	ldr	r3, [r3, #4]
 8003c5a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d028      	beq.n	8003cb4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c62:	4b4a      	ldr	r3, [pc, #296]	; (8003d8c <HAL_RCC_GetSysClockFreq+0x180>)
 8003c64:	685b      	ldr	r3, [r3, #4]
 8003c66:	099b      	lsrs	r3, r3, #6
 8003c68:	2200      	movs	r2, #0
 8003c6a:	623b      	str	r3, [r7, #32]
 8003c6c:	627a      	str	r2, [r7, #36]	; 0x24
 8003c6e:	6a3b      	ldr	r3, [r7, #32]
 8003c70:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003c74:	2100      	movs	r1, #0
 8003c76:	4b47      	ldr	r3, [pc, #284]	; (8003d94 <HAL_RCC_GetSysClockFreq+0x188>)
 8003c78:	fb03 f201 	mul.w	r2, r3, r1
 8003c7c:	2300      	movs	r3, #0
 8003c7e:	fb00 f303 	mul.w	r3, r0, r3
 8003c82:	4413      	add	r3, r2
 8003c84:	4a43      	ldr	r2, [pc, #268]	; (8003d94 <HAL_RCC_GetSysClockFreq+0x188>)
 8003c86:	fba0 1202 	umull	r1, r2, r0, r2
 8003c8a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003c8c:	460a      	mov	r2, r1
 8003c8e:	62ba      	str	r2, [r7, #40]	; 0x28
 8003c90:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003c92:	4413      	add	r3, r2
 8003c94:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003c96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c98:	2200      	movs	r2, #0
 8003c9a:	61bb      	str	r3, [r7, #24]
 8003c9c:	61fa      	str	r2, [r7, #28]
 8003c9e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003ca2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003ca6:	f7fc fa8f 	bl	80001c8 <__aeabi_uldivmod>
 8003caa:	4602      	mov	r2, r0
 8003cac:	460b      	mov	r3, r1
 8003cae:	4613      	mov	r3, r2
 8003cb0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003cb2:	e053      	b.n	8003d5c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003cb4:	4b35      	ldr	r3, [pc, #212]	; (8003d8c <HAL_RCC_GetSysClockFreq+0x180>)
 8003cb6:	685b      	ldr	r3, [r3, #4]
 8003cb8:	099b      	lsrs	r3, r3, #6
 8003cba:	2200      	movs	r2, #0
 8003cbc:	613b      	str	r3, [r7, #16]
 8003cbe:	617a      	str	r2, [r7, #20]
 8003cc0:	693b      	ldr	r3, [r7, #16]
 8003cc2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003cc6:	f04f 0b00 	mov.w	fp, #0
 8003cca:	4652      	mov	r2, sl
 8003ccc:	465b      	mov	r3, fp
 8003cce:	f04f 0000 	mov.w	r0, #0
 8003cd2:	f04f 0100 	mov.w	r1, #0
 8003cd6:	0159      	lsls	r1, r3, #5
 8003cd8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003cdc:	0150      	lsls	r0, r2, #5
 8003cde:	4602      	mov	r2, r0
 8003ce0:	460b      	mov	r3, r1
 8003ce2:	ebb2 080a 	subs.w	r8, r2, sl
 8003ce6:	eb63 090b 	sbc.w	r9, r3, fp
 8003cea:	f04f 0200 	mov.w	r2, #0
 8003cee:	f04f 0300 	mov.w	r3, #0
 8003cf2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003cf6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003cfa:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003cfe:	ebb2 0408 	subs.w	r4, r2, r8
 8003d02:	eb63 0509 	sbc.w	r5, r3, r9
 8003d06:	f04f 0200 	mov.w	r2, #0
 8003d0a:	f04f 0300 	mov.w	r3, #0
 8003d0e:	00eb      	lsls	r3, r5, #3
 8003d10:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003d14:	00e2      	lsls	r2, r4, #3
 8003d16:	4614      	mov	r4, r2
 8003d18:	461d      	mov	r5, r3
 8003d1a:	eb14 030a 	adds.w	r3, r4, sl
 8003d1e:	603b      	str	r3, [r7, #0]
 8003d20:	eb45 030b 	adc.w	r3, r5, fp
 8003d24:	607b      	str	r3, [r7, #4]
 8003d26:	f04f 0200 	mov.w	r2, #0
 8003d2a:	f04f 0300 	mov.w	r3, #0
 8003d2e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003d32:	4629      	mov	r1, r5
 8003d34:	028b      	lsls	r3, r1, #10
 8003d36:	4621      	mov	r1, r4
 8003d38:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003d3c:	4621      	mov	r1, r4
 8003d3e:	028a      	lsls	r2, r1, #10
 8003d40:	4610      	mov	r0, r2
 8003d42:	4619      	mov	r1, r3
 8003d44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d46:	2200      	movs	r2, #0
 8003d48:	60bb      	str	r3, [r7, #8]
 8003d4a:	60fa      	str	r2, [r7, #12]
 8003d4c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003d50:	f7fc fa3a 	bl	80001c8 <__aeabi_uldivmod>
 8003d54:	4602      	mov	r2, r0
 8003d56:	460b      	mov	r3, r1
 8003d58:	4613      	mov	r3, r2
 8003d5a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003d5c:	4b0b      	ldr	r3, [pc, #44]	; (8003d8c <HAL_RCC_GetSysClockFreq+0x180>)
 8003d5e:	685b      	ldr	r3, [r3, #4]
 8003d60:	0c1b      	lsrs	r3, r3, #16
 8003d62:	f003 0303 	and.w	r3, r3, #3
 8003d66:	3301      	adds	r3, #1
 8003d68:	005b      	lsls	r3, r3, #1
 8003d6a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8003d6c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003d6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d70:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d74:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003d76:	e002      	b.n	8003d7e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003d78:	4b05      	ldr	r3, [pc, #20]	; (8003d90 <HAL_RCC_GetSysClockFreq+0x184>)
 8003d7a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003d7c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003d7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003d80:	4618      	mov	r0, r3
 8003d82:	3740      	adds	r7, #64	; 0x40
 8003d84:	46bd      	mov	sp, r7
 8003d86:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003d8a:	bf00      	nop
 8003d8c:	40023800 	.word	0x40023800
 8003d90:	00f42400 	.word	0x00f42400
 8003d94:	016e3600 	.word	0x016e3600

08003d98 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003d98:	b480      	push	{r7}
 8003d9a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003d9c:	4b03      	ldr	r3, [pc, #12]	; (8003dac <HAL_RCC_GetHCLKFreq+0x14>)
 8003d9e:	681b      	ldr	r3, [r3, #0]
}
 8003da0:	4618      	mov	r0, r3
 8003da2:	46bd      	mov	sp, r7
 8003da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da8:	4770      	bx	lr
 8003daa:	bf00      	nop
 8003dac:	20000010 	.word	0x20000010

08003db0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003db0:	b580      	push	{r7, lr}
 8003db2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003db4:	f7ff fff0 	bl	8003d98 <HAL_RCC_GetHCLKFreq>
 8003db8:	4602      	mov	r2, r0
 8003dba:	4b05      	ldr	r3, [pc, #20]	; (8003dd0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003dbc:	689b      	ldr	r3, [r3, #8]
 8003dbe:	0a9b      	lsrs	r3, r3, #10
 8003dc0:	f003 0307 	and.w	r3, r3, #7
 8003dc4:	4903      	ldr	r1, [pc, #12]	; (8003dd4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003dc6:	5ccb      	ldrb	r3, [r1, r3]
 8003dc8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003dcc:	4618      	mov	r0, r3
 8003dce:	bd80      	pop	{r7, pc}
 8003dd0:	40023800 	.word	0x40023800
 8003dd4:	0800a7e4 	.word	0x0800a7e4

08003dd8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003dd8:	b580      	push	{r7, lr}
 8003dda:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003ddc:	f7ff ffdc 	bl	8003d98 <HAL_RCC_GetHCLKFreq>
 8003de0:	4602      	mov	r2, r0
 8003de2:	4b05      	ldr	r3, [pc, #20]	; (8003df8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003de4:	689b      	ldr	r3, [r3, #8]
 8003de6:	0b5b      	lsrs	r3, r3, #13
 8003de8:	f003 0307 	and.w	r3, r3, #7
 8003dec:	4903      	ldr	r1, [pc, #12]	; (8003dfc <HAL_RCC_GetPCLK2Freq+0x24>)
 8003dee:	5ccb      	ldrb	r3, [r1, r3]
 8003df0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003df4:	4618      	mov	r0, r3
 8003df6:	bd80      	pop	{r7, pc}
 8003df8:	40023800 	.word	0x40023800
 8003dfc:	0800a7e4 	.word	0x0800a7e4

08003e00 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003e00:	b580      	push	{r7, lr}
 8003e02:	b082      	sub	sp, #8
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d101      	bne.n	8003e12 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003e0e:	2301      	movs	r3, #1
 8003e10:	e07b      	b.n	8003f0a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d108      	bne.n	8003e2c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	685b      	ldr	r3, [r3, #4]
 8003e1e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003e22:	d009      	beq.n	8003e38 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	2200      	movs	r2, #0
 8003e28:	61da      	str	r2, [r3, #28]
 8003e2a:	e005      	b.n	8003e38 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	2200      	movs	r2, #0
 8003e30:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	2200      	movs	r2, #0
 8003e36:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	2200      	movs	r2, #0
 8003e3c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003e44:	b2db      	uxtb	r3, r3
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d106      	bne.n	8003e58 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	2200      	movs	r2, #0
 8003e4e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003e52:	6878      	ldr	r0, [r7, #4]
 8003e54:	f7fd fb4c 	bl	80014f0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	2202      	movs	r2, #2
 8003e5c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	681a      	ldr	r2, [r3, #0]
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003e6e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	685b      	ldr	r3, [r3, #4]
 8003e74:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	689b      	ldr	r3, [r3, #8]
 8003e7c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003e80:	431a      	orrs	r2, r3
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	68db      	ldr	r3, [r3, #12]
 8003e86:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003e8a:	431a      	orrs	r2, r3
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	691b      	ldr	r3, [r3, #16]
 8003e90:	f003 0302 	and.w	r3, r3, #2
 8003e94:	431a      	orrs	r2, r3
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	695b      	ldr	r3, [r3, #20]
 8003e9a:	f003 0301 	and.w	r3, r3, #1
 8003e9e:	431a      	orrs	r2, r3
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	699b      	ldr	r3, [r3, #24]
 8003ea4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003ea8:	431a      	orrs	r2, r3
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	69db      	ldr	r3, [r3, #28]
 8003eae:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003eb2:	431a      	orrs	r2, r3
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	6a1b      	ldr	r3, [r3, #32]
 8003eb8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ebc:	ea42 0103 	orr.w	r1, r2, r3
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ec4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	430a      	orrs	r2, r1
 8003ece:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	699b      	ldr	r3, [r3, #24]
 8003ed4:	0c1b      	lsrs	r3, r3, #16
 8003ed6:	f003 0104 	and.w	r1, r3, #4
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ede:	f003 0210 	and.w	r2, r3, #16
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	430a      	orrs	r2, r1
 8003ee8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	69da      	ldr	r2, [r3, #28]
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003ef8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	2200      	movs	r2, #0
 8003efe:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	2201      	movs	r2, #1
 8003f04:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003f08:	2300      	movs	r3, #0
}
 8003f0a:	4618      	mov	r0, r3
 8003f0c:	3708      	adds	r7, #8
 8003f0e:	46bd      	mov	sp, r7
 8003f10:	bd80      	pop	{r7, pc}

08003f12 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003f12:	b580      	push	{r7, lr}
 8003f14:	b088      	sub	sp, #32
 8003f16:	af00      	add	r7, sp, #0
 8003f18:	60f8      	str	r0, [r7, #12]
 8003f1a:	60b9      	str	r1, [r7, #8]
 8003f1c:	603b      	str	r3, [r7, #0]
 8003f1e:	4613      	mov	r3, r2
 8003f20:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003f22:	2300      	movs	r3, #0
 8003f24:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003f2c:	2b01      	cmp	r3, #1
 8003f2e:	d101      	bne.n	8003f34 <HAL_SPI_Transmit+0x22>
 8003f30:	2302      	movs	r3, #2
 8003f32:	e126      	b.n	8004182 <HAL_SPI_Transmit+0x270>
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	2201      	movs	r2, #1
 8003f38:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003f3c:	f7fd fce8 	bl	8001910 <HAL_GetTick>
 8003f40:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003f42:	88fb      	ldrh	r3, [r7, #6]
 8003f44:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003f4c:	b2db      	uxtb	r3, r3
 8003f4e:	2b01      	cmp	r3, #1
 8003f50:	d002      	beq.n	8003f58 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003f52:	2302      	movs	r3, #2
 8003f54:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003f56:	e10b      	b.n	8004170 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8003f58:	68bb      	ldr	r3, [r7, #8]
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d002      	beq.n	8003f64 <HAL_SPI_Transmit+0x52>
 8003f5e:	88fb      	ldrh	r3, [r7, #6]
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d102      	bne.n	8003f6a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003f64:	2301      	movs	r3, #1
 8003f66:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003f68:	e102      	b.n	8004170 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	2203      	movs	r2, #3
 8003f6e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	2200      	movs	r2, #0
 8003f76:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	68ba      	ldr	r2, [r7, #8]
 8003f7c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	88fa      	ldrh	r2, [r7, #6]
 8003f82:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	88fa      	ldrh	r2, [r7, #6]
 8003f88:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	2200      	movs	r2, #0
 8003f8e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	2200      	movs	r2, #0
 8003f94:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	2200      	movs	r2, #0
 8003f9a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	2200      	movs	r2, #0
 8003fa0:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	2200      	movs	r2, #0
 8003fa6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	689b      	ldr	r3, [r3, #8]
 8003fac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003fb0:	d10f      	bne.n	8003fd2 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	681a      	ldr	r2, [r3, #0]
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003fc0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	681a      	ldr	r2, [r3, #0]
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003fd0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fdc:	2b40      	cmp	r3, #64	; 0x40
 8003fde:	d007      	beq.n	8003ff0 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	681a      	ldr	r2, [r3, #0]
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003fee:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	68db      	ldr	r3, [r3, #12]
 8003ff4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003ff8:	d14b      	bne.n	8004092 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	685b      	ldr	r3, [r3, #4]
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d002      	beq.n	8004008 <HAL_SPI_Transmit+0xf6>
 8004002:	8afb      	ldrh	r3, [r7, #22]
 8004004:	2b01      	cmp	r3, #1
 8004006:	d13e      	bne.n	8004086 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800400c:	881a      	ldrh	r2, [r3, #0]
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004018:	1c9a      	adds	r2, r3, #2
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004022:	b29b      	uxth	r3, r3
 8004024:	3b01      	subs	r3, #1
 8004026:	b29a      	uxth	r2, r3
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800402c:	e02b      	b.n	8004086 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	689b      	ldr	r3, [r3, #8]
 8004034:	f003 0302 	and.w	r3, r3, #2
 8004038:	2b02      	cmp	r3, #2
 800403a:	d112      	bne.n	8004062 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004040:	881a      	ldrh	r2, [r3, #0]
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800404c:	1c9a      	adds	r2, r3, #2
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004056:	b29b      	uxth	r3, r3
 8004058:	3b01      	subs	r3, #1
 800405a:	b29a      	uxth	r2, r3
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	86da      	strh	r2, [r3, #54]	; 0x36
 8004060:	e011      	b.n	8004086 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004062:	f7fd fc55 	bl	8001910 <HAL_GetTick>
 8004066:	4602      	mov	r2, r0
 8004068:	69bb      	ldr	r3, [r7, #24]
 800406a:	1ad3      	subs	r3, r2, r3
 800406c:	683a      	ldr	r2, [r7, #0]
 800406e:	429a      	cmp	r2, r3
 8004070:	d803      	bhi.n	800407a <HAL_SPI_Transmit+0x168>
 8004072:	683b      	ldr	r3, [r7, #0]
 8004074:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004078:	d102      	bne.n	8004080 <HAL_SPI_Transmit+0x16e>
 800407a:	683b      	ldr	r3, [r7, #0]
 800407c:	2b00      	cmp	r3, #0
 800407e:	d102      	bne.n	8004086 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8004080:	2303      	movs	r3, #3
 8004082:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004084:	e074      	b.n	8004170 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800408a:	b29b      	uxth	r3, r3
 800408c:	2b00      	cmp	r3, #0
 800408e:	d1ce      	bne.n	800402e <HAL_SPI_Transmit+0x11c>
 8004090:	e04c      	b.n	800412c <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	685b      	ldr	r3, [r3, #4]
 8004096:	2b00      	cmp	r3, #0
 8004098:	d002      	beq.n	80040a0 <HAL_SPI_Transmit+0x18e>
 800409a:	8afb      	ldrh	r3, [r7, #22]
 800409c:	2b01      	cmp	r3, #1
 800409e:	d140      	bne.n	8004122 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	330c      	adds	r3, #12
 80040aa:	7812      	ldrb	r2, [r2, #0]
 80040ac:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040b2:	1c5a      	adds	r2, r3, #1
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80040bc:	b29b      	uxth	r3, r3
 80040be:	3b01      	subs	r3, #1
 80040c0:	b29a      	uxth	r2, r3
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80040c6:	e02c      	b.n	8004122 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	689b      	ldr	r3, [r3, #8]
 80040ce:	f003 0302 	and.w	r3, r3, #2
 80040d2:	2b02      	cmp	r3, #2
 80040d4:	d113      	bne.n	80040fe <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	330c      	adds	r3, #12
 80040e0:	7812      	ldrb	r2, [r2, #0]
 80040e2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040e8:	1c5a      	adds	r2, r3, #1
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80040f2:	b29b      	uxth	r3, r3
 80040f4:	3b01      	subs	r3, #1
 80040f6:	b29a      	uxth	r2, r3
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	86da      	strh	r2, [r3, #54]	; 0x36
 80040fc:	e011      	b.n	8004122 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80040fe:	f7fd fc07 	bl	8001910 <HAL_GetTick>
 8004102:	4602      	mov	r2, r0
 8004104:	69bb      	ldr	r3, [r7, #24]
 8004106:	1ad3      	subs	r3, r2, r3
 8004108:	683a      	ldr	r2, [r7, #0]
 800410a:	429a      	cmp	r2, r3
 800410c:	d803      	bhi.n	8004116 <HAL_SPI_Transmit+0x204>
 800410e:	683b      	ldr	r3, [r7, #0]
 8004110:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004114:	d102      	bne.n	800411c <HAL_SPI_Transmit+0x20a>
 8004116:	683b      	ldr	r3, [r7, #0]
 8004118:	2b00      	cmp	r3, #0
 800411a:	d102      	bne.n	8004122 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800411c:	2303      	movs	r3, #3
 800411e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004120:	e026      	b.n	8004170 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004126:	b29b      	uxth	r3, r3
 8004128:	2b00      	cmp	r3, #0
 800412a:	d1cd      	bne.n	80040c8 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800412c:	69ba      	ldr	r2, [r7, #24]
 800412e:	6839      	ldr	r1, [r7, #0]
 8004130:	68f8      	ldr	r0, [r7, #12]
 8004132:	f000 fbd9 	bl	80048e8 <SPI_EndRxTxTransaction>
 8004136:	4603      	mov	r3, r0
 8004138:	2b00      	cmp	r3, #0
 800413a:	d002      	beq.n	8004142 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	2220      	movs	r2, #32
 8004140:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	689b      	ldr	r3, [r3, #8]
 8004146:	2b00      	cmp	r3, #0
 8004148:	d10a      	bne.n	8004160 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800414a:	2300      	movs	r3, #0
 800414c:	613b      	str	r3, [r7, #16]
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	68db      	ldr	r3, [r3, #12]
 8004154:	613b      	str	r3, [r7, #16]
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	689b      	ldr	r3, [r3, #8]
 800415c:	613b      	str	r3, [r7, #16]
 800415e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004164:	2b00      	cmp	r3, #0
 8004166:	d002      	beq.n	800416e <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8004168:	2301      	movs	r3, #1
 800416a:	77fb      	strb	r3, [r7, #31]
 800416c:	e000      	b.n	8004170 <HAL_SPI_Transmit+0x25e>
  }

error:
 800416e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	2201      	movs	r2, #1
 8004174:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	2200      	movs	r2, #0
 800417c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004180:	7ffb      	ldrb	r3, [r7, #31]
}
 8004182:	4618      	mov	r0, r3
 8004184:	3720      	adds	r7, #32
 8004186:	46bd      	mov	sp, r7
 8004188:	bd80      	pop	{r7, pc}

0800418a <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800418a:	b580      	push	{r7, lr}
 800418c:	b088      	sub	sp, #32
 800418e:	af02      	add	r7, sp, #8
 8004190:	60f8      	str	r0, [r7, #12]
 8004192:	60b9      	str	r1, [r7, #8]
 8004194:	603b      	str	r3, [r7, #0]
 8004196:	4613      	mov	r3, r2
 8004198:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800419a:	2300      	movs	r3, #0
 800419c:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	685b      	ldr	r3, [r3, #4]
 80041a2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80041a6:	d112      	bne.n	80041ce <HAL_SPI_Receive+0x44>
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	689b      	ldr	r3, [r3, #8]
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d10e      	bne.n	80041ce <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	2204      	movs	r2, #4
 80041b4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80041b8:	88fa      	ldrh	r2, [r7, #6]
 80041ba:	683b      	ldr	r3, [r7, #0]
 80041bc:	9300      	str	r3, [sp, #0]
 80041be:	4613      	mov	r3, r2
 80041c0:	68ba      	ldr	r2, [r7, #8]
 80041c2:	68b9      	ldr	r1, [r7, #8]
 80041c4:	68f8      	ldr	r0, [r7, #12]
 80041c6:	f000 f8f1 	bl	80043ac <HAL_SPI_TransmitReceive>
 80041ca:	4603      	mov	r3, r0
 80041cc:	e0ea      	b.n	80043a4 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80041d4:	2b01      	cmp	r3, #1
 80041d6:	d101      	bne.n	80041dc <HAL_SPI_Receive+0x52>
 80041d8:	2302      	movs	r3, #2
 80041da:	e0e3      	b.n	80043a4 <HAL_SPI_Receive+0x21a>
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	2201      	movs	r2, #1
 80041e0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80041e4:	f7fd fb94 	bl	8001910 <HAL_GetTick>
 80041e8:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80041f0:	b2db      	uxtb	r3, r3
 80041f2:	2b01      	cmp	r3, #1
 80041f4:	d002      	beq.n	80041fc <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80041f6:	2302      	movs	r3, #2
 80041f8:	75fb      	strb	r3, [r7, #23]
    goto error;
 80041fa:	e0ca      	b.n	8004392 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 80041fc:	68bb      	ldr	r3, [r7, #8]
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d002      	beq.n	8004208 <HAL_SPI_Receive+0x7e>
 8004202:	88fb      	ldrh	r3, [r7, #6]
 8004204:	2b00      	cmp	r3, #0
 8004206:	d102      	bne.n	800420e <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8004208:	2301      	movs	r3, #1
 800420a:	75fb      	strb	r3, [r7, #23]
    goto error;
 800420c:	e0c1      	b.n	8004392 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	2204      	movs	r2, #4
 8004212:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	2200      	movs	r2, #0
 800421a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	68ba      	ldr	r2, [r7, #8]
 8004220:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	88fa      	ldrh	r2, [r7, #6]
 8004226:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	88fa      	ldrh	r2, [r7, #6]
 800422c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	2200      	movs	r2, #0
 8004232:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	2200      	movs	r2, #0
 8004238:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	2200      	movs	r2, #0
 800423e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	2200      	movs	r2, #0
 8004244:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	2200      	movs	r2, #0
 800424a:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	689b      	ldr	r3, [r3, #8]
 8004250:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004254:	d10f      	bne.n	8004276 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	681a      	ldr	r2, [r3, #0]
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004264:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	681a      	ldr	r2, [r3, #0]
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004274:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004280:	2b40      	cmp	r3, #64	; 0x40
 8004282:	d007      	beq.n	8004294 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	681a      	ldr	r2, [r3, #0]
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004292:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	68db      	ldr	r3, [r3, #12]
 8004298:	2b00      	cmp	r3, #0
 800429a:	d162      	bne.n	8004362 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800429c:	e02e      	b.n	80042fc <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	689b      	ldr	r3, [r3, #8]
 80042a4:	f003 0301 	and.w	r3, r3, #1
 80042a8:	2b01      	cmp	r3, #1
 80042aa:	d115      	bne.n	80042d8 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	f103 020c 	add.w	r2, r3, #12
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042b8:	7812      	ldrb	r2, [r2, #0]
 80042ba:	b2d2      	uxtb	r2, r2
 80042bc:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042c2:	1c5a      	adds	r2, r3, #1
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80042cc:	b29b      	uxth	r3, r3
 80042ce:	3b01      	subs	r3, #1
 80042d0:	b29a      	uxth	r2, r3
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	87da      	strh	r2, [r3, #62]	; 0x3e
 80042d6:	e011      	b.n	80042fc <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80042d8:	f7fd fb1a 	bl	8001910 <HAL_GetTick>
 80042dc:	4602      	mov	r2, r0
 80042de:	693b      	ldr	r3, [r7, #16]
 80042e0:	1ad3      	subs	r3, r2, r3
 80042e2:	683a      	ldr	r2, [r7, #0]
 80042e4:	429a      	cmp	r2, r3
 80042e6:	d803      	bhi.n	80042f0 <HAL_SPI_Receive+0x166>
 80042e8:	683b      	ldr	r3, [r7, #0]
 80042ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042ee:	d102      	bne.n	80042f6 <HAL_SPI_Receive+0x16c>
 80042f0:	683b      	ldr	r3, [r7, #0]
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d102      	bne.n	80042fc <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 80042f6:	2303      	movs	r3, #3
 80042f8:	75fb      	strb	r3, [r7, #23]
          goto error;
 80042fa:	e04a      	b.n	8004392 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004300:	b29b      	uxth	r3, r3
 8004302:	2b00      	cmp	r3, #0
 8004304:	d1cb      	bne.n	800429e <HAL_SPI_Receive+0x114>
 8004306:	e031      	b.n	800436c <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	689b      	ldr	r3, [r3, #8]
 800430e:	f003 0301 	and.w	r3, r3, #1
 8004312:	2b01      	cmp	r3, #1
 8004314:	d113      	bne.n	800433e <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	68da      	ldr	r2, [r3, #12]
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004320:	b292      	uxth	r2, r2
 8004322:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004328:	1c9a      	adds	r2, r3, #2
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004332:	b29b      	uxth	r3, r3
 8004334:	3b01      	subs	r3, #1
 8004336:	b29a      	uxth	r2, r3
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800433c:	e011      	b.n	8004362 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800433e:	f7fd fae7 	bl	8001910 <HAL_GetTick>
 8004342:	4602      	mov	r2, r0
 8004344:	693b      	ldr	r3, [r7, #16]
 8004346:	1ad3      	subs	r3, r2, r3
 8004348:	683a      	ldr	r2, [r7, #0]
 800434a:	429a      	cmp	r2, r3
 800434c:	d803      	bhi.n	8004356 <HAL_SPI_Receive+0x1cc>
 800434e:	683b      	ldr	r3, [r7, #0]
 8004350:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004354:	d102      	bne.n	800435c <HAL_SPI_Receive+0x1d2>
 8004356:	683b      	ldr	r3, [r7, #0]
 8004358:	2b00      	cmp	r3, #0
 800435a:	d102      	bne.n	8004362 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 800435c:	2303      	movs	r3, #3
 800435e:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004360:	e017      	b.n	8004392 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004366:	b29b      	uxth	r3, r3
 8004368:	2b00      	cmp	r3, #0
 800436a:	d1cd      	bne.n	8004308 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800436c:	693a      	ldr	r2, [r7, #16]
 800436e:	6839      	ldr	r1, [r7, #0]
 8004370:	68f8      	ldr	r0, [r7, #12]
 8004372:	f000 fa53 	bl	800481c <SPI_EndRxTransaction>
 8004376:	4603      	mov	r3, r0
 8004378:	2b00      	cmp	r3, #0
 800437a:	d002      	beq.n	8004382 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	2220      	movs	r2, #32
 8004380:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004386:	2b00      	cmp	r3, #0
 8004388:	d002      	beq.n	8004390 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 800438a:	2301      	movs	r3, #1
 800438c:	75fb      	strb	r3, [r7, #23]
 800438e:	e000      	b.n	8004392 <HAL_SPI_Receive+0x208>
  }

error :
 8004390:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	2201      	movs	r2, #1
 8004396:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	2200      	movs	r2, #0
 800439e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80043a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80043a4:	4618      	mov	r0, r3
 80043a6:	3718      	adds	r7, #24
 80043a8:	46bd      	mov	sp, r7
 80043aa:	bd80      	pop	{r7, pc}

080043ac <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80043ac:	b580      	push	{r7, lr}
 80043ae:	b08c      	sub	sp, #48	; 0x30
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	60f8      	str	r0, [r7, #12]
 80043b4:	60b9      	str	r1, [r7, #8]
 80043b6:	607a      	str	r2, [r7, #4]
 80043b8:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80043ba:	2301      	movs	r3, #1
 80043bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80043be:	2300      	movs	r3, #0
 80043c0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80043ca:	2b01      	cmp	r3, #1
 80043cc:	d101      	bne.n	80043d2 <HAL_SPI_TransmitReceive+0x26>
 80043ce:	2302      	movs	r3, #2
 80043d0:	e18a      	b.n	80046e8 <HAL_SPI_TransmitReceive+0x33c>
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	2201      	movs	r2, #1
 80043d6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80043da:	f7fd fa99 	bl	8001910 <HAL_GetTick>
 80043de:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80043e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	685b      	ldr	r3, [r3, #4]
 80043ee:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80043f0:	887b      	ldrh	r3, [r7, #2]
 80043f2:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80043f4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80043f8:	2b01      	cmp	r3, #1
 80043fa:	d00f      	beq.n	800441c <HAL_SPI_TransmitReceive+0x70>
 80043fc:	69fb      	ldr	r3, [r7, #28]
 80043fe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004402:	d107      	bne.n	8004414 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	689b      	ldr	r3, [r3, #8]
 8004408:	2b00      	cmp	r3, #0
 800440a:	d103      	bne.n	8004414 <HAL_SPI_TransmitReceive+0x68>
 800440c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004410:	2b04      	cmp	r3, #4
 8004412:	d003      	beq.n	800441c <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8004414:	2302      	movs	r3, #2
 8004416:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800441a:	e15b      	b.n	80046d4 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800441c:	68bb      	ldr	r3, [r7, #8]
 800441e:	2b00      	cmp	r3, #0
 8004420:	d005      	beq.n	800442e <HAL_SPI_TransmitReceive+0x82>
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	2b00      	cmp	r3, #0
 8004426:	d002      	beq.n	800442e <HAL_SPI_TransmitReceive+0x82>
 8004428:	887b      	ldrh	r3, [r7, #2]
 800442a:	2b00      	cmp	r3, #0
 800442c:	d103      	bne.n	8004436 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800442e:	2301      	movs	r3, #1
 8004430:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004434:	e14e      	b.n	80046d4 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800443c:	b2db      	uxtb	r3, r3
 800443e:	2b04      	cmp	r3, #4
 8004440:	d003      	beq.n	800444a <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	2205      	movs	r2, #5
 8004446:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	2200      	movs	r2, #0
 800444e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	687a      	ldr	r2, [r7, #4]
 8004454:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	887a      	ldrh	r2, [r7, #2]
 800445a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	887a      	ldrh	r2, [r7, #2]
 8004460:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	68ba      	ldr	r2, [r7, #8]
 8004466:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	887a      	ldrh	r2, [r7, #2]
 800446c:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	887a      	ldrh	r2, [r7, #2]
 8004472:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	2200      	movs	r2, #0
 8004478:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	2200      	movs	r2, #0
 800447e:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800448a:	2b40      	cmp	r3, #64	; 0x40
 800448c:	d007      	beq.n	800449e <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	681a      	ldr	r2, [r3, #0]
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800449c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	68db      	ldr	r3, [r3, #12]
 80044a2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80044a6:	d178      	bne.n	800459a <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	685b      	ldr	r3, [r3, #4]
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d002      	beq.n	80044b6 <HAL_SPI_TransmitReceive+0x10a>
 80044b0:	8b7b      	ldrh	r3, [r7, #26]
 80044b2:	2b01      	cmp	r3, #1
 80044b4:	d166      	bne.n	8004584 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044ba:	881a      	ldrh	r2, [r3, #0]
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044c6:	1c9a      	adds	r2, r3, #2
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80044d0:	b29b      	uxth	r3, r3
 80044d2:	3b01      	subs	r3, #1
 80044d4:	b29a      	uxth	r2, r3
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80044da:	e053      	b.n	8004584 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	689b      	ldr	r3, [r3, #8]
 80044e2:	f003 0302 	and.w	r3, r3, #2
 80044e6:	2b02      	cmp	r3, #2
 80044e8:	d11b      	bne.n	8004522 <HAL_SPI_TransmitReceive+0x176>
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80044ee:	b29b      	uxth	r3, r3
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d016      	beq.n	8004522 <HAL_SPI_TransmitReceive+0x176>
 80044f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044f6:	2b01      	cmp	r3, #1
 80044f8:	d113      	bne.n	8004522 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044fe:	881a      	ldrh	r2, [r3, #0]
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800450a:	1c9a      	adds	r2, r3, #2
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004514:	b29b      	uxth	r3, r3
 8004516:	3b01      	subs	r3, #1
 8004518:	b29a      	uxth	r2, r3
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800451e:	2300      	movs	r3, #0
 8004520:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	689b      	ldr	r3, [r3, #8]
 8004528:	f003 0301 	and.w	r3, r3, #1
 800452c:	2b01      	cmp	r3, #1
 800452e:	d119      	bne.n	8004564 <HAL_SPI_TransmitReceive+0x1b8>
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004534:	b29b      	uxth	r3, r3
 8004536:	2b00      	cmp	r3, #0
 8004538:	d014      	beq.n	8004564 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	68da      	ldr	r2, [r3, #12]
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004544:	b292      	uxth	r2, r2
 8004546:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800454c:	1c9a      	adds	r2, r3, #2
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004556:	b29b      	uxth	r3, r3
 8004558:	3b01      	subs	r3, #1
 800455a:	b29a      	uxth	r2, r3
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004560:	2301      	movs	r3, #1
 8004562:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004564:	f7fd f9d4 	bl	8001910 <HAL_GetTick>
 8004568:	4602      	mov	r2, r0
 800456a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800456c:	1ad3      	subs	r3, r2, r3
 800456e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004570:	429a      	cmp	r2, r3
 8004572:	d807      	bhi.n	8004584 <HAL_SPI_TransmitReceive+0x1d8>
 8004574:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004576:	f1b3 3fff 	cmp.w	r3, #4294967295
 800457a:	d003      	beq.n	8004584 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800457c:	2303      	movs	r3, #3
 800457e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004582:	e0a7      	b.n	80046d4 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004588:	b29b      	uxth	r3, r3
 800458a:	2b00      	cmp	r3, #0
 800458c:	d1a6      	bne.n	80044dc <HAL_SPI_TransmitReceive+0x130>
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004592:	b29b      	uxth	r3, r3
 8004594:	2b00      	cmp	r3, #0
 8004596:	d1a1      	bne.n	80044dc <HAL_SPI_TransmitReceive+0x130>
 8004598:	e07c      	b.n	8004694 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	685b      	ldr	r3, [r3, #4]
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d002      	beq.n	80045a8 <HAL_SPI_TransmitReceive+0x1fc>
 80045a2:	8b7b      	ldrh	r3, [r7, #26]
 80045a4:	2b01      	cmp	r3, #1
 80045a6:	d16b      	bne.n	8004680 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	330c      	adds	r3, #12
 80045b2:	7812      	ldrb	r2, [r2, #0]
 80045b4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045ba:	1c5a      	adds	r2, r3, #1
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80045c4:	b29b      	uxth	r3, r3
 80045c6:	3b01      	subs	r3, #1
 80045c8:	b29a      	uxth	r2, r3
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80045ce:	e057      	b.n	8004680 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	689b      	ldr	r3, [r3, #8]
 80045d6:	f003 0302 	and.w	r3, r3, #2
 80045da:	2b02      	cmp	r3, #2
 80045dc:	d11c      	bne.n	8004618 <HAL_SPI_TransmitReceive+0x26c>
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80045e2:	b29b      	uxth	r3, r3
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d017      	beq.n	8004618 <HAL_SPI_TransmitReceive+0x26c>
 80045e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045ea:	2b01      	cmp	r3, #1
 80045ec:	d114      	bne.n	8004618 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	330c      	adds	r3, #12
 80045f8:	7812      	ldrb	r2, [r2, #0]
 80045fa:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004600:	1c5a      	adds	r2, r3, #1
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800460a:	b29b      	uxth	r3, r3
 800460c:	3b01      	subs	r3, #1
 800460e:	b29a      	uxth	r2, r3
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004614:	2300      	movs	r3, #0
 8004616:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	689b      	ldr	r3, [r3, #8]
 800461e:	f003 0301 	and.w	r3, r3, #1
 8004622:	2b01      	cmp	r3, #1
 8004624:	d119      	bne.n	800465a <HAL_SPI_TransmitReceive+0x2ae>
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800462a:	b29b      	uxth	r3, r3
 800462c:	2b00      	cmp	r3, #0
 800462e:	d014      	beq.n	800465a <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	68da      	ldr	r2, [r3, #12]
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800463a:	b2d2      	uxtb	r2, r2
 800463c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004642:	1c5a      	adds	r2, r3, #1
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800464c:	b29b      	uxth	r3, r3
 800464e:	3b01      	subs	r3, #1
 8004650:	b29a      	uxth	r2, r3
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004656:	2301      	movs	r3, #1
 8004658:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800465a:	f7fd f959 	bl	8001910 <HAL_GetTick>
 800465e:	4602      	mov	r2, r0
 8004660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004662:	1ad3      	subs	r3, r2, r3
 8004664:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004666:	429a      	cmp	r2, r3
 8004668:	d803      	bhi.n	8004672 <HAL_SPI_TransmitReceive+0x2c6>
 800466a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800466c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004670:	d102      	bne.n	8004678 <HAL_SPI_TransmitReceive+0x2cc>
 8004672:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004674:	2b00      	cmp	r3, #0
 8004676:	d103      	bne.n	8004680 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8004678:	2303      	movs	r3, #3
 800467a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800467e:	e029      	b.n	80046d4 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004684:	b29b      	uxth	r3, r3
 8004686:	2b00      	cmp	r3, #0
 8004688:	d1a2      	bne.n	80045d0 <HAL_SPI_TransmitReceive+0x224>
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800468e:	b29b      	uxth	r3, r3
 8004690:	2b00      	cmp	r3, #0
 8004692:	d19d      	bne.n	80045d0 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004694:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004696:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004698:	68f8      	ldr	r0, [r7, #12]
 800469a:	f000 f925 	bl	80048e8 <SPI_EndRxTxTransaction>
 800469e:	4603      	mov	r3, r0
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d006      	beq.n	80046b2 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80046a4:	2301      	movs	r3, #1
 80046a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	2220      	movs	r2, #32
 80046ae:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80046b0:	e010      	b.n	80046d4 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	689b      	ldr	r3, [r3, #8]
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d10b      	bne.n	80046d2 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80046ba:	2300      	movs	r3, #0
 80046bc:	617b      	str	r3, [r7, #20]
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	68db      	ldr	r3, [r3, #12]
 80046c4:	617b      	str	r3, [r7, #20]
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	689b      	ldr	r3, [r3, #8]
 80046cc:	617b      	str	r3, [r7, #20]
 80046ce:	697b      	ldr	r3, [r7, #20]
 80046d0:	e000      	b.n	80046d4 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80046d2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	2201      	movs	r2, #1
 80046d8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	2200      	movs	r2, #0
 80046e0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80046e4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80046e8:	4618      	mov	r0, r3
 80046ea:	3730      	adds	r7, #48	; 0x30
 80046ec:	46bd      	mov	sp, r7
 80046ee:	bd80      	pop	{r7, pc}

080046f0 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 80046f0:	b480      	push	{r7}
 80046f2:	b083      	sub	sp, #12
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80046fe:	b2db      	uxtb	r3, r3
}
 8004700:	4618      	mov	r0, r3
 8004702:	370c      	adds	r7, #12
 8004704:	46bd      	mov	sp, r7
 8004706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800470a:	4770      	bx	lr

0800470c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800470c:	b580      	push	{r7, lr}
 800470e:	b088      	sub	sp, #32
 8004710:	af00      	add	r7, sp, #0
 8004712:	60f8      	str	r0, [r7, #12]
 8004714:	60b9      	str	r1, [r7, #8]
 8004716:	603b      	str	r3, [r7, #0]
 8004718:	4613      	mov	r3, r2
 800471a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800471c:	f7fd f8f8 	bl	8001910 <HAL_GetTick>
 8004720:	4602      	mov	r2, r0
 8004722:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004724:	1a9b      	subs	r3, r3, r2
 8004726:	683a      	ldr	r2, [r7, #0]
 8004728:	4413      	add	r3, r2
 800472a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800472c:	f7fd f8f0 	bl	8001910 <HAL_GetTick>
 8004730:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004732:	4b39      	ldr	r3, [pc, #228]	; (8004818 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	015b      	lsls	r3, r3, #5
 8004738:	0d1b      	lsrs	r3, r3, #20
 800473a:	69fa      	ldr	r2, [r7, #28]
 800473c:	fb02 f303 	mul.w	r3, r2, r3
 8004740:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004742:	e054      	b.n	80047ee <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004744:	683b      	ldr	r3, [r7, #0]
 8004746:	f1b3 3fff 	cmp.w	r3, #4294967295
 800474a:	d050      	beq.n	80047ee <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800474c:	f7fd f8e0 	bl	8001910 <HAL_GetTick>
 8004750:	4602      	mov	r2, r0
 8004752:	69bb      	ldr	r3, [r7, #24]
 8004754:	1ad3      	subs	r3, r2, r3
 8004756:	69fa      	ldr	r2, [r7, #28]
 8004758:	429a      	cmp	r2, r3
 800475a:	d902      	bls.n	8004762 <SPI_WaitFlagStateUntilTimeout+0x56>
 800475c:	69fb      	ldr	r3, [r7, #28]
 800475e:	2b00      	cmp	r3, #0
 8004760:	d13d      	bne.n	80047de <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	685a      	ldr	r2, [r3, #4]
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004770:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	685b      	ldr	r3, [r3, #4]
 8004776:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800477a:	d111      	bne.n	80047a0 <SPI_WaitFlagStateUntilTimeout+0x94>
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	689b      	ldr	r3, [r3, #8]
 8004780:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004784:	d004      	beq.n	8004790 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	689b      	ldr	r3, [r3, #8]
 800478a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800478e:	d107      	bne.n	80047a0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	681a      	ldr	r2, [r3, #0]
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800479e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047a4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80047a8:	d10f      	bne.n	80047ca <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	681a      	ldr	r2, [r3, #0]
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80047b8:	601a      	str	r2, [r3, #0]
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	681a      	ldr	r2, [r3, #0]
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80047c8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	2201      	movs	r2, #1
 80047ce:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	2200      	movs	r2, #0
 80047d6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80047da:	2303      	movs	r3, #3
 80047dc:	e017      	b.n	800480e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80047de:	697b      	ldr	r3, [r7, #20]
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d101      	bne.n	80047e8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80047e4:	2300      	movs	r3, #0
 80047e6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80047e8:	697b      	ldr	r3, [r7, #20]
 80047ea:	3b01      	subs	r3, #1
 80047ec:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	689a      	ldr	r2, [r3, #8]
 80047f4:	68bb      	ldr	r3, [r7, #8]
 80047f6:	4013      	ands	r3, r2
 80047f8:	68ba      	ldr	r2, [r7, #8]
 80047fa:	429a      	cmp	r2, r3
 80047fc:	bf0c      	ite	eq
 80047fe:	2301      	moveq	r3, #1
 8004800:	2300      	movne	r3, #0
 8004802:	b2db      	uxtb	r3, r3
 8004804:	461a      	mov	r2, r3
 8004806:	79fb      	ldrb	r3, [r7, #7]
 8004808:	429a      	cmp	r2, r3
 800480a:	d19b      	bne.n	8004744 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800480c:	2300      	movs	r3, #0
}
 800480e:	4618      	mov	r0, r3
 8004810:	3720      	adds	r7, #32
 8004812:	46bd      	mov	sp, r7
 8004814:	bd80      	pop	{r7, pc}
 8004816:	bf00      	nop
 8004818:	20000010 	.word	0x20000010

0800481c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800481c:	b580      	push	{r7, lr}
 800481e:	b086      	sub	sp, #24
 8004820:	af02      	add	r7, sp, #8
 8004822:	60f8      	str	r0, [r7, #12]
 8004824:	60b9      	str	r1, [r7, #8]
 8004826:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	685b      	ldr	r3, [r3, #4]
 800482c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004830:	d111      	bne.n	8004856 <SPI_EndRxTransaction+0x3a>
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	689b      	ldr	r3, [r3, #8]
 8004836:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800483a:	d004      	beq.n	8004846 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	689b      	ldr	r3, [r3, #8]
 8004840:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004844:	d107      	bne.n	8004856 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	681a      	ldr	r2, [r3, #0]
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004854:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	685b      	ldr	r3, [r3, #4]
 800485a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800485e:	d12a      	bne.n	80048b6 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	689b      	ldr	r3, [r3, #8]
 8004864:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004868:	d012      	beq.n	8004890 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	9300      	str	r3, [sp, #0]
 800486e:	68bb      	ldr	r3, [r7, #8]
 8004870:	2200      	movs	r2, #0
 8004872:	2180      	movs	r1, #128	; 0x80
 8004874:	68f8      	ldr	r0, [r7, #12]
 8004876:	f7ff ff49 	bl	800470c <SPI_WaitFlagStateUntilTimeout>
 800487a:	4603      	mov	r3, r0
 800487c:	2b00      	cmp	r3, #0
 800487e:	d02d      	beq.n	80048dc <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004884:	f043 0220 	orr.w	r2, r3, #32
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800488c:	2303      	movs	r3, #3
 800488e:	e026      	b.n	80048de <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	9300      	str	r3, [sp, #0]
 8004894:	68bb      	ldr	r3, [r7, #8]
 8004896:	2200      	movs	r2, #0
 8004898:	2101      	movs	r1, #1
 800489a:	68f8      	ldr	r0, [r7, #12]
 800489c:	f7ff ff36 	bl	800470c <SPI_WaitFlagStateUntilTimeout>
 80048a0:	4603      	mov	r3, r0
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d01a      	beq.n	80048dc <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048aa:	f043 0220 	orr.w	r2, r3, #32
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80048b2:	2303      	movs	r3, #3
 80048b4:	e013      	b.n	80048de <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	9300      	str	r3, [sp, #0]
 80048ba:	68bb      	ldr	r3, [r7, #8]
 80048bc:	2200      	movs	r2, #0
 80048be:	2101      	movs	r1, #1
 80048c0:	68f8      	ldr	r0, [r7, #12]
 80048c2:	f7ff ff23 	bl	800470c <SPI_WaitFlagStateUntilTimeout>
 80048c6:	4603      	mov	r3, r0
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d007      	beq.n	80048dc <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048d0:	f043 0220 	orr.w	r2, r3, #32
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80048d8:	2303      	movs	r3, #3
 80048da:	e000      	b.n	80048de <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80048dc:	2300      	movs	r3, #0
}
 80048de:	4618      	mov	r0, r3
 80048e0:	3710      	adds	r7, #16
 80048e2:	46bd      	mov	sp, r7
 80048e4:	bd80      	pop	{r7, pc}
	...

080048e8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80048e8:	b580      	push	{r7, lr}
 80048ea:	b088      	sub	sp, #32
 80048ec:	af02      	add	r7, sp, #8
 80048ee:	60f8      	str	r0, [r7, #12]
 80048f0:	60b9      	str	r1, [r7, #8]
 80048f2:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80048f4:	4b1b      	ldr	r3, [pc, #108]	; (8004964 <SPI_EndRxTxTransaction+0x7c>)
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	4a1b      	ldr	r2, [pc, #108]	; (8004968 <SPI_EndRxTxTransaction+0x80>)
 80048fa:	fba2 2303 	umull	r2, r3, r2, r3
 80048fe:	0d5b      	lsrs	r3, r3, #21
 8004900:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004904:	fb02 f303 	mul.w	r3, r2, r3
 8004908:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	685b      	ldr	r3, [r3, #4]
 800490e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004912:	d112      	bne.n	800493a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	9300      	str	r3, [sp, #0]
 8004918:	68bb      	ldr	r3, [r7, #8]
 800491a:	2200      	movs	r2, #0
 800491c:	2180      	movs	r1, #128	; 0x80
 800491e:	68f8      	ldr	r0, [r7, #12]
 8004920:	f7ff fef4 	bl	800470c <SPI_WaitFlagStateUntilTimeout>
 8004924:	4603      	mov	r3, r0
 8004926:	2b00      	cmp	r3, #0
 8004928:	d016      	beq.n	8004958 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800492e:	f043 0220 	orr.w	r2, r3, #32
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004936:	2303      	movs	r3, #3
 8004938:	e00f      	b.n	800495a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800493a:	697b      	ldr	r3, [r7, #20]
 800493c:	2b00      	cmp	r3, #0
 800493e:	d00a      	beq.n	8004956 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8004940:	697b      	ldr	r3, [r7, #20]
 8004942:	3b01      	subs	r3, #1
 8004944:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	689b      	ldr	r3, [r3, #8]
 800494c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004950:	2b80      	cmp	r3, #128	; 0x80
 8004952:	d0f2      	beq.n	800493a <SPI_EndRxTxTransaction+0x52>
 8004954:	e000      	b.n	8004958 <SPI_EndRxTxTransaction+0x70>
        break;
 8004956:	bf00      	nop
  }

  return HAL_OK;
 8004958:	2300      	movs	r3, #0
}
 800495a:	4618      	mov	r0, r3
 800495c:	3718      	adds	r7, #24
 800495e:	46bd      	mov	sp, r7
 8004960:	bd80      	pop	{r7, pc}
 8004962:	bf00      	nop
 8004964:	20000010 	.word	0x20000010
 8004968:	165e9f81 	.word	0x165e9f81

0800496c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800496c:	b580      	push	{r7, lr}
 800496e:	b082      	sub	sp, #8
 8004970:	af00      	add	r7, sp, #0
 8004972:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	2b00      	cmp	r3, #0
 8004978:	d101      	bne.n	800497e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800497a:	2301      	movs	r3, #1
 800497c:	e03f      	b.n	80049fe <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004984:	b2db      	uxtb	r3, r3
 8004986:	2b00      	cmp	r3, #0
 8004988:	d106      	bne.n	8004998 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	2200      	movs	r2, #0
 800498e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004992:	6878      	ldr	r0, [r7, #4]
 8004994:	f7fc fdf4 	bl	8001580 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	2224      	movs	r2, #36	; 0x24
 800499c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	68da      	ldr	r2, [r3, #12]
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80049ae:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80049b0:	6878      	ldr	r0, [r7, #4]
 80049b2:	f000 fe81 	bl	80056b8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	691a      	ldr	r2, [r3, #16]
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80049c4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	695a      	ldr	r2, [r3, #20]
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80049d4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	68da      	ldr	r2, [r3, #12]
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80049e4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	2200      	movs	r2, #0
 80049ea:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	2220      	movs	r2, #32
 80049f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	2220      	movs	r2, #32
 80049f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80049fc:	2300      	movs	r3, #0
}
 80049fe:	4618      	mov	r0, r3
 8004a00:	3708      	adds	r7, #8
 8004a02:	46bd      	mov	sp, r7
 8004a04:	bd80      	pop	{r7, pc}

08004a06 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004a06:	b580      	push	{r7, lr}
 8004a08:	b08a      	sub	sp, #40	; 0x28
 8004a0a:	af02      	add	r7, sp, #8
 8004a0c:	60f8      	str	r0, [r7, #12]
 8004a0e:	60b9      	str	r1, [r7, #8]
 8004a10:	603b      	str	r3, [r7, #0]
 8004a12:	4613      	mov	r3, r2
 8004a14:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004a16:	2300      	movs	r3, #0
 8004a18:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a20:	b2db      	uxtb	r3, r3
 8004a22:	2b20      	cmp	r3, #32
 8004a24:	d17c      	bne.n	8004b20 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004a26:	68bb      	ldr	r3, [r7, #8]
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d002      	beq.n	8004a32 <HAL_UART_Transmit+0x2c>
 8004a2c:	88fb      	ldrh	r3, [r7, #6]
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d101      	bne.n	8004a36 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004a32:	2301      	movs	r3, #1
 8004a34:	e075      	b.n	8004b22 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a3c:	2b01      	cmp	r3, #1
 8004a3e:	d101      	bne.n	8004a44 <HAL_UART_Transmit+0x3e>
 8004a40:	2302      	movs	r3, #2
 8004a42:	e06e      	b.n	8004b22 <HAL_UART_Transmit+0x11c>
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	2201      	movs	r2, #1
 8004a48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	2200      	movs	r2, #0
 8004a50:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	2221      	movs	r2, #33	; 0x21
 8004a56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004a5a:	f7fc ff59 	bl	8001910 <HAL_GetTick>
 8004a5e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	88fa      	ldrh	r2, [r7, #6]
 8004a64:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	88fa      	ldrh	r2, [r7, #6]
 8004a6a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	689b      	ldr	r3, [r3, #8]
 8004a70:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a74:	d108      	bne.n	8004a88 <HAL_UART_Transmit+0x82>
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	691b      	ldr	r3, [r3, #16]
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d104      	bne.n	8004a88 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004a7e:	2300      	movs	r3, #0
 8004a80:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004a82:	68bb      	ldr	r3, [r7, #8]
 8004a84:	61bb      	str	r3, [r7, #24]
 8004a86:	e003      	b.n	8004a90 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004a88:	68bb      	ldr	r3, [r7, #8]
 8004a8a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004a8c:	2300      	movs	r3, #0
 8004a8e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	2200      	movs	r2, #0
 8004a94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004a98:	e02a      	b.n	8004af0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004a9a:	683b      	ldr	r3, [r7, #0]
 8004a9c:	9300      	str	r3, [sp, #0]
 8004a9e:	697b      	ldr	r3, [r7, #20]
 8004aa0:	2200      	movs	r2, #0
 8004aa2:	2180      	movs	r1, #128	; 0x80
 8004aa4:	68f8      	ldr	r0, [r7, #12]
 8004aa6:	f000 fbc1 	bl	800522c <UART_WaitOnFlagUntilTimeout>
 8004aaa:	4603      	mov	r3, r0
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d001      	beq.n	8004ab4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004ab0:	2303      	movs	r3, #3
 8004ab2:	e036      	b.n	8004b22 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004ab4:	69fb      	ldr	r3, [r7, #28]
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d10b      	bne.n	8004ad2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004aba:	69bb      	ldr	r3, [r7, #24]
 8004abc:	881b      	ldrh	r3, [r3, #0]
 8004abe:	461a      	mov	r2, r3
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004ac8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004aca:	69bb      	ldr	r3, [r7, #24]
 8004acc:	3302      	adds	r3, #2
 8004ace:	61bb      	str	r3, [r7, #24]
 8004ad0:	e007      	b.n	8004ae2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004ad2:	69fb      	ldr	r3, [r7, #28]
 8004ad4:	781a      	ldrb	r2, [r3, #0]
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004adc:	69fb      	ldr	r3, [r7, #28]
 8004ade:	3301      	adds	r3, #1
 8004ae0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004ae6:	b29b      	uxth	r3, r3
 8004ae8:	3b01      	subs	r3, #1
 8004aea:	b29a      	uxth	r2, r3
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004af4:	b29b      	uxth	r3, r3
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d1cf      	bne.n	8004a9a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004afa:	683b      	ldr	r3, [r7, #0]
 8004afc:	9300      	str	r3, [sp, #0]
 8004afe:	697b      	ldr	r3, [r7, #20]
 8004b00:	2200      	movs	r2, #0
 8004b02:	2140      	movs	r1, #64	; 0x40
 8004b04:	68f8      	ldr	r0, [r7, #12]
 8004b06:	f000 fb91 	bl	800522c <UART_WaitOnFlagUntilTimeout>
 8004b0a:	4603      	mov	r3, r0
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d001      	beq.n	8004b14 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004b10:	2303      	movs	r3, #3
 8004b12:	e006      	b.n	8004b22 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	2220      	movs	r2, #32
 8004b18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004b1c:	2300      	movs	r3, #0
 8004b1e:	e000      	b.n	8004b22 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004b20:	2302      	movs	r3, #2
  }
}
 8004b22:	4618      	mov	r0, r3
 8004b24:	3720      	adds	r7, #32
 8004b26:	46bd      	mov	sp, r7
 8004b28:	bd80      	pop	{r7, pc}

08004b2a <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004b2a:	b580      	push	{r7, lr}
 8004b2c:	b08a      	sub	sp, #40	; 0x28
 8004b2e:	af02      	add	r7, sp, #8
 8004b30:	60f8      	str	r0, [r7, #12]
 8004b32:	60b9      	str	r1, [r7, #8]
 8004b34:	603b      	str	r3, [r7, #0]
 8004b36:	4613      	mov	r3, r2
 8004b38:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004b3a:	2300      	movs	r3, #0
 8004b3c:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004b44:	b2db      	uxtb	r3, r3
 8004b46:	2b20      	cmp	r3, #32
 8004b48:	f040 808c 	bne.w	8004c64 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004b4c:	68bb      	ldr	r3, [r7, #8]
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d002      	beq.n	8004b58 <HAL_UART_Receive+0x2e>
 8004b52:	88fb      	ldrh	r3, [r7, #6]
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d101      	bne.n	8004b5c <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8004b58:	2301      	movs	r3, #1
 8004b5a:	e084      	b.n	8004c66 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b62:	2b01      	cmp	r3, #1
 8004b64:	d101      	bne.n	8004b6a <HAL_UART_Receive+0x40>
 8004b66:	2302      	movs	r3, #2
 8004b68:	e07d      	b.n	8004c66 <HAL_UART_Receive+0x13c>
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	2201      	movs	r2, #1
 8004b6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	2200      	movs	r2, #0
 8004b76:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	2222      	movs	r2, #34	; 0x22
 8004b7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	2200      	movs	r2, #0
 8004b84:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004b86:	f7fc fec3 	bl	8001910 <HAL_GetTick>
 8004b8a:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	88fa      	ldrh	r2, [r7, #6]
 8004b90:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	88fa      	ldrh	r2, [r7, #6]
 8004b96:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	689b      	ldr	r3, [r3, #8]
 8004b9c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ba0:	d108      	bne.n	8004bb4 <HAL_UART_Receive+0x8a>
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	691b      	ldr	r3, [r3, #16]
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d104      	bne.n	8004bb4 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8004baa:	2300      	movs	r3, #0
 8004bac:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004bae:	68bb      	ldr	r3, [r7, #8]
 8004bb0:	61bb      	str	r3, [r7, #24]
 8004bb2:	e003      	b.n	8004bbc <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8004bb4:	68bb      	ldr	r3, [r7, #8]
 8004bb6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004bb8:	2300      	movs	r3, #0
 8004bba:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	2200      	movs	r2, #0
 8004bc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8004bc4:	e043      	b.n	8004c4e <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8004bc6:	683b      	ldr	r3, [r7, #0]
 8004bc8:	9300      	str	r3, [sp, #0]
 8004bca:	697b      	ldr	r3, [r7, #20]
 8004bcc:	2200      	movs	r2, #0
 8004bce:	2120      	movs	r1, #32
 8004bd0:	68f8      	ldr	r0, [r7, #12]
 8004bd2:	f000 fb2b 	bl	800522c <UART_WaitOnFlagUntilTimeout>
 8004bd6:	4603      	mov	r3, r0
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d001      	beq.n	8004be0 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8004bdc:	2303      	movs	r3, #3
 8004bde:	e042      	b.n	8004c66 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8004be0:	69fb      	ldr	r3, [r7, #28]
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d10c      	bne.n	8004c00 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	685b      	ldr	r3, [r3, #4]
 8004bec:	b29b      	uxth	r3, r3
 8004bee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004bf2:	b29a      	uxth	r2, r3
 8004bf4:	69bb      	ldr	r3, [r7, #24]
 8004bf6:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8004bf8:	69bb      	ldr	r3, [r7, #24]
 8004bfa:	3302      	adds	r3, #2
 8004bfc:	61bb      	str	r3, [r7, #24]
 8004bfe:	e01f      	b.n	8004c40 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	689b      	ldr	r3, [r3, #8]
 8004c04:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c08:	d007      	beq.n	8004c1a <HAL_UART_Receive+0xf0>
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	689b      	ldr	r3, [r3, #8]
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d10a      	bne.n	8004c28 <HAL_UART_Receive+0xfe>
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	691b      	ldr	r3, [r3, #16]
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d106      	bne.n	8004c28 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	685b      	ldr	r3, [r3, #4]
 8004c20:	b2da      	uxtb	r2, r3
 8004c22:	69fb      	ldr	r3, [r7, #28]
 8004c24:	701a      	strb	r2, [r3, #0]
 8004c26:	e008      	b.n	8004c3a <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	685b      	ldr	r3, [r3, #4]
 8004c2e:	b2db      	uxtb	r3, r3
 8004c30:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004c34:	b2da      	uxtb	r2, r3
 8004c36:	69fb      	ldr	r3, [r7, #28]
 8004c38:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8004c3a:	69fb      	ldr	r3, [r7, #28]
 8004c3c:	3301      	adds	r3, #1
 8004c3e:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004c44:	b29b      	uxth	r3, r3
 8004c46:	3b01      	subs	r3, #1
 8004c48:	b29a      	uxth	r2, r3
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004c52:	b29b      	uxth	r3, r3
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d1b6      	bne.n	8004bc6 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	2220      	movs	r2, #32
 8004c5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8004c60:	2300      	movs	r3, #0
 8004c62:	e000      	b.n	8004c66 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8004c64:	2302      	movs	r3, #2
  }
}
 8004c66:	4618      	mov	r0, r3
 8004c68:	3720      	adds	r7, #32
 8004c6a:	46bd      	mov	sp, r7
 8004c6c:	bd80      	pop	{r7, pc}

08004c6e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004c6e:	b580      	push	{r7, lr}
 8004c70:	b084      	sub	sp, #16
 8004c72:	af00      	add	r7, sp, #0
 8004c74:	60f8      	str	r0, [r7, #12]
 8004c76:	60b9      	str	r1, [r7, #8]
 8004c78:	4613      	mov	r3, r2
 8004c7a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004c82:	b2db      	uxtb	r3, r3
 8004c84:	2b20      	cmp	r3, #32
 8004c86:	d11d      	bne.n	8004cc4 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8004c88:	68bb      	ldr	r3, [r7, #8]
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d002      	beq.n	8004c94 <HAL_UART_Receive_IT+0x26>
 8004c8e:	88fb      	ldrh	r3, [r7, #6]
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d101      	bne.n	8004c98 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004c94:	2301      	movs	r3, #1
 8004c96:	e016      	b.n	8004cc6 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c9e:	2b01      	cmp	r3, #1
 8004ca0:	d101      	bne.n	8004ca6 <HAL_UART_Receive_IT+0x38>
 8004ca2:	2302      	movs	r3, #2
 8004ca4:	e00f      	b.n	8004cc6 <HAL_UART_Receive_IT+0x58>
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	2201      	movs	r2, #1
 8004caa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	2200      	movs	r2, #0
 8004cb2:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004cb4:	88fb      	ldrh	r3, [r7, #6]
 8004cb6:	461a      	mov	r2, r3
 8004cb8:	68b9      	ldr	r1, [r7, #8]
 8004cba:	68f8      	ldr	r0, [r7, #12]
 8004cbc:	f000 fb24 	bl	8005308 <UART_Start_Receive_IT>
 8004cc0:	4603      	mov	r3, r0
 8004cc2:	e000      	b.n	8004cc6 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8004cc4:	2302      	movs	r3, #2
  }
}
 8004cc6:	4618      	mov	r0, r3
 8004cc8:	3710      	adds	r7, #16
 8004cca:	46bd      	mov	sp, r7
 8004ccc:	bd80      	pop	{r7, pc}
	...

08004cd0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004cd0:	b580      	push	{r7, lr}
 8004cd2:	b0ba      	sub	sp, #232	; 0xe8
 8004cd4:	af00      	add	r7, sp, #0
 8004cd6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	68db      	ldr	r3, [r3, #12]
 8004ce8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	695b      	ldr	r3, [r3, #20]
 8004cf2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8004cf6:	2300      	movs	r3, #0
 8004cf8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8004cfc:	2300      	movs	r3, #0
 8004cfe:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004d02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d06:	f003 030f 	and.w	r3, r3, #15
 8004d0a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8004d0e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d10f      	bne.n	8004d36 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004d16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d1a:	f003 0320 	and.w	r3, r3, #32
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d009      	beq.n	8004d36 <HAL_UART_IRQHandler+0x66>
 8004d22:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004d26:	f003 0320 	and.w	r3, r3, #32
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d003      	beq.n	8004d36 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004d2e:	6878      	ldr	r0, [r7, #4]
 8004d30:	f000 fc07 	bl	8005542 <UART_Receive_IT>
      return;
 8004d34:	e256      	b.n	80051e4 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004d36:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	f000 80de 	beq.w	8004efc <HAL_UART_IRQHandler+0x22c>
 8004d40:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004d44:	f003 0301 	and.w	r3, r3, #1
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d106      	bne.n	8004d5a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004d4c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004d50:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	f000 80d1 	beq.w	8004efc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004d5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d5e:	f003 0301 	and.w	r3, r3, #1
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d00b      	beq.n	8004d7e <HAL_UART_IRQHandler+0xae>
 8004d66:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004d6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d005      	beq.n	8004d7e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d76:	f043 0201 	orr.w	r2, r3, #1
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004d7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d82:	f003 0304 	and.w	r3, r3, #4
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d00b      	beq.n	8004da2 <HAL_UART_IRQHandler+0xd2>
 8004d8a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004d8e:	f003 0301 	and.w	r3, r3, #1
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d005      	beq.n	8004da2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d9a:	f043 0202 	orr.w	r2, r3, #2
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004da2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004da6:	f003 0302 	and.w	r3, r3, #2
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d00b      	beq.n	8004dc6 <HAL_UART_IRQHandler+0xf6>
 8004dae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004db2:	f003 0301 	and.w	r3, r3, #1
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d005      	beq.n	8004dc6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dbe:	f043 0204 	orr.w	r2, r3, #4
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004dc6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004dca:	f003 0308 	and.w	r3, r3, #8
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d011      	beq.n	8004df6 <HAL_UART_IRQHandler+0x126>
 8004dd2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004dd6:	f003 0320 	and.w	r3, r3, #32
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d105      	bne.n	8004dea <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004dde:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004de2:	f003 0301 	and.w	r3, r3, #1
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d005      	beq.n	8004df6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dee:	f043 0208 	orr.w	r2, r3, #8
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	f000 81ed 	beq.w	80051da <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004e00:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004e04:	f003 0320 	and.w	r3, r3, #32
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d008      	beq.n	8004e1e <HAL_UART_IRQHandler+0x14e>
 8004e0c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004e10:	f003 0320 	and.w	r3, r3, #32
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d002      	beq.n	8004e1e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004e18:	6878      	ldr	r0, [r7, #4]
 8004e1a:	f000 fb92 	bl	8005542 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	695b      	ldr	r3, [r3, #20]
 8004e24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e28:	2b40      	cmp	r3, #64	; 0x40
 8004e2a:	bf0c      	ite	eq
 8004e2c:	2301      	moveq	r3, #1
 8004e2e:	2300      	movne	r3, #0
 8004e30:	b2db      	uxtb	r3, r3
 8004e32:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e3a:	f003 0308 	and.w	r3, r3, #8
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d103      	bne.n	8004e4a <HAL_UART_IRQHandler+0x17a>
 8004e42:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d04f      	beq.n	8004eea <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004e4a:	6878      	ldr	r0, [r7, #4]
 8004e4c:	f000 fa9a 	bl	8005384 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	695b      	ldr	r3, [r3, #20]
 8004e56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e5a:	2b40      	cmp	r3, #64	; 0x40
 8004e5c:	d141      	bne.n	8004ee2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	3314      	adds	r3, #20
 8004e64:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e68:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004e6c:	e853 3f00 	ldrex	r3, [r3]
 8004e70:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004e74:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004e78:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004e7c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	3314      	adds	r3, #20
 8004e86:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004e8a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004e8e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e92:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004e96:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004e9a:	e841 2300 	strex	r3, r2, [r1]
 8004e9e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004ea2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d1d9      	bne.n	8004e5e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d013      	beq.n	8004eda <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004eb6:	4a7d      	ldr	r2, [pc, #500]	; (80050ac <HAL_UART_IRQHandler+0x3dc>)
 8004eb8:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ebe:	4618      	mov	r0, r3
 8004ec0:	f7fc fed7 	bl	8001c72 <HAL_DMA_Abort_IT>
 8004ec4:	4603      	mov	r3, r0
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d016      	beq.n	8004ef8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ece:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ed0:	687a      	ldr	r2, [r7, #4]
 8004ed2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004ed4:	4610      	mov	r0, r2
 8004ed6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ed8:	e00e      	b.n	8004ef8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004eda:	6878      	ldr	r0, [r7, #4]
 8004edc:	f000 f990 	bl	8005200 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ee0:	e00a      	b.n	8004ef8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004ee2:	6878      	ldr	r0, [r7, #4]
 8004ee4:	f000 f98c 	bl	8005200 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ee8:	e006      	b.n	8004ef8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004eea:	6878      	ldr	r0, [r7, #4]
 8004eec:	f000 f988 	bl	8005200 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	2200      	movs	r2, #0
 8004ef4:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8004ef6:	e170      	b.n	80051da <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ef8:	bf00      	nop
    return;
 8004efa:	e16e      	b.n	80051da <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f00:	2b01      	cmp	r3, #1
 8004f02:	f040 814a 	bne.w	800519a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004f06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f0a:	f003 0310 	and.w	r3, r3, #16
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	f000 8143 	beq.w	800519a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004f14:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004f18:	f003 0310 	and.w	r3, r3, #16
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	f000 813c 	beq.w	800519a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004f22:	2300      	movs	r3, #0
 8004f24:	60bb      	str	r3, [r7, #8]
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	60bb      	str	r3, [r7, #8]
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	685b      	ldr	r3, [r3, #4]
 8004f34:	60bb      	str	r3, [r7, #8]
 8004f36:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	695b      	ldr	r3, [r3, #20]
 8004f3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f42:	2b40      	cmp	r3, #64	; 0x40
 8004f44:	f040 80b4 	bne.w	80050b0 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	685b      	ldr	r3, [r3, #4]
 8004f50:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004f54:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	f000 8140 	beq.w	80051de <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004f62:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004f66:	429a      	cmp	r2, r3
 8004f68:	f080 8139 	bcs.w	80051de <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004f72:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f78:	69db      	ldr	r3, [r3, #28]
 8004f7a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004f7e:	f000 8088 	beq.w	8005092 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	330c      	adds	r3, #12
 8004f88:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f8c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004f90:	e853 3f00 	ldrex	r3, [r3]
 8004f94:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004f98:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004f9c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004fa0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	330c      	adds	r3, #12
 8004faa:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8004fae:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004fb2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fb6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004fba:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004fbe:	e841 2300 	strex	r3, r2, [r1]
 8004fc2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004fc6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d1d9      	bne.n	8004f82 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	3314      	adds	r3, #20
 8004fd4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fd6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004fd8:	e853 3f00 	ldrex	r3, [r3]
 8004fdc:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004fde:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004fe0:	f023 0301 	bic.w	r3, r3, #1
 8004fe4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	3314      	adds	r3, #20
 8004fee:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004ff2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004ff6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ff8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004ffa:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004ffe:	e841 2300 	strex	r3, r2, [r1]
 8005002:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005004:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005006:	2b00      	cmp	r3, #0
 8005008:	d1e1      	bne.n	8004fce <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	3314      	adds	r3, #20
 8005010:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005012:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005014:	e853 3f00 	ldrex	r3, [r3]
 8005018:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800501a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800501c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005020:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	3314      	adds	r3, #20
 800502a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800502e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005030:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005032:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005034:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005036:	e841 2300 	strex	r3, r2, [r1]
 800503a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800503c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800503e:	2b00      	cmp	r3, #0
 8005040:	d1e3      	bne.n	800500a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	2220      	movs	r2, #32
 8005046:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	2200      	movs	r2, #0
 800504e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	330c      	adds	r3, #12
 8005056:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005058:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800505a:	e853 3f00 	ldrex	r3, [r3]
 800505e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005060:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005062:	f023 0310 	bic.w	r3, r3, #16
 8005066:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	330c      	adds	r3, #12
 8005070:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8005074:	65ba      	str	r2, [r7, #88]	; 0x58
 8005076:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005078:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800507a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800507c:	e841 2300 	strex	r3, r2, [r1]
 8005080:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005082:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005084:	2b00      	cmp	r3, #0
 8005086:	d1e3      	bne.n	8005050 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800508c:	4618      	mov	r0, r3
 800508e:	f7fc fd80 	bl	8001b92 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800509a:	b29b      	uxth	r3, r3
 800509c:	1ad3      	subs	r3, r2, r3
 800509e:	b29b      	uxth	r3, r3
 80050a0:	4619      	mov	r1, r3
 80050a2:	6878      	ldr	r0, [r7, #4]
 80050a4:	f000 f8b6 	bl	8005214 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80050a8:	e099      	b.n	80051de <HAL_UART_IRQHandler+0x50e>
 80050aa:	bf00      	nop
 80050ac:	0800544b 	.word	0x0800544b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80050b8:	b29b      	uxth	r3, r3
 80050ba:	1ad3      	subs	r3, r2, r3
 80050bc:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80050c4:	b29b      	uxth	r3, r3
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	f000 808b 	beq.w	80051e2 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80050cc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	f000 8086 	beq.w	80051e2 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	330c      	adds	r3, #12
 80050dc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050e0:	e853 3f00 	ldrex	r3, [r3]
 80050e4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80050e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050e8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80050ec:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	330c      	adds	r3, #12
 80050f6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80050fa:	647a      	str	r2, [r7, #68]	; 0x44
 80050fc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050fe:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005100:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005102:	e841 2300 	strex	r3, r2, [r1]
 8005106:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005108:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800510a:	2b00      	cmp	r3, #0
 800510c:	d1e3      	bne.n	80050d6 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	3314      	adds	r3, #20
 8005114:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005116:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005118:	e853 3f00 	ldrex	r3, [r3]
 800511c:	623b      	str	r3, [r7, #32]
   return(result);
 800511e:	6a3b      	ldr	r3, [r7, #32]
 8005120:	f023 0301 	bic.w	r3, r3, #1
 8005124:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	3314      	adds	r3, #20
 800512e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005132:	633a      	str	r2, [r7, #48]	; 0x30
 8005134:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005136:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005138:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800513a:	e841 2300 	strex	r3, r2, [r1]
 800513e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005140:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005142:	2b00      	cmp	r3, #0
 8005144:	d1e3      	bne.n	800510e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	2220      	movs	r2, #32
 800514a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	2200      	movs	r2, #0
 8005152:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	330c      	adds	r3, #12
 800515a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800515c:	693b      	ldr	r3, [r7, #16]
 800515e:	e853 3f00 	ldrex	r3, [r3]
 8005162:	60fb      	str	r3, [r7, #12]
   return(result);
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	f023 0310 	bic.w	r3, r3, #16
 800516a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	330c      	adds	r3, #12
 8005174:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8005178:	61fa      	str	r2, [r7, #28]
 800517a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800517c:	69b9      	ldr	r1, [r7, #24]
 800517e:	69fa      	ldr	r2, [r7, #28]
 8005180:	e841 2300 	strex	r3, r2, [r1]
 8005184:	617b      	str	r3, [r7, #20]
   return(result);
 8005186:	697b      	ldr	r3, [r7, #20]
 8005188:	2b00      	cmp	r3, #0
 800518a:	d1e3      	bne.n	8005154 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800518c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005190:	4619      	mov	r1, r3
 8005192:	6878      	ldr	r0, [r7, #4]
 8005194:	f000 f83e 	bl	8005214 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005198:	e023      	b.n	80051e2 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800519a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800519e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d009      	beq.n	80051ba <HAL_UART_IRQHandler+0x4ea>
 80051a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80051aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d003      	beq.n	80051ba <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80051b2:	6878      	ldr	r0, [r7, #4]
 80051b4:	f000 f95d 	bl	8005472 <UART_Transmit_IT>
    return;
 80051b8:	e014      	b.n	80051e4 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80051ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80051be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d00e      	beq.n	80051e4 <HAL_UART_IRQHandler+0x514>
 80051c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80051ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d008      	beq.n	80051e4 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80051d2:	6878      	ldr	r0, [r7, #4]
 80051d4:	f000 f99d 	bl	8005512 <UART_EndTransmit_IT>
    return;
 80051d8:	e004      	b.n	80051e4 <HAL_UART_IRQHandler+0x514>
    return;
 80051da:	bf00      	nop
 80051dc:	e002      	b.n	80051e4 <HAL_UART_IRQHandler+0x514>
      return;
 80051de:	bf00      	nop
 80051e0:	e000      	b.n	80051e4 <HAL_UART_IRQHandler+0x514>
      return;
 80051e2:	bf00      	nop
  }
}
 80051e4:	37e8      	adds	r7, #232	; 0xe8
 80051e6:	46bd      	mov	sp, r7
 80051e8:	bd80      	pop	{r7, pc}
 80051ea:	bf00      	nop

080051ec <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80051ec:	b480      	push	{r7}
 80051ee:	b083      	sub	sp, #12
 80051f0:	af00      	add	r7, sp, #0
 80051f2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80051f4:	bf00      	nop
 80051f6:	370c      	adds	r7, #12
 80051f8:	46bd      	mov	sp, r7
 80051fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051fe:	4770      	bx	lr

08005200 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005200:	b480      	push	{r7}
 8005202:	b083      	sub	sp, #12
 8005204:	af00      	add	r7, sp, #0
 8005206:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005208:	bf00      	nop
 800520a:	370c      	adds	r7, #12
 800520c:	46bd      	mov	sp, r7
 800520e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005212:	4770      	bx	lr

08005214 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005214:	b480      	push	{r7}
 8005216:	b083      	sub	sp, #12
 8005218:	af00      	add	r7, sp, #0
 800521a:	6078      	str	r0, [r7, #4]
 800521c:	460b      	mov	r3, r1
 800521e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005220:	bf00      	nop
 8005222:	370c      	adds	r7, #12
 8005224:	46bd      	mov	sp, r7
 8005226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800522a:	4770      	bx	lr

0800522c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800522c:	b580      	push	{r7, lr}
 800522e:	b090      	sub	sp, #64	; 0x40
 8005230:	af00      	add	r7, sp, #0
 8005232:	60f8      	str	r0, [r7, #12]
 8005234:	60b9      	str	r1, [r7, #8]
 8005236:	603b      	str	r3, [r7, #0]
 8005238:	4613      	mov	r3, r2
 800523a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800523c:	e050      	b.n	80052e0 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800523e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005240:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005244:	d04c      	beq.n	80052e0 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005246:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005248:	2b00      	cmp	r3, #0
 800524a:	d007      	beq.n	800525c <UART_WaitOnFlagUntilTimeout+0x30>
 800524c:	f7fc fb60 	bl	8001910 <HAL_GetTick>
 8005250:	4602      	mov	r2, r0
 8005252:	683b      	ldr	r3, [r7, #0]
 8005254:	1ad3      	subs	r3, r2, r3
 8005256:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005258:	429a      	cmp	r2, r3
 800525a:	d241      	bcs.n	80052e0 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	330c      	adds	r3, #12
 8005262:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005264:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005266:	e853 3f00 	ldrex	r3, [r3]
 800526a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800526c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800526e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005272:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	330c      	adds	r3, #12
 800527a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800527c:	637a      	str	r2, [r7, #52]	; 0x34
 800527e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005280:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005282:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005284:	e841 2300 	strex	r3, r2, [r1]
 8005288:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800528a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800528c:	2b00      	cmp	r3, #0
 800528e:	d1e5      	bne.n	800525c <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	3314      	adds	r3, #20
 8005296:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005298:	697b      	ldr	r3, [r7, #20]
 800529a:	e853 3f00 	ldrex	r3, [r3]
 800529e:	613b      	str	r3, [r7, #16]
   return(result);
 80052a0:	693b      	ldr	r3, [r7, #16]
 80052a2:	f023 0301 	bic.w	r3, r3, #1
 80052a6:	63bb      	str	r3, [r7, #56]	; 0x38
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	3314      	adds	r3, #20
 80052ae:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80052b0:	623a      	str	r2, [r7, #32]
 80052b2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052b4:	69f9      	ldr	r1, [r7, #28]
 80052b6:	6a3a      	ldr	r2, [r7, #32]
 80052b8:	e841 2300 	strex	r3, r2, [r1]
 80052bc:	61bb      	str	r3, [r7, #24]
   return(result);
 80052be:	69bb      	ldr	r3, [r7, #24]
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d1e5      	bne.n	8005290 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	2220      	movs	r2, #32
 80052c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	2220      	movs	r2, #32
 80052d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	2200      	movs	r2, #0
 80052d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80052dc:	2303      	movs	r3, #3
 80052de:	e00f      	b.n	8005300 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	681a      	ldr	r2, [r3, #0]
 80052e6:	68bb      	ldr	r3, [r7, #8]
 80052e8:	4013      	ands	r3, r2
 80052ea:	68ba      	ldr	r2, [r7, #8]
 80052ec:	429a      	cmp	r2, r3
 80052ee:	bf0c      	ite	eq
 80052f0:	2301      	moveq	r3, #1
 80052f2:	2300      	movne	r3, #0
 80052f4:	b2db      	uxtb	r3, r3
 80052f6:	461a      	mov	r2, r3
 80052f8:	79fb      	ldrb	r3, [r7, #7]
 80052fa:	429a      	cmp	r2, r3
 80052fc:	d09f      	beq.n	800523e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80052fe:	2300      	movs	r3, #0
}
 8005300:	4618      	mov	r0, r3
 8005302:	3740      	adds	r7, #64	; 0x40
 8005304:	46bd      	mov	sp, r7
 8005306:	bd80      	pop	{r7, pc}

08005308 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005308:	b480      	push	{r7}
 800530a:	b085      	sub	sp, #20
 800530c:	af00      	add	r7, sp, #0
 800530e:	60f8      	str	r0, [r7, #12]
 8005310:	60b9      	str	r1, [r7, #8]
 8005312:	4613      	mov	r3, r2
 8005314:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	68ba      	ldr	r2, [r7, #8]
 800531a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	88fa      	ldrh	r2, [r7, #6]
 8005320:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	88fa      	ldrh	r2, [r7, #6]
 8005326:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	2200      	movs	r2, #0
 800532c:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	2222      	movs	r2, #34	; 0x22
 8005332:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	2200      	movs	r2, #0
 800533a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	691b      	ldr	r3, [r3, #16]
 8005342:	2b00      	cmp	r3, #0
 8005344:	d007      	beq.n	8005356 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	68da      	ldr	r2, [r3, #12]
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005354:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	695a      	ldr	r2, [r3, #20]
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	f042 0201 	orr.w	r2, r2, #1
 8005364:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	68da      	ldr	r2, [r3, #12]
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	f042 0220 	orr.w	r2, r2, #32
 8005374:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005376:	2300      	movs	r3, #0
}
 8005378:	4618      	mov	r0, r3
 800537a:	3714      	adds	r7, #20
 800537c:	46bd      	mov	sp, r7
 800537e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005382:	4770      	bx	lr

08005384 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005384:	b480      	push	{r7}
 8005386:	b095      	sub	sp, #84	; 0x54
 8005388:	af00      	add	r7, sp, #0
 800538a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	330c      	adds	r3, #12
 8005392:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005394:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005396:	e853 3f00 	ldrex	r3, [r3]
 800539a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800539c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800539e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80053a2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	330c      	adds	r3, #12
 80053aa:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80053ac:	643a      	str	r2, [r7, #64]	; 0x40
 80053ae:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053b0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80053b2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80053b4:	e841 2300 	strex	r3, r2, [r1]
 80053b8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80053ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d1e5      	bne.n	800538c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	3314      	adds	r3, #20
 80053c6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053c8:	6a3b      	ldr	r3, [r7, #32]
 80053ca:	e853 3f00 	ldrex	r3, [r3]
 80053ce:	61fb      	str	r3, [r7, #28]
   return(result);
 80053d0:	69fb      	ldr	r3, [r7, #28]
 80053d2:	f023 0301 	bic.w	r3, r3, #1
 80053d6:	64bb      	str	r3, [r7, #72]	; 0x48
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	3314      	adds	r3, #20
 80053de:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80053e0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80053e2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053e4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80053e6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80053e8:	e841 2300 	strex	r3, r2, [r1]
 80053ec:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80053ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d1e5      	bne.n	80053c0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053f8:	2b01      	cmp	r3, #1
 80053fa:	d119      	bne.n	8005430 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	330c      	adds	r3, #12
 8005402:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	e853 3f00 	ldrex	r3, [r3]
 800540a:	60bb      	str	r3, [r7, #8]
   return(result);
 800540c:	68bb      	ldr	r3, [r7, #8]
 800540e:	f023 0310 	bic.w	r3, r3, #16
 8005412:	647b      	str	r3, [r7, #68]	; 0x44
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	330c      	adds	r3, #12
 800541a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800541c:	61ba      	str	r2, [r7, #24]
 800541e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005420:	6979      	ldr	r1, [r7, #20]
 8005422:	69ba      	ldr	r2, [r7, #24]
 8005424:	e841 2300 	strex	r3, r2, [r1]
 8005428:	613b      	str	r3, [r7, #16]
   return(result);
 800542a:	693b      	ldr	r3, [r7, #16]
 800542c:	2b00      	cmp	r3, #0
 800542e:	d1e5      	bne.n	80053fc <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	2220      	movs	r2, #32
 8005434:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	2200      	movs	r2, #0
 800543c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800543e:	bf00      	nop
 8005440:	3754      	adds	r7, #84	; 0x54
 8005442:	46bd      	mov	sp, r7
 8005444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005448:	4770      	bx	lr

0800544a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800544a:	b580      	push	{r7, lr}
 800544c:	b084      	sub	sp, #16
 800544e:	af00      	add	r7, sp, #0
 8005450:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005456:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	2200      	movs	r2, #0
 800545c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	2200      	movs	r2, #0
 8005462:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005464:	68f8      	ldr	r0, [r7, #12]
 8005466:	f7ff fecb 	bl	8005200 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800546a:	bf00      	nop
 800546c:	3710      	adds	r7, #16
 800546e:	46bd      	mov	sp, r7
 8005470:	bd80      	pop	{r7, pc}

08005472 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005472:	b480      	push	{r7}
 8005474:	b085      	sub	sp, #20
 8005476:	af00      	add	r7, sp, #0
 8005478:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005480:	b2db      	uxtb	r3, r3
 8005482:	2b21      	cmp	r3, #33	; 0x21
 8005484:	d13e      	bne.n	8005504 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	689b      	ldr	r3, [r3, #8]
 800548a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800548e:	d114      	bne.n	80054ba <UART_Transmit_IT+0x48>
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	691b      	ldr	r3, [r3, #16]
 8005494:	2b00      	cmp	r3, #0
 8005496:	d110      	bne.n	80054ba <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	6a1b      	ldr	r3, [r3, #32]
 800549c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	881b      	ldrh	r3, [r3, #0]
 80054a2:	461a      	mov	r2, r3
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80054ac:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	6a1b      	ldr	r3, [r3, #32]
 80054b2:	1c9a      	adds	r2, r3, #2
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	621a      	str	r2, [r3, #32]
 80054b8:	e008      	b.n	80054cc <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	6a1b      	ldr	r3, [r3, #32]
 80054be:	1c59      	adds	r1, r3, #1
 80054c0:	687a      	ldr	r2, [r7, #4]
 80054c2:	6211      	str	r1, [r2, #32]
 80054c4:	781a      	ldrb	r2, [r3, #0]
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80054d0:	b29b      	uxth	r3, r3
 80054d2:	3b01      	subs	r3, #1
 80054d4:	b29b      	uxth	r3, r3
 80054d6:	687a      	ldr	r2, [r7, #4]
 80054d8:	4619      	mov	r1, r3
 80054da:	84d1      	strh	r1, [r2, #38]	; 0x26
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d10f      	bne.n	8005500 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	68da      	ldr	r2, [r3, #12]
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80054ee:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	68da      	ldr	r2, [r3, #12]
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80054fe:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005500:	2300      	movs	r3, #0
 8005502:	e000      	b.n	8005506 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005504:	2302      	movs	r3, #2
  }
}
 8005506:	4618      	mov	r0, r3
 8005508:	3714      	adds	r7, #20
 800550a:	46bd      	mov	sp, r7
 800550c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005510:	4770      	bx	lr

08005512 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005512:	b580      	push	{r7, lr}
 8005514:	b082      	sub	sp, #8
 8005516:	af00      	add	r7, sp, #0
 8005518:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	68da      	ldr	r2, [r3, #12]
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005528:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	2220      	movs	r2, #32
 800552e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005532:	6878      	ldr	r0, [r7, #4]
 8005534:	f7ff fe5a 	bl	80051ec <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005538:	2300      	movs	r3, #0
}
 800553a:	4618      	mov	r0, r3
 800553c:	3708      	adds	r7, #8
 800553e:	46bd      	mov	sp, r7
 8005540:	bd80      	pop	{r7, pc}

08005542 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005542:	b580      	push	{r7, lr}
 8005544:	b08c      	sub	sp, #48	; 0x30
 8005546:	af00      	add	r7, sp, #0
 8005548:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005550:	b2db      	uxtb	r3, r3
 8005552:	2b22      	cmp	r3, #34	; 0x22
 8005554:	f040 80ab 	bne.w	80056ae <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	689b      	ldr	r3, [r3, #8]
 800555c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005560:	d117      	bne.n	8005592 <UART_Receive_IT+0x50>
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	691b      	ldr	r3, [r3, #16]
 8005566:	2b00      	cmp	r3, #0
 8005568:	d113      	bne.n	8005592 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800556a:	2300      	movs	r3, #0
 800556c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005572:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	685b      	ldr	r3, [r3, #4]
 800557a:	b29b      	uxth	r3, r3
 800557c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005580:	b29a      	uxth	r2, r3
 8005582:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005584:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800558a:	1c9a      	adds	r2, r3, #2
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	629a      	str	r2, [r3, #40]	; 0x28
 8005590:	e026      	b.n	80055e0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005596:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8005598:	2300      	movs	r3, #0
 800559a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	689b      	ldr	r3, [r3, #8]
 80055a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80055a4:	d007      	beq.n	80055b6 <UART_Receive_IT+0x74>
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	689b      	ldr	r3, [r3, #8]
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d10a      	bne.n	80055c4 <UART_Receive_IT+0x82>
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	691b      	ldr	r3, [r3, #16]
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d106      	bne.n	80055c4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	685b      	ldr	r3, [r3, #4]
 80055bc:	b2da      	uxtb	r2, r3
 80055be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055c0:	701a      	strb	r2, [r3, #0]
 80055c2:	e008      	b.n	80055d6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	685b      	ldr	r3, [r3, #4]
 80055ca:	b2db      	uxtb	r3, r3
 80055cc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80055d0:	b2da      	uxtb	r2, r3
 80055d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055d4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055da:	1c5a      	adds	r2, r3, #1
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80055e4:	b29b      	uxth	r3, r3
 80055e6:	3b01      	subs	r3, #1
 80055e8:	b29b      	uxth	r3, r3
 80055ea:	687a      	ldr	r2, [r7, #4]
 80055ec:	4619      	mov	r1, r3
 80055ee:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d15a      	bne.n	80056aa <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	68da      	ldr	r2, [r3, #12]
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	f022 0220 	bic.w	r2, r2, #32
 8005602:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	68da      	ldr	r2, [r3, #12]
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005612:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	695a      	ldr	r2, [r3, #20]
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	f022 0201 	bic.w	r2, r2, #1
 8005622:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	2220      	movs	r2, #32
 8005628:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005630:	2b01      	cmp	r3, #1
 8005632:	d135      	bne.n	80056a0 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	2200      	movs	r2, #0
 8005638:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	330c      	adds	r3, #12
 8005640:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005642:	697b      	ldr	r3, [r7, #20]
 8005644:	e853 3f00 	ldrex	r3, [r3]
 8005648:	613b      	str	r3, [r7, #16]
   return(result);
 800564a:	693b      	ldr	r3, [r7, #16]
 800564c:	f023 0310 	bic.w	r3, r3, #16
 8005650:	627b      	str	r3, [r7, #36]	; 0x24
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	330c      	adds	r3, #12
 8005658:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800565a:	623a      	str	r2, [r7, #32]
 800565c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800565e:	69f9      	ldr	r1, [r7, #28]
 8005660:	6a3a      	ldr	r2, [r7, #32]
 8005662:	e841 2300 	strex	r3, r2, [r1]
 8005666:	61bb      	str	r3, [r7, #24]
   return(result);
 8005668:	69bb      	ldr	r3, [r7, #24]
 800566a:	2b00      	cmp	r3, #0
 800566c:	d1e5      	bne.n	800563a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	f003 0310 	and.w	r3, r3, #16
 8005678:	2b10      	cmp	r3, #16
 800567a:	d10a      	bne.n	8005692 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800567c:	2300      	movs	r3, #0
 800567e:	60fb      	str	r3, [r7, #12]
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	60fb      	str	r3, [r7, #12]
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	685b      	ldr	r3, [r3, #4]
 800568e:	60fb      	str	r3, [r7, #12]
 8005690:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005696:	4619      	mov	r1, r3
 8005698:	6878      	ldr	r0, [r7, #4]
 800569a:	f7ff fdbb 	bl	8005214 <HAL_UARTEx_RxEventCallback>
 800569e:	e002      	b.n	80056a6 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80056a0:	6878      	ldr	r0, [r7, #4]
 80056a2:	f7fb fe0d 	bl	80012c0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80056a6:	2300      	movs	r3, #0
 80056a8:	e002      	b.n	80056b0 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80056aa:	2300      	movs	r3, #0
 80056ac:	e000      	b.n	80056b0 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80056ae:	2302      	movs	r3, #2
  }
}
 80056b0:	4618      	mov	r0, r3
 80056b2:	3730      	adds	r7, #48	; 0x30
 80056b4:	46bd      	mov	sp, r7
 80056b6:	bd80      	pop	{r7, pc}

080056b8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80056b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80056bc:	b0c0      	sub	sp, #256	; 0x100
 80056be:	af00      	add	r7, sp, #0
 80056c0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80056c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	691b      	ldr	r3, [r3, #16]
 80056cc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80056d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80056d4:	68d9      	ldr	r1, [r3, #12]
 80056d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80056da:	681a      	ldr	r2, [r3, #0]
 80056dc:	ea40 0301 	orr.w	r3, r0, r1
 80056e0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80056e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80056e6:	689a      	ldr	r2, [r3, #8]
 80056e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80056ec:	691b      	ldr	r3, [r3, #16]
 80056ee:	431a      	orrs	r2, r3
 80056f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80056f4:	695b      	ldr	r3, [r3, #20]
 80056f6:	431a      	orrs	r2, r3
 80056f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80056fc:	69db      	ldr	r3, [r3, #28]
 80056fe:	4313      	orrs	r3, r2
 8005700:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005704:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	68db      	ldr	r3, [r3, #12]
 800570c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005710:	f021 010c 	bic.w	r1, r1, #12
 8005714:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005718:	681a      	ldr	r2, [r3, #0]
 800571a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800571e:	430b      	orrs	r3, r1
 8005720:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005722:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	695b      	ldr	r3, [r3, #20]
 800572a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800572e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005732:	6999      	ldr	r1, [r3, #24]
 8005734:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005738:	681a      	ldr	r2, [r3, #0]
 800573a:	ea40 0301 	orr.w	r3, r0, r1
 800573e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005740:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005744:	681a      	ldr	r2, [r3, #0]
 8005746:	4b8f      	ldr	r3, [pc, #572]	; (8005984 <UART_SetConfig+0x2cc>)
 8005748:	429a      	cmp	r2, r3
 800574a:	d005      	beq.n	8005758 <UART_SetConfig+0xa0>
 800574c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005750:	681a      	ldr	r2, [r3, #0]
 8005752:	4b8d      	ldr	r3, [pc, #564]	; (8005988 <UART_SetConfig+0x2d0>)
 8005754:	429a      	cmp	r2, r3
 8005756:	d104      	bne.n	8005762 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005758:	f7fe fb3e 	bl	8003dd8 <HAL_RCC_GetPCLK2Freq>
 800575c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005760:	e003      	b.n	800576a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005762:	f7fe fb25 	bl	8003db0 <HAL_RCC_GetPCLK1Freq>
 8005766:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800576a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800576e:	69db      	ldr	r3, [r3, #28]
 8005770:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005774:	f040 810c 	bne.w	8005990 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005778:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800577c:	2200      	movs	r2, #0
 800577e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005782:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8005786:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800578a:	4622      	mov	r2, r4
 800578c:	462b      	mov	r3, r5
 800578e:	1891      	adds	r1, r2, r2
 8005790:	65b9      	str	r1, [r7, #88]	; 0x58
 8005792:	415b      	adcs	r3, r3
 8005794:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005796:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800579a:	4621      	mov	r1, r4
 800579c:	eb12 0801 	adds.w	r8, r2, r1
 80057a0:	4629      	mov	r1, r5
 80057a2:	eb43 0901 	adc.w	r9, r3, r1
 80057a6:	f04f 0200 	mov.w	r2, #0
 80057aa:	f04f 0300 	mov.w	r3, #0
 80057ae:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80057b2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80057b6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80057ba:	4690      	mov	r8, r2
 80057bc:	4699      	mov	r9, r3
 80057be:	4623      	mov	r3, r4
 80057c0:	eb18 0303 	adds.w	r3, r8, r3
 80057c4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80057c8:	462b      	mov	r3, r5
 80057ca:	eb49 0303 	adc.w	r3, r9, r3
 80057ce:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80057d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80057d6:	685b      	ldr	r3, [r3, #4]
 80057d8:	2200      	movs	r2, #0
 80057da:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80057de:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80057e2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80057e6:	460b      	mov	r3, r1
 80057e8:	18db      	adds	r3, r3, r3
 80057ea:	653b      	str	r3, [r7, #80]	; 0x50
 80057ec:	4613      	mov	r3, r2
 80057ee:	eb42 0303 	adc.w	r3, r2, r3
 80057f2:	657b      	str	r3, [r7, #84]	; 0x54
 80057f4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80057f8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80057fc:	f7fa fce4 	bl	80001c8 <__aeabi_uldivmod>
 8005800:	4602      	mov	r2, r0
 8005802:	460b      	mov	r3, r1
 8005804:	4b61      	ldr	r3, [pc, #388]	; (800598c <UART_SetConfig+0x2d4>)
 8005806:	fba3 2302 	umull	r2, r3, r3, r2
 800580a:	095b      	lsrs	r3, r3, #5
 800580c:	011c      	lsls	r4, r3, #4
 800580e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005812:	2200      	movs	r2, #0
 8005814:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005818:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800581c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005820:	4642      	mov	r2, r8
 8005822:	464b      	mov	r3, r9
 8005824:	1891      	adds	r1, r2, r2
 8005826:	64b9      	str	r1, [r7, #72]	; 0x48
 8005828:	415b      	adcs	r3, r3
 800582a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800582c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005830:	4641      	mov	r1, r8
 8005832:	eb12 0a01 	adds.w	sl, r2, r1
 8005836:	4649      	mov	r1, r9
 8005838:	eb43 0b01 	adc.w	fp, r3, r1
 800583c:	f04f 0200 	mov.w	r2, #0
 8005840:	f04f 0300 	mov.w	r3, #0
 8005844:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005848:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800584c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005850:	4692      	mov	sl, r2
 8005852:	469b      	mov	fp, r3
 8005854:	4643      	mov	r3, r8
 8005856:	eb1a 0303 	adds.w	r3, sl, r3
 800585a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800585e:	464b      	mov	r3, r9
 8005860:	eb4b 0303 	adc.w	r3, fp, r3
 8005864:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005868:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800586c:	685b      	ldr	r3, [r3, #4]
 800586e:	2200      	movs	r2, #0
 8005870:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005874:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005878:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800587c:	460b      	mov	r3, r1
 800587e:	18db      	adds	r3, r3, r3
 8005880:	643b      	str	r3, [r7, #64]	; 0x40
 8005882:	4613      	mov	r3, r2
 8005884:	eb42 0303 	adc.w	r3, r2, r3
 8005888:	647b      	str	r3, [r7, #68]	; 0x44
 800588a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800588e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8005892:	f7fa fc99 	bl	80001c8 <__aeabi_uldivmod>
 8005896:	4602      	mov	r2, r0
 8005898:	460b      	mov	r3, r1
 800589a:	4611      	mov	r1, r2
 800589c:	4b3b      	ldr	r3, [pc, #236]	; (800598c <UART_SetConfig+0x2d4>)
 800589e:	fba3 2301 	umull	r2, r3, r3, r1
 80058a2:	095b      	lsrs	r3, r3, #5
 80058a4:	2264      	movs	r2, #100	; 0x64
 80058a6:	fb02 f303 	mul.w	r3, r2, r3
 80058aa:	1acb      	subs	r3, r1, r3
 80058ac:	00db      	lsls	r3, r3, #3
 80058ae:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80058b2:	4b36      	ldr	r3, [pc, #216]	; (800598c <UART_SetConfig+0x2d4>)
 80058b4:	fba3 2302 	umull	r2, r3, r3, r2
 80058b8:	095b      	lsrs	r3, r3, #5
 80058ba:	005b      	lsls	r3, r3, #1
 80058bc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80058c0:	441c      	add	r4, r3
 80058c2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80058c6:	2200      	movs	r2, #0
 80058c8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80058cc:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80058d0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80058d4:	4642      	mov	r2, r8
 80058d6:	464b      	mov	r3, r9
 80058d8:	1891      	adds	r1, r2, r2
 80058da:	63b9      	str	r1, [r7, #56]	; 0x38
 80058dc:	415b      	adcs	r3, r3
 80058de:	63fb      	str	r3, [r7, #60]	; 0x3c
 80058e0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80058e4:	4641      	mov	r1, r8
 80058e6:	1851      	adds	r1, r2, r1
 80058e8:	6339      	str	r1, [r7, #48]	; 0x30
 80058ea:	4649      	mov	r1, r9
 80058ec:	414b      	adcs	r3, r1
 80058ee:	637b      	str	r3, [r7, #52]	; 0x34
 80058f0:	f04f 0200 	mov.w	r2, #0
 80058f4:	f04f 0300 	mov.w	r3, #0
 80058f8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80058fc:	4659      	mov	r1, fp
 80058fe:	00cb      	lsls	r3, r1, #3
 8005900:	4651      	mov	r1, sl
 8005902:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005906:	4651      	mov	r1, sl
 8005908:	00ca      	lsls	r2, r1, #3
 800590a:	4610      	mov	r0, r2
 800590c:	4619      	mov	r1, r3
 800590e:	4603      	mov	r3, r0
 8005910:	4642      	mov	r2, r8
 8005912:	189b      	adds	r3, r3, r2
 8005914:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005918:	464b      	mov	r3, r9
 800591a:	460a      	mov	r2, r1
 800591c:	eb42 0303 	adc.w	r3, r2, r3
 8005920:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005924:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005928:	685b      	ldr	r3, [r3, #4]
 800592a:	2200      	movs	r2, #0
 800592c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005930:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005934:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005938:	460b      	mov	r3, r1
 800593a:	18db      	adds	r3, r3, r3
 800593c:	62bb      	str	r3, [r7, #40]	; 0x28
 800593e:	4613      	mov	r3, r2
 8005940:	eb42 0303 	adc.w	r3, r2, r3
 8005944:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005946:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800594a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800594e:	f7fa fc3b 	bl	80001c8 <__aeabi_uldivmod>
 8005952:	4602      	mov	r2, r0
 8005954:	460b      	mov	r3, r1
 8005956:	4b0d      	ldr	r3, [pc, #52]	; (800598c <UART_SetConfig+0x2d4>)
 8005958:	fba3 1302 	umull	r1, r3, r3, r2
 800595c:	095b      	lsrs	r3, r3, #5
 800595e:	2164      	movs	r1, #100	; 0x64
 8005960:	fb01 f303 	mul.w	r3, r1, r3
 8005964:	1ad3      	subs	r3, r2, r3
 8005966:	00db      	lsls	r3, r3, #3
 8005968:	3332      	adds	r3, #50	; 0x32
 800596a:	4a08      	ldr	r2, [pc, #32]	; (800598c <UART_SetConfig+0x2d4>)
 800596c:	fba2 2303 	umull	r2, r3, r2, r3
 8005970:	095b      	lsrs	r3, r3, #5
 8005972:	f003 0207 	and.w	r2, r3, #7
 8005976:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	4422      	add	r2, r4
 800597e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005980:	e105      	b.n	8005b8e <UART_SetConfig+0x4d6>
 8005982:	bf00      	nop
 8005984:	40011000 	.word	0x40011000
 8005988:	40011400 	.word	0x40011400
 800598c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005990:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005994:	2200      	movs	r2, #0
 8005996:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800599a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800599e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80059a2:	4642      	mov	r2, r8
 80059a4:	464b      	mov	r3, r9
 80059a6:	1891      	adds	r1, r2, r2
 80059a8:	6239      	str	r1, [r7, #32]
 80059aa:	415b      	adcs	r3, r3
 80059ac:	627b      	str	r3, [r7, #36]	; 0x24
 80059ae:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80059b2:	4641      	mov	r1, r8
 80059b4:	1854      	adds	r4, r2, r1
 80059b6:	4649      	mov	r1, r9
 80059b8:	eb43 0501 	adc.w	r5, r3, r1
 80059bc:	f04f 0200 	mov.w	r2, #0
 80059c0:	f04f 0300 	mov.w	r3, #0
 80059c4:	00eb      	lsls	r3, r5, #3
 80059c6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80059ca:	00e2      	lsls	r2, r4, #3
 80059cc:	4614      	mov	r4, r2
 80059ce:	461d      	mov	r5, r3
 80059d0:	4643      	mov	r3, r8
 80059d2:	18e3      	adds	r3, r4, r3
 80059d4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80059d8:	464b      	mov	r3, r9
 80059da:	eb45 0303 	adc.w	r3, r5, r3
 80059de:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80059e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80059e6:	685b      	ldr	r3, [r3, #4]
 80059e8:	2200      	movs	r2, #0
 80059ea:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80059ee:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80059f2:	f04f 0200 	mov.w	r2, #0
 80059f6:	f04f 0300 	mov.w	r3, #0
 80059fa:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80059fe:	4629      	mov	r1, r5
 8005a00:	008b      	lsls	r3, r1, #2
 8005a02:	4621      	mov	r1, r4
 8005a04:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005a08:	4621      	mov	r1, r4
 8005a0a:	008a      	lsls	r2, r1, #2
 8005a0c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005a10:	f7fa fbda 	bl	80001c8 <__aeabi_uldivmod>
 8005a14:	4602      	mov	r2, r0
 8005a16:	460b      	mov	r3, r1
 8005a18:	4b60      	ldr	r3, [pc, #384]	; (8005b9c <UART_SetConfig+0x4e4>)
 8005a1a:	fba3 2302 	umull	r2, r3, r3, r2
 8005a1e:	095b      	lsrs	r3, r3, #5
 8005a20:	011c      	lsls	r4, r3, #4
 8005a22:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005a26:	2200      	movs	r2, #0
 8005a28:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005a2c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005a30:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005a34:	4642      	mov	r2, r8
 8005a36:	464b      	mov	r3, r9
 8005a38:	1891      	adds	r1, r2, r2
 8005a3a:	61b9      	str	r1, [r7, #24]
 8005a3c:	415b      	adcs	r3, r3
 8005a3e:	61fb      	str	r3, [r7, #28]
 8005a40:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005a44:	4641      	mov	r1, r8
 8005a46:	1851      	adds	r1, r2, r1
 8005a48:	6139      	str	r1, [r7, #16]
 8005a4a:	4649      	mov	r1, r9
 8005a4c:	414b      	adcs	r3, r1
 8005a4e:	617b      	str	r3, [r7, #20]
 8005a50:	f04f 0200 	mov.w	r2, #0
 8005a54:	f04f 0300 	mov.w	r3, #0
 8005a58:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005a5c:	4659      	mov	r1, fp
 8005a5e:	00cb      	lsls	r3, r1, #3
 8005a60:	4651      	mov	r1, sl
 8005a62:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005a66:	4651      	mov	r1, sl
 8005a68:	00ca      	lsls	r2, r1, #3
 8005a6a:	4610      	mov	r0, r2
 8005a6c:	4619      	mov	r1, r3
 8005a6e:	4603      	mov	r3, r0
 8005a70:	4642      	mov	r2, r8
 8005a72:	189b      	adds	r3, r3, r2
 8005a74:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005a78:	464b      	mov	r3, r9
 8005a7a:	460a      	mov	r2, r1
 8005a7c:	eb42 0303 	adc.w	r3, r2, r3
 8005a80:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005a84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a88:	685b      	ldr	r3, [r3, #4]
 8005a8a:	2200      	movs	r2, #0
 8005a8c:	67bb      	str	r3, [r7, #120]	; 0x78
 8005a8e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005a90:	f04f 0200 	mov.w	r2, #0
 8005a94:	f04f 0300 	mov.w	r3, #0
 8005a98:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005a9c:	4649      	mov	r1, r9
 8005a9e:	008b      	lsls	r3, r1, #2
 8005aa0:	4641      	mov	r1, r8
 8005aa2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005aa6:	4641      	mov	r1, r8
 8005aa8:	008a      	lsls	r2, r1, #2
 8005aaa:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8005aae:	f7fa fb8b 	bl	80001c8 <__aeabi_uldivmod>
 8005ab2:	4602      	mov	r2, r0
 8005ab4:	460b      	mov	r3, r1
 8005ab6:	4b39      	ldr	r3, [pc, #228]	; (8005b9c <UART_SetConfig+0x4e4>)
 8005ab8:	fba3 1302 	umull	r1, r3, r3, r2
 8005abc:	095b      	lsrs	r3, r3, #5
 8005abe:	2164      	movs	r1, #100	; 0x64
 8005ac0:	fb01 f303 	mul.w	r3, r1, r3
 8005ac4:	1ad3      	subs	r3, r2, r3
 8005ac6:	011b      	lsls	r3, r3, #4
 8005ac8:	3332      	adds	r3, #50	; 0x32
 8005aca:	4a34      	ldr	r2, [pc, #208]	; (8005b9c <UART_SetConfig+0x4e4>)
 8005acc:	fba2 2303 	umull	r2, r3, r2, r3
 8005ad0:	095b      	lsrs	r3, r3, #5
 8005ad2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005ad6:	441c      	add	r4, r3
 8005ad8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005adc:	2200      	movs	r2, #0
 8005ade:	673b      	str	r3, [r7, #112]	; 0x70
 8005ae0:	677a      	str	r2, [r7, #116]	; 0x74
 8005ae2:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005ae6:	4642      	mov	r2, r8
 8005ae8:	464b      	mov	r3, r9
 8005aea:	1891      	adds	r1, r2, r2
 8005aec:	60b9      	str	r1, [r7, #8]
 8005aee:	415b      	adcs	r3, r3
 8005af0:	60fb      	str	r3, [r7, #12]
 8005af2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005af6:	4641      	mov	r1, r8
 8005af8:	1851      	adds	r1, r2, r1
 8005afa:	6039      	str	r1, [r7, #0]
 8005afc:	4649      	mov	r1, r9
 8005afe:	414b      	adcs	r3, r1
 8005b00:	607b      	str	r3, [r7, #4]
 8005b02:	f04f 0200 	mov.w	r2, #0
 8005b06:	f04f 0300 	mov.w	r3, #0
 8005b0a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005b0e:	4659      	mov	r1, fp
 8005b10:	00cb      	lsls	r3, r1, #3
 8005b12:	4651      	mov	r1, sl
 8005b14:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005b18:	4651      	mov	r1, sl
 8005b1a:	00ca      	lsls	r2, r1, #3
 8005b1c:	4610      	mov	r0, r2
 8005b1e:	4619      	mov	r1, r3
 8005b20:	4603      	mov	r3, r0
 8005b22:	4642      	mov	r2, r8
 8005b24:	189b      	adds	r3, r3, r2
 8005b26:	66bb      	str	r3, [r7, #104]	; 0x68
 8005b28:	464b      	mov	r3, r9
 8005b2a:	460a      	mov	r2, r1
 8005b2c:	eb42 0303 	adc.w	r3, r2, r3
 8005b30:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005b32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b36:	685b      	ldr	r3, [r3, #4]
 8005b38:	2200      	movs	r2, #0
 8005b3a:	663b      	str	r3, [r7, #96]	; 0x60
 8005b3c:	667a      	str	r2, [r7, #100]	; 0x64
 8005b3e:	f04f 0200 	mov.w	r2, #0
 8005b42:	f04f 0300 	mov.w	r3, #0
 8005b46:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005b4a:	4649      	mov	r1, r9
 8005b4c:	008b      	lsls	r3, r1, #2
 8005b4e:	4641      	mov	r1, r8
 8005b50:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005b54:	4641      	mov	r1, r8
 8005b56:	008a      	lsls	r2, r1, #2
 8005b58:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005b5c:	f7fa fb34 	bl	80001c8 <__aeabi_uldivmod>
 8005b60:	4602      	mov	r2, r0
 8005b62:	460b      	mov	r3, r1
 8005b64:	4b0d      	ldr	r3, [pc, #52]	; (8005b9c <UART_SetConfig+0x4e4>)
 8005b66:	fba3 1302 	umull	r1, r3, r3, r2
 8005b6a:	095b      	lsrs	r3, r3, #5
 8005b6c:	2164      	movs	r1, #100	; 0x64
 8005b6e:	fb01 f303 	mul.w	r3, r1, r3
 8005b72:	1ad3      	subs	r3, r2, r3
 8005b74:	011b      	lsls	r3, r3, #4
 8005b76:	3332      	adds	r3, #50	; 0x32
 8005b78:	4a08      	ldr	r2, [pc, #32]	; (8005b9c <UART_SetConfig+0x4e4>)
 8005b7a:	fba2 2303 	umull	r2, r3, r2, r3
 8005b7e:	095b      	lsrs	r3, r3, #5
 8005b80:	f003 020f 	and.w	r2, r3, #15
 8005b84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	4422      	add	r2, r4
 8005b8c:	609a      	str	r2, [r3, #8]
}
 8005b8e:	bf00      	nop
 8005b90:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005b94:	46bd      	mov	sp, r7
 8005b96:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005b9a:	bf00      	nop
 8005b9c:	51eb851f 	.word	0x51eb851f

08005ba0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005ba0:	b084      	sub	sp, #16
 8005ba2:	b580      	push	{r7, lr}
 8005ba4:	b084      	sub	sp, #16
 8005ba6:	af00      	add	r7, sp, #0
 8005ba8:	6078      	str	r0, [r7, #4]
 8005baa:	f107 001c 	add.w	r0, r7, #28
 8005bae:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005bb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bb4:	2b01      	cmp	r3, #1
 8005bb6:	d122      	bne.n	8005bfe <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bbc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	68db      	ldr	r3, [r3, #12]
 8005bc8:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8005bcc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005bd0:	687a      	ldr	r2, [r7, #4]
 8005bd2:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	68db      	ldr	r3, [r3, #12]
 8005bd8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005be0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005be2:	2b01      	cmp	r3, #1
 8005be4:	d105      	bne.n	8005bf2 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	68db      	ldr	r3, [r3, #12]
 8005bea:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005bf2:	6878      	ldr	r0, [r7, #4]
 8005bf4:	f001 fbee 	bl	80073d4 <USB_CoreReset>
 8005bf8:	4603      	mov	r3, r0
 8005bfa:	73fb      	strb	r3, [r7, #15]
 8005bfc:	e01a      	b.n	8005c34 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	68db      	ldr	r3, [r3, #12]
 8005c02:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005c0a:	6878      	ldr	r0, [r7, #4]
 8005c0c:	f001 fbe2 	bl	80073d4 <USB_CoreReset>
 8005c10:	4603      	mov	r3, r0
 8005c12:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005c14:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d106      	bne.n	8005c28 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c1e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	639a      	str	r2, [r3, #56]	; 0x38
 8005c26:	e005      	b.n	8005c34 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c2c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005c34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c36:	2b01      	cmp	r3, #1
 8005c38:	d10b      	bne.n	8005c52 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	689b      	ldr	r3, [r3, #8]
 8005c3e:	f043 0206 	orr.w	r2, r3, #6
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	689b      	ldr	r3, [r3, #8]
 8005c4a:	f043 0220 	orr.w	r2, r3, #32
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005c52:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c54:	4618      	mov	r0, r3
 8005c56:	3710      	adds	r7, #16
 8005c58:	46bd      	mov	sp, r7
 8005c5a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005c5e:	b004      	add	sp, #16
 8005c60:	4770      	bx	lr
	...

08005c64 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8005c64:	b480      	push	{r7}
 8005c66:	b087      	sub	sp, #28
 8005c68:	af00      	add	r7, sp, #0
 8005c6a:	60f8      	str	r0, [r7, #12]
 8005c6c:	60b9      	str	r1, [r7, #8]
 8005c6e:	4613      	mov	r3, r2
 8005c70:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8005c72:	79fb      	ldrb	r3, [r7, #7]
 8005c74:	2b02      	cmp	r3, #2
 8005c76:	d165      	bne.n	8005d44 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8005c78:	68bb      	ldr	r3, [r7, #8]
 8005c7a:	4a41      	ldr	r2, [pc, #260]	; (8005d80 <USB_SetTurnaroundTime+0x11c>)
 8005c7c:	4293      	cmp	r3, r2
 8005c7e:	d906      	bls.n	8005c8e <USB_SetTurnaroundTime+0x2a>
 8005c80:	68bb      	ldr	r3, [r7, #8]
 8005c82:	4a40      	ldr	r2, [pc, #256]	; (8005d84 <USB_SetTurnaroundTime+0x120>)
 8005c84:	4293      	cmp	r3, r2
 8005c86:	d202      	bcs.n	8005c8e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8005c88:	230f      	movs	r3, #15
 8005c8a:	617b      	str	r3, [r7, #20]
 8005c8c:	e062      	b.n	8005d54 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8005c8e:	68bb      	ldr	r3, [r7, #8]
 8005c90:	4a3c      	ldr	r2, [pc, #240]	; (8005d84 <USB_SetTurnaroundTime+0x120>)
 8005c92:	4293      	cmp	r3, r2
 8005c94:	d306      	bcc.n	8005ca4 <USB_SetTurnaroundTime+0x40>
 8005c96:	68bb      	ldr	r3, [r7, #8]
 8005c98:	4a3b      	ldr	r2, [pc, #236]	; (8005d88 <USB_SetTurnaroundTime+0x124>)
 8005c9a:	4293      	cmp	r3, r2
 8005c9c:	d202      	bcs.n	8005ca4 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8005c9e:	230e      	movs	r3, #14
 8005ca0:	617b      	str	r3, [r7, #20]
 8005ca2:	e057      	b.n	8005d54 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8005ca4:	68bb      	ldr	r3, [r7, #8]
 8005ca6:	4a38      	ldr	r2, [pc, #224]	; (8005d88 <USB_SetTurnaroundTime+0x124>)
 8005ca8:	4293      	cmp	r3, r2
 8005caa:	d306      	bcc.n	8005cba <USB_SetTurnaroundTime+0x56>
 8005cac:	68bb      	ldr	r3, [r7, #8]
 8005cae:	4a37      	ldr	r2, [pc, #220]	; (8005d8c <USB_SetTurnaroundTime+0x128>)
 8005cb0:	4293      	cmp	r3, r2
 8005cb2:	d202      	bcs.n	8005cba <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8005cb4:	230d      	movs	r3, #13
 8005cb6:	617b      	str	r3, [r7, #20]
 8005cb8:	e04c      	b.n	8005d54 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8005cba:	68bb      	ldr	r3, [r7, #8]
 8005cbc:	4a33      	ldr	r2, [pc, #204]	; (8005d8c <USB_SetTurnaroundTime+0x128>)
 8005cbe:	4293      	cmp	r3, r2
 8005cc0:	d306      	bcc.n	8005cd0 <USB_SetTurnaroundTime+0x6c>
 8005cc2:	68bb      	ldr	r3, [r7, #8]
 8005cc4:	4a32      	ldr	r2, [pc, #200]	; (8005d90 <USB_SetTurnaroundTime+0x12c>)
 8005cc6:	4293      	cmp	r3, r2
 8005cc8:	d802      	bhi.n	8005cd0 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8005cca:	230c      	movs	r3, #12
 8005ccc:	617b      	str	r3, [r7, #20]
 8005cce:	e041      	b.n	8005d54 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8005cd0:	68bb      	ldr	r3, [r7, #8]
 8005cd2:	4a2f      	ldr	r2, [pc, #188]	; (8005d90 <USB_SetTurnaroundTime+0x12c>)
 8005cd4:	4293      	cmp	r3, r2
 8005cd6:	d906      	bls.n	8005ce6 <USB_SetTurnaroundTime+0x82>
 8005cd8:	68bb      	ldr	r3, [r7, #8]
 8005cda:	4a2e      	ldr	r2, [pc, #184]	; (8005d94 <USB_SetTurnaroundTime+0x130>)
 8005cdc:	4293      	cmp	r3, r2
 8005cde:	d802      	bhi.n	8005ce6 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8005ce0:	230b      	movs	r3, #11
 8005ce2:	617b      	str	r3, [r7, #20]
 8005ce4:	e036      	b.n	8005d54 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8005ce6:	68bb      	ldr	r3, [r7, #8]
 8005ce8:	4a2a      	ldr	r2, [pc, #168]	; (8005d94 <USB_SetTurnaroundTime+0x130>)
 8005cea:	4293      	cmp	r3, r2
 8005cec:	d906      	bls.n	8005cfc <USB_SetTurnaroundTime+0x98>
 8005cee:	68bb      	ldr	r3, [r7, #8]
 8005cf0:	4a29      	ldr	r2, [pc, #164]	; (8005d98 <USB_SetTurnaroundTime+0x134>)
 8005cf2:	4293      	cmp	r3, r2
 8005cf4:	d802      	bhi.n	8005cfc <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8005cf6:	230a      	movs	r3, #10
 8005cf8:	617b      	str	r3, [r7, #20]
 8005cfa:	e02b      	b.n	8005d54 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8005cfc:	68bb      	ldr	r3, [r7, #8]
 8005cfe:	4a26      	ldr	r2, [pc, #152]	; (8005d98 <USB_SetTurnaroundTime+0x134>)
 8005d00:	4293      	cmp	r3, r2
 8005d02:	d906      	bls.n	8005d12 <USB_SetTurnaroundTime+0xae>
 8005d04:	68bb      	ldr	r3, [r7, #8]
 8005d06:	4a25      	ldr	r2, [pc, #148]	; (8005d9c <USB_SetTurnaroundTime+0x138>)
 8005d08:	4293      	cmp	r3, r2
 8005d0a:	d202      	bcs.n	8005d12 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8005d0c:	2309      	movs	r3, #9
 8005d0e:	617b      	str	r3, [r7, #20]
 8005d10:	e020      	b.n	8005d54 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8005d12:	68bb      	ldr	r3, [r7, #8]
 8005d14:	4a21      	ldr	r2, [pc, #132]	; (8005d9c <USB_SetTurnaroundTime+0x138>)
 8005d16:	4293      	cmp	r3, r2
 8005d18:	d306      	bcc.n	8005d28 <USB_SetTurnaroundTime+0xc4>
 8005d1a:	68bb      	ldr	r3, [r7, #8]
 8005d1c:	4a20      	ldr	r2, [pc, #128]	; (8005da0 <USB_SetTurnaroundTime+0x13c>)
 8005d1e:	4293      	cmp	r3, r2
 8005d20:	d802      	bhi.n	8005d28 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8005d22:	2308      	movs	r3, #8
 8005d24:	617b      	str	r3, [r7, #20]
 8005d26:	e015      	b.n	8005d54 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8005d28:	68bb      	ldr	r3, [r7, #8]
 8005d2a:	4a1d      	ldr	r2, [pc, #116]	; (8005da0 <USB_SetTurnaroundTime+0x13c>)
 8005d2c:	4293      	cmp	r3, r2
 8005d2e:	d906      	bls.n	8005d3e <USB_SetTurnaroundTime+0xda>
 8005d30:	68bb      	ldr	r3, [r7, #8]
 8005d32:	4a1c      	ldr	r2, [pc, #112]	; (8005da4 <USB_SetTurnaroundTime+0x140>)
 8005d34:	4293      	cmp	r3, r2
 8005d36:	d202      	bcs.n	8005d3e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8005d38:	2307      	movs	r3, #7
 8005d3a:	617b      	str	r3, [r7, #20]
 8005d3c:	e00a      	b.n	8005d54 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8005d3e:	2306      	movs	r3, #6
 8005d40:	617b      	str	r3, [r7, #20]
 8005d42:	e007      	b.n	8005d54 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8005d44:	79fb      	ldrb	r3, [r7, #7]
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d102      	bne.n	8005d50 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8005d4a:	2309      	movs	r3, #9
 8005d4c:	617b      	str	r3, [r7, #20]
 8005d4e:	e001      	b.n	8005d54 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8005d50:	2309      	movs	r3, #9
 8005d52:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	68db      	ldr	r3, [r3, #12]
 8005d58:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	68da      	ldr	r2, [r3, #12]
 8005d64:	697b      	ldr	r3, [r7, #20]
 8005d66:	029b      	lsls	r3, r3, #10
 8005d68:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8005d6c:	431a      	orrs	r2, r3
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005d72:	2300      	movs	r3, #0
}
 8005d74:	4618      	mov	r0, r3
 8005d76:	371c      	adds	r7, #28
 8005d78:	46bd      	mov	sp, r7
 8005d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d7e:	4770      	bx	lr
 8005d80:	00d8acbf 	.word	0x00d8acbf
 8005d84:	00e4e1c0 	.word	0x00e4e1c0
 8005d88:	00f42400 	.word	0x00f42400
 8005d8c:	01067380 	.word	0x01067380
 8005d90:	011a499f 	.word	0x011a499f
 8005d94:	01312cff 	.word	0x01312cff
 8005d98:	014ca43f 	.word	0x014ca43f
 8005d9c:	016e3600 	.word	0x016e3600
 8005da0:	01a6ab1f 	.word	0x01a6ab1f
 8005da4:	01e84800 	.word	0x01e84800

08005da8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005da8:	b480      	push	{r7}
 8005daa:	b083      	sub	sp, #12
 8005dac:	af00      	add	r7, sp, #0
 8005dae:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	689b      	ldr	r3, [r3, #8]
 8005db4:	f043 0201 	orr.w	r2, r3, #1
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005dbc:	2300      	movs	r3, #0
}
 8005dbe:	4618      	mov	r0, r3
 8005dc0:	370c      	adds	r7, #12
 8005dc2:	46bd      	mov	sp, r7
 8005dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc8:	4770      	bx	lr

08005dca <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005dca:	b480      	push	{r7}
 8005dcc:	b083      	sub	sp, #12
 8005dce:	af00      	add	r7, sp, #0
 8005dd0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	689b      	ldr	r3, [r3, #8]
 8005dd6:	f023 0201 	bic.w	r2, r3, #1
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005dde:	2300      	movs	r3, #0
}
 8005de0:	4618      	mov	r0, r3
 8005de2:	370c      	adds	r7, #12
 8005de4:	46bd      	mov	sp, r7
 8005de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dea:	4770      	bx	lr

08005dec <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005dec:	b580      	push	{r7, lr}
 8005dee:	b084      	sub	sp, #16
 8005df0:	af00      	add	r7, sp, #0
 8005df2:	6078      	str	r0, [r7, #4]
 8005df4:	460b      	mov	r3, r1
 8005df6:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005df8:	2300      	movs	r3, #0
 8005dfa:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	68db      	ldr	r3, [r3, #12]
 8005e00:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005e08:	78fb      	ldrb	r3, [r7, #3]
 8005e0a:	2b01      	cmp	r3, #1
 8005e0c:	d115      	bne.n	8005e3a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	68db      	ldr	r3, [r3, #12]
 8005e12:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005e1a:	2001      	movs	r0, #1
 8005e1c:	f7fb fd84 	bl	8001928 <HAL_Delay>
      ms++;
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	3301      	adds	r3, #1
 8005e24:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8005e26:	6878      	ldr	r0, [r7, #4]
 8005e28:	f001 fa45 	bl	80072b6 <USB_GetMode>
 8005e2c:	4603      	mov	r3, r0
 8005e2e:	2b01      	cmp	r3, #1
 8005e30:	d01e      	beq.n	8005e70 <USB_SetCurrentMode+0x84>
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	2b31      	cmp	r3, #49	; 0x31
 8005e36:	d9f0      	bls.n	8005e1a <USB_SetCurrentMode+0x2e>
 8005e38:	e01a      	b.n	8005e70 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005e3a:	78fb      	ldrb	r3, [r7, #3]
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d115      	bne.n	8005e6c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	68db      	ldr	r3, [r3, #12]
 8005e44:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005e4c:	2001      	movs	r0, #1
 8005e4e:	f7fb fd6b 	bl	8001928 <HAL_Delay>
      ms++;
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	3301      	adds	r3, #1
 8005e56:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8005e58:	6878      	ldr	r0, [r7, #4]
 8005e5a:	f001 fa2c 	bl	80072b6 <USB_GetMode>
 8005e5e:	4603      	mov	r3, r0
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d005      	beq.n	8005e70 <USB_SetCurrentMode+0x84>
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	2b31      	cmp	r3, #49	; 0x31
 8005e68:	d9f0      	bls.n	8005e4c <USB_SetCurrentMode+0x60>
 8005e6a:	e001      	b.n	8005e70 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005e6c:	2301      	movs	r3, #1
 8005e6e:	e005      	b.n	8005e7c <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	2b32      	cmp	r3, #50	; 0x32
 8005e74:	d101      	bne.n	8005e7a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005e76:	2301      	movs	r3, #1
 8005e78:	e000      	b.n	8005e7c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005e7a:	2300      	movs	r3, #0
}
 8005e7c:	4618      	mov	r0, r3
 8005e7e:	3710      	adds	r7, #16
 8005e80:	46bd      	mov	sp, r7
 8005e82:	bd80      	pop	{r7, pc}

08005e84 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005e84:	b084      	sub	sp, #16
 8005e86:	b580      	push	{r7, lr}
 8005e88:	b086      	sub	sp, #24
 8005e8a:	af00      	add	r7, sp, #0
 8005e8c:	6078      	str	r0, [r7, #4]
 8005e8e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005e92:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005e96:	2300      	movs	r3, #0
 8005e98:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005e9e:	2300      	movs	r3, #0
 8005ea0:	613b      	str	r3, [r7, #16]
 8005ea2:	e009      	b.n	8005eb8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005ea4:	687a      	ldr	r2, [r7, #4]
 8005ea6:	693b      	ldr	r3, [r7, #16]
 8005ea8:	3340      	adds	r3, #64	; 0x40
 8005eaa:	009b      	lsls	r3, r3, #2
 8005eac:	4413      	add	r3, r2
 8005eae:	2200      	movs	r2, #0
 8005eb0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005eb2:	693b      	ldr	r3, [r7, #16]
 8005eb4:	3301      	adds	r3, #1
 8005eb6:	613b      	str	r3, [r7, #16]
 8005eb8:	693b      	ldr	r3, [r7, #16]
 8005eba:	2b0e      	cmp	r3, #14
 8005ebc:	d9f2      	bls.n	8005ea4 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005ebe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d11c      	bne.n	8005efe <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005eca:	685b      	ldr	r3, [r3, #4]
 8005ecc:	68fa      	ldr	r2, [r7, #12]
 8005ece:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005ed2:	f043 0302 	orr.w	r3, r3, #2
 8005ed6:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005edc:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ee8:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ef4:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	639a      	str	r2, [r3, #56]	; 0x38
 8005efc:	e00b      	b.n	8005f16 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f02:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f0e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005f1c:	461a      	mov	r2, r3
 8005f1e:	2300      	movs	r3, #0
 8005f20:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f28:	4619      	mov	r1, r3
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f30:	461a      	mov	r2, r3
 8005f32:	680b      	ldr	r3, [r1, #0]
 8005f34:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005f36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f38:	2b01      	cmp	r3, #1
 8005f3a:	d10c      	bne.n	8005f56 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005f3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d104      	bne.n	8005f4c <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005f42:	2100      	movs	r1, #0
 8005f44:	6878      	ldr	r0, [r7, #4]
 8005f46:	f000 f965 	bl	8006214 <USB_SetDevSpeed>
 8005f4a:	e008      	b.n	8005f5e <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005f4c:	2101      	movs	r1, #1
 8005f4e:	6878      	ldr	r0, [r7, #4]
 8005f50:	f000 f960 	bl	8006214 <USB_SetDevSpeed>
 8005f54:	e003      	b.n	8005f5e <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005f56:	2103      	movs	r1, #3
 8005f58:	6878      	ldr	r0, [r7, #4]
 8005f5a:	f000 f95b 	bl	8006214 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005f5e:	2110      	movs	r1, #16
 8005f60:	6878      	ldr	r0, [r7, #4]
 8005f62:	f000 f8f3 	bl	800614c <USB_FlushTxFifo>
 8005f66:	4603      	mov	r3, r0
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d001      	beq.n	8005f70 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8005f6c:	2301      	movs	r3, #1
 8005f6e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005f70:	6878      	ldr	r0, [r7, #4]
 8005f72:	f000 f91f 	bl	80061b4 <USB_FlushRxFifo>
 8005f76:	4603      	mov	r3, r0
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d001      	beq.n	8005f80 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8005f7c:	2301      	movs	r3, #1
 8005f7e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f86:	461a      	mov	r2, r3
 8005f88:	2300      	movs	r3, #0
 8005f8a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f92:	461a      	mov	r2, r3
 8005f94:	2300      	movs	r3, #0
 8005f96:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f9e:	461a      	mov	r2, r3
 8005fa0:	2300      	movs	r3, #0
 8005fa2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005fa4:	2300      	movs	r3, #0
 8005fa6:	613b      	str	r3, [r7, #16]
 8005fa8:	e043      	b.n	8006032 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005faa:	693b      	ldr	r3, [r7, #16]
 8005fac:	015a      	lsls	r2, r3, #5
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	4413      	add	r3, r2
 8005fb2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005fbc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005fc0:	d118      	bne.n	8005ff4 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8005fc2:	693b      	ldr	r3, [r7, #16]
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d10a      	bne.n	8005fde <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005fc8:	693b      	ldr	r3, [r7, #16]
 8005fca:	015a      	lsls	r2, r3, #5
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	4413      	add	r3, r2
 8005fd0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005fd4:	461a      	mov	r2, r3
 8005fd6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005fda:	6013      	str	r3, [r2, #0]
 8005fdc:	e013      	b.n	8006006 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005fde:	693b      	ldr	r3, [r7, #16]
 8005fe0:	015a      	lsls	r2, r3, #5
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	4413      	add	r3, r2
 8005fe6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005fea:	461a      	mov	r2, r3
 8005fec:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005ff0:	6013      	str	r3, [r2, #0]
 8005ff2:	e008      	b.n	8006006 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005ff4:	693b      	ldr	r3, [r7, #16]
 8005ff6:	015a      	lsls	r2, r3, #5
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	4413      	add	r3, r2
 8005ffc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006000:	461a      	mov	r2, r3
 8006002:	2300      	movs	r3, #0
 8006004:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006006:	693b      	ldr	r3, [r7, #16]
 8006008:	015a      	lsls	r2, r3, #5
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	4413      	add	r3, r2
 800600e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006012:	461a      	mov	r2, r3
 8006014:	2300      	movs	r3, #0
 8006016:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006018:	693b      	ldr	r3, [r7, #16]
 800601a:	015a      	lsls	r2, r3, #5
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	4413      	add	r3, r2
 8006020:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006024:	461a      	mov	r2, r3
 8006026:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800602a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800602c:	693b      	ldr	r3, [r7, #16]
 800602e:	3301      	adds	r3, #1
 8006030:	613b      	str	r3, [r7, #16]
 8006032:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006034:	693a      	ldr	r2, [r7, #16]
 8006036:	429a      	cmp	r2, r3
 8006038:	d3b7      	bcc.n	8005faa <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800603a:	2300      	movs	r3, #0
 800603c:	613b      	str	r3, [r7, #16]
 800603e:	e043      	b.n	80060c8 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006040:	693b      	ldr	r3, [r7, #16]
 8006042:	015a      	lsls	r2, r3, #5
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	4413      	add	r3, r2
 8006048:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006052:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006056:	d118      	bne.n	800608a <USB_DevInit+0x206>
    {
      if (i == 0U)
 8006058:	693b      	ldr	r3, [r7, #16]
 800605a:	2b00      	cmp	r3, #0
 800605c:	d10a      	bne.n	8006074 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800605e:	693b      	ldr	r3, [r7, #16]
 8006060:	015a      	lsls	r2, r3, #5
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	4413      	add	r3, r2
 8006066:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800606a:	461a      	mov	r2, r3
 800606c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006070:	6013      	str	r3, [r2, #0]
 8006072:	e013      	b.n	800609c <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006074:	693b      	ldr	r3, [r7, #16]
 8006076:	015a      	lsls	r2, r3, #5
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	4413      	add	r3, r2
 800607c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006080:	461a      	mov	r2, r3
 8006082:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006086:	6013      	str	r3, [r2, #0]
 8006088:	e008      	b.n	800609c <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800608a:	693b      	ldr	r3, [r7, #16]
 800608c:	015a      	lsls	r2, r3, #5
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	4413      	add	r3, r2
 8006092:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006096:	461a      	mov	r2, r3
 8006098:	2300      	movs	r3, #0
 800609a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800609c:	693b      	ldr	r3, [r7, #16]
 800609e:	015a      	lsls	r2, r3, #5
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	4413      	add	r3, r2
 80060a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060a8:	461a      	mov	r2, r3
 80060aa:	2300      	movs	r3, #0
 80060ac:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80060ae:	693b      	ldr	r3, [r7, #16]
 80060b0:	015a      	lsls	r2, r3, #5
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	4413      	add	r3, r2
 80060b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060ba:	461a      	mov	r2, r3
 80060bc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80060c0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80060c2:	693b      	ldr	r3, [r7, #16]
 80060c4:	3301      	adds	r3, #1
 80060c6:	613b      	str	r3, [r7, #16]
 80060c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060ca:	693a      	ldr	r2, [r7, #16]
 80060cc:	429a      	cmp	r2, r3
 80060ce:	d3b7      	bcc.n	8006040 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80060d6:	691b      	ldr	r3, [r3, #16]
 80060d8:	68fa      	ldr	r2, [r7, #12]
 80060da:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80060de:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80060e2:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	2200      	movs	r2, #0
 80060e8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80060f0:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80060f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d105      	bne.n	8006104 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	699b      	ldr	r3, [r3, #24]
 80060fc:	f043 0210 	orr.w	r2, r3, #16
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	699a      	ldr	r2, [r3, #24]
 8006108:	4b0f      	ldr	r3, [pc, #60]	; (8006148 <USB_DevInit+0x2c4>)
 800610a:	4313      	orrs	r3, r2
 800610c:	687a      	ldr	r2, [r7, #4]
 800610e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006110:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006112:	2b00      	cmp	r3, #0
 8006114:	d005      	beq.n	8006122 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	699b      	ldr	r3, [r3, #24]
 800611a:	f043 0208 	orr.w	r2, r3, #8
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006122:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006124:	2b01      	cmp	r3, #1
 8006126:	d107      	bne.n	8006138 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	699b      	ldr	r3, [r3, #24]
 800612c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006130:	f043 0304 	orr.w	r3, r3, #4
 8006134:	687a      	ldr	r2, [r7, #4]
 8006136:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006138:	7dfb      	ldrb	r3, [r7, #23]
}
 800613a:	4618      	mov	r0, r3
 800613c:	3718      	adds	r7, #24
 800613e:	46bd      	mov	sp, r7
 8006140:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006144:	b004      	add	sp, #16
 8006146:	4770      	bx	lr
 8006148:	803c3800 	.word	0x803c3800

0800614c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800614c:	b480      	push	{r7}
 800614e:	b085      	sub	sp, #20
 8006150:	af00      	add	r7, sp, #0
 8006152:	6078      	str	r0, [r7, #4]
 8006154:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006156:	2300      	movs	r3, #0
 8006158:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	3301      	adds	r3, #1
 800615e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	4a13      	ldr	r2, [pc, #76]	; (80061b0 <USB_FlushTxFifo+0x64>)
 8006164:	4293      	cmp	r3, r2
 8006166:	d901      	bls.n	800616c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006168:	2303      	movs	r3, #3
 800616a:	e01b      	b.n	80061a4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	691b      	ldr	r3, [r3, #16]
 8006170:	2b00      	cmp	r3, #0
 8006172:	daf2      	bge.n	800615a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006174:	2300      	movs	r3, #0
 8006176:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006178:	683b      	ldr	r3, [r7, #0]
 800617a:	019b      	lsls	r3, r3, #6
 800617c:	f043 0220 	orr.w	r2, r3, #32
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	3301      	adds	r3, #1
 8006188:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	4a08      	ldr	r2, [pc, #32]	; (80061b0 <USB_FlushTxFifo+0x64>)
 800618e:	4293      	cmp	r3, r2
 8006190:	d901      	bls.n	8006196 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8006192:	2303      	movs	r3, #3
 8006194:	e006      	b.n	80061a4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	691b      	ldr	r3, [r3, #16]
 800619a:	f003 0320 	and.w	r3, r3, #32
 800619e:	2b20      	cmp	r3, #32
 80061a0:	d0f0      	beq.n	8006184 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80061a2:	2300      	movs	r3, #0
}
 80061a4:	4618      	mov	r0, r3
 80061a6:	3714      	adds	r7, #20
 80061a8:	46bd      	mov	sp, r7
 80061aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ae:	4770      	bx	lr
 80061b0:	00030d40 	.word	0x00030d40

080061b4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80061b4:	b480      	push	{r7}
 80061b6:	b085      	sub	sp, #20
 80061b8:	af00      	add	r7, sp, #0
 80061ba:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80061bc:	2300      	movs	r3, #0
 80061be:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	3301      	adds	r3, #1
 80061c4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	4a11      	ldr	r2, [pc, #68]	; (8006210 <USB_FlushRxFifo+0x5c>)
 80061ca:	4293      	cmp	r3, r2
 80061cc:	d901      	bls.n	80061d2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80061ce:	2303      	movs	r3, #3
 80061d0:	e018      	b.n	8006204 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	691b      	ldr	r3, [r3, #16]
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	daf2      	bge.n	80061c0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80061da:	2300      	movs	r3, #0
 80061dc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	2210      	movs	r2, #16
 80061e2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	3301      	adds	r3, #1
 80061e8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	4a08      	ldr	r2, [pc, #32]	; (8006210 <USB_FlushRxFifo+0x5c>)
 80061ee:	4293      	cmp	r3, r2
 80061f0:	d901      	bls.n	80061f6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80061f2:	2303      	movs	r3, #3
 80061f4:	e006      	b.n	8006204 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	691b      	ldr	r3, [r3, #16]
 80061fa:	f003 0310 	and.w	r3, r3, #16
 80061fe:	2b10      	cmp	r3, #16
 8006200:	d0f0      	beq.n	80061e4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006202:	2300      	movs	r3, #0
}
 8006204:	4618      	mov	r0, r3
 8006206:	3714      	adds	r7, #20
 8006208:	46bd      	mov	sp, r7
 800620a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800620e:	4770      	bx	lr
 8006210:	00030d40 	.word	0x00030d40

08006214 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006214:	b480      	push	{r7}
 8006216:	b085      	sub	sp, #20
 8006218:	af00      	add	r7, sp, #0
 800621a:	6078      	str	r0, [r7, #4]
 800621c:	460b      	mov	r3, r1
 800621e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800622a:	681a      	ldr	r2, [r3, #0]
 800622c:	78fb      	ldrb	r3, [r7, #3]
 800622e:	68f9      	ldr	r1, [r7, #12]
 8006230:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006234:	4313      	orrs	r3, r2
 8006236:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006238:	2300      	movs	r3, #0
}
 800623a:	4618      	mov	r0, r3
 800623c:	3714      	adds	r7, #20
 800623e:	46bd      	mov	sp, r7
 8006240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006244:	4770      	bx	lr

08006246 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8006246:	b480      	push	{r7}
 8006248:	b087      	sub	sp, #28
 800624a:	af00      	add	r7, sp, #0
 800624c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8006252:	693b      	ldr	r3, [r7, #16]
 8006254:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006258:	689b      	ldr	r3, [r3, #8]
 800625a:	f003 0306 	and.w	r3, r3, #6
 800625e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	2b00      	cmp	r3, #0
 8006264:	d102      	bne.n	800626c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8006266:	2300      	movs	r3, #0
 8006268:	75fb      	strb	r3, [r7, #23]
 800626a:	e00a      	b.n	8006282 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	2b02      	cmp	r3, #2
 8006270:	d002      	beq.n	8006278 <USB_GetDevSpeed+0x32>
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	2b06      	cmp	r3, #6
 8006276:	d102      	bne.n	800627e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8006278:	2302      	movs	r3, #2
 800627a:	75fb      	strb	r3, [r7, #23]
 800627c:	e001      	b.n	8006282 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800627e:	230f      	movs	r3, #15
 8006280:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8006282:	7dfb      	ldrb	r3, [r7, #23]
}
 8006284:	4618      	mov	r0, r3
 8006286:	371c      	adds	r7, #28
 8006288:	46bd      	mov	sp, r7
 800628a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800628e:	4770      	bx	lr

08006290 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006290:	b480      	push	{r7}
 8006292:	b085      	sub	sp, #20
 8006294:	af00      	add	r7, sp, #0
 8006296:	6078      	str	r0, [r7, #4]
 8006298:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800629e:	683b      	ldr	r3, [r7, #0]
 80062a0:	781b      	ldrb	r3, [r3, #0]
 80062a2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80062a4:	683b      	ldr	r3, [r7, #0]
 80062a6:	785b      	ldrb	r3, [r3, #1]
 80062a8:	2b01      	cmp	r3, #1
 80062aa:	d13a      	bne.n	8006322 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80062b2:	69da      	ldr	r2, [r3, #28]
 80062b4:	683b      	ldr	r3, [r7, #0]
 80062b6:	781b      	ldrb	r3, [r3, #0]
 80062b8:	f003 030f 	and.w	r3, r3, #15
 80062bc:	2101      	movs	r1, #1
 80062be:	fa01 f303 	lsl.w	r3, r1, r3
 80062c2:	b29b      	uxth	r3, r3
 80062c4:	68f9      	ldr	r1, [r7, #12]
 80062c6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80062ca:	4313      	orrs	r3, r2
 80062cc:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80062ce:	68bb      	ldr	r3, [r7, #8]
 80062d0:	015a      	lsls	r2, r3, #5
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	4413      	add	r3, r2
 80062d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d155      	bne.n	8006390 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80062e4:	68bb      	ldr	r3, [r7, #8]
 80062e6:	015a      	lsls	r2, r3, #5
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	4413      	add	r3, r2
 80062ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062f0:	681a      	ldr	r2, [r3, #0]
 80062f2:	683b      	ldr	r3, [r7, #0]
 80062f4:	68db      	ldr	r3, [r3, #12]
 80062f6:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80062fa:	683b      	ldr	r3, [r7, #0]
 80062fc:	791b      	ldrb	r3, [r3, #4]
 80062fe:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006300:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006302:	68bb      	ldr	r3, [r7, #8]
 8006304:	059b      	lsls	r3, r3, #22
 8006306:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006308:	4313      	orrs	r3, r2
 800630a:	68ba      	ldr	r2, [r7, #8]
 800630c:	0151      	lsls	r1, r2, #5
 800630e:	68fa      	ldr	r2, [r7, #12]
 8006310:	440a      	add	r2, r1
 8006312:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006316:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800631a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800631e:	6013      	str	r3, [r2, #0]
 8006320:	e036      	b.n	8006390 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006328:	69da      	ldr	r2, [r3, #28]
 800632a:	683b      	ldr	r3, [r7, #0]
 800632c:	781b      	ldrb	r3, [r3, #0]
 800632e:	f003 030f 	and.w	r3, r3, #15
 8006332:	2101      	movs	r1, #1
 8006334:	fa01 f303 	lsl.w	r3, r1, r3
 8006338:	041b      	lsls	r3, r3, #16
 800633a:	68f9      	ldr	r1, [r7, #12]
 800633c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006340:	4313      	orrs	r3, r2
 8006342:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8006344:	68bb      	ldr	r3, [r7, #8]
 8006346:	015a      	lsls	r2, r3, #5
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	4413      	add	r3, r2
 800634c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006356:	2b00      	cmp	r3, #0
 8006358:	d11a      	bne.n	8006390 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800635a:	68bb      	ldr	r3, [r7, #8]
 800635c:	015a      	lsls	r2, r3, #5
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	4413      	add	r3, r2
 8006362:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006366:	681a      	ldr	r2, [r3, #0]
 8006368:	683b      	ldr	r3, [r7, #0]
 800636a:	68db      	ldr	r3, [r3, #12]
 800636c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8006370:	683b      	ldr	r3, [r7, #0]
 8006372:	791b      	ldrb	r3, [r3, #4]
 8006374:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006376:	430b      	orrs	r3, r1
 8006378:	4313      	orrs	r3, r2
 800637a:	68ba      	ldr	r2, [r7, #8]
 800637c:	0151      	lsls	r1, r2, #5
 800637e:	68fa      	ldr	r2, [r7, #12]
 8006380:	440a      	add	r2, r1
 8006382:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006386:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800638a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800638e:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8006390:	2300      	movs	r3, #0
}
 8006392:	4618      	mov	r0, r3
 8006394:	3714      	adds	r7, #20
 8006396:	46bd      	mov	sp, r7
 8006398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800639c:	4770      	bx	lr
	...

080063a0 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80063a0:	b480      	push	{r7}
 80063a2:	b085      	sub	sp, #20
 80063a4:	af00      	add	r7, sp, #0
 80063a6:	6078      	str	r0, [r7, #4]
 80063a8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80063ae:	683b      	ldr	r3, [r7, #0]
 80063b0:	781b      	ldrb	r3, [r3, #0]
 80063b2:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80063b4:	683b      	ldr	r3, [r7, #0]
 80063b6:	785b      	ldrb	r3, [r3, #1]
 80063b8:	2b01      	cmp	r3, #1
 80063ba:	d161      	bne.n	8006480 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80063bc:	68bb      	ldr	r3, [r7, #8]
 80063be:	015a      	lsls	r2, r3, #5
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	4413      	add	r3, r2
 80063c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80063ce:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80063d2:	d11f      	bne.n	8006414 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80063d4:	68bb      	ldr	r3, [r7, #8]
 80063d6:	015a      	lsls	r2, r3, #5
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	4413      	add	r3, r2
 80063dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	68ba      	ldr	r2, [r7, #8]
 80063e4:	0151      	lsls	r1, r2, #5
 80063e6:	68fa      	ldr	r2, [r7, #12]
 80063e8:	440a      	add	r2, r1
 80063ea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80063ee:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80063f2:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80063f4:	68bb      	ldr	r3, [r7, #8]
 80063f6:	015a      	lsls	r2, r3, #5
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	4413      	add	r3, r2
 80063fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	68ba      	ldr	r2, [r7, #8]
 8006404:	0151      	lsls	r1, r2, #5
 8006406:	68fa      	ldr	r2, [r7, #12]
 8006408:	440a      	add	r2, r1
 800640a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800640e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006412:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800641a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800641c:	683b      	ldr	r3, [r7, #0]
 800641e:	781b      	ldrb	r3, [r3, #0]
 8006420:	f003 030f 	and.w	r3, r3, #15
 8006424:	2101      	movs	r1, #1
 8006426:	fa01 f303 	lsl.w	r3, r1, r3
 800642a:	b29b      	uxth	r3, r3
 800642c:	43db      	mvns	r3, r3
 800642e:	68f9      	ldr	r1, [r7, #12]
 8006430:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006434:	4013      	ands	r3, r2
 8006436:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800643e:	69da      	ldr	r2, [r3, #28]
 8006440:	683b      	ldr	r3, [r7, #0]
 8006442:	781b      	ldrb	r3, [r3, #0]
 8006444:	f003 030f 	and.w	r3, r3, #15
 8006448:	2101      	movs	r1, #1
 800644a:	fa01 f303 	lsl.w	r3, r1, r3
 800644e:	b29b      	uxth	r3, r3
 8006450:	43db      	mvns	r3, r3
 8006452:	68f9      	ldr	r1, [r7, #12]
 8006454:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006458:	4013      	ands	r3, r2
 800645a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800645c:	68bb      	ldr	r3, [r7, #8]
 800645e:	015a      	lsls	r2, r3, #5
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	4413      	add	r3, r2
 8006464:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006468:	681a      	ldr	r2, [r3, #0]
 800646a:	68bb      	ldr	r3, [r7, #8]
 800646c:	0159      	lsls	r1, r3, #5
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	440b      	add	r3, r1
 8006472:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006476:	4619      	mov	r1, r3
 8006478:	4b35      	ldr	r3, [pc, #212]	; (8006550 <USB_DeactivateEndpoint+0x1b0>)
 800647a:	4013      	ands	r3, r2
 800647c:	600b      	str	r3, [r1, #0]
 800647e:	e060      	b.n	8006542 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006480:	68bb      	ldr	r3, [r7, #8]
 8006482:	015a      	lsls	r2, r3, #5
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	4413      	add	r3, r2
 8006488:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006492:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006496:	d11f      	bne.n	80064d8 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8006498:	68bb      	ldr	r3, [r7, #8]
 800649a:	015a      	lsls	r2, r3, #5
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	4413      	add	r3, r2
 80064a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	68ba      	ldr	r2, [r7, #8]
 80064a8:	0151      	lsls	r1, r2, #5
 80064aa:	68fa      	ldr	r2, [r7, #12]
 80064ac:	440a      	add	r2, r1
 80064ae:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80064b2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80064b6:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80064b8:	68bb      	ldr	r3, [r7, #8]
 80064ba:	015a      	lsls	r2, r3, #5
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	4413      	add	r3, r2
 80064c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	68ba      	ldr	r2, [r7, #8]
 80064c8:	0151      	lsls	r1, r2, #5
 80064ca:	68fa      	ldr	r2, [r7, #12]
 80064cc:	440a      	add	r2, r1
 80064ce:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80064d2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80064d6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80064de:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80064e0:	683b      	ldr	r3, [r7, #0]
 80064e2:	781b      	ldrb	r3, [r3, #0]
 80064e4:	f003 030f 	and.w	r3, r3, #15
 80064e8:	2101      	movs	r1, #1
 80064ea:	fa01 f303 	lsl.w	r3, r1, r3
 80064ee:	041b      	lsls	r3, r3, #16
 80064f0:	43db      	mvns	r3, r3
 80064f2:	68f9      	ldr	r1, [r7, #12]
 80064f4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80064f8:	4013      	ands	r3, r2
 80064fa:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006502:	69da      	ldr	r2, [r3, #28]
 8006504:	683b      	ldr	r3, [r7, #0]
 8006506:	781b      	ldrb	r3, [r3, #0]
 8006508:	f003 030f 	and.w	r3, r3, #15
 800650c:	2101      	movs	r1, #1
 800650e:	fa01 f303 	lsl.w	r3, r1, r3
 8006512:	041b      	lsls	r3, r3, #16
 8006514:	43db      	mvns	r3, r3
 8006516:	68f9      	ldr	r1, [r7, #12]
 8006518:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800651c:	4013      	ands	r3, r2
 800651e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8006520:	68bb      	ldr	r3, [r7, #8]
 8006522:	015a      	lsls	r2, r3, #5
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	4413      	add	r3, r2
 8006528:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800652c:	681a      	ldr	r2, [r3, #0]
 800652e:	68bb      	ldr	r3, [r7, #8]
 8006530:	0159      	lsls	r1, r3, #5
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	440b      	add	r3, r1
 8006536:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800653a:	4619      	mov	r1, r3
 800653c:	4b05      	ldr	r3, [pc, #20]	; (8006554 <USB_DeactivateEndpoint+0x1b4>)
 800653e:	4013      	ands	r3, r2
 8006540:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8006542:	2300      	movs	r3, #0
}
 8006544:	4618      	mov	r0, r3
 8006546:	3714      	adds	r7, #20
 8006548:	46bd      	mov	sp, r7
 800654a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800654e:	4770      	bx	lr
 8006550:	ec337800 	.word	0xec337800
 8006554:	eff37800 	.word	0xeff37800

08006558 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006558:	b580      	push	{r7, lr}
 800655a:	b08a      	sub	sp, #40	; 0x28
 800655c:	af02      	add	r7, sp, #8
 800655e:	60f8      	str	r0, [r7, #12]
 8006560:	60b9      	str	r1, [r7, #8]
 8006562:	4613      	mov	r3, r2
 8006564:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800656a:	68bb      	ldr	r3, [r7, #8]
 800656c:	781b      	ldrb	r3, [r3, #0]
 800656e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006570:	68bb      	ldr	r3, [r7, #8]
 8006572:	785b      	ldrb	r3, [r3, #1]
 8006574:	2b01      	cmp	r3, #1
 8006576:	f040 815c 	bne.w	8006832 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800657a:	68bb      	ldr	r3, [r7, #8]
 800657c:	699b      	ldr	r3, [r3, #24]
 800657e:	2b00      	cmp	r3, #0
 8006580:	d132      	bne.n	80065e8 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006582:	69bb      	ldr	r3, [r7, #24]
 8006584:	015a      	lsls	r2, r3, #5
 8006586:	69fb      	ldr	r3, [r7, #28]
 8006588:	4413      	add	r3, r2
 800658a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800658e:	691b      	ldr	r3, [r3, #16]
 8006590:	69ba      	ldr	r2, [r7, #24]
 8006592:	0151      	lsls	r1, r2, #5
 8006594:	69fa      	ldr	r2, [r7, #28]
 8006596:	440a      	add	r2, r1
 8006598:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800659c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80065a0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80065a4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80065a6:	69bb      	ldr	r3, [r7, #24]
 80065a8:	015a      	lsls	r2, r3, #5
 80065aa:	69fb      	ldr	r3, [r7, #28]
 80065ac:	4413      	add	r3, r2
 80065ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80065b2:	691b      	ldr	r3, [r3, #16]
 80065b4:	69ba      	ldr	r2, [r7, #24]
 80065b6:	0151      	lsls	r1, r2, #5
 80065b8:	69fa      	ldr	r2, [r7, #28]
 80065ba:	440a      	add	r2, r1
 80065bc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80065c0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80065c4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80065c6:	69bb      	ldr	r3, [r7, #24]
 80065c8:	015a      	lsls	r2, r3, #5
 80065ca:	69fb      	ldr	r3, [r7, #28]
 80065cc:	4413      	add	r3, r2
 80065ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80065d2:	691b      	ldr	r3, [r3, #16]
 80065d4:	69ba      	ldr	r2, [r7, #24]
 80065d6:	0151      	lsls	r1, r2, #5
 80065d8:	69fa      	ldr	r2, [r7, #28]
 80065da:	440a      	add	r2, r1
 80065dc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80065e0:	0cdb      	lsrs	r3, r3, #19
 80065e2:	04db      	lsls	r3, r3, #19
 80065e4:	6113      	str	r3, [r2, #16]
 80065e6:	e074      	b.n	80066d2 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80065e8:	69bb      	ldr	r3, [r7, #24]
 80065ea:	015a      	lsls	r2, r3, #5
 80065ec:	69fb      	ldr	r3, [r7, #28]
 80065ee:	4413      	add	r3, r2
 80065f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80065f4:	691b      	ldr	r3, [r3, #16]
 80065f6:	69ba      	ldr	r2, [r7, #24]
 80065f8:	0151      	lsls	r1, r2, #5
 80065fa:	69fa      	ldr	r2, [r7, #28]
 80065fc:	440a      	add	r2, r1
 80065fe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006602:	0cdb      	lsrs	r3, r3, #19
 8006604:	04db      	lsls	r3, r3, #19
 8006606:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006608:	69bb      	ldr	r3, [r7, #24]
 800660a:	015a      	lsls	r2, r3, #5
 800660c:	69fb      	ldr	r3, [r7, #28]
 800660e:	4413      	add	r3, r2
 8006610:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006614:	691b      	ldr	r3, [r3, #16]
 8006616:	69ba      	ldr	r2, [r7, #24]
 8006618:	0151      	lsls	r1, r2, #5
 800661a:	69fa      	ldr	r2, [r7, #28]
 800661c:	440a      	add	r2, r1
 800661e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006622:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006626:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800662a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800662c:	69bb      	ldr	r3, [r7, #24]
 800662e:	015a      	lsls	r2, r3, #5
 8006630:	69fb      	ldr	r3, [r7, #28]
 8006632:	4413      	add	r3, r2
 8006634:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006638:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800663a:	68bb      	ldr	r3, [r7, #8]
 800663c:	6999      	ldr	r1, [r3, #24]
 800663e:	68bb      	ldr	r3, [r7, #8]
 8006640:	68db      	ldr	r3, [r3, #12]
 8006642:	440b      	add	r3, r1
 8006644:	1e59      	subs	r1, r3, #1
 8006646:	68bb      	ldr	r3, [r7, #8]
 8006648:	68db      	ldr	r3, [r3, #12]
 800664a:	fbb1 f3f3 	udiv	r3, r1, r3
 800664e:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8006650:	4b9d      	ldr	r3, [pc, #628]	; (80068c8 <USB_EPStartXfer+0x370>)
 8006652:	400b      	ands	r3, r1
 8006654:	69b9      	ldr	r1, [r7, #24]
 8006656:	0148      	lsls	r0, r1, #5
 8006658:	69f9      	ldr	r1, [r7, #28]
 800665a:	4401      	add	r1, r0
 800665c:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006660:	4313      	orrs	r3, r2
 8006662:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006664:	69bb      	ldr	r3, [r7, #24]
 8006666:	015a      	lsls	r2, r3, #5
 8006668:	69fb      	ldr	r3, [r7, #28]
 800666a:	4413      	add	r3, r2
 800666c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006670:	691a      	ldr	r2, [r3, #16]
 8006672:	68bb      	ldr	r3, [r7, #8]
 8006674:	699b      	ldr	r3, [r3, #24]
 8006676:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800667a:	69b9      	ldr	r1, [r7, #24]
 800667c:	0148      	lsls	r0, r1, #5
 800667e:	69f9      	ldr	r1, [r7, #28]
 8006680:	4401      	add	r1, r0
 8006682:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006686:	4313      	orrs	r3, r2
 8006688:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800668a:	68bb      	ldr	r3, [r7, #8]
 800668c:	791b      	ldrb	r3, [r3, #4]
 800668e:	2b01      	cmp	r3, #1
 8006690:	d11f      	bne.n	80066d2 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8006692:	69bb      	ldr	r3, [r7, #24]
 8006694:	015a      	lsls	r2, r3, #5
 8006696:	69fb      	ldr	r3, [r7, #28]
 8006698:	4413      	add	r3, r2
 800669a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800669e:	691b      	ldr	r3, [r3, #16]
 80066a0:	69ba      	ldr	r2, [r7, #24]
 80066a2:	0151      	lsls	r1, r2, #5
 80066a4:	69fa      	ldr	r2, [r7, #28]
 80066a6:	440a      	add	r2, r1
 80066a8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80066ac:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80066b0:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80066b2:	69bb      	ldr	r3, [r7, #24]
 80066b4:	015a      	lsls	r2, r3, #5
 80066b6:	69fb      	ldr	r3, [r7, #28]
 80066b8:	4413      	add	r3, r2
 80066ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066be:	691b      	ldr	r3, [r3, #16]
 80066c0:	69ba      	ldr	r2, [r7, #24]
 80066c2:	0151      	lsls	r1, r2, #5
 80066c4:	69fa      	ldr	r2, [r7, #28]
 80066c6:	440a      	add	r2, r1
 80066c8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80066cc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80066d0:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80066d2:	79fb      	ldrb	r3, [r7, #7]
 80066d4:	2b01      	cmp	r3, #1
 80066d6:	d14b      	bne.n	8006770 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80066d8:	68bb      	ldr	r3, [r7, #8]
 80066da:	695b      	ldr	r3, [r3, #20]
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d009      	beq.n	80066f4 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80066e0:	69bb      	ldr	r3, [r7, #24]
 80066e2:	015a      	lsls	r2, r3, #5
 80066e4:	69fb      	ldr	r3, [r7, #28]
 80066e6:	4413      	add	r3, r2
 80066e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066ec:	461a      	mov	r2, r3
 80066ee:	68bb      	ldr	r3, [r7, #8]
 80066f0:	695b      	ldr	r3, [r3, #20]
 80066f2:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80066f4:	68bb      	ldr	r3, [r7, #8]
 80066f6:	791b      	ldrb	r3, [r3, #4]
 80066f8:	2b01      	cmp	r3, #1
 80066fa:	d128      	bne.n	800674e <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80066fc:	69fb      	ldr	r3, [r7, #28]
 80066fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006702:	689b      	ldr	r3, [r3, #8]
 8006704:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006708:	2b00      	cmp	r3, #0
 800670a:	d110      	bne.n	800672e <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800670c:	69bb      	ldr	r3, [r7, #24]
 800670e:	015a      	lsls	r2, r3, #5
 8006710:	69fb      	ldr	r3, [r7, #28]
 8006712:	4413      	add	r3, r2
 8006714:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	69ba      	ldr	r2, [r7, #24]
 800671c:	0151      	lsls	r1, r2, #5
 800671e:	69fa      	ldr	r2, [r7, #28]
 8006720:	440a      	add	r2, r1
 8006722:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006726:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800672a:	6013      	str	r3, [r2, #0]
 800672c:	e00f      	b.n	800674e <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800672e:	69bb      	ldr	r3, [r7, #24]
 8006730:	015a      	lsls	r2, r3, #5
 8006732:	69fb      	ldr	r3, [r7, #28]
 8006734:	4413      	add	r3, r2
 8006736:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	69ba      	ldr	r2, [r7, #24]
 800673e:	0151      	lsls	r1, r2, #5
 8006740:	69fa      	ldr	r2, [r7, #28]
 8006742:	440a      	add	r2, r1
 8006744:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006748:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800674c:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800674e:	69bb      	ldr	r3, [r7, #24]
 8006750:	015a      	lsls	r2, r3, #5
 8006752:	69fb      	ldr	r3, [r7, #28]
 8006754:	4413      	add	r3, r2
 8006756:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	69ba      	ldr	r2, [r7, #24]
 800675e:	0151      	lsls	r1, r2, #5
 8006760:	69fa      	ldr	r2, [r7, #28]
 8006762:	440a      	add	r2, r1
 8006764:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006768:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800676c:	6013      	str	r3, [r2, #0]
 800676e:	e133      	b.n	80069d8 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006770:	69bb      	ldr	r3, [r7, #24]
 8006772:	015a      	lsls	r2, r3, #5
 8006774:	69fb      	ldr	r3, [r7, #28]
 8006776:	4413      	add	r3, r2
 8006778:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	69ba      	ldr	r2, [r7, #24]
 8006780:	0151      	lsls	r1, r2, #5
 8006782:	69fa      	ldr	r2, [r7, #28]
 8006784:	440a      	add	r2, r1
 8006786:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800678a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800678e:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006790:	68bb      	ldr	r3, [r7, #8]
 8006792:	791b      	ldrb	r3, [r3, #4]
 8006794:	2b01      	cmp	r3, #1
 8006796:	d015      	beq.n	80067c4 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8006798:	68bb      	ldr	r3, [r7, #8]
 800679a:	699b      	ldr	r3, [r3, #24]
 800679c:	2b00      	cmp	r3, #0
 800679e:	f000 811b 	beq.w	80069d8 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80067a2:	69fb      	ldr	r3, [r7, #28]
 80067a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80067a8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80067aa:	68bb      	ldr	r3, [r7, #8]
 80067ac:	781b      	ldrb	r3, [r3, #0]
 80067ae:	f003 030f 	and.w	r3, r3, #15
 80067b2:	2101      	movs	r1, #1
 80067b4:	fa01 f303 	lsl.w	r3, r1, r3
 80067b8:	69f9      	ldr	r1, [r7, #28]
 80067ba:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80067be:	4313      	orrs	r3, r2
 80067c0:	634b      	str	r3, [r1, #52]	; 0x34
 80067c2:	e109      	b.n	80069d8 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80067c4:	69fb      	ldr	r3, [r7, #28]
 80067c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80067ca:	689b      	ldr	r3, [r3, #8]
 80067cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d110      	bne.n	80067f6 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80067d4:	69bb      	ldr	r3, [r7, #24]
 80067d6:	015a      	lsls	r2, r3, #5
 80067d8:	69fb      	ldr	r3, [r7, #28]
 80067da:	4413      	add	r3, r2
 80067dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	69ba      	ldr	r2, [r7, #24]
 80067e4:	0151      	lsls	r1, r2, #5
 80067e6:	69fa      	ldr	r2, [r7, #28]
 80067e8:	440a      	add	r2, r1
 80067ea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80067ee:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80067f2:	6013      	str	r3, [r2, #0]
 80067f4:	e00f      	b.n	8006816 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80067f6:	69bb      	ldr	r3, [r7, #24]
 80067f8:	015a      	lsls	r2, r3, #5
 80067fa:	69fb      	ldr	r3, [r7, #28]
 80067fc:	4413      	add	r3, r2
 80067fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	69ba      	ldr	r2, [r7, #24]
 8006806:	0151      	lsls	r1, r2, #5
 8006808:	69fa      	ldr	r2, [r7, #28]
 800680a:	440a      	add	r2, r1
 800680c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006810:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006814:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8006816:	68bb      	ldr	r3, [r7, #8]
 8006818:	6919      	ldr	r1, [r3, #16]
 800681a:	68bb      	ldr	r3, [r7, #8]
 800681c:	781a      	ldrb	r2, [r3, #0]
 800681e:	68bb      	ldr	r3, [r7, #8]
 8006820:	699b      	ldr	r3, [r3, #24]
 8006822:	b298      	uxth	r0, r3
 8006824:	79fb      	ldrb	r3, [r7, #7]
 8006826:	9300      	str	r3, [sp, #0]
 8006828:	4603      	mov	r3, r0
 800682a:	68f8      	ldr	r0, [r7, #12]
 800682c:	f000 fade 	bl	8006dec <USB_WritePacket>
 8006830:	e0d2      	b.n	80069d8 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006832:	69bb      	ldr	r3, [r7, #24]
 8006834:	015a      	lsls	r2, r3, #5
 8006836:	69fb      	ldr	r3, [r7, #28]
 8006838:	4413      	add	r3, r2
 800683a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800683e:	691b      	ldr	r3, [r3, #16]
 8006840:	69ba      	ldr	r2, [r7, #24]
 8006842:	0151      	lsls	r1, r2, #5
 8006844:	69fa      	ldr	r2, [r7, #28]
 8006846:	440a      	add	r2, r1
 8006848:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800684c:	0cdb      	lsrs	r3, r3, #19
 800684e:	04db      	lsls	r3, r3, #19
 8006850:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006852:	69bb      	ldr	r3, [r7, #24]
 8006854:	015a      	lsls	r2, r3, #5
 8006856:	69fb      	ldr	r3, [r7, #28]
 8006858:	4413      	add	r3, r2
 800685a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800685e:	691b      	ldr	r3, [r3, #16]
 8006860:	69ba      	ldr	r2, [r7, #24]
 8006862:	0151      	lsls	r1, r2, #5
 8006864:	69fa      	ldr	r2, [r7, #28]
 8006866:	440a      	add	r2, r1
 8006868:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800686c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006870:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006874:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8006876:	68bb      	ldr	r3, [r7, #8]
 8006878:	699b      	ldr	r3, [r3, #24]
 800687a:	2b00      	cmp	r3, #0
 800687c:	d126      	bne.n	80068cc <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800687e:	69bb      	ldr	r3, [r7, #24]
 8006880:	015a      	lsls	r2, r3, #5
 8006882:	69fb      	ldr	r3, [r7, #28]
 8006884:	4413      	add	r3, r2
 8006886:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800688a:	691a      	ldr	r2, [r3, #16]
 800688c:	68bb      	ldr	r3, [r7, #8]
 800688e:	68db      	ldr	r3, [r3, #12]
 8006890:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006894:	69b9      	ldr	r1, [r7, #24]
 8006896:	0148      	lsls	r0, r1, #5
 8006898:	69f9      	ldr	r1, [r7, #28]
 800689a:	4401      	add	r1, r0
 800689c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80068a0:	4313      	orrs	r3, r2
 80068a2:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80068a4:	69bb      	ldr	r3, [r7, #24]
 80068a6:	015a      	lsls	r2, r3, #5
 80068a8:	69fb      	ldr	r3, [r7, #28]
 80068aa:	4413      	add	r3, r2
 80068ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80068b0:	691b      	ldr	r3, [r3, #16]
 80068b2:	69ba      	ldr	r2, [r7, #24]
 80068b4:	0151      	lsls	r1, r2, #5
 80068b6:	69fa      	ldr	r2, [r7, #28]
 80068b8:	440a      	add	r2, r1
 80068ba:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80068be:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80068c2:	6113      	str	r3, [r2, #16]
 80068c4:	e03a      	b.n	800693c <USB_EPStartXfer+0x3e4>
 80068c6:	bf00      	nop
 80068c8:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80068cc:	68bb      	ldr	r3, [r7, #8]
 80068ce:	699a      	ldr	r2, [r3, #24]
 80068d0:	68bb      	ldr	r3, [r7, #8]
 80068d2:	68db      	ldr	r3, [r3, #12]
 80068d4:	4413      	add	r3, r2
 80068d6:	1e5a      	subs	r2, r3, #1
 80068d8:	68bb      	ldr	r3, [r7, #8]
 80068da:	68db      	ldr	r3, [r3, #12]
 80068dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80068e0:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 80068e2:	68bb      	ldr	r3, [r7, #8]
 80068e4:	68db      	ldr	r3, [r3, #12]
 80068e6:	8afa      	ldrh	r2, [r7, #22]
 80068e8:	fb03 f202 	mul.w	r2, r3, r2
 80068ec:	68bb      	ldr	r3, [r7, #8]
 80068ee:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80068f0:	69bb      	ldr	r3, [r7, #24]
 80068f2:	015a      	lsls	r2, r3, #5
 80068f4:	69fb      	ldr	r3, [r7, #28]
 80068f6:	4413      	add	r3, r2
 80068f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80068fc:	691a      	ldr	r2, [r3, #16]
 80068fe:	8afb      	ldrh	r3, [r7, #22]
 8006900:	04d9      	lsls	r1, r3, #19
 8006902:	4b38      	ldr	r3, [pc, #224]	; (80069e4 <USB_EPStartXfer+0x48c>)
 8006904:	400b      	ands	r3, r1
 8006906:	69b9      	ldr	r1, [r7, #24]
 8006908:	0148      	lsls	r0, r1, #5
 800690a:	69f9      	ldr	r1, [r7, #28]
 800690c:	4401      	add	r1, r0
 800690e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006912:	4313      	orrs	r3, r2
 8006914:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8006916:	69bb      	ldr	r3, [r7, #24]
 8006918:	015a      	lsls	r2, r3, #5
 800691a:	69fb      	ldr	r3, [r7, #28]
 800691c:	4413      	add	r3, r2
 800691e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006922:	691a      	ldr	r2, [r3, #16]
 8006924:	68bb      	ldr	r3, [r7, #8]
 8006926:	69db      	ldr	r3, [r3, #28]
 8006928:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800692c:	69b9      	ldr	r1, [r7, #24]
 800692e:	0148      	lsls	r0, r1, #5
 8006930:	69f9      	ldr	r1, [r7, #28]
 8006932:	4401      	add	r1, r0
 8006934:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006938:	4313      	orrs	r3, r2
 800693a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800693c:	79fb      	ldrb	r3, [r7, #7]
 800693e:	2b01      	cmp	r3, #1
 8006940:	d10d      	bne.n	800695e <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8006942:	68bb      	ldr	r3, [r7, #8]
 8006944:	691b      	ldr	r3, [r3, #16]
 8006946:	2b00      	cmp	r3, #0
 8006948:	d009      	beq.n	800695e <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800694a:	68bb      	ldr	r3, [r7, #8]
 800694c:	6919      	ldr	r1, [r3, #16]
 800694e:	69bb      	ldr	r3, [r7, #24]
 8006950:	015a      	lsls	r2, r3, #5
 8006952:	69fb      	ldr	r3, [r7, #28]
 8006954:	4413      	add	r3, r2
 8006956:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800695a:	460a      	mov	r2, r1
 800695c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800695e:	68bb      	ldr	r3, [r7, #8]
 8006960:	791b      	ldrb	r3, [r3, #4]
 8006962:	2b01      	cmp	r3, #1
 8006964:	d128      	bne.n	80069b8 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006966:	69fb      	ldr	r3, [r7, #28]
 8006968:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800696c:	689b      	ldr	r3, [r3, #8]
 800696e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006972:	2b00      	cmp	r3, #0
 8006974:	d110      	bne.n	8006998 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8006976:	69bb      	ldr	r3, [r7, #24]
 8006978:	015a      	lsls	r2, r3, #5
 800697a:	69fb      	ldr	r3, [r7, #28]
 800697c:	4413      	add	r3, r2
 800697e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	69ba      	ldr	r2, [r7, #24]
 8006986:	0151      	lsls	r1, r2, #5
 8006988:	69fa      	ldr	r2, [r7, #28]
 800698a:	440a      	add	r2, r1
 800698c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006990:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006994:	6013      	str	r3, [r2, #0]
 8006996:	e00f      	b.n	80069b8 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8006998:	69bb      	ldr	r3, [r7, #24]
 800699a:	015a      	lsls	r2, r3, #5
 800699c:	69fb      	ldr	r3, [r7, #28]
 800699e:	4413      	add	r3, r2
 80069a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	69ba      	ldr	r2, [r7, #24]
 80069a8:	0151      	lsls	r1, r2, #5
 80069aa:	69fa      	ldr	r2, [r7, #28]
 80069ac:	440a      	add	r2, r1
 80069ae:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80069b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80069b6:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80069b8:	69bb      	ldr	r3, [r7, #24]
 80069ba:	015a      	lsls	r2, r3, #5
 80069bc:	69fb      	ldr	r3, [r7, #28]
 80069be:	4413      	add	r3, r2
 80069c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	69ba      	ldr	r2, [r7, #24]
 80069c8:	0151      	lsls	r1, r2, #5
 80069ca:	69fa      	ldr	r2, [r7, #28]
 80069cc:	440a      	add	r2, r1
 80069ce:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80069d2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80069d6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80069d8:	2300      	movs	r3, #0
}
 80069da:	4618      	mov	r0, r3
 80069dc:	3720      	adds	r7, #32
 80069de:	46bd      	mov	sp, r7
 80069e0:	bd80      	pop	{r7, pc}
 80069e2:	bf00      	nop
 80069e4:	1ff80000 	.word	0x1ff80000

080069e8 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80069e8:	b480      	push	{r7}
 80069ea:	b087      	sub	sp, #28
 80069ec:	af00      	add	r7, sp, #0
 80069ee:	60f8      	str	r0, [r7, #12]
 80069f0:	60b9      	str	r1, [r7, #8]
 80069f2:	4613      	mov	r3, r2
 80069f4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80069fa:	68bb      	ldr	r3, [r7, #8]
 80069fc:	781b      	ldrb	r3, [r3, #0]
 80069fe:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006a00:	68bb      	ldr	r3, [r7, #8]
 8006a02:	785b      	ldrb	r3, [r3, #1]
 8006a04:	2b01      	cmp	r3, #1
 8006a06:	f040 80ce 	bne.w	8006ba6 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8006a0a:	68bb      	ldr	r3, [r7, #8]
 8006a0c:	699b      	ldr	r3, [r3, #24]
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d132      	bne.n	8006a78 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006a12:	693b      	ldr	r3, [r7, #16]
 8006a14:	015a      	lsls	r2, r3, #5
 8006a16:	697b      	ldr	r3, [r7, #20]
 8006a18:	4413      	add	r3, r2
 8006a1a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a1e:	691b      	ldr	r3, [r3, #16]
 8006a20:	693a      	ldr	r2, [r7, #16]
 8006a22:	0151      	lsls	r1, r2, #5
 8006a24:	697a      	ldr	r2, [r7, #20]
 8006a26:	440a      	add	r2, r1
 8006a28:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006a2c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006a30:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006a34:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006a36:	693b      	ldr	r3, [r7, #16]
 8006a38:	015a      	lsls	r2, r3, #5
 8006a3a:	697b      	ldr	r3, [r7, #20]
 8006a3c:	4413      	add	r3, r2
 8006a3e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a42:	691b      	ldr	r3, [r3, #16]
 8006a44:	693a      	ldr	r2, [r7, #16]
 8006a46:	0151      	lsls	r1, r2, #5
 8006a48:	697a      	ldr	r2, [r7, #20]
 8006a4a:	440a      	add	r2, r1
 8006a4c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006a50:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006a54:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006a56:	693b      	ldr	r3, [r7, #16]
 8006a58:	015a      	lsls	r2, r3, #5
 8006a5a:	697b      	ldr	r3, [r7, #20]
 8006a5c:	4413      	add	r3, r2
 8006a5e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a62:	691b      	ldr	r3, [r3, #16]
 8006a64:	693a      	ldr	r2, [r7, #16]
 8006a66:	0151      	lsls	r1, r2, #5
 8006a68:	697a      	ldr	r2, [r7, #20]
 8006a6a:	440a      	add	r2, r1
 8006a6c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006a70:	0cdb      	lsrs	r3, r3, #19
 8006a72:	04db      	lsls	r3, r3, #19
 8006a74:	6113      	str	r3, [r2, #16]
 8006a76:	e04e      	b.n	8006b16 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006a78:	693b      	ldr	r3, [r7, #16]
 8006a7a:	015a      	lsls	r2, r3, #5
 8006a7c:	697b      	ldr	r3, [r7, #20]
 8006a7e:	4413      	add	r3, r2
 8006a80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a84:	691b      	ldr	r3, [r3, #16]
 8006a86:	693a      	ldr	r2, [r7, #16]
 8006a88:	0151      	lsls	r1, r2, #5
 8006a8a:	697a      	ldr	r2, [r7, #20]
 8006a8c:	440a      	add	r2, r1
 8006a8e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006a92:	0cdb      	lsrs	r3, r3, #19
 8006a94:	04db      	lsls	r3, r3, #19
 8006a96:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006a98:	693b      	ldr	r3, [r7, #16]
 8006a9a:	015a      	lsls	r2, r3, #5
 8006a9c:	697b      	ldr	r3, [r7, #20]
 8006a9e:	4413      	add	r3, r2
 8006aa0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006aa4:	691b      	ldr	r3, [r3, #16]
 8006aa6:	693a      	ldr	r2, [r7, #16]
 8006aa8:	0151      	lsls	r1, r2, #5
 8006aaa:	697a      	ldr	r2, [r7, #20]
 8006aac:	440a      	add	r2, r1
 8006aae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006ab2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006ab6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006aba:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8006abc:	68bb      	ldr	r3, [r7, #8]
 8006abe:	699a      	ldr	r2, [r3, #24]
 8006ac0:	68bb      	ldr	r3, [r7, #8]
 8006ac2:	68db      	ldr	r3, [r3, #12]
 8006ac4:	429a      	cmp	r2, r3
 8006ac6:	d903      	bls.n	8006ad0 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8006ac8:	68bb      	ldr	r3, [r7, #8]
 8006aca:	68da      	ldr	r2, [r3, #12]
 8006acc:	68bb      	ldr	r3, [r7, #8]
 8006ace:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006ad0:	693b      	ldr	r3, [r7, #16]
 8006ad2:	015a      	lsls	r2, r3, #5
 8006ad4:	697b      	ldr	r3, [r7, #20]
 8006ad6:	4413      	add	r3, r2
 8006ad8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006adc:	691b      	ldr	r3, [r3, #16]
 8006ade:	693a      	ldr	r2, [r7, #16]
 8006ae0:	0151      	lsls	r1, r2, #5
 8006ae2:	697a      	ldr	r2, [r7, #20]
 8006ae4:	440a      	add	r2, r1
 8006ae6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006aea:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006aee:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006af0:	693b      	ldr	r3, [r7, #16]
 8006af2:	015a      	lsls	r2, r3, #5
 8006af4:	697b      	ldr	r3, [r7, #20]
 8006af6:	4413      	add	r3, r2
 8006af8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006afc:	691a      	ldr	r2, [r3, #16]
 8006afe:	68bb      	ldr	r3, [r7, #8]
 8006b00:	699b      	ldr	r3, [r3, #24]
 8006b02:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006b06:	6939      	ldr	r1, [r7, #16]
 8006b08:	0148      	lsls	r0, r1, #5
 8006b0a:	6979      	ldr	r1, [r7, #20]
 8006b0c:	4401      	add	r1, r0
 8006b0e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006b12:	4313      	orrs	r3, r2
 8006b14:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8006b16:	79fb      	ldrb	r3, [r7, #7]
 8006b18:	2b01      	cmp	r3, #1
 8006b1a:	d11e      	bne.n	8006b5a <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006b1c:	68bb      	ldr	r3, [r7, #8]
 8006b1e:	695b      	ldr	r3, [r3, #20]
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d009      	beq.n	8006b38 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006b24:	693b      	ldr	r3, [r7, #16]
 8006b26:	015a      	lsls	r2, r3, #5
 8006b28:	697b      	ldr	r3, [r7, #20]
 8006b2a:	4413      	add	r3, r2
 8006b2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b30:	461a      	mov	r2, r3
 8006b32:	68bb      	ldr	r3, [r7, #8]
 8006b34:	695b      	ldr	r3, [r3, #20]
 8006b36:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006b38:	693b      	ldr	r3, [r7, #16]
 8006b3a:	015a      	lsls	r2, r3, #5
 8006b3c:	697b      	ldr	r3, [r7, #20]
 8006b3e:	4413      	add	r3, r2
 8006b40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	693a      	ldr	r2, [r7, #16]
 8006b48:	0151      	lsls	r1, r2, #5
 8006b4a:	697a      	ldr	r2, [r7, #20]
 8006b4c:	440a      	add	r2, r1
 8006b4e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006b52:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006b56:	6013      	str	r3, [r2, #0]
 8006b58:	e097      	b.n	8006c8a <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006b5a:	693b      	ldr	r3, [r7, #16]
 8006b5c:	015a      	lsls	r2, r3, #5
 8006b5e:	697b      	ldr	r3, [r7, #20]
 8006b60:	4413      	add	r3, r2
 8006b62:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	693a      	ldr	r2, [r7, #16]
 8006b6a:	0151      	lsls	r1, r2, #5
 8006b6c:	697a      	ldr	r2, [r7, #20]
 8006b6e:	440a      	add	r2, r1
 8006b70:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006b74:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006b78:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8006b7a:	68bb      	ldr	r3, [r7, #8]
 8006b7c:	699b      	ldr	r3, [r3, #24]
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	f000 8083 	beq.w	8006c8a <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8006b84:	697b      	ldr	r3, [r7, #20]
 8006b86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b8a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006b8c:	68bb      	ldr	r3, [r7, #8]
 8006b8e:	781b      	ldrb	r3, [r3, #0]
 8006b90:	f003 030f 	and.w	r3, r3, #15
 8006b94:	2101      	movs	r1, #1
 8006b96:	fa01 f303 	lsl.w	r3, r1, r3
 8006b9a:	6979      	ldr	r1, [r7, #20]
 8006b9c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006ba0:	4313      	orrs	r3, r2
 8006ba2:	634b      	str	r3, [r1, #52]	; 0x34
 8006ba4:	e071      	b.n	8006c8a <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006ba6:	693b      	ldr	r3, [r7, #16]
 8006ba8:	015a      	lsls	r2, r3, #5
 8006baa:	697b      	ldr	r3, [r7, #20]
 8006bac:	4413      	add	r3, r2
 8006bae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006bb2:	691b      	ldr	r3, [r3, #16]
 8006bb4:	693a      	ldr	r2, [r7, #16]
 8006bb6:	0151      	lsls	r1, r2, #5
 8006bb8:	697a      	ldr	r2, [r7, #20]
 8006bba:	440a      	add	r2, r1
 8006bbc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006bc0:	0cdb      	lsrs	r3, r3, #19
 8006bc2:	04db      	lsls	r3, r3, #19
 8006bc4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006bc6:	693b      	ldr	r3, [r7, #16]
 8006bc8:	015a      	lsls	r2, r3, #5
 8006bca:	697b      	ldr	r3, [r7, #20]
 8006bcc:	4413      	add	r3, r2
 8006bce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006bd2:	691b      	ldr	r3, [r3, #16]
 8006bd4:	693a      	ldr	r2, [r7, #16]
 8006bd6:	0151      	lsls	r1, r2, #5
 8006bd8:	697a      	ldr	r2, [r7, #20]
 8006bda:	440a      	add	r2, r1
 8006bdc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006be0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006be4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006be8:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8006bea:	68bb      	ldr	r3, [r7, #8]
 8006bec:	699b      	ldr	r3, [r3, #24]
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d003      	beq.n	8006bfa <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8006bf2:	68bb      	ldr	r3, [r7, #8]
 8006bf4:	68da      	ldr	r2, [r3, #12]
 8006bf6:	68bb      	ldr	r3, [r7, #8]
 8006bf8:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8006bfa:	68bb      	ldr	r3, [r7, #8]
 8006bfc:	68da      	ldr	r2, [r3, #12]
 8006bfe:	68bb      	ldr	r3, [r7, #8]
 8006c00:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006c02:	693b      	ldr	r3, [r7, #16]
 8006c04:	015a      	lsls	r2, r3, #5
 8006c06:	697b      	ldr	r3, [r7, #20]
 8006c08:	4413      	add	r3, r2
 8006c0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c0e:	691b      	ldr	r3, [r3, #16]
 8006c10:	693a      	ldr	r2, [r7, #16]
 8006c12:	0151      	lsls	r1, r2, #5
 8006c14:	697a      	ldr	r2, [r7, #20]
 8006c16:	440a      	add	r2, r1
 8006c18:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006c1c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006c20:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8006c22:	693b      	ldr	r3, [r7, #16]
 8006c24:	015a      	lsls	r2, r3, #5
 8006c26:	697b      	ldr	r3, [r7, #20]
 8006c28:	4413      	add	r3, r2
 8006c2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c2e:	691a      	ldr	r2, [r3, #16]
 8006c30:	68bb      	ldr	r3, [r7, #8]
 8006c32:	69db      	ldr	r3, [r3, #28]
 8006c34:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006c38:	6939      	ldr	r1, [r7, #16]
 8006c3a:	0148      	lsls	r0, r1, #5
 8006c3c:	6979      	ldr	r1, [r7, #20]
 8006c3e:	4401      	add	r1, r0
 8006c40:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006c44:	4313      	orrs	r3, r2
 8006c46:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8006c48:	79fb      	ldrb	r3, [r7, #7]
 8006c4a:	2b01      	cmp	r3, #1
 8006c4c:	d10d      	bne.n	8006c6a <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8006c4e:	68bb      	ldr	r3, [r7, #8]
 8006c50:	691b      	ldr	r3, [r3, #16]
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d009      	beq.n	8006c6a <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8006c56:	68bb      	ldr	r3, [r7, #8]
 8006c58:	6919      	ldr	r1, [r3, #16]
 8006c5a:	693b      	ldr	r3, [r7, #16]
 8006c5c:	015a      	lsls	r2, r3, #5
 8006c5e:	697b      	ldr	r3, [r7, #20]
 8006c60:	4413      	add	r3, r2
 8006c62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c66:	460a      	mov	r2, r1
 8006c68:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006c6a:	693b      	ldr	r3, [r7, #16]
 8006c6c:	015a      	lsls	r2, r3, #5
 8006c6e:	697b      	ldr	r3, [r7, #20]
 8006c70:	4413      	add	r3, r2
 8006c72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	693a      	ldr	r2, [r7, #16]
 8006c7a:	0151      	lsls	r1, r2, #5
 8006c7c:	697a      	ldr	r2, [r7, #20]
 8006c7e:	440a      	add	r2, r1
 8006c80:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006c84:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006c88:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006c8a:	2300      	movs	r3, #0
}
 8006c8c:	4618      	mov	r0, r3
 8006c8e:	371c      	adds	r7, #28
 8006c90:	46bd      	mov	sp, r7
 8006c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c96:	4770      	bx	lr

08006c98 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006c98:	b480      	push	{r7}
 8006c9a:	b087      	sub	sp, #28
 8006c9c:	af00      	add	r7, sp, #0
 8006c9e:	6078      	str	r0, [r7, #4]
 8006ca0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006ca2:	2300      	movs	r3, #0
 8006ca4:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8006ca6:	2300      	movs	r3, #0
 8006ca8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006cae:	683b      	ldr	r3, [r7, #0]
 8006cb0:	785b      	ldrb	r3, [r3, #1]
 8006cb2:	2b01      	cmp	r3, #1
 8006cb4:	d14a      	bne.n	8006d4c <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006cb6:	683b      	ldr	r3, [r7, #0]
 8006cb8:	781b      	ldrb	r3, [r3, #0]
 8006cba:	015a      	lsls	r2, r3, #5
 8006cbc:	693b      	ldr	r3, [r7, #16]
 8006cbe:	4413      	add	r3, r2
 8006cc0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006cca:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006cce:	f040 8086 	bne.w	8006dde <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8006cd2:	683b      	ldr	r3, [r7, #0]
 8006cd4:	781b      	ldrb	r3, [r3, #0]
 8006cd6:	015a      	lsls	r2, r3, #5
 8006cd8:	693b      	ldr	r3, [r7, #16]
 8006cda:	4413      	add	r3, r2
 8006cdc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	683a      	ldr	r2, [r7, #0]
 8006ce4:	7812      	ldrb	r2, [r2, #0]
 8006ce6:	0151      	lsls	r1, r2, #5
 8006ce8:	693a      	ldr	r2, [r7, #16]
 8006cea:	440a      	add	r2, r1
 8006cec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006cf0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006cf4:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8006cf6:	683b      	ldr	r3, [r7, #0]
 8006cf8:	781b      	ldrb	r3, [r3, #0]
 8006cfa:	015a      	lsls	r2, r3, #5
 8006cfc:	693b      	ldr	r3, [r7, #16]
 8006cfe:	4413      	add	r3, r2
 8006d00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	683a      	ldr	r2, [r7, #0]
 8006d08:	7812      	ldrb	r2, [r2, #0]
 8006d0a:	0151      	lsls	r1, r2, #5
 8006d0c:	693a      	ldr	r2, [r7, #16]
 8006d0e:	440a      	add	r2, r1
 8006d10:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006d14:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006d18:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	3301      	adds	r3, #1
 8006d1e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	f242 7210 	movw	r2, #10000	; 0x2710
 8006d26:	4293      	cmp	r3, r2
 8006d28:	d902      	bls.n	8006d30 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8006d2a:	2301      	movs	r3, #1
 8006d2c:	75fb      	strb	r3, [r7, #23]
          break;
 8006d2e:	e056      	b.n	8006dde <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8006d30:	683b      	ldr	r3, [r7, #0]
 8006d32:	781b      	ldrb	r3, [r3, #0]
 8006d34:	015a      	lsls	r2, r3, #5
 8006d36:	693b      	ldr	r3, [r7, #16]
 8006d38:	4413      	add	r3, r2
 8006d3a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006d44:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006d48:	d0e7      	beq.n	8006d1a <USB_EPStopXfer+0x82>
 8006d4a:	e048      	b.n	8006dde <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006d4c:	683b      	ldr	r3, [r7, #0]
 8006d4e:	781b      	ldrb	r3, [r3, #0]
 8006d50:	015a      	lsls	r2, r3, #5
 8006d52:	693b      	ldr	r3, [r7, #16]
 8006d54:	4413      	add	r3, r2
 8006d56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006d60:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006d64:	d13b      	bne.n	8006dde <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8006d66:	683b      	ldr	r3, [r7, #0]
 8006d68:	781b      	ldrb	r3, [r3, #0]
 8006d6a:	015a      	lsls	r2, r3, #5
 8006d6c:	693b      	ldr	r3, [r7, #16]
 8006d6e:	4413      	add	r3, r2
 8006d70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	683a      	ldr	r2, [r7, #0]
 8006d78:	7812      	ldrb	r2, [r2, #0]
 8006d7a:	0151      	lsls	r1, r2, #5
 8006d7c:	693a      	ldr	r2, [r7, #16]
 8006d7e:	440a      	add	r2, r1
 8006d80:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006d84:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006d88:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8006d8a:	683b      	ldr	r3, [r7, #0]
 8006d8c:	781b      	ldrb	r3, [r3, #0]
 8006d8e:	015a      	lsls	r2, r3, #5
 8006d90:	693b      	ldr	r3, [r7, #16]
 8006d92:	4413      	add	r3, r2
 8006d94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	683a      	ldr	r2, [r7, #0]
 8006d9c:	7812      	ldrb	r2, [r2, #0]
 8006d9e:	0151      	lsls	r1, r2, #5
 8006da0:	693a      	ldr	r2, [r7, #16]
 8006da2:	440a      	add	r2, r1
 8006da4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006da8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006dac:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	3301      	adds	r3, #1
 8006db2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	f242 7210 	movw	r2, #10000	; 0x2710
 8006dba:	4293      	cmp	r3, r2
 8006dbc:	d902      	bls.n	8006dc4 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8006dbe:	2301      	movs	r3, #1
 8006dc0:	75fb      	strb	r3, [r7, #23]
          break;
 8006dc2:	e00c      	b.n	8006dde <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8006dc4:	683b      	ldr	r3, [r7, #0]
 8006dc6:	781b      	ldrb	r3, [r3, #0]
 8006dc8:	015a      	lsls	r2, r3, #5
 8006dca:	693b      	ldr	r3, [r7, #16]
 8006dcc:	4413      	add	r3, r2
 8006dce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006dd8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006ddc:	d0e7      	beq.n	8006dae <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8006dde:	7dfb      	ldrb	r3, [r7, #23]
}
 8006de0:	4618      	mov	r0, r3
 8006de2:	371c      	adds	r7, #28
 8006de4:	46bd      	mov	sp, r7
 8006de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dea:	4770      	bx	lr

08006dec <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8006dec:	b480      	push	{r7}
 8006dee:	b089      	sub	sp, #36	; 0x24
 8006df0:	af00      	add	r7, sp, #0
 8006df2:	60f8      	str	r0, [r7, #12]
 8006df4:	60b9      	str	r1, [r7, #8]
 8006df6:	4611      	mov	r1, r2
 8006df8:	461a      	mov	r2, r3
 8006dfa:	460b      	mov	r3, r1
 8006dfc:	71fb      	strb	r3, [r7, #7]
 8006dfe:	4613      	mov	r3, r2
 8006e00:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8006e06:	68bb      	ldr	r3, [r7, #8]
 8006e08:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8006e0a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d123      	bne.n	8006e5a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8006e12:	88bb      	ldrh	r3, [r7, #4]
 8006e14:	3303      	adds	r3, #3
 8006e16:	089b      	lsrs	r3, r3, #2
 8006e18:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8006e1a:	2300      	movs	r3, #0
 8006e1c:	61bb      	str	r3, [r7, #24]
 8006e1e:	e018      	b.n	8006e52 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006e20:	79fb      	ldrb	r3, [r7, #7]
 8006e22:	031a      	lsls	r2, r3, #12
 8006e24:	697b      	ldr	r3, [r7, #20]
 8006e26:	4413      	add	r3, r2
 8006e28:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006e2c:	461a      	mov	r2, r3
 8006e2e:	69fb      	ldr	r3, [r7, #28]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006e34:	69fb      	ldr	r3, [r7, #28]
 8006e36:	3301      	adds	r3, #1
 8006e38:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006e3a:	69fb      	ldr	r3, [r7, #28]
 8006e3c:	3301      	adds	r3, #1
 8006e3e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006e40:	69fb      	ldr	r3, [r7, #28]
 8006e42:	3301      	adds	r3, #1
 8006e44:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006e46:	69fb      	ldr	r3, [r7, #28]
 8006e48:	3301      	adds	r3, #1
 8006e4a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006e4c:	69bb      	ldr	r3, [r7, #24]
 8006e4e:	3301      	adds	r3, #1
 8006e50:	61bb      	str	r3, [r7, #24]
 8006e52:	69ba      	ldr	r2, [r7, #24]
 8006e54:	693b      	ldr	r3, [r7, #16]
 8006e56:	429a      	cmp	r2, r3
 8006e58:	d3e2      	bcc.n	8006e20 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8006e5a:	2300      	movs	r3, #0
}
 8006e5c:	4618      	mov	r0, r3
 8006e5e:	3724      	adds	r7, #36	; 0x24
 8006e60:	46bd      	mov	sp, r7
 8006e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e66:	4770      	bx	lr

08006e68 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006e68:	b480      	push	{r7}
 8006e6a:	b08b      	sub	sp, #44	; 0x2c
 8006e6c:	af00      	add	r7, sp, #0
 8006e6e:	60f8      	str	r0, [r7, #12]
 8006e70:	60b9      	str	r1, [r7, #8]
 8006e72:	4613      	mov	r3, r2
 8006e74:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8006e7a:	68bb      	ldr	r3, [r7, #8]
 8006e7c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8006e7e:	88fb      	ldrh	r3, [r7, #6]
 8006e80:	089b      	lsrs	r3, r3, #2
 8006e82:	b29b      	uxth	r3, r3
 8006e84:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8006e86:	88fb      	ldrh	r3, [r7, #6]
 8006e88:	f003 0303 	and.w	r3, r3, #3
 8006e8c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8006e8e:	2300      	movs	r3, #0
 8006e90:	623b      	str	r3, [r7, #32]
 8006e92:	e014      	b.n	8006ebe <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006e94:	69bb      	ldr	r3, [r7, #24]
 8006e96:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006e9a:	681a      	ldr	r2, [r3, #0]
 8006e9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e9e:	601a      	str	r2, [r3, #0]
    pDest++;
 8006ea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ea2:	3301      	adds	r3, #1
 8006ea4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006ea6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ea8:	3301      	adds	r3, #1
 8006eaa:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006eac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006eae:	3301      	adds	r3, #1
 8006eb0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006eb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006eb4:	3301      	adds	r3, #1
 8006eb6:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8006eb8:	6a3b      	ldr	r3, [r7, #32]
 8006eba:	3301      	adds	r3, #1
 8006ebc:	623b      	str	r3, [r7, #32]
 8006ebe:	6a3a      	ldr	r2, [r7, #32]
 8006ec0:	697b      	ldr	r3, [r7, #20]
 8006ec2:	429a      	cmp	r2, r3
 8006ec4:	d3e6      	bcc.n	8006e94 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8006ec6:	8bfb      	ldrh	r3, [r7, #30]
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d01e      	beq.n	8006f0a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8006ecc:	2300      	movs	r3, #0
 8006ece:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8006ed0:	69bb      	ldr	r3, [r7, #24]
 8006ed2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006ed6:	461a      	mov	r2, r3
 8006ed8:	f107 0310 	add.w	r3, r7, #16
 8006edc:	6812      	ldr	r2, [r2, #0]
 8006ede:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8006ee0:	693a      	ldr	r2, [r7, #16]
 8006ee2:	6a3b      	ldr	r3, [r7, #32]
 8006ee4:	b2db      	uxtb	r3, r3
 8006ee6:	00db      	lsls	r3, r3, #3
 8006ee8:	fa22 f303 	lsr.w	r3, r2, r3
 8006eec:	b2da      	uxtb	r2, r3
 8006eee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ef0:	701a      	strb	r2, [r3, #0]
      i++;
 8006ef2:	6a3b      	ldr	r3, [r7, #32]
 8006ef4:	3301      	adds	r3, #1
 8006ef6:	623b      	str	r3, [r7, #32]
      pDest++;
 8006ef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006efa:	3301      	adds	r3, #1
 8006efc:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8006efe:	8bfb      	ldrh	r3, [r7, #30]
 8006f00:	3b01      	subs	r3, #1
 8006f02:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8006f04:	8bfb      	ldrh	r3, [r7, #30]
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d1ea      	bne.n	8006ee0 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8006f0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006f0c:	4618      	mov	r0, r3
 8006f0e:	372c      	adds	r7, #44	; 0x2c
 8006f10:	46bd      	mov	sp, r7
 8006f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f16:	4770      	bx	lr

08006f18 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006f18:	b480      	push	{r7}
 8006f1a:	b085      	sub	sp, #20
 8006f1c:	af00      	add	r7, sp, #0
 8006f1e:	6078      	str	r0, [r7, #4]
 8006f20:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006f26:	683b      	ldr	r3, [r7, #0]
 8006f28:	781b      	ldrb	r3, [r3, #0]
 8006f2a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006f2c:	683b      	ldr	r3, [r7, #0]
 8006f2e:	785b      	ldrb	r3, [r3, #1]
 8006f30:	2b01      	cmp	r3, #1
 8006f32:	d12c      	bne.n	8006f8e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006f34:	68bb      	ldr	r3, [r7, #8]
 8006f36:	015a      	lsls	r2, r3, #5
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	4413      	add	r3, r2
 8006f3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	db12      	blt.n	8006f6c <USB_EPSetStall+0x54>
 8006f46:	68bb      	ldr	r3, [r7, #8]
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d00f      	beq.n	8006f6c <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8006f4c:	68bb      	ldr	r3, [r7, #8]
 8006f4e:	015a      	lsls	r2, r3, #5
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	4413      	add	r3, r2
 8006f54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	68ba      	ldr	r2, [r7, #8]
 8006f5c:	0151      	lsls	r1, r2, #5
 8006f5e:	68fa      	ldr	r2, [r7, #12]
 8006f60:	440a      	add	r2, r1
 8006f62:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006f66:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006f6a:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8006f6c:	68bb      	ldr	r3, [r7, #8]
 8006f6e:	015a      	lsls	r2, r3, #5
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	4413      	add	r3, r2
 8006f74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	68ba      	ldr	r2, [r7, #8]
 8006f7c:	0151      	lsls	r1, r2, #5
 8006f7e:	68fa      	ldr	r2, [r7, #12]
 8006f80:	440a      	add	r2, r1
 8006f82:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006f86:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006f8a:	6013      	str	r3, [r2, #0]
 8006f8c:	e02b      	b.n	8006fe6 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006f8e:	68bb      	ldr	r3, [r7, #8]
 8006f90:	015a      	lsls	r2, r3, #5
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	4413      	add	r3, r2
 8006f96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	db12      	blt.n	8006fc6 <USB_EPSetStall+0xae>
 8006fa0:	68bb      	ldr	r3, [r7, #8]
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d00f      	beq.n	8006fc6 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8006fa6:	68bb      	ldr	r3, [r7, #8]
 8006fa8:	015a      	lsls	r2, r3, #5
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	4413      	add	r3, r2
 8006fae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	68ba      	ldr	r2, [r7, #8]
 8006fb6:	0151      	lsls	r1, r2, #5
 8006fb8:	68fa      	ldr	r2, [r7, #12]
 8006fba:	440a      	add	r2, r1
 8006fbc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006fc0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006fc4:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8006fc6:	68bb      	ldr	r3, [r7, #8]
 8006fc8:	015a      	lsls	r2, r3, #5
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	4413      	add	r3, r2
 8006fce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	68ba      	ldr	r2, [r7, #8]
 8006fd6:	0151      	lsls	r1, r2, #5
 8006fd8:	68fa      	ldr	r2, [r7, #12]
 8006fda:	440a      	add	r2, r1
 8006fdc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006fe0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006fe4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006fe6:	2300      	movs	r3, #0
}
 8006fe8:	4618      	mov	r0, r3
 8006fea:	3714      	adds	r7, #20
 8006fec:	46bd      	mov	sp, r7
 8006fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ff2:	4770      	bx	lr

08006ff4 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006ff4:	b480      	push	{r7}
 8006ff6:	b085      	sub	sp, #20
 8006ff8:	af00      	add	r7, sp, #0
 8006ffa:	6078      	str	r0, [r7, #4]
 8006ffc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007002:	683b      	ldr	r3, [r7, #0]
 8007004:	781b      	ldrb	r3, [r3, #0]
 8007006:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007008:	683b      	ldr	r3, [r7, #0]
 800700a:	785b      	ldrb	r3, [r3, #1]
 800700c:	2b01      	cmp	r3, #1
 800700e:	d128      	bne.n	8007062 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8007010:	68bb      	ldr	r3, [r7, #8]
 8007012:	015a      	lsls	r2, r3, #5
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	4413      	add	r3, r2
 8007018:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	68ba      	ldr	r2, [r7, #8]
 8007020:	0151      	lsls	r1, r2, #5
 8007022:	68fa      	ldr	r2, [r7, #12]
 8007024:	440a      	add	r2, r1
 8007026:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800702a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800702e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007030:	683b      	ldr	r3, [r7, #0]
 8007032:	791b      	ldrb	r3, [r3, #4]
 8007034:	2b03      	cmp	r3, #3
 8007036:	d003      	beq.n	8007040 <USB_EPClearStall+0x4c>
 8007038:	683b      	ldr	r3, [r7, #0]
 800703a:	791b      	ldrb	r3, [r3, #4]
 800703c:	2b02      	cmp	r3, #2
 800703e:	d138      	bne.n	80070b2 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007040:	68bb      	ldr	r3, [r7, #8]
 8007042:	015a      	lsls	r2, r3, #5
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	4413      	add	r3, r2
 8007048:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	68ba      	ldr	r2, [r7, #8]
 8007050:	0151      	lsls	r1, r2, #5
 8007052:	68fa      	ldr	r2, [r7, #12]
 8007054:	440a      	add	r2, r1
 8007056:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800705a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800705e:	6013      	str	r3, [r2, #0]
 8007060:	e027      	b.n	80070b2 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8007062:	68bb      	ldr	r3, [r7, #8]
 8007064:	015a      	lsls	r2, r3, #5
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	4413      	add	r3, r2
 800706a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	68ba      	ldr	r2, [r7, #8]
 8007072:	0151      	lsls	r1, r2, #5
 8007074:	68fa      	ldr	r2, [r7, #12]
 8007076:	440a      	add	r2, r1
 8007078:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800707c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007080:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007082:	683b      	ldr	r3, [r7, #0]
 8007084:	791b      	ldrb	r3, [r3, #4]
 8007086:	2b03      	cmp	r3, #3
 8007088:	d003      	beq.n	8007092 <USB_EPClearStall+0x9e>
 800708a:	683b      	ldr	r3, [r7, #0]
 800708c:	791b      	ldrb	r3, [r3, #4]
 800708e:	2b02      	cmp	r3, #2
 8007090:	d10f      	bne.n	80070b2 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007092:	68bb      	ldr	r3, [r7, #8]
 8007094:	015a      	lsls	r2, r3, #5
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	4413      	add	r3, r2
 800709a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	68ba      	ldr	r2, [r7, #8]
 80070a2:	0151      	lsls	r1, r2, #5
 80070a4:	68fa      	ldr	r2, [r7, #12]
 80070a6:	440a      	add	r2, r1
 80070a8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80070ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80070b0:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80070b2:	2300      	movs	r3, #0
}
 80070b4:	4618      	mov	r0, r3
 80070b6:	3714      	adds	r7, #20
 80070b8:	46bd      	mov	sp, r7
 80070ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070be:	4770      	bx	lr

080070c0 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80070c0:	b480      	push	{r7}
 80070c2:	b085      	sub	sp, #20
 80070c4:	af00      	add	r7, sp, #0
 80070c6:	6078      	str	r0, [r7, #4]
 80070c8:	460b      	mov	r3, r1
 80070ca:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	68fa      	ldr	r2, [r7, #12]
 80070da:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80070de:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80070e2:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80070ea:	681a      	ldr	r2, [r3, #0]
 80070ec:	78fb      	ldrb	r3, [r7, #3]
 80070ee:	011b      	lsls	r3, r3, #4
 80070f0:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80070f4:	68f9      	ldr	r1, [r7, #12]
 80070f6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80070fa:	4313      	orrs	r3, r2
 80070fc:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80070fe:	2300      	movs	r3, #0
}
 8007100:	4618      	mov	r0, r3
 8007102:	3714      	adds	r7, #20
 8007104:	46bd      	mov	sp, r7
 8007106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800710a:	4770      	bx	lr

0800710c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800710c:	b480      	push	{r7}
 800710e:	b085      	sub	sp, #20
 8007110:	af00      	add	r7, sp, #0
 8007112:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	68fa      	ldr	r2, [r7, #12]
 8007122:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007126:	f023 0303 	bic.w	r3, r3, #3
 800712a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007132:	685b      	ldr	r3, [r3, #4]
 8007134:	68fa      	ldr	r2, [r7, #12]
 8007136:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800713a:	f023 0302 	bic.w	r3, r3, #2
 800713e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007140:	2300      	movs	r3, #0
}
 8007142:	4618      	mov	r0, r3
 8007144:	3714      	adds	r7, #20
 8007146:	46bd      	mov	sp, r7
 8007148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800714c:	4770      	bx	lr

0800714e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800714e:	b480      	push	{r7}
 8007150:	b085      	sub	sp, #20
 8007152:	af00      	add	r7, sp, #0
 8007154:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	68fa      	ldr	r2, [r7, #12]
 8007164:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007168:	f023 0303 	bic.w	r3, r3, #3
 800716c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007174:	685b      	ldr	r3, [r3, #4]
 8007176:	68fa      	ldr	r2, [r7, #12]
 8007178:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800717c:	f043 0302 	orr.w	r3, r3, #2
 8007180:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007182:	2300      	movs	r3, #0
}
 8007184:	4618      	mov	r0, r3
 8007186:	3714      	adds	r7, #20
 8007188:	46bd      	mov	sp, r7
 800718a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800718e:	4770      	bx	lr

08007190 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8007190:	b480      	push	{r7}
 8007192:	b085      	sub	sp, #20
 8007194:	af00      	add	r7, sp, #0
 8007196:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	695b      	ldr	r3, [r3, #20]
 800719c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	699b      	ldr	r3, [r3, #24]
 80071a2:	68fa      	ldr	r2, [r7, #12]
 80071a4:	4013      	ands	r3, r2
 80071a6:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80071a8:	68fb      	ldr	r3, [r7, #12]
}
 80071aa:	4618      	mov	r0, r3
 80071ac:	3714      	adds	r7, #20
 80071ae:	46bd      	mov	sp, r7
 80071b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071b4:	4770      	bx	lr

080071b6 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80071b6:	b480      	push	{r7}
 80071b8:	b085      	sub	sp, #20
 80071ba:	af00      	add	r7, sp, #0
 80071bc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80071c8:	699b      	ldr	r3, [r3, #24]
 80071ca:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80071d2:	69db      	ldr	r3, [r3, #28]
 80071d4:	68ba      	ldr	r2, [r7, #8]
 80071d6:	4013      	ands	r3, r2
 80071d8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80071da:	68bb      	ldr	r3, [r7, #8]
 80071dc:	0c1b      	lsrs	r3, r3, #16
}
 80071de:	4618      	mov	r0, r3
 80071e0:	3714      	adds	r7, #20
 80071e2:	46bd      	mov	sp, r7
 80071e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071e8:	4770      	bx	lr

080071ea <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80071ea:	b480      	push	{r7}
 80071ec:	b085      	sub	sp, #20
 80071ee:	af00      	add	r7, sp, #0
 80071f0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80071fc:	699b      	ldr	r3, [r3, #24]
 80071fe:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007206:	69db      	ldr	r3, [r3, #28]
 8007208:	68ba      	ldr	r2, [r7, #8]
 800720a:	4013      	ands	r3, r2
 800720c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800720e:	68bb      	ldr	r3, [r7, #8]
 8007210:	b29b      	uxth	r3, r3
}
 8007212:	4618      	mov	r0, r3
 8007214:	3714      	adds	r7, #20
 8007216:	46bd      	mov	sp, r7
 8007218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800721c:	4770      	bx	lr

0800721e <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800721e:	b480      	push	{r7}
 8007220:	b085      	sub	sp, #20
 8007222:	af00      	add	r7, sp, #0
 8007224:	6078      	str	r0, [r7, #4]
 8007226:	460b      	mov	r3, r1
 8007228:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800722e:	78fb      	ldrb	r3, [r7, #3]
 8007230:	015a      	lsls	r2, r3, #5
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	4413      	add	r3, r2
 8007236:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800723a:	689b      	ldr	r3, [r3, #8]
 800723c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007244:	695b      	ldr	r3, [r3, #20]
 8007246:	68ba      	ldr	r2, [r7, #8]
 8007248:	4013      	ands	r3, r2
 800724a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800724c:	68bb      	ldr	r3, [r7, #8]
}
 800724e:	4618      	mov	r0, r3
 8007250:	3714      	adds	r7, #20
 8007252:	46bd      	mov	sp, r7
 8007254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007258:	4770      	bx	lr

0800725a <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800725a:	b480      	push	{r7}
 800725c:	b087      	sub	sp, #28
 800725e:	af00      	add	r7, sp, #0
 8007260:	6078      	str	r0, [r7, #4]
 8007262:	460b      	mov	r3, r1
 8007264:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800726a:	697b      	ldr	r3, [r7, #20]
 800726c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007270:	691b      	ldr	r3, [r3, #16]
 8007272:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8007274:	697b      	ldr	r3, [r7, #20]
 8007276:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800727a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800727c:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800727e:	78fb      	ldrb	r3, [r7, #3]
 8007280:	f003 030f 	and.w	r3, r3, #15
 8007284:	68fa      	ldr	r2, [r7, #12]
 8007286:	fa22 f303 	lsr.w	r3, r2, r3
 800728a:	01db      	lsls	r3, r3, #7
 800728c:	b2db      	uxtb	r3, r3
 800728e:	693a      	ldr	r2, [r7, #16]
 8007290:	4313      	orrs	r3, r2
 8007292:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8007294:	78fb      	ldrb	r3, [r7, #3]
 8007296:	015a      	lsls	r2, r3, #5
 8007298:	697b      	ldr	r3, [r7, #20]
 800729a:	4413      	add	r3, r2
 800729c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80072a0:	689b      	ldr	r3, [r3, #8]
 80072a2:	693a      	ldr	r2, [r7, #16]
 80072a4:	4013      	ands	r3, r2
 80072a6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80072a8:	68bb      	ldr	r3, [r7, #8]
}
 80072aa:	4618      	mov	r0, r3
 80072ac:	371c      	adds	r7, #28
 80072ae:	46bd      	mov	sp, r7
 80072b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072b4:	4770      	bx	lr

080072b6 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80072b6:	b480      	push	{r7}
 80072b8:	b083      	sub	sp, #12
 80072ba:	af00      	add	r7, sp, #0
 80072bc:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	695b      	ldr	r3, [r3, #20]
 80072c2:	f003 0301 	and.w	r3, r3, #1
}
 80072c6:	4618      	mov	r0, r3
 80072c8:	370c      	adds	r7, #12
 80072ca:	46bd      	mov	sp, r7
 80072cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072d0:	4770      	bx	lr

080072d2 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80072d2:	b480      	push	{r7}
 80072d4:	b085      	sub	sp, #20
 80072d6:	af00      	add	r7, sp, #0
 80072d8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	68fa      	ldr	r2, [r7, #12]
 80072e8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80072ec:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80072f0:	f023 0307 	bic.w	r3, r3, #7
 80072f4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80072fc:	685b      	ldr	r3, [r3, #4]
 80072fe:	68fa      	ldr	r2, [r7, #12]
 8007300:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007304:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007308:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800730a:	2300      	movs	r3, #0
}
 800730c:	4618      	mov	r0, r3
 800730e:	3714      	adds	r7, #20
 8007310:	46bd      	mov	sp, r7
 8007312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007316:	4770      	bx	lr

08007318 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8007318:	b480      	push	{r7}
 800731a:	b087      	sub	sp, #28
 800731c:	af00      	add	r7, sp, #0
 800731e:	60f8      	str	r0, [r7, #12]
 8007320:	460b      	mov	r3, r1
 8007322:	607a      	str	r2, [r7, #4]
 8007324:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	333c      	adds	r3, #60	; 0x3c
 800732e:	3304      	adds	r3, #4
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8007334:	693b      	ldr	r3, [r7, #16]
 8007336:	4a26      	ldr	r2, [pc, #152]	; (80073d0 <USB_EP0_OutStart+0xb8>)
 8007338:	4293      	cmp	r3, r2
 800733a:	d90a      	bls.n	8007352 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800733c:	697b      	ldr	r3, [r7, #20]
 800733e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007348:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800734c:	d101      	bne.n	8007352 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800734e:	2300      	movs	r3, #0
 8007350:	e037      	b.n	80073c2 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8007352:	697b      	ldr	r3, [r7, #20]
 8007354:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007358:	461a      	mov	r2, r3
 800735a:	2300      	movs	r3, #0
 800735c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800735e:	697b      	ldr	r3, [r7, #20]
 8007360:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007364:	691b      	ldr	r3, [r3, #16]
 8007366:	697a      	ldr	r2, [r7, #20]
 8007368:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800736c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007370:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8007372:	697b      	ldr	r3, [r7, #20]
 8007374:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007378:	691b      	ldr	r3, [r3, #16]
 800737a:	697a      	ldr	r2, [r7, #20]
 800737c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007380:	f043 0318 	orr.w	r3, r3, #24
 8007384:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8007386:	697b      	ldr	r3, [r7, #20]
 8007388:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800738c:	691b      	ldr	r3, [r3, #16]
 800738e:	697a      	ldr	r2, [r7, #20]
 8007390:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007394:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8007398:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800739a:	7afb      	ldrb	r3, [r7, #11]
 800739c:	2b01      	cmp	r3, #1
 800739e:	d10f      	bne.n	80073c0 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80073a0:	697b      	ldr	r3, [r7, #20]
 80073a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80073a6:	461a      	mov	r2, r3
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80073ac:	697b      	ldr	r3, [r7, #20]
 80073ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	697a      	ldr	r2, [r7, #20]
 80073b6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80073ba:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80073be:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80073c0:	2300      	movs	r3, #0
}
 80073c2:	4618      	mov	r0, r3
 80073c4:	371c      	adds	r7, #28
 80073c6:	46bd      	mov	sp, r7
 80073c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073cc:	4770      	bx	lr
 80073ce:	bf00      	nop
 80073d0:	4f54300a 	.word	0x4f54300a

080073d4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80073d4:	b480      	push	{r7}
 80073d6:	b085      	sub	sp, #20
 80073d8:	af00      	add	r7, sp, #0
 80073da:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80073dc:	2300      	movs	r3, #0
 80073de:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	3301      	adds	r3, #1
 80073e4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	4a13      	ldr	r2, [pc, #76]	; (8007438 <USB_CoreReset+0x64>)
 80073ea:	4293      	cmp	r3, r2
 80073ec:	d901      	bls.n	80073f2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80073ee:	2303      	movs	r3, #3
 80073f0:	e01b      	b.n	800742a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	691b      	ldr	r3, [r3, #16]
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	daf2      	bge.n	80073e0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80073fa:	2300      	movs	r3, #0
 80073fc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	691b      	ldr	r3, [r3, #16]
 8007402:	f043 0201 	orr.w	r2, r3, #1
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	3301      	adds	r3, #1
 800740e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	4a09      	ldr	r2, [pc, #36]	; (8007438 <USB_CoreReset+0x64>)
 8007414:	4293      	cmp	r3, r2
 8007416:	d901      	bls.n	800741c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007418:	2303      	movs	r3, #3
 800741a:	e006      	b.n	800742a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	691b      	ldr	r3, [r3, #16]
 8007420:	f003 0301 	and.w	r3, r3, #1
 8007424:	2b01      	cmp	r3, #1
 8007426:	d0f0      	beq.n	800740a <USB_CoreReset+0x36>

  return HAL_OK;
 8007428:	2300      	movs	r3, #0
}
 800742a:	4618      	mov	r0, r3
 800742c:	3714      	adds	r7, #20
 800742e:	46bd      	mov	sp, r7
 8007430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007434:	4770      	bx	lr
 8007436:	bf00      	nop
 8007438:	00030d40 	.word	0x00030d40

0800743c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800743c:	b580      	push	{r7, lr}
 800743e:	b084      	sub	sp, #16
 8007440:	af00      	add	r7, sp, #0
 8007442:	6078      	str	r0, [r7, #4]
 8007444:	460b      	mov	r3, r1
 8007446:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8007448:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800744c:	f002 fcb8 	bl	8009dc0 <USBD_static_malloc>
 8007450:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	2b00      	cmp	r3, #0
 8007456:	d109      	bne.n	800746c <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	32b0      	adds	r2, #176	; 0xb0
 8007462:	2100      	movs	r1, #0
 8007464:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8007468:	2302      	movs	r3, #2
 800746a:	e0d4      	b.n	8007616 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800746c:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8007470:	2100      	movs	r1, #0
 8007472:	68f8      	ldr	r0, [r7, #12]
 8007474:	f002 fd30 	bl	8009ed8 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	32b0      	adds	r2, #176	; 0xb0
 8007482:	68f9      	ldr	r1, [r7, #12]
 8007484:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	32b0      	adds	r2, #176	; 0xb0
 8007492:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	7c1b      	ldrb	r3, [r3, #16]
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d138      	bne.n	8007516 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80074a4:	4b5e      	ldr	r3, [pc, #376]	; (8007620 <USBD_CDC_Init+0x1e4>)
 80074a6:	7819      	ldrb	r1, [r3, #0]
 80074a8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80074ac:	2202      	movs	r2, #2
 80074ae:	6878      	ldr	r0, [r7, #4]
 80074b0:	f002 fb63 	bl	8009b7a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80074b4:	4b5a      	ldr	r3, [pc, #360]	; (8007620 <USBD_CDC_Init+0x1e4>)
 80074b6:	781b      	ldrb	r3, [r3, #0]
 80074b8:	f003 020f 	and.w	r2, r3, #15
 80074bc:	6879      	ldr	r1, [r7, #4]
 80074be:	4613      	mov	r3, r2
 80074c0:	009b      	lsls	r3, r3, #2
 80074c2:	4413      	add	r3, r2
 80074c4:	009b      	lsls	r3, r3, #2
 80074c6:	440b      	add	r3, r1
 80074c8:	3324      	adds	r3, #36	; 0x24
 80074ca:	2201      	movs	r2, #1
 80074cc:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80074ce:	4b55      	ldr	r3, [pc, #340]	; (8007624 <USBD_CDC_Init+0x1e8>)
 80074d0:	7819      	ldrb	r1, [r3, #0]
 80074d2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80074d6:	2202      	movs	r2, #2
 80074d8:	6878      	ldr	r0, [r7, #4]
 80074da:	f002 fb4e 	bl	8009b7a <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80074de:	4b51      	ldr	r3, [pc, #324]	; (8007624 <USBD_CDC_Init+0x1e8>)
 80074e0:	781b      	ldrb	r3, [r3, #0]
 80074e2:	f003 020f 	and.w	r2, r3, #15
 80074e6:	6879      	ldr	r1, [r7, #4]
 80074e8:	4613      	mov	r3, r2
 80074ea:	009b      	lsls	r3, r3, #2
 80074ec:	4413      	add	r3, r2
 80074ee:	009b      	lsls	r3, r3, #2
 80074f0:	440b      	add	r3, r1
 80074f2:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80074f6:	2201      	movs	r2, #1
 80074f8:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80074fa:	4b4b      	ldr	r3, [pc, #300]	; (8007628 <USBD_CDC_Init+0x1ec>)
 80074fc:	781b      	ldrb	r3, [r3, #0]
 80074fe:	f003 020f 	and.w	r2, r3, #15
 8007502:	6879      	ldr	r1, [r7, #4]
 8007504:	4613      	mov	r3, r2
 8007506:	009b      	lsls	r3, r3, #2
 8007508:	4413      	add	r3, r2
 800750a:	009b      	lsls	r3, r3, #2
 800750c:	440b      	add	r3, r1
 800750e:	3326      	adds	r3, #38	; 0x26
 8007510:	2210      	movs	r2, #16
 8007512:	801a      	strh	r2, [r3, #0]
 8007514:	e035      	b.n	8007582 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8007516:	4b42      	ldr	r3, [pc, #264]	; (8007620 <USBD_CDC_Init+0x1e4>)
 8007518:	7819      	ldrb	r1, [r3, #0]
 800751a:	2340      	movs	r3, #64	; 0x40
 800751c:	2202      	movs	r2, #2
 800751e:	6878      	ldr	r0, [r7, #4]
 8007520:	f002 fb2b 	bl	8009b7a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8007524:	4b3e      	ldr	r3, [pc, #248]	; (8007620 <USBD_CDC_Init+0x1e4>)
 8007526:	781b      	ldrb	r3, [r3, #0]
 8007528:	f003 020f 	and.w	r2, r3, #15
 800752c:	6879      	ldr	r1, [r7, #4]
 800752e:	4613      	mov	r3, r2
 8007530:	009b      	lsls	r3, r3, #2
 8007532:	4413      	add	r3, r2
 8007534:	009b      	lsls	r3, r3, #2
 8007536:	440b      	add	r3, r1
 8007538:	3324      	adds	r3, #36	; 0x24
 800753a:	2201      	movs	r2, #1
 800753c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800753e:	4b39      	ldr	r3, [pc, #228]	; (8007624 <USBD_CDC_Init+0x1e8>)
 8007540:	7819      	ldrb	r1, [r3, #0]
 8007542:	2340      	movs	r3, #64	; 0x40
 8007544:	2202      	movs	r2, #2
 8007546:	6878      	ldr	r0, [r7, #4]
 8007548:	f002 fb17 	bl	8009b7a <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800754c:	4b35      	ldr	r3, [pc, #212]	; (8007624 <USBD_CDC_Init+0x1e8>)
 800754e:	781b      	ldrb	r3, [r3, #0]
 8007550:	f003 020f 	and.w	r2, r3, #15
 8007554:	6879      	ldr	r1, [r7, #4]
 8007556:	4613      	mov	r3, r2
 8007558:	009b      	lsls	r3, r3, #2
 800755a:	4413      	add	r3, r2
 800755c:	009b      	lsls	r3, r3, #2
 800755e:	440b      	add	r3, r1
 8007560:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007564:	2201      	movs	r2, #1
 8007566:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8007568:	4b2f      	ldr	r3, [pc, #188]	; (8007628 <USBD_CDC_Init+0x1ec>)
 800756a:	781b      	ldrb	r3, [r3, #0]
 800756c:	f003 020f 	and.w	r2, r3, #15
 8007570:	6879      	ldr	r1, [r7, #4]
 8007572:	4613      	mov	r3, r2
 8007574:	009b      	lsls	r3, r3, #2
 8007576:	4413      	add	r3, r2
 8007578:	009b      	lsls	r3, r3, #2
 800757a:	440b      	add	r3, r1
 800757c:	3326      	adds	r3, #38	; 0x26
 800757e:	2210      	movs	r2, #16
 8007580:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8007582:	4b29      	ldr	r3, [pc, #164]	; (8007628 <USBD_CDC_Init+0x1ec>)
 8007584:	7819      	ldrb	r1, [r3, #0]
 8007586:	2308      	movs	r3, #8
 8007588:	2203      	movs	r2, #3
 800758a:	6878      	ldr	r0, [r7, #4]
 800758c:	f002 faf5 	bl	8009b7a <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8007590:	4b25      	ldr	r3, [pc, #148]	; (8007628 <USBD_CDC_Init+0x1ec>)
 8007592:	781b      	ldrb	r3, [r3, #0]
 8007594:	f003 020f 	and.w	r2, r3, #15
 8007598:	6879      	ldr	r1, [r7, #4]
 800759a:	4613      	mov	r3, r2
 800759c:	009b      	lsls	r3, r3, #2
 800759e:	4413      	add	r3, r2
 80075a0:	009b      	lsls	r3, r3, #2
 80075a2:	440b      	add	r3, r1
 80075a4:	3324      	adds	r3, #36	; 0x24
 80075a6:	2201      	movs	r2, #1
 80075a8:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	2200      	movs	r2, #0
 80075ae:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80075b8:	687a      	ldr	r2, [r7, #4]
 80075ba:	33b0      	adds	r3, #176	; 0xb0
 80075bc:	009b      	lsls	r3, r3, #2
 80075be:	4413      	add	r3, r2
 80075c0:	685b      	ldr	r3, [r3, #4]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	2200      	movs	r2, #0
 80075ca:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	2200      	movs	r2, #0
 80075d2:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d101      	bne.n	80075e4 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 80075e0:	2302      	movs	r3, #2
 80075e2:	e018      	b.n	8007616 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	7c1b      	ldrb	r3, [r3, #16]
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d10a      	bne.n	8007602 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80075ec:	4b0d      	ldr	r3, [pc, #52]	; (8007624 <USBD_CDC_Init+0x1e8>)
 80075ee:	7819      	ldrb	r1, [r3, #0]
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80075f6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80075fa:	6878      	ldr	r0, [r7, #4]
 80075fc:	f002 fbac 	bl	8009d58 <USBD_LL_PrepareReceive>
 8007600:	e008      	b.n	8007614 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007602:	4b08      	ldr	r3, [pc, #32]	; (8007624 <USBD_CDC_Init+0x1e8>)
 8007604:	7819      	ldrb	r1, [r3, #0]
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800760c:	2340      	movs	r3, #64	; 0x40
 800760e:	6878      	ldr	r0, [r7, #4]
 8007610:	f002 fba2 	bl	8009d58 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007614:	2300      	movs	r3, #0
}
 8007616:	4618      	mov	r0, r3
 8007618:	3710      	adds	r7, #16
 800761a:	46bd      	mov	sp, r7
 800761c:	bd80      	pop	{r7, pc}
 800761e:	bf00      	nop
 8007620:	200000a3 	.word	0x200000a3
 8007624:	200000a4 	.word	0x200000a4
 8007628:	200000a5 	.word	0x200000a5

0800762c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800762c:	b580      	push	{r7, lr}
 800762e:	b082      	sub	sp, #8
 8007630:	af00      	add	r7, sp, #0
 8007632:	6078      	str	r0, [r7, #4]
 8007634:	460b      	mov	r3, r1
 8007636:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8007638:	4b3a      	ldr	r3, [pc, #232]	; (8007724 <USBD_CDC_DeInit+0xf8>)
 800763a:	781b      	ldrb	r3, [r3, #0]
 800763c:	4619      	mov	r1, r3
 800763e:	6878      	ldr	r0, [r7, #4]
 8007640:	f002 fac1 	bl	8009bc6 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8007644:	4b37      	ldr	r3, [pc, #220]	; (8007724 <USBD_CDC_DeInit+0xf8>)
 8007646:	781b      	ldrb	r3, [r3, #0]
 8007648:	f003 020f 	and.w	r2, r3, #15
 800764c:	6879      	ldr	r1, [r7, #4]
 800764e:	4613      	mov	r3, r2
 8007650:	009b      	lsls	r3, r3, #2
 8007652:	4413      	add	r3, r2
 8007654:	009b      	lsls	r3, r3, #2
 8007656:	440b      	add	r3, r1
 8007658:	3324      	adds	r3, #36	; 0x24
 800765a:	2200      	movs	r2, #0
 800765c:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800765e:	4b32      	ldr	r3, [pc, #200]	; (8007728 <USBD_CDC_DeInit+0xfc>)
 8007660:	781b      	ldrb	r3, [r3, #0]
 8007662:	4619      	mov	r1, r3
 8007664:	6878      	ldr	r0, [r7, #4]
 8007666:	f002 faae 	bl	8009bc6 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800766a:	4b2f      	ldr	r3, [pc, #188]	; (8007728 <USBD_CDC_DeInit+0xfc>)
 800766c:	781b      	ldrb	r3, [r3, #0]
 800766e:	f003 020f 	and.w	r2, r3, #15
 8007672:	6879      	ldr	r1, [r7, #4]
 8007674:	4613      	mov	r3, r2
 8007676:	009b      	lsls	r3, r3, #2
 8007678:	4413      	add	r3, r2
 800767a:	009b      	lsls	r3, r3, #2
 800767c:	440b      	add	r3, r1
 800767e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007682:	2200      	movs	r2, #0
 8007684:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8007686:	4b29      	ldr	r3, [pc, #164]	; (800772c <USBD_CDC_DeInit+0x100>)
 8007688:	781b      	ldrb	r3, [r3, #0]
 800768a:	4619      	mov	r1, r3
 800768c:	6878      	ldr	r0, [r7, #4]
 800768e:	f002 fa9a 	bl	8009bc6 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8007692:	4b26      	ldr	r3, [pc, #152]	; (800772c <USBD_CDC_DeInit+0x100>)
 8007694:	781b      	ldrb	r3, [r3, #0]
 8007696:	f003 020f 	and.w	r2, r3, #15
 800769a:	6879      	ldr	r1, [r7, #4]
 800769c:	4613      	mov	r3, r2
 800769e:	009b      	lsls	r3, r3, #2
 80076a0:	4413      	add	r3, r2
 80076a2:	009b      	lsls	r3, r3, #2
 80076a4:	440b      	add	r3, r1
 80076a6:	3324      	adds	r3, #36	; 0x24
 80076a8:	2200      	movs	r2, #0
 80076aa:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 80076ac:	4b1f      	ldr	r3, [pc, #124]	; (800772c <USBD_CDC_DeInit+0x100>)
 80076ae:	781b      	ldrb	r3, [r3, #0]
 80076b0:	f003 020f 	and.w	r2, r3, #15
 80076b4:	6879      	ldr	r1, [r7, #4]
 80076b6:	4613      	mov	r3, r2
 80076b8:	009b      	lsls	r3, r3, #2
 80076ba:	4413      	add	r3, r2
 80076bc:	009b      	lsls	r3, r3, #2
 80076be:	440b      	add	r3, r1
 80076c0:	3326      	adds	r3, #38	; 0x26
 80076c2:	2200      	movs	r2, #0
 80076c4:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	32b0      	adds	r2, #176	; 0xb0
 80076d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d01f      	beq.n	8007718 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80076de:	687a      	ldr	r2, [r7, #4]
 80076e0:	33b0      	adds	r3, #176	; 0xb0
 80076e2:	009b      	lsls	r3, r3, #2
 80076e4:	4413      	add	r3, r2
 80076e6:	685b      	ldr	r3, [r3, #4]
 80076e8:	685b      	ldr	r3, [r3, #4]
 80076ea:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	32b0      	adds	r2, #176	; 0xb0
 80076f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80076fa:	4618      	mov	r0, r3
 80076fc:	f002 fb6e 	bl	8009ddc <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	32b0      	adds	r2, #176	; 0xb0
 800770a:	2100      	movs	r1, #0
 800770c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	2200      	movs	r2, #0
 8007714:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8007718:	2300      	movs	r3, #0
}
 800771a:	4618      	mov	r0, r3
 800771c:	3708      	adds	r7, #8
 800771e:	46bd      	mov	sp, r7
 8007720:	bd80      	pop	{r7, pc}
 8007722:	bf00      	nop
 8007724:	200000a3 	.word	0x200000a3
 8007728:	200000a4 	.word	0x200000a4
 800772c:	200000a5 	.word	0x200000a5

08007730 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8007730:	b580      	push	{r7, lr}
 8007732:	b086      	sub	sp, #24
 8007734:	af00      	add	r7, sp, #0
 8007736:	6078      	str	r0, [r7, #4]
 8007738:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	32b0      	adds	r2, #176	; 0xb0
 8007744:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007748:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800774a:	2300      	movs	r3, #0
 800774c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800774e:	2300      	movs	r3, #0
 8007750:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8007752:	2300      	movs	r3, #0
 8007754:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8007756:	693b      	ldr	r3, [r7, #16]
 8007758:	2b00      	cmp	r3, #0
 800775a:	d101      	bne.n	8007760 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800775c:	2303      	movs	r3, #3
 800775e:	e0bf      	b.n	80078e0 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007760:	683b      	ldr	r3, [r7, #0]
 8007762:	781b      	ldrb	r3, [r3, #0]
 8007764:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007768:	2b00      	cmp	r3, #0
 800776a:	d050      	beq.n	800780e <USBD_CDC_Setup+0xde>
 800776c:	2b20      	cmp	r3, #32
 800776e:	f040 80af 	bne.w	80078d0 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8007772:	683b      	ldr	r3, [r7, #0]
 8007774:	88db      	ldrh	r3, [r3, #6]
 8007776:	2b00      	cmp	r3, #0
 8007778:	d03a      	beq.n	80077f0 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800777a:	683b      	ldr	r3, [r7, #0]
 800777c:	781b      	ldrb	r3, [r3, #0]
 800777e:	b25b      	sxtb	r3, r3
 8007780:	2b00      	cmp	r3, #0
 8007782:	da1b      	bge.n	80077bc <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800778a:	687a      	ldr	r2, [r7, #4]
 800778c:	33b0      	adds	r3, #176	; 0xb0
 800778e:	009b      	lsls	r3, r3, #2
 8007790:	4413      	add	r3, r2
 8007792:	685b      	ldr	r3, [r3, #4]
 8007794:	689b      	ldr	r3, [r3, #8]
 8007796:	683a      	ldr	r2, [r7, #0]
 8007798:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800779a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800779c:	683a      	ldr	r2, [r7, #0]
 800779e:	88d2      	ldrh	r2, [r2, #6]
 80077a0:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80077a2:	683b      	ldr	r3, [r7, #0]
 80077a4:	88db      	ldrh	r3, [r3, #6]
 80077a6:	2b07      	cmp	r3, #7
 80077a8:	bf28      	it	cs
 80077aa:	2307      	movcs	r3, #7
 80077ac:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80077ae:	693b      	ldr	r3, [r7, #16]
 80077b0:	89fa      	ldrh	r2, [r7, #14]
 80077b2:	4619      	mov	r1, r3
 80077b4:	6878      	ldr	r0, [r7, #4]
 80077b6:	f001 fd89 	bl	80092cc <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 80077ba:	e090      	b.n	80078de <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 80077bc:	683b      	ldr	r3, [r7, #0]
 80077be:	785a      	ldrb	r2, [r3, #1]
 80077c0:	693b      	ldr	r3, [r7, #16]
 80077c2:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 80077c6:	683b      	ldr	r3, [r7, #0]
 80077c8:	88db      	ldrh	r3, [r3, #6]
 80077ca:	2b3f      	cmp	r3, #63	; 0x3f
 80077cc:	d803      	bhi.n	80077d6 <USBD_CDC_Setup+0xa6>
 80077ce:	683b      	ldr	r3, [r7, #0]
 80077d0:	88db      	ldrh	r3, [r3, #6]
 80077d2:	b2da      	uxtb	r2, r3
 80077d4:	e000      	b.n	80077d8 <USBD_CDC_Setup+0xa8>
 80077d6:	2240      	movs	r2, #64	; 0x40
 80077d8:	693b      	ldr	r3, [r7, #16]
 80077da:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 80077de:	6939      	ldr	r1, [r7, #16]
 80077e0:	693b      	ldr	r3, [r7, #16]
 80077e2:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 80077e6:	461a      	mov	r2, r3
 80077e8:	6878      	ldr	r0, [r7, #4]
 80077ea:	f001 fd9b 	bl	8009324 <USBD_CtlPrepareRx>
      break;
 80077ee:	e076      	b.n	80078de <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80077f6:	687a      	ldr	r2, [r7, #4]
 80077f8:	33b0      	adds	r3, #176	; 0xb0
 80077fa:	009b      	lsls	r3, r3, #2
 80077fc:	4413      	add	r3, r2
 80077fe:	685b      	ldr	r3, [r3, #4]
 8007800:	689b      	ldr	r3, [r3, #8]
 8007802:	683a      	ldr	r2, [r7, #0]
 8007804:	7850      	ldrb	r0, [r2, #1]
 8007806:	2200      	movs	r2, #0
 8007808:	6839      	ldr	r1, [r7, #0]
 800780a:	4798      	blx	r3
      break;
 800780c:	e067      	b.n	80078de <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800780e:	683b      	ldr	r3, [r7, #0]
 8007810:	785b      	ldrb	r3, [r3, #1]
 8007812:	2b0b      	cmp	r3, #11
 8007814:	d851      	bhi.n	80078ba <USBD_CDC_Setup+0x18a>
 8007816:	a201      	add	r2, pc, #4	; (adr r2, 800781c <USBD_CDC_Setup+0xec>)
 8007818:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800781c:	0800784d 	.word	0x0800784d
 8007820:	080078c9 	.word	0x080078c9
 8007824:	080078bb 	.word	0x080078bb
 8007828:	080078bb 	.word	0x080078bb
 800782c:	080078bb 	.word	0x080078bb
 8007830:	080078bb 	.word	0x080078bb
 8007834:	080078bb 	.word	0x080078bb
 8007838:	080078bb 	.word	0x080078bb
 800783c:	080078bb 	.word	0x080078bb
 8007840:	080078bb 	.word	0x080078bb
 8007844:	08007877 	.word	0x08007877
 8007848:	080078a1 	.word	0x080078a1
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007852:	b2db      	uxtb	r3, r3
 8007854:	2b03      	cmp	r3, #3
 8007856:	d107      	bne.n	8007868 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8007858:	f107 030a 	add.w	r3, r7, #10
 800785c:	2202      	movs	r2, #2
 800785e:	4619      	mov	r1, r3
 8007860:	6878      	ldr	r0, [r7, #4]
 8007862:	f001 fd33 	bl	80092cc <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007866:	e032      	b.n	80078ce <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8007868:	6839      	ldr	r1, [r7, #0]
 800786a:	6878      	ldr	r0, [r7, #4]
 800786c:	f001 fcbd 	bl	80091ea <USBD_CtlError>
            ret = USBD_FAIL;
 8007870:	2303      	movs	r3, #3
 8007872:	75fb      	strb	r3, [r7, #23]
          break;
 8007874:	e02b      	b.n	80078ce <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800787c:	b2db      	uxtb	r3, r3
 800787e:	2b03      	cmp	r3, #3
 8007880:	d107      	bne.n	8007892 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8007882:	f107 030d 	add.w	r3, r7, #13
 8007886:	2201      	movs	r2, #1
 8007888:	4619      	mov	r1, r3
 800788a:	6878      	ldr	r0, [r7, #4]
 800788c:	f001 fd1e 	bl	80092cc <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007890:	e01d      	b.n	80078ce <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8007892:	6839      	ldr	r1, [r7, #0]
 8007894:	6878      	ldr	r0, [r7, #4]
 8007896:	f001 fca8 	bl	80091ea <USBD_CtlError>
            ret = USBD_FAIL;
 800789a:	2303      	movs	r3, #3
 800789c:	75fb      	strb	r3, [r7, #23]
          break;
 800789e:	e016      	b.n	80078ce <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80078a6:	b2db      	uxtb	r3, r3
 80078a8:	2b03      	cmp	r3, #3
 80078aa:	d00f      	beq.n	80078cc <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 80078ac:	6839      	ldr	r1, [r7, #0]
 80078ae:	6878      	ldr	r0, [r7, #4]
 80078b0:	f001 fc9b 	bl	80091ea <USBD_CtlError>
            ret = USBD_FAIL;
 80078b4:	2303      	movs	r3, #3
 80078b6:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80078b8:	e008      	b.n	80078cc <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80078ba:	6839      	ldr	r1, [r7, #0]
 80078bc:	6878      	ldr	r0, [r7, #4]
 80078be:	f001 fc94 	bl	80091ea <USBD_CtlError>
          ret = USBD_FAIL;
 80078c2:	2303      	movs	r3, #3
 80078c4:	75fb      	strb	r3, [r7, #23]
          break;
 80078c6:	e002      	b.n	80078ce <USBD_CDC_Setup+0x19e>
          break;
 80078c8:	bf00      	nop
 80078ca:	e008      	b.n	80078de <USBD_CDC_Setup+0x1ae>
          break;
 80078cc:	bf00      	nop
      }
      break;
 80078ce:	e006      	b.n	80078de <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 80078d0:	6839      	ldr	r1, [r7, #0]
 80078d2:	6878      	ldr	r0, [r7, #4]
 80078d4:	f001 fc89 	bl	80091ea <USBD_CtlError>
      ret = USBD_FAIL;
 80078d8:	2303      	movs	r3, #3
 80078da:	75fb      	strb	r3, [r7, #23]
      break;
 80078dc:	bf00      	nop
  }

  return (uint8_t)ret;
 80078de:	7dfb      	ldrb	r3, [r7, #23]
}
 80078e0:	4618      	mov	r0, r3
 80078e2:	3718      	adds	r7, #24
 80078e4:	46bd      	mov	sp, r7
 80078e6:	bd80      	pop	{r7, pc}

080078e8 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80078e8:	b580      	push	{r7, lr}
 80078ea:	b084      	sub	sp, #16
 80078ec:	af00      	add	r7, sp, #0
 80078ee:	6078      	str	r0, [r7, #4]
 80078f0:	460b      	mov	r3, r1
 80078f2:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80078fa:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	32b0      	adds	r2, #176	; 0xb0
 8007906:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800790a:	2b00      	cmp	r3, #0
 800790c:	d101      	bne.n	8007912 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800790e:	2303      	movs	r3, #3
 8007910:	e065      	b.n	80079de <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	32b0      	adds	r2, #176	; 0xb0
 800791c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007920:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8007922:	78fb      	ldrb	r3, [r7, #3]
 8007924:	f003 020f 	and.w	r2, r3, #15
 8007928:	6879      	ldr	r1, [r7, #4]
 800792a:	4613      	mov	r3, r2
 800792c:	009b      	lsls	r3, r3, #2
 800792e:	4413      	add	r3, r2
 8007930:	009b      	lsls	r3, r3, #2
 8007932:	440b      	add	r3, r1
 8007934:	3318      	adds	r3, #24
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	2b00      	cmp	r3, #0
 800793a:	d02f      	beq.n	800799c <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800793c:	78fb      	ldrb	r3, [r7, #3]
 800793e:	f003 020f 	and.w	r2, r3, #15
 8007942:	6879      	ldr	r1, [r7, #4]
 8007944:	4613      	mov	r3, r2
 8007946:	009b      	lsls	r3, r3, #2
 8007948:	4413      	add	r3, r2
 800794a:	009b      	lsls	r3, r3, #2
 800794c:	440b      	add	r3, r1
 800794e:	3318      	adds	r3, #24
 8007950:	681a      	ldr	r2, [r3, #0]
 8007952:	78fb      	ldrb	r3, [r7, #3]
 8007954:	f003 010f 	and.w	r1, r3, #15
 8007958:	68f8      	ldr	r0, [r7, #12]
 800795a:	460b      	mov	r3, r1
 800795c:	00db      	lsls	r3, r3, #3
 800795e:	440b      	add	r3, r1
 8007960:	009b      	lsls	r3, r3, #2
 8007962:	4403      	add	r3, r0
 8007964:	3348      	adds	r3, #72	; 0x48
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	fbb2 f1f3 	udiv	r1, r2, r3
 800796c:	fb01 f303 	mul.w	r3, r1, r3
 8007970:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8007972:	2b00      	cmp	r3, #0
 8007974:	d112      	bne.n	800799c <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8007976:	78fb      	ldrb	r3, [r7, #3]
 8007978:	f003 020f 	and.w	r2, r3, #15
 800797c:	6879      	ldr	r1, [r7, #4]
 800797e:	4613      	mov	r3, r2
 8007980:	009b      	lsls	r3, r3, #2
 8007982:	4413      	add	r3, r2
 8007984:	009b      	lsls	r3, r3, #2
 8007986:	440b      	add	r3, r1
 8007988:	3318      	adds	r3, #24
 800798a:	2200      	movs	r2, #0
 800798c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800798e:	78f9      	ldrb	r1, [r7, #3]
 8007990:	2300      	movs	r3, #0
 8007992:	2200      	movs	r2, #0
 8007994:	6878      	ldr	r0, [r7, #4]
 8007996:	f002 f9be 	bl	8009d16 <USBD_LL_Transmit>
 800799a:	e01f      	b.n	80079dc <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800799c:	68bb      	ldr	r3, [r7, #8]
 800799e:	2200      	movs	r2, #0
 80079a0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80079aa:	687a      	ldr	r2, [r7, #4]
 80079ac:	33b0      	adds	r3, #176	; 0xb0
 80079ae:	009b      	lsls	r3, r3, #2
 80079b0:	4413      	add	r3, r2
 80079b2:	685b      	ldr	r3, [r3, #4]
 80079b4:	691b      	ldr	r3, [r3, #16]
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d010      	beq.n	80079dc <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80079c0:	687a      	ldr	r2, [r7, #4]
 80079c2:	33b0      	adds	r3, #176	; 0xb0
 80079c4:	009b      	lsls	r3, r3, #2
 80079c6:	4413      	add	r3, r2
 80079c8:	685b      	ldr	r3, [r3, #4]
 80079ca:	691b      	ldr	r3, [r3, #16]
 80079cc:	68ba      	ldr	r2, [r7, #8]
 80079ce:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 80079d2:	68ba      	ldr	r2, [r7, #8]
 80079d4:	f502 7104 	add.w	r1, r2, #528	; 0x210
 80079d8:	78fa      	ldrb	r2, [r7, #3]
 80079da:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80079dc:	2300      	movs	r3, #0
}
 80079de:	4618      	mov	r0, r3
 80079e0:	3710      	adds	r7, #16
 80079e2:	46bd      	mov	sp, r7
 80079e4:	bd80      	pop	{r7, pc}

080079e6 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80079e6:	b580      	push	{r7, lr}
 80079e8:	b084      	sub	sp, #16
 80079ea:	af00      	add	r7, sp, #0
 80079ec:	6078      	str	r0, [r7, #4]
 80079ee:	460b      	mov	r3, r1
 80079f0:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	32b0      	adds	r2, #176	; 0xb0
 80079fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a00:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	32b0      	adds	r2, #176	; 0xb0
 8007a0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	d101      	bne.n	8007a18 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8007a14:	2303      	movs	r3, #3
 8007a16:	e01a      	b.n	8007a4e <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8007a18:	78fb      	ldrb	r3, [r7, #3]
 8007a1a:	4619      	mov	r1, r3
 8007a1c:	6878      	ldr	r0, [r7, #4]
 8007a1e:	f002 f9bc 	bl	8009d9a <USBD_LL_GetRxDataSize>
 8007a22:	4602      	mov	r2, r0
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007a30:	687a      	ldr	r2, [r7, #4]
 8007a32:	33b0      	adds	r3, #176	; 0xb0
 8007a34:	009b      	lsls	r3, r3, #2
 8007a36:	4413      	add	r3, r2
 8007a38:	685b      	ldr	r3, [r3, #4]
 8007a3a:	68db      	ldr	r3, [r3, #12]
 8007a3c:	68fa      	ldr	r2, [r7, #12]
 8007a3e:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8007a42:	68fa      	ldr	r2, [r7, #12]
 8007a44:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8007a48:	4611      	mov	r1, r2
 8007a4a:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8007a4c:	2300      	movs	r3, #0
}
 8007a4e:	4618      	mov	r0, r3
 8007a50:	3710      	adds	r7, #16
 8007a52:	46bd      	mov	sp, r7
 8007a54:	bd80      	pop	{r7, pc}

08007a56 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8007a56:	b580      	push	{r7, lr}
 8007a58:	b084      	sub	sp, #16
 8007a5a:	af00      	add	r7, sp, #0
 8007a5c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	32b0      	adds	r2, #176	; 0xb0
 8007a68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a6c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d101      	bne.n	8007a78 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007a74:	2303      	movs	r3, #3
 8007a76:	e025      	b.n	8007ac4 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007a7e:	687a      	ldr	r2, [r7, #4]
 8007a80:	33b0      	adds	r3, #176	; 0xb0
 8007a82:	009b      	lsls	r3, r3, #2
 8007a84:	4413      	add	r3, r2
 8007a86:	685b      	ldr	r3, [r3, #4]
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d01a      	beq.n	8007ac2 <USBD_CDC_EP0_RxReady+0x6c>
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8007a92:	2bff      	cmp	r3, #255	; 0xff
 8007a94:	d015      	beq.n	8007ac2 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007a9c:	687a      	ldr	r2, [r7, #4]
 8007a9e:	33b0      	adds	r3, #176	; 0xb0
 8007aa0:	009b      	lsls	r3, r3, #2
 8007aa2:	4413      	add	r3, r2
 8007aa4:	685b      	ldr	r3, [r3, #4]
 8007aa6:	689b      	ldr	r3, [r3, #8]
 8007aa8:	68fa      	ldr	r2, [r7, #12]
 8007aaa:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8007aae:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8007ab0:	68fa      	ldr	r2, [r7, #12]
 8007ab2:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8007ab6:	b292      	uxth	r2, r2
 8007ab8:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	22ff      	movs	r2, #255	; 0xff
 8007abe:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8007ac2:	2300      	movs	r3, #0
}
 8007ac4:	4618      	mov	r0, r3
 8007ac6:	3710      	adds	r7, #16
 8007ac8:	46bd      	mov	sp, r7
 8007aca:	bd80      	pop	{r7, pc}

08007acc <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8007acc:	b580      	push	{r7, lr}
 8007ace:	b086      	sub	sp, #24
 8007ad0:	af00      	add	r7, sp, #0
 8007ad2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007ad4:	2182      	movs	r1, #130	; 0x82
 8007ad6:	4818      	ldr	r0, [pc, #96]	; (8007b38 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007ad8:	f000 fd4f 	bl	800857a <USBD_GetEpDesc>
 8007adc:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007ade:	2101      	movs	r1, #1
 8007ae0:	4815      	ldr	r0, [pc, #84]	; (8007b38 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007ae2:	f000 fd4a 	bl	800857a <USBD_GetEpDesc>
 8007ae6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007ae8:	2181      	movs	r1, #129	; 0x81
 8007aea:	4813      	ldr	r0, [pc, #76]	; (8007b38 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007aec:	f000 fd45 	bl	800857a <USBD_GetEpDesc>
 8007af0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8007af2:	697b      	ldr	r3, [r7, #20]
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d002      	beq.n	8007afe <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8007af8:	697b      	ldr	r3, [r7, #20]
 8007afa:	2210      	movs	r2, #16
 8007afc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007afe:	693b      	ldr	r3, [r7, #16]
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d006      	beq.n	8007b12 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007b04:	693b      	ldr	r3, [r7, #16]
 8007b06:	2200      	movs	r2, #0
 8007b08:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007b0c:	711a      	strb	r2, [r3, #4]
 8007b0e:	2200      	movs	r2, #0
 8007b10:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d006      	beq.n	8007b26 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	2200      	movs	r2, #0
 8007b1c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007b20:	711a      	strb	r2, [r3, #4]
 8007b22:	2200      	movs	r2, #0
 8007b24:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	2243      	movs	r2, #67	; 0x43
 8007b2a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007b2c:	4b02      	ldr	r3, [pc, #8]	; (8007b38 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8007b2e:	4618      	mov	r0, r3
 8007b30:	3718      	adds	r7, #24
 8007b32:	46bd      	mov	sp, r7
 8007b34:	bd80      	pop	{r7, pc}
 8007b36:	bf00      	nop
 8007b38:	20000060 	.word	0x20000060

08007b3c <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8007b3c:	b580      	push	{r7, lr}
 8007b3e:	b086      	sub	sp, #24
 8007b40:	af00      	add	r7, sp, #0
 8007b42:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007b44:	2182      	movs	r1, #130	; 0x82
 8007b46:	4818      	ldr	r0, [pc, #96]	; (8007ba8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007b48:	f000 fd17 	bl	800857a <USBD_GetEpDesc>
 8007b4c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007b4e:	2101      	movs	r1, #1
 8007b50:	4815      	ldr	r0, [pc, #84]	; (8007ba8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007b52:	f000 fd12 	bl	800857a <USBD_GetEpDesc>
 8007b56:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007b58:	2181      	movs	r1, #129	; 0x81
 8007b5a:	4813      	ldr	r0, [pc, #76]	; (8007ba8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007b5c:	f000 fd0d 	bl	800857a <USBD_GetEpDesc>
 8007b60:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8007b62:	697b      	ldr	r3, [r7, #20]
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d002      	beq.n	8007b6e <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8007b68:	697b      	ldr	r3, [r7, #20]
 8007b6a:	2210      	movs	r2, #16
 8007b6c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007b6e:	693b      	ldr	r3, [r7, #16]
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d006      	beq.n	8007b82 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8007b74:	693b      	ldr	r3, [r7, #16]
 8007b76:	2200      	movs	r2, #0
 8007b78:	711a      	strb	r2, [r3, #4]
 8007b7a:	2200      	movs	r2, #0
 8007b7c:	f042 0202 	orr.w	r2, r2, #2
 8007b80:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d006      	beq.n	8007b96 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	2200      	movs	r2, #0
 8007b8c:	711a      	strb	r2, [r3, #4]
 8007b8e:	2200      	movs	r2, #0
 8007b90:	f042 0202 	orr.w	r2, r2, #2
 8007b94:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	2243      	movs	r2, #67	; 0x43
 8007b9a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007b9c:	4b02      	ldr	r3, [pc, #8]	; (8007ba8 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8007b9e:	4618      	mov	r0, r3
 8007ba0:	3718      	adds	r7, #24
 8007ba2:	46bd      	mov	sp, r7
 8007ba4:	bd80      	pop	{r7, pc}
 8007ba6:	bf00      	nop
 8007ba8:	20000060 	.word	0x20000060

08007bac <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007bac:	b580      	push	{r7, lr}
 8007bae:	b086      	sub	sp, #24
 8007bb0:	af00      	add	r7, sp, #0
 8007bb2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007bb4:	2182      	movs	r1, #130	; 0x82
 8007bb6:	4818      	ldr	r0, [pc, #96]	; (8007c18 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007bb8:	f000 fcdf 	bl	800857a <USBD_GetEpDesc>
 8007bbc:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007bbe:	2101      	movs	r1, #1
 8007bc0:	4815      	ldr	r0, [pc, #84]	; (8007c18 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007bc2:	f000 fcda 	bl	800857a <USBD_GetEpDesc>
 8007bc6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007bc8:	2181      	movs	r1, #129	; 0x81
 8007bca:	4813      	ldr	r0, [pc, #76]	; (8007c18 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007bcc:	f000 fcd5 	bl	800857a <USBD_GetEpDesc>
 8007bd0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8007bd2:	697b      	ldr	r3, [r7, #20]
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d002      	beq.n	8007bde <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8007bd8:	697b      	ldr	r3, [r7, #20]
 8007bda:	2210      	movs	r2, #16
 8007bdc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007bde:	693b      	ldr	r3, [r7, #16]
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d006      	beq.n	8007bf2 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007be4:	693b      	ldr	r3, [r7, #16]
 8007be6:	2200      	movs	r2, #0
 8007be8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007bec:	711a      	strb	r2, [r3, #4]
 8007bee:	2200      	movs	r2, #0
 8007bf0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d006      	beq.n	8007c06 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	2200      	movs	r2, #0
 8007bfc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007c00:	711a      	strb	r2, [r3, #4]
 8007c02:	2200      	movs	r2, #0
 8007c04:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	2243      	movs	r2, #67	; 0x43
 8007c0a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007c0c:	4b02      	ldr	r3, [pc, #8]	; (8007c18 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8007c0e:	4618      	mov	r0, r3
 8007c10:	3718      	adds	r7, #24
 8007c12:	46bd      	mov	sp, r7
 8007c14:	bd80      	pop	{r7, pc}
 8007c16:	bf00      	nop
 8007c18:	20000060 	.word	0x20000060

08007c1c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8007c1c:	b480      	push	{r7}
 8007c1e:	b083      	sub	sp, #12
 8007c20:	af00      	add	r7, sp, #0
 8007c22:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	220a      	movs	r2, #10
 8007c28:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8007c2a:	4b03      	ldr	r3, [pc, #12]	; (8007c38 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8007c2c:	4618      	mov	r0, r3
 8007c2e:	370c      	adds	r7, #12
 8007c30:	46bd      	mov	sp, r7
 8007c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c36:	4770      	bx	lr
 8007c38:	2000001c 	.word	0x2000001c

08007c3c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8007c3c:	b480      	push	{r7}
 8007c3e:	b083      	sub	sp, #12
 8007c40:	af00      	add	r7, sp, #0
 8007c42:	6078      	str	r0, [r7, #4]
 8007c44:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8007c46:	683b      	ldr	r3, [r7, #0]
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d101      	bne.n	8007c50 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8007c4c:	2303      	movs	r3, #3
 8007c4e:	e009      	b.n	8007c64 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007c56:	687a      	ldr	r2, [r7, #4]
 8007c58:	33b0      	adds	r3, #176	; 0xb0
 8007c5a:	009b      	lsls	r3, r3, #2
 8007c5c:	4413      	add	r3, r2
 8007c5e:	683a      	ldr	r2, [r7, #0]
 8007c60:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8007c62:	2300      	movs	r3, #0
}
 8007c64:	4618      	mov	r0, r3
 8007c66:	370c      	adds	r7, #12
 8007c68:	46bd      	mov	sp, r7
 8007c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c6e:	4770      	bx	lr

08007c70 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8007c70:	b480      	push	{r7}
 8007c72:	b087      	sub	sp, #28
 8007c74:	af00      	add	r7, sp, #0
 8007c76:	60f8      	str	r0, [r7, #12]
 8007c78:	60b9      	str	r1, [r7, #8]
 8007c7a:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	32b0      	adds	r2, #176	; 0xb0
 8007c86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c8a:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8007c8c:	697b      	ldr	r3, [r7, #20]
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d101      	bne.n	8007c96 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8007c92:	2303      	movs	r3, #3
 8007c94:	e008      	b.n	8007ca8 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8007c96:	697b      	ldr	r3, [r7, #20]
 8007c98:	68ba      	ldr	r2, [r7, #8]
 8007c9a:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8007c9e:	697b      	ldr	r3, [r7, #20]
 8007ca0:	687a      	ldr	r2, [r7, #4]
 8007ca2:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8007ca6:	2300      	movs	r3, #0
}
 8007ca8:	4618      	mov	r0, r3
 8007caa:	371c      	adds	r7, #28
 8007cac:	46bd      	mov	sp, r7
 8007cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cb2:	4770      	bx	lr

08007cb4 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8007cb4:	b480      	push	{r7}
 8007cb6:	b085      	sub	sp, #20
 8007cb8:	af00      	add	r7, sp, #0
 8007cba:	6078      	str	r0, [r7, #4]
 8007cbc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	32b0      	adds	r2, #176	; 0xb0
 8007cc8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ccc:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d101      	bne.n	8007cd8 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8007cd4:	2303      	movs	r3, #3
 8007cd6:	e004      	b.n	8007ce2 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	683a      	ldr	r2, [r7, #0]
 8007cdc:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8007ce0:	2300      	movs	r3, #0
}
 8007ce2:	4618      	mov	r0, r3
 8007ce4:	3714      	adds	r7, #20
 8007ce6:	46bd      	mov	sp, r7
 8007ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cec:	4770      	bx	lr
	...

08007cf0 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8007cf0:	b580      	push	{r7, lr}
 8007cf2:	b084      	sub	sp, #16
 8007cf4:	af00      	add	r7, sp, #0
 8007cf6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	32b0      	adds	r2, #176	; 0xb0
 8007d02:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d06:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8007d08:	2301      	movs	r3, #1
 8007d0a:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	32b0      	adds	r2, #176	; 0xb0
 8007d16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d101      	bne.n	8007d22 <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8007d1e:	2303      	movs	r3, #3
 8007d20:	e025      	b.n	8007d6e <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 8007d22:	68bb      	ldr	r3, [r7, #8]
 8007d24:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d11f      	bne.n	8007d6c <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8007d2c:	68bb      	ldr	r3, [r7, #8]
 8007d2e:	2201      	movs	r2, #1
 8007d30:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8007d34:	4b10      	ldr	r3, [pc, #64]	; (8007d78 <USBD_CDC_TransmitPacket+0x88>)
 8007d36:	781b      	ldrb	r3, [r3, #0]
 8007d38:	f003 020f 	and.w	r2, r3, #15
 8007d3c:	68bb      	ldr	r3, [r7, #8]
 8007d3e:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 8007d42:	6878      	ldr	r0, [r7, #4]
 8007d44:	4613      	mov	r3, r2
 8007d46:	009b      	lsls	r3, r3, #2
 8007d48:	4413      	add	r3, r2
 8007d4a:	009b      	lsls	r3, r3, #2
 8007d4c:	4403      	add	r3, r0
 8007d4e:	3318      	adds	r3, #24
 8007d50:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8007d52:	4b09      	ldr	r3, [pc, #36]	; (8007d78 <USBD_CDC_TransmitPacket+0x88>)
 8007d54:	7819      	ldrb	r1, [r3, #0]
 8007d56:	68bb      	ldr	r3, [r7, #8]
 8007d58:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8007d5c:	68bb      	ldr	r3, [r7, #8]
 8007d5e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8007d62:	6878      	ldr	r0, [r7, #4]
 8007d64:	f001 ffd7 	bl	8009d16 <USBD_LL_Transmit>

    ret = USBD_OK;
 8007d68:	2300      	movs	r3, #0
 8007d6a:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8007d6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d6e:	4618      	mov	r0, r3
 8007d70:	3710      	adds	r7, #16
 8007d72:	46bd      	mov	sp, r7
 8007d74:	bd80      	pop	{r7, pc}
 8007d76:	bf00      	nop
 8007d78:	200000a3 	.word	0x200000a3

08007d7c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8007d7c:	b580      	push	{r7, lr}
 8007d7e:	b084      	sub	sp, #16
 8007d80:	af00      	add	r7, sp, #0
 8007d82:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	32b0      	adds	r2, #176	; 0xb0
 8007d8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d92:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	32b0      	adds	r2, #176	; 0xb0
 8007d9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d101      	bne.n	8007daa <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8007da6:	2303      	movs	r3, #3
 8007da8:	e018      	b.n	8007ddc <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	7c1b      	ldrb	r3, [r3, #16]
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d10a      	bne.n	8007dc8 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007db2:	4b0c      	ldr	r3, [pc, #48]	; (8007de4 <USBD_CDC_ReceivePacket+0x68>)
 8007db4:	7819      	ldrb	r1, [r3, #0]
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007dbc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007dc0:	6878      	ldr	r0, [r7, #4]
 8007dc2:	f001 ffc9 	bl	8009d58 <USBD_LL_PrepareReceive>
 8007dc6:	e008      	b.n	8007dda <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007dc8:	4b06      	ldr	r3, [pc, #24]	; (8007de4 <USBD_CDC_ReceivePacket+0x68>)
 8007dca:	7819      	ldrb	r1, [r3, #0]
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007dd2:	2340      	movs	r3, #64	; 0x40
 8007dd4:	6878      	ldr	r0, [r7, #4]
 8007dd6:	f001 ffbf 	bl	8009d58 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007dda:	2300      	movs	r3, #0
}
 8007ddc:	4618      	mov	r0, r3
 8007dde:	3710      	adds	r7, #16
 8007de0:	46bd      	mov	sp, r7
 8007de2:	bd80      	pop	{r7, pc}
 8007de4:	200000a4 	.word	0x200000a4

08007de8 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007de8:	b580      	push	{r7, lr}
 8007dea:	b086      	sub	sp, #24
 8007dec:	af00      	add	r7, sp, #0
 8007dee:	60f8      	str	r0, [r7, #12]
 8007df0:	60b9      	str	r1, [r7, #8]
 8007df2:	4613      	mov	r3, r2
 8007df4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d101      	bne.n	8007e00 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8007dfc:	2303      	movs	r3, #3
 8007dfe:	e01f      	b.n	8007e40 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	2200      	movs	r2, #0
 8007e04:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	2200      	movs	r2, #0
 8007e0c:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	2200      	movs	r2, #0
 8007e14:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007e18:	68bb      	ldr	r3, [r7, #8]
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d003      	beq.n	8007e26 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	68ba      	ldr	r2, [r7, #8]
 8007e22:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	2201      	movs	r2, #1
 8007e2a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	79fa      	ldrb	r2, [r7, #7]
 8007e32:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8007e34:	68f8      	ldr	r0, [r7, #12]
 8007e36:	f001 fe33 	bl	8009aa0 <USBD_LL_Init>
 8007e3a:	4603      	mov	r3, r0
 8007e3c:	75fb      	strb	r3, [r7, #23]

  return ret;
 8007e3e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007e40:	4618      	mov	r0, r3
 8007e42:	3718      	adds	r7, #24
 8007e44:	46bd      	mov	sp, r7
 8007e46:	bd80      	pop	{r7, pc}

08007e48 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007e48:	b580      	push	{r7, lr}
 8007e4a:	b084      	sub	sp, #16
 8007e4c:	af00      	add	r7, sp, #0
 8007e4e:	6078      	str	r0, [r7, #4]
 8007e50:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007e52:	2300      	movs	r3, #0
 8007e54:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8007e56:	683b      	ldr	r3, [r7, #0]
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d101      	bne.n	8007e60 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8007e5c:	2303      	movs	r3, #3
 8007e5e:	e025      	b.n	8007eac <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	683a      	ldr	r2, [r7, #0]
 8007e64:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	32ae      	adds	r2, #174	; 0xae
 8007e72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d00f      	beq.n	8007e9c <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	32ae      	adds	r2, #174	; 0xae
 8007e86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e8c:	f107 020e 	add.w	r2, r7, #14
 8007e90:	4610      	mov	r0, r2
 8007e92:	4798      	blx	r3
 8007e94:	4602      	mov	r2, r0
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8007ea2:	1c5a      	adds	r2, r3, #1
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8007eaa:	2300      	movs	r3, #0
}
 8007eac:	4618      	mov	r0, r3
 8007eae:	3710      	adds	r7, #16
 8007eb0:	46bd      	mov	sp, r7
 8007eb2:	bd80      	pop	{r7, pc}

08007eb4 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007eb4:	b580      	push	{r7, lr}
 8007eb6:	b082      	sub	sp, #8
 8007eb8:	af00      	add	r7, sp, #0
 8007eba:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8007ebc:	6878      	ldr	r0, [r7, #4]
 8007ebe:	f001 fe41 	bl	8009b44 <USBD_LL_Start>
 8007ec2:	4603      	mov	r3, r0
}
 8007ec4:	4618      	mov	r0, r3
 8007ec6:	3708      	adds	r7, #8
 8007ec8:	46bd      	mov	sp, r7
 8007eca:	bd80      	pop	{r7, pc}

08007ecc <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8007ecc:	b480      	push	{r7}
 8007ece:	b083      	sub	sp, #12
 8007ed0:	af00      	add	r7, sp, #0
 8007ed2:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007ed4:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8007ed6:	4618      	mov	r0, r3
 8007ed8:	370c      	adds	r7, #12
 8007eda:	46bd      	mov	sp, r7
 8007edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ee0:	4770      	bx	lr

08007ee2 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007ee2:	b580      	push	{r7, lr}
 8007ee4:	b084      	sub	sp, #16
 8007ee6:	af00      	add	r7, sp, #0
 8007ee8:	6078      	str	r0, [r7, #4]
 8007eea:	460b      	mov	r3, r1
 8007eec:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8007eee:	2300      	movs	r3, #0
 8007ef0:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	d009      	beq.n	8007f10 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	78fa      	ldrb	r2, [r7, #3]
 8007f06:	4611      	mov	r1, r2
 8007f08:	6878      	ldr	r0, [r7, #4]
 8007f0a:	4798      	blx	r3
 8007f0c:	4603      	mov	r3, r0
 8007f0e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007f10:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f12:	4618      	mov	r0, r3
 8007f14:	3710      	adds	r7, #16
 8007f16:	46bd      	mov	sp, r7
 8007f18:	bd80      	pop	{r7, pc}

08007f1a <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007f1a:	b580      	push	{r7, lr}
 8007f1c:	b084      	sub	sp, #16
 8007f1e:	af00      	add	r7, sp, #0
 8007f20:	6078      	str	r0, [r7, #4]
 8007f22:	460b      	mov	r3, r1
 8007f24:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8007f26:	2300      	movs	r3, #0
 8007f28:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f30:	685b      	ldr	r3, [r3, #4]
 8007f32:	78fa      	ldrb	r2, [r7, #3]
 8007f34:	4611      	mov	r1, r2
 8007f36:	6878      	ldr	r0, [r7, #4]
 8007f38:	4798      	blx	r3
 8007f3a:	4603      	mov	r3, r0
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d001      	beq.n	8007f44 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8007f40:	2303      	movs	r3, #3
 8007f42:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007f44:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f46:	4618      	mov	r0, r3
 8007f48:	3710      	adds	r7, #16
 8007f4a:	46bd      	mov	sp, r7
 8007f4c:	bd80      	pop	{r7, pc}

08007f4e <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007f4e:	b580      	push	{r7, lr}
 8007f50:	b084      	sub	sp, #16
 8007f52:	af00      	add	r7, sp, #0
 8007f54:	6078      	str	r0, [r7, #4]
 8007f56:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007f5e:	6839      	ldr	r1, [r7, #0]
 8007f60:	4618      	mov	r0, r3
 8007f62:	f001 f908 	bl	8009176 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	2201      	movs	r2, #1
 8007f6a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8007f74:	461a      	mov	r2, r3
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007f82:	f003 031f 	and.w	r3, r3, #31
 8007f86:	2b02      	cmp	r3, #2
 8007f88:	d01a      	beq.n	8007fc0 <USBD_LL_SetupStage+0x72>
 8007f8a:	2b02      	cmp	r3, #2
 8007f8c:	d822      	bhi.n	8007fd4 <USBD_LL_SetupStage+0x86>
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d002      	beq.n	8007f98 <USBD_LL_SetupStage+0x4a>
 8007f92:	2b01      	cmp	r3, #1
 8007f94:	d00a      	beq.n	8007fac <USBD_LL_SetupStage+0x5e>
 8007f96:	e01d      	b.n	8007fd4 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007f9e:	4619      	mov	r1, r3
 8007fa0:	6878      	ldr	r0, [r7, #4]
 8007fa2:	f000 fb5f 	bl	8008664 <USBD_StdDevReq>
 8007fa6:	4603      	mov	r3, r0
 8007fa8:	73fb      	strb	r3, [r7, #15]
      break;
 8007faa:	e020      	b.n	8007fee <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007fb2:	4619      	mov	r1, r3
 8007fb4:	6878      	ldr	r0, [r7, #4]
 8007fb6:	f000 fbc7 	bl	8008748 <USBD_StdItfReq>
 8007fba:	4603      	mov	r3, r0
 8007fbc:	73fb      	strb	r3, [r7, #15]
      break;
 8007fbe:	e016      	b.n	8007fee <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007fc6:	4619      	mov	r1, r3
 8007fc8:	6878      	ldr	r0, [r7, #4]
 8007fca:	f000 fc29 	bl	8008820 <USBD_StdEPReq>
 8007fce:	4603      	mov	r3, r0
 8007fd0:	73fb      	strb	r3, [r7, #15]
      break;
 8007fd2:	e00c      	b.n	8007fee <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007fda:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007fde:	b2db      	uxtb	r3, r3
 8007fe0:	4619      	mov	r1, r3
 8007fe2:	6878      	ldr	r0, [r7, #4]
 8007fe4:	f001 fe0e 	bl	8009c04 <USBD_LL_StallEP>
 8007fe8:	4603      	mov	r3, r0
 8007fea:	73fb      	strb	r3, [r7, #15]
      break;
 8007fec:	bf00      	nop
  }

  return ret;
 8007fee:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ff0:	4618      	mov	r0, r3
 8007ff2:	3710      	adds	r7, #16
 8007ff4:	46bd      	mov	sp, r7
 8007ff6:	bd80      	pop	{r7, pc}

08007ff8 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007ff8:	b580      	push	{r7, lr}
 8007ffa:	b086      	sub	sp, #24
 8007ffc:	af00      	add	r7, sp, #0
 8007ffe:	60f8      	str	r0, [r7, #12]
 8008000:	460b      	mov	r3, r1
 8008002:	607a      	str	r2, [r7, #4]
 8008004:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8008006:	2300      	movs	r3, #0
 8008008:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800800a:	7afb      	ldrb	r3, [r7, #11]
 800800c:	2b00      	cmp	r3, #0
 800800e:	d16e      	bne.n	80080ee <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8008016:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800801e:	2b03      	cmp	r3, #3
 8008020:	f040 8098 	bne.w	8008154 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8008024:	693b      	ldr	r3, [r7, #16]
 8008026:	689a      	ldr	r2, [r3, #8]
 8008028:	693b      	ldr	r3, [r7, #16]
 800802a:	68db      	ldr	r3, [r3, #12]
 800802c:	429a      	cmp	r2, r3
 800802e:	d913      	bls.n	8008058 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8008030:	693b      	ldr	r3, [r7, #16]
 8008032:	689a      	ldr	r2, [r3, #8]
 8008034:	693b      	ldr	r3, [r7, #16]
 8008036:	68db      	ldr	r3, [r3, #12]
 8008038:	1ad2      	subs	r2, r2, r3
 800803a:	693b      	ldr	r3, [r7, #16]
 800803c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800803e:	693b      	ldr	r3, [r7, #16]
 8008040:	68da      	ldr	r2, [r3, #12]
 8008042:	693b      	ldr	r3, [r7, #16]
 8008044:	689b      	ldr	r3, [r3, #8]
 8008046:	4293      	cmp	r3, r2
 8008048:	bf28      	it	cs
 800804a:	4613      	movcs	r3, r2
 800804c:	461a      	mov	r2, r3
 800804e:	6879      	ldr	r1, [r7, #4]
 8008050:	68f8      	ldr	r0, [r7, #12]
 8008052:	f001 f984 	bl	800935e <USBD_CtlContinueRx>
 8008056:	e07d      	b.n	8008154 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800805e:	f003 031f 	and.w	r3, r3, #31
 8008062:	2b02      	cmp	r3, #2
 8008064:	d014      	beq.n	8008090 <USBD_LL_DataOutStage+0x98>
 8008066:	2b02      	cmp	r3, #2
 8008068:	d81d      	bhi.n	80080a6 <USBD_LL_DataOutStage+0xae>
 800806a:	2b00      	cmp	r3, #0
 800806c:	d002      	beq.n	8008074 <USBD_LL_DataOutStage+0x7c>
 800806e:	2b01      	cmp	r3, #1
 8008070:	d003      	beq.n	800807a <USBD_LL_DataOutStage+0x82>
 8008072:	e018      	b.n	80080a6 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8008074:	2300      	movs	r3, #0
 8008076:	75bb      	strb	r3, [r7, #22]
            break;
 8008078:	e018      	b.n	80080ac <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8008080:	b2db      	uxtb	r3, r3
 8008082:	4619      	mov	r1, r3
 8008084:	68f8      	ldr	r0, [r7, #12]
 8008086:	f000 fa5e 	bl	8008546 <USBD_CoreFindIF>
 800808a:	4603      	mov	r3, r0
 800808c:	75bb      	strb	r3, [r7, #22]
            break;
 800808e:	e00d      	b.n	80080ac <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8008096:	b2db      	uxtb	r3, r3
 8008098:	4619      	mov	r1, r3
 800809a:	68f8      	ldr	r0, [r7, #12]
 800809c:	f000 fa60 	bl	8008560 <USBD_CoreFindEP>
 80080a0:	4603      	mov	r3, r0
 80080a2:	75bb      	strb	r3, [r7, #22]
            break;
 80080a4:	e002      	b.n	80080ac <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 80080a6:	2300      	movs	r3, #0
 80080a8:	75bb      	strb	r3, [r7, #22]
            break;
 80080aa:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 80080ac:	7dbb      	ldrb	r3, [r7, #22]
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d119      	bne.n	80080e6 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80080b8:	b2db      	uxtb	r3, r3
 80080ba:	2b03      	cmp	r3, #3
 80080bc:	d113      	bne.n	80080e6 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 80080be:	7dba      	ldrb	r2, [r7, #22]
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	32ae      	adds	r2, #174	; 0xae
 80080c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80080c8:	691b      	ldr	r3, [r3, #16]
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	d00b      	beq.n	80080e6 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 80080ce:	7dba      	ldrb	r2, [r7, #22]
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 80080d6:	7dba      	ldrb	r2, [r7, #22]
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	32ae      	adds	r2, #174	; 0xae
 80080dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80080e0:	691b      	ldr	r3, [r3, #16]
 80080e2:	68f8      	ldr	r0, [r7, #12]
 80080e4:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80080e6:	68f8      	ldr	r0, [r7, #12]
 80080e8:	f001 f94a 	bl	8009380 <USBD_CtlSendStatus>
 80080ec:	e032      	b.n	8008154 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 80080ee:	7afb      	ldrb	r3, [r7, #11]
 80080f0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80080f4:	b2db      	uxtb	r3, r3
 80080f6:	4619      	mov	r1, r3
 80080f8:	68f8      	ldr	r0, [r7, #12]
 80080fa:	f000 fa31 	bl	8008560 <USBD_CoreFindEP>
 80080fe:	4603      	mov	r3, r0
 8008100:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008102:	7dbb      	ldrb	r3, [r7, #22]
 8008104:	2bff      	cmp	r3, #255	; 0xff
 8008106:	d025      	beq.n	8008154 <USBD_LL_DataOutStage+0x15c>
 8008108:	7dbb      	ldrb	r3, [r7, #22]
 800810a:	2b00      	cmp	r3, #0
 800810c:	d122      	bne.n	8008154 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008114:	b2db      	uxtb	r3, r3
 8008116:	2b03      	cmp	r3, #3
 8008118:	d117      	bne.n	800814a <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800811a:	7dba      	ldrb	r2, [r7, #22]
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	32ae      	adds	r2, #174	; 0xae
 8008120:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008124:	699b      	ldr	r3, [r3, #24]
 8008126:	2b00      	cmp	r3, #0
 8008128:	d00f      	beq.n	800814a <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800812a:	7dba      	ldrb	r2, [r7, #22]
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8008132:	7dba      	ldrb	r2, [r7, #22]
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	32ae      	adds	r2, #174	; 0xae
 8008138:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800813c:	699b      	ldr	r3, [r3, #24]
 800813e:	7afa      	ldrb	r2, [r7, #11]
 8008140:	4611      	mov	r1, r2
 8008142:	68f8      	ldr	r0, [r7, #12]
 8008144:	4798      	blx	r3
 8008146:	4603      	mov	r3, r0
 8008148:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800814a:	7dfb      	ldrb	r3, [r7, #23]
 800814c:	2b00      	cmp	r3, #0
 800814e:	d001      	beq.n	8008154 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8008150:	7dfb      	ldrb	r3, [r7, #23]
 8008152:	e000      	b.n	8008156 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8008154:	2300      	movs	r3, #0
}
 8008156:	4618      	mov	r0, r3
 8008158:	3718      	adds	r7, #24
 800815a:	46bd      	mov	sp, r7
 800815c:	bd80      	pop	{r7, pc}

0800815e <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800815e:	b580      	push	{r7, lr}
 8008160:	b086      	sub	sp, #24
 8008162:	af00      	add	r7, sp, #0
 8008164:	60f8      	str	r0, [r7, #12]
 8008166:	460b      	mov	r3, r1
 8008168:	607a      	str	r2, [r7, #4]
 800816a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800816c:	7afb      	ldrb	r3, [r7, #11]
 800816e:	2b00      	cmp	r3, #0
 8008170:	d16f      	bne.n	8008252 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	3314      	adds	r3, #20
 8008176:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800817e:	2b02      	cmp	r3, #2
 8008180:	d15a      	bne.n	8008238 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8008182:	693b      	ldr	r3, [r7, #16]
 8008184:	689a      	ldr	r2, [r3, #8]
 8008186:	693b      	ldr	r3, [r7, #16]
 8008188:	68db      	ldr	r3, [r3, #12]
 800818a:	429a      	cmp	r2, r3
 800818c:	d914      	bls.n	80081b8 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800818e:	693b      	ldr	r3, [r7, #16]
 8008190:	689a      	ldr	r2, [r3, #8]
 8008192:	693b      	ldr	r3, [r7, #16]
 8008194:	68db      	ldr	r3, [r3, #12]
 8008196:	1ad2      	subs	r2, r2, r3
 8008198:	693b      	ldr	r3, [r7, #16]
 800819a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800819c:	693b      	ldr	r3, [r7, #16]
 800819e:	689b      	ldr	r3, [r3, #8]
 80081a0:	461a      	mov	r2, r3
 80081a2:	6879      	ldr	r1, [r7, #4]
 80081a4:	68f8      	ldr	r0, [r7, #12]
 80081a6:	f001 f8ac 	bl	8009302 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80081aa:	2300      	movs	r3, #0
 80081ac:	2200      	movs	r2, #0
 80081ae:	2100      	movs	r1, #0
 80081b0:	68f8      	ldr	r0, [r7, #12]
 80081b2:	f001 fdd1 	bl	8009d58 <USBD_LL_PrepareReceive>
 80081b6:	e03f      	b.n	8008238 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80081b8:	693b      	ldr	r3, [r7, #16]
 80081ba:	68da      	ldr	r2, [r3, #12]
 80081bc:	693b      	ldr	r3, [r7, #16]
 80081be:	689b      	ldr	r3, [r3, #8]
 80081c0:	429a      	cmp	r2, r3
 80081c2:	d11c      	bne.n	80081fe <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80081c4:	693b      	ldr	r3, [r7, #16]
 80081c6:	685a      	ldr	r2, [r3, #4]
 80081c8:	693b      	ldr	r3, [r7, #16]
 80081ca:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80081cc:	429a      	cmp	r2, r3
 80081ce:	d316      	bcc.n	80081fe <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80081d0:	693b      	ldr	r3, [r7, #16]
 80081d2:	685a      	ldr	r2, [r3, #4]
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80081da:	429a      	cmp	r2, r3
 80081dc:	d20f      	bcs.n	80081fe <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80081de:	2200      	movs	r2, #0
 80081e0:	2100      	movs	r1, #0
 80081e2:	68f8      	ldr	r0, [r7, #12]
 80081e4:	f001 f88d 	bl	8009302 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	2200      	movs	r2, #0
 80081ec:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80081f0:	2300      	movs	r3, #0
 80081f2:	2200      	movs	r2, #0
 80081f4:	2100      	movs	r1, #0
 80081f6:	68f8      	ldr	r0, [r7, #12]
 80081f8:	f001 fdae 	bl	8009d58 <USBD_LL_PrepareReceive>
 80081fc:	e01c      	b.n	8008238 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008204:	b2db      	uxtb	r3, r3
 8008206:	2b03      	cmp	r3, #3
 8008208:	d10f      	bne.n	800822a <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008210:	68db      	ldr	r3, [r3, #12]
 8008212:	2b00      	cmp	r3, #0
 8008214:	d009      	beq.n	800822a <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	2200      	movs	r2, #0
 800821a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008224:	68db      	ldr	r3, [r3, #12]
 8008226:	68f8      	ldr	r0, [r7, #12]
 8008228:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800822a:	2180      	movs	r1, #128	; 0x80
 800822c:	68f8      	ldr	r0, [r7, #12]
 800822e:	f001 fce9 	bl	8009c04 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8008232:	68f8      	ldr	r0, [r7, #12]
 8008234:	f001 f8b7 	bl	80093a6 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800823e:	2b00      	cmp	r3, #0
 8008240:	d03a      	beq.n	80082b8 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8008242:	68f8      	ldr	r0, [r7, #12]
 8008244:	f7ff fe42 	bl	8007ecc <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	2200      	movs	r2, #0
 800824c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8008250:	e032      	b.n	80082b8 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8008252:	7afb      	ldrb	r3, [r7, #11]
 8008254:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008258:	b2db      	uxtb	r3, r3
 800825a:	4619      	mov	r1, r3
 800825c:	68f8      	ldr	r0, [r7, #12]
 800825e:	f000 f97f 	bl	8008560 <USBD_CoreFindEP>
 8008262:	4603      	mov	r3, r0
 8008264:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008266:	7dfb      	ldrb	r3, [r7, #23]
 8008268:	2bff      	cmp	r3, #255	; 0xff
 800826a:	d025      	beq.n	80082b8 <USBD_LL_DataInStage+0x15a>
 800826c:	7dfb      	ldrb	r3, [r7, #23]
 800826e:	2b00      	cmp	r3, #0
 8008270:	d122      	bne.n	80082b8 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008278:	b2db      	uxtb	r3, r3
 800827a:	2b03      	cmp	r3, #3
 800827c:	d11c      	bne.n	80082b8 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800827e:	7dfa      	ldrb	r2, [r7, #23]
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	32ae      	adds	r2, #174	; 0xae
 8008284:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008288:	695b      	ldr	r3, [r3, #20]
 800828a:	2b00      	cmp	r3, #0
 800828c:	d014      	beq.n	80082b8 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800828e:	7dfa      	ldrb	r2, [r7, #23]
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8008296:	7dfa      	ldrb	r2, [r7, #23]
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	32ae      	adds	r2, #174	; 0xae
 800829c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80082a0:	695b      	ldr	r3, [r3, #20]
 80082a2:	7afa      	ldrb	r2, [r7, #11]
 80082a4:	4611      	mov	r1, r2
 80082a6:	68f8      	ldr	r0, [r7, #12]
 80082a8:	4798      	blx	r3
 80082aa:	4603      	mov	r3, r0
 80082ac:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 80082ae:	7dbb      	ldrb	r3, [r7, #22]
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d001      	beq.n	80082b8 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 80082b4:	7dbb      	ldrb	r3, [r7, #22]
 80082b6:	e000      	b.n	80082ba <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 80082b8:	2300      	movs	r3, #0
}
 80082ba:	4618      	mov	r0, r3
 80082bc:	3718      	adds	r7, #24
 80082be:	46bd      	mov	sp, r7
 80082c0:	bd80      	pop	{r7, pc}

080082c2 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80082c2:	b580      	push	{r7, lr}
 80082c4:	b084      	sub	sp, #16
 80082c6:	af00      	add	r7, sp, #0
 80082c8:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 80082ca:	2300      	movs	r3, #0
 80082cc:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	2201      	movs	r2, #1
 80082d2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	2200      	movs	r2, #0
 80082da:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	2200      	movs	r2, #0
 80082e2:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	2200      	movs	r2, #0
 80082e8:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	2200      	movs	r2, #0
 80082f0:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	d014      	beq.n	8008328 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008304:	685b      	ldr	r3, [r3, #4]
 8008306:	2b00      	cmp	r3, #0
 8008308:	d00e      	beq.n	8008328 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008310:	685b      	ldr	r3, [r3, #4]
 8008312:	687a      	ldr	r2, [r7, #4]
 8008314:	6852      	ldr	r2, [r2, #4]
 8008316:	b2d2      	uxtb	r2, r2
 8008318:	4611      	mov	r1, r2
 800831a:	6878      	ldr	r0, [r7, #4]
 800831c:	4798      	blx	r3
 800831e:	4603      	mov	r3, r0
 8008320:	2b00      	cmp	r3, #0
 8008322:	d001      	beq.n	8008328 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8008324:	2303      	movs	r3, #3
 8008326:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008328:	2340      	movs	r3, #64	; 0x40
 800832a:	2200      	movs	r2, #0
 800832c:	2100      	movs	r1, #0
 800832e:	6878      	ldr	r0, [r7, #4]
 8008330:	f001 fc23 	bl	8009b7a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	2201      	movs	r2, #1
 8008338:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	2240      	movs	r2, #64	; 0x40
 8008340:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008344:	2340      	movs	r3, #64	; 0x40
 8008346:	2200      	movs	r2, #0
 8008348:	2180      	movs	r1, #128	; 0x80
 800834a:	6878      	ldr	r0, [r7, #4]
 800834c:	f001 fc15 	bl	8009b7a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	2201      	movs	r2, #1
 8008354:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	2240      	movs	r2, #64	; 0x40
 800835a:	621a      	str	r2, [r3, #32]

  return ret;
 800835c:	7bfb      	ldrb	r3, [r7, #15]
}
 800835e:	4618      	mov	r0, r3
 8008360:	3710      	adds	r7, #16
 8008362:	46bd      	mov	sp, r7
 8008364:	bd80      	pop	{r7, pc}

08008366 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8008366:	b480      	push	{r7}
 8008368:	b083      	sub	sp, #12
 800836a:	af00      	add	r7, sp, #0
 800836c:	6078      	str	r0, [r7, #4]
 800836e:	460b      	mov	r3, r1
 8008370:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	78fa      	ldrb	r2, [r7, #3]
 8008376:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8008378:	2300      	movs	r3, #0
}
 800837a:	4618      	mov	r0, r3
 800837c:	370c      	adds	r7, #12
 800837e:	46bd      	mov	sp, r7
 8008380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008384:	4770      	bx	lr

08008386 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8008386:	b480      	push	{r7}
 8008388:	b083      	sub	sp, #12
 800838a:	af00      	add	r7, sp, #0
 800838c:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008394:	b2da      	uxtb	r2, r3
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	2204      	movs	r2, #4
 80083a0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80083a4:	2300      	movs	r3, #0
}
 80083a6:	4618      	mov	r0, r3
 80083a8:	370c      	adds	r7, #12
 80083aa:	46bd      	mov	sp, r7
 80083ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083b0:	4770      	bx	lr

080083b2 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80083b2:	b480      	push	{r7}
 80083b4:	b083      	sub	sp, #12
 80083b6:	af00      	add	r7, sp, #0
 80083b8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80083c0:	b2db      	uxtb	r3, r3
 80083c2:	2b04      	cmp	r3, #4
 80083c4:	d106      	bne.n	80083d4 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 80083cc:	b2da      	uxtb	r2, r3
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80083d4:	2300      	movs	r3, #0
}
 80083d6:	4618      	mov	r0, r3
 80083d8:	370c      	adds	r7, #12
 80083da:	46bd      	mov	sp, r7
 80083dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083e0:	4770      	bx	lr

080083e2 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80083e2:	b580      	push	{r7, lr}
 80083e4:	b082      	sub	sp, #8
 80083e6:	af00      	add	r7, sp, #0
 80083e8:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80083f0:	b2db      	uxtb	r3, r3
 80083f2:	2b03      	cmp	r3, #3
 80083f4:	d110      	bne.n	8008418 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d00b      	beq.n	8008418 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008406:	69db      	ldr	r3, [r3, #28]
 8008408:	2b00      	cmp	r3, #0
 800840a:	d005      	beq.n	8008418 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008412:	69db      	ldr	r3, [r3, #28]
 8008414:	6878      	ldr	r0, [r7, #4]
 8008416:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8008418:	2300      	movs	r3, #0
}
 800841a:	4618      	mov	r0, r3
 800841c:	3708      	adds	r7, #8
 800841e:	46bd      	mov	sp, r7
 8008420:	bd80      	pop	{r7, pc}

08008422 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8008422:	b580      	push	{r7, lr}
 8008424:	b082      	sub	sp, #8
 8008426:	af00      	add	r7, sp, #0
 8008428:	6078      	str	r0, [r7, #4]
 800842a:	460b      	mov	r3, r1
 800842c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	32ae      	adds	r2, #174	; 0xae
 8008438:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800843c:	2b00      	cmp	r3, #0
 800843e:	d101      	bne.n	8008444 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8008440:	2303      	movs	r3, #3
 8008442:	e01c      	b.n	800847e <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800844a:	b2db      	uxtb	r3, r3
 800844c:	2b03      	cmp	r3, #3
 800844e:	d115      	bne.n	800847c <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	32ae      	adds	r2, #174	; 0xae
 800845a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800845e:	6a1b      	ldr	r3, [r3, #32]
 8008460:	2b00      	cmp	r3, #0
 8008462:	d00b      	beq.n	800847c <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	32ae      	adds	r2, #174	; 0xae
 800846e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008472:	6a1b      	ldr	r3, [r3, #32]
 8008474:	78fa      	ldrb	r2, [r7, #3]
 8008476:	4611      	mov	r1, r2
 8008478:	6878      	ldr	r0, [r7, #4]
 800847a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800847c:	2300      	movs	r3, #0
}
 800847e:	4618      	mov	r0, r3
 8008480:	3708      	adds	r7, #8
 8008482:	46bd      	mov	sp, r7
 8008484:	bd80      	pop	{r7, pc}

08008486 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8008486:	b580      	push	{r7, lr}
 8008488:	b082      	sub	sp, #8
 800848a:	af00      	add	r7, sp, #0
 800848c:	6078      	str	r0, [r7, #4]
 800848e:	460b      	mov	r3, r1
 8008490:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	32ae      	adds	r2, #174	; 0xae
 800849c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	d101      	bne.n	80084a8 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 80084a4:	2303      	movs	r3, #3
 80084a6:	e01c      	b.n	80084e2 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80084ae:	b2db      	uxtb	r3, r3
 80084b0:	2b03      	cmp	r3, #3
 80084b2:	d115      	bne.n	80084e0 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	32ae      	adds	r2, #174	; 0xae
 80084be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80084c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	d00b      	beq.n	80084e0 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	32ae      	adds	r2, #174	; 0xae
 80084d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80084d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084d8:	78fa      	ldrb	r2, [r7, #3]
 80084da:	4611      	mov	r1, r2
 80084dc:	6878      	ldr	r0, [r7, #4]
 80084de:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80084e0:	2300      	movs	r3, #0
}
 80084e2:	4618      	mov	r0, r3
 80084e4:	3708      	adds	r7, #8
 80084e6:	46bd      	mov	sp, r7
 80084e8:	bd80      	pop	{r7, pc}

080084ea <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80084ea:	b480      	push	{r7}
 80084ec:	b083      	sub	sp, #12
 80084ee:	af00      	add	r7, sp, #0
 80084f0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80084f2:	2300      	movs	r3, #0
}
 80084f4:	4618      	mov	r0, r3
 80084f6:	370c      	adds	r7, #12
 80084f8:	46bd      	mov	sp, r7
 80084fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084fe:	4770      	bx	lr

08008500 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8008500:	b580      	push	{r7, lr}
 8008502:	b084      	sub	sp, #16
 8008504:	af00      	add	r7, sp, #0
 8008506:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8008508:	2300      	movs	r3, #0
 800850a:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	2201      	movs	r2, #1
 8008510:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800851a:	2b00      	cmp	r3, #0
 800851c:	d00e      	beq.n	800853c <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008524:	685b      	ldr	r3, [r3, #4]
 8008526:	687a      	ldr	r2, [r7, #4]
 8008528:	6852      	ldr	r2, [r2, #4]
 800852a:	b2d2      	uxtb	r2, r2
 800852c:	4611      	mov	r1, r2
 800852e:	6878      	ldr	r0, [r7, #4]
 8008530:	4798      	blx	r3
 8008532:	4603      	mov	r3, r0
 8008534:	2b00      	cmp	r3, #0
 8008536:	d001      	beq.n	800853c <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8008538:	2303      	movs	r3, #3
 800853a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800853c:	7bfb      	ldrb	r3, [r7, #15]
}
 800853e:	4618      	mov	r0, r3
 8008540:	3710      	adds	r7, #16
 8008542:	46bd      	mov	sp, r7
 8008544:	bd80      	pop	{r7, pc}

08008546 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8008546:	b480      	push	{r7}
 8008548:	b083      	sub	sp, #12
 800854a:	af00      	add	r7, sp, #0
 800854c:	6078      	str	r0, [r7, #4]
 800854e:	460b      	mov	r3, r1
 8008550:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8008552:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8008554:	4618      	mov	r0, r3
 8008556:	370c      	adds	r7, #12
 8008558:	46bd      	mov	sp, r7
 800855a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800855e:	4770      	bx	lr

08008560 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8008560:	b480      	push	{r7}
 8008562:	b083      	sub	sp, #12
 8008564:	af00      	add	r7, sp, #0
 8008566:	6078      	str	r0, [r7, #4]
 8008568:	460b      	mov	r3, r1
 800856a:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800856c:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800856e:	4618      	mov	r0, r3
 8008570:	370c      	adds	r7, #12
 8008572:	46bd      	mov	sp, r7
 8008574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008578:	4770      	bx	lr

0800857a <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800857a:	b580      	push	{r7, lr}
 800857c:	b086      	sub	sp, #24
 800857e:	af00      	add	r7, sp, #0
 8008580:	6078      	str	r0, [r7, #4]
 8008582:	460b      	mov	r3, r1
 8008584:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800858e:	2300      	movs	r3, #0
 8008590:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	885b      	ldrh	r3, [r3, #2]
 8008596:	b29a      	uxth	r2, r3
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	781b      	ldrb	r3, [r3, #0]
 800859c:	b29b      	uxth	r3, r3
 800859e:	429a      	cmp	r2, r3
 80085a0:	d920      	bls.n	80085e4 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	781b      	ldrb	r3, [r3, #0]
 80085a6:	b29b      	uxth	r3, r3
 80085a8:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 80085aa:	e013      	b.n	80085d4 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 80085ac:	f107 030a 	add.w	r3, r7, #10
 80085b0:	4619      	mov	r1, r3
 80085b2:	6978      	ldr	r0, [r7, #20]
 80085b4:	f000 f81b 	bl	80085ee <USBD_GetNextDesc>
 80085b8:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80085ba:	697b      	ldr	r3, [r7, #20]
 80085bc:	785b      	ldrb	r3, [r3, #1]
 80085be:	2b05      	cmp	r3, #5
 80085c0:	d108      	bne.n	80085d4 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 80085c2:	697b      	ldr	r3, [r7, #20]
 80085c4:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 80085c6:	693b      	ldr	r3, [r7, #16]
 80085c8:	789b      	ldrb	r3, [r3, #2]
 80085ca:	78fa      	ldrb	r2, [r7, #3]
 80085cc:	429a      	cmp	r2, r3
 80085ce:	d008      	beq.n	80085e2 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 80085d0:	2300      	movs	r3, #0
 80085d2:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	885b      	ldrh	r3, [r3, #2]
 80085d8:	b29a      	uxth	r2, r3
 80085da:	897b      	ldrh	r3, [r7, #10]
 80085dc:	429a      	cmp	r2, r3
 80085de:	d8e5      	bhi.n	80085ac <USBD_GetEpDesc+0x32>
 80085e0:	e000      	b.n	80085e4 <USBD_GetEpDesc+0x6a>
          break;
 80085e2:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 80085e4:	693b      	ldr	r3, [r7, #16]
}
 80085e6:	4618      	mov	r0, r3
 80085e8:	3718      	adds	r7, #24
 80085ea:	46bd      	mov	sp, r7
 80085ec:	bd80      	pop	{r7, pc}

080085ee <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80085ee:	b480      	push	{r7}
 80085f0:	b085      	sub	sp, #20
 80085f2:	af00      	add	r7, sp, #0
 80085f4:	6078      	str	r0, [r7, #4]
 80085f6:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 80085fc:	683b      	ldr	r3, [r7, #0]
 80085fe:	881a      	ldrh	r2, [r3, #0]
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	781b      	ldrb	r3, [r3, #0]
 8008604:	b29b      	uxth	r3, r3
 8008606:	4413      	add	r3, r2
 8008608:	b29a      	uxth	r2, r3
 800860a:	683b      	ldr	r3, [r7, #0]
 800860c:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	781b      	ldrb	r3, [r3, #0]
 8008612:	461a      	mov	r2, r3
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	4413      	add	r3, r2
 8008618:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800861a:	68fb      	ldr	r3, [r7, #12]
}
 800861c:	4618      	mov	r0, r3
 800861e:	3714      	adds	r7, #20
 8008620:	46bd      	mov	sp, r7
 8008622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008626:	4770      	bx	lr

08008628 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8008628:	b480      	push	{r7}
 800862a:	b087      	sub	sp, #28
 800862c:	af00      	add	r7, sp, #0
 800862e:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8008634:	697b      	ldr	r3, [r7, #20]
 8008636:	781b      	ldrb	r3, [r3, #0]
 8008638:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800863a:	697b      	ldr	r3, [r7, #20]
 800863c:	3301      	adds	r3, #1
 800863e:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8008640:	697b      	ldr	r3, [r7, #20]
 8008642:	781b      	ldrb	r3, [r3, #0]
 8008644:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8008646:	8a3b      	ldrh	r3, [r7, #16]
 8008648:	021b      	lsls	r3, r3, #8
 800864a:	b21a      	sxth	r2, r3
 800864c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008650:	4313      	orrs	r3, r2
 8008652:	b21b      	sxth	r3, r3
 8008654:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8008656:	89fb      	ldrh	r3, [r7, #14]
}
 8008658:	4618      	mov	r0, r3
 800865a:	371c      	adds	r7, #28
 800865c:	46bd      	mov	sp, r7
 800865e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008662:	4770      	bx	lr

08008664 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008664:	b580      	push	{r7, lr}
 8008666:	b084      	sub	sp, #16
 8008668:	af00      	add	r7, sp, #0
 800866a:	6078      	str	r0, [r7, #4]
 800866c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800866e:	2300      	movs	r3, #0
 8008670:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008672:	683b      	ldr	r3, [r7, #0]
 8008674:	781b      	ldrb	r3, [r3, #0]
 8008676:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800867a:	2b40      	cmp	r3, #64	; 0x40
 800867c:	d005      	beq.n	800868a <USBD_StdDevReq+0x26>
 800867e:	2b40      	cmp	r3, #64	; 0x40
 8008680:	d857      	bhi.n	8008732 <USBD_StdDevReq+0xce>
 8008682:	2b00      	cmp	r3, #0
 8008684:	d00f      	beq.n	80086a6 <USBD_StdDevReq+0x42>
 8008686:	2b20      	cmp	r3, #32
 8008688:	d153      	bne.n	8008732 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	32ae      	adds	r2, #174	; 0xae
 8008694:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008698:	689b      	ldr	r3, [r3, #8]
 800869a:	6839      	ldr	r1, [r7, #0]
 800869c:	6878      	ldr	r0, [r7, #4]
 800869e:	4798      	blx	r3
 80086a0:	4603      	mov	r3, r0
 80086a2:	73fb      	strb	r3, [r7, #15]
      break;
 80086a4:	e04a      	b.n	800873c <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80086a6:	683b      	ldr	r3, [r7, #0]
 80086a8:	785b      	ldrb	r3, [r3, #1]
 80086aa:	2b09      	cmp	r3, #9
 80086ac:	d83b      	bhi.n	8008726 <USBD_StdDevReq+0xc2>
 80086ae:	a201      	add	r2, pc, #4	; (adr r2, 80086b4 <USBD_StdDevReq+0x50>)
 80086b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086b4:	08008709 	.word	0x08008709
 80086b8:	0800871d 	.word	0x0800871d
 80086bc:	08008727 	.word	0x08008727
 80086c0:	08008713 	.word	0x08008713
 80086c4:	08008727 	.word	0x08008727
 80086c8:	080086e7 	.word	0x080086e7
 80086cc:	080086dd 	.word	0x080086dd
 80086d0:	08008727 	.word	0x08008727
 80086d4:	080086ff 	.word	0x080086ff
 80086d8:	080086f1 	.word	0x080086f1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80086dc:	6839      	ldr	r1, [r7, #0]
 80086de:	6878      	ldr	r0, [r7, #4]
 80086e0:	f000 fa3c 	bl	8008b5c <USBD_GetDescriptor>
          break;
 80086e4:	e024      	b.n	8008730 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80086e6:	6839      	ldr	r1, [r7, #0]
 80086e8:	6878      	ldr	r0, [r7, #4]
 80086ea:	f000 fba1 	bl	8008e30 <USBD_SetAddress>
          break;
 80086ee:	e01f      	b.n	8008730 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80086f0:	6839      	ldr	r1, [r7, #0]
 80086f2:	6878      	ldr	r0, [r7, #4]
 80086f4:	f000 fbe0 	bl	8008eb8 <USBD_SetConfig>
 80086f8:	4603      	mov	r3, r0
 80086fa:	73fb      	strb	r3, [r7, #15]
          break;
 80086fc:	e018      	b.n	8008730 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80086fe:	6839      	ldr	r1, [r7, #0]
 8008700:	6878      	ldr	r0, [r7, #4]
 8008702:	f000 fc83 	bl	800900c <USBD_GetConfig>
          break;
 8008706:	e013      	b.n	8008730 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8008708:	6839      	ldr	r1, [r7, #0]
 800870a:	6878      	ldr	r0, [r7, #4]
 800870c:	f000 fcb4 	bl	8009078 <USBD_GetStatus>
          break;
 8008710:	e00e      	b.n	8008730 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8008712:	6839      	ldr	r1, [r7, #0]
 8008714:	6878      	ldr	r0, [r7, #4]
 8008716:	f000 fce3 	bl	80090e0 <USBD_SetFeature>
          break;
 800871a:	e009      	b.n	8008730 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800871c:	6839      	ldr	r1, [r7, #0]
 800871e:	6878      	ldr	r0, [r7, #4]
 8008720:	f000 fd07 	bl	8009132 <USBD_ClrFeature>
          break;
 8008724:	e004      	b.n	8008730 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8008726:	6839      	ldr	r1, [r7, #0]
 8008728:	6878      	ldr	r0, [r7, #4]
 800872a:	f000 fd5e 	bl	80091ea <USBD_CtlError>
          break;
 800872e:	bf00      	nop
      }
      break;
 8008730:	e004      	b.n	800873c <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8008732:	6839      	ldr	r1, [r7, #0]
 8008734:	6878      	ldr	r0, [r7, #4]
 8008736:	f000 fd58 	bl	80091ea <USBD_CtlError>
      break;
 800873a:	bf00      	nop
  }

  return ret;
 800873c:	7bfb      	ldrb	r3, [r7, #15]
}
 800873e:	4618      	mov	r0, r3
 8008740:	3710      	adds	r7, #16
 8008742:	46bd      	mov	sp, r7
 8008744:	bd80      	pop	{r7, pc}
 8008746:	bf00      	nop

08008748 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008748:	b580      	push	{r7, lr}
 800874a:	b084      	sub	sp, #16
 800874c:	af00      	add	r7, sp, #0
 800874e:	6078      	str	r0, [r7, #4]
 8008750:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008752:	2300      	movs	r3, #0
 8008754:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008756:	683b      	ldr	r3, [r7, #0]
 8008758:	781b      	ldrb	r3, [r3, #0]
 800875a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800875e:	2b40      	cmp	r3, #64	; 0x40
 8008760:	d005      	beq.n	800876e <USBD_StdItfReq+0x26>
 8008762:	2b40      	cmp	r3, #64	; 0x40
 8008764:	d852      	bhi.n	800880c <USBD_StdItfReq+0xc4>
 8008766:	2b00      	cmp	r3, #0
 8008768:	d001      	beq.n	800876e <USBD_StdItfReq+0x26>
 800876a:	2b20      	cmp	r3, #32
 800876c:	d14e      	bne.n	800880c <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008774:	b2db      	uxtb	r3, r3
 8008776:	3b01      	subs	r3, #1
 8008778:	2b02      	cmp	r3, #2
 800877a:	d840      	bhi.n	80087fe <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800877c:	683b      	ldr	r3, [r7, #0]
 800877e:	889b      	ldrh	r3, [r3, #4]
 8008780:	b2db      	uxtb	r3, r3
 8008782:	2b01      	cmp	r3, #1
 8008784:	d836      	bhi.n	80087f4 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8008786:	683b      	ldr	r3, [r7, #0]
 8008788:	889b      	ldrh	r3, [r3, #4]
 800878a:	b2db      	uxtb	r3, r3
 800878c:	4619      	mov	r1, r3
 800878e:	6878      	ldr	r0, [r7, #4]
 8008790:	f7ff fed9 	bl	8008546 <USBD_CoreFindIF>
 8008794:	4603      	mov	r3, r0
 8008796:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008798:	7bbb      	ldrb	r3, [r7, #14]
 800879a:	2bff      	cmp	r3, #255	; 0xff
 800879c:	d01d      	beq.n	80087da <USBD_StdItfReq+0x92>
 800879e:	7bbb      	ldrb	r3, [r7, #14]
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	d11a      	bne.n	80087da <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 80087a4:	7bba      	ldrb	r2, [r7, #14]
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	32ae      	adds	r2, #174	; 0xae
 80087aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80087ae:	689b      	ldr	r3, [r3, #8]
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	d00f      	beq.n	80087d4 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 80087b4:	7bba      	ldrb	r2, [r7, #14]
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80087bc:	7bba      	ldrb	r2, [r7, #14]
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	32ae      	adds	r2, #174	; 0xae
 80087c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80087c6:	689b      	ldr	r3, [r3, #8]
 80087c8:	6839      	ldr	r1, [r7, #0]
 80087ca:	6878      	ldr	r0, [r7, #4]
 80087cc:	4798      	blx	r3
 80087ce:	4603      	mov	r3, r0
 80087d0:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80087d2:	e004      	b.n	80087de <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 80087d4:	2303      	movs	r3, #3
 80087d6:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80087d8:	e001      	b.n	80087de <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 80087da:	2303      	movs	r3, #3
 80087dc:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80087de:	683b      	ldr	r3, [r7, #0]
 80087e0:	88db      	ldrh	r3, [r3, #6]
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	d110      	bne.n	8008808 <USBD_StdItfReq+0xc0>
 80087e6:	7bfb      	ldrb	r3, [r7, #15]
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	d10d      	bne.n	8008808 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 80087ec:	6878      	ldr	r0, [r7, #4]
 80087ee:	f000 fdc7 	bl	8009380 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80087f2:	e009      	b.n	8008808 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 80087f4:	6839      	ldr	r1, [r7, #0]
 80087f6:	6878      	ldr	r0, [r7, #4]
 80087f8:	f000 fcf7 	bl	80091ea <USBD_CtlError>
          break;
 80087fc:	e004      	b.n	8008808 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 80087fe:	6839      	ldr	r1, [r7, #0]
 8008800:	6878      	ldr	r0, [r7, #4]
 8008802:	f000 fcf2 	bl	80091ea <USBD_CtlError>
          break;
 8008806:	e000      	b.n	800880a <USBD_StdItfReq+0xc2>
          break;
 8008808:	bf00      	nop
      }
      break;
 800880a:	e004      	b.n	8008816 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800880c:	6839      	ldr	r1, [r7, #0]
 800880e:	6878      	ldr	r0, [r7, #4]
 8008810:	f000 fceb 	bl	80091ea <USBD_CtlError>
      break;
 8008814:	bf00      	nop
  }

  return ret;
 8008816:	7bfb      	ldrb	r3, [r7, #15]
}
 8008818:	4618      	mov	r0, r3
 800881a:	3710      	adds	r7, #16
 800881c:	46bd      	mov	sp, r7
 800881e:	bd80      	pop	{r7, pc}

08008820 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008820:	b580      	push	{r7, lr}
 8008822:	b084      	sub	sp, #16
 8008824:	af00      	add	r7, sp, #0
 8008826:	6078      	str	r0, [r7, #4]
 8008828:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800882a:	2300      	movs	r3, #0
 800882c:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800882e:	683b      	ldr	r3, [r7, #0]
 8008830:	889b      	ldrh	r3, [r3, #4]
 8008832:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008834:	683b      	ldr	r3, [r7, #0]
 8008836:	781b      	ldrb	r3, [r3, #0]
 8008838:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800883c:	2b40      	cmp	r3, #64	; 0x40
 800883e:	d007      	beq.n	8008850 <USBD_StdEPReq+0x30>
 8008840:	2b40      	cmp	r3, #64	; 0x40
 8008842:	f200 817f 	bhi.w	8008b44 <USBD_StdEPReq+0x324>
 8008846:	2b00      	cmp	r3, #0
 8008848:	d02a      	beq.n	80088a0 <USBD_StdEPReq+0x80>
 800884a:	2b20      	cmp	r3, #32
 800884c:	f040 817a 	bne.w	8008b44 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8008850:	7bbb      	ldrb	r3, [r7, #14]
 8008852:	4619      	mov	r1, r3
 8008854:	6878      	ldr	r0, [r7, #4]
 8008856:	f7ff fe83 	bl	8008560 <USBD_CoreFindEP>
 800885a:	4603      	mov	r3, r0
 800885c:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800885e:	7b7b      	ldrb	r3, [r7, #13]
 8008860:	2bff      	cmp	r3, #255	; 0xff
 8008862:	f000 8174 	beq.w	8008b4e <USBD_StdEPReq+0x32e>
 8008866:	7b7b      	ldrb	r3, [r7, #13]
 8008868:	2b00      	cmp	r3, #0
 800886a:	f040 8170 	bne.w	8008b4e <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800886e:	7b7a      	ldrb	r2, [r7, #13]
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8008876:	7b7a      	ldrb	r2, [r7, #13]
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	32ae      	adds	r2, #174	; 0xae
 800887c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008880:	689b      	ldr	r3, [r3, #8]
 8008882:	2b00      	cmp	r3, #0
 8008884:	f000 8163 	beq.w	8008b4e <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8008888:	7b7a      	ldrb	r2, [r7, #13]
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	32ae      	adds	r2, #174	; 0xae
 800888e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008892:	689b      	ldr	r3, [r3, #8]
 8008894:	6839      	ldr	r1, [r7, #0]
 8008896:	6878      	ldr	r0, [r7, #4]
 8008898:	4798      	blx	r3
 800889a:	4603      	mov	r3, r0
 800889c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800889e:	e156      	b.n	8008b4e <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80088a0:	683b      	ldr	r3, [r7, #0]
 80088a2:	785b      	ldrb	r3, [r3, #1]
 80088a4:	2b03      	cmp	r3, #3
 80088a6:	d008      	beq.n	80088ba <USBD_StdEPReq+0x9a>
 80088a8:	2b03      	cmp	r3, #3
 80088aa:	f300 8145 	bgt.w	8008b38 <USBD_StdEPReq+0x318>
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	f000 809b 	beq.w	80089ea <USBD_StdEPReq+0x1ca>
 80088b4:	2b01      	cmp	r3, #1
 80088b6:	d03c      	beq.n	8008932 <USBD_StdEPReq+0x112>
 80088b8:	e13e      	b.n	8008b38 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80088c0:	b2db      	uxtb	r3, r3
 80088c2:	2b02      	cmp	r3, #2
 80088c4:	d002      	beq.n	80088cc <USBD_StdEPReq+0xac>
 80088c6:	2b03      	cmp	r3, #3
 80088c8:	d016      	beq.n	80088f8 <USBD_StdEPReq+0xd8>
 80088ca:	e02c      	b.n	8008926 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80088cc:	7bbb      	ldrb	r3, [r7, #14]
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	d00d      	beq.n	80088ee <USBD_StdEPReq+0xce>
 80088d2:	7bbb      	ldrb	r3, [r7, #14]
 80088d4:	2b80      	cmp	r3, #128	; 0x80
 80088d6:	d00a      	beq.n	80088ee <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80088d8:	7bbb      	ldrb	r3, [r7, #14]
 80088da:	4619      	mov	r1, r3
 80088dc:	6878      	ldr	r0, [r7, #4]
 80088de:	f001 f991 	bl	8009c04 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80088e2:	2180      	movs	r1, #128	; 0x80
 80088e4:	6878      	ldr	r0, [r7, #4]
 80088e6:	f001 f98d 	bl	8009c04 <USBD_LL_StallEP>
 80088ea:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80088ec:	e020      	b.n	8008930 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 80088ee:	6839      	ldr	r1, [r7, #0]
 80088f0:	6878      	ldr	r0, [r7, #4]
 80088f2:	f000 fc7a 	bl	80091ea <USBD_CtlError>
              break;
 80088f6:	e01b      	b.n	8008930 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80088f8:	683b      	ldr	r3, [r7, #0]
 80088fa:	885b      	ldrh	r3, [r3, #2]
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	d10e      	bne.n	800891e <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008900:	7bbb      	ldrb	r3, [r7, #14]
 8008902:	2b00      	cmp	r3, #0
 8008904:	d00b      	beq.n	800891e <USBD_StdEPReq+0xfe>
 8008906:	7bbb      	ldrb	r3, [r7, #14]
 8008908:	2b80      	cmp	r3, #128	; 0x80
 800890a:	d008      	beq.n	800891e <USBD_StdEPReq+0xfe>
 800890c:	683b      	ldr	r3, [r7, #0]
 800890e:	88db      	ldrh	r3, [r3, #6]
 8008910:	2b00      	cmp	r3, #0
 8008912:	d104      	bne.n	800891e <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8008914:	7bbb      	ldrb	r3, [r7, #14]
 8008916:	4619      	mov	r1, r3
 8008918:	6878      	ldr	r0, [r7, #4]
 800891a:	f001 f973 	bl	8009c04 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800891e:	6878      	ldr	r0, [r7, #4]
 8008920:	f000 fd2e 	bl	8009380 <USBD_CtlSendStatus>

              break;
 8008924:	e004      	b.n	8008930 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8008926:	6839      	ldr	r1, [r7, #0]
 8008928:	6878      	ldr	r0, [r7, #4]
 800892a:	f000 fc5e 	bl	80091ea <USBD_CtlError>
              break;
 800892e:	bf00      	nop
          }
          break;
 8008930:	e107      	b.n	8008b42 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008938:	b2db      	uxtb	r3, r3
 800893a:	2b02      	cmp	r3, #2
 800893c:	d002      	beq.n	8008944 <USBD_StdEPReq+0x124>
 800893e:	2b03      	cmp	r3, #3
 8008940:	d016      	beq.n	8008970 <USBD_StdEPReq+0x150>
 8008942:	e04b      	b.n	80089dc <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008944:	7bbb      	ldrb	r3, [r7, #14]
 8008946:	2b00      	cmp	r3, #0
 8008948:	d00d      	beq.n	8008966 <USBD_StdEPReq+0x146>
 800894a:	7bbb      	ldrb	r3, [r7, #14]
 800894c:	2b80      	cmp	r3, #128	; 0x80
 800894e:	d00a      	beq.n	8008966 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008950:	7bbb      	ldrb	r3, [r7, #14]
 8008952:	4619      	mov	r1, r3
 8008954:	6878      	ldr	r0, [r7, #4]
 8008956:	f001 f955 	bl	8009c04 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800895a:	2180      	movs	r1, #128	; 0x80
 800895c:	6878      	ldr	r0, [r7, #4]
 800895e:	f001 f951 	bl	8009c04 <USBD_LL_StallEP>
 8008962:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008964:	e040      	b.n	80089e8 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8008966:	6839      	ldr	r1, [r7, #0]
 8008968:	6878      	ldr	r0, [r7, #4]
 800896a:	f000 fc3e 	bl	80091ea <USBD_CtlError>
              break;
 800896e:	e03b      	b.n	80089e8 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008970:	683b      	ldr	r3, [r7, #0]
 8008972:	885b      	ldrh	r3, [r3, #2]
 8008974:	2b00      	cmp	r3, #0
 8008976:	d136      	bne.n	80089e6 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008978:	7bbb      	ldrb	r3, [r7, #14]
 800897a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800897e:	2b00      	cmp	r3, #0
 8008980:	d004      	beq.n	800898c <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8008982:	7bbb      	ldrb	r3, [r7, #14]
 8008984:	4619      	mov	r1, r3
 8008986:	6878      	ldr	r0, [r7, #4]
 8008988:	f001 f95b 	bl	8009c42 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800898c:	6878      	ldr	r0, [r7, #4]
 800898e:	f000 fcf7 	bl	8009380 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8008992:	7bbb      	ldrb	r3, [r7, #14]
 8008994:	4619      	mov	r1, r3
 8008996:	6878      	ldr	r0, [r7, #4]
 8008998:	f7ff fde2 	bl	8008560 <USBD_CoreFindEP>
 800899c:	4603      	mov	r3, r0
 800899e:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80089a0:	7b7b      	ldrb	r3, [r7, #13]
 80089a2:	2bff      	cmp	r3, #255	; 0xff
 80089a4:	d01f      	beq.n	80089e6 <USBD_StdEPReq+0x1c6>
 80089a6:	7b7b      	ldrb	r3, [r7, #13]
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	d11c      	bne.n	80089e6 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 80089ac:	7b7a      	ldrb	r2, [r7, #13]
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 80089b4:	7b7a      	ldrb	r2, [r7, #13]
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	32ae      	adds	r2, #174	; 0xae
 80089ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80089be:	689b      	ldr	r3, [r3, #8]
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	d010      	beq.n	80089e6 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80089c4:	7b7a      	ldrb	r2, [r7, #13]
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	32ae      	adds	r2, #174	; 0xae
 80089ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80089ce:	689b      	ldr	r3, [r3, #8]
 80089d0:	6839      	ldr	r1, [r7, #0]
 80089d2:	6878      	ldr	r0, [r7, #4]
 80089d4:	4798      	blx	r3
 80089d6:	4603      	mov	r3, r0
 80089d8:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 80089da:	e004      	b.n	80089e6 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 80089dc:	6839      	ldr	r1, [r7, #0]
 80089de:	6878      	ldr	r0, [r7, #4]
 80089e0:	f000 fc03 	bl	80091ea <USBD_CtlError>
              break;
 80089e4:	e000      	b.n	80089e8 <USBD_StdEPReq+0x1c8>
              break;
 80089e6:	bf00      	nop
          }
          break;
 80089e8:	e0ab      	b.n	8008b42 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80089f0:	b2db      	uxtb	r3, r3
 80089f2:	2b02      	cmp	r3, #2
 80089f4:	d002      	beq.n	80089fc <USBD_StdEPReq+0x1dc>
 80089f6:	2b03      	cmp	r3, #3
 80089f8:	d032      	beq.n	8008a60 <USBD_StdEPReq+0x240>
 80089fa:	e097      	b.n	8008b2c <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80089fc:	7bbb      	ldrb	r3, [r7, #14]
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	d007      	beq.n	8008a12 <USBD_StdEPReq+0x1f2>
 8008a02:	7bbb      	ldrb	r3, [r7, #14]
 8008a04:	2b80      	cmp	r3, #128	; 0x80
 8008a06:	d004      	beq.n	8008a12 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8008a08:	6839      	ldr	r1, [r7, #0]
 8008a0a:	6878      	ldr	r0, [r7, #4]
 8008a0c:	f000 fbed 	bl	80091ea <USBD_CtlError>
                break;
 8008a10:	e091      	b.n	8008b36 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008a12:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	da0b      	bge.n	8008a32 <USBD_StdEPReq+0x212>
 8008a1a:	7bbb      	ldrb	r3, [r7, #14]
 8008a1c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008a20:	4613      	mov	r3, r2
 8008a22:	009b      	lsls	r3, r3, #2
 8008a24:	4413      	add	r3, r2
 8008a26:	009b      	lsls	r3, r3, #2
 8008a28:	3310      	adds	r3, #16
 8008a2a:	687a      	ldr	r2, [r7, #4]
 8008a2c:	4413      	add	r3, r2
 8008a2e:	3304      	adds	r3, #4
 8008a30:	e00b      	b.n	8008a4a <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008a32:	7bbb      	ldrb	r3, [r7, #14]
 8008a34:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008a38:	4613      	mov	r3, r2
 8008a3a:	009b      	lsls	r3, r3, #2
 8008a3c:	4413      	add	r3, r2
 8008a3e:	009b      	lsls	r3, r3, #2
 8008a40:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008a44:	687a      	ldr	r2, [r7, #4]
 8008a46:	4413      	add	r3, r2
 8008a48:	3304      	adds	r3, #4
 8008a4a:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8008a4c:	68bb      	ldr	r3, [r7, #8]
 8008a4e:	2200      	movs	r2, #0
 8008a50:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008a52:	68bb      	ldr	r3, [r7, #8]
 8008a54:	2202      	movs	r2, #2
 8008a56:	4619      	mov	r1, r3
 8008a58:	6878      	ldr	r0, [r7, #4]
 8008a5a:	f000 fc37 	bl	80092cc <USBD_CtlSendData>
              break;
 8008a5e:	e06a      	b.n	8008b36 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8008a60:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	da11      	bge.n	8008a8c <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008a68:	7bbb      	ldrb	r3, [r7, #14]
 8008a6a:	f003 020f 	and.w	r2, r3, #15
 8008a6e:	6879      	ldr	r1, [r7, #4]
 8008a70:	4613      	mov	r3, r2
 8008a72:	009b      	lsls	r3, r3, #2
 8008a74:	4413      	add	r3, r2
 8008a76:	009b      	lsls	r3, r3, #2
 8008a78:	440b      	add	r3, r1
 8008a7a:	3324      	adds	r3, #36	; 0x24
 8008a7c:	881b      	ldrh	r3, [r3, #0]
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	d117      	bne.n	8008ab2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8008a82:	6839      	ldr	r1, [r7, #0]
 8008a84:	6878      	ldr	r0, [r7, #4]
 8008a86:	f000 fbb0 	bl	80091ea <USBD_CtlError>
                  break;
 8008a8a:	e054      	b.n	8008b36 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008a8c:	7bbb      	ldrb	r3, [r7, #14]
 8008a8e:	f003 020f 	and.w	r2, r3, #15
 8008a92:	6879      	ldr	r1, [r7, #4]
 8008a94:	4613      	mov	r3, r2
 8008a96:	009b      	lsls	r3, r3, #2
 8008a98:	4413      	add	r3, r2
 8008a9a:	009b      	lsls	r3, r3, #2
 8008a9c:	440b      	add	r3, r1
 8008a9e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008aa2:	881b      	ldrh	r3, [r3, #0]
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	d104      	bne.n	8008ab2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8008aa8:	6839      	ldr	r1, [r7, #0]
 8008aaa:	6878      	ldr	r0, [r7, #4]
 8008aac:	f000 fb9d 	bl	80091ea <USBD_CtlError>
                  break;
 8008ab0:	e041      	b.n	8008b36 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008ab2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	da0b      	bge.n	8008ad2 <USBD_StdEPReq+0x2b2>
 8008aba:	7bbb      	ldrb	r3, [r7, #14]
 8008abc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008ac0:	4613      	mov	r3, r2
 8008ac2:	009b      	lsls	r3, r3, #2
 8008ac4:	4413      	add	r3, r2
 8008ac6:	009b      	lsls	r3, r3, #2
 8008ac8:	3310      	adds	r3, #16
 8008aca:	687a      	ldr	r2, [r7, #4]
 8008acc:	4413      	add	r3, r2
 8008ace:	3304      	adds	r3, #4
 8008ad0:	e00b      	b.n	8008aea <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008ad2:	7bbb      	ldrb	r3, [r7, #14]
 8008ad4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008ad8:	4613      	mov	r3, r2
 8008ada:	009b      	lsls	r3, r3, #2
 8008adc:	4413      	add	r3, r2
 8008ade:	009b      	lsls	r3, r3, #2
 8008ae0:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008ae4:	687a      	ldr	r2, [r7, #4]
 8008ae6:	4413      	add	r3, r2
 8008ae8:	3304      	adds	r3, #4
 8008aea:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008aec:	7bbb      	ldrb	r3, [r7, #14]
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	d002      	beq.n	8008af8 <USBD_StdEPReq+0x2d8>
 8008af2:	7bbb      	ldrb	r3, [r7, #14]
 8008af4:	2b80      	cmp	r3, #128	; 0x80
 8008af6:	d103      	bne.n	8008b00 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8008af8:	68bb      	ldr	r3, [r7, #8]
 8008afa:	2200      	movs	r2, #0
 8008afc:	601a      	str	r2, [r3, #0]
 8008afe:	e00e      	b.n	8008b1e <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8008b00:	7bbb      	ldrb	r3, [r7, #14]
 8008b02:	4619      	mov	r1, r3
 8008b04:	6878      	ldr	r0, [r7, #4]
 8008b06:	f001 f8bb 	bl	8009c80 <USBD_LL_IsStallEP>
 8008b0a:	4603      	mov	r3, r0
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	d003      	beq.n	8008b18 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8008b10:	68bb      	ldr	r3, [r7, #8]
 8008b12:	2201      	movs	r2, #1
 8008b14:	601a      	str	r2, [r3, #0]
 8008b16:	e002      	b.n	8008b1e <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8008b18:	68bb      	ldr	r3, [r7, #8]
 8008b1a:	2200      	movs	r2, #0
 8008b1c:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008b1e:	68bb      	ldr	r3, [r7, #8]
 8008b20:	2202      	movs	r2, #2
 8008b22:	4619      	mov	r1, r3
 8008b24:	6878      	ldr	r0, [r7, #4]
 8008b26:	f000 fbd1 	bl	80092cc <USBD_CtlSendData>
              break;
 8008b2a:	e004      	b.n	8008b36 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8008b2c:	6839      	ldr	r1, [r7, #0]
 8008b2e:	6878      	ldr	r0, [r7, #4]
 8008b30:	f000 fb5b 	bl	80091ea <USBD_CtlError>
              break;
 8008b34:	bf00      	nop
          }
          break;
 8008b36:	e004      	b.n	8008b42 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8008b38:	6839      	ldr	r1, [r7, #0]
 8008b3a:	6878      	ldr	r0, [r7, #4]
 8008b3c:	f000 fb55 	bl	80091ea <USBD_CtlError>
          break;
 8008b40:	bf00      	nop
      }
      break;
 8008b42:	e005      	b.n	8008b50 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8008b44:	6839      	ldr	r1, [r7, #0]
 8008b46:	6878      	ldr	r0, [r7, #4]
 8008b48:	f000 fb4f 	bl	80091ea <USBD_CtlError>
      break;
 8008b4c:	e000      	b.n	8008b50 <USBD_StdEPReq+0x330>
      break;
 8008b4e:	bf00      	nop
  }

  return ret;
 8008b50:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b52:	4618      	mov	r0, r3
 8008b54:	3710      	adds	r7, #16
 8008b56:	46bd      	mov	sp, r7
 8008b58:	bd80      	pop	{r7, pc}
	...

08008b5c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008b5c:	b580      	push	{r7, lr}
 8008b5e:	b084      	sub	sp, #16
 8008b60:	af00      	add	r7, sp, #0
 8008b62:	6078      	str	r0, [r7, #4]
 8008b64:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008b66:	2300      	movs	r3, #0
 8008b68:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8008b6a:	2300      	movs	r3, #0
 8008b6c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8008b6e:	2300      	movs	r3, #0
 8008b70:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8008b72:	683b      	ldr	r3, [r7, #0]
 8008b74:	885b      	ldrh	r3, [r3, #2]
 8008b76:	0a1b      	lsrs	r3, r3, #8
 8008b78:	b29b      	uxth	r3, r3
 8008b7a:	3b01      	subs	r3, #1
 8008b7c:	2b06      	cmp	r3, #6
 8008b7e:	f200 8128 	bhi.w	8008dd2 <USBD_GetDescriptor+0x276>
 8008b82:	a201      	add	r2, pc, #4	; (adr r2, 8008b88 <USBD_GetDescriptor+0x2c>)
 8008b84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b88:	08008ba5 	.word	0x08008ba5
 8008b8c:	08008bbd 	.word	0x08008bbd
 8008b90:	08008bfd 	.word	0x08008bfd
 8008b94:	08008dd3 	.word	0x08008dd3
 8008b98:	08008dd3 	.word	0x08008dd3
 8008b9c:	08008d73 	.word	0x08008d73
 8008ba0:	08008d9f 	.word	0x08008d9f
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	687a      	ldr	r2, [r7, #4]
 8008bae:	7c12      	ldrb	r2, [r2, #16]
 8008bb0:	f107 0108 	add.w	r1, r7, #8
 8008bb4:	4610      	mov	r0, r2
 8008bb6:	4798      	blx	r3
 8008bb8:	60f8      	str	r0, [r7, #12]
      break;
 8008bba:	e112      	b.n	8008de2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	7c1b      	ldrb	r3, [r3, #16]
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	d10d      	bne.n	8008be0 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008bca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008bcc:	f107 0208 	add.w	r2, r7, #8
 8008bd0:	4610      	mov	r0, r2
 8008bd2:	4798      	blx	r3
 8008bd4:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008bd6:	68fb      	ldr	r3, [r7, #12]
 8008bd8:	3301      	adds	r3, #1
 8008bda:	2202      	movs	r2, #2
 8008bdc:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8008bde:	e100      	b.n	8008de2 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008be6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008be8:	f107 0208 	add.w	r2, r7, #8
 8008bec:	4610      	mov	r0, r2
 8008bee:	4798      	blx	r3
 8008bf0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008bf2:	68fb      	ldr	r3, [r7, #12]
 8008bf4:	3301      	adds	r3, #1
 8008bf6:	2202      	movs	r2, #2
 8008bf8:	701a      	strb	r2, [r3, #0]
      break;
 8008bfa:	e0f2      	b.n	8008de2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008bfc:	683b      	ldr	r3, [r7, #0]
 8008bfe:	885b      	ldrh	r3, [r3, #2]
 8008c00:	b2db      	uxtb	r3, r3
 8008c02:	2b05      	cmp	r3, #5
 8008c04:	f200 80ac 	bhi.w	8008d60 <USBD_GetDescriptor+0x204>
 8008c08:	a201      	add	r2, pc, #4	; (adr r2, 8008c10 <USBD_GetDescriptor+0xb4>)
 8008c0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c0e:	bf00      	nop
 8008c10:	08008c29 	.word	0x08008c29
 8008c14:	08008c5d 	.word	0x08008c5d
 8008c18:	08008c91 	.word	0x08008c91
 8008c1c:	08008cc5 	.word	0x08008cc5
 8008c20:	08008cf9 	.word	0x08008cf9
 8008c24:	08008d2d 	.word	0x08008d2d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008c2e:	685b      	ldr	r3, [r3, #4]
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	d00b      	beq.n	8008c4c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008c3a:	685b      	ldr	r3, [r3, #4]
 8008c3c:	687a      	ldr	r2, [r7, #4]
 8008c3e:	7c12      	ldrb	r2, [r2, #16]
 8008c40:	f107 0108 	add.w	r1, r7, #8
 8008c44:	4610      	mov	r0, r2
 8008c46:	4798      	blx	r3
 8008c48:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008c4a:	e091      	b.n	8008d70 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008c4c:	6839      	ldr	r1, [r7, #0]
 8008c4e:	6878      	ldr	r0, [r7, #4]
 8008c50:	f000 facb 	bl	80091ea <USBD_CtlError>
            err++;
 8008c54:	7afb      	ldrb	r3, [r7, #11]
 8008c56:	3301      	adds	r3, #1
 8008c58:	72fb      	strb	r3, [r7, #11]
          break;
 8008c5a:	e089      	b.n	8008d70 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008c62:	689b      	ldr	r3, [r3, #8]
 8008c64:	2b00      	cmp	r3, #0
 8008c66:	d00b      	beq.n	8008c80 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008c6e:	689b      	ldr	r3, [r3, #8]
 8008c70:	687a      	ldr	r2, [r7, #4]
 8008c72:	7c12      	ldrb	r2, [r2, #16]
 8008c74:	f107 0108 	add.w	r1, r7, #8
 8008c78:	4610      	mov	r0, r2
 8008c7a:	4798      	blx	r3
 8008c7c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008c7e:	e077      	b.n	8008d70 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008c80:	6839      	ldr	r1, [r7, #0]
 8008c82:	6878      	ldr	r0, [r7, #4]
 8008c84:	f000 fab1 	bl	80091ea <USBD_CtlError>
            err++;
 8008c88:	7afb      	ldrb	r3, [r7, #11]
 8008c8a:	3301      	adds	r3, #1
 8008c8c:	72fb      	strb	r3, [r7, #11]
          break;
 8008c8e:	e06f      	b.n	8008d70 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008c96:	68db      	ldr	r3, [r3, #12]
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	d00b      	beq.n	8008cb4 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008ca2:	68db      	ldr	r3, [r3, #12]
 8008ca4:	687a      	ldr	r2, [r7, #4]
 8008ca6:	7c12      	ldrb	r2, [r2, #16]
 8008ca8:	f107 0108 	add.w	r1, r7, #8
 8008cac:	4610      	mov	r0, r2
 8008cae:	4798      	blx	r3
 8008cb0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008cb2:	e05d      	b.n	8008d70 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008cb4:	6839      	ldr	r1, [r7, #0]
 8008cb6:	6878      	ldr	r0, [r7, #4]
 8008cb8:	f000 fa97 	bl	80091ea <USBD_CtlError>
            err++;
 8008cbc:	7afb      	ldrb	r3, [r7, #11]
 8008cbe:	3301      	adds	r3, #1
 8008cc0:	72fb      	strb	r3, [r7, #11]
          break;
 8008cc2:	e055      	b.n	8008d70 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008cca:	691b      	ldr	r3, [r3, #16]
 8008ccc:	2b00      	cmp	r3, #0
 8008cce:	d00b      	beq.n	8008ce8 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008cd6:	691b      	ldr	r3, [r3, #16]
 8008cd8:	687a      	ldr	r2, [r7, #4]
 8008cda:	7c12      	ldrb	r2, [r2, #16]
 8008cdc:	f107 0108 	add.w	r1, r7, #8
 8008ce0:	4610      	mov	r0, r2
 8008ce2:	4798      	blx	r3
 8008ce4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008ce6:	e043      	b.n	8008d70 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008ce8:	6839      	ldr	r1, [r7, #0]
 8008cea:	6878      	ldr	r0, [r7, #4]
 8008cec:	f000 fa7d 	bl	80091ea <USBD_CtlError>
            err++;
 8008cf0:	7afb      	ldrb	r3, [r7, #11]
 8008cf2:	3301      	adds	r3, #1
 8008cf4:	72fb      	strb	r3, [r7, #11]
          break;
 8008cf6:	e03b      	b.n	8008d70 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008cfe:	695b      	ldr	r3, [r3, #20]
 8008d00:	2b00      	cmp	r3, #0
 8008d02:	d00b      	beq.n	8008d1c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008d0a:	695b      	ldr	r3, [r3, #20]
 8008d0c:	687a      	ldr	r2, [r7, #4]
 8008d0e:	7c12      	ldrb	r2, [r2, #16]
 8008d10:	f107 0108 	add.w	r1, r7, #8
 8008d14:	4610      	mov	r0, r2
 8008d16:	4798      	blx	r3
 8008d18:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008d1a:	e029      	b.n	8008d70 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008d1c:	6839      	ldr	r1, [r7, #0]
 8008d1e:	6878      	ldr	r0, [r7, #4]
 8008d20:	f000 fa63 	bl	80091ea <USBD_CtlError>
            err++;
 8008d24:	7afb      	ldrb	r3, [r7, #11]
 8008d26:	3301      	adds	r3, #1
 8008d28:	72fb      	strb	r3, [r7, #11]
          break;
 8008d2a:	e021      	b.n	8008d70 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008d32:	699b      	ldr	r3, [r3, #24]
 8008d34:	2b00      	cmp	r3, #0
 8008d36:	d00b      	beq.n	8008d50 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008d3e:	699b      	ldr	r3, [r3, #24]
 8008d40:	687a      	ldr	r2, [r7, #4]
 8008d42:	7c12      	ldrb	r2, [r2, #16]
 8008d44:	f107 0108 	add.w	r1, r7, #8
 8008d48:	4610      	mov	r0, r2
 8008d4a:	4798      	blx	r3
 8008d4c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008d4e:	e00f      	b.n	8008d70 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008d50:	6839      	ldr	r1, [r7, #0]
 8008d52:	6878      	ldr	r0, [r7, #4]
 8008d54:	f000 fa49 	bl	80091ea <USBD_CtlError>
            err++;
 8008d58:	7afb      	ldrb	r3, [r7, #11]
 8008d5a:	3301      	adds	r3, #1
 8008d5c:	72fb      	strb	r3, [r7, #11]
          break;
 8008d5e:	e007      	b.n	8008d70 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8008d60:	6839      	ldr	r1, [r7, #0]
 8008d62:	6878      	ldr	r0, [r7, #4]
 8008d64:	f000 fa41 	bl	80091ea <USBD_CtlError>
          err++;
 8008d68:	7afb      	ldrb	r3, [r7, #11]
 8008d6a:	3301      	adds	r3, #1
 8008d6c:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8008d6e:	bf00      	nop
      }
      break;
 8008d70:	e037      	b.n	8008de2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	7c1b      	ldrb	r3, [r3, #16]
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	d109      	bne.n	8008d8e <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008d80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d82:	f107 0208 	add.w	r2, r7, #8
 8008d86:	4610      	mov	r0, r2
 8008d88:	4798      	blx	r3
 8008d8a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008d8c:	e029      	b.n	8008de2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008d8e:	6839      	ldr	r1, [r7, #0]
 8008d90:	6878      	ldr	r0, [r7, #4]
 8008d92:	f000 fa2a 	bl	80091ea <USBD_CtlError>
        err++;
 8008d96:	7afb      	ldrb	r3, [r7, #11]
 8008d98:	3301      	adds	r3, #1
 8008d9a:	72fb      	strb	r3, [r7, #11]
      break;
 8008d9c:	e021      	b.n	8008de2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	7c1b      	ldrb	r3, [r3, #16]
 8008da2:	2b00      	cmp	r3, #0
 8008da4:	d10d      	bne.n	8008dc2 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008dac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008dae:	f107 0208 	add.w	r2, r7, #8
 8008db2:	4610      	mov	r0, r2
 8008db4:	4798      	blx	r3
 8008db6:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008db8:	68fb      	ldr	r3, [r7, #12]
 8008dba:	3301      	adds	r3, #1
 8008dbc:	2207      	movs	r2, #7
 8008dbe:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008dc0:	e00f      	b.n	8008de2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008dc2:	6839      	ldr	r1, [r7, #0]
 8008dc4:	6878      	ldr	r0, [r7, #4]
 8008dc6:	f000 fa10 	bl	80091ea <USBD_CtlError>
        err++;
 8008dca:	7afb      	ldrb	r3, [r7, #11]
 8008dcc:	3301      	adds	r3, #1
 8008dce:	72fb      	strb	r3, [r7, #11]
      break;
 8008dd0:	e007      	b.n	8008de2 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8008dd2:	6839      	ldr	r1, [r7, #0]
 8008dd4:	6878      	ldr	r0, [r7, #4]
 8008dd6:	f000 fa08 	bl	80091ea <USBD_CtlError>
      err++;
 8008dda:	7afb      	ldrb	r3, [r7, #11]
 8008ddc:	3301      	adds	r3, #1
 8008dde:	72fb      	strb	r3, [r7, #11]
      break;
 8008de0:	bf00      	nop
  }

  if (err != 0U)
 8008de2:	7afb      	ldrb	r3, [r7, #11]
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	d11e      	bne.n	8008e26 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8008de8:	683b      	ldr	r3, [r7, #0]
 8008dea:	88db      	ldrh	r3, [r3, #6]
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	d016      	beq.n	8008e1e <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8008df0:	893b      	ldrh	r3, [r7, #8]
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	d00e      	beq.n	8008e14 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8008df6:	683b      	ldr	r3, [r7, #0]
 8008df8:	88da      	ldrh	r2, [r3, #6]
 8008dfa:	893b      	ldrh	r3, [r7, #8]
 8008dfc:	4293      	cmp	r3, r2
 8008dfe:	bf28      	it	cs
 8008e00:	4613      	movcs	r3, r2
 8008e02:	b29b      	uxth	r3, r3
 8008e04:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8008e06:	893b      	ldrh	r3, [r7, #8]
 8008e08:	461a      	mov	r2, r3
 8008e0a:	68f9      	ldr	r1, [r7, #12]
 8008e0c:	6878      	ldr	r0, [r7, #4]
 8008e0e:	f000 fa5d 	bl	80092cc <USBD_CtlSendData>
 8008e12:	e009      	b.n	8008e28 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8008e14:	6839      	ldr	r1, [r7, #0]
 8008e16:	6878      	ldr	r0, [r7, #4]
 8008e18:	f000 f9e7 	bl	80091ea <USBD_CtlError>
 8008e1c:	e004      	b.n	8008e28 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8008e1e:	6878      	ldr	r0, [r7, #4]
 8008e20:	f000 faae 	bl	8009380 <USBD_CtlSendStatus>
 8008e24:	e000      	b.n	8008e28 <USBD_GetDescriptor+0x2cc>
    return;
 8008e26:	bf00      	nop
  }
}
 8008e28:	3710      	adds	r7, #16
 8008e2a:	46bd      	mov	sp, r7
 8008e2c:	bd80      	pop	{r7, pc}
 8008e2e:	bf00      	nop

08008e30 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008e30:	b580      	push	{r7, lr}
 8008e32:	b084      	sub	sp, #16
 8008e34:	af00      	add	r7, sp, #0
 8008e36:	6078      	str	r0, [r7, #4]
 8008e38:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008e3a:	683b      	ldr	r3, [r7, #0]
 8008e3c:	889b      	ldrh	r3, [r3, #4]
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	d131      	bne.n	8008ea6 <USBD_SetAddress+0x76>
 8008e42:	683b      	ldr	r3, [r7, #0]
 8008e44:	88db      	ldrh	r3, [r3, #6]
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	d12d      	bne.n	8008ea6 <USBD_SetAddress+0x76>
 8008e4a:	683b      	ldr	r3, [r7, #0]
 8008e4c:	885b      	ldrh	r3, [r3, #2]
 8008e4e:	2b7f      	cmp	r3, #127	; 0x7f
 8008e50:	d829      	bhi.n	8008ea6 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008e52:	683b      	ldr	r3, [r7, #0]
 8008e54:	885b      	ldrh	r3, [r3, #2]
 8008e56:	b2db      	uxtb	r3, r3
 8008e58:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008e5c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008e64:	b2db      	uxtb	r3, r3
 8008e66:	2b03      	cmp	r3, #3
 8008e68:	d104      	bne.n	8008e74 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8008e6a:	6839      	ldr	r1, [r7, #0]
 8008e6c:	6878      	ldr	r0, [r7, #4]
 8008e6e:	f000 f9bc 	bl	80091ea <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008e72:	e01d      	b.n	8008eb0 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	7bfa      	ldrb	r2, [r7, #15]
 8008e78:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008e7c:	7bfb      	ldrb	r3, [r7, #15]
 8008e7e:	4619      	mov	r1, r3
 8008e80:	6878      	ldr	r0, [r7, #4]
 8008e82:	f000 ff29 	bl	8009cd8 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8008e86:	6878      	ldr	r0, [r7, #4]
 8008e88:	f000 fa7a 	bl	8009380 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008e8c:	7bfb      	ldrb	r3, [r7, #15]
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	d004      	beq.n	8008e9c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	2202      	movs	r2, #2
 8008e96:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008e9a:	e009      	b.n	8008eb0 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	2201      	movs	r2, #1
 8008ea0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008ea4:	e004      	b.n	8008eb0 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008ea6:	6839      	ldr	r1, [r7, #0]
 8008ea8:	6878      	ldr	r0, [r7, #4]
 8008eaa:	f000 f99e 	bl	80091ea <USBD_CtlError>
  }
}
 8008eae:	bf00      	nop
 8008eb0:	bf00      	nop
 8008eb2:	3710      	adds	r7, #16
 8008eb4:	46bd      	mov	sp, r7
 8008eb6:	bd80      	pop	{r7, pc}

08008eb8 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008eb8:	b580      	push	{r7, lr}
 8008eba:	b084      	sub	sp, #16
 8008ebc:	af00      	add	r7, sp, #0
 8008ebe:	6078      	str	r0, [r7, #4]
 8008ec0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008ec2:	2300      	movs	r3, #0
 8008ec4:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008ec6:	683b      	ldr	r3, [r7, #0]
 8008ec8:	885b      	ldrh	r3, [r3, #2]
 8008eca:	b2da      	uxtb	r2, r3
 8008ecc:	4b4e      	ldr	r3, [pc, #312]	; (8009008 <USBD_SetConfig+0x150>)
 8008ece:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008ed0:	4b4d      	ldr	r3, [pc, #308]	; (8009008 <USBD_SetConfig+0x150>)
 8008ed2:	781b      	ldrb	r3, [r3, #0]
 8008ed4:	2b01      	cmp	r3, #1
 8008ed6:	d905      	bls.n	8008ee4 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8008ed8:	6839      	ldr	r1, [r7, #0]
 8008eda:	6878      	ldr	r0, [r7, #4]
 8008edc:	f000 f985 	bl	80091ea <USBD_CtlError>
    return USBD_FAIL;
 8008ee0:	2303      	movs	r3, #3
 8008ee2:	e08c      	b.n	8008ffe <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008eea:	b2db      	uxtb	r3, r3
 8008eec:	2b02      	cmp	r3, #2
 8008eee:	d002      	beq.n	8008ef6 <USBD_SetConfig+0x3e>
 8008ef0:	2b03      	cmp	r3, #3
 8008ef2:	d029      	beq.n	8008f48 <USBD_SetConfig+0x90>
 8008ef4:	e075      	b.n	8008fe2 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8008ef6:	4b44      	ldr	r3, [pc, #272]	; (8009008 <USBD_SetConfig+0x150>)
 8008ef8:	781b      	ldrb	r3, [r3, #0]
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	d020      	beq.n	8008f40 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8008efe:	4b42      	ldr	r3, [pc, #264]	; (8009008 <USBD_SetConfig+0x150>)
 8008f00:	781b      	ldrb	r3, [r3, #0]
 8008f02:	461a      	mov	r2, r3
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008f08:	4b3f      	ldr	r3, [pc, #252]	; (8009008 <USBD_SetConfig+0x150>)
 8008f0a:	781b      	ldrb	r3, [r3, #0]
 8008f0c:	4619      	mov	r1, r3
 8008f0e:	6878      	ldr	r0, [r7, #4]
 8008f10:	f7fe ffe7 	bl	8007ee2 <USBD_SetClassConfig>
 8008f14:	4603      	mov	r3, r0
 8008f16:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8008f18:	7bfb      	ldrb	r3, [r7, #15]
 8008f1a:	2b00      	cmp	r3, #0
 8008f1c:	d008      	beq.n	8008f30 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8008f1e:	6839      	ldr	r1, [r7, #0]
 8008f20:	6878      	ldr	r0, [r7, #4]
 8008f22:	f000 f962 	bl	80091ea <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	2202      	movs	r2, #2
 8008f2a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008f2e:	e065      	b.n	8008ffc <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8008f30:	6878      	ldr	r0, [r7, #4]
 8008f32:	f000 fa25 	bl	8009380 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	2203      	movs	r2, #3
 8008f3a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8008f3e:	e05d      	b.n	8008ffc <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8008f40:	6878      	ldr	r0, [r7, #4]
 8008f42:	f000 fa1d 	bl	8009380 <USBD_CtlSendStatus>
      break;
 8008f46:	e059      	b.n	8008ffc <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8008f48:	4b2f      	ldr	r3, [pc, #188]	; (8009008 <USBD_SetConfig+0x150>)
 8008f4a:	781b      	ldrb	r3, [r3, #0]
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	d112      	bne.n	8008f76 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	2202      	movs	r2, #2
 8008f54:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8008f58:	4b2b      	ldr	r3, [pc, #172]	; (8009008 <USBD_SetConfig+0x150>)
 8008f5a:	781b      	ldrb	r3, [r3, #0]
 8008f5c:	461a      	mov	r2, r3
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008f62:	4b29      	ldr	r3, [pc, #164]	; (8009008 <USBD_SetConfig+0x150>)
 8008f64:	781b      	ldrb	r3, [r3, #0]
 8008f66:	4619      	mov	r1, r3
 8008f68:	6878      	ldr	r0, [r7, #4]
 8008f6a:	f7fe ffd6 	bl	8007f1a <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8008f6e:	6878      	ldr	r0, [r7, #4]
 8008f70:	f000 fa06 	bl	8009380 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008f74:	e042      	b.n	8008ffc <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8008f76:	4b24      	ldr	r3, [pc, #144]	; (8009008 <USBD_SetConfig+0x150>)
 8008f78:	781b      	ldrb	r3, [r3, #0]
 8008f7a:	461a      	mov	r2, r3
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	685b      	ldr	r3, [r3, #4]
 8008f80:	429a      	cmp	r2, r3
 8008f82:	d02a      	beq.n	8008fda <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	685b      	ldr	r3, [r3, #4]
 8008f88:	b2db      	uxtb	r3, r3
 8008f8a:	4619      	mov	r1, r3
 8008f8c:	6878      	ldr	r0, [r7, #4]
 8008f8e:	f7fe ffc4 	bl	8007f1a <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8008f92:	4b1d      	ldr	r3, [pc, #116]	; (8009008 <USBD_SetConfig+0x150>)
 8008f94:	781b      	ldrb	r3, [r3, #0]
 8008f96:	461a      	mov	r2, r3
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008f9c:	4b1a      	ldr	r3, [pc, #104]	; (8009008 <USBD_SetConfig+0x150>)
 8008f9e:	781b      	ldrb	r3, [r3, #0]
 8008fa0:	4619      	mov	r1, r3
 8008fa2:	6878      	ldr	r0, [r7, #4]
 8008fa4:	f7fe ff9d 	bl	8007ee2 <USBD_SetClassConfig>
 8008fa8:	4603      	mov	r3, r0
 8008faa:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8008fac:	7bfb      	ldrb	r3, [r7, #15]
 8008fae:	2b00      	cmp	r3, #0
 8008fb0:	d00f      	beq.n	8008fd2 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8008fb2:	6839      	ldr	r1, [r7, #0]
 8008fb4:	6878      	ldr	r0, [r7, #4]
 8008fb6:	f000 f918 	bl	80091ea <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	685b      	ldr	r3, [r3, #4]
 8008fbe:	b2db      	uxtb	r3, r3
 8008fc0:	4619      	mov	r1, r3
 8008fc2:	6878      	ldr	r0, [r7, #4]
 8008fc4:	f7fe ffa9 	bl	8007f1a <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	2202      	movs	r2, #2
 8008fcc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8008fd0:	e014      	b.n	8008ffc <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8008fd2:	6878      	ldr	r0, [r7, #4]
 8008fd4:	f000 f9d4 	bl	8009380 <USBD_CtlSendStatus>
      break;
 8008fd8:	e010      	b.n	8008ffc <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8008fda:	6878      	ldr	r0, [r7, #4]
 8008fdc:	f000 f9d0 	bl	8009380 <USBD_CtlSendStatus>
      break;
 8008fe0:	e00c      	b.n	8008ffc <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8008fe2:	6839      	ldr	r1, [r7, #0]
 8008fe4:	6878      	ldr	r0, [r7, #4]
 8008fe6:	f000 f900 	bl	80091ea <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008fea:	4b07      	ldr	r3, [pc, #28]	; (8009008 <USBD_SetConfig+0x150>)
 8008fec:	781b      	ldrb	r3, [r3, #0]
 8008fee:	4619      	mov	r1, r3
 8008ff0:	6878      	ldr	r0, [r7, #4]
 8008ff2:	f7fe ff92 	bl	8007f1a <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8008ff6:	2303      	movs	r3, #3
 8008ff8:	73fb      	strb	r3, [r7, #15]
      break;
 8008ffa:	bf00      	nop
  }

  return ret;
 8008ffc:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ffe:	4618      	mov	r0, r3
 8009000:	3710      	adds	r7, #16
 8009002:	46bd      	mov	sp, r7
 8009004:	bd80      	pop	{r7, pc}
 8009006:	bf00      	nop
 8009008:	200004bc 	.word	0x200004bc

0800900c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800900c:	b580      	push	{r7, lr}
 800900e:	b082      	sub	sp, #8
 8009010:	af00      	add	r7, sp, #0
 8009012:	6078      	str	r0, [r7, #4]
 8009014:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8009016:	683b      	ldr	r3, [r7, #0]
 8009018:	88db      	ldrh	r3, [r3, #6]
 800901a:	2b01      	cmp	r3, #1
 800901c:	d004      	beq.n	8009028 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800901e:	6839      	ldr	r1, [r7, #0]
 8009020:	6878      	ldr	r0, [r7, #4]
 8009022:	f000 f8e2 	bl	80091ea <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8009026:	e023      	b.n	8009070 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800902e:	b2db      	uxtb	r3, r3
 8009030:	2b02      	cmp	r3, #2
 8009032:	dc02      	bgt.n	800903a <USBD_GetConfig+0x2e>
 8009034:	2b00      	cmp	r3, #0
 8009036:	dc03      	bgt.n	8009040 <USBD_GetConfig+0x34>
 8009038:	e015      	b.n	8009066 <USBD_GetConfig+0x5a>
 800903a:	2b03      	cmp	r3, #3
 800903c:	d00b      	beq.n	8009056 <USBD_GetConfig+0x4a>
 800903e:	e012      	b.n	8009066 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	2200      	movs	r2, #0
 8009044:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	3308      	adds	r3, #8
 800904a:	2201      	movs	r2, #1
 800904c:	4619      	mov	r1, r3
 800904e:	6878      	ldr	r0, [r7, #4]
 8009050:	f000 f93c 	bl	80092cc <USBD_CtlSendData>
        break;
 8009054:	e00c      	b.n	8009070 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	3304      	adds	r3, #4
 800905a:	2201      	movs	r2, #1
 800905c:	4619      	mov	r1, r3
 800905e:	6878      	ldr	r0, [r7, #4]
 8009060:	f000 f934 	bl	80092cc <USBD_CtlSendData>
        break;
 8009064:	e004      	b.n	8009070 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8009066:	6839      	ldr	r1, [r7, #0]
 8009068:	6878      	ldr	r0, [r7, #4]
 800906a:	f000 f8be 	bl	80091ea <USBD_CtlError>
        break;
 800906e:	bf00      	nop
}
 8009070:	bf00      	nop
 8009072:	3708      	adds	r7, #8
 8009074:	46bd      	mov	sp, r7
 8009076:	bd80      	pop	{r7, pc}

08009078 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009078:	b580      	push	{r7, lr}
 800907a:	b082      	sub	sp, #8
 800907c:	af00      	add	r7, sp, #0
 800907e:	6078      	str	r0, [r7, #4]
 8009080:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009088:	b2db      	uxtb	r3, r3
 800908a:	3b01      	subs	r3, #1
 800908c:	2b02      	cmp	r3, #2
 800908e:	d81e      	bhi.n	80090ce <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8009090:	683b      	ldr	r3, [r7, #0]
 8009092:	88db      	ldrh	r3, [r3, #6]
 8009094:	2b02      	cmp	r3, #2
 8009096:	d004      	beq.n	80090a2 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8009098:	6839      	ldr	r1, [r7, #0]
 800909a:	6878      	ldr	r0, [r7, #4]
 800909c:	f000 f8a5 	bl	80091ea <USBD_CtlError>
        break;
 80090a0:	e01a      	b.n	80090d8 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	2201      	movs	r2, #1
 80090a6:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	d005      	beq.n	80090be <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	68db      	ldr	r3, [r3, #12]
 80090b6:	f043 0202 	orr.w	r2, r3, #2
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	330c      	adds	r3, #12
 80090c2:	2202      	movs	r2, #2
 80090c4:	4619      	mov	r1, r3
 80090c6:	6878      	ldr	r0, [r7, #4]
 80090c8:	f000 f900 	bl	80092cc <USBD_CtlSendData>
      break;
 80090cc:	e004      	b.n	80090d8 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80090ce:	6839      	ldr	r1, [r7, #0]
 80090d0:	6878      	ldr	r0, [r7, #4]
 80090d2:	f000 f88a 	bl	80091ea <USBD_CtlError>
      break;
 80090d6:	bf00      	nop
  }
}
 80090d8:	bf00      	nop
 80090da:	3708      	adds	r7, #8
 80090dc:	46bd      	mov	sp, r7
 80090de:	bd80      	pop	{r7, pc}

080090e0 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80090e0:	b580      	push	{r7, lr}
 80090e2:	b082      	sub	sp, #8
 80090e4:	af00      	add	r7, sp, #0
 80090e6:	6078      	str	r0, [r7, #4]
 80090e8:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80090ea:	683b      	ldr	r3, [r7, #0]
 80090ec:	885b      	ldrh	r3, [r3, #2]
 80090ee:	2b01      	cmp	r3, #1
 80090f0:	d107      	bne.n	8009102 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	2201      	movs	r2, #1
 80090f6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80090fa:	6878      	ldr	r0, [r7, #4]
 80090fc:	f000 f940 	bl	8009380 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8009100:	e013      	b.n	800912a <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8009102:	683b      	ldr	r3, [r7, #0]
 8009104:	885b      	ldrh	r3, [r3, #2]
 8009106:	2b02      	cmp	r3, #2
 8009108:	d10b      	bne.n	8009122 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 800910a:	683b      	ldr	r3, [r7, #0]
 800910c:	889b      	ldrh	r3, [r3, #4]
 800910e:	0a1b      	lsrs	r3, r3, #8
 8009110:	b29b      	uxth	r3, r3
 8009112:	b2da      	uxtb	r2, r3
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800911a:	6878      	ldr	r0, [r7, #4]
 800911c:	f000 f930 	bl	8009380 <USBD_CtlSendStatus>
}
 8009120:	e003      	b.n	800912a <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8009122:	6839      	ldr	r1, [r7, #0]
 8009124:	6878      	ldr	r0, [r7, #4]
 8009126:	f000 f860 	bl	80091ea <USBD_CtlError>
}
 800912a:	bf00      	nop
 800912c:	3708      	adds	r7, #8
 800912e:	46bd      	mov	sp, r7
 8009130:	bd80      	pop	{r7, pc}

08009132 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009132:	b580      	push	{r7, lr}
 8009134:	b082      	sub	sp, #8
 8009136:	af00      	add	r7, sp, #0
 8009138:	6078      	str	r0, [r7, #4]
 800913a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009142:	b2db      	uxtb	r3, r3
 8009144:	3b01      	subs	r3, #1
 8009146:	2b02      	cmp	r3, #2
 8009148:	d80b      	bhi.n	8009162 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800914a:	683b      	ldr	r3, [r7, #0]
 800914c:	885b      	ldrh	r3, [r3, #2]
 800914e:	2b01      	cmp	r3, #1
 8009150:	d10c      	bne.n	800916c <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	2200      	movs	r2, #0
 8009156:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800915a:	6878      	ldr	r0, [r7, #4]
 800915c:	f000 f910 	bl	8009380 <USBD_CtlSendStatus>
      }
      break;
 8009160:	e004      	b.n	800916c <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8009162:	6839      	ldr	r1, [r7, #0]
 8009164:	6878      	ldr	r0, [r7, #4]
 8009166:	f000 f840 	bl	80091ea <USBD_CtlError>
      break;
 800916a:	e000      	b.n	800916e <USBD_ClrFeature+0x3c>
      break;
 800916c:	bf00      	nop
  }
}
 800916e:	bf00      	nop
 8009170:	3708      	adds	r7, #8
 8009172:	46bd      	mov	sp, r7
 8009174:	bd80      	pop	{r7, pc}

08009176 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8009176:	b580      	push	{r7, lr}
 8009178:	b084      	sub	sp, #16
 800917a:	af00      	add	r7, sp, #0
 800917c:	6078      	str	r0, [r7, #4]
 800917e:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8009180:	683b      	ldr	r3, [r7, #0]
 8009182:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8009184:	68fb      	ldr	r3, [r7, #12]
 8009186:	781a      	ldrb	r2, [r3, #0]
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800918c:	68fb      	ldr	r3, [r7, #12]
 800918e:	3301      	adds	r3, #1
 8009190:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8009192:	68fb      	ldr	r3, [r7, #12]
 8009194:	781a      	ldrb	r2, [r3, #0]
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800919a:	68fb      	ldr	r3, [r7, #12]
 800919c:	3301      	adds	r3, #1
 800919e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80091a0:	68f8      	ldr	r0, [r7, #12]
 80091a2:	f7ff fa41 	bl	8008628 <SWAPBYTE>
 80091a6:	4603      	mov	r3, r0
 80091a8:	461a      	mov	r2, r3
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80091ae:	68fb      	ldr	r3, [r7, #12]
 80091b0:	3301      	adds	r3, #1
 80091b2:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80091b4:	68fb      	ldr	r3, [r7, #12]
 80091b6:	3301      	adds	r3, #1
 80091b8:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80091ba:	68f8      	ldr	r0, [r7, #12]
 80091bc:	f7ff fa34 	bl	8008628 <SWAPBYTE>
 80091c0:	4603      	mov	r3, r0
 80091c2:	461a      	mov	r2, r3
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80091c8:	68fb      	ldr	r3, [r7, #12]
 80091ca:	3301      	adds	r3, #1
 80091cc:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80091ce:	68fb      	ldr	r3, [r7, #12]
 80091d0:	3301      	adds	r3, #1
 80091d2:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80091d4:	68f8      	ldr	r0, [r7, #12]
 80091d6:	f7ff fa27 	bl	8008628 <SWAPBYTE>
 80091da:	4603      	mov	r3, r0
 80091dc:	461a      	mov	r2, r3
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	80da      	strh	r2, [r3, #6]
}
 80091e2:	bf00      	nop
 80091e4:	3710      	adds	r7, #16
 80091e6:	46bd      	mov	sp, r7
 80091e8:	bd80      	pop	{r7, pc}

080091ea <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80091ea:	b580      	push	{r7, lr}
 80091ec:	b082      	sub	sp, #8
 80091ee:	af00      	add	r7, sp, #0
 80091f0:	6078      	str	r0, [r7, #4]
 80091f2:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80091f4:	2180      	movs	r1, #128	; 0x80
 80091f6:	6878      	ldr	r0, [r7, #4]
 80091f8:	f000 fd04 	bl	8009c04 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80091fc:	2100      	movs	r1, #0
 80091fe:	6878      	ldr	r0, [r7, #4]
 8009200:	f000 fd00 	bl	8009c04 <USBD_LL_StallEP>
}
 8009204:	bf00      	nop
 8009206:	3708      	adds	r7, #8
 8009208:	46bd      	mov	sp, r7
 800920a:	bd80      	pop	{r7, pc}

0800920c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800920c:	b580      	push	{r7, lr}
 800920e:	b086      	sub	sp, #24
 8009210:	af00      	add	r7, sp, #0
 8009212:	60f8      	str	r0, [r7, #12]
 8009214:	60b9      	str	r1, [r7, #8]
 8009216:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8009218:	2300      	movs	r3, #0
 800921a:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800921c:	68fb      	ldr	r3, [r7, #12]
 800921e:	2b00      	cmp	r3, #0
 8009220:	d036      	beq.n	8009290 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8009222:	68fb      	ldr	r3, [r7, #12]
 8009224:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8009226:	6938      	ldr	r0, [r7, #16]
 8009228:	f000 f836 	bl	8009298 <USBD_GetLen>
 800922c:	4603      	mov	r3, r0
 800922e:	3301      	adds	r3, #1
 8009230:	b29b      	uxth	r3, r3
 8009232:	005b      	lsls	r3, r3, #1
 8009234:	b29a      	uxth	r2, r3
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800923a:	7dfb      	ldrb	r3, [r7, #23]
 800923c:	68ba      	ldr	r2, [r7, #8]
 800923e:	4413      	add	r3, r2
 8009240:	687a      	ldr	r2, [r7, #4]
 8009242:	7812      	ldrb	r2, [r2, #0]
 8009244:	701a      	strb	r2, [r3, #0]
  idx++;
 8009246:	7dfb      	ldrb	r3, [r7, #23]
 8009248:	3301      	adds	r3, #1
 800924a:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800924c:	7dfb      	ldrb	r3, [r7, #23]
 800924e:	68ba      	ldr	r2, [r7, #8]
 8009250:	4413      	add	r3, r2
 8009252:	2203      	movs	r2, #3
 8009254:	701a      	strb	r2, [r3, #0]
  idx++;
 8009256:	7dfb      	ldrb	r3, [r7, #23]
 8009258:	3301      	adds	r3, #1
 800925a:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800925c:	e013      	b.n	8009286 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800925e:	7dfb      	ldrb	r3, [r7, #23]
 8009260:	68ba      	ldr	r2, [r7, #8]
 8009262:	4413      	add	r3, r2
 8009264:	693a      	ldr	r2, [r7, #16]
 8009266:	7812      	ldrb	r2, [r2, #0]
 8009268:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800926a:	693b      	ldr	r3, [r7, #16]
 800926c:	3301      	adds	r3, #1
 800926e:	613b      	str	r3, [r7, #16]
    idx++;
 8009270:	7dfb      	ldrb	r3, [r7, #23]
 8009272:	3301      	adds	r3, #1
 8009274:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8009276:	7dfb      	ldrb	r3, [r7, #23]
 8009278:	68ba      	ldr	r2, [r7, #8]
 800927a:	4413      	add	r3, r2
 800927c:	2200      	movs	r2, #0
 800927e:	701a      	strb	r2, [r3, #0]
    idx++;
 8009280:	7dfb      	ldrb	r3, [r7, #23]
 8009282:	3301      	adds	r3, #1
 8009284:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8009286:	693b      	ldr	r3, [r7, #16]
 8009288:	781b      	ldrb	r3, [r3, #0]
 800928a:	2b00      	cmp	r3, #0
 800928c:	d1e7      	bne.n	800925e <USBD_GetString+0x52>
 800928e:	e000      	b.n	8009292 <USBD_GetString+0x86>
    return;
 8009290:	bf00      	nop
  }
}
 8009292:	3718      	adds	r7, #24
 8009294:	46bd      	mov	sp, r7
 8009296:	bd80      	pop	{r7, pc}

08009298 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8009298:	b480      	push	{r7}
 800929a:	b085      	sub	sp, #20
 800929c:	af00      	add	r7, sp, #0
 800929e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80092a0:	2300      	movs	r3, #0
 80092a2:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80092a8:	e005      	b.n	80092b6 <USBD_GetLen+0x1e>
  {
    len++;
 80092aa:	7bfb      	ldrb	r3, [r7, #15]
 80092ac:	3301      	adds	r3, #1
 80092ae:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80092b0:	68bb      	ldr	r3, [r7, #8]
 80092b2:	3301      	adds	r3, #1
 80092b4:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80092b6:	68bb      	ldr	r3, [r7, #8]
 80092b8:	781b      	ldrb	r3, [r3, #0]
 80092ba:	2b00      	cmp	r3, #0
 80092bc:	d1f5      	bne.n	80092aa <USBD_GetLen+0x12>
  }

  return len;
 80092be:	7bfb      	ldrb	r3, [r7, #15]
}
 80092c0:	4618      	mov	r0, r3
 80092c2:	3714      	adds	r7, #20
 80092c4:	46bd      	mov	sp, r7
 80092c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ca:	4770      	bx	lr

080092cc <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80092cc:	b580      	push	{r7, lr}
 80092ce:	b084      	sub	sp, #16
 80092d0:	af00      	add	r7, sp, #0
 80092d2:	60f8      	str	r0, [r7, #12]
 80092d4:	60b9      	str	r1, [r7, #8]
 80092d6:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80092d8:	68fb      	ldr	r3, [r7, #12]
 80092da:	2202      	movs	r2, #2
 80092dc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80092e0:	68fb      	ldr	r3, [r7, #12]
 80092e2:	687a      	ldr	r2, [r7, #4]
 80092e4:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80092e6:	68fb      	ldr	r3, [r7, #12]
 80092e8:	687a      	ldr	r2, [r7, #4]
 80092ea:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	68ba      	ldr	r2, [r7, #8]
 80092f0:	2100      	movs	r1, #0
 80092f2:	68f8      	ldr	r0, [r7, #12]
 80092f4:	f000 fd0f 	bl	8009d16 <USBD_LL_Transmit>

  return USBD_OK;
 80092f8:	2300      	movs	r3, #0
}
 80092fa:	4618      	mov	r0, r3
 80092fc:	3710      	adds	r7, #16
 80092fe:	46bd      	mov	sp, r7
 8009300:	bd80      	pop	{r7, pc}

08009302 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8009302:	b580      	push	{r7, lr}
 8009304:	b084      	sub	sp, #16
 8009306:	af00      	add	r7, sp, #0
 8009308:	60f8      	str	r0, [r7, #12]
 800930a:	60b9      	str	r1, [r7, #8]
 800930c:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	68ba      	ldr	r2, [r7, #8]
 8009312:	2100      	movs	r1, #0
 8009314:	68f8      	ldr	r0, [r7, #12]
 8009316:	f000 fcfe 	bl	8009d16 <USBD_LL_Transmit>

  return USBD_OK;
 800931a:	2300      	movs	r3, #0
}
 800931c:	4618      	mov	r0, r3
 800931e:	3710      	adds	r7, #16
 8009320:	46bd      	mov	sp, r7
 8009322:	bd80      	pop	{r7, pc}

08009324 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8009324:	b580      	push	{r7, lr}
 8009326:	b084      	sub	sp, #16
 8009328:	af00      	add	r7, sp, #0
 800932a:	60f8      	str	r0, [r7, #12]
 800932c:	60b9      	str	r1, [r7, #8]
 800932e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8009330:	68fb      	ldr	r3, [r7, #12]
 8009332:	2203      	movs	r2, #3
 8009334:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8009338:	68fb      	ldr	r3, [r7, #12]
 800933a:	687a      	ldr	r2, [r7, #4]
 800933c:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8009340:	68fb      	ldr	r3, [r7, #12]
 8009342:	687a      	ldr	r2, [r7, #4]
 8009344:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	68ba      	ldr	r2, [r7, #8]
 800934c:	2100      	movs	r1, #0
 800934e:	68f8      	ldr	r0, [r7, #12]
 8009350:	f000 fd02 	bl	8009d58 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009354:	2300      	movs	r3, #0
}
 8009356:	4618      	mov	r0, r3
 8009358:	3710      	adds	r7, #16
 800935a:	46bd      	mov	sp, r7
 800935c:	bd80      	pop	{r7, pc}

0800935e <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800935e:	b580      	push	{r7, lr}
 8009360:	b084      	sub	sp, #16
 8009362:	af00      	add	r7, sp, #0
 8009364:	60f8      	str	r0, [r7, #12]
 8009366:	60b9      	str	r1, [r7, #8]
 8009368:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	68ba      	ldr	r2, [r7, #8]
 800936e:	2100      	movs	r1, #0
 8009370:	68f8      	ldr	r0, [r7, #12]
 8009372:	f000 fcf1 	bl	8009d58 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009376:	2300      	movs	r3, #0
}
 8009378:	4618      	mov	r0, r3
 800937a:	3710      	adds	r7, #16
 800937c:	46bd      	mov	sp, r7
 800937e:	bd80      	pop	{r7, pc}

08009380 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8009380:	b580      	push	{r7, lr}
 8009382:	b082      	sub	sp, #8
 8009384:	af00      	add	r7, sp, #0
 8009386:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	2204      	movs	r2, #4
 800938c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009390:	2300      	movs	r3, #0
 8009392:	2200      	movs	r2, #0
 8009394:	2100      	movs	r1, #0
 8009396:	6878      	ldr	r0, [r7, #4]
 8009398:	f000 fcbd 	bl	8009d16 <USBD_LL_Transmit>

  return USBD_OK;
 800939c:	2300      	movs	r3, #0
}
 800939e:	4618      	mov	r0, r3
 80093a0:	3708      	adds	r7, #8
 80093a2:	46bd      	mov	sp, r7
 80093a4:	bd80      	pop	{r7, pc}

080093a6 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80093a6:	b580      	push	{r7, lr}
 80093a8:	b082      	sub	sp, #8
 80093aa:	af00      	add	r7, sp, #0
 80093ac:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	2205      	movs	r2, #5
 80093b2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80093b6:	2300      	movs	r3, #0
 80093b8:	2200      	movs	r2, #0
 80093ba:	2100      	movs	r1, #0
 80093bc:	6878      	ldr	r0, [r7, #4]
 80093be:	f000 fccb 	bl	8009d58 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80093c2:	2300      	movs	r3, #0
}
 80093c4:	4618      	mov	r0, r3
 80093c6:	3708      	adds	r7, #8
 80093c8:	46bd      	mov	sp, r7
 80093ca:	bd80      	pop	{r7, pc}

080093cc <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80093cc:	b580      	push	{r7, lr}
 80093ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceHS, &HS_Desc, DEVICE_HS) != USBD_OK)
 80093d0:	2201      	movs	r2, #1
 80093d2:	4912      	ldr	r1, [pc, #72]	; (800941c <MX_USB_DEVICE_Init+0x50>)
 80093d4:	4812      	ldr	r0, [pc, #72]	; (8009420 <MX_USB_DEVICE_Init+0x54>)
 80093d6:	f7fe fd07 	bl	8007de8 <USBD_Init>
 80093da:	4603      	mov	r3, r0
 80093dc:	2b00      	cmp	r3, #0
 80093de:	d001      	beq.n	80093e4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80093e0:	f7f7 ffa8 	bl	8001334 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceHS, &USBD_CDC) != USBD_OK)
 80093e4:	490f      	ldr	r1, [pc, #60]	; (8009424 <MX_USB_DEVICE_Init+0x58>)
 80093e6:	480e      	ldr	r0, [pc, #56]	; (8009420 <MX_USB_DEVICE_Init+0x54>)
 80093e8:	f7fe fd2e 	bl	8007e48 <USBD_RegisterClass>
 80093ec:	4603      	mov	r3, r0
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	d001      	beq.n	80093f6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80093f2:	f7f7 ff9f 	bl	8001334 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceHS, &USBD_Interface_fops_HS) != USBD_OK)
 80093f6:	490c      	ldr	r1, [pc, #48]	; (8009428 <MX_USB_DEVICE_Init+0x5c>)
 80093f8:	4809      	ldr	r0, [pc, #36]	; (8009420 <MX_USB_DEVICE_Init+0x54>)
 80093fa:	f7fe fc1f 	bl	8007c3c <USBD_CDC_RegisterInterface>
 80093fe:	4603      	mov	r3, r0
 8009400:	2b00      	cmp	r3, #0
 8009402:	d001      	beq.n	8009408 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8009404:	f7f7 ff96 	bl	8001334 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceHS) != USBD_OK)
 8009408:	4805      	ldr	r0, [pc, #20]	; (8009420 <MX_USB_DEVICE_Init+0x54>)
 800940a:	f7fe fd53 	bl	8007eb4 <USBD_Start>
 800940e:	4603      	mov	r3, r0
 8009410:	2b00      	cmp	r3, #0
 8009412:	d001      	beq.n	8009418 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8009414:	f7f7 ff8e 	bl	8001334 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8009418:	bf00      	nop
 800941a:	bd80      	pop	{r7, pc}
 800941c:	200000bc 	.word	0x200000bc
 8009420:	200004c0 	.word	0x200004c0
 8009424:	20000028 	.word	0x20000028
 8009428:	200000a8 	.word	0x200000a8

0800942c <CDC_Init_HS>:
/**
  * @brief  Initializes the CDC media low layer over the USB HS IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_HS(void)
{
 800942c:	b580      	push	{r7, lr}
 800942e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, UserTxBufferHS, 0);
 8009430:	2200      	movs	r2, #0
 8009432:	4905      	ldr	r1, [pc, #20]	; (8009448 <CDC_Init_HS+0x1c>)
 8009434:	4805      	ldr	r0, [pc, #20]	; (800944c <CDC_Init_HS+0x20>)
 8009436:	f7fe fc1b 	bl	8007c70 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, UserRxBufferHS);
 800943a:	4905      	ldr	r1, [pc, #20]	; (8009450 <CDC_Init_HS+0x24>)
 800943c:	4803      	ldr	r0, [pc, #12]	; (800944c <CDC_Init_HS+0x20>)
 800943e:	f7fe fc39 	bl	8007cb4 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8009442:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 8009444:	4618      	mov	r0, r3
 8009446:	bd80      	pop	{r7, pc}
 8009448:	20000f9c 	.word	0x20000f9c
 800944c:	200004c0 	.word	0x200004c0
 8009450:	2000079c 	.word	0x2000079c

08009454 <CDC_DeInit_HS>:
  * @brief  DeInitializes the CDC media low layer
  * @param  None
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_HS(void)
{
 8009454:	b480      	push	{r7}
 8009456:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 9 */
  return (USBD_OK);
 8009458:	2300      	movs	r3, #0
  /* USER CODE END 9 */
}
 800945a:	4618      	mov	r0, r3
 800945c:	46bd      	mov	sp, r7
 800945e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009462:	4770      	bx	lr

08009464 <CDC_Control_HS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_HS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8009464:	b480      	push	{r7}
 8009466:	b083      	sub	sp, #12
 8009468:	af00      	add	r7, sp, #0
 800946a:	4603      	mov	r3, r0
 800946c:	6039      	str	r1, [r7, #0]
 800946e:	71fb      	strb	r3, [r7, #7]
 8009470:	4613      	mov	r3, r2
 8009472:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 10 */
  switch(cmd)
 8009474:	79fb      	ldrb	r3, [r7, #7]
 8009476:	2b23      	cmp	r3, #35	; 0x23
 8009478:	d84a      	bhi.n	8009510 <CDC_Control_HS+0xac>
 800947a:	a201      	add	r2, pc, #4	; (adr r2, 8009480 <CDC_Control_HS+0x1c>)
 800947c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009480:	08009511 	.word	0x08009511
 8009484:	08009511 	.word	0x08009511
 8009488:	08009511 	.word	0x08009511
 800948c:	08009511 	.word	0x08009511
 8009490:	08009511 	.word	0x08009511
 8009494:	08009511 	.word	0x08009511
 8009498:	08009511 	.word	0x08009511
 800949c:	08009511 	.word	0x08009511
 80094a0:	08009511 	.word	0x08009511
 80094a4:	08009511 	.word	0x08009511
 80094a8:	08009511 	.word	0x08009511
 80094ac:	08009511 	.word	0x08009511
 80094b0:	08009511 	.word	0x08009511
 80094b4:	08009511 	.word	0x08009511
 80094b8:	08009511 	.word	0x08009511
 80094bc:	08009511 	.word	0x08009511
 80094c0:	08009511 	.word	0x08009511
 80094c4:	08009511 	.word	0x08009511
 80094c8:	08009511 	.word	0x08009511
 80094cc:	08009511 	.word	0x08009511
 80094d0:	08009511 	.word	0x08009511
 80094d4:	08009511 	.word	0x08009511
 80094d8:	08009511 	.word	0x08009511
 80094dc:	08009511 	.word	0x08009511
 80094e0:	08009511 	.word	0x08009511
 80094e4:	08009511 	.word	0x08009511
 80094e8:	08009511 	.word	0x08009511
 80094ec:	08009511 	.word	0x08009511
 80094f0:	08009511 	.word	0x08009511
 80094f4:	08009511 	.word	0x08009511
 80094f8:	08009511 	.word	0x08009511
 80094fc:	08009511 	.word	0x08009511
 8009500:	08009511 	.word	0x08009511
 8009504:	08009511 	.word	0x08009511
 8009508:	08009511 	.word	0x08009511
 800950c:	08009511 	.word	0x08009511
  case CDC_SEND_BREAK:

    break;

  default:
    break;
 8009510:	bf00      	nop
  }

  return (USBD_OK);
 8009512:	2300      	movs	r3, #0
  /* USER CODE END 10 */
}
 8009514:	4618      	mov	r0, r3
 8009516:	370c      	adds	r7, #12
 8009518:	46bd      	mov	sp, r7
 800951a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800951e:	4770      	bx	lr

08009520 <CDC_Receive_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAILL
  */
static int8_t CDC_Receive_HS(uint8_t* Buf, uint32_t *Len)
{
 8009520:	b580      	push	{r7, lr}
 8009522:	b082      	sub	sp, #8
 8009524:	af00      	add	r7, sp, #0
 8009526:	6078      	str	r0, [r7, #4]
 8009528:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 11 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, &Buf[0]);
 800952a:	6879      	ldr	r1, [r7, #4]
 800952c:	4813      	ldr	r0, [pc, #76]	; (800957c <CDC_Receive_HS+0x5c>)
 800952e:	f7fe fbc1 	bl	8007cb4 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceHS);
 8009532:	4812      	ldr	r0, [pc, #72]	; (800957c <CDC_Receive_HS+0x5c>)
 8009534:	f7fe fc22 	bl	8007d7c <USBD_CDC_ReceivePacket>
  // Signal to main thread that USB has received data
  USB_READY = true;
 8009538:	4b11      	ldr	r3, [pc, #68]	; (8009580 <CDC_Receive_HS+0x60>)
 800953a:	2201      	movs	r2, #1
 800953c:	701a      	strb	r2, [r3, #0]
  // Put usb data into usb buffer
  memset (USB_Buff, '\0', sizeof(USB_Buff));  	// clear the usb buffer
 800953e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009542:	2100      	movs	r1, #0
 8009544:	480f      	ldr	r0, [pc, #60]	; (8009584 <CDC_Receive_HS+0x64>)
 8009546:	f000 fcc7 	bl	8009ed8 <memset>
  USB_rx_data_len = (uint8_t)*Len;				// Find length of data sent
 800954a:	683b      	ldr	r3, [r7, #0]
 800954c:	681b      	ldr	r3, [r3, #0]
 800954e:	b2da      	uxtb	r2, r3
 8009550:	4b0d      	ldr	r3, [pc, #52]	; (8009588 <CDC_Receive_HS+0x68>)
 8009552:	701a      	strb	r2, [r3, #0]
  memcpy(USB_Buff, Buf, USB_rx_data_len);  // copy the data to the buffer
 8009554:	4b0c      	ldr	r3, [pc, #48]	; (8009588 <CDC_Receive_HS+0x68>)
 8009556:	781b      	ldrb	r3, [r3, #0]
 8009558:	461a      	mov	r2, r3
 800955a:	6879      	ldr	r1, [r7, #4]
 800955c:	4809      	ldr	r0, [pc, #36]	; (8009584 <CDC_Receive_HS+0x64>)
 800955e:	f000 fcad 	bl	8009ebc <memcpy>
  memset(Buf, '\0', USB_rx_data_len);   // clear the Buf
 8009562:	4b09      	ldr	r3, [pc, #36]	; (8009588 <CDC_Receive_HS+0x68>)
 8009564:	781b      	ldrb	r3, [r3, #0]
 8009566:	461a      	mov	r2, r3
 8009568:	2100      	movs	r1, #0
 800956a:	6878      	ldr	r0, [r7, #4]
 800956c:	f000 fcb4 	bl	8009ed8 <memset>

  return (USBD_OK);
 8009570:	2300      	movs	r3, #0
  /* USER CODE END 11 */
}
 8009572:	4618      	mov	r0, r3
 8009574:	3708      	adds	r7, #8
 8009576:	46bd      	mov	sp, r7
 8009578:	bd80      	pop	{r7, pc}
 800957a:	bf00      	nop
 800957c:	200004c0 	.word	0x200004c0
 8009580:	20000480 	.word	0x20000480
 8009584:	20000380 	.word	0x20000380
 8009588:	20000481 	.word	0x20000481

0800958c <CDC_Transmit_HS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_HS(uint8_t* Buf, uint16_t Len)
{
 800958c:	b580      	push	{r7, lr}
 800958e:	b084      	sub	sp, #16
 8009590:	af00      	add	r7, sp, #0
 8009592:	6078      	str	r0, [r7, #4]
 8009594:	460b      	mov	r3, r1
 8009596:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8009598:	2300      	movs	r3, #0
 800959a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 12 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceHS.pClassData;
 800959c:	4b0d      	ldr	r3, [pc, #52]	; (80095d4 <CDC_Transmit_HS+0x48>)
 800959e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80095a2:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80095a4:	68bb      	ldr	r3, [r7, #8]
 80095a6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80095aa:	2b00      	cmp	r3, #0
 80095ac:	d001      	beq.n	80095b2 <CDC_Transmit_HS+0x26>
    return USBD_BUSY;
 80095ae:	2301      	movs	r3, #1
 80095b0:	e00b      	b.n	80095ca <CDC_Transmit_HS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, Buf, Len);
 80095b2:	887b      	ldrh	r3, [r7, #2]
 80095b4:	461a      	mov	r2, r3
 80095b6:	6879      	ldr	r1, [r7, #4]
 80095b8:	4806      	ldr	r0, [pc, #24]	; (80095d4 <CDC_Transmit_HS+0x48>)
 80095ba:	f7fe fb59 	bl	8007c70 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceHS);
 80095be:	4805      	ldr	r0, [pc, #20]	; (80095d4 <CDC_Transmit_HS+0x48>)
 80095c0:	f7fe fb96 	bl	8007cf0 <USBD_CDC_TransmitPacket>
 80095c4:	4603      	mov	r3, r0
 80095c6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 12 */
  return result;
 80095c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80095ca:	4618      	mov	r0, r3
 80095cc:	3710      	adds	r7, #16
 80095ce:	46bd      	mov	sp, r7
 80095d0:	bd80      	pop	{r7, pc}
 80095d2:	bf00      	nop
 80095d4:	200004c0 	.word	0x200004c0

080095d8 <CDC_TransmitCplt_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_HS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80095d8:	b480      	push	{r7}
 80095da:	b087      	sub	sp, #28
 80095dc:	af00      	add	r7, sp, #0
 80095de:	60f8      	str	r0, [r7, #12]
 80095e0:	60b9      	str	r1, [r7, #8]
 80095e2:	4613      	mov	r3, r2
 80095e4:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80095e6:	2300      	movs	r3, #0
 80095e8:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 14 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 14 */
  return result;
 80095ea:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80095ee:	4618      	mov	r0, r3
 80095f0:	371c      	adds	r7, #28
 80095f2:	46bd      	mov	sp, r7
 80095f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095f8:	4770      	bx	lr
	...

080095fc <USBD_HS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80095fc:	b480      	push	{r7}
 80095fe:	b083      	sub	sp, #12
 8009600:	af00      	add	r7, sp, #0
 8009602:	4603      	mov	r3, r0
 8009604:	6039      	str	r1, [r7, #0]
 8009606:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_HS_DeviceDesc);
 8009608:	683b      	ldr	r3, [r7, #0]
 800960a:	2212      	movs	r2, #18
 800960c:	801a      	strh	r2, [r3, #0]
  return USBD_HS_DeviceDesc;
 800960e:	4b03      	ldr	r3, [pc, #12]	; (800961c <USBD_HS_DeviceDescriptor+0x20>)
}
 8009610:	4618      	mov	r0, r3
 8009612:	370c      	adds	r7, #12
 8009614:	46bd      	mov	sp, r7
 8009616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800961a:	4770      	bx	lr
 800961c:	200000d8 	.word	0x200000d8

08009620 <USBD_HS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009620:	b480      	push	{r7}
 8009622:	b083      	sub	sp, #12
 8009624:	af00      	add	r7, sp, #0
 8009626:	4603      	mov	r3, r0
 8009628:	6039      	str	r1, [r7, #0]
 800962a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800962c:	683b      	ldr	r3, [r7, #0]
 800962e:	2204      	movs	r2, #4
 8009630:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8009632:	4b03      	ldr	r3, [pc, #12]	; (8009640 <USBD_HS_LangIDStrDescriptor+0x20>)
}
 8009634:	4618      	mov	r0, r3
 8009636:	370c      	adds	r7, #12
 8009638:	46bd      	mov	sp, r7
 800963a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800963e:	4770      	bx	lr
 8009640:	200000ec 	.word	0x200000ec

08009644 <USBD_HS_ProductStrDescriptor>:
  * @param  speed : current device speed
  * @param  length : pointer to data length variable
  * @retval pointer to descriptor buffer
  */
uint8_t * USBD_HS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009644:	b580      	push	{r7, lr}
 8009646:	b082      	sub	sp, #8
 8009648:	af00      	add	r7, sp, #0
 800964a:	4603      	mov	r3, r0
 800964c:	6039      	str	r1, [r7, #0]
 800964e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009650:	79fb      	ldrb	r3, [r7, #7]
 8009652:	2b00      	cmp	r3, #0
 8009654:	d105      	bne.n	8009662 <USBD_HS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 8009656:	683a      	ldr	r2, [r7, #0]
 8009658:	4907      	ldr	r1, [pc, #28]	; (8009678 <USBD_HS_ProductStrDescriptor+0x34>)
 800965a:	4808      	ldr	r0, [pc, #32]	; (800967c <USBD_HS_ProductStrDescriptor+0x38>)
 800965c:	f7ff fdd6 	bl	800920c <USBD_GetString>
 8009660:	e004      	b.n	800966c <USBD_HS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 8009662:	683a      	ldr	r2, [r7, #0]
 8009664:	4904      	ldr	r1, [pc, #16]	; (8009678 <USBD_HS_ProductStrDescriptor+0x34>)
 8009666:	4805      	ldr	r0, [pc, #20]	; (800967c <USBD_HS_ProductStrDescriptor+0x38>)
 8009668:	f7ff fdd0 	bl	800920c <USBD_GetString>
  }
  return USBD_StrDesc;
 800966c:	4b02      	ldr	r3, [pc, #8]	; (8009678 <USBD_HS_ProductStrDescriptor+0x34>)
}
 800966e:	4618      	mov	r0, r3
 8009670:	3708      	adds	r7, #8
 8009672:	46bd      	mov	sp, r7
 8009674:	bd80      	pop	{r7, pc}
 8009676:	bf00      	nop
 8009678:	2000179c 	.word	0x2000179c
 800967c:	0800a78c 	.word	0x0800a78c

08009680 <USBD_HS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009680:	b580      	push	{r7, lr}
 8009682:	b082      	sub	sp, #8
 8009684:	af00      	add	r7, sp, #0
 8009686:	4603      	mov	r3, r0
 8009688:	6039      	str	r1, [r7, #0]
 800968a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800968c:	683a      	ldr	r2, [r7, #0]
 800968e:	4904      	ldr	r1, [pc, #16]	; (80096a0 <USBD_HS_ManufacturerStrDescriptor+0x20>)
 8009690:	4804      	ldr	r0, [pc, #16]	; (80096a4 <USBD_HS_ManufacturerStrDescriptor+0x24>)
 8009692:	f7ff fdbb 	bl	800920c <USBD_GetString>
  return USBD_StrDesc;
 8009696:	4b02      	ldr	r3, [pc, #8]	; (80096a0 <USBD_HS_ManufacturerStrDescriptor+0x20>)
}
 8009698:	4618      	mov	r0, r3
 800969a:	3708      	adds	r7, #8
 800969c:	46bd      	mov	sp, r7
 800969e:	bd80      	pop	{r7, pc}
 80096a0:	2000179c 	.word	0x2000179c
 80096a4:	0800a7a4 	.word	0x0800a7a4

080096a8 <USBD_HS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80096a8:	b580      	push	{r7, lr}
 80096aa:	b082      	sub	sp, #8
 80096ac:	af00      	add	r7, sp, #0
 80096ae:	4603      	mov	r3, r0
 80096b0:	6039      	str	r1, [r7, #0]
 80096b2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80096b4:	683b      	ldr	r3, [r7, #0]
 80096b6:	221a      	movs	r2, #26
 80096b8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80096ba:	f000 f843 	bl	8009744 <Get_SerialNum>
  /* USER CODE BEGIN USBD_HS_SerialStrDescriptor */

  /* USER CODE END USBD_HS_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 80096be:	4b02      	ldr	r3, [pc, #8]	; (80096c8 <USBD_HS_SerialStrDescriptor+0x20>)
}
 80096c0:	4618      	mov	r0, r3
 80096c2:	3708      	adds	r7, #8
 80096c4:	46bd      	mov	sp, r7
 80096c6:	bd80      	pop	{r7, pc}
 80096c8:	200000f0 	.word	0x200000f0

080096cc <USBD_HS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80096cc:	b580      	push	{r7, lr}
 80096ce:	b082      	sub	sp, #8
 80096d0:	af00      	add	r7, sp, #0
 80096d2:	4603      	mov	r3, r0
 80096d4:	6039      	str	r1, [r7, #0]
 80096d6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80096d8:	79fb      	ldrb	r3, [r7, #7]
 80096da:	2b00      	cmp	r3, #0
 80096dc:	d105      	bne.n	80096ea <USBD_HS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 80096de:	683a      	ldr	r2, [r7, #0]
 80096e0:	4907      	ldr	r1, [pc, #28]	; (8009700 <USBD_HS_ConfigStrDescriptor+0x34>)
 80096e2:	4808      	ldr	r0, [pc, #32]	; (8009704 <USBD_HS_ConfigStrDescriptor+0x38>)
 80096e4:	f7ff fd92 	bl	800920c <USBD_GetString>
 80096e8:	e004      	b.n	80096f4 <USBD_HS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 80096ea:	683a      	ldr	r2, [r7, #0]
 80096ec:	4904      	ldr	r1, [pc, #16]	; (8009700 <USBD_HS_ConfigStrDescriptor+0x34>)
 80096ee:	4805      	ldr	r0, [pc, #20]	; (8009704 <USBD_HS_ConfigStrDescriptor+0x38>)
 80096f0:	f7ff fd8c 	bl	800920c <USBD_GetString>
  }
  return USBD_StrDesc;
 80096f4:	4b02      	ldr	r3, [pc, #8]	; (8009700 <USBD_HS_ConfigStrDescriptor+0x34>)
}
 80096f6:	4618      	mov	r0, r3
 80096f8:	3708      	adds	r7, #8
 80096fa:	46bd      	mov	sp, r7
 80096fc:	bd80      	pop	{r7, pc}
 80096fe:	bf00      	nop
 8009700:	2000179c 	.word	0x2000179c
 8009704:	0800a7b8 	.word	0x0800a7b8

08009708 <USBD_HS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009708:	b580      	push	{r7, lr}
 800970a:	b082      	sub	sp, #8
 800970c:	af00      	add	r7, sp, #0
 800970e:	4603      	mov	r3, r0
 8009710:	6039      	str	r1, [r7, #0]
 8009712:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009714:	79fb      	ldrb	r3, [r7, #7]
 8009716:	2b00      	cmp	r3, #0
 8009718:	d105      	bne.n	8009726 <USBD_HS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 800971a:	683a      	ldr	r2, [r7, #0]
 800971c:	4907      	ldr	r1, [pc, #28]	; (800973c <USBD_HS_InterfaceStrDescriptor+0x34>)
 800971e:	4808      	ldr	r0, [pc, #32]	; (8009740 <USBD_HS_InterfaceStrDescriptor+0x38>)
 8009720:	f7ff fd74 	bl	800920c <USBD_GetString>
 8009724:	e004      	b.n	8009730 <USBD_HS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 8009726:	683a      	ldr	r2, [r7, #0]
 8009728:	4904      	ldr	r1, [pc, #16]	; (800973c <USBD_HS_InterfaceStrDescriptor+0x34>)
 800972a:	4805      	ldr	r0, [pc, #20]	; (8009740 <USBD_HS_InterfaceStrDescriptor+0x38>)
 800972c:	f7ff fd6e 	bl	800920c <USBD_GetString>
  }
  return USBD_StrDesc;
 8009730:	4b02      	ldr	r3, [pc, #8]	; (800973c <USBD_HS_InterfaceStrDescriptor+0x34>)
}
 8009732:	4618      	mov	r0, r3
 8009734:	3708      	adds	r7, #8
 8009736:	46bd      	mov	sp, r7
 8009738:	bd80      	pop	{r7, pc}
 800973a:	bf00      	nop
 800973c:	2000179c 	.word	0x2000179c
 8009740:	0800a7c4 	.word	0x0800a7c4

08009744 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8009744:	b580      	push	{r7, lr}
 8009746:	b084      	sub	sp, #16
 8009748:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800974a:	4b0f      	ldr	r3, [pc, #60]	; (8009788 <Get_SerialNum+0x44>)
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009750:	4b0e      	ldr	r3, [pc, #56]	; (800978c <Get_SerialNum+0x48>)
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8009756:	4b0e      	ldr	r3, [pc, #56]	; (8009790 <Get_SerialNum+0x4c>)
 8009758:	681b      	ldr	r3, [r3, #0]
 800975a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800975c:	68fa      	ldr	r2, [r7, #12]
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	4413      	add	r3, r2
 8009762:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8009764:	68fb      	ldr	r3, [r7, #12]
 8009766:	2b00      	cmp	r3, #0
 8009768:	d009      	beq.n	800977e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800976a:	2208      	movs	r2, #8
 800976c:	4909      	ldr	r1, [pc, #36]	; (8009794 <Get_SerialNum+0x50>)
 800976e:	68f8      	ldr	r0, [r7, #12]
 8009770:	f000 f814 	bl	800979c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8009774:	2204      	movs	r2, #4
 8009776:	4908      	ldr	r1, [pc, #32]	; (8009798 <Get_SerialNum+0x54>)
 8009778:	68b8      	ldr	r0, [r7, #8]
 800977a:	f000 f80f 	bl	800979c <IntToUnicode>
  }
}
 800977e:	bf00      	nop
 8009780:	3710      	adds	r7, #16
 8009782:	46bd      	mov	sp, r7
 8009784:	bd80      	pop	{r7, pc}
 8009786:	bf00      	nop
 8009788:	1fff7a10 	.word	0x1fff7a10
 800978c:	1fff7a14 	.word	0x1fff7a14
 8009790:	1fff7a18 	.word	0x1fff7a18
 8009794:	200000f2 	.word	0x200000f2
 8009798:	20000102 	.word	0x20000102

0800979c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800979c:	b480      	push	{r7}
 800979e:	b087      	sub	sp, #28
 80097a0:	af00      	add	r7, sp, #0
 80097a2:	60f8      	str	r0, [r7, #12]
 80097a4:	60b9      	str	r1, [r7, #8]
 80097a6:	4613      	mov	r3, r2
 80097a8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80097aa:	2300      	movs	r3, #0
 80097ac:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80097ae:	2300      	movs	r3, #0
 80097b0:	75fb      	strb	r3, [r7, #23]
 80097b2:	e027      	b.n	8009804 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80097b4:	68fb      	ldr	r3, [r7, #12]
 80097b6:	0f1b      	lsrs	r3, r3, #28
 80097b8:	2b09      	cmp	r3, #9
 80097ba:	d80b      	bhi.n	80097d4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80097bc:	68fb      	ldr	r3, [r7, #12]
 80097be:	0f1b      	lsrs	r3, r3, #28
 80097c0:	b2da      	uxtb	r2, r3
 80097c2:	7dfb      	ldrb	r3, [r7, #23]
 80097c4:	005b      	lsls	r3, r3, #1
 80097c6:	4619      	mov	r1, r3
 80097c8:	68bb      	ldr	r3, [r7, #8]
 80097ca:	440b      	add	r3, r1
 80097cc:	3230      	adds	r2, #48	; 0x30
 80097ce:	b2d2      	uxtb	r2, r2
 80097d0:	701a      	strb	r2, [r3, #0]
 80097d2:	e00a      	b.n	80097ea <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80097d4:	68fb      	ldr	r3, [r7, #12]
 80097d6:	0f1b      	lsrs	r3, r3, #28
 80097d8:	b2da      	uxtb	r2, r3
 80097da:	7dfb      	ldrb	r3, [r7, #23]
 80097dc:	005b      	lsls	r3, r3, #1
 80097de:	4619      	mov	r1, r3
 80097e0:	68bb      	ldr	r3, [r7, #8]
 80097e2:	440b      	add	r3, r1
 80097e4:	3237      	adds	r2, #55	; 0x37
 80097e6:	b2d2      	uxtb	r2, r2
 80097e8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80097ea:	68fb      	ldr	r3, [r7, #12]
 80097ec:	011b      	lsls	r3, r3, #4
 80097ee:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80097f0:	7dfb      	ldrb	r3, [r7, #23]
 80097f2:	005b      	lsls	r3, r3, #1
 80097f4:	3301      	adds	r3, #1
 80097f6:	68ba      	ldr	r2, [r7, #8]
 80097f8:	4413      	add	r3, r2
 80097fa:	2200      	movs	r2, #0
 80097fc:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80097fe:	7dfb      	ldrb	r3, [r7, #23]
 8009800:	3301      	adds	r3, #1
 8009802:	75fb      	strb	r3, [r7, #23]
 8009804:	7dfa      	ldrb	r2, [r7, #23]
 8009806:	79fb      	ldrb	r3, [r7, #7]
 8009808:	429a      	cmp	r2, r3
 800980a:	d3d3      	bcc.n	80097b4 <IntToUnicode+0x18>
  }
}
 800980c:	bf00      	nop
 800980e:	bf00      	nop
 8009810:	371c      	adds	r7, #28
 8009812:	46bd      	mov	sp, r7
 8009814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009818:	4770      	bx	lr
	...

0800981c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800981c:	b580      	push	{r7, lr}
 800981e:	b08a      	sub	sp, #40	; 0x28
 8009820:	af00      	add	r7, sp, #0
 8009822:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009824:	f107 0314 	add.w	r3, r7, #20
 8009828:	2200      	movs	r2, #0
 800982a:	601a      	str	r2, [r3, #0]
 800982c:	605a      	str	r2, [r3, #4]
 800982e:	609a      	str	r2, [r3, #8]
 8009830:	60da      	str	r2, [r3, #12]
 8009832:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_HS)
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	681b      	ldr	r3, [r3, #0]
 8009838:	4a1d      	ldr	r2, [pc, #116]	; (80098b0 <HAL_PCD_MspInit+0x94>)
 800983a:	4293      	cmp	r3, r2
 800983c:	d134      	bne.n	80098a8 <HAL_PCD_MspInit+0x8c>
  {
  /* USER CODE BEGIN USB_OTG_HS_MspInit 0 */

  /* USER CODE END USB_OTG_HS_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800983e:	2300      	movs	r3, #0
 8009840:	613b      	str	r3, [r7, #16]
 8009842:	4b1c      	ldr	r3, [pc, #112]	; (80098b4 <HAL_PCD_MspInit+0x98>)
 8009844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009846:	4a1b      	ldr	r2, [pc, #108]	; (80098b4 <HAL_PCD_MspInit+0x98>)
 8009848:	f043 0302 	orr.w	r3, r3, #2
 800984c:	6313      	str	r3, [r2, #48]	; 0x30
 800984e:	4b19      	ldr	r3, [pc, #100]	; (80098b4 <HAL_PCD_MspInit+0x98>)
 8009850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009852:	f003 0302 	and.w	r3, r3, #2
 8009856:	613b      	str	r3, [r7, #16]
 8009858:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_HS GPIO Configuration
    PB14     ------> USB_OTG_HS_DM
    PB15     ------> USB_OTG_HS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 800985a:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800985e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009860:	2302      	movs	r3, #2
 8009862:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009864:	2300      	movs	r3, #0
 8009866:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009868:	2303      	movs	r3, #3
 800986a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 800986c:	230c      	movs	r3, #12
 800986e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009870:	f107 0314 	add.w	r3, r7, #20
 8009874:	4619      	mov	r1, r3
 8009876:	4810      	ldr	r0, [pc, #64]	; (80098b8 <HAL_PCD_MspInit+0x9c>)
 8009878:	f7f8 fa1e 	bl	8001cb8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 800987c:	2300      	movs	r3, #0
 800987e:	60fb      	str	r3, [r7, #12]
 8009880:	4b0c      	ldr	r3, [pc, #48]	; (80098b4 <HAL_PCD_MspInit+0x98>)
 8009882:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009884:	4a0b      	ldr	r2, [pc, #44]	; (80098b4 <HAL_PCD_MspInit+0x98>)
 8009886:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800988a:	6313      	str	r3, [r2, #48]	; 0x30
 800988c:	4b09      	ldr	r3, [pc, #36]	; (80098b4 <HAL_PCD_MspInit+0x98>)
 800988e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009890:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009894:	60fb      	str	r3, [r7, #12]
 8009896:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 0, 0);
 8009898:	2200      	movs	r2, #0
 800989a:	2100      	movs	r1, #0
 800989c:	204d      	movs	r0, #77	; 0x4d
 800989e:	f7f8 f942 	bl	8001b26 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 80098a2:	204d      	movs	r0, #77	; 0x4d
 80098a4:	f7f8 f95b 	bl	8001b5e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 80098a8:	bf00      	nop
 80098aa:	3728      	adds	r7, #40	; 0x28
 80098ac:	46bd      	mov	sp, r7
 80098ae:	bd80      	pop	{r7, pc}
 80098b0:	40040000 	.word	0x40040000
 80098b4:	40023800 	.word	0x40023800
 80098b8:	40020400 	.word	0x40020400

080098bc <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80098bc:	b580      	push	{r7, lr}
 80098be:	b082      	sub	sp, #8
 80098c0:	af00      	add	r7, sp, #0
 80098c2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80098d0:	4619      	mov	r1, r3
 80098d2:	4610      	mov	r0, r2
 80098d4:	f7fe fb3b 	bl	8007f4e <USBD_LL_SetupStage>
}
 80098d8:	bf00      	nop
 80098da:	3708      	adds	r7, #8
 80098dc:	46bd      	mov	sp, r7
 80098de:	bd80      	pop	{r7, pc}

080098e0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80098e0:	b580      	push	{r7, lr}
 80098e2:	b082      	sub	sp, #8
 80098e4:	af00      	add	r7, sp, #0
 80098e6:	6078      	str	r0, [r7, #4]
 80098e8:	460b      	mov	r3, r1
 80098ea:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 80098f2:	78fa      	ldrb	r2, [r7, #3]
 80098f4:	6879      	ldr	r1, [r7, #4]
 80098f6:	4613      	mov	r3, r2
 80098f8:	00db      	lsls	r3, r3, #3
 80098fa:	4413      	add	r3, r2
 80098fc:	009b      	lsls	r3, r3, #2
 80098fe:	440b      	add	r3, r1
 8009900:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8009904:	681a      	ldr	r2, [r3, #0]
 8009906:	78fb      	ldrb	r3, [r7, #3]
 8009908:	4619      	mov	r1, r3
 800990a:	f7fe fb75 	bl	8007ff8 <USBD_LL_DataOutStage>
}
 800990e:	bf00      	nop
 8009910:	3708      	adds	r7, #8
 8009912:	46bd      	mov	sp, r7
 8009914:	bd80      	pop	{r7, pc}

08009916 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009916:	b580      	push	{r7, lr}
 8009918:	b082      	sub	sp, #8
 800991a:	af00      	add	r7, sp, #0
 800991c:	6078      	str	r0, [r7, #4]
 800991e:	460b      	mov	r3, r1
 8009920:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8009928:	78fa      	ldrb	r2, [r7, #3]
 800992a:	6879      	ldr	r1, [r7, #4]
 800992c:	4613      	mov	r3, r2
 800992e:	00db      	lsls	r3, r3, #3
 8009930:	4413      	add	r3, r2
 8009932:	009b      	lsls	r3, r3, #2
 8009934:	440b      	add	r3, r1
 8009936:	334c      	adds	r3, #76	; 0x4c
 8009938:	681a      	ldr	r2, [r3, #0]
 800993a:	78fb      	ldrb	r3, [r7, #3]
 800993c:	4619      	mov	r1, r3
 800993e:	f7fe fc0e 	bl	800815e <USBD_LL_DataInStage>
}
 8009942:	bf00      	nop
 8009944:	3708      	adds	r7, #8
 8009946:	46bd      	mov	sp, r7
 8009948:	bd80      	pop	{r7, pc}

0800994a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800994a:	b580      	push	{r7, lr}
 800994c:	b082      	sub	sp, #8
 800994e:	af00      	add	r7, sp, #0
 8009950:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009958:	4618      	mov	r0, r3
 800995a:	f7fe fd42 	bl	80083e2 <USBD_LL_SOF>
}
 800995e:	bf00      	nop
 8009960:	3708      	adds	r7, #8
 8009962:	46bd      	mov	sp, r7
 8009964:	bd80      	pop	{r7, pc}

08009966 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009966:	b580      	push	{r7, lr}
 8009968:	b084      	sub	sp, #16
 800996a:	af00      	add	r7, sp, #0
 800996c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800996e:	2301      	movs	r3, #1
 8009970:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	68db      	ldr	r3, [r3, #12]
 8009976:	2b00      	cmp	r3, #0
 8009978:	d102      	bne.n	8009980 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800997a:	2300      	movs	r3, #0
 800997c:	73fb      	strb	r3, [r7, #15]
 800997e:	e008      	b.n	8009992 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	68db      	ldr	r3, [r3, #12]
 8009984:	2b02      	cmp	r3, #2
 8009986:	d102      	bne.n	800998e <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8009988:	2301      	movs	r3, #1
 800998a:	73fb      	strb	r3, [r7, #15]
 800998c:	e001      	b.n	8009992 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800998e:	f7f7 fcd1 	bl	8001334 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009998:	7bfa      	ldrb	r2, [r7, #15]
 800999a:	4611      	mov	r1, r2
 800999c:	4618      	mov	r0, r3
 800999e:	f7fe fce2 	bl	8008366 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80099a8:	4618      	mov	r0, r3
 80099aa:	f7fe fc8a 	bl	80082c2 <USBD_LL_Reset>
}
 80099ae:	bf00      	nop
 80099b0:	3710      	adds	r7, #16
 80099b2:	46bd      	mov	sp, r7
 80099b4:	bd80      	pop	{r7, pc}
	...

080099b8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80099b8:	b580      	push	{r7, lr}
 80099ba:	b082      	sub	sp, #8
 80099bc:	af00      	add	r7, sp, #0
 80099be:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80099c6:	4618      	mov	r0, r3
 80099c8:	f7fe fcdd 	bl	8008386 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	681b      	ldr	r3, [r3, #0]
 80099d0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80099d4:	681b      	ldr	r3, [r3, #0]
 80099d6:	687a      	ldr	r2, [r7, #4]
 80099d8:	6812      	ldr	r2, [r2, #0]
 80099da:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80099de:	f043 0301 	orr.w	r3, r3, #1
 80099e2:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	6a1b      	ldr	r3, [r3, #32]
 80099e8:	2b00      	cmp	r3, #0
 80099ea:	d005      	beq.n	80099f8 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80099ec:	4b04      	ldr	r3, [pc, #16]	; (8009a00 <HAL_PCD_SuspendCallback+0x48>)
 80099ee:	691b      	ldr	r3, [r3, #16]
 80099f0:	4a03      	ldr	r2, [pc, #12]	; (8009a00 <HAL_PCD_SuspendCallback+0x48>)
 80099f2:	f043 0306 	orr.w	r3, r3, #6
 80099f6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80099f8:	bf00      	nop
 80099fa:	3708      	adds	r7, #8
 80099fc:	46bd      	mov	sp, r7
 80099fe:	bd80      	pop	{r7, pc}
 8009a00:	e000ed00 	.word	0xe000ed00

08009a04 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009a04:	b580      	push	{r7, lr}
 8009a06:	b082      	sub	sp, #8
 8009a08:	af00      	add	r7, sp, #0
 8009a0a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009a12:	4618      	mov	r0, r3
 8009a14:	f7fe fccd 	bl	80083b2 <USBD_LL_Resume>
}
 8009a18:	bf00      	nop
 8009a1a:	3708      	adds	r7, #8
 8009a1c:	46bd      	mov	sp, r7
 8009a1e:	bd80      	pop	{r7, pc}

08009a20 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009a20:	b580      	push	{r7, lr}
 8009a22:	b082      	sub	sp, #8
 8009a24:	af00      	add	r7, sp, #0
 8009a26:	6078      	str	r0, [r7, #4]
 8009a28:	460b      	mov	r3, r1
 8009a2a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009a32:	78fa      	ldrb	r2, [r7, #3]
 8009a34:	4611      	mov	r1, r2
 8009a36:	4618      	mov	r0, r3
 8009a38:	f7fe fd25 	bl	8008486 <USBD_LL_IsoOUTIncomplete>
}
 8009a3c:	bf00      	nop
 8009a3e:	3708      	adds	r7, #8
 8009a40:	46bd      	mov	sp, r7
 8009a42:	bd80      	pop	{r7, pc}

08009a44 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009a44:	b580      	push	{r7, lr}
 8009a46:	b082      	sub	sp, #8
 8009a48:	af00      	add	r7, sp, #0
 8009a4a:	6078      	str	r0, [r7, #4]
 8009a4c:	460b      	mov	r3, r1
 8009a4e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009a56:	78fa      	ldrb	r2, [r7, #3]
 8009a58:	4611      	mov	r1, r2
 8009a5a:	4618      	mov	r0, r3
 8009a5c:	f7fe fce1 	bl	8008422 <USBD_LL_IsoINIncomplete>
}
 8009a60:	bf00      	nop
 8009a62:	3708      	adds	r7, #8
 8009a64:	46bd      	mov	sp, r7
 8009a66:	bd80      	pop	{r7, pc}

08009a68 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009a68:	b580      	push	{r7, lr}
 8009a6a:	b082      	sub	sp, #8
 8009a6c:	af00      	add	r7, sp, #0
 8009a6e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009a76:	4618      	mov	r0, r3
 8009a78:	f7fe fd37 	bl	80084ea <USBD_LL_DevConnected>
}
 8009a7c:	bf00      	nop
 8009a7e:	3708      	adds	r7, #8
 8009a80:	46bd      	mov	sp, r7
 8009a82:	bd80      	pop	{r7, pc}

08009a84 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009a84:	b580      	push	{r7, lr}
 8009a86:	b082      	sub	sp, #8
 8009a88:	af00      	add	r7, sp, #0
 8009a8a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009a92:	4618      	mov	r0, r3
 8009a94:	f7fe fd34 	bl	8008500 <USBD_LL_DevDisconnected>
}
 8009a98:	bf00      	nop
 8009a9a:	3708      	adds	r7, #8
 8009a9c:	46bd      	mov	sp, r7
 8009a9e:	bd80      	pop	{r7, pc}

08009aa0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009aa0:	b580      	push	{r7, lr}
 8009aa2:	b082      	sub	sp, #8
 8009aa4:	af00      	add	r7, sp, #0
 8009aa6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_HS) {
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	781b      	ldrb	r3, [r3, #0]
 8009aac:	2b01      	cmp	r3, #1
 8009aae:	d140      	bne.n	8009b32 <USBD_LL_Init+0x92>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_HS.pData = pdev;
 8009ab0:	4a22      	ldr	r2, [pc, #136]	; (8009b3c <USBD_LL_Init+0x9c>)
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_HS;
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	4a20      	ldr	r2, [pc, #128]	; (8009b3c <USBD_LL_Init+0x9c>)
 8009abc:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 8009ac0:	4b1e      	ldr	r3, [pc, #120]	; (8009b3c <USBD_LL_Init+0x9c>)
 8009ac2:	4a1f      	ldr	r2, [pc, #124]	; (8009b40 <USBD_LL_Init+0xa0>)
 8009ac4:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_HS.Init.dev_endpoints = 6;
 8009ac6:	4b1d      	ldr	r3, [pc, #116]	; (8009b3c <USBD_LL_Init+0x9c>)
 8009ac8:	2206      	movs	r2, #6
 8009aca:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_FULL;
 8009acc:	4b1b      	ldr	r3, [pc, #108]	; (8009b3c <USBD_LL_Init+0x9c>)
 8009ace:	2202      	movs	r2, #2
 8009ad0:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 8009ad2:	4b1a      	ldr	r3, [pc, #104]	; (8009b3c <USBD_LL_Init+0x9c>)
 8009ad4:	2200      	movs	r2, #0
 8009ad6:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 8009ad8:	4b18      	ldr	r3, [pc, #96]	; (8009b3c <USBD_LL_Init+0x9c>)
 8009ada:	2202      	movs	r2, #2
 8009adc:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 8009ade:	4b17      	ldr	r3, [pc, #92]	; (8009b3c <USBD_LL_Init+0x9c>)
 8009ae0:	2200      	movs	r2, #0
 8009ae2:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 8009ae4:	4b15      	ldr	r3, [pc, #84]	; (8009b3c <USBD_LL_Init+0x9c>)
 8009ae6:	2200      	movs	r2, #0
 8009ae8:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 8009aea:	4b14      	ldr	r3, [pc, #80]	; (8009b3c <USBD_LL_Init+0x9c>)
 8009aec:	2200      	movs	r2, #0
 8009aee:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 8009af0:	4b12      	ldr	r3, [pc, #72]	; (8009b3c <USBD_LL_Init+0x9c>)
 8009af2:	2200      	movs	r2, #0
 8009af4:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 8009af6:	4b11      	ldr	r3, [pc, #68]	; (8009b3c <USBD_LL_Init+0x9c>)
 8009af8:	2200      	movs	r2, #0
 8009afa:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 8009afc:	4b0f      	ldr	r3, [pc, #60]	; (8009b3c <USBD_LL_Init+0x9c>)
 8009afe:	2200      	movs	r2, #0
 8009b00:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 8009b02:	480e      	ldr	r0, [pc, #56]	; (8009b3c <USBD_LL_Init+0x9c>)
 8009b04:	f7f8 faa6 	bl	8002054 <HAL_PCD_Init>
 8009b08:	4603      	mov	r3, r0
 8009b0a:	2b00      	cmp	r3, #0
 8009b0c:	d001      	beq.n	8009b12 <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 8009b0e:	f7f7 fc11 	bl	8001334 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_HS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_HS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_HS, 0x200);
 8009b12:	f44f 7100 	mov.w	r1, #512	; 0x200
 8009b16:	4809      	ldr	r0, [pc, #36]	; (8009b3c <USBD_LL_Init+0x9c>)
 8009b18:	f7f9 fcfd 	bl	8003516 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 0, 0x80);
 8009b1c:	2280      	movs	r2, #128	; 0x80
 8009b1e:	2100      	movs	r1, #0
 8009b20:	4806      	ldr	r0, [pc, #24]	; (8009b3c <USBD_LL_Init+0x9c>)
 8009b22:	f7f9 fcb1 	bl	8003488 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 1, 0x174);
 8009b26:	f44f 72ba 	mov.w	r2, #372	; 0x174
 8009b2a:	2101      	movs	r1, #1
 8009b2c:	4803      	ldr	r0, [pc, #12]	; (8009b3c <USBD_LL_Init+0x9c>)
 8009b2e:	f7f9 fcab 	bl	8003488 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8009b32:	2300      	movs	r3, #0
}
 8009b34:	4618      	mov	r0, r3
 8009b36:	3708      	adds	r7, #8
 8009b38:	46bd      	mov	sp, r7
 8009b3a:	bd80      	pop	{r7, pc}
 8009b3c:	2000199c 	.word	0x2000199c
 8009b40:	40040000 	.word	0x40040000

08009b44 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009b44:	b580      	push	{r7, lr}
 8009b46:	b084      	sub	sp, #16
 8009b48:	af00      	add	r7, sp, #0
 8009b4a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009b4c:	2300      	movs	r3, #0
 8009b4e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009b50:	2300      	movs	r3, #0
 8009b52:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009b5a:	4618      	mov	r0, r3
 8009b5c:	f7f8 fb97 	bl	800228e <HAL_PCD_Start>
 8009b60:	4603      	mov	r3, r0
 8009b62:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009b64:	7bfb      	ldrb	r3, [r7, #15]
 8009b66:	4618      	mov	r0, r3
 8009b68:	f000 f942 	bl	8009df0 <USBD_Get_USB_Status>
 8009b6c:	4603      	mov	r3, r0
 8009b6e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009b70:	7bbb      	ldrb	r3, [r7, #14]
}
 8009b72:	4618      	mov	r0, r3
 8009b74:	3710      	adds	r7, #16
 8009b76:	46bd      	mov	sp, r7
 8009b78:	bd80      	pop	{r7, pc}

08009b7a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8009b7a:	b580      	push	{r7, lr}
 8009b7c:	b084      	sub	sp, #16
 8009b7e:	af00      	add	r7, sp, #0
 8009b80:	6078      	str	r0, [r7, #4]
 8009b82:	4608      	mov	r0, r1
 8009b84:	4611      	mov	r1, r2
 8009b86:	461a      	mov	r2, r3
 8009b88:	4603      	mov	r3, r0
 8009b8a:	70fb      	strb	r3, [r7, #3]
 8009b8c:	460b      	mov	r3, r1
 8009b8e:	70bb      	strb	r3, [r7, #2]
 8009b90:	4613      	mov	r3, r2
 8009b92:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009b94:	2300      	movs	r3, #0
 8009b96:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009b98:	2300      	movs	r3, #0
 8009b9a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8009ba2:	78bb      	ldrb	r3, [r7, #2]
 8009ba4:	883a      	ldrh	r2, [r7, #0]
 8009ba6:	78f9      	ldrb	r1, [r7, #3]
 8009ba8:	f7f9 f868 	bl	8002c7c <HAL_PCD_EP_Open>
 8009bac:	4603      	mov	r3, r0
 8009bae:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009bb0:	7bfb      	ldrb	r3, [r7, #15]
 8009bb2:	4618      	mov	r0, r3
 8009bb4:	f000 f91c 	bl	8009df0 <USBD_Get_USB_Status>
 8009bb8:	4603      	mov	r3, r0
 8009bba:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009bbc:	7bbb      	ldrb	r3, [r7, #14]
}
 8009bbe:	4618      	mov	r0, r3
 8009bc0:	3710      	adds	r7, #16
 8009bc2:	46bd      	mov	sp, r7
 8009bc4:	bd80      	pop	{r7, pc}

08009bc6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009bc6:	b580      	push	{r7, lr}
 8009bc8:	b084      	sub	sp, #16
 8009bca:	af00      	add	r7, sp, #0
 8009bcc:	6078      	str	r0, [r7, #4]
 8009bce:	460b      	mov	r3, r1
 8009bd0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009bd2:	2300      	movs	r3, #0
 8009bd4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009bd6:	2300      	movs	r3, #0
 8009bd8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009be0:	78fa      	ldrb	r2, [r7, #3]
 8009be2:	4611      	mov	r1, r2
 8009be4:	4618      	mov	r0, r3
 8009be6:	f7f9 f8b1 	bl	8002d4c <HAL_PCD_EP_Close>
 8009bea:	4603      	mov	r3, r0
 8009bec:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009bee:	7bfb      	ldrb	r3, [r7, #15]
 8009bf0:	4618      	mov	r0, r3
 8009bf2:	f000 f8fd 	bl	8009df0 <USBD_Get_USB_Status>
 8009bf6:	4603      	mov	r3, r0
 8009bf8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009bfa:	7bbb      	ldrb	r3, [r7, #14]
}
 8009bfc:	4618      	mov	r0, r3
 8009bfe:	3710      	adds	r7, #16
 8009c00:	46bd      	mov	sp, r7
 8009c02:	bd80      	pop	{r7, pc}

08009c04 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009c04:	b580      	push	{r7, lr}
 8009c06:	b084      	sub	sp, #16
 8009c08:	af00      	add	r7, sp, #0
 8009c0a:	6078      	str	r0, [r7, #4]
 8009c0c:	460b      	mov	r3, r1
 8009c0e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009c10:	2300      	movs	r3, #0
 8009c12:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009c14:	2300      	movs	r3, #0
 8009c16:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009c1e:	78fa      	ldrb	r2, [r7, #3]
 8009c20:	4611      	mov	r1, r2
 8009c22:	4618      	mov	r0, r3
 8009c24:	f7f9 f989 	bl	8002f3a <HAL_PCD_EP_SetStall>
 8009c28:	4603      	mov	r3, r0
 8009c2a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009c2c:	7bfb      	ldrb	r3, [r7, #15]
 8009c2e:	4618      	mov	r0, r3
 8009c30:	f000 f8de 	bl	8009df0 <USBD_Get_USB_Status>
 8009c34:	4603      	mov	r3, r0
 8009c36:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009c38:	7bbb      	ldrb	r3, [r7, #14]
}
 8009c3a:	4618      	mov	r0, r3
 8009c3c:	3710      	adds	r7, #16
 8009c3e:	46bd      	mov	sp, r7
 8009c40:	bd80      	pop	{r7, pc}

08009c42 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009c42:	b580      	push	{r7, lr}
 8009c44:	b084      	sub	sp, #16
 8009c46:	af00      	add	r7, sp, #0
 8009c48:	6078      	str	r0, [r7, #4]
 8009c4a:	460b      	mov	r3, r1
 8009c4c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009c4e:	2300      	movs	r3, #0
 8009c50:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009c52:	2300      	movs	r3, #0
 8009c54:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009c5c:	78fa      	ldrb	r2, [r7, #3]
 8009c5e:	4611      	mov	r1, r2
 8009c60:	4618      	mov	r0, r3
 8009c62:	f7f9 f9ce 	bl	8003002 <HAL_PCD_EP_ClrStall>
 8009c66:	4603      	mov	r3, r0
 8009c68:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009c6a:	7bfb      	ldrb	r3, [r7, #15]
 8009c6c:	4618      	mov	r0, r3
 8009c6e:	f000 f8bf 	bl	8009df0 <USBD_Get_USB_Status>
 8009c72:	4603      	mov	r3, r0
 8009c74:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009c76:	7bbb      	ldrb	r3, [r7, #14]
}
 8009c78:	4618      	mov	r0, r3
 8009c7a:	3710      	adds	r7, #16
 8009c7c:	46bd      	mov	sp, r7
 8009c7e:	bd80      	pop	{r7, pc}

08009c80 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009c80:	b480      	push	{r7}
 8009c82:	b085      	sub	sp, #20
 8009c84:	af00      	add	r7, sp, #0
 8009c86:	6078      	str	r0, [r7, #4]
 8009c88:	460b      	mov	r3, r1
 8009c8a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009c92:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8009c94:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009c98:	2b00      	cmp	r3, #0
 8009c9a:	da0b      	bge.n	8009cb4 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009c9c:	78fb      	ldrb	r3, [r7, #3]
 8009c9e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009ca2:	68f9      	ldr	r1, [r7, #12]
 8009ca4:	4613      	mov	r3, r2
 8009ca6:	00db      	lsls	r3, r3, #3
 8009ca8:	4413      	add	r3, r2
 8009caa:	009b      	lsls	r3, r3, #2
 8009cac:	440b      	add	r3, r1
 8009cae:	333e      	adds	r3, #62	; 0x3e
 8009cb0:	781b      	ldrb	r3, [r3, #0]
 8009cb2:	e00b      	b.n	8009ccc <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8009cb4:	78fb      	ldrb	r3, [r7, #3]
 8009cb6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009cba:	68f9      	ldr	r1, [r7, #12]
 8009cbc:	4613      	mov	r3, r2
 8009cbe:	00db      	lsls	r3, r3, #3
 8009cc0:	4413      	add	r3, r2
 8009cc2:	009b      	lsls	r3, r3, #2
 8009cc4:	440b      	add	r3, r1
 8009cc6:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8009cca:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009ccc:	4618      	mov	r0, r3
 8009cce:	3714      	adds	r7, #20
 8009cd0:	46bd      	mov	sp, r7
 8009cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cd6:	4770      	bx	lr

08009cd8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8009cd8:	b580      	push	{r7, lr}
 8009cda:	b084      	sub	sp, #16
 8009cdc:	af00      	add	r7, sp, #0
 8009cde:	6078      	str	r0, [r7, #4]
 8009ce0:	460b      	mov	r3, r1
 8009ce2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009ce4:	2300      	movs	r3, #0
 8009ce6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009ce8:	2300      	movs	r3, #0
 8009cea:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009cf2:	78fa      	ldrb	r2, [r7, #3]
 8009cf4:	4611      	mov	r1, r2
 8009cf6:	4618      	mov	r0, r3
 8009cf8:	f7f8 ff9b 	bl	8002c32 <HAL_PCD_SetAddress>
 8009cfc:	4603      	mov	r3, r0
 8009cfe:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009d00:	7bfb      	ldrb	r3, [r7, #15]
 8009d02:	4618      	mov	r0, r3
 8009d04:	f000 f874 	bl	8009df0 <USBD_Get_USB_Status>
 8009d08:	4603      	mov	r3, r0
 8009d0a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009d0c:	7bbb      	ldrb	r3, [r7, #14]
}
 8009d0e:	4618      	mov	r0, r3
 8009d10:	3710      	adds	r7, #16
 8009d12:	46bd      	mov	sp, r7
 8009d14:	bd80      	pop	{r7, pc}

08009d16 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009d16:	b580      	push	{r7, lr}
 8009d18:	b086      	sub	sp, #24
 8009d1a:	af00      	add	r7, sp, #0
 8009d1c:	60f8      	str	r0, [r7, #12]
 8009d1e:	607a      	str	r2, [r7, #4]
 8009d20:	603b      	str	r3, [r7, #0]
 8009d22:	460b      	mov	r3, r1
 8009d24:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009d26:	2300      	movs	r3, #0
 8009d28:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009d2a:	2300      	movs	r3, #0
 8009d2c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009d2e:	68fb      	ldr	r3, [r7, #12]
 8009d30:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8009d34:	7af9      	ldrb	r1, [r7, #11]
 8009d36:	683b      	ldr	r3, [r7, #0]
 8009d38:	687a      	ldr	r2, [r7, #4]
 8009d3a:	f7f9 f8b4 	bl	8002ea6 <HAL_PCD_EP_Transmit>
 8009d3e:	4603      	mov	r3, r0
 8009d40:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009d42:	7dfb      	ldrb	r3, [r7, #23]
 8009d44:	4618      	mov	r0, r3
 8009d46:	f000 f853 	bl	8009df0 <USBD_Get_USB_Status>
 8009d4a:	4603      	mov	r3, r0
 8009d4c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009d4e:	7dbb      	ldrb	r3, [r7, #22]
}
 8009d50:	4618      	mov	r0, r3
 8009d52:	3718      	adds	r7, #24
 8009d54:	46bd      	mov	sp, r7
 8009d56:	bd80      	pop	{r7, pc}

08009d58 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009d58:	b580      	push	{r7, lr}
 8009d5a:	b086      	sub	sp, #24
 8009d5c:	af00      	add	r7, sp, #0
 8009d5e:	60f8      	str	r0, [r7, #12]
 8009d60:	607a      	str	r2, [r7, #4]
 8009d62:	603b      	str	r3, [r7, #0]
 8009d64:	460b      	mov	r3, r1
 8009d66:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009d68:	2300      	movs	r3, #0
 8009d6a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009d6c:	2300      	movs	r3, #0
 8009d6e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009d70:	68fb      	ldr	r3, [r7, #12]
 8009d72:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8009d76:	7af9      	ldrb	r1, [r7, #11]
 8009d78:	683b      	ldr	r3, [r7, #0]
 8009d7a:	687a      	ldr	r2, [r7, #4]
 8009d7c:	f7f9 f830 	bl	8002de0 <HAL_PCD_EP_Receive>
 8009d80:	4603      	mov	r3, r0
 8009d82:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009d84:	7dfb      	ldrb	r3, [r7, #23]
 8009d86:	4618      	mov	r0, r3
 8009d88:	f000 f832 	bl	8009df0 <USBD_Get_USB_Status>
 8009d8c:	4603      	mov	r3, r0
 8009d8e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009d90:	7dbb      	ldrb	r3, [r7, #22]
}
 8009d92:	4618      	mov	r0, r3
 8009d94:	3718      	adds	r7, #24
 8009d96:	46bd      	mov	sp, r7
 8009d98:	bd80      	pop	{r7, pc}

08009d9a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009d9a:	b580      	push	{r7, lr}
 8009d9c:	b082      	sub	sp, #8
 8009d9e:	af00      	add	r7, sp, #0
 8009da0:	6078      	str	r0, [r7, #4]
 8009da2:	460b      	mov	r3, r1
 8009da4:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009dac:	78fa      	ldrb	r2, [r7, #3]
 8009dae:	4611      	mov	r1, r2
 8009db0:	4618      	mov	r0, r3
 8009db2:	f7f9 f860 	bl	8002e76 <HAL_PCD_EP_GetRxCount>
 8009db6:	4603      	mov	r3, r0
}
 8009db8:	4618      	mov	r0, r3
 8009dba:	3708      	adds	r7, #8
 8009dbc:	46bd      	mov	sp, r7
 8009dbe:	bd80      	pop	{r7, pc}

08009dc0 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8009dc0:	b480      	push	{r7}
 8009dc2:	b083      	sub	sp, #12
 8009dc4:	af00      	add	r7, sp, #0
 8009dc6:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8009dc8:	4b03      	ldr	r3, [pc, #12]	; (8009dd8 <USBD_static_malloc+0x18>)
}
 8009dca:	4618      	mov	r0, r3
 8009dcc:	370c      	adds	r7, #12
 8009dce:	46bd      	mov	sp, r7
 8009dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dd4:	4770      	bx	lr
 8009dd6:	bf00      	nop
 8009dd8:	20001ea8 	.word	0x20001ea8

08009ddc <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8009ddc:	b480      	push	{r7}
 8009dde:	b083      	sub	sp, #12
 8009de0:	af00      	add	r7, sp, #0
 8009de2:	6078      	str	r0, [r7, #4]

}
 8009de4:	bf00      	nop
 8009de6:	370c      	adds	r7, #12
 8009de8:	46bd      	mov	sp, r7
 8009dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dee:	4770      	bx	lr

08009df0 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009df0:	b480      	push	{r7}
 8009df2:	b085      	sub	sp, #20
 8009df4:	af00      	add	r7, sp, #0
 8009df6:	4603      	mov	r3, r0
 8009df8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009dfa:	2300      	movs	r3, #0
 8009dfc:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009dfe:	79fb      	ldrb	r3, [r7, #7]
 8009e00:	2b03      	cmp	r3, #3
 8009e02:	d817      	bhi.n	8009e34 <USBD_Get_USB_Status+0x44>
 8009e04:	a201      	add	r2, pc, #4	; (adr r2, 8009e0c <USBD_Get_USB_Status+0x1c>)
 8009e06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e0a:	bf00      	nop
 8009e0c:	08009e1d 	.word	0x08009e1d
 8009e10:	08009e23 	.word	0x08009e23
 8009e14:	08009e29 	.word	0x08009e29
 8009e18:	08009e2f 	.word	0x08009e2f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009e1c:	2300      	movs	r3, #0
 8009e1e:	73fb      	strb	r3, [r7, #15]
    break;
 8009e20:	e00b      	b.n	8009e3a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009e22:	2303      	movs	r3, #3
 8009e24:	73fb      	strb	r3, [r7, #15]
    break;
 8009e26:	e008      	b.n	8009e3a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009e28:	2301      	movs	r3, #1
 8009e2a:	73fb      	strb	r3, [r7, #15]
    break;
 8009e2c:	e005      	b.n	8009e3a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009e2e:	2303      	movs	r3, #3
 8009e30:	73fb      	strb	r3, [r7, #15]
    break;
 8009e32:	e002      	b.n	8009e3a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009e34:	2303      	movs	r3, #3
 8009e36:	73fb      	strb	r3, [r7, #15]
    break;
 8009e38:	bf00      	nop
  }
  return usb_status;
 8009e3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e3c:	4618      	mov	r0, r3
 8009e3e:	3714      	adds	r7, #20
 8009e40:	46bd      	mov	sp, r7
 8009e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e46:	4770      	bx	lr

08009e48 <__errno>:
 8009e48:	4b01      	ldr	r3, [pc, #4]	; (8009e50 <__errno+0x8>)
 8009e4a:	6818      	ldr	r0, [r3, #0]
 8009e4c:	4770      	bx	lr
 8009e4e:	bf00      	nop
 8009e50:	2000010c 	.word	0x2000010c

08009e54 <__libc_init_array>:
 8009e54:	b570      	push	{r4, r5, r6, lr}
 8009e56:	4d0d      	ldr	r5, [pc, #52]	; (8009e8c <__libc_init_array+0x38>)
 8009e58:	4c0d      	ldr	r4, [pc, #52]	; (8009e90 <__libc_init_array+0x3c>)
 8009e5a:	1b64      	subs	r4, r4, r5
 8009e5c:	10a4      	asrs	r4, r4, #2
 8009e5e:	2600      	movs	r6, #0
 8009e60:	42a6      	cmp	r6, r4
 8009e62:	d109      	bne.n	8009e78 <__libc_init_array+0x24>
 8009e64:	4d0b      	ldr	r5, [pc, #44]	; (8009e94 <__libc_init_array+0x40>)
 8009e66:	4c0c      	ldr	r4, [pc, #48]	; (8009e98 <__libc_init_array+0x44>)
 8009e68:	f000 fc84 	bl	800a774 <_init>
 8009e6c:	1b64      	subs	r4, r4, r5
 8009e6e:	10a4      	asrs	r4, r4, #2
 8009e70:	2600      	movs	r6, #0
 8009e72:	42a6      	cmp	r6, r4
 8009e74:	d105      	bne.n	8009e82 <__libc_init_array+0x2e>
 8009e76:	bd70      	pop	{r4, r5, r6, pc}
 8009e78:	f855 3b04 	ldr.w	r3, [r5], #4
 8009e7c:	4798      	blx	r3
 8009e7e:	3601      	adds	r6, #1
 8009e80:	e7ee      	b.n	8009e60 <__libc_init_array+0xc>
 8009e82:	f855 3b04 	ldr.w	r3, [r5], #4
 8009e86:	4798      	blx	r3
 8009e88:	3601      	adds	r6, #1
 8009e8a:	e7f2      	b.n	8009e72 <__libc_init_array+0x1e>
 8009e8c:	0800a858 	.word	0x0800a858
 8009e90:	0800a858 	.word	0x0800a858
 8009e94:	0800a858 	.word	0x0800a858
 8009e98:	0800a85c 	.word	0x0800a85c

08009e9c <memcmp>:
 8009e9c:	b510      	push	{r4, lr}
 8009e9e:	3901      	subs	r1, #1
 8009ea0:	4402      	add	r2, r0
 8009ea2:	4290      	cmp	r0, r2
 8009ea4:	d101      	bne.n	8009eaa <memcmp+0xe>
 8009ea6:	2000      	movs	r0, #0
 8009ea8:	e005      	b.n	8009eb6 <memcmp+0x1a>
 8009eaa:	7803      	ldrb	r3, [r0, #0]
 8009eac:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8009eb0:	42a3      	cmp	r3, r4
 8009eb2:	d001      	beq.n	8009eb8 <memcmp+0x1c>
 8009eb4:	1b18      	subs	r0, r3, r4
 8009eb6:	bd10      	pop	{r4, pc}
 8009eb8:	3001      	adds	r0, #1
 8009eba:	e7f2      	b.n	8009ea2 <memcmp+0x6>

08009ebc <memcpy>:
 8009ebc:	440a      	add	r2, r1
 8009ebe:	4291      	cmp	r1, r2
 8009ec0:	f100 33ff 	add.w	r3, r0, #4294967295
 8009ec4:	d100      	bne.n	8009ec8 <memcpy+0xc>
 8009ec6:	4770      	bx	lr
 8009ec8:	b510      	push	{r4, lr}
 8009eca:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009ece:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009ed2:	4291      	cmp	r1, r2
 8009ed4:	d1f9      	bne.n	8009eca <memcpy+0xe>
 8009ed6:	bd10      	pop	{r4, pc}

08009ed8 <memset>:
 8009ed8:	4402      	add	r2, r0
 8009eda:	4603      	mov	r3, r0
 8009edc:	4293      	cmp	r3, r2
 8009ede:	d100      	bne.n	8009ee2 <memset+0xa>
 8009ee0:	4770      	bx	lr
 8009ee2:	f803 1b01 	strb.w	r1, [r3], #1
 8009ee6:	e7f9      	b.n	8009edc <memset+0x4>

08009ee8 <setvbuf>:
 8009ee8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009eec:	461d      	mov	r5, r3
 8009eee:	4b5d      	ldr	r3, [pc, #372]	; (800a064 <setvbuf+0x17c>)
 8009ef0:	681f      	ldr	r7, [r3, #0]
 8009ef2:	4604      	mov	r4, r0
 8009ef4:	460e      	mov	r6, r1
 8009ef6:	4690      	mov	r8, r2
 8009ef8:	b127      	cbz	r7, 8009f04 <setvbuf+0x1c>
 8009efa:	69bb      	ldr	r3, [r7, #24]
 8009efc:	b913      	cbnz	r3, 8009f04 <setvbuf+0x1c>
 8009efe:	4638      	mov	r0, r7
 8009f00:	f000 f9d2 	bl	800a2a8 <__sinit>
 8009f04:	4b58      	ldr	r3, [pc, #352]	; (800a068 <setvbuf+0x180>)
 8009f06:	429c      	cmp	r4, r3
 8009f08:	d167      	bne.n	8009fda <setvbuf+0xf2>
 8009f0a:	687c      	ldr	r4, [r7, #4]
 8009f0c:	f1b8 0f02 	cmp.w	r8, #2
 8009f10:	d006      	beq.n	8009f20 <setvbuf+0x38>
 8009f12:	f1b8 0f01 	cmp.w	r8, #1
 8009f16:	f200 809f 	bhi.w	800a058 <setvbuf+0x170>
 8009f1a:	2d00      	cmp	r5, #0
 8009f1c:	f2c0 809c 	blt.w	800a058 <setvbuf+0x170>
 8009f20:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009f22:	07db      	lsls	r3, r3, #31
 8009f24:	d405      	bmi.n	8009f32 <setvbuf+0x4a>
 8009f26:	89a3      	ldrh	r3, [r4, #12]
 8009f28:	0598      	lsls	r0, r3, #22
 8009f2a:	d402      	bmi.n	8009f32 <setvbuf+0x4a>
 8009f2c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009f2e:	f000 fa59 	bl	800a3e4 <__retarget_lock_acquire_recursive>
 8009f32:	4621      	mov	r1, r4
 8009f34:	4638      	mov	r0, r7
 8009f36:	f000 f923 	bl	800a180 <_fflush_r>
 8009f3a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009f3c:	b141      	cbz	r1, 8009f50 <setvbuf+0x68>
 8009f3e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009f42:	4299      	cmp	r1, r3
 8009f44:	d002      	beq.n	8009f4c <setvbuf+0x64>
 8009f46:	4638      	mov	r0, r7
 8009f48:	f000 fa7c 	bl	800a444 <_free_r>
 8009f4c:	2300      	movs	r3, #0
 8009f4e:	6363      	str	r3, [r4, #52]	; 0x34
 8009f50:	2300      	movs	r3, #0
 8009f52:	61a3      	str	r3, [r4, #24]
 8009f54:	6063      	str	r3, [r4, #4]
 8009f56:	89a3      	ldrh	r3, [r4, #12]
 8009f58:	0619      	lsls	r1, r3, #24
 8009f5a:	d503      	bpl.n	8009f64 <setvbuf+0x7c>
 8009f5c:	6921      	ldr	r1, [r4, #16]
 8009f5e:	4638      	mov	r0, r7
 8009f60:	f000 fa70 	bl	800a444 <_free_r>
 8009f64:	89a3      	ldrh	r3, [r4, #12]
 8009f66:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 8009f6a:	f023 0303 	bic.w	r3, r3, #3
 8009f6e:	f1b8 0f02 	cmp.w	r8, #2
 8009f72:	81a3      	strh	r3, [r4, #12]
 8009f74:	d06c      	beq.n	800a050 <setvbuf+0x168>
 8009f76:	ab01      	add	r3, sp, #4
 8009f78:	466a      	mov	r2, sp
 8009f7a:	4621      	mov	r1, r4
 8009f7c:	4638      	mov	r0, r7
 8009f7e:	f000 fa33 	bl	800a3e8 <__swhatbuf_r>
 8009f82:	89a3      	ldrh	r3, [r4, #12]
 8009f84:	4318      	orrs	r0, r3
 8009f86:	81a0      	strh	r0, [r4, #12]
 8009f88:	2d00      	cmp	r5, #0
 8009f8a:	d130      	bne.n	8009fee <setvbuf+0x106>
 8009f8c:	9d00      	ldr	r5, [sp, #0]
 8009f8e:	4628      	mov	r0, r5
 8009f90:	f000 fa50 	bl	800a434 <malloc>
 8009f94:	4606      	mov	r6, r0
 8009f96:	2800      	cmp	r0, #0
 8009f98:	d155      	bne.n	800a046 <setvbuf+0x15e>
 8009f9a:	f8dd 9000 	ldr.w	r9, [sp]
 8009f9e:	45a9      	cmp	r9, r5
 8009fa0:	d14a      	bne.n	800a038 <setvbuf+0x150>
 8009fa2:	f04f 35ff 	mov.w	r5, #4294967295
 8009fa6:	2200      	movs	r2, #0
 8009fa8:	60a2      	str	r2, [r4, #8]
 8009faa:	f104 0247 	add.w	r2, r4, #71	; 0x47
 8009fae:	6022      	str	r2, [r4, #0]
 8009fb0:	6122      	str	r2, [r4, #16]
 8009fb2:	2201      	movs	r2, #1
 8009fb4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009fb8:	6162      	str	r2, [r4, #20]
 8009fba:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009fbc:	f043 0302 	orr.w	r3, r3, #2
 8009fc0:	07d2      	lsls	r2, r2, #31
 8009fc2:	81a3      	strh	r3, [r4, #12]
 8009fc4:	d405      	bmi.n	8009fd2 <setvbuf+0xea>
 8009fc6:	f413 7f00 	tst.w	r3, #512	; 0x200
 8009fca:	d102      	bne.n	8009fd2 <setvbuf+0xea>
 8009fcc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009fce:	f000 fa0a 	bl	800a3e6 <__retarget_lock_release_recursive>
 8009fd2:	4628      	mov	r0, r5
 8009fd4:	b003      	add	sp, #12
 8009fd6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009fda:	4b24      	ldr	r3, [pc, #144]	; (800a06c <setvbuf+0x184>)
 8009fdc:	429c      	cmp	r4, r3
 8009fde:	d101      	bne.n	8009fe4 <setvbuf+0xfc>
 8009fe0:	68bc      	ldr	r4, [r7, #8]
 8009fe2:	e793      	b.n	8009f0c <setvbuf+0x24>
 8009fe4:	4b22      	ldr	r3, [pc, #136]	; (800a070 <setvbuf+0x188>)
 8009fe6:	429c      	cmp	r4, r3
 8009fe8:	bf08      	it	eq
 8009fea:	68fc      	ldreq	r4, [r7, #12]
 8009fec:	e78e      	b.n	8009f0c <setvbuf+0x24>
 8009fee:	2e00      	cmp	r6, #0
 8009ff0:	d0cd      	beq.n	8009f8e <setvbuf+0xa6>
 8009ff2:	69bb      	ldr	r3, [r7, #24]
 8009ff4:	b913      	cbnz	r3, 8009ffc <setvbuf+0x114>
 8009ff6:	4638      	mov	r0, r7
 8009ff8:	f000 f956 	bl	800a2a8 <__sinit>
 8009ffc:	f1b8 0f01 	cmp.w	r8, #1
 800a000:	bf08      	it	eq
 800a002:	89a3      	ldrheq	r3, [r4, #12]
 800a004:	6026      	str	r6, [r4, #0]
 800a006:	bf04      	itt	eq
 800a008:	f043 0301 	orreq.w	r3, r3, #1
 800a00c:	81a3      	strheq	r3, [r4, #12]
 800a00e:	89a2      	ldrh	r2, [r4, #12]
 800a010:	f012 0308 	ands.w	r3, r2, #8
 800a014:	e9c4 6504 	strd	r6, r5, [r4, #16]
 800a018:	d01c      	beq.n	800a054 <setvbuf+0x16c>
 800a01a:	07d3      	lsls	r3, r2, #31
 800a01c:	bf41      	itttt	mi
 800a01e:	2300      	movmi	r3, #0
 800a020:	426d      	negmi	r5, r5
 800a022:	60a3      	strmi	r3, [r4, #8]
 800a024:	61a5      	strmi	r5, [r4, #24]
 800a026:	bf58      	it	pl
 800a028:	60a5      	strpl	r5, [r4, #8]
 800a02a:	6e65      	ldr	r5, [r4, #100]	; 0x64
 800a02c:	f015 0501 	ands.w	r5, r5, #1
 800a030:	d115      	bne.n	800a05e <setvbuf+0x176>
 800a032:	f412 7f00 	tst.w	r2, #512	; 0x200
 800a036:	e7c8      	b.n	8009fca <setvbuf+0xe2>
 800a038:	4648      	mov	r0, r9
 800a03a:	f000 f9fb 	bl	800a434 <malloc>
 800a03e:	4606      	mov	r6, r0
 800a040:	2800      	cmp	r0, #0
 800a042:	d0ae      	beq.n	8009fa2 <setvbuf+0xba>
 800a044:	464d      	mov	r5, r9
 800a046:	89a3      	ldrh	r3, [r4, #12]
 800a048:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a04c:	81a3      	strh	r3, [r4, #12]
 800a04e:	e7d0      	b.n	8009ff2 <setvbuf+0x10a>
 800a050:	2500      	movs	r5, #0
 800a052:	e7a8      	b.n	8009fa6 <setvbuf+0xbe>
 800a054:	60a3      	str	r3, [r4, #8]
 800a056:	e7e8      	b.n	800a02a <setvbuf+0x142>
 800a058:	f04f 35ff 	mov.w	r5, #4294967295
 800a05c:	e7b9      	b.n	8009fd2 <setvbuf+0xea>
 800a05e:	2500      	movs	r5, #0
 800a060:	e7b7      	b.n	8009fd2 <setvbuf+0xea>
 800a062:	bf00      	nop
 800a064:	2000010c 	.word	0x2000010c
 800a068:	0800a810 	.word	0x0800a810
 800a06c:	0800a830 	.word	0x0800a830
 800a070:	0800a7f0 	.word	0x0800a7f0

0800a074 <__sflush_r>:
 800a074:	898a      	ldrh	r2, [r1, #12]
 800a076:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a07a:	4605      	mov	r5, r0
 800a07c:	0710      	lsls	r0, r2, #28
 800a07e:	460c      	mov	r4, r1
 800a080:	d458      	bmi.n	800a134 <__sflush_r+0xc0>
 800a082:	684b      	ldr	r3, [r1, #4]
 800a084:	2b00      	cmp	r3, #0
 800a086:	dc05      	bgt.n	800a094 <__sflush_r+0x20>
 800a088:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a08a:	2b00      	cmp	r3, #0
 800a08c:	dc02      	bgt.n	800a094 <__sflush_r+0x20>
 800a08e:	2000      	movs	r0, #0
 800a090:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a094:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a096:	2e00      	cmp	r6, #0
 800a098:	d0f9      	beq.n	800a08e <__sflush_r+0x1a>
 800a09a:	2300      	movs	r3, #0
 800a09c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a0a0:	682f      	ldr	r7, [r5, #0]
 800a0a2:	602b      	str	r3, [r5, #0]
 800a0a4:	d032      	beq.n	800a10c <__sflush_r+0x98>
 800a0a6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a0a8:	89a3      	ldrh	r3, [r4, #12]
 800a0aa:	075a      	lsls	r2, r3, #29
 800a0ac:	d505      	bpl.n	800a0ba <__sflush_r+0x46>
 800a0ae:	6863      	ldr	r3, [r4, #4]
 800a0b0:	1ac0      	subs	r0, r0, r3
 800a0b2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a0b4:	b10b      	cbz	r3, 800a0ba <__sflush_r+0x46>
 800a0b6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a0b8:	1ac0      	subs	r0, r0, r3
 800a0ba:	2300      	movs	r3, #0
 800a0bc:	4602      	mov	r2, r0
 800a0be:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a0c0:	6a21      	ldr	r1, [r4, #32]
 800a0c2:	4628      	mov	r0, r5
 800a0c4:	47b0      	blx	r6
 800a0c6:	1c43      	adds	r3, r0, #1
 800a0c8:	89a3      	ldrh	r3, [r4, #12]
 800a0ca:	d106      	bne.n	800a0da <__sflush_r+0x66>
 800a0cc:	6829      	ldr	r1, [r5, #0]
 800a0ce:	291d      	cmp	r1, #29
 800a0d0:	d82c      	bhi.n	800a12c <__sflush_r+0xb8>
 800a0d2:	4a2a      	ldr	r2, [pc, #168]	; (800a17c <__sflush_r+0x108>)
 800a0d4:	40ca      	lsrs	r2, r1
 800a0d6:	07d6      	lsls	r6, r2, #31
 800a0d8:	d528      	bpl.n	800a12c <__sflush_r+0xb8>
 800a0da:	2200      	movs	r2, #0
 800a0dc:	6062      	str	r2, [r4, #4]
 800a0de:	04d9      	lsls	r1, r3, #19
 800a0e0:	6922      	ldr	r2, [r4, #16]
 800a0e2:	6022      	str	r2, [r4, #0]
 800a0e4:	d504      	bpl.n	800a0f0 <__sflush_r+0x7c>
 800a0e6:	1c42      	adds	r2, r0, #1
 800a0e8:	d101      	bne.n	800a0ee <__sflush_r+0x7a>
 800a0ea:	682b      	ldr	r3, [r5, #0]
 800a0ec:	b903      	cbnz	r3, 800a0f0 <__sflush_r+0x7c>
 800a0ee:	6560      	str	r0, [r4, #84]	; 0x54
 800a0f0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a0f2:	602f      	str	r7, [r5, #0]
 800a0f4:	2900      	cmp	r1, #0
 800a0f6:	d0ca      	beq.n	800a08e <__sflush_r+0x1a>
 800a0f8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a0fc:	4299      	cmp	r1, r3
 800a0fe:	d002      	beq.n	800a106 <__sflush_r+0x92>
 800a100:	4628      	mov	r0, r5
 800a102:	f000 f99f 	bl	800a444 <_free_r>
 800a106:	2000      	movs	r0, #0
 800a108:	6360      	str	r0, [r4, #52]	; 0x34
 800a10a:	e7c1      	b.n	800a090 <__sflush_r+0x1c>
 800a10c:	6a21      	ldr	r1, [r4, #32]
 800a10e:	2301      	movs	r3, #1
 800a110:	4628      	mov	r0, r5
 800a112:	47b0      	blx	r6
 800a114:	1c41      	adds	r1, r0, #1
 800a116:	d1c7      	bne.n	800a0a8 <__sflush_r+0x34>
 800a118:	682b      	ldr	r3, [r5, #0]
 800a11a:	2b00      	cmp	r3, #0
 800a11c:	d0c4      	beq.n	800a0a8 <__sflush_r+0x34>
 800a11e:	2b1d      	cmp	r3, #29
 800a120:	d001      	beq.n	800a126 <__sflush_r+0xb2>
 800a122:	2b16      	cmp	r3, #22
 800a124:	d101      	bne.n	800a12a <__sflush_r+0xb6>
 800a126:	602f      	str	r7, [r5, #0]
 800a128:	e7b1      	b.n	800a08e <__sflush_r+0x1a>
 800a12a:	89a3      	ldrh	r3, [r4, #12]
 800a12c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a130:	81a3      	strh	r3, [r4, #12]
 800a132:	e7ad      	b.n	800a090 <__sflush_r+0x1c>
 800a134:	690f      	ldr	r7, [r1, #16]
 800a136:	2f00      	cmp	r7, #0
 800a138:	d0a9      	beq.n	800a08e <__sflush_r+0x1a>
 800a13a:	0793      	lsls	r3, r2, #30
 800a13c:	680e      	ldr	r6, [r1, #0]
 800a13e:	bf08      	it	eq
 800a140:	694b      	ldreq	r3, [r1, #20]
 800a142:	600f      	str	r7, [r1, #0]
 800a144:	bf18      	it	ne
 800a146:	2300      	movne	r3, #0
 800a148:	eba6 0807 	sub.w	r8, r6, r7
 800a14c:	608b      	str	r3, [r1, #8]
 800a14e:	f1b8 0f00 	cmp.w	r8, #0
 800a152:	dd9c      	ble.n	800a08e <__sflush_r+0x1a>
 800a154:	6a21      	ldr	r1, [r4, #32]
 800a156:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a158:	4643      	mov	r3, r8
 800a15a:	463a      	mov	r2, r7
 800a15c:	4628      	mov	r0, r5
 800a15e:	47b0      	blx	r6
 800a160:	2800      	cmp	r0, #0
 800a162:	dc06      	bgt.n	800a172 <__sflush_r+0xfe>
 800a164:	89a3      	ldrh	r3, [r4, #12]
 800a166:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a16a:	81a3      	strh	r3, [r4, #12]
 800a16c:	f04f 30ff 	mov.w	r0, #4294967295
 800a170:	e78e      	b.n	800a090 <__sflush_r+0x1c>
 800a172:	4407      	add	r7, r0
 800a174:	eba8 0800 	sub.w	r8, r8, r0
 800a178:	e7e9      	b.n	800a14e <__sflush_r+0xda>
 800a17a:	bf00      	nop
 800a17c:	20400001 	.word	0x20400001

0800a180 <_fflush_r>:
 800a180:	b538      	push	{r3, r4, r5, lr}
 800a182:	690b      	ldr	r3, [r1, #16]
 800a184:	4605      	mov	r5, r0
 800a186:	460c      	mov	r4, r1
 800a188:	b913      	cbnz	r3, 800a190 <_fflush_r+0x10>
 800a18a:	2500      	movs	r5, #0
 800a18c:	4628      	mov	r0, r5
 800a18e:	bd38      	pop	{r3, r4, r5, pc}
 800a190:	b118      	cbz	r0, 800a19a <_fflush_r+0x1a>
 800a192:	6983      	ldr	r3, [r0, #24]
 800a194:	b90b      	cbnz	r3, 800a19a <_fflush_r+0x1a>
 800a196:	f000 f887 	bl	800a2a8 <__sinit>
 800a19a:	4b14      	ldr	r3, [pc, #80]	; (800a1ec <_fflush_r+0x6c>)
 800a19c:	429c      	cmp	r4, r3
 800a19e:	d11b      	bne.n	800a1d8 <_fflush_r+0x58>
 800a1a0:	686c      	ldr	r4, [r5, #4]
 800a1a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a1a6:	2b00      	cmp	r3, #0
 800a1a8:	d0ef      	beq.n	800a18a <_fflush_r+0xa>
 800a1aa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a1ac:	07d0      	lsls	r0, r2, #31
 800a1ae:	d404      	bmi.n	800a1ba <_fflush_r+0x3a>
 800a1b0:	0599      	lsls	r1, r3, #22
 800a1b2:	d402      	bmi.n	800a1ba <_fflush_r+0x3a>
 800a1b4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a1b6:	f000 f915 	bl	800a3e4 <__retarget_lock_acquire_recursive>
 800a1ba:	4628      	mov	r0, r5
 800a1bc:	4621      	mov	r1, r4
 800a1be:	f7ff ff59 	bl	800a074 <__sflush_r>
 800a1c2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a1c4:	07da      	lsls	r2, r3, #31
 800a1c6:	4605      	mov	r5, r0
 800a1c8:	d4e0      	bmi.n	800a18c <_fflush_r+0xc>
 800a1ca:	89a3      	ldrh	r3, [r4, #12]
 800a1cc:	059b      	lsls	r3, r3, #22
 800a1ce:	d4dd      	bmi.n	800a18c <_fflush_r+0xc>
 800a1d0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a1d2:	f000 f908 	bl	800a3e6 <__retarget_lock_release_recursive>
 800a1d6:	e7d9      	b.n	800a18c <_fflush_r+0xc>
 800a1d8:	4b05      	ldr	r3, [pc, #20]	; (800a1f0 <_fflush_r+0x70>)
 800a1da:	429c      	cmp	r4, r3
 800a1dc:	d101      	bne.n	800a1e2 <_fflush_r+0x62>
 800a1de:	68ac      	ldr	r4, [r5, #8]
 800a1e0:	e7df      	b.n	800a1a2 <_fflush_r+0x22>
 800a1e2:	4b04      	ldr	r3, [pc, #16]	; (800a1f4 <_fflush_r+0x74>)
 800a1e4:	429c      	cmp	r4, r3
 800a1e6:	bf08      	it	eq
 800a1e8:	68ec      	ldreq	r4, [r5, #12]
 800a1ea:	e7da      	b.n	800a1a2 <_fflush_r+0x22>
 800a1ec:	0800a810 	.word	0x0800a810
 800a1f0:	0800a830 	.word	0x0800a830
 800a1f4:	0800a7f0 	.word	0x0800a7f0

0800a1f8 <std>:
 800a1f8:	2300      	movs	r3, #0
 800a1fa:	b510      	push	{r4, lr}
 800a1fc:	4604      	mov	r4, r0
 800a1fe:	e9c0 3300 	strd	r3, r3, [r0]
 800a202:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a206:	6083      	str	r3, [r0, #8]
 800a208:	8181      	strh	r1, [r0, #12]
 800a20a:	6643      	str	r3, [r0, #100]	; 0x64
 800a20c:	81c2      	strh	r2, [r0, #14]
 800a20e:	6183      	str	r3, [r0, #24]
 800a210:	4619      	mov	r1, r3
 800a212:	2208      	movs	r2, #8
 800a214:	305c      	adds	r0, #92	; 0x5c
 800a216:	f7ff fe5f 	bl	8009ed8 <memset>
 800a21a:	4b05      	ldr	r3, [pc, #20]	; (800a230 <std+0x38>)
 800a21c:	6263      	str	r3, [r4, #36]	; 0x24
 800a21e:	4b05      	ldr	r3, [pc, #20]	; (800a234 <std+0x3c>)
 800a220:	62a3      	str	r3, [r4, #40]	; 0x28
 800a222:	4b05      	ldr	r3, [pc, #20]	; (800a238 <std+0x40>)
 800a224:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a226:	4b05      	ldr	r3, [pc, #20]	; (800a23c <std+0x44>)
 800a228:	6224      	str	r4, [r4, #32]
 800a22a:	6323      	str	r3, [r4, #48]	; 0x30
 800a22c:	bd10      	pop	{r4, pc}
 800a22e:	bf00      	nop
 800a230:	0800a625 	.word	0x0800a625
 800a234:	0800a647 	.word	0x0800a647
 800a238:	0800a67f 	.word	0x0800a67f
 800a23c:	0800a6a3 	.word	0x0800a6a3

0800a240 <_cleanup_r>:
 800a240:	4901      	ldr	r1, [pc, #4]	; (800a248 <_cleanup_r+0x8>)
 800a242:	f000 b8af 	b.w	800a3a4 <_fwalk_reent>
 800a246:	bf00      	nop
 800a248:	0800a181 	.word	0x0800a181

0800a24c <__sfmoreglue>:
 800a24c:	b570      	push	{r4, r5, r6, lr}
 800a24e:	2268      	movs	r2, #104	; 0x68
 800a250:	1e4d      	subs	r5, r1, #1
 800a252:	4355      	muls	r5, r2
 800a254:	460e      	mov	r6, r1
 800a256:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800a25a:	f000 f95f 	bl	800a51c <_malloc_r>
 800a25e:	4604      	mov	r4, r0
 800a260:	b140      	cbz	r0, 800a274 <__sfmoreglue+0x28>
 800a262:	2100      	movs	r1, #0
 800a264:	e9c0 1600 	strd	r1, r6, [r0]
 800a268:	300c      	adds	r0, #12
 800a26a:	60a0      	str	r0, [r4, #8]
 800a26c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800a270:	f7ff fe32 	bl	8009ed8 <memset>
 800a274:	4620      	mov	r0, r4
 800a276:	bd70      	pop	{r4, r5, r6, pc}

0800a278 <__sfp_lock_acquire>:
 800a278:	4801      	ldr	r0, [pc, #4]	; (800a280 <__sfp_lock_acquire+0x8>)
 800a27a:	f000 b8b3 	b.w	800a3e4 <__retarget_lock_acquire_recursive>
 800a27e:	bf00      	nop
 800a280:	200020c9 	.word	0x200020c9

0800a284 <__sfp_lock_release>:
 800a284:	4801      	ldr	r0, [pc, #4]	; (800a28c <__sfp_lock_release+0x8>)
 800a286:	f000 b8ae 	b.w	800a3e6 <__retarget_lock_release_recursive>
 800a28a:	bf00      	nop
 800a28c:	200020c9 	.word	0x200020c9

0800a290 <__sinit_lock_acquire>:
 800a290:	4801      	ldr	r0, [pc, #4]	; (800a298 <__sinit_lock_acquire+0x8>)
 800a292:	f000 b8a7 	b.w	800a3e4 <__retarget_lock_acquire_recursive>
 800a296:	bf00      	nop
 800a298:	200020ca 	.word	0x200020ca

0800a29c <__sinit_lock_release>:
 800a29c:	4801      	ldr	r0, [pc, #4]	; (800a2a4 <__sinit_lock_release+0x8>)
 800a29e:	f000 b8a2 	b.w	800a3e6 <__retarget_lock_release_recursive>
 800a2a2:	bf00      	nop
 800a2a4:	200020ca 	.word	0x200020ca

0800a2a8 <__sinit>:
 800a2a8:	b510      	push	{r4, lr}
 800a2aa:	4604      	mov	r4, r0
 800a2ac:	f7ff fff0 	bl	800a290 <__sinit_lock_acquire>
 800a2b0:	69a3      	ldr	r3, [r4, #24]
 800a2b2:	b11b      	cbz	r3, 800a2bc <__sinit+0x14>
 800a2b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a2b8:	f7ff bff0 	b.w	800a29c <__sinit_lock_release>
 800a2bc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800a2c0:	6523      	str	r3, [r4, #80]	; 0x50
 800a2c2:	4b13      	ldr	r3, [pc, #76]	; (800a310 <__sinit+0x68>)
 800a2c4:	4a13      	ldr	r2, [pc, #76]	; (800a314 <__sinit+0x6c>)
 800a2c6:	681b      	ldr	r3, [r3, #0]
 800a2c8:	62a2      	str	r2, [r4, #40]	; 0x28
 800a2ca:	42a3      	cmp	r3, r4
 800a2cc:	bf04      	itt	eq
 800a2ce:	2301      	moveq	r3, #1
 800a2d0:	61a3      	streq	r3, [r4, #24]
 800a2d2:	4620      	mov	r0, r4
 800a2d4:	f000 f820 	bl	800a318 <__sfp>
 800a2d8:	6060      	str	r0, [r4, #4]
 800a2da:	4620      	mov	r0, r4
 800a2dc:	f000 f81c 	bl	800a318 <__sfp>
 800a2e0:	60a0      	str	r0, [r4, #8]
 800a2e2:	4620      	mov	r0, r4
 800a2e4:	f000 f818 	bl	800a318 <__sfp>
 800a2e8:	2200      	movs	r2, #0
 800a2ea:	60e0      	str	r0, [r4, #12]
 800a2ec:	2104      	movs	r1, #4
 800a2ee:	6860      	ldr	r0, [r4, #4]
 800a2f0:	f7ff ff82 	bl	800a1f8 <std>
 800a2f4:	68a0      	ldr	r0, [r4, #8]
 800a2f6:	2201      	movs	r2, #1
 800a2f8:	2109      	movs	r1, #9
 800a2fa:	f7ff ff7d 	bl	800a1f8 <std>
 800a2fe:	68e0      	ldr	r0, [r4, #12]
 800a300:	2202      	movs	r2, #2
 800a302:	2112      	movs	r1, #18
 800a304:	f7ff ff78 	bl	800a1f8 <std>
 800a308:	2301      	movs	r3, #1
 800a30a:	61a3      	str	r3, [r4, #24]
 800a30c:	e7d2      	b.n	800a2b4 <__sinit+0xc>
 800a30e:	bf00      	nop
 800a310:	0800a7ec 	.word	0x0800a7ec
 800a314:	0800a241 	.word	0x0800a241

0800a318 <__sfp>:
 800a318:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a31a:	4607      	mov	r7, r0
 800a31c:	f7ff ffac 	bl	800a278 <__sfp_lock_acquire>
 800a320:	4b1e      	ldr	r3, [pc, #120]	; (800a39c <__sfp+0x84>)
 800a322:	681e      	ldr	r6, [r3, #0]
 800a324:	69b3      	ldr	r3, [r6, #24]
 800a326:	b913      	cbnz	r3, 800a32e <__sfp+0x16>
 800a328:	4630      	mov	r0, r6
 800a32a:	f7ff ffbd 	bl	800a2a8 <__sinit>
 800a32e:	3648      	adds	r6, #72	; 0x48
 800a330:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800a334:	3b01      	subs	r3, #1
 800a336:	d503      	bpl.n	800a340 <__sfp+0x28>
 800a338:	6833      	ldr	r3, [r6, #0]
 800a33a:	b30b      	cbz	r3, 800a380 <__sfp+0x68>
 800a33c:	6836      	ldr	r6, [r6, #0]
 800a33e:	e7f7      	b.n	800a330 <__sfp+0x18>
 800a340:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800a344:	b9d5      	cbnz	r5, 800a37c <__sfp+0x64>
 800a346:	4b16      	ldr	r3, [pc, #88]	; (800a3a0 <__sfp+0x88>)
 800a348:	60e3      	str	r3, [r4, #12]
 800a34a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a34e:	6665      	str	r5, [r4, #100]	; 0x64
 800a350:	f000 f847 	bl	800a3e2 <__retarget_lock_init_recursive>
 800a354:	f7ff ff96 	bl	800a284 <__sfp_lock_release>
 800a358:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800a35c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800a360:	6025      	str	r5, [r4, #0]
 800a362:	61a5      	str	r5, [r4, #24]
 800a364:	2208      	movs	r2, #8
 800a366:	4629      	mov	r1, r5
 800a368:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a36c:	f7ff fdb4 	bl	8009ed8 <memset>
 800a370:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a374:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a378:	4620      	mov	r0, r4
 800a37a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a37c:	3468      	adds	r4, #104	; 0x68
 800a37e:	e7d9      	b.n	800a334 <__sfp+0x1c>
 800a380:	2104      	movs	r1, #4
 800a382:	4638      	mov	r0, r7
 800a384:	f7ff ff62 	bl	800a24c <__sfmoreglue>
 800a388:	4604      	mov	r4, r0
 800a38a:	6030      	str	r0, [r6, #0]
 800a38c:	2800      	cmp	r0, #0
 800a38e:	d1d5      	bne.n	800a33c <__sfp+0x24>
 800a390:	f7ff ff78 	bl	800a284 <__sfp_lock_release>
 800a394:	230c      	movs	r3, #12
 800a396:	603b      	str	r3, [r7, #0]
 800a398:	e7ee      	b.n	800a378 <__sfp+0x60>
 800a39a:	bf00      	nop
 800a39c:	0800a7ec 	.word	0x0800a7ec
 800a3a0:	ffff0001 	.word	0xffff0001

0800a3a4 <_fwalk_reent>:
 800a3a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a3a8:	4606      	mov	r6, r0
 800a3aa:	4688      	mov	r8, r1
 800a3ac:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a3b0:	2700      	movs	r7, #0
 800a3b2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a3b6:	f1b9 0901 	subs.w	r9, r9, #1
 800a3ba:	d505      	bpl.n	800a3c8 <_fwalk_reent+0x24>
 800a3bc:	6824      	ldr	r4, [r4, #0]
 800a3be:	2c00      	cmp	r4, #0
 800a3c0:	d1f7      	bne.n	800a3b2 <_fwalk_reent+0xe>
 800a3c2:	4638      	mov	r0, r7
 800a3c4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a3c8:	89ab      	ldrh	r3, [r5, #12]
 800a3ca:	2b01      	cmp	r3, #1
 800a3cc:	d907      	bls.n	800a3de <_fwalk_reent+0x3a>
 800a3ce:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a3d2:	3301      	adds	r3, #1
 800a3d4:	d003      	beq.n	800a3de <_fwalk_reent+0x3a>
 800a3d6:	4629      	mov	r1, r5
 800a3d8:	4630      	mov	r0, r6
 800a3da:	47c0      	blx	r8
 800a3dc:	4307      	orrs	r7, r0
 800a3de:	3568      	adds	r5, #104	; 0x68
 800a3e0:	e7e9      	b.n	800a3b6 <_fwalk_reent+0x12>

0800a3e2 <__retarget_lock_init_recursive>:
 800a3e2:	4770      	bx	lr

0800a3e4 <__retarget_lock_acquire_recursive>:
 800a3e4:	4770      	bx	lr

0800a3e6 <__retarget_lock_release_recursive>:
 800a3e6:	4770      	bx	lr

0800a3e8 <__swhatbuf_r>:
 800a3e8:	b570      	push	{r4, r5, r6, lr}
 800a3ea:	460e      	mov	r6, r1
 800a3ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a3f0:	2900      	cmp	r1, #0
 800a3f2:	b096      	sub	sp, #88	; 0x58
 800a3f4:	4614      	mov	r4, r2
 800a3f6:	461d      	mov	r5, r3
 800a3f8:	da08      	bge.n	800a40c <__swhatbuf_r+0x24>
 800a3fa:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800a3fe:	2200      	movs	r2, #0
 800a400:	602a      	str	r2, [r5, #0]
 800a402:	061a      	lsls	r2, r3, #24
 800a404:	d410      	bmi.n	800a428 <__swhatbuf_r+0x40>
 800a406:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a40a:	e00e      	b.n	800a42a <__swhatbuf_r+0x42>
 800a40c:	466a      	mov	r2, sp
 800a40e:	f000 f96f 	bl	800a6f0 <_fstat_r>
 800a412:	2800      	cmp	r0, #0
 800a414:	dbf1      	blt.n	800a3fa <__swhatbuf_r+0x12>
 800a416:	9a01      	ldr	r2, [sp, #4]
 800a418:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a41c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a420:	425a      	negs	r2, r3
 800a422:	415a      	adcs	r2, r3
 800a424:	602a      	str	r2, [r5, #0]
 800a426:	e7ee      	b.n	800a406 <__swhatbuf_r+0x1e>
 800a428:	2340      	movs	r3, #64	; 0x40
 800a42a:	2000      	movs	r0, #0
 800a42c:	6023      	str	r3, [r4, #0]
 800a42e:	b016      	add	sp, #88	; 0x58
 800a430:	bd70      	pop	{r4, r5, r6, pc}
	...

0800a434 <malloc>:
 800a434:	4b02      	ldr	r3, [pc, #8]	; (800a440 <malloc+0xc>)
 800a436:	4601      	mov	r1, r0
 800a438:	6818      	ldr	r0, [r3, #0]
 800a43a:	f000 b86f 	b.w	800a51c <_malloc_r>
 800a43e:	bf00      	nop
 800a440:	2000010c 	.word	0x2000010c

0800a444 <_free_r>:
 800a444:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a446:	2900      	cmp	r1, #0
 800a448:	d044      	beq.n	800a4d4 <_free_r+0x90>
 800a44a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a44e:	9001      	str	r0, [sp, #4]
 800a450:	2b00      	cmp	r3, #0
 800a452:	f1a1 0404 	sub.w	r4, r1, #4
 800a456:	bfb8      	it	lt
 800a458:	18e4      	addlt	r4, r4, r3
 800a45a:	f000 f96d 	bl	800a738 <__malloc_lock>
 800a45e:	4a1e      	ldr	r2, [pc, #120]	; (800a4d8 <_free_r+0x94>)
 800a460:	9801      	ldr	r0, [sp, #4]
 800a462:	6813      	ldr	r3, [r2, #0]
 800a464:	b933      	cbnz	r3, 800a474 <_free_r+0x30>
 800a466:	6063      	str	r3, [r4, #4]
 800a468:	6014      	str	r4, [r2, #0]
 800a46a:	b003      	add	sp, #12
 800a46c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a470:	f000 b968 	b.w	800a744 <__malloc_unlock>
 800a474:	42a3      	cmp	r3, r4
 800a476:	d908      	bls.n	800a48a <_free_r+0x46>
 800a478:	6825      	ldr	r5, [r4, #0]
 800a47a:	1961      	adds	r1, r4, r5
 800a47c:	428b      	cmp	r3, r1
 800a47e:	bf01      	itttt	eq
 800a480:	6819      	ldreq	r1, [r3, #0]
 800a482:	685b      	ldreq	r3, [r3, #4]
 800a484:	1949      	addeq	r1, r1, r5
 800a486:	6021      	streq	r1, [r4, #0]
 800a488:	e7ed      	b.n	800a466 <_free_r+0x22>
 800a48a:	461a      	mov	r2, r3
 800a48c:	685b      	ldr	r3, [r3, #4]
 800a48e:	b10b      	cbz	r3, 800a494 <_free_r+0x50>
 800a490:	42a3      	cmp	r3, r4
 800a492:	d9fa      	bls.n	800a48a <_free_r+0x46>
 800a494:	6811      	ldr	r1, [r2, #0]
 800a496:	1855      	adds	r5, r2, r1
 800a498:	42a5      	cmp	r5, r4
 800a49a:	d10b      	bne.n	800a4b4 <_free_r+0x70>
 800a49c:	6824      	ldr	r4, [r4, #0]
 800a49e:	4421      	add	r1, r4
 800a4a0:	1854      	adds	r4, r2, r1
 800a4a2:	42a3      	cmp	r3, r4
 800a4a4:	6011      	str	r1, [r2, #0]
 800a4a6:	d1e0      	bne.n	800a46a <_free_r+0x26>
 800a4a8:	681c      	ldr	r4, [r3, #0]
 800a4aa:	685b      	ldr	r3, [r3, #4]
 800a4ac:	6053      	str	r3, [r2, #4]
 800a4ae:	4421      	add	r1, r4
 800a4b0:	6011      	str	r1, [r2, #0]
 800a4b2:	e7da      	b.n	800a46a <_free_r+0x26>
 800a4b4:	d902      	bls.n	800a4bc <_free_r+0x78>
 800a4b6:	230c      	movs	r3, #12
 800a4b8:	6003      	str	r3, [r0, #0]
 800a4ba:	e7d6      	b.n	800a46a <_free_r+0x26>
 800a4bc:	6825      	ldr	r5, [r4, #0]
 800a4be:	1961      	adds	r1, r4, r5
 800a4c0:	428b      	cmp	r3, r1
 800a4c2:	bf04      	itt	eq
 800a4c4:	6819      	ldreq	r1, [r3, #0]
 800a4c6:	685b      	ldreq	r3, [r3, #4]
 800a4c8:	6063      	str	r3, [r4, #4]
 800a4ca:	bf04      	itt	eq
 800a4cc:	1949      	addeq	r1, r1, r5
 800a4ce:	6021      	streq	r1, [r4, #0]
 800a4d0:	6054      	str	r4, [r2, #4]
 800a4d2:	e7ca      	b.n	800a46a <_free_r+0x26>
 800a4d4:	b003      	add	sp, #12
 800a4d6:	bd30      	pop	{r4, r5, pc}
 800a4d8:	200020cc 	.word	0x200020cc

0800a4dc <sbrk_aligned>:
 800a4dc:	b570      	push	{r4, r5, r6, lr}
 800a4de:	4e0e      	ldr	r6, [pc, #56]	; (800a518 <sbrk_aligned+0x3c>)
 800a4e0:	460c      	mov	r4, r1
 800a4e2:	6831      	ldr	r1, [r6, #0]
 800a4e4:	4605      	mov	r5, r0
 800a4e6:	b911      	cbnz	r1, 800a4ee <sbrk_aligned+0x12>
 800a4e8:	f000 f88c 	bl	800a604 <_sbrk_r>
 800a4ec:	6030      	str	r0, [r6, #0]
 800a4ee:	4621      	mov	r1, r4
 800a4f0:	4628      	mov	r0, r5
 800a4f2:	f000 f887 	bl	800a604 <_sbrk_r>
 800a4f6:	1c43      	adds	r3, r0, #1
 800a4f8:	d00a      	beq.n	800a510 <sbrk_aligned+0x34>
 800a4fa:	1cc4      	adds	r4, r0, #3
 800a4fc:	f024 0403 	bic.w	r4, r4, #3
 800a500:	42a0      	cmp	r0, r4
 800a502:	d007      	beq.n	800a514 <sbrk_aligned+0x38>
 800a504:	1a21      	subs	r1, r4, r0
 800a506:	4628      	mov	r0, r5
 800a508:	f000 f87c 	bl	800a604 <_sbrk_r>
 800a50c:	3001      	adds	r0, #1
 800a50e:	d101      	bne.n	800a514 <sbrk_aligned+0x38>
 800a510:	f04f 34ff 	mov.w	r4, #4294967295
 800a514:	4620      	mov	r0, r4
 800a516:	bd70      	pop	{r4, r5, r6, pc}
 800a518:	200020d0 	.word	0x200020d0

0800a51c <_malloc_r>:
 800a51c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a520:	1ccd      	adds	r5, r1, #3
 800a522:	f025 0503 	bic.w	r5, r5, #3
 800a526:	3508      	adds	r5, #8
 800a528:	2d0c      	cmp	r5, #12
 800a52a:	bf38      	it	cc
 800a52c:	250c      	movcc	r5, #12
 800a52e:	2d00      	cmp	r5, #0
 800a530:	4607      	mov	r7, r0
 800a532:	db01      	blt.n	800a538 <_malloc_r+0x1c>
 800a534:	42a9      	cmp	r1, r5
 800a536:	d905      	bls.n	800a544 <_malloc_r+0x28>
 800a538:	230c      	movs	r3, #12
 800a53a:	603b      	str	r3, [r7, #0]
 800a53c:	2600      	movs	r6, #0
 800a53e:	4630      	mov	r0, r6
 800a540:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a544:	4e2e      	ldr	r6, [pc, #184]	; (800a600 <_malloc_r+0xe4>)
 800a546:	f000 f8f7 	bl	800a738 <__malloc_lock>
 800a54a:	6833      	ldr	r3, [r6, #0]
 800a54c:	461c      	mov	r4, r3
 800a54e:	bb34      	cbnz	r4, 800a59e <_malloc_r+0x82>
 800a550:	4629      	mov	r1, r5
 800a552:	4638      	mov	r0, r7
 800a554:	f7ff ffc2 	bl	800a4dc <sbrk_aligned>
 800a558:	1c43      	adds	r3, r0, #1
 800a55a:	4604      	mov	r4, r0
 800a55c:	d14d      	bne.n	800a5fa <_malloc_r+0xde>
 800a55e:	6834      	ldr	r4, [r6, #0]
 800a560:	4626      	mov	r6, r4
 800a562:	2e00      	cmp	r6, #0
 800a564:	d140      	bne.n	800a5e8 <_malloc_r+0xcc>
 800a566:	6823      	ldr	r3, [r4, #0]
 800a568:	4631      	mov	r1, r6
 800a56a:	4638      	mov	r0, r7
 800a56c:	eb04 0803 	add.w	r8, r4, r3
 800a570:	f000 f848 	bl	800a604 <_sbrk_r>
 800a574:	4580      	cmp	r8, r0
 800a576:	d13a      	bne.n	800a5ee <_malloc_r+0xd2>
 800a578:	6821      	ldr	r1, [r4, #0]
 800a57a:	3503      	adds	r5, #3
 800a57c:	1a6d      	subs	r5, r5, r1
 800a57e:	f025 0503 	bic.w	r5, r5, #3
 800a582:	3508      	adds	r5, #8
 800a584:	2d0c      	cmp	r5, #12
 800a586:	bf38      	it	cc
 800a588:	250c      	movcc	r5, #12
 800a58a:	4629      	mov	r1, r5
 800a58c:	4638      	mov	r0, r7
 800a58e:	f7ff ffa5 	bl	800a4dc <sbrk_aligned>
 800a592:	3001      	adds	r0, #1
 800a594:	d02b      	beq.n	800a5ee <_malloc_r+0xd2>
 800a596:	6823      	ldr	r3, [r4, #0]
 800a598:	442b      	add	r3, r5
 800a59a:	6023      	str	r3, [r4, #0]
 800a59c:	e00e      	b.n	800a5bc <_malloc_r+0xa0>
 800a59e:	6822      	ldr	r2, [r4, #0]
 800a5a0:	1b52      	subs	r2, r2, r5
 800a5a2:	d41e      	bmi.n	800a5e2 <_malloc_r+0xc6>
 800a5a4:	2a0b      	cmp	r2, #11
 800a5a6:	d916      	bls.n	800a5d6 <_malloc_r+0xba>
 800a5a8:	1961      	adds	r1, r4, r5
 800a5aa:	42a3      	cmp	r3, r4
 800a5ac:	6025      	str	r5, [r4, #0]
 800a5ae:	bf18      	it	ne
 800a5b0:	6059      	strne	r1, [r3, #4]
 800a5b2:	6863      	ldr	r3, [r4, #4]
 800a5b4:	bf08      	it	eq
 800a5b6:	6031      	streq	r1, [r6, #0]
 800a5b8:	5162      	str	r2, [r4, r5]
 800a5ba:	604b      	str	r3, [r1, #4]
 800a5bc:	4638      	mov	r0, r7
 800a5be:	f104 060b 	add.w	r6, r4, #11
 800a5c2:	f000 f8bf 	bl	800a744 <__malloc_unlock>
 800a5c6:	f026 0607 	bic.w	r6, r6, #7
 800a5ca:	1d23      	adds	r3, r4, #4
 800a5cc:	1af2      	subs	r2, r6, r3
 800a5ce:	d0b6      	beq.n	800a53e <_malloc_r+0x22>
 800a5d0:	1b9b      	subs	r3, r3, r6
 800a5d2:	50a3      	str	r3, [r4, r2]
 800a5d4:	e7b3      	b.n	800a53e <_malloc_r+0x22>
 800a5d6:	6862      	ldr	r2, [r4, #4]
 800a5d8:	42a3      	cmp	r3, r4
 800a5da:	bf0c      	ite	eq
 800a5dc:	6032      	streq	r2, [r6, #0]
 800a5de:	605a      	strne	r2, [r3, #4]
 800a5e0:	e7ec      	b.n	800a5bc <_malloc_r+0xa0>
 800a5e2:	4623      	mov	r3, r4
 800a5e4:	6864      	ldr	r4, [r4, #4]
 800a5e6:	e7b2      	b.n	800a54e <_malloc_r+0x32>
 800a5e8:	4634      	mov	r4, r6
 800a5ea:	6876      	ldr	r6, [r6, #4]
 800a5ec:	e7b9      	b.n	800a562 <_malloc_r+0x46>
 800a5ee:	230c      	movs	r3, #12
 800a5f0:	603b      	str	r3, [r7, #0]
 800a5f2:	4638      	mov	r0, r7
 800a5f4:	f000 f8a6 	bl	800a744 <__malloc_unlock>
 800a5f8:	e7a1      	b.n	800a53e <_malloc_r+0x22>
 800a5fa:	6025      	str	r5, [r4, #0]
 800a5fc:	e7de      	b.n	800a5bc <_malloc_r+0xa0>
 800a5fe:	bf00      	nop
 800a600:	200020cc 	.word	0x200020cc

0800a604 <_sbrk_r>:
 800a604:	b538      	push	{r3, r4, r5, lr}
 800a606:	4d06      	ldr	r5, [pc, #24]	; (800a620 <_sbrk_r+0x1c>)
 800a608:	2300      	movs	r3, #0
 800a60a:	4604      	mov	r4, r0
 800a60c:	4608      	mov	r0, r1
 800a60e:	602b      	str	r3, [r5, #0]
 800a610:	f7f7 f8a6 	bl	8001760 <_sbrk>
 800a614:	1c43      	adds	r3, r0, #1
 800a616:	d102      	bne.n	800a61e <_sbrk_r+0x1a>
 800a618:	682b      	ldr	r3, [r5, #0]
 800a61a:	b103      	cbz	r3, 800a61e <_sbrk_r+0x1a>
 800a61c:	6023      	str	r3, [r4, #0]
 800a61e:	bd38      	pop	{r3, r4, r5, pc}
 800a620:	200020d4 	.word	0x200020d4

0800a624 <__sread>:
 800a624:	b510      	push	{r4, lr}
 800a626:	460c      	mov	r4, r1
 800a628:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a62c:	f000 f890 	bl	800a750 <_read_r>
 800a630:	2800      	cmp	r0, #0
 800a632:	bfab      	itete	ge
 800a634:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a636:	89a3      	ldrhlt	r3, [r4, #12]
 800a638:	181b      	addge	r3, r3, r0
 800a63a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a63e:	bfac      	ite	ge
 800a640:	6563      	strge	r3, [r4, #84]	; 0x54
 800a642:	81a3      	strhlt	r3, [r4, #12]
 800a644:	bd10      	pop	{r4, pc}

0800a646 <__swrite>:
 800a646:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a64a:	461f      	mov	r7, r3
 800a64c:	898b      	ldrh	r3, [r1, #12]
 800a64e:	05db      	lsls	r3, r3, #23
 800a650:	4605      	mov	r5, r0
 800a652:	460c      	mov	r4, r1
 800a654:	4616      	mov	r6, r2
 800a656:	d505      	bpl.n	800a664 <__swrite+0x1e>
 800a658:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a65c:	2302      	movs	r3, #2
 800a65e:	2200      	movs	r2, #0
 800a660:	f000 f858 	bl	800a714 <_lseek_r>
 800a664:	89a3      	ldrh	r3, [r4, #12]
 800a666:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a66a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a66e:	81a3      	strh	r3, [r4, #12]
 800a670:	4632      	mov	r2, r6
 800a672:	463b      	mov	r3, r7
 800a674:	4628      	mov	r0, r5
 800a676:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a67a:	f000 b817 	b.w	800a6ac <_write_r>

0800a67e <__sseek>:
 800a67e:	b510      	push	{r4, lr}
 800a680:	460c      	mov	r4, r1
 800a682:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a686:	f000 f845 	bl	800a714 <_lseek_r>
 800a68a:	1c43      	adds	r3, r0, #1
 800a68c:	89a3      	ldrh	r3, [r4, #12]
 800a68e:	bf15      	itete	ne
 800a690:	6560      	strne	r0, [r4, #84]	; 0x54
 800a692:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a696:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a69a:	81a3      	strheq	r3, [r4, #12]
 800a69c:	bf18      	it	ne
 800a69e:	81a3      	strhne	r3, [r4, #12]
 800a6a0:	bd10      	pop	{r4, pc}

0800a6a2 <__sclose>:
 800a6a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a6a6:	f000 b813 	b.w	800a6d0 <_close_r>
	...

0800a6ac <_write_r>:
 800a6ac:	b538      	push	{r3, r4, r5, lr}
 800a6ae:	4d07      	ldr	r5, [pc, #28]	; (800a6cc <_write_r+0x20>)
 800a6b0:	4604      	mov	r4, r0
 800a6b2:	4608      	mov	r0, r1
 800a6b4:	4611      	mov	r1, r2
 800a6b6:	2200      	movs	r2, #0
 800a6b8:	602a      	str	r2, [r5, #0]
 800a6ba:	461a      	mov	r2, r3
 800a6bc:	f7f6 fe58 	bl	8001370 <_write>
 800a6c0:	1c43      	adds	r3, r0, #1
 800a6c2:	d102      	bne.n	800a6ca <_write_r+0x1e>
 800a6c4:	682b      	ldr	r3, [r5, #0]
 800a6c6:	b103      	cbz	r3, 800a6ca <_write_r+0x1e>
 800a6c8:	6023      	str	r3, [r4, #0]
 800a6ca:	bd38      	pop	{r3, r4, r5, pc}
 800a6cc:	200020d4 	.word	0x200020d4

0800a6d0 <_close_r>:
 800a6d0:	b538      	push	{r3, r4, r5, lr}
 800a6d2:	4d06      	ldr	r5, [pc, #24]	; (800a6ec <_close_r+0x1c>)
 800a6d4:	2300      	movs	r3, #0
 800a6d6:	4604      	mov	r4, r0
 800a6d8:	4608      	mov	r0, r1
 800a6da:	602b      	str	r3, [r5, #0]
 800a6dc:	f7f6 fe74 	bl	80013c8 <_close>
 800a6e0:	1c43      	adds	r3, r0, #1
 800a6e2:	d102      	bne.n	800a6ea <_close_r+0x1a>
 800a6e4:	682b      	ldr	r3, [r5, #0]
 800a6e6:	b103      	cbz	r3, 800a6ea <_close_r+0x1a>
 800a6e8:	6023      	str	r3, [r4, #0]
 800a6ea:	bd38      	pop	{r3, r4, r5, pc}
 800a6ec:	200020d4 	.word	0x200020d4

0800a6f0 <_fstat_r>:
 800a6f0:	b538      	push	{r3, r4, r5, lr}
 800a6f2:	4d07      	ldr	r5, [pc, #28]	; (800a710 <_fstat_r+0x20>)
 800a6f4:	2300      	movs	r3, #0
 800a6f6:	4604      	mov	r4, r0
 800a6f8:	4608      	mov	r0, r1
 800a6fa:	4611      	mov	r1, r2
 800a6fc:	602b      	str	r3, [r5, #0]
 800a6fe:	f7f6 feb3 	bl	8001468 <_fstat>
 800a702:	1c43      	adds	r3, r0, #1
 800a704:	d102      	bne.n	800a70c <_fstat_r+0x1c>
 800a706:	682b      	ldr	r3, [r5, #0]
 800a708:	b103      	cbz	r3, 800a70c <_fstat_r+0x1c>
 800a70a:	6023      	str	r3, [r4, #0]
 800a70c:	bd38      	pop	{r3, r4, r5, pc}
 800a70e:	bf00      	nop
 800a710:	200020d4 	.word	0x200020d4

0800a714 <_lseek_r>:
 800a714:	b538      	push	{r3, r4, r5, lr}
 800a716:	4d07      	ldr	r5, [pc, #28]	; (800a734 <_lseek_r+0x20>)
 800a718:	4604      	mov	r4, r0
 800a71a:	4608      	mov	r0, r1
 800a71c:	4611      	mov	r1, r2
 800a71e:	2200      	movs	r2, #0
 800a720:	602a      	str	r2, [r5, #0]
 800a722:	461a      	mov	r2, r3
 800a724:	f7f6 fe67 	bl	80013f6 <_lseek>
 800a728:	1c43      	adds	r3, r0, #1
 800a72a:	d102      	bne.n	800a732 <_lseek_r+0x1e>
 800a72c:	682b      	ldr	r3, [r5, #0]
 800a72e:	b103      	cbz	r3, 800a732 <_lseek_r+0x1e>
 800a730:	6023      	str	r3, [r4, #0]
 800a732:	bd38      	pop	{r3, r4, r5, pc}
 800a734:	200020d4 	.word	0x200020d4

0800a738 <__malloc_lock>:
 800a738:	4801      	ldr	r0, [pc, #4]	; (800a740 <__malloc_lock+0x8>)
 800a73a:	f7ff be53 	b.w	800a3e4 <__retarget_lock_acquire_recursive>
 800a73e:	bf00      	nop
 800a740:	200020c8 	.word	0x200020c8

0800a744 <__malloc_unlock>:
 800a744:	4801      	ldr	r0, [pc, #4]	; (800a74c <__malloc_unlock+0x8>)
 800a746:	f7ff be4e 	b.w	800a3e6 <__retarget_lock_release_recursive>
 800a74a:	bf00      	nop
 800a74c:	200020c8 	.word	0x200020c8

0800a750 <_read_r>:
 800a750:	b538      	push	{r3, r4, r5, lr}
 800a752:	4d07      	ldr	r5, [pc, #28]	; (800a770 <_read_r+0x20>)
 800a754:	4604      	mov	r4, r0
 800a756:	4608      	mov	r0, r1
 800a758:	4611      	mov	r1, r2
 800a75a:	2200      	movs	r2, #0
 800a75c:	602a      	str	r2, [r5, #0]
 800a75e:	461a      	mov	r2, r3
 800a760:	f7f6 fe5a 	bl	8001418 <_read>
 800a764:	1c43      	adds	r3, r0, #1
 800a766:	d102      	bne.n	800a76e <_read_r+0x1e>
 800a768:	682b      	ldr	r3, [r5, #0]
 800a76a:	b103      	cbz	r3, 800a76e <_read_r+0x1e>
 800a76c:	6023      	str	r3, [r4, #0]
 800a76e:	bd38      	pop	{r3, r4, r5, pc}
 800a770:	200020d4 	.word	0x200020d4

0800a774 <_init>:
 800a774:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a776:	bf00      	nop
 800a778:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a77a:	bc08      	pop	{r3}
 800a77c:	469e      	mov	lr, r3
 800a77e:	4770      	bx	lr

0800a780 <_fini>:
 800a780:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a782:	bf00      	nop
 800a784:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a786:	bc08      	pop	{r3}
 800a788:	469e      	mov	lr, r3
 800a78a:	4770      	bx	lr
