
RFM95_Transparent_Serial.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009ed4  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c4  0800a05c  0800a05c  0001a05c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a120  0800a120  00020168  2**0
                  CONTENTS
  4 .ARM          00000008  0800a120  0800a120  0001a120  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a128  0800a128  00020168  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a128  0800a128  0001a128  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a12c  0800a12c  0001a12c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000168  20000000  0800a130  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020168  2**0
                  CONTENTS
 10 .bss          00001d50  20000168  20000168  00020168  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20001eb8  20001eb8  00020168  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020168  2**0
                  CONTENTS, READONLY
 13 .debug_info   00016c0e  00000000  00000000  00020198  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003747  00000000  00000000  00036da6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001108  00000000  00000000  0003a4f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000fa0  00000000  00000000  0003b5f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022f3e  00000000  00000000  0003c598  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000161f9  00000000  00000000  0005f4d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000bfd25  00000000  00000000  000756cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001353f4  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004b84  00000000  00000000  00135444  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000168 	.word	0x20000168
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800a044 	.word	0x0800a044

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000016c 	.word	0x2000016c
 80001c4:	0800a044 	.word	0x0800a044

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b974 	b.w	80004c8 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468e      	mov	lr, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14d      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000206:	428a      	cmp	r2, r1
 8000208:	4694      	mov	ip, r2
 800020a:	d969      	bls.n	80002e0 <__udivmoddi4+0xe8>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b152      	cbz	r2, 8000228 <__udivmoddi4+0x30>
 8000212:	fa01 f302 	lsl.w	r3, r1, r2
 8000216:	f1c2 0120 	rsb	r1, r2, #32
 800021a:	fa20 f101 	lsr.w	r1, r0, r1
 800021e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000222:	ea41 0e03 	orr.w	lr, r1, r3
 8000226:	4094      	lsls	r4, r2
 8000228:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800022c:	0c21      	lsrs	r1, r4, #16
 800022e:	fbbe f6f8 	udiv	r6, lr, r8
 8000232:	fa1f f78c 	uxth.w	r7, ip
 8000236:	fb08 e316 	mls	r3, r8, r6, lr
 800023a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800023e:	fb06 f107 	mul.w	r1, r6, r7
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f106 30ff 	add.w	r0, r6, #4294967295
 800024e:	f080 811f 	bcs.w	8000490 <__udivmoddi4+0x298>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 811c 	bls.w	8000490 <__udivmoddi4+0x298>
 8000258:	3e02      	subs	r6, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0f8 	udiv	r0, r3, r8
 8000264:	fb08 3310 	mls	r3, r8, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 f707 	mul.w	r7, r0, r7
 8000270:	42a7      	cmp	r7, r4
 8000272:	d90a      	bls.n	800028a <__udivmoddi4+0x92>
 8000274:	eb1c 0404 	adds.w	r4, ip, r4
 8000278:	f100 33ff 	add.w	r3, r0, #4294967295
 800027c:	f080 810a 	bcs.w	8000494 <__udivmoddi4+0x29c>
 8000280:	42a7      	cmp	r7, r4
 8000282:	f240 8107 	bls.w	8000494 <__udivmoddi4+0x29c>
 8000286:	4464      	add	r4, ip
 8000288:	3802      	subs	r0, #2
 800028a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800028e:	1be4      	subs	r4, r4, r7
 8000290:	2600      	movs	r6, #0
 8000292:	b11d      	cbz	r5, 800029c <__udivmoddi4+0xa4>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c5 4300 	strd	r4, r3, [r5]
 800029c:	4631      	mov	r1, r6
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d909      	bls.n	80002ba <__udivmoddi4+0xc2>
 80002a6:	2d00      	cmp	r5, #0
 80002a8:	f000 80ef 	beq.w	800048a <__udivmoddi4+0x292>
 80002ac:	2600      	movs	r6, #0
 80002ae:	e9c5 0100 	strd	r0, r1, [r5]
 80002b2:	4630      	mov	r0, r6
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	fab3 f683 	clz	r6, r3
 80002be:	2e00      	cmp	r6, #0
 80002c0:	d14a      	bne.n	8000358 <__udivmoddi4+0x160>
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xd4>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 80f9 	bhi.w	80004be <__udivmoddi4+0x2c6>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb61 0303 	sbc.w	r3, r1, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	469e      	mov	lr, r3
 80002d6:	2d00      	cmp	r5, #0
 80002d8:	d0e0      	beq.n	800029c <__udivmoddi4+0xa4>
 80002da:	e9c5 4e00 	strd	r4, lr, [r5]
 80002de:	e7dd      	b.n	800029c <__udivmoddi4+0xa4>
 80002e0:	b902      	cbnz	r2, 80002e4 <__udivmoddi4+0xec>
 80002e2:	deff      	udf	#255	; 0xff
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	2a00      	cmp	r2, #0
 80002ea:	f040 8092 	bne.w	8000412 <__udivmoddi4+0x21a>
 80002ee:	eba1 010c 	sub.w	r1, r1, ip
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2601      	movs	r6, #1
 80002fc:	0c20      	lsrs	r0, r4, #16
 80002fe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000302:	fb07 1113 	mls	r1, r7, r3, r1
 8000306:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800030a:	fb0e f003 	mul.w	r0, lr, r3
 800030e:	4288      	cmp	r0, r1
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x12c>
 8000312:	eb1c 0101 	adds.w	r1, ip, r1
 8000316:	f103 38ff 	add.w	r8, r3, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x12a>
 800031c:	4288      	cmp	r0, r1
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2c0>
 8000322:	4643      	mov	r3, r8
 8000324:	1a09      	subs	r1, r1, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb1 f0f7 	udiv	r0, r1, r7
 800032c:	fb07 1110 	mls	r1, r7, r0, r1
 8000330:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x156>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 31ff 	add.w	r1, r0, #4294967295
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x154>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 800034c:	4608      	mov	r0, r1
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000356:	e79c      	b.n	8000292 <__udivmoddi4+0x9a>
 8000358:	f1c6 0720 	rsb	r7, r6, #32
 800035c:	40b3      	lsls	r3, r6
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa20 f407 	lsr.w	r4, r0, r7
 800036a:	fa01 f306 	lsl.w	r3, r1, r6
 800036e:	431c      	orrs	r4, r3
 8000370:	40f9      	lsrs	r1, r7
 8000372:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000376:	fa00 f306 	lsl.w	r3, r0, r6
 800037a:	fbb1 f8f9 	udiv	r8, r1, r9
 800037e:	0c20      	lsrs	r0, r4, #16
 8000380:	fa1f fe8c 	uxth.w	lr, ip
 8000384:	fb09 1118 	mls	r1, r9, r8, r1
 8000388:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800038c:	fb08 f00e 	mul.w	r0, r8, lr
 8000390:	4288      	cmp	r0, r1
 8000392:	fa02 f206 	lsl.w	r2, r2, r6
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b8>
 8000398:	eb1c 0101 	adds.w	r1, ip, r1
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2bc>
 80003a4:	4288      	cmp	r0, r1
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2bc>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4461      	add	r1, ip
 80003b0:	1a09      	subs	r1, r1, r0
 80003b2:	b2a4      	uxth	r4, r4
 80003b4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003b8:	fb09 1110 	mls	r1, r9, r0, r1
 80003bc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c4:	458e      	cmp	lr, r1
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1e2>
 80003c8:	eb1c 0101 	adds.w	r1, ip, r1
 80003cc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2b4>
 80003d2:	458e      	cmp	lr, r1
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2b4>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4461      	add	r1, ip
 80003da:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003de:	fba0 9402 	umull	r9, r4, r0, r2
 80003e2:	eba1 010e 	sub.w	r1, r1, lr
 80003e6:	42a1      	cmp	r1, r4
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46a6      	mov	lr, r4
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x2a4>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x2a0>
 80003f0:	b15d      	cbz	r5, 800040a <__udivmoddi4+0x212>
 80003f2:	ebb3 0208 	subs.w	r2, r3, r8
 80003f6:	eb61 010e 	sbc.w	r1, r1, lr
 80003fa:	fa01 f707 	lsl.w	r7, r1, r7
 80003fe:	fa22 f306 	lsr.w	r3, r2, r6
 8000402:	40f1      	lsrs	r1, r6
 8000404:	431f      	orrs	r7, r3
 8000406:	e9c5 7100 	strd	r7, r1, [r5]
 800040a:	2600      	movs	r6, #0
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	f1c2 0320 	rsb	r3, r2, #32
 8000416:	40d8      	lsrs	r0, r3
 8000418:	fa0c fc02 	lsl.w	ip, ip, r2
 800041c:	fa21 f303 	lsr.w	r3, r1, r3
 8000420:	4091      	lsls	r1, r2
 8000422:	4301      	orrs	r1, r0
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000430:	fb07 3610 	mls	r6, r7, r0, r3
 8000434:	0c0b      	lsrs	r3, r1, #16
 8000436:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800043a:	fb00 f60e 	mul.w	r6, r0, lr
 800043e:	429e      	cmp	r6, r3
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x260>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 38ff 	add.w	r8, r0, #4294967295
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b8>
 8000450:	429e      	cmp	r6, r3
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b8>
 8000454:	3802      	subs	r0, #2
 8000456:	4463      	add	r3, ip
 8000458:	1b9b      	subs	r3, r3, r6
 800045a:	b289      	uxth	r1, r1
 800045c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000460:	fb07 3316 	mls	r3, r7, r6, r3
 8000464:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000468:	fb06 f30e 	mul.w	r3, r6, lr
 800046c:	428b      	cmp	r3, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x28a>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f106 38ff 	add.w	r8, r6, #4294967295
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 800047a:	428b      	cmp	r3, r1
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800047e:	3e02      	subs	r6, #2
 8000480:	4461      	add	r1, ip
 8000482:	1ac9      	subs	r1, r1, r3
 8000484:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0x104>
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e705      	b.n	800029c <__udivmoddi4+0xa4>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e3      	b.n	800025c <__udivmoddi4+0x64>
 8000494:	4618      	mov	r0, r3
 8000496:	e6f8      	b.n	800028a <__udivmoddi4+0x92>
 8000498:	454b      	cmp	r3, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f8>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f8>
 80004a8:	4646      	mov	r6, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x28a>
 80004ac:	4620      	mov	r0, r4
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1e2>
 80004b0:	4640      	mov	r0, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x260>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b8>
 80004b8:	3b02      	subs	r3, #2
 80004ba:	4461      	add	r1, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x12c>
 80004be:	4630      	mov	r0, r6
 80004c0:	e709      	b.n	80002d6 <__udivmoddi4+0xde>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x156>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <newLoRa>:
										  |    spreading factor = 7				       |
											|           bandwidth = 125 KHz        |
											| 		    coding rate = 4/5            |
											----------------------------------------
\* ----------------------------------------------------------------------------- */
LoRa newLoRa(){
 80004cc:	b4b0      	push	{r4, r5, r7}
 80004ce:	b08f      	sub	sp, #60	; 0x3c
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	6078      	str	r0, [r7, #4]
	LoRa new_LoRa;

	new_LoRa.frequency             = 433       ;
 80004d4:	f240 13b1 	movw	r3, #433	; 0x1b1
 80004d8:	62fb      	str	r3, [r7, #44]	; 0x2c
	new_LoRa.spredingFactor        = SF_7      ;
 80004da:	2307      	movs	r3, #7
 80004dc:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
	new_LoRa.bandWidth			   = BW_125KHz ;
 80004e0:	2307      	movs	r3, #7
 80004e2:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
	new_LoRa.crcRate               = CR_4_5    ;
 80004e6:	2301      	movs	r3, #1
 80004e8:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	new_LoRa.power				   = POWER_20db;
 80004ec:	23ff      	movs	r3, #255	; 0xff
 80004ee:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	new_LoRa.overCurrentProtection = 100       ;
 80004f2:	2364      	movs	r3, #100	; 0x64
 80004f4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	new_LoRa.preamble			   = 8         ;
 80004f8:	2308      	movs	r3, #8
 80004fa:	86bb      	strh	r3, [r7, #52]	; 0x34

	return new_LoRa;
 80004fc:	687b      	ldr	r3, [r7, #4]
 80004fe:	461d      	mov	r5, r3
 8000500:	f107 040c 	add.w	r4, r7, #12
 8000504:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000506:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000508:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800050a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800050c:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8000510:	e885 0007 	stmia.w	r5, {r0, r1, r2}
}
 8000514:	6878      	ldr	r0, [r7, #4]
 8000516:	373c      	adds	r7, #60	; 0x3c
 8000518:	46bd      	mov	sp, r7
 800051a:	bcb0      	pop	{r4, r5, r7}
 800051c:	4770      	bx	lr

0800051e <LoRa_reset>:
		description : reset module
		arguments   :
			LoRa* LoRa --> LoRa object handler
		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_reset(LoRa* _LoRa){
 800051e:	b580      	push	{r7, lr}
 8000520:	b082      	sub	sp, #8
 8000522:	af00      	add	r7, sp, #0
 8000524:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(_LoRa->reset_port, _LoRa->reset_pin, GPIO_PIN_RESET);
 8000526:	687b      	ldr	r3, [r7, #4]
 8000528:	6898      	ldr	r0, [r3, #8]
 800052a:	687b      	ldr	r3, [r7, #4]
 800052c:	899b      	ldrh	r3, [r3, #12]
 800052e:	2200      	movs	r2, #0
 8000530:	4619      	mov	r1, r3
 8000532:	f001 faef 	bl	8001b14 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000536:	2001      	movs	r0, #1
 8000538:	f000 ff88 	bl	800144c <HAL_Delay>
	HAL_GPIO_WritePin(_LoRa->reset_port, _LoRa->reset_pin, GPIO_PIN_SET);
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	6898      	ldr	r0, [r3, #8]
 8000540:	687b      	ldr	r3, [r7, #4]
 8000542:	899b      	ldrh	r3, [r3, #12]
 8000544:	2201      	movs	r2, #1
 8000546:	4619      	mov	r1, r3
 8000548:	f001 fae4 	bl	8001b14 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 800054c:	2064      	movs	r0, #100	; 0x64
 800054e:	f000 ff7d 	bl	800144c <HAL_Delay>
}
 8000552:	bf00      	nop
 8000554:	3708      	adds	r7, #8
 8000556:	46bd      	mov	sp, r7
 8000558:	bd80      	pop	{r7, pc}

0800055a <LoRa_gotoMode>:
		arguments   :
			LoRa* LoRa    --> LoRa object handler
			mode	        --> select from defined modes
		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_gotoMode(LoRa* _LoRa, int mode){
 800055a:	b580      	push	{r7, lr}
 800055c:	b084      	sub	sp, #16
 800055e:	af00      	add	r7, sp, #0
 8000560:	6078      	str	r0, [r7, #4]
 8000562:	6039      	str	r1, [r7, #0]
	uint8_t    read;
	uint8_t    data;

	read = LoRa_read(_LoRa, RegOpMode);
 8000564:	2101      	movs	r1, #1
 8000566:	6878      	ldr	r0, [r7, #4]
 8000568:	f000 f99f 	bl	80008aa <LoRa_read>
 800056c:	4603      	mov	r3, r0
 800056e:	73bb      	strb	r3, [r7, #14]
	data = read;
 8000570:	7bbb      	ldrb	r3, [r7, #14]
 8000572:	73fb      	strb	r3, [r7, #15]

	if(mode == SLEEP_MODE){
 8000574:	683b      	ldr	r3, [r7, #0]
 8000576:	2b00      	cmp	r3, #0
 8000578:	d107      	bne.n	800058a <LoRa_gotoMode+0x30>
		data = (read & 0xF8) | 0x00;
 800057a:	7bbb      	ldrb	r3, [r7, #14]
 800057c:	f023 0307 	bic.w	r3, r3, #7
 8000580:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = SLEEP_MODE;
 8000582:	687b      	ldr	r3, [r7, #4]
 8000584:	2200      	movs	r2, #0
 8000586:	61da      	str	r2, [r3, #28]
 8000588:	e03e      	b.n	8000608 <LoRa_gotoMode+0xae>
	}else if (mode == STNBY_MODE){
 800058a:	683b      	ldr	r3, [r7, #0]
 800058c:	2b01      	cmp	r3, #1
 800058e:	d10c      	bne.n	80005aa <LoRa_gotoMode+0x50>
		data = (read & 0xF8) | 0x01;
 8000590:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000594:	f023 0307 	bic.w	r3, r3, #7
 8000598:	b25b      	sxtb	r3, r3
 800059a:	f043 0301 	orr.w	r3, r3, #1
 800059e:	b25b      	sxtb	r3, r3
 80005a0:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = STNBY_MODE;
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	2201      	movs	r2, #1
 80005a6:	61da      	str	r2, [r3, #28]
 80005a8:	e02e      	b.n	8000608 <LoRa_gotoMode+0xae>
	}else if (mode == TRANSMIT_MODE){
 80005aa:	683b      	ldr	r3, [r7, #0]
 80005ac:	2b03      	cmp	r3, #3
 80005ae:	d10c      	bne.n	80005ca <LoRa_gotoMode+0x70>
		data = (read & 0xF8) | 0x03;
 80005b0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80005b4:	f023 0307 	bic.w	r3, r3, #7
 80005b8:	b25b      	sxtb	r3, r3
 80005ba:	f043 0303 	orr.w	r3, r3, #3
 80005be:	b25b      	sxtb	r3, r3
 80005c0:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = TRANSMIT_MODE;
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	2203      	movs	r2, #3
 80005c6:	61da      	str	r2, [r3, #28]
 80005c8:	e01e      	b.n	8000608 <LoRa_gotoMode+0xae>
	}else if (mode == RXCONTIN_MODE){
 80005ca:	683b      	ldr	r3, [r7, #0]
 80005cc:	2b05      	cmp	r3, #5
 80005ce:	d10c      	bne.n	80005ea <LoRa_gotoMode+0x90>
		data = (read & 0xF8) | 0x05;
 80005d0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80005d4:	f023 0307 	bic.w	r3, r3, #7
 80005d8:	b25b      	sxtb	r3, r3
 80005da:	f043 0305 	orr.w	r3, r3, #5
 80005de:	b25b      	sxtb	r3, r3
 80005e0:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = RXCONTIN_MODE;
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	2205      	movs	r2, #5
 80005e6:	61da      	str	r2, [r3, #28]
 80005e8:	e00e      	b.n	8000608 <LoRa_gotoMode+0xae>
	}else if (mode == RXSINGLE_MODE){
 80005ea:	683b      	ldr	r3, [r7, #0]
 80005ec:	2b06      	cmp	r3, #6
 80005ee:	d10b      	bne.n	8000608 <LoRa_gotoMode+0xae>
		data = (read & 0xF8) | 0x06;
 80005f0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80005f4:	f023 0307 	bic.w	r3, r3, #7
 80005f8:	b25b      	sxtb	r3, r3
 80005fa:	f043 0306 	orr.w	r3, r3, #6
 80005fe:	b25b      	sxtb	r3, r3
 8000600:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = RXSINGLE_MODE;
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	2206      	movs	r2, #6
 8000606:	61da      	str	r2, [r3, #28]
	}

	LoRa_write(_LoRa, RegOpMode, data);
 8000608:	7bfb      	ldrb	r3, [r7, #15]
 800060a:	461a      	mov	r2, r3
 800060c:	2101      	movs	r1, #1
 800060e:	6878      	ldr	r0, [r7, #4]
 8000610:	f000 f965 	bl	80008de <LoRa_write>
	//HAL_Delay(10);
}
 8000614:	bf00      	nop
 8000616:	3710      	adds	r7, #16
 8000618:	46bd      	mov	sp, r7
 800061a:	bd80      	pop	{r7, pc}

0800061c <LoRa_readReg>:
														you want to send
			uint8_t* output		--> pointer to the beginning of output array
			uint16_t w_length	--> detemines number of bytes that you want to read
		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_readReg(LoRa* _LoRa, uint8_t* address, uint16_t r_length, uint8_t* output, uint16_t w_length){
 800061c:	b580      	push	{r7, lr}
 800061e:	b084      	sub	sp, #16
 8000620:	af00      	add	r7, sp, #0
 8000622:	60f8      	str	r0, [r7, #12]
 8000624:	60b9      	str	r1, [r7, #8]
 8000626:	603b      	str	r3, [r7, #0]
 8000628:	4613      	mov	r3, r2
 800062a:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_RESET);
 800062c:	68fb      	ldr	r3, [r7, #12]
 800062e:	6818      	ldr	r0, [r3, #0]
 8000630:	68fb      	ldr	r3, [r7, #12]
 8000632:	889b      	ldrh	r3, [r3, #4]
 8000634:	2200      	movs	r2, #0
 8000636:	4619      	mov	r1, r3
 8000638:	f001 fa6c 	bl	8001b14 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(_LoRa->hSPIx, address, r_length, TRANSMIT_TIMEOUT);
 800063c:	68fb      	ldr	r3, [r7, #12]
 800063e:	6998      	ldr	r0, [r3, #24]
 8000640:	88fa      	ldrh	r2, [r7, #6]
 8000642:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000646:	68b9      	ldr	r1, [r7, #8]
 8000648:	f003 f9db 	bl	8003a02 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 800064c:	bf00      	nop
 800064e:	68fb      	ldr	r3, [r7, #12]
 8000650:	699b      	ldr	r3, [r3, #24]
 8000652:	4618      	mov	r0, r3
 8000654:	f003 fdc4 	bl	80041e0 <HAL_SPI_GetState>
 8000658:	4603      	mov	r3, r0
 800065a:	2b01      	cmp	r3, #1
 800065c:	d1f7      	bne.n	800064e <LoRa_readReg+0x32>
		;
	HAL_SPI_Receive(_LoRa->hSPIx, output, w_length, RECEIVE_TIMEOUT);
 800065e:	68fb      	ldr	r3, [r7, #12]
 8000660:	6998      	ldr	r0, [r3, #24]
 8000662:	8b3a      	ldrh	r2, [r7, #24]
 8000664:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000668:	6839      	ldr	r1, [r7, #0]
 800066a:	f003 fb06 	bl	8003c7a <HAL_SPI_Receive>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 800066e:	bf00      	nop
 8000670:	68fb      	ldr	r3, [r7, #12]
 8000672:	699b      	ldr	r3, [r3, #24]
 8000674:	4618      	mov	r0, r3
 8000676:	f003 fdb3 	bl	80041e0 <HAL_SPI_GetState>
 800067a:	4603      	mov	r3, r0
 800067c:	2b01      	cmp	r3, #1
 800067e:	d1f7      	bne.n	8000670 <LoRa_readReg+0x54>
		;
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_SET);
 8000680:	68fb      	ldr	r3, [r7, #12]
 8000682:	6818      	ldr	r0, [r3, #0]
 8000684:	68fb      	ldr	r3, [r7, #12]
 8000686:	889b      	ldrh	r3, [r3, #4]
 8000688:	2201      	movs	r2, #1
 800068a:	4619      	mov	r1, r3
 800068c:	f001 fa42 	bl	8001b14 <HAL_GPIO_WritePin>
}
 8000690:	bf00      	nop
 8000692:	3710      	adds	r7, #16
 8000694:	46bd      	mov	sp, r7
 8000696:	bd80      	pop	{r7, pc}

08000698 <LoRa_writeReg>:
														you want to send
			uint8_t* output		--> pointer to the beginning of values array
			uint16_t w_length	--> detemines number of bytes that you want to send
		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_writeReg(LoRa* _LoRa, uint8_t* address, uint16_t r_length, uint8_t* values, uint16_t w_length){
 8000698:	b580      	push	{r7, lr}
 800069a:	b084      	sub	sp, #16
 800069c:	af00      	add	r7, sp, #0
 800069e:	60f8      	str	r0, [r7, #12]
 80006a0:	60b9      	str	r1, [r7, #8]
 80006a2:	603b      	str	r3, [r7, #0]
 80006a4:	4613      	mov	r3, r2
 80006a6:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_RESET);
 80006a8:	68fb      	ldr	r3, [r7, #12]
 80006aa:	6818      	ldr	r0, [r3, #0]
 80006ac:	68fb      	ldr	r3, [r7, #12]
 80006ae:	889b      	ldrh	r3, [r3, #4]
 80006b0:	2200      	movs	r2, #0
 80006b2:	4619      	mov	r1, r3
 80006b4:	f001 fa2e 	bl	8001b14 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(_LoRa->hSPIx, address, r_length, TRANSMIT_TIMEOUT);
 80006b8:	68fb      	ldr	r3, [r7, #12]
 80006ba:	6998      	ldr	r0, [r3, #24]
 80006bc:	88fa      	ldrh	r2, [r7, #6]
 80006be:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80006c2:	68b9      	ldr	r1, [r7, #8]
 80006c4:	f003 f99d 	bl	8003a02 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 80006c8:	bf00      	nop
 80006ca:	68fb      	ldr	r3, [r7, #12]
 80006cc:	699b      	ldr	r3, [r3, #24]
 80006ce:	4618      	mov	r0, r3
 80006d0:	f003 fd86 	bl	80041e0 <HAL_SPI_GetState>
 80006d4:	4603      	mov	r3, r0
 80006d6:	2b01      	cmp	r3, #1
 80006d8:	d1f7      	bne.n	80006ca <LoRa_writeReg+0x32>
		;
	HAL_SPI_Transmit(_LoRa->hSPIx, values, w_length, TRANSMIT_TIMEOUT);
 80006da:	68fb      	ldr	r3, [r7, #12]
 80006dc:	6998      	ldr	r0, [r3, #24]
 80006de:	8b3a      	ldrh	r2, [r7, #24]
 80006e0:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80006e4:	6839      	ldr	r1, [r7, #0]
 80006e6:	f003 f98c 	bl	8003a02 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 80006ea:	bf00      	nop
 80006ec:	68fb      	ldr	r3, [r7, #12]
 80006ee:	699b      	ldr	r3, [r3, #24]
 80006f0:	4618      	mov	r0, r3
 80006f2:	f003 fd75 	bl	80041e0 <HAL_SPI_GetState>
 80006f6:	4603      	mov	r3, r0
 80006f8:	2b01      	cmp	r3, #1
 80006fa:	d1f7      	bne.n	80006ec <LoRa_writeReg+0x54>
		;
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_SET);
 80006fc:	68fb      	ldr	r3, [r7, #12]
 80006fe:	6818      	ldr	r0, [r3, #0]
 8000700:	68fb      	ldr	r3, [r7, #12]
 8000702:	889b      	ldrh	r3, [r3, #4]
 8000704:	2201      	movs	r2, #1
 8000706:	4619      	mov	r1, r3
 8000708:	f001 fa04 	bl	8001b14 <HAL_GPIO_WritePin>
}
 800070c:	bf00      	nop
 800070e:	3710      	adds	r7, #16
 8000710:	46bd      	mov	sp, r7
 8000712:	bd80      	pop	{r7, pc}

08000714 <LoRa_setFrequency>:
		arguments   :
			LoRa* LoRa        --> LoRa object handler
			int   freq        --> desired frequency in MHz unit, e.g 434
		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setFrequency(LoRa* _LoRa, int freq){
 8000714:	b580      	push	{r7, lr}
 8000716:	b084      	sub	sp, #16
 8000718:	af00      	add	r7, sp, #0
 800071a:	6078      	str	r0, [r7, #4]
 800071c:	6039      	str	r1, [r7, #0]
	uint8_t  data;
	uint32_t F;
	F = (freq * 524288)>>5;
 800071e:	683b      	ldr	r3, [r7, #0]
 8000720:	04db      	lsls	r3, r3, #19
 8000722:	115b      	asrs	r3, r3, #5
 8000724:	60fb      	str	r3, [r7, #12]

	// write Msb:
	data = F >> 16;
 8000726:	68fb      	ldr	r3, [r7, #12]
 8000728:	0c1b      	lsrs	r3, r3, #16
 800072a:	72fb      	strb	r3, [r7, #11]
	LoRa_write(_LoRa, RegFrMsb, data);
 800072c:	7afb      	ldrb	r3, [r7, #11]
 800072e:	461a      	mov	r2, r3
 8000730:	2106      	movs	r1, #6
 8000732:	6878      	ldr	r0, [r7, #4]
 8000734:	f000 f8d3 	bl	80008de <LoRa_write>
	HAL_Delay(5);
 8000738:	2005      	movs	r0, #5
 800073a:	f000 fe87 	bl	800144c <HAL_Delay>

	// write Mid:
	data = F >> 8;
 800073e:	68fb      	ldr	r3, [r7, #12]
 8000740:	0a1b      	lsrs	r3, r3, #8
 8000742:	72fb      	strb	r3, [r7, #11]
	LoRa_write(_LoRa, RegFrMid, data);
 8000744:	7afb      	ldrb	r3, [r7, #11]
 8000746:	461a      	mov	r2, r3
 8000748:	2107      	movs	r1, #7
 800074a:	6878      	ldr	r0, [r7, #4]
 800074c:	f000 f8c7 	bl	80008de <LoRa_write>
	HAL_Delay(5);
 8000750:	2005      	movs	r0, #5
 8000752:	f000 fe7b 	bl	800144c <HAL_Delay>

	// write Lsb:
	data = F >> 0;
 8000756:	68fb      	ldr	r3, [r7, #12]
 8000758:	72fb      	strb	r3, [r7, #11]
	LoRa_write(_LoRa, RegFrLsb, data);
 800075a:	7afb      	ldrb	r3, [r7, #11]
 800075c:	461a      	mov	r2, r3
 800075e:	2108      	movs	r1, #8
 8000760:	6878      	ldr	r0, [r7, #4]
 8000762:	f000 f8bc 	bl	80008de <LoRa_write>
	HAL_Delay(5);
 8000766:	2005      	movs	r0, #5
 8000768:	f000 fe70 	bl	800144c <HAL_Delay>
}
 800076c:	bf00      	nop
 800076e:	3710      	adds	r7, #16
 8000770:	46bd      	mov	sp, r7
 8000772:	bd80      	pop	{r7, pc}

08000774 <LoRa_setSpreadingFactor>:
		arguments   :
			LoRa* LoRa        --> LoRa object handler
			int   SP          --> desired spreading factor e.g 7
		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setSpreadingFactor(LoRa* _LoRa, int SF){
 8000774:	b580      	push	{r7, lr}
 8000776:	b084      	sub	sp, #16
 8000778:	af00      	add	r7, sp, #0
 800077a:	6078      	str	r0, [r7, #4]
 800077c:	6039      	str	r1, [r7, #0]
	uint8_t	data;
	uint8_t	read;

	if(SF>12)
 800077e:	683b      	ldr	r3, [r7, #0]
 8000780:	2b0c      	cmp	r3, #12
 8000782:	dd01      	ble.n	8000788 <LoRa_setSpreadingFactor+0x14>
		SF = 12;
 8000784:	230c      	movs	r3, #12
 8000786:	603b      	str	r3, [r7, #0]
	if(SF<7)
 8000788:	683b      	ldr	r3, [r7, #0]
 800078a:	2b06      	cmp	r3, #6
 800078c:	dc01      	bgt.n	8000792 <LoRa_setSpreadingFactor+0x1e>
		SF = 7;
 800078e:	2307      	movs	r3, #7
 8000790:	603b      	str	r3, [r7, #0]

	read = LoRa_read(_LoRa, RegModemConfig2);
 8000792:	211e      	movs	r1, #30
 8000794:	6878      	ldr	r0, [r7, #4]
 8000796:	f000 f888 	bl	80008aa <LoRa_read>
 800079a:	4603      	mov	r3, r0
 800079c:	73fb      	strb	r3, [r7, #15]
	HAL_Delay(10);
 800079e:	200a      	movs	r0, #10
 80007a0:	f000 fe54 	bl	800144c <HAL_Delay>

	data = (SF << 4) + (read & 0x0F);
 80007a4:	683b      	ldr	r3, [r7, #0]
 80007a6:	b2db      	uxtb	r3, r3
 80007a8:	011b      	lsls	r3, r3, #4
 80007aa:	b2da      	uxtb	r2, r3
 80007ac:	7bfb      	ldrb	r3, [r7, #15]
 80007ae:	f003 030f 	and.w	r3, r3, #15
 80007b2:	b2db      	uxtb	r3, r3
 80007b4:	4413      	add	r3, r2
 80007b6:	73bb      	strb	r3, [r7, #14]
	LoRa_write(_LoRa, RegModemConfig2, data);
 80007b8:	7bbb      	ldrb	r3, [r7, #14]
 80007ba:	461a      	mov	r2, r3
 80007bc:	211e      	movs	r1, #30
 80007be:	6878      	ldr	r0, [r7, #4]
 80007c0:	f000 f88d 	bl	80008de <LoRa_write>
	HAL_Delay(10);
 80007c4:	200a      	movs	r0, #10
 80007c6:	f000 fe41 	bl	800144c <HAL_Delay>
}
 80007ca:	bf00      	nop
 80007cc:	3710      	adds	r7, #16
 80007ce:	46bd      	mov	sp, r7
 80007d0:	bd80      	pop	{r7, pc}

080007d2 <LoRa_setPower>:
		arguments   :
			LoRa* LoRa        --> LoRa object handler
			int   power       --> desired power e.g POWER_17db
		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setPower(LoRa* _LoRa, uint8_t power){
 80007d2:	b580      	push	{r7, lr}
 80007d4:	b082      	sub	sp, #8
 80007d6:	af00      	add	r7, sp, #0
 80007d8:	6078      	str	r0, [r7, #4]
 80007da:	460b      	mov	r3, r1
 80007dc:	70fb      	strb	r3, [r7, #3]
	LoRa_write(_LoRa, RegPaConfig, power);
 80007de:	78fb      	ldrb	r3, [r7, #3]
 80007e0:	461a      	mov	r2, r3
 80007e2:	2109      	movs	r1, #9
 80007e4:	6878      	ldr	r0, [r7, #4]
 80007e6:	f000 f87a 	bl	80008de <LoRa_write>
	HAL_Delay(10);
 80007ea:	200a      	movs	r0, #10
 80007ec:	f000 fe2e 	bl	800144c <HAL_Delay>
}
 80007f0:	bf00      	nop
 80007f2:	3708      	adds	r7, #8
 80007f4:	46bd      	mov	sp, r7
 80007f6:	bd80      	pop	{r7, pc}

080007f8 <LoRa_setOCP>:
		arguments   :
			LoRa* LoRa        --> LoRa object handler
			int   current     --> desired max currnet in mA, e.g 120
		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setOCP(LoRa* _LoRa, uint8_t current){
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b084      	sub	sp, #16
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	6078      	str	r0, [r7, #4]
 8000800:	460b      	mov	r3, r1
 8000802:	70fb      	strb	r3, [r7, #3]
	uint8_t	OcpTrim = 0;
 8000804:	2300      	movs	r3, #0
 8000806:	73fb      	strb	r3, [r7, #15]

	if(current<45)
 8000808:	78fb      	ldrb	r3, [r7, #3]
 800080a:	2b2c      	cmp	r3, #44	; 0x2c
 800080c:	d801      	bhi.n	8000812 <LoRa_setOCP+0x1a>
		current = 45;
 800080e:	232d      	movs	r3, #45	; 0x2d
 8000810:	70fb      	strb	r3, [r7, #3]
	if(current>240)
 8000812:	78fb      	ldrb	r3, [r7, #3]
 8000814:	2bf0      	cmp	r3, #240	; 0xf0
 8000816:	d901      	bls.n	800081c <LoRa_setOCP+0x24>
		current = 240;
 8000818:	23f0      	movs	r3, #240	; 0xf0
 800081a:	70fb      	strb	r3, [r7, #3]

	if(current <= 120)
 800081c:	78fb      	ldrb	r3, [r7, #3]
 800081e:	2b78      	cmp	r3, #120	; 0x78
 8000820:	d809      	bhi.n	8000836 <LoRa_setOCP+0x3e>
		OcpTrim = (current - 45)/5;
 8000822:	78fb      	ldrb	r3, [r7, #3]
 8000824:	3b2d      	subs	r3, #45	; 0x2d
 8000826:	4a12      	ldr	r2, [pc, #72]	; (8000870 <LoRa_setOCP+0x78>)
 8000828:	fb82 1203 	smull	r1, r2, r2, r3
 800082c:	1052      	asrs	r2, r2, #1
 800082e:	17db      	asrs	r3, r3, #31
 8000830:	1ad3      	subs	r3, r2, r3
 8000832:	73fb      	strb	r3, [r7, #15]
 8000834:	e00b      	b.n	800084e <LoRa_setOCP+0x56>
	else if(current <= 240)
 8000836:	78fb      	ldrb	r3, [r7, #3]
 8000838:	2bf0      	cmp	r3, #240	; 0xf0
 800083a:	d808      	bhi.n	800084e <LoRa_setOCP+0x56>
		OcpTrim = (current + 30)/10;
 800083c:	78fb      	ldrb	r3, [r7, #3]
 800083e:	331e      	adds	r3, #30
 8000840:	4a0b      	ldr	r2, [pc, #44]	; (8000870 <LoRa_setOCP+0x78>)
 8000842:	fb82 1203 	smull	r1, r2, r2, r3
 8000846:	1092      	asrs	r2, r2, #2
 8000848:	17db      	asrs	r3, r3, #31
 800084a:	1ad3      	subs	r3, r2, r3
 800084c:	73fb      	strb	r3, [r7, #15]

	OcpTrim = OcpTrim + (1 << 5);
 800084e:	7bfb      	ldrb	r3, [r7, #15]
 8000850:	3320      	adds	r3, #32
 8000852:	73fb      	strb	r3, [r7, #15]
	LoRa_write(_LoRa, RegOcp, OcpTrim);
 8000854:	7bfb      	ldrb	r3, [r7, #15]
 8000856:	461a      	mov	r2, r3
 8000858:	210b      	movs	r1, #11
 800085a:	6878      	ldr	r0, [r7, #4]
 800085c:	f000 f83f 	bl	80008de <LoRa_write>
	HAL_Delay(10);
 8000860:	200a      	movs	r0, #10
 8000862:	f000 fdf3 	bl	800144c <HAL_Delay>
}
 8000866:	bf00      	nop
 8000868:	3710      	adds	r7, #16
 800086a:	46bd      	mov	sp, r7
 800086c:	bd80      	pop	{r7, pc}
 800086e:	bf00      	nop
 8000870:	66666667 	.word	0x66666667

08000874 <LoRa_setTOMsb_setCRCon>:
		description : set timeout msb to 0xFF + set CRC enable.
		arguments   :
			LoRa* LoRa        --> LoRa object handler
		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setTOMsb_setCRCon(LoRa* _LoRa){
 8000874:	b580      	push	{r7, lr}
 8000876:	b084      	sub	sp, #16
 8000878:	af00      	add	r7, sp, #0
 800087a:	6078      	str	r0, [r7, #4]
	uint8_t read, data;

	read = LoRa_read(_LoRa, RegModemConfig2);
 800087c:	211e      	movs	r1, #30
 800087e:	6878      	ldr	r0, [r7, #4]
 8000880:	f000 f813 	bl	80008aa <LoRa_read>
 8000884:	4603      	mov	r3, r0
 8000886:	73fb      	strb	r3, [r7, #15]

	data = read | 0x07;
 8000888:	7bfb      	ldrb	r3, [r7, #15]
 800088a:	f043 0307 	orr.w	r3, r3, #7
 800088e:	73bb      	strb	r3, [r7, #14]
	LoRa_write(_LoRa, RegModemConfig2, data);\
 8000890:	7bbb      	ldrb	r3, [r7, #14]
 8000892:	461a      	mov	r2, r3
 8000894:	211e      	movs	r1, #30
 8000896:	6878      	ldr	r0, [r7, #4]
 8000898:	f000 f821 	bl	80008de <LoRa_write>
	HAL_Delay(10);
 800089c:	200a      	movs	r0, #10
 800089e:	f000 fdd5 	bl	800144c <HAL_Delay>
}
 80008a2:	bf00      	nop
 80008a4:	3710      	adds	r7, #16
 80008a6:	46bd      	mov	sp, r7
 80008a8:	bd80      	pop	{r7, pc}

080008aa <LoRa_read>:
		arguments   :
			LoRa*   LoRa        --> LoRa object handler
			uint8_t address     -->	address of the register e.g 0x1D
		returns     : register value
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_read(LoRa* _LoRa, uint8_t address){
 80008aa:	b580      	push	{r7, lr}
 80008ac:	b086      	sub	sp, #24
 80008ae:	af02      	add	r7, sp, #8
 80008b0:	6078      	str	r0, [r7, #4]
 80008b2:	460b      	mov	r3, r1
 80008b4:	70fb      	strb	r3, [r7, #3]
	uint8_t read_data;
	uint8_t data_addr;

	data_addr = address & 0x7F;
 80008b6:	78fb      	ldrb	r3, [r7, #3]
 80008b8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80008bc:	b2db      	uxtb	r3, r3
 80008be:	73bb      	strb	r3, [r7, #14]
	LoRa_readReg(_LoRa, &data_addr, 1, &read_data, 1);
 80008c0:	f107 030f 	add.w	r3, r7, #15
 80008c4:	f107 010e 	add.w	r1, r7, #14
 80008c8:	2201      	movs	r2, #1
 80008ca:	9200      	str	r2, [sp, #0]
 80008cc:	2201      	movs	r2, #1
 80008ce:	6878      	ldr	r0, [r7, #4]
 80008d0:	f7ff fea4 	bl	800061c <LoRa_readReg>
	//HAL_Delay(5);

	return read_data;
 80008d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80008d6:	4618      	mov	r0, r3
 80008d8:	3710      	adds	r7, #16
 80008da:	46bd      	mov	sp, r7
 80008dc:	bd80      	pop	{r7, pc}

080008de <LoRa_write>:
			LoRa*   LoRa        --> LoRa object handler
			uint8_t address     -->	address of the register e.g 0x1D
			uint8_t value       --> value that you want to write
		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_write(LoRa* _LoRa, uint8_t address, uint8_t value){
 80008de:	b580      	push	{r7, lr}
 80008e0:	b086      	sub	sp, #24
 80008e2:	af02      	add	r7, sp, #8
 80008e4:	6078      	str	r0, [r7, #4]
 80008e6:	460b      	mov	r3, r1
 80008e8:	70fb      	strb	r3, [r7, #3]
 80008ea:	4613      	mov	r3, r2
 80008ec:	70bb      	strb	r3, [r7, #2]
	uint8_t data;
	uint8_t addr;

	addr = address | 0x80;
 80008ee:	78fb      	ldrb	r3, [r7, #3]
 80008f0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80008f4:	b2db      	uxtb	r3, r3
 80008f6:	73bb      	strb	r3, [r7, #14]
	data = value;
 80008f8:	78bb      	ldrb	r3, [r7, #2]
 80008fa:	73fb      	strb	r3, [r7, #15]
	LoRa_writeReg(_LoRa, &addr, 1, &data, 1);
 80008fc:	f107 030f 	add.w	r3, r7, #15
 8000900:	f107 010e 	add.w	r1, r7, #14
 8000904:	2201      	movs	r2, #1
 8000906:	9200      	str	r2, [sp, #0]
 8000908:	2201      	movs	r2, #1
 800090a:	6878      	ldr	r0, [r7, #4]
 800090c:	f7ff fec4 	bl	8000698 <LoRa_writeReg>
	//HAL_Delay(5);
}
 8000910:	bf00      	nop
 8000912:	3710      	adds	r7, #16
 8000914:	46bd      	mov	sp, r7
 8000916:	bd80      	pop	{r7, pc}

08000918 <LoRa_isvalid>:
		description : check the LoRa instruct values
		arguments   :
			LoRa* LoRa --> LoRa object handler
		returns     : returns 1 if all of the values were given, otherwise returns 0
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_isvalid(LoRa* _LoRa){
 8000918:	b480      	push	{r7}
 800091a:	b083      	sub	sp, #12
 800091c:	af00      	add	r7, sp, #0
 800091e:	6078      	str	r0, [r7, #4]

	return 1;
 8000920:	2301      	movs	r3, #1
}
 8000922:	4618      	mov	r0, r3
 8000924:	370c      	adds	r7, #12
 8000926:	46bd      	mov	sp, r7
 8000928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800092c:	4770      	bx	lr

0800092e <LoRa_startReceiving>:
		description : Start receiving continuously
		arguments   :
			LoRa*    LoRa     --> LoRa object handler
		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_startReceiving(LoRa* _LoRa){
 800092e:	b580      	push	{r7, lr}
 8000930:	b082      	sub	sp, #8
 8000932:	af00      	add	r7, sp, #0
 8000934:	6078      	str	r0, [r7, #4]
	LoRa_gotoMode(_LoRa, RXCONTIN_MODE);
 8000936:	2105      	movs	r1, #5
 8000938:	6878      	ldr	r0, [r7, #4]
 800093a:	f7ff fe0e 	bl	800055a <LoRa_gotoMode>
}
 800093e:	bf00      	nop
 8000940:	3708      	adds	r7, #8
 8000942:	46bd      	mov	sp, r7
 8000944:	bd80      	pop	{r7, pc}

08000946 <LoRa_init>:
		description : initialize and set the right setting according to LoRa sruct vars
		arguments   :
			LoRa* LoRa        --> LoRa object handler
		returns     : Nothing
\* ----------------------------------------------------------------------------- */
uint16_t LoRa_init(LoRa* _LoRa){
 8000946:	b580      	push	{r7, lr}
 8000948:	b084      	sub	sp, #16
 800094a:	af00      	add	r7, sp, #0
 800094c:	6078      	str	r0, [r7, #4]
	uint8_t    data;
	uint8_t    read;

	if(LoRa_isvalid(_LoRa)){
 800094e:	6878      	ldr	r0, [r7, #4]
 8000950:	f7ff ffe2 	bl	8000918 <LoRa_isvalid>
 8000954:	4603      	mov	r3, r0
 8000956:	2b00      	cmp	r3, #0
 8000958:	f000 8093 	beq.w	8000a82 <LoRa_init+0x13c>
		// goto sleep mode:
			LoRa_gotoMode(_LoRa, SLEEP_MODE);
 800095c:	2100      	movs	r1, #0
 800095e:	6878      	ldr	r0, [r7, #4]
 8000960:	f7ff fdfb 	bl	800055a <LoRa_gotoMode>
			HAL_Delay(10);
 8000964:	200a      	movs	r0, #10
 8000966:	f000 fd71 	bl	800144c <HAL_Delay>

		// turn on lora mode:
			read = LoRa_read(_LoRa, RegOpMode);
 800096a:	2101      	movs	r1, #1
 800096c:	6878      	ldr	r0, [r7, #4]
 800096e:	f7ff ff9c 	bl	80008aa <LoRa_read>
 8000972:	4603      	mov	r3, r0
 8000974:	73fb      	strb	r3, [r7, #15]
			HAL_Delay(10);
 8000976:	200a      	movs	r0, #10
 8000978:	f000 fd68 	bl	800144c <HAL_Delay>
			data = read | 0x80;
 800097c:	7bfb      	ldrb	r3, [r7, #15]
 800097e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000982:	73bb      	strb	r3, [r7, #14]
			LoRa_write(_LoRa, RegOpMode, data);
 8000984:	7bbb      	ldrb	r3, [r7, #14]
 8000986:	461a      	mov	r2, r3
 8000988:	2101      	movs	r1, #1
 800098a:	6878      	ldr	r0, [r7, #4]
 800098c:	f7ff ffa7 	bl	80008de <LoRa_write>
			HAL_Delay(100);
 8000990:	2064      	movs	r0, #100	; 0x64
 8000992:	f000 fd5b 	bl	800144c <HAL_Delay>

		// set frequency:
			LoRa_setFrequency(_LoRa, _LoRa->frequency);
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	6a1b      	ldr	r3, [r3, #32]
 800099a:	4619      	mov	r1, r3
 800099c:	6878      	ldr	r0, [r7, #4]
 800099e:	f7ff feb9 	bl	8000714 <LoRa_setFrequency>

		// set output power gain:
			LoRa_setPower(_LoRa, _LoRa->power);
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 80009a8:	4619      	mov	r1, r3
 80009aa:	6878      	ldr	r0, [r7, #4]
 80009ac:	f7ff ff11 	bl	80007d2 <LoRa_setPower>

		// set over current protection:
			LoRa_setOCP(_LoRa, _LoRa->overCurrentProtection);
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 80009b6:	4619      	mov	r1, r3
 80009b8:	6878      	ldr	r0, [r7, #4]
 80009ba:	f7ff ff1d 	bl	80007f8 <LoRa_setOCP>

		// set LNA gain:
			LoRa_write(_LoRa, RegLna, 0x23);
 80009be:	2223      	movs	r2, #35	; 0x23
 80009c0:	210c      	movs	r1, #12
 80009c2:	6878      	ldr	r0, [r7, #4]
 80009c4:	f7ff ff8b 	bl	80008de <LoRa_write>

		// set spreading factor, CRC on, and Timeout Msb:
			LoRa_setTOMsb_setCRCon(_LoRa);
 80009c8:	6878      	ldr	r0, [r7, #4]
 80009ca:	f7ff ff53 	bl	8000874 <LoRa_setTOMsb_setCRCon>
			LoRa_setSpreadingFactor(_LoRa, _LoRa->spredingFactor);
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80009d4:	4619      	mov	r1, r3
 80009d6:	6878      	ldr	r0, [r7, #4]
 80009d8:	f7ff fecc 	bl	8000774 <LoRa_setSpreadingFactor>

		// set Timeout Lsb:
			LoRa_write(_LoRa, RegSymbTimeoutL, 0xFF);
 80009dc:	22ff      	movs	r2, #255	; 0xff
 80009de:	211f      	movs	r1, #31
 80009e0:	6878      	ldr	r0, [r7, #4]
 80009e2:	f7ff ff7c 	bl	80008de <LoRa_write>

		// set bandwidth, coding rate and expilicit mode:
			// 8 bit RegModemConfig --> | X | X | X | X | X | X | X | X |
			//       bits represent --> |   bandwidth   |     CR    |I/E|
			data = 0;
 80009e6:	2300      	movs	r3, #0
 80009e8:	73bb      	strb	r3, [r7, #14]
			data = (_LoRa->bandWidth << 4) + (_LoRa->crcRate << 1);
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80009f0:	011b      	lsls	r3, r3, #4
 80009f2:	b2da      	uxtb	r2, r3
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 80009fa:	005b      	lsls	r3, r3, #1
 80009fc:	b2db      	uxtb	r3, r3
 80009fe:	4413      	add	r3, r2
 8000a00:	73bb      	strb	r3, [r7, #14]
			LoRa_write(_LoRa, RegModemConfig1, data);
 8000a02:	7bbb      	ldrb	r3, [r7, #14]
 8000a04:	461a      	mov	r2, r3
 8000a06:	211d      	movs	r1, #29
 8000a08:	6878      	ldr	r0, [r7, #4]
 8000a0a:	f7ff ff68 	bl	80008de <LoRa_write>

		// set preamble:
			LoRa_write(_LoRa, RegPreambleMsb, _LoRa->preamble >> 8);
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000a12:	0a1b      	lsrs	r3, r3, #8
 8000a14:	b29b      	uxth	r3, r3
 8000a16:	b2db      	uxtb	r3, r3
 8000a18:	461a      	mov	r2, r3
 8000a1a:	2120      	movs	r1, #32
 8000a1c:	6878      	ldr	r0, [r7, #4]
 8000a1e:	f7ff ff5e 	bl	80008de <LoRa_write>
			LoRa_write(_LoRa, RegPreambleLsb, _LoRa->preamble >> 0);
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000a26:	b2db      	uxtb	r3, r3
 8000a28:	461a      	mov	r2, r3
 8000a2a:	2121      	movs	r1, #33	; 0x21
 8000a2c:	6878      	ldr	r0, [r7, #4]
 8000a2e:	f7ff ff56 	bl	80008de <LoRa_write>

		// DIO mapping:   --> DIO: RxDone
			read = LoRa_read(_LoRa, RegDioMapping1);
 8000a32:	2140      	movs	r1, #64	; 0x40
 8000a34:	6878      	ldr	r0, [r7, #4]
 8000a36:	f7ff ff38 	bl	80008aa <LoRa_read>
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	73fb      	strb	r3, [r7, #15]
			data = read | 0x3F;
 8000a3e:	7bfb      	ldrb	r3, [r7, #15]
 8000a40:	f043 033f 	orr.w	r3, r3, #63	; 0x3f
 8000a44:	73bb      	strb	r3, [r7, #14]
			LoRa_write(_LoRa, RegDioMapping1, data);
 8000a46:	7bbb      	ldrb	r3, [r7, #14]
 8000a48:	461a      	mov	r2, r3
 8000a4a:	2140      	movs	r1, #64	; 0x40
 8000a4c:	6878      	ldr	r0, [r7, #4]
 8000a4e:	f7ff ff46 	bl	80008de <LoRa_write>

		// goto standby mode:
			LoRa_gotoMode(_LoRa, STNBY_MODE);
 8000a52:	2101      	movs	r1, #1
 8000a54:	6878      	ldr	r0, [r7, #4]
 8000a56:	f7ff fd80 	bl	800055a <LoRa_gotoMode>
			_LoRa->current_mode = STNBY_MODE;
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	2201      	movs	r2, #1
 8000a5e:	61da      	str	r2, [r3, #28]
			HAL_Delay(10);
 8000a60:	200a      	movs	r0, #10
 8000a62:	f000 fcf3 	bl	800144c <HAL_Delay>

			read = LoRa_read(_LoRa, RegVersion);
 8000a66:	2142      	movs	r1, #66	; 0x42
 8000a68:	6878      	ldr	r0, [r7, #4]
 8000a6a:	f7ff ff1e 	bl	80008aa <LoRa_read>
 8000a6e:	4603      	mov	r3, r0
 8000a70:	73fb      	strb	r3, [r7, #15]
			if(read == 0x12)
 8000a72:	7bfb      	ldrb	r3, [r7, #15]
 8000a74:	2b12      	cmp	r3, #18
 8000a76:	d101      	bne.n	8000a7c <LoRa_init+0x136>
				return LORA_OK;
 8000a78:	23c8      	movs	r3, #200	; 0xc8
 8000a7a:	e004      	b.n	8000a86 <LoRa_init+0x140>
			else
				return LORA_NOT_FOUND;
 8000a7c:	f44f 73ca 	mov.w	r3, #404	; 0x194
 8000a80:	e001      	b.n	8000a86 <LoRa_init+0x140>
	}
	else {
		return LORA_UNAVAILABLE;
 8000a82:	f240 13f7 	movw	r3, #503	; 0x1f7
	}
}
 8000a86:	4618      	mov	r0, r3
 8000a88:	3710      	adds	r7, #16
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	bd80      	pop	{r7, pc}
	...

08000a90 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a90:	b5b0      	push	{r4, r5, r7, lr}
 8000a92:	b08c      	sub	sp, #48	; 0x30
 8000a94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  RetargetInit(USB_UART);
 8000a96:	4b2f      	ldr	r3, [pc, #188]	; (8000b54 <main+0xc4>)
 8000a98:	681b      	ldr	r3, [r3, #0]
 8000a9a:	4618      	mov	r0, r3
 8000a9c:	f000 f9fe 	bl	8000e9c <RetargetInit>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000aa0:	f000 fc62 	bl	8001368 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000aa4:	f000 f860 	bl	8000b68 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000aa8:	f000 f952 	bl	8000d50 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000aac:	f000 f8fc 	bl	8000ca8 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000ab0:	f000 f924 	bl	8000cfc <MX_USART2_UART_Init>
  MX_USB_DEVICE_Init();
 8000ab4:	f008 f958 	bl	8008d68 <MX_USB_DEVICE_Init>
  MX_SPI1_Init();
 8000ab8:	f000 f8c0 	bl	8000c3c <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  // LoRa Class definitions
  LoRaClass = newLoRa();
 8000abc:	4c26      	ldr	r4, [pc, #152]	; (8000b58 <main+0xc8>)
 8000abe:	463b      	mov	r3, r7
 8000ac0:	4618      	mov	r0, r3
 8000ac2:	f7ff fd03 	bl	80004cc <newLoRa>
 8000ac6:	4625      	mov	r5, r4
 8000ac8:	463c      	mov	r4, r7
 8000aca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000acc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000ace:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000ad0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000ad2:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8000ad6:	e885 0007 	stmia.w	r5, {r0, r1, r2}
  LoRaClass.hSPIx                 = RF_SPI;
 8000ada:	4b20      	ldr	r3, [pc, #128]	; (8000b5c <main+0xcc>)
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	4a1e      	ldr	r2, [pc, #120]	; (8000b58 <main+0xc8>)
 8000ae0:	6193      	str	r3, [r2, #24]
  LoRaClass.CS_port               = RF_SPI_NSS_GPIO_Port;
 8000ae2:	4b1d      	ldr	r3, [pc, #116]	; (8000b58 <main+0xc8>)
 8000ae4:	4a1e      	ldr	r2, [pc, #120]	; (8000b60 <main+0xd0>)
 8000ae6:	601a      	str	r2, [r3, #0]
  LoRaClass.CS_pin                = RF_SPI_NSS_Pin;
 8000ae8:	4b1b      	ldr	r3, [pc, #108]	; (8000b58 <main+0xc8>)
 8000aea:	2210      	movs	r2, #16
 8000aec:	809a      	strh	r2, [r3, #4]
  LoRaClass.reset_port            = RESET_RF_GPIO_Port;
 8000aee:	4b1a      	ldr	r3, [pc, #104]	; (8000b58 <main+0xc8>)
 8000af0:	4a1c      	ldr	r2, [pc, #112]	; (8000b64 <main+0xd4>)
 8000af2:	609a      	str	r2, [r3, #8]
  LoRaClass.reset_pin             = RESET_RF_Pin;
 8000af4:	4b18      	ldr	r3, [pc, #96]	; (8000b58 <main+0xc8>)
 8000af6:	2201      	movs	r2, #1
 8000af8:	819a      	strh	r2, [r3, #12]
  LoRaClass.DIO0_port			  = IO1_RF_GPIO_Port;
 8000afa:	4b17      	ldr	r3, [pc, #92]	; (8000b58 <main+0xc8>)
 8000afc:	4a19      	ldr	r2, [pc, #100]	; (8000b64 <main+0xd4>)
 8000afe:	611a      	str	r2, [r3, #16]
  LoRaClass.DIO0_pin			  = IO1_RF_Pin;
 8000b00:	4b15      	ldr	r3, [pc, #84]	; (8000b58 <main+0xc8>)
 8000b02:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000b06:	829a      	strh	r2, [r3, #20]

  LoRaClass.frequency             = 915;
 8000b08:	4b13      	ldr	r3, [pc, #76]	; (8000b58 <main+0xc8>)
 8000b0a:	f240 3293 	movw	r2, #915	; 0x393
 8000b0e:	621a      	str	r2, [r3, #32]
  LoRaClass.spredingFactor        = SF_7;						// default = SF_7
 8000b10:	4b11      	ldr	r3, [pc, #68]	; (8000b58 <main+0xc8>)
 8000b12:	2207      	movs	r2, #7
 8000b14:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  LoRaClass.bandWidth			  = BW_125KHz;				  	// default = BW_125KHz
 8000b18:	4b0f      	ldr	r3, [pc, #60]	; (8000b58 <main+0xc8>)
 8000b1a:	2207      	movs	r2, #7
 8000b1c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  LoRaClass.crcRate				  = CR_4_5;						// default = CR_4_5
 8000b20:	4b0d      	ldr	r3, [pc, #52]	; (8000b58 <main+0xc8>)
 8000b22:	2201      	movs	r2, #1
 8000b24:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  LoRaClass.power			      = POWER_20db;					// default = 20db
 8000b28:	4b0b      	ldr	r3, [pc, #44]	; (8000b58 <main+0xc8>)
 8000b2a:	22ff      	movs	r2, #255	; 0xff
 8000b2c:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  LoRaClass.overCurrentProtection = 120; 						// default = 100 mA
 8000b30:	4b09      	ldr	r3, [pc, #36]	; (8000b58 <main+0xc8>)
 8000b32:	2278      	movs	r2, #120	; 0x78
 8000b34:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  LoRaClass.preamble			  = 10;		  					// default = 8;
 8000b38:	4b07      	ldr	r3, [pc, #28]	; (8000b58 <main+0xc8>)
 8000b3a:	220a      	movs	r2, #10
 8000b3c:	851a      	strh	r2, [r3, #40]	; 0x28

  LoRa_reset(&LoRaClass);
 8000b3e:	4806      	ldr	r0, [pc, #24]	; (8000b58 <main+0xc8>)
 8000b40:	f7ff fced 	bl	800051e <LoRa_reset>
  LoRa_init(&LoRaClass);
 8000b44:	4804      	ldr	r0, [pc, #16]	; (8000b58 <main+0xc8>)
 8000b46:	f7ff fefe 	bl	8000946 <LoRa_init>

  // START CONTINUOUS RECEIVING -----------------------------------
  LoRa_startReceiving(&LoRaClass);
 8000b4a:	4803      	ldr	r0, [pc, #12]	; (8000b58 <main+0xc8>)
 8000b4c:	f7ff feef 	bl	800092e <LoRa_startReceiving>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000b50:	e7fe      	b.n	8000b50 <main+0xc0>
 8000b52:	bf00      	nop
 8000b54:	20000000 	.word	0x20000000
 8000b58:	20000264 	.word	0x20000264
 8000b5c:	20000004 	.word	0x20000004
 8000b60:	40020000 	.word	0x40020000
 8000b64:	40020400 	.word	0x40020400

08000b68 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b094      	sub	sp, #80	; 0x50
 8000b6c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b6e:	f107 0320 	add.w	r3, r7, #32
 8000b72:	2230      	movs	r2, #48	; 0x30
 8000b74:	2100      	movs	r1, #0
 8000b76:	4618      	mov	r0, r3
 8000b78:	f008 fe16 	bl	80097a8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b7c:	f107 030c 	add.w	r3, r7, #12
 8000b80:	2200      	movs	r2, #0
 8000b82:	601a      	str	r2, [r3, #0]
 8000b84:	605a      	str	r2, [r3, #4]
 8000b86:	609a      	str	r2, [r3, #8]
 8000b88:	60da      	str	r2, [r3, #12]
 8000b8a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	60bb      	str	r3, [r7, #8]
 8000b90:	4b28      	ldr	r3, [pc, #160]	; (8000c34 <SystemClock_Config+0xcc>)
 8000b92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b94:	4a27      	ldr	r2, [pc, #156]	; (8000c34 <SystemClock_Config+0xcc>)
 8000b96:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b9a:	6413      	str	r3, [r2, #64]	; 0x40
 8000b9c:	4b25      	ldr	r3, [pc, #148]	; (8000c34 <SystemClock_Config+0xcc>)
 8000b9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ba0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ba4:	60bb      	str	r3, [r7, #8]
 8000ba6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000ba8:	2300      	movs	r3, #0
 8000baa:	607b      	str	r3, [r7, #4]
 8000bac:	4b22      	ldr	r3, [pc, #136]	; (8000c38 <SystemClock_Config+0xd0>)
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	4a21      	ldr	r2, [pc, #132]	; (8000c38 <SystemClock_Config+0xd0>)
 8000bb2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000bb6:	6013      	str	r3, [r2, #0]
 8000bb8:	4b1f      	ldr	r3, [pc, #124]	; (8000c38 <SystemClock_Config+0xd0>)
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000bc0:	607b      	str	r3, [r7, #4]
 8000bc2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000bc4:	2301      	movs	r3, #1
 8000bc6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000bc8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000bcc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000bce:	2302      	movs	r3, #2
 8000bd0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000bd2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000bd6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 12;
 8000bd8:	230c      	movs	r3, #12
 8000bda:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000bdc:	23a8      	movs	r3, #168	; 0xa8
 8000bde:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000be0:	2302      	movs	r3, #2
 8000be2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000be4:	2307      	movs	r3, #7
 8000be6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000be8:	f107 0320 	add.w	r3, r7, #32
 8000bec:	4618      	mov	r0, r3
 8000bee:	f002 fa27 	bl	8003040 <HAL_RCC_OscConfig>
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d001      	beq.n	8000bfc <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000bf8:	f000 f94a 	bl	8000e90 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bfc:	230f      	movs	r3, #15
 8000bfe:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c00:	2302      	movs	r3, #2
 8000c02:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c04:	2300      	movs	r3, #0
 8000c06:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000c08:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000c0c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000c0e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c12:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000c14:	f107 030c 	add.w	r3, r7, #12
 8000c18:	2105      	movs	r1, #5
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	f002 fc88 	bl	8003530 <HAL_RCC_ClockConfig>
 8000c20:	4603      	mov	r3, r0
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d001      	beq.n	8000c2a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000c26:	f000 f933 	bl	8000e90 <Error_Handler>
  }
}
 8000c2a:	bf00      	nop
 8000c2c:	3750      	adds	r7, #80	; 0x50
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bd80      	pop	{r7, pc}
 8000c32:	bf00      	nop
 8000c34:	40023800 	.word	0x40023800
 8000c38:	40007000 	.word	0x40007000

08000c3c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000c40:	4b17      	ldr	r3, [pc, #92]	; (8000ca0 <MX_SPI1_Init+0x64>)
 8000c42:	4a18      	ldr	r2, [pc, #96]	; (8000ca4 <MX_SPI1_Init+0x68>)
 8000c44:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000c46:	4b16      	ldr	r3, [pc, #88]	; (8000ca0 <MX_SPI1_Init+0x64>)
 8000c48:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000c4c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000c4e:	4b14      	ldr	r3, [pc, #80]	; (8000ca0 <MX_SPI1_Init+0x64>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000c54:	4b12      	ldr	r3, [pc, #72]	; (8000ca0 <MX_SPI1_Init+0x64>)
 8000c56:	2200      	movs	r2, #0
 8000c58:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000c5a:	4b11      	ldr	r3, [pc, #68]	; (8000ca0 <MX_SPI1_Init+0x64>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000c60:	4b0f      	ldr	r3, [pc, #60]	; (8000ca0 <MX_SPI1_Init+0x64>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000c66:	4b0e      	ldr	r3, [pc, #56]	; (8000ca0 <MX_SPI1_Init+0x64>)
 8000c68:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000c6c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000c6e:	4b0c      	ldr	r3, [pc, #48]	; (8000ca0 <MX_SPI1_Init+0x64>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000c74:	4b0a      	ldr	r3, [pc, #40]	; (8000ca0 <MX_SPI1_Init+0x64>)
 8000c76:	2200      	movs	r2, #0
 8000c78:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000c7a:	4b09      	ldr	r3, [pc, #36]	; (8000ca0 <MX_SPI1_Init+0x64>)
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000c80:	4b07      	ldr	r3, [pc, #28]	; (8000ca0 <MX_SPI1_Init+0x64>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000c86:	4b06      	ldr	r3, [pc, #24]	; (8000ca0 <MX_SPI1_Init+0x64>)
 8000c88:	220a      	movs	r2, #10
 8000c8a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000c8c:	4804      	ldr	r0, [pc, #16]	; (8000ca0 <MX_SPI1_Init+0x64>)
 8000c8e:	f002 fe2f 	bl	80038f0 <HAL_SPI_Init>
 8000c92:	4603      	mov	r3, r0
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d001      	beq.n	8000c9c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000c98:	f000 f8fa 	bl	8000e90 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000c9c:	bf00      	nop
 8000c9e:	bd80      	pop	{r7, pc}
 8000ca0:	20000184 	.word	0x20000184
 8000ca4:	40013000 	.word	0x40013000

08000ca8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000cac:	4b11      	ldr	r3, [pc, #68]	; (8000cf4 <MX_USART1_UART_Init+0x4c>)
 8000cae:	4a12      	ldr	r2, [pc, #72]	; (8000cf8 <MX_USART1_UART_Init+0x50>)
 8000cb0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000cb2:	4b10      	ldr	r3, [pc, #64]	; (8000cf4 <MX_USART1_UART_Init+0x4c>)
 8000cb4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000cb8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000cba:	4b0e      	ldr	r3, [pc, #56]	; (8000cf4 <MX_USART1_UART_Init+0x4c>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000cc0:	4b0c      	ldr	r3, [pc, #48]	; (8000cf4 <MX_USART1_UART_Init+0x4c>)
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000cc6:	4b0b      	ldr	r3, [pc, #44]	; (8000cf4 <MX_USART1_UART_Init+0x4c>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000ccc:	4b09      	ldr	r3, [pc, #36]	; (8000cf4 <MX_USART1_UART_Init+0x4c>)
 8000cce:	220c      	movs	r2, #12
 8000cd0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 8000cd2:	4b08      	ldr	r3, [pc, #32]	; (8000cf4 <MX_USART1_UART_Init+0x4c>)
 8000cd4:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000cd8:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000cda:	4b06      	ldr	r3, [pc, #24]	; (8000cf4 <MX_USART1_UART_Init+0x4c>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000ce0:	4804      	ldr	r0, [pc, #16]	; (8000cf4 <MX_USART1_UART_Init+0x4c>)
 8000ce2:	f003 fbbb 	bl	800445c <HAL_UART_Init>
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d001      	beq.n	8000cf0 <MX_USART1_UART_Init+0x48>
  {
    Error_Handler();
 8000cec:	f000 f8d0 	bl	8000e90 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000cf0:	bf00      	nop
 8000cf2:	bd80      	pop	{r7, pc}
 8000cf4:	200001dc 	.word	0x200001dc
 8000cf8:	40011000 	.word	0x40011000

08000cfc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000d00:	4b11      	ldr	r3, [pc, #68]	; (8000d48 <MX_USART2_UART_Init+0x4c>)
 8000d02:	4a12      	ldr	r2, [pc, #72]	; (8000d4c <MX_USART2_UART_Init+0x50>)
 8000d04:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000d06:	4b10      	ldr	r3, [pc, #64]	; (8000d48 <MX_USART2_UART_Init+0x4c>)
 8000d08:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000d0c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000d0e:	4b0e      	ldr	r3, [pc, #56]	; (8000d48 <MX_USART2_UART_Init+0x4c>)
 8000d10:	2200      	movs	r2, #0
 8000d12:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000d14:	4b0c      	ldr	r3, [pc, #48]	; (8000d48 <MX_USART2_UART_Init+0x4c>)
 8000d16:	2200      	movs	r2, #0
 8000d18:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000d1a:	4b0b      	ldr	r3, [pc, #44]	; (8000d48 <MX_USART2_UART_Init+0x4c>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000d20:	4b09      	ldr	r3, [pc, #36]	; (8000d48 <MX_USART2_UART_Init+0x4c>)
 8000d22:	220c      	movs	r2, #12
 8000d24:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 8000d26:	4b08      	ldr	r3, [pc, #32]	; (8000d48 <MX_USART2_UART_Init+0x4c>)
 8000d28:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000d2c:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d2e:	4b06      	ldr	r3, [pc, #24]	; (8000d48 <MX_USART2_UART_Init+0x4c>)
 8000d30:	2200      	movs	r2, #0
 8000d32:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000d34:	4804      	ldr	r0, [pc, #16]	; (8000d48 <MX_USART2_UART_Init+0x4c>)
 8000d36:	f003 fb91 	bl	800445c <HAL_UART_Init>
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d001      	beq.n	8000d44 <MX_USART2_UART_Init+0x48>
  {
    Error_Handler();
 8000d40:	f000 f8a6 	bl	8000e90 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000d44:	bf00      	nop
 8000d46:	bd80      	pop	{r7, pc}
 8000d48:	20000220 	.word	0x20000220
 8000d4c:	40004400 	.word	0x40004400

08000d50 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b08a      	sub	sp, #40	; 0x28
 8000d54:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d56:	f107 0314 	add.w	r3, r7, #20
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	601a      	str	r2, [r3, #0]
 8000d5e:	605a      	str	r2, [r3, #4]
 8000d60:	609a      	str	r2, [r3, #8]
 8000d62:	60da      	str	r2, [r3, #12]
 8000d64:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d66:	2300      	movs	r3, #0
 8000d68:	613b      	str	r3, [r7, #16]
 8000d6a:	4b45      	ldr	r3, [pc, #276]	; (8000e80 <MX_GPIO_Init+0x130>)
 8000d6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d6e:	4a44      	ldr	r2, [pc, #272]	; (8000e80 <MX_GPIO_Init+0x130>)
 8000d70:	f043 0304 	orr.w	r3, r3, #4
 8000d74:	6313      	str	r3, [r2, #48]	; 0x30
 8000d76:	4b42      	ldr	r3, [pc, #264]	; (8000e80 <MX_GPIO_Init+0x130>)
 8000d78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d7a:	f003 0304 	and.w	r3, r3, #4
 8000d7e:	613b      	str	r3, [r7, #16]
 8000d80:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d82:	2300      	movs	r3, #0
 8000d84:	60fb      	str	r3, [r7, #12]
 8000d86:	4b3e      	ldr	r3, [pc, #248]	; (8000e80 <MX_GPIO_Init+0x130>)
 8000d88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d8a:	4a3d      	ldr	r2, [pc, #244]	; (8000e80 <MX_GPIO_Init+0x130>)
 8000d8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d90:	6313      	str	r3, [r2, #48]	; 0x30
 8000d92:	4b3b      	ldr	r3, [pc, #236]	; (8000e80 <MX_GPIO_Init+0x130>)
 8000d94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d9a:	60fb      	str	r3, [r7, #12]
 8000d9c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d9e:	2300      	movs	r3, #0
 8000da0:	60bb      	str	r3, [r7, #8]
 8000da2:	4b37      	ldr	r3, [pc, #220]	; (8000e80 <MX_GPIO_Init+0x130>)
 8000da4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000da6:	4a36      	ldr	r2, [pc, #216]	; (8000e80 <MX_GPIO_Init+0x130>)
 8000da8:	f043 0301 	orr.w	r3, r3, #1
 8000dac:	6313      	str	r3, [r2, #48]	; 0x30
 8000dae:	4b34      	ldr	r3, [pc, #208]	; (8000e80 <MX_GPIO_Init+0x130>)
 8000db0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000db2:	f003 0301 	and.w	r3, r3, #1
 8000db6:	60bb      	str	r3, [r7, #8]
 8000db8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dba:	2300      	movs	r3, #0
 8000dbc:	607b      	str	r3, [r7, #4]
 8000dbe:	4b30      	ldr	r3, [pc, #192]	; (8000e80 <MX_GPIO_Init+0x130>)
 8000dc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dc2:	4a2f      	ldr	r2, [pc, #188]	; (8000e80 <MX_GPIO_Init+0x130>)
 8000dc4:	f043 0302 	orr.w	r3, r3, #2
 8000dc8:	6313      	str	r3, [r2, #48]	; 0x30
 8000dca:	4b2d      	ldr	r3, [pc, #180]	; (8000e80 <MX_GPIO_Init+0x130>)
 8000dcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dce:	f003 0302 	and.w	r3, r3, #2
 8000dd2:	607b      	str	r3, [r7, #4]
 8000dd4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	603b      	str	r3, [r7, #0]
 8000dda:	4b29      	ldr	r3, [pc, #164]	; (8000e80 <MX_GPIO_Init+0x130>)
 8000ddc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dde:	4a28      	ldr	r2, [pc, #160]	; (8000e80 <MX_GPIO_Init+0x130>)
 8000de0:	f043 0308 	orr.w	r3, r3, #8
 8000de4:	6313      	str	r3, [r2, #48]	; 0x30
 8000de6:	4b26      	ldr	r3, [pc, #152]	; (8000e80 <MX_GPIO_Init+0x130>)
 8000de8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dea:	f003 0308 	and.w	r3, r3, #8
 8000dee:	603b      	str	r3, [r7, #0]
 8000df0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RESET_RF_GPIO_Port, RESET_RF_Pin, GPIO_PIN_RESET);
 8000df2:	2200      	movs	r2, #0
 8000df4:	2101      	movs	r1, #1
 8000df6:	4823      	ldr	r0, [pc, #140]	; (8000e84 <MX_GPIO_Init+0x134>)
 8000df8:	f000 fe8c 	bl	8001b14 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(INDICATOR_LED_GPIO_Port, INDICATOR_LED_Pin, GPIO_PIN_RESET);
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	2104      	movs	r1, #4
 8000e00:	4821      	ldr	r0, [pc, #132]	; (8000e88 <MX_GPIO_Init+0x138>)
 8000e02:	f000 fe87 	bl	8001b14 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : RESET_RF_Pin */
  GPIO_InitStruct.Pin = RESET_RF_Pin;
 8000e06:	2301      	movs	r3, #1
 8000e08:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e0a:	2301      	movs	r3, #1
 8000e0c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e12:	2300      	movs	r3, #0
 8000e14:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(RESET_RF_GPIO_Port, &GPIO_InitStruct);
 8000e16:	f107 0314 	add.w	r3, r7, #20
 8000e1a:	4619      	mov	r1, r3
 8000e1c:	4819      	ldr	r0, [pc, #100]	; (8000e84 <MX_GPIO_Init+0x134>)
 8000e1e:	f000 fcdd 	bl	80017dc <HAL_GPIO_Init>

  /*Configure GPIO pins : IO0_RF_Pin IO1_RF_Pin IO2_RF_Pin IO3_RF_Pin
                           IO4_RF_Pin */
  GPIO_InitStruct.Pin = IO0_RF_Pin|IO1_RF_Pin|IO2_RF_Pin|IO3_RF_Pin
 8000e22:	f643 4302 	movw	r3, #15362	; 0x3c02
 8000e26:	617b      	str	r3, [r7, #20]
                          |IO4_RF_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000e28:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000e2c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e32:	f107 0314 	add.w	r3, r7, #20
 8000e36:	4619      	mov	r1, r3
 8000e38:	4812      	ldr	r0, [pc, #72]	; (8000e84 <MX_GPIO_Init+0x134>)
 8000e3a:	f000 fccf 	bl	80017dc <HAL_GPIO_Init>

  /*Configure GPIO pin : IO5_RF_Pin */
  GPIO_InitStruct.Pin = IO5_RF_Pin;
 8000e3e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000e42:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000e44:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000e48:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(IO5_RF_GPIO_Port, &GPIO_InitStruct);
 8000e4e:	f107 0314 	add.w	r3, r7, #20
 8000e52:	4619      	mov	r1, r3
 8000e54:	480d      	ldr	r0, [pc, #52]	; (8000e8c <MX_GPIO_Init+0x13c>)
 8000e56:	f000 fcc1 	bl	80017dc <HAL_GPIO_Init>

  /*Configure GPIO pin : INDICATOR_LED_Pin */
  GPIO_InitStruct.Pin = INDICATOR_LED_Pin;
 8000e5a:	2304      	movs	r3, #4
 8000e5c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e5e:	2301      	movs	r3, #1
 8000e60:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e62:	2300      	movs	r3, #0
 8000e64:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e66:	2300      	movs	r3, #0
 8000e68:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(INDICATOR_LED_GPIO_Port, &GPIO_InitStruct);
 8000e6a:	f107 0314 	add.w	r3, r7, #20
 8000e6e:	4619      	mov	r1, r3
 8000e70:	4805      	ldr	r0, [pc, #20]	; (8000e88 <MX_GPIO_Init+0x138>)
 8000e72:	f000 fcb3 	bl	80017dc <HAL_GPIO_Init>

}
 8000e76:	bf00      	nop
 8000e78:	3728      	adds	r7, #40	; 0x28
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	bd80      	pop	{r7, pc}
 8000e7e:	bf00      	nop
 8000e80:	40023800 	.word	0x40023800
 8000e84:	40020400 	.word	0x40020400
 8000e88:	40020c00 	.word	0x40020c00
 8000e8c:	40020000 	.word	0x40020000

08000e90 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e90:	b480      	push	{r7}
 8000e92:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e94:	b672      	cpsid	i
}
 8000e96:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e98:	e7fe      	b.n	8000e98 <Error_Handler+0x8>
	...

08000e9c <RetargetInit>:
#define STDOUT_FILENO 1
#define STDERR_FILENO 2

UART_HandleTypeDef *gHuart;

void RetargetInit(UART_HandleTypeDef *huart) {
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b082      	sub	sp, #8
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
  gHuart = huart;
 8000ea4:	4a07      	ldr	r2, [pc, #28]	; (8000ec4 <RetargetInit+0x28>)
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	6013      	str	r3, [r2, #0]

  /* Disable I/O buffering for STDOUT stream, so that
   * chars are sent out as soon as they are printed. */
  setvbuf(stdout, NULL, _IONBF, 0);
 8000eaa:	4b07      	ldr	r3, [pc, #28]	; (8000ec8 <RetargetInit+0x2c>)
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	6898      	ldr	r0, [r3, #8]
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	2202      	movs	r2, #2
 8000eb4:	2100      	movs	r1, #0
 8000eb6:	f008 fc7f 	bl	80097b8 <setvbuf>
}
 8000eba:	bf00      	nop
 8000ebc:	3708      	adds	r7, #8
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bd80      	pop	{r7, pc}
 8000ec2:	bf00      	nop
 8000ec4:	20000290 	.word	0x20000290
 8000ec8:	20000104 	.word	0x20000104

08000ecc <_write>:

  errno = EBADF;
  return 0;
}

int _write(int fd, char* ptr, int len) {
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b086      	sub	sp, #24
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	60f8      	str	r0, [r7, #12]
 8000ed4:	60b9      	str	r1, [r7, #8]
 8000ed6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDOUT_FILENO || fd == STDERR_FILENO) {
 8000ed8:	68fb      	ldr	r3, [r7, #12]
 8000eda:	2b01      	cmp	r3, #1
 8000edc:	d002      	beq.n	8000ee4 <_write+0x18>
 8000ede:	68fb      	ldr	r3, [r7, #12]
 8000ee0:	2b02      	cmp	r3, #2
 8000ee2:	d111      	bne.n	8000f08 <_write+0x3c>
    hstatus = HAL_UART_Transmit(gHuart, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 8000ee4:	4b0e      	ldr	r3, [pc, #56]	; (8000f20 <_write+0x54>)
 8000ee6:	6818      	ldr	r0, [r3, #0]
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	b29a      	uxth	r2, r3
 8000eec:	f04f 33ff 	mov.w	r3, #4294967295
 8000ef0:	68b9      	ldr	r1, [r7, #8]
 8000ef2:	f003 fb00 	bl	80044f6 <HAL_UART_Transmit>
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 8000efa:	7dfb      	ldrb	r3, [r7, #23]
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d101      	bne.n	8000f04 <_write+0x38>
      return len;
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	e008      	b.n	8000f16 <_write+0x4a>
    else
      return EIO;
 8000f04:	2305      	movs	r3, #5
 8000f06:	e006      	b.n	8000f16 <_write+0x4a>
  }
  errno = EBADF;
 8000f08:	f008 fc24 	bl	8009754 <__errno>
 8000f0c:	4603      	mov	r3, r0
 8000f0e:	2209      	movs	r2, #9
 8000f10:	601a      	str	r2, [r3, #0]
  return -1;
 8000f12:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000f16:	4618      	mov	r0, r3
 8000f18:	3718      	adds	r7, #24
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bd80      	pop	{r7, pc}
 8000f1e:	bf00      	nop
 8000f20:	20000290 	.word	0x20000290

08000f24 <_close>:

int _close(int fd) {
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b082      	sub	sp, #8
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	db04      	blt.n	8000f3c <_close+0x18>
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	2b02      	cmp	r3, #2
 8000f36:	dc01      	bgt.n	8000f3c <_close+0x18>
    return 0;
 8000f38:	2300      	movs	r3, #0
 8000f3a:	e006      	b.n	8000f4a <_close+0x26>

  errno = EBADF;
 8000f3c:	f008 fc0a 	bl	8009754 <__errno>
 8000f40:	4603      	mov	r3, r0
 8000f42:	2209      	movs	r2, #9
 8000f44:	601a      	str	r2, [r3, #0]
  return -1;
 8000f46:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	3708      	adds	r7, #8
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	bd80      	pop	{r7, pc}

08000f52 <_lseek>:

int _lseek(int fd, int ptr, int dir) {
 8000f52:	b580      	push	{r7, lr}
 8000f54:	b084      	sub	sp, #16
 8000f56:	af00      	add	r7, sp, #0
 8000f58:	60f8      	str	r0, [r7, #12]
 8000f5a:	60b9      	str	r1, [r7, #8]
 8000f5c:	607a      	str	r2, [r7, #4]
  (void) fd;
  (void) ptr;
  (void) dir;

  errno = EBADF;
 8000f5e:	f008 fbf9 	bl	8009754 <__errno>
 8000f62:	4603      	mov	r3, r0
 8000f64:	2209      	movs	r2, #9
 8000f66:	601a      	str	r2, [r3, #0]
  return -1;
 8000f68:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	3710      	adds	r7, #16
 8000f70:	46bd      	mov	sp, r7
 8000f72:	bd80      	pop	{r7, pc}

08000f74 <_read>:

int _read(int fd, char* ptr, int len) {
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b086      	sub	sp, #24
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	60f8      	str	r0, [r7, #12]
 8000f7c:	60b9      	str	r1, [r7, #8]
 8000f7e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDIN_FILENO) {
 8000f80:	68fb      	ldr	r3, [r7, #12]
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d110      	bne.n	8000fa8 <_read+0x34>
    hstatus = HAL_UART_Receive(gHuart, (uint8_t *) ptr, 1, HAL_MAX_DELAY);
 8000f86:	4b0e      	ldr	r3, [pc, #56]	; (8000fc0 <_read+0x4c>)
 8000f88:	6818      	ldr	r0, [r3, #0]
 8000f8a:	f04f 33ff 	mov.w	r3, #4294967295
 8000f8e:	2201      	movs	r2, #1
 8000f90:	68b9      	ldr	r1, [r7, #8]
 8000f92:	f003 fb42 	bl	800461a <HAL_UART_Receive>
 8000f96:	4603      	mov	r3, r0
 8000f98:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 8000f9a:	7dfb      	ldrb	r3, [r7, #23]
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d101      	bne.n	8000fa4 <_read+0x30>
      return 1;
 8000fa0:	2301      	movs	r3, #1
 8000fa2:	e008      	b.n	8000fb6 <_read+0x42>
    else
      return EIO;
 8000fa4:	2305      	movs	r3, #5
 8000fa6:	e006      	b.n	8000fb6 <_read+0x42>
  }
  errno = EBADF;
 8000fa8:	f008 fbd4 	bl	8009754 <__errno>
 8000fac:	4603      	mov	r3, r0
 8000fae:	2209      	movs	r2, #9
 8000fb0:	601a      	str	r2, [r3, #0]
  return -1;
 8000fb2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	3718      	adds	r7, #24
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	bd80      	pop	{r7, pc}
 8000fbe:	bf00      	nop
 8000fc0:	20000290 	.word	0x20000290

08000fc4 <_fstat>:

int _fstat(int fd, struct stat* st) {
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b082      	sub	sp, #8
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
 8000fcc:	6039      	str	r1, [r7, #0]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO) {
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	db08      	blt.n	8000fe6 <_fstat+0x22>
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	2b02      	cmp	r3, #2
 8000fd8:	dc05      	bgt.n	8000fe6 <_fstat+0x22>
    st->st_mode = S_IFCHR;
 8000fda:	683b      	ldr	r3, [r7, #0]
 8000fdc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000fe0:	605a      	str	r2, [r3, #4]
    return 0;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	e005      	b.n	8000ff2 <_fstat+0x2e>
  }

  errno = EBADF;
 8000fe6:	f008 fbb5 	bl	8009754 <__errno>
 8000fea:	4603      	mov	r3, r0
 8000fec:	2209      	movs	r2, #9
 8000fee:	601a      	str	r2, [r3, #0]
  return 0;
 8000ff0:	2300      	movs	r3, #0
}
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	3708      	adds	r7, #8
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bd80      	pop	{r7, pc}
	...

08000ffc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	b083      	sub	sp, #12
 8001000:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001002:	2300      	movs	r3, #0
 8001004:	607b      	str	r3, [r7, #4]
 8001006:	4b10      	ldr	r3, [pc, #64]	; (8001048 <HAL_MspInit+0x4c>)
 8001008:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800100a:	4a0f      	ldr	r2, [pc, #60]	; (8001048 <HAL_MspInit+0x4c>)
 800100c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001010:	6453      	str	r3, [r2, #68]	; 0x44
 8001012:	4b0d      	ldr	r3, [pc, #52]	; (8001048 <HAL_MspInit+0x4c>)
 8001014:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001016:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800101a:	607b      	str	r3, [r7, #4]
 800101c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800101e:	2300      	movs	r3, #0
 8001020:	603b      	str	r3, [r7, #0]
 8001022:	4b09      	ldr	r3, [pc, #36]	; (8001048 <HAL_MspInit+0x4c>)
 8001024:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001026:	4a08      	ldr	r2, [pc, #32]	; (8001048 <HAL_MspInit+0x4c>)
 8001028:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800102c:	6413      	str	r3, [r2, #64]	; 0x40
 800102e:	4b06      	ldr	r3, [pc, #24]	; (8001048 <HAL_MspInit+0x4c>)
 8001030:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001032:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001036:	603b      	str	r3, [r7, #0]
 8001038:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800103a:	bf00      	nop
 800103c:	370c      	adds	r7, #12
 800103e:	46bd      	mov	sp, r7
 8001040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001044:	4770      	bx	lr
 8001046:	bf00      	nop
 8001048:	40023800 	.word	0x40023800

0800104c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b08a      	sub	sp, #40	; 0x28
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001054:	f107 0314 	add.w	r3, r7, #20
 8001058:	2200      	movs	r2, #0
 800105a:	601a      	str	r2, [r3, #0]
 800105c:	605a      	str	r2, [r3, #4]
 800105e:	609a      	str	r2, [r3, #8]
 8001060:	60da      	str	r2, [r3, #12]
 8001062:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	4a19      	ldr	r2, [pc, #100]	; (80010d0 <HAL_SPI_MspInit+0x84>)
 800106a:	4293      	cmp	r3, r2
 800106c:	d12b      	bne.n	80010c6 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800106e:	2300      	movs	r3, #0
 8001070:	613b      	str	r3, [r7, #16]
 8001072:	4b18      	ldr	r3, [pc, #96]	; (80010d4 <HAL_SPI_MspInit+0x88>)
 8001074:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001076:	4a17      	ldr	r2, [pc, #92]	; (80010d4 <HAL_SPI_MspInit+0x88>)
 8001078:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800107c:	6453      	str	r3, [r2, #68]	; 0x44
 800107e:	4b15      	ldr	r3, [pc, #84]	; (80010d4 <HAL_SPI_MspInit+0x88>)
 8001080:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001082:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001086:	613b      	str	r3, [r7, #16]
 8001088:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800108a:	2300      	movs	r3, #0
 800108c:	60fb      	str	r3, [r7, #12]
 800108e:	4b11      	ldr	r3, [pc, #68]	; (80010d4 <HAL_SPI_MspInit+0x88>)
 8001090:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001092:	4a10      	ldr	r2, [pc, #64]	; (80010d4 <HAL_SPI_MspInit+0x88>)
 8001094:	f043 0301 	orr.w	r3, r3, #1
 8001098:	6313      	str	r3, [r2, #48]	; 0x30
 800109a:	4b0e      	ldr	r3, [pc, #56]	; (80010d4 <HAL_SPI_MspInit+0x88>)
 800109c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800109e:	f003 0301 	and.w	r3, r3, #1
 80010a2:	60fb      	str	r3, [r7, #12]
 80010a4:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = RF_SPI_NSS_Pin|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80010a6:	23f0      	movs	r3, #240	; 0xf0
 80010a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010aa:	2302      	movs	r3, #2
 80010ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ae:	2300      	movs	r3, #0
 80010b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010b2:	2303      	movs	r3, #3
 80010b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80010b6:	2305      	movs	r3, #5
 80010b8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010ba:	f107 0314 	add.w	r3, r7, #20
 80010be:	4619      	mov	r1, r3
 80010c0:	4805      	ldr	r0, [pc, #20]	; (80010d8 <HAL_SPI_MspInit+0x8c>)
 80010c2:	f000 fb8b 	bl	80017dc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80010c6:	bf00      	nop
 80010c8:	3728      	adds	r7, #40	; 0x28
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bd80      	pop	{r7, pc}
 80010ce:	bf00      	nop
 80010d0:	40013000 	.word	0x40013000
 80010d4:	40023800 	.word	0x40023800
 80010d8:	40020000 	.word	0x40020000

080010dc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b08c      	sub	sp, #48	; 0x30
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010e4:	f107 031c 	add.w	r3, r7, #28
 80010e8:	2200      	movs	r2, #0
 80010ea:	601a      	str	r2, [r3, #0]
 80010ec:	605a      	str	r2, [r3, #4]
 80010ee:	609a      	str	r2, [r3, #8]
 80010f0:	60da      	str	r2, [r3, #12]
 80010f2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	4a3a      	ldr	r2, [pc, #232]	; (80011e4 <HAL_UART_MspInit+0x108>)
 80010fa:	4293      	cmp	r3, r2
 80010fc:	d135      	bne.n	800116a <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80010fe:	2300      	movs	r3, #0
 8001100:	61bb      	str	r3, [r7, #24]
 8001102:	4b39      	ldr	r3, [pc, #228]	; (80011e8 <HAL_UART_MspInit+0x10c>)
 8001104:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001106:	4a38      	ldr	r2, [pc, #224]	; (80011e8 <HAL_UART_MspInit+0x10c>)
 8001108:	f043 0310 	orr.w	r3, r3, #16
 800110c:	6453      	str	r3, [r2, #68]	; 0x44
 800110e:	4b36      	ldr	r3, [pc, #216]	; (80011e8 <HAL_UART_MspInit+0x10c>)
 8001110:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001112:	f003 0310 	and.w	r3, r3, #16
 8001116:	61bb      	str	r3, [r7, #24]
 8001118:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800111a:	2300      	movs	r3, #0
 800111c:	617b      	str	r3, [r7, #20]
 800111e:	4b32      	ldr	r3, [pc, #200]	; (80011e8 <HAL_UART_MspInit+0x10c>)
 8001120:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001122:	4a31      	ldr	r2, [pc, #196]	; (80011e8 <HAL_UART_MspInit+0x10c>)
 8001124:	f043 0301 	orr.w	r3, r3, #1
 8001128:	6313      	str	r3, [r2, #48]	; 0x30
 800112a:	4b2f      	ldr	r3, [pc, #188]	; (80011e8 <HAL_UART_MspInit+0x10c>)
 800112c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800112e:	f003 0301 	and.w	r3, r3, #1
 8001132:	617b      	str	r3, [r7, #20]
 8001134:	697b      	ldr	r3, [r7, #20]
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    PA11     ------> USART1_CTS
    PA12     ------> USART1_RTS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8001136:	f44f 53f0 	mov.w	r3, #7680	; 0x1e00
 800113a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800113c:	2302      	movs	r3, #2
 800113e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001140:	2300      	movs	r3, #0
 8001142:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001144:	2303      	movs	r3, #3
 8001146:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001148:	2307      	movs	r3, #7
 800114a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800114c:	f107 031c 	add.w	r3, r7, #28
 8001150:	4619      	mov	r1, r3
 8001152:	4826      	ldr	r0, [pc, #152]	; (80011ec <HAL_UART_MspInit+0x110>)
 8001154:	f000 fb42 	bl	80017dc <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001158:	2200      	movs	r2, #0
 800115a:	2100      	movs	r1, #0
 800115c:	2025      	movs	r0, #37	; 0x25
 800115e:	f000 fa74 	bl	800164a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001162:	2025      	movs	r0, #37	; 0x25
 8001164:	f000 fa8d 	bl	8001682 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001168:	e038      	b.n	80011dc <HAL_UART_MspInit+0x100>
  else if(huart->Instance==USART2)
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	4a20      	ldr	r2, [pc, #128]	; (80011f0 <HAL_UART_MspInit+0x114>)
 8001170:	4293      	cmp	r3, r2
 8001172:	d133      	bne.n	80011dc <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001174:	2300      	movs	r3, #0
 8001176:	613b      	str	r3, [r7, #16]
 8001178:	4b1b      	ldr	r3, [pc, #108]	; (80011e8 <HAL_UART_MspInit+0x10c>)
 800117a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800117c:	4a1a      	ldr	r2, [pc, #104]	; (80011e8 <HAL_UART_MspInit+0x10c>)
 800117e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001182:	6413      	str	r3, [r2, #64]	; 0x40
 8001184:	4b18      	ldr	r3, [pc, #96]	; (80011e8 <HAL_UART_MspInit+0x10c>)
 8001186:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001188:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800118c:	613b      	str	r3, [r7, #16]
 800118e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001190:	2300      	movs	r3, #0
 8001192:	60fb      	str	r3, [r7, #12]
 8001194:	4b14      	ldr	r3, [pc, #80]	; (80011e8 <HAL_UART_MspInit+0x10c>)
 8001196:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001198:	4a13      	ldr	r2, [pc, #76]	; (80011e8 <HAL_UART_MspInit+0x10c>)
 800119a:	f043 0301 	orr.w	r3, r3, #1
 800119e:	6313      	str	r3, [r2, #48]	; 0x30
 80011a0:	4b11      	ldr	r3, [pc, #68]	; (80011e8 <HAL_UART_MspInit+0x10c>)
 80011a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011a4:	f003 0301 	and.w	r3, r3, #1
 80011a8:	60fb      	str	r3, [r7, #12]
 80011aa:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 80011ac:	230f      	movs	r3, #15
 80011ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011b0:	2302      	movs	r3, #2
 80011b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b4:	2300      	movs	r3, #0
 80011b6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011b8:	2303      	movs	r3, #3
 80011ba:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80011bc:	2307      	movs	r3, #7
 80011be:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011c0:	f107 031c 	add.w	r3, r7, #28
 80011c4:	4619      	mov	r1, r3
 80011c6:	4809      	ldr	r0, [pc, #36]	; (80011ec <HAL_UART_MspInit+0x110>)
 80011c8:	f000 fb08 	bl	80017dc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80011cc:	2200      	movs	r2, #0
 80011ce:	2100      	movs	r1, #0
 80011d0:	2026      	movs	r0, #38	; 0x26
 80011d2:	f000 fa3a 	bl	800164a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80011d6:	2026      	movs	r0, #38	; 0x26
 80011d8:	f000 fa53 	bl	8001682 <HAL_NVIC_EnableIRQ>
}
 80011dc:	bf00      	nop
 80011de:	3730      	adds	r7, #48	; 0x30
 80011e0:	46bd      	mov	sp, r7
 80011e2:	bd80      	pop	{r7, pc}
 80011e4:	40011000 	.word	0x40011000
 80011e8:	40023800 	.word	0x40023800
 80011ec:	40020000 	.word	0x40020000
 80011f0:	40004400 	.word	0x40004400

080011f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011f4:	b480      	push	{r7}
 80011f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80011f8:	e7fe      	b.n	80011f8 <NMI_Handler+0x4>

080011fa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011fa:	b480      	push	{r7}
 80011fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011fe:	e7fe      	b.n	80011fe <HardFault_Handler+0x4>

08001200 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001200:	b480      	push	{r7}
 8001202:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001204:	e7fe      	b.n	8001204 <MemManage_Handler+0x4>

08001206 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001206:	b480      	push	{r7}
 8001208:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800120a:	e7fe      	b.n	800120a <BusFault_Handler+0x4>

0800120c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800120c:	b480      	push	{r7}
 800120e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001210:	e7fe      	b.n	8001210 <UsageFault_Handler+0x4>

08001212 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001212:	b480      	push	{r7}
 8001214:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001216:	bf00      	nop
 8001218:	46bd      	mov	sp, r7
 800121a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121e:	4770      	bx	lr

08001220 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001220:	b480      	push	{r7}
 8001222:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001224:	bf00      	nop
 8001226:	46bd      	mov	sp, r7
 8001228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122c:	4770      	bx	lr

0800122e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800122e:	b480      	push	{r7}
 8001230:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001232:	bf00      	nop
 8001234:	46bd      	mov	sp, r7
 8001236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123a:	4770      	bx	lr

0800123c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001240:	f000 f8e4 	bl	800140c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001244:	bf00      	nop
 8001246:	bd80      	pop	{r7, pc}

08001248 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800124c:	4802      	ldr	r0, [pc, #8]	; (8001258 <USART1_IRQHandler+0x10>)
 800124e:	f003 fa87 	bl	8004760 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001252:	bf00      	nop
 8001254:	bd80      	pop	{r7, pc}
 8001256:	bf00      	nop
 8001258:	200001dc 	.word	0x200001dc

0800125c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001260:	4802      	ldr	r0, [pc, #8]	; (800126c <USART2_IRQHandler+0x10>)
 8001262:	f003 fa7d 	bl	8004760 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001266:	bf00      	nop
 8001268:	bd80      	pop	{r7, pc}
 800126a:	bf00      	nop
 800126c:	20000220 	.word	0x20000220

08001270 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
 8001274:	4802      	ldr	r0, [pc, #8]	; (8001280 <OTG_HS_IRQHandler+0x10>)
 8001276:	f000 fdb6 	bl	8001de6 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 800127a:	bf00      	nop
 800127c:	bd80      	pop	{r7, pc}
 800127e:	bf00      	nop
 8001280:	2000177c 	.word	0x2000177c

08001284 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b086      	sub	sp, #24
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800128c:	4a14      	ldr	r2, [pc, #80]	; (80012e0 <_sbrk+0x5c>)
 800128e:	4b15      	ldr	r3, [pc, #84]	; (80012e4 <_sbrk+0x60>)
 8001290:	1ad3      	subs	r3, r2, r3
 8001292:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001294:	697b      	ldr	r3, [r7, #20]
 8001296:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001298:	4b13      	ldr	r3, [pc, #76]	; (80012e8 <_sbrk+0x64>)
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	2b00      	cmp	r3, #0
 800129e:	d102      	bne.n	80012a6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80012a0:	4b11      	ldr	r3, [pc, #68]	; (80012e8 <_sbrk+0x64>)
 80012a2:	4a12      	ldr	r2, [pc, #72]	; (80012ec <_sbrk+0x68>)
 80012a4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80012a6:	4b10      	ldr	r3, [pc, #64]	; (80012e8 <_sbrk+0x64>)
 80012a8:	681a      	ldr	r2, [r3, #0]
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	4413      	add	r3, r2
 80012ae:	693a      	ldr	r2, [r7, #16]
 80012b0:	429a      	cmp	r2, r3
 80012b2:	d207      	bcs.n	80012c4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80012b4:	f008 fa4e 	bl	8009754 <__errno>
 80012b8:	4603      	mov	r3, r0
 80012ba:	220c      	movs	r2, #12
 80012bc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80012be:	f04f 33ff 	mov.w	r3, #4294967295
 80012c2:	e009      	b.n	80012d8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80012c4:	4b08      	ldr	r3, [pc, #32]	; (80012e8 <_sbrk+0x64>)
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80012ca:	4b07      	ldr	r3, [pc, #28]	; (80012e8 <_sbrk+0x64>)
 80012cc:	681a      	ldr	r2, [r3, #0]
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	4413      	add	r3, r2
 80012d2:	4a05      	ldr	r2, [pc, #20]	; (80012e8 <_sbrk+0x64>)
 80012d4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80012d6:	68fb      	ldr	r3, [r7, #12]
}
 80012d8:	4618      	mov	r0, r3
 80012da:	3718      	adds	r7, #24
 80012dc:	46bd      	mov	sp, r7
 80012de:	bd80      	pop	{r7, pc}
 80012e0:	20020000 	.word	0x20020000
 80012e4:	00000400 	.word	0x00000400
 80012e8:	20000294 	.word	0x20000294
 80012ec:	20001eb8 	.word	0x20001eb8

080012f0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80012f0:	b480      	push	{r7}
 80012f2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80012f4:	4b06      	ldr	r3, [pc, #24]	; (8001310 <SystemInit+0x20>)
 80012f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80012fa:	4a05      	ldr	r2, [pc, #20]	; (8001310 <SystemInit+0x20>)
 80012fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001300:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001304:	bf00      	nop
 8001306:	46bd      	mov	sp, r7
 8001308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130c:	4770      	bx	lr
 800130e:	bf00      	nop
 8001310:	e000ed00 	.word	0xe000ed00

08001314 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001314:	f8df d034 	ldr.w	sp, [pc, #52]	; 800134c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001318:	480d      	ldr	r0, [pc, #52]	; (8001350 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800131a:	490e      	ldr	r1, [pc, #56]	; (8001354 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800131c:	4a0e      	ldr	r2, [pc, #56]	; (8001358 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800131e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001320:	e002      	b.n	8001328 <LoopCopyDataInit>

08001322 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001322:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001324:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001326:	3304      	adds	r3, #4

08001328 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001328:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800132a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800132c:	d3f9      	bcc.n	8001322 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800132e:	4a0b      	ldr	r2, [pc, #44]	; (800135c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001330:	4c0b      	ldr	r4, [pc, #44]	; (8001360 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001332:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001334:	e001      	b.n	800133a <LoopFillZerobss>

08001336 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001336:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001338:	3204      	adds	r2, #4

0800133a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800133a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800133c:	d3fb      	bcc.n	8001336 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800133e:	f7ff ffd7 	bl	80012f0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001342:	f008 fa0d 	bl	8009760 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001346:	f7ff fba3 	bl	8000a90 <main>
  bx  lr    
 800134a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800134c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001350:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001354:	20000168 	.word	0x20000168
  ldr r2, =_sidata
 8001358:	0800a130 	.word	0x0800a130
  ldr r2, =_sbss
 800135c:	20000168 	.word	0x20000168
  ldr r4, =_ebss
 8001360:	20001eb8 	.word	0x20001eb8

08001364 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001364:	e7fe      	b.n	8001364 <ADC_IRQHandler>
	...

08001368 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800136c:	4b0e      	ldr	r3, [pc, #56]	; (80013a8 <HAL_Init+0x40>)
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	4a0d      	ldr	r2, [pc, #52]	; (80013a8 <HAL_Init+0x40>)
 8001372:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001376:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001378:	4b0b      	ldr	r3, [pc, #44]	; (80013a8 <HAL_Init+0x40>)
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	4a0a      	ldr	r2, [pc, #40]	; (80013a8 <HAL_Init+0x40>)
 800137e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001382:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001384:	4b08      	ldr	r3, [pc, #32]	; (80013a8 <HAL_Init+0x40>)
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	4a07      	ldr	r2, [pc, #28]	; (80013a8 <HAL_Init+0x40>)
 800138a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800138e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001390:	2003      	movs	r0, #3
 8001392:	f000 f94f 	bl	8001634 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001396:	200f      	movs	r0, #15
 8001398:	f000 f808 	bl	80013ac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800139c:	f7ff fe2e 	bl	8000ffc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80013a0:	2300      	movs	r3, #0
}
 80013a2:	4618      	mov	r0, r3
 80013a4:	bd80      	pop	{r7, pc}
 80013a6:	bf00      	nop
 80013a8:	40023c00 	.word	0x40023c00

080013ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b082      	sub	sp, #8
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80013b4:	4b12      	ldr	r3, [pc, #72]	; (8001400 <HAL_InitTick+0x54>)
 80013b6:	681a      	ldr	r2, [r3, #0]
 80013b8:	4b12      	ldr	r3, [pc, #72]	; (8001404 <HAL_InitTick+0x58>)
 80013ba:	781b      	ldrb	r3, [r3, #0]
 80013bc:	4619      	mov	r1, r3
 80013be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80013c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80013ca:	4618      	mov	r0, r3
 80013cc:	f000 f967 	bl	800169e <HAL_SYSTICK_Config>
 80013d0:	4603      	mov	r3, r0
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d001      	beq.n	80013da <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80013d6:	2301      	movs	r3, #1
 80013d8:	e00e      	b.n	80013f8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	2b0f      	cmp	r3, #15
 80013de:	d80a      	bhi.n	80013f6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80013e0:	2200      	movs	r2, #0
 80013e2:	6879      	ldr	r1, [r7, #4]
 80013e4:	f04f 30ff 	mov.w	r0, #4294967295
 80013e8:	f000 f92f 	bl	800164a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80013ec:	4a06      	ldr	r2, [pc, #24]	; (8001408 <HAL_InitTick+0x5c>)
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80013f2:	2300      	movs	r3, #0
 80013f4:	e000      	b.n	80013f8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80013f6:	2301      	movs	r3, #1
}
 80013f8:	4618      	mov	r0, r3
 80013fa:	3708      	adds	r7, #8
 80013fc:	46bd      	mov	sp, r7
 80013fe:	bd80      	pop	{r7, pc}
 8001400:	20000008 	.word	0x20000008
 8001404:	20000010 	.word	0x20000010
 8001408:	2000000c 	.word	0x2000000c

0800140c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800140c:	b480      	push	{r7}
 800140e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001410:	4b06      	ldr	r3, [pc, #24]	; (800142c <HAL_IncTick+0x20>)
 8001412:	781b      	ldrb	r3, [r3, #0]
 8001414:	461a      	mov	r2, r3
 8001416:	4b06      	ldr	r3, [pc, #24]	; (8001430 <HAL_IncTick+0x24>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	4413      	add	r3, r2
 800141c:	4a04      	ldr	r2, [pc, #16]	; (8001430 <HAL_IncTick+0x24>)
 800141e:	6013      	str	r3, [r2, #0]
}
 8001420:	bf00      	nop
 8001422:	46bd      	mov	sp, r7
 8001424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001428:	4770      	bx	lr
 800142a:	bf00      	nop
 800142c:	20000010 	.word	0x20000010
 8001430:	20000298 	.word	0x20000298

08001434 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001434:	b480      	push	{r7}
 8001436:	af00      	add	r7, sp, #0
  return uwTick;
 8001438:	4b03      	ldr	r3, [pc, #12]	; (8001448 <HAL_GetTick+0x14>)
 800143a:	681b      	ldr	r3, [r3, #0]
}
 800143c:	4618      	mov	r0, r3
 800143e:	46bd      	mov	sp, r7
 8001440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001444:	4770      	bx	lr
 8001446:	bf00      	nop
 8001448:	20000298 	.word	0x20000298

0800144c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b084      	sub	sp, #16
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001454:	f7ff ffee 	bl	8001434 <HAL_GetTick>
 8001458:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800145e:	68fb      	ldr	r3, [r7, #12]
 8001460:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001464:	d005      	beq.n	8001472 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001466:	4b0a      	ldr	r3, [pc, #40]	; (8001490 <HAL_Delay+0x44>)
 8001468:	781b      	ldrb	r3, [r3, #0]
 800146a:	461a      	mov	r2, r3
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	4413      	add	r3, r2
 8001470:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001472:	bf00      	nop
 8001474:	f7ff ffde 	bl	8001434 <HAL_GetTick>
 8001478:	4602      	mov	r2, r0
 800147a:	68bb      	ldr	r3, [r7, #8]
 800147c:	1ad3      	subs	r3, r2, r3
 800147e:	68fa      	ldr	r2, [r7, #12]
 8001480:	429a      	cmp	r2, r3
 8001482:	d8f7      	bhi.n	8001474 <HAL_Delay+0x28>
  {
  }
}
 8001484:	bf00      	nop
 8001486:	bf00      	nop
 8001488:	3710      	adds	r7, #16
 800148a:	46bd      	mov	sp, r7
 800148c:	bd80      	pop	{r7, pc}
 800148e:	bf00      	nop
 8001490:	20000010 	.word	0x20000010

08001494 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001494:	b480      	push	{r7}
 8001496:	b085      	sub	sp, #20
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	f003 0307 	and.w	r3, r3, #7
 80014a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014a4:	4b0c      	ldr	r3, [pc, #48]	; (80014d8 <__NVIC_SetPriorityGrouping+0x44>)
 80014a6:	68db      	ldr	r3, [r3, #12]
 80014a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014aa:	68ba      	ldr	r2, [r7, #8]
 80014ac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80014b0:	4013      	ands	r3, r2
 80014b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014b8:	68bb      	ldr	r3, [r7, #8]
 80014ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80014bc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80014c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80014c6:	4a04      	ldr	r2, [pc, #16]	; (80014d8 <__NVIC_SetPriorityGrouping+0x44>)
 80014c8:	68bb      	ldr	r3, [r7, #8]
 80014ca:	60d3      	str	r3, [r2, #12]
}
 80014cc:	bf00      	nop
 80014ce:	3714      	adds	r7, #20
 80014d0:	46bd      	mov	sp, r7
 80014d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d6:	4770      	bx	lr
 80014d8:	e000ed00 	.word	0xe000ed00

080014dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80014dc:	b480      	push	{r7}
 80014de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014e0:	4b04      	ldr	r3, [pc, #16]	; (80014f4 <__NVIC_GetPriorityGrouping+0x18>)
 80014e2:	68db      	ldr	r3, [r3, #12]
 80014e4:	0a1b      	lsrs	r3, r3, #8
 80014e6:	f003 0307 	and.w	r3, r3, #7
}
 80014ea:	4618      	mov	r0, r3
 80014ec:	46bd      	mov	sp, r7
 80014ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f2:	4770      	bx	lr
 80014f4:	e000ed00 	.word	0xe000ed00

080014f8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014f8:	b480      	push	{r7}
 80014fa:	b083      	sub	sp, #12
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	4603      	mov	r3, r0
 8001500:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001502:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001506:	2b00      	cmp	r3, #0
 8001508:	db0b      	blt.n	8001522 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800150a:	79fb      	ldrb	r3, [r7, #7]
 800150c:	f003 021f 	and.w	r2, r3, #31
 8001510:	4907      	ldr	r1, [pc, #28]	; (8001530 <__NVIC_EnableIRQ+0x38>)
 8001512:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001516:	095b      	lsrs	r3, r3, #5
 8001518:	2001      	movs	r0, #1
 800151a:	fa00 f202 	lsl.w	r2, r0, r2
 800151e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001522:	bf00      	nop
 8001524:	370c      	adds	r7, #12
 8001526:	46bd      	mov	sp, r7
 8001528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152c:	4770      	bx	lr
 800152e:	bf00      	nop
 8001530:	e000e100 	.word	0xe000e100

08001534 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001534:	b480      	push	{r7}
 8001536:	b083      	sub	sp, #12
 8001538:	af00      	add	r7, sp, #0
 800153a:	4603      	mov	r3, r0
 800153c:	6039      	str	r1, [r7, #0]
 800153e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001540:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001544:	2b00      	cmp	r3, #0
 8001546:	db0a      	blt.n	800155e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001548:	683b      	ldr	r3, [r7, #0]
 800154a:	b2da      	uxtb	r2, r3
 800154c:	490c      	ldr	r1, [pc, #48]	; (8001580 <__NVIC_SetPriority+0x4c>)
 800154e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001552:	0112      	lsls	r2, r2, #4
 8001554:	b2d2      	uxtb	r2, r2
 8001556:	440b      	add	r3, r1
 8001558:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800155c:	e00a      	b.n	8001574 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800155e:	683b      	ldr	r3, [r7, #0]
 8001560:	b2da      	uxtb	r2, r3
 8001562:	4908      	ldr	r1, [pc, #32]	; (8001584 <__NVIC_SetPriority+0x50>)
 8001564:	79fb      	ldrb	r3, [r7, #7]
 8001566:	f003 030f 	and.w	r3, r3, #15
 800156a:	3b04      	subs	r3, #4
 800156c:	0112      	lsls	r2, r2, #4
 800156e:	b2d2      	uxtb	r2, r2
 8001570:	440b      	add	r3, r1
 8001572:	761a      	strb	r2, [r3, #24]
}
 8001574:	bf00      	nop
 8001576:	370c      	adds	r7, #12
 8001578:	46bd      	mov	sp, r7
 800157a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157e:	4770      	bx	lr
 8001580:	e000e100 	.word	0xe000e100
 8001584:	e000ed00 	.word	0xe000ed00

08001588 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001588:	b480      	push	{r7}
 800158a:	b089      	sub	sp, #36	; 0x24
 800158c:	af00      	add	r7, sp, #0
 800158e:	60f8      	str	r0, [r7, #12]
 8001590:	60b9      	str	r1, [r7, #8]
 8001592:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	f003 0307 	and.w	r3, r3, #7
 800159a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800159c:	69fb      	ldr	r3, [r7, #28]
 800159e:	f1c3 0307 	rsb	r3, r3, #7
 80015a2:	2b04      	cmp	r3, #4
 80015a4:	bf28      	it	cs
 80015a6:	2304      	movcs	r3, #4
 80015a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015aa:	69fb      	ldr	r3, [r7, #28]
 80015ac:	3304      	adds	r3, #4
 80015ae:	2b06      	cmp	r3, #6
 80015b0:	d902      	bls.n	80015b8 <NVIC_EncodePriority+0x30>
 80015b2:	69fb      	ldr	r3, [r7, #28]
 80015b4:	3b03      	subs	r3, #3
 80015b6:	e000      	b.n	80015ba <NVIC_EncodePriority+0x32>
 80015b8:	2300      	movs	r3, #0
 80015ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015bc:	f04f 32ff 	mov.w	r2, #4294967295
 80015c0:	69bb      	ldr	r3, [r7, #24]
 80015c2:	fa02 f303 	lsl.w	r3, r2, r3
 80015c6:	43da      	mvns	r2, r3
 80015c8:	68bb      	ldr	r3, [r7, #8]
 80015ca:	401a      	ands	r2, r3
 80015cc:	697b      	ldr	r3, [r7, #20]
 80015ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015d0:	f04f 31ff 	mov.w	r1, #4294967295
 80015d4:	697b      	ldr	r3, [r7, #20]
 80015d6:	fa01 f303 	lsl.w	r3, r1, r3
 80015da:	43d9      	mvns	r1, r3
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015e0:	4313      	orrs	r3, r2
         );
}
 80015e2:	4618      	mov	r0, r3
 80015e4:	3724      	adds	r7, #36	; 0x24
 80015e6:	46bd      	mov	sp, r7
 80015e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ec:	4770      	bx	lr
	...

080015f0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b082      	sub	sp, #8
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	3b01      	subs	r3, #1
 80015fc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001600:	d301      	bcc.n	8001606 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001602:	2301      	movs	r3, #1
 8001604:	e00f      	b.n	8001626 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001606:	4a0a      	ldr	r2, [pc, #40]	; (8001630 <SysTick_Config+0x40>)
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	3b01      	subs	r3, #1
 800160c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800160e:	210f      	movs	r1, #15
 8001610:	f04f 30ff 	mov.w	r0, #4294967295
 8001614:	f7ff ff8e 	bl	8001534 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001618:	4b05      	ldr	r3, [pc, #20]	; (8001630 <SysTick_Config+0x40>)
 800161a:	2200      	movs	r2, #0
 800161c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800161e:	4b04      	ldr	r3, [pc, #16]	; (8001630 <SysTick_Config+0x40>)
 8001620:	2207      	movs	r2, #7
 8001622:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001624:	2300      	movs	r3, #0
}
 8001626:	4618      	mov	r0, r3
 8001628:	3708      	adds	r7, #8
 800162a:	46bd      	mov	sp, r7
 800162c:	bd80      	pop	{r7, pc}
 800162e:	bf00      	nop
 8001630:	e000e010 	.word	0xe000e010

08001634 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b082      	sub	sp, #8
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800163c:	6878      	ldr	r0, [r7, #4]
 800163e:	f7ff ff29 	bl	8001494 <__NVIC_SetPriorityGrouping>
}
 8001642:	bf00      	nop
 8001644:	3708      	adds	r7, #8
 8001646:	46bd      	mov	sp, r7
 8001648:	bd80      	pop	{r7, pc}

0800164a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800164a:	b580      	push	{r7, lr}
 800164c:	b086      	sub	sp, #24
 800164e:	af00      	add	r7, sp, #0
 8001650:	4603      	mov	r3, r0
 8001652:	60b9      	str	r1, [r7, #8]
 8001654:	607a      	str	r2, [r7, #4]
 8001656:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001658:	2300      	movs	r3, #0
 800165a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800165c:	f7ff ff3e 	bl	80014dc <__NVIC_GetPriorityGrouping>
 8001660:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001662:	687a      	ldr	r2, [r7, #4]
 8001664:	68b9      	ldr	r1, [r7, #8]
 8001666:	6978      	ldr	r0, [r7, #20]
 8001668:	f7ff ff8e 	bl	8001588 <NVIC_EncodePriority>
 800166c:	4602      	mov	r2, r0
 800166e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001672:	4611      	mov	r1, r2
 8001674:	4618      	mov	r0, r3
 8001676:	f7ff ff5d 	bl	8001534 <__NVIC_SetPriority>
}
 800167a:	bf00      	nop
 800167c:	3718      	adds	r7, #24
 800167e:	46bd      	mov	sp, r7
 8001680:	bd80      	pop	{r7, pc}

08001682 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001682:	b580      	push	{r7, lr}
 8001684:	b082      	sub	sp, #8
 8001686:	af00      	add	r7, sp, #0
 8001688:	4603      	mov	r3, r0
 800168a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800168c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001690:	4618      	mov	r0, r3
 8001692:	f7ff ff31 	bl	80014f8 <__NVIC_EnableIRQ>
}
 8001696:	bf00      	nop
 8001698:	3708      	adds	r7, #8
 800169a:	46bd      	mov	sp, r7
 800169c:	bd80      	pop	{r7, pc}

0800169e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800169e:	b580      	push	{r7, lr}
 80016a0:	b082      	sub	sp, #8
 80016a2:	af00      	add	r7, sp, #0
 80016a4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80016a6:	6878      	ldr	r0, [r7, #4]
 80016a8:	f7ff ffa2 	bl	80015f0 <SysTick_Config>
 80016ac:	4603      	mov	r3, r0
}
 80016ae:	4618      	mov	r0, r3
 80016b0:	3708      	adds	r7, #8
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bd80      	pop	{r7, pc}

080016b6 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80016b6:	b580      	push	{r7, lr}
 80016b8:	b084      	sub	sp, #16
 80016ba:	af00      	add	r7, sp, #0
 80016bc:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016c2:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80016c4:	f7ff feb6 	bl	8001434 <HAL_GetTick>
 80016c8:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80016d0:	b2db      	uxtb	r3, r3
 80016d2:	2b02      	cmp	r3, #2
 80016d4:	d008      	beq.n	80016e8 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	2280      	movs	r2, #128	; 0x80
 80016da:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	2200      	movs	r2, #0
 80016e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80016e4:	2301      	movs	r3, #1
 80016e6:	e052      	b.n	800178e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	681a      	ldr	r2, [r3, #0]
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	f022 0216 	bic.w	r2, r2, #22
 80016f6:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	695a      	ldr	r2, [r3, #20]
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001706:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800170c:	2b00      	cmp	r3, #0
 800170e:	d103      	bne.n	8001718 <HAL_DMA_Abort+0x62>
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001714:	2b00      	cmp	r3, #0
 8001716:	d007      	beq.n	8001728 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	681a      	ldr	r2, [r3, #0]
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f022 0208 	bic.w	r2, r2, #8
 8001726:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	681a      	ldr	r2, [r3, #0]
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	f022 0201 	bic.w	r2, r2, #1
 8001736:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001738:	e013      	b.n	8001762 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800173a:	f7ff fe7b 	bl	8001434 <HAL_GetTick>
 800173e:	4602      	mov	r2, r0
 8001740:	68bb      	ldr	r3, [r7, #8]
 8001742:	1ad3      	subs	r3, r2, r3
 8001744:	2b05      	cmp	r3, #5
 8001746:	d90c      	bls.n	8001762 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	2220      	movs	r2, #32
 800174c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	2203      	movs	r2, #3
 8001752:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	2200      	movs	r2, #0
 800175a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800175e:	2303      	movs	r3, #3
 8001760:	e015      	b.n	800178e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	f003 0301 	and.w	r3, r3, #1
 800176c:	2b00      	cmp	r3, #0
 800176e:	d1e4      	bne.n	800173a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001774:	223f      	movs	r2, #63	; 0x3f
 8001776:	409a      	lsls	r2, r3
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	2201      	movs	r2, #1
 8001780:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	2200      	movs	r2, #0
 8001788:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800178c:	2300      	movs	r3, #0
}
 800178e:	4618      	mov	r0, r3
 8001790:	3710      	adds	r7, #16
 8001792:	46bd      	mov	sp, r7
 8001794:	bd80      	pop	{r7, pc}

08001796 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001796:	b480      	push	{r7}
 8001798:	b083      	sub	sp, #12
 800179a:	af00      	add	r7, sp, #0
 800179c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80017a4:	b2db      	uxtb	r3, r3
 80017a6:	2b02      	cmp	r3, #2
 80017a8:	d004      	beq.n	80017b4 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	2280      	movs	r2, #128	; 0x80
 80017ae:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80017b0:	2301      	movs	r3, #1
 80017b2:	e00c      	b.n	80017ce <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	2205      	movs	r2, #5
 80017b8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	681a      	ldr	r2, [r3, #0]
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	f022 0201 	bic.w	r2, r2, #1
 80017ca:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80017cc:	2300      	movs	r3, #0
}
 80017ce:	4618      	mov	r0, r3
 80017d0:	370c      	adds	r7, #12
 80017d2:	46bd      	mov	sp, r7
 80017d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d8:	4770      	bx	lr
	...

080017dc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80017dc:	b480      	push	{r7}
 80017de:	b089      	sub	sp, #36	; 0x24
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
 80017e4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80017e6:	2300      	movs	r3, #0
 80017e8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80017ea:	2300      	movs	r3, #0
 80017ec:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80017ee:	2300      	movs	r3, #0
 80017f0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80017f2:	2300      	movs	r3, #0
 80017f4:	61fb      	str	r3, [r7, #28]
 80017f6:	e16b      	b.n	8001ad0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80017f8:	2201      	movs	r2, #1
 80017fa:	69fb      	ldr	r3, [r7, #28]
 80017fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001800:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001802:	683b      	ldr	r3, [r7, #0]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	697a      	ldr	r2, [r7, #20]
 8001808:	4013      	ands	r3, r2
 800180a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800180c:	693a      	ldr	r2, [r7, #16]
 800180e:	697b      	ldr	r3, [r7, #20]
 8001810:	429a      	cmp	r2, r3
 8001812:	f040 815a 	bne.w	8001aca <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001816:	683b      	ldr	r3, [r7, #0]
 8001818:	685b      	ldr	r3, [r3, #4]
 800181a:	f003 0303 	and.w	r3, r3, #3
 800181e:	2b01      	cmp	r3, #1
 8001820:	d005      	beq.n	800182e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001822:	683b      	ldr	r3, [r7, #0]
 8001824:	685b      	ldr	r3, [r3, #4]
 8001826:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800182a:	2b02      	cmp	r3, #2
 800182c:	d130      	bne.n	8001890 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	689b      	ldr	r3, [r3, #8]
 8001832:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001834:	69fb      	ldr	r3, [r7, #28]
 8001836:	005b      	lsls	r3, r3, #1
 8001838:	2203      	movs	r2, #3
 800183a:	fa02 f303 	lsl.w	r3, r2, r3
 800183e:	43db      	mvns	r3, r3
 8001840:	69ba      	ldr	r2, [r7, #24]
 8001842:	4013      	ands	r3, r2
 8001844:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001846:	683b      	ldr	r3, [r7, #0]
 8001848:	68da      	ldr	r2, [r3, #12]
 800184a:	69fb      	ldr	r3, [r7, #28]
 800184c:	005b      	lsls	r3, r3, #1
 800184e:	fa02 f303 	lsl.w	r3, r2, r3
 8001852:	69ba      	ldr	r2, [r7, #24]
 8001854:	4313      	orrs	r3, r2
 8001856:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	69ba      	ldr	r2, [r7, #24]
 800185c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	685b      	ldr	r3, [r3, #4]
 8001862:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001864:	2201      	movs	r2, #1
 8001866:	69fb      	ldr	r3, [r7, #28]
 8001868:	fa02 f303 	lsl.w	r3, r2, r3
 800186c:	43db      	mvns	r3, r3
 800186e:	69ba      	ldr	r2, [r7, #24]
 8001870:	4013      	ands	r3, r2
 8001872:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001874:	683b      	ldr	r3, [r7, #0]
 8001876:	685b      	ldr	r3, [r3, #4]
 8001878:	091b      	lsrs	r3, r3, #4
 800187a:	f003 0201 	and.w	r2, r3, #1
 800187e:	69fb      	ldr	r3, [r7, #28]
 8001880:	fa02 f303 	lsl.w	r3, r2, r3
 8001884:	69ba      	ldr	r2, [r7, #24]
 8001886:	4313      	orrs	r3, r2
 8001888:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	69ba      	ldr	r2, [r7, #24]
 800188e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001890:	683b      	ldr	r3, [r7, #0]
 8001892:	685b      	ldr	r3, [r3, #4]
 8001894:	f003 0303 	and.w	r3, r3, #3
 8001898:	2b03      	cmp	r3, #3
 800189a:	d017      	beq.n	80018cc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	68db      	ldr	r3, [r3, #12]
 80018a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80018a2:	69fb      	ldr	r3, [r7, #28]
 80018a4:	005b      	lsls	r3, r3, #1
 80018a6:	2203      	movs	r2, #3
 80018a8:	fa02 f303 	lsl.w	r3, r2, r3
 80018ac:	43db      	mvns	r3, r3
 80018ae:	69ba      	ldr	r2, [r7, #24]
 80018b0:	4013      	ands	r3, r2
 80018b2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80018b4:	683b      	ldr	r3, [r7, #0]
 80018b6:	689a      	ldr	r2, [r3, #8]
 80018b8:	69fb      	ldr	r3, [r7, #28]
 80018ba:	005b      	lsls	r3, r3, #1
 80018bc:	fa02 f303 	lsl.w	r3, r2, r3
 80018c0:	69ba      	ldr	r2, [r7, #24]
 80018c2:	4313      	orrs	r3, r2
 80018c4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	69ba      	ldr	r2, [r7, #24]
 80018ca:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80018cc:	683b      	ldr	r3, [r7, #0]
 80018ce:	685b      	ldr	r3, [r3, #4]
 80018d0:	f003 0303 	and.w	r3, r3, #3
 80018d4:	2b02      	cmp	r3, #2
 80018d6:	d123      	bne.n	8001920 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80018d8:	69fb      	ldr	r3, [r7, #28]
 80018da:	08da      	lsrs	r2, r3, #3
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	3208      	adds	r2, #8
 80018e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80018e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80018e6:	69fb      	ldr	r3, [r7, #28]
 80018e8:	f003 0307 	and.w	r3, r3, #7
 80018ec:	009b      	lsls	r3, r3, #2
 80018ee:	220f      	movs	r2, #15
 80018f0:	fa02 f303 	lsl.w	r3, r2, r3
 80018f4:	43db      	mvns	r3, r3
 80018f6:	69ba      	ldr	r2, [r7, #24]
 80018f8:	4013      	ands	r3, r2
 80018fa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80018fc:	683b      	ldr	r3, [r7, #0]
 80018fe:	691a      	ldr	r2, [r3, #16]
 8001900:	69fb      	ldr	r3, [r7, #28]
 8001902:	f003 0307 	and.w	r3, r3, #7
 8001906:	009b      	lsls	r3, r3, #2
 8001908:	fa02 f303 	lsl.w	r3, r2, r3
 800190c:	69ba      	ldr	r2, [r7, #24]
 800190e:	4313      	orrs	r3, r2
 8001910:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001912:	69fb      	ldr	r3, [r7, #28]
 8001914:	08da      	lsrs	r2, r3, #3
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	3208      	adds	r2, #8
 800191a:	69b9      	ldr	r1, [r7, #24]
 800191c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001926:	69fb      	ldr	r3, [r7, #28]
 8001928:	005b      	lsls	r3, r3, #1
 800192a:	2203      	movs	r2, #3
 800192c:	fa02 f303 	lsl.w	r3, r2, r3
 8001930:	43db      	mvns	r3, r3
 8001932:	69ba      	ldr	r2, [r7, #24]
 8001934:	4013      	ands	r3, r2
 8001936:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001938:	683b      	ldr	r3, [r7, #0]
 800193a:	685b      	ldr	r3, [r3, #4]
 800193c:	f003 0203 	and.w	r2, r3, #3
 8001940:	69fb      	ldr	r3, [r7, #28]
 8001942:	005b      	lsls	r3, r3, #1
 8001944:	fa02 f303 	lsl.w	r3, r2, r3
 8001948:	69ba      	ldr	r2, [r7, #24]
 800194a:	4313      	orrs	r3, r2
 800194c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	69ba      	ldr	r2, [r7, #24]
 8001952:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001954:	683b      	ldr	r3, [r7, #0]
 8001956:	685b      	ldr	r3, [r3, #4]
 8001958:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800195c:	2b00      	cmp	r3, #0
 800195e:	f000 80b4 	beq.w	8001aca <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001962:	2300      	movs	r3, #0
 8001964:	60fb      	str	r3, [r7, #12]
 8001966:	4b60      	ldr	r3, [pc, #384]	; (8001ae8 <HAL_GPIO_Init+0x30c>)
 8001968:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800196a:	4a5f      	ldr	r2, [pc, #380]	; (8001ae8 <HAL_GPIO_Init+0x30c>)
 800196c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001970:	6453      	str	r3, [r2, #68]	; 0x44
 8001972:	4b5d      	ldr	r3, [pc, #372]	; (8001ae8 <HAL_GPIO_Init+0x30c>)
 8001974:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001976:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800197a:	60fb      	str	r3, [r7, #12]
 800197c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800197e:	4a5b      	ldr	r2, [pc, #364]	; (8001aec <HAL_GPIO_Init+0x310>)
 8001980:	69fb      	ldr	r3, [r7, #28]
 8001982:	089b      	lsrs	r3, r3, #2
 8001984:	3302      	adds	r3, #2
 8001986:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800198a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800198c:	69fb      	ldr	r3, [r7, #28]
 800198e:	f003 0303 	and.w	r3, r3, #3
 8001992:	009b      	lsls	r3, r3, #2
 8001994:	220f      	movs	r2, #15
 8001996:	fa02 f303 	lsl.w	r3, r2, r3
 800199a:	43db      	mvns	r3, r3
 800199c:	69ba      	ldr	r2, [r7, #24]
 800199e:	4013      	ands	r3, r2
 80019a0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	4a52      	ldr	r2, [pc, #328]	; (8001af0 <HAL_GPIO_Init+0x314>)
 80019a6:	4293      	cmp	r3, r2
 80019a8:	d02b      	beq.n	8001a02 <HAL_GPIO_Init+0x226>
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	4a51      	ldr	r2, [pc, #324]	; (8001af4 <HAL_GPIO_Init+0x318>)
 80019ae:	4293      	cmp	r3, r2
 80019b0:	d025      	beq.n	80019fe <HAL_GPIO_Init+0x222>
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	4a50      	ldr	r2, [pc, #320]	; (8001af8 <HAL_GPIO_Init+0x31c>)
 80019b6:	4293      	cmp	r3, r2
 80019b8:	d01f      	beq.n	80019fa <HAL_GPIO_Init+0x21e>
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	4a4f      	ldr	r2, [pc, #316]	; (8001afc <HAL_GPIO_Init+0x320>)
 80019be:	4293      	cmp	r3, r2
 80019c0:	d019      	beq.n	80019f6 <HAL_GPIO_Init+0x21a>
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	4a4e      	ldr	r2, [pc, #312]	; (8001b00 <HAL_GPIO_Init+0x324>)
 80019c6:	4293      	cmp	r3, r2
 80019c8:	d013      	beq.n	80019f2 <HAL_GPIO_Init+0x216>
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	4a4d      	ldr	r2, [pc, #308]	; (8001b04 <HAL_GPIO_Init+0x328>)
 80019ce:	4293      	cmp	r3, r2
 80019d0:	d00d      	beq.n	80019ee <HAL_GPIO_Init+0x212>
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	4a4c      	ldr	r2, [pc, #304]	; (8001b08 <HAL_GPIO_Init+0x32c>)
 80019d6:	4293      	cmp	r3, r2
 80019d8:	d007      	beq.n	80019ea <HAL_GPIO_Init+0x20e>
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	4a4b      	ldr	r2, [pc, #300]	; (8001b0c <HAL_GPIO_Init+0x330>)
 80019de:	4293      	cmp	r3, r2
 80019e0:	d101      	bne.n	80019e6 <HAL_GPIO_Init+0x20a>
 80019e2:	2307      	movs	r3, #7
 80019e4:	e00e      	b.n	8001a04 <HAL_GPIO_Init+0x228>
 80019e6:	2308      	movs	r3, #8
 80019e8:	e00c      	b.n	8001a04 <HAL_GPIO_Init+0x228>
 80019ea:	2306      	movs	r3, #6
 80019ec:	e00a      	b.n	8001a04 <HAL_GPIO_Init+0x228>
 80019ee:	2305      	movs	r3, #5
 80019f0:	e008      	b.n	8001a04 <HAL_GPIO_Init+0x228>
 80019f2:	2304      	movs	r3, #4
 80019f4:	e006      	b.n	8001a04 <HAL_GPIO_Init+0x228>
 80019f6:	2303      	movs	r3, #3
 80019f8:	e004      	b.n	8001a04 <HAL_GPIO_Init+0x228>
 80019fa:	2302      	movs	r3, #2
 80019fc:	e002      	b.n	8001a04 <HAL_GPIO_Init+0x228>
 80019fe:	2301      	movs	r3, #1
 8001a00:	e000      	b.n	8001a04 <HAL_GPIO_Init+0x228>
 8001a02:	2300      	movs	r3, #0
 8001a04:	69fa      	ldr	r2, [r7, #28]
 8001a06:	f002 0203 	and.w	r2, r2, #3
 8001a0a:	0092      	lsls	r2, r2, #2
 8001a0c:	4093      	lsls	r3, r2
 8001a0e:	69ba      	ldr	r2, [r7, #24]
 8001a10:	4313      	orrs	r3, r2
 8001a12:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001a14:	4935      	ldr	r1, [pc, #212]	; (8001aec <HAL_GPIO_Init+0x310>)
 8001a16:	69fb      	ldr	r3, [r7, #28]
 8001a18:	089b      	lsrs	r3, r3, #2
 8001a1a:	3302      	adds	r3, #2
 8001a1c:	69ba      	ldr	r2, [r7, #24]
 8001a1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001a22:	4b3b      	ldr	r3, [pc, #236]	; (8001b10 <HAL_GPIO_Init+0x334>)
 8001a24:	689b      	ldr	r3, [r3, #8]
 8001a26:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a28:	693b      	ldr	r3, [r7, #16]
 8001a2a:	43db      	mvns	r3, r3
 8001a2c:	69ba      	ldr	r2, [r7, #24]
 8001a2e:	4013      	ands	r3, r2
 8001a30:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001a32:	683b      	ldr	r3, [r7, #0]
 8001a34:	685b      	ldr	r3, [r3, #4]
 8001a36:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d003      	beq.n	8001a46 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001a3e:	69ba      	ldr	r2, [r7, #24]
 8001a40:	693b      	ldr	r3, [r7, #16]
 8001a42:	4313      	orrs	r3, r2
 8001a44:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001a46:	4a32      	ldr	r2, [pc, #200]	; (8001b10 <HAL_GPIO_Init+0x334>)
 8001a48:	69bb      	ldr	r3, [r7, #24]
 8001a4a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001a4c:	4b30      	ldr	r3, [pc, #192]	; (8001b10 <HAL_GPIO_Init+0x334>)
 8001a4e:	68db      	ldr	r3, [r3, #12]
 8001a50:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a52:	693b      	ldr	r3, [r7, #16]
 8001a54:	43db      	mvns	r3, r3
 8001a56:	69ba      	ldr	r2, [r7, #24]
 8001a58:	4013      	ands	r3, r2
 8001a5a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001a5c:	683b      	ldr	r3, [r7, #0]
 8001a5e:	685b      	ldr	r3, [r3, #4]
 8001a60:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d003      	beq.n	8001a70 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001a68:	69ba      	ldr	r2, [r7, #24]
 8001a6a:	693b      	ldr	r3, [r7, #16]
 8001a6c:	4313      	orrs	r3, r2
 8001a6e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001a70:	4a27      	ldr	r2, [pc, #156]	; (8001b10 <HAL_GPIO_Init+0x334>)
 8001a72:	69bb      	ldr	r3, [r7, #24]
 8001a74:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001a76:	4b26      	ldr	r3, [pc, #152]	; (8001b10 <HAL_GPIO_Init+0x334>)
 8001a78:	685b      	ldr	r3, [r3, #4]
 8001a7a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a7c:	693b      	ldr	r3, [r7, #16]
 8001a7e:	43db      	mvns	r3, r3
 8001a80:	69ba      	ldr	r2, [r7, #24]
 8001a82:	4013      	ands	r3, r2
 8001a84:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001a86:	683b      	ldr	r3, [r7, #0]
 8001a88:	685b      	ldr	r3, [r3, #4]
 8001a8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d003      	beq.n	8001a9a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001a92:	69ba      	ldr	r2, [r7, #24]
 8001a94:	693b      	ldr	r3, [r7, #16]
 8001a96:	4313      	orrs	r3, r2
 8001a98:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001a9a:	4a1d      	ldr	r2, [pc, #116]	; (8001b10 <HAL_GPIO_Init+0x334>)
 8001a9c:	69bb      	ldr	r3, [r7, #24]
 8001a9e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001aa0:	4b1b      	ldr	r3, [pc, #108]	; (8001b10 <HAL_GPIO_Init+0x334>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001aa6:	693b      	ldr	r3, [r7, #16]
 8001aa8:	43db      	mvns	r3, r3
 8001aaa:	69ba      	ldr	r2, [r7, #24]
 8001aac:	4013      	ands	r3, r2
 8001aae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001ab0:	683b      	ldr	r3, [r7, #0]
 8001ab2:	685b      	ldr	r3, [r3, #4]
 8001ab4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d003      	beq.n	8001ac4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001abc:	69ba      	ldr	r2, [r7, #24]
 8001abe:	693b      	ldr	r3, [r7, #16]
 8001ac0:	4313      	orrs	r3, r2
 8001ac2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001ac4:	4a12      	ldr	r2, [pc, #72]	; (8001b10 <HAL_GPIO_Init+0x334>)
 8001ac6:	69bb      	ldr	r3, [r7, #24]
 8001ac8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001aca:	69fb      	ldr	r3, [r7, #28]
 8001acc:	3301      	adds	r3, #1
 8001ace:	61fb      	str	r3, [r7, #28]
 8001ad0:	69fb      	ldr	r3, [r7, #28]
 8001ad2:	2b0f      	cmp	r3, #15
 8001ad4:	f67f ae90 	bls.w	80017f8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001ad8:	bf00      	nop
 8001ada:	bf00      	nop
 8001adc:	3724      	adds	r7, #36	; 0x24
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae4:	4770      	bx	lr
 8001ae6:	bf00      	nop
 8001ae8:	40023800 	.word	0x40023800
 8001aec:	40013800 	.word	0x40013800
 8001af0:	40020000 	.word	0x40020000
 8001af4:	40020400 	.word	0x40020400
 8001af8:	40020800 	.word	0x40020800
 8001afc:	40020c00 	.word	0x40020c00
 8001b00:	40021000 	.word	0x40021000
 8001b04:	40021400 	.word	0x40021400
 8001b08:	40021800 	.word	0x40021800
 8001b0c:	40021c00 	.word	0x40021c00
 8001b10:	40013c00 	.word	0x40013c00

08001b14 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b14:	b480      	push	{r7}
 8001b16:	b083      	sub	sp, #12
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
 8001b1c:	460b      	mov	r3, r1
 8001b1e:	807b      	strh	r3, [r7, #2]
 8001b20:	4613      	mov	r3, r2
 8001b22:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001b24:	787b      	ldrb	r3, [r7, #1]
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d003      	beq.n	8001b32 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001b2a:	887a      	ldrh	r2, [r7, #2]
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001b30:	e003      	b.n	8001b3a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001b32:	887b      	ldrh	r3, [r7, #2]
 8001b34:	041a      	lsls	r2, r3, #16
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	619a      	str	r2, [r3, #24]
}
 8001b3a:	bf00      	nop
 8001b3c:	370c      	adds	r7, #12
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b44:	4770      	bx	lr

08001b46 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001b46:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b48:	b08f      	sub	sp, #60	; 0x3c
 8001b4a:	af0a      	add	r7, sp, #40	; 0x28
 8001b4c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d101      	bne.n	8001b58 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001b54:	2301      	movs	r3, #1
 8001b56:	e10f      	b.n	8001d78 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8001b64:	b2db      	uxtb	r3, r3
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d106      	bne.n	8001b78 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001b72:	6878      	ldr	r0, [r7, #4]
 8001b74:	f007 fad8 	bl	8009128 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	2203      	movs	r2, #3
 8001b7c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001b80:	68bb      	ldr	r3, [r7, #8]
 8001b82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d102      	bne.n	8001b92 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	2200      	movs	r2, #0
 8001b90:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	4618      	mov	r0, r3
 8001b98:	f003 fe2b 	bl	80057f2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	603b      	str	r3, [r7, #0]
 8001ba2:	687e      	ldr	r6, [r7, #4]
 8001ba4:	466d      	mov	r5, sp
 8001ba6:	f106 0410 	add.w	r4, r6, #16
 8001baa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001bac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001bae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001bb0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001bb2:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001bb6:	e885 0003 	stmia.w	r5, {r0, r1}
 8001bba:	1d33      	adds	r3, r6, #4
 8001bbc:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001bbe:	6838      	ldr	r0, [r7, #0]
 8001bc0:	f003 fd02 	bl	80055c8 <USB_CoreInit>
 8001bc4:	4603      	mov	r3, r0
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d005      	beq.n	8001bd6 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	2202      	movs	r2, #2
 8001bce:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001bd2:	2301      	movs	r3, #1
 8001bd4:	e0d0      	b.n	8001d78 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	2100      	movs	r1, #0
 8001bdc:	4618      	mov	r0, r3
 8001bde:	f003 fe19 	bl	8005814 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001be2:	2300      	movs	r3, #0
 8001be4:	73fb      	strb	r3, [r7, #15]
 8001be6:	e04a      	b.n	8001c7e <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001be8:	7bfa      	ldrb	r2, [r7, #15]
 8001bea:	6879      	ldr	r1, [r7, #4]
 8001bec:	4613      	mov	r3, r2
 8001bee:	00db      	lsls	r3, r3, #3
 8001bf0:	4413      	add	r3, r2
 8001bf2:	009b      	lsls	r3, r3, #2
 8001bf4:	440b      	add	r3, r1
 8001bf6:	333d      	adds	r3, #61	; 0x3d
 8001bf8:	2201      	movs	r2, #1
 8001bfa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001bfc:	7bfa      	ldrb	r2, [r7, #15]
 8001bfe:	6879      	ldr	r1, [r7, #4]
 8001c00:	4613      	mov	r3, r2
 8001c02:	00db      	lsls	r3, r3, #3
 8001c04:	4413      	add	r3, r2
 8001c06:	009b      	lsls	r3, r3, #2
 8001c08:	440b      	add	r3, r1
 8001c0a:	333c      	adds	r3, #60	; 0x3c
 8001c0c:	7bfa      	ldrb	r2, [r7, #15]
 8001c0e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001c10:	7bfa      	ldrb	r2, [r7, #15]
 8001c12:	7bfb      	ldrb	r3, [r7, #15]
 8001c14:	b298      	uxth	r0, r3
 8001c16:	6879      	ldr	r1, [r7, #4]
 8001c18:	4613      	mov	r3, r2
 8001c1a:	00db      	lsls	r3, r3, #3
 8001c1c:	4413      	add	r3, r2
 8001c1e:	009b      	lsls	r3, r3, #2
 8001c20:	440b      	add	r3, r1
 8001c22:	3344      	adds	r3, #68	; 0x44
 8001c24:	4602      	mov	r2, r0
 8001c26:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001c28:	7bfa      	ldrb	r2, [r7, #15]
 8001c2a:	6879      	ldr	r1, [r7, #4]
 8001c2c:	4613      	mov	r3, r2
 8001c2e:	00db      	lsls	r3, r3, #3
 8001c30:	4413      	add	r3, r2
 8001c32:	009b      	lsls	r3, r3, #2
 8001c34:	440b      	add	r3, r1
 8001c36:	3340      	adds	r3, #64	; 0x40
 8001c38:	2200      	movs	r2, #0
 8001c3a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001c3c:	7bfa      	ldrb	r2, [r7, #15]
 8001c3e:	6879      	ldr	r1, [r7, #4]
 8001c40:	4613      	mov	r3, r2
 8001c42:	00db      	lsls	r3, r3, #3
 8001c44:	4413      	add	r3, r2
 8001c46:	009b      	lsls	r3, r3, #2
 8001c48:	440b      	add	r3, r1
 8001c4a:	3348      	adds	r3, #72	; 0x48
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001c50:	7bfa      	ldrb	r2, [r7, #15]
 8001c52:	6879      	ldr	r1, [r7, #4]
 8001c54:	4613      	mov	r3, r2
 8001c56:	00db      	lsls	r3, r3, #3
 8001c58:	4413      	add	r3, r2
 8001c5a:	009b      	lsls	r3, r3, #2
 8001c5c:	440b      	add	r3, r1
 8001c5e:	334c      	adds	r3, #76	; 0x4c
 8001c60:	2200      	movs	r2, #0
 8001c62:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001c64:	7bfa      	ldrb	r2, [r7, #15]
 8001c66:	6879      	ldr	r1, [r7, #4]
 8001c68:	4613      	mov	r3, r2
 8001c6a:	00db      	lsls	r3, r3, #3
 8001c6c:	4413      	add	r3, r2
 8001c6e:	009b      	lsls	r3, r3, #2
 8001c70:	440b      	add	r3, r1
 8001c72:	3354      	adds	r3, #84	; 0x54
 8001c74:	2200      	movs	r2, #0
 8001c76:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c78:	7bfb      	ldrb	r3, [r7, #15]
 8001c7a:	3301      	adds	r3, #1
 8001c7c:	73fb      	strb	r3, [r7, #15]
 8001c7e:	7bfa      	ldrb	r2, [r7, #15]
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	685b      	ldr	r3, [r3, #4]
 8001c84:	429a      	cmp	r2, r3
 8001c86:	d3af      	bcc.n	8001be8 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c88:	2300      	movs	r3, #0
 8001c8a:	73fb      	strb	r3, [r7, #15]
 8001c8c:	e044      	b.n	8001d18 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001c8e:	7bfa      	ldrb	r2, [r7, #15]
 8001c90:	6879      	ldr	r1, [r7, #4]
 8001c92:	4613      	mov	r3, r2
 8001c94:	00db      	lsls	r3, r3, #3
 8001c96:	4413      	add	r3, r2
 8001c98:	009b      	lsls	r3, r3, #2
 8001c9a:	440b      	add	r3, r1
 8001c9c:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001ca4:	7bfa      	ldrb	r2, [r7, #15]
 8001ca6:	6879      	ldr	r1, [r7, #4]
 8001ca8:	4613      	mov	r3, r2
 8001caa:	00db      	lsls	r3, r3, #3
 8001cac:	4413      	add	r3, r2
 8001cae:	009b      	lsls	r3, r3, #2
 8001cb0:	440b      	add	r3, r1
 8001cb2:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8001cb6:	7bfa      	ldrb	r2, [r7, #15]
 8001cb8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001cba:	7bfa      	ldrb	r2, [r7, #15]
 8001cbc:	6879      	ldr	r1, [r7, #4]
 8001cbe:	4613      	mov	r3, r2
 8001cc0:	00db      	lsls	r3, r3, #3
 8001cc2:	4413      	add	r3, r2
 8001cc4:	009b      	lsls	r3, r3, #2
 8001cc6:	440b      	add	r3, r1
 8001cc8:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001ccc:	2200      	movs	r2, #0
 8001cce:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001cd0:	7bfa      	ldrb	r2, [r7, #15]
 8001cd2:	6879      	ldr	r1, [r7, #4]
 8001cd4:	4613      	mov	r3, r2
 8001cd6:	00db      	lsls	r3, r3, #3
 8001cd8:	4413      	add	r3, r2
 8001cda:	009b      	lsls	r3, r3, #2
 8001cdc:	440b      	add	r3, r1
 8001cde:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001ce6:	7bfa      	ldrb	r2, [r7, #15]
 8001ce8:	6879      	ldr	r1, [r7, #4]
 8001cea:	4613      	mov	r3, r2
 8001cec:	00db      	lsls	r3, r3, #3
 8001cee:	4413      	add	r3, r2
 8001cf0:	009b      	lsls	r3, r3, #2
 8001cf2:	440b      	add	r3, r1
 8001cf4:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001cfc:	7bfa      	ldrb	r2, [r7, #15]
 8001cfe:	6879      	ldr	r1, [r7, #4]
 8001d00:	4613      	mov	r3, r2
 8001d02:	00db      	lsls	r3, r3, #3
 8001d04:	4413      	add	r3, r2
 8001d06:	009b      	lsls	r3, r3, #2
 8001d08:	440b      	add	r3, r1
 8001d0a:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8001d0e:	2200      	movs	r2, #0
 8001d10:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001d12:	7bfb      	ldrb	r3, [r7, #15]
 8001d14:	3301      	adds	r3, #1
 8001d16:	73fb      	strb	r3, [r7, #15]
 8001d18:	7bfa      	ldrb	r2, [r7, #15]
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	685b      	ldr	r3, [r3, #4]
 8001d1e:	429a      	cmp	r2, r3
 8001d20:	d3b5      	bcc.n	8001c8e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	603b      	str	r3, [r7, #0]
 8001d28:	687e      	ldr	r6, [r7, #4]
 8001d2a:	466d      	mov	r5, sp
 8001d2c:	f106 0410 	add.w	r4, r6, #16
 8001d30:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d32:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d34:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d36:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d38:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001d3c:	e885 0003 	stmia.w	r5, {r0, r1}
 8001d40:	1d33      	adds	r3, r6, #4
 8001d42:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001d44:	6838      	ldr	r0, [r7, #0]
 8001d46:	f003 fdb1 	bl	80058ac <USB_DevInit>
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d005      	beq.n	8001d5c <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	2202      	movs	r2, #2
 8001d54:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001d58:	2301      	movs	r3, #1
 8001d5a:	e00d      	b.n	8001d78 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	2200      	movs	r2, #0
 8001d60:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	2201      	movs	r2, #1
 8001d68:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	4618      	mov	r0, r3
 8001d72:	f004 ff00 	bl	8006b76 <USB_DevDisconnect>

  return HAL_OK;
 8001d76:	2300      	movs	r3, #0
}
 8001d78:	4618      	mov	r0, r3
 8001d7a:	3714      	adds	r7, #20
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001d80 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b084      	sub	sp, #16
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001d94:	2b01      	cmp	r3, #1
 8001d96:	d101      	bne.n	8001d9c <HAL_PCD_Start+0x1c>
 8001d98:	2302      	movs	r3, #2
 8001d9a:	e020      	b.n	8001dde <HAL_PCD_Start+0x5e>
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	2201      	movs	r2, #1
 8001da0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001da8:	2b01      	cmp	r3, #1
 8001daa:	d109      	bne.n	8001dc0 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001db0:	2b01      	cmp	r3, #1
 8001db2:	d005      	beq.n	8001dc0 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001db8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	f003 fd03 	bl	80057d0 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	4618      	mov	r0, r3
 8001dd0:	f004 feb0 	bl	8006b34 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001ddc:	2300      	movs	r3, #0
}
 8001dde:	4618      	mov	r0, r3
 8001de0:	3710      	adds	r7, #16
 8001de2:	46bd      	mov	sp, r7
 8001de4:	bd80      	pop	{r7, pc}

08001de6 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001de6:	b590      	push	{r4, r7, lr}
 8001de8:	b08d      	sub	sp, #52	; 0x34
 8001dea:	af00      	add	r7, sp, #0
 8001dec:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001df4:	6a3b      	ldr	r3, [r7, #32]
 8001df6:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	f004 ff6e 	bl	8006cde <USB_GetMode>
 8001e02:	4603      	mov	r3, r0
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	f040 848a 	bne.w	800271e <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	4618      	mov	r0, r3
 8001e10:	f004 fed2 	bl	8006bb8 <USB_ReadInterrupts>
 8001e14:	4603      	mov	r3, r0
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	f000 8480 	beq.w	800271c <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8001e1c:	69fb      	ldr	r3, [r7, #28]
 8001e1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001e22:	689b      	ldr	r3, [r3, #8]
 8001e24:	0a1b      	lsrs	r3, r3, #8
 8001e26:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	4618      	mov	r0, r3
 8001e36:	f004 febf 	bl	8006bb8 <USB_ReadInterrupts>
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	f003 0302 	and.w	r3, r3, #2
 8001e40:	2b02      	cmp	r3, #2
 8001e42:	d107      	bne.n	8001e54 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	695a      	ldr	r2, [r3, #20]
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f002 0202 	and.w	r2, r2, #2
 8001e52:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	4618      	mov	r0, r3
 8001e5a:	f004 fead 	bl	8006bb8 <USB_ReadInterrupts>
 8001e5e:	4603      	mov	r3, r0
 8001e60:	f003 0310 	and.w	r3, r3, #16
 8001e64:	2b10      	cmp	r3, #16
 8001e66:	d161      	bne.n	8001f2c <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	699a      	ldr	r2, [r3, #24]
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f022 0210 	bic.w	r2, r2, #16
 8001e76:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8001e78:	6a3b      	ldr	r3, [r7, #32]
 8001e7a:	6a1b      	ldr	r3, [r3, #32]
 8001e7c:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8001e7e:	69bb      	ldr	r3, [r7, #24]
 8001e80:	f003 020f 	and.w	r2, r3, #15
 8001e84:	4613      	mov	r3, r2
 8001e86:	00db      	lsls	r3, r3, #3
 8001e88:	4413      	add	r3, r2
 8001e8a:	009b      	lsls	r3, r3, #2
 8001e8c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001e90:	687a      	ldr	r2, [r7, #4]
 8001e92:	4413      	add	r3, r2
 8001e94:	3304      	adds	r3, #4
 8001e96:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001e98:	69bb      	ldr	r3, [r7, #24]
 8001e9a:	0c5b      	lsrs	r3, r3, #17
 8001e9c:	f003 030f 	and.w	r3, r3, #15
 8001ea0:	2b02      	cmp	r3, #2
 8001ea2:	d124      	bne.n	8001eee <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001ea4:	69ba      	ldr	r2, [r7, #24]
 8001ea6:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8001eaa:	4013      	ands	r3, r2
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d035      	beq.n	8001f1c <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001eb0:	697b      	ldr	r3, [r7, #20]
 8001eb2:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001eb4:	69bb      	ldr	r3, [r7, #24]
 8001eb6:	091b      	lsrs	r3, r3, #4
 8001eb8:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001eba:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001ebe:	b29b      	uxth	r3, r3
 8001ec0:	461a      	mov	r2, r3
 8001ec2:	6a38      	ldr	r0, [r7, #32]
 8001ec4:	f004 fce4 	bl	8006890 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001ec8:	697b      	ldr	r3, [r7, #20]
 8001eca:	691a      	ldr	r2, [r3, #16]
 8001ecc:	69bb      	ldr	r3, [r7, #24]
 8001ece:	091b      	lsrs	r3, r3, #4
 8001ed0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001ed4:	441a      	add	r2, r3
 8001ed6:	697b      	ldr	r3, [r7, #20]
 8001ed8:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001eda:	697b      	ldr	r3, [r7, #20]
 8001edc:	6a1a      	ldr	r2, [r3, #32]
 8001ede:	69bb      	ldr	r3, [r7, #24]
 8001ee0:	091b      	lsrs	r3, r3, #4
 8001ee2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001ee6:	441a      	add	r2, r3
 8001ee8:	697b      	ldr	r3, [r7, #20]
 8001eea:	621a      	str	r2, [r3, #32]
 8001eec:	e016      	b.n	8001f1c <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8001eee:	69bb      	ldr	r3, [r7, #24]
 8001ef0:	0c5b      	lsrs	r3, r3, #17
 8001ef2:	f003 030f 	and.w	r3, r3, #15
 8001ef6:	2b06      	cmp	r3, #6
 8001ef8:	d110      	bne.n	8001f1c <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8001f00:	2208      	movs	r2, #8
 8001f02:	4619      	mov	r1, r3
 8001f04:	6a38      	ldr	r0, [r7, #32]
 8001f06:	f004 fcc3 	bl	8006890 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001f0a:	697b      	ldr	r3, [r7, #20]
 8001f0c:	6a1a      	ldr	r2, [r3, #32]
 8001f0e:	69bb      	ldr	r3, [r7, #24]
 8001f10:	091b      	lsrs	r3, r3, #4
 8001f12:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001f16:	441a      	add	r2, r3
 8001f18:	697b      	ldr	r3, [r7, #20]
 8001f1a:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	699a      	ldr	r2, [r3, #24]
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f042 0210 	orr.w	r2, r2, #16
 8001f2a:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	4618      	mov	r0, r3
 8001f32:	f004 fe41 	bl	8006bb8 <USB_ReadInterrupts>
 8001f36:	4603      	mov	r3, r0
 8001f38:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001f3c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001f40:	f040 80a7 	bne.w	8002092 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8001f44:	2300      	movs	r3, #0
 8001f46:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	f004 fe46 	bl	8006bde <USB_ReadDevAllOutEpInterrupt>
 8001f52:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8001f54:	e099      	b.n	800208a <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8001f56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f58:	f003 0301 	and.w	r3, r3, #1
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	f000 808e 	beq.w	800207e <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f68:	b2d2      	uxtb	r2, r2
 8001f6a:	4611      	mov	r1, r2
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	f004 fe6a 	bl	8006c46 <USB_ReadDevOutEPInterrupt>
 8001f72:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001f74:	693b      	ldr	r3, [r7, #16]
 8001f76:	f003 0301 	and.w	r3, r3, #1
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d00c      	beq.n	8001f98 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001f7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f80:	015a      	lsls	r2, r3, #5
 8001f82:	69fb      	ldr	r3, [r7, #28]
 8001f84:	4413      	add	r3, r2
 8001f86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001f8a:	461a      	mov	r2, r3
 8001f8c:	2301      	movs	r3, #1
 8001f8e:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001f90:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001f92:	6878      	ldr	r0, [r7, #4]
 8001f94:	f000 fec2 	bl	8002d1c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001f98:	693b      	ldr	r3, [r7, #16]
 8001f9a:	f003 0308 	and.w	r3, r3, #8
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d00c      	beq.n	8001fbc <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001fa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fa4:	015a      	lsls	r2, r3, #5
 8001fa6:	69fb      	ldr	r3, [r7, #28]
 8001fa8:	4413      	add	r3, r2
 8001faa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001fae:	461a      	mov	r2, r3
 8001fb0:	2308      	movs	r3, #8
 8001fb2:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8001fb4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001fb6:	6878      	ldr	r0, [r7, #4]
 8001fb8:	f000 ff98 	bl	8002eec <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001fbc:	693b      	ldr	r3, [r7, #16]
 8001fbe:	f003 0310 	and.w	r3, r3, #16
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d008      	beq.n	8001fd8 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8001fc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fc8:	015a      	lsls	r2, r3, #5
 8001fca:	69fb      	ldr	r3, [r7, #28]
 8001fcc:	4413      	add	r3, r2
 8001fce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001fd2:	461a      	mov	r2, r3
 8001fd4:	2310      	movs	r3, #16
 8001fd6:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8001fd8:	693b      	ldr	r3, [r7, #16]
 8001fda:	f003 0302 	and.w	r3, r3, #2
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d030      	beq.n	8002044 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8001fe2:	6a3b      	ldr	r3, [r7, #32]
 8001fe4:	695b      	ldr	r3, [r3, #20]
 8001fe6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001fea:	2b80      	cmp	r3, #128	; 0x80
 8001fec:	d109      	bne.n	8002002 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8001fee:	69fb      	ldr	r3, [r7, #28]
 8001ff0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001ff4:	685b      	ldr	r3, [r3, #4]
 8001ff6:	69fa      	ldr	r2, [r7, #28]
 8001ff8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001ffc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002000:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8002002:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002004:	4613      	mov	r3, r2
 8002006:	00db      	lsls	r3, r3, #3
 8002008:	4413      	add	r3, r2
 800200a:	009b      	lsls	r3, r3, #2
 800200c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002010:	687a      	ldr	r2, [r7, #4]
 8002012:	4413      	add	r3, r2
 8002014:	3304      	adds	r3, #4
 8002016:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002018:	697b      	ldr	r3, [r7, #20]
 800201a:	78db      	ldrb	r3, [r3, #3]
 800201c:	2b01      	cmp	r3, #1
 800201e:	d108      	bne.n	8002032 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8002020:	697b      	ldr	r3, [r7, #20]
 8002022:	2200      	movs	r2, #0
 8002024:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002026:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002028:	b2db      	uxtb	r3, r3
 800202a:	4619      	mov	r1, r3
 800202c:	6878      	ldr	r0, [r7, #4]
 800202e:	f007 f97d 	bl	800932c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8002032:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002034:	015a      	lsls	r2, r3, #5
 8002036:	69fb      	ldr	r3, [r7, #28]
 8002038:	4413      	add	r3, r2
 800203a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800203e:	461a      	mov	r2, r3
 8002040:	2302      	movs	r3, #2
 8002042:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002044:	693b      	ldr	r3, [r7, #16]
 8002046:	f003 0320 	and.w	r3, r3, #32
 800204a:	2b00      	cmp	r3, #0
 800204c:	d008      	beq.n	8002060 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800204e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002050:	015a      	lsls	r2, r3, #5
 8002052:	69fb      	ldr	r3, [r7, #28]
 8002054:	4413      	add	r3, r2
 8002056:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800205a:	461a      	mov	r2, r3
 800205c:	2320      	movs	r3, #32
 800205e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002060:	693b      	ldr	r3, [r7, #16]
 8002062:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002066:	2b00      	cmp	r3, #0
 8002068:	d009      	beq.n	800207e <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800206a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800206c:	015a      	lsls	r2, r3, #5
 800206e:	69fb      	ldr	r3, [r7, #28]
 8002070:	4413      	add	r3, r2
 8002072:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002076:	461a      	mov	r2, r3
 8002078:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800207c:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800207e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002080:	3301      	adds	r3, #1
 8002082:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002084:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002086:	085b      	lsrs	r3, r3, #1
 8002088:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800208a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800208c:	2b00      	cmp	r3, #0
 800208e:	f47f af62 	bne.w	8001f56 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	4618      	mov	r0, r3
 8002098:	f004 fd8e 	bl	8006bb8 <USB_ReadInterrupts>
 800209c:	4603      	mov	r3, r0
 800209e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80020a2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80020a6:	f040 80db 	bne.w	8002260 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	4618      	mov	r0, r3
 80020b0:	f004 fdaf 	bl	8006c12 <USB_ReadDevAllInEpInterrupt>
 80020b4:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80020b6:	2300      	movs	r3, #0
 80020b8:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80020ba:	e0cd      	b.n	8002258 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80020bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020be:	f003 0301 	and.w	r3, r3, #1
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	f000 80c2 	beq.w	800224c <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80020ce:	b2d2      	uxtb	r2, r2
 80020d0:	4611      	mov	r1, r2
 80020d2:	4618      	mov	r0, r3
 80020d4:	f004 fdd5 	bl	8006c82 <USB_ReadDevInEPInterrupt>
 80020d8:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80020da:	693b      	ldr	r3, [r7, #16]
 80020dc:	f003 0301 	and.w	r3, r3, #1
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d057      	beq.n	8002194 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80020e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020e6:	f003 030f 	and.w	r3, r3, #15
 80020ea:	2201      	movs	r2, #1
 80020ec:	fa02 f303 	lsl.w	r3, r2, r3
 80020f0:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80020f2:	69fb      	ldr	r3, [r7, #28]
 80020f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80020f8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	43db      	mvns	r3, r3
 80020fe:	69f9      	ldr	r1, [r7, #28]
 8002100:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002104:	4013      	ands	r3, r2
 8002106:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800210a:	015a      	lsls	r2, r3, #5
 800210c:	69fb      	ldr	r3, [r7, #28]
 800210e:	4413      	add	r3, r2
 8002110:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002114:	461a      	mov	r2, r3
 8002116:	2301      	movs	r3, #1
 8002118:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	691b      	ldr	r3, [r3, #16]
 800211e:	2b01      	cmp	r3, #1
 8002120:	d132      	bne.n	8002188 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002122:	6879      	ldr	r1, [r7, #4]
 8002124:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002126:	4613      	mov	r3, r2
 8002128:	00db      	lsls	r3, r3, #3
 800212a:	4413      	add	r3, r2
 800212c:	009b      	lsls	r3, r3, #2
 800212e:	440b      	add	r3, r1
 8002130:	334c      	adds	r3, #76	; 0x4c
 8002132:	6819      	ldr	r1, [r3, #0]
 8002134:	6878      	ldr	r0, [r7, #4]
 8002136:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002138:	4613      	mov	r3, r2
 800213a:	00db      	lsls	r3, r3, #3
 800213c:	4413      	add	r3, r2
 800213e:	009b      	lsls	r3, r3, #2
 8002140:	4403      	add	r3, r0
 8002142:	3348      	adds	r3, #72	; 0x48
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	4419      	add	r1, r3
 8002148:	6878      	ldr	r0, [r7, #4]
 800214a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800214c:	4613      	mov	r3, r2
 800214e:	00db      	lsls	r3, r3, #3
 8002150:	4413      	add	r3, r2
 8002152:	009b      	lsls	r3, r3, #2
 8002154:	4403      	add	r3, r0
 8002156:	334c      	adds	r3, #76	; 0x4c
 8002158:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800215a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800215c:	2b00      	cmp	r3, #0
 800215e:	d113      	bne.n	8002188 <HAL_PCD_IRQHandler+0x3a2>
 8002160:	6879      	ldr	r1, [r7, #4]
 8002162:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002164:	4613      	mov	r3, r2
 8002166:	00db      	lsls	r3, r3, #3
 8002168:	4413      	add	r3, r2
 800216a:	009b      	lsls	r3, r3, #2
 800216c:	440b      	add	r3, r1
 800216e:	3354      	adds	r3, #84	; 0x54
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	2b00      	cmp	r3, #0
 8002174:	d108      	bne.n	8002188 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	6818      	ldr	r0, [r3, #0]
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002180:	461a      	mov	r2, r3
 8002182:	2101      	movs	r1, #1
 8002184:	f004 fddc 	bl	8006d40 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800218a:	b2db      	uxtb	r3, r3
 800218c:	4619      	mov	r1, r3
 800218e:	6878      	ldr	r0, [r7, #4]
 8002190:	f007 f847 	bl	8009222 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002194:	693b      	ldr	r3, [r7, #16]
 8002196:	f003 0308 	and.w	r3, r3, #8
 800219a:	2b00      	cmp	r3, #0
 800219c:	d008      	beq.n	80021b0 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800219e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021a0:	015a      	lsls	r2, r3, #5
 80021a2:	69fb      	ldr	r3, [r7, #28]
 80021a4:	4413      	add	r3, r2
 80021a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80021aa:	461a      	mov	r2, r3
 80021ac:	2308      	movs	r3, #8
 80021ae:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80021b0:	693b      	ldr	r3, [r7, #16]
 80021b2:	f003 0310 	and.w	r3, r3, #16
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d008      	beq.n	80021cc <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80021ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021bc:	015a      	lsls	r2, r3, #5
 80021be:	69fb      	ldr	r3, [r7, #28]
 80021c0:	4413      	add	r3, r2
 80021c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80021c6:	461a      	mov	r2, r3
 80021c8:	2310      	movs	r3, #16
 80021ca:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80021cc:	693b      	ldr	r3, [r7, #16]
 80021ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d008      	beq.n	80021e8 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80021d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021d8:	015a      	lsls	r2, r3, #5
 80021da:	69fb      	ldr	r3, [r7, #28]
 80021dc:	4413      	add	r3, r2
 80021de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80021e2:	461a      	mov	r2, r3
 80021e4:	2340      	movs	r3, #64	; 0x40
 80021e6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80021e8:	693b      	ldr	r3, [r7, #16]
 80021ea:	f003 0302 	and.w	r3, r3, #2
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d023      	beq.n	800223a <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80021f2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80021f4:	6a38      	ldr	r0, [r7, #32]
 80021f6:	f003 fcbd 	bl	8005b74 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80021fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80021fc:	4613      	mov	r3, r2
 80021fe:	00db      	lsls	r3, r3, #3
 8002200:	4413      	add	r3, r2
 8002202:	009b      	lsls	r3, r3, #2
 8002204:	3338      	adds	r3, #56	; 0x38
 8002206:	687a      	ldr	r2, [r7, #4]
 8002208:	4413      	add	r3, r2
 800220a:	3304      	adds	r3, #4
 800220c:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800220e:	697b      	ldr	r3, [r7, #20]
 8002210:	78db      	ldrb	r3, [r3, #3]
 8002212:	2b01      	cmp	r3, #1
 8002214:	d108      	bne.n	8002228 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8002216:	697b      	ldr	r3, [r7, #20]
 8002218:	2200      	movs	r2, #0
 800221a:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800221c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800221e:	b2db      	uxtb	r3, r3
 8002220:	4619      	mov	r1, r3
 8002222:	6878      	ldr	r0, [r7, #4]
 8002224:	f007 f894 	bl	8009350 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002228:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800222a:	015a      	lsls	r2, r3, #5
 800222c:	69fb      	ldr	r3, [r7, #28]
 800222e:	4413      	add	r3, r2
 8002230:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002234:	461a      	mov	r2, r3
 8002236:	2302      	movs	r3, #2
 8002238:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800223a:	693b      	ldr	r3, [r7, #16]
 800223c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002240:	2b00      	cmp	r3, #0
 8002242:	d003      	beq.n	800224c <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002244:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002246:	6878      	ldr	r0, [r7, #4]
 8002248:	f000 fcdb 	bl	8002c02 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800224c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800224e:	3301      	adds	r3, #1
 8002250:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002252:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002254:	085b      	lsrs	r3, r3, #1
 8002256:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002258:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800225a:	2b00      	cmp	r3, #0
 800225c:	f47f af2e 	bne.w	80020bc <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	4618      	mov	r0, r3
 8002266:	f004 fca7 	bl	8006bb8 <USB_ReadInterrupts>
 800226a:	4603      	mov	r3, r0
 800226c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002270:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002274:	d122      	bne.n	80022bc <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002276:	69fb      	ldr	r3, [r7, #28]
 8002278:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800227c:	685b      	ldr	r3, [r3, #4]
 800227e:	69fa      	ldr	r2, [r7, #28]
 8002280:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002284:	f023 0301 	bic.w	r3, r3, #1
 8002288:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8002290:	2b01      	cmp	r3, #1
 8002292:	d108      	bne.n	80022a6 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	2200      	movs	r2, #0
 8002298:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800229c:	2100      	movs	r1, #0
 800229e:	6878      	ldr	r0, [r7, #4]
 80022a0:	f000 fec2 	bl	8003028 <HAL_PCDEx_LPM_Callback>
 80022a4:	e002      	b.n	80022ac <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80022a6:	6878      	ldr	r0, [r7, #4]
 80022a8:	f007 f832 	bl	8009310 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	695a      	ldr	r2, [r3, #20]
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80022ba:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	4618      	mov	r0, r3
 80022c2:	f004 fc79 	bl	8006bb8 <USB_ReadInterrupts>
 80022c6:	4603      	mov	r3, r0
 80022c8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80022cc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80022d0:	d112      	bne.n	80022f8 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80022d2:	69fb      	ldr	r3, [r7, #28]
 80022d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80022d8:	689b      	ldr	r3, [r3, #8]
 80022da:	f003 0301 	and.w	r3, r3, #1
 80022de:	2b01      	cmp	r3, #1
 80022e0:	d102      	bne.n	80022e8 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80022e2:	6878      	ldr	r0, [r7, #4]
 80022e4:	f006 ffee 	bl	80092c4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	695a      	ldr	r2, [r3, #20]
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80022f6:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	4618      	mov	r0, r3
 80022fe:	f004 fc5b 	bl	8006bb8 <USB_ReadInterrupts>
 8002302:	4603      	mov	r3, r0
 8002304:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002308:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800230c:	f040 80b7 	bne.w	800247e <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002310:	69fb      	ldr	r3, [r7, #28]
 8002312:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002316:	685b      	ldr	r3, [r3, #4]
 8002318:	69fa      	ldr	r2, [r7, #28]
 800231a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800231e:	f023 0301 	bic.w	r3, r3, #1
 8002322:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	2110      	movs	r1, #16
 800232a:	4618      	mov	r0, r3
 800232c:	f003 fc22 	bl	8005b74 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002330:	2300      	movs	r3, #0
 8002332:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002334:	e046      	b.n	80023c4 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002336:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002338:	015a      	lsls	r2, r3, #5
 800233a:	69fb      	ldr	r3, [r7, #28]
 800233c:	4413      	add	r3, r2
 800233e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002342:	461a      	mov	r2, r3
 8002344:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002348:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800234a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800234c:	015a      	lsls	r2, r3, #5
 800234e:	69fb      	ldr	r3, [r7, #28]
 8002350:	4413      	add	r3, r2
 8002352:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800235a:	0151      	lsls	r1, r2, #5
 800235c:	69fa      	ldr	r2, [r7, #28]
 800235e:	440a      	add	r2, r1
 8002360:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002364:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002368:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800236a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800236c:	015a      	lsls	r2, r3, #5
 800236e:	69fb      	ldr	r3, [r7, #28]
 8002370:	4413      	add	r3, r2
 8002372:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002376:	461a      	mov	r2, r3
 8002378:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800237c:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800237e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002380:	015a      	lsls	r2, r3, #5
 8002382:	69fb      	ldr	r3, [r7, #28]
 8002384:	4413      	add	r3, r2
 8002386:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800238e:	0151      	lsls	r1, r2, #5
 8002390:	69fa      	ldr	r2, [r7, #28]
 8002392:	440a      	add	r2, r1
 8002394:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002398:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800239c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800239e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023a0:	015a      	lsls	r2, r3, #5
 80023a2:	69fb      	ldr	r3, [r7, #28]
 80023a4:	4413      	add	r3, r2
 80023a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80023ae:	0151      	lsls	r1, r2, #5
 80023b0:	69fa      	ldr	r2, [r7, #28]
 80023b2:	440a      	add	r2, r1
 80023b4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80023b8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80023bc:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80023be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023c0:	3301      	adds	r3, #1
 80023c2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	685b      	ldr	r3, [r3, #4]
 80023c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80023ca:	429a      	cmp	r2, r3
 80023cc:	d3b3      	bcc.n	8002336 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80023ce:	69fb      	ldr	r3, [r7, #28]
 80023d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80023d4:	69db      	ldr	r3, [r3, #28]
 80023d6:	69fa      	ldr	r2, [r7, #28]
 80023d8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80023dc:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80023e0:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d016      	beq.n	8002418 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80023ea:	69fb      	ldr	r3, [r7, #28]
 80023ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80023f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80023f4:	69fa      	ldr	r2, [r7, #28]
 80023f6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80023fa:	f043 030b 	orr.w	r3, r3, #11
 80023fe:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002402:	69fb      	ldr	r3, [r7, #28]
 8002404:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002408:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800240a:	69fa      	ldr	r2, [r7, #28]
 800240c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002410:	f043 030b 	orr.w	r3, r3, #11
 8002414:	6453      	str	r3, [r2, #68]	; 0x44
 8002416:	e015      	b.n	8002444 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002418:	69fb      	ldr	r3, [r7, #28]
 800241a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800241e:	695b      	ldr	r3, [r3, #20]
 8002420:	69fa      	ldr	r2, [r7, #28]
 8002422:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002426:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800242a:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800242e:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002430:	69fb      	ldr	r3, [r7, #28]
 8002432:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002436:	691b      	ldr	r3, [r3, #16]
 8002438:	69fa      	ldr	r2, [r7, #28]
 800243a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800243e:	f043 030b 	orr.w	r3, r3, #11
 8002442:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002444:	69fb      	ldr	r3, [r7, #28]
 8002446:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	69fa      	ldr	r2, [r7, #28]
 800244e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002452:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8002456:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	6818      	ldr	r0, [r3, #0]
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	691b      	ldr	r3, [r3, #16]
 8002460:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002468:	461a      	mov	r2, r3
 800246a:	f004 fc69 	bl	8006d40 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	695a      	ldr	r2, [r3, #20]
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800247c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	4618      	mov	r0, r3
 8002484:	f004 fb98 	bl	8006bb8 <USB_ReadInterrupts>
 8002488:	4603      	mov	r3, r0
 800248a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800248e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002492:	d124      	bne.n	80024de <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	4618      	mov	r0, r3
 800249a:	f004 fc2e 	bl	8006cfa <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	4618      	mov	r0, r3
 80024a4:	f003 fbe3 	bl	8005c6e <USB_GetDevSpeed>
 80024a8:	4603      	mov	r3, r0
 80024aa:	461a      	mov	r2, r3
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681c      	ldr	r4, [r3, #0]
 80024b4:	f001 f9e8 	bl	8003888 <HAL_RCC_GetHCLKFreq>
 80024b8:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80024be:	b2db      	uxtb	r3, r3
 80024c0:	461a      	mov	r2, r3
 80024c2:	4620      	mov	r0, r4
 80024c4:	f003 f8e2 	bl	800568c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80024c8:	6878      	ldr	r0, [r7, #4]
 80024ca:	f006 fed2 	bl	8009272 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	695a      	ldr	r2, [r3, #20]
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80024dc:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	4618      	mov	r0, r3
 80024e4:	f004 fb68 	bl	8006bb8 <USB_ReadInterrupts>
 80024e8:	4603      	mov	r3, r0
 80024ea:	f003 0308 	and.w	r3, r3, #8
 80024ee:	2b08      	cmp	r3, #8
 80024f0:	d10a      	bne.n	8002508 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80024f2:	6878      	ldr	r0, [r7, #4]
 80024f4:	f006 feaf 	bl	8009256 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	695a      	ldr	r2, [r3, #20]
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f002 0208 	and.w	r2, r2, #8
 8002506:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	4618      	mov	r0, r3
 800250e:	f004 fb53 	bl	8006bb8 <USB_ReadInterrupts>
 8002512:	4603      	mov	r3, r0
 8002514:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002518:	2b80      	cmp	r3, #128	; 0x80
 800251a:	d122      	bne.n	8002562 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800251c:	6a3b      	ldr	r3, [r7, #32]
 800251e:	699b      	ldr	r3, [r3, #24]
 8002520:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002524:	6a3b      	ldr	r3, [r7, #32]
 8002526:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002528:	2301      	movs	r3, #1
 800252a:	627b      	str	r3, [r7, #36]	; 0x24
 800252c:	e014      	b.n	8002558 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800252e:	6879      	ldr	r1, [r7, #4]
 8002530:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002532:	4613      	mov	r3, r2
 8002534:	00db      	lsls	r3, r3, #3
 8002536:	4413      	add	r3, r2
 8002538:	009b      	lsls	r3, r3, #2
 800253a:	440b      	add	r3, r1
 800253c:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8002540:	781b      	ldrb	r3, [r3, #0]
 8002542:	2b01      	cmp	r3, #1
 8002544:	d105      	bne.n	8002552 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8002546:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002548:	b2db      	uxtb	r3, r3
 800254a:	4619      	mov	r1, r3
 800254c:	6878      	ldr	r0, [r7, #4]
 800254e:	f000 fb27 	bl	8002ba0 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002554:	3301      	adds	r3, #1
 8002556:	627b      	str	r3, [r7, #36]	; 0x24
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	685b      	ldr	r3, [r3, #4]
 800255c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800255e:	429a      	cmp	r2, r3
 8002560:	d3e5      	bcc.n	800252e <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	4618      	mov	r0, r3
 8002568:	f004 fb26 	bl	8006bb8 <USB_ReadInterrupts>
 800256c:	4603      	mov	r3, r0
 800256e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002572:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002576:	d13b      	bne.n	80025f0 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002578:	2301      	movs	r3, #1
 800257a:	627b      	str	r3, [r7, #36]	; 0x24
 800257c:	e02b      	b.n	80025d6 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800257e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002580:	015a      	lsls	r2, r3, #5
 8002582:	69fb      	ldr	r3, [r7, #28]
 8002584:	4413      	add	r3, r2
 8002586:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800258e:	6879      	ldr	r1, [r7, #4]
 8002590:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002592:	4613      	mov	r3, r2
 8002594:	00db      	lsls	r3, r3, #3
 8002596:	4413      	add	r3, r2
 8002598:	009b      	lsls	r3, r3, #2
 800259a:	440b      	add	r3, r1
 800259c:	3340      	adds	r3, #64	; 0x40
 800259e:	781b      	ldrb	r3, [r3, #0]
 80025a0:	2b01      	cmp	r3, #1
 80025a2:	d115      	bne.n	80025d0 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80025a4:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	da12      	bge.n	80025d0 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80025aa:	6879      	ldr	r1, [r7, #4]
 80025ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025ae:	4613      	mov	r3, r2
 80025b0:	00db      	lsls	r3, r3, #3
 80025b2:	4413      	add	r3, r2
 80025b4:	009b      	lsls	r3, r3, #2
 80025b6:	440b      	add	r3, r1
 80025b8:	333f      	adds	r3, #63	; 0x3f
 80025ba:	2201      	movs	r2, #1
 80025bc:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80025be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025c0:	b2db      	uxtb	r3, r3
 80025c2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80025c6:	b2db      	uxtb	r3, r3
 80025c8:	4619      	mov	r1, r3
 80025ca:	6878      	ldr	r0, [r7, #4]
 80025cc:	f000 fae8 	bl	8002ba0 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80025d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025d2:	3301      	adds	r3, #1
 80025d4:	627b      	str	r3, [r7, #36]	; 0x24
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	685b      	ldr	r3, [r3, #4]
 80025da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025dc:	429a      	cmp	r2, r3
 80025de:	d3ce      	bcc.n	800257e <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	695a      	ldr	r2, [r3, #20]
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80025ee:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	4618      	mov	r0, r3
 80025f6:	f004 fadf 	bl	8006bb8 <USB_ReadInterrupts>
 80025fa:	4603      	mov	r3, r0
 80025fc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002600:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002604:	d155      	bne.n	80026b2 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002606:	2301      	movs	r3, #1
 8002608:	627b      	str	r3, [r7, #36]	; 0x24
 800260a:	e045      	b.n	8002698 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 800260c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800260e:	015a      	lsls	r2, r3, #5
 8002610:	69fb      	ldr	r3, [r7, #28]
 8002612:	4413      	add	r3, r2
 8002614:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800261c:	6879      	ldr	r1, [r7, #4]
 800261e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002620:	4613      	mov	r3, r2
 8002622:	00db      	lsls	r3, r3, #3
 8002624:	4413      	add	r3, r2
 8002626:	009b      	lsls	r3, r3, #2
 8002628:	440b      	add	r3, r1
 800262a:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800262e:	781b      	ldrb	r3, [r3, #0]
 8002630:	2b01      	cmp	r3, #1
 8002632:	d12e      	bne.n	8002692 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002634:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002636:	2b00      	cmp	r3, #0
 8002638:	da2b      	bge.n	8002692 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 800263a:	69bb      	ldr	r3, [r7, #24]
 800263c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8002646:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800264a:	429a      	cmp	r2, r3
 800264c:	d121      	bne.n	8002692 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800264e:	6879      	ldr	r1, [r7, #4]
 8002650:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002652:	4613      	mov	r3, r2
 8002654:	00db      	lsls	r3, r3, #3
 8002656:	4413      	add	r3, r2
 8002658:	009b      	lsls	r3, r3, #2
 800265a:	440b      	add	r3, r1
 800265c:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8002660:	2201      	movs	r2, #1
 8002662:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8002664:	6a3b      	ldr	r3, [r7, #32]
 8002666:	699b      	ldr	r3, [r3, #24]
 8002668:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800266c:	6a3b      	ldr	r3, [r7, #32]
 800266e:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8002670:	6a3b      	ldr	r3, [r7, #32]
 8002672:	695b      	ldr	r3, [r3, #20]
 8002674:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002678:	2b00      	cmp	r3, #0
 800267a:	d10a      	bne.n	8002692 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800267c:	69fb      	ldr	r3, [r7, #28]
 800267e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002682:	685b      	ldr	r3, [r3, #4]
 8002684:	69fa      	ldr	r2, [r7, #28]
 8002686:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800268a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800268e:	6053      	str	r3, [r2, #4]
            break;
 8002690:	e007      	b.n	80026a2 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002694:	3301      	adds	r3, #1
 8002696:	627b      	str	r3, [r7, #36]	; 0x24
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	685b      	ldr	r3, [r3, #4]
 800269c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800269e:	429a      	cmp	r2, r3
 80026a0:	d3b4      	bcc.n	800260c <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	695a      	ldr	r2, [r3, #20]
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80026b0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	4618      	mov	r0, r3
 80026b8:	f004 fa7e 	bl	8006bb8 <USB_ReadInterrupts>
 80026bc:	4603      	mov	r3, r0
 80026be:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80026c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80026c6:	d10a      	bne.n	80026de <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80026c8:	6878      	ldr	r0, [r7, #4]
 80026ca:	f006 fe53 	bl	8009374 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	695a      	ldr	r2, [r3, #20]
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80026dc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	4618      	mov	r0, r3
 80026e4:	f004 fa68 	bl	8006bb8 <USB_ReadInterrupts>
 80026e8:	4603      	mov	r3, r0
 80026ea:	f003 0304 	and.w	r3, r3, #4
 80026ee:	2b04      	cmp	r3, #4
 80026f0:	d115      	bne.n	800271e <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	685b      	ldr	r3, [r3, #4]
 80026f8:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80026fa:	69bb      	ldr	r3, [r7, #24]
 80026fc:	f003 0304 	and.w	r3, r3, #4
 8002700:	2b00      	cmp	r3, #0
 8002702:	d002      	beq.n	800270a <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002704:	6878      	ldr	r0, [r7, #4]
 8002706:	f006 fe43 	bl	8009390 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	6859      	ldr	r1, [r3, #4]
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	69ba      	ldr	r2, [r7, #24]
 8002716:	430a      	orrs	r2, r1
 8002718:	605a      	str	r2, [r3, #4]
 800271a:	e000      	b.n	800271e <HAL_PCD_IRQHandler+0x938>
      return;
 800271c:	bf00      	nop
    }
  }
}
 800271e:	3734      	adds	r7, #52	; 0x34
 8002720:	46bd      	mov	sp, r7
 8002722:	bd90      	pop	{r4, r7, pc}

08002724 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002724:	b580      	push	{r7, lr}
 8002726:	b082      	sub	sp, #8
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]
 800272c:	460b      	mov	r3, r1
 800272e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002736:	2b01      	cmp	r3, #1
 8002738:	d101      	bne.n	800273e <HAL_PCD_SetAddress+0x1a>
 800273a:	2302      	movs	r3, #2
 800273c:	e013      	b.n	8002766 <HAL_PCD_SetAddress+0x42>
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	2201      	movs	r2, #1
 8002742:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	78fa      	ldrb	r2, [r7, #3]
 800274a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	78fa      	ldrb	r2, [r7, #3]
 8002754:	4611      	mov	r1, r2
 8002756:	4618      	mov	r0, r3
 8002758:	f004 f9c6 	bl	8006ae8 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	2200      	movs	r2, #0
 8002760:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002764:	2300      	movs	r3, #0
}
 8002766:	4618      	mov	r0, r3
 8002768:	3708      	adds	r7, #8
 800276a:	46bd      	mov	sp, r7
 800276c:	bd80      	pop	{r7, pc}

0800276e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800276e:	b580      	push	{r7, lr}
 8002770:	b084      	sub	sp, #16
 8002772:	af00      	add	r7, sp, #0
 8002774:	6078      	str	r0, [r7, #4]
 8002776:	4608      	mov	r0, r1
 8002778:	4611      	mov	r1, r2
 800277a:	461a      	mov	r2, r3
 800277c:	4603      	mov	r3, r0
 800277e:	70fb      	strb	r3, [r7, #3]
 8002780:	460b      	mov	r3, r1
 8002782:	803b      	strh	r3, [r7, #0]
 8002784:	4613      	mov	r3, r2
 8002786:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002788:	2300      	movs	r3, #0
 800278a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800278c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002790:	2b00      	cmp	r3, #0
 8002792:	da0f      	bge.n	80027b4 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002794:	78fb      	ldrb	r3, [r7, #3]
 8002796:	f003 020f 	and.w	r2, r3, #15
 800279a:	4613      	mov	r3, r2
 800279c:	00db      	lsls	r3, r3, #3
 800279e:	4413      	add	r3, r2
 80027a0:	009b      	lsls	r3, r3, #2
 80027a2:	3338      	adds	r3, #56	; 0x38
 80027a4:	687a      	ldr	r2, [r7, #4]
 80027a6:	4413      	add	r3, r2
 80027a8:	3304      	adds	r3, #4
 80027aa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	2201      	movs	r2, #1
 80027b0:	705a      	strb	r2, [r3, #1]
 80027b2:	e00f      	b.n	80027d4 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80027b4:	78fb      	ldrb	r3, [r7, #3]
 80027b6:	f003 020f 	and.w	r2, r3, #15
 80027ba:	4613      	mov	r3, r2
 80027bc:	00db      	lsls	r3, r3, #3
 80027be:	4413      	add	r3, r2
 80027c0:	009b      	lsls	r3, r3, #2
 80027c2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80027c6:	687a      	ldr	r2, [r7, #4]
 80027c8:	4413      	add	r3, r2
 80027ca:	3304      	adds	r3, #4
 80027cc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	2200      	movs	r2, #0
 80027d2:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80027d4:	78fb      	ldrb	r3, [r7, #3]
 80027d6:	f003 030f 	and.w	r3, r3, #15
 80027da:	b2da      	uxtb	r2, r3
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80027e0:	883a      	ldrh	r2, [r7, #0]
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	78ba      	ldrb	r2, [r7, #2]
 80027ea:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	785b      	ldrb	r3, [r3, #1]
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d004      	beq.n	80027fe <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	781b      	ldrb	r3, [r3, #0]
 80027f8:	b29a      	uxth	r2, r3
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80027fe:	78bb      	ldrb	r3, [r7, #2]
 8002800:	2b02      	cmp	r3, #2
 8002802:	d102      	bne.n	800280a <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	2200      	movs	r2, #0
 8002808:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002810:	2b01      	cmp	r3, #1
 8002812:	d101      	bne.n	8002818 <HAL_PCD_EP_Open+0xaa>
 8002814:	2302      	movs	r3, #2
 8002816:	e00e      	b.n	8002836 <HAL_PCD_EP_Open+0xc8>
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	2201      	movs	r2, #1
 800281c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	68f9      	ldr	r1, [r7, #12]
 8002826:	4618      	mov	r0, r3
 8002828:	f003 fa46 	bl	8005cb8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	2200      	movs	r2, #0
 8002830:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8002834:	7afb      	ldrb	r3, [r7, #11]
}
 8002836:	4618      	mov	r0, r3
 8002838:	3710      	adds	r7, #16
 800283a:	46bd      	mov	sp, r7
 800283c:	bd80      	pop	{r7, pc}

0800283e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800283e:	b580      	push	{r7, lr}
 8002840:	b084      	sub	sp, #16
 8002842:	af00      	add	r7, sp, #0
 8002844:	6078      	str	r0, [r7, #4]
 8002846:	460b      	mov	r3, r1
 8002848:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800284a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800284e:	2b00      	cmp	r3, #0
 8002850:	da0f      	bge.n	8002872 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002852:	78fb      	ldrb	r3, [r7, #3]
 8002854:	f003 020f 	and.w	r2, r3, #15
 8002858:	4613      	mov	r3, r2
 800285a:	00db      	lsls	r3, r3, #3
 800285c:	4413      	add	r3, r2
 800285e:	009b      	lsls	r3, r3, #2
 8002860:	3338      	adds	r3, #56	; 0x38
 8002862:	687a      	ldr	r2, [r7, #4]
 8002864:	4413      	add	r3, r2
 8002866:	3304      	adds	r3, #4
 8002868:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	2201      	movs	r2, #1
 800286e:	705a      	strb	r2, [r3, #1]
 8002870:	e00f      	b.n	8002892 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002872:	78fb      	ldrb	r3, [r7, #3]
 8002874:	f003 020f 	and.w	r2, r3, #15
 8002878:	4613      	mov	r3, r2
 800287a:	00db      	lsls	r3, r3, #3
 800287c:	4413      	add	r3, r2
 800287e:	009b      	lsls	r3, r3, #2
 8002880:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002884:	687a      	ldr	r2, [r7, #4]
 8002886:	4413      	add	r3, r2
 8002888:	3304      	adds	r3, #4
 800288a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	2200      	movs	r2, #0
 8002890:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002892:	78fb      	ldrb	r3, [r7, #3]
 8002894:	f003 030f 	and.w	r3, r3, #15
 8002898:	b2da      	uxtb	r2, r3
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80028a4:	2b01      	cmp	r3, #1
 80028a6:	d101      	bne.n	80028ac <HAL_PCD_EP_Close+0x6e>
 80028a8:	2302      	movs	r3, #2
 80028aa:	e00e      	b.n	80028ca <HAL_PCD_EP_Close+0x8c>
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	2201      	movs	r2, #1
 80028b0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	68f9      	ldr	r1, [r7, #12]
 80028ba:	4618      	mov	r0, r3
 80028bc:	f003 fa84 	bl	8005dc8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	2200      	movs	r2, #0
 80028c4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 80028c8:	2300      	movs	r3, #0
}
 80028ca:	4618      	mov	r0, r3
 80028cc:	3710      	adds	r7, #16
 80028ce:	46bd      	mov	sp, r7
 80028d0:	bd80      	pop	{r7, pc}

080028d2 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80028d2:	b580      	push	{r7, lr}
 80028d4:	b086      	sub	sp, #24
 80028d6:	af00      	add	r7, sp, #0
 80028d8:	60f8      	str	r0, [r7, #12]
 80028da:	607a      	str	r2, [r7, #4]
 80028dc:	603b      	str	r3, [r7, #0]
 80028de:	460b      	mov	r3, r1
 80028e0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80028e2:	7afb      	ldrb	r3, [r7, #11]
 80028e4:	f003 020f 	and.w	r2, r3, #15
 80028e8:	4613      	mov	r3, r2
 80028ea:	00db      	lsls	r3, r3, #3
 80028ec:	4413      	add	r3, r2
 80028ee:	009b      	lsls	r3, r3, #2
 80028f0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80028f4:	68fa      	ldr	r2, [r7, #12]
 80028f6:	4413      	add	r3, r2
 80028f8:	3304      	adds	r3, #4
 80028fa:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80028fc:	697b      	ldr	r3, [r7, #20]
 80028fe:	687a      	ldr	r2, [r7, #4]
 8002900:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8002902:	697b      	ldr	r3, [r7, #20]
 8002904:	683a      	ldr	r2, [r7, #0]
 8002906:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002908:	697b      	ldr	r3, [r7, #20]
 800290a:	2200      	movs	r2, #0
 800290c:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 800290e:	697b      	ldr	r3, [r7, #20]
 8002910:	2200      	movs	r2, #0
 8002912:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002914:	7afb      	ldrb	r3, [r7, #11]
 8002916:	f003 030f 	and.w	r3, r3, #15
 800291a:	b2da      	uxtb	r2, r3
 800291c:	697b      	ldr	r3, [r7, #20]
 800291e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	691b      	ldr	r3, [r3, #16]
 8002924:	2b01      	cmp	r3, #1
 8002926:	d102      	bne.n	800292e <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002928:	687a      	ldr	r2, [r7, #4]
 800292a:	697b      	ldr	r3, [r7, #20]
 800292c:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800292e:	7afb      	ldrb	r3, [r7, #11]
 8002930:	f003 030f 	and.w	r3, r3, #15
 8002934:	2b00      	cmp	r3, #0
 8002936:	d109      	bne.n	800294c <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	6818      	ldr	r0, [r3, #0]
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	691b      	ldr	r3, [r3, #16]
 8002940:	b2db      	uxtb	r3, r3
 8002942:	461a      	mov	r2, r3
 8002944:	6979      	ldr	r1, [r7, #20]
 8002946:	f003 fd63 	bl	8006410 <USB_EP0StartXfer>
 800294a:	e008      	b.n	800295e <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	6818      	ldr	r0, [r3, #0]
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	691b      	ldr	r3, [r3, #16]
 8002954:	b2db      	uxtb	r3, r3
 8002956:	461a      	mov	r2, r3
 8002958:	6979      	ldr	r1, [r7, #20]
 800295a:	f003 fb11 	bl	8005f80 <USB_EPStartXfer>
  }

  return HAL_OK;
 800295e:	2300      	movs	r3, #0
}
 8002960:	4618      	mov	r0, r3
 8002962:	3718      	adds	r7, #24
 8002964:	46bd      	mov	sp, r7
 8002966:	bd80      	pop	{r7, pc}

08002968 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002968:	b480      	push	{r7}
 800296a:	b083      	sub	sp, #12
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
 8002970:	460b      	mov	r3, r1
 8002972:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002974:	78fb      	ldrb	r3, [r7, #3]
 8002976:	f003 020f 	and.w	r2, r3, #15
 800297a:	6879      	ldr	r1, [r7, #4]
 800297c:	4613      	mov	r3, r2
 800297e:	00db      	lsls	r3, r3, #3
 8002980:	4413      	add	r3, r2
 8002982:	009b      	lsls	r3, r3, #2
 8002984:	440b      	add	r3, r1
 8002986:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 800298a:	681b      	ldr	r3, [r3, #0]
}
 800298c:	4618      	mov	r0, r3
 800298e:	370c      	adds	r7, #12
 8002990:	46bd      	mov	sp, r7
 8002992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002996:	4770      	bx	lr

08002998 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002998:	b580      	push	{r7, lr}
 800299a:	b086      	sub	sp, #24
 800299c:	af00      	add	r7, sp, #0
 800299e:	60f8      	str	r0, [r7, #12]
 80029a0:	607a      	str	r2, [r7, #4]
 80029a2:	603b      	str	r3, [r7, #0]
 80029a4:	460b      	mov	r3, r1
 80029a6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80029a8:	7afb      	ldrb	r3, [r7, #11]
 80029aa:	f003 020f 	and.w	r2, r3, #15
 80029ae:	4613      	mov	r3, r2
 80029b0:	00db      	lsls	r3, r3, #3
 80029b2:	4413      	add	r3, r2
 80029b4:	009b      	lsls	r3, r3, #2
 80029b6:	3338      	adds	r3, #56	; 0x38
 80029b8:	68fa      	ldr	r2, [r7, #12]
 80029ba:	4413      	add	r3, r2
 80029bc:	3304      	adds	r3, #4
 80029be:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80029c0:	697b      	ldr	r3, [r7, #20]
 80029c2:	687a      	ldr	r2, [r7, #4]
 80029c4:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80029c6:	697b      	ldr	r3, [r7, #20]
 80029c8:	683a      	ldr	r2, [r7, #0]
 80029ca:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80029cc:	697b      	ldr	r3, [r7, #20]
 80029ce:	2200      	movs	r2, #0
 80029d0:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 80029d2:	697b      	ldr	r3, [r7, #20]
 80029d4:	2201      	movs	r2, #1
 80029d6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80029d8:	7afb      	ldrb	r3, [r7, #11]
 80029da:	f003 030f 	and.w	r3, r3, #15
 80029de:	b2da      	uxtb	r2, r3
 80029e0:	697b      	ldr	r3, [r7, #20]
 80029e2:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	691b      	ldr	r3, [r3, #16]
 80029e8:	2b01      	cmp	r3, #1
 80029ea:	d102      	bne.n	80029f2 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80029ec:	687a      	ldr	r2, [r7, #4]
 80029ee:	697b      	ldr	r3, [r7, #20]
 80029f0:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80029f2:	7afb      	ldrb	r3, [r7, #11]
 80029f4:	f003 030f 	and.w	r3, r3, #15
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d109      	bne.n	8002a10 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	6818      	ldr	r0, [r3, #0]
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	691b      	ldr	r3, [r3, #16]
 8002a04:	b2db      	uxtb	r3, r3
 8002a06:	461a      	mov	r2, r3
 8002a08:	6979      	ldr	r1, [r7, #20]
 8002a0a:	f003 fd01 	bl	8006410 <USB_EP0StartXfer>
 8002a0e:	e008      	b.n	8002a22 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	6818      	ldr	r0, [r3, #0]
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	691b      	ldr	r3, [r3, #16]
 8002a18:	b2db      	uxtb	r3, r3
 8002a1a:	461a      	mov	r2, r3
 8002a1c:	6979      	ldr	r1, [r7, #20]
 8002a1e:	f003 faaf 	bl	8005f80 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002a22:	2300      	movs	r3, #0
}
 8002a24:	4618      	mov	r0, r3
 8002a26:	3718      	adds	r7, #24
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	bd80      	pop	{r7, pc}

08002a2c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	b084      	sub	sp, #16
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	6078      	str	r0, [r7, #4]
 8002a34:	460b      	mov	r3, r1
 8002a36:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002a38:	78fb      	ldrb	r3, [r7, #3]
 8002a3a:	f003 020f 	and.w	r2, r3, #15
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	685b      	ldr	r3, [r3, #4]
 8002a42:	429a      	cmp	r2, r3
 8002a44:	d901      	bls.n	8002a4a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002a46:	2301      	movs	r3, #1
 8002a48:	e050      	b.n	8002aec <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002a4a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	da0f      	bge.n	8002a72 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002a52:	78fb      	ldrb	r3, [r7, #3]
 8002a54:	f003 020f 	and.w	r2, r3, #15
 8002a58:	4613      	mov	r3, r2
 8002a5a:	00db      	lsls	r3, r3, #3
 8002a5c:	4413      	add	r3, r2
 8002a5e:	009b      	lsls	r3, r3, #2
 8002a60:	3338      	adds	r3, #56	; 0x38
 8002a62:	687a      	ldr	r2, [r7, #4]
 8002a64:	4413      	add	r3, r2
 8002a66:	3304      	adds	r3, #4
 8002a68:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	2201      	movs	r2, #1
 8002a6e:	705a      	strb	r2, [r3, #1]
 8002a70:	e00d      	b.n	8002a8e <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002a72:	78fa      	ldrb	r2, [r7, #3]
 8002a74:	4613      	mov	r3, r2
 8002a76:	00db      	lsls	r3, r3, #3
 8002a78:	4413      	add	r3, r2
 8002a7a:	009b      	lsls	r3, r3, #2
 8002a7c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002a80:	687a      	ldr	r2, [r7, #4]
 8002a82:	4413      	add	r3, r2
 8002a84:	3304      	adds	r3, #4
 8002a86:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	2201      	movs	r2, #1
 8002a92:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002a94:	78fb      	ldrb	r3, [r7, #3]
 8002a96:	f003 030f 	and.w	r3, r3, #15
 8002a9a:	b2da      	uxtb	r2, r3
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002aa6:	2b01      	cmp	r3, #1
 8002aa8:	d101      	bne.n	8002aae <HAL_PCD_EP_SetStall+0x82>
 8002aaa:	2302      	movs	r3, #2
 8002aac:	e01e      	b.n	8002aec <HAL_PCD_EP_SetStall+0xc0>
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	2201      	movs	r2, #1
 8002ab2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	68f9      	ldr	r1, [r7, #12]
 8002abc:	4618      	mov	r0, r3
 8002abe:	f003 ff3f 	bl	8006940 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002ac2:	78fb      	ldrb	r3, [r7, #3]
 8002ac4:	f003 030f 	and.w	r3, r3, #15
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d10a      	bne.n	8002ae2 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	6818      	ldr	r0, [r3, #0]
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	691b      	ldr	r3, [r3, #16]
 8002ad4:	b2d9      	uxtb	r1, r3
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002adc:	461a      	mov	r2, r3
 8002ade:	f004 f92f 	bl	8006d40 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002aea:	2300      	movs	r3, #0
}
 8002aec:	4618      	mov	r0, r3
 8002aee:	3710      	adds	r7, #16
 8002af0:	46bd      	mov	sp, r7
 8002af2:	bd80      	pop	{r7, pc}

08002af4 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	b084      	sub	sp, #16
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	6078      	str	r0, [r7, #4]
 8002afc:	460b      	mov	r3, r1
 8002afe:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002b00:	78fb      	ldrb	r3, [r7, #3]
 8002b02:	f003 020f 	and.w	r2, r3, #15
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	685b      	ldr	r3, [r3, #4]
 8002b0a:	429a      	cmp	r2, r3
 8002b0c:	d901      	bls.n	8002b12 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002b0e:	2301      	movs	r3, #1
 8002b10:	e042      	b.n	8002b98 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002b12:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	da0f      	bge.n	8002b3a <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002b1a:	78fb      	ldrb	r3, [r7, #3]
 8002b1c:	f003 020f 	and.w	r2, r3, #15
 8002b20:	4613      	mov	r3, r2
 8002b22:	00db      	lsls	r3, r3, #3
 8002b24:	4413      	add	r3, r2
 8002b26:	009b      	lsls	r3, r3, #2
 8002b28:	3338      	adds	r3, #56	; 0x38
 8002b2a:	687a      	ldr	r2, [r7, #4]
 8002b2c:	4413      	add	r3, r2
 8002b2e:	3304      	adds	r3, #4
 8002b30:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	2201      	movs	r2, #1
 8002b36:	705a      	strb	r2, [r3, #1]
 8002b38:	e00f      	b.n	8002b5a <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002b3a:	78fb      	ldrb	r3, [r7, #3]
 8002b3c:	f003 020f 	and.w	r2, r3, #15
 8002b40:	4613      	mov	r3, r2
 8002b42:	00db      	lsls	r3, r3, #3
 8002b44:	4413      	add	r3, r2
 8002b46:	009b      	lsls	r3, r3, #2
 8002b48:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002b4c:	687a      	ldr	r2, [r7, #4]
 8002b4e:	4413      	add	r3, r2
 8002b50:	3304      	adds	r3, #4
 8002b52:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	2200      	movs	r2, #0
 8002b58:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002b60:	78fb      	ldrb	r3, [r7, #3]
 8002b62:	f003 030f 	and.w	r3, r3, #15
 8002b66:	b2da      	uxtb	r2, r3
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002b72:	2b01      	cmp	r3, #1
 8002b74:	d101      	bne.n	8002b7a <HAL_PCD_EP_ClrStall+0x86>
 8002b76:	2302      	movs	r3, #2
 8002b78:	e00e      	b.n	8002b98 <HAL_PCD_EP_ClrStall+0xa4>
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	2201      	movs	r2, #1
 8002b7e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	68f9      	ldr	r1, [r7, #12]
 8002b88:	4618      	mov	r0, r3
 8002b8a:	f003 ff47 	bl	8006a1c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	2200      	movs	r2, #0
 8002b92:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002b96:	2300      	movs	r3, #0
}
 8002b98:	4618      	mov	r0, r3
 8002b9a:	3710      	adds	r7, #16
 8002b9c:	46bd      	mov	sp, r7
 8002b9e:	bd80      	pop	{r7, pc}

08002ba0 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	b084      	sub	sp, #16
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]
 8002ba8:	460b      	mov	r3, r1
 8002baa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8002bac:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	da0c      	bge.n	8002bce <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002bb4:	78fb      	ldrb	r3, [r7, #3]
 8002bb6:	f003 020f 	and.w	r2, r3, #15
 8002bba:	4613      	mov	r3, r2
 8002bbc:	00db      	lsls	r3, r3, #3
 8002bbe:	4413      	add	r3, r2
 8002bc0:	009b      	lsls	r3, r3, #2
 8002bc2:	3338      	adds	r3, #56	; 0x38
 8002bc4:	687a      	ldr	r2, [r7, #4]
 8002bc6:	4413      	add	r3, r2
 8002bc8:	3304      	adds	r3, #4
 8002bca:	60fb      	str	r3, [r7, #12]
 8002bcc:	e00c      	b.n	8002be8 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002bce:	78fb      	ldrb	r3, [r7, #3]
 8002bd0:	f003 020f 	and.w	r2, r3, #15
 8002bd4:	4613      	mov	r3, r2
 8002bd6:	00db      	lsls	r3, r3, #3
 8002bd8:	4413      	add	r3, r2
 8002bda:	009b      	lsls	r3, r3, #2
 8002bdc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002be0:	687a      	ldr	r2, [r7, #4]
 8002be2:	4413      	add	r3, r2
 8002be4:	3304      	adds	r3, #4
 8002be6:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	68f9      	ldr	r1, [r7, #12]
 8002bee:	4618      	mov	r0, r3
 8002bf0:	f003 fd66 	bl	80066c0 <USB_EPStopXfer>
 8002bf4:	4603      	mov	r3, r0
 8002bf6:	72fb      	strb	r3, [r7, #11]

  return ret;
 8002bf8:	7afb      	ldrb	r3, [r7, #11]
}
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	3710      	adds	r7, #16
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	bd80      	pop	{r7, pc}

08002c02 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002c02:	b580      	push	{r7, lr}
 8002c04:	b08a      	sub	sp, #40	; 0x28
 8002c06:	af02      	add	r7, sp, #8
 8002c08:	6078      	str	r0, [r7, #4]
 8002c0a:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002c12:	697b      	ldr	r3, [r7, #20]
 8002c14:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002c16:	683a      	ldr	r2, [r7, #0]
 8002c18:	4613      	mov	r3, r2
 8002c1a:	00db      	lsls	r3, r3, #3
 8002c1c:	4413      	add	r3, r2
 8002c1e:	009b      	lsls	r3, r3, #2
 8002c20:	3338      	adds	r3, #56	; 0x38
 8002c22:	687a      	ldr	r2, [r7, #4]
 8002c24:	4413      	add	r3, r2
 8002c26:	3304      	adds	r3, #4
 8002c28:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	6a1a      	ldr	r2, [r3, #32]
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	699b      	ldr	r3, [r3, #24]
 8002c32:	429a      	cmp	r2, r3
 8002c34:	d901      	bls.n	8002c3a <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002c36:	2301      	movs	r3, #1
 8002c38:	e06c      	b.n	8002d14 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	699a      	ldr	r2, [r3, #24]
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	6a1b      	ldr	r3, [r3, #32]
 8002c42:	1ad3      	subs	r3, r2, r3
 8002c44:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	68db      	ldr	r3, [r3, #12]
 8002c4a:	69fa      	ldr	r2, [r7, #28]
 8002c4c:	429a      	cmp	r2, r3
 8002c4e:	d902      	bls.n	8002c56 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	68db      	ldr	r3, [r3, #12]
 8002c54:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002c56:	69fb      	ldr	r3, [r7, #28]
 8002c58:	3303      	adds	r3, #3
 8002c5a:	089b      	lsrs	r3, r3, #2
 8002c5c:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002c5e:	e02b      	b.n	8002cb8 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	699a      	ldr	r2, [r3, #24]
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	6a1b      	ldr	r3, [r3, #32]
 8002c68:	1ad3      	subs	r3, r2, r3
 8002c6a:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	68db      	ldr	r3, [r3, #12]
 8002c70:	69fa      	ldr	r2, [r7, #28]
 8002c72:	429a      	cmp	r2, r3
 8002c74:	d902      	bls.n	8002c7c <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	68db      	ldr	r3, [r3, #12]
 8002c7a:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002c7c:	69fb      	ldr	r3, [r7, #28]
 8002c7e:	3303      	adds	r3, #3
 8002c80:	089b      	lsrs	r3, r3, #2
 8002c82:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	6919      	ldr	r1, [r3, #16]
 8002c88:	683b      	ldr	r3, [r7, #0]
 8002c8a:	b2da      	uxtb	r2, r3
 8002c8c:	69fb      	ldr	r3, [r7, #28]
 8002c8e:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002c94:	b2db      	uxtb	r3, r3
 8002c96:	9300      	str	r3, [sp, #0]
 8002c98:	4603      	mov	r3, r0
 8002c9a:	6978      	ldr	r0, [r7, #20]
 8002c9c:	f003 fdba 	bl	8006814 <USB_WritePacket>

    ep->xfer_buff  += len;
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	691a      	ldr	r2, [r3, #16]
 8002ca4:	69fb      	ldr	r3, [r7, #28]
 8002ca6:	441a      	add	r2, r3
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	6a1a      	ldr	r2, [r3, #32]
 8002cb0:	69fb      	ldr	r3, [r7, #28]
 8002cb2:	441a      	add	r2, r3
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002cb8:	683b      	ldr	r3, [r7, #0]
 8002cba:	015a      	lsls	r2, r3, #5
 8002cbc:	693b      	ldr	r3, [r7, #16]
 8002cbe:	4413      	add	r3, r2
 8002cc0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002cc4:	699b      	ldr	r3, [r3, #24]
 8002cc6:	b29b      	uxth	r3, r3
 8002cc8:	69ba      	ldr	r2, [r7, #24]
 8002cca:	429a      	cmp	r2, r3
 8002ccc:	d809      	bhi.n	8002ce2 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	6a1a      	ldr	r2, [r3, #32]
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002cd6:	429a      	cmp	r2, r3
 8002cd8:	d203      	bcs.n	8002ce2 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	699b      	ldr	r3, [r3, #24]
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d1be      	bne.n	8002c60 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	699a      	ldr	r2, [r3, #24]
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	6a1b      	ldr	r3, [r3, #32]
 8002cea:	429a      	cmp	r2, r3
 8002cec:	d811      	bhi.n	8002d12 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002cee:	683b      	ldr	r3, [r7, #0]
 8002cf0:	f003 030f 	and.w	r3, r3, #15
 8002cf4:	2201      	movs	r2, #1
 8002cf6:	fa02 f303 	lsl.w	r3, r2, r3
 8002cfa:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002cfc:	693b      	ldr	r3, [r7, #16]
 8002cfe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d02:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002d04:	68bb      	ldr	r3, [r7, #8]
 8002d06:	43db      	mvns	r3, r3
 8002d08:	6939      	ldr	r1, [r7, #16]
 8002d0a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002d0e:	4013      	ands	r3, r2
 8002d10:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8002d12:	2300      	movs	r3, #0
}
 8002d14:	4618      	mov	r0, r3
 8002d16:	3720      	adds	r7, #32
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	bd80      	pop	{r7, pc}

08002d1c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	b088      	sub	sp, #32
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]
 8002d24:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002d2c:	69fb      	ldr	r3, [r7, #28]
 8002d2e:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002d30:	69fb      	ldr	r3, [r7, #28]
 8002d32:	333c      	adds	r3, #60	; 0x3c
 8002d34:	3304      	adds	r3, #4
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002d3a:	683b      	ldr	r3, [r7, #0]
 8002d3c:	015a      	lsls	r2, r3, #5
 8002d3e:	69bb      	ldr	r3, [r7, #24]
 8002d40:	4413      	add	r3, r2
 8002d42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002d46:	689b      	ldr	r3, [r3, #8]
 8002d48:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	691b      	ldr	r3, [r3, #16]
 8002d4e:	2b01      	cmp	r3, #1
 8002d50:	d17b      	bne.n	8002e4a <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8002d52:	693b      	ldr	r3, [r7, #16]
 8002d54:	f003 0308 	and.w	r3, r3, #8
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d015      	beq.n	8002d88 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002d5c:	697b      	ldr	r3, [r7, #20]
 8002d5e:	4a61      	ldr	r2, [pc, #388]	; (8002ee4 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002d60:	4293      	cmp	r3, r2
 8002d62:	f240 80b9 	bls.w	8002ed8 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002d66:	693b      	ldr	r3, [r7, #16]
 8002d68:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	f000 80b3 	beq.w	8002ed8 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002d72:	683b      	ldr	r3, [r7, #0]
 8002d74:	015a      	lsls	r2, r3, #5
 8002d76:	69bb      	ldr	r3, [r7, #24]
 8002d78:	4413      	add	r3, r2
 8002d7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002d7e:	461a      	mov	r2, r3
 8002d80:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002d84:	6093      	str	r3, [r2, #8]
 8002d86:	e0a7      	b.n	8002ed8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002d88:	693b      	ldr	r3, [r7, #16]
 8002d8a:	f003 0320 	and.w	r3, r3, #32
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d009      	beq.n	8002da6 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002d92:	683b      	ldr	r3, [r7, #0]
 8002d94:	015a      	lsls	r2, r3, #5
 8002d96:	69bb      	ldr	r3, [r7, #24]
 8002d98:	4413      	add	r3, r2
 8002d9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002d9e:	461a      	mov	r2, r3
 8002da0:	2320      	movs	r3, #32
 8002da2:	6093      	str	r3, [r2, #8]
 8002da4:	e098      	b.n	8002ed8 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8002da6:	693b      	ldr	r3, [r7, #16]
 8002da8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	f040 8093 	bne.w	8002ed8 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002db2:	697b      	ldr	r3, [r7, #20]
 8002db4:	4a4b      	ldr	r2, [pc, #300]	; (8002ee4 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002db6:	4293      	cmp	r3, r2
 8002db8:	d90f      	bls.n	8002dda <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002dba:	693b      	ldr	r3, [r7, #16]
 8002dbc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d00a      	beq.n	8002dda <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002dc4:	683b      	ldr	r3, [r7, #0]
 8002dc6:	015a      	lsls	r2, r3, #5
 8002dc8:	69bb      	ldr	r3, [r7, #24]
 8002dca:	4413      	add	r3, r2
 8002dcc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002dd0:	461a      	mov	r2, r3
 8002dd2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002dd6:	6093      	str	r3, [r2, #8]
 8002dd8:	e07e      	b.n	8002ed8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8002dda:	683a      	ldr	r2, [r7, #0]
 8002ddc:	4613      	mov	r3, r2
 8002dde:	00db      	lsls	r3, r3, #3
 8002de0:	4413      	add	r3, r2
 8002de2:	009b      	lsls	r3, r3, #2
 8002de4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002de8:	687a      	ldr	r2, [r7, #4]
 8002dea:	4413      	add	r3, r2
 8002dec:	3304      	adds	r3, #4
 8002dee:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	69da      	ldr	r2, [r3, #28]
 8002df4:	683b      	ldr	r3, [r7, #0]
 8002df6:	0159      	lsls	r1, r3, #5
 8002df8:	69bb      	ldr	r3, [r7, #24]
 8002dfa:	440b      	add	r3, r1
 8002dfc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e00:	691b      	ldr	r3, [r3, #16]
 8002e02:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e06:	1ad2      	subs	r2, r2, r3
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8002e0c:	683b      	ldr	r3, [r7, #0]
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d114      	bne.n	8002e3c <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	699b      	ldr	r3, [r3, #24]
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d109      	bne.n	8002e2e <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	6818      	ldr	r0, [r3, #0]
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002e24:	461a      	mov	r2, r3
 8002e26:	2101      	movs	r1, #1
 8002e28:	f003 ff8a 	bl	8006d40 <USB_EP0_OutStart>
 8002e2c:	e006      	b.n	8002e3c <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	691a      	ldr	r2, [r3, #16]
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	6a1b      	ldr	r3, [r3, #32]
 8002e36:	441a      	add	r2, r3
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002e3c:	683b      	ldr	r3, [r7, #0]
 8002e3e:	b2db      	uxtb	r3, r3
 8002e40:	4619      	mov	r1, r3
 8002e42:	6878      	ldr	r0, [r7, #4]
 8002e44:	f006 f9d2 	bl	80091ec <HAL_PCD_DataOutStageCallback>
 8002e48:	e046      	b.n	8002ed8 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002e4a:	697b      	ldr	r3, [r7, #20]
 8002e4c:	4a26      	ldr	r2, [pc, #152]	; (8002ee8 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8002e4e:	4293      	cmp	r3, r2
 8002e50:	d124      	bne.n	8002e9c <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002e52:	693b      	ldr	r3, [r7, #16]
 8002e54:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d00a      	beq.n	8002e72 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002e5c:	683b      	ldr	r3, [r7, #0]
 8002e5e:	015a      	lsls	r2, r3, #5
 8002e60:	69bb      	ldr	r3, [r7, #24]
 8002e62:	4413      	add	r3, r2
 8002e64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e68:	461a      	mov	r2, r3
 8002e6a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002e6e:	6093      	str	r3, [r2, #8]
 8002e70:	e032      	b.n	8002ed8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002e72:	693b      	ldr	r3, [r7, #16]
 8002e74:	f003 0320 	and.w	r3, r3, #32
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d008      	beq.n	8002e8e <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002e7c:	683b      	ldr	r3, [r7, #0]
 8002e7e:	015a      	lsls	r2, r3, #5
 8002e80:	69bb      	ldr	r3, [r7, #24]
 8002e82:	4413      	add	r3, r2
 8002e84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e88:	461a      	mov	r2, r3
 8002e8a:	2320      	movs	r3, #32
 8002e8c:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002e8e:	683b      	ldr	r3, [r7, #0]
 8002e90:	b2db      	uxtb	r3, r3
 8002e92:	4619      	mov	r1, r3
 8002e94:	6878      	ldr	r0, [r7, #4]
 8002e96:	f006 f9a9 	bl	80091ec <HAL_PCD_DataOutStageCallback>
 8002e9a:	e01d      	b.n	8002ed8 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002e9c:	683b      	ldr	r3, [r7, #0]
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d114      	bne.n	8002ecc <PCD_EP_OutXfrComplete_int+0x1b0>
 8002ea2:	6879      	ldr	r1, [r7, #4]
 8002ea4:	683a      	ldr	r2, [r7, #0]
 8002ea6:	4613      	mov	r3, r2
 8002ea8:	00db      	lsls	r3, r3, #3
 8002eaa:	4413      	add	r3, r2
 8002eac:	009b      	lsls	r3, r3, #2
 8002eae:	440b      	add	r3, r1
 8002eb0:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d108      	bne.n	8002ecc <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	6818      	ldr	r0, [r3, #0]
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002ec4:	461a      	mov	r2, r3
 8002ec6:	2100      	movs	r1, #0
 8002ec8:	f003 ff3a 	bl	8006d40 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002ecc:	683b      	ldr	r3, [r7, #0]
 8002ece:	b2db      	uxtb	r3, r3
 8002ed0:	4619      	mov	r1, r3
 8002ed2:	6878      	ldr	r0, [r7, #4]
 8002ed4:	f006 f98a 	bl	80091ec <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8002ed8:	2300      	movs	r3, #0
}
 8002eda:	4618      	mov	r0, r3
 8002edc:	3720      	adds	r7, #32
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	bd80      	pop	{r7, pc}
 8002ee2:	bf00      	nop
 8002ee4:	4f54300a 	.word	0x4f54300a
 8002ee8:	4f54310a 	.word	0x4f54310a

08002eec <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002eec:	b580      	push	{r7, lr}
 8002eee:	b086      	sub	sp, #24
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]
 8002ef4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002efc:	697b      	ldr	r3, [r7, #20]
 8002efe:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002f00:	697b      	ldr	r3, [r7, #20]
 8002f02:	333c      	adds	r3, #60	; 0x3c
 8002f04:	3304      	adds	r3, #4
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002f0a:	683b      	ldr	r3, [r7, #0]
 8002f0c:	015a      	lsls	r2, r3, #5
 8002f0e:	693b      	ldr	r3, [r7, #16]
 8002f10:	4413      	add	r3, r2
 8002f12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f16:	689b      	ldr	r3, [r3, #8]
 8002f18:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	4a15      	ldr	r2, [pc, #84]	; (8002f74 <PCD_EP_OutSetupPacket_int+0x88>)
 8002f1e:	4293      	cmp	r3, r2
 8002f20:	d90e      	bls.n	8002f40 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002f22:	68bb      	ldr	r3, [r7, #8]
 8002f24:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d009      	beq.n	8002f40 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002f2c:	683b      	ldr	r3, [r7, #0]
 8002f2e:	015a      	lsls	r2, r3, #5
 8002f30:	693b      	ldr	r3, [r7, #16]
 8002f32:	4413      	add	r3, r2
 8002f34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f38:	461a      	mov	r2, r3
 8002f3a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002f3e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002f40:	6878      	ldr	r0, [r7, #4]
 8002f42:	f006 f941 	bl	80091c8 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	4a0a      	ldr	r2, [pc, #40]	; (8002f74 <PCD_EP_OutSetupPacket_int+0x88>)
 8002f4a:	4293      	cmp	r3, r2
 8002f4c:	d90c      	bls.n	8002f68 <PCD_EP_OutSetupPacket_int+0x7c>
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	691b      	ldr	r3, [r3, #16]
 8002f52:	2b01      	cmp	r3, #1
 8002f54:	d108      	bne.n	8002f68 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	6818      	ldr	r0, [r3, #0]
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002f60:	461a      	mov	r2, r3
 8002f62:	2101      	movs	r1, #1
 8002f64:	f003 feec 	bl	8006d40 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8002f68:	2300      	movs	r3, #0
}
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	3718      	adds	r7, #24
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	bd80      	pop	{r7, pc}
 8002f72:	bf00      	nop
 8002f74:	4f54300a 	.word	0x4f54300a

08002f78 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002f78:	b480      	push	{r7}
 8002f7a:	b085      	sub	sp, #20
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	6078      	str	r0, [r7, #4]
 8002f80:	460b      	mov	r3, r1
 8002f82:	70fb      	strb	r3, [r7, #3]
 8002f84:	4613      	mov	r3, r2
 8002f86:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f8e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002f90:	78fb      	ldrb	r3, [r7, #3]
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d107      	bne.n	8002fa6 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8002f96:	883b      	ldrh	r3, [r7, #0]
 8002f98:	0419      	lsls	r1, r3, #16
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	68ba      	ldr	r2, [r7, #8]
 8002fa0:	430a      	orrs	r2, r1
 8002fa2:	629a      	str	r2, [r3, #40]	; 0x28
 8002fa4:	e028      	b.n	8002ff8 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fac:	0c1b      	lsrs	r3, r3, #16
 8002fae:	68ba      	ldr	r2, [r7, #8]
 8002fb0:	4413      	add	r3, r2
 8002fb2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002fb4:	2300      	movs	r3, #0
 8002fb6:	73fb      	strb	r3, [r7, #15]
 8002fb8:	e00d      	b.n	8002fd6 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681a      	ldr	r2, [r3, #0]
 8002fbe:	7bfb      	ldrb	r3, [r7, #15]
 8002fc0:	3340      	adds	r3, #64	; 0x40
 8002fc2:	009b      	lsls	r3, r3, #2
 8002fc4:	4413      	add	r3, r2
 8002fc6:	685b      	ldr	r3, [r3, #4]
 8002fc8:	0c1b      	lsrs	r3, r3, #16
 8002fca:	68ba      	ldr	r2, [r7, #8]
 8002fcc:	4413      	add	r3, r2
 8002fce:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002fd0:	7bfb      	ldrb	r3, [r7, #15]
 8002fd2:	3301      	adds	r3, #1
 8002fd4:	73fb      	strb	r3, [r7, #15]
 8002fd6:	7bfa      	ldrb	r2, [r7, #15]
 8002fd8:	78fb      	ldrb	r3, [r7, #3]
 8002fda:	3b01      	subs	r3, #1
 8002fdc:	429a      	cmp	r2, r3
 8002fde:	d3ec      	bcc.n	8002fba <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002fe0:	883b      	ldrh	r3, [r7, #0]
 8002fe2:	0418      	lsls	r0, r3, #16
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	6819      	ldr	r1, [r3, #0]
 8002fe8:	78fb      	ldrb	r3, [r7, #3]
 8002fea:	3b01      	subs	r3, #1
 8002fec:	68ba      	ldr	r2, [r7, #8]
 8002fee:	4302      	orrs	r2, r0
 8002ff0:	3340      	adds	r3, #64	; 0x40
 8002ff2:	009b      	lsls	r3, r3, #2
 8002ff4:	440b      	add	r3, r1
 8002ff6:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002ff8:	2300      	movs	r3, #0
}
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	3714      	adds	r7, #20
 8002ffe:	46bd      	mov	sp, r7
 8003000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003004:	4770      	bx	lr

08003006 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003006:	b480      	push	{r7}
 8003008:	b083      	sub	sp, #12
 800300a:	af00      	add	r7, sp, #0
 800300c:	6078      	str	r0, [r7, #4]
 800300e:	460b      	mov	r3, r1
 8003010:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	887a      	ldrh	r2, [r7, #2]
 8003018:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800301a:	2300      	movs	r3, #0
}
 800301c:	4618      	mov	r0, r3
 800301e:	370c      	adds	r7, #12
 8003020:	46bd      	mov	sp, r7
 8003022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003026:	4770      	bx	lr

08003028 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003028:	b480      	push	{r7}
 800302a:	b083      	sub	sp, #12
 800302c:	af00      	add	r7, sp, #0
 800302e:	6078      	str	r0, [r7, #4]
 8003030:	460b      	mov	r3, r1
 8003032:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003034:	bf00      	nop
 8003036:	370c      	adds	r7, #12
 8003038:	46bd      	mov	sp, r7
 800303a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303e:	4770      	bx	lr

08003040 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003040:	b580      	push	{r7, lr}
 8003042:	b086      	sub	sp, #24
 8003044:	af00      	add	r7, sp, #0
 8003046:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	2b00      	cmp	r3, #0
 800304c:	d101      	bne.n	8003052 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800304e:	2301      	movs	r3, #1
 8003050:	e267      	b.n	8003522 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f003 0301 	and.w	r3, r3, #1
 800305a:	2b00      	cmp	r3, #0
 800305c:	d075      	beq.n	800314a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800305e:	4b88      	ldr	r3, [pc, #544]	; (8003280 <HAL_RCC_OscConfig+0x240>)
 8003060:	689b      	ldr	r3, [r3, #8]
 8003062:	f003 030c 	and.w	r3, r3, #12
 8003066:	2b04      	cmp	r3, #4
 8003068:	d00c      	beq.n	8003084 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800306a:	4b85      	ldr	r3, [pc, #532]	; (8003280 <HAL_RCC_OscConfig+0x240>)
 800306c:	689b      	ldr	r3, [r3, #8]
 800306e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003072:	2b08      	cmp	r3, #8
 8003074:	d112      	bne.n	800309c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003076:	4b82      	ldr	r3, [pc, #520]	; (8003280 <HAL_RCC_OscConfig+0x240>)
 8003078:	685b      	ldr	r3, [r3, #4]
 800307a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800307e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003082:	d10b      	bne.n	800309c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003084:	4b7e      	ldr	r3, [pc, #504]	; (8003280 <HAL_RCC_OscConfig+0x240>)
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800308c:	2b00      	cmp	r3, #0
 800308e:	d05b      	beq.n	8003148 <HAL_RCC_OscConfig+0x108>
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	685b      	ldr	r3, [r3, #4]
 8003094:	2b00      	cmp	r3, #0
 8003096:	d157      	bne.n	8003148 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003098:	2301      	movs	r3, #1
 800309a:	e242      	b.n	8003522 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	685b      	ldr	r3, [r3, #4]
 80030a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80030a4:	d106      	bne.n	80030b4 <HAL_RCC_OscConfig+0x74>
 80030a6:	4b76      	ldr	r3, [pc, #472]	; (8003280 <HAL_RCC_OscConfig+0x240>)
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	4a75      	ldr	r2, [pc, #468]	; (8003280 <HAL_RCC_OscConfig+0x240>)
 80030ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030b0:	6013      	str	r3, [r2, #0]
 80030b2:	e01d      	b.n	80030f0 <HAL_RCC_OscConfig+0xb0>
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	685b      	ldr	r3, [r3, #4]
 80030b8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80030bc:	d10c      	bne.n	80030d8 <HAL_RCC_OscConfig+0x98>
 80030be:	4b70      	ldr	r3, [pc, #448]	; (8003280 <HAL_RCC_OscConfig+0x240>)
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	4a6f      	ldr	r2, [pc, #444]	; (8003280 <HAL_RCC_OscConfig+0x240>)
 80030c4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80030c8:	6013      	str	r3, [r2, #0]
 80030ca:	4b6d      	ldr	r3, [pc, #436]	; (8003280 <HAL_RCC_OscConfig+0x240>)
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	4a6c      	ldr	r2, [pc, #432]	; (8003280 <HAL_RCC_OscConfig+0x240>)
 80030d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030d4:	6013      	str	r3, [r2, #0]
 80030d6:	e00b      	b.n	80030f0 <HAL_RCC_OscConfig+0xb0>
 80030d8:	4b69      	ldr	r3, [pc, #420]	; (8003280 <HAL_RCC_OscConfig+0x240>)
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	4a68      	ldr	r2, [pc, #416]	; (8003280 <HAL_RCC_OscConfig+0x240>)
 80030de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80030e2:	6013      	str	r3, [r2, #0]
 80030e4:	4b66      	ldr	r3, [pc, #408]	; (8003280 <HAL_RCC_OscConfig+0x240>)
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	4a65      	ldr	r2, [pc, #404]	; (8003280 <HAL_RCC_OscConfig+0x240>)
 80030ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80030ee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	685b      	ldr	r3, [r3, #4]
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d013      	beq.n	8003120 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030f8:	f7fe f99c 	bl	8001434 <HAL_GetTick>
 80030fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030fe:	e008      	b.n	8003112 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003100:	f7fe f998 	bl	8001434 <HAL_GetTick>
 8003104:	4602      	mov	r2, r0
 8003106:	693b      	ldr	r3, [r7, #16]
 8003108:	1ad3      	subs	r3, r2, r3
 800310a:	2b64      	cmp	r3, #100	; 0x64
 800310c:	d901      	bls.n	8003112 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800310e:	2303      	movs	r3, #3
 8003110:	e207      	b.n	8003522 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003112:	4b5b      	ldr	r3, [pc, #364]	; (8003280 <HAL_RCC_OscConfig+0x240>)
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800311a:	2b00      	cmp	r3, #0
 800311c:	d0f0      	beq.n	8003100 <HAL_RCC_OscConfig+0xc0>
 800311e:	e014      	b.n	800314a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003120:	f7fe f988 	bl	8001434 <HAL_GetTick>
 8003124:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003126:	e008      	b.n	800313a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003128:	f7fe f984 	bl	8001434 <HAL_GetTick>
 800312c:	4602      	mov	r2, r0
 800312e:	693b      	ldr	r3, [r7, #16]
 8003130:	1ad3      	subs	r3, r2, r3
 8003132:	2b64      	cmp	r3, #100	; 0x64
 8003134:	d901      	bls.n	800313a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003136:	2303      	movs	r3, #3
 8003138:	e1f3      	b.n	8003522 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800313a:	4b51      	ldr	r3, [pc, #324]	; (8003280 <HAL_RCC_OscConfig+0x240>)
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003142:	2b00      	cmp	r3, #0
 8003144:	d1f0      	bne.n	8003128 <HAL_RCC_OscConfig+0xe8>
 8003146:	e000      	b.n	800314a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003148:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f003 0302 	and.w	r3, r3, #2
 8003152:	2b00      	cmp	r3, #0
 8003154:	d063      	beq.n	800321e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003156:	4b4a      	ldr	r3, [pc, #296]	; (8003280 <HAL_RCC_OscConfig+0x240>)
 8003158:	689b      	ldr	r3, [r3, #8]
 800315a:	f003 030c 	and.w	r3, r3, #12
 800315e:	2b00      	cmp	r3, #0
 8003160:	d00b      	beq.n	800317a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003162:	4b47      	ldr	r3, [pc, #284]	; (8003280 <HAL_RCC_OscConfig+0x240>)
 8003164:	689b      	ldr	r3, [r3, #8]
 8003166:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800316a:	2b08      	cmp	r3, #8
 800316c:	d11c      	bne.n	80031a8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800316e:	4b44      	ldr	r3, [pc, #272]	; (8003280 <HAL_RCC_OscConfig+0x240>)
 8003170:	685b      	ldr	r3, [r3, #4]
 8003172:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003176:	2b00      	cmp	r3, #0
 8003178:	d116      	bne.n	80031a8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800317a:	4b41      	ldr	r3, [pc, #260]	; (8003280 <HAL_RCC_OscConfig+0x240>)
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f003 0302 	and.w	r3, r3, #2
 8003182:	2b00      	cmp	r3, #0
 8003184:	d005      	beq.n	8003192 <HAL_RCC_OscConfig+0x152>
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	68db      	ldr	r3, [r3, #12]
 800318a:	2b01      	cmp	r3, #1
 800318c:	d001      	beq.n	8003192 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800318e:	2301      	movs	r3, #1
 8003190:	e1c7      	b.n	8003522 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003192:	4b3b      	ldr	r3, [pc, #236]	; (8003280 <HAL_RCC_OscConfig+0x240>)
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	691b      	ldr	r3, [r3, #16]
 800319e:	00db      	lsls	r3, r3, #3
 80031a0:	4937      	ldr	r1, [pc, #220]	; (8003280 <HAL_RCC_OscConfig+0x240>)
 80031a2:	4313      	orrs	r3, r2
 80031a4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80031a6:	e03a      	b.n	800321e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	68db      	ldr	r3, [r3, #12]
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d020      	beq.n	80031f2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80031b0:	4b34      	ldr	r3, [pc, #208]	; (8003284 <HAL_RCC_OscConfig+0x244>)
 80031b2:	2201      	movs	r2, #1
 80031b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031b6:	f7fe f93d 	bl	8001434 <HAL_GetTick>
 80031ba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031bc:	e008      	b.n	80031d0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80031be:	f7fe f939 	bl	8001434 <HAL_GetTick>
 80031c2:	4602      	mov	r2, r0
 80031c4:	693b      	ldr	r3, [r7, #16]
 80031c6:	1ad3      	subs	r3, r2, r3
 80031c8:	2b02      	cmp	r3, #2
 80031ca:	d901      	bls.n	80031d0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80031cc:	2303      	movs	r3, #3
 80031ce:	e1a8      	b.n	8003522 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031d0:	4b2b      	ldr	r3, [pc, #172]	; (8003280 <HAL_RCC_OscConfig+0x240>)
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f003 0302 	and.w	r3, r3, #2
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d0f0      	beq.n	80031be <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031dc:	4b28      	ldr	r3, [pc, #160]	; (8003280 <HAL_RCC_OscConfig+0x240>)
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	691b      	ldr	r3, [r3, #16]
 80031e8:	00db      	lsls	r3, r3, #3
 80031ea:	4925      	ldr	r1, [pc, #148]	; (8003280 <HAL_RCC_OscConfig+0x240>)
 80031ec:	4313      	orrs	r3, r2
 80031ee:	600b      	str	r3, [r1, #0]
 80031f0:	e015      	b.n	800321e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80031f2:	4b24      	ldr	r3, [pc, #144]	; (8003284 <HAL_RCC_OscConfig+0x244>)
 80031f4:	2200      	movs	r2, #0
 80031f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031f8:	f7fe f91c 	bl	8001434 <HAL_GetTick>
 80031fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80031fe:	e008      	b.n	8003212 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003200:	f7fe f918 	bl	8001434 <HAL_GetTick>
 8003204:	4602      	mov	r2, r0
 8003206:	693b      	ldr	r3, [r7, #16]
 8003208:	1ad3      	subs	r3, r2, r3
 800320a:	2b02      	cmp	r3, #2
 800320c:	d901      	bls.n	8003212 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800320e:	2303      	movs	r3, #3
 8003210:	e187      	b.n	8003522 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003212:	4b1b      	ldr	r3, [pc, #108]	; (8003280 <HAL_RCC_OscConfig+0x240>)
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f003 0302 	and.w	r3, r3, #2
 800321a:	2b00      	cmp	r3, #0
 800321c:	d1f0      	bne.n	8003200 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f003 0308 	and.w	r3, r3, #8
 8003226:	2b00      	cmp	r3, #0
 8003228:	d036      	beq.n	8003298 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	695b      	ldr	r3, [r3, #20]
 800322e:	2b00      	cmp	r3, #0
 8003230:	d016      	beq.n	8003260 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003232:	4b15      	ldr	r3, [pc, #84]	; (8003288 <HAL_RCC_OscConfig+0x248>)
 8003234:	2201      	movs	r2, #1
 8003236:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003238:	f7fe f8fc 	bl	8001434 <HAL_GetTick>
 800323c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800323e:	e008      	b.n	8003252 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003240:	f7fe f8f8 	bl	8001434 <HAL_GetTick>
 8003244:	4602      	mov	r2, r0
 8003246:	693b      	ldr	r3, [r7, #16]
 8003248:	1ad3      	subs	r3, r2, r3
 800324a:	2b02      	cmp	r3, #2
 800324c:	d901      	bls.n	8003252 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800324e:	2303      	movs	r3, #3
 8003250:	e167      	b.n	8003522 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003252:	4b0b      	ldr	r3, [pc, #44]	; (8003280 <HAL_RCC_OscConfig+0x240>)
 8003254:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003256:	f003 0302 	and.w	r3, r3, #2
 800325a:	2b00      	cmp	r3, #0
 800325c:	d0f0      	beq.n	8003240 <HAL_RCC_OscConfig+0x200>
 800325e:	e01b      	b.n	8003298 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003260:	4b09      	ldr	r3, [pc, #36]	; (8003288 <HAL_RCC_OscConfig+0x248>)
 8003262:	2200      	movs	r2, #0
 8003264:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003266:	f7fe f8e5 	bl	8001434 <HAL_GetTick>
 800326a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800326c:	e00e      	b.n	800328c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800326e:	f7fe f8e1 	bl	8001434 <HAL_GetTick>
 8003272:	4602      	mov	r2, r0
 8003274:	693b      	ldr	r3, [r7, #16]
 8003276:	1ad3      	subs	r3, r2, r3
 8003278:	2b02      	cmp	r3, #2
 800327a:	d907      	bls.n	800328c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800327c:	2303      	movs	r3, #3
 800327e:	e150      	b.n	8003522 <HAL_RCC_OscConfig+0x4e2>
 8003280:	40023800 	.word	0x40023800
 8003284:	42470000 	.word	0x42470000
 8003288:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800328c:	4b88      	ldr	r3, [pc, #544]	; (80034b0 <HAL_RCC_OscConfig+0x470>)
 800328e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003290:	f003 0302 	and.w	r3, r3, #2
 8003294:	2b00      	cmp	r3, #0
 8003296:	d1ea      	bne.n	800326e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f003 0304 	and.w	r3, r3, #4
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	f000 8097 	beq.w	80033d4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80032a6:	2300      	movs	r3, #0
 80032a8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80032aa:	4b81      	ldr	r3, [pc, #516]	; (80034b0 <HAL_RCC_OscConfig+0x470>)
 80032ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d10f      	bne.n	80032d6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80032b6:	2300      	movs	r3, #0
 80032b8:	60bb      	str	r3, [r7, #8]
 80032ba:	4b7d      	ldr	r3, [pc, #500]	; (80034b0 <HAL_RCC_OscConfig+0x470>)
 80032bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032be:	4a7c      	ldr	r2, [pc, #496]	; (80034b0 <HAL_RCC_OscConfig+0x470>)
 80032c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80032c4:	6413      	str	r3, [r2, #64]	; 0x40
 80032c6:	4b7a      	ldr	r3, [pc, #488]	; (80034b0 <HAL_RCC_OscConfig+0x470>)
 80032c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032ce:	60bb      	str	r3, [r7, #8]
 80032d0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80032d2:	2301      	movs	r3, #1
 80032d4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032d6:	4b77      	ldr	r3, [pc, #476]	; (80034b4 <HAL_RCC_OscConfig+0x474>)
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d118      	bne.n	8003314 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80032e2:	4b74      	ldr	r3, [pc, #464]	; (80034b4 <HAL_RCC_OscConfig+0x474>)
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	4a73      	ldr	r2, [pc, #460]	; (80034b4 <HAL_RCC_OscConfig+0x474>)
 80032e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032ec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80032ee:	f7fe f8a1 	bl	8001434 <HAL_GetTick>
 80032f2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032f4:	e008      	b.n	8003308 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80032f6:	f7fe f89d 	bl	8001434 <HAL_GetTick>
 80032fa:	4602      	mov	r2, r0
 80032fc:	693b      	ldr	r3, [r7, #16]
 80032fe:	1ad3      	subs	r3, r2, r3
 8003300:	2b02      	cmp	r3, #2
 8003302:	d901      	bls.n	8003308 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003304:	2303      	movs	r3, #3
 8003306:	e10c      	b.n	8003522 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003308:	4b6a      	ldr	r3, [pc, #424]	; (80034b4 <HAL_RCC_OscConfig+0x474>)
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003310:	2b00      	cmp	r3, #0
 8003312:	d0f0      	beq.n	80032f6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	689b      	ldr	r3, [r3, #8]
 8003318:	2b01      	cmp	r3, #1
 800331a:	d106      	bne.n	800332a <HAL_RCC_OscConfig+0x2ea>
 800331c:	4b64      	ldr	r3, [pc, #400]	; (80034b0 <HAL_RCC_OscConfig+0x470>)
 800331e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003320:	4a63      	ldr	r2, [pc, #396]	; (80034b0 <HAL_RCC_OscConfig+0x470>)
 8003322:	f043 0301 	orr.w	r3, r3, #1
 8003326:	6713      	str	r3, [r2, #112]	; 0x70
 8003328:	e01c      	b.n	8003364 <HAL_RCC_OscConfig+0x324>
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	689b      	ldr	r3, [r3, #8]
 800332e:	2b05      	cmp	r3, #5
 8003330:	d10c      	bne.n	800334c <HAL_RCC_OscConfig+0x30c>
 8003332:	4b5f      	ldr	r3, [pc, #380]	; (80034b0 <HAL_RCC_OscConfig+0x470>)
 8003334:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003336:	4a5e      	ldr	r2, [pc, #376]	; (80034b0 <HAL_RCC_OscConfig+0x470>)
 8003338:	f043 0304 	orr.w	r3, r3, #4
 800333c:	6713      	str	r3, [r2, #112]	; 0x70
 800333e:	4b5c      	ldr	r3, [pc, #368]	; (80034b0 <HAL_RCC_OscConfig+0x470>)
 8003340:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003342:	4a5b      	ldr	r2, [pc, #364]	; (80034b0 <HAL_RCC_OscConfig+0x470>)
 8003344:	f043 0301 	orr.w	r3, r3, #1
 8003348:	6713      	str	r3, [r2, #112]	; 0x70
 800334a:	e00b      	b.n	8003364 <HAL_RCC_OscConfig+0x324>
 800334c:	4b58      	ldr	r3, [pc, #352]	; (80034b0 <HAL_RCC_OscConfig+0x470>)
 800334e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003350:	4a57      	ldr	r2, [pc, #348]	; (80034b0 <HAL_RCC_OscConfig+0x470>)
 8003352:	f023 0301 	bic.w	r3, r3, #1
 8003356:	6713      	str	r3, [r2, #112]	; 0x70
 8003358:	4b55      	ldr	r3, [pc, #340]	; (80034b0 <HAL_RCC_OscConfig+0x470>)
 800335a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800335c:	4a54      	ldr	r2, [pc, #336]	; (80034b0 <HAL_RCC_OscConfig+0x470>)
 800335e:	f023 0304 	bic.w	r3, r3, #4
 8003362:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	689b      	ldr	r3, [r3, #8]
 8003368:	2b00      	cmp	r3, #0
 800336a:	d015      	beq.n	8003398 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800336c:	f7fe f862 	bl	8001434 <HAL_GetTick>
 8003370:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003372:	e00a      	b.n	800338a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003374:	f7fe f85e 	bl	8001434 <HAL_GetTick>
 8003378:	4602      	mov	r2, r0
 800337a:	693b      	ldr	r3, [r7, #16]
 800337c:	1ad3      	subs	r3, r2, r3
 800337e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003382:	4293      	cmp	r3, r2
 8003384:	d901      	bls.n	800338a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003386:	2303      	movs	r3, #3
 8003388:	e0cb      	b.n	8003522 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800338a:	4b49      	ldr	r3, [pc, #292]	; (80034b0 <HAL_RCC_OscConfig+0x470>)
 800338c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800338e:	f003 0302 	and.w	r3, r3, #2
 8003392:	2b00      	cmp	r3, #0
 8003394:	d0ee      	beq.n	8003374 <HAL_RCC_OscConfig+0x334>
 8003396:	e014      	b.n	80033c2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003398:	f7fe f84c 	bl	8001434 <HAL_GetTick>
 800339c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800339e:	e00a      	b.n	80033b6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80033a0:	f7fe f848 	bl	8001434 <HAL_GetTick>
 80033a4:	4602      	mov	r2, r0
 80033a6:	693b      	ldr	r3, [r7, #16]
 80033a8:	1ad3      	subs	r3, r2, r3
 80033aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80033ae:	4293      	cmp	r3, r2
 80033b0:	d901      	bls.n	80033b6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80033b2:	2303      	movs	r3, #3
 80033b4:	e0b5      	b.n	8003522 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80033b6:	4b3e      	ldr	r3, [pc, #248]	; (80034b0 <HAL_RCC_OscConfig+0x470>)
 80033b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033ba:	f003 0302 	and.w	r3, r3, #2
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d1ee      	bne.n	80033a0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80033c2:	7dfb      	ldrb	r3, [r7, #23]
 80033c4:	2b01      	cmp	r3, #1
 80033c6:	d105      	bne.n	80033d4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80033c8:	4b39      	ldr	r3, [pc, #228]	; (80034b0 <HAL_RCC_OscConfig+0x470>)
 80033ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033cc:	4a38      	ldr	r2, [pc, #224]	; (80034b0 <HAL_RCC_OscConfig+0x470>)
 80033ce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80033d2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	699b      	ldr	r3, [r3, #24]
 80033d8:	2b00      	cmp	r3, #0
 80033da:	f000 80a1 	beq.w	8003520 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80033de:	4b34      	ldr	r3, [pc, #208]	; (80034b0 <HAL_RCC_OscConfig+0x470>)
 80033e0:	689b      	ldr	r3, [r3, #8]
 80033e2:	f003 030c 	and.w	r3, r3, #12
 80033e6:	2b08      	cmp	r3, #8
 80033e8:	d05c      	beq.n	80034a4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	699b      	ldr	r3, [r3, #24]
 80033ee:	2b02      	cmp	r3, #2
 80033f0:	d141      	bne.n	8003476 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033f2:	4b31      	ldr	r3, [pc, #196]	; (80034b8 <HAL_RCC_OscConfig+0x478>)
 80033f4:	2200      	movs	r2, #0
 80033f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033f8:	f7fe f81c 	bl	8001434 <HAL_GetTick>
 80033fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033fe:	e008      	b.n	8003412 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003400:	f7fe f818 	bl	8001434 <HAL_GetTick>
 8003404:	4602      	mov	r2, r0
 8003406:	693b      	ldr	r3, [r7, #16]
 8003408:	1ad3      	subs	r3, r2, r3
 800340a:	2b02      	cmp	r3, #2
 800340c:	d901      	bls.n	8003412 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800340e:	2303      	movs	r3, #3
 8003410:	e087      	b.n	8003522 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003412:	4b27      	ldr	r3, [pc, #156]	; (80034b0 <HAL_RCC_OscConfig+0x470>)
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800341a:	2b00      	cmp	r3, #0
 800341c:	d1f0      	bne.n	8003400 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	69da      	ldr	r2, [r3, #28]
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	6a1b      	ldr	r3, [r3, #32]
 8003426:	431a      	orrs	r2, r3
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800342c:	019b      	lsls	r3, r3, #6
 800342e:	431a      	orrs	r2, r3
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003434:	085b      	lsrs	r3, r3, #1
 8003436:	3b01      	subs	r3, #1
 8003438:	041b      	lsls	r3, r3, #16
 800343a:	431a      	orrs	r2, r3
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003440:	061b      	lsls	r3, r3, #24
 8003442:	491b      	ldr	r1, [pc, #108]	; (80034b0 <HAL_RCC_OscConfig+0x470>)
 8003444:	4313      	orrs	r3, r2
 8003446:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003448:	4b1b      	ldr	r3, [pc, #108]	; (80034b8 <HAL_RCC_OscConfig+0x478>)
 800344a:	2201      	movs	r2, #1
 800344c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800344e:	f7fd fff1 	bl	8001434 <HAL_GetTick>
 8003452:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003454:	e008      	b.n	8003468 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003456:	f7fd ffed 	bl	8001434 <HAL_GetTick>
 800345a:	4602      	mov	r2, r0
 800345c:	693b      	ldr	r3, [r7, #16]
 800345e:	1ad3      	subs	r3, r2, r3
 8003460:	2b02      	cmp	r3, #2
 8003462:	d901      	bls.n	8003468 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003464:	2303      	movs	r3, #3
 8003466:	e05c      	b.n	8003522 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003468:	4b11      	ldr	r3, [pc, #68]	; (80034b0 <HAL_RCC_OscConfig+0x470>)
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003470:	2b00      	cmp	r3, #0
 8003472:	d0f0      	beq.n	8003456 <HAL_RCC_OscConfig+0x416>
 8003474:	e054      	b.n	8003520 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003476:	4b10      	ldr	r3, [pc, #64]	; (80034b8 <HAL_RCC_OscConfig+0x478>)
 8003478:	2200      	movs	r2, #0
 800347a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800347c:	f7fd ffda 	bl	8001434 <HAL_GetTick>
 8003480:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003482:	e008      	b.n	8003496 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003484:	f7fd ffd6 	bl	8001434 <HAL_GetTick>
 8003488:	4602      	mov	r2, r0
 800348a:	693b      	ldr	r3, [r7, #16]
 800348c:	1ad3      	subs	r3, r2, r3
 800348e:	2b02      	cmp	r3, #2
 8003490:	d901      	bls.n	8003496 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003492:	2303      	movs	r3, #3
 8003494:	e045      	b.n	8003522 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003496:	4b06      	ldr	r3, [pc, #24]	; (80034b0 <HAL_RCC_OscConfig+0x470>)
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d1f0      	bne.n	8003484 <HAL_RCC_OscConfig+0x444>
 80034a2:	e03d      	b.n	8003520 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	699b      	ldr	r3, [r3, #24]
 80034a8:	2b01      	cmp	r3, #1
 80034aa:	d107      	bne.n	80034bc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80034ac:	2301      	movs	r3, #1
 80034ae:	e038      	b.n	8003522 <HAL_RCC_OscConfig+0x4e2>
 80034b0:	40023800 	.word	0x40023800
 80034b4:	40007000 	.word	0x40007000
 80034b8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80034bc:	4b1b      	ldr	r3, [pc, #108]	; (800352c <HAL_RCC_OscConfig+0x4ec>)
 80034be:	685b      	ldr	r3, [r3, #4]
 80034c0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	699b      	ldr	r3, [r3, #24]
 80034c6:	2b01      	cmp	r3, #1
 80034c8:	d028      	beq.n	800351c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80034d4:	429a      	cmp	r2, r3
 80034d6:	d121      	bne.n	800351c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80034e2:	429a      	cmp	r2, r3
 80034e4:	d11a      	bne.n	800351c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80034e6:	68fa      	ldr	r2, [r7, #12]
 80034e8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80034ec:	4013      	ands	r3, r2
 80034ee:	687a      	ldr	r2, [r7, #4]
 80034f0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80034f2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80034f4:	4293      	cmp	r3, r2
 80034f6:	d111      	bne.n	800351c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003502:	085b      	lsrs	r3, r3, #1
 8003504:	3b01      	subs	r3, #1
 8003506:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003508:	429a      	cmp	r2, r3
 800350a:	d107      	bne.n	800351c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003516:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003518:	429a      	cmp	r2, r3
 800351a:	d001      	beq.n	8003520 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800351c:	2301      	movs	r3, #1
 800351e:	e000      	b.n	8003522 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003520:	2300      	movs	r3, #0
}
 8003522:	4618      	mov	r0, r3
 8003524:	3718      	adds	r7, #24
 8003526:	46bd      	mov	sp, r7
 8003528:	bd80      	pop	{r7, pc}
 800352a:	bf00      	nop
 800352c:	40023800 	.word	0x40023800

08003530 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003530:	b580      	push	{r7, lr}
 8003532:	b084      	sub	sp, #16
 8003534:	af00      	add	r7, sp, #0
 8003536:	6078      	str	r0, [r7, #4]
 8003538:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	2b00      	cmp	r3, #0
 800353e:	d101      	bne.n	8003544 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003540:	2301      	movs	r3, #1
 8003542:	e0cc      	b.n	80036de <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003544:	4b68      	ldr	r3, [pc, #416]	; (80036e8 <HAL_RCC_ClockConfig+0x1b8>)
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f003 0307 	and.w	r3, r3, #7
 800354c:	683a      	ldr	r2, [r7, #0]
 800354e:	429a      	cmp	r2, r3
 8003550:	d90c      	bls.n	800356c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003552:	4b65      	ldr	r3, [pc, #404]	; (80036e8 <HAL_RCC_ClockConfig+0x1b8>)
 8003554:	683a      	ldr	r2, [r7, #0]
 8003556:	b2d2      	uxtb	r2, r2
 8003558:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800355a:	4b63      	ldr	r3, [pc, #396]	; (80036e8 <HAL_RCC_ClockConfig+0x1b8>)
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f003 0307 	and.w	r3, r3, #7
 8003562:	683a      	ldr	r2, [r7, #0]
 8003564:	429a      	cmp	r2, r3
 8003566:	d001      	beq.n	800356c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003568:	2301      	movs	r3, #1
 800356a:	e0b8      	b.n	80036de <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f003 0302 	and.w	r3, r3, #2
 8003574:	2b00      	cmp	r3, #0
 8003576:	d020      	beq.n	80035ba <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f003 0304 	and.w	r3, r3, #4
 8003580:	2b00      	cmp	r3, #0
 8003582:	d005      	beq.n	8003590 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003584:	4b59      	ldr	r3, [pc, #356]	; (80036ec <HAL_RCC_ClockConfig+0x1bc>)
 8003586:	689b      	ldr	r3, [r3, #8]
 8003588:	4a58      	ldr	r2, [pc, #352]	; (80036ec <HAL_RCC_ClockConfig+0x1bc>)
 800358a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800358e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f003 0308 	and.w	r3, r3, #8
 8003598:	2b00      	cmp	r3, #0
 800359a:	d005      	beq.n	80035a8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800359c:	4b53      	ldr	r3, [pc, #332]	; (80036ec <HAL_RCC_ClockConfig+0x1bc>)
 800359e:	689b      	ldr	r3, [r3, #8]
 80035a0:	4a52      	ldr	r2, [pc, #328]	; (80036ec <HAL_RCC_ClockConfig+0x1bc>)
 80035a2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80035a6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80035a8:	4b50      	ldr	r3, [pc, #320]	; (80036ec <HAL_RCC_ClockConfig+0x1bc>)
 80035aa:	689b      	ldr	r3, [r3, #8]
 80035ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	689b      	ldr	r3, [r3, #8]
 80035b4:	494d      	ldr	r1, [pc, #308]	; (80036ec <HAL_RCC_ClockConfig+0x1bc>)
 80035b6:	4313      	orrs	r3, r2
 80035b8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f003 0301 	and.w	r3, r3, #1
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d044      	beq.n	8003650 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	685b      	ldr	r3, [r3, #4]
 80035ca:	2b01      	cmp	r3, #1
 80035cc:	d107      	bne.n	80035de <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035ce:	4b47      	ldr	r3, [pc, #284]	; (80036ec <HAL_RCC_ClockConfig+0x1bc>)
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d119      	bne.n	800360e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80035da:	2301      	movs	r3, #1
 80035dc:	e07f      	b.n	80036de <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	685b      	ldr	r3, [r3, #4]
 80035e2:	2b02      	cmp	r3, #2
 80035e4:	d003      	beq.n	80035ee <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80035ea:	2b03      	cmp	r3, #3
 80035ec:	d107      	bne.n	80035fe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035ee:	4b3f      	ldr	r3, [pc, #252]	; (80036ec <HAL_RCC_ClockConfig+0x1bc>)
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d109      	bne.n	800360e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80035fa:	2301      	movs	r3, #1
 80035fc:	e06f      	b.n	80036de <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035fe:	4b3b      	ldr	r3, [pc, #236]	; (80036ec <HAL_RCC_ClockConfig+0x1bc>)
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f003 0302 	and.w	r3, r3, #2
 8003606:	2b00      	cmp	r3, #0
 8003608:	d101      	bne.n	800360e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800360a:	2301      	movs	r3, #1
 800360c:	e067      	b.n	80036de <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800360e:	4b37      	ldr	r3, [pc, #220]	; (80036ec <HAL_RCC_ClockConfig+0x1bc>)
 8003610:	689b      	ldr	r3, [r3, #8]
 8003612:	f023 0203 	bic.w	r2, r3, #3
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	685b      	ldr	r3, [r3, #4]
 800361a:	4934      	ldr	r1, [pc, #208]	; (80036ec <HAL_RCC_ClockConfig+0x1bc>)
 800361c:	4313      	orrs	r3, r2
 800361e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003620:	f7fd ff08 	bl	8001434 <HAL_GetTick>
 8003624:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003626:	e00a      	b.n	800363e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003628:	f7fd ff04 	bl	8001434 <HAL_GetTick>
 800362c:	4602      	mov	r2, r0
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	1ad3      	subs	r3, r2, r3
 8003632:	f241 3288 	movw	r2, #5000	; 0x1388
 8003636:	4293      	cmp	r3, r2
 8003638:	d901      	bls.n	800363e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800363a:	2303      	movs	r3, #3
 800363c:	e04f      	b.n	80036de <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800363e:	4b2b      	ldr	r3, [pc, #172]	; (80036ec <HAL_RCC_ClockConfig+0x1bc>)
 8003640:	689b      	ldr	r3, [r3, #8]
 8003642:	f003 020c 	and.w	r2, r3, #12
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	685b      	ldr	r3, [r3, #4]
 800364a:	009b      	lsls	r3, r3, #2
 800364c:	429a      	cmp	r2, r3
 800364e:	d1eb      	bne.n	8003628 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003650:	4b25      	ldr	r3, [pc, #148]	; (80036e8 <HAL_RCC_ClockConfig+0x1b8>)
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f003 0307 	and.w	r3, r3, #7
 8003658:	683a      	ldr	r2, [r7, #0]
 800365a:	429a      	cmp	r2, r3
 800365c:	d20c      	bcs.n	8003678 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800365e:	4b22      	ldr	r3, [pc, #136]	; (80036e8 <HAL_RCC_ClockConfig+0x1b8>)
 8003660:	683a      	ldr	r2, [r7, #0]
 8003662:	b2d2      	uxtb	r2, r2
 8003664:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003666:	4b20      	ldr	r3, [pc, #128]	; (80036e8 <HAL_RCC_ClockConfig+0x1b8>)
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f003 0307 	and.w	r3, r3, #7
 800366e:	683a      	ldr	r2, [r7, #0]
 8003670:	429a      	cmp	r2, r3
 8003672:	d001      	beq.n	8003678 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003674:	2301      	movs	r3, #1
 8003676:	e032      	b.n	80036de <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f003 0304 	and.w	r3, r3, #4
 8003680:	2b00      	cmp	r3, #0
 8003682:	d008      	beq.n	8003696 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003684:	4b19      	ldr	r3, [pc, #100]	; (80036ec <HAL_RCC_ClockConfig+0x1bc>)
 8003686:	689b      	ldr	r3, [r3, #8]
 8003688:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	68db      	ldr	r3, [r3, #12]
 8003690:	4916      	ldr	r1, [pc, #88]	; (80036ec <HAL_RCC_ClockConfig+0x1bc>)
 8003692:	4313      	orrs	r3, r2
 8003694:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f003 0308 	and.w	r3, r3, #8
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d009      	beq.n	80036b6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80036a2:	4b12      	ldr	r3, [pc, #72]	; (80036ec <HAL_RCC_ClockConfig+0x1bc>)
 80036a4:	689b      	ldr	r3, [r3, #8]
 80036a6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	691b      	ldr	r3, [r3, #16]
 80036ae:	00db      	lsls	r3, r3, #3
 80036b0:	490e      	ldr	r1, [pc, #56]	; (80036ec <HAL_RCC_ClockConfig+0x1bc>)
 80036b2:	4313      	orrs	r3, r2
 80036b4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80036b6:	f000 f821 	bl	80036fc <HAL_RCC_GetSysClockFreq>
 80036ba:	4602      	mov	r2, r0
 80036bc:	4b0b      	ldr	r3, [pc, #44]	; (80036ec <HAL_RCC_ClockConfig+0x1bc>)
 80036be:	689b      	ldr	r3, [r3, #8]
 80036c0:	091b      	lsrs	r3, r3, #4
 80036c2:	f003 030f 	and.w	r3, r3, #15
 80036c6:	490a      	ldr	r1, [pc, #40]	; (80036f0 <HAL_RCC_ClockConfig+0x1c0>)
 80036c8:	5ccb      	ldrb	r3, [r1, r3]
 80036ca:	fa22 f303 	lsr.w	r3, r2, r3
 80036ce:	4a09      	ldr	r2, [pc, #36]	; (80036f4 <HAL_RCC_ClockConfig+0x1c4>)
 80036d0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80036d2:	4b09      	ldr	r3, [pc, #36]	; (80036f8 <HAL_RCC_ClockConfig+0x1c8>)
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	4618      	mov	r0, r3
 80036d8:	f7fd fe68 	bl	80013ac <HAL_InitTick>

  return HAL_OK;
 80036dc:	2300      	movs	r3, #0
}
 80036de:	4618      	mov	r0, r3
 80036e0:	3710      	adds	r7, #16
 80036e2:	46bd      	mov	sp, r7
 80036e4:	bd80      	pop	{r7, pc}
 80036e6:	bf00      	nop
 80036e8:	40023c00 	.word	0x40023c00
 80036ec:	40023800 	.word	0x40023800
 80036f0:	0800a0a4 	.word	0x0800a0a4
 80036f4:	20000008 	.word	0x20000008
 80036f8:	2000000c 	.word	0x2000000c

080036fc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80036fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003700:	b090      	sub	sp, #64	; 0x40
 8003702:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003704:	2300      	movs	r3, #0
 8003706:	637b      	str	r3, [r7, #52]	; 0x34
 8003708:	2300      	movs	r3, #0
 800370a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800370c:	2300      	movs	r3, #0
 800370e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8003710:	2300      	movs	r3, #0
 8003712:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003714:	4b59      	ldr	r3, [pc, #356]	; (800387c <HAL_RCC_GetSysClockFreq+0x180>)
 8003716:	689b      	ldr	r3, [r3, #8]
 8003718:	f003 030c 	and.w	r3, r3, #12
 800371c:	2b08      	cmp	r3, #8
 800371e:	d00d      	beq.n	800373c <HAL_RCC_GetSysClockFreq+0x40>
 8003720:	2b08      	cmp	r3, #8
 8003722:	f200 80a1 	bhi.w	8003868 <HAL_RCC_GetSysClockFreq+0x16c>
 8003726:	2b00      	cmp	r3, #0
 8003728:	d002      	beq.n	8003730 <HAL_RCC_GetSysClockFreq+0x34>
 800372a:	2b04      	cmp	r3, #4
 800372c:	d003      	beq.n	8003736 <HAL_RCC_GetSysClockFreq+0x3a>
 800372e:	e09b      	b.n	8003868 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003730:	4b53      	ldr	r3, [pc, #332]	; (8003880 <HAL_RCC_GetSysClockFreq+0x184>)
 8003732:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8003734:	e09b      	b.n	800386e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003736:	4b53      	ldr	r3, [pc, #332]	; (8003884 <HAL_RCC_GetSysClockFreq+0x188>)
 8003738:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800373a:	e098      	b.n	800386e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800373c:	4b4f      	ldr	r3, [pc, #316]	; (800387c <HAL_RCC_GetSysClockFreq+0x180>)
 800373e:	685b      	ldr	r3, [r3, #4]
 8003740:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003744:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003746:	4b4d      	ldr	r3, [pc, #308]	; (800387c <HAL_RCC_GetSysClockFreq+0x180>)
 8003748:	685b      	ldr	r3, [r3, #4]
 800374a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800374e:	2b00      	cmp	r3, #0
 8003750:	d028      	beq.n	80037a4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003752:	4b4a      	ldr	r3, [pc, #296]	; (800387c <HAL_RCC_GetSysClockFreq+0x180>)
 8003754:	685b      	ldr	r3, [r3, #4]
 8003756:	099b      	lsrs	r3, r3, #6
 8003758:	2200      	movs	r2, #0
 800375a:	623b      	str	r3, [r7, #32]
 800375c:	627a      	str	r2, [r7, #36]	; 0x24
 800375e:	6a3b      	ldr	r3, [r7, #32]
 8003760:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003764:	2100      	movs	r1, #0
 8003766:	4b47      	ldr	r3, [pc, #284]	; (8003884 <HAL_RCC_GetSysClockFreq+0x188>)
 8003768:	fb03 f201 	mul.w	r2, r3, r1
 800376c:	2300      	movs	r3, #0
 800376e:	fb00 f303 	mul.w	r3, r0, r3
 8003772:	4413      	add	r3, r2
 8003774:	4a43      	ldr	r2, [pc, #268]	; (8003884 <HAL_RCC_GetSysClockFreq+0x188>)
 8003776:	fba0 1202 	umull	r1, r2, r0, r2
 800377a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800377c:	460a      	mov	r2, r1
 800377e:	62ba      	str	r2, [r7, #40]	; 0x28
 8003780:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003782:	4413      	add	r3, r2
 8003784:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003786:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003788:	2200      	movs	r2, #0
 800378a:	61bb      	str	r3, [r7, #24]
 800378c:	61fa      	str	r2, [r7, #28]
 800378e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003792:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003796:	f7fc fd17 	bl	80001c8 <__aeabi_uldivmod>
 800379a:	4602      	mov	r2, r0
 800379c:	460b      	mov	r3, r1
 800379e:	4613      	mov	r3, r2
 80037a0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80037a2:	e053      	b.n	800384c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80037a4:	4b35      	ldr	r3, [pc, #212]	; (800387c <HAL_RCC_GetSysClockFreq+0x180>)
 80037a6:	685b      	ldr	r3, [r3, #4]
 80037a8:	099b      	lsrs	r3, r3, #6
 80037aa:	2200      	movs	r2, #0
 80037ac:	613b      	str	r3, [r7, #16]
 80037ae:	617a      	str	r2, [r7, #20]
 80037b0:	693b      	ldr	r3, [r7, #16]
 80037b2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80037b6:	f04f 0b00 	mov.w	fp, #0
 80037ba:	4652      	mov	r2, sl
 80037bc:	465b      	mov	r3, fp
 80037be:	f04f 0000 	mov.w	r0, #0
 80037c2:	f04f 0100 	mov.w	r1, #0
 80037c6:	0159      	lsls	r1, r3, #5
 80037c8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80037cc:	0150      	lsls	r0, r2, #5
 80037ce:	4602      	mov	r2, r0
 80037d0:	460b      	mov	r3, r1
 80037d2:	ebb2 080a 	subs.w	r8, r2, sl
 80037d6:	eb63 090b 	sbc.w	r9, r3, fp
 80037da:	f04f 0200 	mov.w	r2, #0
 80037de:	f04f 0300 	mov.w	r3, #0
 80037e2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80037e6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80037ea:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80037ee:	ebb2 0408 	subs.w	r4, r2, r8
 80037f2:	eb63 0509 	sbc.w	r5, r3, r9
 80037f6:	f04f 0200 	mov.w	r2, #0
 80037fa:	f04f 0300 	mov.w	r3, #0
 80037fe:	00eb      	lsls	r3, r5, #3
 8003800:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003804:	00e2      	lsls	r2, r4, #3
 8003806:	4614      	mov	r4, r2
 8003808:	461d      	mov	r5, r3
 800380a:	eb14 030a 	adds.w	r3, r4, sl
 800380e:	603b      	str	r3, [r7, #0]
 8003810:	eb45 030b 	adc.w	r3, r5, fp
 8003814:	607b      	str	r3, [r7, #4]
 8003816:	f04f 0200 	mov.w	r2, #0
 800381a:	f04f 0300 	mov.w	r3, #0
 800381e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003822:	4629      	mov	r1, r5
 8003824:	028b      	lsls	r3, r1, #10
 8003826:	4621      	mov	r1, r4
 8003828:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800382c:	4621      	mov	r1, r4
 800382e:	028a      	lsls	r2, r1, #10
 8003830:	4610      	mov	r0, r2
 8003832:	4619      	mov	r1, r3
 8003834:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003836:	2200      	movs	r2, #0
 8003838:	60bb      	str	r3, [r7, #8]
 800383a:	60fa      	str	r2, [r7, #12]
 800383c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003840:	f7fc fcc2 	bl	80001c8 <__aeabi_uldivmod>
 8003844:	4602      	mov	r2, r0
 8003846:	460b      	mov	r3, r1
 8003848:	4613      	mov	r3, r2
 800384a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800384c:	4b0b      	ldr	r3, [pc, #44]	; (800387c <HAL_RCC_GetSysClockFreq+0x180>)
 800384e:	685b      	ldr	r3, [r3, #4]
 8003850:	0c1b      	lsrs	r3, r3, #16
 8003852:	f003 0303 	and.w	r3, r3, #3
 8003856:	3301      	adds	r3, #1
 8003858:	005b      	lsls	r3, r3, #1
 800385a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 800385c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800385e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003860:	fbb2 f3f3 	udiv	r3, r2, r3
 8003864:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003866:	e002      	b.n	800386e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003868:	4b05      	ldr	r3, [pc, #20]	; (8003880 <HAL_RCC_GetSysClockFreq+0x184>)
 800386a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800386c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800386e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003870:	4618      	mov	r0, r3
 8003872:	3740      	adds	r7, #64	; 0x40
 8003874:	46bd      	mov	sp, r7
 8003876:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800387a:	bf00      	nop
 800387c:	40023800 	.word	0x40023800
 8003880:	00f42400 	.word	0x00f42400
 8003884:	016e3600 	.word	0x016e3600

08003888 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003888:	b480      	push	{r7}
 800388a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800388c:	4b03      	ldr	r3, [pc, #12]	; (800389c <HAL_RCC_GetHCLKFreq+0x14>)
 800388e:	681b      	ldr	r3, [r3, #0]
}
 8003890:	4618      	mov	r0, r3
 8003892:	46bd      	mov	sp, r7
 8003894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003898:	4770      	bx	lr
 800389a:	bf00      	nop
 800389c:	20000008 	.word	0x20000008

080038a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80038a0:	b580      	push	{r7, lr}
 80038a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80038a4:	f7ff fff0 	bl	8003888 <HAL_RCC_GetHCLKFreq>
 80038a8:	4602      	mov	r2, r0
 80038aa:	4b05      	ldr	r3, [pc, #20]	; (80038c0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80038ac:	689b      	ldr	r3, [r3, #8]
 80038ae:	0a9b      	lsrs	r3, r3, #10
 80038b0:	f003 0307 	and.w	r3, r3, #7
 80038b4:	4903      	ldr	r1, [pc, #12]	; (80038c4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80038b6:	5ccb      	ldrb	r3, [r1, r3]
 80038b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80038bc:	4618      	mov	r0, r3
 80038be:	bd80      	pop	{r7, pc}
 80038c0:	40023800 	.word	0x40023800
 80038c4:	0800a0b4 	.word	0x0800a0b4

080038c8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80038c8:	b580      	push	{r7, lr}
 80038ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80038cc:	f7ff ffdc 	bl	8003888 <HAL_RCC_GetHCLKFreq>
 80038d0:	4602      	mov	r2, r0
 80038d2:	4b05      	ldr	r3, [pc, #20]	; (80038e8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80038d4:	689b      	ldr	r3, [r3, #8]
 80038d6:	0b5b      	lsrs	r3, r3, #13
 80038d8:	f003 0307 	and.w	r3, r3, #7
 80038dc:	4903      	ldr	r1, [pc, #12]	; (80038ec <HAL_RCC_GetPCLK2Freq+0x24>)
 80038de:	5ccb      	ldrb	r3, [r1, r3]
 80038e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80038e4:	4618      	mov	r0, r3
 80038e6:	bd80      	pop	{r7, pc}
 80038e8:	40023800 	.word	0x40023800
 80038ec:	0800a0b4 	.word	0x0800a0b4

080038f0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80038f0:	b580      	push	{r7, lr}
 80038f2:	b082      	sub	sp, #8
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d101      	bne.n	8003902 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80038fe:	2301      	movs	r3, #1
 8003900:	e07b      	b.n	80039fa <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003906:	2b00      	cmp	r3, #0
 8003908:	d108      	bne.n	800391c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	685b      	ldr	r3, [r3, #4]
 800390e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003912:	d009      	beq.n	8003928 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	2200      	movs	r2, #0
 8003918:	61da      	str	r2, [r3, #28]
 800391a:	e005      	b.n	8003928 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	2200      	movs	r2, #0
 8003920:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	2200      	movs	r2, #0
 8003926:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	2200      	movs	r2, #0
 800392c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003934:	b2db      	uxtb	r3, r3
 8003936:	2b00      	cmp	r3, #0
 8003938:	d106      	bne.n	8003948 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	2200      	movs	r2, #0
 800393e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003942:	6878      	ldr	r0, [r7, #4]
 8003944:	f7fd fb82 	bl	800104c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	2202      	movs	r2, #2
 800394c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	681a      	ldr	r2, [r3, #0]
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800395e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	685b      	ldr	r3, [r3, #4]
 8003964:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	689b      	ldr	r3, [r3, #8]
 800396c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003970:	431a      	orrs	r2, r3
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	68db      	ldr	r3, [r3, #12]
 8003976:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800397a:	431a      	orrs	r2, r3
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	691b      	ldr	r3, [r3, #16]
 8003980:	f003 0302 	and.w	r3, r3, #2
 8003984:	431a      	orrs	r2, r3
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	695b      	ldr	r3, [r3, #20]
 800398a:	f003 0301 	and.w	r3, r3, #1
 800398e:	431a      	orrs	r2, r3
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	699b      	ldr	r3, [r3, #24]
 8003994:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003998:	431a      	orrs	r2, r3
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	69db      	ldr	r3, [r3, #28]
 800399e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80039a2:	431a      	orrs	r2, r3
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	6a1b      	ldr	r3, [r3, #32]
 80039a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039ac:	ea42 0103 	orr.w	r1, r2, r3
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039b4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	430a      	orrs	r2, r1
 80039be:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	699b      	ldr	r3, [r3, #24]
 80039c4:	0c1b      	lsrs	r3, r3, #16
 80039c6:	f003 0104 	and.w	r1, r3, #4
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039ce:	f003 0210 	and.w	r2, r3, #16
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	430a      	orrs	r2, r1
 80039d8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	69da      	ldr	r2, [r3, #28]
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80039e8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	2200      	movs	r2, #0
 80039ee:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	2201      	movs	r2, #1
 80039f4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80039f8:	2300      	movs	r3, #0
}
 80039fa:	4618      	mov	r0, r3
 80039fc:	3708      	adds	r7, #8
 80039fe:	46bd      	mov	sp, r7
 8003a00:	bd80      	pop	{r7, pc}

08003a02 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a02:	b580      	push	{r7, lr}
 8003a04:	b088      	sub	sp, #32
 8003a06:	af00      	add	r7, sp, #0
 8003a08:	60f8      	str	r0, [r7, #12]
 8003a0a:	60b9      	str	r1, [r7, #8]
 8003a0c:	603b      	str	r3, [r7, #0]
 8003a0e:	4613      	mov	r3, r2
 8003a10:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003a12:	2300      	movs	r3, #0
 8003a14:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003a1c:	2b01      	cmp	r3, #1
 8003a1e:	d101      	bne.n	8003a24 <HAL_SPI_Transmit+0x22>
 8003a20:	2302      	movs	r3, #2
 8003a22:	e126      	b.n	8003c72 <HAL_SPI_Transmit+0x270>
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	2201      	movs	r2, #1
 8003a28:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003a2c:	f7fd fd02 	bl	8001434 <HAL_GetTick>
 8003a30:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003a32:	88fb      	ldrh	r3, [r7, #6]
 8003a34:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003a3c:	b2db      	uxtb	r3, r3
 8003a3e:	2b01      	cmp	r3, #1
 8003a40:	d002      	beq.n	8003a48 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003a42:	2302      	movs	r3, #2
 8003a44:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003a46:	e10b      	b.n	8003c60 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8003a48:	68bb      	ldr	r3, [r7, #8]
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d002      	beq.n	8003a54 <HAL_SPI_Transmit+0x52>
 8003a4e:	88fb      	ldrh	r3, [r7, #6]
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d102      	bne.n	8003a5a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003a54:	2301      	movs	r3, #1
 8003a56:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003a58:	e102      	b.n	8003c60 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	2203      	movs	r2, #3
 8003a5e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	2200      	movs	r2, #0
 8003a66:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	68ba      	ldr	r2, [r7, #8]
 8003a6c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	88fa      	ldrh	r2, [r7, #6]
 8003a72:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	88fa      	ldrh	r2, [r7, #6]
 8003a78:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	2200      	movs	r2, #0
 8003a7e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	2200      	movs	r2, #0
 8003a84:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	2200      	movs	r2, #0
 8003a8a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	2200      	movs	r2, #0
 8003a90:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	2200      	movs	r2, #0
 8003a96:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	689b      	ldr	r3, [r3, #8]
 8003a9c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003aa0:	d10f      	bne.n	8003ac2 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	681a      	ldr	r2, [r3, #0]
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003ab0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	681a      	ldr	r2, [r3, #0]
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003ac0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003acc:	2b40      	cmp	r3, #64	; 0x40
 8003ace:	d007      	beq.n	8003ae0 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	681a      	ldr	r2, [r3, #0]
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003ade:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	68db      	ldr	r3, [r3, #12]
 8003ae4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003ae8:	d14b      	bne.n	8003b82 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	685b      	ldr	r3, [r3, #4]
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d002      	beq.n	8003af8 <HAL_SPI_Transmit+0xf6>
 8003af2:	8afb      	ldrh	r3, [r7, #22]
 8003af4:	2b01      	cmp	r3, #1
 8003af6:	d13e      	bne.n	8003b76 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003afc:	881a      	ldrh	r2, [r3, #0]
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b08:	1c9a      	adds	r2, r3, #2
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003b12:	b29b      	uxth	r3, r3
 8003b14:	3b01      	subs	r3, #1
 8003b16:	b29a      	uxth	r2, r3
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003b1c:	e02b      	b.n	8003b76 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	689b      	ldr	r3, [r3, #8]
 8003b24:	f003 0302 	and.w	r3, r3, #2
 8003b28:	2b02      	cmp	r3, #2
 8003b2a:	d112      	bne.n	8003b52 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b30:	881a      	ldrh	r2, [r3, #0]
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b3c:	1c9a      	adds	r2, r3, #2
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003b46:	b29b      	uxth	r3, r3
 8003b48:	3b01      	subs	r3, #1
 8003b4a:	b29a      	uxth	r2, r3
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	86da      	strh	r2, [r3, #54]	; 0x36
 8003b50:	e011      	b.n	8003b76 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003b52:	f7fd fc6f 	bl	8001434 <HAL_GetTick>
 8003b56:	4602      	mov	r2, r0
 8003b58:	69bb      	ldr	r3, [r7, #24]
 8003b5a:	1ad3      	subs	r3, r2, r3
 8003b5c:	683a      	ldr	r2, [r7, #0]
 8003b5e:	429a      	cmp	r2, r3
 8003b60:	d803      	bhi.n	8003b6a <HAL_SPI_Transmit+0x168>
 8003b62:	683b      	ldr	r3, [r7, #0]
 8003b64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b68:	d102      	bne.n	8003b70 <HAL_SPI_Transmit+0x16e>
 8003b6a:	683b      	ldr	r3, [r7, #0]
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d102      	bne.n	8003b76 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8003b70:	2303      	movs	r3, #3
 8003b72:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003b74:	e074      	b.n	8003c60 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003b7a:	b29b      	uxth	r3, r3
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d1ce      	bne.n	8003b1e <HAL_SPI_Transmit+0x11c>
 8003b80:	e04c      	b.n	8003c1c <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	685b      	ldr	r3, [r3, #4]
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d002      	beq.n	8003b90 <HAL_SPI_Transmit+0x18e>
 8003b8a:	8afb      	ldrh	r3, [r7, #22]
 8003b8c:	2b01      	cmp	r3, #1
 8003b8e:	d140      	bne.n	8003c12 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	330c      	adds	r3, #12
 8003b9a:	7812      	ldrb	r2, [r2, #0]
 8003b9c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ba2:	1c5a      	adds	r2, r3, #1
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003bac:	b29b      	uxth	r3, r3
 8003bae:	3b01      	subs	r3, #1
 8003bb0:	b29a      	uxth	r2, r3
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003bb6:	e02c      	b.n	8003c12 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	689b      	ldr	r3, [r3, #8]
 8003bbe:	f003 0302 	and.w	r3, r3, #2
 8003bc2:	2b02      	cmp	r3, #2
 8003bc4:	d113      	bne.n	8003bee <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	330c      	adds	r3, #12
 8003bd0:	7812      	ldrb	r2, [r2, #0]
 8003bd2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bd8:	1c5a      	adds	r2, r3, #1
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003be2:	b29b      	uxth	r3, r3
 8003be4:	3b01      	subs	r3, #1
 8003be6:	b29a      	uxth	r2, r3
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	86da      	strh	r2, [r3, #54]	; 0x36
 8003bec:	e011      	b.n	8003c12 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003bee:	f7fd fc21 	bl	8001434 <HAL_GetTick>
 8003bf2:	4602      	mov	r2, r0
 8003bf4:	69bb      	ldr	r3, [r7, #24]
 8003bf6:	1ad3      	subs	r3, r2, r3
 8003bf8:	683a      	ldr	r2, [r7, #0]
 8003bfa:	429a      	cmp	r2, r3
 8003bfc:	d803      	bhi.n	8003c06 <HAL_SPI_Transmit+0x204>
 8003bfe:	683b      	ldr	r3, [r7, #0]
 8003c00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c04:	d102      	bne.n	8003c0c <HAL_SPI_Transmit+0x20a>
 8003c06:	683b      	ldr	r3, [r7, #0]
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d102      	bne.n	8003c12 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8003c0c:	2303      	movs	r3, #3
 8003c0e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003c10:	e026      	b.n	8003c60 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003c16:	b29b      	uxth	r3, r3
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d1cd      	bne.n	8003bb8 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003c1c:	69ba      	ldr	r2, [r7, #24]
 8003c1e:	6839      	ldr	r1, [r7, #0]
 8003c20:	68f8      	ldr	r0, [r7, #12]
 8003c22:	f000 fbd9 	bl	80043d8 <SPI_EndRxTxTransaction>
 8003c26:	4603      	mov	r3, r0
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d002      	beq.n	8003c32 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	2220      	movs	r2, #32
 8003c30:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	689b      	ldr	r3, [r3, #8]
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d10a      	bne.n	8003c50 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003c3a:	2300      	movs	r3, #0
 8003c3c:	613b      	str	r3, [r7, #16]
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	68db      	ldr	r3, [r3, #12]
 8003c44:	613b      	str	r3, [r7, #16]
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	689b      	ldr	r3, [r3, #8]
 8003c4c:	613b      	str	r3, [r7, #16]
 8003c4e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d002      	beq.n	8003c5e <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8003c58:	2301      	movs	r3, #1
 8003c5a:	77fb      	strb	r3, [r7, #31]
 8003c5c:	e000      	b.n	8003c60 <HAL_SPI_Transmit+0x25e>
  }

error:
 8003c5e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	2201      	movs	r2, #1
 8003c64:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	2200      	movs	r2, #0
 8003c6c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003c70:	7ffb      	ldrb	r3, [r7, #31]
}
 8003c72:	4618      	mov	r0, r3
 8003c74:	3720      	adds	r7, #32
 8003c76:	46bd      	mov	sp, r7
 8003c78:	bd80      	pop	{r7, pc}

08003c7a <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003c7a:	b580      	push	{r7, lr}
 8003c7c:	b088      	sub	sp, #32
 8003c7e:	af02      	add	r7, sp, #8
 8003c80:	60f8      	str	r0, [r7, #12]
 8003c82:	60b9      	str	r1, [r7, #8]
 8003c84:	603b      	str	r3, [r7, #0]
 8003c86:	4613      	mov	r3, r2
 8003c88:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003c8a:	2300      	movs	r3, #0
 8003c8c:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	685b      	ldr	r3, [r3, #4]
 8003c92:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003c96:	d112      	bne.n	8003cbe <HAL_SPI_Receive+0x44>
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	689b      	ldr	r3, [r3, #8]
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d10e      	bne.n	8003cbe <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	2204      	movs	r2, #4
 8003ca4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003ca8:	88fa      	ldrh	r2, [r7, #6]
 8003caa:	683b      	ldr	r3, [r7, #0]
 8003cac:	9300      	str	r3, [sp, #0]
 8003cae:	4613      	mov	r3, r2
 8003cb0:	68ba      	ldr	r2, [r7, #8]
 8003cb2:	68b9      	ldr	r1, [r7, #8]
 8003cb4:	68f8      	ldr	r0, [r7, #12]
 8003cb6:	f000 f8f1 	bl	8003e9c <HAL_SPI_TransmitReceive>
 8003cba:	4603      	mov	r3, r0
 8003cbc:	e0ea      	b.n	8003e94 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003cc4:	2b01      	cmp	r3, #1
 8003cc6:	d101      	bne.n	8003ccc <HAL_SPI_Receive+0x52>
 8003cc8:	2302      	movs	r3, #2
 8003cca:	e0e3      	b.n	8003e94 <HAL_SPI_Receive+0x21a>
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	2201      	movs	r2, #1
 8003cd0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003cd4:	f7fd fbae 	bl	8001434 <HAL_GetTick>
 8003cd8:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003ce0:	b2db      	uxtb	r3, r3
 8003ce2:	2b01      	cmp	r3, #1
 8003ce4:	d002      	beq.n	8003cec <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8003ce6:	2302      	movs	r3, #2
 8003ce8:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003cea:	e0ca      	b.n	8003e82 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8003cec:	68bb      	ldr	r3, [r7, #8]
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d002      	beq.n	8003cf8 <HAL_SPI_Receive+0x7e>
 8003cf2:	88fb      	ldrh	r3, [r7, #6]
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d102      	bne.n	8003cfe <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8003cf8:	2301      	movs	r3, #1
 8003cfa:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003cfc:	e0c1      	b.n	8003e82 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	2204      	movs	r2, #4
 8003d02:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	2200      	movs	r2, #0
 8003d0a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	68ba      	ldr	r2, [r7, #8]
 8003d10:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	88fa      	ldrh	r2, [r7, #6]
 8003d16:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	88fa      	ldrh	r2, [r7, #6]
 8003d1c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	2200      	movs	r2, #0
 8003d22:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	2200      	movs	r2, #0
 8003d28:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	2200      	movs	r2, #0
 8003d34:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	2200      	movs	r2, #0
 8003d3a:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	689b      	ldr	r3, [r3, #8]
 8003d40:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003d44:	d10f      	bne.n	8003d66 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	681a      	ldr	r2, [r3, #0]
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003d54:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	681a      	ldr	r2, [r3, #0]
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003d64:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d70:	2b40      	cmp	r3, #64	; 0x40
 8003d72:	d007      	beq.n	8003d84 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	681a      	ldr	r2, [r3, #0]
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003d82:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	68db      	ldr	r3, [r3, #12]
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d162      	bne.n	8003e52 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8003d8c:	e02e      	b.n	8003dec <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	689b      	ldr	r3, [r3, #8]
 8003d94:	f003 0301 	and.w	r3, r3, #1
 8003d98:	2b01      	cmp	r3, #1
 8003d9a:	d115      	bne.n	8003dc8 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f103 020c 	add.w	r2, r3, #12
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003da8:	7812      	ldrb	r2, [r2, #0]
 8003daa:	b2d2      	uxtb	r2, r2
 8003dac:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003db2:	1c5a      	adds	r2, r3, #1
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003dbc:	b29b      	uxth	r3, r3
 8003dbe:	3b01      	subs	r3, #1
 8003dc0:	b29a      	uxth	r2, r3
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003dc6:	e011      	b.n	8003dec <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003dc8:	f7fd fb34 	bl	8001434 <HAL_GetTick>
 8003dcc:	4602      	mov	r2, r0
 8003dce:	693b      	ldr	r3, [r7, #16]
 8003dd0:	1ad3      	subs	r3, r2, r3
 8003dd2:	683a      	ldr	r2, [r7, #0]
 8003dd4:	429a      	cmp	r2, r3
 8003dd6:	d803      	bhi.n	8003de0 <HAL_SPI_Receive+0x166>
 8003dd8:	683b      	ldr	r3, [r7, #0]
 8003dda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003dde:	d102      	bne.n	8003de6 <HAL_SPI_Receive+0x16c>
 8003de0:	683b      	ldr	r3, [r7, #0]
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d102      	bne.n	8003dec <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8003de6:	2303      	movs	r3, #3
 8003de8:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003dea:	e04a      	b.n	8003e82 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003df0:	b29b      	uxth	r3, r3
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d1cb      	bne.n	8003d8e <HAL_SPI_Receive+0x114>
 8003df6:	e031      	b.n	8003e5c <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	689b      	ldr	r3, [r3, #8]
 8003dfe:	f003 0301 	and.w	r3, r3, #1
 8003e02:	2b01      	cmp	r3, #1
 8003e04:	d113      	bne.n	8003e2e <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	68da      	ldr	r2, [r3, #12]
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e10:	b292      	uxth	r2, r2
 8003e12:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e18:	1c9a      	adds	r2, r3, #2
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e22:	b29b      	uxth	r3, r3
 8003e24:	3b01      	subs	r3, #1
 8003e26:	b29a      	uxth	r2, r3
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003e2c:	e011      	b.n	8003e52 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003e2e:	f7fd fb01 	bl	8001434 <HAL_GetTick>
 8003e32:	4602      	mov	r2, r0
 8003e34:	693b      	ldr	r3, [r7, #16]
 8003e36:	1ad3      	subs	r3, r2, r3
 8003e38:	683a      	ldr	r2, [r7, #0]
 8003e3a:	429a      	cmp	r2, r3
 8003e3c:	d803      	bhi.n	8003e46 <HAL_SPI_Receive+0x1cc>
 8003e3e:	683b      	ldr	r3, [r7, #0]
 8003e40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e44:	d102      	bne.n	8003e4c <HAL_SPI_Receive+0x1d2>
 8003e46:	683b      	ldr	r3, [r7, #0]
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d102      	bne.n	8003e52 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8003e4c:	2303      	movs	r3, #3
 8003e4e:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003e50:	e017      	b.n	8003e82 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e56:	b29b      	uxth	r3, r3
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d1cd      	bne.n	8003df8 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003e5c:	693a      	ldr	r2, [r7, #16]
 8003e5e:	6839      	ldr	r1, [r7, #0]
 8003e60:	68f8      	ldr	r0, [r7, #12]
 8003e62:	f000 fa53 	bl	800430c <SPI_EndRxTransaction>
 8003e66:	4603      	mov	r3, r0
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d002      	beq.n	8003e72 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	2220      	movs	r2, #32
 8003e70:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d002      	beq.n	8003e80 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8003e7a:	2301      	movs	r3, #1
 8003e7c:	75fb      	strb	r3, [r7, #23]
 8003e7e:	e000      	b.n	8003e82 <HAL_SPI_Receive+0x208>
  }

error :
 8003e80:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	2201      	movs	r2, #1
 8003e86:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	2200      	movs	r2, #0
 8003e8e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003e92:	7dfb      	ldrb	r3, [r7, #23]
}
 8003e94:	4618      	mov	r0, r3
 8003e96:	3718      	adds	r7, #24
 8003e98:	46bd      	mov	sp, r7
 8003e9a:	bd80      	pop	{r7, pc}

08003e9c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003e9c:	b580      	push	{r7, lr}
 8003e9e:	b08c      	sub	sp, #48	; 0x30
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	60f8      	str	r0, [r7, #12]
 8003ea4:	60b9      	str	r1, [r7, #8]
 8003ea6:	607a      	str	r2, [r7, #4]
 8003ea8:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003eaa:	2301      	movs	r3, #1
 8003eac:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003eae:	2300      	movs	r3, #0
 8003eb0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003eba:	2b01      	cmp	r3, #1
 8003ebc:	d101      	bne.n	8003ec2 <HAL_SPI_TransmitReceive+0x26>
 8003ebe:	2302      	movs	r3, #2
 8003ec0:	e18a      	b.n	80041d8 <HAL_SPI_TransmitReceive+0x33c>
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	2201      	movs	r2, #1
 8003ec6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003eca:	f7fd fab3 	bl	8001434 <HAL_GetTick>
 8003ece:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003ed6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	685b      	ldr	r3, [r3, #4]
 8003ede:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8003ee0:	887b      	ldrh	r3, [r7, #2]
 8003ee2:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003ee4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003ee8:	2b01      	cmp	r3, #1
 8003eea:	d00f      	beq.n	8003f0c <HAL_SPI_TransmitReceive+0x70>
 8003eec:	69fb      	ldr	r3, [r7, #28]
 8003eee:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003ef2:	d107      	bne.n	8003f04 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	689b      	ldr	r3, [r3, #8]
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d103      	bne.n	8003f04 <HAL_SPI_TransmitReceive+0x68>
 8003efc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003f00:	2b04      	cmp	r3, #4
 8003f02:	d003      	beq.n	8003f0c <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8003f04:	2302      	movs	r3, #2
 8003f06:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003f0a:	e15b      	b.n	80041c4 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003f0c:	68bb      	ldr	r3, [r7, #8]
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d005      	beq.n	8003f1e <HAL_SPI_TransmitReceive+0x82>
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d002      	beq.n	8003f1e <HAL_SPI_TransmitReceive+0x82>
 8003f18:	887b      	ldrh	r3, [r7, #2]
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d103      	bne.n	8003f26 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8003f1e:	2301      	movs	r3, #1
 8003f20:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003f24:	e14e      	b.n	80041c4 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003f2c:	b2db      	uxtb	r3, r3
 8003f2e:	2b04      	cmp	r3, #4
 8003f30:	d003      	beq.n	8003f3a <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	2205      	movs	r2, #5
 8003f36:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	2200      	movs	r2, #0
 8003f3e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	687a      	ldr	r2, [r7, #4]
 8003f44:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	887a      	ldrh	r2, [r7, #2]
 8003f4a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	887a      	ldrh	r2, [r7, #2]
 8003f50:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	68ba      	ldr	r2, [r7, #8]
 8003f56:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	887a      	ldrh	r2, [r7, #2]
 8003f5c:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	887a      	ldrh	r2, [r7, #2]
 8003f62:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	2200      	movs	r2, #0
 8003f68:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	2200      	movs	r2, #0
 8003f6e:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f7a:	2b40      	cmp	r3, #64	; 0x40
 8003f7c:	d007      	beq.n	8003f8e <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	681a      	ldr	r2, [r3, #0]
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003f8c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	68db      	ldr	r3, [r3, #12]
 8003f92:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003f96:	d178      	bne.n	800408a <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	685b      	ldr	r3, [r3, #4]
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d002      	beq.n	8003fa6 <HAL_SPI_TransmitReceive+0x10a>
 8003fa0:	8b7b      	ldrh	r3, [r7, #26]
 8003fa2:	2b01      	cmp	r3, #1
 8003fa4:	d166      	bne.n	8004074 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003faa:	881a      	ldrh	r2, [r3, #0]
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fb6:	1c9a      	adds	r2, r3, #2
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003fc0:	b29b      	uxth	r3, r3
 8003fc2:	3b01      	subs	r3, #1
 8003fc4:	b29a      	uxth	r2, r3
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003fca:	e053      	b.n	8004074 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	689b      	ldr	r3, [r3, #8]
 8003fd2:	f003 0302 	and.w	r3, r3, #2
 8003fd6:	2b02      	cmp	r3, #2
 8003fd8:	d11b      	bne.n	8004012 <HAL_SPI_TransmitReceive+0x176>
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003fde:	b29b      	uxth	r3, r3
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d016      	beq.n	8004012 <HAL_SPI_TransmitReceive+0x176>
 8003fe4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fe6:	2b01      	cmp	r3, #1
 8003fe8:	d113      	bne.n	8004012 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fee:	881a      	ldrh	r2, [r3, #0]
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ffa:	1c9a      	adds	r2, r3, #2
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004004:	b29b      	uxth	r3, r3
 8004006:	3b01      	subs	r3, #1
 8004008:	b29a      	uxth	r2, r3
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800400e:	2300      	movs	r3, #0
 8004010:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	689b      	ldr	r3, [r3, #8]
 8004018:	f003 0301 	and.w	r3, r3, #1
 800401c:	2b01      	cmp	r3, #1
 800401e:	d119      	bne.n	8004054 <HAL_SPI_TransmitReceive+0x1b8>
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004024:	b29b      	uxth	r3, r3
 8004026:	2b00      	cmp	r3, #0
 8004028:	d014      	beq.n	8004054 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	68da      	ldr	r2, [r3, #12]
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004034:	b292      	uxth	r2, r2
 8004036:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800403c:	1c9a      	adds	r2, r3, #2
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004046:	b29b      	uxth	r3, r3
 8004048:	3b01      	subs	r3, #1
 800404a:	b29a      	uxth	r2, r3
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004050:	2301      	movs	r3, #1
 8004052:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004054:	f7fd f9ee 	bl	8001434 <HAL_GetTick>
 8004058:	4602      	mov	r2, r0
 800405a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800405c:	1ad3      	subs	r3, r2, r3
 800405e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004060:	429a      	cmp	r2, r3
 8004062:	d807      	bhi.n	8004074 <HAL_SPI_TransmitReceive+0x1d8>
 8004064:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004066:	f1b3 3fff 	cmp.w	r3, #4294967295
 800406a:	d003      	beq.n	8004074 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800406c:	2303      	movs	r3, #3
 800406e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004072:	e0a7      	b.n	80041c4 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004078:	b29b      	uxth	r3, r3
 800407a:	2b00      	cmp	r3, #0
 800407c:	d1a6      	bne.n	8003fcc <HAL_SPI_TransmitReceive+0x130>
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004082:	b29b      	uxth	r3, r3
 8004084:	2b00      	cmp	r3, #0
 8004086:	d1a1      	bne.n	8003fcc <HAL_SPI_TransmitReceive+0x130>
 8004088:	e07c      	b.n	8004184 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	685b      	ldr	r3, [r3, #4]
 800408e:	2b00      	cmp	r3, #0
 8004090:	d002      	beq.n	8004098 <HAL_SPI_TransmitReceive+0x1fc>
 8004092:	8b7b      	ldrh	r3, [r7, #26]
 8004094:	2b01      	cmp	r3, #1
 8004096:	d16b      	bne.n	8004170 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	330c      	adds	r3, #12
 80040a2:	7812      	ldrb	r2, [r2, #0]
 80040a4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040aa:	1c5a      	adds	r2, r3, #1
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80040b4:	b29b      	uxth	r3, r3
 80040b6:	3b01      	subs	r3, #1
 80040b8:	b29a      	uxth	r2, r3
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80040be:	e057      	b.n	8004170 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	689b      	ldr	r3, [r3, #8]
 80040c6:	f003 0302 	and.w	r3, r3, #2
 80040ca:	2b02      	cmp	r3, #2
 80040cc:	d11c      	bne.n	8004108 <HAL_SPI_TransmitReceive+0x26c>
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80040d2:	b29b      	uxth	r3, r3
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d017      	beq.n	8004108 <HAL_SPI_TransmitReceive+0x26c>
 80040d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040da:	2b01      	cmp	r3, #1
 80040dc:	d114      	bne.n	8004108 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	330c      	adds	r3, #12
 80040e8:	7812      	ldrb	r2, [r2, #0]
 80040ea:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040f0:	1c5a      	adds	r2, r3, #1
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80040fa:	b29b      	uxth	r3, r3
 80040fc:	3b01      	subs	r3, #1
 80040fe:	b29a      	uxth	r2, r3
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004104:	2300      	movs	r3, #0
 8004106:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	689b      	ldr	r3, [r3, #8]
 800410e:	f003 0301 	and.w	r3, r3, #1
 8004112:	2b01      	cmp	r3, #1
 8004114:	d119      	bne.n	800414a <HAL_SPI_TransmitReceive+0x2ae>
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800411a:	b29b      	uxth	r3, r3
 800411c:	2b00      	cmp	r3, #0
 800411e:	d014      	beq.n	800414a <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	68da      	ldr	r2, [r3, #12]
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800412a:	b2d2      	uxtb	r2, r2
 800412c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004132:	1c5a      	adds	r2, r3, #1
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800413c:	b29b      	uxth	r3, r3
 800413e:	3b01      	subs	r3, #1
 8004140:	b29a      	uxth	r2, r3
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004146:	2301      	movs	r3, #1
 8004148:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800414a:	f7fd f973 	bl	8001434 <HAL_GetTick>
 800414e:	4602      	mov	r2, r0
 8004150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004152:	1ad3      	subs	r3, r2, r3
 8004154:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004156:	429a      	cmp	r2, r3
 8004158:	d803      	bhi.n	8004162 <HAL_SPI_TransmitReceive+0x2c6>
 800415a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800415c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004160:	d102      	bne.n	8004168 <HAL_SPI_TransmitReceive+0x2cc>
 8004162:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004164:	2b00      	cmp	r3, #0
 8004166:	d103      	bne.n	8004170 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8004168:	2303      	movs	r3, #3
 800416a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800416e:	e029      	b.n	80041c4 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004174:	b29b      	uxth	r3, r3
 8004176:	2b00      	cmp	r3, #0
 8004178:	d1a2      	bne.n	80040c0 <HAL_SPI_TransmitReceive+0x224>
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800417e:	b29b      	uxth	r3, r3
 8004180:	2b00      	cmp	r3, #0
 8004182:	d19d      	bne.n	80040c0 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004184:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004186:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004188:	68f8      	ldr	r0, [r7, #12]
 800418a:	f000 f925 	bl	80043d8 <SPI_EndRxTxTransaction>
 800418e:	4603      	mov	r3, r0
 8004190:	2b00      	cmp	r3, #0
 8004192:	d006      	beq.n	80041a2 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8004194:	2301      	movs	r3, #1
 8004196:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	2220      	movs	r2, #32
 800419e:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80041a0:	e010      	b.n	80041c4 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	689b      	ldr	r3, [r3, #8]
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d10b      	bne.n	80041c2 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80041aa:	2300      	movs	r3, #0
 80041ac:	617b      	str	r3, [r7, #20]
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	68db      	ldr	r3, [r3, #12]
 80041b4:	617b      	str	r3, [r7, #20]
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	689b      	ldr	r3, [r3, #8]
 80041bc:	617b      	str	r3, [r7, #20]
 80041be:	697b      	ldr	r3, [r7, #20]
 80041c0:	e000      	b.n	80041c4 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80041c2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	2201      	movs	r2, #1
 80041c8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	2200      	movs	r2, #0
 80041d0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80041d4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80041d8:	4618      	mov	r0, r3
 80041da:	3730      	adds	r7, #48	; 0x30
 80041dc:	46bd      	mov	sp, r7
 80041de:	bd80      	pop	{r7, pc}

080041e0 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 80041e0:	b480      	push	{r7}
 80041e2:	b083      	sub	sp, #12
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80041ee:	b2db      	uxtb	r3, r3
}
 80041f0:	4618      	mov	r0, r3
 80041f2:	370c      	adds	r7, #12
 80041f4:	46bd      	mov	sp, r7
 80041f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041fa:	4770      	bx	lr

080041fc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80041fc:	b580      	push	{r7, lr}
 80041fe:	b088      	sub	sp, #32
 8004200:	af00      	add	r7, sp, #0
 8004202:	60f8      	str	r0, [r7, #12]
 8004204:	60b9      	str	r1, [r7, #8]
 8004206:	603b      	str	r3, [r7, #0]
 8004208:	4613      	mov	r3, r2
 800420a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800420c:	f7fd f912 	bl	8001434 <HAL_GetTick>
 8004210:	4602      	mov	r2, r0
 8004212:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004214:	1a9b      	subs	r3, r3, r2
 8004216:	683a      	ldr	r2, [r7, #0]
 8004218:	4413      	add	r3, r2
 800421a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800421c:	f7fd f90a 	bl	8001434 <HAL_GetTick>
 8004220:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004222:	4b39      	ldr	r3, [pc, #228]	; (8004308 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	015b      	lsls	r3, r3, #5
 8004228:	0d1b      	lsrs	r3, r3, #20
 800422a:	69fa      	ldr	r2, [r7, #28]
 800422c:	fb02 f303 	mul.w	r3, r2, r3
 8004230:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004232:	e054      	b.n	80042de <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004234:	683b      	ldr	r3, [r7, #0]
 8004236:	f1b3 3fff 	cmp.w	r3, #4294967295
 800423a:	d050      	beq.n	80042de <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800423c:	f7fd f8fa 	bl	8001434 <HAL_GetTick>
 8004240:	4602      	mov	r2, r0
 8004242:	69bb      	ldr	r3, [r7, #24]
 8004244:	1ad3      	subs	r3, r2, r3
 8004246:	69fa      	ldr	r2, [r7, #28]
 8004248:	429a      	cmp	r2, r3
 800424a:	d902      	bls.n	8004252 <SPI_WaitFlagStateUntilTimeout+0x56>
 800424c:	69fb      	ldr	r3, [r7, #28]
 800424e:	2b00      	cmp	r3, #0
 8004250:	d13d      	bne.n	80042ce <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	685a      	ldr	r2, [r3, #4]
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004260:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	685b      	ldr	r3, [r3, #4]
 8004266:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800426a:	d111      	bne.n	8004290 <SPI_WaitFlagStateUntilTimeout+0x94>
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	689b      	ldr	r3, [r3, #8]
 8004270:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004274:	d004      	beq.n	8004280 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	689b      	ldr	r3, [r3, #8]
 800427a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800427e:	d107      	bne.n	8004290 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	681a      	ldr	r2, [r3, #0]
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800428e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004294:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004298:	d10f      	bne.n	80042ba <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	681a      	ldr	r2, [r3, #0]
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80042a8:	601a      	str	r2, [r3, #0]
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	681a      	ldr	r2, [r3, #0]
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80042b8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	2201      	movs	r2, #1
 80042be:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	2200      	movs	r2, #0
 80042c6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80042ca:	2303      	movs	r3, #3
 80042cc:	e017      	b.n	80042fe <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80042ce:	697b      	ldr	r3, [r7, #20]
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d101      	bne.n	80042d8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80042d4:	2300      	movs	r3, #0
 80042d6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80042d8:	697b      	ldr	r3, [r7, #20]
 80042da:	3b01      	subs	r3, #1
 80042dc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	689a      	ldr	r2, [r3, #8]
 80042e4:	68bb      	ldr	r3, [r7, #8]
 80042e6:	4013      	ands	r3, r2
 80042e8:	68ba      	ldr	r2, [r7, #8]
 80042ea:	429a      	cmp	r2, r3
 80042ec:	bf0c      	ite	eq
 80042ee:	2301      	moveq	r3, #1
 80042f0:	2300      	movne	r3, #0
 80042f2:	b2db      	uxtb	r3, r3
 80042f4:	461a      	mov	r2, r3
 80042f6:	79fb      	ldrb	r3, [r7, #7]
 80042f8:	429a      	cmp	r2, r3
 80042fa:	d19b      	bne.n	8004234 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80042fc:	2300      	movs	r3, #0
}
 80042fe:	4618      	mov	r0, r3
 8004300:	3720      	adds	r7, #32
 8004302:	46bd      	mov	sp, r7
 8004304:	bd80      	pop	{r7, pc}
 8004306:	bf00      	nop
 8004308:	20000008 	.word	0x20000008

0800430c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800430c:	b580      	push	{r7, lr}
 800430e:	b086      	sub	sp, #24
 8004310:	af02      	add	r7, sp, #8
 8004312:	60f8      	str	r0, [r7, #12]
 8004314:	60b9      	str	r1, [r7, #8]
 8004316:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	685b      	ldr	r3, [r3, #4]
 800431c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004320:	d111      	bne.n	8004346 <SPI_EndRxTransaction+0x3a>
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	689b      	ldr	r3, [r3, #8]
 8004326:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800432a:	d004      	beq.n	8004336 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	689b      	ldr	r3, [r3, #8]
 8004330:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004334:	d107      	bne.n	8004346 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	681a      	ldr	r2, [r3, #0]
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004344:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	685b      	ldr	r3, [r3, #4]
 800434a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800434e:	d12a      	bne.n	80043a6 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	689b      	ldr	r3, [r3, #8]
 8004354:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004358:	d012      	beq.n	8004380 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	9300      	str	r3, [sp, #0]
 800435e:	68bb      	ldr	r3, [r7, #8]
 8004360:	2200      	movs	r2, #0
 8004362:	2180      	movs	r1, #128	; 0x80
 8004364:	68f8      	ldr	r0, [r7, #12]
 8004366:	f7ff ff49 	bl	80041fc <SPI_WaitFlagStateUntilTimeout>
 800436a:	4603      	mov	r3, r0
 800436c:	2b00      	cmp	r3, #0
 800436e:	d02d      	beq.n	80043cc <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004374:	f043 0220 	orr.w	r2, r3, #32
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800437c:	2303      	movs	r3, #3
 800437e:	e026      	b.n	80043ce <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	9300      	str	r3, [sp, #0]
 8004384:	68bb      	ldr	r3, [r7, #8]
 8004386:	2200      	movs	r2, #0
 8004388:	2101      	movs	r1, #1
 800438a:	68f8      	ldr	r0, [r7, #12]
 800438c:	f7ff ff36 	bl	80041fc <SPI_WaitFlagStateUntilTimeout>
 8004390:	4603      	mov	r3, r0
 8004392:	2b00      	cmp	r3, #0
 8004394:	d01a      	beq.n	80043cc <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800439a:	f043 0220 	orr.w	r2, r3, #32
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80043a2:	2303      	movs	r3, #3
 80043a4:	e013      	b.n	80043ce <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	9300      	str	r3, [sp, #0]
 80043aa:	68bb      	ldr	r3, [r7, #8]
 80043ac:	2200      	movs	r2, #0
 80043ae:	2101      	movs	r1, #1
 80043b0:	68f8      	ldr	r0, [r7, #12]
 80043b2:	f7ff ff23 	bl	80041fc <SPI_WaitFlagStateUntilTimeout>
 80043b6:	4603      	mov	r3, r0
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d007      	beq.n	80043cc <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043c0:	f043 0220 	orr.w	r2, r3, #32
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80043c8:	2303      	movs	r3, #3
 80043ca:	e000      	b.n	80043ce <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80043cc:	2300      	movs	r3, #0
}
 80043ce:	4618      	mov	r0, r3
 80043d0:	3710      	adds	r7, #16
 80043d2:	46bd      	mov	sp, r7
 80043d4:	bd80      	pop	{r7, pc}
	...

080043d8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80043d8:	b580      	push	{r7, lr}
 80043da:	b088      	sub	sp, #32
 80043dc:	af02      	add	r7, sp, #8
 80043de:	60f8      	str	r0, [r7, #12]
 80043e0:	60b9      	str	r1, [r7, #8]
 80043e2:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80043e4:	4b1b      	ldr	r3, [pc, #108]	; (8004454 <SPI_EndRxTxTransaction+0x7c>)
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	4a1b      	ldr	r2, [pc, #108]	; (8004458 <SPI_EndRxTxTransaction+0x80>)
 80043ea:	fba2 2303 	umull	r2, r3, r2, r3
 80043ee:	0d5b      	lsrs	r3, r3, #21
 80043f0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80043f4:	fb02 f303 	mul.w	r3, r2, r3
 80043f8:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	685b      	ldr	r3, [r3, #4]
 80043fe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004402:	d112      	bne.n	800442a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	9300      	str	r3, [sp, #0]
 8004408:	68bb      	ldr	r3, [r7, #8]
 800440a:	2200      	movs	r2, #0
 800440c:	2180      	movs	r1, #128	; 0x80
 800440e:	68f8      	ldr	r0, [r7, #12]
 8004410:	f7ff fef4 	bl	80041fc <SPI_WaitFlagStateUntilTimeout>
 8004414:	4603      	mov	r3, r0
 8004416:	2b00      	cmp	r3, #0
 8004418:	d016      	beq.n	8004448 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800441e:	f043 0220 	orr.w	r2, r3, #32
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004426:	2303      	movs	r3, #3
 8004428:	e00f      	b.n	800444a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800442a:	697b      	ldr	r3, [r7, #20]
 800442c:	2b00      	cmp	r3, #0
 800442e:	d00a      	beq.n	8004446 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8004430:	697b      	ldr	r3, [r7, #20]
 8004432:	3b01      	subs	r3, #1
 8004434:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	689b      	ldr	r3, [r3, #8]
 800443c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004440:	2b80      	cmp	r3, #128	; 0x80
 8004442:	d0f2      	beq.n	800442a <SPI_EndRxTxTransaction+0x52>
 8004444:	e000      	b.n	8004448 <SPI_EndRxTxTransaction+0x70>
        break;
 8004446:	bf00      	nop
  }

  return HAL_OK;
 8004448:	2300      	movs	r3, #0
}
 800444a:	4618      	mov	r0, r3
 800444c:	3718      	adds	r7, #24
 800444e:	46bd      	mov	sp, r7
 8004450:	bd80      	pop	{r7, pc}
 8004452:	bf00      	nop
 8004454:	20000008 	.word	0x20000008
 8004458:	165e9f81 	.word	0x165e9f81

0800445c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800445c:	b580      	push	{r7, lr}
 800445e:	b082      	sub	sp, #8
 8004460:	af00      	add	r7, sp, #0
 8004462:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	2b00      	cmp	r3, #0
 8004468:	d101      	bne.n	800446e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800446a:	2301      	movs	r3, #1
 800446c:	e03f      	b.n	80044ee <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004474:	b2db      	uxtb	r3, r3
 8004476:	2b00      	cmp	r3, #0
 8004478:	d106      	bne.n	8004488 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	2200      	movs	r2, #0
 800447e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004482:	6878      	ldr	r0, [r7, #4]
 8004484:	f7fc fe2a 	bl	80010dc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	2224      	movs	r2, #36	; 0x24
 800448c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	68da      	ldr	r2, [r3, #12]
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800449e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80044a0:	6878      	ldr	r0, [r7, #4]
 80044a2:	f000 fe1d 	bl	80050e0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	691a      	ldr	r2, [r3, #16]
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80044b4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	695a      	ldr	r2, [r3, #20]
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80044c4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	68da      	ldr	r2, [r3, #12]
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80044d4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	2200      	movs	r2, #0
 80044da:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	2220      	movs	r2, #32
 80044e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	2220      	movs	r2, #32
 80044e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80044ec:	2300      	movs	r3, #0
}
 80044ee:	4618      	mov	r0, r3
 80044f0:	3708      	adds	r7, #8
 80044f2:	46bd      	mov	sp, r7
 80044f4:	bd80      	pop	{r7, pc}

080044f6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80044f6:	b580      	push	{r7, lr}
 80044f8:	b08a      	sub	sp, #40	; 0x28
 80044fa:	af02      	add	r7, sp, #8
 80044fc:	60f8      	str	r0, [r7, #12]
 80044fe:	60b9      	str	r1, [r7, #8]
 8004500:	603b      	str	r3, [r7, #0]
 8004502:	4613      	mov	r3, r2
 8004504:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004506:	2300      	movs	r3, #0
 8004508:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004510:	b2db      	uxtb	r3, r3
 8004512:	2b20      	cmp	r3, #32
 8004514:	d17c      	bne.n	8004610 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004516:	68bb      	ldr	r3, [r7, #8]
 8004518:	2b00      	cmp	r3, #0
 800451a:	d002      	beq.n	8004522 <HAL_UART_Transmit+0x2c>
 800451c:	88fb      	ldrh	r3, [r7, #6]
 800451e:	2b00      	cmp	r3, #0
 8004520:	d101      	bne.n	8004526 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004522:	2301      	movs	r3, #1
 8004524:	e075      	b.n	8004612 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800452c:	2b01      	cmp	r3, #1
 800452e:	d101      	bne.n	8004534 <HAL_UART_Transmit+0x3e>
 8004530:	2302      	movs	r3, #2
 8004532:	e06e      	b.n	8004612 <HAL_UART_Transmit+0x11c>
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	2201      	movs	r2, #1
 8004538:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	2200      	movs	r2, #0
 8004540:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	2221      	movs	r2, #33	; 0x21
 8004546:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800454a:	f7fc ff73 	bl	8001434 <HAL_GetTick>
 800454e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	88fa      	ldrh	r2, [r7, #6]
 8004554:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	88fa      	ldrh	r2, [r7, #6]
 800455a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	689b      	ldr	r3, [r3, #8]
 8004560:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004564:	d108      	bne.n	8004578 <HAL_UART_Transmit+0x82>
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	691b      	ldr	r3, [r3, #16]
 800456a:	2b00      	cmp	r3, #0
 800456c:	d104      	bne.n	8004578 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800456e:	2300      	movs	r3, #0
 8004570:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004572:	68bb      	ldr	r3, [r7, #8]
 8004574:	61bb      	str	r3, [r7, #24]
 8004576:	e003      	b.n	8004580 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004578:	68bb      	ldr	r3, [r7, #8]
 800457a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800457c:	2300      	movs	r3, #0
 800457e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	2200      	movs	r2, #0
 8004584:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004588:	e02a      	b.n	80045e0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800458a:	683b      	ldr	r3, [r7, #0]
 800458c:	9300      	str	r3, [sp, #0]
 800458e:	697b      	ldr	r3, [r7, #20]
 8004590:	2200      	movs	r2, #0
 8004592:	2180      	movs	r1, #128	; 0x80
 8004594:	68f8      	ldr	r0, [r7, #12]
 8004596:	f000 fb9b 	bl	8004cd0 <UART_WaitOnFlagUntilTimeout>
 800459a:	4603      	mov	r3, r0
 800459c:	2b00      	cmp	r3, #0
 800459e:	d001      	beq.n	80045a4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80045a0:	2303      	movs	r3, #3
 80045a2:	e036      	b.n	8004612 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80045a4:	69fb      	ldr	r3, [r7, #28]
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d10b      	bne.n	80045c2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80045aa:	69bb      	ldr	r3, [r7, #24]
 80045ac:	881b      	ldrh	r3, [r3, #0]
 80045ae:	461a      	mov	r2, r3
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80045b8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80045ba:	69bb      	ldr	r3, [r7, #24]
 80045bc:	3302      	adds	r3, #2
 80045be:	61bb      	str	r3, [r7, #24]
 80045c0:	e007      	b.n	80045d2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80045c2:	69fb      	ldr	r3, [r7, #28]
 80045c4:	781a      	ldrb	r2, [r3, #0]
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80045cc:	69fb      	ldr	r3, [r7, #28]
 80045ce:	3301      	adds	r3, #1
 80045d0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80045d6:	b29b      	uxth	r3, r3
 80045d8:	3b01      	subs	r3, #1
 80045da:	b29a      	uxth	r2, r3
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80045e4:	b29b      	uxth	r3, r3
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d1cf      	bne.n	800458a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80045ea:	683b      	ldr	r3, [r7, #0]
 80045ec:	9300      	str	r3, [sp, #0]
 80045ee:	697b      	ldr	r3, [r7, #20]
 80045f0:	2200      	movs	r2, #0
 80045f2:	2140      	movs	r1, #64	; 0x40
 80045f4:	68f8      	ldr	r0, [r7, #12]
 80045f6:	f000 fb6b 	bl	8004cd0 <UART_WaitOnFlagUntilTimeout>
 80045fa:	4603      	mov	r3, r0
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d001      	beq.n	8004604 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004600:	2303      	movs	r3, #3
 8004602:	e006      	b.n	8004612 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	2220      	movs	r2, #32
 8004608:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800460c:	2300      	movs	r3, #0
 800460e:	e000      	b.n	8004612 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004610:	2302      	movs	r3, #2
  }
}
 8004612:	4618      	mov	r0, r3
 8004614:	3720      	adds	r7, #32
 8004616:	46bd      	mov	sp, r7
 8004618:	bd80      	pop	{r7, pc}

0800461a <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800461a:	b580      	push	{r7, lr}
 800461c:	b08a      	sub	sp, #40	; 0x28
 800461e:	af02      	add	r7, sp, #8
 8004620:	60f8      	str	r0, [r7, #12]
 8004622:	60b9      	str	r1, [r7, #8]
 8004624:	603b      	str	r3, [r7, #0]
 8004626:	4613      	mov	r3, r2
 8004628:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800462a:	2300      	movs	r3, #0
 800462c:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004634:	b2db      	uxtb	r3, r3
 8004636:	2b20      	cmp	r3, #32
 8004638:	f040 808c 	bne.w	8004754 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 800463c:	68bb      	ldr	r3, [r7, #8]
 800463e:	2b00      	cmp	r3, #0
 8004640:	d002      	beq.n	8004648 <HAL_UART_Receive+0x2e>
 8004642:	88fb      	ldrh	r3, [r7, #6]
 8004644:	2b00      	cmp	r3, #0
 8004646:	d101      	bne.n	800464c <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8004648:	2301      	movs	r3, #1
 800464a:	e084      	b.n	8004756 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004652:	2b01      	cmp	r3, #1
 8004654:	d101      	bne.n	800465a <HAL_UART_Receive+0x40>
 8004656:	2302      	movs	r3, #2
 8004658:	e07d      	b.n	8004756 <HAL_UART_Receive+0x13c>
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	2201      	movs	r2, #1
 800465e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	2200      	movs	r2, #0
 8004666:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	2222      	movs	r2, #34	; 0x22
 800466c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	2200      	movs	r2, #0
 8004674:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004676:	f7fc fedd 	bl	8001434 <HAL_GetTick>
 800467a:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	88fa      	ldrh	r2, [r7, #6]
 8004680:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	88fa      	ldrh	r2, [r7, #6]
 8004686:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	689b      	ldr	r3, [r3, #8]
 800468c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004690:	d108      	bne.n	80046a4 <HAL_UART_Receive+0x8a>
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	691b      	ldr	r3, [r3, #16]
 8004696:	2b00      	cmp	r3, #0
 8004698:	d104      	bne.n	80046a4 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 800469a:	2300      	movs	r3, #0
 800469c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800469e:	68bb      	ldr	r3, [r7, #8]
 80046a0:	61bb      	str	r3, [r7, #24]
 80046a2:	e003      	b.n	80046ac <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 80046a4:	68bb      	ldr	r3, [r7, #8]
 80046a6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80046a8:	2300      	movs	r3, #0
 80046aa:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	2200      	movs	r2, #0
 80046b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80046b4:	e043      	b.n	800473e <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80046b6:	683b      	ldr	r3, [r7, #0]
 80046b8:	9300      	str	r3, [sp, #0]
 80046ba:	697b      	ldr	r3, [r7, #20]
 80046bc:	2200      	movs	r2, #0
 80046be:	2120      	movs	r1, #32
 80046c0:	68f8      	ldr	r0, [r7, #12]
 80046c2:	f000 fb05 	bl	8004cd0 <UART_WaitOnFlagUntilTimeout>
 80046c6:	4603      	mov	r3, r0
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d001      	beq.n	80046d0 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 80046cc:	2303      	movs	r3, #3
 80046ce:	e042      	b.n	8004756 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 80046d0:	69fb      	ldr	r3, [r7, #28]
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d10c      	bne.n	80046f0 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	685b      	ldr	r3, [r3, #4]
 80046dc:	b29b      	uxth	r3, r3
 80046de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80046e2:	b29a      	uxth	r2, r3
 80046e4:	69bb      	ldr	r3, [r7, #24]
 80046e6:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80046e8:	69bb      	ldr	r3, [r7, #24]
 80046ea:	3302      	adds	r3, #2
 80046ec:	61bb      	str	r3, [r7, #24]
 80046ee:	e01f      	b.n	8004730 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	689b      	ldr	r3, [r3, #8]
 80046f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80046f8:	d007      	beq.n	800470a <HAL_UART_Receive+0xf0>
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	689b      	ldr	r3, [r3, #8]
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d10a      	bne.n	8004718 <HAL_UART_Receive+0xfe>
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	691b      	ldr	r3, [r3, #16]
 8004706:	2b00      	cmp	r3, #0
 8004708:	d106      	bne.n	8004718 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	685b      	ldr	r3, [r3, #4]
 8004710:	b2da      	uxtb	r2, r3
 8004712:	69fb      	ldr	r3, [r7, #28]
 8004714:	701a      	strb	r2, [r3, #0]
 8004716:	e008      	b.n	800472a <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	685b      	ldr	r3, [r3, #4]
 800471e:	b2db      	uxtb	r3, r3
 8004720:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004724:	b2da      	uxtb	r2, r3
 8004726:	69fb      	ldr	r3, [r7, #28]
 8004728:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 800472a:	69fb      	ldr	r3, [r7, #28]
 800472c:	3301      	adds	r3, #1
 800472e:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004734:	b29b      	uxth	r3, r3
 8004736:	3b01      	subs	r3, #1
 8004738:	b29a      	uxth	r2, r3
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004742:	b29b      	uxth	r3, r3
 8004744:	2b00      	cmp	r3, #0
 8004746:	d1b6      	bne.n	80046b6 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	2220      	movs	r2, #32
 800474c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8004750:	2300      	movs	r3, #0
 8004752:	e000      	b.n	8004756 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8004754:	2302      	movs	r3, #2
  }
}
 8004756:	4618      	mov	r0, r3
 8004758:	3720      	adds	r7, #32
 800475a:	46bd      	mov	sp, r7
 800475c:	bd80      	pop	{r7, pc}
	...

08004760 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004760:	b580      	push	{r7, lr}
 8004762:	b0ba      	sub	sp, #232	; 0xe8
 8004764:	af00      	add	r7, sp, #0
 8004766:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	68db      	ldr	r3, [r3, #12]
 8004778:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	695b      	ldr	r3, [r3, #20]
 8004782:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8004786:	2300      	movs	r3, #0
 8004788:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800478c:	2300      	movs	r3, #0
 800478e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004792:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004796:	f003 030f 	and.w	r3, r3, #15
 800479a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800479e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d10f      	bne.n	80047c6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80047a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80047aa:	f003 0320 	and.w	r3, r3, #32
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d009      	beq.n	80047c6 <HAL_UART_IRQHandler+0x66>
 80047b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80047b6:	f003 0320 	and.w	r3, r3, #32
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d003      	beq.n	80047c6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80047be:	6878      	ldr	r0, [r7, #4]
 80047c0:	f000 fbd3 	bl	8004f6a <UART_Receive_IT>
      return;
 80047c4:	e256      	b.n	8004c74 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80047c6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	f000 80de 	beq.w	800498c <HAL_UART_IRQHandler+0x22c>
 80047d0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80047d4:	f003 0301 	and.w	r3, r3, #1
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d106      	bne.n	80047ea <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80047dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80047e0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	f000 80d1 	beq.w	800498c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80047ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80047ee:	f003 0301 	and.w	r3, r3, #1
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d00b      	beq.n	800480e <HAL_UART_IRQHandler+0xae>
 80047f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80047fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d005      	beq.n	800480e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004806:	f043 0201 	orr.w	r2, r3, #1
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800480e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004812:	f003 0304 	and.w	r3, r3, #4
 8004816:	2b00      	cmp	r3, #0
 8004818:	d00b      	beq.n	8004832 <HAL_UART_IRQHandler+0xd2>
 800481a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800481e:	f003 0301 	and.w	r3, r3, #1
 8004822:	2b00      	cmp	r3, #0
 8004824:	d005      	beq.n	8004832 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800482a:	f043 0202 	orr.w	r2, r3, #2
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004832:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004836:	f003 0302 	and.w	r3, r3, #2
 800483a:	2b00      	cmp	r3, #0
 800483c:	d00b      	beq.n	8004856 <HAL_UART_IRQHandler+0xf6>
 800483e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004842:	f003 0301 	and.w	r3, r3, #1
 8004846:	2b00      	cmp	r3, #0
 8004848:	d005      	beq.n	8004856 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800484e:	f043 0204 	orr.w	r2, r3, #4
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004856:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800485a:	f003 0308 	and.w	r3, r3, #8
 800485e:	2b00      	cmp	r3, #0
 8004860:	d011      	beq.n	8004886 <HAL_UART_IRQHandler+0x126>
 8004862:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004866:	f003 0320 	and.w	r3, r3, #32
 800486a:	2b00      	cmp	r3, #0
 800486c:	d105      	bne.n	800487a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800486e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004872:	f003 0301 	and.w	r3, r3, #1
 8004876:	2b00      	cmp	r3, #0
 8004878:	d005      	beq.n	8004886 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800487e:	f043 0208 	orr.w	r2, r3, #8
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800488a:	2b00      	cmp	r3, #0
 800488c:	f000 81ed 	beq.w	8004c6a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004890:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004894:	f003 0320 	and.w	r3, r3, #32
 8004898:	2b00      	cmp	r3, #0
 800489a:	d008      	beq.n	80048ae <HAL_UART_IRQHandler+0x14e>
 800489c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80048a0:	f003 0320 	and.w	r3, r3, #32
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d002      	beq.n	80048ae <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80048a8:	6878      	ldr	r0, [r7, #4]
 80048aa:	f000 fb5e 	bl	8004f6a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	695b      	ldr	r3, [r3, #20]
 80048b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048b8:	2b40      	cmp	r3, #64	; 0x40
 80048ba:	bf0c      	ite	eq
 80048bc:	2301      	moveq	r3, #1
 80048be:	2300      	movne	r3, #0
 80048c0:	b2db      	uxtb	r3, r3
 80048c2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048ca:	f003 0308 	and.w	r3, r3, #8
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d103      	bne.n	80048da <HAL_UART_IRQHandler+0x17a>
 80048d2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d04f      	beq.n	800497a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80048da:	6878      	ldr	r0, [r7, #4]
 80048dc:	f000 fa66 	bl	8004dac <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	695b      	ldr	r3, [r3, #20]
 80048e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048ea:	2b40      	cmp	r3, #64	; 0x40
 80048ec:	d141      	bne.n	8004972 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	3314      	adds	r3, #20
 80048f4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048f8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80048fc:	e853 3f00 	ldrex	r3, [r3]
 8004900:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004904:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004908:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800490c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	3314      	adds	r3, #20
 8004916:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800491a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800491e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004922:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004926:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800492a:	e841 2300 	strex	r3, r2, [r1]
 800492e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004932:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004936:	2b00      	cmp	r3, #0
 8004938:	d1d9      	bne.n	80048ee <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800493e:	2b00      	cmp	r3, #0
 8004940:	d013      	beq.n	800496a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004946:	4a7d      	ldr	r2, [pc, #500]	; (8004b3c <HAL_UART_IRQHandler+0x3dc>)
 8004948:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800494e:	4618      	mov	r0, r3
 8004950:	f7fc ff21 	bl	8001796 <HAL_DMA_Abort_IT>
 8004954:	4603      	mov	r3, r0
 8004956:	2b00      	cmp	r3, #0
 8004958:	d016      	beq.n	8004988 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800495e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004960:	687a      	ldr	r2, [r7, #4]
 8004962:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004964:	4610      	mov	r0, r2
 8004966:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004968:	e00e      	b.n	8004988 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800496a:	6878      	ldr	r0, [r7, #4]
 800496c:	f000 f99a 	bl	8004ca4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004970:	e00a      	b.n	8004988 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004972:	6878      	ldr	r0, [r7, #4]
 8004974:	f000 f996 	bl	8004ca4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004978:	e006      	b.n	8004988 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800497a:	6878      	ldr	r0, [r7, #4]
 800497c:	f000 f992 	bl	8004ca4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	2200      	movs	r2, #0
 8004984:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8004986:	e170      	b.n	8004c6a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004988:	bf00      	nop
    return;
 800498a:	e16e      	b.n	8004c6a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004990:	2b01      	cmp	r3, #1
 8004992:	f040 814a 	bne.w	8004c2a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004996:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800499a:	f003 0310 	and.w	r3, r3, #16
 800499e:	2b00      	cmp	r3, #0
 80049a0:	f000 8143 	beq.w	8004c2a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80049a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80049a8:	f003 0310 	and.w	r3, r3, #16
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	f000 813c 	beq.w	8004c2a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80049b2:	2300      	movs	r3, #0
 80049b4:	60bb      	str	r3, [r7, #8]
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	60bb      	str	r3, [r7, #8]
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	685b      	ldr	r3, [r3, #4]
 80049c4:	60bb      	str	r3, [r7, #8]
 80049c6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	695b      	ldr	r3, [r3, #20]
 80049ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049d2:	2b40      	cmp	r3, #64	; 0x40
 80049d4:	f040 80b4 	bne.w	8004b40 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	685b      	ldr	r3, [r3, #4]
 80049e0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80049e4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	f000 8140 	beq.w	8004c6e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80049f2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80049f6:	429a      	cmp	r2, r3
 80049f8:	f080 8139 	bcs.w	8004c6e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004a02:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a08:	69db      	ldr	r3, [r3, #28]
 8004a0a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004a0e:	f000 8088 	beq.w	8004b22 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	330c      	adds	r3, #12
 8004a18:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a1c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004a20:	e853 3f00 	ldrex	r3, [r3]
 8004a24:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004a28:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004a2c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004a30:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	330c      	adds	r3, #12
 8004a3a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8004a3e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004a42:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a46:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004a4a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004a4e:	e841 2300 	strex	r3, r2, [r1]
 8004a52:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004a56:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d1d9      	bne.n	8004a12 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	3314      	adds	r3, #20
 8004a64:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a66:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004a68:	e853 3f00 	ldrex	r3, [r3]
 8004a6c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004a6e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004a70:	f023 0301 	bic.w	r3, r3, #1
 8004a74:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	3314      	adds	r3, #20
 8004a7e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004a82:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004a86:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a88:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004a8a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004a8e:	e841 2300 	strex	r3, r2, [r1]
 8004a92:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004a94:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d1e1      	bne.n	8004a5e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	3314      	adds	r3, #20
 8004aa0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004aa2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004aa4:	e853 3f00 	ldrex	r3, [r3]
 8004aa8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004aaa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004aac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004ab0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	3314      	adds	r3, #20
 8004aba:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004abe:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004ac0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ac2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004ac4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004ac6:	e841 2300 	strex	r3, r2, [r1]
 8004aca:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004acc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d1e3      	bne.n	8004a9a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	2220      	movs	r2, #32
 8004ad6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	2200      	movs	r2, #0
 8004ade:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	330c      	adds	r3, #12
 8004ae6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ae8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004aea:	e853 3f00 	ldrex	r3, [r3]
 8004aee:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004af0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004af2:	f023 0310 	bic.w	r3, r3, #16
 8004af6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	330c      	adds	r3, #12
 8004b00:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004b04:	65ba      	str	r2, [r7, #88]	; 0x58
 8004b06:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b08:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004b0a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004b0c:	e841 2300 	strex	r3, r2, [r1]
 8004b10:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004b12:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d1e3      	bne.n	8004ae0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b1c:	4618      	mov	r0, r3
 8004b1e:	f7fc fdca 	bl	80016b6 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004b2a:	b29b      	uxth	r3, r3
 8004b2c:	1ad3      	subs	r3, r2, r3
 8004b2e:	b29b      	uxth	r3, r3
 8004b30:	4619      	mov	r1, r3
 8004b32:	6878      	ldr	r0, [r7, #4]
 8004b34:	f000 f8c0 	bl	8004cb8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004b38:	e099      	b.n	8004c6e <HAL_UART_IRQHandler+0x50e>
 8004b3a:	bf00      	nop
 8004b3c:	08004e73 	.word	0x08004e73
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004b48:	b29b      	uxth	r3, r3
 8004b4a:	1ad3      	subs	r3, r2, r3
 8004b4c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004b54:	b29b      	uxth	r3, r3
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	f000 808b 	beq.w	8004c72 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8004b5c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	f000 8086 	beq.w	8004c72 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	330c      	adds	r3, #12
 8004b6c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b70:	e853 3f00 	ldrex	r3, [r3]
 8004b74:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004b76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b78:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004b7c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	330c      	adds	r3, #12
 8004b86:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8004b8a:	647a      	str	r2, [r7, #68]	; 0x44
 8004b8c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b8e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004b90:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004b92:	e841 2300 	strex	r3, r2, [r1]
 8004b96:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004b98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d1e3      	bne.n	8004b66 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	3314      	adds	r3, #20
 8004ba4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ba6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ba8:	e853 3f00 	ldrex	r3, [r3]
 8004bac:	623b      	str	r3, [r7, #32]
   return(result);
 8004bae:	6a3b      	ldr	r3, [r7, #32]
 8004bb0:	f023 0301 	bic.w	r3, r3, #1
 8004bb4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	3314      	adds	r3, #20
 8004bbe:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004bc2:	633a      	str	r2, [r7, #48]	; 0x30
 8004bc4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bc6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004bc8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004bca:	e841 2300 	strex	r3, r2, [r1]
 8004bce:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004bd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d1e3      	bne.n	8004b9e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	2220      	movs	r2, #32
 8004bda:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	2200      	movs	r2, #0
 8004be2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	330c      	adds	r3, #12
 8004bea:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bec:	693b      	ldr	r3, [r7, #16]
 8004bee:	e853 3f00 	ldrex	r3, [r3]
 8004bf2:	60fb      	str	r3, [r7, #12]
   return(result);
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	f023 0310 	bic.w	r3, r3, #16
 8004bfa:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	330c      	adds	r3, #12
 8004c04:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004c08:	61fa      	str	r2, [r7, #28]
 8004c0a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c0c:	69b9      	ldr	r1, [r7, #24]
 8004c0e:	69fa      	ldr	r2, [r7, #28]
 8004c10:	e841 2300 	strex	r3, r2, [r1]
 8004c14:	617b      	str	r3, [r7, #20]
   return(result);
 8004c16:	697b      	ldr	r3, [r7, #20]
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d1e3      	bne.n	8004be4 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004c1c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004c20:	4619      	mov	r1, r3
 8004c22:	6878      	ldr	r0, [r7, #4]
 8004c24:	f000 f848 	bl	8004cb8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004c28:	e023      	b.n	8004c72 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004c2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d009      	beq.n	8004c4a <HAL_UART_IRQHandler+0x4ea>
 8004c36:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004c3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d003      	beq.n	8004c4a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8004c42:	6878      	ldr	r0, [r7, #4]
 8004c44:	f000 f929 	bl	8004e9a <UART_Transmit_IT>
    return;
 8004c48:	e014      	b.n	8004c74 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004c4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d00e      	beq.n	8004c74 <HAL_UART_IRQHandler+0x514>
 8004c56:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004c5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d008      	beq.n	8004c74 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8004c62:	6878      	ldr	r0, [r7, #4]
 8004c64:	f000 f969 	bl	8004f3a <UART_EndTransmit_IT>
    return;
 8004c68:	e004      	b.n	8004c74 <HAL_UART_IRQHandler+0x514>
    return;
 8004c6a:	bf00      	nop
 8004c6c:	e002      	b.n	8004c74 <HAL_UART_IRQHandler+0x514>
      return;
 8004c6e:	bf00      	nop
 8004c70:	e000      	b.n	8004c74 <HAL_UART_IRQHandler+0x514>
      return;
 8004c72:	bf00      	nop
  }
}
 8004c74:	37e8      	adds	r7, #232	; 0xe8
 8004c76:	46bd      	mov	sp, r7
 8004c78:	bd80      	pop	{r7, pc}
 8004c7a:	bf00      	nop

08004c7c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004c7c:	b480      	push	{r7}
 8004c7e:	b083      	sub	sp, #12
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004c84:	bf00      	nop
 8004c86:	370c      	adds	r7, #12
 8004c88:	46bd      	mov	sp, r7
 8004c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c8e:	4770      	bx	lr

08004c90 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004c90:	b480      	push	{r7}
 8004c92:	b083      	sub	sp, #12
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8004c98:	bf00      	nop
 8004c9a:	370c      	adds	r7, #12
 8004c9c:	46bd      	mov	sp, r7
 8004c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca2:	4770      	bx	lr

08004ca4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004ca4:	b480      	push	{r7}
 8004ca6:	b083      	sub	sp, #12
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004cac:	bf00      	nop
 8004cae:	370c      	adds	r7, #12
 8004cb0:	46bd      	mov	sp, r7
 8004cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb6:	4770      	bx	lr

08004cb8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004cb8:	b480      	push	{r7}
 8004cba:	b083      	sub	sp, #12
 8004cbc:	af00      	add	r7, sp, #0
 8004cbe:	6078      	str	r0, [r7, #4]
 8004cc0:	460b      	mov	r3, r1
 8004cc2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004cc4:	bf00      	nop
 8004cc6:	370c      	adds	r7, #12
 8004cc8:	46bd      	mov	sp, r7
 8004cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cce:	4770      	bx	lr

08004cd0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004cd0:	b580      	push	{r7, lr}
 8004cd2:	b090      	sub	sp, #64	; 0x40
 8004cd4:	af00      	add	r7, sp, #0
 8004cd6:	60f8      	str	r0, [r7, #12]
 8004cd8:	60b9      	str	r1, [r7, #8]
 8004cda:	603b      	str	r3, [r7, #0]
 8004cdc:	4613      	mov	r3, r2
 8004cde:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004ce0:	e050      	b.n	8004d84 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ce2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004ce4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ce8:	d04c      	beq.n	8004d84 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004cea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d007      	beq.n	8004d00 <UART_WaitOnFlagUntilTimeout+0x30>
 8004cf0:	f7fc fba0 	bl	8001434 <HAL_GetTick>
 8004cf4:	4602      	mov	r2, r0
 8004cf6:	683b      	ldr	r3, [r7, #0]
 8004cf8:	1ad3      	subs	r3, r2, r3
 8004cfa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004cfc:	429a      	cmp	r2, r3
 8004cfe:	d241      	bcs.n	8004d84 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	330c      	adds	r3, #12
 8004d06:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d0a:	e853 3f00 	ldrex	r3, [r3]
 8004d0e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004d10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d12:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004d16:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	330c      	adds	r3, #12
 8004d1e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004d20:	637a      	str	r2, [r7, #52]	; 0x34
 8004d22:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d24:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004d26:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004d28:	e841 2300 	strex	r3, r2, [r1]
 8004d2c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004d2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d1e5      	bne.n	8004d00 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	3314      	adds	r3, #20
 8004d3a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d3c:	697b      	ldr	r3, [r7, #20]
 8004d3e:	e853 3f00 	ldrex	r3, [r3]
 8004d42:	613b      	str	r3, [r7, #16]
   return(result);
 8004d44:	693b      	ldr	r3, [r7, #16]
 8004d46:	f023 0301 	bic.w	r3, r3, #1
 8004d4a:	63bb      	str	r3, [r7, #56]	; 0x38
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	3314      	adds	r3, #20
 8004d52:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004d54:	623a      	str	r2, [r7, #32]
 8004d56:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d58:	69f9      	ldr	r1, [r7, #28]
 8004d5a:	6a3a      	ldr	r2, [r7, #32]
 8004d5c:	e841 2300 	strex	r3, r2, [r1]
 8004d60:	61bb      	str	r3, [r7, #24]
   return(result);
 8004d62:	69bb      	ldr	r3, [r7, #24]
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d1e5      	bne.n	8004d34 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	2220      	movs	r2, #32
 8004d6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	2220      	movs	r2, #32
 8004d74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	2200      	movs	r2, #0
 8004d7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004d80:	2303      	movs	r3, #3
 8004d82:	e00f      	b.n	8004da4 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	681a      	ldr	r2, [r3, #0]
 8004d8a:	68bb      	ldr	r3, [r7, #8]
 8004d8c:	4013      	ands	r3, r2
 8004d8e:	68ba      	ldr	r2, [r7, #8]
 8004d90:	429a      	cmp	r2, r3
 8004d92:	bf0c      	ite	eq
 8004d94:	2301      	moveq	r3, #1
 8004d96:	2300      	movne	r3, #0
 8004d98:	b2db      	uxtb	r3, r3
 8004d9a:	461a      	mov	r2, r3
 8004d9c:	79fb      	ldrb	r3, [r7, #7]
 8004d9e:	429a      	cmp	r2, r3
 8004da0:	d09f      	beq.n	8004ce2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004da2:	2300      	movs	r3, #0
}
 8004da4:	4618      	mov	r0, r3
 8004da6:	3740      	adds	r7, #64	; 0x40
 8004da8:	46bd      	mov	sp, r7
 8004daa:	bd80      	pop	{r7, pc}

08004dac <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004dac:	b480      	push	{r7}
 8004dae:	b095      	sub	sp, #84	; 0x54
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	330c      	adds	r3, #12
 8004dba:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004dbe:	e853 3f00 	ldrex	r3, [r3]
 8004dc2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004dc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dc6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004dca:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	330c      	adds	r3, #12
 8004dd2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004dd4:	643a      	str	r2, [r7, #64]	; 0x40
 8004dd6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dd8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004dda:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004ddc:	e841 2300 	strex	r3, r2, [r1]
 8004de0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004de2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d1e5      	bne.n	8004db4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	3314      	adds	r3, #20
 8004dee:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004df0:	6a3b      	ldr	r3, [r7, #32]
 8004df2:	e853 3f00 	ldrex	r3, [r3]
 8004df6:	61fb      	str	r3, [r7, #28]
   return(result);
 8004df8:	69fb      	ldr	r3, [r7, #28]
 8004dfa:	f023 0301 	bic.w	r3, r3, #1
 8004dfe:	64bb      	str	r3, [r7, #72]	; 0x48
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	3314      	adds	r3, #20
 8004e06:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004e08:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004e0a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e0c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004e0e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004e10:	e841 2300 	strex	r3, r2, [r1]
 8004e14:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004e16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d1e5      	bne.n	8004de8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e20:	2b01      	cmp	r3, #1
 8004e22:	d119      	bne.n	8004e58 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	330c      	adds	r3, #12
 8004e2a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	e853 3f00 	ldrex	r3, [r3]
 8004e32:	60bb      	str	r3, [r7, #8]
   return(result);
 8004e34:	68bb      	ldr	r3, [r7, #8]
 8004e36:	f023 0310 	bic.w	r3, r3, #16
 8004e3a:	647b      	str	r3, [r7, #68]	; 0x44
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	330c      	adds	r3, #12
 8004e42:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004e44:	61ba      	str	r2, [r7, #24]
 8004e46:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e48:	6979      	ldr	r1, [r7, #20]
 8004e4a:	69ba      	ldr	r2, [r7, #24]
 8004e4c:	e841 2300 	strex	r3, r2, [r1]
 8004e50:	613b      	str	r3, [r7, #16]
   return(result);
 8004e52:	693b      	ldr	r3, [r7, #16]
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d1e5      	bne.n	8004e24 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	2220      	movs	r2, #32
 8004e5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	2200      	movs	r2, #0
 8004e64:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004e66:	bf00      	nop
 8004e68:	3754      	adds	r7, #84	; 0x54
 8004e6a:	46bd      	mov	sp, r7
 8004e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e70:	4770      	bx	lr

08004e72 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004e72:	b580      	push	{r7, lr}
 8004e74:	b084      	sub	sp, #16
 8004e76:	af00      	add	r7, sp, #0
 8004e78:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e7e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	2200      	movs	r2, #0
 8004e84:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	2200      	movs	r2, #0
 8004e8a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004e8c:	68f8      	ldr	r0, [r7, #12]
 8004e8e:	f7ff ff09 	bl	8004ca4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004e92:	bf00      	nop
 8004e94:	3710      	adds	r7, #16
 8004e96:	46bd      	mov	sp, r7
 8004e98:	bd80      	pop	{r7, pc}

08004e9a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004e9a:	b480      	push	{r7}
 8004e9c:	b085      	sub	sp, #20
 8004e9e:	af00      	add	r7, sp, #0
 8004ea0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ea8:	b2db      	uxtb	r3, r3
 8004eaa:	2b21      	cmp	r3, #33	; 0x21
 8004eac:	d13e      	bne.n	8004f2c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	689b      	ldr	r3, [r3, #8]
 8004eb2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004eb6:	d114      	bne.n	8004ee2 <UART_Transmit_IT+0x48>
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	691b      	ldr	r3, [r3, #16]
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d110      	bne.n	8004ee2 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	6a1b      	ldr	r3, [r3, #32]
 8004ec4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	881b      	ldrh	r3, [r3, #0]
 8004eca:	461a      	mov	r2, r3
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004ed4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	6a1b      	ldr	r3, [r3, #32]
 8004eda:	1c9a      	adds	r2, r3, #2
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	621a      	str	r2, [r3, #32]
 8004ee0:	e008      	b.n	8004ef4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	6a1b      	ldr	r3, [r3, #32]
 8004ee6:	1c59      	adds	r1, r3, #1
 8004ee8:	687a      	ldr	r2, [r7, #4]
 8004eea:	6211      	str	r1, [r2, #32]
 8004eec:	781a      	ldrb	r2, [r3, #0]
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004ef8:	b29b      	uxth	r3, r3
 8004efa:	3b01      	subs	r3, #1
 8004efc:	b29b      	uxth	r3, r3
 8004efe:	687a      	ldr	r2, [r7, #4]
 8004f00:	4619      	mov	r1, r3
 8004f02:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d10f      	bne.n	8004f28 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	68da      	ldr	r2, [r3, #12]
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004f16:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	68da      	ldr	r2, [r3, #12]
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004f26:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004f28:	2300      	movs	r3, #0
 8004f2a:	e000      	b.n	8004f2e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004f2c:	2302      	movs	r3, #2
  }
}
 8004f2e:	4618      	mov	r0, r3
 8004f30:	3714      	adds	r7, #20
 8004f32:	46bd      	mov	sp, r7
 8004f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f38:	4770      	bx	lr

08004f3a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004f3a:	b580      	push	{r7, lr}
 8004f3c:	b082      	sub	sp, #8
 8004f3e:	af00      	add	r7, sp, #0
 8004f40:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	68da      	ldr	r2, [r3, #12]
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004f50:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	2220      	movs	r2, #32
 8004f56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004f5a:	6878      	ldr	r0, [r7, #4]
 8004f5c:	f7ff fe8e 	bl	8004c7c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004f60:	2300      	movs	r3, #0
}
 8004f62:	4618      	mov	r0, r3
 8004f64:	3708      	adds	r7, #8
 8004f66:	46bd      	mov	sp, r7
 8004f68:	bd80      	pop	{r7, pc}

08004f6a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004f6a:	b580      	push	{r7, lr}
 8004f6c:	b08c      	sub	sp, #48	; 0x30
 8004f6e:	af00      	add	r7, sp, #0
 8004f70:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004f78:	b2db      	uxtb	r3, r3
 8004f7a:	2b22      	cmp	r3, #34	; 0x22
 8004f7c:	f040 80ab 	bne.w	80050d6 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	689b      	ldr	r3, [r3, #8]
 8004f84:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f88:	d117      	bne.n	8004fba <UART_Receive_IT+0x50>
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	691b      	ldr	r3, [r3, #16]
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d113      	bne.n	8004fba <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004f92:	2300      	movs	r3, #0
 8004f94:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f9a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	685b      	ldr	r3, [r3, #4]
 8004fa2:	b29b      	uxth	r3, r3
 8004fa4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004fa8:	b29a      	uxth	r2, r3
 8004faa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fac:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fb2:	1c9a      	adds	r2, r3, #2
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	629a      	str	r2, [r3, #40]	; 0x28
 8004fb8:	e026      	b.n	8005008 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fbe:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004fc0:	2300      	movs	r3, #0
 8004fc2:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	689b      	ldr	r3, [r3, #8]
 8004fc8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004fcc:	d007      	beq.n	8004fde <UART_Receive_IT+0x74>
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	689b      	ldr	r3, [r3, #8]
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d10a      	bne.n	8004fec <UART_Receive_IT+0x82>
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	691b      	ldr	r3, [r3, #16]
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d106      	bne.n	8004fec <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	685b      	ldr	r3, [r3, #4]
 8004fe4:	b2da      	uxtb	r2, r3
 8004fe6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fe8:	701a      	strb	r2, [r3, #0]
 8004fea:	e008      	b.n	8004ffe <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	685b      	ldr	r3, [r3, #4]
 8004ff2:	b2db      	uxtb	r3, r3
 8004ff4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004ff8:	b2da      	uxtb	r2, r3
 8004ffa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ffc:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005002:	1c5a      	adds	r2, r3, #1
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800500c:	b29b      	uxth	r3, r3
 800500e:	3b01      	subs	r3, #1
 8005010:	b29b      	uxth	r3, r3
 8005012:	687a      	ldr	r2, [r7, #4]
 8005014:	4619      	mov	r1, r3
 8005016:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005018:	2b00      	cmp	r3, #0
 800501a:	d15a      	bne.n	80050d2 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	68da      	ldr	r2, [r3, #12]
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	f022 0220 	bic.w	r2, r2, #32
 800502a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	68da      	ldr	r2, [r3, #12]
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800503a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	695a      	ldr	r2, [r3, #20]
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	f022 0201 	bic.w	r2, r2, #1
 800504a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	2220      	movs	r2, #32
 8005050:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005058:	2b01      	cmp	r3, #1
 800505a:	d135      	bne.n	80050c8 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	2200      	movs	r2, #0
 8005060:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	330c      	adds	r3, #12
 8005068:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800506a:	697b      	ldr	r3, [r7, #20]
 800506c:	e853 3f00 	ldrex	r3, [r3]
 8005070:	613b      	str	r3, [r7, #16]
   return(result);
 8005072:	693b      	ldr	r3, [r7, #16]
 8005074:	f023 0310 	bic.w	r3, r3, #16
 8005078:	627b      	str	r3, [r7, #36]	; 0x24
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	330c      	adds	r3, #12
 8005080:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005082:	623a      	str	r2, [r7, #32]
 8005084:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005086:	69f9      	ldr	r1, [r7, #28]
 8005088:	6a3a      	ldr	r2, [r7, #32]
 800508a:	e841 2300 	strex	r3, r2, [r1]
 800508e:	61bb      	str	r3, [r7, #24]
   return(result);
 8005090:	69bb      	ldr	r3, [r7, #24]
 8005092:	2b00      	cmp	r3, #0
 8005094:	d1e5      	bne.n	8005062 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	f003 0310 	and.w	r3, r3, #16
 80050a0:	2b10      	cmp	r3, #16
 80050a2:	d10a      	bne.n	80050ba <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80050a4:	2300      	movs	r3, #0
 80050a6:	60fb      	str	r3, [r7, #12]
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	60fb      	str	r3, [r7, #12]
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	685b      	ldr	r3, [r3, #4]
 80050b6:	60fb      	str	r3, [r7, #12]
 80050b8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80050be:	4619      	mov	r1, r3
 80050c0:	6878      	ldr	r0, [r7, #4]
 80050c2:	f7ff fdf9 	bl	8004cb8 <HAL_UARTEx_RxEventCallback>
 80050c6:	e002      	b.n	80050ce <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80050c8:	6878      	ldr	r0, [r7, #4]
 80050ca:	f7ff fde1 	bl	8004c90 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80050ce:	2300      	movs	r3, #0
 80050d0:	e002      	b.n	80050d8 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80050d2:	2300      	movs	r3, #0
 80050d4:	e000      	b.n	80050d8 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80050d6:	2302      	movs	r3, #2
  }
}
 80050d8:	4618      	mov	r0, r3
 80050da:	3730      	adds	r7, #48	; 0x30
 80050dc:	46bd      	mov	sp, r7
 80050de:	bd80      	pop	{r7, pc}

080050e0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80050e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80050e4:	b0c0      	sub	sp, #256	; 0x100
 80050e6:	af00      	add	r7, sp, #0
 80050e8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80050ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	691b      	ldr	r3, [r3, #16]
 80050f4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80050f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050fc:	68d9      	ldr	r1, [r3, #12]
 80050fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005102:	681a      	ldr	r2, [r3, #0]
 8005104:	ea40 0301 	orr.w	r3, r0, r1
 8005108:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800510a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800510e:	689a      	ldr	r2, [r3, #8]
 8005110:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005114:	691b      	ldr	r3, [r3, #16]
 8005116:	431a      	orrs	r2, r3
 8005118:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800511c:	695b      	ldr	r3, [r3, #20]
 800511e:	431a      	orrs	r2, r3
 8005120:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005124:	69db      	ldr	r3, [r3, #28]
 8005126:	4313      	orrs	r3, r2
 8005128:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800512c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	68db      	ldr	r3, [r3, #12]
 8005134:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005138:	f021 010c 	bic.w	r1, r1, #12
 800513c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005140:	681a      	ldr	r2, [r3, #0]
 8005142:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005146:	430b      	orrs	r3, r1
 8005148:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800514a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	695b      	ldr	r3, [r3, #20]
 8005152:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005156:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800515a:	6999      	ldr	r1, [r3, #24]
 800515c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005160:	681a      	ldr	r2, [r3, #0]
 8005162:	ea40 0301 	orr.w	r3, r0, r1
 8005166:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005168:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800516c:	681a      	ldr	r2, [r3, #0]
 800516e:	4b8f      	ldr	r3, [pc, #572]	; (80053ac <UART_SetConfig+0x2cc>)
 8005170:	429a      	cmp	r2, r3
 8005172:	d005      	beq.n	8005180 <UART_SetConfig+0xa0>
 8005174:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005178:	681a      	ldr	r2, [r3, #0]
 800517a:	4b8d      	ldr	r3, [pc, #564]	; (80053b0 <UART_SetConfig+0x2d0>)
 800517c:	429a      	cmp	r2, r3
 800517e:	d104      	bne.n	800518a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005180:	f7fe fba2 	bl	80038c8 <HAL_RCC_GetPCLK2Freq>
 8005184:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005188:	e003      	b.n	8005192 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800518a:	f7fe fb89 	bl	80038a0 <HAL_RCC_GetPCLK1Freq>
 800518e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005192:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005196:	69db      	ldr	r3, [r3, #28]
 8005198:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800519c:	f040 810c 	bne.w	80053b8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80051a0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80051a4:	2200      	movs	r2, #0
 80051a6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80051aa:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80051ae:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80051b2:	4622      	mov	r2, r4
 80051b4:	462b      	mov	r3, r5
 80051b6:	1891      	adds	r1, r2, r2
 80051b8:	65b9      	str	r1, [r7, #88]	; 0x58
 80051ba:	415b      	adcs	r3, r3
 80051bc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80051be:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80051c2:	4621      	mov	r1, r4
 80051c4:	eb12 0801 	adds.w	r8, r2, r1
 80051c8:	4629      	mov	r1, r5
 80051ca:	eb43 0901 	adc.w	r9, r3, r1
 80051ce:	f04f 0200 	mov.w	r2, #0
 80051d2:	f04f 0300 	mov.w	r3, #0
 80051d6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80051da:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80051de:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80051e2:	4690      	mov	r8, r2
 80051e4:	4699      	mov	r9, r3
 80051e6:	4623      	mov	r3, r4
 80051e8:	eb18 0303 	adds.w	r3, r8, r3
 80051ec:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80051f0:	462b      	mov	r3, r5
 80051f2:	eb49 0303 	adc.w	r3, r9, r3
 80051f6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80051fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80051fe:	685b      	ldr	r3, [r3, #4]
 8005200:	2200      	movs	r2, #0
 8005202:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005206:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800520a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800520e:	460b      	mov	r3, r1
 8005210:	18db      	adds	r3, r3, r3
 8005212:	653b      	str	r3, [r7, #80]	; 0x50
 8005214:	4613      	mov	r3, r2
 8005216:	eb42 0303 	adc.w	r3, r2, r3
 800521a:	657b      	str	r3, [r7, #84]	; 0x54
 800521c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005220:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005224:	f7fa ffd0 	bl	80001c8 <__aeabi_uldivmod>
 8005228:	4602      	mov	r2, r0
 800522a:	460b      	mov	r3, r1
 800522c:	4b61      	ldr	r3, [pc, #388]	; (80053b4 <UART_SetConfig+0x2d4>)
 800522e:	fba3 2302 	umull	r2, r3, r3, r2
 8005232:	095b      	lsrs	r3, r3, #5
 8005234:	011c      	lsls	r4, r3, #4
 8005236:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800523a:	2200      	movs	r2, #0
 800523c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005240:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005244:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005248:	4642      	mov	r2, r8
 800524a:	464b      	mov	r3, r9
 800524c:	1891      	adds	r1, r2, r2
 800524e:	64b9      	str	r1, [r7, #72]	; 0x48
 8005250:	415b      	adcs	r3, r3
 8005252:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005254:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005258:	4641      	mov	r1, r8
 800525a:	eb12 0a01 	adds.w	sl, r2, r1
 800525e:	4649      	mov	r1, r9
 8005260:	eb43 0b01 	adc.w	fp, r3, r1
 8005264:	f04f 0200 	mov.w	r2, #0
 8005268:	f04f 0300 	mov.w	r3, #0
 800526c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005270:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005274:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005278:	4692      	mov	sl, r2
 800527a:	469b      	mov	fp, r3
 800527c:	4643      	mov	r3, r8
 800527e:	eb1a 0303 	adds.w	r3, sl, r3
 8005282:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005286:	464b      	mov	r3, r9
 8005288:	eb4b 0303 	adc.w	r3, fp, r3
 800528c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005290:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005294:	685b      	ldr	r3, [r3, #4]
 8005296:	2200      	movs	r2, #0
 8005298:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800529c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80052a0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80052a4:	460b      	mov	r3, r1
 80052a6:	18db      	adds	r3, r3, r3
 80052a8:	643b      	str	r3, [r7, #64]	; 0x40
 80052aa:	4613      	mov	r3, r2
 80052ac:	eb42 0303 	adc.w	r3, r2, r3
 80052b0:	647b      	str	r3, [r7, #68]	; 0x44
 80052b2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80052b6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80052ba:	f7fa ff85 	bl	80001c8 <__aeabi_uldivmod>
 80052be:	4602      	mov	r2, r0
 80052c0:	460b      	mov	r3, r1
 80052c2:	4611      	mov	r1, r2
 80052c4:	4b3b      	ldr	r3, [pc, #236]	; (80053b4 <UART_SetConfig+0x2d4>)
 80052c6:	fba3 2301 	umull	r2, r3, r3, r1
 80052ca:	095b      	lsrs	r3, r3, #5
 80052cc:	2264      	movs	r2, #100	; 0x64
 80052ce:	fb02 f303 	mul.w	r3, r2, r3
 80052d2:	1acb      	subs	r3, r1, r3
 80052d4:	00db      	lsls	r3, r3, #3
 80052d6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80052da:	4b36      	ldr	r3, [pc, #216]	; (80053b4 <UART_SetConfig+0x2d4>)
 80052dc:	fba3 2302 	umull	r2, r3, r3, r2
 80052e0:	095b      	lsrs	r3, r3, #5
 80052e2:	005b      	lsls	r3, r3, #1
 80052e4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80052e8:	441c      	add	r4, r3
 80052ea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80052ee:	2200      	movs	r2, #0
 80052f0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80052f4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80052f8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80052fc:	4642      	mov	r2, r8
 80052fe:	464b      	mov	r3, r9
 8005300:	1891      	adds	r1, r2, r2
 8005302:	63b9      	str	r1, [r7, #56]	; 0x38
 8005304:	415b      	adcs	r3, r3
 8005306:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005308:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800530c:	4641      	mov	r1, r8
 800530e:	1851      	adds	r1, r2, r1
 8005310:	6339      	str	r1, [r7, #48]	; 0x30
 8005312:	4649      	mov	r1, r9
 8005314:	414b      	adcs	r3, r1
 8005316:	637b      	str	r3, [r7, #52]	; 0x34
 8005318:	f04f 0200 	mov.w	r2, #0
 800531c:	f04f 0300 	mov.w	r3, #0
 8005320:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005324:	4659      	mov	r1, fp
 8005326:	00cb      	lsls	r3, r1, #3
 8005328:	4651      	mov	r1, sl
 800532a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800532e:	4651      	mov	r1, sl
 8005330:	00ca      	lsls	r2, r1, #3
 8005332:	4610      	mov	r0, r2
 8005334:	4619      	mov	r1, r3
 8005336:	4603      	mov	r3, r0
 8005338:	4642      	mov	r2, r8
 800533a:	189b      	adds	r3, r3, r2
 800533c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005340:	464b      	mov	r3, r9
 8005342:	460a      	mov	r2, r1
 8005344:	eb42 0303 	adc.w	r3, r2, r3
 8005348:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800534c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005350:	685b      	ldr	r3, [r3, #4]
 8005352:	2200      	movs	r2, #0
 8005354:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005358:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800535c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005360:	460b      	mov	r3, r1
 8005362:	18db      	adds	r3, r3, r3
 8005364:	62bb      	str	r3, [r7, #40]	; 0x28
 8005366:	4613      	mov	r3, r2
 8005368:	eb42 0303 	adc.w	r3, r2, r3
 800536c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800536e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005372:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8005376:	f7fa ff27 	bl	80001c8 <__aeabi_uldivmod>
 800537a:	4602      	mov	r2, r0
 800537c:	460b      	mov	r3, r1
 800537e:	4b0d      	ldr	r3, [pc, #52]	; (80053b4 <UART_SetConfig+0x2d4>)
 8005380:	fba3 1302 	umull	r1, r3, r3, r2
 8005384:	095b      	lsrs	r3, r3, #5
 8005386:	2164      	movs	r1, #100	; 0x64
 8005388:	fb01 f303 	mul.w	r3, r1, r3
 800538c:	1ad3      	subs	r3, r2, r3
 800538e:	00db      	lsls	r3, r3, #3
 8005390:	3332      	adds	r3, #50	; 0x32
 8005392:	4a08      	ldr	r2, [pc, #32]	; (80053b4 <UART_SetConfig+0x2d4>)
 8005394:	fba2 2303 	umull	r2, r3, r2, r3
 8005398:	095b      	lsrs	r3, r3, #5
 800539a:	f003 0207 	and.w	r2, r3, #7
 800539e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	4422      	add	r2, r4
 80053a6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80053a8:	e105      	b.n	80055b6 <UART_SetConfig+0x4d6>
 80053aa:	bf00      	nop
 80053ac:	40011000 	.word	0x40011000
 80053b0:	40011400 	.word	0x40011400
 80053b4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80053b8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80053bc:	2200      	movs	r2, #0
 80053be:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80053c2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80053c6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80053ca:	4642      	mov	r2, r8
 80053cc:	464b      	mov	r3, r9
 80053ce:	1891      	adds	r1, r2, r2
 80053d0:	6239      	str	r1, [r7, #32]
 80053d2:	415b      	adcs	r3, r3
 80053d4:	627b      	str	r3, [r7, #36]	; 0x24
 80053d6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80053da:	4641      	mov	r1, r8
 80053dc:	1854      	adds	r4, r2, r1
 80053de:	4649      	mov	r1, r9
 80053e0:	eb43 0501 	adc.w	r5, r3, r1
 80053e4:	f04f 0200 	mov.w	r2, #0
 80053e8:	f04f 0300 	mov.w	r3, #0
 80053ec:	00eb      	lsls	r3, r5, #3
 80053ee:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80053f2:	00e2      	lsls	r2, r4, #3
 80053f4:	4614      	mov	r4, r2
 80053f6:	461d      	mov	r5, r3
 80053f8:	4643      	mov	r3, r8
 80053fa:	18e3      	adds	r3, r4, r3
 80053fc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005400:	464b      	mov	r3, r9
 8005402:	eb45 0303 	adc.w	r3, r5, r3
 8005406:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800540a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800540e:	685b      	ldr	r3, [r3, #4]
 8005410:	2200      	movs	r2, #0
 8005412:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005416:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800541a:	f04f 0200 	mov.w	r2, #0
 800541e:	f04f 0300 	mov.w	r3, #0
 8005422:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005426:	4629      	mov	r1, r5
 8005428:	008b      	lsls	r3, r1, #2
 800542a:	4621      	mov	r1, r4
 800542c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005430:	4621      	mov	r1, r4
 8005432:	008a      	lsls	r2, r1, #2
 8005434:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005438:	f7fa fec6 	bl	80001c8 <__aeabi_uldivmod>
 800543c:	4602      	mov	r2, r0
 800543e:	460b      	mov	r3, r1
 8005440:	4b60      	ldr	r3, [pc, #384]	; (80055c4 <UART_SetConfig+0x4e4>)
 8005442:	fba3 2302 	umull	r2, r3, r3, r2
 8005446:	095b      	lsrs	r3, r3, #5
 8005448:	011c      	lsls	r4, r3, #4
 800544a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800544e:	2200      	movs	r2, #0
 8005450:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005454:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005458:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800545c:	4642      	mov	r2, r8
 800545e:	464b      	mov	r3, r9
 8005460:	1891      	adds	r1, r2, r2
 8005462:	61b9      	str	r1, [r7, #24]
 8005464:	415b      	adcs	r3, r3
 8005466:	61fb      	str	r3, [r7, #28]
 8005468:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800546c:	4641      	mov	r1, r8
 800546e:	1851      	adds	r1, r2, r1
 8005470:	6139      	str	r1, [r7, #16]
 8005472:	4649      	mov	r1, r9
 8005474:	414b      	adcs	r3, r1
 8005476:	617b      	str	r3, [r7, #20]
 8005478:	f04f 0200 	mov.w	r2, #0
 800547c:	f04f 0300 	mov.w	r3, #0
 8005480:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005484:	4659      	mov	r1, fp
 8005486:	00cb      	lsls	r3, r1, #3
 8005488:	4651      	mov	r1, sl
 800548a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800548e:	4651      	mov	r1, sl
 8005490:	00ca      	lsls	r2, r1, #3
 8005492:	4610      	mov	r0, r2
 8005494:	4619      	mov	r1, r3
 8005496:	4603      	mov	r3, r0
 8005498:	4642      	mov	r2, r8
 800549a:	189b      	adds	r3, r3, r2
 800549c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80054a0:	464b      	mov	r3, r9
 80054a2:	460a      	mov	r2, r1
 80054a4:	eb42 0303 	adc.w	r3, r2, r3
 80054a8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80054ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80054b0:	685b      	ldr	r3, [r3, #4]
 80054b2:	2200      	movs	r2, #0
 80054b4:	67bb      	str	r3, [r7, #120]	; 0x78
 80054b6:	67fa      	str	r2, [r7, #124]	; 0x7c
 80054b8:	f04f 0200 	mov.w	r2, #0
 80054bc:	f04f 0300 	mov.w	r3, #0
 80054c0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80054c4:	4649      	mov	r1, r9
 80054c6:	008b      	lsls	r3, r1, #2
 80054c8:	4641      	mov	r1, r8
 80054ca:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80054ce:	4641      	mov	r1, r8
 80054d0:	008a      	lsls	r2, r1, #2
 80054d2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80054d6:	f7fa fe77 	bl	80001c8 <__aeabi_uldivmod>
 80054da:	4602      	mov	r2, r0
 80054dc:	460b      	mov	r3, r1
 80054de:	4b39      	ldr	r3, [pc, #228]	; (80055c4 <UART_SetConfig+0x4e4>)
 80054e0:	fba3 1302 	umull	r1, r3, r3, r2
 80054e4:	095b      	lsrs	r3, r3, #5
 80054e6:	2164      	movs	r1, #100	; 0x64
 80054e8:	fb01 f303 	mul.w	r3, r1, r3
 80054ec:	1ad3      	subs	r3, r2, r3
 80054ee:	011b      	lsls	r3, r3, #4
 80054f0:	3332      	adds	r3, #50	; 0x32
 80054f2:	4a34      	ldr	r2, [pc, #208]	; (80055c4 <UART_SetConfig+0x4e4>)
 80054f4:	fba2 2303 	umull	r2, r3, r2, r3
 80054f8:	095b      	lsrs	r3, r3, #5
 80054fa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80054fe:	441c      	add	r4, r3
 8005500:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005504:	2200      	movs	r2, #0
 8005506:	673b      	str	r3, [r7, #112]	; 0x70
 8005508:	677a      	str	r2, [r7, #116]	; 0x74
 800550a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800550e:	4642      	mov	r2, r8
 8005510:	464b      	mov	r3, r9
 8005512:	1891      	adds	r1, r2, r2
 8005514:	60b9      	str	r1, [r7, #8]
 8005516:	415b      	adcs	r3, r3
 8005518:	60fb      	str	r3, [r7, #12]
 800551a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800551e:	4641      	mov	r1, r8
 8005520:	1851      	adds	r1, r2, r1
 8005522:	6039      	str	r1, [r7, #0]
 8005524:	4649      	mov	r1, r9
 8005526:	414b      	adcs	r3, r1
 8005528:	607b      	str	r3, [r7, #4]
 800552a:	f04f 0200 	mov.w	r2, #0
 800552e:	f04f 0300 	mov.w	r3, #0
 8005532:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005536:	4659      	mov	r1, fp
 8005538:	00cb      	lsls	r3, r1, #3
 800553a:	4651      	mov	r1, sl
 800553c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005540:	4651      	mov	r1, sl
 8005542:	00ca      	lsls	r2, r1, #3
 8005544:	4610      	mov	r0, r2
 8005546:	4619      	mov	r1, r3
 8005548:	4603      	mov	r3, r0
 800554a:	4642      	mov	r2, r8
 800554c:	189b      	adds	r3, r3, r2
 800554e:	66bb      	str	r3, [r7, #104]	; 0x68
 8005550:	464b      	mov	r3, r9
 8005552:	460a      	mov	r2, r1
 8005554:	eb42 0303 	adc.w	r3, r2, r3
 8005558:	66fb      	str	r3, [r7, #108]	; 0x6c
 800555a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800555e:	685b      	ldr	r3, [r3, #4]
 8005560:	2200      	movs	r2, #0
 8005562:	663b      	str	r3, [r7, #96]	; 0x60
 8005564:	667a      	str	r2, [r7, #100]	; 0x64
 8005566:	f04f 0200 	mov.w	r2, #0
 800556a:	f04f 0300 	mov.w	r3, #0
 800556e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005572:	4649      	mov	r1, r9
 8005574:	008b      	lsls	r3, r1, #2
 8005576:	4641      	mov	r1, r8
 8005578:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800557c:	4641      	mov	r1, r8
 800557e:	008a      	lsls	r2, r1, #2
 8005580:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005584:	f7fa fe20 	bl	80001c8 <__aeabi_uldivmod>
 8005588:	4602      	mov	r2, r0
 800558a:	460b      	mov	r3, r1
 800558c:	4b0d      	ldr	r3, [pc, #52]	; (80055c4 <UART_SetConfig+0x4e4>)
 800558e:	fba3 1302 	umull	r1, r3, r3, r2
 8005592:	095b      	lsrs	r3, r3, #5
 8005594:	2164      	movs	r1, #100	; 0x64
 8005596:	fb01 f303 	mul.w	r3, r1, r3
 800559a:	1ad3      	subs	r3, r2, r3
 800559c:	011b      	lsls	r3, r3, #4
 800559e:	3332      	adds	r3, #50	; 0x32
 80055a0:	4a08      	ldr	r2, [pc, #32]	; (80055c4 <UART_SetConfig+0x4e4>)
 80055a2:	fba2 2303 	umull	r2, r3, r2, r3
 80055a6:	095b      	lsrs	r3, r3, #5
 80055a8:	f003 020f 	and.w	r2, r3, #15
 80055ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	4422      	add	r2, r4
 80055b4:	609a      	str	r2, [r3, #8]
}
 80055b6:	bf00      	nop
 80055b8:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80055bc:	46bd      	mov	sp, r7
 80055be:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80055c2:	bf00      	nop
 80055c4:	51eb851f 	.word	0x51eb851f

080055c8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80055c8:	b084      	sub	sp, #16
 80055ca:	b580      	push	{r7, lr}
 80055cc:	b084      	sub	sp, #16
 80055ce:	af00      	add	r7, sp, #0
 80055d0:	6078      	str	r0, [r7, #4]
 80055d2:	f107 001c 	add.w	r0, r7, #28
 80055d6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80055da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055dc:	2b01      	cmp	r3, #1
 80055de:	d122      	bne.n	8005626 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055e4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	68db      	ldr	r3, [r3, #12]
 80055f0:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80055f4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80055f8:	687a      	ldr	r2, [r7, #4]
 80055fa:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	68db      	ldr	r3, [r3, #12]
 8005600:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005608:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800560a:	2b01      	cmp	r3, #1
 800560c:	d105      	bne.n	800561a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	68db      	ldr	r3, [r3, #12]
 8005612:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800561a:	6878      	ldr	r0, [r7, #4]
 800561c:	f001 fbee 	bl	8006dfc <USB_CoreReset>
 8005620:	4603      	mov	r3, r0
 8005622:	73fb      	strb	r3, [r7, #15]
 8005624:	e01a      	b.n	800565c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	68db      	ldr	r3, [r3, #12]
 800562a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005632:	6878      	ldr	r0, [r7, #4]
 8005634:	f001 fbe2 	bl	8006dfc <USB_CoreReset>
 8005638:	4603      	mov	r3, r0
 800563a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800563c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800563e:	2b00      	cmp	r3, #0
 8005640:	d106      	bne.n	8005650 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005646:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	639a      	str	r2, [r3, #56]	; 0x38
 800564e:	e005      	b.n	800565c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005654:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800565c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800565e:	2b01      	cmp	r3, #1
 8005660:	d10b      	bne.n	800567a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	689b      	ldr	r3, [r3, #8]
 8005666:	f043 0206 	orr.w	r2, r3, #6
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	689b      	ldr	r3, [r3, #8]
 8005672:	f043 0220 	orr.w	r2, r3, #32
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800567a:	7bfb      	ldrb	r3, [r7, #15]
}
 800567c:	4618      	mov	r0, r3
 800567e:	3710      	adds	r7, #16
 8005680:	46bd      	mov	sp, r7
 8005682:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005686:	b004      	add	sp, #16
 8005688:	4770      	bx	lr
	...

0800568c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800568c:	b480      	push	{r7}
 800568e:	b087      	sub	sp, #28
 8005690:	af00      	add	r7, sp, #0
 8005692:	60f8      	str	r0, [r7, #12]
 8005694:	60b9      	str	r1, [r7, #8]
 8005696:	4613      	mov	r3, r2
 8005698:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800569a:	79fb      	ldrb	r3, [r7, #7]
 800569c:	2b02      	cmp	r3, #2
 800569e:	d165      	bne.n	800576c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80056a0:	68bb      	ldr	r3, [r7, #8]
 80056a2:	4a41      	ldr	r2, [pc, #260]	; (80057a8 <USB_SetTurnaroundTime+0x11c>)
 80056a4:	4293      	cmp	r3, r2
 80056a6:	d906      	bls.n	80056b6 <USB_SetTurnaroundTime+0x2a>
 80056a8:	68bb      	ldr	r3, [r7, #8]
 80056aa:	4a40      	ldr	r2, [pc, #256]	; (80057ac <USB_SetTurnaroundTime+0x120>)
 80056ac:	4293      	cmp	r3, r2
 80056ae:	d202      	bcs.n	80056b6 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80056b0:	230f      	movs	r3, #15
 80056b2:	617b      	str	r3, [r7, #20]
 80056b4:	e062      	b.n	800577c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80056b6:	68bb      	ldr	r3, [r7, #8]
 80056b8:	4a3c      	ldr	r2, [pc, #240]	; (80057ac <USB_SetTurnaroundTime+0x120>)
 80056ba:	4293      	cmp	r3, r2
 80056bc:	d306      	bcc.n	80056cc <USB_SetTurnaroundTime+0x40>
 80056be:	68bb      	ldr	r3, [r7, #8]
 80056c0:	4a3b      	ldr	r2, [pc, #236]	; (80057b0 <USB_SetTurnaroundTime+0x124>)
 80056c2:	4293      	cmp	r3, r2
 80056c4:	d202      	bcs.n	80056cc <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80056c6:	230e      	movs	r3, #14
 80056c8:	617b      	str	r3, [r7, #20]
 80056ca:	e057      	b.n	800577c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80056cc:	68bb      	ldr	r3, [r7, #8]
 80056ce:	4a38      	ldr	r2, [pc, #224]	; (80057b0 <USB_SetTurnaroundTime+0x124>)
 80056d0:	4293      	cmp	r3, r2
 80056d2:	d306      	bcc.n	80056e2 <USB_SetTurnaroundTime+0x56>
 80056d4:	68bb      	ldr	r3, [r7, #8]
 80056d6:	4a37      	ldr	r2, [pc, #220]	; (80057b4 <USB_SetTurnaroundTime+0x128>)
 80056d8:	4293      	cmp	r3, r2
 80056da:	d202      	bcs.n	80056e2 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80056dc:	230d      	movs	r3, #13
 80056de:	617b      	str	r3, [r7, #20]
 80056e0:	e04c      	b.n	800577c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80056e2:	68bb      	ldr	r3, [r7, #8]
 80056e4:	4a33      	ldr	r2, [pc, #204]	; (80057b4 <USB_SetTurnaroundTime+0x128>)
 80056e6:	4293      	cmp	r3, r2
 80056e8:	d306      	bcc.n	80056f8 <USB_SetTurnaroundTime+0x6c>
 80056ea:	68bb      	ldr	r3, [r7, #8]
 80056ec:	4a32      	ldr	r2, [pc, #200]	; (80057b8 <USB_SetTurnaroundTime+0x12c>)
 80056ee:	4293      	cmp	r3, r2
 80056f0:	d802      	bhi.n	80056f8 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80056f2:	230c      	movs	r3, #12
 80056f4:	617b      	str	r3, [r7, #20]
 80056f6:	e041      	b.n	800577c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80056f8:	68bb      	ldr	r3, [r7, #8]
 80056fa:	4a2f      	ldr	r2, [pc, #188]	; (80057b8 <USB_SetTurnaroundTime+0x12c>)
 80056fc:	4293      	cmp	r3, r2
 80056fe:	d906      	bls.n	800570e <USB_SetTurnaroundTime+0x82>
 8005700:	68bb      	ldr	r3, [r7, #8]
 8005702:	4a2e      	ldr	r2, [pc, #184]	; (80057bc <USB_SetTurnaroundTime+0x130>)
 8005704:	4293      	cmp	r3, r2
 8005706:	d802      	bhi.n	800570e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8005708:	230b      	movs	r3, #11
 800570a:	617b      	str	r3, [r7, #20]
 800570c:	e036      	b.n	800577c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800570e:	68bb      	ldr	r3, [r7, #8]
 8005710:	4a2a      	ldr	r2, [pc, #168]	; (80057bc <USB_SetTurnaroundTime+0x130>)
 8005712:	4293      	cmp	r3, r2
 8005714:	d906      	bls.n	8005724 <USB_SetTurnaroundTime+0x98>
 8005716:	68bb      	ldr	r3, [r7, #8]
 8005718:	4a29      	ldr	r2, [pc, #164]	; (80057c0 <USB_SetTurnaroundTime+0x134>)
 800571a:	4293      	cmp	r3, r2
 800571c:	d802      	bhi.n	8005724 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800571e:	230a      	movs	r3, #10
 8005720:	617b      	str	r3, [r7, #20]
 8005722:	e02b      	b.n	800577c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8005724:	68bb      	ldr	r3, [r7, #8]
 8005726:	4a26      	ldr	r2, [pc, #152]	; (80057c0 <USB_SetTurnaroundTime+0x134>)
 8005728:	4293      	cmp	r3, r2
 800572a:	d906      	bls.n	800573a <USB_SetTurnaroundTime+0xae>
 800572c:	68bb      	ldr	r3, [r7, #8]
 800572e:	4a25      	ldr	r2, [pc, #148]	; (80057c4 <USB_SetTurnaroundTime+0x138>)
 8005730:	4293      	cmp	r3, r2
 8005732:	d202      	bcs.n	800573a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8005734:	2309      	movs	r3, #9
 8005736:	617b      	str	r3, [r7, #20]
 8005738:	e020      	b.n	800577c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800573a:	68bb      	ldr	r3, [r7, #8]
 800573c:	4a21      	ldr	r2, [pc, #132]	; (80057c4 <USB_SetTurnaroundTime+0x138>)
 800573e:	4293      	cmp	r3, r2
 8005740:	d306      	bcc.n	8005750 <USB_SetTurnaroundTime+0xc4>
 8005742:	68bb      	ldr	r3, [r7, #8]
 8005744:	4a20      	ldr	r2, [pc, #128]	; (80057c8 <USB_SetTurnaroundTime+0x13c>)
 8005746:	4293      	cmp	r3, r2
 8005748:	d802      	bhi.n	8005750 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800574a:	2308      	movs	r3, #8
 800574c:	617b      	str	r3, [r7, #20]
 800574e:	e015      	b.n	800577c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8005750:	68bb      	ldr	r3, [r7, #8]
 8005752:	4a1d      	ldr	r2, [pc, #116]	; (80057c8 <USB_SetTurnaroundTime+0x13c>)
 8005754:	4293      	cmp	r3, r2
 8005756:	d906      	bls.n	8005766 <USB_SetTurnaroundTime+0xda>
 8005758:	68bb      	ldr	r3, [r7, #8]
 800575a:	4a1c      	ldr	r2, [pc, #112]	; (80057cc <USB_SetTurnaroundTime+0x140>)
 800575c:	4293      	cmp	r3, r2
 800575e:	d202      	bcs.n	8005766 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8005760:	2307      	movs	r3, #7
 8005762:	617b      	str	r3, [r7, #20]
 8005764:	e00a      	b.n	800577c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8005766:	2306      	movs	r3, #6
 8005768:	617b      	str	r3, [r7, #20]
 800576a:	e007      	b.n	800577c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800576c:	79fb      	ldrb	r3, [r7, #7]
 800576e:	2b00      	cmp	r3, #0
 8005770:	d102      	bne.n	8005778 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8005772:	2309      	movs	r3, #9
 8005774:	617b      	str	r3, [r7, #20]
 8005776:	e001      	b.n	800577c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8005778:	2309      	movs	r3, #9
 800577a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	68db      	ldr	r3, [r3, #12]
 8005780:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	68da      	ldr	r2, [r3, #12]
 800578c:	697b      	ldr	r3, [r7, #20]
 800578e:	029b      	lsls	r3, r3, #10
 8005790:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8005794:	431a      	orrs	r2, r3
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800579a:	2300      	movs	r3, #0
}
 800579c:	4618      	mov	r0, r3
 800579e:	371c      	adds	r7, #28
 80057a0:	46bd      	mov	sp, r7
 80057a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a6:	4770      	bx	lr
 80057a8:	00d8acbf 	.word	0x00d8acbf
 80057ac:	00e4e1c0 	.word	0x00e4e1c0
 80057b0:	00f42400 	.word	0x00f42400
 80057b4:	01067380 	.word	0x01067380
 80057b8:	011a499f 	.word	0x011a499f
 80057bc:	01312cff 	.word	0x01312cff
 80057c0:	014ca43f 	.word	0x014ca43f
 80057c4:	016e3600 	.word	0x016e3600
 80057c8:	01a6ab1f 	.word	0x01a6ab1f
 80057cc:	01e84800 	.word	0x01e84800

080057d0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80057d0:	b480      	push	{r7}
 80057d2:	b083      	sub	sp, #12
 80057d4:	af00      	add	r7, sp, #0
 80057d6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	689b      	ldr	r3, [r3, #8]
 80057dc:	f043 0201 	orr.w	r2, r3, #1
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80057e4:	2300      	movs	r3, #0
}
 80057e6:	4618      	mov	r0, r3
 80057e8:	370c      	adds	r7, #12
 80057ea:	46bd      	mov	sp, r7
 80057ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f0:	4770      	bx	lr

080057f2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80057f2:	b480      	push	{r7}
 80057f4:	b083      	sub	sp, #12
 80057f6:	af00      	add	r7, sp, #0
 80057f8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	689b      	ldr	r3, [r3, #8]
 80057fe:	f023 0201 	bic.w	r2, r3, #1
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005806:	2300      	movs	r3, #0
}
 8005808:	4618      	mov	r0, r3
 800580a:	370c      	adds	r7, #12
 800580c:	46bd      	mov	sp, r7
 800580e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005812:	4770      	bx	lr

08005814 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005814:	b580      	push	{r7, lr}
 8005816:	b084      	sub	sp, #16
 8005818:	af00      	add	r7, sp, #0
 800581a:	6078      	str	r0, [r7, #4]
 800581c:	460b      	mov	r3, r1
 800581e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005820:	2300      	movs	r3, #0
 8005822:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	68db      	ldr	r3, [r3, #12]
 8005828:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005830:	78fb      	ldrb	r3, [r7, #3]
 8005832:	2b01      	cmp	r3, #1
 8005834:	d115      	bne.n	8005862 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	68db      	ldr	r3, [r3, #12]
 800583a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005842:	2001      	movs	r0, #1
 8005844:	f7fb fe02 	bl	800144c <HAL_Delay>
      ms++;
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	3301      	adds	r3, #1
 800584c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800584e:	6878      	ldr	r0, [r7, #4]
 8005850:	f001 fa45 	bl	8006cde <USB_GetMode>
 8005854:	4603      	mov	r3, r0
 8005856:	2b01      	cmp	r3, #1
 8005858:	d01e      	beq.n	8005898 <USB_SetCurrentMode+0x84>
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	2b31      	cmp	r3, #49	; 0x31
 800585e:	d9f0      	bls.n	8005842 <USB_SetCurrentMode+0x2e>
 8005860:	e01a      	b.n	8005898 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005862:	78fb      	ldrb	r3, [r7, #3]
 8005864:	2b00      	cmp	r3, #0
 8005866:	d115      	bne.n	8005894 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	68db      	ldr	r3, [r3, #12]
 800586c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005874:	2001      	movs	r0, #1
 8005876:	f7fb fde9 	bl	800144c <HAL_Delay>
      ms++;
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	3301      	adds	r3, #1
 800587e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8005880:	6878      	ldr	r0, [r7, #4]
 8005882:	f001 fa2c 	bl	8006cde <USB_GetMode>
 8005886:	4603      	mov	r3, r0
 8005888:	2b00      	cmp	r3, #0
 800588a:	d005      	beq.n	8005898 <USB_SetCurrentMode+0x84>
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	2b31      	cmp	r3, #49	; 0x31
 8005890:	d9f0      	bls.n	8005874 <USB_SetCurrentMode+0x60>
 8005892:	e001      	b.n	8005898 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005894:	2301      	movs	r3, #1
 8005896:	e005      	b.n	80058a4 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	2b32      	cmp	r3, #50	; 0x32
 800589c:	d101      	bne.n	80058a2 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800589e:	2301      	movs	r3, #1
 80058a0:	e000      	b.n	80058a4 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80058a2:	2300      	movs	r3, #0
}
 80058a4:	4618      	mov	r0, r3
 80058a6:	3710      	adds	r7, #16
 80058a8:	46bd      	mov	sp, r7
 80058aa:	bd80      	pop	{r7, pc}

080058ac <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80058ac:	b084      	sub	sp, #16
 80058ae:	b580      	push	{r7, lr}
 80058b0:	b086      	sub	sp, #24
 80058b2:	af00      	add	r7, sp, #0
 80058b4:	6078      	str	r0, [r7, #4]
 80058b6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80058ba:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80058be:	2300      	movs	r3, #0
 80058c0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80058c6:	2300      	movs	r3, #0
 80058c8:	613b      	str	r3, [r7, #16]
 80058ca:	e009      	b.n	80058e0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80058cc:	687a      	ldr	r2, [r7, #4]
 80058ce:	693b      	ldr	r3, [r7, #16]
 80058d0:	3340      	adds	r3, #64	; 0x40
 80058d2:	009b      	lsls	r3, r3, #2
 80058d4:	4413      	add	r3, r2
 80058d6:	2200      	movs	r2, #0
 80058d8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80058da:	693b      	ldr	r3, [r7, #16]
 80058dc:	3301      	adds	r3, #1
 80058de:	613b      	str	r3, [r7, #16]
 80058e0:	693b      	ldr	r3, [r7, #16]
 80058e2:	2b0e      	cmp	r3, #14
 80058e4:	d9f2      	bls.n	80058cc <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80058e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d11c      	bne.n	8005926 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058f2:	685b      	ldr	r3, [r3, #4]
 80058f4:	68fa      	ldr	r2, [r7, #12]
 80058f6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80058fa:	f043 0302 	orr.w	r3, r3, #2
 80058fe:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005904:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005910:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800591c:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	639a      	str	r2, [r3, #56]	; 0x38
 8005924:	e00b      	b.n	800593e <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800592a:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005936:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005944:	461a      	mov	r2, r3
 8005946:	2300      	movs	r3, #0
 8005948:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005950:	4619      	mov	r1, r3
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005958:	461a      	mov	r2, r3
 800595a:	680b      	ldr	r3, [r1, #0]
 800595c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800595e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005960:	2b01      	cmp	r3, #1
 8005962:	d10c      	bne.n	800597e <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005964:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005966:	2b00      	cmp	r3, #0
 8005968:	d104      	bne.n	8005974 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800596a:	2100      	movs	r1, #0
 800596c:	6878      	ldr	r0, [r7, #4]
 800596e:	f000 f965 	bl	8005c3c <USB_SetDevSpeed>
 8005972:	e008      	b.n	8005986 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005974:	2101      	movs	r1, #1
 8005976:	6878      	ldr	r0, [r7, #4]
 8005978:	f000 f960 	bl	8005c3c <USB_SetDevSpeed>
 800597c:	e003      	b.n	8005986 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800597e:	2103      	movs	r1, #3
 8005980:	6878      	ldr	r0, [r7, #4]
 8005982:	f000 f95b 	bl	8005c3c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005986:	2110      	movs	r1, #16
 8005988:	6878      	ldr	r0, [r7, #4]
 800598a:	f000 f8f3 	bl	8005b74 <USB_FlushTxFifo>
 800598e:	4603      	mov	r3, r0
 8005990:	2b00      	cmp	r3, #0
 8005992:	d001      	beq.n	8005998 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8005994:	2301      	movs	r3, #1
 8005996:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005998:	6878      	ldr	r0, [r7, #4]
 800599a:	f000 f91f 	bl	8005bdc <USB_FlushRxFifo>
 800599e:	4603      	mov	r3, r0
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d001      	beq.n	80059a8 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 80059a4:	2301      	movs	r3, #1
 80059a6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80059ae:	461a      	mov	r2, r3
 80059b0:	2300      	movs	r3, #0
 80059b2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80059ba:	461a      	mov	r2, r3
 80059bc:	2300      	movs	r3, #0
 80059be:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80059c6:	461a      	mov	r2, r3
 80059c8:	2300      	movs	r3, #0
 80059ca:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80059cc:	2300      	movs	r3, #0
 80059ce:	613b      	str	r3, [r7, #16]
 80059d0:	e043      	b.n	8005a5a <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80059d2:	693b      	ldr	r3, [r7, #16]
 80059d4:	015a      	lsls	r2, r3, #5
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	4413      	add	r3, r2
 80059da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80059e4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80059e8:	d118      	bne.n	8005a1c <USB_DevInit+0x170>
    {
      if (i == 0U)
 80059ea:	693b      	ldr	r3, [r7, #16]
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d10a      	bne.n	8005a06 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80059f0:	693b      	ldr	r3, [r7, #16]
 80059f2:	015a      	lsls	r2, r3, #5
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	4413      	add	r3, r2
 80059f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059fc:	461a      	mov	r2, r3
 80059fe:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005a02:	6013      	str	r3, [r2, #0]
 8005a04:	e013      	b.n	8005a2e <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005a06:	693b      	ldr	r3, [r7, #16]
 8005a08:	015a      	lsls	r2, r3, #5
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	4413      	add	r3, r2
 8005a0e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a12:	461a      	mov	r2, r3
 8005a14:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005a18:	6013      	str	r3, [r2, #0]
 8005a1a:	e008      	b.n	8005a2e <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005a1c:	693b      	ldr	r3, [r7, #16]
 8005a1e:	015a      	lsls	r2, r3, #5
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	4413      	add	r3, r2
 8005a24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a28:	461a      	mov	r2, r3
 8005a2a:	2300      	movs	r3, #0
 8005a2c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005a2e:	693b      	ldr	r3, [r7, #16]
 8005a30:	015a      	lsls	r2, r3, #5
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	4413      	add	r3, r2
 8005a36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a3a:	461a      	mov	r2, r3
 8005a3c:	2300      	movs	r3, #0
 8005a3e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005a40:	693b      	ldr	r3, [r7, #16]
 8005a42:	015a      	lsls	r2, r3, #5
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	4413      	add	r3, r2
 8005a48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a4c:	461a      	mov	r2, r3
 8005a4e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005a52:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005a54:	693b      	ldr	r3, [r7, #16]
 8005a56:	3301      	adds	r3, #1
 8005a58:	613b      	str	r3, [r7, #16]
 8005a5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a5c:	693a      	ldr	r2, [r7, #16]
 8005a5e:	429a      	cmp	r2, r3
 8005a60:	d3b7      	bcc.n	80059d2 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005a62:	2300      	movs	r3, #0
 8005a64:	613b      	str	r3, [r7, #16]
 8005a66:	e043      	b.n	8005af0 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005a68:	693b      	ldr	r3, [r7, #16]
 8005a6a:	015a      	lsls	r2, r3, #5
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	4413      	add	r3, r2
 8005a70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005a7a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005a7e:	d118      	bne.n	8005ab2 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8005a80:	693b      	ldr	r3, [r7, #16]
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d10a      	bne.n	8005a9c <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005a86:	693b      	ldr	r3, [r7, #16]
 8005a88:	015a      	lsls	r2, r3, #5
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	4413      	add	r3, r2
 8005a8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a92:	461a      	mov	r2, r3
 8005a94:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005a98:	6013      	str	r3, [r2, #0]
 8005a9a:	e013      	b.n	8005ac4 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005a9c:	693b      	ldr	r3, [r7, #16]
 8005a9e:	015a      	lsls	r2, r3, #5
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	4413      	add	r3, r2
 8005aa4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005aa8:	461a      	mov	r2, r3
 8005aaa:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005aae:	6013      	str	r3, [r2, #0]
 8005ab0:	e008      	b.n	8005ac4 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005ab2:	693b      	ldr	r3, [r7, #16]
 8005ab4:	015a      	lsls	r2, r3, #5
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	4413      	add	r3, r2
 8005aba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005abe:	461a      	mov	r2, r3
 8005ac0:	2300      	movs	r3, #0
 8005ac2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005ac4:	693b      	ldr	r3, [r7, #16]
 8005ac6:	015a      	lsls	r2, r3, #5
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	4413      	add	r3, r2
 8005acc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ad0:	461a      	mov	r2, r3
 8005ad2:	2300      	movs	r3, #0
 8005ad4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005ad6:	693b      	ldr	r3, [r7, #16]
 8005ad8:	015a      	lsls	r2, r3, #5
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	4413      	add	r3, r2
 8005ade:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ae2:	461a      	mov	r2, r3
 8005ae4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005ae8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005aea:	693b      	ldr	r3, [r7, #16]
 8005aec:	3301      	adds	r3, #1
 8005aee:	613b      	str	r3, [r7, #16]
 8005af0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005af2:	693a      	ldr	r2, [r7, #16]
 8005af4:	429a      	cmp	r2, r3
 8005af6:	d3b7      	bcc.n	8005a68 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005afe:	691b      	ldr	r3, [r3, #16]
 8005b00:	68fa      	ldr	r2, [r7, #12]
 8005b02:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005b06:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005b0a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	2200      	movs	r2, #0
 8005b10:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005b18:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005b1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d105      	bne.n	8005b2c <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	699b      	ldr	r3, [r3, #24]
 8005b24:	f043 0210 	orr.w	r2, r3, #16
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	699a      	ldr	r2, [r3, #24]
 8005b30:	4b0f      	ldr	r3, [pc, #60]	; (8005b70 <USB_DevInit+0x2c4>)
 8005b32:	4313      	orrs	r3, r2
 8005b34:	687a      	ldr	r2, [r7, #4]
 8005b36:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005b38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d005      	beq.n	8005b4a <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	699b      	ldr	r3, [r3, #24]
 8005b42:	f043 0208 	orr.w	r2, r3, #8
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005b4a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005b4c:	2b01      	cmp	r3, #1
 8005b4e:	d107      	bne.n	8005b60 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	699b      	ldr	r3, [r3, #24]
 8005b54:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005b58:	f043 0304 	orr.w	r3, r3, #4
 8005b5c:	687a      	ldr	r2, [r7, #4]
 8005b5e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005b60:	7dfb      	ldrb	r3, [r7, #23]
}
 8005b62:	4618      	mov	r0, r3
 8005b64:	3718      	adds	r7, #24
 8005b66:	46bd      	mov	sp, r7
 8005b68:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005b6c:	b004      	add	sp, #16
 8005b6e:	4770      	bx	lr
 8005b70:	803c3800 	.word	0x803c3800

08005b74 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005b74:	b480      	push	{r7}
 8005b76:	b085      	sub	sp, #20
 8005b78:	af00      	add	r7, sp, #0
 8005b7a:	6078      	str	r0, [r7, #4]
 8005b7c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005b7e:	2300      	movs	r3, #0
 8005b80:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	3301      	adds	r3, #1
 8005b86:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	4a13      	ldr	r2, [pc, #76]	; (8005bd8 <USB_FlushTxFifo+0x64>)
 8005b8c:	4293      	cmp	r3, r2
 8005b8e:	d901      	bls.n	8005b94 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005b90:	2303      	movs	r3, #3
 8005b92:	e01b      	b.n	8005bcc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	691b      	ldr	r3, [r3, #16]
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	daf2      	bge.n	8005b82 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005b9c:	2300      	movs	r3, #0
 8005b9e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005ba0:	683b      	ldr	r3, [r7, #0]
 8005ba2:	019b      	lsls	r3, r3, #6
 8005ba4:	f043 0220 	orr.w	r2, r3, #32
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	3301      	adds	r3, #1
 8005bb0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	4a08      	ldr	r2, [pc, #32]	; (8005bd8 <USB_FlushTxFifo+0x64>)
 8005bb6:	4293      	cmp	r3, r2
 8005bb8:	d901      	bls.n	8005bbe <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005bba:	2303      	movs	r3, #3
 8005bbc:	e006      	b.n	8005bcc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	691b      	ldr	r3, [r3, #16]
 8005bc2:	f003 0320 	and.w	r3, r3, #32
 8005bc6:	2b20      	cmp	r3, #32
 8005bc8:	d0f0      	beq.n	8005bac <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005bca:	2300      	movs	r3, #0
}
 8005bcc:	4618      	mov	r0, r3
 8005bce:	3714      	adds	r7, #20
 8005bd0:	46bd      	mov	sp, r7
 8005bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd6:	4770      	bx	lr
 8005bd8:	00030d40 	.word	0x00030d40

08005bdc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005bdc:	b480      	push	{r7}
 8005bde:	b085      	sub	sp, #20
 8005be0:	af00      	add	r7, sp, #0
 8005be2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005be4:	2300      	movs	r3, #0
 8005be6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	3301      	adds	r3, #1
 8005bec:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	4a11      	ldr	r2, [pc, #68]	; (8005c38 <USB_FlushRxFifo+0x5c>)
 8005bf2:	4293      	cmp	r3, r2
 8005bf4:	d901      	bls.n	8005bfa <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005bf6:	2303      	movs	r3, #3
 8005bf8:	e018      	b.n	8005c2c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	691b      	ldr	r3, [r3, #16]
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	daf2      	bge.n	8005be8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005c02:	2300      	movs	r3, #0
 8005c04:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	2210      	movs	r2, #16
 8005c0a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	3301      	adds	r3, #1
 8005c10:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	4a08      	ldr	r2, [pc, #32]	; (8005c38 <USB_FlushRxFifo+0x5c>)
 8005c16:	4293      	cmp	r3, r2
 8005c18:	d901      	bls.n	8005c1e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005c1a:	2303      	movs	r3, #3
 8005c1c:	e006      	b.n	8005c2c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	691b      	ldr	r3, [r3, #16]
 8005c22:	f003 0310 	and.w	r3, r3, #16
 8005c26:	2b10      	cmp	r3, #16
 8005c28:	d0f0      	beq.n	8005c0c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005c2a:	2300      	movs	r3, #0
}
 8005c2c:	4618      	mov	r0, r3
 8005c2e:	3714      	adds	r7, #20
 8005c30:	46bd      	mov	sp, r7
 8005c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c36:	4770      	bx	lr
 8005c38:	00030d40 	.word	0x00030d40

08005c3c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005c3c:	b480      	push	{r7}
 8005c3e:	b085      	sub	sp, #20
 8005c40:	af00      	add	r7, sp, #0
 8005c42:	6078      	str	r0, [r7, #4]
 8005c44:	460b      	mov	r3, r1
 8005c46:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c52:	681a      	ldr	r2, [r3, #0]
 8005c54:	78fb      	ldrb	r3, [r7, #3]
 8005c56:	68f9      	ldr	r1, [r7, #12]
 8005c58:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005c5c:	4313      	orrs	r3, r2
 8005c5e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005c60:	2300      	movs	r3, #0
}
 8005c62:	4618      	mov	r0, r3
 8005c64:	3714      	adds	r7, #20
 8005c66:	46bd      	mov	sp, r7
 8005c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c6c:	4770      	bx	lr

08005c6e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8005c6e:	b480      	push	{r7}
 8005c70:	b087      	sub	sp, #28
 8005c72:	af00      	add	r7, sp, #0
 8005c74:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8005c7a:	693b      	ldr	r3, [r7, #16]
 8005c7c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c80:	689b      	ldr	r3, [r3, #8]
 8005c82:	f003 0306 	and.w	r3, r3, #6
 8005c86:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d102      	bne.n	8005c94 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8005c8e:	2300      	movs	r3, #0
 8005c90:	75fb      	strb	r3, [r7, #23]
 8005c92:	e00a      	b.n	8005caa <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	2b02      	cmp	r3, #2
 8005c98:	d002      	beq.n	8005ca0 <USB_GetDevSpeed+0x32>
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	2b06      	cmp	r3, #6
 8005c9e:	d102      	bne.n	8005ca6 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8005ca0:	2302      	movs	r3, #2
 8005ca2:	75fb      	strb	r3, [r7, #23]
 8005ca4:	e001      	b.n	8005caa <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8005ca6:	230f      	movs	r3, #15
 8005ca8:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8005caa:	7dfb      	ldrb	r3, [r7, #23]
}
 8005cac:	4618      	mov	r0, r3
 8005cae:	371c      	adds	r7, #28
 8005cb0:	46bd      	mov	sp, r7
 8005cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb6:	4770      	bx	lr

08005cb8 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005cb8:	b480      	push	{r7}
 8005cba:	b085      	sub	sp, #20
 8005cbc:	af00      	add	r7, sp, #0
 8005cbe:	6078      	str	r0, [r7, #4]
 8005cc0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005cc6:	683b      	ldr	r3, [r7, #0]
 8005cc8:	781b      	ldrb	r3, [r3, #0]
 8005cca:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005ccc:	683b      	ldr	r3, [r7, #0]
 8005cce:	785b      	ldrb	r3, [r3, #1]
 8005cd0:	2b01      	cmp	r3, #1
 8005cd2:	d13a      	bne.n	8005d4a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005cda:	69da      	ldr	r2, [r3, #28]
 8005cdc:	683b      	ldr	r3, [r7, #0]
 8005cde:	781b      	ldrb	r3, [r3, #0]
 8005ce0:	f003 030f 	and.w	r3, r3, #15
 8005ce4:	2101      	movs	r1, #1
 8005ce6:	fa01 f303 	lsl.w	r3, r1, r3
 8005cea:	b29b      	uxth	r3, r3
 8005cec:	68f9      	ldr	r1, [r7, #12]
 8005cee:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005cf2:	4313      	orrs	r3, r2
 8005cf4:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8005cf6:	68bb      	ldr	r3, [r7, #8]
 8005cf8:	015a      	lsls	r2, r3, #5
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	4413      	add	r3, r2
 8005cfe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d155      	bne.n	8005db8 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005d0c:	68bb      	ldr	r3, [r7, #8]
 8005d0e:	015a      	lsls	r2, r3, #5
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	4413      	add	r3, r2
 8005d14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d18:	681a      	ldr	r2, [r3, #0]
 8005d1a:	683b      	ldr	r3, [r7, #0]
 8005d1c:	68db      	ldr	r3, [r3, #12]
 8005d1e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005d22:	683b      	ldr	r3, [r7, #0]
 8005d24:	791b      	ldrb	r3, [r3, #4]
 8005d26:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005d28:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005d2a:	68bb      	ldr	r3, [r7, #8]
 8005d2c:	059b      	lsls	r3, r3, #22
 8005d2e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005d30:	4313      	orrs	r3, r2
 8005d32:	68ba      	ldr	r2, [r7, #8]
 8005d34:	0151      	lsls	r1, r2, #5
 8005d36:	68fa      	ldr	r2, [r7, #12]
 8005d38:	440a      	add	r2, r1
 8005d3a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d3e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005d42:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005d46:	6013      	str	r3, [r2, #0]
 8005d48:	e036      	b.n	8005db8 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d50:	69da      	ldr	r2, [r3, #28]
 8005d52:	683b      	ldr	r3, [r7, #0]
 8005d54:	781b      	ldrb	r3, [r3, #0]
 8005d56:	f003 030f 	and.w	r3, r3, #15
 8005d5a:	2101      	movs	r1, #1
 8005d5c:	fa01 f303 	lsl.w	r3, r1, r3
 8005d60:	041b      	lsls	r3, r3, #16
 8005d62:	68f9      	ldr	r1, [r7, #12]
 8005d64:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005d68:	4313      	orrs	r3, r2
 8005d6a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8005d6c:	68bb      	ldr	r3, [r7, #8]
 8005d6e:	015a      	lsls	r2, r3, #5
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	4413      	add	r3, r2
 8005d74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d11a      	bne.n	8005db8 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005d82:	68bb      	ldr	r3, [r7, #8]
 8005d84:	015a      	lsls	r2, r3, #5
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	4413      	add	r3, r2
 8005d8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d8e:	681a      	ldr	r2, [r3, #0]
 8005d90:	683b      	ldr	r3, [r7, #0]
 8005d92:	68db      	ldr	r3, [r3, #12]
 8005d94:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8005d98:	683b      	ldr	r3, [r7, #0]
 8005d9a:	791b      	ldrb	r3, [r3, #4]
 8005d9c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005d9e:	430b      	orrs	r3, r1
 8005da0:	4313      	orrs	r3, r2
 8005da2:	68ba      	ldr	r2, [r7, #8]
 8005da4:	0151      	lsls	r1, r2, #5
 8005da6:	68fa      	ldr	r2, [r7, #12]
 8005da8:	440a      	add	r2, r1
 8005daa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005dae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005db2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005db6:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8005db8:	2300      	movs	r3, #0
}
 8005dba:	4618      	mov	r0, r3
 8005dbc:	3714      	adds	r7, #20
 8005dbe:	46bd      	mov	sp, r7
 8005dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc4:	4770      	bx	lr
	...

08005dc8 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005dc8:	b480      	push	{r7}
 8005dca:	b085      	sub	sp, #20
 8005dcc:	af00      	add	r7, sp, #0
 8005dce:	6078      	str	r0, [r7, #4]
 8005dd0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005dd6:	683b      	ldr	r3, [r7, #0]
 8005dd8:	781b      	ldrb	r3, [r3, #0]
 8005dda:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8005ddc:	683b      	ldr	r3, [r7, #0]
 8005dde:	785b      	ldrb	r3, [r3, #1]
 8005de0:	2b01      	cmp	r3, #1
 8005de2:	d161      	bne.n	8005ea8 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005de4:	68bb      	ldr	r3, [r7, #8]
 8005de6:	015a      	lsls	r2, r3, #5
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	4413      	add	r3, r2
 8005dec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005df6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005dfa:	d11f      	bne.n	8005e3c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8005dfc:	68bb      	ldr	r3, [r7, #8]
 8005dfe:	015a      	lsls	r2, r3, #5
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	4413      	add	r3, r2
 8005e04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	68ba      	ldr	r2, [r7, #8]
 8005e0c:	0151      	lsls	r1, r2, #5
 8005e0e:	68fa      	ldr	r2, [r7, #12]
 8005e10:	440a      	add	r2, r1
 8005e12:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e16:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005e1a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8005e1c:	68bb      	ldr	r3, [r7, #8]
 8005e1e:	015a      	lsls	r2, r3, #5
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	4413      	add	r3, r2
 8005e24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	68ba      	ldr	r2, [r7, #8]
 8005e2c:	0151      	lsls	r1, r2, #5
 8005e2e:	68fa      	ldr	r2, [r7, #12]
 8005e30:	440a      	add	r2, r1
 8005e32:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e36:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005e3a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e42:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005e44:	683b      	ldr	r3, [r7, #0]
 8005e46:	781b      	ldrb	r3, [r3, #0]
 8005e48:	f003 030f 	and.w	r3, r3, #15
 8005e4c:	2101      	movs	r1, #1
 8005e4e:	fa01 f303 	lsl.w	r3, r1, r3
 8005e52:	b29b      	uxth	r3, r3
 8005e54:	43db      	mvns	r3, r3
 8005e56:	68f9      	ldr	r1, [r7, #12]
 8005e58:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005e5c:	4013      	ands	r3, r2
 8005e5e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e66:	69da      	ldr	r2, [r3, #28]
 8005e68:	683b      	ldr	r3, [r7, #0]
 8005e6a:	781b      	ldrb	r3, [r3, #0]
 8005e6c:	f003 030f 	and.w	r3, r3, #15
 8005e70:	2101      	movs	r1, #1
 8005e72:	fa01 f303 	lsl.w	r3, r1, r3
 8005e76:	b29b      	uxth	r3, r3
 8005e78:	43db      	mvns	r3, r3
 8005e7a:	68f9      	ldr	r1, [r7, #12]
 8005e7c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005e80:	4013      	ands	r3, r2
 8005e82:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8005e84:	68bb      	ldr	r3, [r7, #8]
 8005e86:	015a      	lsls	r2, r3, #5
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	4413      	add	r3, r2
 8005e8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e90:	681a      	ldr	r2, [r3, #0]
 8005e92:	68bb      	ldr	r3, [r7, #8]
 8005e94:	0159      	lsls	r1, r3, #5
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	440b      	add	r3, r1
 8005e9a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e9e:	4619      	mov	r1, r3
 8005ea0:	4b35      	ldr	r3, [pc, #212]	; (8005f78 <USB_DeactivateEndpoint+0x1b0>)
 8005ea2:	4013      	ands	r3, r2
 8005ea4:	600b      	str	r3, [r1, #0]
 8005ea6:	e060      	b.n	8005f6a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005ea8:	68bb      	ldr	r3, [r7, #8]
 8005eaa:	015a      	lsls	r2, r3, #5
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	4413      	add	r3, r2
 8005eb0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005eba:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005ebe:	d11f      	bne.n	8005f00 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005ec0:	68bb      	ldr	r3, [r7, #8]
 8005ec2:	015a      	lsls	r2, r3, #5
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	4413      	add	r3, r2
 8005ec8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	68ba      	ldr	r2, [r7, #8]
 8005ed0:	0151      	lsls	r1, r2, #5
 8005ed2:	68fa      	ldr	r2, [r7, #12]
 8005ed4:	440a      	add	r2, r1
 8005ed6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005eda:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005ede:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8005ee0:	68bb      	ldr	r3, [r7, #8]
 8005ee2:	015a      	lsls	r2, r3, #5
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	4413      	add	r3, r2
 8005ee8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	68ba      	ldr	r2, [r7, #8]
 8005ef0:	0151      	lsls	r1, r2, #5
 8005ef2:	68fa      	ldr	r2, [r7, #12]
 8005ef4:	440a      	add	r2, r1
 8005ef6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005efa:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005efe:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f06:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005f08:	683b      	ldr	r3, [r7, #0]
 8005f0a:	781b      	ldrb	r3, [r3, #0]
 8005f0c:	f003 030f 	and.w	r3, r3, #15
 8005f10:	2101      	movs	r1, #1
 8005f12:	fa01 f303 	lsl.w	r3, r1, r3
 8005f16:	041b      	lsls	r3, r3, #16
 8005f18:	43db      	mvns	r3, r3
 8005f1a:	68f9      	ldr	r1, [r7, #12]
 8005f1c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005f20:	4013      	ands	r3, r2
 8005f22:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f2a:	69da      	ldr	r2, [r3, #28]
 8005f2c:	683b      	ldr	r3, [r7, #0]
 8005f2e:	781b      	ldrb	r3, [r3, #0]
 8005f30:	f003 030f 	and.w	r3, r3, #15
 8005f34:	2101      	movs	r1, #1
 8005f36:	fa01 f303 	lsl.w	r3, r1, r3
 8005f3a:	041b      	lsls	r3, r3, #16
 8005f3c:	43db      	mvns	r3, r3
 8005f3e:	68f9      	ldr	r1, [r7, #12]
 8005f40:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005f44:	4013      	ands	r3, r2
 8005f46:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8005f48:	68bb      	ldr	r3, [r7, #8]
 8005f4a:	015a      	lsls	r2, r3, #5
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	4413      	add	r3, r2
 8005f50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f54:	681a      	ldr	r2, [r3, #0]
 8005f56:	68bb      	ldr	r3, [r7, #8]
 8005f58:	0159      	lsls	r1, r3, #5
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	440b      	add	r3, r1
 8005f5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f62:	4619      	mov	r1, r3
 8005f64:	4b05      	ldr	r3, [pc, #20]	; (8005f7c <USB_DeactivateEndpoint+0x1b4>)
 8005f66:	4013      	ands	r3, r2
 8005f68:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8005f6a:	2300      	movs	r3, #0
}
 8005f6c:	4618      	mov	r0, r3
 8005f6e:	3714      	adds	r7, #20
 8005f70:	46bd      	mov	sp, r7
 8005f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f76:	4770      	bx	lr
 8005f78:	ec337800 	.word	0xec337800
 8005f7c:	eff37800 	.word	0xeff37800

08005f80 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005f80:	b580      	push	{r7, lr}
 8005f82:	b08a      	sub	sp, #40	; 0x28
 8005f84:	af02      	add	r7, sp, #8
 8005f86:	60f8      	str	r0, [r7, #12]
 8005f88:	60b9      	str	r1, [r7, #8]
 8005f8a:	4613      	mov	r3, r2
 8005f8c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8005f92:	68bb      	ldr	r3, [r7, #8]
 8005f94:	781b      	ldrb	r3, [r3, #0]
 8005f96:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005f98:	68bb      	ldr	r3, [r7, #8]
 8005f9a:	785b      	ldrb	r3, [r3, #1]
 8005f9c:	2b01      	cmp	r3, #1
 8005f9e:	f040 815c 	bne.w	800625a <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005fa2:	68bb      	ldr	r3, [r7, #8]
 8005fa4:	699b      	ldr	r3, [r3, #24]
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d132      	bne.n	8006010 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005faa:	69bb      	ldr	r3, [r7, #24]
 8005fac:	015a      	lsls	r2, r3, #5
 8005fae:	69fb      	ldr	r3, [r7, #28]
 8005fb0:	4413      	add	r3, r2
 8005fb2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005fb6:	691b      	ldr	r3, [r3, #16]
 8005fb8:	69ba      	ldr	r2, [r7, #24]
 8005fba:	0151      	lsls	r1, r2, #5
 8005fbc:	69fa      	ldr	r2, [r7, #28]
 8005fbe:	440a      	add	r2, r1
 8005fc0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005fc4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005fc8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005fcc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005fce:	69bb      	ldr	r3, [r7, #24]
 8005fd0:	015a      	lsls	r2, r3, #5
 8005fd2:	69fb      	ldr	r3, [r7, #28]
 8005fd4:	4413      	add	r3, r2
 8005fd6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005fda:	691b      	ldr	r3, [r3, #16]
 8005fdc:	69ba      	ldr	r2, [r7, #24]
 8005fde:	0151      	lsls	r1, r2, #5
 8005fe0:	69fa      	ldr	r2, [r7, #28]
 8005fe2:	440a      	add	r2, r1
 8005fe4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005fe8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005fec:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005fee:	69bb      	ldr	r3, [r7, #24]
 8005ff0:	015a      	lsls	r2, r3, #5
 8005ff2:	69fb      	ldr	r3, [r7, #28]
 8005ff4:	4413      	add	r3, r2
 8005ff6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ffa:	691b      	ldr	r3, [r3, #16]
 8005ffc:	69ba      	ldr	r2, [r7, #24]
 8005ffe:	0151      	lsls	r1, r2, #5
 8006000:	69fa      	ldr	r2, [r7, #28]
 8006002:	440a      	add	r2, r1
 8006004:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006008:	0cdb      	lsrs	r3, r3, #19
 800600a:	04db      	lsls	r3, r3, #19
 800600c:	6113      	str	r3, [r2, #16]
 800600e:	e074      	b.n	80060fa <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006010:	69bb      	ldr	r3, [r7, #24]
 8006012:	015a      	lsls	r2, r3, #5
 8006014:	69fb      	ldr	r3, [r7, #28]
 8006016:	4413      	add	r3, r2
 8006018:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800601c:	691b      	ldr	r3, [r3, #16]
 800601e:	69ba      	ldr	r2, [r7, #24]
 8006020:	0151      	lsls	r1, r2, #5
 8006022:	69fa      	ldr	r2, [r7, #28]
 8006024:	440a      	add	r2, r1
 8006026:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800602a:	0cdb      	lsrs	r3, r3, #19
 800602c:	04db      	lsls	r3, r3, #19
 800602e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006030:	69bb      	ldr	r3, [r7, #24]
 8006032:	015a      	lsls	r2, r3, #5
 8006034:	69fb      	ldr	r3, [r7, #28]
 8006036:	4413      	add	r3, r2
 8006038:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800603c:	691b      	ldr	r3, [r3, #16]
 800603e:	69ba      	ldr	r2, [r7, #24]
 8006040:	0151      	lsls	r1, r2, #5
 8006042:	69fa      	ldr	r2, [r7, #28]
 8006044:	440a      	add	r2, r1
 8006046:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800604a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800604e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006052:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8006054:	69bb      	ldr	r3, [r7, #24]
 8006056:	015a      	lsls	r2, r3, #5
 8006058:	69fb      	ldr	r3, [r7, #28]
 800605a:	4413      	add	r3, r2
 800605c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006060:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8006062:	68bb      	ldr	r3, [r7, #8]
 8006064:	6999      	ldr	r1, [r3, #24]
 8006066:	68bb      	ldr	r3, [r7, #8]
 8006068:	68db      	ldr	r3, [r3, #12]
 800606a:	440b      	add	r3, r1
 800606c:	1e59      	subs	r1, r3, #1
 800606e:	68bb      	ldr	r3, [r7, #8]
 8006070:	68db      	ldr	r3, [r3, #12]
 8006072:	fbb1 f3f3 	udiv	r3, r1, r3
 8006076:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8006078:	4b9d      	ldr	r3, [pc, #628]	; (80062f0 <USB_EPStartXfer+0x370>)
 800607a:	400b      	ands	r3, r1
 800607c:	69b9      	ldr	r1, [r7, #24]
 800607e:	0148      	lsls	r0, r1, #5
 8006080:	69f9      	ldr	r1, [r7, #28]
 8006082:	4401      	add	r1, r0
 8006084:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006088:	4313      	orrs	r3, r2
 800608a:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800608c:	69bb      	ldr	r3, [r7, #24]
 800608e:	015a      	lsls	r2, r3, #5
 8006090:	69fb      	ldr	r3, [r7, #28]
 8006092:	4413      	add	r3, r2
 8006094:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006098:	691a      	ldr	r2, [r3, #16]
 800609a:	68bb      	ldr	r3, [r7, #8]
 800609c:	699b      	ldr	r3, [r3, #24]
 800609e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80060a2:	69b9      	ldr	r1, [r7, #24]
 80060a4:	0148      	lsls	r0, r1, #5
 80060a6:	69f9      	ldr	r1, [r7, #28]
 80060a8:	4401      	add	r1, r0
 80060aa:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80060ae:	4313      	orrs	r3, r2
 80060b0:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80060b2:	68bb      	ldr	r3, [r7, #8]
 80060b4:	791b      	ldrb	r3, [r3, #4]
 80060b6:	2b01      	cmp	r3, #1
 80060b8:	d11f      	bne.n	80060fa <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80060ba:	69bb      	ldr	r3, [r7, #24]
 80060bc:	015a      	lsls	r2, r3, #5
 80060be:	69fb      	ldr	r3, [r7, #28]
 80060c0:	4413      	add	r3, r2
 80060c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060c6:	691b      	ldr	r3, [r3, #16]
 80060c8:	69ba      	ldr	r2, [r7, #24]
 80060ca:	0151      	lsls	r1, r2, #5
 80060cc:	69fa      	ldr	r2, [r7, #28]
 80060ce:	440a      	add	r2, r1
 80060d0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80060d4:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80060d8:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80060da:	69bb      	ldr	r3, [r7, #24]
 80060dc:	015a      	lsls	r2, r3, #5
 80060de:	69fb      	ldr	r3, [r7, #28]
 80060e0:	4413      	add	r3, r2
 80060e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060e6:	691b      	ldr	r3, [r3, #16]
 80060e8:	69ba      	ldr	r2, [r7, #24]
 80060ea:	0151      	lsls	r1, r2, #5
 80060ec:	69fa      	ldr	r2, [r7, #28]
 80060ee:	440a      	add	r2, r1
 80060f0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80060f4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80060f8:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80060fa:	79fb      	ldrb	r3, [r7, #7]
 80060fc:	2b01      	cmp	r3, #1
 80060fe:	d14b      	bne.n	8006198 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006100:	68bb      	ldr	r3, [r7, #8]
 8006102:	695b      	ldr	r3, [r3, #20]
 8006104:	2b00      	cmp	r3, #0
 8006106:	d009      	beq.n	800611c <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006108:	69bb      	ldr	r3, [r7, #24]
 800610a:	015a      	lsls	r2, r3, #5
 800610c:	69fb      	ldr	r3, [r7, #28]
 800610e:	4413      	add	r3, r2
 8006110:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006114:	461a      	mov	r2, r3
 8006116:	68bb      	ldr	r3, [r7, #8]
 8006118:	695b      	ldr	r3, [r3, #20]
 800611a:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800611c:	68bb      	ldr	r3, [r7, #8]
 800611e:	791b      	ldrb	r3, [r3, #4]
 8006120:	2b01      	cmp	r3, #1
 8006122:	d128      	bne.n	8006176 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006124:	69fb      	ldr	r3, [r7, #28]
 8006126:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800612a:	689b      	ldr	r3, [r3, #8]
 800612c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006130:	2b00      	cmp	r3, #0
 8006132:	d110      	bne.n	8006156 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006134:	69bb      	ldr	r3, [r7, #24]
 8006136:	015a      	lsls	r2, r3, #5
 8006138:	69fb      	ldr	r3, [r7, #28]
 800613a:	4413      	add	r3, r2
 800613c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	69ba      	ldr	r2, [r7, #24]
 8006144:	0151      	lsls	r1, r2, #5
 8006146:	69fa      	ldr	r2, [r7, #28]
 8006148:	440a      	add	r2, r1
 800614a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800614e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006152:	6013      	str	r3, [r2, #0]
 8006154:	e00f      	b.n	8006176 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006156:	69bb      	ldr	r3, [r7, #24]
 8006158:	015a      	lsls	r2, r3, #5
 800615a:	69fb      	ldr	r3, [r7, #28]
 800615c:	4413      	add	r3, r2
 800615e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	69ba      	ldr	r2, [r7, #24]
 8006166:	0151      	lsls	r1, r2, #5
 8006168:	69fa      	ldr	r2, [r7, #28]
 800616a:	440a      	add	r2, r1
 800616c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006170:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006174:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006176:	69bb      	ldr	r3, [r7, #24]
 8006178:	015a      	lsls	r2, r3, #5
 800617a:	69fb      	ldr	r3, [r7, #28]
 800617c:	4413      	add	r3, r2
 800617e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	69ba      	ldr	r2, [r7, #24]
 8006186:	0151      	lsls	r1, r2, #5
 8006188:	69fa      	ldr	r2, [r7, #28]
 800618a:	440a      	add	r2, r1
 800618c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006190:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006194:	6013      	str	r3, [r2, #0]
 8006196:	e133      	b.n	8006400 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006198:	69bb      	ldr	r3, [r7, #24]
 800619a:	015a      	lsls	r2, r3, #5
 800619c:	69fb      	ldr	r3, [r7, #28]
 800619e:	4413      	add	r3, r2
 80061a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	69ba      	ldr	r2, [r7, #24]
 80061a8:	0151      	lsls	r1, r2, #5
 80061aa:	69fa      	ldr	r2, [r7, #28]
 80061ac:	440a      	add	r2, r1
 80061ae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80061b2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80061b6:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80061b8:	68bb      	ldr	r3, [r7, #8]
 80061ba:	791b      	ldrb	r3, [r3, #4]
 80061bc:	2b01      	cmp	r3, #1
 80061be:	d015      	beq.n	80061ec <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80061c0:	68bb      	ldr	r3, [r7, #8]
 80061c2:	699b      	ldr	r3, [r3, #24]
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	f000 811b 	beq.w	8006400 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80061ca:	69fb      	ldr	r3, [r7, #28]
 80061cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80061d0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80061d2:	68bb      	ldr	r3, [r7, #8]
 80061d4:	781b      	ldrb	r3, [r3, #0]
 80061d6:	f003 030f 	and.w	r3, r3, #15
 80061da:	2101      	movs	r1, #1
 80061dc:	fa01 f303 	lsl.w	r3, r1, r3
 80061e0:	69f9      	ldr	r1, [r7, #28]
 80061e2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80061e6:	4313      	orrs	r3, r2
 80061e8:	634b      	str	r3, [r1, #52]	; 0x34
 80061ea:	e109      	b.n	8006400 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80061ec:	69fb      	ldr	r3, [r7, #28]
 80061ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80061f2:	689b      	ldr	r3, [r3, #8]
 80061f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d110      	bne.n	800621e <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80061fc:	69bb      	ldr	r3, [r7, #24]
 80061fe:	015a      	lsls	r2, r3, #5
 8006200:	69fb      	ldr	r3, [r7, #28]
 8006202:	4413      	add	r3, r2
 8006204:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	69ba      	ldr	r2, [r7, #24]
 800620c:	0151      	lsls	r1, r2, #5
 800620e:	69fa      	ldr	r2, [r7, #28]
 8006210:	440a      	add	r2, r1
 8006212:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006216:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800621a:	6013      	str	r3, [r2, #0]
 800621c:	e00f      	b.n	800623e <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800621e:	69bb      	ldr	r3, [r7, #24]
 8006220:	015a      	lsls	r2, r3, #5
 8006222:	69fb      	ldr	r3, [r7, #28]
 8006224:	4413      	add	r3, r2
 8006226:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	69ba      	ldr	r2, [r7, #24]
 800622e:	0151      	lsls	r1, r2, #5
 8006230:	69fa      	ldr	r2, [r7, #28]
 8006232:	440a      	add	r2, r1
 8006234:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006238:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800623c:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800623e:	68bb      	ldr	r3, [r7, #8]
 8006240:	6919      	ldr	r1, [r3, #16]
 8006242:	68bb      	ldr	r3, [r7, #8]
 8006244:	781a      	ldrb	r2, [r3, #0]
 8006246:	68bb      	ldr	r3, [r7, #8]
 8006248:	699b      	ldr	r3, [r3, #24]
 800624a:	b298      	uxth	r0, r3
 800624c:	79fb      	ldrb	r3, [r7, #7]
 800624e:	9300      	str	r3, [sp, #0]
 8006250:	4603      	mov	r3, r0
 8006252:	68f8      	ldr	r0, [r7, #12]
 8006254:	f000 fade 	bl	8006814 <USB_WritePacket>
 8006258:	e0d2      	b.n	8006400 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800625a:	69bb      	ldr	r3, [r7, #24]
 800625c:	015a      	lsls	r2, r3, #5
 800625e:	69fb      	ldr	r3, [r7, #28]
 8006260:	4413      	add	r3, r2
 8006262:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006266:	691b      	ldr	r3, [r3, #16]
 8006268:	69ba      	ldr	r2, [r7, #24]
 800626a:	0151      	lsls	r1, r2, #5
 800626c:	69fa      	ldr	r2, [r7, #28]
 800626e:	440a      	add	r2, r1
 8006270:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006274:	0cdb      	lsrs	r3, r3, #19
 8006276:	04db      	lsls	r3, r3, #19
 8006278:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800627a:	69bb      	ldr	r3, [r7, #24]
 800627c:	015a      	lsls	r2, r3, #5
 800627e:	69fb      	ldr	r3, [r7, #28]
 8006280:	4413      	add	r3, r2
 8006282:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006286:	691b      	ldr	r3, [r3, #16]
 8006288:	69ba      	ldr	r2, [r7, #24]
 800628a:	0151      	lsls	r1, r2, #5
 800628c:	69fa      	ldr	r2, [r7, #28]
 800628e:	440a      	add	r2, r1
 8006290:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006294:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006298:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800629c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800629e:	68bb      	ldr	r3, [r7, #8]
 80062a0:	699b      	ldr	r3, [r3, #24]
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d126      	bne.n	80062f4 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80062a6:	69bb      	ldr	r3, [r7, #24]
 80062a8:	015a      	lsls	r2, r3, #5
 80062aa:	69fb      	ldr	r3, [r7, #28]
 80062ac:	4413      	add	r3, r2
 80062ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062b2:	691a      	ldr	r2, [r3, #16]
 80062b4:	68bb      	ldr	r3, [r7, #8]
 80062b6:	68db      	ldr	r3, [r3, #12]
 80062b8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80062bc:	69b9      	ldr	r1, [r7, #24]
 80062be:	0148      	lsls	r0, r1, #5
 80062c0:	69f9      	ldr	r1, [r7, #28]
 80062c2:	4401      	add	r1, r0
 80062c4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80062c8:	4313      	orrs	r3, r2
 80062ca:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80062cc:	69bb      	ldr	r3, [r7, #24]
 80062ce:	015a      	lsls	r2, r3, #5
 80062d0:	69fb      	ldr	r3, [r7, #28]
 80062d2:	4413      	add	r3, r2
 80062d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062d8:	691b      	ldr	r3, [r3, #16]
 80062da:	69ba      	ldr	r2, [r7, #24]
 80062dc:	0151      	lsls	r1, r2, #5
 80062de:	69fa      	ldr	r2, [r7, #28]
 80062e0:	440a      	add	r2, r1
 80062e2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80062e6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80062ea:	6113      	str	r3, [r2, #16]
 80062ec:	e03a      	b.n	8006364 <USB_EPStartXfer+0x3e4>
 80062ee:	bf00      	nop
 80062f0:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80062f4:	68bb      	ldr	r3, [r7, #8]
 80062f6:	699a      	ldr	r2, [r3, #24]
 80062f8:	68bb      	ldr	r3, [r7, #8]
 80062fa:	68db      	ldr	r3, [r3, #12]
 80062fc:	4413      	add	r3, r2
 80062fe:	1e5a      	subs	r2, r3, #1
 8006300:	68bb      	ldr	r3, [r7, #8]
 8006302:	68db      	ldr	r3, [r3, #12]
 8006304:	fbb2 f3f3 	udiv	r3, r2, r3
 8006308:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 800630a:	68bb      	ldr	r3, [r7, #8]
 800630c:	68db      	ldr	r3, [r3, #12]
 800630e:	8afa      	ldrh	r2, [r7, #22]
 8006310:	fb03 f202 	mul.w	r2, r3, r2
 8006314:	68bb      	ldr	r3, [r7, #8]
 8006316:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8006318:	69bb      	ldr	r3, [r7, #24]
 800631a:	015a      	lsls	r2, r3, #5
 800631c:	69fb      	ldr	r3, [r7, #28]
 800631e:	4413      	add	r3, r2
 8006320:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006324:	691a      	ldr	r2, [r3, #16]
 8006326:	8afb      	ldrh	r3, [r7, #22]
 8006328:	04d9      	lsls	r1, r3, #19
 800632a:	4b38      	ldr	r3, [pc, #224]	; (800640c <USB_EPStartXfer+0x48c>)
 800632c:	400b      	ands	r3, r1
 800632e:	69b9      	ldr	r1, [r7, #24]
 8006330:	0148      	lsls	r0, r1, #5
 8006332:	69f9      	ldr	r1, [r7, #28]
 8006334:	4401      	add	r1, r0
 8006336:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800633a:	4313      	orrs	r3, r2
 800633c:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800633e:	69bb      	ldr	r3, [r7, #24]
 8006340:	015a      	lsls	r2, r3, #5
 8006342:	69fb      	ldr	r3, [r7, #28]
 8006344:	4413      	add	r3, r2
 8006346:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800634a:	691a      	ldr	r2, [r3, #16]
 800634c:	68bb      	ldr	r3, [r7, #8]
 800634e:	69db      	ldr	r3, [r3, #28]
 8006350:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006354:	69b9      	ldr	r1, [r7, #24]
 8006356:	0148      	lsls	r0, r1, #5
 8006358:	69f9      	ldr	r1, [r7, #28]
 800635a:	4401      	add	r1, r0
 800635c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006360:	4313      	orrs	r3, r2
 8006362:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8006364:	79fb      	ldrb	r3, [r7, #7]
 8006366:	2b01      	cmp	r3, #1
 8006368:	d10d      	bne.n	8006386 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800636a:	68bb      	ldr	r3, [r7, #8]
 800636c:	691b      	ldr	r3, [r3, #16]
 800636e:	2b00      	cmp	r3, #0
 8006370:	d009      	beq.n	8006386 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8006372:	68bb      	ldr	r3, [r7, #8]
 8006374:	6919      	ldr	r1, [r3, #16]
 8006376:	69bb      	ldr	r3, [r7, #24]
 8006378:	015a      	lsls	r2, r3, #5
 800637a:	69fb      	ldr	r3, [r7, #28]
 800637c:	4413      	add	r3, r2
 800637e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006382:	460a      	mov	r2, r1
 8006384:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8006386:	68bb      	ldr	r3, [r7, #8]
 8006388:	791b      	ldrb	r3, [r3, #4]
 800638a:	2b01      	cmp	r3, #1
 800638c:	d128      	bne.n	80063e0 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800638e:	69fb      	ldr	r3, [r7, #28]
 8006390:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006394:	689b      	ldr	r3, [r3, #8]
 8006396:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800639a:	2b00      	cmp	r3, #0
 800639c:	d110      	bne.n	80063c0 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800639e:	69bb      	ldr	r3, [r7, #24]
 80063a0:	015a      	lsls	r2, r3, #5
 80063a2:	69fb      	ldr	r3, [r7, #28]
 80063a4:	4413      	add	r3, r2
 80063a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	69ba      	ldr	r2, [r7, #24]
 80063ae:	0151      	lsls	r1, r2, #5
 80063b0:	69fa      	ldr	r2, [r7, #28]
 80063b2:	440a      	add	r2, r1
 80063b4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80063b8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80063bc:	6013      	str	r3, [r2, #0]
 80063be:	e00f      	b.n	80063e0 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80063c0:	69bb      	ldr	r3, [r7, #24]
 80063c2:	015a      	lsls	r2, r3, #5
 80063c4:	69fb      	ldr	r3, [r7, #28]
 80063c6:	4413      	add	r3, r2
 80063c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	69ba      	ldr	r2, [r7, #24]
 80063d0:	0151      	lsls	r1, r2, #5
 80063d2:	69fa      	ldr	r2, [r7, #28]
 80063d4:	440a      	add	r2, r1
 80063d6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80063da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80063de:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80063e0:	69bb      	ldr	r3, [r7, #24]
 80063e2:	015a      	lsls	r2, r3, #5
 80063e4:	69fb      	ldr	r3, [r7, #28]
 80063e6:	4413      	add	r3, r2
 80063e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	69ba      	ldr	r2, [r7, #24]
 80063f0:	0151      	lsls	r1, r2, #5
 80063f2:	69fa      	ldr	r2, [r7, #28]
 80063f4:	440a      	add	r2, r1
 80063f6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80063fa:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80063fe:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006400:	2300      	movs	r3, #0
}
 8006402:	4618      	mov	r0, r3
 8006404:	3720      	adds	r7, #32
 8006406:	46bd      	mov	sp, r7
 8006408:	bd80      	pop	{r7, pc}
 800640a:	bf00      	nop
 800640c:	1ff80000 	.word	0x1ff80000

08006410 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006410:	b480      	push	{r7}
 8006412:	b087      	sub	sp, #28
 8006414:	af00      	add	r7, sp, #0
 8006416:	60f8      	str	r0, [r7, #12]
 8006418:	60b9      	str	r1, [r7, #8]
 800641a:	4613      	mov	r3, r2
 800641c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8006422:	68bb      	ldr	r3, [r7, #8]
 8006424:	781b      	ldrb	r3, [r3, #0]
 8006426:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006428:	68bb      	ldr	r3, [r7, #8]
 800642a:	785b      	ldrb	r3, [r3, #1]
 800642c:	2b01      	cmp	r3, #1
 800642e:	f040 80ce 	bne.w	80065ce <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8006432:	68bb      	ldr	r3, [r7, #8]
 8006434:	699b      	ldr	r3, [r3, #24]
 8006436:	2b00      	cmp	r3, #0
 8006438:	d132      	bne.n	80064a0 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800643a:	693b      	ldr	r3, [r7, #16]
 800643c:	015a      	lsls	r2, r3, #5
 800643e:	697b      	ldr	r3, [r7, #20]
 8006440:	4413      	add	r3, r2
 8006442:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006446:	691b      	ldr	r3, [r3, #16]
 8006448:	693a      	ldr	r2, [r7, #16]
 800644a:	0151      	lsls	r1, r2, #5
 800644c:	697a      	ldr	r2, [r7, #20]
 800644e:	440a      	add	r2, r1
 8006450:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006454:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006458:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800645c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800645e:	693b      	ldr	r3, [r7, #16]
 8006460:	015a      	lsls	r2, r3, #5
 8006462:	697b      	ldr	r3, [r7, #20]
 8006464:	4413      	add	r3, r2
 8006466:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800646a:	691b      	ldr	r3, [r3, #16]
 800646c:	693a      	ldr	r2, [r7, #16]
 800646e:	0151      	lsls	r1, r2, #5
 8006470:	697a      	ldr	r2, [r7, #20]
 8006472:	440a      	add	r2, r1
 8006474:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006478:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800647c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800647e:	693b      	ldr	r3, [r7, #16]
 8006480:	015a      	lsls	r2, r3, #5
 8006482:	697b      	ldr	r3, [r7, #20]
 8006484:	4413      	add	r3, r2
 8006486:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800648a:	691b      	ldr	r3, [r3, #16]
 800648c:	693a      	ldr	r2, [r7, #16]
 800648e:	0151      	lsls	r1, r2, #5
 8006490:	697a      	ldr	r2, [r7, #20]
 8006492:	440a      	add	r2, r1
 8006494:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006498:	0cdb      	lsrs	r3, r3, #19
 800649a:	04db      	lsls	r3, r3, #19
 800649c:	6113      	str	r3, [r2, #16]
 800649e:	e04e      	b.n	800653e <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80064a0:	693b      	ldr	r3, [r7, #16]
 80064a2:	015a      	lsls	r2, r3, #5
 80064a4:	697b      	ldr	r3, [r7, #20]
 80064a6:	4413      	add	r3, r2
 80064a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064ac:	691b      	ldr	r3, [r3, #16]
 80064ae:	693a      	ldr	r2, [r7, #16]
 80064b0:	0151      	lsls	r1, r2, #5
 80064b2:	697a      	ldr	r2, [r7, #20]
 80064b4:	440a      	add	r2, r1
 80064b6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80064ba:	0cdb      	lsrs	r3, r3, #19
 80064bc:	04db      	lsls	r3, r3, #19
 80064be:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80064c0:	693b      	ldr	r3, [r7, #16]
 80064c2:	015a      	lsls	r2, r3, #5
 80064c4:	697b      	ldr	r3, [r7, #20]
 80064c6:	4413      	add	r3, r2
 80064c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064cc:	691b      	ldr	r3, [r3, #16]
 80064ce:	693a      	ldr	r2, [r7, #16]
 80064d0:	0151      	lsls	r1, r2, #5
 80064d2:	697a      	ldr	r2, [r7, #20]
 80064d4:	440a      	add	r2, r1
 80064d6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80064da:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80064de:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80064e2:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 80064e4:	68bb      	ldr	r3, [r7, #8]
 80064e6:	699a      	ldr	r2, [r3, #24]
 80064e8:	68bb      	ldr	r3, [r7, #8]
 80064ea:	68db      	ldr	r3, [r3, #12]
 80064ec:	429a      	cmp	r2, r3
 80064ee:	d903      	bls.n	80064f8 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 80064f0:	68bb      	ldr	r3, [r7, #8]
 80064f2:	68da      	ldr	r2, [r3, #12]
 80064f4:	68bb      	ldr	r3, [r7, #8]
 80064f6:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80064f8:	693b      	ldr	r3, [r7, #16]
 80064fa:	015a      	lsls	r2, r3, #5
 80064fc:	697b      	ldr	r3, [r7, #20]
 80064fe:	4413      	add	r3, r2
 8006500:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006504:	691b      	ldr	r3, [r3, #16]
 8006506:	693a      	ldr	r2, [r7, #16]
 8006508:	0151      	lsls	r1, r2, #5
 800650a:	697a      	ldr	r2, [r7, #20]
 800650c:	440a      	add	r2, r1
 800650e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006512:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006516:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006518:	693b      	ldr	r3, [r7, #16]
 800651a:	015a      	lsls	r2, r3, #5
 800651c:	697b      	ldr	r3, [r7, #20]
 800651e:	4413      	add	r3, r2
 8006520:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006524:	691a      	ldr	r2, [r3, #16]
 8006526:	68bb      	ldr	r3, [r7, #8]
 8006528:	699b      	ldr	r3, [r3, #24]
 800652a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800652e:	6939      	ldr	r1, [r7, #16]
 8006530:	0148      	lsls	r0, r1, #5
 8006532:	6979      	ldr	r1, [r7, #20]
 8006534:	4401      	add	r1, r0
 8006536:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800653a:	4313      	orrs	r3, r2
 800653c:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800653e:	79fb      	ldrb	r3, [r7, #7]
 8006540:	2b01      	cmp	r3, #1
 8006542:	d11e      	bne.n	8006582 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006544:	68bb      	ldr	r3, [r7, #8]
 8006546:	695b      	ldr	r3, [r3, #20]
 8006548:	2b00      	cmp	r3, #0
 800654a:	d009      	beq.n	8006560 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800654c:	693b      	ldr	r3, [r7, #16]
 800654e:	015a      	lsls	r2, r3, #5
 8006550:	697b      	ldr	r3, [r7, #20]
 8006552:	4413      	add	r3, r2
 8006554:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006558:	461a      	mov	r2, r3
 800655a:	68bb      	ldr	r3, [r7, #8]
 800655c:	695b      	ldr	r3, [r3, #20]
 800655e:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006560:	693b      	ldr	r3, [r7, #16]
 8006562:	015a      	lsls	r2, r3, #5
 8006564:	697b      	ldr	r3, [r7, #20]
 8006566:	4413      	add	r3, r2
 8006568:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	693a      	ldr	r2, [r7, #16]
 8006570:	0151      	lsls	r1, r2, #5
 8006572:	697a      	ldr	r2, [r7, #20]
 8006574:	440a      	add	r2, r1
 8006576:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800657a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800657e:	6013      	str	r3, [r2, #0]
 8006580:	e097      	b.n	80066b2 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006582:	693b      	ldr	r3, [r7, #16]
 8006584:	015a      	lsls	r2, r3, #5
 8006586:	697b      	ldr	r3, [r7, #20]
 8006588:	4413      	add	r3, r2
 800658a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	693a      	ldr	r2, [r7, #16]
 8006592:	0151      	lsls	r1, r2, #5
 8006594:	697a      	ldr	r2, [r7, #20]
 8006596:	440a      	add	r2, r1
 8006598:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800659c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80065a0:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80065a2:	68bb      	ldr	r3, [r7, #8]
 80065a4:	699b      	ldr	r3, [r3, #24]
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	f000 8083 	beq.w	80066b2 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80065ac:	697b      	ldr	r3, [r7, #20]
 80065ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80065b2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80065b4:	68bb      	ldr	r3, [r7, #8]
 80065b6:	781b      	ldrb	r3, [r3, #0]
 80065b8:	f003 030f 	and.w	r3, r3, #15
 80065bc:	2101      	movs	r1, #1
 80065be:	fa01 f303 	lsl.w	r3, r1, r3
 80065c2:	6979      	ldr	r1, [r7, #20]
 80065c4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80065c8:	4313      	orrs	r3, r2
 80065ca:	634b      	str	r3, [r1, #52]	; 0x34
 80065cc:	e071      	b.n	80066b2 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80065ce:	693b      	ldr	r3, [r7, #16]
 80065d0:	015a      	lsls	r2, r3, #5
 80065d2:	697b      	ldr	r3, [r7, #20]
 80065d4:	4413      	add	r3, r2
 80065d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065da:	691b      	ldr	r3, [r3, #16]
 80065dc:	693a      	ldr	r2, [r7, #16]
 80065de:	0151      	lsls	r1, r2, #5
 80065e0:	697a      	ldr	r2, [r7, #20]
 80065e2:	440a      	add	r2, r1
 80065e4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80065e8:	0cdb      	lsrs	r3, r3, #19
 80065ea:	04db      	lsls	r3, r3, #19
 80065ec:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80065ee:	693b      	ldr	r3, [r7, #16]
 80065f0:	015a      	lsls	r2, r3, #5
 80065f2:	697b      	ldr	r3, [r7, #20]
 80065f4:	4413      	add	r3, r2
 80065f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065fa:	691b      	ldr	r3, [r3, #16]
 80065fc:	693a      	ldr	r2, [r7, #16]
 80065fe:	0151      	lsls	r1, r2, #5
 8006600:	697a      	ldr	r2, [r7, #20]
 8006602:	440a      	add	r2, r1
 8006604:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006608:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800660c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006610:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8006612:	68bb      	ldr	r3, [r7, #8]
 8006614:	699b      	ldr	r3, [r3, #24]
 8006616:	2b00      	cmp	r3, #0
 8006618:	d003      	beq.n	8006622 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 800661a:	68bb      	ldr	r3, [r7, #8]
 800661c:	68da      	ldr	r2, [r3, #12]
 800661e:	68bb      	ldr	r3, [r7, #8]
 8006620:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8006622:	68bb      	ldr	r3, [r7, #8]
 8006624:	68da      	ldr	r2, [r3, #12]
 8006626:	68bb      	ldr	r3, [r7, #8]
 8006628:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800662a:	693b      	ldr	r3, [r7, #16]
 800662c:	015a      	lsls	r2, r3, #5
 800662e:	697b      	ldr	r3, [r7, #20]
 8006630:	4413      	add	r3, r2
 8006632:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006636:	691b      	ldr	r3, [r3, #16]
 8006638:	693a      	ldr	r2, [r7, #16]
 800663a:	0151      	lsls	r1, r2, #5
 800663c:	697a      	ldr	r2, [r7, #20]
 800663e:	440a      	add	r2, r1
 8006640:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006644:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006648:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800664a:	693b      	ldr	r3, [r7, #16]
 800664c:	015a      	lsls	r2, r3, #5
 800664e:	697b      	ldr	r3, [r7, #20]
 8006650:	4413      	add	r3, r2
 8006652:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006656:	691a      	ldr	r2, [r3, #16]
 8006658:	68bb      	ldr	r3, [r7, #8]
 800665a:	69db      	ldr	r3, [r3, #28]
 800665c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006660:	6939      	ldr	r1, [r7, #16]
 8006662:	0148      	lsls	r0, r1, #5
 8006664:	6979      	ldr	r1, [r7, #20]
 8006666:	4401      	add	r1, r0
 8006668:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800666c:	4313      	orrs	r3, r2
 800666e:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8006670:	79fb      	ldrb	r3, [r7, #7]
 8006672:	2b01      	cmp	r3, #1
 8006674:	d10d      	bne.n	8006692 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8006676:	68bb      	ldr	r3, [r7, #8]
 8006678:	691b      	ldr	r3, [r3, #16]
 800667a:	2b00      	cmp	r3, #0
 800667c:	d009      	beq.n	8006692 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800667e:	68bb      	ldr	r3, [r7, #8]
 8006680:	6919      	ldr	r1, [r3, #16]
 8006682:	693b      	ldr	r3, [r7, #16]
 8006684:	015a      	lsls	r2, r3, #5
 8006686:	697b      	ldr	r3, [r7, #20]
 8006688:	4413      	add	r3, r2
 800668a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800668e:	460a      	mov	r2, r1
 8006690:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006692:	693b      	ldr	r3, [r7, #16]
 8006694:	015a      	lsls	r2, r3, #5
 8006696:	697b      	ldr	r3, [r7, #20]
 8006698:	4413      	add	r3, r2
 800669a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	693a      	ldr	r2, [r7, #16]
 80066a2:	0151      	lsls	r1, r2, #5
 80066a4:	697a      	ldr	r2, [r7, #20]
 80066a6:	440a      	add	r2, r1
 80066a8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80066ac:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80066b0:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80066b2:	2300      	movs	r3, #0
}
 80066b4:	4618      	mov	r0, r3
 80066b6:	371c      	adds	r7, #28
 80066b8:	46bd      	mov	sp, r7
 80066ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066be:	4770      	bx	lr

080066c0 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80066c0:	b480      	push	{r7}
 80066c2:	b087      	sub	sp, #28
 80066c4:	af00      	add	r7, sp, #0
 80066c6:	6078      	str	r0, [r7, #4]
 80066c8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80066ca:	2300      	movs	r3, #0
 80066cc:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80066ce:	2300      	movs	r3, #0
 80066d0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80066d6:	683b      	ldr	r3, [r7, #0]
 80066d8:	785b      	ldrb	r3, [r3, #1]
 80066da:	2b01      	cmp	r3, #1
 80066dc:	d14a      	bne.n	8006774 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80066de:	683b      	ldr	r3, [r7, #0]
 80066e0:	781b      	ldrb	r3, [r3, #0]
 80066e2:	015a      	lsls	r2, r3, #5
 80066e4:	693b      	ldr	r3, [r7, #16]
 80066e6:	4413      	add	r3, r2
 80066e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80066f2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80066f6:	f040 8086 	bne.w	8006806 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80066fa:	683b      	ldr	r3, [r7, #0]
 80066fc:	781b      	ldrb	r3, [r3, #0]
 80066fe:	015a      	lsls	r2, r3, #5
 8006700:	693b      	ldr	r3, [r7, #16]
 8006702:	4413      	add	r3, r2
 8006704:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	683a      	ldr	r2, [r7, #0]
 800670c:	7812      	ldrb	r2, [r2, #0]
 800670e:	0151      	lsls	r1, r2, #5
 8006710:	693a      	ldr	r2, [r7, #16]
 8006712:	440a      	add	r2, r1
 8006714:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006718:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800671c:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800671e:	683b      	ldr	r3, [r7, #0]
 8006720:	781b      	ldrb	r3, [r3, #0]
 8006722:	015a      	lsls	r2, r3, #5
 8006724:	693b      	ldr	r3, [r7, #16]
 8006726:	4413      	add	r3, r2
 8006728:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	683a      	ldr	r2, [r7, #0]
 8006730:	7812      	ldrb	r2, [r2, #0]
 8006732:	0151      	lsls	r1, r2, #5
 8006734:	693a      	ldr	r2, [r7, #16]
 8006736:	440a      	add	r2, r1
 8006738:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800673c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006740:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	3301      	adds	r3, #1
 8006746:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	f242 7210 	movw	r2, #10000	; 0x2710
 800674e:	4293      	cmp	r3, r2
 8006750:	d902      	bls.n	8006758 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8006752:	2301      	movs	r3, #1
 8006754:	75fb      	strb	r3, [r7, #23]
          break;
 8006756:	e056      	b.n	8006806 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8006758:	683b      	ldr	r3, [r7, #0]
 800675a:	781b      	ldrb	r3, [r3, #0]
 800675c:	015a      	lsls	r2, r3, #5
 800675e:	693b      	ldr	r3, [r7, #16]
 8006760:	4413      	add	r3, r2
 8006762:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800676c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006770:	d0e7      	beq.n	8006742 <USB_EPStopXfer+0x82>
 8006772:	e048      	b.n	8006806 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006774:	683b      	ldr	r3, [r7, #0]
 8006776:	781b      	ldrb	r3, [r3, #0]
 8006778:	015a      	lsls	r2, r3, #5
 800677a:	693b      	ldr	r3, [r7, #16]
 800677c:	4413      	add	r3, r2
 800677e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006788:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800678c:	d13b      	bne.n	8006806 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800678e:	683b      	ldr	r3, [r7, #0]
 8006790:	781b      	ldrb	r3, [r3, #0]
 8006792:	015a      	lsls	r2, r3, #5
 8006794:	693b      	ldr	r3, [r7, #16]
 8006796:	4413      	add	r3, r2
 8006798:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	683a      	ldr	r2, [r7, #0]
 80067a0:	7812      	ldrb	r2, [r2, #0]
 80067a2:	0151      	lsls	r1, r2, #5
 80067a4:	693a      	ldr	r2, [r7, #16]
 80067a6:	440a      	add	r2, r1
 80067a8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80067ac:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80067b0:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80067b2:	683b      	ldr	r3, [r7, #0]
 80067b4:	781b      	ldrb	r3, [r3, #0]
 80067b6:	015a      	lsls	r2, r3, #5
 80067b8:	693b      	ldr	r3, [r7, #16]
 80067ba:	4413      	add	r3, r2
 80067bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	683a      	ldr	r2, [r7, #0]
 80067c4:	7812      	ldrb	r2, [r2, #0]
 80067c6:	0151      	lsls	r1, r2, #5
 80067c8:	693a      	ldr	r2, [r7, #16]
 80067ca:	440a      	add	r2, r1
 80067cc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80067d0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80067d4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	3301      	adds	r3, #1
 80067da:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	f242 7210 	movw	r2, #10000	; 0x2710
 80067e2:	4293      	cmp	r3, r2
 80067e4:	d902      	bls.n	80067ec <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80067e6:	2301      	movs	r3, #1
 80067e8:	75fb      	strb	r3, [r7, #23]
          break;
 80067ea:	e00c      	b.n	8006806 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80067ec:	683b      	ldr	r3, [r7, #0]
 80067ee:	781b      	ldrb	r3, [r3, #0]
 80067f0:	015a      	lsls	r2, r3, #5
 80067f2:	693b      	ldr	r3, [r7, #16]
 80067f4:	4413      	add	r3, r2
 80067f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006800:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006804:	d0e7      	beq.n	80067d6 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8006806:	7dfb      	ldrb	r3, [r7, #23]
}
 8006808:	4618      	mov	r0, r3
 800680a:	371c      	adds	r7, #28
 800680c:	46bd      	mov	sp, r7
 800680e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006812:	4770      	bx	lr

08006814 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8006814:	b480      	push	{r7}
 8006816:	b089      	sub	sp, #36	; 0x24
 8006818:	af00      	add	r7, sp, #0
 800681a:	60f8      	str	r0, [r7, #12]
 800681c:	60b9      	str	r1, [r7, #8]
 800681e:	4611      	mov	r1, r2
 8006820:	461a      	mov	r2, r3
 8006822:	460b      	mov	r3, r1
 8006824:	71fb      	strb	r3, [r7, #7]
 8006826:	4613      	mov	r3, r2
 8006828:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800682e:	68bb      	ldr	r3, [r7, #8]
 8006830:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8006832:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006836:	2b00      	cmp	r3, #0
 8006838:	d123      	bne.n	8006882 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800683a:	88bb      	ldrh	r3, [r7, #4]
 800683c:	3303      	adds	r3, #3
 800683e:	089b      	lsrs	r3, r3, #2
 8006840:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8006842:	2300      	movs	r3, #0
 8006844:	61bb      	str	r3, [r7, #24]
 8006846:	e018      	b.n	800687a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006848:	79fb      	ldrb	r3, [r7, #7]
 800684a:	031a      	lsls	r2, r3, #12
 800684c:	697b      	ldr	r3, [r7, #20]
 800684e:	4413      	add	r3, r2
 8006850:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006854:	461a      	mov	r2, r3
 8006856:	69fb      	ldr	r3, [r7, #28]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	6013      	str	r3, [r2, #0]
      pSrc++;
 800685c:	69fb      	ldr	r3, [r7, #28]
 800685e:	3301      	adds	r3, #1
 8006860:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006862:	69fb      	ldr	r3, [r7, #28]
 8006864:	3301      	adds	r3, #1
 8006866:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006868:	69fb      	ldr	r3, [r7, #28]
 800686a:	3301      	adds	r3, #1
 800686c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800686e:	69fb      	ldr	r3, [r7, #28]
 8006870:	3301      	adds	r3, #1
 8006872:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006874:	69bb      	ldr	r3, [r7, #24]
 8006876:	3301      	adds	r3, #1
 8006878:	61bb      	str	r3, [r7, #24]
 800687a:	69ba      	ldr	r2, [r7, #24]
 800687c:	693b      	ldr	r3, [r7, #16]
 800687e:	429a      	cmp	r2, r3
 8006880:	d3e2      	bcc.n	8006848 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8006882:	2300      	movs	r3, #0
}
 8006884:	4618      	mov	r0, r3
 8006886:	3724      	adds	r7, #36	; 0x24
 8006888:	46bd      	mov	sp, r7
 800688a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800688e:	4770      	bx	lr

08006890 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006890:	b480      	push	{r7}
 8006892:	b08b      	sub	sp, #44	; 0x2c
 8006894:	af00      	add	r7, sp, #0
 8006896:	60f8      	str	r0, [r7, #12]
 8006898:	60b9      	str	r1, [r7, #8]
 800689a:	4613      	mov	r3, r2
 800689c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80068a2:	68bb      	ldr	r3, [r7, #8]
 80068a4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80068a6:	88fb      	ldrh	r3, [r7, #6]
 80068a8:	089b      	lsrs	r3, r3, #2
 80068aa:	b29b      	uxth	r3, r3
 80068ac:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80068ae:	88fb      	ldrh	r3, [r7, #6]
 80068b0:	f003 0303 	and.w	r3, r3, #3
 80068b4:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80068b6:	2300      	movs	r3, #0
 80068b8:	623b      	str	r3, [r7, #32]
 80068ba:	e014      	b.n	80068e6 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80068bc:	69bb      	ldr	r3, [r7, #24]
 80068be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80068c2:	681a      	ldr	r2, [r3, #0]
 80068c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068c6:	601a      	str	r2, [r3, #0]
    pDest++;
 80068c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068ca:	3301      	adds	r3, #1
 80068cc:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80068ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068d0:	3301      	adds	r3, #1
 80068d2:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80068d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068d6:	3301      	adds	r3, #1
 80068d8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80068da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068dc:	3301      	adds	r3, #1
 80068de:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80068e0:	6a3b      	ldr	r3, [r7, #32]
 80068e2:	3301      	adds	r3, #1
 80068e4:	623b      	str	r3, [r7, #32]
 80068e6:	6a3a      	ldr	r2, [r7, #32]
 80068e8:	697b      	ldr	r3, [r7, #20]
 80068ea:	429a      	cmp	r2, r3
 80068ec:	d3e6      	bcc.n	80068bc <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80068ee:	8bfb      	ldrh	r3, [r7, #30]
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d01e      	beq.n	8006932 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80068f4:	2300      	movs	r3, #0
 80068f6:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80068f8:	69bb      	ldr	r3, [r7, #24]
 80068fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80068fe:	461a      	mov	r2, r3
 8006900:	f107 0310 	add.w	r3, r7, #16
 8006904:	6812      	ldr	r2, [r2, #0]
 8006906:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8006908:	693a      	ldr	r2, [r7, #16]
 800690a:	6a3b      	ldr	r3, [r7, #32]
 800690c:	b2db      	uxtb	r3, r3
 800690e:	00db      	lsls	r3, r3, #3
 8006910:	fa22 f303 	lsr.w	r3, r2, r3
 8006914:	b2da      	uxtb	r2, r3
 8006916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006918:	701a      	strb	r2, [r3, #0]
      i++;
 800691a:	6a3b      	ldr	r3, [r7, #32]
 800691c:	3301      	adds	r3, #1
 800691e:	623b      	str	r3, [r7, #32]
      pDest++;
 8006920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006922:	3301      	adds	r3, #1
 8006924:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8006926:	8bfb      	ldrh	r3, [r7, #30]
 8006928:	3b01      	subs	r3, #1
 800692a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800692c:	8bfb      	ldrh	r3, [r7, #30]
 800692e:	2b00      	cmp	r3, #0
 8006930:	d1ea      	bne.n	8006908 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8006932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006934:	4618      	mov	r0, r3
 8006936:	372c      	adds	r7, #44	; 0x2c
 8006938:	46bd      	mov	sp, r7
 800693a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800693e:	4770      	bx	lr

08006940 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006940:	b480      	push	{r7}
 8006942:	b085      	sub	sp, #20
 8006944:	af00      	add	r7, sp, #0
 8006946:	6078      	str	r0, [r7, #4]
 8006948:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800694e:	683b      	ldr	r3, [r7, #0]
 8006950:	781b      	ldrb	r3, [r3, #0]
 8006952:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006954:	683b      	ldr	r3, [r7, #0]
 8006956:	785b      	ldrb	r3, [r3, #1]
 8006958:	2b01      	cmp	r3, #1
 800695a:	d12c      	bne.n	80069b6 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800695c:	68bb      	ldr	r3, [r7, #8]
 800695e:	015a      	lsls	r2, r3, #5
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	4413      	add	r3, r2
 8006964:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	2b00      	cmp	r3, #0
 800696c:	db12      	blt.n	8006994 <USB_EPSetStall+0x54>
 800696e:	68bb      	ldr	r3, [r7, #8]
 8006970:	2b00      	cmp	r3, #0
 8006972:	d00f      	beq.n	8006994 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8006974:	68bb      	ldr	r3, [r7, #8]
 8006976:	015a      	lsls	r2, r3, #5
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	4413      	add	r3, r2
 800697c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	68ba      	ldr	r2, [r7, #8]
 8006984:	0151      	lsls	r1, r2, #5
 8006986:	68fa      	ldr	r2, [r7, #12]
 8006988:	440a      	add	r2, r1
 800698a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800698e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006992:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8006994:	68bb      	ldr	r3, [r7, #8]
 8006996:	015a      	lsls	r2, r3, #5
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	4413      	add	r3, r2
 800699c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	68ba      	ldr	r2, [r7, #8]
 80069a4:	0151      	lsls	r1, r2, #5
 80069a6:	68fa      	ldr	r2, [r7, #12]
 80069a8:	440a      	add	r2, r1
 80069aa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80069ae:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80069b2:	6013      	str	r3, [r2, #0]
 80069b4:	e02b      	b.n	8006a0e <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80069b6:	68bb      	ldr	r3, [r7, #8]
 80069b8:	015a      	lsls	r2, r3, #5
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	4413      	add	r3, r2
 80069be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	db12      	blt.n	80069ee <USB_EPSetStall+0xae>
 80069c8:	68bb      	ldr	r3, [r7, #8]
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d00f      	beq.n	80069ee <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80069ce:	68bb      	ldr	r3, [r7, #8]
 80069d0:	015a      	lsls	r2, r3, #5
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	4413      	add	r3, r2
 80069d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	68ba      	ldr	r2, [r7, #8]
 80069de:	0151      	lsls	r1, r2, #5
 80069e0:	68fa      	ldr	r2, [r7, #12]
 80069e2:	440a      	add	r2, r1
 80069e4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80069e8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80069ec:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80069ee:	68bb      	ldr	r3, [r7, #8]
 80069f0:	015a      	lsls	r2, r3, #5
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	4413      	add	r3, r2
 80069f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	68ba      	ldr	r2, [r7, #8]
 80069fe:	0151      	lsls	r1, r2, #5
 8006a00:	68fa      	ldr	r2, [r7, #12]
 8006a02:	440a      	add	r2, r1
 8006a04:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006a08:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006a0c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006a0e:	2300      	movs	r3, #0
}
 8006a10:	4618      	mov	r0, r3
 8006a12:	3714      	adds	r7, #20
 8006a14:	46bd      	mov	sp, r7
 8006a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a1a:	4770      	bx	lr

08006a1c <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006a1c:	b480      	push	{r7}
 8006a1e:	b085      	sub	sp, #20
 8006a20:	af00      	add	r7, sp, #0
 8006a22:	6078      	str	r0, [r7, #4]
 8006a24:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006a2a:	683b      	ldr	r3, [r7, #0]
 8006a2c:	781b      	ldrb	r3, [r3, #0]
 8006a2e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006a30:	683b      	ldr	r3, [r7, #0]
 8006a32:	785b      	ldrb	r3, [r3, #1]
 8006a34:	2b01      	cmp	r3, #1
 8006a36:	d128      	bne.n	8006a8a <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006a38:	68bb      	ldr	r3, [r7, #8]
 8006a3a:	015a      	lsls	r2, r3, #5
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	4413      	add	r3, r2
 8006a40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	68ba      	ldr	r2, [r7, #8]
 8006a48:	0151      	lsls	r1, r2, #5
 8006a4a:	68fa      	ldr	r2, [r7, #12]
 8006a4c:	440a      	add	r2, r1
 8006a4e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006a52:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006a56:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006a58:	683b      	ldr	r3, [r7, #0]
 8006a5a:	791b      	ldrb	r3, [r3, #4]
 8006a5c:	2b03      	cmp	r3, #3
 8006a5e:	d003      	beq.n	8006a68 <USB_EPClearStall+0x4c>
 8006a60:	683b      	ldr	r3, [r7, #0]
 8006a62:	791b      	ldrb	r3, [r3, #4]
 8006a64:	2b02      	cmp	r3, #2
 8006a66:	d138      	bne.n	8006ada <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006a68:	68bb      	ldr	r3, [r7, #8]
 8006a6a:	015a      	lsls	r2, r3, #5
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	4413      	add	r3, r2
 8006a70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	68ba      	ldr	r2, [r7, #8]
 8006a78:	0151      	lsls	r1, r2, #5
 8006a7a:	68fa      	ldr	r2, [r7, #12]
 8006a7c:	440a      	add	r2, r1
 8006a7e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006a82:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006a86:	6013      	str	r3, [r2, #0]
 8006a88:	e027      	b.n	8006ada <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8006a8a:	68bb      	ldr	r3, [r7, #8]
 8006a8c:	015a      	lsls	r2, r3, #5
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	4413      	add	r3, r2
 8006a92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	68ba      	ldr	r2, [r7, #8]
 8006a9a:	0151      	lsls	r1, r2, #5
 8006a9c:	68fa      	ldr	r2, [r7, #12]
 8006a9e:	440a      	add	r2, r1
 8006aa0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006aa4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006aa8:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006aaa:	683b      	ldr	r3, [r7, #0]
 8006aac:	791b      	ldrb	r3, [r3, #4]
 8006aae:	2b03      	cmp	r3, #3
 8006ab0:	d003      	beq.n	8006aba <USB_EPClearStall+0x9e>
 8006ab2:	683b      	ldr	r3, [r7, #0]
 8006ab4:	791b      	ldrb	r3, [r3, #4]
 8006ab6:	2b02      	cmp	r3, #2
 8006ab8:	d10f      	bne.n	8006ada <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006aba:	68bb      	ldr	r3, [r7, #8]
 8006abc:	015a      	lsls	r2, r3, #5
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	4413      	add	r3, r2
 8006ac2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	68ba      	ldr	r2, [r7, #8]
 8006aca:	0151      	lsls	r1, r2, #5
 8006acc:	68fa      	ldr	r2, [r7, #12]
 8006ace:	440a      	add	r2, r1
 8006ad0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006ad4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006ad8:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8006ada:	2300      	movs	r3, #0
}
 8006adc:	4618      	mov	r0, r3
 8006ade:	3714      	adds	r7, #20
 8006ae0:	46bd      	mov	sp, r7
 8006ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae6:	4770      	bx	lr

08006ae8 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8006ae8:	b480      	push	{r7}
 8006aea:	b085      	sub	sp, #20
 8006aec:	af00      	add	r7, sp, #0
 8006aee:	6078      	str	r0, [r7, #4]
 8006af0:	460b      	mov	r3, r1
 8006af2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	68fa      	ldr	r2, [r7, #12]
 8006b02:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006b06:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8006b0a:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b12:	681a      	ldr	r2, [r3, #0]
 8006b14:	78fb      	ldrb	r3, [r7, #3]
 8006b16:	011b      	lsls	r3, r3, #4
 8006b18:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8006b1c:	68f9      	ldr	r1, [r7, #12]
 8006b1e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006b22:	4313      	orrs	r3, r2
 8006b24:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8006b26:	2300      	movs	r3, #0
}
 8006b28:	4618      	mov	r0, r3
 8006b2a:	3714      	adds	r7, #20
 8006b2c:	46bd      	mov	sp, r7
 8006b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b32:	4770      	bx	lr

08006b34 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006b34:	b480      	push	{r7}
 8006b36:	b085      	sub	sp, #20
 8006b38:	af00      	add	r7, sp, #0
 8006b3a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	68fa      	ldr	r2, [r7, #12]
 8006b4a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006b4e:	f023 0303 	bic.w	r3, r3, #3
 8006b52:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b5a:	685b      	ldr	r3, [r3, #4]
 8006b5c:	68fa      	ldr	r2, [r7, #12]
 8006b5e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006b62:	f023 0302 	bic.w	r3, r3, #2
 8006b66:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006b68:	2300      	movs	r3, #0
}
 8006b6a:	4618      	mov	r0, r3
 8006b6c:	3714      	adds	r7, #20
 8006b6e:	46bd      	mov	sp, r7
 8006b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b74:	4770      	bx	lr

08006b76 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006b76:	b480      	push	{r7}
 8006b78:	b085      	sub	sp, #20
 8006b7a:	af00      	add	r7, sp, #0
 8006b7c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	68fa      	ldr	r2, [r7, #12]
 8006b8c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006b90:	f023 0303 	bic.w	r3, r3, #3
 8006b94:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b9c:	685b      	ldr	r3, [r3, #4]
 8006b9e:	68fa      	ldr	r2, [r7, #12]
 8006ba0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006ba4:	f043 0302 	orr.w	r3, r3, #2
 8006ba8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006baa:	2300      	movs	r3, #0
}
 8006bac:	4618      	mov	r0, r3
 8006bae:	3714      	adds	r7, #20
 8006bb0:	46bd      	mov	sp, r7
 8006bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb6:	4770      	bx	lr

08006bb8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8006bb8:	b480      	push	{r7}
 8006bba:	b085      	sub	sp, #20
 8006bbc:	af00      	add	r7, sp, #0
 8006bbe:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	695b      	ldr	r3, [r3, #20]
 8006bc4:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	699b      	ldr	r3, [r3, #24]
 8006bca:	68fa      	ldr	r2, [r7, #12]
 8006bcc:	4013      	ands	r3, r2
 8006bce:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006bd0:	68fb      	ldr	r3, [r7, #12]
}
 8006bd2:	4618      	mov	r0, r3
 8006bd4:	3714      	adds	r7, #20
 8006bd6:	46bd      	mov	sp, r7
 8006bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bdc:	4770      	bx	lr

08006bde <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006bde:	b480      	push	{r7}
 8006be0:	b085      	sub	sp, #20
 8006be2:	af00      	add	r7, sp, #0
 8006be4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006bf0:	699b      	ldr	r3, [r3, #24]
 8006bf2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006bfa:	69db      	ldr	r3, [r3, #28]
 8006bfc:	68ba      	ldr	r2, [r7, #8]
 8006bfe:	4013      	ands	r3, r2
 8006c00:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8006c02:	68bb      	ldr	r3, [r7, #8]
 8006c04:	0c1b      	lsrs	r3, r3, #16
}
 8006c06:	4618      	mov	r0, r3
 8006c08:	3714      	adds	r7, #20
 8006c0a:	46bd      	mov	sp, r7
 8006c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c10:	4770      	bx	lr

08006c12 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006c12:	b480      	push	{r7}
 8006c14:	b085      	sub	sp, #20
 8006c16:	af00      	add	r7, sp, #0
 8006c18:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c24:	699b      	ldr	r3, [r3, #24]
 8006c26:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c2e:	69db      	ldr	r3, [r3, #28]
 8006c30:	68ba      	ldr	r2, [r7, #8]
 8006c32:	4013      	ands	r3, r2
 8006c34:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8006c36:	68bb      	ldr	r3, [r7, #8]
 8006c38:	b29b      	uxth	r3, r3
}
 8006c3a:	4618      	mov	r0, r3
 8006c3c:	3714      	adds	r7, #20
 8006c3e:	46bd      	mov	sp, r7
 8006c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c44:	4770      	bx	lr

08006c46 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006c46:	b480      	push	{r7}
 8006c48:	b085      	sub	sp, #20
 8006c4a:	af00      	add	r7, sp, #0
 8006c4c:	6078      	str	r0, [r7, #4]
 8006c4e:	460b      	mov	r3, r1
 8006c50:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8006c56:	78fb      	ldrb	r3, [r7, #3]
 8006c58:	015a      	lsls	r2, r3, #5
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	4413      	add	r3, r2
 8006c5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c62:	689b      	ldr	r3, [r3, #8]
 8006c64:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c6c:	695b      	ldr	r3, [r3, #20]
 8006c6e:	68ba      	ldr	r2, [r7, #8]
 8006c70:	4013      	ands	r3, r2
 8006c72:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006c74:	68bb      	ldr	r3, [r7, #8]
}
 8006c76:	4618      	mov	r0, r3
 8006c78:	3714      	adds	r7, #20
 8006c7a:	46bd      	mov	sp, r7
 8006c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c80:	4770      	bx	lr

08006c82 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006c82:	b480      	push	{r7}
 8006c84:	b087      	sub	sp, #28
 8006c86:	af00      	add	r7, sp, #0
 8006c88:	6078      	str	r0, [r7, #4]
 8006c8a:	460b      	mov	r3, r1
 8006c8c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8006c92:	697b      	ldr	r3, [r7, #20]
 8006c94:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c98:	691b      	ldr	r3, [r3, #16]
 8006c9a:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8006c9c:	697b      	ldr	r3, [r7, #20]
 8006c9e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ca2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ca4:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8006ca6:	78fb      	ldrb	r3, [r7, #3]
 8006ca8:	f003 030f 	and.w	r3, r3, #15
 8006cac:	68fa      	ldr	r2, [r7, #12]
 8006cae:	fa22 f303 	lsr.w	r3, r2, r3
 8006cb2:	01db      	lsls	r3, r3, #7
 8006cb4:	b2db      	uxtb	r3, r3
 8006cb6:	693a      	ldr	r2, [r7, #16]
 8006cb8:	4313      	orrs	r3, r2
 8006cba:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8006cbc:	78fb      	ldrb	r3, [r7, #3]
 8006cbe:	015a      	lsls	r2, r3, #5
 8006cc0:	697b      	ldr	r3, [r7, #20]
 8006cc2:	4413      	add	r3, r2
 8006cc4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006cc8:	689b      	ldr	r3, [r3, #8]
 8006cca:	693a      	ldr	r2, [r7, #16]
 8006ccc:	4013      	ands	r3, r2
 8006cce:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006cd0:	68bb      	ldr	r3, [r7, #8]
}
 8006cd2:	4618      	mov	r0, r3
 8006cd4:	371c      	adds	r7, #28
 8006cd6:	46bd      	mov	sp, r7
 8006cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cdc:	4770      	bx	lr

08006cde <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006cde:	b480      	push	{r7}
 8006ce0:	b083      	sub	sp, #12
 8006ce2:	af00      	add	r7, sp, #0
 8006ce4:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	695b      	ldr	r3, [r3, #20]
 8006cea:	f003 0301 	and.w	r3, r3, #1
}
 8006cee:	4618      	mov	r0, r3
 8006cf0:	370c      	adds	r7, #12
 8006cf2:	46bd      	mov	sp, r7
 8006cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf8:	4770      	bx	lr

08006cfa <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8006cfa:	b480      	push	{r7}
 8006cfc:	b085      	sub	sp, #20
 8006cfe:	af00      	add	r7, sp, #0
 8006d00:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	68fa      	ldr	r2, [r7, #12]
 8006d10:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006d14:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8006d18:	f023 0307 	bic.w	r3, r3, #7
 8006d1c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d24:	685b      	ldr	r3, [r3, #4]
 8006d26:	68fa      	ldr	r2, [r7, #12]
 8006d28:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006d2c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006d30:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006d32:	2300      	movs	r3, #0
}
 8006d34:	4618      	mov	r0, r3
 8006d36:	3714      	adds	r7, #20
 8006d38:	46bd      	mov	sp, r7
 8006d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d3e:	4770      	bx	lr

08006d40 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8006d40:	b480      	push	{r7}
 8006d42:	b087      	sub	sp, #28
 8006d44:	af00      	add	r7, sp, #0
 8006d46:	60f8      	str	r0, [r7, #12]
 8006d48:	460b      	mov	r3, r1
 8006d4a:	607a      	str	r2, [r7, #4]
 8006d4c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	333c      	adds	r3, #60	; 0x3c
 8006d56:	3304      	adds	r3, #4
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8006d5c:	693b      	ldr	r3, [r7, #16]
 8006d5e:	4a26      	ldr	r2, [pc, #152]	; (8006df8 <USB_EP0_OutStart+0xb8>)
 8006d60:	4293      	cmp	r3, r2
 8006d62:	d90a      	bls.n	8006d7a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006d64:	697b      	ldr	r3, [r7, #20]
 8006d66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006d70:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006d74:	d101      	bne.n	8006d7a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8006d76:	2300      	movs	r3, #0
 8006d78:	e037      	b.n	8006dea <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8006d7a:	697b      	ldr	r3, [r7, #20]
 8006d7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d80:	461a      	mov	r2, r3
 8006d82:	2300      	movs	r3, #0
 8006d84:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006d86:	697b      	ldr	r3, [r7, #20]
 8006d88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d8c:	691b      	ldr	r3, [r3, #16]
 8006d8e:	697a      	ldr	r2, [r7, #20]
 8006d90:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006d94:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006d98:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8006d9a:	697b      	ldr	r3, [r7, #20]
 8006d9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006da0:	691b      	ldr	r3, [r3, #16]
 8006da2:	697a      	ldr	r2, [r7, #20]
 8006da4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006da8:	f043 0318 	orr.w	r3, r3, #24
 8006dac:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8006dae:	697b      	ldr	r3, [r7, #20]
 8006db0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006db4:	691b      	ldr	r3, [r3, #16]
 8006db6:	697a      	ldr	r2, [r7, #20]
 8006db8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006dbc:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8006dc0:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8006dc2:	7afb      	ldrb	r3, [r7, #11]
 8006dc4:	2b01      	cmp	r3, #1
 8006dc6:	d10f      	bne.n	8006de8 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8006dc8:	697b      	ldr	r3, [r7, #20]
 8006dca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006dce:	461a      	mov	r2, r3
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8006dd4:	697b      	ldr	r3, [r7, #20]
 8006dd6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	697a      	ldr	r2, [r7, #20]
 8006dde:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006de2:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8006de6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006de8:	2300      	movs	r3, #0
}
 8006dea:	4618      	mov	r0, r3
 8006dec:	371c      	adds	r7, #28
 8006dee:	46bd      	mov	sp, r7
 8006df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df4:	4770      	bx	lr
 8006df6:	bf00      	nop
 8006df8:	4f54300a 	.word	0x4f54300a

08006dfc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006dfc:	b480      	push	{r7}
 8006dfe:	b085      	sub	sp, #20
 8006e00:	af00      	add	r7, sp, #0
 8006e02:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006e04:	2300      	movs	r3, #0
 8006e06:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	3301      	adds	r3, #1
 8006e0c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	4a13      	ldr	r2, [pc, #76]	; (8006e60 <USB_CoreReset+0x64>)
 8006e12:	4293      	cmp	r3, r2
 8006e14:	d901      	bls.n	8006e1a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006e16:	2303      	movs	r3, #3
 8006e18:	e01b      	b.n	8006e52 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	691b      	ldr	r3, [r3, #16]
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	daf2      	bge.n	8006e08 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006e22:	2300      	movs	r3, #0
 8006e24:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	691b      	ldr	r3, [r3, #16]
 8006e2a:	f043 0201 	orr.w	r2, r3, #1
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	3301      	adds	r3, #1
 8006e36:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	4a09      	ldr	r2, [pc, #36]	; (8006e60 <USB_CoreReset+0x64>)
 8006e3c:	4293      	cmp	r3, r2
 8006e3e:	d901      	bls.n	8006e44 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006e40:	2303      	movs	r3, #3
 8006e42:	e006      	b.n	8006e52 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	691b      	ldr	r3, [r3, #16]
 8006e48:	f003 0301 	and.w	r3, r3, #1
 8006e4c:	2b01      	cmp	r3, #1
 8006e4e:	d0f0      	beq.n	8006e32 <USB_CoreReset+0x36>

  return HAL_OK;
 8006e50:	2300      	movs	r3, #0
}
 8006e52:	4618      	mov	r0, r3
 8006e54:	3714      	adds	r7, #20
 8006e56:	46bd      	mov	sp, r7
 8006e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e5c:	4770      	bx	lr
 8006e5e:	bf00      	nop
 8006e60:	00030d40 	.word	0x00030d40

08006e64 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006e64:	b580      	push	{r7, lr}
 8006e66:	b084      	sub	sp, #16
 8006e68:	af00      	add	r7, sp, #0
 8006e6a:	6078      	str	r0, [r7, #4]
 8006e6c:	460b      	mov	r3, r1
 8006e6e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006e70:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8006e74:	f002 fc2a 	bl	80096cc <USBD_static_malloc>
 8006e78:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d109      	bne.n	8006e94 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	32b0      	adds	r2, #176	; 0xb0
 8006e8a:	2100      	movs	r1, #0
 8006e8c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8006e90:	2302      	movs	r3, #2
 8006e92:	e0d4      	b.n	800703e <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8006e94:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8006e98:	2100      	movs	r1, #0
 8006e9a:	68f8      	ldr	r0, [r7, #12]
 8006e9c:	f002 fc84 	bl	80097a8 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	32b0      	adds	r2, #176	; 0xb0
 8006eaa:	68f9      	ldr	r1, [r7, #12]
 8006eac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	32b0      	adds	r2, #176	; 0xb0
 8006eba:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	7c1b      	ldrb	r3, [r3, #16]
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d138      	bne.n	8006f3e <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8006ecc:	4b5e      	ldr	r3, [pc, #376]	; (8007048 <USBD_CDC_Init+0x1e4>)
 8006ece:	7819      	ldrb	r1, [r3, #0]
 8006ed0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006ed4:	2202      	movs	r2, #2
 8006ed6:	6878      	ldr	r0, [r7, #4]
 8006ed8:	f002 fad5 	bl	8009486 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8006edc:	4b5a      	ldr	r3, [pc, #360]	; (8007048 <USBD_CDC_Init+0x1e4>)
 8006ede:	781b      	ldrb	r3, [r3, #0]
 8006ee0:	f003 020f 	and.w	r2, r3, #15
 8006ee4:	6879      	ldr	r1, [r7, #4]
 8006ee6:	4613      	mov	r3, r2
 8006ee8:	009b      	lsls	r3, r3, #2
 8006eea:	4413      	add	r3, r2
 8006eec:	009b      	lsls	r3, r3, #2
 8006eee:	440b      	add	r3, r1
 8006ef0:	3324      	adds	r3, #36	; 0x24
 8006ef2:	2201      	movs	r2, #1
 8006ef4:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8006ef6:	4b55      	ldr	r3, [pc, #340]	; (800704c <USBD_CDC_Init+0x1e8>)
 8006ef8:	7819      	ldrb	r1, [r3, #0]
 8006efa:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006efe:	2202      	movs	r2, #2
 8006f00:	6878      	ldr	r0, [r7, #4]
 8006f02:	f002 fac0 	bl	8009486 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8006f06:	4b51      	ldr	r3, [pc, #324]	; (800704c <USBD_CDC_Init+0x1e8>)
 8006f08:	781b      	ldrb	r3, [r3, #0]
 8006f0a:	f003 020f 	and.w	r2, r3, #15
 8006f0e:	6879      	ldr	r1, [r7, #4]
 8006f10:	4613      	mov	r3, r2
 8006f12:	009b      	lsls	r3, r3, #2
 8006f14:	4413      	add	r3, r2
 8006f16:	009b      	lsls	r3, r3, #2
 8006f18:	440b      	add	r3, r1
 8006f1a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006f1e:	2201      	movs	r2, #1
 8006f20:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8006f22:	4b4b      	ldr	r3, [pc, #300]	; (8007050 <USBD_CDC_Init+0x1ec>)
 8006f24:	781b      	ldrb	r3, [r3, #0]
 8006f26:	f003 020f 	and.w	r2, r3, #15
 8006f2a:	6879      	ldr	r1, [r7, #4]
 8006f2c:	4613      	mov	r3, r2
 8006f2e:	009b      	lsls	r3, r3, #2
 8006f30:	4413      	add	r3, r2
 8006f32:	009b      	lsls	r3, r3, #2
 8006f34:	440b      	add	r3, r1
 8006f36:	3326      	adds	r3, #38	; 0x26
 8006f38:	2210      	movs	r2, #16
 8006f3a:	801a      	strh	r2, [r3, #0]
 8006f3c:	e035      	b.n	8006faa <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8006f3e:	4b42      	ldr	r3, [pc, #264]	; (8007048 <USBD_CDC_Init+0x1e4>)
 8006f40:	7819      	ldrb	r1, [r3, #0]
 8006f42:	2340      	movs	r3, #64	; 0x40
 8006f44:	2202      	movs	r2, #2
 8006f46:	6878      	ldr	r0, [r7, #4]
 8006f48:	f002 fa9d 	bl	8009486 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8006f4c:	4b3e      	ldr	r3, [pc, #248]	; (8007048 <USBD_CDC_Init+0x1e4>)
 8006f4e:	781b      	ldrb	r3, [r3, #0]
 8006f50:	f003 020f 	and.w	r2, r3, #15
 8006f54:	6879      	ldr	r1, [r7, #4]
 8006f56:	4613      	mov	r3, r2
 8006f58:	009b      	lsls	r3, r3, #2
 8006f5a:	4413      	add	r3, r2
 8006f5c:	009b      	lsls	r3, r3, #2
 8006f5e:	440b      	add	r3, r1
 8006f60:	3324      	adds	r3, #36	; 0x24
 8006f62:	2201      	movs	r2, #1
 8006f64:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8006f66:	4b39      	ldr	r3, [pc, #228]	; (800704c <USBD_CDC_Init+0x1e8>)
 8006f68:	7819      	ldrb	r1, [r3, #0]
 8006f6a:	2340      	movs	r3, #64	; 0x40
 8006f6c:	2202      	movs	r2, #2
 8006f6e:	6878      	ldr	r0, [r7, #4]
 8006f70:	f002 fa89 	bl	8009486 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8006f74:	4b35      	ldr	r3, [pc, #212]	; (800704c <USBD_CDC_Init+0x1e8>)
 8006f76:	781b      	ldrb	r3, [r3, #0]
 8006f78:	f003 020f 	and.w	r2, r3, #15
 8006f7c:	6879      	ldr	r1, [r7, #4]
 8006f7e:	4613      	mov	r3, r2
 8006f80:	009b      	lsls	r3, r3, #2
 8006f82:	4413      	add	r3, r2
 8006f84:	009b      	lsls	r3, r3, #2
 8006f86:	440b      	add	r3, r1
 8006f88:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006f8c:	2201      	movs	r2, #1
 8006f8e:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8006f90:	4b2f      	ldr	r3, [pc, #188]	; (8007050 <USBD_CDC_Init+0x1ec>)
 8006f92:	781b      	ldrb	r3, [r3, #0]
 8006f94:	f003 020f 	and.w	r2, r3, #15
 8006f98:	6879      	ldr	r1, [r7, #4]
 8006f9a:	4613      	mov	r3, r2
 8006f9c:	009b      	lsls	r3, r3, #2
 8006f9e:	4413      	add	r3, r2
 8006fa0:	009b      	lsls	r3, r3, #2
 8006fa2:	440b      	add	r3, r1
 8006fa4:	3326      	adds	r3, #38	; 0x26
 8006fa6:	2210      	movs	r2, #16
 8006fa8:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8006faa:	4b29      	ldr	r3, [pc, #164]	; (8007050 <USBD_CDC_Init+0x1ec>)
 8006fac:	7819      	ldrb	r1, [r3, #0]
 8006fae:	2308      	movs	r3, #8
 8006fb0:	2203      	movs	r2, #3
 8006fb2:	6878      	ldr	r0, [r7, #4]
 8006fb4:	f002 fa67 	bl	8009486 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8006fb8:	4b25      	ldr	r3, [pc, #148]	; (8007050 <USBD_CDC_Init+0x1ec>)
 8006fba:	781b      	ldrb	r3, [r3, #0]
 8006fbc:	f003 020f 	and.w	r2, r3, #15
 8006fc0:	6879      	ldr	r1, [r7, #4]
 8006fc2:	4613      	mov	r3, r2
 8006fc4:	009b      	lsls	r3, r3, #2
 8006fc6:	4413      	add	r3, r2
 8006fc8:	009b      	lsls	r3, r3, #2
 8006fca:	440b      	add	r3, r1
 8006fcc:	3324      	adds	r3, #36	; 0x24
 8006fce:	2201      	movs	r2, #1
 8006fd0:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	2200      	movs	r2, #0
 8006fd6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006fe0:	687a      	ldr	r2, [r7, #4]
 8006fe2:	33b0      	adds	r3, #176	; 0xb0
 8006fe4:	009b      	lsls	r3, r3, #2
 8006fe6:	4413      	add	r3, r2
 8006fe8:	685b      	ldr	r3, [r3, #4]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	2200      	movs	r2, #0
 8006ff2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	2200      	movs	r2, #0
 8006ffa:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8007004:	2b00      	cmp	r3, #0
 8007006:	d101      	bne.n	800700c <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8007008:	2302      	movs	r3, #2
 800700a:	e018      	b.n	800703e <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	7c1b      	ldrb	r3, [r3, #16]
 8007010:	2b00      	cmp	r3, #0
 8007012:	d10a      	bne.n	800702a <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007014:	4b0d      	ldr	r3, [pc, #52]	; (800704c <USBD_CDC_Init+0x1e8>)
 8007016:	7819      	ldrb	r1, [r3, #0]
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800701e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007022:	6878      	ldr	r0, [r7, #4]
 8007024:	f002 fb1e 	bl	8009664 <USBD_LL_PrepareReceive>
 8007028:	e008      	b.n	800703c <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800702a:	4b08      	ldr	r3, [pc, #32]	; (800704c <USBD_CDC_Init+0x1e8>)
 800702c:	7819      	ldrb	r1, [r3, #0]
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007034:	2340      	movs	r3, #64	; 0x40
 8007036:	6878      	ldr	r0, [r7, #4]
 8007038:	f002 fb14 	bl	8009664 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800703c:	2300      	movs	r3, #0
}
 800703e:	4618      	mov	r0, r3
 8007040:	3710      	adds	r7, #16
 8007042:	46bd      	mov	sp, r7
 8007044:	bd80      	pop	{r7, pc}
 8007046:	bf00      	nop
 8007048:	2000009b 	.word	0x2000009b
 800704c:	2000009c 	.word	0x2000009c
 8007050:	2000009d 	.word	0x2000009d

08007054 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007054:	b580      	push	{r7, lr}
 8007056:	b082      	sub	sp, #8
 8007058:	af00      	add	r7, sp, #0
 800705a:	6078      	str	r0, [r7, #4]
 800705c:	460b      	mov	r3, r1
 800705e:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8007060:	4b3a      	ldr	r3, [pc, #232]	; (800714c <USBD_CDC_DeInit+0xf8>)
 8007062:	781b      	ldrb	r3, [r3, #0]
 8007064:	4619      	mov	r1, r3
 8007066:	6878      	ldr	r0, [r7, #4]
 8007068:	f002 fa33 	bl	80094d2 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800706c:	4b37      	ldr	r3, [pc, #220]	; (800714c <USBD_CDC_DeInit+0xf8>)
 800706e:	781b      	ldrb	r3, [r3, #0]
 8007070:	f003 020f 	and.w	r2, r3, #15
 8007074:	6879      	ldr	r1, [r7, #4]
 8007076:	4613      	mov	r3, r2
 8007078:	009b      	lsls	r3, r3, #2
 800707a:	4413      	add	r3, r2
 800707c:	009b      	lsls	r3, r3, #2
 800707e:	440b      	add	r3, r1
 8007080:	3324      	adds	r3, #36	; 0x24
 8007082:	2200      	movs	r2, #0
 8007084:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8007086:	4b32      	ldr	r3, [pc, #200]	; (8007150 <USBD_CDC_DeInit+0xfc>)
 8007088:	781b      	ldrb	r3, [r3, #0]
 800708a:	4619      	mov	r1, r3
 800708c:	6878      	ldr	r0, [r7, #4]
 800708e:	f002 fa20 	bl	80094d2 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8007092:	4b2f      	ldr	r3, [pc, #188]	; (8007150 <USBD_CDC_DeInit+0xfc>)
 8007094:	781b      	ldrb	r3, [r3, #0]
 8007096:	f003 020f 	and.w	r2, r3, #15
 800709a:	6879      	ldr	r1, [r7, #4]
 800709c:	4613      	mov	r3, r2
 800709e:	009b      	lsls	r3, r3, #2
 80070a0:	4413      	add	r3, r2
 80070a2:	009b      	lsls	r3, r3, #2
 80070a4:	440b      	add	r3, r1
 80070a6:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80070aa:	2200      	movs	r2, #0
 80070ac:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 80070ae:	4b29      	ldr	r3, [pc, #164]	; (8007154 <USBD_CDC_DeInit+0x100>)
 80070b0:	781b      	ldrb	r3, [r3, #0]
 80070b2:	4619      	mov	r1, r3
 80070b4:	6878      	ldr	r0, [r7, #4]
 80070b6:	f002 fa0c 	bl	80094d2 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 80070ba:	4b26      	ldr	r3, [pc, #152]	; (8007154 <USBD_CDC_DeInit+0x100>)
 80070bc:	781b      	ldrb	r3, [r3, #0]
 80070be:	f003 020f 	and.w	r2, r3, #15
 80070c2:	6879      	ldr	r1, [r7, #4]
 80070c4:	4613      	mov	r3, r2
 80070c6:	009b      	lsls	r3, r3, #2
 80070c8:	4413      	add	r3, r2
 80070ca:	009b      	lsls	r3, r3, #2
 80070cc:	440b      	add	r3, r1
 80070ce:	3324      	adds	r3, #36	; 0x24
 80070d0:	2200      	movs	r2, #0
 80070d2:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 80070d4:	4b1f      	ldr	r3, [pc, #124]	; (8007154 <USBD_CDC_DeInit+0x100>)
 80070d6:	781b      	ldrb	r3, [r3, #0]
 80070d8:	f003 020f 	and.w	r2, r3, #15
 80070dc:	6879      	ldr	r1, [r7, #4]
 80070de:	4613      	mov	r3, r2
 80070e0:	009b      	lsls	r3, r3, #2
 80070e2:	4413      	add	r3, r2
 80070e4:	009b      	lsls	r3, r3, #2
 80070e6:	440b      	add	r3, r1
 80070e8:	3326      	adds	r3, #38	; 0x26
 80070ea:	2200      	movs	r2, #0
 80070ec:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	32b0      	adds	r2, #176	; 0xb0
 80070f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d01f      	beq.n	8007140 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007106:	687a      	ldr	r2, [r7, #4]
 8007108:	33b0      	adds	r3, #176	; 0xb0
 800710a:	009b      	lsls	r3, r3, #2
 800710c:	4413      	add	r3, r2
 800710e:	685b      	ldr	r3, [r3, #4]
 8007110:	685b      	ldr	r3, [r3, #4]
 8007112:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	32b0      	adds	r2, #176	; 0xb0
 800711e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007122:	4618      	mov	r0, r3
 8007124:	f002 fae0 	bl	80096e8 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	32b0      	adds	r2, #176	; 0xb0
 8007132:	2100      	movs	r1, #0
 8007134:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	2200      	movs	r2, #0
 800713c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8007140:	2300      	movs	r3, #0
}
 8007142:	4618      	mov	r0, r3
 8007144:	3708      	adds	r7, #8
 8007146:	46bd      	mov	sp, r7
 8007148:	bd80      	pop	{r7, pc}
 800714a:	bf00      	nop
 800714c:	2000009b 	.word	0x2000009b
 8007150:	2000009c 	.word	0x2000009c
 8007154:	2000009d 	.word	0x2000009d

08007158 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8007158:	b580      	push	{r7, lr}
 800715a:	b086      	sub	sp, #24
 800715c:	af00      	add	r7, sp, #0
 800715e:	6078      	str	r0, [r7, #4]
 8007160:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	32b0      	adds	r2, #176	; 0xb0
 800716c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007170:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8007172:	2300      	movs	r3, #0
 8007174:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8007176:	2300      	movs	r3, #0
 8007178:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800717a:	2300      	movs	r3, #0
 800717c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800717e:	693b      	ldr	r3, [r7, #16]
 8007180:	2b00      	cmp	r3, #0
 8007182:	d101      	bne.n	8007188 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8007184:	2303      	movs	r3, #3
 8007186:	e0bf      	b.n	8007308 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007188:	683b      	ldr	r3, [r7, #0]
 800718a:	781b      	ldrb	r3, [r3, #0]
 800718c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007190:	2b00      	cmp	r3, #0
 8007192:	d050      	beq.n	8007236 <USBD_CDC_Setup+0xde>
 8007194:	2b20      	cmp	r3, #32
 8007196:	f040 80af 	bne.w	80072f8 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800719a:	683b      	ldr	r3, [r7, #0]
 800719c:	88db      	ldrh	r3, [r3, #6]
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d03a      	beq.n	8007218 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80071a2:	683b      	ldr	r3, [r7, #0]
 80071a4:	781b      	ldrb	r3, [r3, #0]
 80071a6:	b25b      	sxtb	r3, r3
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	da1b      	bge.n	80071e4 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80071b2:	687a      	ldr	r2, [r7, #4]
 80071b4:	33b0      	adds	r3, #176	; 0xb0
 80071b6:	009b      	lsls	r3, r3, #2
 80071b8:	4413      	add	r3, r2
 80071ba:	685b      	ldr	r3, [r3, #4]
 80071bc:	689b      	ldr	r3, [r3, #8]
 80071be:	683a      	ldr	r2, [r7, #0]
 80071c0:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 80071c2:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80071c4:	683a      	ldr	r2, [r7, #0]
 80071c6:	88d2      	ldrh	r2, [r2, #6]
 80071c8:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80071ca:	683b      	ldr	r3, [r7, #0]
 80071cc:	88db      	ldrh	r3, [r3, #6]
 80071ce:	2b07      	cmp	r3, #7
 80071d0:	bf28      	it	cs
 80071d2:	2307      	movcs	r3, #7
 80071d4:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80071d6:	693b      	ldr	r3, [r7, #16]
 80071d8:	89fa      	ldrh	r2, [r7, #14]
 80071da:	4619      	mov	r1, r3
 80071dc:	6878      	ldr	r0, [r7, #4]
 80071de:	f001 fd43 	bl	8008c68 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 80071e2:	e090      	b.n	8007306 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 80071e4:	683b      	ldr	r3, [r7, #0]
 80071e6:	785a      	ldrb	r2, [r3, #1]
 80071e8:	693b      	ldr	r3, [r7, #16]
 80071ea:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 80071ee:	683b      	ldr	r3, [r7, #0]
 80071f0:	88db      	ldrh	r3, [r3, #6]
 80071f2:	2b3f      	cmp	r3, #63	; 0x3f
 80071f4:	d803      	bhi.n	80071fe <USBD_CDC_Setup+0xa6>
 80071f6:	683b      	ldr	r3, [r7, #0]
 80071f8:	88db      	ldrh	r3, [r3, #6]
 80071fa:	b2da      	uxtb	r2, r3
 80071fc:	e000      	b.n	8007200 <USBD_CDC_Setup+0xa8>
 80071fe:	2240      	movs	r2, #64	; 0x40
 8007200:	693b      	ldr	r3, [r7, #16]
 8007202:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8007206:	6939      	ldr	r1, [r7, #16]
 8007208:	693b      	ldr	r3, [r7, #16]
 800720a:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800720e:	461a      	mov	r2, r3
 8007210:	6878      	ldr	r0, [r7, #4]
 8007212:	f001 fd55 	bl	8008cc0 <USBD_CtlPrepareRx>
      break;
 8007216:	e076      	b.n	8007306 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800721e:	687a      	ldr	r2, [r7, #4]
 8007220:	33b0      	adds	r3, #176	; 0xb0
 8007222:	009b      	lsls	r3, r3, #2
 8007224:	4413      	add	r3, r2
 8007226:	685b      	ldr	r3, [r3, #4]
 8007228:	689b      	ldr	r3, [r3, #8]
 800722a:	683a      	ldr	r2, [r7, #0]
 800722c:	7850      	ldrb	r0, [r2, #1]
 800722e:	2200      	movs	r2, #0
 8007230:	6839      	ldr	r1, [r7, #0]
 8007232:	4798      	blx	r3
      break;
 8007234:	e067      	b.n	8007306 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007236:	683b      	ldr	r3, [r7, #0]
 8007238:	785b      	ldrb	r3, [r3, #1]
 800723a:	2b0b      	cmp	r3, #11
 800723c:	d851      	bhi.n	80072e2 <USBD_CDC_Setup+0x18a>
 800723e:	a201      	add	r2, pc, #4	; (adr r2, 8007244 <USBD_CDC_Setup+0xec>)
 8007240:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007244:	08007275 	.word	0x08007275
 8007248:	080072f1 	.word	0x080072f1
 800724c:	080072e3 	.word	0x080072e3
 8007250:	080072e3 	.word	0x080072e3
 8007254:	080072e3 	.word	0x080072e3
 8007258:	080072e3 	.word	0x080072e3
 800725c:	080072e3 	.word	0x080072e3
 8007260:	080072e3 	.word	0x080072e3
 8007264:	080072e3 	.word	0x080072e3
 8007268:	080072e3 	.word	0x080072e3
 800726c:	0800729f 	.word	0x0800729f
 8007270:	080072c9 	.word	0x080072c9
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800727a:	b2db      	uxtb	r3, r3
 800727c:	2b03      	cmp	r3, #3
 800727e:	d107      	bne.n	8007290 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8007280:	f107 030a 	add.w	r3, r7, #10
 8007284:	2202      	movs	r2, #2
 8007286:	4619      	mov	r1, r3
 8007288:	6878      	ldr	r0, [r7, #4]
 800728a:	f001 fced 	bl	8008c68 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800728e:	e032      	b.n	80072f6 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8007290:	6839      	ldr	r1, [r7, #0]
 8007292:	6878      	ldr	r0, [r7, #4]
 8007294:	f001 fc77 	bl	8008b86 <USBD_CtlError>
            ret = USBD_FAIL;
 8007298:	2303      	movs	r3, #3
 800729a:	75fb      	strb	r3, [r7, #23]
          break;
 800729c:	e02b      	b.n	80072f6 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80072a4:	b2db      	uxtb	r3, r3
 80072a6:	2b03      	cmp	r3, #3
 80072a8:	d107      	bne.n	80072ba <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80072aa:	f107 030d 	add.w	r3, r7, #13
 80072ae:	2201      	movs	r2, #1
 80072b0:	4619      	mov	r1, r3
 80072b2:	6878      	ldr	r0, [r7, #4]
 80072b4:	f001 fcd8 	bl	8008c68 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80072b8:	e01d      	b.n	80072f6 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80072ba:	6839      	ldr	r1, [r7, #0]
 80072bc:	6878      	ldr	r0, [r7, #4]
 80072be:	f001 fc62 	bl	8008b86 <USBD_CtlError>
            ret = USBD_FAIL;
 80072c2:	2303      	movs	r3, #3
 80072c4:	75fb      	strb	r3, [r7, #23]
          break;
 80072c6:	e016      	b.n	80072f6 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80072ce:	b2db      	uxtb	r3, r3
 80072d0:	2b03      	cmp	r3, #3
 80072d2:	d00f      	beq.n	80072f4 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 80072d4:	6839      	ldr	r1, [r7, #0]
 80072d6:	6878      	ldr	r0, [r7, #4]
 80072d8:	f001 fc55 	bl	8008b86 <USBD_CtlError>
            ret = USBD_FAIL;
 80072dc:	2303      	movs	r3, #3
 80072de:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80072e0:	e008      	b.n	80072f4 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80072e2:	6839      	ldr	r1, [r7, #0]
 80072e4:	6878      	ldr	r0, [r7, #4]
 80072e6:	f001 fc4e 	bl	8008b86 <USBD_CtlError>
          ret = USBD_FAIL;
 80072ea:	2303      	movs	r3, #3
 80072ec:	75fb      	strb	r3, [r7, #23]
          break;
 80072ee:	e002      	b.n	80072f6 <USBD_CDC_Setup+0x19e>
          break;
 80072f0:	bf00      	nop
 80072f2:	e008      	b.n	8007306 <USBD_CDC_Setup+0x1ae>
          break;
 80072f4:	bf00      	nop
      }
      break;
 80072f6:	e006      	b.n	8007306 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 80072f8:	6839      	ldr	r1, [r7, #0]
 80072fa:	6878      	ldr	r0, [r7, #4]
 80072fc:	f001 fc43 	bl	8008b86 <USBD_CtlError>
      ret = USBD_FAIL;
 8007300:	2303      	movs	r3, #3
 8007302:	75fb      	strb	r3, [r7, #23]
      break;
 8007304:	bf00      	nop
  }

  return (uint8_t)ret;
 8007306:	7dfb      	ldrb	r3, [r7, #23]
}
 8007308:	4618      	mov	r0, r3
 800730a:	3718      	adds	r7, #24
 800730c:	46bd      	mov	sp, r7
 800730e:	bd80      	pop	{r7, pc}

08007310 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007310:	b580      	push	{r7, lr}
 8007312:	b084      	sub	sp, #16
 8007314:	af00      	add	r7, sp, #0
 8007316:	6078      	str	r0, [r7, #4]
 8007318:	460b      	mov	r3, r1
 800731a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007322:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	32b0      	adds	r2, #176	; 0xb0
 800732e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007332:	2b00      	cmp	r3, #0
 8007334:	d101      	bne.n	800733a <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8007336:	2303      	movs	r3, #3
 8007338:	e065      	b.n	8007406 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	32b0      	adds	r2, #176	; 0xb0
 8007344:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007348:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800734a:	78fb      	ldrb	r3, [r7, #3]
 800734c:	f003 020f 	and.w	r2, r3, #15
 8007350:	6879      	ldr	r1, [r7, #4]
 8007352:	4613      	mov	r3, r2
 8007354:	009b      	lsls	r3, r3, #2
 8007356:	4413      	add	r3, r2
 8007358:	009b      	lsls	r3, r3, #2
 800735a:	440b      	add	r3, r1
 800735c:	3318      	adds	r3, #24
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	2b00      	cmp	r3, #0
 8007362:	d02f      	beq.n	80073c4 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8007364:	78fb      	ldrb	r3, [r7, #3]
 8007366:	f003 020f 	and.w	r2, r3, #15
 800736a:	6879      	ldr	r1, [r7, #4]
 800736c:	4613      	mov	r3, r2
 800736e:	009b      	lsls	r3, r3, #2
 8007370:	4413      	add	r3, r2
 8007372:	009b      	lsls	r3, r3, #2
 8007374:	440b      	add	r3, r1
 8007376:	3318      	adds	r3, #24
 8007378:	681a      	ldr	r2, [r3, #0]
 800737a:	78fb      	ldrb	r3, [r7, #3]
 800737c:	f003 010f 	and.w	r1, r3, #15
 8007380:	68f8      	ldr	r0, [r7, #12]
 8007382:	460b      	mov	r3, r1
 8007384:	00db      	lsls	r3, r3, #3
 8007386:	440b      	add	r3, r1
 8007388:	009b      	lsls	r3, r3, #2
 800738a:	4403      	add	r3, r0
 800738c:	3348      	adds	r3, #72	; 0x48
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	fbb2 f1f3 	udiv	r1, r2, r3
 8007394:	fb01 f303 	mul.w	r3, r1, r3
 8007398:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800739a:	2b00      	cmp	r3, #0
 800739c:	d112      	bne.n	80073c4 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800739e:	78fb      	ldrb	r3, [r7, #3]
 80073a0:	f003 020f 	and.w	r2, r3, #15
 80073a4:	6879      	ldr	r1, [r7, #4]
 80073a6:	4613      	mov	r3, r2
 80073a8:	009b      	lsls	r3, r3, #2
 80073aa:	4413      	add	r3, r2
 80073ac:	009b      	lsls	r3, r3, #2
 80073ae:	440b      	add	r3, r1
 80073b0:	3318      	adds	r3, #24
 80073b2:	2200      	movs	r2, #0
 80073b4:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80073b6:	78f9      	ldrb	r1, [r7, #3]
 80073b8:	2300      	movs	r3, #0
 80073ba:	2200      	movs	r2, #0
 80073bc:	6878      	ldr	r0, [r7, #4]
 80073be:	f002 f930 	bl	8009622 <USBD_LL_Transmit>
 80073c2:	e01f      	b.n	8007404 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 80073c4:	68bb      	ldr	r3, [r7, #8]
 80073c6:	2200      	movs	r2, #0
 80073c8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80073d2:	687a      	ldr	r2, [r7, #4]
 80073d4:	33b0      	adds	r3, #176	; 0xb0
 80073d6:	009b      	lsls	r3, r3, #2
 80073d8:	4413      	add	r3, r2
 80073da:	685b      	ldr	r3, [r3, #4]
 80073dc:	691b      	ldr	r3, [r3, #16]
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d010      	beq.n	8007404 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80073e8:	687a      	ldr	r2, [r7, #4]
 80073ea:	33b0      	adds	r3, #176	; 0xb0
 80073ec:	009b      	lsls	r3, r3, #2
 80073ee:	4413      	add	r3, r2
 80073f0:	685b      	ldr	r3, [r3, #4]
 80073f2:	691b      	ldr	r3, [r3, #16]
 80073f4:	68ba      	ldr	r2, [r7, #8]
 80073f6:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 80073fa:	68ba      	ldr	r2, [r7, #8]
 80073fc:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8007400:	78fa      	ldrb	r2, [r7, #3]
 8007402:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8007404:	2300      	movs	r3, #0
}
 8007406:	4618      	mov	r0, r3
 8007408:	3710      	adds	r7, #16
 800740a:	46bd      	mov	sp, r7
 800740c:	bd80      	pop	{r7, pc}

0800740e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800740e:	b580      	push	{r7, lr}
 8007410:	b084      	sub	sp, #16
 8007412:	af00      	add	r7, sp, #0
 8007414:	6078      	str	r0, [r7, #4]
 8007416:	460b      	mov	r3, r1
 8007418:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	32b0      	adds	r2, #176	; 0xb0
 8007424:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007428:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	32b0      	adds	r2, #176	; 0xb0
 8007434:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007438:	2b00      	cmp	r3, #0
 800743a:	d101      	bne.n	8007440 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800743c:	2303      	movs	r3, #3
 800743e:	e01a      	b.n	8007476 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8007440:	78fb      	ldrb	r3, [r7, #3]
 8007442:	4619      	mov	r1, r3
 8007444:	6878      	ldr	r0, [r7, #4]
 8007446:	f002 f92e 	bl	80096a6 <USBD_LL_GetRxDataSize>
 800744a:	4602      	mov	r2, r0
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007458:	687a      	ldr	r2, [r7, #4]
 800745a:	33b0      	adds	r3, #176	; 0xb0
 800745c:	009b      	lsls	r3, r3, #2
 800745e:	4413      	add	r3, r2
 8007460:	685b      	ldr	r3, [r3, #4]
 8007462:	68db      	ldr	r3, [r3, #12]
 8007464:	68fa      	ldr	r2, [r7, #12]
 8007466:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800746a:	68fa      	ldr	r2, [r7, #12]
 800746c:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8007470:	4611      	mov	r1, r2
 8007472:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8007474:	2300      	movs	r3, #0
}
 8007476:	4618      	mov	r0, r3
 8007478:	3710      	adds	r7, #16
 800747a:	46bd      	mov	sp, r7
 800747c:	bd80      	pop	{r7, pc}

0800747e <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800747e:	b580      	push	{r7, lr}
 8007480:	b084      	sub	sp, #16
 8007482:	af00      	add	r7, sp, #0
 8007484:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	32b0      	adds	r2, #176	; 0xb0
 8007490:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007494:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	2b00      	cmp	r3, #0
 800749a:	d101      	bne.n	80074a0 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800749c:	2303      	movs	r3, #3
 800749e:	e025      	b.n	80074ec <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80074a6:	687a      	ldr	r2, [r7, #4]
 80074a8:	33b0      	adds	r3, #176	; 0xb0
 80074aa:	009b      	lsls	r3, r3, #2
 80074ac:	4413      	add	r3, r2
 80074ae:	685b      	ldr	r3, [r3, #4]
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d01a      	beq.n	80074ea <USBD_CDC_EP0_RxReady+0x6c>
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80074ba:	2bff      	cmp	r3, #255	; 0xff
 80074bc:	d015      	beq.n	80074ea <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80074c4:	687a      	ldr	r2, [r7, #4]
 80074c6:	33b0      	adds	r3, #176	; 0xb0
 80074c8:	009b      	lsls	r3, r3, #2
 80074ca:	4413      	add	r3, r2
 80074cc:	685b      	ldr	r3, [r3, #4]
 80074ce:	689b      	ldr	r3, [r3, #8]
 80074d0:	68fa      	ldr	r2, [r7, #12]
 80074d2:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 80074d6:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 80074d8:	68fa      	ldr	r2, [r7, #12]
 80074da:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80074de:	b292      	uxth	r2, r2
 80074e0:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	22ff      	movs	r2, #255	; 0xff
 80074e6:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 80074ea:	2300      	movs	r3, #0
}
 80074ec:	4618      	mov	r0, r3
 80074ee:	3710      	adds	r7, #16
 80074f0:	46bd      	mov	sp, r7
 80074f2:	bd80      	pop	{r7, pc}

080074f4 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80074f4:	b580      	push	{r7, lr}
 80074f6:	b086      	sub	sp, #24
 80074f8:	af00      	add	r7, sp, #0
 80074fa:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80074fc:	2182      	movs	r1, #130	; 0x82
 80074fe:	4818      	ldr	r0, [pc, #96]	; (8007560 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007500:	f000 fd09 	bl	8007f16 <USBD_GetEpDesc>
 8007504:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007506:	2101      	movs	r1, #1
 8007508:	4815      	ldr	r0, [pc, #84]	; (8007560 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800750a:	f000 fd04 	bl	8007f16 <USBD_GetEpDesc>
 800750e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007510:	2181      	movs	r1, #129	; 0x81
 8007512:	4813      	ldr	r0, [pc, #76]	; (8007560 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007514:	f000 fcff 	bl	8007f16 <USBD_GetEpDesc>
 8007518:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800751a:	697b      	ldr	r3, [r7, #20]
 800751c:	2b00      	cmp	r3, #0
 800751e:	d002      	beq.n	8007526 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8007520:	697b      	ldr	r3, [r7, #20]
 8007522:	2210      	movs	r2, #16
 8007524:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007526:	693b      	ldr	r3, [r7, #16]
 8007528:	2b00      	cmp	r3, #0
 800752a:	d006      	beq.n	800753a <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800752c:	693b      	ldr	r3, [r7, #16]
 800752e:	2200      	movs	r2, #0
 8007530:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007534:	711a      	strb	r2, [r3, #4]
 8007536:	2200      	movs	r2, #0
 8007538:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	2b00      	cmp	r3, #0
 800753e:	d006      	beq.n	800754e <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	2200      	movs	r2, #0
 8007544:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007548:	711a      	strb	r2, [r3, #4]
 800754a:	2200      	movs	r2, #0
 800754c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	2243      	movs	r2, #67	; 0x43
 8007552:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007554:	4b02      	ldr	r3, [pc, #8]	; (8007560 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8007556:	4618      	mov	r0, r3
 8007558:	3718      	adds	r7, #24
 800755a:	46bd      	mov	sp, r7
 800755c:	bd80      	pop	{r7, pc}
 800755e:	bf00      	nop
 8007560:	20000058 	.word	0x20000058

08007564 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8007564:	b580      	push	{r7, lr}
 8007566:	b086      	sub	sp, #24
 8007568:	af00      	add	r7, sp, #0
 800756a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800756c:	2182      	movs	r1, #130	; 0x82
 800756e:	4818      	ldr	r0, [pc, #96]	; (80075d0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007570:	f000 fcd1 	bl	8007f16 <USBD_GetEpDesc>
 8007574:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007576:	2101      	movs	r1, #1
 8007578:	4815      	ldr	r0, [pc, #84]	; (80075d0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800757a:	f000 fccc 	bl	8007f16 <USBD_GetEpDesc>
 800757e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007580:	2181      	movs	r1, #129	; 0x81
 8007582:	4813      	ldr	r0, [pc, #76]	; (80075d0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007584:	f000 fcc7 	bl	8007f16 <USBD_GetEpDesc>
 8007588:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800758a:	697b      	ldr	r3, [r7, #20]
 800758c:	2b00      	cmp	r3, #0
 800758e:	d002      	beq.n	8007596 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8007590:	697b      	ldr	r3, [r7, #20]
 8007592:	2210      	movs	r2, #16
 8007594:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007596:	693b      	ldr	r3, [r7, #16]
 8007598:	2b00      	cmp	r3, #0
 800759a:	d006      	beq.n	80075aa <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800759c:	693b      	ldr	r3, [r7, #16]
 800759e:	2200      	movs	r2, #0
 80075a0:	711a      	strb	r2, [r3, #4]
 80075a2:	2200      	movs	r2, #0
 80075a4:	f042 0202 	orr.w	r2, r2, #2
 80075a8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d006      	beq.n	80075be <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	2200      	movs	r2, #0
 80075b4:	711a      	strb	r2, [r3, #4]
 80075b6:	2200      	movs	r2, #0
 80075b8:	f042 0202 	orr.w	r2, r2, #2
 80075bc:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	2243      	movs	r2, #67	; 0x43
 80075c2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80075c4:	4b02      	ldr	r3, [pc, #8]	; (80075d0 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 80075c6:	4618      	mov	r0, r3
 80075c8:	3718      	adds	r7, #24
 80075ca:	46bd      	mov	sp, r7
 80075cc:	bd80      	pop	{r7, pc}
 80075ce:	bf00      	nop
 80075d0:	20000058 	.word	0x20000058

080075d4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80075d4:	b580      	push	{r7, lr}
 80075d6:	b086      	sub	sp, #24
 80075d8:	af00      	add	r7, sp, #0
 80075da:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80075dc:	2182      	movs	r1, #130	; 0x82
 80075de:	4818      	ldr	r0, [pc, #96]	; (8007640 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80075e0:	f000 fc99 	bl	8007f16 <USBD_GetEpDesc>
 80075e4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80075e6:	2101      	movs	r1, #1
 80075e8:	4815      	ldr	r0, [pc, #84]	; (8007640 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80075ea:	f000 fc94 	bl	8007f16 <USBD_GetEpDesc>
 80075ee:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80075f0:	2181      	movs	r1, #129	; 0x81
 80075f2:	4813      	ldr	r0, [pc, #76]	; (8007640 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80075f4:	f000 fc8f 	bl	8007f16 <USBD_GetEpDesc>
 80075f8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80075fa:	697b      	ldr	r3, [r7, #20]
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d002      	beq.n	8007606 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8007600:	697b      	ldr	r3, [r7, #20]
 8007602:	2210      	movs	r2, #16
 8007604:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007606:	693b      	ldr	r3, [r7, #16]
 8007608:	2b00      	cmp	r3, #0
 800760a:	d006      	beq.n	800761a <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800760c:	693b      	ldr	r3, [r7, #16]
 800760e:	2200      	movs	r2, #0
 8007610:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007614:	711a      	strb	r2, [r3, #4]
 8007616:	2200      	movs	r2, #0
 8007618:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	2b00      	cmp	r3, #0
 800761e:	d006      	beq.n	800762e <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	2200      	movs	r2, #0
 8007624:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007628:	711a      	strb	r2, [r3, #4]
 800762a:	2200      	movs	r2, #0
 800762c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	2243      	movs	r2, #67	; 0x43
 8007632:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007634:	4b02      	ldr	r3, [pc, #8]	; (8007640 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8007636:	4618      	mov	r0, r3
 8007638:	3718      	adds	r7, #24
 800763a:	46bd      	mov	sp, r7
 800763c:	bd80      	pop	{r7, pc}
 800763e:	bf00      	nop
 8007640:	20000058 	.word	0x20000058

08007644 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8007644:	b480      	push	{r7}
 8007646:	b083      	sub	sp, #12
 8007648:	af00      	add	r7, sp, #0
 800764a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	220a      	movs	r2, #10
 8007650:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8007652:	4b03      	ldr	r3, [pc, #12]	; (8007660 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8007654:	4618      	mov	r0, r3
 8007656:	370c      	adds	r7, #12
 8007658:	46bd      	mov	sp, r7
 800765a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800765e:	4770      	bx	lr
 8007660:	20000014 	.word	0x20000014

08007664 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8007664:	b480      	push	{r7}
 8007666:	b083      	sub	sp, #12
 8007668:	af00      	add	r7, sp, #0
 800766a:	6078      	str	r0, [r7, #4]
 800766c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800766e:	683b      	ldr	r3, [r7, #0]
 8007670:	2b00      	cmp	r3, #0
 8007672:	d101      	bne.n	8007678 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8007674:	2303      	movs	r3, #3
 8007676:	e009      	b.n	800768c <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800767e:	687a      	ldr	r2, [r7, #4]
 8007680:	33b0      	adds	r3, #176	; 0xb0
 8007682:	009b      	lsls	r3, r3, #2
 8007684:	4413      	add	r3, r2
 8007686:	683a      	ldr	r2, [r7, #0]
 8007688:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800768a:	2300      	movs	r3, #0
}
 800768c:	4618      	mov	r0, r3
 800768e:	370c      	adds	r7, #12
 8007690:	46bd      	mov	sp, r7
 8007692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007696:	4770      	bx	lr

08007698 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8007698:	b480      	push	{r7}
 800769a:	b087      	sub	sp, #28
 800769c:	af00      	add	r7, sp, #0
 800769e:	60f8      	str	r0, [r7, #12]
 80076a0:	60b9      	str	r1, [r7, #8]
 80076a2:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	32b0      	adds	r2, #176	; 0xb0
 80076ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80076b2:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 80076b4:	697b      	ldr	r3, [r7, #20]
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d101      	bne.n	80076be <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80076ba:	2303      	movs	r3, #3
 80076bc:	e008      	b.n	80076d0 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 80076be:	697b      	ldr	r3, [r7, #20]
 80076c0:	68ba      	ldr	r2, [r7, #8]
 80076c2:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80076c6:	697b      	ldr	r3, [r7, #20]
 80076c8:	687a      	ldr	r2, [r7, #4]
 80076ca:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 80076ce:	2300      	movs	r3, #0
}
 80076d0:	4618      	mov	r0, r3
 80076d2:	371c      	adds	r7, #28
 80076d4:	46bd      	mov	sp, r7
 80076d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076da:	4770      	bx	lr

080076dc <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80076dc:	b480      	push	{r7}
 80076de:	b085      	sub	sp, #20
 80076e0:	af00      	add	r7, sp, #0
 80076e2:	6078      	str	r0, [r7, #4]
 80076e4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	32b0      	adds	r2, #176	; 0xb0
 80076f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80076f4:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d101      	bne.n	8007700 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 80076fc:	2303      	movs	r3, #3
 80076fe:	e004      	b.n	800770a <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	683a      	ldr	r2, [r7, #0]
 8007704:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8007708:	2300      	movs	r3, #0
}
 800770a:	4618      	mov	r0, r3
 800770c:	3714      	adds	r7, #20
 800770e:	46bd      	mov	sp, r7
 8007710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007714:	4770      	bx	lr
	...

08007718 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8007718:	b580      	push	{r7, lr}
 800771a:	b084      	sub	sp, #16
 800771c:	af00      	add	r7, sp, #0
 800771e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	32b0      	adds	r2, #176	; 0xb0
 800772a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800772e:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	32b0      	adds	r2, #176	; 0xb0
 800773a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800773e:	2b00      	cmp	r3, #0
 8007740:	d101      	bne.n	8007746 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8007742:	2303      	movs	r3, #3
 8007744:	e018      	b.n	8007778 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	7c1b      	ldrb	r3, [r3, #16]
 800774a:	2b00      	cmp	r3, #0
 800774c:	d10a      	bne.n	8007764 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800774e:	4b0c      	ldr	r3, [pc, #48]	; (8007780 <USBD_CDC_ReceivePacket+0x68>)
 8007750:	7819      	ldrb	r1, [r3, #0]
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007758:	f44f 7300 	mov.w	r3, #512	; 0x200
 800775c:	6878      	ldr	r0, [r7, #4]
 800775e:	f001 ff81 	bl	8009664 <USBD_LL_PrepareReceive>
 8007762:	e008      	b.n	8007776 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007764:	4b06      	ldr	r3, [pc, #24]	; (8007780 <USBD_CDC_ReceivePacket+0x68>)
 8007766:	7819      	ldrb	r1, [r3, #0]
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800776e:	2340      	movs	r3, #64	; 0x40
 8007770:	6878      	ldr	r0, [r7, #4]
 8007772:	f001 ff77 	bl	8009664 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007776:	2300      	movs	r3, #0
}
 8007778:	4618      	mov	r0, r3
 800777a:	3710      	adds	r7, #16
 800777c:	46bd      	mov	sp, r7
 800777e:	bd80      	pop	{r7, pc}
 8007780:	2000009c 	.word	0x2000009c

08007784 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007784:	b580      	push	{r7, lr}
 8007786:	b086      	sub	sp, #24
 8007788:	af00      	add	r7, sp, #0
 800778a:	60f8      	str	r0, [r7, #12]
 800778c:	60b9      	str	r1, [r7, #8]
 800778e:	4613      	mov	r3, r2
 8007790:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	2b00      	cmp	r3, #0
 8007796:	d101      	bne.n	800779c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8007798:	2303      	movs	r3, #3
 800779a:	e01f      	b.n	80077dc <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	2200      	movs	r2, #0
 80077a0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	2200      	movs	r2, #0
 80077a8:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	2200      	movs	r2, #0
 80077b0:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80077b4:	68bb      	ldr	r3, [r7, #8]
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d003      	beq.n	80077c2 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	68ba      	ldr	r2, [r7, #8]
 80077be:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	2201      	movs	r2, #1
 80077c6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	79fa      	ldrb	r2, [r7, #7]
 80077ce:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80077d0:	68f8      	ldr	r0, [r7, #12]
 80077d2:	f001 fdeb 	bl	80093ac <USBD_LL_Init>
 80077d6:	4603      	mov	r3, r0
 80077d8:	75fb      	strb	r3, [r7, #23]

  return ret;
 80077da:	7dfb      	ldrb	r3, [r7, #23]
}
 80077dc:	4618      	mov	r0, r3
 80077de:	3718      	adds	r7, #24
 80077e0:	46bd      	mov	sp, r7
 80077e2:	bd80      	pop	{r7, pc}

080077e4 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80077e4:	b580      	push	{r7, lr}
 80077e6:	b084      	sub	sp, #16
 80077e8:	af00      	add	r7, sp, #0
 80077ea:	6078      	str	r0, [r7, #4]
 80077ec:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80077ee:	2300      	movs	r3, #0
 80077f0:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80077f2:	683b      	ldr	r3, [r7, #0]
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d101      	bne.n	80077fc <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80077f8:	2303      	movs	r3, #3
 80077fa:	e025      	b.n	8007848 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	683a      	ldr	r2, [r7, #0]
 8007800:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	32ae      	adds	r2, #174	; 0xae
 800780e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007812:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007814:	2b00      	cmp	r3, #0
 8007816:	d00f      	beq.n	8007838 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	32ae      	adds	r2, #174	; 0xae
 8007822:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007826:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007828:	f107 020e 	add.w	r2, r7, #14
 800782c:	4610      	mov	r0, r2
 800782e:	4798      	blx	r3
 8007830:	4602      	mov	r2, r0
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800783e:	1c5a      	adds	r2, r3, #1
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8007846:	2300      	movs	r3, #0
}
 8007848:	4618      	mov	r0, r3
 800784a:	3710      	adds	r7, #16
 800784c:	46bd      	mov	sp, r7
 800784e:	bd80      	pop	{r7, pc}

08007850 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007850:	b580      	push	{r7, lr}
 8007852:	b082      	sub	sp, #8
 8007854:	af00      	add	r7, sp, #0
 8007856:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8007858:	6878      	ldr	r0, [r7, #4]
 800785a:	f001 fdf9 	bl	8009450 <USBD_LL_Start>
 800785e:	4603      	mov	r3, r0
}
 8007860:	4618      	mov	r0, r3
 8007862:	3708      	adds	r7, #8
 8007864:	46bd      	mov	sp, r7
 8007866:	bd80      	pop	{r7, pc}

08007868 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8007868:	b480      	push	{r7}
 800786a:	b083      	sub	sp, #12
 800786c:	af00      	add	r7, sp, #0
 800786e:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007870:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8007872:	4618      	mov	r0, r3
 8007874:	370c      	adds	r7, #12
 8007876:	46bd      	mov	sp, r7
 8007878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800787c:	4770      	bx	lr

0800787e <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800787e:	b580      	push	{r7, lr}
 8007880:	b084      	sub	sp, #16
 8007882:	af00      	add	r7, sp, #0
 8007884:	6078      	str	r0, [r7, #4]
 8007886:	460b      	mov	r3, r1
 8007888:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800788a:	2300      	movs	r3, #0
 800788c:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007894:	2b00      	cmp	r3, #0
 8007896:	d009      	beq.n	80078ac <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	78fa      	ldrb	r2, [r7, #3]
 80078a2:	4611      	mov	r1, r2
 80078a4:	6878      	ldr	r0, [r7, #4]
 80078a6:	4798      	blx	r3
 80078a8:	4603      	mov	r3, r0
 80078aa:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80078ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80078ae:	4618      	mov	r0, r3
 80078b0:	3710      	adds	r7, #16
 80078b2:	46bd      	mov	sp, r7
 80078b4:	bd80      	pop	{r7, pc}

080078b6 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80078b6:	b580      	push	{r7, lr}
 80078b8:	b084      	sub	sp, #16
 80078ba:	af00      	add	r7, sp, #0
 80078bc:	6078      	str	r0, [r7, #4]
 80078be:	460b      	mov	r3, r1
 80078c0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80078c2:	2300      	movs	r3, #0
 80078c4:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80078cc:	685b      	ldr	r3, [r3, #4]
 80078ce:	78fa      	ldrb	r2, [r7, #3]
 80078d0:	4611      	mov	r1, r2
 80078d2:	6878      	ldr	r0, [r7, #4]
 80078d4:	4798      	blx	r3
 80078d6:	4603      	mov	r3, r0
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d001      	beq.n	80078e0 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 80078dc:	2303      	movs	r3, #3
 80078de:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80078e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80078e2:	4618      	mov	r0, r3
 80078e4:	3710      	adds	r7, #16
 80078e6:	46bd      	mov	sp, r7
 80078e8:	bd80      	pop	{r7, pc}

080078ea <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80078ea:	b580      	push	{r7, lr}
 80078ec:	b084      	sub	sp, #16
 80078ee:	af00      	add	r7, sp, #0
 80078f0:	6078      	str	r0, [r7, #4]
 80078f2:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80078fa:	6839      	ldr	r1, [r7, #0]
 80078fc:	4618      	mov	r0, r3
 80078fe:	f001 f908 	bl	8008b12 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	2201      	movs	r2, #1
 8007906:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8007910:	461a      	mov	r2, r3
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800791e:	f003 031f 	and.w	r3, r3, #31
 8007922:	2b02      	cmp	r3, #2
 8007924:	d01a      	beq.n	800795c <USBD_LL_SetupStage+0x72>
 8007926:	2b02      	cmp	r3, #2
 8007928:	d822      	bhi.n	8007970 <USBD_LL_SetupStage+0x86>
 800792a:	2b00      	cmp	r3, #0
 800792c:	d002      	beq.n	8007934 <USBD_LL_SetupStage+0x4a>
 800792e:	2b01      	cmp	r3, #1
 8007930:	d00a      	beq.n	8007948 <USBD_LL_SetupStage+0x5e>
 8007932:	e01d      	b.n	8007970 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800793a:	4619      	mov	r1, r3
 800793c:	6878      	ldr	r0, [r7, #4]
 800793e:	f000 fb5f 	bl	8008000 <USBD_StdDevReq>
 8007942:	4603      	mov	r3, r0
 8007944:	73fb      	strb	r3, [r7, #15]
      break;
 8007946:	e020      	b.n	800798a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800794e:	4619      	mov	r1, r3
 8007950:	6878      	ldr	r0, [r7, #4]
 8007952:	f000 fbc7 	bl	80080e4 <USBD_StdItfReq>
 8007956:	4603      	mov	r3, r0
 8007958:	73fb      	strb	r3, [r7, #15]
      break;
 800795a:	e016      	b.n	800798a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007962:	4619      	mov	r1, r3
 8007964:	6878      	ldr	r0, [r7, #4]
 8007966:	f000 fc29 	bl	80081bc <USBD_StdEPReq>
 800796a:	4603      	mov	r3, r0
 800796c:	73fb      	strb	r3, [r7, #15]
      break;
 800796e:	e00c      	b.n	800798a <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007976:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800797a:	b2db      	uxtb	r3, r3
 800797c:	4619      	mov	r1, r3
 800797e:	6878      	ldr	r0, [r7, #4]
 8007980:	f001 fdc6 	bl	8009510 <USBD_LL_StallEP>
 8007984:	4603      	mov	r3, r0
 8007986:	73fb      	strb	r3, [r7, #15]
      break;
 8007988:	bf00      	nop
  }

  return ret;
 800798a:	7bfb      	ldrb	r3, [r7, #15]
}
 800798c:	4618      	mov	r0, r3
 800798e:	3710      	adds	r7, #16
 8007990:	46bd      	mov	sp, r7
 8007992:	bd80      	pop	{r7, pc}

08007994 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007994:	b580      	push	{r7, lr}
 8007996:	b086      	sub	sp, #24
 8007998:	af00      	add	r7, sp, #0
 800799a:	60f8      	str	r0, [r7, #12]
 800799c:	460b      	mov	r3, r1
 800799e:	607a      	str	r2, [r7, #4]
 80079a0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 80079a2:	2300      	movs	r3, #0
 80079a4:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 80079a6:	7afb      	ldrb	r3, [r7, #11]
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d16e      	bne.n	8007a8a <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80079b2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80079ba:	2b03      	cmp	r3, #3
 80079bc:	f040 8098 	bne.w	8007af0 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 80079c0:	693b      	ldr	r3, [r7, #16]
 80079c2:	689a      	ldr	r2, [r3, #8]
 80079c4:	693b      	ldr	r3, [r7, #16]
 80079c6:	68db      	ldr	r3, [r3, #12]
 80079c8:	429a      	cmp	r2, r3
 80079ca:	d913      	bls.n	80079f4 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 80079cc:	693b      	ldr	r3, [r7, #16]
 80079ce:	689a      	ldr	r2, [r3, #8]
 80079d0:	693b      	ldr	r3, [r7, #16]
 80079d2:	68db      	ldr	r3, [r3, #12]
 80079d4:	1ad2      	subs	r2, r2, r3
 80079d6:	693b      	ldr	r3, [r7, #16]
 80079d8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80079da:	693b      	ldr	r3, [r7, #16]
 80079dc:	68da      	ldr	r2, [r3, #12]
 80079de:	693b      	ldr	r3, [r7, #16]
 80079e0:	689b      	ldr	r3, [r3, #8]
 80079e2:	4293      	cmp	r3, r2
 80079e4:	bf28      	it	cs
 80079e6:	4613      	movcs	r3, r2
 80079e8:	461a      	mov	r2, r3
 80079ea:	6879      	ldr	r1, [r7, #4]
 80079ec:	68f8      	ldr	r0, [r7, #12]
 80079ee:	f001 f984 	bl	8008cfa <USBD_CtlContinueRx>
 80079f2:	e07d      	b.n	8007af0 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80079fa:	f003 031f 	and.w	r3, r3, #31
 80079fe:	2b02      	cmp	r3, #2
 8007a00:	d014      	beq.n	8007a2c <USBD_LL_DataOutStage+0x98>
 8007a02:	2b02      	cmp	r3, #2
 8007a04:	d81d      	bhi.n	8007a42 <USBD_LL_DataOutStage+0xae>
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d002      	beq.n	8007a10 <USBD_LL_DataOutStage+0x7c>
 8007a0a:	2b01      	cmp	r3, #1
 8007a0c:	d003      	beq.n	8007a16 <USBD_LL_DataOutStage+0x82>
 8007a0e:	e018      	b.n	8007a42 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8007a10:	2300      	movs	r3, #0
 8007a12:	75bb      	strb	r3, [r7, #22]
            break;
 8007a14:	e018      	b.n	8007a48 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8007a1c:	b2db      	uxtb	r3, r3
 8007a1e:	4619      	mov	r1, r3
 8007a20:	68f8      	ldr	r0, [r7, #12]
 8007a22:	f000 fa5e 	bl	8007ee2 <USBD_CoreFindIF>
 8007a26:	4603      	mov	r3, r0
 8007a28:	75bb      	strb	r3, [r7, #22]
            break;
 8007a2a:	e00d      	b.n	8007a48 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8007a32:	b2db      	uxtb	r3, r3
 8007a34:	4619      	mov	r1, r3
 8007a36:	68f8      	ldr	r0, [r7, #12]
 8007a38:	f000 fa60 	bl	8007efc <USBD_CoreFindEP>
 8007a3c:	4603      	mov	r3, r0
 8007a3e:	75bb      	strb	r3, [r7, #22]
            break;
 8007a40:	e002      	b.n	8007a48 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8007a42:	2300      	movs	r3, #0
 8007a44:	75bb      	strb	r3, [r7, #22]
            break;
 8007a46:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8007a48:	7dbb      	ldrb	r3, [r7, #22]
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d119      	bne.n	8007a82 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a54:	b2db      	uxtb	r3, r3
 8007a56:	2b03      	cmp	r3, #3
 8007a58:	d113      	bne.n	8007a82 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8007a5a:	7dba      	ldrb	r2, [r7, #22]
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	32ae      	adds	r2, #174	; 0xae
 8007a60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a64:	691b      	ldr	r3, [r3, #16]
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d00b      	beq.n	8007a82 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8007a6a:	7dba      	ldrb	r2, [r7, #22]
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8007a72:	7dba      	ldrb	r2, [r7, #22]
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	32ae      	adds	r2, #174	; 0xae
 8007a78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a7c:	691b      	ldr	r3, [r3, #16]
 8007a7e:	68f8      	ldr	r0, [r7, #12]
 8007a80:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8007a82:	68f8      	ldr	r0, [r7, #12]
 8007a84:	f001 f94a 	bl	8008d1c <USBD_CtlSendStatus>
 8007a88:	e032      	b.n	8007af0 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8007a8a:	7afb      	ldrb	r3, [r7, #11]
 8007a8c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007a90:	b2db      	uxtb	r3, r3
 8007a92:	4619      	mov	r1, r3
 8007a94:	68f8      	ldr	r0, [r7, #12]
 8007a96:	f000 fa31 	bl	8007efc <USBD_CoreFindEP>
 8007a9a:	4603      	mov	r3, r0
 8007a9c:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007a9e:	7dbb      	ldrb	r3, [r7, #22]
 8007aa0:	2bff      	cmp	r3, #255	; 0xff
 8007aa2:	d025      	beq.n	8007af0 <USBD_LL_DataOutStage+0x15c>
 8007aa4:	7dbb      	ldrb	r3, [r7, #22]
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d122      	bne.n	8007af0 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007ab0:	b2db      	uxtb	r3, r3
 8007ab2:	2b03      	cmp	r3, #3
 8007ab4:	d117      	bne.n	8007ae6 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8007ab6:	7dba      	ldrb	r2, [r7, #22]
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	32ae      	adds	r2, #174	; 0xae
 8007abc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ac0:	699b      	ldr	r3, [r3, #24]
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d00f      	beq.n	8007ae6 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8007ac6:	7dba      	ldrb	r2, [r7, #22]
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8007ace:	7dba      	ldrb	r2, [r7, #22]
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	32ae      	adds	r2, #174	; 0xae
 8007ad4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ad8:	699b      	ldr	r3, [r3, #24]
 8007ada:	7afa      	ldrb	r2, [r7, #11]
 8007adc:	4611      	mov	r1, r2
 8007ade:	68f8      	ldr	r0, [r7, #12]
 8007ae0:	4798      	blx	r3
 8007ae2:	4603      	mov	r3, r0
 8007ae4:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8007ae6:	7dfb      	ldrb	r3, [r7, #23]
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d001      	beq.n	8007af0 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8007aec:	7dfb      	ldrb	r3, [r7, #23]
 8007aee:	e000      	b.n	8007af2 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8007af0:	2300      	movs	r3, #0
}
 8007af2:	4618      	mov	r0, r3
 8007af4:	3718      	adds	r7, #24
 8007af6:	46bd      	mov	sp, r7
 8007af8:	bd80      	pop	{r7, pc}

08007afa <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007afa:	b580      	push	{r7, lr}
 8007afc:	b086      	sub	sp, #24
 8007afe:	af00      	add	r7, sp, #0
 8007b00:	60f8      	str	r0, [r7, #12]
 8007b02:	460b      	mov	r3, r1
 8007b04:	607a      	str	r2, [r7, #4]
 8007b06:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8007b08:	7afb      	ldrb	r3, [r7, #11]
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d16f      	bne.n	8007bee <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	3314      	adds	r3, #20
 8007b12:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007b1a:	2b02      	cmp	r3, #2
 8007b1c:	d15a      	bne.n	8007bd4 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8007b1e:	693b      	ldr	r3, [r7, #16]
 8007b20:	689a      	ldr	r2, [r3, #8]
 8007b22:	693b      	ldr	r3, [r7, #16]
 8007b24:	68db      	ldr	r3, [r3, #12]
 8007b26:	429a      	cmp	r2, r3
 8007b28:	d914      	bls.n	8007b54 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8007b2a:	693b      	ldr	r3, [r7, #16]
 8007b2c:	689a      	ldr	r2, [r3, #8]
 8007b2e:	693b      	ldr	r3, [r7, #16]
 8007b30:	68db      	ldr	r3, [r3, #12]
 8007b32:	1ad2      	subs	r2, r2, r3
 8007b34:	693b      	ldr	r3, [r7, #16]
 8007b36:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8007b38:	693b      	ldr	r3, [r7, #16]
 8007b3a:	689b      	ldr	r3, [r3, #8]
 8007b3c:	461a      	mov	r2, r3
 8007b3e:	6879      	ldr	r1, [r7, #4]
 8007b40:	68f8      	ldr	r0, [r7, #12]
 8007b42:	f001 f8ac 	bl	8008c9e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007b46:	2300      	movs	r3, #0
 8007b48:	2200      	movs	r2, #0
 8007b4a:	2100      	movs	r1, #0
 8007b4c:	68f8      	ldr	r0, [r7, #12]
 8007b4e:	f001 fd89 	bl	8009664 <USBD_LL_PrepareReceive>
 8007b52:	e03f      	b.n	8007bd4 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8007b54:	693b      	ldr	r3, [r7, #16]
 8007b56:	68da      	ldr	r2, [r3, #12]
 8007b58:	693b      	ldr	r3, [r7, #16]
 8007b5a:	689b      	ldr	r3, [r3, #8]
 8007b5c:	429a      	cmp	r2, r3
 8007b5e:	d11c      	bne.n	8007b9a <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8007b60:	693b      	ldr	r3, [r7, #16]
 8007b62:	685a      	ldr	r2, [r3, #4]
 8007b64:	693b      	ldr	r3, [r7, #16]
 8007b66:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8007b68:	429a      	cmp	r2, r3
 8007b6a:	d316      	bcc.n	8007b9a <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8007b6c:	693b      	ldr	r3, [r7, #16]
 8007b6e:	685a      	ldr	r2, [r3, #4]
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007b76:	429a      	cmp	r2, r3
 8007b78:	d20f      	bcs.n	8007b9a <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007b7a:	2200      	movs	r2, #0
 8007b7c:	2100      	movs	r1, #0
 8007b7e:	68f8      	ldr	r0, [r7, #12]
 8007b80:	f001 f88d 	bl	8008c9e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	2200      	movs	r2, #0
 8007b88:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007b8c:	2300      	movs	r3, #0
 8007b8e:	2200      	movs	r2, #0
 8007b90:	2100      	movs	r1, #0
 8007b92:	68f8      	ldr	r0, [r7, #12]
 8007b94:	f001 fd66 	bl	8009664 <USBD_LL_PrepareReceive>
 8007b98:	e01c      	b.n	8007bd4 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007ba0:	b2db      	uxtb	r3, r3
 8007ba2:	2b03      	cmp	r3, #3
 8007ba4:	d10f      	bne.n	8007bc6 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007bac:	68db      	ldr	r3, [r3, #12]
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d009      	beq.n	8007bc6 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	2200      	movs	r2, #0
 8007bb6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007bc0:	68db      	ldr	r3, [r3, #12]
 8007bc2:	68f8      	ldr	r0, [r7, #12]
 8007bc4:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8007bc6:	2180      	movs	r1, #128	; 0x80
 8007bc8:	68f8      	ldr	r0, [r7, #12]
 8007bca:	f001 fca1 	bl	8009510 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8007bce:	68f8      	ldr	r0, [r7, #12]
 8007bd0:	f001 f8b7 	bl	8008d42 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d03a      	beq.n	8007c54 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8007bde:	68f8      	ldr	r0, [r7, #12]
 8007be0:	f7ff fe42 	bl	8007868 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	2200      	movs	r2, #0
 8007be8:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8007bec:	e032      	b.n	8007c54 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8007bee:	7afb      	ldrb	r3, [r7, #11]
 8007bf0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007bf4:	b2db      	uxtb	r3, r3
 8007bf6:	4619      	mov	r1, r3
 8007bf8:	68f8      	ldr	r0, [r7, #12]
 8007bfa:	f000 f97f 	bl	8007efc <USBD_CoreFindEP>
 8007bfe:	4603      	mov	r3, r0
 8007c00:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007c02:	7dfb      	ldrb	r3, [r7, #23]
 8007c04:	2bff      	cmp	r3, #255	; 0xff
 8007c06:	d025      	beq.n	8007c54 <USBD_LL_DataInStage+0x15a>
 8007c08:	7dfb      	ldrb	r3, [r7, #23]
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d122      	bne.n	8007c54 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007c14:	b2db      	uxtb	r3, r3
 8007c16:	2b03      	cmp	r3, #3
 8007c18:	d11c      	bne.n	8007c54 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8007c1a:	7dfa      	ldrb	r2, [r7, #23]
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	32ae      	adds	r2, #174	; 0xae
 8007c20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c24:	695b      	ldr	r3, [r3, #20]
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d014      	beq.n	8007c54 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8007c2a:	7dfa      	ldrb	r2, [r7, #23]
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8007c32:	7dfa      	ldrb	r2, [r7, #23]
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	32ae      	adds	r2, #174	; 0xae
 8007c38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c3c:	695b      	ldr	r3, [r3, #20]
 8007c3e:	7afa      	ldrb	r2, [r7, #11]
 8007c40:	4611      	mov	r1, r2
 8007c42:	68f8      	ldr	r0, [r7, #12]
 8007c44:	4798      	blx	r3
 8007c46:	4603      	mov	r3, r0
 8007c48:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8007c4a:	7dbb      	ldrb	r3, [r7, #22]
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d001      	beq.n	8007c54 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8007c50:	7dbb      	ldrb	r3, [r7, #22]
 8007c52:	e000      	b.n	8007c56 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8007c54:	2300      	movs	r3, #0
}
 8007c56:	4618      	mov	r0, r3
 8007c58:	3718      	adds	r7, #24
 8007c5a:	46bd      	mov	sp, r7
 8007c5c:	bd80      	pop	{r7, pc}

08007c5e <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007c5e:	b580      	push	{r7, lr}
 8007c60:	b084      	sub	sp, #16
 8007c62:	af00      	add	r7, sp, #0
 8007c64:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8007c66:	2300      	movs	r3, #0
 8007c68:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	2201      	movs	r2, #1
 8007c6e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	2200      	movs	r2, #0
 8007c76:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	2200      	movs	r2, #0
 8007c7e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	2200      	movs	r2, #0
 8007c84:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	2200      	movs	r2, #0
 8007c8c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d014      	beq.n	8007cc4 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007ca0:	685b      	ldr	r3, [r3, #4]
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d00e      	beq.n	8007cc4 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007cac:	685b      	ldr	r3, [r3, #4]
 8007cae:	687a      	ldr	r2, [r7, #4]
 8007cb0:	6852      	ldr	r2, [r2, #4]
 8007cb2:	b2d2      	uxtb	r2, r2
 8007cb4:	4611      	mov	r1, r2
 8007cb6:	6878      	ldr	r0, [r7, #4]
 8007cb8:	4798      	blx	r3
 8007cba:	4603      	mov	r3, r0
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d001      	beq.n	8007cc4 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8007cc0:	2303      	movs	r3, #3
 8007cc2:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007cc4:	2340      	movs	r3, #64	; 0x40
 8007cc6:	2200      	movs	r2, #0
 8007cc8:	2100      	movs	r1, #0
 8007cca:	6878      	ldr	r0, [r7, #4]
 8007ccc:	f001 fbdb 	bl	8009486 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	2201      	movs	r2, #1
 8007cd4:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	2240      	movs	r2, #64	; 0x40
 8007cdc:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007ce0:	2340      	movs	r3, #64	; 0x40
 8007ce2:	2200      	movs	r2, #0
 8007ce4:	2180      	movs	r1, #128	; 0x80
 8007ce6:	6878      	ldr	r0, [r7, #4]
 8007ce8:	f001 fbcd 	bl	8009486 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	2201      	movs	r2, #1
 8007cf0:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	2240      	movs	r2, #64	; 0x40
 8007cf6:	621a      	str	r2, [r3, #32]

  return ret;
 8007cf8:	7bfb      	ldrb	r3, [r7, #15]
}
 8007cfa:	4618      	mov	r0, r3
 8007cfc:	3710      	adds	r7, #16
 8007cfe:	46bd      	mov	sp, r7
 8007d00:	bd80      	pop	{r7, pc}

08007d02 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007d02:	b480      	push	{r7}
 8007d04:	b083      	sub	sp, #12
 8007d06:	af00      	add	r7, sp, #0
 8007d08:	6078      	str	r0, [r7, #4]
 8007d0a:	460b      	mov	r3, r1
 8007d0c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	78fa      	ldrb	r2, [r7, #3]
 8007d12:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007d14:	2300      	movs	r3, #0
}
 8007d16:	4618      	mov	r0, r3
 8007d18:	370c      	adds	r7, #12
 8007d1a:	46bd      	mov	sp, r7
 8007d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d20:	4770      	bx	lr

08007d22 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007d22:	b480      	push	{r7}
 8007d24:	b083      	sub	sp, #12
 8007d26:	af00      	add	r7, sp, #0
 8007d28:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007d30:	b2da      	uxtb	r2, r3
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	2204      	movs	r2, #4
 8007d3c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8007d40:	2300      	movs	r3, #0
}
 8007d42:	4618      	mov	r0, r3
 8007d44:	370c      	adds	r7, #12
 8007d46:	46bd      	mov	sp, r7
 8007d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d4c:	4770      	bx	lr

08007d4e <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007d4e:	b480      	push	{r7}
 8007d50:	b083      	sub	sp, #12
 8007d52:	af00      	add	r7, sp, #0
 8007d54:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007d5c:	b2db      	uxtb	r3, r3
 8007d5e:	2b04      	cmp	r3, #4
 8007d60:	d106      	bne.n	8007d70 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8007d68:	b2da      	uxtb	r2, r3
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8007d70:	2300      	movs	r3, #0
}
 8007d72:	4618      	mov	r0, r3
 8007d74:	370c      	adds	r7, #12
 8007d76:	46bd      	mov	sp, r7
 8007d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d7c:	4770      	bx	lr

08007d7e <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007d7e:	b580      	push	{r7, lr}
 8007d80:	b082      	sub	sp, #8
 8007d82:	af00      	add	r7, sp, #0
 8007d84:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007d8c:	b2db      	uxtb	r3, r3
 8007d8e:	2b03      	cmp	r3, #3
 8007d90:	d110      	bne.n	8007db4 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d00b      	beq.n	8007db4 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007da2:	69db      	ldr	r3, [r3, #28]
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d005      	beq.n	8007db4 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007dae:	69db      	ldr	r3, [r3, #28]
 8007db0:	6878      	ldr	r0, [r7, #4]
 8007db2:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8007db4:	2300      	movs	r3, #0
}
 8007db6:	4618      	mov	r0, r3
 8007db8:	3708      	adds	r7, #8
 8007dba:	46bd      	mov	sp, r7
 8007dbc:	bd80      	pop	{r7, pc}

08007dbe <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8007dbe:	b580      	push	{r7, lr}
 8007dc0:	b082      	sub	sp, #8
 8007dc2:	af00      	add	r7, sp, #0
 8007dc4:	6078      	str	r0, [r7, #4]
 8007dc6:	460b      	mov	r3, r1
 8007dc8:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	32ae      	adds	r2, #174	; 0xae
 8007dd4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	d101      	bne.n	8007de0 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8007ddc:	2303      	movs	r3, #3
 8007dde:	e01c      	b.n	8007e1a <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007de6:	b2db      	uxtb	r3, r3
 8007de8:	2b03      	cmp	r3, #3
 8007dea:	d115      	bne.n	8007e18 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	32ae      	adds	r2, #174	; 0xae
 8007df6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007dfa:	6a1b      	ldr	r3, [r3, #32]
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d00b      	beq.n	8007e18 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	32ae      	adds	r2, #174	; 0xae
 8007e0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e0e:	6a1b      	ldr	r3, [r3, #32]
 8007e10:	78fa      	ldrb	r2, [r7, #3]
 8007e12:	4611      	mov	r1, r2
 8007e14:	6878      	ldr	r0, [r7, #4]
 8007e16:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007e18:	2300      	movs	r3, #0
}
 8007e1a:	4618      	mov	r0, r3
 8007e1c:	3708      	adds	r7, #8
 8007e1e:	46bd      	mov	sp, r7
 8007e20:	bd80      	pop	{r7, pc}

08007e22 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8007e22:	b580      	push	{r7, lr}
 8007e24:	b082      	sub	sp, #8
 8007e26:	af00      	add	r7, sp, #0
 8007e28:	6078      	str	r0, [r7, #4]
 8007e2a:	460b      	mov	r3, r1
 8007e2c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	32ae      	adds	r2, #174	; 0xae
 8007e38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d101      	bne.n	8007e44 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8007e40:	2303      	movs	r3, #3
 8007e42:	e01c      	b.n	8007e7e <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007e4a:	b2db      	uxtb	r3, r3
 8007e4c:	2b03      	cmp	r3, #3
 8007e4e:	d115      	bne.n	8007e7c <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	32ae      	adds	r2, #174	; 0xae
 8007e5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d00b      	beq.n	8007e7c <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	32ae      	adds	r2, #174	; 0xae
 8007e6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e74:	78fa      	ldrb	r2, [r7, #3]
 8007e76:	4611      	mov	r1, r2
 8007e78:	6878      	ldr	r0, [r7, #4]
 8007e7a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007e7c:	2300      	movs	r3, #0
}
 8007e7e:	4618      	mov	r0, r3
 8007e80:	3708      	adds	r7, #8
 8007e82:	46bd      	mov	sp, r7
 8007e84:	bd80      	pop	{r7, pc}

08007e86 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8007e86:	b480      	push	{r7}
 8007e88:	b083      	sub	sp, #12
 8007e8a:	af00      	add	r7, sp, #0
 8007e8c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007e8e:	2300      	movs	r3, #0
}
 8007e90:	4618      	mov	r0, r3
 8007e92:	370c      	adds	r7, #12
 8007e94:	46bd      	mov	sp, r7
 8007e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e9a:	4770      	bx	lr

08007e9c <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8007e9c:	b580      	push	{r7, lr}
 8007e9e:	b084      	sub	sp, #16
 8007ea0:	af00      	add	r7, sp, #0
 8007ea2:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8007ea4:	2300      	movs	r3, #0
 8007ea6:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	2201      	movs	r2, #1
 8007eac:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d00e      	beq.n	8007ed8 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007ec0:	685b      	ldr	r3, [r3, #4]
 8007ec2:	687a      	ldr	r2, [r7, #4]
 8007ec4:	6852      	ldr	r2, [r2, #4]
 8007ec6:	b2d2      	uxtb	r2, r2
 8007ec8:	4611      	mov	r1, r2
 8007eca:	6878      	ldr	r0, [r7, #4]
 8007ecc:	4798      	blx	r3
 8007ece:	4603      	mov	r3, r0
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d001      	beq.n	8007ed8 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8007ed4:	2303      	movs	r3, #3
 8007ed6:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007ed8:	7bfb      	ldrb	r3, [r7, #15]
}
 8007eda:	4618      	mov	r0, r3
 8007edc:	3710      	adds	r7, #16
 8007ede:	46bd      	mov	sp, r7
 8007ee0:	bd80      	pop	{r7, pc}

08007ee2 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8007ee2:	b480      	push	{r7}
 8007ee4:	b083      	sub	sp, #12
 8007ee6:	af00      	add	r7, sp, #0
 8007ee8:	6078      	str	r0, [r7, #4]
 8007eea:	460b      	mov	r3, r1
 8007eec:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007eee:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007ef0:	4618      	mov	r0, r3
 8007ef2:	370c      	adds	r7, #12
 8007ef4:	46bd      	mov	sp, r7
 8007ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007efa:	4770      	bx	lr

08007efc <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8007efc:	b480      	push	{r7}
 8007efe:	b083      	sub	sp, #12
 8007f00:	af00      	add	r7, sp, #0
 8007f02:	6078      	str	r0, [r7, #4]
 8007f04:	460b      	mov	r3, r1
 8007f06:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007f08:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007f0a:	4618      	mov	r0, r3
 8007f0c:	370c      	adds	r7, #12
 8007f0e:	46bd      	mov	sp, r7
 8007f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f14:	4770      	bx	lr

08007f16 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8007f16:	b580      	push	{r7, lr}
 8007f18:	b086      	sub	sp, #24
 8007f1a:	af00      	add	r7, sp, #0
 8007f1c:	6078      	str	r0, [r7, #4]
 8007f1e:	460b      	mov	r3, r1
 8007f20:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8007f2a:	2300      	movs	r3, #0
 8007f2c:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	885b      	ldrh	r3, [r3, #2]
 8007f32:	b29a      	uxth	r2, r3
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	781b      	ldrb	r3, [r3, #0]
 8007f38:	b29b      	uxth	r3, r3
 8007f3a:	429a      	cmp	r2, r3
 8007f3c:	d920      	bls.n	8007f80 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	781b      	ldrb	r3, [r3, #0]
 8007f42:	b29b      	uxth	r3, r3
 8007f44:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8007f46:	e013      	b.n	8007f70 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8007f48:	f107 030a 	add.w	r3, r7, #10
 8007f4c:	4619      	mov	r1, r3
 8007f4e:	6978      	ldr	r0, [r7, #20]
 8007f50:	f000 f81b 	bl	8007f8a <USBD_GetNextDesc>
 8007f54:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8007f56:	697b      	ldr	r3, [r7, #20]
 8007f58:	785b      	ldrb	r3, [r3, #1]
 8007f5a:	2b05      	cmp	r3, #5
 8007f5c:	d108      	bne.n	8007f70 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8007f5e:	697b      	ldr	r3, [r7, #20]
 8007f60:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8007f62:	693b      	ldr	r3, [r7, #16]
 8007f64:	789b      	ldrb	r3, [r3, #2]
 8007f66:	78fa      	ldrb	r2, [r7, #3]
 8007f68:	429a      	cmp	r2, r3
 8007f6a:	d008      	beq.n	8007f7e <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8007f6c:	2300      	movs	r3, #0
 8007f6e:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	885b      	ldrh	r3, [r3, #2]
 8007f74:	b29a      	uxth	r2, r3
 8007f76:	897b      	ldrh	r3, [r7, #10]
 8007f78:	429a      	cmp	r2, r3
 8007f7a:	d8e5      	bhi.n	8007f48 <USBD_GetEpDesc+0x32>
 8007f7c:	e000      	b.n	8007f80 <USBD_GetEpDesc+0x6a>
          break;
 8007f7e:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8007f80:	693b      	ldr	r3, [r7, #16]
}
 8007f82:	4618      	mov	r0, r3
 8007f84:	3718      	adds	r7, #24
 8007f86:	46bd      	mov	sp, r7
 8007f88:	bd80      	pop	{r7, pc}

08007f8a <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8007f8a:	b480      	push	{r7}
 8007f8c:	b085      	sub	sp, #20
 8007f8e:	af00      	add	r7, sp, #0
 8007f90:	6078      	str	r0, [r7, #4]
 8007f92:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8007f98:	683b      	ldr	r3, [r7, #0]
 8007f9a:	881a      	ldrh	r2, [r3, #0]
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	781b      	ldrb	r3, [r3, #0]
 8007fa0:	b29b      	uxth	r3, r3
 8007fa2:	4413      	add	r3, r2
 8007fa4:	b29a      	uxth	r2, r3
 8007fa6:	683b      	ldr	r3, [r7, #0]
 8007fa8:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	781b      	ldrb	r3, [r3, #0]
 8007fae:	461a      	mov	r2, r3
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	4413      	add	r3, r2
 8007fb4:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8007fb6:	68fb      	ldr	r3, [r7, #12]
}
 8007fb8:	4618      	mov	r0, r3
 8007fba:	3714      	adds	r7, #20
 8007fbc:	46bd      	mov	sp, r7
 8007fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fc2:	4770      	bx	lr

08007fc4 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8007fc4:	b480      	push	{r7}
 8007fc6:	b087      	sub	sp, #28
 8007fc8:	af00      	add	r7, sp, #0
 8007fca:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8007fd0:	697b      	ldr	r3, [r7, #20]
 8007fd2:	781b      	ldrb	r3, [r3, #0]
 8007fd4:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8007fd6:	697b      	ldr	r3, [r7, #20]
 8007fd8:	3301      	adds	r3, #1
 8007fda:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8007fdc:	697b      	ldr	r3, [r7, #20]
 8007fde:	781b      	ldrb	r3, [r3, #0]
 8007fe0:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8007fe2:	8a3b      	ldrh	r3, [r7, #16]
 8007fe4:	021b      	lsls	r3, r3, #8
 8007fe6:	b21a      	sxth	r2, r3
 8007fe8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007fec:	4313      	orrs	r3, r2
 8007fee:	b21b      	sxth	r3, r3
 8007ff0:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8007ff2:	89fb      	ldrh	r3, [r7, #14]
}
 8007ff4:	4618      	mov	r0, r3
 8007ff6:	371c      	adds	r7, #28
 8007ff8:	46bd      	mov	sp, r7
 8007ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ffe:	4770      	bx	lr

08008000 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008000:	b580      	push	{r7, lr}
 8008002:	b084      	sub	sp, #16
 8008004:	af00      	add	r7, sp, #0
 8008006:	6078      	str	r0, [r7, #4]
 8008008:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800800a:	2300      	movs	r3, #0
 800800c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800800e:	683b      	ldr	r3, [r7, #0]
 8008010:	781b      	ldrb	r3, [r3, #0]
 8008012:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008016:	2b40      	cmp	r3, #64	; 0x40
 8008018:	d005      	beq.n	8008026 <USBD_StdDevReq+0x26>
 800801a:	2b40      	cmp	r3, #64	; 0x40
 800801c:	d857      	bhi.n	80080ce <USBD_StdDevReq+0xce>
 800801e:	2b00      	cmp	r3, #0
 8008020:	d00f      	beq.n	8008042 <USBD_StdDevReq+0x42>
 8008022:	2b20      	cmp	r3, #32
 8008024:	d153      	bne.n	80080ce <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	32ae      	adds	r2, #174	; 0xae
 8008030:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008034:	689b      	ldr	r3, [r3, #8]
 8008036:	6839      	ldr	r1, [r7, #0]
 8008038:	6878      	ldr	r0, [r7, #4]
 800803a:	4798      	blx	r3
 800803c:	4603      	mov	r3, r0
 800803e:	73fb      	strb	r3, [r7, #15]
      break;
 8008040:	e04a      	b.n	80080d8 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008042:	683b      	ldr	r3, [r7, #0]
 8008044:	785b      	ldrb	r3, [r3, #1]
 8008046:	2b09      	cmp	r3, #9
 8008048:	d83b      	bhi.n	80080c2 <USBD_StdDevReq+0xc2>
 800804a:	a201      	add	r2, pc, #4	; (adr r2, 8008050 <USBD_StdDevReq+0x50>)
 800804c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008050:	080080a5 	.word	0x080080a5
 8008054:	080080b9 	.word	0x080080b9
 8008058:	080080c3 	.word	0x080080c3
 800805c:	080080af 	.word	0x080080af
 8008060:	080080c3 	.word	0x080080c3
 8008064:	08008083 	.word	0x08008083
 8008068:	08008079 	.word	0x08008079
 800806c:	080080c3 	.word	0x080080c3
 8008070:	0800809b 	.word	0x0800809b
 8008074:	0800808d 	.word	0x0800808d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8008078:	6839      	ldr	r1, [r7, #0]
 800807a:	6878      	ldr	r0, [r7, #4]
 800807c:	f000 fa3c 	bl	80084f8 <USBD_GetDescriptor>
          break;
 8008080:	e024      	b.n	80080cc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8008082:	6839      	ldr	r1, [r7, #0]
 8008084:	6878      	ldr	r0, [r7, #4]
 8008086:	f000 fba1 	bl	80087cc <USBD_SetAddress>
          break;
 800808a:	e01f      	b.n	80080cc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800808c:	6839      	ldr	r1, [r7, #0]
 800808e:	6878      	ldr	r0, [r7, #4]
 8008090:	f000 fbe0 	bl	8008854 <USBD_SetConfig>
 8008094:	4603      	mov	r3, r0
 8008096:	73fb      	strb	r3, [r7, #15]
          break;
 8008098:	e018      	b.n	80080cc <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800809a:	6839      	ldr	r1, [r7, #0]
 800809c:	6878      	ldr	r0, [r7, #4]
 800809e:	f000 fc83 	bl	80089a8 <USBD_GetConfig>
          break;
 80080a2:	e013      	b.n	80080cc <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80080a4:	6839      	ldr	r1, [r7, #0]
 80080a6:	6878      	ldr	r0, [r7, #4]
 80080a8:	f000 fcb4 	bl	8008a14 <USBD_GetStatus>
          break;
 80080ac:	e00e      	b.n	80080cc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80080ae:	6839      	ldr	r1, [r7, #0]
 80080b0:	6878      	ldr	r0, [r7, #4]
 80080b2:	f000 fce3 	bl	8008a7c <USBD_SetFeature>
          break;
 80080b6:	e009      	b.n	80080cc <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80080b8:	6839      	ldr	r1, [r7, #0]
 80080ba:	6878      	ldr	r0, [r7, #4]
 80080bc:	f000 fd07 	bl	8008ace <USBD_ClrFeature>
          break;
 80080c0:	e004      	b.n	80080cc <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 80080c2:	6839      	ldr	r1, [r7, #0]
 80080c4:	6878      	ldr	r0, [r7, #4]
 80080c6:	f000 fd5e 	bl	8008b86 <USBD_CtlError>
          break;
 80080ca:	bf00      	nop
      }
      break;
 80080cc:	e004      	b.n	80080d8 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 80080ce:	6839      	ldr	r1, [r7, #0]
 80080d0:	6878      	ldr	r0, [r7, #4]
 80080d2:	f000 fd58 	bl	8008b86 <USBD_CtlError>
      break;
 80080d6:	bf00      	nop
  }

  return ret;
 80080d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80080da:	4618      	mov	r0, r3
 80080dc:	3710      	adds	r7, #16
 80080de:	46bd      	mov	sp, r7
 80080e0:	bd80      	pop	{r7, pc}
 80080e2:	bf00      	nop

080080e4 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80080e4:	b580      	push	{r7, lr}
 80080e6:	b084      	sub	sp, #16
 80080e8:	af00      	add	r7, sp, #0
 80080ea:	6078      	str	r0, [r7, #4]
 80080ec:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80080ee:	2300      	movs	r3, #0
 80080f0:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80080f2:	683b      	ldr	r3, [r7, #0]
 80080f4:	781b      	ldrb	r3, [r3, #0]
 80080f6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80080fa:	2b40      	cmp	r3, #64	; 0x40
 80080fc:	d005      	beq.n	800810a <USBD_StdItfReq+0x26>
 80080fe:	2b40      	cmp	r3, #64	; 0x40
 8008100:	d852      	bhi.n	80081a8 <USBD_StdItfReq+0xc4>
 8008102:	2b00      	cmp	r3, #0
 8008104:	d001      	beq.n	800810a <USBD_StdItfReq+0x26>
 8008106:	2b20      	cmp	r3, #32
 8008108:	d14e      	bne.n	80081a8 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008110:	b2db      	uxtb	r3, r3
 8008112:	3b01      	subs	r3, #1
 8008114:	2b02      	cmp	r3, #2
 8008116:	d840      	bhi.n	800819a <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008118:	683b      	ldr	r3, [r7, #0]
 800811a:	889b      	ldrh	r3, [r3, #4]
 800811c:	b2db      	uxtb	r3, r3
 800811e:	2b01      	cmp	r3, #1
 8008120:	d836      	bhi.n	8008190 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8008122:	683b      	ldr	r3, [r7, #0]
 8008124:	889b      	ldrh	r3, [r3, #4]
 8008126:	b2db      	uxtb	r3, r3
 8008128:	4619      	mov	r1, r3
 800812a:	6878      	ldr	r0, [r7, #4]
 800812c:	f7ff fed9 	bl	8007ee2 <USBD_CoreFindIF>
 8008130:	4603      	mov	r3, r0
 8008132:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008134:	7bbb      	ldrb	r3, [r7, #14]
 8008136:	2bff      	cmp	r3, #255	; 0xff
 8008138:	d01d      	beq.n	8008176 <USBD_StdItfReq+0x92>
 800813a:	7bbb      	ldrb	r3, [r7, #14]
 800813c:	2b00      	cmp	r3, #0
 800813e:	d11a      	bne.n	8008176 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8008140:	7bba      	ldrb	r2, [r7, #14]
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	32ae      	adds	r2, #174	; 0xae
 8008146:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800814a:	689b      	ldr	r3, [r3, #8]
 800814c:	2b00      	cmp	r3, #0
 800814e:	d00f      	beq.n	8008170 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8008150:	7bba      	ldrb	r2, [r7, #14]
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8008158:	7bba      	ldrb	r2, [r7, #14]
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	32ae      	adds	r2, #174	; 0xae
 800815e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008162:	689b      	ldr	r3, [r3, #8]
 8008164:	6839      	ldr	r1, [r7, #0]
 8008166:	6878      	ldr	r0, [r7, #4]
 8008168:	4798      	blx	r3
 800816a:	4603      	mov	r3, r0
 800816c:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800816e:	e004      	b.n	800817a <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8008170:	2303      	movs	r3, #3
 8008172:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8008174:	e001      	b.n	800817a <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8008176:	2303      	movs	r3, #3
 8008178:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800817a:	683b      	ldr	r3, [r7, #0]
 800817c:	88db      	ldrh	r3, [r3, #6]
 800817e:	2b00      	cmp	r3, #0
 8008180:	d110      	bne.n	80081a4 <USBD_StdItfReq+0xc0>
 8008182:	7bfb      	ldrb	r3, [r7, #15]
 8008184:	2b00      	cmp	r3, #0
 8008186:	d10d      	bne.n	80081a4 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8008188:	6878      	ldr	r0, [r7, #4]
 800818a:	f000 fdc7 	bl	8008d1c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800818e:	e009      	b.n	80081a4 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8008190:	6839      	ldr	r1, [r7, #0]
 8008192:	6878      	ldr	r0, [r7, #4]
 8008194:	f000 fcf7 	bl	8008b86 <USBD_CtlError>
          break;
 8008198:	e004      	b.n	80081a4 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800819a:	6839      	ldr	r1, [r7, #0]
 800819c:	6878      	ldr	r0, [r7, #4]
 800819e:	f000 fcf2 	bl	8008b86 <USBD_CtlError>
          break;
 80081a2:	e000      	b.n	80081a6 <USBD_StdItfReq+0xc2>
          break;
 80081a4:	bf00      	nop
      }
      break;
 80081a6:	e004      	b.n	80081b2 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 80081a8:	6839      	ldr	r1, [r7, #0]
 80081aa:	6878      	ldr	r0, [r7, #4]
 80081ac:	f000 fceb 	bl	8008b86 <USBD_CtlError>
      break;
 80081b0:	bf00      	nop
  }

  return ret;
 80081b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80081b4:	4618      	mov	r0, r3
 80081b6:	3710      	adds	r7, #16
 80081b8:	46bd      	mov	sp, r7
 80081ba:	bd80      	pop	{r7, pc}

080081bc <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80081bc:	b580      	push	{r7, lr}
 80081be:	b084      	sub	sp, #16
 80081c0:	af00      	add	r7, sp, #0
 80081c2:	6078      	str	r0, [r7, #4]
 80081c4:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 80081c6:	2300      	movs	r3, #0
 80081c8:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 80081ca:	683b      	ldr	r3, [r7, #0]
 80081cc:	889b      	ldrh	r3, [r3, #4]
 80081ce:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80081d0:	683b      	ldr	r3, [r7, #0]
 80081d2:	781b      	ldrb	r3, [r3, #0]
 80081d4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80081d8:	2b40      	cmp	r3, #64	; 0x40
 80081da:	d007      	beq.n	80081ec <USBD_StdEPReq+0x30>
 80081dc:	2b40      	cmp	r3, #64	; 0x40
 80081de:	f200 817f 	bhi.w	80084e0 <USBD_StdEPReq+0x324>
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d02a      	beq.n	800823c <USBD_StdEPReq+0x80>
 80081e6:	2b20      	cmp	r3, #32
 80081e8:	f040 817a 	bne.w	80084e0 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 80081ec:	7bbb      	ldrb	r3, [r7, #14]
 80081ee:	4619      	mov	r1, r3
 80081f0:	6878      	ldr	r0, [r7, #4]
 80081f2:	f7ff fe83 	bl	8007efc <USBD_CoreFindEP>
 80081f6:	4603      	mov	r3, r0
 80081f8:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80081fa:	7b7b      	ldrb	r3, [r7, #13]
 80081fc:	2bff      	cmp	r3, #255	; 0xff
 80081fe:	f000 8174 	beq.w	80084ea <USBD_StdEPReq+0x32e>
 8008202:	7b7b      	ldrb	r3, [r7, #13]
 8008204:	2b00      	cmp	r3, #0
 8008206:	f040 8170 	bne.w	80084ea <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800820a:	7b7a      	ldrb	r2, [r7, #13]
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8008212:	7b7a      	ldrb	r2, [r7, #13]
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	32ae      	adds	r2, #174	; 0xae
 8008218:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800821c:	689b      	ldr	r3, [r3, #8]
 800821e:	2b00      	cmp	r3, #0
 8008220:	f000 8163 	beq.w	80084ea <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8008224:	7b7a      	ldrb	r2, [r7, #13]
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	32ae      	adds	r2, #174	; 0xae
 800822a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800822e:	689b      	ldr	r3, [r3, #8]
 8008230:	6839      	ldr	r1, [r7, #0]
 8008232:	6878      	ldr	r0, [r7, #4]
 8008234:	4798      	blx	r3
 8008236:	4603      	mov	r3, r0
 8008238:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800823a:	e156      	b.n	80084ea <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800823c:	683b      	ldr	r3, [r7, #0]
 800823e:	785b      	ldrb	r3, [r3, #1]
 8008240:	2b03      	cmp	r3, #3
 8008242:	d008      	beq.n	8008256 <USBD_StdEPReq+0x9a>
 8008244:	2b03      	cmp	r3, #3
 8008246:	f300 8145 	bgt.w	80084d4 <USBD_StdEPReq+0x318>
 800824a:	2b00      	cmp	r3, #0
 800824c:	f000 809b 	beq.w	8008386 <USBD_StdEPReq+0x1ca>
 8008250:	2b01      	cmp	r3, #1
 8008252:	d03c      	beq.n	80082ce <USBD_StdEPReq+0x112>
 8008254:	e13e      	b.n	80084d4 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800825c:	b2db      	uxtb	r3, r3
 800825e:	2b02      	cmp	r3, #2
 8008260:	d002      	beq.n	8008268 <USBD_StdEPReq+0xac>
 8008262:	2b03      	cmp	r3, #3
 8008264:	d016      	beq.n	8008294 <USBD_StdEPReq+0xd8>
 8008266:	e02c      	b.n	80082c2 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008268:	7bbb      	ldrb	r3, [r7, #14]
 800826a:	2b00      	cmp	r3, #0
 800826c:	d00d      	beq.n	800828a <USBD_StdEPReq+0xce>
 800826e:	7bbb      	ldrb	r3, [r7, #14]
 8008270:	2b80      	cmp	r3, #128	; 0x80
 8008272:	d00a      	beq.n	800828a <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008274:	7bbb      	ldrb	r3, [r7, #14]
 8008276:	4619      	mov	r1, r3
 8008278:	6878      	ldr	r0, [r7, #4]
 800827a:	f001 f949 	bl	8009510 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800827e:	2180      	movs	r1, #128	; 0x80
 8008280:	6878      	ldr	r0, [r7, #4]
 8008282:	f001 f945 	bl	8009510 <USBD_LL_StallEP>
 8008286:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008288:	e020      	b.n	80082cc <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800828a:	6839      	ldr	r1, [r7, #0]
 800828c:	6878      	ldr	r0, [r7, #4]
 800828e:	f000 fc7a 	bl	8008b86 <USBD_CtlError>
              break;
 8008292:	e01b      	b.n	80082cc <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008294:	683b      	ldr	r3, [r7, #0]
 8008296:	885b      	ldrh	r3, [r3, #2]
 8008298:	2b00      	cmp	r3, #0
 800829a:	d10e      	bne.n	80082ba <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800829c:	7bbb      	ldrb	r3, [r7, #14]
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d00b      	beq.n	80082ba <USBD_StdEPReq+0xfe>
 80082a2:	7bbb      	ldrb	r3, [r7, #14]
 80082a4:	2b80      	cmp	r3, #128	; 0x80
 80082a6:	d008      	beq.n	80082ba <USBD_StdEPReq+0xfe>
 80082a8:	683b      	ldr	r3, [r7, #0]
 80082aa:	88db      	ldrh	r3, [r3, #6]
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d104      	bne.n	80082ba <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80082b0:	7bbb      	ldrb	r3, [r7, #14]
 80082b2:	4619      	mov	r1, r3
 80082b4:	6878      	ldr	r0, [r7, #4]
 80082b6:	f001 f92b 	bl	8009510 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80082ba:	6878      	ldr	r0, [r7, #4]
 80082bc:	f000 fd2e 	bl	8008d1c <USBD_CtlSendStatus>

              break;
 80082c0:	e004      	b.n	80082cc <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 80082c2:	6839      	ldr	r1, [r7, #0]
 80082c4:	6878      	ldr	r0, [r7, #4]
 80082c6:	f000 fc5e 	bl	8008b86 <USBD_CtlError>
              break;
 80082ca:	bf00      	nop
          }
          break;
 80082cc:	e107      	b.n	80084de <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80082d4:	b2db      	uxtb	r3, r3
 80082d6:	2b02      	cmp	r3, #2
 80082d8:	d002      	beq.n	80082e0 <USBD_StdEPReq+0x124>
 80082da:	2b03      	cmp	r3, #3
 80082dc:	d016      	beq.n	800830c <USBD_StdEPReq+0x150>
 80082de:	e04b      	b.n	8008378 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80082e0:	7bbb      	ldrb	r3, [r7, #14]
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d00d      	beq.n	8008302 <USBD_StdEPReq+0x146>
 80082e6:	7bbb      	ldrb	r3, [r7, #14]
 80082e8:	2b80      	cmp	r3, #128	; 0x80
 80082ea:	d00a      	beq.n	8008302 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80082ec:	7bbb      	ldrb	r3, [r7, #14]
 80082ee:	4619      	mov	r1, r3
 80082f0:	6878      	ldr	r0, [r7, #4]
 80082f2:	f001 f90d 	bl	8009510 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80082f6:	2180      	movs	r1, #128	; 0x80
 80082f8:	6878      	ldr	r0, [r7, #4]
 80082fa:	f001 f909 	bl	8009510 <USBD_LL_StallEP>
 80082fe:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008300:	e040      	b.n	8008384 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8008302:	6839      	ldr	r1, [r7, #0]
 8008304:	6878      	ldr	r0, [r7, #4]
 8008306:	f000 fc3e 	bl	8008b86 <USBD_CtlError>
              break;
 800830a:	e03b      	b.n	8008384 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800830c:	683b      	ldr	r3, [r7, #0]
 800830e:	885b      	ldrh	r3, [r3, #2]
 8008310:	2b00      	cmp	r3, #0
 8008312:	d136      	bne.n	8008382 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008314:	7bbb      	ldrb	r3, [r7, #14]
 8008316:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800831a:	2b00      	cmp	r3, #0
 800831c:	d004      	beq.n	8008328 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800831e:	7bbb      	ldrb	r3, [r7, #14]
 8008320:	4619      	mov	r1, r3
 8008322:	6878      	ldr	r0, [r7, #4]
 8008324:	f001 f913 	bl	800954e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8008328:	6878      	ldr	r0, [r7, #4]
 800832a:	f000 fcf7 	bl	8008d1c <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800832e:	7bbb      	ldrb	r3, [r7, #14]
 8008330:	4619      	mov	r1, r3
 8008332:	6878      	ldr	r0, [r7, #4]
 8008334:	f7ff fde2 	bl	8007efc <USBD_CoreFindEP>
 8008338:	4603      	mov	r3, r0
 800833a:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800833c:	7b7b      	ldrb	r3, [r7, #13]
 800833e:	2bff      	cmp	r3, #255	; 0xff
 8008340:	d01f      	beq.n	8008382 <USBD_StdEPReq+0x1c6>
 8008342:	7b7b      	ldrb	r3, [r7, #13]
 8008344:	2b00      	cmp	r3, #0
 8008346:	d11c      	bne.n	8008382 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8008348:	7b7a      	ldrb	r2, [r7, #13]
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8008350:	7b7a      	ldrb	r2, [r7, #13]
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	32ae      	adds	r2, #174	; 0xae
 8008356:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800835a:	689b      	ldr	r3, [r3, #8]
 800835c:	2b00      	cmp	r3, #0
 800835e:	d010      	beq.n	8008382 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8008360:	7b7a      	ldrb	r2, [r7, #13]
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	32ae      	adds	r2, #174	; 0xae
 8008366:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800836a:	689b      	ldr	r3, [r3, #8]
 800836c:	6839      	ldr	r1, [r7, #0]
 800836e:	6878      	ldr	r0, [r7, #4]
 8008370:	4798      	blx	r3
 8008372:	4603      	mov	r3, r0
 8008374:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8008376:	e004      	b.n	8008382 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8008378:	6839      	ldr	r1, [r7, #0]
 800837a:	6878      	ldr	r0, [r7, #4]
 800837c:	f000 fc03 	bl	8008b86 <USBD_CtlError>
              break;
 8008380:	e000      	b.n	8008384 <USBD_StdEPReq+0x1c8>
              break;
 8008382:	bf00      	nop
          }
          break;
 8008384:	e0ab      	b.n	80084de <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800838c:	b2db      	uxtb	r3, r3
 800838e:	2b02      	cmp	r3, #2
 8008390:	d002      	beq.n	8008398 <USBD_StdEPReq+0x1dc>
 8008392:	2b03      	cmp	r3, #3
 8008394:	d032      	beq.n	80083fc <USBD_StdEPReq+0x240>
 8008396:	e097      	b.n	80084c8 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008398:	7bbb      	ldrb	r3, [r7, #14]
 800839a:	2b00      	cmp	r3, #0
 800839c:	d007      	beq.n	80083ae <USBD_StdEPReq+0x1f2>
 800839e:	7bbb      	ldrb	r3, [r7, #14]
 80083a0:	2b80      	cmp	r3, #128	; 0x80
 80083a2:	d004      	beq.n	80083ae <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 80083a4:	6839      	ldr	r1, [r7, #0]
 80083a6:	6878      	ldr	r0, [r7, #4]
 80083a8:	f000 fbed 	bl	8008b86 <USBD_CtlError>
                break;
 80083ac:	e091      	b.n	80084d2 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80083ae:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	da0b      	bge.n	80083ce <USBD_StdEPReq+0x212>
 80083b6:	7bbb      	ldrb	r3, [r7, #14]
 80083b8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80083bc:	4613      	mov	r3, r2
 80083be:	009b      	lsls	r3, r3, #2
 80083c0:	4413      	add	r3, r2
 80083c2:	009b      	lsls	r3, r3, #2
 80083c4:	3310      	adds	r3, #16
 80083c6:	687a      	ldr	r2, [r7, #4]
 80083c8:	4413      	add	r3, r2
 80083ca:	3304      	adds	r3, #4
 80083cc:	e00b      	b.n	80083e6 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80083ce:	7bbb      	ldrb	r3, [r7, #14]
 80083d0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80083d4:	4613      	mov	r3, r2
 80083d6:	009b      	lsls	r3, r3, #2
 80083d8:	4413      	add	r3, r2
 80083da:	009b      	lsls	r3, r3, #2
 80083dc:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80083e0:	687a      	ldr	r2, [r7, #4]
 80083e2:	4413      	add	r3, r2
 80083e4:	3304      	adds	r3, #4
 80083e6:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80083e8:	68bb      	ldr	r3, [r7, #8]
 80083ea:	2200      	movs	r2, #0
 80083ec:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80083ee:	68bb      	ldr	r3, [r7, #8]
 80083f0:	2202      	movs	r2, #2
 80083f2:	4619      	mov	r1, r3
 80083f4:	6878      	ldr	r0, [r7, #4]
 80083f6:	f000 fc37 	bl	8008c68 <USBD_CtlSendData>
              break;
 80083fa:	e06a      	b.n	80084d2 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80083fc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008400:	2b00      	cmp	r3, #0
 8008402:	da11      	bge.n	8008428 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008404:	7bbb      	ldrb	r3, [r7, #14]
 8008406:	f003 020f 	and.w	r2, r3, #15
 800840a:	6879      	ldr	r1, [r7, #4]
 800840c:	4613      	mov	r3, r2
 800840e:	009b      	lsls	r3, r3, #2
 8008410:	4413      	add	r3, r2
 8008412:	009b      	lsls	r3, r3, #2
 8008414:	440b      	add	r3, r1
 8008416:	3324      	adds	r3, #36	; 0x24
 8008418:	881b      	ldrh	r3, [r3, #0]
 800841a:	2b00      	cmp	r3, #0
 800841c:	d117      	bne.n	800844e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800841e:	6839      	ldr	r1, [r7, #0]
 8008420:	6878      	ldr	r0, [r7, #4]
 8008422:	f000 fbb0 	bl	8008b86 <USBD_CtlError>
                  break;
 8008426:	e054      	b.n	80084d2 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008428:	7bbb      	ldrb	r3, [r7, #14]
 800842a:	f003 020f 	and.w	r2, r3, #15
 800842e:	6879      	ldr	r1, [r7, #4]
 8008430:	4613      	mov	r3, r2
 8008432:	009b      	lsls	r3, r3, #2
 8008434:	4413      	add	r3, r2
 8008436:	009b      	lsls	r3, r3, #2
 8008438:	440b      	add	r3, r1
 800843a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800843e:	881b      	ldrh	r3, [r3, #0]
 8008440:	2b00      	cmp	r3, #0
 8008442:	d104      	bne.n	800844e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8008444:	6839      	ldr	r1, [r7, #0]
 8008446:	6878      	ldr	r0, [r7, #4]
 8008448:	f000 fb9d 	bl	8008b86 <USBD_CtlError>
                  break;
 800844c:	e041      	b.n	80084d2 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800844e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008452:	2b00      	cmp	r3, #0
 8008454:	da0b      	bge.n	800846e <USBD_StdEPReq+0x2b2>
 8008456:	7bbb      	ldrb	r3, [r7, #14]
 8008458:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800845c:	4613      	mov	r3, r2
 800845e:	009b      	lsls	r3, r3, #2
 8008460:	4413      	add	r3, r2
 8008462:	009b      	lsls	r3, r3, #2
 8008464:	3310      	adds	r3, #16
 8008466:	687a      	ldr	r2, [r7, #4]
 8008468:	4413      	add	r3, r2
 800846a:	3304      	adds	r3, #4
 800846c:	e00b      	b.n	8008486 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800846e:	7bbb      	ldrb	r3, [r7, #14]
 8008470:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008474:	4613      	mov	r3, r2
 8008476:	009b      	lsls	r3, r3, #2
 8008478:	4413      	add	r3, r2
 800847a:	009b      	lsls	r3, r3, #2
 800847c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008480:	687a      	ldr	r2, [r7, #4]
 8008482:	4413      	add	r3, r2
 8008484:	3304      	adds	r3, #4
 8008486:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008488:	7bbb      	ldrb	r3, [r7, #14]
 800848a:	2b00      	cmp	r3, #0
 800848c:	d002      	beq.n	8008494 <USBD_StdEPReq+0x2d8>
 800848e:	7bbb      	ldrb	r3, [r7, #14]
 8008490:	2b80      	cmp	r3, #128	; 0x80
 8008492:	d103      	bne.n	800849c <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8008494:	68bb      	ldr	r3, [r7, #8]
 8008496:	2200      	movs	r2, #0
 8008498:	601a      	str	r2, [r3, #0]
 800849a:	e00e      	b.n	80084ba <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800849c:	7bbb      	ldrb	r3, [r7, #14]
 800849e:	4619      	mov	r1, r3
 80084a0:	6878      	ldr	r0, [r7, #4]
 80084a2:	f001 f873 	bl	800958c <USBD_LL_IsStallEP>
 80084a6:	4603      	mov	r3, r0
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d003      	beq.n	80084b4 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 80084ac:	68bb      	ldr	r3, [r7, #8]
 80084ae:	2201      	movs	r2, #1
 80084b0:	601a      	str	r2, [r3, #0]
 80084b2:	e002      	b.n	80084ba <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 80084b4:	68bb      	ldr	r3, [r7, #8]
 80084b6:	2200      	movs	r2, #0
 80084b8:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80084ba:	68bb      	ldr	r3, [r7, #8]
 80084bc:	2202      	movs	r2, #2
 80084be:	4619      	mov	r1, r3
 80084c0:	6878      	ldr	r0, [r7, #4]
 80084c2:	f000 fbd1 	bl	8008c68 <USBD_CtlSendData>
              break;
 80084c6:	e004      	b.n	80084d2 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 80084c8:	6839      	ldr	r1, [r7, #0]
 80084ca:	6878      	ldr	r0, [r7, #4]
 80084cc:	f000 fb5b 	bl	8008b86 <USBD_CtlError>
              break;
 80084d0:	bf00      	nop
          }
          break;
 80084d2:	e004      	b.n	80084de <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 80084d4:	6839      	ldr	r1, [r7, #0]
 80084d6:	6878      	ldr	r0, [r7, #4]
 80084d8:	f000 fb55 	bl	8008b86 <USBD_CtlError>
          break;
 80084dc:	bf00      	nop
      }
      break;
 80084de:	e005      	b.n	80084ec <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 80084e0:	6839      	ldr	r1, [r7, #0]
 80084e2:	6878      	ldr	r0, [r7, #4]
 80084e4:	f000 fb4f 	bl	8008b86 <USBD_CtlError>
      break;
 80084e8:	e000      	b.n	80084ec <USBD_StdEPReq+0x330>
      break;
 80084ea:	bf00      	nop
  }

  return ret;
 80084ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80084ee:	4618      	mov	r0, r3
 80084f0:	3710      	adds	r7, #16
 80084f2:	46bd      	mov	sp, r7
 80084f4:	bd80      	pop	{r7, pc}
	...

080084f8 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80084f8:	b580      	push	{r7, lr}
 80084fa:	b084      	sub	sp, #16
 80084fc:	af00      	add	r7, sp, #0
 80084fe:	6078      	str	r0, [r7, #4]
 8008500:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008502:	2300      	movs	r3, #0
 8008504:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8008506:	2300      	movs	r3, #0
 8008508:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800850a:	2300      	movs	r3, #0
 800850c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800850e:	683b      	ldr	r3, [r7, #0]
 8008510:	885b      	ldrh	r3, [r3, #2]
 8008512:	0a1b      	lsrs	r3, r3, #8
 8008514:	b29b      	uxth	r3, r3
 8008516:	3b01      	subs	r3, #1
 8008518:	2b06      	cmp	r3, #6
 800851a:	f200 8128 	bhi.w	800876e <USBD_GetDescriptor+0x276>
 800851e:	a201      	add	r2, pc, #4	; (adr r2, 8008524 <USBD_GetDescriptor+0x2c>)
 8008520:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008524:	08008541 	.word	0x08008541
 8008528:	08008559 	.word	0x08008559
 800852c:	08008599 	.word	0x08008599
 8008530:	0800876f 	.word	0x0800876f
 8008534:	0800876f 	.word	0x0800876f
 8008538:	0800870f 	.word	0x0800870f
 800853c:	0800873b 	.word	0x0800873b
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	687a      	ldr	r2, [r7, #4]
 800854a:	7c12      	ldrb	r2, [r2, #16]
 800854c:	f107 0108 	add.w	r1, r7, #8
 8008550:	4610      	mov	r0, r2
 8008552:	4798      	blx	r3
 8008554:	60f8      	str	r0, [r7, #12]
      break;
 8008556:	e112      	b.n	800877e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	7c1b      	ldrb	r3, [r3, #16]
 800855c:	2b00      	cmp	r3, #0
 800855e:	d10d      	bne.n	800857c <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008566:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008568:	f107 0208 	add.w	r2, r7, #8
 800856c:	4610      	mov	r0, r2
 800856e:	4798      	blx	r3
 8008570:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	3301      	adds	r3, #1
 8008576:	2202      	movs	r2, #2
 8008578:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800857a:	e100      	b.n	800877e <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008582:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008584:	f107 0208 	add.w	r2, r7, #8
 8008588:	4610      	mov	r0, r2
 800858a:	4798      	blx	r3
 800858c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	3301      	adds	r3, #1
 8008592:	2202      	movs	r2, #2
 8008594:	701a      	strb	r2, [r3, #0]
      break;
 8008596:	e0f2      	b.n	800877e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008598:	683b      	ldr	r3, [r7, #0]
 800859a:	885b      	ldrh	r3, [r3, #2]
 800859c:	b2db      	uxtb	r3, r3
 800859e:	2b05      	cmp	r3, #5
 80085a0:	f200 80ac 	bhi.w	80086fc <USBD_GetDescriptor+0x204>
 80085a4:	a201      	add	r2, pc, #4	; (adr r2, 80085ac <USBD_GetDescriptor+0xb4>)
 80085a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085aa:	bf00      	nop
 80085ac:	080085c5 	.word	0x080085c5
 80085b0:	080085f9 	.word	0x080085f9
 80085b4:	0800862d 	.word	0x0800862d
 80085b8:	08008661 	.word	0x08008661
 80085bc:	08008695 	.word	0x08008695
 80085c0:	080086c9 	.word	0x080086c9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80085ca:	685b      	ldr	r3, [r3, #4]
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	d00b      	beq.n	80085e8 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80085d6:	685b      	ldr	r3, [r3, #4]
 80085d8:	687a      	ldr	r2, [r7, #4]
 80085da:	7c12      	ldrb	r2, [r2, #16]
 80085dc:	f107 0108 	add.w	r1, r7, #8
 80085e0:	4610      	mov	r0, r2
 80085e2:	4798      	blx	r3
 80085e4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80085e6:	e091      	b.n	800870c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80085e8:	6839      	ldr	r1, [r7, #0]
 80085ea:	6878      	ldr	r0, [r7, #4]
 80085ec:	f000 facb 	bl	8008b86 <USBD_CtlError>
            err++;
 80085f0:	7afb      	ldrb	r3, [r7, #11]
 80085f2:	3301      	adds	r3, #1
 80085f4:	72fb      	strb	r3, [r7, #11]
          break;
 80085f6:	e089      	b.n	800870c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80085fe:	689b      	ldr	r3, [r3, #8]
 8008600:	2b00      	cmp	r3, #0
 8008602:	d00b      	beq.n	800861c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800860a:	689b      	ldr	r3, [r3, #8]
 800860c:	687a      	ldr	r2, [r7, #4]
 800860e:	7c12      	ldrb	r2, [r2, #16]
 8008610:	f107 0108 	add.w	r1, r7, #8
 8008614:	4610      	mov	r0, r2
 8008616:	4798      	blx	r3
 8008618:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800861a:	e077      	b.n	800870c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800861c:	6839      	ldr	r1, [r7, #0]
 800861e:	6878      	ldr	r0, [r7, #4]
 8008620:	f000 fab1 	bl	8008b86 <USBD_CtlError>
            err++;
 8008624:	7afb      	ldrb	r3, [r7, #11]
 8008626:	3301      	adds	r3, #1
 8008628:	72fb      	strb	r3, [r7, #11]
          break;
 800862a:	e06f      	b.n	800870c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008632:	68db      	ldr	r3, [r3, #12]
 8008634:	2b00      	cmp	r3, #0
 8008636:	d00b      	beq.n	8008650 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800863e:	68db      	ldr	r3, [r3, #12]
 8008640:	687a      	ldr	r2, [r7, #4]
 8008642:	7c12      	ldrb	r2, [r2, #16]
 8008644:	f107 0108 	add.w	r1, r7, #8
 8008648:	4610      	mov	r0, r2
 800864a:	4798      	blx	r3
 800864c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800864e:	e05d      	b.n	800870c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008650:	6839      	ldr	r1, [r7, #0]
 8008652:	6878      	ldr	r0, [r7, #4]
 8008654:	f000 fa97 	bl	8008b86 <USBD_CtlError>
            err++;
 8008658:	7afb      	ldrb	r3, [r7, #11]
 800865a:	3301      	adds	r3, #1
 800865c:	72fb      	strb	r3, [r7, #11]
          break;
 800865e:	e055      	b.n	800870c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008666:	691b      	ldr	r3, [r3, #16]
 8008668:	2b00      	cmp	r3, #0
 800866a:	d00b      	beq.n	8008684 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008672:	691b      	ldr	r3, [r3, #16]
 8008674:	687a      	ldr	r2, [r7, #4]
 8008676:	7c12      	ldrb	r2, [r2, #16]
 8008678:	f107 0108 	add.w	r1, r7, #8
 800867c:	4610      	mov	r0, r2
 800867e:	4798      	blx	r3
 8008680:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008682:	e043      	b.n	800870c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008684:	6839      	ldr	r1, [r7, #0]
 8008686:	6878      	ldr	r0, [r7, #4]
 8008688:	f000 fa7d 	bl	8008b86 <USBD_CtlError>
            err++;
 800868c:	7afb      	ldrb	r3, [r7, #11]
 800868e:	3301      	adds	r3, #1
 8008690:	72fb      	strb	r3, [r7, #11]
          break;
 8008692:	e03b      	b.n	800870c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800869a:	695b      	ldr	r3, [r3, #20]
 800869c:	2b00      	cmp	r3, #0
 800869e:	d00b      	beq.n	80086b8 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80086a6:	695b      	ldr	r3, [r3, #20]
 80086a8:	687a      	ldr	r2, [r7, #4]
 80086aa:	7c12      	ldrb	r2, [r2, #16]
 80086ac:	f107 0108 	add.w	r1, r7, #8
 80086b0:	4610      	mov	r0, r2
 80086b2:	4798      	blx	r3
 80086b4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80086b6:	e029      	b.n	800870c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80086b8:	6839      	ldr	r1, [r7, #0]
 80086ba:	6878      	ldr	r0, [r7, #4]
 80086bc:	f000 fa63 	bl	8008b86 <USBD_CtlError>
            err++;
 80086c0:	7afb      	ldrb	r3, [r7, #11]
 80086c2:	3301      	adds	r3, #1
 80086c4:	72fb      	strb	r3, [r7, #11]
          break;
 80086c6:	e021      	b.n	800870c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80086ce:	699b      	ldr	r3, [r3, #24]
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	d00b      	beq.n	80086ec <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80086da:	699b      	ldr	r3, [r3, #24]
 80086dc:	687a      	ldr	r2, [r7, #4]
 80086de:	7c12      	ldrb	r2, [r2, #16]
 80086e0:	f107 0108 	add.w	r1, r7, #8
 80086e4:	4610      	mov	r0, r2
 80086e6:	4798      	blx	r3
 80086e8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80086ea:	e00f      	b.n	800870c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80086ec:	6839      	ldr	r1, [r7, #0]
 80086ee:	6878      	ldr	r0, [r7, #4]
 80086f0:	f000 fa49 	bl	8008b86 <USBD_CtlError>
            err++;
 80086f4:	7afb      	ldrb	r3, [r7, #11]
 80086f6:	3301      	adds	r3, #1
 80086f8:	72fb      	strb	r3, [r7, #11]
          break;
 80086fa:	e007      	b.n	800870c <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80086fc:	6839      	ldr	r1, [r7, #0]
 80086fe:	6878      	ldr	r0, [r7, #4]
 8008700:	f000 fa41 	bl	8008b86 <USBD_CtlError>
          err++;
 8008704:	7afb      	ldrb	r3, [r7, #11]
 8008706:	3301      	adds	r3, #1
 8008708:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800870a:	bf00      	nop
      }
      break;
 800870c:	e037      	b.n	800877e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	7c1b      	ldrb	r3, [r3, #16]
 8008712:	2b00      	cmp	r3, #0
 8008714:	d109      	bne.n	800872a <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800871c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800871e:	f107 0208 	add.w	r2, r7, #8
 8008722:	4610      	mov	r0, r2
 8008724:	4798      	blx	r3
 8008726:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008728:	e029      	b.n	800877e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800872a:	6839      	ldr	r1, [r7, #0]
 800872c:	6878      	ldr	r0, [r7, #4]
 800872e:	f000 fa2a 	bl	8008b86 <USBD_CtlError>
        err++;
 8008732:	7afb      	ldrb	r3, [r7, #11]
 8008734:	3301      	adds	r3, #1
 8008736:	72fb      	strb	r3, [r7, #11]
      break;
 8008738:	e021      	b.n	800877e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	7c1b      	ldrb	r3, [r3, #16]
 800873e:	2b00      	cmp	r3, #0
 8008740:	d10d      	bne.n	800875e <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800874a:	f107 0208 	add.w	r2, r7, #8
 800874e:	4610      	mov	r0, r2
 8008750:	4798      	blx	r3
 8008752:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	3301      	adds	r3, #1
 8008758:	2207      	movs	r2, #7
 800875a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800875c:	e00f      	b.n	800877e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800875e:	6839      	ldr	r1, [r7, #0]
 8008760:	6878      	ldr	r0, [r7, #4]
 8008762:	f000 fa10 	bl	8008b86 <USBD_CtlError>
        err++;
 8008766:	7afb      	ldrb	r3, [r7, #11]
 8008768:	3301      	adds	r3, #1
 800876a:	72fb      	strb	r3, [r7, #11]
      break;
 800876c:	e007      	b.n	800877e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800876e:	6839      	ldr	r1, [r7, #0]
 8008770:	6878      	ldr	r0, [r7, #4]
 8008772:	f000 fa08 	bl	8008b86 <USBD_CtlError>
      err++;
 8008776:	7afb      	ldrb	r3, [r7, #11]
 8008778:	3301      	adds	r3, #1
 800877a:	72fb      	strb	r3, [r7, #11]
      break;
 800877c:	bf00      	nop
  }

  if (err != 0U)
 800877e:	7afb      	ldrb	r3, [r7, #11]
 8008780:	2b00      	cmp	r3, #0
 8008782:	d11e      	bne.n	80087c2 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8008784:	683b      	ldr	r3, [r7, #0]
 8008786:	88db      	ldrh	r3, [r3, #6]
 8008788:	2b00      	cmp	r3, #0
 800878a:	d016      	beq.n	80087ba <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800878c:	893b      	ldrh	r3, [r7, #8]
 800878e:	2b00      	cmp	r3, #0
 8008790:	d00e      	beq.n	80087b0 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8008792:	683b      	ldr	r3, [r7, #0]
 8008794:	88da      	ldrh	r2, [r3, #6]
 8008796:	893b      	ldrh	r3, [r7, #8]
 8008798:	4293      	cmp	r3, r2
 800879a:	bf28      	it	cs
 800879c:	4613      	movcs	r3, r2
 800879e:	b29b      	uxth	r3, r3
 80087a0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80087a2:	893b      	ldrh	r3, [r7, #8]
 80087a4:	461a      	mov	r2, r3
 80087a6:	68f9      	ldr	r1, [r7, #12]
 80087a8:	6878      	ldr	r0, [r7, #4]
 80087aa:	f000 fa5d 	bl	8008c68 <USBD_CtlSendData>
 80087ae:	e009      	b.n	80087c4 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80087b0:	6839      	ldr	r1, [r7, #0]
 80087b2:	6878      	ldr	r0, [r7, #4]
 80087b4:	f000 f9e7 	bl	8008b86 <USBD_CtlError>
 80087b8:	e004      	b.n	80087c4 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80087ba:	6878      	ldr	r0, [r7, #4]
 80087bc:	f000 faae 	bl	8008d1c <USBD_CtlSendStatus>
 80087c0:	e000      	b.n	80087c4 <USBD_GetDescriptor+0x2cc>
    return;
 80087c2:	bf00      	nop
  }
}
 80087c4:	3710      	adds	r7, #16
 80087c6:	46bd      	mov	sp, r7
 80087c8:	bd80      	pop	{r7, pc}
 80087ca:	bf00      	nop

080087cc <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80087cc:	b580      	push	{r7, lr}
 80087ce:	b084      	sub	sp, #16
 80087d0:	af00      	add	r7, sp, #0
 80087d2:	6078      	str	r0, [r7, #4]
 80087d4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80087d6:	683b      	ldr	r3, [r7, #0]
 80087d8:	889b      	ldrh	r3, [r3, #4]
 80087da:	2b00      	cmp	r3, #0
 80087dc:	d131      	bne.n	8008842 <USBD_SetAddress+0x76>
 80087de:	683b      	ldr	r3, [r7, #0]
 80087e0:	88db      	ldrh	r3, [r3, #6]
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	d12d      	bne.n	8008842 <USBD_SetAddress+0x76>
 80087e6:	683b      	ldr	r3, [r7, #0]
 80087e8:	885b      	ldrh	r3, [r3, #2]
 80087ea:	2b7f      	cmp	r3, #127	; 0x7f
 80087ec:	d829      	bhi.n	8008842 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80087ee:	683b      	ldr	r3, [r7, #0]
 80087f0:	885b      	ldrh	r3, [r3, #2]
 80087f2:	b2db      	uxtb	r3, r3
 80087f4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80087f8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008800:	b2db      	uxtb	r3, r3
 8008802:	2b03      	cmp	r3, #3
 8008804:	d104      	bne.n	8008810 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8008806:	6839      	ldr	r1, [r7, #0]
 8008808:	6878      	ldr	r0, [r7, #4]
 800880a:	f000 f9bc 	bl	8008b86 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800880e:	e01d      	b.n	800884c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	7bfa      	ldrb	r2, [r7, #15]
 8008814:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008818:	7bfb      	ldrb	r3, [r7, #15]
 800881a:	4619      	mov	r1, r3
 800881c:	6878      	ldr	r0, [r7, #4]
 800881e:	f000 fee1 	bl	80095e4 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8008822:	6878      	ldr	r0, [r7, #4]
 8008824:	f000 fa7a 	bl	8008d1c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008828:	7bfb      	ldrb	r3, [r7, #15]
 800882a:	2b00      	cmp	r3, #0
 800882c:	d004      	beq.n	8008838 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	2202      	movs	r2, #2
 8008832:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008836:	e009      	b.n	800884c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	2201      	movs	r2, #1
 800883c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008840:	e004      	b.n	800884c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008842:	6839      	ldr	r1, [r7, #0]
 8008844:	6878      	ldr	r0, [r7, #4]
 8008846:	f000 f99e 	bl	8008b86 <USBD_CtlError>
  }
}
 800884a:	bf00      	nop
 800884c:	bf00      	nop
 800884e:	3710      	adds	r7, #16
 8008850:	46bd      	mov	sp, r7
 8008852:	bd80      	pop	{r7, pc}

08008854 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008854:	b580      	push	{r7, lr}
 8008856:	b084      	sub	sp, #16
 8008858:	af00      	add	r7, sp, #0
 800885a:	6078      	str	r0, [r7, #4]
 800885c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800885e:	2300      	movs	r3, #0
 8008860:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008862:	683b      	ldr	r3, [r7, #0]
 8008864:	885b      	ldrh	r3, [r3, #2]
 8008866:	b2da      	uxtb	r2, r3
 8008868:	4b4e      	ldr	r3, [pc, #312]	; (80089a4 <USBD_SetConfig+0x150>)
 800886a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800886c:	4b4d      	ldr	r3, [pc, #308]	; (80089a4 <USBD_SetConfig+0x150>)
 800886e:	781b      	ldrb	r3, [r3, #0]
 8008870:	2b01      	cmp	r3, #1
 8008872:	d905      	bls.n	8008880 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8008874:	6839      	ldr	r1, [r7, #0]
 8008876:	6878      	ldr	r0, [r7, #4]
 8008878:	f000 f985 	bl	8008b86 <USBD_CtlError>
    return USBD_FAIL;
 800887c:	2303      	movs	r3, #3
 800887e:	e08c      	b.n	800899a <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008886:	b2db      	uxtb	r3, r3
 8008888:	2b02      	cmp	r3, #2
 800888a:	d002      	beq.n	8008892 <USBD_SetConfig+0x3e>
 800888c:	2b03      	cmp	r3, #3
 800888e:	d029      	beq.n	80088e4 <USBD_SetConfig+0x90>
 8008890:	e075      	b.n	800897e <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8008892:	4b44      	ldr	r3, [pc, #272]	; (80089a4 <USBD_SetConfig+0x150>)
 8008894:	781b      	ldrb	r3, [r3, #0]
 8008896:	2b00      	cmp	r3, #0
 8008898:	d020      	beq.n	80088dc <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800889a:	4b42      	ldr	r3, [pc, #264]	; (80089a4 <USBD_SetConfig+0x150>)
 800889c:	781b      	ldrb	r3, [r3, #0]
 800889e:	461a      	mov	r2, r3
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80088a4:	4b3f      	ldr	r3, [pc, #252]	; (80089a4 <USBD_SetConfig+0x150>)
 80088a6:	781b      	ldrb	r3, [r3, #0]
 80088a8:	4619      	mov	r1, r3
 80088aa:	6878      	ldr	r0, [r7, #4]
 80088ac:	f7fe ffe7 	bl	800787e <USBD_SetClassConfig>
 80088b0:	4603      	mov	r3, r0
 80088b2:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80088b4:	7bfb      	ldrb	r3, [r7, #15]
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	d008      	beq.n	80088cc <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 80088ba:	6839      	ldr	r1, [r7, #0]
 80088bc:	6878      	ldr	r0, [r7, #4]
 80088be:	f000 f962 	bl	8008b86 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	2202      	movs	r2, #2
 80088c6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80088ca:	e065      	b.n	8008998 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80088cc:	6878      	ldr	r0, [r7, #4]
 80088ce:	f000 fa25 	bl	8008d1c <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	2203      	movs	r2, #3
 80088d6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80088da:	e05d      	b.n	8008998 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80088dc:	6878      	ldr	r0, [r7, #4]
 80088de:	f000 fa1d 	bl	8008d1c <USBD_CtlSendStatus>
      break;
 80088e2:	e059      	b.n	8008998 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80088e4:	4b2f      	ldr	r3, [pc, #188]	; (80089a4 <USBD_SetConfig+0x150>)
 80088e6:	781b      	ldrb	r3, [r3, #0]
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	d112      	bne.n	8008912 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	2202      	movs	r2, #2
 80088f0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 80088f4:	4b2b      	ldr	r3, [pc, #172]	; (80089a4 <USBD_SetConfig+0x150>)
 80088f6:	781b      	ldrb	r3, [r3, #0]
 80088f8:	461a      	mov	r2, r3
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80088fe:	4b29      	ldr	r3, [pc, #164]	; (80089a4 <USBD_SetConfig+0x150>)
 8008900:	781b      	ldrb	r3, [r3, #0]
 8008902:	4619      	mov	r1, r3
 8008904:	6878      	ldr	r0, [r7, #4]
 8008906:	f7fe ffd6 	bl	80078b6 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800890a:	6878      	ldr	r0, [r7, #4]
 800890c:	f000 fa06 	bl	8008d1c <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008910:	e042      	b.n	8008998 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8008912:	4b24      	ldr	r3, [pc, #144]	; (80089a4 <USBD_SetConfig+0x150>)
 8008914:	781b      	ldrb	r3, [r3, #0]
 8008916:	461a      	mov	r2, r3
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	685b      	ldr	r3, [r3, #4]
 800891c:	429a      	cmp	r2, r3
 800891e:	d02a      	beq.n	8008976 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	685b      	ldr	r3, [r3, #4]
 8008924:	b2db      	uxtb	r3, r3
 8008926:	4619      	mov	r1, r3
 8008928:	6878      	ldr	r0, [r7, #4]
 800892a:	f7fe ffc4 	bl	80078b6 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800892e:	4b1d      	ldr	r3, [pc, #116]	; (80089a4 <USBD_SetConfig+0x150>)
 8008930:	781b      	ldrb	r3, [r3, #0]
 8008932:	461a      	mov	r2, r3
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008938:	4b1a      	ldr	r3, [pc, #104]	; (80089a4 <USBD_SetConfig+0x150>)
 800893a:	781b      	ldrb	r3, [r3, #0]
 800893c:	4619      	mov	r1, r3
 800893e:	6878      	ldr	r0, [r7, #4]
 8008940:	f7fe ff9d 	bl	800787e <USBD_SetClassConfig>
 8008944:	4603      	mov	r3, r0
 8008946:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8008948:	7bfb      	ldrb	r3, [r7, #15]
 800894a:	2b00      	cmp	r3, #0
 800894c:	d00f      	beq.n	800896e <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800894e:	6839      	ldr	r1, [r7, #0]
 8008950:	6878      	ldr	r0, [r7, #4]
 8008952:	f000 f918 	bl	8008b86 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	685b      	ldr	r3, [r3, #4]
 800895a:	b2db      	uxtb	r3, r3
 800895c:	4619      	mov	r1, r3
 800895e:	6878      	ldr	r0, [r7, #4]
 8008960:	f7fe ffa9 	bl	80078b6 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	2202      	movs	r2, #2
 8008968:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800896c:	e014      	b.n	8008998 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800896e:	6878      	ldr	r0, [r7, #4]
 8008970:	f000 f9d4 	bl	8008d1c <USBD_CtlSendStatus>
      break;
 8008974:	e010      	b.n	8008998 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8008976:	6878      	ldr	r0, [r7, #4]
 8008978:	f000 f9d0 	bl	8008d1c <USBD_CtlSendStatus>
      break;
 800897c:	e00c      	b.n	8008998 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800897e:	6839      	ldr	r1, [r7, #0]
 8008980:	6878      	ldr	r0, [r7, #4]
 8008982:	f000 f900 	bl	8008b86 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008986:	4b07      	ldr	r3, [pc, #28]	; (80089a4 <USBD_SetConfig+0x150>)
 8008988:	781b      	ldrb	r3, [r3, #0]
 800898a:	4619      	mov	r1, r3
 800898c:	6878      	ldr	r0, [r7, #4]
 800898e:	f7fe ff92 	bl	80078b6 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8008992:	2303      	movs	r3, #3
 8008994:	73fb      	strb	r3, [r7, #15]
      break;
 8008996:	bf00      	nop
  }

  return ret;
 8008998:	7bfb      	ldrb	r3, [r7, #15]
}
 800899a:	4618      	mov	r0, r3
 800899c:	3710      	adds	r7, #16
 800899e:	46bd      	mov	sp, r7
 80089a0:	bd80      	pop	{r7, pc}
 80089a2:	bf00      	nop
 80089a4:	2000029c 	.word	0x2000029c

080089a8 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80089a8:	b580      	push	{r7, lr}
 80089aa:	b082      	sub	sp, #8
 80089ac:	af00      	add	r7, sp, #0
 80089ae:	6078      	str	r0, [r7, #4]
 80089b0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80089b2:	683b      	ldr	r3, [r7, #0]
 80089b4:	88db      	ldrh	r3, [r3, #6]
 80089b6:	2b01      	cmp	r3, #1
 80089b8:	d004      	beq.n	80089c4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80089ba:	6839      	ldr	r1, [r7, #0]
 80089bc:	6878      	ldr	r0, [r7, #4]
 80089be:	f000 f8e2 	bl	8008b86 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80089c2:	e023      	b.n	8008a0c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80089ca:	b2db      	uxtb	r3, r3
 80089cc:	2b02      	cmp	r3, #2
 80089ce:	dc02      	bgt.n	80089d6 <USBD_GetConfig+0x2e>
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	dc03      	bgt.n	80089dc <USBD_GetConfig+0x34>
 80089d4:	e015      	b.n	8008a02 <USBD_GetConfig+0x5a>
 80089d6:	2b03      	cmp	r3, #3
 80089d8:	d00b      	beq.n	80089f2 <USBD_GetConfig+0x4a>
 80089da:	e012      	b.n	8008a02 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	2200      	movs	r2, #0
 80089e0:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	3308      	adds	r3, #8
 80089e6:	2201      	movs	r2, #1
 80089e8:	4619      	mov	r1, r3
 80089ea:	6878      	ldr	r0, [r7, #4]
 80089ec:	f000 f93c 	bl	8008c68 <USBD_CtlSendData>
        break;
 80089f0:	e00c      	b.n	8008a0c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	3304      	adds	r3, #4
 80089f6:	2201      	movs	r2, #1
 80089f8:	4619      	mov	r1, r3
 80089fa:	6878      	ldr	r0, [r7, #4]
 80089fc:	f000 f934 	bl	8008c68 <USBD_CtlSendData>
        break;
 8008a00:	e004      	b.n	8008a0c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8008a02:	6839      	ldr	r1, [r7, #0]
 8008a04:	6878      	ldr	r0, [r7, #4]
 8008a06:	f000 f8be 	bl	8008b86 <USBD_CtlError>
        break;
 8008a0a:	bf00      	nop
}
 8008a0c:	bf00      	nop
 8008a0e:	3708      	adds	r7, #8
 8008a10:	46bd      	mov	sp, r7
 8008a12:	bd80      	pop	{r7, pc}

08008a14 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008a14:	b580      	push	{r7, lr}
 8008a16:	b082      	sub	sp, #8
 8008a18:	af00      	add	r7, sp, #0
 8008a1a:	6078      	str	r0, [r7, #4]
 8008a1c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008a24:	b2db      	uxtb	r3, r3
 8008a26:	3b01      	subs	r3, #1
 8008a28:	2b02      	cmp	r3, #2
 8008a2a:	d81e      	bhi.n	8008a6a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008a2c:	683b      	ldr	r3, [r7, #0]
 8008a2e:	88db      	ldrh	r3, [r3, #6]
 8008a30:	2b02      	cmp	r3, #2
 8008a32:	d004      	beq.n	8008a3e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8008a34:	6839      	ldr	r1, [r7, #0]
 8008a36:	6878      	ldr	r0, [r7, #4]
 8008a38:	f000 f8a5 	bl	8008b86 <USBD_CtlError>
        break;
 8008a3c:	e01a      	b.n	8008a74 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	2201      	movs	r2, #1
 8008a42:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	d005      	beq.n	8008a5a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	68db      	ldr	r3, [r3, #12]
 8008a52:	f043 0202 	orr.w	r2, r3, #2
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	330c      	adds	r3, #12
 8008a5e:	2202      	movs	r2, #2
 8008a60:	4619      	mov	r1, r3
 8008a62:	6878      	ldr	r0, [r7, #4]
 8008a64:	f000 f900 	bl	8008c68 <USBD_CtlSendData>
      break;
 8008a68:	e004      	b.n	8008a74 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8008a6a:	6839      	ldr	r1, [r7, #0]
 8008a6c:	6878      	ldr	r0, [r7, #4]
 8008a6e:	f000 f88a 	bl	8008b86 <USBD_CtlError>
      break;
 8008a72:	bf00      	nop
  }
}
 8008a74:	bf00      	nop
 8008a76:	3708      	adds	r7, #8
 8008a78:	46bd      	mov	sp, r7
 8008a7a:	bd80      	pop	{r7, pc}

08008a7c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008a7c:	b580      	push	{r7, lr}
 8008a7e:	b082      	sub	sp, #8
 8008a80:	af00      	add	r7, sp, #0
 8008a82:	6078      	str	r0, [r7, #4]
 8008a84:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008a86:	683b      	ldr	r3, [r7, #0]
 8008a88:	885b      	ldrh	r3, [r3, #2]
 8008a8a:	2b01      	cmp	r3, #1
 8008a8c:	d107      	bne.n	8008a9e <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	2201      	movs	r2, #1
 8008a92:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8008a96:	6878      	ldr	r0, [r7, #4]
 8008a98:	f000 f940 	bl	8008d1c <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8008a9c:	e013      	b.n	8008ac6 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8008a9e:	683b      	ldr	r3, [r7, #0]
 8008aa0:	885b      	ldrh	r3, [r3, #2]
 8008aa2:	2b02      	cmp	r3, #2
 8008aa4:	d10b      	bne.n	8008abe <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 8008aa6:	683b      	ldr	r3, [r7, #0]
 8008aa8:	889b      	ldrh	r3, [r3, #4]
 8008aaa:	0a1b      	lsrs	r3, r3, #8
 8008aac:	b29b      	uxth	r3, r3
 8008aae:	b2da      	uxtb	r2, r3
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8008ab6:	6878      	ldr	r0, [r7, #4]
 8008ab8:	f000 f930 	bl	8008d1c <USBD_CtlSendStatus>
}
 8008abc:	e003      	b.n	8008ac6 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8008abe:	6839      	ldr	r1, [r7, #0]
 8008ac0:	6878      	ldr	r0, [r7, #4]
 8008ac2:	f000 f860 	bl	8008b86 <USBD_CtlError>
}
 8008ac6:	bf00      	nop
 8008ac8:	3708      	adds	r7, #8
 8008aca:	46bd      	mov	sp, r7
 8008acc:	bd80      	pop	{r7, pc}

08008ace <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008ace:	b580      	push	{r7, lr}
 8008ad0:	b082      	sub	sp, #8
 8008ad2:	af00      	add	r7, sp, #0
 8008ad4:	6078      	str	r0, [r7, #4]
 8008ad6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008ade:	b2db      	uxtb	r3, r3
 8008ae0:	3b01      	subs	r3, #1
 8008ae2:	2b02      	cmp	r3, #2
 8008ae4:	d80b      	bhi.n	8008afe <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008ae6:	683b      	ldr	r3, [r7, #0]
 8008ae8:	885b      	ldrh	r3, [r3, #2]
 8008aea:	2b01      	cmp	r3, #1
 8008aec:	d10c      	bne.n	8008b08 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	2200      	movs	r2, #0
 8008af2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8008af6:	6878      	ldr	r0, [r7, #4]
 8008af8:	f000 f910 	bl	8008d1c <USBD_CtlSendStatus>
      }
      break;
 8008afc:	e004      	b.n	8008b08 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8008afe:	6839      	ldr	r1, [r7, #0]
 8008b00:	6878      	ldr	r0, [r7, #4]
 8008b02:	f000 f840 	bl	8008b86 <USBD_CtlError>
      break;
 8008b06:	e000      	b.n	8008b0a <USBD_ClrFeature+0x3c>
      break;
 8008b08:	bf00      	nop
  }
}
 8008b0a:	bf00      	nop
 8008b0c:	3708      	adds	r7, #8
 8008b0e:	46bd      	mov	sp, r7
 8008b10:	bd80      	pop	{r7, pc}

08008b12 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008b12:	b580      	push	{r7, lr}
 8008b14:	b084      	sub	sp, #16
 8008b16:	af00      	add	r7, sp, #0
 8008b18:	6078      	str	r0, [r7, #4]
 8008b1a:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8008b1c:	683b      	ldr	r3, [r7, #0]
 8008b1e:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	781a      	ldrb	r2, [r3, #0]
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8008b28:	68fb      	ldr	r3, [r7, #12]
 8008b2a:	3301      	adds	r3, #1
 8008b2c:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8008b2e:	68fb      	ldr	r3, [r7, #12]
 8008b30:	781a      	ldrb	r2, [r3, #0]
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8008b36:	68fb      	ldr	r3, [r7, #12]
 8008b38:	3301      	adds	r3, #1
 8008b3a:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8008b3c:	68f8      	ldr	r0, [r7, #12]
 8008b3e:	f7ff fa41 	bl	8007fc4 <SWAPBYTE>
 8008b42:	4603      	mov	r3, r0
 8008b44:	461a      	mov	r2, r3
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8008b4a:	68fb      	ldr	r3, [r7, #12]
 8008b4c:	3301      	adds	r3, #1
 8008b4e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008b50:	68fb      	ldr	r3, [r7, #12]
 8008b52:	3301      	adds	r3, #1
 8008b54:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8008b56:	68f8      	ldr	r0, [r7, #12]
 8008b58:	f7ff fa34 	bl	8007fc4 <SWAPBYTE>
 8008b5c:	4603      	mov	r3, r0
 8008b5e:	461a      	mov	r2, r3
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	3301      	adds	r3, #1
 8008b68:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008b6a:	68fb      	ldr	r3, [r7, #12]
 8008b6c:	3301      	adds	r3, #1
 8008b6e:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8008b70:	68f8      	ldr	r0, [r7, #12]
 8008b72:	f7ff fa27 	bl	8007fc4 <SWAPBYTE>
 8008b76:	4603      	mov	r3, r0
 8008b78:	461a      	mov	r2, r3
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	80da      	strh	r2, [r3, #6]
}
 8008b7e:	bf00      	nop
 8008b80:	3710      	adds	r7, #16
 8008b82:	46bd      	mov	sp, r7
 8008b84:	bd80      	pop	{r7, pc}

08008b86 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008b86:	b580      	push	{r7, lr}
 8008b88:	b082      	sub	sp, #8
 8008b8a:	af00      	add	r7, sp, #0
 8008b8c:	6078      	str	r0, [r7, #4]
 8008b8e:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8008b90:	2180      	movs	r1, #128	; 0x80
 8008b92:	6878      	ldr	r0, [r7, #4]
 8008b94:	f000 fcbc 	bl	8009510 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8008b98:	2100      	movs	r1, #0
 8008b9a:	6878      	ldr	r0, [r7, #4]
 8008b9c:	f000 fcb8 	bl	8009510 <USBD_LL_StallEP>
}
 8008ba0:	bf00      	nop
 8008ba2:	3708      	adds	r7, #8
 8008ba4:	46bd      	mov	sp, r7
 8008ba6:	bd80      	pop	{r7, pc}

08008ba8 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008ba8:	b580      	push	{r7, lr}
 8008baa:	b086      	sub	sp, #24
 8008bac:	af00      	add	r7, sp, #0
 8008bae:	60f8      	str	r0, [r7, #12]
 8008bb0:	60b9      	str	r1, [r7, #8]
 8008bb2:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008bb4:	2300      	movs	r3, #0
 8008bb6:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8008bb8:	68fb      	ldr	r3, [r7, #12]
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	d036      	beq.n	8008c2c <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8008bbe:	68fb      	ldr	r3, [r7, #12]
 8008bc0:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8008bc2:	6938      	ldr	r0, [r7, #16]
 8008bc4:	f000 f836 	bl	8008c34 <USBD_GetLen>
 8008bc8:	4603      	mov	r3, r0
 8008bca:	3301      	adds	r3, #1
 8008bcc:	b29b      	uxth	r3, r3
 8008bce:	005b      	lsls	r3, r3, #1
 8008bd0:	b29a      	uxth	r2, r3
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8008bd6:	7dfb      	ldrb	r3, [r7, #23]
 8008bd8:	68ba      	ldr	r2, [r7, #8]
 8008bda:	4413      	add	r3, r2
 8008bdc:	687a      	ldr	r2, [r7, #4]
 8008bde:	7812      	ldrb	r2, [r2, #0]
 8008be0:	701a      	strb	r2, [r3, #0]
  idx++;
 8008be2:	7dfb      	ldrb	r3, [r7, #23]
 8008be4:	3301      	adds	r3, #1
 8008be6:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8008be8:	7dfb      	ldrb	r3, [r7, #23]
 8008bea:	68ba      	ldr	r2, [r7, #8]
 8008bec:	4413      	add	r3, r2
 8008bee:	2203      	movs	r2, #3
 8008bf0:	701a      	strb	r2, [r3, #0]
  idx++;
 8008bf2:	7dfb      	ldrb	r3, [r7, #23]
 8008bf4:	3301      	adds	r3, #1
 8008bf6:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8008bf8:	e013      	b.n	8008c22 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8008bfa:	7dfb      	ldrb	r3, [r7, #23]
 8008bfc:	68ba      	ldr	r2, [r7, #8]
 8008bfe:	4413      	add	r3, r2
 8008c00:	693a      	ldr	r2, [r7, #16]
 8008c02:	7812      	ldrb	r2, [r2, #0]
 8008c04:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8008c06:	693b      	ldr	r3, [r7, #16]
 8008c08:	3301      	adds	r3, #1
 8008c0a:	613b      	str	r3, [r7, #16]
    idx++;
 8008c0c:	7dfb      	ldrb	r3, [r7, #23]
 8008c0e:	3301      	adds	r3, #1
 8008c10:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8008c12:	7dfb      	ldrb	r3, [r7, #23]
 8008c14:	68ba      	ldr	r2, [r7, #8]
 8008c16:	4413      	add	r3, r2
 8008c18:	2200      	movs	r2, #0
 8008c1a:	701a      	strb	r2, [r3, #0]
    idx++;
 8008c1c:	7dfb      	ldrb	r3, [r7, #23]
 8008c1e:	3301      	adds	r3, #1
 8008c20:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8008c22:	693b      	ldr	r3, [r7, #16]
 8008c24:	781b      	ldrb	r3, [r3, #0]
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	d1e7      	bne.n	8008bfa <USBD_GetString+0x52>
 8008c2a:	e000      	b.n	8008c2e <USBD_GetString+0x86>
    return;
 8008c2c:	bf00      	nop
  }
}
 8008c2e:	3718      	adds	r7, #24
 8008c30:	46bd      	mov	sp, r7
 8008c32:	bd80      	pop	{r7, pc}

08008c34 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008c34:	b480      	push	{r7}
 8008c36:	b085      	sub	sp, #20
 8008c38:	af00      	add	r7, sp, #0
 8008c3a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008c3c:	2300      	movs	r3, #0
 8008c3e:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8008c44:	e005      	b.n	8008c52 <USBD_GetLen+0x1e>
  {
    len++;
 8008c46:	7bfb      	ldrb	r3, [r7, #15]
 8008c48:	3301      	adds	r3, #1
 8008c4a:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8008c4c:	68bb      	ldr	r3, [r7, #8]
 8008c4e:	3301      	adds	r3, #1
 8008c50:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8008c52:	68bb      	ldr	r3, [r7, #8]
 8008c54:	781b      	ldrb	r3, [r3, #0]
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d1f5      	bne.n	8008c46 <USBD_GetLen+0x12>
  }

  return len;
 8008c5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c5c:	4618      	mov	r0, r3
 8008c5e:	3714      	adds	r7, #20
 8008c60:	46bd      	mov	sp, r7
 8008c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c66:	4770      	bx	lr

08008c68 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8008c68:	b580      	push	{r7, lr}
 8008c6a:	b084      	sub	sp, #16
 8008c6c:	af00      	add	r7, sp, #0
 8008c6e:	60f8      	str	r0, [r7, #12]
 8008c70:	60b9      	str	r1, [r7, #8]
 8008c72:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008c74:	68fb      	ldr	r3, [r7, #12]
 8008c76:	2202      	movs	r2, #2
 8008c78:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	687a      	ldr	r2, [r7, #4]
 8008c80:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8008c82:	68fb      	ldr	r3, [r7, #12]
 8008c84:	687a      	ldr	r2, [r7, #4]
 8008c86:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	68ba      	ldr	r2, [r7, #8]
 8008c8c:	2100      	movs	r1, #0
 8008c8e:	68f8      	ldr	r0, [r7, #12]
 8008c90:	f000 fcc7 	bl	8009622 <USBD_LL_Transmit>

  return USBD_OK;
 8008c94:	2300      	movs	r3, #0
}
 8008c96:	4618      	mov	r0, r3
 8008c98:	3710      	adds	r7, #16
 8008c9a:	46bd      	mov	sp, r7
 8008c9c:	bd80      	pop	{r7, pc}

08008c9e <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8008c9e:	b580      	push	{r7, lr}
 8008ca0:	b084      	sub	sp, #16
 8008ca2:	af00      	add	r7, sp, #0
 8008ca4:	60f8      	str	r0, [r7, #12]
 8008ca6:	60b9      	str	r1, [r7, #8]
 8008ca8:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	68ba      	ldr	r2, [r7, #8]
 8008cae:	2100      	movs	r1, #0
 8008cb0:	68f8      	ldr	r0, [r7, #12]
 8008cb2:	f000 fcb6 	bl	8009622 <USBD_LL_Transmit>

  return USBD_OK;
 8008cb6:	2300      	movs	r3, #0
}
 8008cb8:	4618      	mov	r0, r3
 8008cba:	3710      	adds	r7, #16
 8008cbc:	46bd      	mov	sp, r7
 8008cbe:	bd80      	pop	{r7, pc}

08008cc0 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8008cc0:	b580      	push	{r7, lr}
 8008cc2:	b084      	sub	sp, #16
 8008cc4:	af00      	add	r7, sp, #0
 8008cc6:	60f8      	str	r0, [r7, #12]
 8008cc8:	60b9      	str	r1, [r7, #8]
 8008cca:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008ccc:	68fb      	ldr	r3, [r7, #12]
 8008cce:	2203      	movs	r2, #3
 8008cd0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8008cd4:	68fb      	ldr	r3, [r7, #12]
 8008cd6:	687a      	ldr	r2, [r7, #4]
 8008cd8:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8008cdc:	68fb      	ldr	r3, [r7, #12]
 8008cde:	687a      	ldr	r2, [r7, #4]
 8008ce0:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	68ba      	ldr	r2, [r7, #8]
 8008ce8:	2100      	movs	r1, #0
 8008cea:	68f8      	ldr	r0, [r7, #12]
 8008cec:	f000 fcba 	bl	8009664 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008cf0:	2300      	movs	r3, #0
}
 8008cf2:	4618      	mov	r0, r3
 8008cf4:	3710      	adds	r7, #16
 8008cf6:	46bd      	mov	sp, r7
 8008cf8:	bd80      	pop	{r7, pc}

08008cfa <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8008cfa:	b580      	push	{r7, lr}
 8008cfc:	b084      	sub	sp, #16
 8008cfe:	af00      	add	r7, sp, #0
 8008d00:	60f8      	str	r0, [r7, #12]
 8008d02:	60b9      	str	r1, [r7, #8]
 8008d04:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	68ba      	ldr	r2, [r7, #8]
 8008d0a:	2100      	movs	r1, #0
 8008d0c:	68f8      	ldr	r0, [r7, #12]
 8008d0e:	f000 fca9 	bl	8009664 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008d12:	2300      	movs	r3, #0
}
 8008d14:	4618      	mov	r0, r3
 8008d16:	3710      	adds	r7, #16
 8008d18:	46bd      	mov	sp, r7
 8008d1a:	bd80      	pop	{r7, pc}

08008d1c <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008d1c:	b580      	push	{r7, lr}
 8008d1e:	b082      	sub	sp, #8
 8008d20:	af00      	add	r7, sp, #0
 8008d22:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	2204      	movs	r2, #4
 8008d28:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008d2c:	2300      	movs	r3, #0
 8008d2e:	2200      	movs	r2, #0
 8008d30:	2100      	movs	r1, #0
 8008d32:	6878      	ldr	r0, [r7, #4]
 8008d34:	f000 fc75 	bl	8009622 <USBD_LL_Transmit>

  return USBD_OK;
 8008d38:	2300      	movs	r3, #0
}
 8008d3a:	4618      	mov	r0, r3
 8008d3c:	3708      	adds	r7, #8
 8008d3e:	46bd      	mov	sp, r7
 8008d40:	bd80      	pop	{r7, pc}

08008d42 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008d42:	b580      	push	{r7, lr}
 8008d44:	b082      	sub	sp, #8
 8008d46:	af00      	add	r7, sp, #0
 8008d48:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	2205      	movs	r2, #5
 8008d4e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008d52:	2300      	movs	r3, #0
 8008d54:	2200      	movs	r2, #0
 8008d56:	2100      	movs	r1, #0
 8008d58:	6878      	ldr	r0, [r7, #4]
 8008d5a:	f000 fc83 	bl	8009664 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008d5e:	2300      	movs	r3, #0
}
 8008d60:	4618      	mov	r0, r3
 8008d62:	3708      	adds	r7, #8
 8008d64:	46bd      	mov	sp, r7
 8008d66:	bd80      	pop	{r7, pc}

08008d68 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008d68:	b580      	push	{r7, lr}
 8008d6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceHS, &HS_Desc, DEVICE_HS) != USBD_OK)
 8008d6c:	2201      	movs	r2, #1
 8008d6e:	4912      	ldr	r1, [pc, #72]	; (8008db8 <MX_USB_DEVICE_Init+0x50>)
 8008d70:	4812      	ldr	r0, [pc, #72]	; (8008dbc <MX_USB_DEVICE_Init+0x54>)
 8008d72:	f7fe fd07 	bl	8007784 <USBD_Init>
 8008d76:	4603      	mov	r3, r0
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	d001      	beq.n	8008d80 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008d7c:	f7f8 f888 	bl	8000e90 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceHS, &USBD_CDC) != USBD_OK)
 8008d80:	490f      	ldr	r1, [pc, #60]	; (8008dc0 <MX_USB_DEVICE_Init+0x58>)
 8008d82:	480e      	ldr	r0, [pc, #56]	; (8008dbc <MX_USB_DEVICE_Init+0x54>)
 8008d84:	f7fe fd2e 	bl	80077e4 <USBD_RegisterClass>
 8008d88:	4603      	mov	r3, r0
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	d001      	beq.n	8008d92 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8008d8e:	f7f8 f87f 	bl	8000e90 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceHS, &USBD_Interface_fops_HS) != USBD_OK)
 8008d92:	490c      	ldr	r1, [pc, #48]	; (8008dc4 <MX_USB_DEVICE_Init+0x5c>)
 8008d94:	4809      	ldr	r0, [pc, #36]	; (8008dbc <MX_USB_DEVICE_Init+0x54>)
 8008d96:	f7fe fc65 	bl	8007664 <USBD_CDC_RegisterInterface>
 8008d9a:	4603      	mov	r3, r0
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	d001      	beq.n	8008da4 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8008da0:	f7f8 f876 	bl	8000e90 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceHS) != USBD_OK)
 8008da4:	4805      	ldr	r0, [pc, #20]	; (8008dbc <MX_USB_DEVICE_Init+0x54>)
 8008da6:	f7fe fd53 	bl	8007850 <USBD_Start>
 8008daa:	4603      	mov	r3, r0
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	d001      	beq.n	8008db4 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8008db0:	f7f8 f86e 	bl	8000e90 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008db4:	bf00      	nop
 8008db6:	bd80      	pop	{r7, pc}
 8008db8:	200000b4 	.word	0x200000b4
 8008dbc:	200002a0 	.word	0x200002a0
 8008dc0:	20000020 	.word	0x20000020
 8008dc4:	200000a0 	.word	0x200000a0

08008dc8 <CDC_Init_HS>:
/**
  * @brief  Initializes the CDC media low layer over the USB HS IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_HS(void)
{
 8008dc8:	b580      	push	{r7, lr}
 8008dca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, UserTxBufferHS, 0);
 8008dcc:	2200      	movs	r2, #0
 8008dce:	4905      	ldr	r1, [pc, #20]	; (8008de4 <CDC_Init_HS+0x1c>)
 8008dd0:	4805      	ldr	r0, [pc, #20]	; (8008de8 <CDC_Init_HS+0x20>)
 8008dd2:	f7fe fc61 	bl	8007698 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, UserRxBufferHS);
 8008dd6:	4905      	ldr	r1, [pc, #20]	; (8008dec <CDC_Init_HS+0x24>)
 8008dd8:	4803      	ldr	r0, [pc, #12]	; (8008de8 <CDC_Init_HS+0x20>)
 8008dda:	f7fe fc7f 	bl	80076dc <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8008dde:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 8008de0:	4618      	mov	r0, r3
 8008de2:	bd80      	pop	{r7, pc}
 8008de4:	20000d7c 	.word	0x20000d7c
 8008de8:	200002a0 	.word	0x200002a0
 8008dec:	2000057c 	.word	0x2000057c

08008df0 <CDC_DeInit_HS>:
  * @brief  DeInitializes the CDC media low layer
  * @param  None
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_HS(void)
{
 8008df0:	b480      	push	{r7}
 8008df2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 9 */
  return (USBD_OK);
 8008df4:	2300      	movs	r3, #0
  /* USER CODE END 9 */
}
 8008df6:	4618      	mov	r0, r3
 8008df8:	46bd      	mov	sp, r7
 8008dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dfe:	4770      	bx	lr

08008e00 <CDC_Control_HS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_HS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8008e00:	b480      	push	{r7}
 8008e02:	b083      	sub	sp, #12
 8008e04:	af00      	add	r7, sp, #0
 8008e06:	4603      	mov	r3, r0
 8008e08:	6039      	str	r1, [r7, #0]
 8008e0a:	71fb      	strb	r3, [r7, #7]
 8008e0c:	4613      	mov	r3, r2
 8008e0e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 10 */
  switch(cmd)
 8008e10:	79fb      	ldrb	r3, [r7, #7]
 8008e12:	2b23      	cmp	r3, #35	; 0x23
 8008e14:	d84a      	bhi.n	8008eac <CDC_Control_HS+0xac>
 8008e16:	a201      	add	r2, pc, #4	; (adr r2, 8008e1c <CDC_Control_HS+0x1c>)
 8008e18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e1c:	08008ead 	.word	0x08008ead
 8008e20:	08008ead 	.word	0x08008ead
 8008e24:	08008ead 	.word	0x08008ead
 8008e28:	08008ead 	.word	0x08008ead
 8008e2c:	08008ead 	.word	0x08008ead
 8008e30:	08008ead 	.word	0x08008ead
 8008e34:	08008ead 	.word	0x08008ead
 8008e38:	08008ead 	.word	0x08008ead
 8008e3c:	08008ead 	.word	0x08008ead
 8008e40:	08008ead 	.word	0x08008ead
 8008e44:	08008ead 	.word	0x08008ead
 8008e48:	08008ead 	.word	0x08008ead
 8008e4c:	08008ead 	.word	0x08008ead
 8008e50:	08008ead 	.word	0x08008ead
 8008e54:	08008ead 	.word	0x08008ead
 8008e58:	08008ead 	.word	0x08008ead
 8008e5c:	08008ead 	.word	0x08008ead
 8008e60:	08008ead 	.word	0x08008ead
 8008e64:	08008ead 	.word	0x08008ead
 8008e68:	08008ead 	.word	0x08008ead
 8008e6c:	08008ead 	.word	0x08008ead
 8008e70:	08008ead 	.word	0x08008ead
 8008e74:	08008ead 	.word	0x08008ead
 8008e78:	08008ead 	.word	0x08008ead
 8008e7c:	08008ead 	.word	0x08008ead
 8008e80:	08008ead 	.word	0x08008ead
 8008e84:	08008ead 	.word	0x08008ead
 8008e88:	08008ead 	.word	0x08008ead
 8008e8c:	08008ead 	.word	0x08008ead
 8008e90:	08008ead 	.word	0x08008ead
 8008e94:	08008ead 	.word	0x08008ead
 8008e98:	08008ead 	.word	0x08008ead
 8008e9c:	08008ead 	.word	0x08008ead
 8008ea0:	08008ead 	.word	0x08008ead
 8008ea4:	08008ead 	.word	0x08008ead
 8008ea8:	08008ead 	.word	0x08008ead
  case CDC_SEND_BREAK:

    break;

  default:
    break;
 8008eac:	bf00      	nop
  }

  return (USBD_OK);
 8008eae:	2300      	movs	r3, #0
  /* USER CODE END 10 */
}
 8008eb0:	4618      	mov	r0, r3
 8008eb2:	370c      	adds	r7, #12
 8008eb4:	46bd      	mov	sp, r7
 8008eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eba:	4770      	bx	lr

08008ebc <CDC_Receive_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAILL
  */
static int8_t CDC_Receive_HS(uint8_t* Buf, uint32_t *Len)
{
 8008ebc:	b580      	push	{r7, lr}
 8008ebe:	b082      	sub	sp, #8
 8008ec0:	af00      	add	r7, sp, #0
 8008ec2:	6078      	str	r0, [r7, #4]
 8008ec4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 11 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, &Buf[0]);
 8008ec6:	6879      	ldr	r1, [r7, #4]
 8008ec8:	4805      	ldr	r0, [pc, #20]	; (8008ee0 <CDC_Receive_HS+0x24>)
 8008eca:	f7fe fc07 	bl	80076dc <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceHS);
 8008ece:	4804      	ldr	r0, [pc, #16]	; (8008ee0 <CDC_Receive_HS+0x24>)
 8008ed0:	f7fe fc22 	bl	8007718 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8008ed4:	2300      	movs	r3, #0
  /* USER CODE END 11 */
}
 8008ed6:	4618      	mov	r0, r3
 8008ed8:	3708      	adds	r7, #8
 8008eda:	46bd      	mov	sp, r7
 8008edc:	bd80      	pop	{r7, pc}
 8008ede:	bf00      	nop
 8008ee0:	200002a0 	.word	0x200002a0

08008ee4 <CDC_TransmitCplt_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_HS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8008ee4:	b480      	push	{r7}
 8008ee6:	b087      	sub	sp, #28
 8008ee8:	af00      	add	r7, sp, #0
 8008eea:	60f8      	str	r0, [r7, #12]
 8008eec:	60b9      	str	r1, [r7, #8]
 8008eee:	4613      	mov	r3, r2
 8008ef0:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8008ef2:	2300      	movs	r3, #0
 8008ef4:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 14 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 14 */
  return result;
 8008ef6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008efa:	4618      	mov	r0, r3
 8008efc:	371c      	adds	r7, #28
 8008efe:	46bd      	mov	sp, r7
 8008f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f04:	4770      	bx	lr
	...

08008f08 <USBD_HS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008f08:	b480      	push	{r7}
 8008f0a:	b083      	sub	sp, #12
 8008f0c:	af00      	add	r7, sp, #0
 8008f0e:	4603      	mov	r3, r0
 8008f10:	6039      	str	r1, [r7, #0]
 8008f12:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_HS_DeviceDesc);
 8008f14:	683b      	ldr	r3, [r7, #0]
 8008f16:	2212      	movs	r2, #18
 8008f18:	801a      	strh	r2, [r3, #0]
  return USBD_HS_DeviceDesc;
 8008f1a:	4b03      	ldr	r3, [pc, #12]	; (8008f28 <USBD_HS_DeviceDescriptor+0x20>)
}
 8008f1c:	4618      	mov	r0, r3
 8008f1e:	370c      	adds	r7, #12
 8008f20:	46bd      	mov	sp, r7
 8008f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f26:	4770      	bx	lr
 8008f28:	200000d0 	.word	0x200000d0

08008f2c <USBD_HS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008f2c:	b480      	push	{r7}
 8008f2e:	b083      	sub	sp, #12
 8008f30:	af00      	add	r7, sp, #0
 8008f32:	4603      	mov	r3, r0
 8008f34:	6039      	str	r1, [r7, #0]
 8008f36:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008f38:	683b      	ldr	r3, [r7, #0]
 8008f3a:	2204      	movs	r2, #4
 8008f3c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008f3e:	4b03      	ldr	r3, [pc, #12]	; (8008f4c <USBD_HS_LangIDStrDescriptor+0x20>)
}
 8008f40:	4618      	mov	r0, r3
 8008f42:	370c      	adds	r7, #12
 8008f44:	46bd      	mov	sp, r7
 8008f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f4a:	4770      	bx	lr
 8008f4c:	200000e4 	.word	0x200000e4

08008f50 <USBD_HS_ProductStrDescriptor>:
  * @param  speed : current device speed
  * @param  length : pointer to data length variable
  * @retval pointer to descriptor buffer
  */
uint8_t * USBD_HS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008f50:	b580      	push	{r7, lr}
 8008f52:	b082      	sub	sp, #8
 8008f54:	af00      	add	r7, sp, #0
 8008f56:	4603      	mov	r3, r0
 8008f58:	6039      	str	r1, [r7, #0]
 8008f5a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008f5c:	79fb      	ldrb	r3, [r7, #7]
 8008f5e:	2b00      	cmp	r3, #0
 8008f60:	d105      	bne.n	8008f6e <USBD_HS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 8008f62:	683a      	ldr	r2, [r7, #0]
 8008f64:	4907      	ldr	r1, [pc, #28]	; (8008f84 <USBD_HS_ProductStrDescriptor+0x34>)
 8008f66:	4808      	ldr	r0, [pc, #32]	; (8008f88 <USBD_HS_ProductStrDescriptor+0x38>)
 8008f68:	f7ff fe1e 	bl	8008ba8 <USBD_GetString>
 8008f6c:	e004      	b.n	8008f78 <USBD_HS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 8008f6e:	683a      	ldr	r2, [r7, #0]
 8008f70:	4904      	ldr	r1, [pc, #16]	; (8008f84 <USBD_HS_ProductStrDescriptor+0x34>)
 8008f72:	4805      	ldr	r0, [pc, #20]	; (8008f88 <USBD_HS_ProductStrDescriptor+0x38>)
 8008f74:	f7ff fe18 	bl	8008ba8 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008f78:	4b02      	ldr	r3, [pc, #8]	; (8008f84 <USBD_HS_ProductStrDescriptor+0x34>)
}
 8008f7a:	4618      	mov	r0, r3
 8008f7c:	3708      	adds	r7, #8
 8008f7e:	46bd      	mov	sp, r7
 8008f80:	bd80      	pop	{r7, pc}
 8008f82:	bf00      	nop
 8008f84:	2000157c 	.word	0x2000157c
 8008f88:	0800a05c 	.word	0x0800a05c

08008f8c <USBD_HS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008f8c:	b580      	push	{r7, lr}
 8008f8e:	b082      	sub	sp, #8
 8008f90:	af00      	add	r7, sp, #0
 8008f92:	4603      	mov	r3, r0
 8008f94:	6039      	str	r1, [r7, #0]
 8008f96:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008f98:	683a      	ldr	r2, [r7, #0]
 8008f9a:	4904      	ldr	r1, [pc, #16]	; (8008fac <USBD_HS_ManufacturerStrDescriptor+0x20>)
 8008f9c:	4804      	ldr	r0, [pc, #16]	; (8008fb0 <USBD_HS_ManufacturerStrDescriptor+0x24>)
 8008f9e:	f7ff fe03 	bl	8008ba8 <USBD_GetString>
  return USBD_StrDesc;
 8008fa2:	4b02      	ldr	r3, [pc, #8]	; (8008fac <USBD_HS_ManufacturerStrDescriptor+0x20>)
}
 8008fa4:	4618      	mov	r0, r3
 8008fa6:	3708      	adds	r7, #8
 8008fa8:	46bd      	mov	sp, r7
 8008faa:	bd80      	pop	{r7, pc}
 8008fac:	2000157c 	.word	0x2000157c
 8008fb0:	0800a074 	.word	0x0800a074

08008fb4 <USBD_HS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008fb4:	b580      	push	{r7, lr}
 8008fb6:	b082      	sub	sp, #8
 8008fb8:	af00      	add	r7, sp, #0
 8008fba:	4603      	mov	r3, r0
 8008fbc:	6039      	str	r1, [r7, #0]
 8008fbe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008fc0:	683b      	ldr	r3, [r7, #0]
 8008fc2:	221a      	movs	r2, #26
 8008fc4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8008fc6:	f000 f843 	bl	8009050 <Get_SerialNum>
  /* USER CODE BEGIN USBD_HS_SerialStrDescriptor */

  /* USER CODE END USBD_HS_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 8008fca:	4b02      	ldr	r3, [pc, #8]	; (8008fd4 <USBD_HS_SerialStrDescriptor+0x20>)
}
 8008fcc:	4618      	mov	r0, r3
 8008fce:	3708      	adds	r7, #8
 8008fd0:	46bd      	mov	sp, r7
 8008fd2:	bd80      	pop	{r7, pc}
 8008fd4:	200000e8 	.word	0x200000e8

08008fd8 <USBD_HS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008fd8:	b580      	push	{r7, lr}
 8008fda:	b082      	sub	sp, #8
 8008fdc:	af00      	add	r7, sp, #0
 8008fde:	4603      	mov	r3, r0
 8008fe0:	6039      	str	r1, [r7, #0]
 8008fe2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008fe4:	79fb      	ldrb	r3, [r7, #7]
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	d105      	bne.n	8008ff6 <USBD_HS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 8008fea:	683a      	ldr	r2, [r7, #0]
 8008fec:	4907      	ldr	r1, [pc, #28]	; (800900c <USBD_HS_ConfigStrDescriptor+0x34>)
 8008fee:	4808      	ldr	r0, [pc, #32]	; (8009010 <USBD_HS_ConfigStrDescriptor+0x38>)
 8008ff0:	f7ff fdda 	bl	8008ba8 <USBD_GetString>
 8008ff4:	e004      	b.n	8009000 <USBD_HS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 8008ff6:	683a      	ldr	r2, [r7, #0]
 8008ff8:	4904      	ldr	r1, [pc, #16]	; (800900c <USBD_HS_ConfigStrDescriptor+0x34>)
 8008ffa:	4805      	ldr	r0, [pc, #20]	; (8009010 <USBD_HS_ConfigStrDescriptor+0x38>)
 8008ffc:	f7ff fdd4 	bl	8008ba8 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009000:	4b02      	ldr	r3, [pc, #8]	; (800900c <USBD_HS_ConfigStrDescriptor+0x34>)
}
 8009002:	4618      	mov	r0, r3
 8009004:	3708      	adds	r7, #8
 8009006:	46bd      	mov	sp, r7
 8009008:	bd80      	pop	{r7, pc}
 800900a:	bf00      	nop
 800900c:	2000157c 	.word	0x2000157c
 8009010:	0800a088 	.word	0x0800a088

08009014 <USBD_HS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009014:	b580      	push	{r7, lr}
 8009016:	b082      	sub	sp, #8
 8009018:	af00      	add	r7, sp, #0
 800901a:	4603      	mov	r3, r0
 800901c:	6039      	str	r1, [r7, #0]
 800901e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009020:	79fb      	ldrb	r3, [r7, #7]
 8009022:	2b00      	cmp	r3, #0
 8009024:	d105      	bne.n	8009032 <USBD_HS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 8009026:	683a      	ldr	r2, [r7, #0]
 8009028:	4907      	ldr	r1, [pc, #28]	; (8009048 <USBD_HS_InterfaceStrDescriptor+0x34>)
 800902a:	4808      	ldr	r0, [pc, #32]	; (800904c <USBD_HS_InterfaceStrDescriptor+0x38>)
 800902c:	f7ff fdbc 	bl	8008ba8 <USBD_GetString>
 8009030:	e004      	b.n	800903c <USBD_HS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 8009032:	683a      	ldr	r2, [r7, #0]
 8009034:	4904      	ldr	r1, [pc, #16]	; (8009048 <USBD_HS_InterfaceStrDescriptor+0x34>)
 8009036:	4805      	ldr	r0, [pc, #20]	; (800904c <USBD_HS_InterfaceStrDescriptor+0x38>)
 8009038:	f7ff fdb6 	bl	8008ba8 <USBD_GetString>
  }
  return USBD_StrDesc;
 800903c:	4b02      	ldr	r3, [pc, #8]	; (8009048 <USBD_HS_InterfaceStrDescriptor+0x34>)
}
 800903e:	4618      	mov	r0, r3
 8009040:	3708      	adds	r7, #8
 8009042:	46bd      	mov	sp, r7
 8009044:	bd80      	pop	{r7, pc}
 8009046:	bf00      	nop
 8009048:	2000157c 	.word	0x2000157c
 800904c:	0800a094 	.word	0x0800a094

08009050 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8009050:	b580      	push	{r7, lr}
 8009052:	b084      	sub	sp, #16
 8009054:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8009056:	4b0f      	ldr	r3, [pc, #60]	; (8009094 <Get_SerialNum+0x44>)
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800905c:	4b0e      	ldr	r3, [pc, #56]	; (8009098 <Get_SerialNum+0x48>)
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8009062:	4b0e      	ldr	r3, [pc, #56]	; (800909c <Get_SerialNum+0x4c>)
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8009068:	68fa      	ldr	r2, [r7, #12]
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	4413      	add	r3, r2
 800906e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8009070:	68fb      	ldr	r3, [r7, #12]
 8009072:	2b00      	cmp	r3, #0
 8009074:	d009      	beq.n	800908a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8009076:	2208      	movs	r2, #8
 8009078:	4909      	ldr	r1, [pc, #36]	; (80090a0 <Get_SerialNum+0x50>)
 800907a:	68f8      	ldr	r0, [r7, #12]
 800907c:	f000 f814 	bl	80090a8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8009080:	2204      	movs	r2, #4
 8009082:	4908      	ldr	r1, [pc, #32]	; (80090a4 <Get_SerialNum+0x54>)
 8009084:	68b8      	ldr	r0, [r7, #8]
 8009086:	f000 f80f 	bl	80090a8 <IntToUnicode>
  }
}
 800908a:	bf00      	nop
 800908c:	3710      	adds	r7, #16
 800908e:	46bd      	mov	sp, r7
 8009090:	bd80      	pop	{r7, pc}
 8009092:	bf00      	nop
 8009094:	1fff7a10 	.word	0x1fff7a10
 8009098:	1fff7a14 	.word	0x1fff7a14
 800909c:	1fff7a18 	.word	0x1fff7a18
 80090a0:	200000ea 	.word	0x200000ea
 80090a4:	200000fa 	.word	0x200000fa

080090a8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80090a8:	b480      	push	{r7}
 80090aa:	b087      	sub	sp, #28
 80090ac:	af00      	add	r7, sp, #0
 80090ae:	60f8      	str	r0, [r7, #12]
 80090b0:	60b9      	str	r1, [r7, #8]
 80090b2:	4613      	mov	r3, r2
 80090b4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80090b6:	2300      	movs	r3, #0
 80090b8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80090ba:	2300      	movs	r3, #0
 80090bc:	75fb      	strb	r3, [r7, #23]
 80090be:	e027      	b.n	8009110 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	0f1b      	lsrs	r3, r3, #28
 80090c4:	2b09      	cmp	r3, #9
 80090c6:	d80b      	bhi.n	80090e0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80090c8:	68fb      	ldr	r3, [r7, #12]
 80090ca:	0f1b      	lsrs	r3, r3, #28
 80090cc:	b2da      	uxtb	r2, r3
 80090ce:	7dfb      	ldrb	r3, [r7, #23]
 80090d0:	005b      	lsls	r3, r3, #1
 80090d2:	4619      	mov	r1, r3
 80090d4:	68bb      	ldr	r3, [r7, #8]
 80090d6:	440b      	add	r3, r1
 80090d8:	3230      	adds	r2, #48	; 0x30
 80090da:	b2d2      	uxtb	r2, r2
 80090dc:	701a      	strb	r2, [r3, #0]
 80090de:	e00a      	b.n	80090f6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80090e0:	68fb      	ldr	r3, [r7, #12]
 80090e2:	0f1b      	lsrs	r3, r3, #28
 80090e4:	b2da      	uxtb	r2, r3
 80090e6:	7dfb      	ldrb	r3, [r7, #23]
 80090e8:	005b      	lsls	r3, r3, #1
 80090ea:	4619      	mov	r1, r3
 80090ec:	68bb      	ldr	r3, [r7, #8]
 80090ee:	440b      	add	r3, r1
 80090f0:	3237      	adds	r2, #55	; 0x37
 80090f2:	b2d2      	uxtb	r2, r2
 80090f4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80090f6:	68fb      	ldr	r3, [r7, #12]
 80090f8:	011b      	lsls	r3, r3, #4
 80090fa:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80090fc:	7dfb      	ldrb	r3, [r7, #23]
 80090fe:	005b      	lsls	r3, r3, #1
 8009100:	3301      	adds	r3, #1
 8009102:	68ba      	ldr	r2, [r7, #8]
 8009104:	4413      	add	r3, r2
 8009106:	2200      	movs	r2, #0
 8009108:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800910a:	7dfb      	ldrb	r3, [r7, #23]
 800910c:	3301      	adds	r3, #1
 800910e:	75fb      	strb	r3, [r7, #23]
 8009110:	7dfa      	ldrb	r2, [r7, #23]
 8009112:	79fb      	ldrb	r3, [r7, #7]
 8009114:	429a      	cmp	r2, r3
 8009116:	d3d3      	bcc.n	80090c0 <IntToUnicode+0x18>
  }
}
 8009118:	bf00      	nop
 800911a:	bf00      	nop
 800911c:	371c      	adds	r7, #28
 800911e:	46bd      	mov	sp, r7
 8009120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009124:	4770      	bx	lr
	...

08009128 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8009128:	b580      	push	{r7, lr}
 800912a:	b08a      	sub	sp, #40	; 0x28
 800912c:	af00      	add	r7, sp, #0
 800912e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009130:	f107 0314 	add.w	r3, r7, #20
 8009134:	2200      	movs	r2, #0
 8009136:	601a      	str	r2, [r3, #0]
 8009138:	605a      	str	r2, [r3, #4]
 800913a:	609a      	str	r2, [r3, #8]
 800913c:	60da      	str	r2, [r3, #12]
 800913e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_HS)
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	4a1d      	ldr	r2, [pc, #116]	; (80091bc <HAL_PCD_MspInit+0x94>)
 8009146:	4293      	cmp	r3, r2
 8009148:	d134      	bne.n	80091b4 <HAL_PCD_MspInit+0x8c>
  {
  /* USER CODE BEGIN USB_OTG_HS_MspInit 0 */

  /* USER CODE END USB_OTG_HS_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800914a:	2300      	movs	r3, #0
 800914c:	613b      	str	r3, [r7, #16]
 800914e:	4b1c      	ldr	r3, [pc, #112]	; (80091c0 <HAL_PCD_MspInit+0x98>)
 8009150:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009152:	4a1b      	ldr	r2, [pc, #108]	; (80091c0 <HAL_PCD_MspInit+0x98>)
 8009154:	f043 0302 	orr.w	r3, r3, #2
 8009158:	6313      	str	r3, [r2, #48]	; 0x30
 800915a:	4b19      	ldr	r3, [pc, #100]	; (80091c0 <HAL_PCD_MspInit+0x98>)
 800915c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800915e:	f003 0302 	and.w	r3, r3, #2
 8009162:	613b      	str	r3, [r7, #16]
 8009164:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_HS GPIO Configuration
    PB14     ------> USB_OTG_HS_DM
    PB15     ------> USB_OTG_HS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8009166:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800916a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800916c:	2302      	movs	r3, #2
 800916e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009170:	2300      	movs	r3, #0
 8009172:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009174:	2303      	movs	r3, #3
 8009176:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 8009178:	230c      	movs	r3, #12
 800917a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800917c:	f107 0314 	add.w	r3, r7, #20
 8009180:	4619      	mov	r1, r3
 8009182:	4810      	ldr	r0, [pc, #64]	; (80091c4 <HAL_PCD_MspInit+0x9c>)
 8009184:	f7f8 fb2a 	bl	80017dc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 8009188:	2300      	movs	r3, #0
 800918a:	60fb      	str	r3, [r7, #12]
 800918c:	4b0c      	ldr	r3, [pc, #48]	; (80091c0 <HAL_PCD_MspInit+0x98>)
 800918e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009190:	4a0b      	ldr	r2, [pc, #44]	; (80091c0 <HAL_PCD_MspInit+0x98>)
 8009192:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009196:	6313      	str	r3, [r2, #48]	; 0x30
 8009198:	4b09      	ldr	r3, [pc, #36]	; (80091c0 <HAL_PCD_MspInit+0x98>)
 800919a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800919c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80091a0:	60fb      	str	r3, [r7, #12]
 80091a2:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 0, 0);
 80091a4:	2200      	movs	r2, #0
 80091a6:	2100      	movs	r1, #0
 80091a8:	204d      	movs	r0, #77	; 0x4d
 80091aa:	f7f8 fa4e 	bl	800164a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 80091ae:	204d      	movs	r0, #77	; 0x4d
 80091b0:	f7f8 fa67 	bl	8001682 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 80091b4:	bf00      	nop
 80091b6:	3728      	adds	r7, #40	; 0x28
 80091b8:	46bd      	mov	sp, r7
 80091ba:	bd80      	pop	{r7, pc}
 80091bc:	40040000 	.word	0x40040000
 80091c0:	40023800 	.word	0x40023800
 80091c4:	40020400 	.word	0x40020400

080091c8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80091c8:	b580      	push	{r7, lr}
 80091ca:	b082      	sub	sp, #8
 80091cc:	af00      	add	r7, sp, #0
 80091ce:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80091dc:	4619      	mov	r1, r3
 80091de:	4610      	mov	r0, r2
 80091e0:	f7fe fb83 	bl	80078ea <USBD_LL_SetupStage>
}
 80091e4:	bf00      	nop
 80091e6:	3708      	adds	r7, #8
 80091e8:	46bd      	mov	sp, r7
 80091ea:	bd80      	pop	{r7, pc}

080091ec <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80091ec:	b580      	push	{r7, lr}
 80091ee:	b082      	sub	sp, #8
 80091f0:	af00      	add	r7, sp, #0
 80091f2:	6078      	str	r0, [r7, #4]
 80091f4:	460b      	mov	r3, r1
 80091f6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 80091fe:	78fa      	ldrb	r2, [r7, #3]
 8009200:	6879      	ldr	r1, [r7, #4]
 8009202:	4613      	mov	r3, r2
 8009204:	00db      	lsls	r3, r3, #3
 8009206:	4413      	add	r3, r2
 8009208:	009b      	lsls	r3, r3, #2
 800920a:	440b      	add	r3, r1
 800920c:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8009210:	681a      	ldr	r2, [r3, #0]
 8009212:	78fb      	ldrb	r3, [r7, #3]
 8009214:	4619      	mov	r1, r3
 8009216:	f7fe fbbd 	bl	8007994 <USBD_LL_DataOutStage>
}
 800921a:	bf00      	nop
 800921c:	3708      	adds	r7, #8
 800921e:	46bd      	mov	sp, r7
 8009220:	bd80      	pop	{r7, pc}

08009222 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009222:	b580      	push	{r7, lr}
 8009224:	b082      	sub	sp, #8
 8009226:	af00      	add	r7, sp, #0
 8009228:	6078      	str	r0, [r7, #4]
 800922a:	460b      	mov	r3, r1
 800922c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8009234:	78fa      	ldrb	r2, [r7, #3]
 8009236:	6879      	ldr	r1, [r7, #4]
 8009238:	4613      	mov	r3, r2
 800923a:	00db      	lsls	r3, r3, #3
 800923c:	4413      	add	r3, r2
 800923e:	009b      	lsls	r3, r3, #2
 8009240:	440b      	add	r3, r1
 8009242:	334c      	adds	r3, #76	; 0x4c
 8009244:	681a      	ldr	r2, [r3, #0]
 8009246:	78fb      	ldrb	r3, [r7, #3]
 8009248:	4619      	mov	r1, r3
 800924a:	f7fe fc56 	bl	8007afa <USBD_LL_DataInStage>
}
 800924e:	bf00      	nop
 8009250:	3708      	adds	r7, #8
 8009252:	46bd      	mov	sp, r7
 8009254:	bd80      	pop	{r7, pc}

08009256 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009256:	b580      	push	{r7, lr}
 8009258:	b082      	sub	sp, #8
 800925a:	af00      	add	r7, sp, #0
 800925c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009264:	4618      	mov	r0, r3
 8009266:	f7fe fd8a 	bl	8007d7e <USBD_LL_SOF>
}
 800926a:	bf00      	nop
 800926c:	3708      	adds	r7, #8
 800926e:	46bd      	mov	sp, r7
 8009270:	bd80      	pop	{r7, pc}

08009272 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009272:	b580      	push	{r7, lr}
 8009274:	b084      	sub	sp, #16
 8009276:	af00      	add	r7, sp, #0
 8009278:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800927a:	2301      	movs	r3, #1
 800927c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	68db      	ldr	r3, [r3, #12]
 8009282:	2b00      	cmp	r3, #0
 8009284:	d102      	bne.n	800928c <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8009286:	2300      	movs	r3, #0
 8009288:	73fb      	strb	r3, [r7, #15]
 800928a:	e008      	b.n	800929e <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	68db      	ldr	r3, [r3, #12]
 8009290:	2b02      	cmp	r3, #2
 8009292:	d102      	bne.n	800929a <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8009294:	2301      	movs	r3, #1
 8009296:	73fb      	strb	r3, [r7, #15]
 8009298:	e001      	b.n	800929e <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800929a:	f7f7 fdf9 	bl	8000e90 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80092a4:	7bfa      	ldrb	r2, [r7, #15]
 80092a6:	4611      	mov	r1, r2
 80092a8:	4618      	mov	r0, r3
 80092aa:	f7fe fd2a 	bl	8007d02 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80092b4:	4618      	mov	r0, r3
 80092b6:	f7fe fcd2 	bl	8007c5e <USBD_LL_Reset>
}
 80092ba:	bf00      	nop
 80092bc:	3710      	adds	r7, #16
 80092be:	46bd      	mov	sp, r7
 80092c0:	bd80      	pop	{r7, pc}
	...

080092c4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80092c4:	b580      	push	{r7, lr}
 80092c6:	b082      	sub	sp, #8
 80092c8:	af00      	add	r7, sp, #0
 80092ca:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80092d2:	4618      	mov	r0, r3
 80092d4:	f7fe fd25 	bl	8007d22 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80092e0:	681b      	ldr	r3, [r3, #0]
 80092e2:	687a      	ldr	r2, [r7, #4]
 80092e4:	6812      	ldr	r2, [r2, #0]
 80092e6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80092ea:	f043 0301 	orr.w	r3, r3, #1
 80092ee:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	6a1b      	ldr	r3, [r3, #32]
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	d005      	beq.n	8009304 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80092f8:	4b04      	ldr	r3, [pc, #16]	; (800930c <HAL_PCD_SuspendCallback+0x48>)
 80092fa:	691b      	ldr	r3, [r3, #16]
 80092fc:	4a03      	ldr	r2, [pc, #12]	; (800930c <HAL_PCD_SuspendCallback+0x48>)
 80092fe:	f043 0306 	orr.w	r3, r3, #6
 8009302:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8009304:	bf00      	nop
 8009306:	3708      	adds	r7, #8
 8009308:	46bd      	mov	sp, r7
 800930a:	bd80      	pop	{r7, pc}
 800930c:	e000ed00 	.word	0xe000ed00

08009310 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009310:	b580      	push	{r7, lr}
 8009312:	b082      	sub	sp, #8
 8009314:	af00      	add	r7, sp, #0
 8009316:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800931e:	4618      	mov	r0, r3
 8009320:	f7fe fd15 	bl	8007d4e <USBD_LL_Resume>
}
 8009324:	bf00      	nop
 8009326:	3708      	adds	r7, #8
 8009328:	46bd      	mov	sp, r7
 800932a:	bd80      	pop	{r7, pc}

0800932c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800932c:	b580      	push	{r7, lr}
 800932e:	b082      	sub	sp, #8
 8009330:	af00      	add	r7, sp, #0
 8009332:	6078      	str	r0, [r7, #4]
 8009334:	460b      	mov	r3, r1
 8009336:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800933e:	78fa      	ldrb	r2, [r7, #3]
 8009340:	4611      	mov	r1, r2
 8009342:	4618      	mov	r0, r3
 8009344:	f7fe fd6d 	bl	8007e22 <USBD_LL_IsoOUTIncomplete>
}
 8009348:	bf00      	nop
 800934a:	3708      	adds	r7, #8
 800934c:	46bd      	mov	sp, r7
 800934e:	bd80      	pop	{r7, pc}

08009350 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009350:	b580      	push	{r7, lr}
 8009352:	b082      	sub	sp, #8
 8009354:	af00      	add	r7, sp, #0
 8009356:	6078      	str	r0, [r7, #4]
 8009358:	460b      	mov	r3, r1
 800935a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009362:	78fa      	ldrb	r2, [r7, #3]
 8009364:	4611      	mov	r1, r2
 8009366:	4618      	mov	r0, r3
 8009368:	f7fe fd29 	bl	8007dbe <USBD_LL_IsoINIncomplete>
}
 800936c:	bf00      	nop
 800936e:	3708      	adds	r7, #8
 8009370:	46bd      	mov	sp, r7
 8009372:	bd80      	pop	{r7, pc}

08009374 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009374:	b580      	push	{r7, lr}
 8009376:	b082      	sub	sp, #8
 8009378:	af00      	add	r7, sp, #0
 800937a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009382:	4618      	mov	r0, r3
 8009384:	f7fe fd7f 	bl	8007e86 <USBD_LL_DevConnected>
}
 8009388:	bf00      	nop
 800938a:	3708      	adds	r7, #8
 800938c:	46bd      	mov	sp, r7
 800938e:	bd80      	pop	{r7, pc}

08009390 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009390:	b580      	push	{r7, lr}
 8009392:	b082      	sub	sp, #8
 8009394:	af00      	add	r7, sp, #0
 8009396:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800939e:	4618      	mov	r0, r3
 80093a0:	f7fe fd7c 	bl	8007e9c <USBD_LL_DevDisconnected>
}
 80093a4:	bf00      	nop
 80093a6:	3708      	adds	r7, #8
 80093a8:	46bd      	mov	sp, r7
 80093aa:	bd80      	pop	{r7, pc}

080093ac <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80093ac:	b580      	push	{r7, lr}
 80093ae:	b082      	sub	sp, #8
 80093b0:	af00      	add	r7, sp, #0
 80093b2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_HS) {
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	781b      	ldrb	r3, [r3, #0]
 80093b8:	2b01      	cmp	r3, #1
 80093ba:	d140      	bne.n	800943e <USBD_LL_Init+0x92>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_HS.pData = pdev;
 80093bc:	4a22      	ldr	r2, [pc, #136]	; (8009448 <USBD_LL_Init+0x9c>)
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_HS;
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	4a20      	ldr	r2, [pc, #128]	; (8009448 <USBD_LL_Init+0x9c>)
 80093c8:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 80093cc:	4b1e      	ldr	r3, [pc, #120]	; (8009448 <USBD_LL_Init+0x9c>)
 80093ce:	4a1f      	ldr	r2, [pc, #124]	; (800944c <USBD_LL_Init+0xa0>)
 80093d0:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_HS.Init.dev_endpoints = 6;
 80093d2:	4b1d      	ldr	r3, [pc, #116]	; (8009448 <USBD_LL_Init+0x9c>)
 80093d4:	2206      	movs	r2, #6
 80093d6:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_FULL;
 80093d8:	4b1b      	ldr	r3, [pc, #108]	; (8009448 <USBD_LL_Init+0x9c>)
 80093da:	2202      	movs	r2, #2
 80093dc:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 80093de:	4b1a      	ldr	r3, [pc, #104]	; (8009448 <USBD_LL_Init+0x9c>)
 80093e0:	2200      	movs	r2, #0
 80093e2:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 80093e4:	4b18      	ldr	r3, [pc, #96]	; (8009448 <USBD_LL_Init+0x9c>)
 80093e6:	2202      	movs	r2, #2
 80093e8:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 80093ea:	4b17      	ldr	r3, [pc, #92]	; (8009448 <USBD_LL_Init+0x9c>)
 80093ec:	2200      	movs	r2, #0
 80093ee:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 80093f0:	4b15      	ldr	r3, [pc, #84]	; (8009448 <USBD_LL_Init+0x9c>)
 80093f2:	2200      	movs	r2, #0
 80093f4:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 80093f6:	4b14      	ldr	r3, [pc, #80]	; (8009448 <USBD_LL_Init+0x9c>)
 80093f8:	2200      	movs	r2, #0
 80093fa:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 80093fc:	4b12      	ldr	r3, [pc, #72]	; (8009448 <USBD_LL_Init+0x9c>)
 80093fe:	2200      	movs	r2, #0
 8009400:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 8009402:	4b11      	ldr	r3, [pc, #68]	; (8009448 <USBD_LL_Init+0x9c>)
 8009404:	2200      	movs	r2, #0
 8009406:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 8009408:	4b0f      	ldr	r3, [pc, #60]	; (8009448 <USBD_LL_Init+0x9c>)
 800940a:	2200      	movs	r2, #0
 800940c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 800940e:	480e      	ldr	r0, [pc, #56]	; (8009448 <USBD_LL_Init+0x9c>)
 8009410:	f7f8 fb99 	bl	8001b46 <HAL_PCD_Init>
 8009414:	4603      	mov	r3, r0
 8009416:	2b00      	cmp	r3, #0
 8009418:	d001      	beq.n	800941e <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 800941a:	f7f7 fd39 	bl	8000e90 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_HS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_HS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_HS, 0x200);
 800941e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8009422:	4809      	ldr	r0, [pc, #36]	; (8009448 <USBD_LL_Init+0x9c>)
 8009424:	f7f9 fdef 	bl	8003006 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 0, 0x80);
 8009428:	2280      	movs	r2, #128	; 0x80
 800942a:	2100      	movs	r1, #0
 800942c:	4806      	ldr	r0, [pc, #24]	; (8009448 <USBD_LL_Init+0x9c>)
 800942e:	f7f9 fda3 	bl	8002f78 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 1, 0x174);
 8009432:	f44f 72ba 	mov.w	r2, #372	; 0x174
 8009436:	2101      	movs	r1, #1
 8009438:	4803      	ldr	r0, [pc, #12]	; (8009448 <USBD_LL_Init+0x9c>)
 800943a:	f7f9 fd9d 	bl	8002f78 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800943e:	2300      	movs	r3, #0
}
 8009440:	4618      	mov	r0, r3
 8009442:	3708      	adds	r7, #8
 8009444:	46bd      	mov	sp, r7
 8009446:	bd80      	pop	{r7, pc}
 8009448:	2000177c 	.word	0x2000177c
 800944c:	40040000 	.word	0x40040000

08009450 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009450:	b580      	push	{r7, lr}
 8009452:	b084      	sub	sp, #16
 8009454:	af00      	add	r7, sp, #0
 8009456:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009458:	2300      	movs	r3, #0
 800945a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800945c:	2300      	movs	r3, #0
 800945e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009466:	4618      	mov	r0, r3
 8009468:	f7f8 fc8a 	bl	8001d80 <HAL_PCD_Start>
 800946c:	4603      	mov	r3, r0
 800946e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009470:	7bfb      	ldrb	r3, [r7, #15]
 8009472:	4618      	mov	r0, r3
 8009474:	f000 f942 	bl	80096fc <USBD_Get_USB_Status>
 8009478:	4603      	mov	r3, r0
 800947a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800947c:	7bbb      	ldrb	r3, [r7, #14]
}
 800947e:	4618      	mov	r0, r3
 8009480:	3710      	adds	r7, #16
 8009482:	46bd      	mov	sp, r7
 8009484:	bd80      	pop	{r7, pc}

08009486 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8009486:	b580      	push	{r7, lr}
 8009488:	b084      	sub	sp, #16
 800948a:	af00      	add	r7, sp, #0
 800948c:	6078      	str	r0, [r7, #4]
 800948e:	4608      	mov	r0, r1
 8009490:	4611      	mov	r1, r2
 8009492:	461a      	mov	r2, r3
 8009494:	4603      	mov	r3, r0
 8009496:	70fb      	strb	r3, [r7, #3]
 8009498:	460b      	mov	r3, r1
 800949a:	70bb      	strb	r3, [r7, #2]
 800949c:	4613      	mov	r3, r2
 800949e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80094a0:	2300      	movs	r3, #0
 80094a2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80094a4:	2300      	movs	r3, #0
 80094a6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80094ae:	78bb      	ldrb	r3, [r7, #2]
 80094b0:	883a      	ldrh	r2, [r7, #0]
 80094b2:	78f9      	ldrb	r1, [r7, #3]
 80094b4:	f7f9 f95b 	bl	800276e <HAL_PCD_EP_Open>
 80094b8:	4603      	mov	r3, r0
 80094ba:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80094bc:	7bfb      	ldrb	r3, [r7, #15]
 80094be:	4618      	mov	r0, r3
 80094c0:	f000 f91c 	bl	80096fc <USBD_Get_USB_Status>
 80094c4:	4603      	mov	r3, r0
 80094c6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80094c8:	7bbb      	ldrb	r3, [r7, #14]
}
 80094ca:	4618      	mov	r0, r3
 80094cc:	3710      	adds	r7, #16
 80094ce:	46bd      	mov	sp, r7
 80094d0:	bd80      	pop	{r7, pc}

080094d2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80094d2:	b580      	push	{r7, lr}
 80094d4:	b084      	sub	sp, #16
 80094d6:	af00      	add	r7, sp, #0
 80094d8:	6078      	str	r0, [r7, #4]
 80094da:	460b      	mov	r3, r1
 80094dc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80094de:	2300      	movs	r3, #0
 80094e0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80094e2:	2300      	movs	r3, #0
 80094e4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80094ec:	78fa      	ldrb	r2, [r7, #3]
 80094ee:	4611      	mov	r1, r2
 80094f0:	4618      	mov	r0, r3
 80094f2:	f7f9 f9a4 	bl	800283e <HAL_PCD_EP_Close>
 80094f6:	4603      	mov	r3, r0
 80094f8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80094fa:	7bfb      	ldrb	r3, [r7, #15]
 80094fc:	4618      	mov	r0, r3
 80094fe:	f000 f8fd 	bl	80096fc <USBD_Get_USB_Status>
 8009502:	4603      	mov	r3, r0
 8009504:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009506:	7bbb      	ldrb	r3, [r7, #14]
}
 8009508:	4618      	mov	r0, r3
 800950a:	3710      	adds	r7, #16
 800950c:	46bd      	mov	sp, r7
 800950e:	bd80      	pop	{r7, pc}

08009510 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009510:	b580      	push	{r7, lr}
 8009512:	b084      	sub	sp, #16
 8009514:	af00      	add	r7, sp, #0
 8009516:	6078      	str	r0, [r7, #4]
 8009518:	460b      	mov	r3, r1
 800951a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800951c:	2300      	movs	r3, #0
 800951e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009520:	2300      	movs	r3, #0
 8009522:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800952a:	78fa      	ldrb	r2, [r7, #3]
 800952c:	4611      	mov	r1, r2
 800952e:	4618      	mov	r0, r3
 8009530:	f7f9 fa7c 	bl	8002a2c <HAL_PCD_EP_SetStall>
 8009534:	4603      	mov	r3, r0
 8009536:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009538:	7bfb      	ldrb	r3, [r7, #15]
 800953a:	4618      	mov	r0, r3
 800953c:	f000 f8de 	bl	80096fc <USBD_Get_USB_Status>
 8009540:	4603      	mov	r3, r0
 8009542:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009544:	7bbb      	ldrb	r3, [r7, #14]
}
 8009546:	4618      	mov	r0, r3
 8009548:	3710      	adds	r7, #16
 800954a:	46bd      	mov	sp, r7
 800954c:	bd80      	pop	{r7, pc}

0800954e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800954e:	b580      	push	{r7, lr}
 8009550:	b084      	sub	sp, #16
 8009552:	af00      	add	r7, sp, #0
 8009554:	6078      	str	r0, [r7, #4]
 8009556:	460b      	mov	r3, r1
 8009558:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800955a:	2300      	movs	r3, #0
 800955c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800955e:	2300      	movs	r3, #0
 8009560:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009568:	78fa      	ldrb	r2, [r7, #3]
 800956a:	4611      	mov	r1, r2
 800956c:	4618      	mov	r0, r3
 800956e:	f7f9 fac1 	bl	8002af4 <HAL_PCD_EP_ClrStall>
 8009572:	4603      	mov	r3, r0
 8009574:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009576:	7bfb      	ldrb	r3, [r7, #15]
 8009578:	4618      	mov	r0, r3
 800957a:	f000 f8bf 	bl	80096fc <USBD_Get_USB_Status>
 800957e:	4603      	mov	r3, r0
 8009580:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009582:	7bbb      	ldrb	r3, [r7, #14]
}
 8009584:	4618      	mov	r0, r3
 8009586:	3710      	adds	r7, #16
 8009588:	46bd      	mov	sp, r7
 800958a:	bd80      	pop	{r7, pc}

0800958c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800958c:	b480      	push	{r7}
 800958e:	b085      	sub	sp, #20
 8009590:	af00      	add	r7, sp, #0
 8009592:	6078      	str	r0, [r7, #4]
 8009594:	460b      	mov	r3, r1
 8009596:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800959e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80095a0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80095a4:	2b00      	cmp	r3, #0
 80095a6:	da0b      	bge.n	80095c0 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80095a8:	78fb      	ldrb	r3, [r7, #3]
 80095aa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80095ae:	68f9      	ldr	r1, [r7, #12]
 80095b0:	4613      	mov	r3, r2
 80095b2:	00db      	lsls	r3, r3, #3
 80095b4:	4413      	add	r3, r2
 80095b6:	009b      	lsls	r3, r3, #2
 80095b8:	440b      	add	r3, r1
 80095ba:	333e      	adds	r3, #62	; 0x3e
 80095bc:	781b      	ldrb	r3, [r3, #0]
 80095be:	e00b      	b.n	80095d8 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80095c0:	78fb      	ldrb	r3, [r7, #3]
 80095c2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80095c6:	68f9      	ldr	r1, [r7, #12]
 80095c8:	4613      	mov	r3, r2
 80095ca:	00db      	lsls	r3, r3, #3
 80095cc:	4413      	add	r3, r2
 80095ce:	009b      	lsls	r3, r3, #2
 80095d0:	440b      	add	r3, r1
 80095d2:	f203 237e 	addw	r3, r3, #638	; 0x27e
 80095d6:	781b      	ldrb	r3, [r3, #0]
  }
}
 80095d8:	4618      	mov	r0, r3
 80095da:	3714      	adds	r7, #20
 80095dc:	46bd      	mov	sp, r7
 80095de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095e2:	4770      	bx	lr

080095e4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80095e4:	b580      	push	{r7, lr}
 80095e6:	b084      	sub	sp, #16
 80095e8:	af00      	add	r7, sp, #0
 80095ea:	6078      	str	r0, [r7, #4]
 80095ec:	460b      	mov	r3, r1
 80095ee:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80095f0:	2300      	movs	r3, #0
 80095f2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80095f4:	2300      	movs	r3, #0
 80095f6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80095fe:	78fa      	ldrb	r2, [r7, #3]
 8009600:	4611      	mov	r1, r2
 8009602:	4618      	mov	r0, r3
 8009604:	f7f9 f88e 	bl	8002724 <HAL_PCD_SetAddress>
 8009608:	4603      	mov	r3, r0
 800960a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800960c:	7bfb      	ldrb	r3, [r7, #15]
 800960e:	4618      	mov	r0, r3
 8009610:	f000 f874 	bl	80096fc <USBD_Get_USB_Status>
 8009614:	4603      	mov	r3, r0
 8009616:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009618:	7bbb      	ldrb	r3, [r7, #14]
}
 800961a:	4618      	mov	r0, r3
 800961c:	3710      	adds	r7, #16
 800961e:	46bd      	mov	sp, r7
 8009620:	bd80      	pop	{r7, pc}

08009622 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009622:	b580      	push	{r7, lr}
 8009624:	b086      	sub	sp, #24
 8009626:	af00      	add	r7, sp, #0
 8009628:	60f8      	str	r0, [r7, #12]
 800962a:	607a      	str	r2, [r7, #4]
 800962c:	603b      	str	r3, [r7, #0]
 800962e:	460b      	mov	r3, r1
 8009630:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009632:	2300      	movs	r3, #0
 8009634:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009636:	2300      	movs	r3, #0
 8009638:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800963a:	68fb      	ldr	r3, [r7, #12]
 800963c:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8009640:	7af9      	ldrb	r1, [r7, #11]
 8009642:	683b      	ldr	r3, [r7, #0]
 8009644:	687a      	ldr	r2, [r7, #4]
 8009646:	f7f9 f9a7 	bl	8002998 <HAL_PCD_EP_Transmit>
 800964a:	4603      	mov	r3, r0
 800964c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800964e:	7dfb      	ldrb	r3, [r7, #23]
 8009650:	4618      	mov	r0, r3
 8009652:	f000 f853 	bl	80096fc <USBD_Get_USB_Status>
 8009656:	4603      	mov	r3, r0
 8009658:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800965a:	7dbb      	ldrb	r3, [r7, #22]
}
 800965c:	4618      	mov	r0, r3
 800965e:	3718      	adds	r7, #24
 8009660:	46bd      	mov	sp, r7
 8009662:	bd80      	pop	{r7, pc}

08009664 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009664:	b580      	push	{r7, lr}
 8009666:	b086      	sub	sp, #24
 8009668:	af00      	add	r7, sp, #0
 800966a:	60f8      	str	r0, [r7, #12]
 800966c:	607a      	str	r2, [r7, #4]
 800966e:	603b      	str	r3, [r7, #0]
 8009670:	460b      	mov	r3, r1
 8009672:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009674:	2300      	movs	r3, #0
 8009676:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009678:	2300      	movs	r3, #0
 800967a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800967c:	68fb      	ldr	r3, [r7, #12]
 800967e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8009682:	7af9      	ldrb	r1, [r7, #11]
 8009684:	683b      	ldr	r3, [r7, #0]
 8009686:	687a      	ldr	r2, [r7, #4]
 8009688:	f7f9 f923 	bl	80028d2 <HAL_PCD_EP_Receive>
 800968c:	4603      	mov	r3, r0
 800968e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009690:	7dfb      	ldrb	r3, [r7, #23]
 8009692:	4618      	mov	r0, r3
 8009694:	f000 f832 	bl	80096fc <USBD_Get_USB_Status>
 8009698:	4603      	mov	r3, r0
 800969a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800969c:	7dbb      	ldrb	r3, [r7, #22]
}
 800969e:	4618      	mov	r0, r3
 80096a0:	3718      	adds	r7, #24
 80096a2:	46bd      	mov	sp, r7
 80096a4:	bd80      	pop	{r7, pc}

080096a6 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80096a6:	b580      	push	{r7, lr}
 80096a8:	b082      	sub	sp, #8
 80096aa:	af00      	add	r7, sp, #0
 80096ac:	6078      	str	r0, [r7, #4]
 80096ae:	460b      	mov	r3, r1
 80096b0:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80096b8:	78fa      	ldrb	r2, [r7, #3]
 80096ba:	4611      	mov	r1, r2
 80096bc:	4618      	mov	r0, r3
 80096be:	f7f9 f953 	bl	8002968 <HAL_PCD_EP_GetRxCount>
 80096c2:	4603      	mov	r3, r0
}
 80096c4:	4618      	mov	r0, r3
 80096c6:	3708      	adds	r7, #8
 80096c8:	46bd      	mov	sp, r7
 80096ca:	bd80      	pop	{r7, pc}

080096cc <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80096cc:	b480      	push	{r7}
 80096ce:	b083      	sub	sp, #12
 80096d0:	af00      	add	r7, sp, #0
 80096d2:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80096d4:	4b03      	ldr	r3, [pc, #12]	; (80096e4 <USBD_static_malloc+0x18>)
}
 80096d6:	4618      	mov	r0, r3
 80096d8:	370c      	adds	r7, #12
 80096da:	46bd      	mov	sp, r7
 80096dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096e0:	4770      	bx	lr
 80096e2:	bf00      	nop
 80096e4:	20001c88 	.word	0x20001c88

080096e8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80096e8:	b480      	push	{r7}
 80096ea:	b083      	sub	sp, #12
 80096ec:	af00      	add	r7, sp, #0
 80096ee:	6078      	str	r0, [r7, #4]

}
 80096f0:	bf00      	nop
 80096f2:	370c      	adds	r7, #12
 80096f4:	46bd      	mov	sp, r7
 80096f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096fa:	4770      	bx	lr

080096fc <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80096fc:	b480      	push	{r7}
 80096fe:	b085      	sub	sp, #20
 8009700:	af00      	add	r7, sp, #0
 8009702:	4603      	mov	r3, r0
 8009704:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009706:	2300      	movs	r3, #0
 8009708:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800970a:	79fb      	ldrb	r3, [r7, #7]
 800970c:	2b03      	cmp	r3, #3
 800970e:	d817      	bhi.n	8009740 <USBD_Get_USB_Status+0x44>
 8009710:	a201      	add	r2, pc, #4	; (adr r2, 8009718 <USBD_Get_USB_Status+0x1c>)
 8009712:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009716:	bf00      	nop
 8009718:	08009729 	.word	0x08009729
 800971c:	0800972f 	.word	0x0800972f
 8009720:	08009735 	.word	0x08009735
 8009724:	0800973b 	.word	0x0800973b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009728:	2300      	movs	r3, #0
 800972a:	73fb      	strb	r3, [r7, #15]
    break;
 800972c:	e00b      	b.n	8009746 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800972e:	2303      	movs	r3, #3
 8009730:	73fb      	strb	r3, [r7, #15]
    break;
 8009732:	e008      	b.n	8009746 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009734:	2301      	movs	r3, #1
 8009736:	73fb      	strb	r3, [r7, #15]
    break;
 8009738:	e005      	b.n	8009746 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800973a:	2303      	movs	r3, #3
 800973c:	73fb      	strb	r3, [r7, #15]
    break;
 800973e:	e002      	b.n	8009746 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009740:	2303      	movs	r3, #3
 8009742:	73fb      	strb	r3, [r7, #15]
    break;
 8009744:	bf00      	nop
  }
  return usb_status;
 8009746:	7bfb      	ldrb	r3, [r7, #15]
}
 8009748:	4618      	mov	r0, r3
 800974a:	3714      	adds	r7, #20
 800974c:	46bd      	mov	sp, r7
 800974e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009752:	4770      	bx	lr

08009754 <__errno>:
 8009754:	4b01      	ldr	r3, [pc, #4]	; (800975c <__errno+0x8>)
 8009756:	6818      	ldr	r0, [r3, #0]
 8009758:	4770      	bx	lr
 800975a:	bf00      	nop
 800975c:	20000104 	.word	0x20000104

08009760 <__libc_init_array>:
 8009760:	b570      	push	{r4, r5, r6, lr}
 8009762:	4d0d      	ldr	r5, [pc, #52]	; (8009798 <__libc_init_array+0x38>)
 8009764:	4c0d      	ldr	r4, [pc, #52]	; (800979c <__libc_init_array+0x3c>)
 8009766:	1b64      	subs	r4, r4, r5
 8009768:	10a4      	asrs	r4, r4, #2
 800976a:	2600      	movs	r6, #0
 800976c:	42a6      	cmp	r6, r4
 800976e:	d109      	bne.n	8009784 <__libc_init_array+0x24>
 8009770:	4d0b      	ldr	r5, [pc, #44]	; (80097a0 <__libc_init_array+0x40>)
 8009772:	4c0c      	ldr	r4, [pc, #48]	; (80097a4 <__libc_init_array+0x44>)
 8009774:	f000 fc66 	bl	800a044 <_init>
 8009778:	1b64      	subs	r4, r4, r5
 800977a:	10a4      	asrs	r4, r4, #2
 800977c:	2600      	movs	r6, #0
 800977e:	42a6      	cmp	r6, r4
 8009780:	d105      	bne.n	800978e <__libc_init_array+0x2e>
 8009782:	bd70      	pop	{r4, r5, r6, pc}
 8009784:	f855 3b04 	ldr.w	r3, [r5], #4
 8009788:	4798      	blx	r3
 800978a:	3601      	adds	r6, #1
 800978c:	e7ee      	b.n	800976c <__libc_init_array+0xc>
 800978e:	f855 3b04 	ldr.w	r3, [r5], #4
 8009792:	4798      	blx	r3
 8009794:	3601      	adds	r6, #1
 8009796:	e7f2      	b.n	800977e <__libc_init_array+0x1e>
 8009798:	0800a128 	.word	0x0800a128
 800979c:	0800a128 	.word	0x0800a128
 80097a0:	0800a128 	.word	0x0800a128
 80097a4:	0800a12c 	.word	0x0800a12c

080097a8 <memset>:
 80097a8:	4402      	add	r2, r0
 80097aa:	4603      	mov	r3, r0
 80097ac:	4293      	cmp	r3, r2
 80097ae:	d100      	bne.n	80097b2 <memset+0xa>
 80097b0:	4770      	bx	lr
 80097b2:	f803 1b01 	strb.w	r1, [r3], #1
 80097b6:	e7f9      	b.n	80097ac <memset+0x4>

080097b8 <setvbuf>:
 80097b8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80097bc:	461d      	mov	r5, r3
 80097be:	4b5d      	ldr	r3, [pc, #372]	; (8009934 <setvbuf+0x17c>)
 80097c0:	681f      	ldr	r7, [r3, #0]
 80097c2:	4604      	mov	r4, r0
 80097c4:	460e      	mov	r6, r1
 80097c6:	4690      	mov	r8, r2
 80097c8:	b127      	cbz	r7, 80097d4 <setvbuf+0x1c>
 80097ca:	69bb      	ldr	r3, [r7, #24]
 80097cc:	b913      	cbnz	r3, 80097d4 <setvbuf+0x1c>
 80097ce:	4638      	mov	r0, r7
 80097d0:	f000 f9d2 	bl	8009b78 <__sinit>
 80097d4:	4b58      	ldr	r3, [pc, #352]	; (8009938 <setvbuf+0x180>)
 80097d6:	429c      	cmp	r4, r3
 80097d8:	d167      	bne.n	80098aa <setvbuf+0xf2>
 80097da:	687c      	ldr	r4, [r7, #4]
 80097dc:	f1b8 0f02 	cmp.w	r8, #2
 80097e0:	d006      	beq.n	80097f0 <setvbuf+0x38>
 80097e2:	f1b8 0f01 	cmp.w	r8, #1
 80097e6:	f200 809f 	bhi.w	8009928 <setvbuf+0x170>
 80097ea:	2d00      	cmp	r5, #0
 80097ec:	f2c0 809c 	blt.w	8009928 <setvbuf+0x170>
 80097f0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80097f2:	07db      	lsls	r3, r3, #31
 80097f4:	d405      	bmi.n	8009802 <setvbuf+0x4a>
 80097f6:	89a3      	ldrh	r3, [r4, #12]
 80097f8:	0598      	lsls	r0, r3, #22
 80097fa:	d402      	bmi.n	8009802 <setvbuf+0x4a>
 80097fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80097fe:	f000 fa59 	bl	8009cb4 <__retarget_lock_acquire_recursive>
 8009802:	4621      	mov	r1, r4
 8009804:	4638      	mov	r0, r7
 8009806:	f000 f923 	bl	8009a50 <_fflush_r>
 800980a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800980c:	b141      	cbz	r1, 8009820 <setvbuf+0x68>
 800980e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009812:	4299      	cmp	r1, r3
 8009814:	d002      	beq.n	800981c <setvbuf+0x64>
 8009816:	4638      	mov	r0, r7
 8009818:	f000 fa7c 	bl	8009d14 <_free_r>
 800981c:	2300      	movs	r3, #0
 800981e:	6363      	str	r3, [r4, #52]	; 0x34
 8009820:	2300      	movs	r3, #0
 8009822:	61a3      	str	r3, [r4, #24]
 8009824:	6063      	str	r3, [r4, #4]
 8009826:	89a3      	ldrh	r3, [r4, #12]
 8009828:	0619      	lsls	r1, r3, #24
 800982a:	d503      	bpl.n	8009834 <setvbuf+0x7c>
 800982c:	6921      	ldr	r1, [r4, #16]
 800982e:	4638      	mov	r0, r7
 8009830:	f000 fa70 	bl	8009d14 <_free_r>
 8009834:	89a3      	ldrh	r3, [r4, #12]
 8009836:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 800983a:	f023 0303 	bic.w	r3, r3, #3
 800983e:	f1b8 0f02 	cmp.w	r8, #2
 8009842:	81a3      	strh	r3, [r4, #12]
 8009844:	d06c      	beq.n	8009920 <setvbuf+0x168>
 8009846:	ab01      	add	r3, sp, #4
 8009848:	466a      	mov	r2, sp
 800984a:	4621      	mov	r1, r4
 800984c:	4638      	mov	r0, r7
 800984e:	f000 fa33 	bl	8009cb8 <__swhatbuf_r>
 8009852:	89a3      	ldrh	r3, [r4, #12]
 8009854:	4318      	orrs	r0, r3
 8009856:	81a0      	strh	r0, [r4, #12]
 8009858:	2d00      	cmp	r5, #0
 800985a:	d130      	bne.n	80098be <setvbuf+0x106>
 800985c:	9d00      	ldr	r5, [sp, #0]
 800985e:	4628      	mov	r0, r5
 8009860:	f000 fa50 	bl	8009d04 <malloc>
 8009864:	4606      	mov	r6, r0
 8009866:	2800      	cmp	r0, #0
 8009868:	d155      	bne.n	8009916 <setvbuf+0x15e>
 800986a:	f8dd 9000 	ldr.w	r9, [sp]
 800986e:	45a9      	cmp	r9, r5
 8009870:	d14a      	bne.n	8009908 <setvbuf+0x150>
 8009872:	f04f 35ff 	mov.w	r5, #4294967295
 8009876:	2200      	movs	r2, #0
 8009878:	60a2      	str	r2, [r4, #8]
 800987a:	f104 0247 	add.w	r2, r4, #71	; 0x47
 800987e:	6022      	str	r2, [r4, #0]
 8009880:	6122      	str	r2, [r4, #16]
 8009882:	2201      	movs	r2, #1
 8009884:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009888:	6162      	str	r2, [r4, #20]
 800988a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800988c:	f043 0302 	orr.w	r3, r3, #2
 8009890:	07d2      	lsls	r2, r2, #31
 8009892:	81a3      	strh	r3, [r4, #12]
 8009894:	d405      	bmi.n	80098a2 <setvbuf+0xea>
 8009896:	f413 7f00 	tst.w	r3, #512	; 0x200
 800989a:	d102      	bne.n	80098a2 <setvbuf+0xea>
 800989c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800989e:	f000 fa0a 	bl	8009cb6 <__retarget_lock_release_recursive>
 80098a2:	4628      	mov	r0, r5
 80098a4:	b003      	add	sp, #12
 80098a6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80098aa:	4b24      	ldr	r3, [pc, #144]	; (800993c <setvbuf+0x184>)
 80098ac:	429c      	cmp	r4, r3
 80098ae:	d101      	bne.n	80098b4 <setvbuf+0xfc>
 80098b0:	68bc      	ldr	r4, [r7, #8]
 80098b2:	e793      	b.n	80097dc <setvbuf+0x24>
 80098b4:	4b22      	ldr	r3, [pc, #136]	; (8009940 <setvbuf+0x188>)
 80098b6:	429c      	cmp	r4, r3
 80098b8:	bf08      	it	eq
 80098ba:	68fc      	ldreq	r4, [r7, #12]
 80098bc:	e78e      	b.n	80097dc <setvbuf+0x24>
 80098be:	2e00      	cmp	r6, #0
 80098c0:	d0cd      	beq.n	800985e <setvbuf+0xa6>
 80098c2:	69bb      	ldr	r3, [r7, #24]
 80098c4:	b913      	cbnz	r3, 80098cc <setvbuf+0x114>
 80098c6:	4638      	mov	r0, r7
 80098c8:	f000 f956 	bl	8009b78 <__sinit>
 80098cc:	f1b8 0f01 	cmp.w	r8, #1
 80098d0:	bf08      	it	eq
 80098d2:	89a3      	ldrheq	r3, [r4, #12]
 80098d4:	6026      	str	r6, [r4, #0]
 80098d6:	bf04      	itt	eq
 80098d8:	f043 0301 	orreq.w	r3, r3, #1
 80098dc:	81a3      	strheq	r3, [r4, #12]
 80098de:	89a2      	ldrh	r2, [r4, #12]
 80098e0:	f012 0308 	ands.w	r3, r2, #8
 80098e4:	e9c4 6504 	strd	r6, r5, [r4, #16]
 80098e8:	d01c      	beq.n	8009924 <setvbuf+0x16c>
 80098ea:	07d3      	lsls	r3, r2, #31
 80098ec:	bf41      	itttt	mi
 80098ee:	2300      	movmi	r3, #0
 80098f0:	426d      	negmi	r5, r5
 80098f2:	60a3      	strmi	r3, [r4, #8]
 80098f4:	61a5      	strmi	r5, [r4, #24]
 80098f6:	bf58      	it	pl
 80098f8:	60a5      	strpl	r5, [r4, #8]
 80098fa:	6e65      	ldr	r5, [r4, #100]	; 0x64
 80098fc:	f015 0501 	ands.w	r5, r5, #1
 8009900:	d115      	bne.n	800992e <setvbuf+0x176>
 8009902:	f412 7f00 	tst.w	r2, #512	; 0x200
 8009906:	e7c8      	b.n	800989a <setvbuf+0xe2>
 8009908:	4648      	mov	r0, r9
 800990a:	f000 f9fb 	bl	8009d04 <malloc>
 800990e:	4606      	mov	r6, r0
 8009910:	2800      	cmp	r0, #0
 8009912:	d0ae      	beq.n	8009872 <setvbuf+0xba>
 8009914:	464d      	mov	r5, r9
 8009916:	89a3      	ldrh	r3, [r4, #12]
 8009918:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800991c:	81a3      	strh	r3, [r4, #12]
 800991e:	e7d0      	b.n	80098c2 <setvbuf+0x10a>
 8009920:	2500      	movs	r5, #0
 8009922:	e7a8      	b.n	8009876 <setvbuf+0xbe>
 8009924:	60a3      	str	r3, [r4, #8]
 8009926:	e7e8      	b.n	80098fa <setvbuf+0x142>
 8009928:	f04f 35ff 	mov.w	r5, #4294967295
 800992c:	e7b9      	b.n	80098a2 <setvbuf+0xea>
 800992e:	2500      	movs	r5, #0
 8009930:	e7b7      	b.n	80098a2 <setvbuf+0xea>
 8009932:	bf00      	nop
 8009934:	20000104 	.word	0x20000104
 8009938:	0800a0e0 	.word	0x0800a0e0
 800993c:	0800a100 	.word	0x0800a100
 8009940:	0800a0c0 	.word	0x0800a0c0

08009944 <__sflush_r>:
 8009944:	898a      	ldrh	r2, [r1, #12]
 8009946:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800994a:	4605      	mov	r5, r0
 800994c:	0710      	lsls	r0, r2, #28
 800994e:	460c      	mov	r4, r1
 8009950:	d458      	bmi.n	8009a04 <__sflush_r+0xc0>
 8009952:	684b      	ldr	r3, [r1, #4]
 8009954:	2b00      	cmp	r3, #0
 8009956:	dc05      	bgt.n	8009964 <__sflush_r+0x20>
 8009958:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800995a:	2b00      	cmp	r3, #0
 800995c:	dc02      	bgt.n	8009964 <__sflush_r+0x20>
 800995e:	2000      	movs	r0, #0
 8009960:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009964:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009966:	2e00      	cmp	r6, #0
 8009968:	d0f9      	beq.n	800995e <__sflush_r+0x1a>
 800996a:	2300      	movs	r3, #0
 800996c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009970:	682f      	ldr	r7, [r5, #0]
 8009972:	602b      	str	r3, [r5, #0]
 8009974:	d032      	beq.n	80099dc <__sflush_r+0x98>
 8009976:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009978:	89a3      	ldrh	r3, [r4, #12]
 800997a:	075a      	lsls	r2, r3, #29
 800997c:	d505      	bpl.n	800998a <__sflush_r+0x46>
 800997e:	6863      	ldr	r3, [r4, #4]
 8009980:	1ac0      	subs	r0, r0, r3
 8009982:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009984:	b10b      	cbz	r3, 800998a <__sflush_r+0x46>
 8009986:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009988:	1ac0      	subs	r0, r0, r3
 800998a:	2300      	movs	r3, #0
 800998c:	4602      	mov	r2, r0
 800998e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009990:	6a21      	ldr	r1, [r4, #32]
 8009992:	4628      	mov	r0, r5
 8009994:	47b0      	blx	r6
 8009996:	1c43      	adds	r3, r0, #1
 8009998:	89a3      	ldrh	r3, [r4, #12]
 800999a:	d106      	bne.n	80099aa <__sflush_r+0x66>
 800999c:	6829      	ldr	r1, [r5, #0]
 800999e:	291d      	cmp	r1, #29
 80099a0:	d82c      	bhi.n	80099fc <__sflush_r+0xb8>
 80099a2:	4a2a      	ldr	r2, [pc, #168]	; (8009a4c <__sflush_r+0x108>)
 80099a4:	40ca      	lsrs	r2, r1
 80099a6:	07d6      	lsls	r6, r2, #31
 80099a8:	d528      	bpl.n	80099fc <__sflush_r+0xb8>
 80099aa:	2200      	movs	r2, #0
 80099ac:	6062      	str	r2, [r4, #4]
 80099ae:	04d9      	lsls	r1, r3, #19
 80099b0:	6922      	ldr	r2, [r4, #16]
 80099b2:	6022      	str	r2, [r4, #0]
 80099b4:	d504      	bpl.n	80099c0 <__sflush_r+0x7c>
 80099b6:	1c42      	adds	r2, r0, #1
 80099b8:	d101      	bne.n	80099be <__sflush_r+0x7a>
 80099ba:	682b      	ldr	r3, [r5, #0]
 80099bc:	b903      	cbnz	r3, 80099c0 <__sflush_r+0x7c>
 80099be:	6560      	str	r0, [r4, #84]	; 0x54
 80099c0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80099c2:	602f      	str	r7, [r5, #0]
 80099c4:	2900      	cmp	r1, #0
 80099c6:	d0ca      	beq.n	800995e <__sflush_r+0x1a>
 80099c8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80099cc:	4299      	cmp	r1, r3
 80099ce:	d002      	beq.n	80099d6 <__sflush_r+0x92>
 80099d0:	4628      	mov	r0, r5
 80099d2:	f000 f99f 	bl	8009d14 <_free_r>
 80099d6:	2000      	movs	r0, #0
 80099d8:	6360      	str	r0, [r4, #52]	; 0x34
 80099da:	e7c1      	b.n	8009960 <__sflush_r+0x1c>
 80099dc:	6a21      	ldr	r1, [r4, #32]
 80099de:	2301      	movs	r3, #1
 80099e0:	4628      	mov	r0, r5
 80099e2:	47b0      	blx	r6
 80099e4:	1c41      	adds	r1, r0, #1
 80099e6:	d1c7      	bne.n	8009978 <__sflush_r+0x34>
 80099e8:	682b      	ldr	r3, [r5, #0]
 80099ea:	2b00      	cmp	r3, #0
 80099ec:	d0c4      	beq.n	8009978 <__sflush_r+0x34>
 80099ee:	2b1d      	cmp	r3, #29
 80099f0:	d001      	beq.n	80099f6 <__sflush_r+0xb2>
 80099f2:	2b16      	cmp	r3, #22
 80099f4:	d101      	bne.n	80099fa <__sflush_r+0xb6>
 80099f6:	602f      	str	r7, [r5, #0]
 80099f8:	e7b1      	b.n	800995e <__sflush_r+0x1a>
 80099fa:	89a3      	ldrh	r3, [r4, #12]
 80099fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009a00:	81a3      	strh	r3, [r4, #12]
 8009a02:	e7ad      	b.n	8009960 <__sflush_r+0x1c>
 8009a04:	690f      	ldr	r7, [r1, #16]
 8009a06:	2f00      	cmp	r7, #0
 8009a08:	d0a9      	beq.n	800995e <__sflush_r+0x1a>
 8009a0a:	0793      	lsls	r3, r2, #30
 8009a0c:	680e      	ldr	r6, [r1, #0]
 8009a0e:	bf08      	it	eq
 8009a10:	694b      	ldreq	r3, [r1, #20]
 8009a12:	600f      	str	r7, [r1, #0]
 8009a14:	bf18      	it	ne
 8009a16:	2300      	movne	r3, #0
 8009a18:	eba6 0807 	sub.w	r8, r6, r7
 8009a1c:	608b      	str	r3, [r1, #8]
 8009a1e:	f1b8 0f00 	cmp.w	r8, #0
 8009a22:	dd9c      	ble.n	800995e <__sflush_r+0x1a>
 8009a24:	6a21      	ldr	r1, [r4, #32]
 8009a26:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009a28:	4643      	mov	r3, r8
 8009a2a:	463a      	mov	r2, r7
 8009a2c:	4628      	mov	r0, r5
 8009a2e:	47b0      	blx	r6
 8009a30:	2800      	cmp	r0, #0
 8009a32:	dc06      	bgt.n	8009a42 <__sflush_r+0xfe>
 8009a34:	89a3      	ldrh	r3, [r4, #12]
 8009a36:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009a3a:	81a3      	strh	r3, [r4, #12]
 8009a3c:	f04f 30ff 	mov.w	r0, #4294967295
 8009a40:	e78e      	b.n	8009960 <__sflush_r+0x1c>
 8009a42:	4407      	add	r7, r0
 8009a44:	eba8 0800 	sub.w	r8, r8, r0
 8009a48:	e7e9      	b.n	8009a1e <__sflush_r+0xda>
 8009a4a:	bf00      	nop
 8009a4c:	20400001 	.word	0x20400001

08009a50 <_fflush_r>:
 8009a50:	b538      	push	{r3, r4, r5, lr}
 8009a52:	690b      	ldr	r3, [r1, #16]
 8009a54:	4605      	mov	r5, r0
 8009a56:	460c      	mov	r4, r1
 8009a58:	b913      	cbnz	r3, 8009a60 <_fflush_r+0x10>
 8009a5a:	2500      	movs	r5, #0
 8009a5c:	4628      	mov	r0, r5
 8009a5e:	bd38      	pop	{r3, r4, r5, pc}
 8009a60:	b118      	cbz	r0, 8009a6a <_fflush_r+0x1a>
 8009a62:	6983      	ldr	r3, [r0, #24]
 8009a64:	b90b      	cbnz	r3, 8009a6a <_fflush_r+0x1a>
 8009a66:	f000 f887 	bl	8009b78 <__sinit>
 8009a6a:	4b14      	ldr	r3, [pc, #80]	; (8009abc <_fflush_r+0x6c>)
 8009a6c:	429c      	cmp	r4, r3
 8009a6e:	d11b      	bne.n	8009aa8 <_fflush_r+0x58>
 8009a70:	686c      	ldr	r4, [r5, #4]
 8009a72:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009a76:	2b00      	cmp	r3, #0
 8009a78:	d0ef      	beq.n	8009a5a <_fflush_r+0xa>
 8009a7a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009a7c:	07d0      	lsls	r0, r2, #31
 8009a7e:	d404      	bmi.n	8009a8a <_fflush_r+0x3a>
 8009a80:	0599      	lsls	r1, r3, #22
 8009a82:	d402      	bmi.n	8009a8a <_fflush_r+0x3a>
 8009a84:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009a86:	f000 f915 	bl	8009cb4 <__retarget_lock_acquire_recursive>
 8009a8a:	4628      	mov	r0, r5
 8009a8c:	4621      	mov	r1, r4
 8009a8e:	f7ff ff59 	bl	8009944 <__sflush_r>
 8009a92:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009a94:	07da      	lsls	r2, r3, #31
 8009a96:	4605      	mov	r5, r0
 8009a98:	d4e0      	bmi.n	8009a5c <_fflush_r+0xc>
 8009a9a:	89a3      	ldrh	r3, [r4, #12]
 8009a9c:	059b      	lsls	r3, r3, #22
 8009a9e:	d4dd      	bmi.n	8009a5c <_fflush_r+0xc>
 8009aa0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009aa2:	f000 f908 	bl	8009cb6 <__retarget_lock_release_recursive>
 8009aa6:	e7d9      	b.n	8009a5c <_fflush_r+0xc>
 8009aa8:	4b05      	ldr	r3, [pc, #20]	; (8009ac0 <_fflush_r+0x70>)
 8009aaa:	429c      	cmp	r4, r3
 8009aac:	d101      	bne.n	8009ab2 <_fflush_r+0x62>
 8009aae:	68ac      	ldr	r4, [r5, #8]
 8009ab0:	e7df      	b.n	8009a72 <_fflush_r+0x22>
 8009ab2:	4b04      	ldr	r3, [pc, #16]	; (8009ac4 <_fflush_r+0x74>)
 8009ab4:	429c      	cmp	r4, r3
 8009ab6:	bf08      	it	eq
 8009ab8:	68ec      	ldreq	r4, [r5, #12]
 8009aba:	e7da      	b.n	8009a72 <_fflush_r+0x22>
 8009abc:	0800a0e0 	.word	0x0800a0e0
 8009ac0:	0800a100 	.word	0x0800a100
 8009ac4:	0800a0c0 	.word	0x0800a0c0

08009ac8 <std>:
 8009ac8:	2300      	movs	r3, #0
 8009aca:	b510      	push	{r4, lr}
 8009acc:	4604      	mov	r4, r0
 8009ace:	e9c0 3300 	strd	r3, r3, [r0]
 8009ad2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009ad6:	6083      	str	r3, [r0, #8]
 8009ad8:	8181      	strh	r1, [r0, #12]
 8009ada:	6643      	str	r3, [r0, #100]	; 0x64
 8009adc:	81c2      	strh	r2, [r0, #14]
 8009ade:	6183      	str	r3, [r0, #24]
 8009ae0:	4619      	mov	r1, r3
 8009ae2:	2208      	movs	r2, #8
 8009ae4:	305c      	adds	r0, #92	; 0x5c
 8009ae6:	f7ff fe5f 	bl	80097a8 <memset>
 8009aea:	4b05      	ldr	r3, [pc, #20]	; (8009b00 <std+0x38>)
 8009aec:	6263      	str	r3, [r4, #36]	; 0x24
 8009aee:	4b05      	ldr	r3, [pc, #20]	; (8009b04 <std+0x3c>)
 8009af0:	62a3      	str	r3, [r4, #40]	; 0x28
 8009af2:	4b05      	ldr	r3, [pc, #20]	; (8009b08 <std+0x40>)
 8009af4:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009af6:	4b05      	ldr	r3, [pc, #20]	; (8009b0c <std+0x44>)
 8009af8:	6224      	str	r4, [r4, #32]
 8009afa:	6323      	str	r3, [r4, #48]	; 0x30
 8009afc:	bd10      	pop	{r4, pc}
 8009afe:	bf00      	nop
 8009b00:	08009ef5 	.word	0x08009ef5
 8009b04:	08009f17 	.word	0x08009f17
 8009b08:	08009f4f 	.word	0x08009f4f
 8009b0c:	08009f73 	.word	0x08009f73

08009b10 <_cleanup_r>:
 8009b10:	4901      	ldr	r1, [pc, #4]	; (8009b18 <_cleanup_r+0x8>)
 8009b12:	f000 b8af 	b.w	8009c74 <_fwalk_reent>
 8009b16:	bf00      	nop
 8009b18:	08009a51 	.word	0x08009a51

08009b1c <__sfmoreglue>:
 8009b1c:	b570      	push	{r4, r5, r6, lr}
 8009b1e:	2268      	movs	r2, #104	; 0x68
 8009b20:	1e4d      	subs	r5, r1, #1
 8009b22:	4355      	muls	r5, r2
 8009b24:	460e      	mov	r6, r1
 8009b26:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009b2a:	f000 f95f 	bl	8009dec <_malloc_r>
 8009b2e:	4604      	mov	r4, r0
 8009b30:	b140      	cbz	r0, 8009b44 <__sfmoreglue+0x28>
 8009b32:	2100      	movs	r1, #0
 8009b34:	e9c0 1600 	strd	r1, r6, [r0]
 8009b38:	300c      	adds	r0, #12
 8009b3a:	60a0      	str	r0, [r4, #8]
 8009b3c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009b40:	f7ff fe32 	bl	80097a8 <memset>
 8009b44:	4620      	mov	r0, r4
 8009b46:	bd70      	pop	{r4, r5, r6, pc}

08009b48 <__sfp_lock_acquire>:
 8009b48:	4801      	ldr	r0, [pc, #4]	; (8009b50 <__sfp_lock_acquire+0x8>)
 8009b4a:	f000 b8b3 	b.w	8009cb4 <__retarget_lock_acquire_recursive>
 8009b4e:	bf00      	nop
 8009b50:	20001ea9 	.word	0x20001ea9

08009b54 <__sfp_lock_release>:
 8009b54:	4801      	ldr	r0, [pc, #4]	; (8009b5c <__sfp_lock_release+0x8>)
 8009b56:	f000 b8ae 	b.w	8009cb6 <__retarget_lock_release_recursive>
 8009b5a:	bf00      	nop
 8009b5c:	20001ea9 	.word	0x20001ea9

08009b60 <__sinit_lock_acquire>:
 8009b60:	4801      	ldr	r0, [pc, #4]	; (8009b68 <__sinit_lock_acquire+0x8>)
 8009b62:	f000 b8a7 	b.w	8009cb4 <__retarget_lock_acquire_recursive>
 8009b66:	bf00      	nop
 8009b68:	20001eaa 	.word	0x20001eaa

08009b6c <__sinit_lock_release>:
 8009b6c:	4801      	ldr	r0, [pc, #4]	; (8009b74 <__sinit_lock_release+0x8>)
 8009b6e:	f000 b8a2 	b.w	8009cb6 <__retarget_lock_release_recursive>
 8009b72:	bf00      	nop
 8009b74:	20001eaa 	.word	0x20001eaa

08009b78 <__sinit>:
 8009b78:	b510      	push	{r4, lr}
 8009b7a:	4604      	mov	r4, r0
 8009b7c:	f7ff fff0 	bl	8009b60 <__sinit_lock_acquire>
 8009b80:	69a3      	ldr	r3, [r4, #24]
 8009b82:	b11b      	cbz	r3, 8009b8c <__sinit+0x14>
 8009b84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009b88:	f7ff bff0 	b.w	8009b6c <__sinit_lock_release>
 8009b8c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009b90:	6523      	str	r3, [r4, #80]	; 0x50
 8009b92:	4b13      	ldr	r3, [pc, #76]	; (8009be0 <__sinit+0x68>)
 8009b94:	4a13      	ldr	r2, [pc, #76]	; (8009be4 <__sinit+0x6c>)
 8009b96:	681b      	ldr	r3, [r3, #0]
 8009b98:	62a2      	str	r2, [r4, #40]	; 0x28
 8009b9a:	42a3      	cmp	r3, r4
 8009b9c:	bf04      	itt	eq
 8009b9e:	2301      	moveq	r3, #1
 8009ba0:	61a3      	streq	r3, [r4, #24]
 8009ba2:	4620      	mov	r0, r4
 8009ba4:	f000 f820 	bl	8009be8 <__sfp>
 8009ba8:	6060      	str	r0, [r4, #4]
 8009baa:	4620      	mov	r0, r4
 8009bac:	f000 f81c 	bl	8009be8 <__sfp>
 8009bb0:	60a0      	str	r0, [r4, #8]
 8009bb2:	4620      	mov	r0, r4
 8009bb4:	f000 f818 	bl	8009be8 <__sfp>
 8009bb8:	2200      	movs	r2, #0
 8009bba:	60e0      	str	r0, [r4, #12]
 8009bbc:	2104      	movs	r1, #4
 8009bbe:	6860      	ldr	r0, [r4, #4]
 8009bc0:	f7ff ff82 	bl	8009ac8 <std>
 8009bc4:	68a0      	ldr	r0, [r4, #8]
 8009bc6:	2201      	movs	r2, #1
 8009bc8:	2109      	movs	r1, #9
 8009bca:	f7ff ff7d 	bl	8009ac8 <std>
 8009bce:	68e0      	ldr	r0, [r4, #12]
 8009bd0:	2202      	movs	r2, #2
 8009bd2:	2112      	movs	r1, #18
 8009bd4:	f7ff ff78 	bl	8009ac8 <std>
 8009bd8:	2301      	movs	r3, #1
 8009bda:	61a3      	str	r3, [r4, #24]
 8009bdc:	e7d2      	b.n	8009b84 <__sinit+0xc>
 8009bde:	bf00      	nop
 8009be0:	0800a0bc 	.word	0x0800a0bc
 8009be4:	08009b11 	.word	0x08009b11

08009be8 <__sfp>:
 8009be8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009bea:	4607      	mov	r7, r0
 8009bec:	f7ff ffac 	bl	8009b48 <__sfp_lock_acquire>
 8009bf0:	4b1e      	ldr	r3, [pc, #120]	; (8009c6c <__sfp+0x84>)
 8009bf2:	681e      	ldr	r6, [r3, #0]
 8009bf4:	69b3      	ldr	r3, [r6, #24]
 8009bf6:	b913      	cbnz	r3, 8009bfe <__sfp+0x16>
 8009bf8:	4630      	mov	r0, r6
 8009bfa:	f7ff ffbd 	bl	8009b78 <__sinit>
 8009bfe:	3648      	adds	r6, #72	; 0x48
 8009c00:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009c04:	3b01      	subs	r3, #1
 8009c06:	d503      	bpl.n	8009c10 <__sfp+0x28>
 8009c08:	6833      	ldr	r3, [r6, #0]
 8009c0a:	b30b      	cbz	r3, 8009c50 <__sfp+0x68>
 8009c0c:	6836      	ldr	r6, [r6, #0]
 8009c0e:	e7f7      	b.n	8009c00 <__sfp+0x18>
 8009c10:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009c14:	b9d5      	cbnz	r5, 8009c4c <__sfp+0x64>
 8009c16:	4b16      	ldr	r3, [pc, #88]	; (8009c70 <__sfp+0x88>)
 8009c18:	60e3      	str	r3, [r4, #12]
 8009c1a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009c1e:	6665      	str	r5, [r4, #100]	; 0x64
 8009c20:	f000 f847 	bl	8009cb2 <__retarget_lock_init_recursive>
 8009c24:	f7ff ff96 	bl	8009b54 <__sfp_lock_release>
 8009c28:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009c2c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009c30:	6025      	str	r5, [r4, #0]
 8009c32:	61a5      	str	r5, [r4, #24]
 8009c34:	2208      	movs	r2, #8
 8009c36:	4629      	mov	r1, r5
 8009c38:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009c3c:	f7ff fdb4 	bl	80097a8 <memset>
 8009c40:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009c44:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009c48:	4620      	mov	r0, r4
 8009c4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009c4c:	3468      	adds	r4, #104	; 0x68
 8009c4e:	e7d9      	b.n	8009c04 <__sfp+0x1c>
 8009c50:	2104      	movs	r1, #4
 8009c52:	4638      	mov	r0, r7
 8009c54:	f7ff ff62 	bl	8009b1c <__sfmoreglue>
 8009c58:	4604      	mov	r4, r0
 8009c5a:	6030      	str	r0, [r6, #0]
 8009c5c:	2800      	cmp	r0, #0
 8009c5e:	d1d5      	bne.n	8009c0c <__sfp+0x24>
 8009c60:	f7ff ff78 	bl	8009b54 <__sfp_lock_release>
 8009c64:	230c      	movs	r3, #12
 8009c66:	603b      	str	r3, [r7, #0]
 8009c68:	e7ee      	b.n	8009c48 <__sfp+0x60>
 8009c6a:	bf00      	nop
 8009c6c:	0800a0bc 	.word	0x0800a0bc
 8009c70:	ffff0001 	.word	0xffff0001

08009c74 <_fwalk_reent>:
 8009c74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009c78:	4606      	mov	r6, r0
 8009c7a:	4688      	mov	r8, r1
 8009c7c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009c80:	2700      	movs	r7, #0
 8009c82:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009c86:	f1b9 0901 	subs.w	r9, r9, #1
 8009c8a:	d505      	bpl.n	8009c98 <_fwalk_reent+0x24>
 8009c8c:	6824      	ldr	r4, [r4, #0]
 8009c8e:	2c00      	cmp	r4, #0
 8009c90:	d1f7      	bne.n	8009c82 <_fwalk_reent+0xe>
 8009c92:	4638      	mov	r0, r7
 8009c94:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009c98:	89ab      	ldrh	r3, [r5, #12]
 8009c9a:	2b01      	cmp	r3, #1
 8009c9c:	d907      	bls.n	8009cae <_fwalk_reent+0x3a>
 8009c9e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009ca2:	3301      	adds	r3, #1
 8009ca4:	d003      	beq.n	8009cae <_fwalk_reent+0x3a>
 8009ca6:	4629      	mov	r1, r5
 8009ca8:	4630      	mov	r0, r6
 8009caa:	47c0      	blx	r8
 8009cac:	4307      	orrs	r7, r0
 8009cae:	3568      	adds	r5, #104	; 0x68
 8009cb0:	e7e9      	b.n	8009c86 <_fwalk_reent+0x12>

08009cb2 <__retarget_lock_init_recursive>:
 8009cb2:	4770      	bx	lr

08009cb4 <__retarget_lock_acquire_recursive>:
 8009cb4:	4770      	bx	lr

08009cb6 <__retarget_lock_release_recursive>:
 8009cb6:	4770      	bx	lr

08009cb8 <__swhatbuf_r>:
 8009cb8:	b570      	push	{r4, r5, r6, lr}
 8009cba:	460e      	mov	r6, r1
 8009cbc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009cc0:	2900      	cmp	r1, #0
 8009cc2:	b096      	sub	sp, #88	; 0x58
 8009cc4:	4614      	mov	r4, r2
 8009cc6:	461d      	mov	r5, r3
 8009cc8:	da08      	bge.n	8009cdc <__swhatbuf_r+0x24>
 8009cca:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8009cce:	2200      	movs	r2, #0
 8009cd0:	602a      	str	r2, [r5, #0]
 8009cd2:	061a      	lsls	r2, r3, #24
 8009cd4:	d410      	bmi.n	8009cf8 <__swhatbuf_r+0x40>
 8009cd6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009cda:	e00e      	b.n	8009cfa <__swhatbuf_r+0x42>
 8009cdc:	466a      	mov	r2, sp
 8009cde:	f000 f96f 	bl	8009fc0 <_fstat_r>
 8009ce2:	2800      	cmp	r0, #0
 8009ce4:	dbf1      	blt.n	8009cca <__swhatbuf_r+0x12>
 8009ce6:	9a01      	ldr	r2, [sp, #4]
 8009ce8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009cec:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009cf0:	425a      	negs	r2, r3
 8009cf2:	415a      	adcs	r2, r3
 8009cf4:	602a      	str	r2, [r5, #0]
 8009cf6:	e7ee      	b.n	8009cd6 <__swhatbuf_r+0x1e>
 8009cf8:	2340      	movs	r3, #64	; 0x40
 8009cfa:	2000      	movs	r0, #0
 8009cfc:	6023      	str	r3, [r4, #0]
 8009cfe:	b016      	add	sp, #88	; 0x58
 8009d00:	bd70      	pop	{r4, r5, r6, pc}
	...

08009d04 <malloc>:
 8009d04:	4b02      	ldr	r3, [pc, #8]	; (8009d10 <malloc+0xc>)
 8009d06:	4601      	mov	r1, r0
 8009d08:	6818      	ldr	r0, [r3, #0]
 8009d0a:	f000 b86f 	b.w	8009dec <_malloc_r>
 8009d0e:	bf00      	nop
 8009d10:	20000104 	.word	0x20000104

08009d14 <_free_r>:
 8009d14:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009d16:	2900      	cmp	r1, #0
 8009d18:	d044      	beq.n	8009da4 <_free_r+0x90>
 8009d1a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009d1e:	9001      	str	r0, [sp, #4]
 8009d20:	2b00      	cmp	r3, #0
 8009d22:	f1a1 0404 	sub.w	r4, r1, #4
 8009d26:	bfb8      	it	lt
 8009d28:	18e4      	addlt	r4, r4, r3
 8009d2a:	f000 f96d 	bl	800a008 <__malloc_lock>
 8009d2e:	4a1e      	ldr	r2, [pc, #120]	; (8009da8 <_free_r+0x94>)
 8009d30:	9801      	ldr	r0, [sp, #4]
 8009d32:	6813      	ldr	r3, [r2, #0]
 8009d34:	b933      	cbnz	r3, 8009d44 <_free_r+0x30>
 8009d36:	6063      	str	r3, [r4, #4]
 8009d38:	6014      	str	r4, [r2, #0]
 8009d3a:	b003      	add	sp, #12
 8009d3c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009d40:	f000 b968 	b.w	800a014 <__malloc_unlock>
 8009d44:	42a3      	cmp	r3, r4
 8009d46:	d908      	bls.n	8009d5a <_free_r+0x46>
 8009d48:	6825      	ldr	r5, [r4, #0]
 8009d4a:	1961      	adds	r1, r4, r5
 8009d4c:	428b      	cmp	r3, r1
 8009d4e:	bf01      	itttt	eq
 8009d50:	6819      	ldreq	r1, [r3, #0]
 8009d52:	685b      	ldreq	r3, [r3, #4]
 8009d54:	1949      	addeq	r1, r1, r5
 8009d56:	6021      	streq	r1, [r4, #0]
 8009d58:	e7ed      	b.n	8009d36 <_free_r+0x22>
 8009d5a:	461a      	mov	r2, r3
 8009d5c:	685b      	ldr	r3, [r3, #4]
 8009d5e:	b10b      	cbz	r3, 8009d64 <_free_r+0x50>
 8009d60:	42a3      	cmp	r3, r4
 8009d62:	d9fa      	bls.n	8009d5a <_free_r+0x46>
 8009d64:	6811      	ldr	r1, [r2, #0]
 8009d66:	1855      	adds	r5, r2, r1
 8009d68:	42a5      	cmp	r5, r4
 8009d6a:	d10b      	bne.n	8009d84 <_free_r+0x70>
 8009d6c:	6824      	ldr	r4, [r4, #0]
 8009d6e:	4421      	add	r1, r4
 8009d70:	1854      	adds	r4, r2, r1
 8009d72:	42a3      	cmp	r3, r4
 8009d74:	6011      	str	r1, [r2, #0]
 8009d76:	d1e0      	bne.n	8009d3a <_free_r+0x26>
 8009d78:	681c      	ldr	r4, [r3, #0]
 8009d7a:	685b      	ldr	r3, [r3, #4]
 8009d7c:	6053      	str	r3, [r2, #4]
 8009d7e:	4421      	add	r1, r4
 8009d80:	6011      	str	r1, [r2, #0]
 8009d82:	e7da      	b.n	8009d3a <_free_r+0x26>
 8009d84:	d902      	bls.n	8009d8c <_free_r+0x78>
 8009d86:	230c      	movs	r3, #12
 8009d88:	6003      	str	r3, [r0, #0]
 8009d8a:	e7d6      	b.n	8009d3a <_free_r+0x26>
 8009d8c:	6825      	ldr	r5, [r4, #0]
 8009d8e:	1961      	adds	r1, r4, r5
 8009d90:	428b      	cmp	r3, r1
 8009d92:	bf04      	itt	eq
 8009d94:	6819      	ldreq	r1, [r3, #0]
 8009d96:	685b      	ldreq	r3, [r3, #4]
 8009d98:	6063      	str	r3, [r4, #4]
 8009d9a:	bf04      	itt	eq
 8009d9c:	1949      	addeq	r1, r1, r5
 8009d9e:	6021      	streq	r1, [r4, #0]
 8009da0:	6054      	str	r4, [r2, #4]
 8009da2:	e7ca      	b.n	8009d3a <_free_r+0x26>
 8009da4:	b003      	add	sp, #12
 8009da6:	bd30      	pop	{r4, r5, pc}
 8009da8:	20001eac 	.word	0x20001eac

08009dac <sbrk_aligned>:
 8009dac:	b570      	push	{r4, r5, r6, lr}
 8009dae:	4e0e      	ldr	r6, [pc, #56]	; (8009de8 <sbrk_aligned+0x3c>)
 8009db0:	460c      	mov	r4, r1
 8009db2:	6831      	ldr	r1, [r6, #0]
 8009db4:	4605      	mov	r5, r0
 8009db6:	b911      	cbnz	r1, 8009dbe <sbrk_aligned+0x12>
 8009db8:	f000 f88c 	bl	8009ed4 <_sbrk_r>
 8009dbc:	6030      	str	r0, [r6, #0]
 8009dbe:	4621      	mov	r1, r4
 8009dc0:	4628      	mov	r0, r5
 8009dc2:	f000 f887 	bl	8009ed4 <_sbrk_r>
 8009dc6:	1c43      	adds	r3, r0, #1
 8009dc8:	d00a      	beq.n	8009de0 <sbrk_aligned+0x34>
 8009dca:	1cc4      	adds	r4, r0, #3
 8009dcc:	f024 0403 	bic.w	r4, r4, #3
 8009dd0:	42a0      	cmp	r0, r4
 8009dd2:	d007      	beq.n	8009de4 <sbrk_aligned+0x38>
 8009dd4:	1a21      	subs	r1, r4, r0
 8009dd6:	4628      	mov	r0, r5
 8009dd8:	f000 f87c 	bl	8009ed4 <_sbrk_r>
 8009ddc:	3001      	adds	r0, #1
 8009dde:	d101      	bne.n	8009de4 <sbrk_aligned+0x38>
 8009de0:	f04f 34ff 	mov.w	r4, #4294967295
 8009de4:	4620      	mov	r0, r4
 8009de6:	bd70      	pop	{r4, r5, r6, pc}
 8009de8:	20001eb0 	.word	0x20001eb0

08009dec <_malloc_r>:
 8009dec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009df0:	1ccd      	adds	r5, r1, #3
 8009df2:	f025 0503 	bic.w	r5, r5, #3
 8009df6:	3508      	adds	r5, #8
 8009df8:	2d0c      	cmp	r5, #12
 8009dfa:	bf38      	it	cc
 8009dfc:	250c      	movcc	r5, #12
 8009dfe:	2d00      	cmp	r5, #0
 8009e00:	4607      	mov	r7, r0
 8009e02:	db01      	blt.n	8009e08 <_malloc_r+0x1c>
 8009e04:	42a9      	cmp	r1, r5
 8009e06:	d905      	bls.n	8009e14 <_malloc_r+0x28>
 8009e08:	230c      	movs	r3, #12
 8009e0a:	603b      	str	r3, [r7, #0]
 8009e0c:	2600      	movs	r6, #0
 8009e0e:	4630      	mov	r0, r6
 8009e10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009e14:	4e2e      	ldr	r6, [pc, #184]	; (8009ed0 <_malloc_r+0xe4>)
 8009e16:	f000 f8f7 	bl	800a008 <__malloc_lock>
 8009e1a:	6833      	ldr	r3, [r6, #0]
 8009e1c:	461c      	mov	r4, r3
 8009e1e:	bb34      	cbnz	r4, 8009e6e <_malloc_r+0x82>
 8009e20:	4629      	mov	r1, r5
 8009e22:	4638      	mov	r0, r7
 8009e24:	f7ff ffc2 	bl	8009dac <sbrk_aligned>
 8009e28:	1c43      	adds	r3, r0, #1
 8009e2a:	4604      	mov	r4, r0
 8009e2c:	d14d      	bne.n	8009eca <_malloc_r+0xde>
 8009e2e:	6834      	ldr	r4, [r6, #0]
 8009e30:	4626      	mov	r6, r4
 8009e32:	2e00      	cmp	r6, #0
 8009e34:	d140      	bne.n	8009eb8 <_malloc_r+0xcc>
 8009e36:	6823      	ldr	r3, [r4, #0]
 8009e38:	4631      	mov	r1, r6
 8009e3a:	4638      	mov	r0, r7
 8009e3c:	eb04 0803 	add.w	r8, r4, r3
 8009e40:	f000 f848 	bl	8009ed4 <_sbrk_r>
 8009e44:	4580      	cmp	r8, r0
 8009e46:	d13a      	bne.n	8009ebe <_malloc_r+0xd2>
 8009e48:	6821      	ldr	r1, [r4, #0]
 8009e4a:	3503      	adds	r5, #3
 8009e4c:	1a6d      	subs	r5, r5, r1
 8009e4e:	f025 0503 	bic.w	r5, r5, #3
 8009e52:	3508      	adds	r5, #8
 8009e54:	2d0c      	cmp	r5, #12
 8009e56:	bf38      	it	cc
 8009e58:	250c      	movcc	r5, #12
 8009e5a:	4629      	mov	r1, r5
 8009e5c:	4638      	mov	r0, r7
 8009e5e:	f7ff ffa5 	bl	8009dac <sbrk_aligned>
 8009e62:	3001      	adds	r0, #1
 8009e64:	d02b      	beq.n	8009ebe <_malloc_r+0xd2>
 8009e66:	6823      	ldr	r3, [r4, #0]
 8009e68:	442b      	add	r3, r5
 8009e6a:	6023      	str	r3, [r4, #0]
 8009e6c:	e00e      	b.n	8009e8c <_malloc_r+0xa0>
 8009e6e:	6822      	ldr	r2, [r4, #0]
 8009e70:	1b52      	subs	r2, r2, r5
 8009e72:	d41e      	bmi.n	8009eb2 <_malloc_r+0xc6>
 8009e74:	2a0b      	cmp	r2, #11
 8009e76:	d916      	bls.n	8009ea6 <_malloc_r+0xba>
 8009e78:	1961      	adds	r1, r4, r5
 8009e7a:	42a3      	cmp	r3, r4
 8009e7c:	6025      	str	r5, [r4, #0]
 8009e7e:	bf18      	it	ne
 8009e80:	6059      	strne	r1, [r3, #4]
 8009e82:	6863      	ldr	r3, [r4, #4]
 8009e84:	bf08      	it	eq
 8009e86:	6031      	streq	r1, [r6, #0]
 8009e88:	5162      	str	r2, [r4, r5]
 8009e8a:	604b      	str	r3, [r1, #4]
 8009e8c:	4638      	mov	r0, r7
 8009e8e:	f104 060b 	add.w	r6, r4, #11
 8009e92:	f000 f8bf 	bl	800a014 <__malloc_unlock>
 8009e96:	f026 0607 	bic.w	r6, r6, #7
 8009e9a:	1d23      	adds	r3, r4, #4
 8009e9c:	1af2      	subs	r2, r6, r3
 8009e9e:	d0b6      	beq.n	8009e0e <_malloc_r+0x22>
 8009ea0:	1b9b      	subs	r3, r3, r6
 8009ea2:	50a3      	str	r3, [r4, r2]
 8009ea4:	e7b3      	b.n	8009e0e <_malloc_r+0x22>
 8009ea6:	6862      	ldr	r2, [r4, #4]
 8009ea8:	42a3      	cmp	r3, r4
 8009eaa:	bf0c      	ite	eq
 8009eac:	6032      	streq	r2, [r6, #0]
 8009eae:	605a      	strne	r2, [r3, #4]
 8009eb0:	e7ec      	b.n	8009e8c <_malloc_r+0xa0>
 8009eb2:	4623      	mov	r3, r4
 8009eb4:	6864      	ldr	r4, [r4, #4]
 8009eb6:	e7b2      	b.n	8009e1e <_malloc_r+0x32>
 8009eb8:	4634      	mov	r4, r6
 8009eba:	6876      	ldr	r6, [r6, #4]
 8009ebc:	e7b9      	b.n	8009e32 <_malloc_r+0x46>
 8009ebe:	230c      	movs	r3, #12
 8009ec0:	603b      	str	r3, [r7, #0]
 8009ec2:	4638      	mov	r0, r7
 8009ec4:	f000 f8a6 	bl	800a014 <__malloc_unlock>
 8009ec8:	e7a1      	b.n	8009e0e <_malloc_r+0x22>
 8009eca:	6025      	str	r5, [r4, #0]
 8009ecc:	e7de      	b.n	8009e8c <_malloc_r+0xa0>
 8009ece:	bf00      	nop
 8009ed0:	20001eac 	.word	0x20001eac

08009ed4 <_sbrk_r>:
 8009ed4:	b538      	push	{r3, r4, r5, lr}
 8009ed6:	4d06      	ldr	r5, [pc, #24]	; (8009ef0 <_sbrk_r+0x1c>)
 8009ed8:	2300      	movs	r3, #0
 8009eda:	4604      	mov	r4, r0
 8009edc:	4608      	mov	r0, r1
 8009ede:	602b      	str	r3, [r5, #0]
 8009ee0:	f7f7 f9d0 	bl	8001284 <_sbrk>
 8009ee4:	1c43      	adds	r3, r0, #1
 8009ee6:	d102      	bne.n	8009eee <_sbrk_r+0x1a>
 8009ee8:	682b      	ldr	r3, [r5, #0]
 8009eea:	b103      	cbz	r3, 8009eee <_sbrk_r+0x1a>
 8009eec:	6023      	str	r3, [r4, #0]
 8009eee:	bd38      	pop	{r3, r4, r5, pc}
 8009ef0:	20001eb4 	.word	0x20001eb4

08009ef4 <__sread>:
 8009ef4:	b510      	push	{r4, lr}
 8009ef6:	460c      	mov	r4, r1
 8009ef8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009efc:	f000 f890 	bl	800a020 <_read_r>
 8009f00:	2800      	cmp	r0, #0
 8009f02:	bfab      	itete	ge
 8009f04:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009f06:	89a3      	ldrhlt	r3, [r4, #12]
 8009f08:	181b      	addge	r3, r3, r0
 8009f0a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009f0e:	bfac      	ite	ge
 8009f10:	6563      	strge	r3, [r4, #84]	; 0x54
 8009f12:	81a3      	strhlt	r3, [r4, #12]
 8009f14:	bd10      	pop	{r4, pc}

08009f16 <__swrite>:
 8009f16:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009f1a:	461f      	mov	r7, r3
 8009f1c:	898b      	ldrh	r3, [r1, #12]
 8009f1e:	05db      	lsls	r3, r3, #23
 8009f20:	4605      	mov	r5, r0
 8009f22:	460c      	mov	r4, r1
 8009f24:	4616      	mov	r6, r2
 8009f26:	d505      	bpl.n	8009f34 <__swrite+0x1e>
 8009f28:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009f2c:	2302      	movs	r3, #2
 8009f2e:	2200      	movs	r2, #0
 8009f30:	f000 f858 	bl	8009fe4 <_lseek_r>
 8009f34:	89a3      	ldrh	r3, [r4, #12]
 8009f36:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009f3a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009f3e:	81a3      	strh	r3, [r4, #12]
 8009f40:	4632      	mov	r2, r6
 8009f42:	463b      	mov	r3, r7
 8009f44:	4628      	mov	r0, r5
 8009f46:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009f4a:	f000 b817 	b.w	8009f7c <_write_r>

08009f4e <__sseek>:
 8009f4e:	b510      	push	{r4, lr}
 8009f50:	460c      	mov	r4, r1
 8009f52:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009f56:	f000 f845 	bl	8009fe4 <_lseek_r>
 8009f5a:	1c43      	adds	r3, r0, #1
 8009f5c:	89a3      	ldrh	r3, [r4, #12]
 8009f5e:	bf15      	itete	ne
 8009f60:	6560      	strne	r0, [r4, #84]	; 0x54
 8009f62:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009f66:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009f6a:	81a3      	strheq	r3, [r4, #12]
 8009f6c:	bf18      	it	ne
 8009f6e:	81a3      	strhne	r3, [r4, #12]
 8009f70:	bd10      	pop	{r4, pc}

08009f72 <__sclose>:
 8009f72:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009f76:	f000 b813 	b.w	8009fa0 <_close_r>
	...

08009f7c <_write_r>:
 8009f7c:	b538      	push	{r3, r4, r5, lr}
 8009f7e:	4d07      	ldr	r5, [pc, #28]	; (8009f9c <_write_r+0x20>)
 8009f80:	4604      	mov	r4, r0
 8009f82:	4608      	mov	r0, r1
 8009f84:	4611      	mov	r1, r2
 8009f86:	2200      	movs	r2, #0
 8009f88:	602a      	str	r2, [r5, #0]
 8009f8a:	461a      	mov	r2, r3
 8009f8c:	f7f6 ff9e 	bl	8000ecc <_write>
 8009f90:	1c43      	adds	r3, r0, #1
 8009f92:	d102      	bne.n	8009f9a <_write_r+0x1e>
 8009f94:	682b      	ldr	r3, [r5, #0]
 8009f96:	b103      	cbz	r3, 8009f9a <_write_r+0x1e>
 8009f98:	6023      	str	r3, [r4, #0]
 8009f9a:	bd38      	pop	{r3, r4, r5, pc}
 8009f9c:	20001eb4 	.word	0x20001eb4

08009fa0 <_close_r>:
 8009fa0:	b538      	push	{r3, r4, r5, lr}
 8009fa2:	4d06      	ldr	r5, [pc, #24]	; (8009fbc <_close_r+0x1c>)
 8009fa4:	2300      	movs	r3, #0
 8009fa6:	4604      	mov	r4, r0
 8009fa8:	4608      	mov	r0, r1
 8009faa:	602b      	str	r3, [r5, #0]
 8009fac:	f7f6 ffba 	bl	8000f24 <_close>
 8009fb0:	1c43      	adds	r3, r0, #1
 8009fb2:	d102      	bne.n	8009fba <_close_r+0x1a>
 8009fb4:	682b      	ldr	r3, [r5, #0]
 8009fb6:	b103      	cbz	r3, 8009fba <_close_r+0x1a>
 8009fb8:	6023      	str	r3, [r4, #0]
 8009fba:	bd38      	pop	{r3, r4, r5, pc}
 8009fbc:	20001eb4 	.word	0x20001eb4

08009fc0 <_fstat_r>:
 8009fc0:	b538      	push	{r3, r4, r5, lr}
 8009fc2:	4d07      	ldr	r5, [pc, #28]	; (8009fe0 <_fstat_r+0x20>)
 8009fc4:	2300      	movs	r3, #0
 8009fc6:	4604      	mov	r4, r0
 8009fc8:	4608      	mov	r0, r1
 8009fca:	4611      	mov	r1, r2
 8009fcc:	602b      	str	r3, [r5, #0]
 8009fce:	f7f6 fff9 	bl	8000fc4 <_fstat>
 8009fd2:	1c43      	adds	r3, r0, #1
 8009fd4:	d102      	bne.n	8009fdc <_fstat_r+0x1c>
 8009fd6:	682b      	ldr	r3, [r5, #0]
 8009fd8:	b103      	cbz	r3, 8009fdc <_fstat_r+0x1c>
 8009fda:	6023      	str	r3, [r4, #0]
 8009fdc:	bd38      	pop	{r3, r4, r5, pc}
 8009fde:	bf00      	nop
 8009fe0:	20001eb4 	.word	0x20001eb4

08009fe4 <_lseek_r>:
 8009fe4:	b538      	push	{r3, r4, r5, lr}
 8009fe6:	4d07      	ldr	r5, [pc, #28]	; (800a004 <_lseek_r+0x20>)
 8009fe8:	4604      	mov	r4, r0
 8009fea:	4608      	mov	r0, r1
 8009fec:	4611      	mov	r1, r2
 8009fee:	2200      	movs	r2, #0
 8009ff0:	602a      	str	r2, [r5, #0]
 8009ff2:	461a      	mov	r2, r3
 8009ff4:	f7f6 ffad 	bl	8000f52 <_lseek>
 8009ff8:	1c43      	adds	r3, r0, #1
 8009ffa:	d102      	bne.n	800a002 <_lseek_r+0x1e>
 8009ffc:	682b      	ldr	r3, [r5, #0]
 8009ffe:	b103      	cbz	r3, 800a002 <_lseek_r+0x1e>
 800a000:	6023      	str	r3, [r4, #0]
 800a002:	bd38      	pop	{r3, r4, r5, pc}
 800a004:	20001eb4 	.word	0x20001eb4

0800a008 <__malloc_lock>:
 800a008:	4801      	ldr	r0, [pc, #4]	; (800a010 <__malloc_lock+0x8>)
 800a00a:	f7ff be53 	b.w	8009cb4 <__retarget_lock_acquire_recursive>
 800a00e:	bf00      	nop
 800a010:	20001ea8 	.word	0x20001ea8

0800a014 <__malloc_unlock>:
 800a014:	4801      	ldr	r0, [pc, #4]	; (800a01c <__malloc_unlock+0x8>)
 800a016:	f7ff be4e 	b.w	8009cb6 <__retarget_lock_release_recursive>
 800a01a:	bf00      	nop
 800a01c:	20001ea8 	.word	0x20001ea8

0800a020 <_read_r>:
 800a020:	b538      	push	{r3, r4, r5, lr}
 800a022:	4d07      	ldr	r5, [pc, #28]	; (800a040 <_read_r+0x20>)
 800a024:	4604      	mov	r4, r0
 800a026:	4608      	mov	r0, r1
 800a028:	4611      	mov	r1, r2
 800a02a:	2200      	movs	r2, #0
 800a02c:	602a      	str	r2, [r5, #0]
 800a02e:	461a      	mov	r2, r3
 800a030:	f7f6 ffa0 	bl	8000f74 <_read>
 800a034:	1c43      	adds	r3, r0, #1
 800a036:	d102      	bne.n	800a03e <_read_r+0x1e>
 800a038:	682b      	ldr	r3, [r5, #0]
 800a03a:	b103      	cbz	r3, 800a03e <_read_r+0x1e>
 800a03c:	6023      	str	r3, [r4, #0]
 800a03e:	bd38      	pop	{r3, r4, r5, pc}
 800a040:	20001eb4 	.word	0x20001eb4

0800a044 <_init>:
 800a044:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a046:	bf00      	nop
 800a048:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a04a:	bc08      	pop	{r3}
 800a04c:	469e      	mov	lr, r3
 800a04e:	4770      	bx	lr

0800a050 <_fini>:
 800a050:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a052:	bf00      	nop
 800a054:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a056:	bc08      	pop	{r3}
 800a058:	469e      	mov	lr, r3
 800a05a:	4770      	bx	lr
