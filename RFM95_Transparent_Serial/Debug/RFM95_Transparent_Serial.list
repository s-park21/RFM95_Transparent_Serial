
RFM95_Transparent_Serial.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c730  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000100  0800c8b8  0800c8b8  0001c8b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c9b8  0800c9b8  00020170  2**0
                  CONTENTS
  4 .ARM          00000008  0800c9b8  0800c9b8  0001c9b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c9c0  0800c9c0  00020170  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c9c0  0800c9c0  0001c9c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c9c4  0800c9c4  0001c9c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000170  20000000  0800c9c8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020170  2**0
                  CONTENTS
 10 .bss          000022e4  20000170  20000170  00020170  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20002454  20002454  00020170  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020170  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001c2dc  00000000  00000000  000201a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003d51  00000000  00000000  0003c47c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000016c8  00000000  00000000  000401d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001540  00000000  00000000  00041898  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023f68  00000000  00000000  00042dd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001bb79  00000000  00000000  00066d40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c88ac  00000000  00000000  000828b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0014b165  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000067e4  00000000  00000000  0014b1b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000170 	.word	0x20000170
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800c8a0 	.word	0x0800c8a0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000174 	.word	0x20000174
 80001c4:	0800c8a0 	.word	0x0800c8a0

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__aeabi_d2uiz>:
 8000964:	004a      	lsls	r2, r1, #1
 8000966:	d211      	bcs.n	800098c <__aeabi_d2uiz+0x28>
 8000968:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 800096c:	d211      	bcs.n	8000992 <__aeabi_d2uiz+0x2e>
 800096e:	d50d      	bpl.n	800098c <__aeabi_d2uiz+0x28>
 8000970:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000974:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000978:	d40e      	bmi.n	8000998 <__aeabi_d2uiz+0x34>
 800097a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800097e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000982:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000986:	fa23 f002 	lsr.w	r0, r3, r2
 800098a:	4770      	bx	lr
 800098c:	f04f 0000 	mov.w	r0, #0
 8000990:	4770      	bx	lr
 8000992:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000996:	d102      	bne.n	800099e <__aeabi_d2uiz+0x3a>
 8000998:	f04f 30ff 	mov.w	r0, #4294967295
 800099c:	4770      	bx	lr
 800099e:	f04f 0000 	mov.w	r0, #0
 80009a2:	4770      	bx	lr

080009a4 <__aeabi_uldivmod>:
 80009a4:	b953      	cbnz	r3, 80009bc <__aeabi_uldivmod+0x18>
 80009a6:	b94a      	cbnz	r2, 80009bc <__aeabi_uldivmod+0x18>
 80009a8:	2900      	cmp	r1, #0
 80009aa:	bf08      	it	eq
 80009ac:	2800      	cmpeq	r0, #0
 80009ae:	bf1c      	itt	ne
 80009b0:	f04f 31ff 	movne.w	r1, #4294967295
 80009b4:	f04f 30ff 	movne.w	r0, #4294967295
 80009b8:	f000 b974 	b.w	8000ca4 <__aeabi_idiv0>
 80009bc:	f1ad 0c08 	sub.w	ip, sp, #8
 80009c0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80009c4:	f000 f806 	bl	80009d4 <__udivmoddi4>
 80009c8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80009cc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80009d0:	b004      	add	sp, #16
 80009d2:	4770      	bx	lr

080009d4 <__udivmoddi4>:
 80009d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80009d8:	9d08      	ldr	r5, [sp, #32]
 80009da:	4604      	mov	r4, r0
 80009dc:	468e      	mov	lr, r1
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d14d      	bne.n	8000a7e <__udivmoddi4+0xaa>
 80009e2:	428a      	cmp	r2, r1
 80009e4:	4694      	mov	ip, r2
 80009e6:	d969      	bls.n	8000abc <__udivmoddi4+0xe8>
 80009e8:	fab2 f282 	clz	r2, r2
 80009ec:	b152      	cbz	r2, 8000a04 <__udivmoddi4+0x30>
 80009ee:	fa01 f302 	lsl.w	r3, r1, r2
 80009f2:	f1c2 0120 	rsb	r1, r2, #32
 80009f6:	fa20 f101 	lsr.w	r1, r0, r1
 80009fa:	fa0c fc02 	lsl.w	ip, ip, r2
 80009fe:	ea41 0e03 	orr.w	lr, r1, r3
 8000a02:	4094      	lsls	r4, r2
 8000a04:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000a08:	0c21      	lsrs	r1, r4, #16
 8000a0a:	fbbe f6f8 	udiv	r6, lr, r8
 8000a0e:	fa1f f78c 	uxth.w	r7, ip
 8000a12:	fb08 e316 	mls	r3, r8, r6, lr
 8000a16:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000a1a:	fb06 f107 	mul.w	r1, r6, r7
 8000a1e:	4299      	cmp	r1, r3
 8000a20:	d90a      	bls.n	8000a38 <__udivmoddi4+0x64>
 8000a22:	eb1c 0303 	adds.w	r3, ip, r3
 8000a26:	f106 30ff 	add.w	r0, r6, #4294967295
 8000a2a:	f080 811f 	bcs.w	8000c6c <__udivmoddi4+0x298>
 8000a2e:	4299      	cmp	r1, r3
 8000a30:	f240 811c 	bls.w	8000c6c <__udivmoddi4+0x298>
 8000a34:	3e02      	subs	r6, #2
 8000a36:	4463      	add	r3, ip
 8000a38:	1a5b      	subs	r3, r3, r1
 8000a3a:	b2a4      	uxth	r4, r4
 8000a3c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000a40:	fb08 3310 	mls	r3, r8, r0, r3
 8000a44:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000a48:	fb00 f707 	mul.w	r7, r0, r7
 8000a4c:	42a7      	cmp	r7, r4
 8000a4e:	d90a      	bls.n	8000a66 <__udivmoddi4+0x92>
 8000a50:	eb1c 0404 	adds.w	r4, ip, r4
 8000a54:	f100 33ff 	add.w	r3, r0, #4294967295
 8000a58:	f080 810a 	bcs.w	8000c70 <__udivmoddi4+0x29c>
 8000a5c:	42a7      	cmp	r7, r4
 8000a5e:	f240 8107 	bls.w	8000c70 <__udivmoddi4+0x29c>
 8000a62:	4464      	add	r4, ip
 8000a64:	3802      	subs	r0, #2
 8000a66:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000a6a:	1be4      	subs	r4, r4, r7
 8000a6c:	2600      	movs	r6, #0
 8000a6e:	b11d      	cbz	r5, 8000a78 <__udivmoddi4+0xa4>
 8000a70:	40d4      	lsrs	r4, r2
 8000a72:	2300      	movs	r3, #0
 8000a74:	e9c5 4300 	strd	r4, r3, [r5]
 8000a78:	4631      	mov	r1, r6
 8000a7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a7e:	428b      	cmp	r3, r1
 8000a80:	d909      	bls.n	8000a96 <__udivmoddi4+0xc2>
 8000a82:	2d00      	cmp	r5, #0
 8000a84:	f000 80ef 	beq.w	8000c66 <__udivmoddi4+0x292>
 8000a88:	2600      	movs	r6, #0
 8000a8a:	e9c5 0100 	strd	r0, r1, [r5]
 8000a8e:	4630      	mov	r0, r6
 8000a90:	4631      	mov	r1, r6
 8000a92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a96:	fab3 f683 	clz	r6, r3
 8000a9a:	2e00      	cmp	r6, #0
 8000a9c:	d14a      	bne.n	8000b34 <__udivmoddi4+0x160>
 8000a9e:	428b      	cmp	r3, r1
 8000aa0:	d302      	bcc.n	8000aa8 <__udivmoddi4+0xd4>
 8000aa2:	4282      	cmp	r2, r0
 8000aa4:	f200 80f9 	bhi.w	8000c9a <__udivmoddi4+0x2c6>
 8000aa8:	1a84      	subs	r4, r0, r2
 8000aaa:	eb61 0303 	sbc.w	r3, r1, r3
 8000aae:	2001      	movs	r0, #1
 8000ab0:	469e      	mov	lr, r3
 8000ab2:	2d00      	cmp	r5, #0
 8000ab4:	d0e0      	beq.n	8000a78 <__udivmoddi4+0xa4>
 8000ab6:	e9c5 4e00 	strd	r4, lr, [r5]
 8000aba:	e7dd      	b.n	8000a78 <__udivmoddi4+0xa4>
 8000abc:	b902      	cbnz	r2, 8000ac0 <__udivmoddi4+0xec>
 8000abe:	deff      	udf	#255	; 0xff
 8000ac0:	fab2 f282 	clz	r2, r2
 8000ac4:	2a00      	cmp	r2, #0
 8000ac6:	f040 8092 	bne.w	8000bee <__udivmoddi4+0x21a>
 8000aca:	eba1 010c 	sub.w	r1, r1, ip
 8000ace:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ad2:	fa1f fe8c 	uxth.w	lr, ip
 8000ad6:	2601      	movs	r6, #1
 8000ad8:	0c20      	lsrs	r0, r4, #16
 8000ada:	fbb1 f3f7 	udiv	r3, r1, r7
 8000ade:	fb07 1113 	mls	r1, r7, r3, r1
 8000ae2:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ae6:	fb0e f003 	mul.w	r0, lr, r3
 8000aea:	4288      	cmp	r0, r1
 8000aec:	d908      	bls.n	8000b00 <__udivmoddi4+0x12c>
 8000aee:	eb1c 0101 	adds.w	r1, ip, r1
 8000af2:	f103 38ff 	add.w	r8, r3, #4294967295
 8000af6:	d202      	bcs.n	8000afe <__udivmoddi4+0x12a>
 8000af8:	4288      	cmp	r0, r1
 8000afa:	f200 80cb 	bhi.w	8000c94 <__udivmoddi4+0x2c0>
 8000afe:	4643      	mov	r3, r8
 8000b00:	1a09      	subs	r1, r1, r0
 8000b02:	b2a4      	uxth	r4, r4
 8000b04:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b08:	fb07 1110 	mls	r1, r7, r0, r1
 8000b0c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000b10:	fb0e fe00 	mul.w	lr, lr, r0
 8000b14:	45a6      	cmp	lr, r4
 8000b16:	d908      	bls.n	8000b2a <__udivmoddi4+0x156>
 8000b18:	eb1c 0404 	adds.w	r4, ip, r4
 8000b1c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000b20:	d202      	bcs.n	8000b28 <__udivmoddi4+0x154>
 8000b22:	45a6      	cmp	lr, r4
 8000b24:	f200 80bb 	bhi.w	8000c9e <__udivmoddi4+0x2ca>
 8000b28:	4608      	mov	r0, r1
 8000b2a:	eba4 040e 	sub.w	r4, r4, lr
 8000b2e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000b32:	e79c      	b.n	8000a6e <__udivmoddi4+0x9a>
 8000b34:	f1c6 0720 	rsb	r7, r6, #32
 8000b38:	40b3      	lsls	r3, r6
 8000b3a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000b3e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000b42:	fa20 f407 	lsr.w	r4, r0, r7
 8000b46:	fa01 f306 	lsl.w	r3, r1, r6
 8000b4a:	431c      	orrs	r4, r3
 8000b4c:	40f9      	lsrs	r1, r7
 8000b4e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000b52:	fa00 f306 	lsl.w	r3, r0, r6
 8000b56:	fbb1 f8f9 	udiv	r8, r1, r9
 8000b5a:	0c20      	lsrs	r0, r4, #16
 8000b5c:	fa1f fe8c 	uxth.w	lr, ip
 8000b60:	fb09 1118 	mls	r1, r9, r8, r1
 8000b64:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000b68:	fb08 f00e 	mul.w	r0, r8, lr
 8000b6c:	4288      	cmp	r0, r1
 8000b6e:	fa02 f206 	lsl.w	r2, r2, r6
 8000b72:	d90b      	bls.n	8000b8c <__udivmoddi4+0x1b8>
 8000b74:	eb1c 0101 	adds.w	r1, ip, r1
 8000b78:	f108 3aff 	add.w	sl, r8, #4294967295
 8000b7c:	f080 8088 	bcs.w	8000c90 <__udivmoddi4+0x2bc>
 8000b80:	4288      	cmp	r0, r1
 8000b82:	f240 8085 	bls.w	8000c90 <__udivmoddi4+0x2bc>
 8000b86:	f1a8 0802 	sub.w	r8, r8, #2
 8000b8a:	4461      	add	r1, ip
 8000b8c:	1a09      	subs	r1, r1, r0
 8000b8e:	b2a4      	uxth	r4, r4
 8000b90:	fbb1 f0f9 	udiv	r0, r1, r9
 8000b94:	fb09 1110 	mls	r1, r9, r0, r1
 8000b98:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000b9c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ba0:	458e      	cmp	lr, r1
 8000ba2:	d908      	bls.n	8000bb6 <__udivmoddi4+0x1e2>
 8000ba4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ba8:	f100 34ff 	add.w	r4, r0, #4294967295
 8000bac:	d26c      	bcs.n	8000c88 <__udivmoddi4+0x2b4>
 8000bae:	458e      	cmp	lr, r1
 8000bb0:	d96a      	bls.n	8000c88 <__udivmoddi4+0x2b4>
 8000bb2:	3802      	subs	r0, #2
 8000bb4:	4461      	add	r1, ip
 8000bb6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000bba:	fba0 9402 	umull	r9, r4, r0, r2
 8000bbe:	eba1 010e 	sub.w	r1, r1, lr
 8000bc2:	42a1      	cmp	r1, r4
 8000bc4:	46c8      	mov	r8, r9
 8000bc6:	46a6      	mov	lr, r4
 8000bc8:	d356      	bcc.n	8000c78 <__udivmoddi4+0x2a4>
 8000bca:	d053      	beq.n	8000c74 <__udivmoddi4+0x2a0>
 8000bcc:	b15d      	cbz	r5, 8000be6 <__udivmoddi4+0x212>
 8000bce:	ebb3 0208 	subs.w	r2, r3, r8
 8000bd2:	eb61 010e 	sbc.w	r1, r1, lr
 8000bd6:	fa01 f707 	lsl.w	r7, r1, r7
 8000bda:	fa22 f306 	lsr.w	r3, r2, r6
 8000bde:	40f1      	lsrs	r1, r6
 8000be0:	431f      	orrs	r7, r3
 8000be2:	e9c5 7100 	strd	r7, r1, [r5]
 8000be6:	2600      	movs	r6, #0
 8000be8:	4631      	mov	r1, r6
 8000bea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bee:	f1c2 0320 	rsb	r3, r2, #32
 8000bf2:	40d8      	lsrs	r0, r3
 8000bf4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000bf8:	fa21 f303 	lsr.w	r3, r1, r3
 8000bfc:	4091      	lsls	r1, r2
 8000bfe:	4301      	orrs	r1, r0
 8000c00:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c04:	fa1f fe8c 	uxth.w	lr, ip
 8000c08:	fbb3 f0f7 	udiv	r0, r3, r7
 8000c0c:	fb07 3610 	mls	r6, r7, r0, r3
 8000c10:	0c0b      	lsrs	r3, r1, #16
 8000c12:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000c16:	fb00 f60e 	mul.w	r6, r0, lr
 8000c1a:	429e      	cmp	r6, r3
 8000c1c:	fa04 f402 	lsl.w	r4, r4, r2
 8000c20:	d908      	bls.n	8000c34 <__udivmoddi4+0x260>
 8000c22:	eb1c 0303 	adds.w	r3, ip, r3
 8000c26:	f100 38ff 	add.w	r8, r0, #4294967295
 8000c2a:	d22f      	bcs.n	8000c8c <__udivmoddi4+0x2b8>
 8000c2c:	429e      	cmp	r6, r3
 8000c2e:	d92d      	bls.n	8000c8c <__udivmoddi4+0x2b8>
 8000c30:	3802      	subs	r0, #2
 8000c32:	4463      	add	r3, ip
 8000c34:	1b9b      	subs	r3, r3, r6
 8000c36:	b289      	uxth	r1, r1
 8000c38:	fbb3 f6f7 	udiv	r6, r3, r7
 8000c3c:	fb07 3316 	mls	r3, r7, r6, r3
 8000c40:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c44:	fb06 f30e 	mul.w	r3, r6, lr
 8000c48:	428b      	cmp	r3, r1
 8000c4a:	d908      	bls.n	8000c5e <__udivmoddi4+0x28a>
 8000c4c:	eb1c 0101 	adds.w	r1, ip, r1
 8000c50:	f106 38ff 	add.w	r8, r6, #4294967295
 8000c54:	d216      	bcs.n	8000c84 <__udivmoddi4+0x2b0>
 8000c56:	428b      	cmp	r3, r1
 8000c58:	d914      	bls.n	8000c84 <__udivmoddi4+0x2b0>
 8000c5a:	3e02      	subs	r6, #2
 8000c5c:	4461      	add	r1, ip
 8000c5e:	1ac9      	subs	r1, r1, r3
 8000c60:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000c64:	e738      	b.n	8000ad8 <__udivmoddi4+0x104>
 8000c66:	462e      	mov	r6, r5
 8000c68:	4628      	mov	r0, r5
 8000c6a:	e705      	b.n	8000a78 <__udivmoddi4+0xa4>
 8000c6c:	4606      	mov	r6, r0
 8000c6e:	e6e3      	b.n	8000a38 <__udivmoddi4+0x64>
 8000c70:	4618      	mov	r0, r3
 8000c72:	e6f8      	b.n	8000a66 <__udivmoddi4+0x92>
 8000c74:	454b      	cmp	r3, r9
 8000c76:	d2a9      	bcs.n	8000bcc <__udivmoddi4+0x1f8>
 8000c78:	ebb9 0802 	subs.w	r8, r9, r2
 8000c7c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000c80:	3801      	subs	r0, #1
 8000c82:	e7a3      	b.n	8000bcc <__udivmoddi4+0x1f8>
 8000c84:	4646      	mov	r6, r8
 8000c86:	e7ea      	b.n	8000c5e <__udivmoddi4+0x28a>
 8000c88:	4620      	mov	r0, r4
 8000c8a:	e794      	b.n	8000bb6 <__udivmoddi4+0x1e2>
 8000c8c:	4640      	mov	r0, r8
 8000c8e:	e7d1      	b.n	8000c34 <__udivmoddi4+0x260>
 8000c90:	46d0      	mov	r8, sl
 8000c92:	e77b      	b.n	8000b8c <__udivmoddi4+0x1b8>
 8000c94:	3b02      	subs	r3, #2
 8000c96:	4461      	add	r1, ip
 8000c98:	e732      	b.n	8000b00 <__udivmoddi4+0x12c>
 8000c9a:	4630      	mov	r0, r6
 8000c9c:	e709      	b.n	8000ab2 <__udivmoddi4+0xde>
 8000c9e:	4464      	add	r4, ip
 8000ca0:	3802      	subs	r0, #2
 8000ca2:	e742      	b.n	8000b2a <__udivmoddi4+0x156>

08000ca4 <__aeabi_idiv0>:
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <newLoRa>:
										  |    spreading factor = 7				       |
											|           bandwidth = 125 KHz        |
											| 		    coding rate = 4/5            |
											----------------------------------------
\* ----------------------------------------------------------------------------- */
LoRa newLoRa(){
 8000ca8:	b4b0      	push	{r4, r5, r7}
 8000caa:	b08f      	sub	sp, #60	; 0x3c
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
	LoRa new_LoRa;

	new_LoRa.frequency             = 433       ;
 8000cb0:	f240 13b1 	movw	r3, #433	; 0x1b1
 8000cb4:	62bb      	str	r3, [r7, #40]	; 0x28
	new_LoRa.spredingFactor        = SF_7      ;
 8000cb6:	2307      	movs	r3, #7
 8000cb8:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
	new_LoRa.bandWidth			   = BW_125KHz ;
 8000cbc:	2307      	movs	r3, #7
 8000cbe:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	new_LoRa.crcRate               = CR_4_5    ;
 8000cc2:	2301      	movs	r3, #1
 8000cc4:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	new_LoRa.power				   = POWER_20db;
 8000cc8:	23ff      	movs	r3, #255	; 0xff
 8000cca:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	new_LoRa.overCurrentProtection = 100       ;
 8000cce:	2364      	movs	r3, #100	; 0x64
 8000cd0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	new_LoRa.preamble			   = 8         ;
 8000cd4:	2308      	movs	r3, #8
 8000cd6:	863b      	strh	r3, [r7, #48]	; 0x30

	return new_LoRa;
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	461d      	mov	r5, r3
 8000cdc:	f107 0408 	add.w	r4, r7, #8
 8000ce0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000ce2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000ce4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000ce6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000ce8:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000cec:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
}
 8000cf0:	6878      	ldr	r0, [r7, #4]
 8000cf2:	373c      	adds	r7, #60	; 0x3c
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	bcb0      	pop	{r4, r5, r7}
 8000cf8:	4770      	bx	lr

08000cfa <LoRa_reset>:
		description : reset module
		arguments   :
			LoRa* LoRa --> LoRa object handler
		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_reset(LoRa* _LoRa){
 8000cfa:	b580      	push	{r7, lr}
 8000cfc:	b082      	sub	sp, #8
 8000cfe:	af00      	add	r7, sp, #0
 8000d00:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(_LoRa->reset_port, _LoRa->reset_pin, GPIO_PIN_RESET);
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	6898      	ldr	r0, [r3, #8]
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	899b      	ldrh	r3, [r3, #12]
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	4619      	mov	r1, r3
 8000d0e:	f002 faf1 	bl	80032f4 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000d12:	2001      	movs	r0, #1
 8000d14:	f001 fc1a 	bl	800254c <HAL_Delay>
	HAL_GPIO_WritePin(_LoRa->reset_port, _LoRa->reset_pin, GPIO_PIN_SET);
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	6898      	ldr	r0, [r3, #8]
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	899b      	ldrh	r3, [r3, #12]
 8000d20:	2201      	movs	r2, #1
 8000d22:	4619      	mov	r1, r3
 8000d24:	f002 fae6 	bl	80032f4 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8000d28:	2064      	movs	r0, #100	; 0x64
 8000d2a:	f001 fc0f 	bl	800254c <HAL_Delay>
}
 8000d2e:	bf00      	nop
 8000d30:	3708      	adds	r7, #8
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bd80      	pop	{r7, pc}

08000d36 <LoRa_gotoMode>:
		arguments   :
			LoRa* LoRa    --> LoRa object handler
			mode	        --> select from defined modes
		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_gotoMode(LoRa* _LoRa, int mode){
 8000d36:	b580      	push	{r7, lr}
 8000d38:	b084      	sub	sp, #16
 8000d3a:	af00      	add	r7, sp, #0
 8000d3c:	6078      	str	r0, [r7, #4]
 8000d3e:	6039      	str	r1, [r7, #0]
	uint8_t    read;
	uint8_t    data;

	read = LoRa_read(_LoRa, RegOpMode);
 8000d40:	2101      	movs	r1, #1
 8000d42:	6878      	ldr	r0, [r7, #4]
 8000d44:	f000 fa56 	bl	80011f4 <LoRa_read>
 8000d48:	4603      	mov	r3, r0
 8000d4a:	73bb      	strb	r3, [r7, #14]
	data = read;
 8000d4c:	7bbb      	ldrb	r3, [r7, #14]
 8000d4e:	73fb      	strb	r3, [r7, #15]

	if(mode == SLEEP_MODE){
 8000d50:	683b      	ldr	r3, [r7, #0]
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d107      	bne.n	8000d66 <LoRa_gotoMode+0x30>
		data = (read & 0xF8) | 0x00;
 8000d56:	7bbb      	ldrb	r3, [r7, #14]
 8000d58:	f023 0307 	bic.w	r3, r3, #7
 8000d5c:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = SLEEP_MODE;
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	2200      	movs	r2, #0
 8000d62:	61da      	str	r2, [r3, #28]
 8000d64:	e05e      	b.n	8000e24 <LoRa_gotoMode+0xee>
	}else if (mode == STNBY_MODE){
 8000d66:	683b      	ldr	r3, [r7, #0]
 8000d68:	2b01      	cmp	r3, #1
 8000d6a:	d10c      	bne.n	8000d86 <LoRa_gotoMode+0x50>
		data = (read & 0xF8) | 0x01;
 8000d6c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000d70:	f023 0307 	bic.w	r3, r3, #7
 8000d74:	b25b      	sxtb	r3, r3
 8000d76:	f043 0301 	orr.w	r3, r3, #1
 8000d7a:	b25b      	sxtb	r3, r3
 8000d7c:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = STNBY_MODE;
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	2201      	movs	r2, #1
 8000d82:	61da      	str	r2, [r3, #28]
 8000d84:	e04e      	b.n	8000e24 <LoRa_gotoMode+0xee>
	}else if (mode == FS_MODE_TX) {
 8000d86:	683b      	ldr	r3, [r7, #0]
 8000d88:	2b02      	cmp	r3, #2
 8000d8a:	d10c      	bne.n	8000da6 <LoRa_gotoMode+0x70>
		data = (read & 0xF8) | 0x02;
 8000d8c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000d90:	f023 0307 	bic.w	r3, r3, #7
 8000d94:	b25b      	sxtb	r3, r3
 8000d96:	f043 0302 	orr.w	r3, r3, #2
 8000d9a:	b25b      	sxtb	r3, r3
 8000d9c:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = FS_MODE_TX;
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	2202      	movs	r2, #2
 8000da2:	61da      	str	r2, [r3, #28]
 8000da4:	e03e      	b.n	8000e24 <LoRa_gotoMode+0xee>
	}else if (mode == TRANSMIT_MODE){
 8000da6:	683b      	ldr	r3, [r7, #0]
 8000da8:	2b03      	cmp	r3, #3
 8000daa:	d10c      	bne.n	8000dc6 <LoRa_gotoMode+0x90>
		data = (read & 0xF8) | 0x03;
 8000dac:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000db0:	f023 0307 	bic.w	r3, r3, #7
 8000db4:	b25b      	sxtb	r3, r3
 8000db6:	f043 0303 	orr.w	r3, r3, #3
 8000dba:	b25b      	sxtb	r3, r3
 8000dbc:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = TRANSMIT_MODE;
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	2203      	movs	r2, #3
 8000dc2:	61da      	str	r2, [r3, #28]
 8000dc4:	e02e      	b.n	8000e24 <LoRa_gotoMode+0xee>
	}else if (mode == FS_MODE_RX){
 8000dc6:	683b      	ldr	r3, [r7, #0]
 8000dc8:	2b04      	cmp	r3, #4
 8000dca:	d10c      	bne.n	8000de6 <LoRa_gotoMode+0xb0>
		data = (read & 0xF8) | 0x04;
 8000dcc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000dd0:	f023 0307 	bic.w	r3, r3, #7
 8000dd4:	b25b      	sxtb	r3, r3
 8000dd6:	f043 0304 	orr.w	r3, r3, #4
 8000dda:	b25b      	sxtb	r3, r3
 8000ddc:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = TRANSMIT_MODE;
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	2203      	movs	r2, #3
 8000de2:	61da      	str	r2, [r3, #28]
 8000de4:	e01e      	b.n	8000e24 <LoRa_gotoMode+0xee>
	}else if (mode == RXCONTIN_MODE){
 8000de6:	683b      	ldr	r3, [r7, #0]
 8000de8:	2b05      	cmp	r3, #5
 8000dea:	d10c      	bne.n	8000e06 <LoRa_gotoMode+0xd0>
		data = (read & 0xF8) | 0x05;
 8000dec:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000df0:	f023 0307 	bic.w	r3, r3, #7
 8000df4:	b25b      	sxtb	r3, r3
 8000df6:	f043 0305 	orr.w	r3, r3, #5
 8000dfa:	b25b      	sxtb	r3, r3
 8000dfc:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = RXCONTIN_MODE;
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	2205      	movs	r2, #5
 8000e02:	61da      	str	r2, [r3, #28]
 8000e04:	e00e      	b.n	8000e24 <LoRa_gotoMode+0xee>
	}else if (mode == RXSINGLE_MODE){
 8000e06:	683b      	ldr	r3, [r7, #0]
 8000e08:	2b06      	cmp	r3, #6
 8000e0a:	d10b      	bne.n	8000e24 <LoRa_gotoMode+0xee>
		data = (read & 0xF8) | 0x06;
 8000e0c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000e10:	f023 0307 	bic.w	r3, r3, #7
 8000e14:	b25b      	sxtb	r3, r3
 8000e16:	f043 0306 	orr.w	r3, r3, #6
 8000e1a:	b25b      	sxtb	r3, r3
 8000e1c:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = RXSINGLE_MODE;
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	2206      	movs	r2, #6
 8000e22:	61da      	str	r2, [r3, #28]
	}

	LoRa_write(_LoRa, RegOpMode, data);
 8000e24:	7bfb      	ldrb	r3, [r7, #15]
 8000e26:	461a      	mov	r2, r3
 8000e28:	2101      	movs	r1, #1
 8000e2a:	6878      	ldr	r0, [r7, #4]
 8000e2c:	f000 f9fc 	bl	8001228 <LoRa_write>
	HAL_Delay(10);
 8000e30:	200a      	movs	r0, #10
 8000e32:	f001 fb8b 	bl	800254c <HAL_Delay>
}
 8000e36:	bf00      	nop
 8000e38:	3710      	adds	r7, #16
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	bd80      	pop	{r7, pc}

08000e3e <LoRa_setModulation>:
		arguments   :
			LoRa* LoRa    --> LoRa object handler
			mode	        --> select from defined modes. 0->FSK, 1->OOK, 2->LoRa
		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setModulation(LoRa* _LoRa, int mode) {
 8000e3e:	b580      	push	{r7, lr}
 8000e40:	b084      	sub	sp, #16
 8000e42:	af00      	add	r7, sp, #0
 8000e44:	6078      	str	r0, [r7, #4]
 8000e46:	6039      	str	r1, [r7, #0]
	uint8_t read = LoRa_read(_LoRa, RegOpMode);
 8000e48:	2101      	movs	r1, #1
 8000e4a:	6878      	ldr	r0, [r7, #4]
 8000e4c:	f000 f9d2 	bl	80011f4 <LoRa_read>
 8000e50:	4603      	mov	r3, r0
 8000e52:	73fb      	strb	r3, [r7, #15]
	uint8_t data = read;
 8000e54:	7bfb      	ldrb	r3, [r7, #15]
 8000e56:	73bb      	strb	r3, [r7, #14]
	uint8_t prev_mode = _LoRa->current_mode;
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	69db      	ldr	r3, [r3, #28]
 8000e5c:	737b      	strb	r3, [r7, #13]

	// Set modem to sleep mode
	LoRa_gotoMode(_LoRa, SLEEP_MODE);
 8000e5e:	2100      	movs	r1, #0
 8000e60:	6878      	ldr	r0, [r7, #4]
 8000e62:	f7ff ff68 	bl	8000d36 <LoRa_gotoMode>

	// Toggle first RegOpMode bit
	if(mode == 2) {	// LoRa
 8000e66:	683b      	ldr	r3, [r7, #0]
 8000e68:	2b02      	cmp	r3, #2
 8000e6a:	d109      	bne.n	8000e80 <LoRa_setModulation+0x42>
		LoRa_write(_LoRa, RegOpMode, (read & 0x7F) | 0x80);
 8000e6c:	7bfb      	ldrb	r3, [r7, #15]
 8000e6e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000e72:	b2db      	uxtb	r3, r3
 8000e74:	461a      	mov	r2, r3
 8000e76:	2101      	movs	r1, #1
 8000e78:	6878      	ldr	r0, [r7, #4]
 8000e7a:	f000 f9d5 	bl	8001228 <LoRa_write>
 8000e7e:	e02f      	b.n	8000ee0 <LoRa_setModulation+0xa2>
	}
	else if (mode == 1) {	// OOK
 8000e80:	683b      	ldr	r3, [r7, #0]
 8000e82:	2b01      	cmp	r3, #1
 8000e84:	d117      	bne.n	8000eb6 <LoRa_setModulation+0x78>
		LoRa_write(_LoRa, RegOpMode, (read & 0x7F));
 8000e86:	7bfb      	ldrb	r3, [r7, #15]
 8000e88:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000e8c:	b2db      	uxtb	r3, r3
 8000e8e:	461a      	mov	r2, r3
 8000e90:	2101      	movs	r1, #1
 8000e92:	6878      	ldr	r0, [r7, #4]
 8000e94:	f000 f9c8 	bl	8001228 <LoRa_write>
		LoRa_write(_LoRa, RegOpMode, (read & 0x60) | 0x20);
 8000e98:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000ea0:	b25b      	sxtb	r3, r3
 8000ea2:	f043 0320 	orr.w	r3, r3, #32
 8000ea6:	b25b      	sxtb	r3, r3
 8000ea8:	b2db      	uxtb	r3, r3
 8000eaa:	461a      	mov	r2, r3
 8000eac:	2101      	movs	r1, #1
 8000eae:	6878      	ldr	r0, [r7, #4]
 8000eb0:	f000 f9ba 	bl	8001228 <LoRa_write>
 8000eb4:	e014      	b.n	8000ee0 <LoRa_setModulation+0xa2>
	}
	else if (mode == 0) {	// FSK
 8000eb6:	683b      	ldr	r3, [r7, #0]
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d111      	bne.n	8000ee0 <LoRa_setModulation+0xa2>
		LoRa_write(_LoRa, RegOpMode, (read & 0x7F));
 8000ebc:	7bfb      	ldrb	r3, [r7, #15]
 8000ebe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000ec2:	b2db      	uxtb	r3, r3
 8000ec4:	461a      	mov	r2, r3
 8000ec6:	2101      	movs	r1, #1
 8000ec8:	6878      	ldr	r0, [r7, #4]
 8000eca:	f000 f9ad 	bl	8001228 <LoRa_write>
		LoRa_write(_LoRa, RegOpMode, (read & 0x60));
 8000ece:	7bfb      	ldrb	r3, [r7, #15]
 8000ed0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8000ed4:	b2db      	uxtb	r3, r3
 8000ed6:	461a      	mov	r2, r3
 8000ed8:	2101      	movs	r1, #1
 8000eda:	6878      	ldr	r0, [r7, #4]
 8000edc:	f000 f9a4 	bl	8001228 <LoRa_write>
	}

	HAL_Delay(10);
 8000ee0:	200a      	movs	r0, #10
 8000ee2:	f001 fb33 	bl	800254c <HAL_Delay>
	LoRa_gotoMode(_LoRa, prev_mode);
 8000ee6:	7b7b      	ldrb	r3, [r7, #13]
 8000ee8:	4619      	mov	r1, r3
 8000eea:	6878      	ldr	r0, [r7, #4]
 8000eec:	f7ff ff23 	bl	8000d36 <LoRa_gotoMode>
}
 8000ef0:	bf00      	nop
 8000ef2:	3710      	adds	r7, #16
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	bd80      	pop	{r7, pc}

08000ef8 <LoRa_readReg>:
														you want to send
			uint8_t* output		--> pointer to the beginning of output array
			uint16_t w_length	--> detemines number of bytes that you want to read
		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_readReg(LoRa* _LoRa, uint8_t* address, uint16_t r_length, uint8_t* output, uint16_t w_length){
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b084      	sub	sp, #16
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	60f8      	str	r0, [r7, #12]
 8000f00:	60b9      	str	r1, [r7, #8]
 8000f02:	603b      	str	r3, [r7, #0]
 8000f04:	4613      	mov	r3, r2
 8000f06:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_RESET);
 8000f08:	68fb      	ldr	r3, [r7, #12]
 8000f0a:	6818      	ldr	r0, [r3, #0]
 8000f0c:	68fb      	ldr	r3, [r7, #12]
 8000f0e:	889b      	ldrh	r3, [r3, #4]
 8000f10:	2200      	movs	r2, #0
 8000f12:	4619      	mov	r1, r3
 8000f14:	f002 f9ee 	bl	80032f4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(_LoRa->hSPIx, address, r_length, TRANSMIT_TIMEOUT);
 8000f18:	68fb      	ldr	r3, [r7, #12]
 8000f1a:	6998      	ldr	r0, [r3, #24]
 8000f1c:	88fa      	ldrh	r2, [r7, #6]
 8000f1e:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000f22:	68b9      	ldr	r1, [r7, #8]
 8000f24:	f004 f977 	bl	8005216 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8000f28:	bf00      	nop
 8000f2a:	68fb      	ldr	r3, [r7, #12]
 8000f2c:	699b      	ldr	r3, [r3, #24]
 8000f2e:	4618      	mov	r0, r3
 8000f30:	f004 fd60 	bl	80059f4 <HAL_SPI_GetState>
 8000f34:	4603      	mov	r3, r0
 8000f36:	2b01      	cmp	r3, #1
 8000f38:	d1f7      	bne.n	8000f2a <LoRa_readReg+0x32>
		;
	HAL_SPI_Receive(_LoRa->hSPIx, output, w_length, RECEIVE_TIMEOUT);
 8000f3a:	68fb      	ldr	r3, [r7, #12]
 8000f3c:	6998      	ldr	r0, [r3, #24]
 8000f3e:	8b3a      	ldrh	r2, [r7, #24]
 8000f40:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000f44:	6839      	ldr	r1, [r7, #0]
 8000f46:	f004 faa2 	bl	800548e <HAL_SPI_Receive>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8000f4a:	bf00      	nop
 8000f4c:	68fb      	ldr	r3, [r7, #12]
 8000f4e:	699b      	ldr	r3, [r3, #24]
 8000f50:	4618      	mov	r0, r3
 8000f52:	f004 fd4f 	bl	80059f4 <HAL_SPI_GetState>
 8000f56:	4603      	mov	r3, r0
 8000f58:	2b01      	cmp	r3, #1
 8000f5a:	d1f7      	bne.n	8000f4c <LoRa_readReg+0x54>
		;
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_SET);
 8000f5c:	68fb      	ldr	r3, [r7, #12]
 8000f5e:	6818      	ldr	r0, [r3, #0]
 8000f60:	68fb      	ldr	r3, [r7, #12]
 8000f62:	889b      	ldrh	r3, [r3, #4]
 8000f64:	2201      	movs	r2, #1
 8000f66:	4619      	mov	r1, r3
 8000f68:	f002 f9c4 	bl	80032f4 <HAL_GPIO_WritePin>
}
 8000f6c:	bf00      	nop
 8000f6e:	3710      	adds	r7, #16
 8000f70:	46bd      	mov	sp, r7
 8000f72:	bd80      	pop	{r7, pc}

08000f74 <LoRa_writeReg>:
														you want to send
			uint8_t* output		--> pointer to the beginning of values array
			uint16_t w_length	--> detemines number of bytes that you want to send
		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_writeReg(LoRa* _LoRa, uint8_t* address, uint16_t r_length, uint8_t* values, uint16_t w_length){
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b084      	sub	sp, #16
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	60f8      	str	r0, [r7, #12]
 8000f7c:	60b9      	str	r1, [r7, #8]
 8000f7e:	603b      	str	r3, [r7, #0]
 8000f80:	4613      	mov	r3, r2
 8000f82:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_RESET);
 8000f84:	68fb      	ldr	r3, [r7, #12]
 8000f86:	6818      	ldr	r0, [r3, #0]
 8000f88:	68fb      	ldr	r3, [r7, #12]
 8000f8a:	889b      	ldrh	r3, [r3, #4]
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	4619      	mov	r1, r3
 8000f90:	f002 f9b0 	bl	80032f4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(_LoRa->hSPIx, address, r_length, TRANSMIT_TIMEOUT);
 8000f94:	68fb      	ldr	r3, [r7, #12]
 8000f96:	6998      	ldr	r0, [r3, #24]
 8000f98:	88fa      	ldrh	r2, [r7, #6]
 8000f9a:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000f9e:	68b9      	ldr	r1, [r7, #8]
 8000fa0:	f004 f939 	bl	8005216 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8000fa4:	bf00      	nop
 8000fa6:	68fb      	ldr	r3, [r7, #12]
 8000fa8:	699b      	ldr	r3, [r3, #24]
 8000faa:	4618      	mov	r0, r3
 8000fac:	f004 fd22 	bl	80059f4 <HAL_SPI_GetState>
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	2b01      	cmp	r3, #1
 8000fb4:	d1f7      	bne.n	8000fa6 <LoRa_writeReg+0x32>
		;
	HAL_SPI_Transmit(_LoRa->hSPIx, values, w_length, TRANSMIT_TIMEOUT);
 8000fb6:	68fb      	ldr	r3, [r7, #12]
 8000fb8:	6998      	ldr	r0, [r3, #24]
 8000fba:	8b3a      	ldrh	r2, [r7, #24]
 8000fbc:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000fc0:	6839      	ldr	r1, [r7, #0]
 8000fc2:	f004 f928 	bl	8005216 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8000fc6:	bf00      	nop
 8000fc8:	68fb      	ldr	r3, [r7, #12]
 8000fca:	699b      	ldr	r3, [r3, #24]
 8000fcc:	4618      	mov	r0, r3
 8000fce:	f004 fd11 	bl	80059f4 <HAL_SPI_GetState>
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	2b01      	cmp	r3, #1
 8000fd6:	d1f7      	bne.n	8000fc8 <LoRa_writeReg+0x54>
		;
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_SET);
 8000fd8:	68fb      	ldr	r3, [r7, #12]
 8000fda:	6818      	ldr	r0, [r3, #0]
 8000fdc:	68fb      	ldr	r3, [r7, #12]
 8000fde:	889b      	ldrh	r3, [r3, #4]
 8000fe0:	2201      	movs	r2, #1
 8000fe2:	4619      	mov	r1, r3
 8000fe4:	f002 f986 	bl	80032f4 <HAL_GPIO_WritePin>
}
 8000fe8:	bf00      	nop
 8000fea:	3710      	adds	r7, #16
 8000fec:	46bd      	mov	sp, r7
 8000fee:	bd80      	pop	{r7, pc}

08000ff0 <LoRa_setFrequency>:
		arguments   :
			LoRa* LoRa        --> LoRa object handler
			int   freq        --> desired frequency in MHz unit, e.g 434
		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setFrequency(LoRa* _LoRa, int freq){
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b084      	sub	sp, #16
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
 8000ff8:	6039      	str	r1, [r7, #0]
	uint8_t  data;
	uint32_t F;
	F = (freq * 524288)>>5;
 8000ffa:	683b      	ldr	r3, [r7, #0]
 8000ffc:	04db      	lsls	r3, r3, #19
 8000ffe:	115b      	asrs	r3, r3, #5
 8001000:	60fb      	str	r3, [r7, #12]

	// write Msb:
	data = F >> 16;
 8001002:	68fb      	ldr	r3, [r7, #12]
 8001004:	0c1b      	lsrs	r3, r3, #16
 8001006:	72fb      	strb	r3, [r7, #11]
	LoRa_write(_LoRa, RegFrMsb, data);
 8001008:	7afb      	ldrb	r3, [r7, #11]
 800100a:	461a      	mov	r2, r3
 800100c:	2106      	movs	r1, #6
 800100e:	6878      	ldr	r0, [r7, #4]
 8001010:	f000 f90a 	bl	8001228 <LoRa_write>
	HAL_Delay(5);
 8001014:	2005      	movs	r0, #5
 8001016:	f001 fa99 	bl	800254c <HAL_Delay>

	// write Mid:
	data = F >> 8;
 800101a:	68fb      	ldr	r3, [r7, #12]
 800101c:	0a1b      	lsrs	r3, r3, #8
 800101e:	72fb      	strb	r3, [r7, #11]
	LoRa_write(_LoRa, RegFrMid, data);
 8001020:	7afb      	ldrb	r3, [r7, #11]
 8001022:	461a      	mov	r2, r3
 8001024:	2107      	movs	r1, #7
 8001026:	6878      	ldr	r0, [r7, #4]
 8001028:	f000 f8fe 	bl	8001228 <LoRa_write>
	HAL_Delay(5);
 800102c:	2005      	movs	r0, #5
 800102e:	f001 fa8d 	bl	800254c <HAL_Delay>

	// write Lsb:
	data = F >> 0;
 8001032:	68fb      	ldr	r3, [r7, #12]
 8001034:	72fb      	strb	r3, [r7, #11]
	LoRa_write(_LoRa, RegFrLsb, data);
 8001036:	7afb      	ldrb	r3, [r7, #11]
 8001038:	461a      	mov	r2, r3
 800103a:	2108      	movs	r1, #8
 800103c:	6878      	ldr	r0, [r7, #4]
 800103e:	f000 f8f3 	bl	8001228 <LoRa_write>
	HAL_Delay(5);
 8001042:	2005      	movs	r0, #5
 8001044:	f001 fa82 	bl	800254c <HAL_Delay>
}
 8001048:	bf00      	nop
 800104a:	3710      	adds	r7, #16
 800104c:	46bd      	mov	sp, r7
 800104e:	bd80      	pop	{r7, pc}

08001050 <LoRa_setSpreadingFactor>:
		arguments   :
			LoRa* LoRa        --> LoRa object handler
			int   SP          --> desired spreading factor e.g 7
		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setSpreadingFactor(LoRa* _LoRa, int SF){
 8001050:	b580      	push	{r7, lr}
 8001052:	b084      	sub	sp, #16
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
 8001058:	6039      	str	r1, [r7, #0]
	uint8_t	data;
	uint8_t	read;

	if(SF>12)
 800105a:	683b      	ldr	r3, [r7, #0]
 800105c:	2b0c      	cmp	r3, #12
 800105e:	dd01      	ble.n	8001064 <LoRa_setSpreadingFactor+0x14>
		SF = 12;
 8001060:	230c      	movs	r3, #12
 8001062:	603b      	str	r3, [r7, #0]
	if(SF<7)
 8001064:	683b      	ldr	r3, [r7, #0]
 8001066:	2b06      	cmp	r3, #6
 8001068:	dc01      	bgt.n	800106e <LoRa_setSpreadingFactor+0x1e>
		SF = 7;
 800106a:	2307      	movs	r3, #7
 800106c:	603b      	str	r3, [r7, #0]

	read = LoRa_read(_LoRa, RegModemConfig2);
 800106e:	211e      	movs	r1, #30
 8001070:	6878      	ldr	r0, [r7, #4]
 8001072:	f000 f8bf 	bl	80011f4 <LoRa_read>
 8001076:	4603      	mov	r3, r0
 8001078:	73fb      	strb	r3, [r7, #15]
	HAL_Delay(10);
 800107a:	200a      	movs	r0, #10
 800107c:	f001 fa66 	bl	800254c <HAL_Delay>

	data = (SF << 4) + (read & 0x0F);
 8001080:	683b      	ldr	r3, [r7, #0]
 8001082:	b2db      	uxtb	r3, r3
 8001084:	011b      	lsls	r3, r3, #4
 8001086:	b2da      	uxtb	r2, r3
 8001088:	7bfb      	ldrb	r3, [r7, #15]
 800108a:	f003 030f 	and.w	r3, r3, #15
 800108e:	b2db      	uxtb	r3, r3
 8001090:	4413      	add	r3, r2
 8001092:	73bb      	strb	r3, [r7, #14]
	LoRa_write(_LoRa, RegModemConfig2, data);
 8001094:	7bbb      	ldrb	r3, [r7, #14]
 8001096:	461a      	mov	r2, r3
 8001098:	211e      	movs	r1, #30
 800109a:	6878      	ldr	r0, [r7, #4]
 800109c:	f000 f8c4 	bl	8001228 <LoRa_write>
	HAL_Delay(10);
 80010a0:	200a      	movs	r0, #10
 80010a2:	f001 fa53 	bl	800254c <HAL_Delay>
}
 80010a6:	bf00      	nop
 80010a8:	3710      	adds	r7, #16
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bd80      	pop	{r7, pc}

080010ae <LoRa_setPower>:
		arguments   :
			LoRa* LoRa        --> LoRa object handler
			int   power       --> desired power e.g POWER_17db
		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setPower(LoRa* _LoRa, uint8_t power){
 80010ae:	b580      	push	{r7, lr}
 80010b0:	b082      	sub	sp, #8
 80010b2:	af00      	add	r7, sp, #0
 80010b4:	6078      	str	r0, [r7, #4]
 80010b6:	460b      	mov	r3, r1
 80010b8:	70fb      	strb	r3, [r7, #3]
	LoRa_write(_LoRa, RegPaConfig, power);
 80010ba:	78fb      	ldrb	r3, [r7, #3]
 80010bc:	461a      	mov	r2, r3
 80010be:	2109      	movs	r1, #9
 80010c0:	6878      	ldr	r0, [r7, #4]
 80010c2:	f000 f8b1 	bl	8001228 <LoRa_write>
	HAL_Delay(10);
 80010c6:	200a      	movs	r0, #10
 80010c8:	f001 fa40 	bl	800254c <HAL_Delay>
}
 80010cc:	bf00      	nop
 80010ce:	3708      	adds	r7, #8
 80010d0:	46bd      	mov	sp, r7
 80010d2:	bd80      	pop	{r7, pc}

080010d4 <LoRa_setOCP>:
		arguments   :
			LoRa* LoRa        --> LoRa object handler
			int   current     --> desired max currnet in mA, e.g 120
		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setOCP(LoRa* _LoRa, uint8_t current){
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b084      	sub	sp, #16
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
 80010dc:	460b      	mov	r3, r1
 80010de:	70fb      	strb	r3, [r7, #3]
	uint8_t	OcpTrim = 0;
 80010e0:	2300      	movs	r3, #0
 80010e2:	73fb      	strb	r3, [r7, #15]

	if(current<45)
 80010e4:	78fb      	ldrb	r3, [r7, #3]
 80010e6:	2b2c      	cmp	r3, #44	; 0x2c
 80010e8:	d801      	bhi.n	80010ee <LoRa_setOCP+0x1a>
		current = 45;
 80010ea:	232d      	movs	r3, #45	; 0x2d
 80010ec:	70fb      	strb	r3, [r7, #3]
	if(current>240)
 80010ee:	78fb      	ldrb	r3, [r7, #3]
 80010f0:	2bf0      	cmp	r3, #240	; 0xf0
 80010f2:	d901      	bls.n	80010f8 <LoRa_setOCP+0x24>
		current = 240;
 80010f4:	23f0      	movs	r3, #240	; 0xf0
 80010f6:	70fb      	strb	r3, [r7, #3]

	if(current <= 120)
 80010f8:	78fb      	ldrb	r3, [r7, #3]
 80010fa:	2b78      	cmp	r3, #120	; 0x78
 80010fc:	d809      	bhi.n	8001112 <LoRa_setOCP+0x3e>
		OcpTrim = (current - 45)/5;
 80010fe:	78fb      	ldrb	r3, [r7, #3]
 8001100:	3b2d      	subs	r3, #45	; 0x2d
 8001102:	4a12      	ldr	r2, [pc, #72]	; (800114c <LoRa_setOCP+0x78>)
 8001104:	fb82 1203 	smull	r1, r2, r2, r3
 8001108:	1052      	asrs	r2, r2, #1
 800110a:	17db      	asrs	r3, r3, #31
 800110c:	1ad3      	subs	r3, r2, r3
 800110e:	73fb      	strb	r3, [r7, #15]
 8001110:	e00b      	b.n	800112a <LoRa_setOCP+0x56>
	else if(current <= 240)
 8001112:	78fb      	ldrb	r3, [r7, #3]
 8001114:	2bf0      	cmp	r3, #240	; 0xf0
 8001116:	d808      	bhi.n	800112a <LoRa_setOCP+0x56>
		OcpTrim = (current + 30)/10;
 8001118:	78fb      	ldrb	r3, [r7, #3]
 800111a:	331e      	adds	r3, #30
 800111c:	4a0b      	ldr	r2, [pc, #44]	; (800114c <LoRa_setOCP+0x78>)
 800111e:	fb82 1203 	smull	r1, r2, r2, r3
 8001122:	1092      	asrs	r2, r2, #2
 8001124:	17db      	asrs	r3, r3, #31
 8001126:	1ad3      	subs	r3, r2, r3
 8001128:	73fb      	strb	r3, [r7, #15]

	OcpTrim = OcpTrim + (1 << 5);
 800112a:	7bfb      	ldrb	r3, [r7, #15]
 800112c:	3320      	adds	r3, #32
 800112e:	73fb      	strb	r3, [r7, #15]
	LoRa_write(_LoRa, RegOcp, OcpTrim);
 8001130:	7bfb      	ldrb	r3, [r7, #15]
 8001132:	461a      	mov	r2, r3
 8001134:	210b      	movs	r1, #11
 8001136:	6878      	ldr	r0, [r7, #4]
 8001138:	f000 f876 	bl	8001228 <LoRa_write>
	HAL_Delay(10);
 800113c:	200a      	movs	r0, #10
 800113e:	f001 fa05 	bl	800254c <HAL_Delay>
}
 8001142:	bf00      	nop
 8001144:	3710      	adds	r7, #16
 8001146:	46bd      	mov	sp, r7
 8001148:	bd80      	pop	{r7, pc}
 800114a:	bf00      	nop
 800114c:	66666667 	.word	0x66666667

08001150 <LoRa_setCRCon>:
		description : set timeout msb to 0xFF + set CRC enable.
		arguments   :
			LoRa* LoRa        --> LoRa object handler
		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setCRCon(LoRa* _LoRa) {
 8001150:	b580      	push	{r7, lr}
 8001152:	b084      	sub	sp, #16
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
	uint8_t read, data;
	if(_LoRa->modulationMode == LORA_MODULATION) {
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800115e:	2b02      	cmp	r3, #2
 8001160:	d110      	bne.n	8001184 <LoRa_setCRCon+0x34>
		read = LoRa_read(_LoRa, RegModemConfig2);
 8001162:	211e      	movs	r1, #30
 8001164:	6878      	ldr	r0, [r7, #4]
 8001166:	f000 f845 	bl	80011f4 <LoRa_read>
 800116a:	4603      	mov	r3, r0
 800116c:	73fb      	strb	r3, [r7, #15]
		data = (read & 0xFB) | 0x04;
 800116e:	7bfb      	ldrb	r3, [r7, #15]
 8001170:	f043 0304 	orr.w	r3, r3, #4
 8001174:	73bb      	strb	r3, [r7, #14]
		LoRa_write(_LoRa, RegModemConfig2, data);
 8001176:	7bbb      	ldrb	r3, [r7, #14]
 8001178:	461a      	mov	r2, r3
 800117a:	211e      	movs	r1, #30
 800117c:	6878      	ldr	r0, [r7, #4]
 800117e:	f000 f853 	bl	8001228 <LoRa_write>
	else {
		read = LoRa_read(_LoRa, RegPacketConfig1);
		data = (read & 0xEF) | 0x10;
		LoRa_write(_LoRa, RegModemConfig2, data);
	}
}
 8001182:	e00f      	b.n	80011a4 <LoRa_setCRCon+0x54>
		read = LoRa_read(_LoRa, RegPacketConfig1);
 8001184:	2130      	movs	r1, #48	; 0x30
 8001186:	6878      	ldr	r0, [r7, #4]
 8001188:	f000 f834 	bl	80011f4 <LoRa_read>
 800118c:	4603      	mov	r3, r0
 800118e:	73fb      	strb	r3, [r7, #15]
		data = (read & 0xEF) | 0x10;
 8001190:	7bfb      	ldrb	r3, [r7, #15]
 8001192:	f043 0310 	orr.w	r3, r3, #16
 8001196:	73bb      	strb	r3, [r7, #14]
		LoRa_write(_LoRa, RegModemConfig2, data);
 8001198:	7bbb      	ldrb	r3, [r7, #14]
 800119a:	461a      	mov	r2, r3
 800119c:	211e      	movs	r1, #30
 800119e:	6878      	ldr	r0, [r7, #4]
 80011a0:	f000 f842 	bl	8001228 <LoRa_write>
}
 80011a4:	bf00      	nop
 80011a6:	3710      	adds	r7, #16
 80011a8:	46bd      	mov	sp, r7
 80011aa:	bd80      	pop	{r7, pc}

080011ac <LoRa_setTOMsb_setCRCon>:
		description : set timeout msb to 0xFF + set CRC enable.
		arguments   :
			LoRa* LoRa        --> LoRa object handler
		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setTOMsb_setCRCon(LoRa* _LoRa){
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b084      	sub	sp, #16
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
	uint8_t read, data;
	if(_LoRa->modulationMode == LORA_MODULATION) {
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80011ba:	2b02      	cmp	r3, #2
 80011bc:	d110      	bne.n	80011e0 <LoRa_setTOMsb_setCRCon+0x34>
		read = LoRa_read(_LoRa, RegModemConfig2);
 80011be:	211e      	movs	r1, #30
 80011c0:	6878      	ldr	r0, [r7, #4]
 80011c2:	f000 f817 	bl	80011f4 <LoRa_read>
 80011c6:	4603      	mov	r3, r0
 80011c8:	73fb      	strb	r3, [r7, #15]
		data = read | 0x07;
 80011ca:	7bfb      	ldrb	r3, [r7, #15]
 80011cc:	f043 0307 	orr.w	r3, r3, #7
 80011d0:	73bb      	strb	r3, [r7, #14]
		LoRa_write(_LoRa, RegModemConfig2, data);
 80011d2:	7bbb      	ldrb	r3, [r7, #14]
 80011d4:	461a      	mov	r2, r3
 80011d6:	211e      	movs	r1, #30
 80011d8:	6878      	ldr	r0, [r7, #4]
 80011da:	f000 f825 	bl	8001228 <LoRa_write>
 80011de:	e002      	b.n	80011e6 <LoRa_setTOMsb_setCRCon+0x3a>
	}
	else {
		LoRa_setCRCon(_LoRa);
 80011e0:	6878      	ldr	r0, [r7, #4]
 80011e2:	f7ff ffb5 	bl	8001150 <LoRa_setCRCon>
	}

	HAL_Delay(10);
 80011e6:	200a      	movs	r0, #10
 80011e8:	f001 f9b0 	bl	800254c <HAL_Delay>
}
 80011ec:	bf00      	nop
 80011ee:	3710      	adds	r7, #16
 80011f0:	46bd      	mov	sp, r7
 80011f2:	bd80      	pop	{r7, pc}

080011f4 <LoRa_read>:
		arguments   :
			LoRa*   LoRa        --> LoRa object handler
			uint8_t address     -->	address of the register e.g 0x1D
		returns     : register value
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_read(LoRa* _LoRa, uint8_t address){
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b086      	sub	sp, #24
 80011f8:	af02      	add	r7, sp, #8
 80011fa:	6078      	str	r0, [r7, #4]
 80011fc:	460b      	mov	r3, r1
 80011fe:	70fb      	strb	r3, [r7, #3]
	uint8_t read_data;
	uint8_t data_addr;

	data_addr = address & 0x7F;
 8001200:	78fb      	ldrb	r3, [r7, #3]
 8001202:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001206:	b2db      	uxtb	r3, r3
 8001208:	73bb      	strb	r3, [r7, #14]
	LoRa_readReg(_LoRa, &data_addr, 1, &read_data, 1);
 800120a:	f107 030f 	add.w	r3, r7, #15
 800120e:	f107 010e 	add.w	r1, r7, #14
 8001212:	2201      	movs	r2, #1
 8001214:	9200      	str	r2, [sp, #0]
 8001216:	2201      	movs	r2, #1
 8001218:	6878      	ldr	r0, [r7, #4]
 800121a:	f7ff fe6d 	bl	8000ef8 <LoRa_readReg>
	//HAL_Delay(5);

	return read_data;
 800121e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001220:	4618      	mov	r0, r3
 8001222:	3710      	adds	r7, #16
 8001224:	46bd      	mov	sp, r7
 8001226:	bd80      	pop	{r7, pc}

08001228 <LoRa_write>:
			LoRa*   LoRa        --> LoRa object handler
			uint8_t address     -->	address of the register e.g 0x1D
			uint8_t value       --> value that you want to write
		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_write(LoRa* _LoRa, uint8_t address, uint8_t value){
 8001228:	b580      	push	{r7, lr}
 800122a:	b086      	sub	sp, #24
 800122c:	af02      	add	r7, sp, #8
 800122e:	6078      	str	r0, [r7, #4]
 8001230:	460b      	mov	r3, r1
 8001232:	70fb      	strb	r3, [r7, #3]
 8001234:	4613      	mov	r3, r2
 8001236:	70bb      	strb	r3, [r7, #2]
	uint8_t data;
	uint8_t addr;

	addr = address | 0x80;
 8001238:	78fb      	ldrb	r3, [r7, #3]
 800123a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800123e:	b2db      	uxtb	r3, r3
 8001240:	73bb      	strb	r3, [r7, #14]
	data = value;
 8001242:	78bb      	ldrb	r3, [r7, #2]
 8001244:	73fb      	strb	r3, [r7, #15]
	LoRa_writeReg(_LoRa, &addr, 1, &data, 1);
 8001246:	f107 030f 	add.w	r3, r7, #15
 800124a:	f107 010e 	add.w	r1, r7, #14
 800124e:	2201      	movs	r2, #1
 8001250:	9200      	str	r2, [sp, #0]
 8001252:	2201      	movs	r2, #1
 8001254:	6878      	ldr	r0, [r7, #4]
 8001256:	f7ff fe8d 	bl	8000f74 <LoRa_writeReg>
	//HAL_Delay(5);
}
 800125a:	bf00      	nop
 800125c:	3710      	adds	r7, #16
 800125e:	46bd      	mov	sp, r7
 8001260:	bd80      	pop	{r7, pc}

08001262 <LoRa_BurstWrite>:
			LoRa*   LoRa        --> LoRa object handler
			uint8_t address     -->	address of the register e.g 0x1D
			uint8_t *value      --> address of values that you want to write
		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_BurstWrite(LoRa* _LoRa, uint8_t address, uint8_t *value, uint8_t length){
 8001262:	b580      	push	{r7, lr}
 8001264:	b086      	sub	sp, #24
 8001266:	af00      	add	r7, sp, #0
 8001268:	60f8      	str	r0, [r7, #12]
 800126a:	607a      	str	r2, [r7, #4]
 800126c:	461a      	mov	r2, r3
 800126e:	460b      	mov	r3, r1
 8001270:	72fb      	strb	r3, [r7, #11]
 8001272:	4613      	mov	r3, r2
 8001274:	72bb      	strb	r3, [r7, #10]
	uint8_t addr;
	addr = address | 0x80;
 8001276:	7afb      	ldrb	r3, [r7, #11]
 8001278:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800127c:	b2db      	uxtb	r3, r3
 800127e:	75fb      	strb	r3, [r7, #23]

	//NSS = 1
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_RESET);
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	6818      	ldr	r0, [r3, #0]
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	889b      	ldrh	r3, [r3, #4]
 8001288:	2200      	movs	r2, #0
 800128a:	4619      	mov	r1, r3
 800128c:	f002 f832 	bl	80032f4 <HAL_GPIO_WritePin>
	//say module thai I want to write in RegFiFo
	HAL_SPI_Transmit(_LoRa->hSPIx, &addr, 1, TRANSMIT_TIMEOUT);
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	6998      	ldr	r0, [r3, #24]
 8001294:	f107 0117 	add.w	r1, r7, #23
 8001298:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800129c:	2201      	movs	r2, #1
 800129e:	f003 ffba 	bl	8005216 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 80012a2:	bf00      	nop
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	699b      	ldr	r3, [r3, #24]
 80012a8:	4618      	mov	r0, r3
 80012aa:	f004 fba3 	bl	80059f4 <HAL_SPI_GetState>
 80012ae:	4603      	mov	r3, r0
 80012b0:	2b01      	cmp	r3, #1
 80012b2:	d1f7      	bne.n	80012a4 <LoRa_BurstWrite+0x42>
		;
	//Write data in FiFo
	HAL_SPI_Transmit(_LoRa->hSPIx, value, length, TRANSMIT_TIMEOUT);
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	6998      	ldr	r0, [r3, #24]
 80012b8:	7abb      	ldrb	r3, [r7, #10]
 80012ba:	b29a      	uxth	r2, r3
 80012bc:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80012c0:	6879      	ldr	r1, [r7, #4]
 80012c2:	f003 ffa8 	bl	8005216 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 80012c6:	bf00      	nop
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	699b      	ldr	r3, [r3, #24]
 80012cc:	4618      	mov	r0, r3
 80012ce:	f004 fb91 	bl	80059f4 <HAL_SPI_GetState>
 80012d2:	4603      	mov	r3, r0
 80012d4:	2b01      	cmp	r3, #1
 80012d6:	d1f7      	bne.n	80012c8 <LoRa_BurstWrite+0x66>
		;
	//NSS = 0
	//HAL_Delay(5);
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_SET);
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	6818      	ldr	r0, [r3, #0]
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	889b      	ldrh	r3, [r3, #4]
 80012e0:	2201      	movs	r2, #1
 80012e2:	4619      	mov	r1, r3
 80012e4:	f002 f806 	bl	80032f4 <HAL_GPIO_WritePin>
}
 80012e8:	bf00      	nop
 80012ea:	3718      	adds	r7, #24
 80012ec:	46bd      	mov	sp, r7
 80012ee:	bd80      	pop	{r7, pc}

080012f0 <LoRa_isvalid>:
		description : check the LoRa instruct values
		arguments   :
			LoRa* LoRa --> LoRa object handler
		returns     : returns 1 if all of the values were given, otherwise returns 0
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_isvalid(LoRa* _LoRa){
 80012f0:	b480      	push	{r7}
 80012f2:	b083      	sub	sp, #12
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]

	return 1;
 80012f8:	2301      	movs	r3, #1
}
 80012fa:	4618      	mov	r0, r3
 80012fc:	370c      	adds	r7, #12
 80012fe:	46bd      	mov	sp, r7
 8001300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001304:	4770      	bx	lr
	...

08001308 <LoRa_setBitrate>:
		arguments   :
			LoRa*    LoRa     --> LoRa object handler
			uint16_t  br	  --> Bit rate value in kbps
		returns     : 1 in case of success, 0 in case of timeout
\* ----------------------------------------------------------------------------- */
void LoRa_setBitrate(LoRa* _LoRa, uint16_t br) {
 8001308:	b580      	push	{r7, lr}
 800130a:	b084      	sub	sp, #16
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
 8001310:	460b      	mov	r3, r1
 8001312:	807b      	strh	r3, [r7, #2]
	if(_LoRa->modulationMode == LORA_MODULATION) return;
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800131a:	2b02      	cmp	r3, #2
 800131c:	d023      	beq.n	8001366 <LoRa_setBitrate+0x5e>
	uint16_t bitRate = (RFM95_CRYSTAL_FREQ * 1000.0) / br;
 800131e:	887b      	ldrh	r3, [r7, #2]
 8001320:	4618      	mov	r0, r3
 8001322:	f7ff f8a3 	bl	800046c <__aeabi_i2d>
 8001326:	4602      	mov	r2, r0
 8001328:	460b      	mov	r3, r1
 800132a:	f04f 0000 	mov.w	r0, #0
 800132e:	4910      	ldr	r1, [pc, #64]	; (8001370 <LoRa_setBitrate+0x68>)
 8001330:	f7ff fa30 	bl	8000794 <__aeabi_ddiv>
 8001334:	4602      	mov	r2, r0
 8001336:	460b      	mov	r3, r1
 8001338:	4610      	mov	r0, r2
 800133a:	4619      	mov	r1, r3
 800133c:	f7ff fb12 	bl	8000964 <__aeabi_d2uiz>
 8001340:	4603      	mov	r3, r0
 8001342:	81fb      	strh	r3, [r7, #14]
	LoRa_write(_LoRa, RegBitrateMsb, (bitRate & 0xFF00) >> 8);
 8001344:	89fb      	ldrh	r3, [r7, #14]
 8001346:	0a1b      	lsrs	r3, r3, #8
 8001348:	b29b      	uxth	r3, r3
 800134a:	b2db      	uxtb	r3, r3
 800134c:	461a      	mov	r2, r3
 800134e:	2102      	movs	r1, #2
 8001350:	6878      	ldr	r0, [r7, #4]
 8001352:	f7ff ff69 	bl	8001228 <LoRa_write>
	LoRa_write(_LoRa, RegBitrateLsb, bitRate & 0x00FF);
 8001356:	89fb      	ldrh	r3, [r7, #14]
 8001358:	b2db      	uxtb	r3, r3
 800135a:	461a      	mov	r2, r3
 800135c:	2103      	movs	r1, #3
 800135e:	6878      	ldr	r0, [r7, #4]
 8001360:	f7ff ff62 	bl	8001228 <LoRa_write>
 8001364:	e000      	b.n	8001368 <LoRa_setBitrate+0x60>
	if(_LoRa->modulationMode == LORA_MODULATION) return;
 8001366:	bf00      	nop
}
 8001368:	3710      	adds	r7, #16
 800136a:	46bd      	mov	sp, r7
 800136c:	bd80      	pop	{r7, pc}
 800136e:	bf00      	nop
 8001370:	40df4000 	.word	0x40df4000

08001374 <LoRa_transmit>:
			uint8_t  data			--> A pointer to the data you wanna send
			uint8_t	 length   --> Size of your data in Bytes
			uint16_t timeOut	--> Timeout in milliseconds
		returns     : 1 in case of success, 0 in case of timeout
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_transmit(LoRa* _LoRa, uint8_t* data, uint8_t length, uint16_t timeout){
 8001374:	b580      	push	{r7, lr}
 8001376:	b086      	sub	sp, #24
 8001378:	af00      	add	r7, sp, #0
 800137a:	60f8      	str	r0, [r7, #12]
 800137c:	60b9      	str	r1, [r7, #8]
 800137e:	4611      	mov	r1, r2
 8001380:	461a      	mov	r2, r3
 8001382:	460b      	mov	r3, r1
 8001384:	71fb      	strb	r3, [r7, #7]
 8001386:	4613      	mov	r3, r2
 8001388:	80bb      	strh	r3, [r7, #4]
	uint8_t read;

	int mode = _LoRa->current_mode;
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	69db      	ldr	r3, [r3, #28]
 800138e:	617b      	str	r3, [r7, #20]
	LoRa_gotoMode(_LoRa, STNBY_MODE);
 8001390:	2101      	movs	r1, #1
 8001392:	68f8      	ldr	r0, [r7, #12]
 8001394:	f7ff fccf 	bl	8000d36 <LoRa_gotoMode>
	read = LoRa_read(_LoRa, RegFiFoTxBaseAddr);
 8001398:	210e      	movs	r1, #14
 800139a:	68f8      	ldr	r0, [r7, #12]
 800139c:	f7ff ff2a 	bl	80011f4 <LoRa_read>
 80013a0:	4603      	mov	r3, r0
 80013a2:	74fb      	strb	r3, [r7, #19]
	LoRa_write(_LoRa, RegFiFoAddPtr, read);
 80013a4:	7cfb      	ldrb	r3, [r7, #19]
 80013a6:	461a      	mov	r2, r3
 80013a8:	210d      	movs	r1, #13
 80013aa:	68f8      	ldr	r0, [r7, #12]
 80013ac:	f7ff ff3c 	bl	8001228 <LoRa_write>
	LoRa_write(_LoRa, RegPayloadLength, length);
 80013b0:	79fb      	ldrb	r3, [r7, #7]
 80013b2:	461a      	mov	r2, r3
 80013b4:	2122      	movs	r1, #34	; 0x22
 80013b6:	68f8      	ldr	r0, [r7, #12]
 80013b8:	f7ff ff36 	bl	8001228 <LoRa_write>
	LoRa_BurstWrite(_LoRa, RegFiFo, data, length);
 80013bc:	79fb      	ldrb	r3, [r7, #7]
 80013be:	68ba      	ldr	r2, [r7, #8]
 80013c0:	2100      	movs	r1, #0
 80013c2:	68f8      	ldr	r0, [r7, #12]
 80013c4:	f7ff ff4d 	bl	8001262 <LoRa_BurstWrite>
	LoRa_gotoMode(_LoRa, TRANSMIT_MODE);
 80013c8:	2103      	movs	r1, #3
 80013ca:	68f8      	ldr	r0, [r7, #12]
 80013cc:	f7ff fcb3 	bl	8000d36 <LoRa_gotoMode>
	while(1){
		read = LoRa_read(_LoRa, RegIrqFlags);
 80013d0:	2112      	movs	r1, #18
 80013d2:	68f8      	ldr	r0, [r7, #12]
 80013d4:	f7ff ff0e 	bl	80011f4 <LoRa_read>
 80013d8:	4603      	mov	r3, r0
 80013da:	74fb      	strb	r3, [r7, #19]
		if((read & 0x08)!=0){
 80013dc:	7cfb      	ldrb	r3, [r7, #19]
 80013de:	f003 0308 	and.w	r3, r3, #8
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d00a      	beq.n	80013fc <LoRa_transmit+0x88>
			LoRa_write(_LoRa, RegIrqFlags, 0xFF);
 80013e6:	22ff      	movs	r2, #255	; 0xff
 80013e8:	2112      	movs	r1, #18
 80013ea:	68f8      	ldr	r0, [r7, #12]
 80013ec:	f7ff ff1c 	bl	8001228 <LoRa_write>
			LoRa_gotoMode(_LoRa, mode);
 80013f0:	6979      	ldr	r1, [r7, #20]
 80013f2:	68f8      	ldr	r0, [r7, #12]
 80013f4:	f7ff fc9f 	bl	8000d36 <LoRa_gotoMode>
			return 1;
 80013f8:	2301      	movs	r3, #1
 80013fa:	e00f      	b.n	800141c <LoRa_transmit+0xa8>
		}
		else{
			if(--timeout==0){
 80013fc:	88bb      	ldrh	r3, [r7, #4]
 80013fe:	3b01      	subs	r3, #1
 8001400:	80bb      	strh	r3, [r7, #4]
 8001402:	88bb      	ldrh	r3, [r7, #4]
 8001404:	2b00      	cmp	r3, #0
 8001406:	d105      	bne.n	8001414 <LoRa_transmit+0xa0>
				LoRa_gotoMode(_LoRa, mode);
 8001408:	6979      	ldr	r1, [r7, #20]
 800140a:	68f8      	ldr	r0, [r7, #12]
 800140c:	f7ff fc93 	bl	8000d36 <LoRa_gotoMode>
				return 0;
 8001410:	2300      	movs	r3, #0
 8001412:	e003      	b.n	800141c <LoRa_transmit+0xa8>
			}
		}
		HAL_Delay(1);
 8001414:	2001      	movs	r0, #1
 8001416:	f001 f899 	bl	800254c <HAL_Delay>
		read = LoRa_read(_LoRa, RegIrqFlags);
 800141a:	e7d9      	b.n	80013d0 <LoRa_transmit+0x5c>
	}

}
 800141c:	4618      	mov	r0, r3
 800141e:	3718      	adds	r7, #24
 8001420:	46bd      	mov	sp, r7
 8001422:	bd80      	pop	{r7, pc}

08001424 <LoRa_startReceiving>:
		description : Start receiving continuously
		arguments   :
			LoRa*    LoRa     --> LoRa object handler
		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_startReceiving(LoRa* _LoRa){
 8001424:	b580      	push	{r7, lr}
 8001426:	b082      	sub	sp, #8
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
	LoRa_gotoMode(_LoRa, RXCONTIN_MODE);
 800142c:	2105      	movs	r1, #5
 800142e:	6878      	ldr	r0, [r7, #4]
 8001430:	f7ff fc81 	bl	8000d36 <LoRa_gotoMode>
}
 8001434:	bf00      	nop
 8001436:	3708      	adds	r7, #8
 8001438:	46bd      	mov	sp, r7
 800143a:	bd80      	pop	{r7, pc}

0800143c <LoRa_setFSKMode>:
		arguments   :
			LoRa*    LoRa     --> LoRa object handler
			uint8_t  mode     --> Data mode type
		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setFSKMode(LoRa* _LoRa, uint8_t mode){
 800143c:	b580      	push	{r7, lr}
 800143e:	b084      	sub	sp, #16
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
 8001444:	460b      	mov	r3, r1
 8001446:	70fb      	strb	r3, [r7, #3]
	uint8_t read, data;
	if(_LoRa->modulationMode == LORA_MODULATION) return;
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800144e:	2b02      	cmp	r3, #2
 8001450:	d01b      	beq.n	800148a <LoRa_setFSKMode+0x4e>
	read = LoRa_read(_LoRa, RegPacketConfig2);
 8001452:	2131      	movs	r1, #49	; 0x31
 8001454:	6878      	ldr	r0, [r7, #4]
 8001456:	f7ff fecd 	bl	80011f4 <LoRa_read>
 800145a:	4603      	mov	r3, r0
 800145c:	73bb      	strb	r3, [r7, #14]
	if(mode == CONTINUOUS_MODE) data = (read & 0xBF);
 800145e:	78fb      	ldrb	r3, [r7, #3]
 8001460:	2b00      	cmp	r3, #0
 8001462:	d104      	bne.n	800146e <LoRa_setFSKMode+0x32>
 8001464:	7bbb      	ldrb	r3, [r7, #14]
 8001466:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800146a:	73fb      	strb	r3, [r7, #15]
 800146c:	e006      	b.n	800147c <LoRa_setFSKMode+0x40>
	else if(mode == PACKET_MODE) data = (read & 0xBF) | 0x40;
 800146e:	78fb      	ldrb	r3, [r7, #3]
 8001470:	2b01      	cmp	r3, #1
 8001472:	d103      	bne.n	800147c <LoRa_setFSKMode+0x40>
 8001474:	7bbb      	ldrb	r3, [r7, #14]
 8001476:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800147a:	73fb      	strb	r3, [r7, #15]
	LoRa_write(_LoRa, RegPacketConfig2, data);
 800147c:	7bfb      	ldrb	r3, [r7, #15]
 800147e:	461a      	mov	r2, r3
 8001480:	2131      	movs	r1, #49	; 0x31
 8001482:	6878      	ldr	r0, [r7, #4]
 8001484:	f7ff fed0 	bl	8001228 <LoRa_write>
 8001488:	e000      	b.n	800148c <LoRa_setFSKMode+0x50>
	if(_LoRa->modulationMode == LORA_MODULATION) return;
 800148a:	bf00      	nop
}
 800148c:	3710      	adds	r7, #16
 800148e:	46bd      	mov	sp, r7
 8001490:	bd80      	pop	{r7, pc}

08001492 <LoRa_receive>:
			LoRa*    LoRa     --> LoRa object handler
			uint8_t  data			--> A pointer to the array that you want to write bytes in it
			uint8_t	 length   --> Determines how many bytes you want to read
		returns     : The number of bytes received
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_receive(LoRa* _LoRa, uint8_t* data, uint8_t length){
 8001492:	b590      	push	{r4, r7, lr}
 8001494:	b089      	sub	sp, #36	; 0x24
 8001496:	af00      	add	r7, sp, #0
 8001498:	60f8      	str	r0, [r7, #12]
 800149a:	60b9      	str	r1, [r7, #8]
 800149c:	4613      	mov	r3, r2
 800149e:	71fb      	strb	r3, [r7, #7]
	uint8_t read;
	uint8_t number_of_bytes;
	uint8_t min = 0;
 80014a0:	2300      	movs	r3, #0
 80014a2:	77fb      	strb	r3, [r7, #31]

	for(int i=0; i<length; i++)
 80014a4:	2300      	movs	r3, #0
 80014a6:	61bb      	str	r3, [r7, #24]
 80014a8:	e007      	b.n	80014ba <LoRa_receive+0x28>
		data[i]=0;
 80014aa:	69bb      	ldr	r3, [r7, #24]
 80014ac:	68ba      	ldr	r2, [r7, #8]
 80014ae:	4413      	add	r3, r2
 80014b0:	2200      	movs	r2, #0
 80014b2:	701a      	strb	r2, [r3, #0]
	for(int i=0; i<length; i++)
 80014b4:	69bb      	ldr	r3, [r7, #24]
 80014b6:	3301      	adds	r3, #1
 80014b8:	61bb      	str	r3, [r7, #24]
 80014ba:	79fb      	ldrb	r3, [r7, #7]
 80014bc:	69ba      	ldr	r2, [r7, #24]
 80014be:	429a      	cmp	r2, r3
 80014c0:	dbf3      	blt.n	80014aa <LoRa_receive+0x18>

	LoRa_gotoMode(_LoRa, STNBY_MODE);
 80014c2:	2101      	movs	r1, #1
 80014c4:	68f8      	ldr	r0, [r7, #12]
 80014c6:	f7ff fc36 	bl	8000d36 <LoRa_gotoMode>
	read = LoRa_read(_LoRa, RegIrqFlags);
 80014ca:	2112      	movs	r1, #18
 80014cc:	68f8      	ldr	r0, [r7, #12]
 80014ce:	f7ff fe91 	bl	80011f4 <LoRa_read>
 80014d2:	4603      	mov	r3, r0
 80014d4:	74fb      	strb	r3, [r7, #19]
	if((read & 0x40) != 0){
 80014d6:	7cfb      	ldrb	r3, [r7, #19]
 80014d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d02f      	beq.n	8001540 <LoRa_receive+0xae>
		LoRa_write(_LoRa, RegIrqFlags, 0xFF);
 80014e0:	22ff      	movs	r2, #255	; 0xff
 80014e2:	2112      	movs	r1, #18
 80014e4:	68f8      	ldr	r0, [r7, #12]
 80014e6:	f7ff fe9f 	bl	8001228 <LoRa_write>
		number_of_bytes = LoRa_read(_LoRa, RegRxNbBytes);
 80014ea:	2113      	movs	r1, #19
 80014ec:	68f8      	ldr	r0, [r7, #12]
 80014ee:	f7ff fe81 	bl	80011f4 <LoRa_read>
 80014f2:	4603      	mov	r3, r0
 80014f4:	74bb      	strb	r3, [r7, #18]
		read = LoRa_read(_LoRa, RegFiFoRxCurrentAddr);
 80014f6:	2110      	movs	r1, #16
 80014f8:	68f8      	ldr	r0, [r7, #12]
 80014fa:	f7ff fe7b 	bl	80011f4 <LoRa_read>
 80014fe:	4603      	mov	r3, r0
 8001500:	74fb      	strb	r3, [r7, #19]
		LoRa_write(_LoRa, RegFiFoAddPtr, read);
 8001502:	7cfb      	ldrb	r3, [r7, #19]
 8001504:	461a      	mov	r2, r3
 8001506:	210d      	movs	r1, #13
 8001508:	68f8      	ldr	r0, [r7, #12]
 800150a:	f7ff fe8d 	bl	8001228 <LoRa_write>
		min = length >= number_of_bytes ? number_of_bytes : length;
 800150e:	7cba      	ldrb	r2, [r7, #18]
 8001510:	79fb      	ldrb	r3, [r7, #7]
 8001512:	4293      	cmp	r3, r2
 8001514:	bf28      	it	cs
 8001516:	4613      	movcs	r3, r2
 8001518:	77fb      	strb	r3, [r7, #31]
		for(int i=0; i<min; i++)
 800151a:	2300      	movs	r3, #0
 800151c:	617b      	str	r3, [r7, #20]
 800151e:	e00b      	b.n	8001538 <LoRa_receive+0xa6>
			data[i] = LoRa_read(_LoRa, RegFiFo);
 8001520:	697b      	ldr	r3, [r7, #20]
 8001522:	68ba      	ldr	r2, [r7, #8]
 8001524:	18d4      	adds	r4, r2, r3
 8001526:	2100      	movs	r1, #0
 8001528:	68f8      	ldr	r0, [r7, #12]
 800152a:	f7ff fe63 	bl	80011f4 <LoRa_read>
 800152e:	4603      	mov	r3, r0
 8001530:	7023      	strb	r3, [r4, #0]
		for(int i=0; i<min; i++)
 8001532:	697b      	ldr	r3, [r7, #20]
 8001534:	3301      	adds	r3, #1
 8001536:	617b      	str	r3, [r7, #20]
 8001538:	7ffb      	ldrb	r3, [r7, #31]
 800153a:	697a      	ldr	r2, [r7, #20]
 800153c:	429a      	cmp	r2, r3
 800153e:	dbef      	blt.n	8001520 <LoRa_receive+0x8e>
	}
	LoRa_gotoMode(_LoRa, RXCONTIN_MODE);
 8001540:	2105      	movs	r1, #5
 8001542:	68f8      	ldr	r0, [r7, #12]
 8001544:	f7ff fbf7 	bl	8000d36 <LoRa_gotoMode>
    return min;
 8001548:	7ffb      	ldrb	r3, [r7, #31]
}
 800154a:	4618      	mov	r0, r3
 800154c:	3724      	adds	r7, #36	; 0x24
 800154e:	46bd      	mov	sp, r7
 8001550:	bd90      	pop	{r4, r7, pc}

08001552 <LoRa_init>:
		description : initialize and set the right setting according to LoRa sruct vars
		arguments   :
			LoRa* LoRa        --> LoRa object handler
		returns     : Nothing
\* ----------------------------------------------------------------------------- */
uint16_t LoRa_init(LoRa* _LoRa){
 8001552:	b580      	push	{r7, lr}
 8001554:	b084      	sub	sp, #16
 8001556:	af00      	add	r7, sp, #0
 8001558:	6078      	str	r0, [r7, #4]
	uint8_t    data;
	uint8_t    read;

	// Check modulation mode
	read = LoRa_read(_LoRa, RegOpMode);
 800155a:	2101      	movs	r1, #1
 800155c:	6878      	ldr	r0, [r7, #4]
 800155e:	f7ff fe49 	bl	80011f4 <LoRa_read>
 8001562:	4603      	mov	r3, r0
 8001564:	73fb      	strb	r3, [r7, #15]
	if((read & 0x80) == 0x80) _LoRa->modulationMode = LORA_MODULATION;
 8001566:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800156a:	2b00      	cmp	r3, #0
 800156c:	da04      	bge.n	8001578 <LoRa_init+0x26>
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	2202      	movs	r2, #2
 8001572:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 8001576:	e012      	b.n	800159e <LoRa_init+0x4c>
	else {
		if((read & 0x60) == 0x00) _LoRa->modulationMode = FSK_MODULATION;
 8001578:	7bfb      	ldrb	r3, [r7, #15]
 800157a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800157e:	2b00      	cmp	r3, #0
 8001580:	d104      	bne.n	800158c <LoRa_init+0x3a>
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	2200      	movs	r2, #0
 8001586:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 800158a:	e008      	b.n	800159e <LoRa_init+0x4c>
		else if((read & 0x60) == 0x20) _LoRa->modulationMode = OOK_MODULATION;
 800158c:	7bfb      	ldrb	r3, [r7, #15]
 800158e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8001592:	2b20      	cmp	r3, #32
 8001594:	d103      	bne.n	800159e <LoRa_init+0x4c>
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	2201      	movs	r2, #1
 800159a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
	}

	if(LoRa_isvalid(_LoRa)){
 800159e:	6878      	ldr	r0, [r7, #4]
 80015a0:	f7ff fea6 	bl	80012f0 <LoRa_isvalid>
 80015a4:	4603      	mov	r3, r0
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	f000 80be 	beq.w	8001728 <LoRa_init+0x1d6>
		// goto sleep mode:
			LoRa_gotoMode(_LoRa, SLEEP_MODE);
 80015ac:	2100      	movs	r1, #0
 80015ae:	6878      	ldr	r0, [r7, #4]
 80015b0:	f7ff fbc1 	bl	8000d36 <LoRa_gotoMode>
			HAL_Delay(10);
 80015b4:	200a      	movs	r0, #10
 80015b6:	f000 ffc9 	bl	800254c <HAL_Delay>
			if( _LoRa->modulationMode == LORA_MODULATION) {
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80015c0:	2b02      	cmp	r3, #2
 80015c2:	d115      	bne.n	80015f0 <LoRa_init+0x9e>
				// turn on lora mode:
				read = LoRa_read(_LoRa, RegOpMode);
 80015c4:	2101      	movs	r1, #1
 80015c6:	6878      	ldr	r0, [r7, #4]
 80015c8:	f7ff fe14 	bl	80011f4 <LoRa_read>
 80015cc:	4603      	mov	r3, r0
 80015ce:	73fb      	strb	r3, [r7, #15]
				HAL_Delay(10);
 80015d0:	200a      	movs	r0, #10
 80015d2:	f000 ffbb 	bl	800254c <HAL_Delay>
				data = read | 0x80;
 80015d6:	7bfb      	ldrb	r3, [r7, #15]
 80015d8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80015dc:	73bb      	strb	r3, [r7, #14]
				LoRa_write(_LoRa, RegOpMode, data);
 80015de:	7bbb      	ldrb	r3, [r7, #14]
 80015e0:	461a      	mov	r2, r3
 80015e2:	2101      	movs	r1, #1
 80015e4:	6878      	ldr	r0, [r7, #4]
 80015e6:	f7ff fe1f 	bl	8001228 <LoRa_write>
				HAL_Delay(100);
 80015ea:	2064      	movs	r0, #100	; 0x64
 80015ec:	f000 ffae 	bl	800254c <HAL_Delay>
			}

		// set frequency:
			LoRa_setFrequency(_LoRa, _LoRa->frequency);
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	6a1b      	ldr	r3, [r3, #32]
 80015f4:	4619      	mov	r1, r3
 80015f6:	6878      	ldr	r0, [r7, #4]
 80015f8:	f7ff fcfa 	bl	8000ff0 <LoRa_setFrequency>

		// set output power gain:
			LoRa_setPower(_LoRa, _LoRa->power);
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8001602:	4619      	mov	r1, r3
 8001604:	6878      	ldr	r0, [r7, #4]
 8001606:	f7ff fd52 	bl	80010ae <LoRa_setPower>

		// set over current protection:
			LoRa_setOCP(_LoRa, _LoRa->overCurrentProtection);
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8001610:	4619      	mov	r1, r3
 8001612:	6878      	ldr	r0, [r7, #4]
 8001614:	f7ff fd5e 	bl	80010d4 <LoRa_setOCP>

		// set LNA gain:
			LoRa_write(_LoRa, RegLna, 0x23);
 8001618:	2223      	movs	r2, #35	; 0x23
 800161a:	210c      	movs	r1, #12
 800161c:	6878      	ldr	r0, [r7, #4]
 800161e:	f7ff fe03 	bl	8001228 <LoRa_write>

		// set spreading factor, CRC on, and Timeout Msb:
			LoRa_setTOMsb_setCRCon(_LoRa);
 8001622:	6878      	ldr	r0, [r7, #4]
 8001624:	f7ff fdc2 	bl	80011ac <LoRa_setTOMsb_setCRCon>
			if(_LoRa->modulationMode == LORA_MODULATION) {
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800162e:	2b02      	cmp	r3, #2
 8001630:	d11f      	bne.n	8001672 <LoRa_init+0x120>
				LoRa_setSpreadingFactor(_LoRa, _LoRa->spredingFactor);
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001638:	4619      	mov	r1, r3
 800163a:	6878      	ldr	r0, [r7, #4]
 800163c:	f7ff fd08 	bl	8001050 <LoRa_setSpreadingFactor>
				// set Timeout Lsb:
				LoRa_write(_LoRa, RegSymbTimeoutL, 0xFF);
 8001640:	22ff      	movs	r2, #255	; 0xff
 8001642:	211f      	movs	r1, #31
 8001644:	6878      	ldr	r0, [r7, #4]
 8001646:	f7ff fdef 	bl	8001228 <LoRa_write>
				// set bandwidth, coding rate and expilicit mode:
				// 8 bit RegModemConfig --> | X | X | X | X | X | X | X | X |
				//       bits represent --> |   bandwidth   |     CR    |I/E|
				data = 0;
 800164a:	2300      	movs	r3, #0
 800164c:	73bb      	strb	r3, [r7, #14]
				data = (_LoRa->bandWidth << 4) + (_LoRa->crcRate << 1);
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001654:	011b      	lsls	r3, r3, #4
 8001656:	b2da      	uxtb	r2, r3
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800165e:	005b      	lsls	r3, r3, #1
 8001660:	b2db      	uxtb	r3, r3
 8001662:	4413      	add	r3, r2
 8001664:	73bb      	strb	r3, [r7, #14]
				LoRa_write(_LoRa, RegModemConfig1, data);
 8001666:	7bbb      	ldrb	r3, [r7, #14]
 8001668:	461a      	mov	r2, r3
 800166a:	211d      	movs	r1, #29
 800166c:	6878      	ldr	r0, [r7, #4]
 800166e:	f7ff fddb 	bl	8001228 <LoRa_write>
			}

		// set preamble:
			if(_LoRa->modulationMode == LORA_MODULATION) {
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8001678:	2b02      	cmp	r3, #2
 800167a:	d112      	bne.n	80016a2 <LoRa_init+0x150>
				LoRa_write(_LoRa, RegPreambleMsb, _LoRa->preamble >> 8);
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001680:	0a1b      	lsrs	r3, r3, #8
 8001682:	b29b      	uxth	r3, r3
 8001684:	b2db      	uxtb	r3, r3
 8001686:	461a      	mov	r2, r3
 8001688:	2120      	movs	r1, #32
 800168a:	6878      	ldr	r0, [r7, #4]
 800168c:	f7ff fdcc 	bl	8001228 <LoRa_write>
				LoRa_write(_LoRa, RegPreambleLsb, _LoRa->preamble >> 0);
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001694:	b2db      	uxtb	r3, r3
 8001696:	461a      	mov	r2, r3
 8001698:	2121      	movs	r1, #33	; 0x21
 800169a:	6878      	ldr	r0, [r7, #4]
 800169c:	f7ff fdc4 	bl	8001228 <LoRa_write>
 80016a0:	e004      	b.n	80016ac <LoRa_init+0x15a>
			}
			else {
				LoRa_write(_LoRa, RegPreambleDetect, 0xAA);		// Preamble detect ON, preable detect size 2 bytes, detector tolerance 0x0A (default)
 80016a2:	22aa      	movs	r2, #170	; 0xaa
 80016a4:	211f      	movs	r1, #31
 80016a6:	6878      	ldr	r0, [r7, #4]
 80016a8:	f7ff fdbe 	bl	8001228 <LoRa_write>
			}

		// DIO mapping:   --> DIO: RxDone
			if(_LoRa->modulationMode == LORA_MODULATION) {
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80016b2:	2b02      	cmp	r3, #2
 80016b4:	d110      	bne.n	80016d8 <LoRa_init+0x186>
				read = LoRa_read(_LoRa, RegDioMapping1);
 80016b6:	2140      	movs	r1, #64	; 0x40
 80016b8:	6878      	ldr	r0, [r7, #4]
 80016ba:	f7ff fd9b 	bl	80011f4 <LoRa_read>
 80016be:	4603      	mov	r3, r0
 80016c0:	73fb      	strb	r3, [r7, #15]
				data = read | 0x3F;
 80016c2:	7bfb      	ldrb	r3, [r7, #15]
 80016c4:	f043 033f 	orr.w	r3, r3, #63	; 0x3f
 80016c8:	73bb      	strb	r3, [r7, #14]
				LoRa_write(_LoRa, RegDioMapping1, data);
 80016ca:	7bbb      	ldrb	r3, [r7, #14]
 80016cc:	461a      	mov	r2, r3
 80016ce:	2140      	movs	r1, #64	; 0x40
 80016d0:	6878      	ldr	r0, [r7, #4]
 80016d2:	f7ff fda9 	bl	8001228 <LoRa_write>
 80016d6:	e00f      	b.n	80016f8 <LoRa_init+0x1a6>
			}
			else {
				// DIO2: RxDone
				read = LoRa_read(_LoRa, RegDioMapping1);
 80016d8:	2140      	movs	r1, #64	; 0x40
 80016da:	6878      	ldr	r0, [r7, #4]
 80016dc:	f7ff fd8a 	bl	80011f4 <LoRa_read>
 80016e0:	4603      	mov	r3, r0
 80016e2:	73fb      	strb	r3, [r7, #15]
				data = read | 0x3F;
 80016e4:	7bfb      	ldrb	r3, [r7, #15]
 80016e6:	f043 033f 	orr.w	r3, r3, #63	; 0x3f
 80016ea:	73bb      	strb	r3, [r7, #14]
				LoRa_write(_LoRa, RegDioMapping1, data);
 80016ec:	7bbb      	ldrb	r3, [r7, #14]
 80016ee:	461a      	mov	r2, r3
 80016f0:	2140      	movs	r1, #64	; 0x40
 80016f2:	6878      	ldr	r0, [r7, #4]
 80016f4:	f7ff fd98 	bl	8001228 <LoRa_write>
			}


		// goto standby mode:
			LoRa_gotoMode(_LoRa, STNBY_MODE);
 80016f8:	2101      	movs	r1, #1
 80016fa:	6878      	ldr	r0, [r7, #4]
 80016fc:	f7ff fb1b 	bl	8000d36 <LoRa_gotoMode>
			_LoRa->current_mode = STNBY_MODE;
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	2201      	movs	r2, #1
 8001704:	61da      	str	r2, [r3, #28]
			HAL_Delay(10);
 8001706:	200a      	movs	r0, #10
 8001708:	f000 ff20 	bl	800254c <HAL_Delay>

			read = LoRa_read(_LoRa, RegVersion);
 800170c:	2142      	movs	r1, #66	; 0x42
 800170e:	6878      	ldr	r0, [r7, #4]
 8001710:	f7ff fd70 	bl	80011f4 <LoRa_read>
 8001714:	4603      	mov	r3, r0
 8001716:	73fb      	strb	r3, [r7, #15]
			if(read == 0x12)
 8001718:	7bfb      	ldrb	r3, [r7, #15]
 800171a:	2b12      	cmp	r3, #18
 800171c:	d101      	bne.n	8001722 <LoRa_init+0x1d0>
				return LORA_OK;
 800171e:	23c8      	movs	r3, #200	; 0xc8
 8001720:	e004      	b.n	800172c <LoRa_init+0x1da>
			else
				return LORA_NOT_FOUND;
 8001722:	f44f 73ca 	mov.w	r3, #404	; 0x194
 8001726:	e001      	b.n	800172c <LoRa_init+0x1da>
	}
	else {
		return LORA_UNAVAILABLE;
 8001728:	f240 13f7 	movw	r3, #503	; 0x1f7
	}
}
 800172c:	4618      	mov	r0, r3
 800172e:	3710      	adds	r7, #16
 8001730:	46bd      	mov	sp, r7
 8001732:	bd80      	pop	{r7, pc}

08001734 <LoRa_received_bytes>:
		description : check number of bytes available in FIFO RX buffer
		arguments   :
			LoRa* LoRa        --> LoRa object handler
		returns     : 8 bit integer, number of bytes available to read from FIFO RX buffer
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_received_bytes(LoRa* _LoRa) {
 8001734:	b580      	push	{r7, lr}
 8001736:	b082      	sub	sp, #8
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
	return LoRa_read(_LoRa, RegRxNbBytes);
 800173c:	2113      	movs	r1, #19
 800173e:	6878      	ldr	r0, [r7, #4]
 8001740:	f7ff fd58 	bl	80011f4 <LoRa_read>
 8001744:	4603      	mov	r3, r0
}
 8001746:	4618      	mov	r0, r3
 8001748:	3708      	adds	r7, #8
 800174a:	46bd      	mov	sp, r7
 800174c:	bd80      	pop	{r7, pc}
	...

08001750 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001750:	b5b0      	push	{r4, r5, r7, lr}
 8001752:	f5ad 7d0e 	sub.w	sp, sp, #568	; 0x238
 8001756:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  RetargetInit(USB_UART);
 8001758:	4b5b      	ldr	r3, [pc, #364]	; (80018c8 <main+0x178>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	4618      	mov	r0, r3
 800175e:	f000 fb87 	bl	8001e70 <RetargetInit>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001762:	f000 fe81 	bl	8002468 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001766:	f000 f8c5 	bl	80018f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */
  //***************************** DMA MUST INIT BEFORE UART ***********************
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800176a:	f000 fa25 	bl	8001bb8 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 800176e:	f000 f9af 	bl	8001ad0 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8001772:	f000 f9d7 	bl	8001b24 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 8001776:	f000 f927 	bl	80019c8 <MX_SPI1_Init>
  MX_DMA_Init();
 800177a:	f000 f9fd 	bl	8001b78 <MX_DMA_Init>
  MX_TIM2_Init();
 800177e:	f000 f959 	bl	8001a34 <MX_TIM2_Init>
  MX_USB_DEVICE_Init();
 8001782:	f009 fd61 	bl	800b248 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */

  // Polling timer init
  HAL_TIM_Base_Start_IT(Poll_Timer);
 8001786:	4b51      	ldr	r3, [pc, #324]	; (80018cc <main+0x17c>)
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	4618      	mov	r0, r3
 800178c:	f004 fac0 	bl	8005d10 <HAL_TIM_Base_Start_IT>
  // UART interrupt init
  HAL_UART_Receive_DMA (USB_UART, UART_Buff, sizeof(UART_Buff));
 8001790:	4b4d      	ldr	r3, [pc, #308]	; (80018c8 <main+0x178>)
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8001798:	494d      	ldr	r1, [pc, #308]	; (80018d0 <main+0x180>)
 800179a:	4618      	mov	r0, r3
 800179c:	f005 f86b 	bl	8006876 <HAL_UART_Receive_DMA>

  // LoRa Class definitions
  LoRaClass = newLoRa();
 80017a0:	4c4c      	ldr	r4, [pc, #304]	; (80018d4 <main+0x184>)
 80017a2:	463b      	mov	r3, r7
 80017a4:	4618      	mov	r0, r3
 80017a6:	f7ff fa7f 	bl	8000ca8 <newLoRa>
 80017aa:	f507 730e 	add.w	r3, r7, #568	; 0x238
 80017ae:	f5a3 730e 	sub.w	r3, r3, #568	; 0x238
 80017b2:	461d      	mov	r5, r3
 80017b4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80017b6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80017b8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80017ba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80017bc:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80017c0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  LoRaClass.hSPIx                 = RF_SPI;
 80017c4:	4b44      	ldr	r3, [pc, #272]	; (80018d8 <main+0x188>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	4a42      	ldr	r2, [pc, #264]	; (80018d4 <main+0x184>)
 80017ca:	6193      	str	r3, [r2, #24]
  LoRaClass.CS_port               = RF_SPI_NSS_GPIO_Port;
 80017cc:	4b41      	ldr	r3, [pc, #260]	; (80018d4 <main+0x184>)
 80017ce:	4a43      	ldr	r2, [pc, #268]	; (80018dc <main+0x18c>)
 80017d0:	601a      	str	r2, [r3, #0]
  LoRaClass.CS_pin                = RF_SPI_NSS_Pin;
 80017d2:	4b40      	ldr	r3, [pc, #256]	; (80018d4 <main+0x184>)
 80017d4:	2210      	movs	r2, #16
 80017d6:	809a      	strh	r2, [r3, #4]
  LoRaClass.reset_port            = RESET_RF_GPIO_Port;
 80017d8:	4b3e      	ldr	r3, [pc, #248]	; (80018d4 <main+0x184>)
 80017da:	4a41      	ldr	r2, [pc, #260]	; (80018e0 <main+0x190>)
 80017dc:	609a      	str	r2, [r3, #8]
  LoRaClass.reset_pin             = RESET_RF_Pin;
 80017de:	4b3d      	ldr	r3, [pc, #244]	; (80018d4 <main+0x184>)
 80017e0:	2201      	movs	r2, #1
 80017e2:	819a      	strh	r2, [r3, #12]
  LoRaClass.DIO0_port			  = IO0_RF_GPIO_Port;
 80017e4:	4b3b      	ldr	r3, [pc, #236]	; (80018d4 <main+0x184>)
 80017e6:	4a3e      	ldr	r2, [pc, #248]	; (80018e0 <main+0x190>)
 80017e8:	611a      	str	r2, [r3, #16]
  LoRaClass.DIO0_pin			  = IO0_RF_Pin;
 80017ea:	4b3a      	ldr	r3, [pc, #232]	; (80018d4 <main+0x184>)
 80017ec:	2202      	movs	r2, #2
 80017ee:	829a      	strh	r2, [r3, #20]

  LoRaClass.frequency             = 915;
 80017f0:	4b38      	ldr	r3, [pc, #224]	; (80018d4 <main+0x184>)
 80017f2:	f240 3293 	movw	r2, #915	; 0x393
 80017f6:	621a      	str	r2, [r3, #32]
  LoRaClass.spredingFactor        = SF_7;						// default = SF_7
 80017f8:	4b36      	ldr	r3, [pc, #216]	; (80018d4 <main+0x184>)
 80017fa:	2207      	movs	r2, #7
 80017fc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  LoRaClass.bandWidth			  = BW_125KHz;				  	// default = BW_125KHz
 8001800:	4b34      	ldr	r3, [pc, #208]	; (80018d4 <main+0x184>)
 8001802:	2207      	movs	r2, #7
 8001804:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  LoRaClass.crcRate				  = CR_4_5;						// default = CR_4_5
 8001808:	4b32      	ldr	r3, [pc, #200]	; (80018d4 <main+0x184>)
 800180a:	2201      	movs	r2, #1
 800180c:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  LoRaClass.power			      = POWER_20db;					// default = 20db
 8001810:	4b30      	ldr	r3, [pc, #192]	; (80018d4 <main+0x184>)
 8001812:	22ff      	movs	r2, #255	; 0xff
 8001814:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  LoRaClass.overCurrentProtection = 120; 						// default = 100 mA
 8001818:	4b2e      	ldr	r3, [pc, #184]	; (80018d4 <main+0x184>)
 800181a:	2278      	movs	r2, #120	; 0x78
 800181c:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  LoRaClass.preamble			  = 10;		  					// default = 8;
 8001820:	4b2c      	ldr	r3, [pc, #176]	; (80018d4 <main+0x184>)
 8001822:	220a      	movs	r2, #10
 8001824:	851a      	strh	r2, [r3, #40]	; 0x28
  LoRaClass.preamble			  = FSK_MODULATION;
 8001826:	4b2b      	ldr	r3, [pc, #172]	; (80018d4 <main+0x184>)
 8001828:	2200      	movs	r2, #0
 800182a:	851a      	strh	r2, [r3, #40]	; 0x28

  HAL_GPIO_WritePin(RF_SPI_NSS_GPIO_Port, RF_SPI_NSS_Pin, GPIO_PIN_SET);
 800182c:	2201      	movs	r2, #1
 800182e:	2110      	movs	r1, #16
 8001830:	482a      	ldr	r0, [pc, #168]	; (80018dc <main+0x18c>)
 8001832:	f001 fd5f 	bl	80032f4 <HAL_GPIO_WritePin>

  LoRa_reset(&LoRaClass);
 8001836:	4827      	ldr	r0, [pc, #156]	; (80018d4 <main+0x184>)
 8001838:	f7ff fa5f 	bl	8000cfa <LoRa_reset>
  uint32_t result = LoRa_init(&LoRaClass);
 800183c:	4825      	ldr	r0, [pc, #148]	; (80018d4 <main+0x184>)
 800183e:	f7ff fe88 	bl	8001552 <LoRa_init>
 8001842:	4603      	mov	r3, r0
 8001844:	f8c7 3234 	str.w	r3, [r7, #564]	; 0x234

  if(result == LORA_NOT_FOUND) {
 8001848:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 800184c:	f5b3 7fca 	cmp.w	r3, #404	; 0x194
 8001850:	d103      	bne.n	800185a <main+0x10a>
	  Blocking_LED_Blink(1);
 8001852:	2001      	movs	r0, #1
 8001854:	f000 fae4 	bl	8001e20 <Blocking_LED_Blink>
 8001858:	e008      	b.n	800186c <main+0x11c>
  }
  else if(result == LORA_UNAVAILABLE) {
 800185a:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 800185e:	f240 12f7 	movw	r2, #503	; 0x1f7
 8001862:	4293      	cmp	r3, r2
 8001864:	d102      	bne.n	800186c <main+0x11c>
	  Blocking_LED_Blink(1);
 8001866:	2001      	movs	r0, #1
 8001868:	f000 fada 	bl	8001e20 <Blocking_LED_Blink>
  }

  LoRa_setModulation(&LoRaClass, FSK_MODULATION);
 800186c:	2100      	movs	r1, #0
 800186e:	4819      	ldr	r0, [pc, #100]	; (80018d4 <main+0x184>)
 8001870:	f7ff fae5 	bl	8000e3e <LoRa_setModulation>
  LoRa_setFSKMode(&LoRaClass, PACKET_MODE);
 8001874:	2101      	movs	r1, #1
 8001876:	4817      	ldr	r0, [pc, #92]	; (80018d4 <main+0x184>)
 8001878:	f7ff fde0 	bl	800143c <LoRa_setFSKMode>
  LoRa_setBitrate(&LoRaClass, 300);
 800187c:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8001880:	4814      	ldr	r0, [pc, #80]	; (80018d4 <main+0x184>)
 8001882:	f7ff fd41 	bl	8001308 <LoRa_setBitrate>

  // START CONTINUOUS RECEIVING -----------------------------------
  LoRa_startReceiving(&LoRaClass);
 8001886:	4813      	ldr	r0, [pc, #76]	; (80018d4 <main+0x184>)
 8001888:	f7ff fdcc 	bl	8001424 <LoRa_startReceiving>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  while(1) {
		  if(LoRa_transmit(&LoRaClass, (uint8_t*)"Testing\r\n", (uint8_t)sizeof("Testing\r\n"), 1000)) {
 800188c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001890:	220a      	movs	r2, #10
 8001892:	4914      	ldr	r1, [pc, #80]	; (80018e4 <main+0x194>)
 8001894:	480f      	ldr	r0, [pc, #60]	; (80018d4 <main+0x184>)
 8001896:	f7ff fd6d 	bl	8001374 <LoRa_transmit>
 800189a:	4603      	mov	r3, r0
 800189c:	2b00      	cmp	r3, #0
 800189e:	d002      	beq.n	80018a6 <main+0x156>
			  printf("Transmit failed\r\n");
 80018a0:	4811      	ldr	r0, [pc, #68]	; (80018e8 <main+0x198>)
 80018a2:	f00a fa9f 	bl	800bde4 <puts>
		  }
		  HAL_Delay(1000);
 80018a6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80018aa:	f000 fe4f 	bl	800254c <HAL_Delay>
		  if(LoRa_receive(&LoRaClass, RF_RX_Buff, sizeof("Testing\r\n"))) {
 80018ae:	220a      	movs	r2, #10
 80018b0:	490e      	ldr	r1, [pc, #56]	; (80018ec <main+0x19c>)
 80018b2:	4808      	ldr	r0, [pc, #32]	; (80018d4 <main+0x184>)
 80018b4:	f7ff fded 	bl	8001492 <LoRa_receive>
 80018b8:	4603      	mov	r3, r0
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d0e6      	beq.n	800188c <main+0x13c>
			  printf("Nothing received\r\n");
 80018be:	480c      	ldr	r0, [pc, #48]	; (80018f0 <main+0x1a0>)
 80018c0:	f00a fa90 	bl	800bde4 <puts>
		  if(LoRa_transmit(&LoRaClass, (uint8_t*)"Testing\r\n", (uint8_t)sizeof("Testing\r\n"), 1000)) {
 80018c4:	e7e2      	b.n	800188c <main+0x13c>
 80018c6:	bf00      	nop
 80018c8:	20000000 	.word	0x20000000
 80018cc:	20000008 	.word	0x20000008
 80018d0:	20000418 	.word	0x20000418
 80018d4:	200007fc 	.word	0x200007fc
 80018d8:	20000004 	.word	0x20000004
 80018dc:	40020000 	.word	0x40020000
 80018e0:	40020400 	.word	0x40020400
 80018e4:	0800c8b8 	.word	0x0800c8b8
 80018e8:	0800c8c4 	.word	0x0800c8c4
 80018ec:	20000318 	.word	0x20000318
 80018f0:	0800c8d8 	.word	0x0800c8d8

080018f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b094      	sub	sp, #80	; 0x50
 80018f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80018fa:	f107 0320 	add.w	r3, r7, #32
 80018fe:	2230      	movs	r2, #48	; 0x30
 8001900:	2100      	movs	r1, #0
 8001902:	4618      	mov	r0, r3
 8001904:	f00a f9f8 	bl	800bcf8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001908:	f107 030c 	add.w	r3, r7, #12
 800190c:	2200      	movs	r2, #0
 800190e:	601a      	str	r2, [r3, #0]
 8001910:	605a      	str	r2, [r3, #4]
 8001912:	609a      	str	r2, [r3, #8]
 8001914:	60da      	str	r2, [r3, #12]
 8001916:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001918:	2300      	movs	r3, #0
 800191a:	60bb      	str	r3, [r7, #8]
 800191c:	4b28      	ldr	r3, [pc, #160]	; (80019c0 <SystemClock_Config+0xcc>)
 800191e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001920:	4a27      	ldr	r2, [pc, #156]	; (80019c0 <SystemClock_Config+0xcc>)
 8001922:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001926:	6413      	str	r3, [r2, #64]	; 0x40
 8001928:	4b25      	ldr	r3, [pc, #148]	; (80019c0 <SystemClock_Config+0xcc>)
 800192a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800192c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001930:	60bb      	str	r3, [r7, #8]
 8001932:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001934:	2300      	movs	r3, #0
 8001936:	607b      	str	r3, [r7, #4]
 8001938:	4b22      	ldr	r3, [pc, #136]	; (80019c4 <SystemClock_Config+0xd0>)
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	4a21      	ldr	r2, [pc, #132]	; (80019c4 <SystemClock_Config+0xd0>)
 800193e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001942:	6013      	str	r3, [r2, #0]
 8001944:	4b1f      	ldr	r3, [pc, #124]	; (80019c4 <SystemClock_Config+0xd0>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800194c:	607b      	str	r3, [r7, #4]
 800194e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001950:	2301      	movs	r3, #1
 8001952:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001954:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001958:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800195a:	2302      	movs	r3, #2
 800195c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800195e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001962:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 12;
 8001964:	230c      	movs	r3, #12
 8001966:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001968:	23a8      	movs	r3, #168	; 0xa8
 800196a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800196c:	2302      	movs	r3, #2
 800196e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001970:	2307      	movs	r3, #7
 8001972:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001974:	f107 0320 	add.w	r3, r7, #32
 8001978:	4618      	mov	r0, r3
 800197a:	f002 ff6b 	bl	8004854 <HAL_RCC_OscConfig>
 800197e:	4603      	mov	r3, r0
 8001980:	2b00      	cmp	r3, #0
 8001982:	d001      	beq.n	8001988 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001984:	f000 fa6e 	bl	8001e64 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001988:	230f      	movs	r3, #15
 800198a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800198c:	2302      	movs	r3, #2
 800198e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001990:	2300      	movs	r3, #0
 8001992:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001994:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001998:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800199a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800199e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80019a0:	f107 030c 	add.w	r3, r7, #12
 80019a4:	2105      	movs	r1, #5
 80019a6:	4618      	mov	r0, r3
 80019a8:	f003 f9cc 	bl	8004d44 <HAL_RCC_ClockConfig>
 80019ac:	4603      	mov	r3, r0
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d001      	beq.n	80019b6 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80019b2:	f000 fa57 	bl	8001e64 <Error_Handler>
  }
}
 80019b6:	bf00      	nop
 80019b8:	3750      	adds	r7, #80	; 0x50
 80019ba:	46bd      	mov	sp, r7
 80019bc:	bd80      	pop	{r7, pc}
 80019be:	bf00      	nop
 80019c0:	40023800 	.word	0x40023800
 80019c4:	40007000 	.word	0x40007000

080019c8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80019cc:	4b17      	ldr	r3, [pc, #92]	; (8001a2c <MX_SPI1_Init+0x64>)
 80019ce:	4a18      	ldr	r2, [pc, #96]	; (8001a30 <MX_SPI1_Init+0x68>)
 80019d0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80019d2:	4b16      	ldr	r3, [pc, #88]	; (8001a2c <MX_SPI1_Init+0x64>)
 80019d4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80019d8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80019da:	4b14      	ldr	r3, [pc, #80]	; (8001a2c <MX_SPI1_Init+0x64>)
 80019dc:	2200      	movs	r2, #0
 80019de:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80019e0:	4b12      	ldr	r3, [pc, #72]	; (8001a2c <MX_SPI1_Init+0x64>)
 80019e2:	2200      	movs	r2, #0
 80019e4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80019e6:	4b11      	ldr	r3, [pc, #68]	; (8001a2c <MX_SPI1_Init+0x64>)
 80019e8:	2200      	movs	r2, #0
 80019ea:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80019ec:	4b0f      	ldr	r3, [pc, #60]	; (8001a2c <MX_SPI1_Init+0x64>)
 80019ee:	2200      	movs	r2, #0
 80019f0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80019f2:	4b0e      	ldr	r3, [pc, #56]	; (8001a2c <MX_SPI1_Init+0x64>)
 80019f4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80019f8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 80019fa:	4b0c      	ldr	r3, [pc, #48]	; (8001a2c <MX_SPI1_Init+0x64>)
 80019fc:	2230      	movs	r2, #48	; 0x30
 80019fe:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001a00:	4b0a      	ldr	r3, [pc, #40]	; (8001a2c <MX_SPI1_Init+0x64>)
 8001a02:	2200      	movs	r2, #0
 8001a04:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001a06:	4b09      	ldr	r3, [pc, #36]	; (8001a2c <MX_SPI1_Init+0x64>)
 8001a08:	2200      	movs	r2, #0
 8001a0a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001a0c:	4b07      	ldr	r3, [pc, #28]	; (8001a2c <MX_SPI1_Init+0x64>)
 8001a0e:	2200      	movs	r2, #0
 8001a10:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001a12:	4b06      	ldr	r3, [pc, #24]	; (8001a2c <MX_SPI1_Init+0x64>)
 8001a14:	220a      	movs	r2, #10
 8001a16:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001a18:	4804      	ldr	r0, [pc, #16]	; (8001a2c <MX_SPI1_Init+0x64>)
 8001a1a:	f003 fb73 	bl	8005104 <HAL_SPI_Init>
 8001a1e:	4603      	mov	r3, r0
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d001      	beq.n	8001a28 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001a24:	f000 fa1e 	bl	8001e64 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001a28:	bf00      	nop
 8001a2a:	bd80      	pop	{r7, pc}
 8001a2c:	2000018c 	.word	0x2000018c
 8001a30:	40013000 	.word	0x40013000

08001a34 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b086      	sub	sp, #24
 8001a38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a3a:	f107 0308 	add.w	r3, r7, #8
 8001a3e:	2200      	movs	r2, #0
 8001a40:	601a      	str	r2, [r3, #0]
 8001a42:	605a      	str	r2, [r3, #4]
 8001a44:	609a      	str	r2, [r3, #8]
 8001a46:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a48:	463b      	mov	r3, r7
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	601a      	str	r2, [r3, #0]
 8001a4e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001a50:	4b1e      	ldr	r3, [pc, #120]	; (8001acc <MX_TIM2_Init+0x98>)
 8001a52:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001a56:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 2500;
 8001a58:	4b1c      	ldr	r3, [pc, #112]	; (8001acc <MX_TIM2_Init+0x98>)
 8001a5a:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8001a5e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a60:	4b1a      	ldr	r3, [pc, #104]	; (8001acc <MX_TIM2_Init+0x98>)
 8001a62:	2200      	movs	r2, #0
 8001a64:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 16800;
 8001a66:	4b19      	ldr	r3, [pc, #100]	; (8001acc <MX_TIM2_Init+0x98>)
 8001a68:	f244 12a0 	movw	r2, #16800	; 0x41a0
 8001a6c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a6e:	4b17      	ldr	r3, [pc, #92]	; (8001acc <MX_TIM2_Init+0x98>)
 8001a70:	2200      	movs	r2, #0
 8001a72:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001a74:	4b15      	ldr	r3, [pc, #84]	; (8001acc <MX_TIM2_Init+0x98>)
 8001a76:	2280      	movs	r2, #128	; 0x80
 8001a78:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001a7a:	4814      	ldr	r0, [pc, #80]	; (8001acc <MX_TIM2_Init+0x98>)
 8001a7c:	f004 f8f8 	bl	8005c70 <HAL_TIM_Base_Init>
 8001a80:	4603      	mov	r3, r0
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d001      	beq.n	8001a8a <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001a86:	f000 f9ed 	bl	8001e64 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a8a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a8e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001a90:	f107 0308 	add.w	r3, r7, #8
 8001a94:	4619      	mov	r1, r3
 8001a96:	480d      	ldr	r0, [pc, #52]	; (8001acc <MX_TIM2_Init+0x98>)
 8001a98:	f004 fab2 	bl	8006000 <HAL_TIM_ConfigClockSource>
 8001a9c:	4603      	mov	r3, r0
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d001      	beq.n	8001aa6 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001aa2:	f000 f9df 	bl	8001e64 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001aaa:	2300      	movs	r3, #0
 8001aac:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001aae:	463b      	mov	r3, r7
 8001ab0:	4619      	mov	r1, r3
 8001ab2:	4806      	ldr	r0, [pc, #24]	; (8001acc <MX_TIM2_Init+0x98>)
 8001ab4:	f004 fcce 	bl	8006454 <HAL_TIMEx_MasterConfigSynchronization>
 8001ab8:	4603      	mov	r3, r0
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d001      	beq.n	8001ac2 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001abe:	f000 f9d1 	bl	8001e64 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001ac2:	bf00      	nop
 8001ac4:	3718      	adds	r7, #24
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bd80      	pop	{r7, pc}
 8001aca:	bf00      	nop
 8001acc:	200001e4 	.word	0x200001e4

08001ad0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001ad4:	4b11      	ldr	r3, [pc, #68]	; (8001b1c <MX_USART1_UART_Init+0x4c>)
 8001ad6:	4a12      	ldr	r2, [pc, #72]	; (8001b20 <MX_USART1_UART_Init+0x50>)
 8001ad8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 57600;
 8001ada:	4b10      	ldr	r3, [pc, #64]	; (8001b1c <MX_USART1_UART_Init+0x4c>)
 8001adc:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 8001ae0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001ae2:	4b0e      	ldr	r3, [pc, #56]	; (8001b1c <MX_USART1_UART_Init+0x4c>)
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001ae8:	4b0c      	ldr	r3, [pc, #48]	; (8001b1c <MX_USART1_UART_Init+0x4c>)
 8001aea:	2200      	movs	r2, #0
 8001aec:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001aee:	4b0b      	ldr	r3, [pc, #44]	; (8001b1c <MX_USART1_UART_Init+0x4c>)
 8001af0:	2200      	movs	r2, #0
 8001af2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001af4:	4b09      	ldr	r3, [pc, #36]	; (8001b1c <MX_USART1_UART_Init+0x4c>)
 8001af6:	220c      	movs	r2, #12
 8001af8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001afa:	4b08      	ldr	r3, [pc, #32]	; (8001b1c <MX_USART1_UART_Init+0x4c>)
 8001afc:	2200      	movs	r2, #0
 8001afe:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b00:	4b06      	ldr	r3, [pc, #24]	; (8001b1c <MX_USART1_UART_Init+0x4c>)
 8001b02:	2200      	movs	r2, #0
 8001b04:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001b06:	4805      	ldr	r0, [pc, #20]	; (8001b1c <MX_USART1_UART_Init+0x4c>)
 8001b08:	f004 fd34 	bl	8006574 <HAL_UART_Init>
 8001b0c:	4603      	mov	r3, r0
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d001      	beq.n	8001b16 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001b12:	f000 f9a7 	bl	8001e64 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001b16:	bf00      	nop
 8001b18:	bd80      	pop	{r7, pc}
 8001b1a:	bf00      	nop
 8001b1c:	2000022c 	.word	0x2000022c
 8001b20:	40011000 	.word	0x40011000

08001b24 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001b28:	4b11      	ldr	r3, [pc, #68]	; (8001b70 <MX_USART2_UART_Init+0x4c>)
 8001b2a:	4a12      	ldr	r2, [pc, #72]	; (8001b74 <MX_USART2_UART_Init+0x50>)
 8001b2c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 57600;
 8001b2e:	4b10      	ldr	r3, [pc, #64]	; (8001b70 <MX_USART2_UART_Init+0x4c>)
 8001b30:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 8001b34:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001b36:	4b0e      	ldr	r3, [pc, #56]	; (8001b70 <MX_USART2_UART_Init+0x4c>)
 8001b38:	2200      	movs	r2, #0
 8001b3a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001b3c:	4b0c      	ldr	r3, [pc, #48]	; (8001b70 <MX_USART2_UART_Init+0x4c>)
 8001b3e:	2200      	movs	r2, #0
 8001b40:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001b42:	4b0b      	ldr	r3, [pc, #44]	; (8001b70 <MX_USART2_UART_Init+0x4c>)
 8001b44:	2200      	movs	r2, #0
 8001b46:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001b48:	4b09      	ldr	r3, [pc, #36]	; (8001b70 <MX_USART2_UART_Init+0x4c>)
 8001b4a:	220c      	movs	r2, #12
 8001b4c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 8001b4e:	4b08      	ldr	r3, [pc, #32]	; (8001b70 <MX_USART2_UART_Init+0x4c>)
 8001b50:	f44f 7240 	mov.w	r2, #768	; 0x300
 8001b54:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b56:	4b06      	ldr	r3, [pc, #24]	; (8001b70 <MX_USART2_UART_Init+0x4c>)
 8001b58:	2200      	movs	r2, #0
 8001b5a:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001b5c:	4804      	ldr	r0, [pc, #16]	; (8001b70 <MX_USART2_UART_Init+0x4c>)
 8001b5e:	f004 fd09 	bl	8006574 <HAL_UART_Init>
 8001b62:	4603      	mov	r3, r0
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d001      	beq.n	8001b6c <MX_USART2_UART_Init+0x48>
  {
    Error_Handler();
 8001b68:	f000 f97c 	bl	8001e64 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001b6c:	bf00      	nop
 8001b6e:	bd80      	pop	{r7, pc}
 8001b70:	20000270 	.word	0x20000270
 8001b74:	40004400 	.word	0x40004400

08001b78 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b082      	sub	sp, #8
 8001b7c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001b7e:	2300      	movs	r3, #0
 8001b80:	607b      	str	r3, [r7, #4]
 8001b82:	4b0c      	ldr	r3, [pc, #48]	; (8001bb4 <MX_DMA_Init+0x3c>)
 8001b84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b86:	4a0b      	ldr	r2, [pc, #44]	; (8001bb4 <MX_DMA_Init+0x3c>)
 8001b88:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001b8c:	6313      	str	r3, [r2, #48]	; 0x30
 8001b8e:	4b09      	ldr	r3, [pc, #36]	; (8001bb4 <MX_DMA_Init+0x3c>)
 8001b90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b92:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b96:	607b      	str	r3, [r7, #4]
 8001b98:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	2100      	movs	r1, #0
 8001b9e:	203a      	movs	r0, #58	; 0x3a
 8001ba0:	f000 fdd3 	bl	800274a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8001ba4:	203a      	movs	r0, #58	; 0x3a
 8001ba6:	f000 fdec 	bl	8002782 <HAL_NVIC_EnableIRQ>

}
 8001baa:	bf00      	nop
 8001bac:	3708      	adds	r7, #8
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	bd80      	pop	{r7, pc}
 8001bb2:	bf00      	nop
 8001bb4:	40023800 	.word	0x40023800

08001bb8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b08a      	sub	sp, #40	; 0x28
 8001bbc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bbe:	f107 0314 	add.w	r3, r7, #20
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	601a      	str	r2, [r3, #0]
 8001bc6:	605a      	str	r2, [r3, #4]
 8001bc8:	609a      	str	r2, [r3, #8]
 8001bca:	60da      	str	r2, [r3, #12]
 8001bcc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001bce:	2300      	movs	r3, #0
 8001bd0:	613b      	str	r3, [r7, #16]
 8001bd2:	4b56      	ldr	r3, [pc, #344]	; (8001d2c <MX_GPIO_Init+0x174>)
 8001bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bd6:	4a55      	ldr	r2, [pc, #340]	; (8001d2c <MX_GPIO_Init+0x174>)
 8001bd8:	f043 0304 	orr.w	r3, r3, #4
 8001bdc:	6313      	str	r3, [r2, #48]	; 0x30
 8001bde:	4b53      	ldr	r3, [pc, #332]	; (8001d2c <MX_GPIO_Init+0x174>)
 8001be0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001be2:	f003 0304 	and.w	r3, r3, #4
 8001be6:	613b      	str	r3, [r7, #16]
 8001be8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001bea:	2300      	movs	r3, #0
 8001bec:	60fb      	str	r3, [r7, #12]
 8001bee:	4b4f      	ldr	r3, [pc, #316]	; (8001d2c <MX_GPIO_Init+0x174>)
 8001bf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bf2:	4a4e      	ldr	r2, [pc, #312]	; (8001d2c <MX_GPIO_Init+0x174>)
 8001bf4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001bf8:	6313      	str	r3, [r2, #48]	; 0x30
 8001bfa:	4b4c      	ldr	r3, [pc, #304]	; (8001d2c <MX_GPIO_Init+0x174>)
 8001bfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bfe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c02:	60fb      	str	r3, [r7, #12]
 8001c04:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c06:	2300      	movs	r3, #0
 8001c08:	60bb      	str	r3, [r7, #8]
 8001c0a:	4b48      	ldr	r3, [pc, #288]	; (8001d2c <MX_GPIO_Init+0x174>)
 8001c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c0e:	4a47      	ldr	r2, [pc, #284]	; (8001d2c <MX_GPIO_Init+0x174>)
 8001c10:	f043 0301 	orr.w	r3, r3, #1
 8001c14:	6313      	str	r3, [r2, #48]	; 0x30
 8001c16:	4b45      	ldr	r3, [pc, #276]	; (8001d2c <MX_GPIO_Init+0x174>)
 8001c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c1a:	f003 0301 	and.w	r3, r3, #1
 8001c1e:	60bb      	str	r3, [r7, #8]
 8001c20:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c22:	2300      	movs	r3, #0
 8001c24:	607b      	str	r3, [r7, #4]
 8001c26:	4b41      	ldr	r3, [pc, #260]	; (8001d2c <MX_GPIO_Init+0x174>)
 8001c28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c2a:	4a40      	ldr	r2, [pc, #256]	; (8001d2c <MX_GPIO_Init+0x174>)
 8001c2c:	f043 0302 	orr.w	r3, r3, #2
 8001c30:	6313      	str	r3, [r2, #48]	; 0x30
 8001c32:	4b3e      	ldr	r3, [pc, #248]	; (8001d2c <MX_GPIO_Init+0x174>)
 8001c34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c36:	f003 0302 	and.w	r3, r3, #2
 8001c3a:	607b      	str	r3, [r7, #4]
 8001c3c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c3e:	2300      	movs	r3, #0
 8001c40:	603b      	str	r3, [r7, #0]
 8001c42:	4b3a      	ldr	r3, [pc, #232]	; (8001d2c <MX_GPIO_Init+0x174>)
 8001c44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c46:	4a39      	ldr	r2, [pc, #228]	; (8001d2c <MX_GPIO_Init+0x174>)
 8001c48:	f043 0308 	orr.w	r3, r3, #8
 8001c4c:	6313      	str	r3, [r2, #48]	; 0x30
 8001c4e:	4b37      	ldr	r3, [pc, #220]	; (8001d2c <MX_GPIO_Init+0x174>)
 8001c50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c52:	f003 0308 	and.w	r3, r3, #8
 8001c56:	603b      	str	r3, [r7, #0]
 8001c58:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RF_SPI_NSS_GPIO_Port, RF_SPI_NSS_Pin, GPIO_PIN_RESET);
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	2110      	movs	r1, #16
 8001c5e:	4834      	ldr	r0, [pc, #208]	; (8001d30 <MX_GPIO_Init+0x178>)
 8001c60:	f001 fb48 	bl	80032f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RESET_RF_GPIO_Port, RESET_RF_Pin, GPIO_PIN_RESET);
 8001c64:	2200      	movs	r2, #0
 8001c66:	2101      	movs	r1, #1
 8001c68:	4832      	ldr	r0, [pc, #200]	; (8001d34 <MX_GPIO_Init+0x17c>)
 8001c6a:	f001 fb43 	bl	80032f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(INDICATOR_LED_GPIO_Port, INDICATOR_LED_Pin, GPIO_PIN_RESET);
 8001c6e:	2200      	movs	r2, #0
 8001c70:	2104      	movs	r1, #4
 8001c72:	4831      	ldr	r0, [pc, #196]	; (8001d38 <MX_GPIO_Init+0x180>)
 8001c74:	f001 fb3e 	bl	80032f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : RF_SPI_NSS_Pin */
  GPIO_InitStruct.Pin = RF_SPI_NSS_Pin;
 8001c78:	2310      	movs	r3, #16
 8001c7a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c7c:	2301      	movs	r3, #1
 8001c7e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c80:	2300      	movs	r3, #0
 8001c82:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c84:	2300      	movs	r3, #0
 8001c86:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(RF_SPI_NSS_GPIO_Port, &GPIO_InitStruct);
 8001c88:	f107 0314 	add.w	r3, r7, #20
 8001c8c:	4619      	mov	r1, r3
 8001c8e:	4828      	ldr	r0, [pc, #160]	; (8001d30 <MX_GPIO_Init+0x178>)
 8001c90:	f001 f994 	bl	8002fbc <HAL_GPIO_Init>

  /*Configure GPIO pin : RESET_RF_Pin */
  GPIO_InitStruct.Pin = RESET_RF_Pin;
 8001c94:	2301      	movs	r3, #1
 8001c96:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c98:	2301      	movs	r3, #1
 8001c9a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(RESET_RF_GPIO_Port, &GPIO_InitStruct);
 8001ca4:	f107 0314 	add.w	r3, r7, #20
 8001ca8:	4619      	mov	r1, r3
 8001caa:	4822      	ldr	r0, [pc, #136]	; (8001d34 <MX_GPIO_Init+0x17c>)
 8001cac:	f001 f986 	bl	8002fbc <HAL_GPIO_Init>

  /*Configure GPIO pins : IO0_RF_Pin IO1_RF_Pin IO2_RF_Pin IO3_RF_Pin
                           IO4_RF_Pin */
  GPIO_InitStruct.Pin = IO0_RF_Pin|IO1_RF_Pin|IO2_RF_Pin|IO3_RF_Pin
 8001cb0:	f643 4302 	movw	r3, #15362	; 0x3c02
 8001cb4:	617b      	str	r3, [r7, #20]
                          |IO4_RF_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001cb6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001cba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cc0:	f107 0314 	add.w	r3, r7, #20
 8001cc4:	4619      	mov	r1, r3
 8001cc6:	481b      	ldr	r0, [pc, #108]	; (8001d34 <MX_GPIO_Init+0x17c>)
 8001cc8:	f001 f978 	bl	8002fbc <HAL_GPIO_Init>

  /*Configure GPIO pin : IO5_RF_Pin */
  GPIO_InitStruct.Pin = IO5_RF_Pin;
 8001ccc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001cd0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001cd2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001cd6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cd8:	2300      	movs	r3, #0
 8001cda:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(IO5_RF_GPIO_Port, &GPIO_InitStruct);
 8001cdc:	f107 0314 	add.w	r3, r7, #20
 8001ce0:	4619      	mov	r1, r3
 8001ce2:	4813      	ldr	r0, [pc, #76]	; (8001d30 <MX_GPIO_Init+0x178>)
 8001ce4:	f001 f96a 	bl	8002fbc <HAL_GPIO_Init>

  /*Configure GPIO pin : INDICATOR_LED_Pin */
  GPIO_InitStruct.Pin = INDICATOR_LED_Pin;
 8001ce8:	2304      	movs	r3, #4
 8001cea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cec:	2301      	movs	r3, #1
 8001cee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(INDICATOR_LED_GPIO_Port, &GPIO_InitStruct);
 8001cf8:	f107 0314 	add.w	r3, r7, #20
 8001cfc:	4619      	mov	r1, r3
 8001cfe:	480e      	ldr	r0, [pc, #56]	; (8001d38 <MX_GPIO_Init+0x180>)
 8001d00:	f001 f95c 	bl	8002fbc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8001d04:	2200      	movs	r2, #0
 8001d06:	2100      	movs	r1, #0
 8001d08:	2007      	movs	r0, #7
 8001d0a:	f000 fd1e 	bl	800274a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8001d0e:	2007      	movs	r0, #7
 8001d10:	f000 fd37 	bl	8002782 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001d14:	2200      	movs	r2, #0
 8001d16:	2100      	movs	r1, #0
 8001d18:	2028      	movs	r0, #40	; 0x28
 8001d1a:	f000 fd16 	bl	800274a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001d1e:	2028      	movs	r0, #40	; 0x28
 8001d20:	f000 fd2f 	bl	8002782 <HAL_NVIC_EnableIRQ>

}
 8001d24:	bf00      	nop
 8001d26:	3728      	adds	r7, #40	; 0x28
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	bd80      	pop	{r7, pc}
 8001d2c:	40023800 	.word	0x40023800
 8001d30:	40020000 	.word	0x40020000
 8001d34:	40020400 	.word	0x40020400
 8001d38:	40020c00 	.word	0x40020c00

08001d3c <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b082      	sub	sp, #8
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	4603      	mov	r3, r0
 8001d44:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == LoRaClass.DIO0_pin){
 8001d46:	4b08      	ldr	r3, [pc, #32]	; (8001d68 <HAL_GPIO_EXTI_Callback+0x2c>)
 8001d48:	8a9b      	ldrh	r3, [r3, #20]
 8001d4a:	88fa      	ldrh	r2, [r7, #6]
 8001d4c:	429a      	cmp	r2, r3
 8001d4e:	d106      	bne.n	8001d5e <HAL_GPIO_EXTI_Callback+0x22>
		RF_available_bytes = LoRa_received_bytes(&LoRaClass);
 8001d50:	4805      	ldr	r0, [pc, #20]	; (8001d68 <HAL_GPIO_EXTI_Callback+0x2c>)
 8001d52:	f7ff fcef 	bl	8001734 <LoRa_received_bytes>
 8001d56:	4603      	mov	r3, r0
 8001d58:	461a      	mov	r2, r3
 8001d5a:	4b04      	ldr	r3, [pc, #16]	; (8001d6c <HAL_GPIO_EXTI_Callback+0x30>)
 8001d5c:	701a      	strb	r2, [r3, #0]
	}
}
 8001d5e:	bf00      	nop
 8001d60:	3708      	adds	r7, #8
 8001d62:	46bd      	mov	sp, r7
 8001d64:	bd80      	pop	{r7, pc}
 8001d66:	bf00      	nop
 8001d68:	200007fc 	.word	0x200007fc
 8001d6c:	20000314 	.word	0x20000314

08001d70 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	b082      	sub	sp, #8
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_DMA (USB_UART, UART_Buff, sizeof(UART_Buff));
 8001d78:	4b0c      	ldr	r3, [pc, #48]	; (8001dac <HAL_UART_RxCpltCallback+0x3c>)
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8001d80:	490b      	ldr	r1, [pc, #44]	; (8001db0 <HAL_UART_RxCpltCallback+0x40>)
 8001d82:	4618      	mov	r0, r3
 8001d84:	f004 fd77 	bl	8006876 <HAL_UART_Receive_DMA>
	UART_READY = true;
 8001d88:	4b0a      	ldr	r3, [pc, #40]	; (8001db4 <HAL_UART_RxCpltCallback+0x44>)
 8001d8a:	2201      	movs	r2, #1
 8001d8c:	701a      	strb	r2, [r3, #0]
	// Add second half of data to sendBuff
	memcpy(RF_transmit_buffer, &UART_Buff[UART_PACKET_SIZE], UART_PACKET_SIZE);
 8001d8e:	4b0a      	ldr	r3, [pc, #40]	; (8001db8 <HAL_UART_RxCpltCallback+0x48>)
 8001d90:	781b      	ldrb	r3, [r3, #0]
 8001d92:	461a      	mov	r2, r3
 8001d94:	4b06      	ldr	r3, [pc, #24]	; (8001db0 <HAL_UART_RxCpltCallback+0x40>)
 8001d96:	4413      	add	r3, r2
 8001d98:	4a07      	ldr	r2, [pc, #28]	; (8001db8 <HAL_UART_RxCpltCallback+0x48>)
 8001d9a:	7812      	ldrb	r2, [r2, #0]
 8001d9c:	4619      	mov	r1, r3
 8001d9e:	4807      	ldr	r0, [pc, #28]	; (8001dbc <HAL_UART_RxCpltCallback+0x4c>)
 8001da0:	f009 ff9c 	bl	800bcdc <memcpy>
}
 8001da4:	bf00      	nop
 8001da6:	3708      	adds	r7, #8
 8001da8:	46bd      	mov	sp, r7
 8001daa:	bd80      	pop	{r7, pc}
 8001dac:	20000000 	.word	0x20000000
 8001db0:	20000418 	.word	0x20000418
 8001db4:	200007fa 	.word	0x200007fa
 8001db8:	2000000c 	.word	0x2000000c
 8001dbc:	200005f8 	.word	0x200005f8

08001dc0 <HAL_UART_RxHalfCpltCallback>:

void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart) {
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b082      	sub	sp, #8
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
	UART_READY = true;
 8001dc8:	4b06      	ldr	r3, [pc, #24]	; (8001de4 <HAL_UART_RxHalfCpltCallback+0x24>)
 8001dca:	2201      	movs	r2, #1
 8001dcc:	701a      	strb	r2, [r3, #0]
	// Add first half of data to sendBuff
	memcpy(RF_transmit_buffer, &UART_Buff, UART_PACKET_SIZE);
 8001dce:	4b06      	ldr	r3, [pc, #24]	; (8001de8 <HAL_UART_RxHalfCpltCallback+0x28>)
 8001dd0:	781b      	ldrb	r3, [r3, #0]
 8001dd2:	461a      	mov	r2, r3
 8001dd4:	4905      	ldr	r1, [pc, #20]	; (8001dec <HAL_UART_RxHalfCpltCallback+0x2c>)
 8001dd6:	4806      	ldr	r0, [pc, #24]	; (8001df0 <HAL_UART_RxHalfCpltCallback+0x30>)
 8001dd8:	f009 ff80 	bl	800bcdc <memcpy>
}
 8001ddc:	bf00      	nop
 8001dde:	3708      	adds	r7, #8
 8001de0:	46bd      	mov	sp, r7
 8001de2:	bd80      	pop	{r7, pc}
 8001de4:	200007fa 	.word	0x200007fa
 8001de8:	2000000c 	.word	0x2000000c
 8001dec:	20000418 	.word	0x20000418
 8001df0:	200005f8 	.word	0x200005f8

08001df4 <HAL_TIM_PeriodElapsedCallback>:


#ifdef MASTER_DEVICE
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 8001df4:	b480      	push	{r7}
 8001df6:	b083      	sub	sp, #12
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
    if(htim == Poll_Timer) {
 8001dfc:	4b06      	ldr	r3, [pc, #24]	; (8001e18 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	687a      	ldr	r2, [r7, #4]
 8001e02:	429a      	cmp	r2, r3
 8001e04:	d102      	bne.n	8001e0c <HAL_TIM_PeriodElapsedCallback+0x18>
    	// Poll slave device
    	POLL_READY = true;
 8001e06:	4b05      	ldr	r3, [pc, #20]	; (8001e1c <HAL_TIM_PeriodElapsedCallback+0x28>)
 8001e08:	2201      	movs	r2, #1
 8001e0a:	701a      	strb	r2, [r3, #0]
    }
}
 8001e0c:	bf00      	nop
 8001e0e:	370c      	adds	r7, #12
 8001e10:	46bd      	mov	sp, r7
 8001e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e16:	4770      	bx	lr
 8001e18:	20000008 	.word	0x20000008
 8001e1c:	200007fb 	.word	0x200007fb

08001e20 <Blocking_LED_Blink>:
#endif

void Blocking_LED_Blink(uint8_t freq) {
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b082      	sub	sp, #8
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	4603      	mov	r3, r0
 8001e28:	71fb      	strb	r3, [r7, #7]
	while(1) {
		HAL_GPIO_WritePin(INDICATOR_LED_GPIO_Port, INDICATOR_LED_Pin, GPIO_PIN_SET);
 8001e2a:	2201      	movs	r2, #1
 8001e2c:	2104      	movs	r1, #4
 8001e2e:	480c      	ldr	r0, [pc, #48]	; (8001e60 <Blocking_LED_Blink+0x40>)
 8001e30:	f001 fa60 	bl	80032f4 <HAL_GPIO_WritePin>
		HAL_Delay(1000/freq);
 8001e34:	79fb      	ldrb	r3, [r7, #7]
 8001e36:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001e3a:	fb92 f3f3 	sdiv	r3, r2, r3
 8001e3e:	4618      	mov	r0, r3
 8001e40:	f000 fb84 	bl	800254c <HAL_Delay>
		HAL_GPIO_WritePin(INDICATOR_LED_GPIO_Port, INDICATOR_LED_Pin, GPIO_PIN_RESET);
 8001e44:	2200      	movs	r2, #0
 8001e46:	2104      	movs	r1, #4
 8001e48:	4805      	ldr	r0, [pc, #20]	; (8001e60 <Blocking_LED_Blink+0x40>)
 8001e4a:	f001 fa53 	bl	80032f4 <HAL_GPIO_WritePin>
		HAL_Delay(1000/freq);
 8001e4e:	79fb      	ldrb	r3, [r7, #7]
 8001e50:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001e54:	fb92 f3f3 	sdiv	r3, r2, r3
 8001e58:	4618      	mov	r0, r3
 8001e5a:	f000 fb77 	bl	800254c <HAL_Delay>
		HAL_GPIO_WritePin(INDICATOR_LED_GPIO_Port, INDICATOR_LED_Pin, GPIO_PIN_SET);
 8001e5e:	e7e4      	b.n	8001e2a <Blocking_LED_Blink+0xa>
 8001e60:	40020c00 	.word	0x40020c00

08001e64 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001e64:	b480      	push	{r7}
 8001e66:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001e68:	b672      	cpsid	i
}
 8001e6a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001e6c:	e7fe      	b.n	8001e6c <Error_Handler+0x8>
	...

08001e70 <RetargetInit>:
#define STDOUT_FILENO 1
#define STDERR_FILENO 2

UART_HandleTypeDef *gHuart;

void RetargetInit(UART_HandleTypeDef *huart) {
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b082      	sub	sp, #8
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
  gHuart = huart;
 8001e78:	4a07      	ldr	r2, [pc, #28]	; (8001e98 <RetargetInit+0x28>)
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	6013      	str	r3, [r2, #0]

  /* Disable I/O buffering for STDOUT stream, so that
   * chars are sent out as soon as they are printed. */
  setvbuf(stdout, NULL, _IONBF, 0);
 8001e7e:	4b07      	ldr	r3, [pc, #28]	; (8001e9c <RetargetInit+0x2c>)
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	6898      	ldr	r0, [r3, #8]
 8001e84:	2300      	movs	r3, #0
 8001e86:	2202      	movs	r2, #2
 8001e88:	2100      	movs	r1, #0
 8001e8a:	f009 ffb3 	bl	800bdf4 <setvbuf>
}
 8001e8e:	bf00      	nop
 8001e90:	3708      	adds	r7, #8
 8001e92:	46bd      	mov	sp, r7
 8001e94:	bd80      	pop	{r7, pc}
 8001e96:	bf00      	nop
 8001e98:	2000082c 	.word	0x2000082c
 8001e9c:	2000010c 	.word	0x2000010c

08001ea0 <_isatty>:

int _isatty(int fd) {
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b082      	sub	sp, #8
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	db04      	blt.n	8001eb8 <_isatty+0x18>
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	2b02      	cmp	r3, #2
 8001eb2:	dc01      	bgt.n	8001eb8 <_isatty+0x18>
    return 1;
 8001eb4:	2301      	movs	r3, #1
 8001eb6:	e005      	b.n	8001ec4 <_isatty+0x24>

  errno = EBADF;
 8001eb8:	f009 fee6 	bl	800bc88 <__errno>
 8001ebc:	4603      	mov	r3, r0
 8001ebe:	2209      	movs	r2, #9
 8001ec0:	601a      	str	r2, [r3, #0]
  return 0;
 8001ec2:	2300      	movs	r3, #0
}
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	3708      	adds	r7, #8
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	bd80      	pop	{r7, pc}

08001ecc <_write>:

int _write(int fd, char* ptr, int len) {
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b086      	sub	sp, #24
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	60f8      	str	r0, [r7, #12]
 8001ed4:	60b9      	str	r1, [r7, #8]
 8001ed6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDOUT_FILENO || fd == STDERR_FILENO) {
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	2b01      	cmp	r3, #1
 8001edc:	d002      	beq.n	8001ee4 <_write+0x18>
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	2b02      	cmp	r3, #2
 8001ee2:	d111      	bne.n	8001f08 <_write+0x3c>
    hstatus = HAL_UART_Transmit(gHuart, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 8001ee4:	4b0e      	ldr	r3, [pc, #56]	; (8001f20 <_write+0x54>)
 8001ee6:	6818      	ldr	r0, [r3, #0]
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	b29a      	uxth	r2, r3
 8001eec:	f04f 33ff 	mov.w	r3, #4294967295
 8001ef0:	68b9      	ldr	r1, [r7, #8]
 8001ef2:	f004 fb8c 	bl	800660e <HAL_UART_Transmit>
 8001ef6:	4603      	mov	r3, r0
 8001ef8:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 8001efa:	7dfb      	ldrb	r3, [r7, #23]
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d101      	bne.n	8001f04 <_write+0x38>
      return len;
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	e008      	b.n	8001f16 <_write+0x4a>
    else
      return EIO;
 8001f04:	2305      	movs	r3, #5
 8001f06:	e006      	b.n	8001f16 <_write+0x4a>
  }
  errno = EBADF;
 8001f08:	f009 febe 	bl	800bc88 <__errno>
 8001f0c:	4603      	mov	r3, r0
 8001f0e:	2209      	movs	r2, #9
 8001f10:	601a      	str	r2, [r3, #0]
  return -1;
 8001f12:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001f16:	4618      	mov	r0, r3
 8001f18:	3718      	adds	r7, #24
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	bd80      	pop	{r7, pc}
 8001f1e:	bf00      	nop
 8001f20:	2000082c 	.word	0x2000082c

08001f24 <_close>:

int _close(int fd) {
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b082      	sub	sp, #8
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	db04      	blt.n	8001f3c <_close+0x18>
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	2b02      	cmp	r3, #2
 8001f36:	dc01      	bgt.n	8001f3c <_close+0x18>
    return 0;
 8001f38:	2300      	movs	r3, #0
 8001f3a:	e006      	b.n	8001f4a <_close+0x26>

  errno = EBADF;
 8001f3c:	f009 fea4 	bl	800bc88 <__errno>
 8001f40:	4603      	mov	r3, r0
 8001f42:	2209      	movs	r2, #9
 8001f44:	601a      	str	r2, [r3, #0]
  return -1;
 8001f46:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	3708      	adds	r7, #8
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	bd80      	pop	{r7, pc}

08001f52 <_lseek>:

int _lseek(int fd, int ptr, int dir) {
 8001f52:	b580      	push	{r7, lr}
 8001f54:	b084      	sub	sp, #16
 8001f56:	af00      	add	r7, sp, #0
 8001f58:	60f8      	str	r0, [r7, #12]
 8001f5a:	60b9      	str	r1, [r7, #8]
 8001f5c:	607a      	str	r2, [r7, #4]
  (void) fd;
  (void) ptr;
  (void) dir;

  errno = EBADF;
 8001f5e:	f009 fe93 	bl	800bc88 <__errno>
 8001f62:	4603      	mov	r3, r0
 8001f64:	2209      	movs	r2, #9
 8001f66:	601a      	str	r2, [r3, #0]
  return -1;
 8001f68:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	3710      	adds	r7, #16
 8001f70:	46bd      	mov	sp, r7
 8001f72:	bd80      	pop	{r7, pc}

08001f74 <_read>:

int _read(int fd, char* ptr, int len) {
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b086      	sub	sp, #24
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	60f8      	str	r0, [r7, #12]
 8001f7c:	60b9      	str	r1, [r7, #8]
 8001f7e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDIN_FILENO) {
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d110      	bne.n	8001fa8 <_read+0x34>
    hstatus = HAL_UART_Receive(gHuart, (uint8_t *) ptr, 1, HAL_MAX_DELAY);
 8001f86:	4b0e      	ldr	r3, [pc, #56]	; (8001fc0 <_read+0x4c>)
 8001f88:	6818      	ldr	r0, [r3, #0]
 8001f8a:	f04f 33ff 	mov.w	r3, #4294967295
 8001f8e:	2201      	movs	r2, #1
 8001f90:	68b9      	ldr	r1, [r7, #8]
 8001f92:	f004 fbce 	bl	8006732 <HAL_UART_Receive>
 8001f96:	4603      	mov	r3, r0
 8001f98:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 8001f9a:	7dfb      	ldrb	r3, [r7, #23]
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d101      	bne.n	8001fa4 <_read+0x30>
      return 1;
 8001fa0:	2301      	movs	r3, #1
 8001fa2:	e008      	b.n	8001fb6 <_read+0x42>
    else
      return EIO;
 8001fa4:	2305      	movs	r3, #5
 8001fa6:	e006      	b.n	8001fb6 <_read+0x42>
  }
  errno = EBADF;
 8001fa8:	f009 fe6e 	bl	800bc88 <__errno>
 8001fac:	4603      	mov	r3, r0
 8001fae:	2209      	movs	r2, #9
 8001fb0:	601a      	str	r2, [r3, #0]
  return -1;
 8001fb2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	3718      	adds	r7, #24
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	bd80      	pop	{r7, pc}
 8001fbe:	bf00      	nop
 8001fc0:	2000082c 	.word	0x2000082c

08001fc4 <_fstat>:

int _fstat(int fd, struct stat* st) {
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b082      	sub	sp, #8
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
 8001fcc:	6039      	str	r1, [r7, #0]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO) {
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	db08      	blt.n	8001fe6 <_fstat+0x22>
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	2b02      	cmp	r3, #2
 8001fd8:	dc05      	bgt.n	8001fe6 <_fstat+0x22>
    st->st_mode = S_IFCHR;
 8001fda:	683b      	ldr	r3, [r7, #0]
 8001fdc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001fe0:	605a      	str	r2, [r3, #4]
    return 0;
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	e005      	b.n	8001ff2 <_fstat+0x2e>
  }

  errno = EBADF;
 8001fe6:	f009 fe4f 	bl	800bc88 <__errno>
 8001fea:	4603      	mov	r3, r0
 8001fec:	2209      	movs	r2, #9
 8001fee:	601a      	str	r2, [r3, #0]
  return 0;
 8001ff0:	2300      	movs	r3, #0
}
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	3708      	adds	r7, #8
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	bd80      	pop	{r7, pc}
	...

08001ffc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ffc:	b480      	push	{r7}
 8001ffe:	b083      	sub	sp, #12
 8002000:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002002:	2300      	movs	r3, #0
 8002004:	607b      	str	r3, [r7, #4]
 8002006:	4b10      	ldr	r3, [pc, #64]	; (8002048 <HAL_MspInit+0x4c>)
 8002008:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800200a:	4a0f      	ldr	r2, [pc, #60]	; (8002048 <HAL_MspInit+0x4c>)
 800200c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002010:	6453      	str	r3, [r2, #68]	; 0x44
 8002012:	4b0d      	ldr	r3, [pc, #52]	; (8002048 <HAL_MspInit+0x4c>)
 8002014:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002016:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800201a:	607b      	str	r3, [r7, #4]
 800201c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800201e:	2300      	movs	r3, #0
 8002020:	603b      	str	r3, [r7, #0]
 8002022:	4b09      	ldr	r3, [pc, #36]	; (8002048 <HAL_MspInit+0x4c>)
 8002024:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002026:	4a08      	ldr	r2, [pc, #32]	; (8002048 <HAL_MspInit+0x4c>)
 8002028:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800202c:	6413      	str	r3, [r2, #64]	; 0x40
 800202e:	4b06      	ldr	r3, [pc, #24]	; (8002048 <HAL_MspInit+0x4c>)
 8002030:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002032:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002036:	603b      	str	r3, [r7, #0]
 8002038:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800203a:	bf00      	nop
 800203c:	370c      	adds	r7, #12
 800203e:	46bd      	mov	sp, r7
 8002040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002044:	4770      	bx	lr
 8002046:	bf00      	nop
 8002048:	40023800 	.word	0x40023800

0800204c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	b08a      	sub	sp, #40	; 0x28
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002054:	f107 0314 	add.w	r3, r7, #20
 8002058:	2200      	movs	r2, #0
 800205a:	601a      	str	r2, [r3, #0]
 800205c:	605a      	str	r2, [r3, #4]
 800205e:	609a      	str	r2, [r3, #8]
 8002060:	60da      	str	r2, [r3, #12]
 8002062:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	4a19      	ldr	r2, [pc, #100]	; (80020d0 <HAL_SPI_MspInit+0x84>)
 800206a:	4293      	cmp	r3, r2
 800206c:	d12b      	bne.n	80020c6 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800206e:	2300      	movs	r3, #0
 8002070:	613b      	str	r3, [r7, #16]
 8002072:	4b18      	ldr	r3, [pc, #96]	; (80020d4 <HAL_SPI_MspInit+0x88>)
 8002074:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002076:	4a17      	ldr	r2, [pc, #92]	; (80020d4 <HAL_SPI_MspInit+0x88>)
 8002078:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800207c:	6453      	str	r3, [r2, #68]	; 0x44
 800207e:	4b15      	ldr	r3, [pc, #84]	; (80020d4 <HAL_SPI_MspInit+0x88>)
 8002080:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002082:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002086:	613b      	str	r3, [r7, #16]
 8002088:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800208a:	2300      	movs	r3, #0
 800208c:	60fb      	str	r3, [r7, #12]
 800208e:	4b11      	ldr	r3, [pc, #68]	; (80020d4 <HAL_SPI_MspInit+0x88>)
 8002090:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002092:	4a10      	ldr	r2, [pc, #64]	; (80020d4 <HAL_SPI_MspInit+0x88>)
 8002094:	f043 0301 	orr.w	r3, r3, #1
 8002098:	6313      	str	r3, [r2, #48]	; 0x30
 800209a:	4b0e      	ldr	r3, [pc, #56]	; (80020d4 <HAL_SPI_MspInit+0x88>)
 800209c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800209e:	f003 0301 	and.w	r3, r3, #1
 80020a2:	60fb      	str	r3, [r7, #12]
 80020a4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80020a6:	23e0      	movs	r3, #224	; 0xe0
 80020a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020aa:	2302      	movs	r3, #2
 80020ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020ae:	2300      	movs	r3, #0
 80020b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020b2:	2303      	movs	r3, #3
 80020b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80020b6:	2305      	movs	r3, #5
 80020b8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020ba:	f107 0314 	add.w	r3, r7, #20
 80020be:	4619      	mov	r1, r3
 80020c0:	4805      	ldr	r0, [pc, #20]	; (80020d8 <HAL_SPI_MspInit+0x8c>)
 80020c2:	f000 ff7b 	bl	8002fbc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80020c6:	bf00      	nop
 80020c8:	3728      	adds	r7, #40	; 0x28
 80020ca:	46bd      	mov	sp, r7
 80020cc:	bd80      	pop	{r7, pc}
 80020ce:	bf00      	nop
 80020d0:	40013000 	.word	0x40013000
 80020d4:	40023800 	.word	0x40023800
 80020d8:	40020000 	.word	0x40020000

080020dc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	b084      	sub	sp, #16
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80020ec:	d115      	bne.n	800211a <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80020ee:	2300      	movs	r3, #0
 80020f0:	60fb      	str	r3, [r7, #12]
 80020f2:	4b0c      	ldr	r3, [pc, #48]	; (8002124 <HAL_TIM_Base_MspInit+0x48>)
 80020f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020f6:	4a0b      	ldr	r2, [pc, #44]	; (8002124 <HAL_TIM_Base_MspInit+0x48>)
 80020f8:	f043 0301 	orr.w	r3, r3, #1
 80020fc:	6413      	str	r3, [r2, #64]	; 0x40
 80020fe:	4b09      	ldr	r3, [pc, #36]	; (8002124 <HAL_TIM_Base_MspInit+0x48>)
 8002100:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002102:	f003 0301 	and.w	r3, r3, #1
 8002106:	60fb      	str	r3, [r7, #12]
 8002108:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 2, 0);
 800210a:	2200      	movs	r2, #0
 800210c:	2102      	movs	r1, #2
 800210e:	201c      	movs	r0, #28
 8002110:	f000 fb1b 	bl	800274a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002114:	201c      	movs	r0, #28
 8002116:	f000 fb34 	bl	8002782 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800211a:	bf00      	nop
 800211c:	3710      	adds	r7, #16
 800211e:	46bd      	mov	sp, r7
 8002120:	bd80      	pop	{r7, pc}
 8002122:	bf00      	nop
 8002124:	40023800 	.word	0x40023800

08002128 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	b08c      	sub	sp, #48	; 0x30
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002130:	f107 031c 	add.w	r3, r7, #28
 8002134:	2200      	movs	r2, #0
 8002136:	601a      	str	r2, [r3, #0]
 8002138:	605a      	str	r2, [r3, #4]
 800213a:	609a      	str	r2, [r3, #8]
 800213c:	60da      	str	r2, [r3, #12]
 800213e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	4a52      	ldr	r2, [pc, #328]	; (8002290 <HAL_UART_MspInit+0x168>)
 8002146:	4293      	cmp	r3, r2
 8002148:	d164      	bne.n	8002214 <HAL_UART_MspInit+0xec>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800214a:	2300      	movs	r3, #0
 800214c:	61bb      	str	r3, [r7, #24]
 800214e:	4b51      	ldr	r3, [pc, #324]	; (8002294 <HAL_UART_MspInit+0x16c>)
 8002150:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002152:	4a50      	ldr	r2, [pc, #320]	; (8002294 <HAL_UART_MspInit+0x16c>)
 8002154:	f043 0310 	orr.w	r3, r3, #16
 8002158:	6453      	str	r3, [r2, #68]	; 0x44
 800215a:	4b4e      	ldr	r3, [pc, #312]	; (8002294 <HAL_UART_MspInit+0x16c>)
 800215c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800215e:	f003 0310 	and.w	r3, r3, #16
 8002162:	61bb      	str	r3, [r7, #24]
 8002164:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002166:	2300      	movs	r3, #0
 8002168:	617b      	str	r3, [r7, #20]
 800216a:	4b4a      	ldr	r3, [pc, #296]	; (8002294 <HAL_UART_MspInit+0x16c>)
 800216c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800216e:	4a49      	ldr	r2, [pc, #292]	; (8002294 <HAL_UART_MspInit+0x16c>)
 8002170:	f043 0301 	orr.w	r3, r3, #1
 8002174:	6313      	str	r3, [r2, #48]	; 0x30
 8002176:	4b47      	ldr	r3, [pc, #284]	; (8002294 <HAL_UART_MspInit+0x16c>)
 8002178:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800217a:	f003 0301 	and.w	r3, r3, #1
 800217e:	617b      	str	r3, [r7, #20]
 8002180:	697b      	ldr	r3, [r7, #20]
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    PA11     ------> USART1_CTS
    PA12     ------> USART1_RTS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8002182:	f44f 53f0 	mov.w	r3, #7680	; 0x1e00
 8002186:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002188:	2302      	movs	r3, #2
 800218a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800218c:	2300      	movs	r3, #0
 800218e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002190:	2303      	movs	r3, #3
 8002192:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002194:	2307      	movs	r3, #7
 8002196:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002198:	f107 031c 	add.w	r3, r7, #28
 800219c:	4619      	mov	r1, r3
 800219e:	483e      	ldr	r0, [pc, #248]	; (8002298 <HAL_UART_MspInit+0x170>)
 80021a0:	f000 ff0c 	bl	8002fbc <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 80021a4:	4b3d      	ldr	r3, [pc, #244]	; (800229c <HAL_UART_MspInit+0x174>)
 80021a6:	4a3e      	ldr	r2, [pc, #248]	; (80022a0 <HAL_UART_MspInit+0x178>)
 80021a8:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 80021aa:	4b3c      	ldr	r3, [pc, #240]	; (800229c <HAL_UART_MspInit+0x174>)
 80021ac:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80021b0:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80021b2:	4b3a      	ldr	r3, [pc, #232]	; (800229c <HAL_UART_MspInit+0x174>)
 80021b4:	2200      	movs	r2, #0
 80021b6:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80021b8:	4b38      	ldr	r3, [pc, #224]	; (800229c <HAL_UART_MspInit+0x174>)
 80021ba:	2200      	movs	r2, #0
 80021bc:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80021be:	4b37      	ldr	r3, [pc, #220]	; (800229c <HAL_UART_MspInit+0x174>)
 80021c0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80021c4:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80021c6:	4b35      	ldr	r3, [pc, #212]	; (800229c <HAL_UART_MspInit+0x174>)
 80021c8:	2200      	movs	r2, #0
 80021ca:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80021cc:	4b33      	ldr	r3, [pc, #204]	; (800229c <HAL_UART_MspInit+0x174>)
 80021ce:	2200      	movs	r2, #0
 80021d0:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 80021d2:	4b32      	ldr	r3, [pc, #200]	; (800229c <HAL_UART_MspInit+0x174>)
 80021d4:	2200      	movs	r2, #0
 80021d6:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80021d8:	4b30      	ldr	r3, [pc, #192]	; (800229c <HAL_UART_MspInit+0x174>)
 80021da:	2200      	movs	r2, #0
 80021dc:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80021de:	4b2f      	ldr	r3, [pc, #188]	; (800229c <HAL_UART_MspInit+0x174>)
 80021e0:	2204      	movs	r2, #4
 80021e2:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_usart1_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_HALFFULL;
 80021e4:	4b2d      	ldr	r3, [pc, #180]	; (800229c <HAL_UART_MspInit+0x174>)
 80021e6:	2201      	movs	r2, #1
 80021e8:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_usart1_rx.Init.MemBurst = DMA_MBURST_SINGLE;
 80021ea:	4b2c      	ldr	r3, [pc, #176]	; (800229c <HAL_UART_MspInit+0x174>)
 80021ec:	2200      	movs	r2, #0
 80021ee:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_usart1_rx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 80021f0:	4b2a      	ldr	r3, [pc, #168]	; (800229c <HAL_UART_MspInit+0x174>)
 80021f2:	2200      	movs	r2, #0
 80021f4:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80021f6:	4829      	ldr	r0, [pc, #164]	; (800229c <HAL_UART_MspInit+0x174>)
 80021f8:	f000 fade 	bl	80027b8 <HAL_DMA_Init>
 80021fc:	4603      	mov	r3, r0
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d001      	beq.n	8002206 <HAL_UART_MspInit+0xde>
    {
      Error_Handler();
 8002202:	f7ff fe2f 	bl	8001e64 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	4a24      	ldr	r2, [pc, #144]	; (800229c <HAL_UART_MspInit+0x174>)
 800220a:	639a      	str	r2, [r3, #56]	; 0x38
 800220c:	4a23      	ldr	r2, [pc, #140]	; (800229c <HAL_UART_MspInit+0x174>)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002212:	e038      	b.n	8002286 <HAL_UART_MspInit+0x15e>
  else if(huart->Instance==USART2)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	4a22      	ldr	r2, [pc, #136]	; (80022a4 <HAL_UART_MspInit+0x17c>)
 800221a:	4293      	cmp	r3, r2
 800221c:	d133      	bne.n	8002286 <HAL_UART_MspInit+0x15e>
    __HAL_RCC_USART2_CLK_ENABLE();
 800221e:	2300      	movs	r3, #0
 8002220:	613b      	str	r3, [r7, #16]
 8002222:	4b1c      	ldr	r3, [pc, #112]	; (8002294 <HAL_UART_MspInit+0x16c>)
 8002224:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002226:	4a1b      	ldr	r2, [pc, #108]	; (8002294 <HAL_UART_MspInit+0x16c>)
 8002228:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800222c:	6413      	str	r3, [r2, #64]	; 0x40
 800222e:	4b19      	ldr	r3, [pc, #100]	; (8002294 <HAL_UART_MspInit+0x16c>)
 8002230:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002232:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002236:	613b      	str	r3, [r7, #16]
 8002238:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800223a:	2300      	movs	r3, #0
 800223c:	60fb      	str	r3, [r7, #12]
 800223e:	4b15      	ldr	r3, [pc, #84]	; (8002294 <HAL_UART_MspInit+0x16c>)
 8002240:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002242:	4a14      	ldr	r2, [pc, #80]	; (8002294 <HAL_UART_MspInit+0x16c>)
 8002244:	f043 0301 	orr.w	r3, r3, #1
 8002248:	6313      	str	r3, [r2, #48]	; 0x30
 800224a:	4b12      	ldr	r3, [pc, #72]	; (8002294 <HAL_UART_MspInit+0x16c>)
 800224c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800224e:	f003 0301 	and.w	r3, r3, #1
 8002252:	60fb      	str	r3, [r7, #12]
 8002254:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8002256:	230f      	movs	r3, #15
 8002258:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800225a:	2302      	movs	r3, #2
 800225c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800225e:	2300      	movs	r3, #0
 8002260:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002262:	2303      	movs	r3, #3
 8002264:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002266:	2307      	movs	r3, #7
 8002268:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800226a:	f107 031c 	add.w	r3, r7, #28
 800226e:	4619      	mov	r1, r3
 8002270:	4809      	ldr	r0, [pc, #36]	; (8002298 <HAL_UART_MspInit+0x170>)
 8002272:	f000 fea3 	bl	8002fbc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 1, 0);
 8002276:	2200      	movs	r2, #0
 8002278:	2101      	movs	r1, #1
 800227a:	2026      	movs	r0, #38	; 0x26
 800227c:	f000 fa65 	bl	800274a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002280:	2026      	movs	r0, #38	; 0x26
 8002282:	f000 fa7e 	bl	8002782 <HAL_NVIC_EnableIRQ>
}
 8002286:	bf00      	nop
 8002288:	3730      	adds	r7, #48	; 0x30
 800228a:	46bd      	mov	sp, r7
 800228c:	bd80      	pop	{r7, pc}
 800228e:	bf00      	nop
 8002290:	40011000 	.word	0x40011000
 8002294:	40023800 	.word	0x40023800
 8002298:	40020000 	.word	0x40020000
 800229c:	200002b4 	.word	0x200002b4
 80022a0:	40026440 	.word	0x40026440
 80022a4:	40004400 	.word	0x40004400

080022a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80022a8:	b480      	push	{r7}
 80022aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80022ac:	e7fe      	b.n	80022ac <NMI_Handler+0x4>

080022ae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80022ae:	b480      	push	{r7}
 80022b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80022b2:	e7fe      	b.n	80022b2 <HardFault_Handler+0x4>

080022b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80022b4:	b480      	push	{r7}
 80022b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80022b8:	e7fe      	b.n	80022b8 <MemManage_Handler+0x4>

080022ba <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80022ba:	b480      	push	{r7}
 80022bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80022be:	e7fe      	b.n	80022be <BusFault_Handler+0x4>

080022c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80022c0:	b480      	push	{r7}
 80022c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80022c4:	e7fe      	b.n	80022c4 <UsageFault_Handler+0x4>

080022c6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80022c6:	b480      	push	{r7}
 80022c8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80022ca:	bf00      	nop
 80022cc:	46bd      	mov	sp, r7
 80022ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d2:	4770      	bx	lr

080022d4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80022d4:	b480      	push	{r7}
 80022d6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80022d8:	bf00      	nop
 80022da:	46bd      	mov	sp, r7
 80022dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e0:	4770      	bx	lr

080022e2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80022e2:	b480      	push	{r7}
 80022e4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80022e6:	bf00      	nop
 80022e8:	46bd      	mov	sp, r7
 80022ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ee:	4770      	bx	lr

080022f0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80022f4:	f000 f90a 	bl	800250c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80022f8:	bf00      	nop
 80022fa:	bd80      	pop	{r7, pc}

080022fc <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(IO0_RF_Pin);
 8002300:	2002      	movs	r0, #2
 8002302:	f001 f811 	bl	8003328 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8002306:	bf00      	nop
 8002308:	bd80      	pop	{r7, pc}
	...

0800230c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002310:	4802      	ldr	r0, [pc, #8]	; (800231c <TIM2_IRQHandler+0x10>)
 8002312:	f003 fd6d 	bl	8005df0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002316:	bf00      	nop
 8002318:	bd80      	pop	{r7, pc}
 800231a:	bf00      	nop
 800231c:	200001e4 	.word	0x200001e4

08002320 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002324:	4802      	ldr	r0, [pc, #8]	; (8002330 <USART2_IRQHandler+0x10>)
 8002326:	f004 fad7 	bl	80068d8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800232a:	bf00      	nop
 800232c:	bd80      	pop	{r7, pc}
 800232e:	bf00      	nop
 8002330:	20000270 	.word	0x20000270

08002334 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(IO1_RF_Pin);
 8002338:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800233c:	f000 fff4 	bl	8003328 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(IO2_RF_Pin);
 8002340:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8002344:	f000 fff0 	bl	8003328 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(IO3_RF_Pin);
 8002348:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800234c:	f000 ffec 	bl	8003328 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(IO4_RF_Pin);
 8002350:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002354:	f000 ffe8 	bl	8003328 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002358:	bf00      	nop
 800235a:	bd80      	pop	{r7, pc}

0800235c <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8002360:	4802      	ldr	r0, [pc, #8]	; (800236c <DMA2_Stream2_IRQHandler+0x10>)
 8002362:	f000 fbc1 	bl	8002ae8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8002366:	bf00      	nop
 8002368:	bd80      	pop	{r7, pc}
 800236a:	bf00      	nop
 800236c:	200002b4 	.word	0x200002b4

08002370 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
 8002374:	4802      	ldr	r0, [pc, #8]	; (8002380 <OTG_HS_IRQHandler+0x10>)
 8002376:	f001 f93f 	bl	80035f8 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 800237a:	bf00      	nop
 800237c:	bd80      	pop	{r7, pc}
 800237e:	bf00      	nop
 8002380:	20001d18 	.word	0x20001d18

08002384 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	b086      	sub	sp, #24
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800238c:	4a14      	ldr	r2, [pc, #80]	; (80023e0 <_sbrk+0x5c>)
 800238e:	4b15      	ldr	r3, [pc, #84]	; (80023e4 <_sbrk+0x60>)
 8002390:	1ad3      	subs	r3, r2, r3
 8002392:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002394:	697b      	ldr	r3, [r7, #20]
 8002396:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002398:	4b13      	ldr	r3, [pc, #76]	; (80023e8 <_sbrk+0x64>)
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	2b00      	cmp	r3, #0
 800239e:	d102      	bne.n	80023a6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80023a0:	4b11      	ldr	r3, [pc, #68]	; (80023e8 <_sbrk+0x64>)
 80023a2:	4a12      	ldr	r2, [pc, #72]	; (80023ec <_sbrk+0x68>)
 80023a4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80023a6:	4b10      	ldr	r3, [pc, #64]	; (80023e8 <_sbrk+0x64>)
 80023a8:	681a      	ldr	r2, [r3, #0]
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	4413      	add	r3, r2
 80023ae:	693a      	ldr	r2, [r7, #16]
 80023b0:	429a      	cmp	r2, r3
 80023b2:	d207      	bcs.n	80023c4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80023b4:	f009 fc68 	bl	800bc88 <__errno>
 80023b8:	4603      	mov	r3, r0
 80023ba:	220c      	movs	r2, #12
 80023bc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80023be:	f04f 33ff 	mov.w	r3, #4294967295
 80023c2:	e009      	b.n	80023d8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80023c4:	4b08      	ldr	r3, [pc, #32]	; (80023e8 <_sbrk+0x64>)
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80023ca:	4b07      	ldr	r3, [pc, #28]	; (80023e8 <_sbrk+0x64>)
 80023cc:	681a      	ldr	r2, [r3, #0]
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	4413      	add	r3, r2
 80023d2:	4a05      	ldr	r2, [pc, #20]	; (80023e8 <_sbrk+0x64>)
 80023d4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80023d6:	68fb      	ldr	r3, [r7, #12]
}
 80023d8:	4618      	mov	r0, r3
 80023da:	3718      	adds	r7, #24
 80023dc:	46bd      	mov	sp, r7
 80023de:	bd80      	pop	{r7, pc}
 80023e0:	20020000 	.word	0x20020000
 80023e4:	00000400 	.word	0x00000400
 80023e8:	20000830 	.word	0x20000830
 80023ec:	20002458 	.word	0x20002458

080023f0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80023f0:	b480      	push	{r7}
 80023f2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80023f4:	4b06      	ldr	r3, [pc, #24]	; (8002410 <SystemInit+0x20>)
 80023f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023fa:	4a05      	ldr	r2, [pc, #20]	; (8002410 <SystemInit+0x20>)
 80023fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002400:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002404:	bf00      	nop
 8002406:	46bd      	mov	sp, r7
 8002408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240c:	4770      	bx	lr
 800240e:	bf00      	nop
 8002410:	e000ed00 	.word	0xe000ed00

08002414 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002414:	f8df d034 	ldr.w	sp, [pc, #52]	; 800244c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002418:	480d      	ldr	r0, [pc, #52]	; (8002450 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800241a:	490e      	ldr	r1, [pc, #56]	; (8002454 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800241c:	4a0e      	ldr	r2, [pc, #56]	; (8002458 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800241e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002420:	e002      	b.n	8002428 <LoopCopyDataInit>

08002422 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002422:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002424:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002426:	3304      	adds	r3, #4

08002428 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002428:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800242a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800242c:	d3f9      	bcc.n	8002422 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800242e:	4a0b      	ldr	r2, [pc, #44]	; (800245c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002430:	4c0b      	ldr	r4, [pc, #44]	; (8002460 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002432:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002434:	e001      	b.n	800243a <LoopFillZerobss>

08002436 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002436:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002438:	3204      	adds	r2, #4

0800243a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800243a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800243c:	d3fb      	bcc.n	8002436 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800243e:	f7ff ffd7 	bl	80023f0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002442:	f009 fc27 	bl	800bc94 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002446:	f7ff f983 	bl	8001750 <main>
  bx  lr    
 800244a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800244c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002450:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002454:	20000170 	.word	0x20000170
  ldr r2, =_sidata
 8002458:	0800c9c8 	.word	0x0800c9c8
  ldr r2, =_sbss
 800245c:	20000170 	.word	0x20000170
  ldr r4, =_ebss
 8002460:	20002454 	.word	0x20002454

08002464 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002464:	e7fe      	b.n	8002464 <ADC_IRQHandler>
	...

08002468 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800246c:	4b0e      	ldr	r3, [pc, #56]	; (80024a8 <HAL_Init+0x40>)
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	4a0d      	ldr	r2, [pc, #52]	; (80024a8 <HAL_Init+0x40>)
 8002472:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002476:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002478:	4b0b      	ldr	r3, [pc, #44]	; (80024a8 <HAL_Init+0x40>)
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	4a0a      	ldr	r2, [pc, #40]	; (80024a8 <HAL_Init+0x40>)
 800247e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002482:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002484:	4b08      	ldr	r3, [pc, #32]	; (80024a8 <HAL_Init+0x40>)
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	4a07      	ldr	r2, [pc, #28]	; (80024a8 <HAL_Init+0x40>)
 800248a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800248e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002490:	2003      	movs	r0, #3
 8002492:	f000 f94f 	bl	8002734 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002496:	200f      	movs	r0, #15
 8002498:	f000 f808 	bl	80024ac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800249c:	f7ff fdae 	bl	8001ffc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80024a0:	2300      	movs	r3, #0
}
 80024a2:	4618      	mov	r0, r3
 80024a4:	bd80      	pop	{r7, pc}
 80024a6:	bf00      	nop
 80024a8:	40023c00 	.word	0x40023c00

080024ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b082      	sub	sp, #8
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80024b4:	4b12      	ldr	r3, [pc, #72]	; (8002500 <HAL_InitTick+0x54>)
 80024b6:	681a      	ldr	r2, [r3, #0]
 80024b8:	4b12      	ldr	r3, [pc, #72]	; (8002504 <HAL_InitTick+0x58>)
 80024ba:	781b      	ldrb	r3, [r3, #0]
 80024bc:	4619      	mov	r1, r3
 80024be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80024c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80024c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80024ca:	4618      	mov	r0, r3
 80024cc:	f000 f967 	bl	800279e <HAL_SYSTICK_Config>
 80024d0:	4603      	mov	r3, r0
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d001      	beq.n	80024da <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80024d6:	2301      	movs	r3, #1
 80024d8:	e00e      	b.n	80024f8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	2b0f      	cmp	r3, #15
 80024de:	d80a      	bhi.n	80024f6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80024e0:	2200      	movs	r2, #0
 80024e2:	6879      	ldr	r1, [r7, #4]
 80024e4:	f04f 30ff 	mov.w	r0, #4294967295
 80024e8:	f000 f92f 	bl	800274a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80024ec:	4a06      	ldr	r2, [pc, #24]	; (8002508 <HAL_InitTick+0x5c>)
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80024f2:	2300      	movs	r3, #0
 80024f4:	e000      	b.n	80024f8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80024f6:	2301      	movs	r3, #1
}
 80024f8:	4618      	mov	r0, r3
 80024fa:	3708      	adds	r7, #8
 80024fc:	46bd      	mov	sp, r7
 80024fe:	bd80      	pop	{r7, pc}
 8002500:	20000010 	.word	0x20000010
 8002504:	20000018 	.word	0x20000018
 8002508:	20000014 	.word	0x20000014

0800250c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800250c:	b480      	push	{r7}
 800250e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002510:	4b06      	ldr	r3, [pc, #24]	; (800252c <HAL_IncTick+0x20>)
 8002512:	781b      	ldrb	r3, [r3, #0]
 8002514:	461a      	mov	r2, r3
 8002516:	4b06      	ldr	r3, [pc, #24]	; (8002530 <HAL_IncTick+0x24>)
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	4413      	add	r3, r2
 800251c:	4a04      	ldr	r2, [pc, #16]	; (8002530 <HAL_IncTick+0x24>)
 800251e:	6013      	str	r3, [r2, #0]
}
 8002520:	bf00      	nop
 8002522:	46bd      	mov	sp, r7
 8002524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002528:	4770      	bx	lr
 800252a:	bf00      	nop
 800252c:	20000018 	.word	0x20000018
 8002530:	20000834 	.word	0x20000834

08002534 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002534:	b480      	push	{r7}
 8002536:	af00      	add	r7, sp, #0
  return uwTick;
 8002538:	4b03      	ldr	r3, [pc, #12]	; (8002548 <HAL_GetTick+0x14>)
 800253a:	681b      	ldr	r3, [r3, #0]
}
 800253c:	4618      	mov	r0, r3
 800253e:	46bd      	mov	sp, r7
 8002540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002544:	4770      	bx	lr
 8002546:	bf00      	nop
 8002548:	20000834 	.word	0x20000834

0800254c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	b084      	sub	sp, #16
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002554:	f7ff ffee 	bl	8002534 <HAL_GetTick>
 8002558:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002564:	d005      	beq.n	8002572 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002566:	4b0a      	ldr	r3, [pc, #40]	; (8002590 <HAL_Delay+0x44>)
 8002568:	781b      	ldrb	r3, [r3, #0]
 800256a:	461a      	mov	r2, r3
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	4413      	add	r3, r2
 8002570:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002572:	bf00      	nop
 8002574:	f7ff ffde 	bl	8002534 <HAL_GetTick>
 8002578:	4602      	mov	r2, r0
 800257a:	68bb      	ldr	r3, [r7, #8]
 800257c:	1ad3      	subs	r3, r2, r3
 800257e:	68fa      	ldr	r2, [r7, #12]
 8002580:	429a      	cmp	r2, r3
 8002582:	d8f7      	bhi.n	8002574 <HAL_Delay+0x28>
  {
  }
}
 8002584:	bf00      	nop
 8002586:	bf00      	nop
 8002588:	3710      	adds	r7, #16
 800258a:	46bd      	mov	sp, r7
 800258c:	bd80      	pop	{r7, pc}
 800258e:	bf00      	nop
 8002590:	20000018 	.word	0x20000018

08002594 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002594:	b480      	push	{r7}
 8002596:	b085      	sub	sp, #20
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	f003 0307 	and.w	r3, r3, #7
 80025a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80025a4:	4b0c      	ldr	r3, [pc, #48]	; (80025d8 <__NVIC_SetPriorityGrouping+0x44>)
 80025a6:	68db      	ldr	r3, [r3, #12]
 80025a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80025aa:	68ba      	ldr	r2, [r7, #8]
 80025ac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80025b0:	4013      	ands	r3, r2
 80025b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80025b8:	68bb      	ldr	r3, [r7, #8]
 80025ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80025bc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80025c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80025c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80025c6:	4a04      	ldr	r2, [pc, #16]	; (80025d8 <__NVIC_SetPriorityGrouping+0x44>)
 80025c8:	68bb      	ldr	r3, [r7, #8]
 80025ca:	60d3      	str	r3, [r2, #12]
}
 80025cc:	bf00      	nop
 80025ce:	3714      	adds	r7, #20
 80025d0:	46bd      	mov	sp, r7
 80025d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d6:	4770      	bx	lr
 80025d8:	e000ed00 	.word	0xe000ed00

080025dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80025dc:	b480      	push	{r7}
 80025de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80025e0:	4b04      	ldr	r3, [pc, #16]	; (80025f4 <__NVIC_GetPriorityGrouping+0x18>)
 80025e2:	68db      	ldr	r3, [r3, #12]
 80025e4:	0a1b      	lsrs	r3, r3, #8
 80025e6:	f003 0307 	and.w	r3, r3, #7
}
 80025ea:	4618      	mov	r0, r3
 80025ec:	46bd      	mov	sp, r7
 80025ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f2:	4770      	bx	lr
 80025f4:	e000ed00 	.word	0xe000ed00

080025f8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025f8:	b480      	push	{r7}
 80025fa:	b083      	sub	sp, #12
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	4603      	mov	r3, r0
 8002600:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002602:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002606:	2b00      	cmp	r3, #0
 8002608:	db0b      	blt.n	8002622 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800260a:	79fb      	ldrb	r3, [r7, #7]
 800260c:	f003 021f 	and.w	r2, r3, #31
 8002610:	4907      	ldr	r1, [pc, #28]	; (8002630 <__NVIC_EnableIRQ+0x38>)
 8002612:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002616:	095b      	lsrs	r3, r3, #5
 8002618:	2001      	movs	r0, #1
 800261a:	fa00 f202 	lsl.w	r2, r0, r2
 800261e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002622:	bf00      	nop
 8002624:	370c      	adds	r7, #12
 8002626:	46bd      	mov	sp, r7
 8002628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262c:	4770      	bx	lr
 800262e:	bf00      	nop
 8002630:	e000e100 	.word	0xe000e100

08002634 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002634:	b480      	push	{r7}
 8002636:	b083      	sub	sp, #12
 8002638:	af00      	add	r7, sp, #0
 800263a:	4603      	mov	r3, r0
 800263c:	6039      	str	r1, [r7, #0]
 800263e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002640:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002644:	2b00      	cmp	r3, #0
 8002646:	db0a      	blt.n	800265e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002648:	683b      	ldr	r3, [r7, #0]
 800264a:	b2da      	uxtb	r2, r3
 800264c:	490c      	ldr	r1, [pc, #48]	; (8002680 <__NVIC_SetPriority+0x4c>)
 800264e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002652:	0112      	lsls	r2, r2, #4
 8002654:	b2d2      	uxtb	r2, r2
 8002656:	440b      	add	r3, r1
 8002658:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800265c:	e00a      	b.n	8002674 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800265e:	683b      	ldr	r3, [r7, #0]
 8002660:	b2da      	uxtb	r2, r3
 8002662:	4908      	ldr	r1, [pc, #32]	; (8002684 <__NVIC_SetPriority+0x50>)
 8002664:	79fb      	ldrb	r3, [r7, #7]
 8002666:	f003 030f 	and.w	r3, r3, #15
 800266a:	3b04      	subs	r3, #4
 800266c:	0112      	lsls	r2, r2, #4
 800266e:	b2d2      	uxtb	r2, r2
 8002670:	440b      	add	r3, r1
 8002672:	761a      	strb	r2, [r3, #24]
}
 8002674:	bf00      	nop
 8002676:	370c      	adds	r7, #12
 8002678:	46bd      	mov	sp, r7
 800267a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267e:	4770      	bx	lr
 8002680:	e000e100 	.word	0xe000e100
 8002684:	e000ed00 	.word	0xe000ed00

08002688 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002688:	b480      	push	{r7}
 800268a:	b089      	sub	sp, #36	; 0x24
 800268c:	af00      	add	r7, sp, #0
 800268e:	60f8      	str	r0, [r7, #12]
 8002690:	60b9      	str	r1, [r7, #8]
 8002692:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	f003 0307 	and.w	r3, r3, #7
 800269a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800269c:	69fb      	ldr	r3, [r7, #28]
 800269e:	f1c3 0307 	rsb	r3, r3, #7
 80026a2:	2b04      	cmp	r3, #4
 80026a4:	bf28      	it	cs
 80026a6:	2304      	movcs	r3, #4
 80026a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80026aa:	69fb      	ldr	r3, [r7, #28]
 80026ac:	3304      	adds	r3, #4
 80026ae:	2b06      	cmp	r3, #6
 80026b0:	d902      	bls.n	80026b8 <NVIC_EncodePriority+0x30>
 80026b2:	69fb      	ldr	r3, [r7, #28]
 80026b4:	3b03      	subs	r3, #3
 80026b6:	e000      	b.n	80026ba <NVIC_EncodePriority+0x32>
 80026b8:	2300      	movs	r3, #0
 80026ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026bc:	f04f 32ff 	mov.w	r2, #4294967295
 80026c0:	69bb      	ldr	r3, [r7, #24]
 80026c2:	fa02 f303 	lsl.w	r3, r2, r3
 80026c6:	43da      	mvns	r2, r3
 80026c8:	68bb      	ldr	r3, [r7, #8]
 80026ca:	401a      	ands	r2, r3
 80026cc:	697b      	ldr	r3, [r7, #20]
 80026ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80026d0:	f04f 31ff 	mov.w	r1, #4294967295
 80026d4:	697b      	ldr	r3, [r7, #20]
 80026d6:	fa01 f303 	lsl.w	r3, r1, r3
 80026da:	43d9      	mvns	r1, r3
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026e0:	4313      	orrs	r3, r2
         );
}
 80026e2:	4618      	mov	r0, r3
 80026e4:	3724      	adds	r7, #36	; 0x24
 80026e6:	46bd      	mov	sp, r7
 80026e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ec:	4770      	bx	lr
	...

080026f0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b082      	sub	sp, #8
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	3b01      	subs	r3, #1
 80026fc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002700:	d301      	bcc.n	8002706 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002702:	2301      	movs	r3, #1
 8002704:	e00f      	b.n	8002726 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002706:	4a0a      	ldr	r2, [pc, #40]	; (8002730 <SysTick_Config+0x40>)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	3b01      	subs	r3, #1
 800270c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800270e:	210f      	movs	r1, #15
 8002710:	f04f 30ff 	mov.w	r0, #4294967295
 8002714:	f7ff ff8e 	bl	8002634 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002718:	4b05      	ldr	r3, [pc, #20]	; (8002730 <SysTick_Config+0x40>)
 800271a:	2200      	movs	r2, #0
 800271c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800271e:	4b04      	ldr	r3, [pc, #16]	; (8002730 <SysTick_Config+0x40>)
 8002720:	2207      	movs	r2, #7
 8002722:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002724:	2300      	movs	r3, #0
}
 8002726:	4618      	mov	r0, r3
 8002728:	3708      	adds	r7, #8
 800272a:	46bd      	mov	sp, r7
 800272c:	bd80      	pop	{r7, pc}
 800272e:	bf00      	nop
 8002730:	e000e010 	.word	0xe000e010

08002734 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002734:	b580      	push	{r7, lr}
 8002736:	b082      	sub	sp, #8
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800273c:	6878      	ldr	r0, [r7, #4]
 800273e:	f7ff ff29 	bl	8002594 <__NVIC_SetPriorityGrouping>
}
 8002742:	bf00      	nop
 8002744:	3708      	adds	r7, #8
 8002746:	46bd      	mov	sp, r7
 8002748:	bd80      	pop	{r7, pc}

0800274a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800274a:	b580      	push	{r7, lr}
 800274c:	b086      	sub	sp, #24
 800274e:	af00      	add	r7, sp, #0
 8002750:	4603      	mov	r3, r0
 8002752:	60b9      	str	r1, [r7, #8]
 8002754:	607a      	str	r2, [r7, #4]
 8002756:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002758:	2300      	movs	r3, #0
 800275a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800275c:	f7ff ff3e 	bl	80025dc <__NVIC_GetPriorityGrouping>
 8002760:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002762:	687a      	ldr	r2, [r7, #4]
 8002764:	68b9      	ldr	r1, [r7, #8]
 8002766:	6978      	ldr	r0, [r7, #20]
 8002768:	f7ff ff8e 	bl	8002688 <NVIC_EncodePriority>
 800276c:	4602      	mov	r2, r0
 800276e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002772:	4611      	mov	r1, r2
 8002774:	4618      	mov	r0, r3
 8002776:	f7ff ff5d 	bl	8002634 <__NVIC_SetPriority>
}
 800277a:	bf00      	nop
 800277c:	3718      	adds	r7, #24
 800277e:	46bd      	mov	sp, r7
 8002780:	bd80      	pop	{r7, pc}

08002782 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002782:	b580      	push	{r7, lr}
 8002784:	b082      	sub	sp, #8
 8002786:	af00      	add	r7, sp, #0
 8002788:	4603      	mov	r3, r0
 800278a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800278c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002790:	4618      	mov	r0, r3
 8002792:	f7ff ff31 	bl	80025f8 <__NVIC_EnableIRQ>
}
 8002796:	bf00      	nop
 8002798:	3708      	adds	r7, #8
 800279a:	46bd      	mov	sp, r7
 800279c:	bd80      	pop	{r7, pc}

0800279e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800279e:	b580      	push	{r7, lr}
 80027a0:	b082      	sub	sp, #8
 80027a2:	af00      	add	r7, sp, #0
 80027a4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80027a6:	6878      	ldr	r0, [r7, #4]
 80027a8:	f7ff ffa2 	bl	80026f0 <SysTick_Config>
 80027ac:	4603      	mov	r3, r0
}
 80027ae:	4618      	mov	r0, r3
 80027b0:	3708      	adds	r7, #8
 80027b2:	46bd      	mov	sp, r7
 80027b4:	bd80      	pop	{r7, pc}
	...

080027b8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	b086      	sub	sp, #24
 80027bc:	af00      	add	r7, sp, #0
 80027be:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80027c0:	2300      	movs	r3, #0
 80027c2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80027c4:	f7ff feb6 	bl	8002534 <HAL_GetTick>
 80027c8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d101      	bne.n	80027d4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80027d0:	2301      	movs	r3, #1
 80027d2:	e099      	b.n	8002908 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	2202      	movs	r2, #2
 80027d8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	2200      	movs	r2, #0
 80027e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	681a      	ldr	r2, [r3, #0]
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f022 0201 	bic.w	r2, r2, #1
 80027f2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80027f4:	e00f      	b.n	8002816 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80027f6:	f7ff fe9d 	bl	8002534 <HAL_GetTick>
 80027fa:	4602      	mov	r2, r0
 80027fc:	693b      	ldr	r3, [r7, #16]
 80027fe:	1ad3      	subs	r3, r2, r3
 8002800:	2b05      	cmp	r3, #5
 8002802:	d908      	bls.n	8002816 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	2220      	movs	r2, #32
 8002808:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	2203      	movs	r2, #3
 800280e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002812:	2303      	movs	r3, #3
 8002814:	e078      	b.n	8002908 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f003 0301 	and.w	r3, r3, #1
 8002820:	2b00      	cmp	r3, #0
 8002822:	d1e8      	bne.n	80027f6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800282c:	697a      	ldr	r2, [r7, #20]
 800282e:	4b38      	ldr	r3, [pc, #224]	; (8002910 <HAL_DMA_Init+0x158>)
 8002830:	4013      	ands	r3, r2
 8002832:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	685a      	ldr	r2, [r3, #4]
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	689b      	ldr	r3, [r3, #8]
 800283c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002842:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	691b      	ldr	r3, [r3, #16]
 8002848:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800284e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	699b      	ldr	r3, [r3, #24]
 8002854:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800285a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	6a1b      	ldr	r3, [r3, #32]
 8002860:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002862:	697a      	ldr	r2, [r7, #20]
 8002864:	4313      	orrs	r3, r2
 8002866:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800286c:	2b04      	cmp	r3, #4
 800286e:	d107      	bne.n	8002880 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002878:	4313      	orrs	r3, r2
 800287a:	697a      	ldr	r2, [r7, #20]
 800287c:	4313      	orrs	r3, r2
 800287e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	697a      	ldr	r2, [r7, #20]
 8002886:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	695b      	ldr	r3, [r3, #20]
 800288e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002890:	697b      	ldr	r3, [r7, #20]
 8002892:	f023 0307 	bic.w	r3, r3, #7
 8002896:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800289c:	697a      	ldr	r2, [r7, #20]
 800289e:	4313      	orrs	r3, r2
 80028a0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028a6:	2b04      	cmp	r3, #4
 80028a8:	d117      	bne.n	80028da <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028ae:	697a      	ldr	r2, [r7, #20]
 80028b0:	4313      	orrs	r3, r2
 80028b2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d00e      	beq.n	80028da <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80028bc:	6878      	ldr	r0, [r7, #4]
 80028be:	f000 fb01 	bl	8002ec4 <DMA_CheckFifoParam>
 80028c2:	4603      	mov	r3, r0
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d008      	beq.n	80028da <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	2240      	movs	r2, #64	; 0x40
 80028cc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	2201      	movs	r2, #1
 80028d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80028d6:	2301      	movs	r3, #1
 80028d8:	e016      	b.n	8002908 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	697a      	ldr	r2, [r7, #20]
 80028e0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80028e2:	6878      	ldr	r0, [r7, #4]
 80028e4:	f000 fab8 	bl	8002e58 <DMA_CalcBaseAndBitshift>
 80028e8:	4603      	mov	r3, r0
 80028ea:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028f0:	223f      	movs	r2, #63	; 0x3f
 80028f2:	409a      	lsls	r2, r3
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	2200      	movs	r2, #0
 80028fc:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	2201      	movs	r2, #1
 8002902:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002906:	2300      	movs	r3, #0
}
 8002908:	4618      	mov	r0, r3
 800290a:	3718      	adds	r7, #24
 800290c:	46bd      	mov	sp, r7
 800290e:	bd80      	pop	{r7, pc}
 8002910:	f010803f 	.word	0xf010803f

08002914 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	b086      	sub	sp, #24
 8002918:	af00      	add	r7, sp, #0
 800291a:	60f8      	str	r0, [r7, #12]
 800291c:	60b9      	str	r1, [r7, #8]
 800291e:	607a      	str	r2, [r7, #4]
 8002920:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002922:	2300      	movs	r3, #0
 8002924:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800292a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002932:	2b01      	cmp	r3, #1
 8002934:	d101      	bne.n	800293a <HAL_DMA_Start_IT+0x26>
 8002936:	2302      	movs	r3, #2
 8002938:	e040      	b.n	80029bc <HAL_DMA_Start_IT+0xa8>
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	2201      	movs	r2, #1
 800293e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002948:	b2db      	uxtb	r3, r3
 800294a:	2b01      	cmp	r3, #1
 800294c:	d12f      	bne.n	80029ae <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	2202      	movs	r2, #2
 8002952:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	2200      	movs	r2, #0
 800295a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800295c:	683b      	ldr	r3, [r7, #0]
 800295e:	687a      	ldr	r2, [r7, #4]
 8002960:	68b9      	ldr	r1, [r7, #8]
 8002962:	68f8      	ldr	r0, [r7, #12]
 8002964:	f000 fa4a 	bl	8002dfc <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800296c:	223f      	movs	r2, #63	; 0x3f
 800296e:	409a      	lsls	r2, r3
 8002970:	693b      	ldr	r3, [r7, #16]
 8002972:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	681a      	ldr	r2, [r3, #0]
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f042 0216 	orr.w	r2, r2, #22
 8002982:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002988:	2b00      	cmp	r3, #0
 800298a:	d007      	beq.n	800299c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	681a      	ldr	r2, [r3, #0]
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f042 0208 	orr.w	r2, r2, #8
 800299a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	681a      	ldr	r2, [r3, #0]
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f042 0201 	orr.w	r2, r2, #1
 80029aa:	601a      	str	r2, [r3, #0]
 80029ac:	e005      	b.n	80029ba <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	2200      	movs	r2, #0
 80029b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80029b6:	2302      	movs	r3, #2
 80029b8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80029ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80029bc:	4618      	mov	r0, r3
 80029be:	3718      	adds	r7, #24
 80029c0:	46bd      	mov	sp, r7
 80029c2:	bd80      	pop	{r7, pc}

080029c4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	b084      	sub	sp, #16
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029d0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80029d2:	f7ff fdaf 	bl	8002534 <HAL_GetTick>
 80029d6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80029de:	b2db      	uxtb	r3, r3
 80029e0:	2b02      	cmp	r3, #2
 80029e2:	d008      	beq.n	80029f6 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	2280      	movs	r2, #128	; 0x80
 80029e8:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	2200      	movs	r2, #0
 80029ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80029f2:	2301      	movs	r3, #1
 80029f4:	e052      	b.n	8002a9c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	681a      	ldr	r2, [r3, #0]
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f022 0216 	bic.w	r2, r2, #22
 8002a04:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	695a      	ldr	r2, [r3, #20]
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002a14:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d103      	bne.n	8002a26 <HAL_DMA_Abort+0x62>
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d007      	beq.n	8002a36 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	681a      	ldr	r2, [r3, #0]
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f022 0208 	bic.w	r2, r2, #8
 8002a34:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	681a      	ldr	r2, [r3, #0]
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f022 0201 	bic.w	r2, r2, #1
 8002a44:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002a46:	e013      	b.n	8002a70 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002a48:	f7ff fd74 	bl	8002534 <HAL_GetTick>
 8002a4c:	4602      	mov	r2, r0
 8002a4e:	68bb      	ldr	r3, [r7, #8]
 8002a50:	1ad3      	subs	r3, r2, r3
 8002a52:	2b05      	cmp	r3, #5
 8002a54:	d90c      	bls.n	8002a70 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	2220      	movs	r2, #32
 8002a5a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	2203      	movs	r2, #3
 8002a60:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	2200      	movs	r2, #0
 8002a68:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002a6c:	2303      	movs	r3, #3
 8002a6e:	e015      	b.n	8002a9c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f003 0301 	and.w	r3, r3, #1
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d1e4      	bne.n	8002a48 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a82:	223f      	movs	r2, #63	; 0x3f
 8002a84:	409a      	lsls	r2, r3
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	2201      	movs	r2, #1
 8002a8e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	2200      	movs	r2, #0
 8002a96:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002a9a:	2300      	movs	r3, #0
}
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	3710      	adds	r7, #16
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	bd80      	pop	{r7, pc}

08002aa4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002aa4:	b480      	push	{r7}
 8002aa6:	b083      	sub	sp, #12
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002ab2:	b2db      	uxtb	r3, r3
 8002ab4:	2b02      	cmp	r3, #2
 8002ab6:	d004      	beq.n	8002ac2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	2280      	movs	r2, #128	; 0x80
 8002abc:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002abe:	2301      	movs	r3, #1
 8002ac0:	e00c      	b.n	8002adc <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	2205      	movs	r2, #5
 8002ac6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	681a      	ldr	r2, [r3, #0]
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f022 0201 	bic.w	r2, r2, #1
 8002ad8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002ada:	2300      	movs	r3, #0
}
 8002adc:	4618      	mov	r0, r3
 8002ade:	370c      	adds	r7, #12
 8002ae0:	46bd      	mov	sp, r7
 8002ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae6:	4770      	bx	lr

08002ae8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	b086      	sub	sp, #24
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002af0:	2300      	movs	r3, #0
 8002af2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002af4:	4b8e      	ldr	r3, [pc, #568]	; (8002d30 <HAL_DMA_IRQHandler+0x248>)
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	4a8e      	ldr	r2, [pc, #568]	; (8002d34 <HAL_DMA_IRQHandler+0x24c>)
 8002afa:	fba2 2303 	umull	r2, r3, r2, r3
 8002afe:	0a9b      	lsrs	r3, r3, #10
 8002b00:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b06:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002b08:	693b      	ldr	r3, [r7, #16]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b12:	2208      	movs	r2, #8
 8002b14:	409a      	lsls	r2, r3
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	4013      	ands	r3, r2
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d01a      	beq.n	8002b54 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f003 0304 	and.w	r3, r3, #4
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d013      	beq.n	8002b54 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	681a      	ldr	r2, [r3, #0]
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f022 0204 	bic.w	r2, r2, #4
 8002b3a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b40:	2208      	movs	r2, #8
 8002b42:	409a      	lsls	r2, r3
 8002b44:	693b      	ldr	r3, [r7, #16]
 8002b46:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b4c:	f043 0201 	orr.w	r2, r3, #1
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b58:	2201      	movs	r2, #1
 8002b5a:	409a      	lsls	r2, r3
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	4013      	ands	r3, r2
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d012      	beq.n	8002b8a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	695b      	ldr	r3, [r3, #20]
 8002b6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d00b      	beq.n	8002b8a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b76:	2201      	movs	r2, #1
 8002b78:	409a      	lsls	r2, r3
 8002b7a:	693b      	ldr	r3, [r7, #16]
 8002b7c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b82:	f043 0202 	orr.w	r2, r3, #2
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b8e:	2204      	movs	r2, #4
 8002b90:	409a      	lsls	r2, r3
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	4013      	ands	r3, r2
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d012      	beq.n	8002bc0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f003 0302 	and.w	r3, r3, #2
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d00b      	beq.n	8002bc0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bac:	2204      	movs	r2, #4
 8002bae:	409a      	lsls	r2, r3
 8002bb0:	693b      	ldr	r3, [r7, #16]
 8002bb2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bb8:	f043 0204 	orr.w	r2, r3, #4
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bc4:	2210      	movs	r2, #16
 8002bc6:	409a      	lsls	r2, r3
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	4013      	ands	r3, r2
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d043      	beq.n	8002c58 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f003 0308 	and.w	r3, r3, #8
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d03c      	beq.n	8002c58 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002be2:	2210      	movs	r2, #16
 8002be4:	409a      	lsls	r2, r3
 8002be6:	693b      	ldr	r3, [r7, #16]
 8002be8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d018      	beq.n	8002c2a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d108      	bne.n	8002c18 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d024      	beq.n	8002c58 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c12:	6878      	ldr	r0, [r7, #4]
 8002c14:	4798      	blx	r3
 8002c16:	e01f      	b.n	8002c58 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d01b      	beq.n	8002c58 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c24:	6878      	ldr	r0, [r7, #4]
 8002c26:	4798      	blx	r3
 8002c28:	e016      	b.n	8002c58 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d107      	bne.n	8002c48 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	681a      	ldr	r2, [r3, #0]
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f022 0208 	bic.w	r2, r2, #8
 8002c46:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d003      	beq.n	8002c58 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c54:	6878      	ldr	r0, [r7, #4]
 8002c56:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c5c:	2220      	movs	r2, #32
 8002c5e:	409a      	lsls	r2, r3
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	4013      	ands	r3, r2
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	f000 808f 	beq.w	8002d88 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f003 0310 	and.w	r3, r3, #16
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	f000 8087 	beq.w	8002d88 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c7e:	2220      	movs	r2, #32
 8002c80:	409a      	lsls	r2, r3
 8002c82:	693b      	ldr	r3, [r7, #16]
 8002c84:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002c8c:	b2db      	uxtb	r3, r3
 8002c8e:	2b05      	cmp	r3, #5
 8002c90:	d136      	bne.n	8002d00 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	681a      	ldr	r2, [r3, #0]
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f022 0216 	bic.w	r2, r2, #22
 8002ca0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	695a      	ldr	r2, [r3, #20]
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002cb0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d103      	bne.n	8002cc2 <HAL_DMA_IRQHandler+0x1da>
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d007      	beq.n	8002cd2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	681a      	ldr	r2, [r3, #0]
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f022 0208 	bic.w	r2, r2, #8
 8002cd0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cd6:	223f      	movs	r2, #63	; 0x3f
 8002cd8:	409a      	lsls	r2, r3
 8002cda:	693b      	ldr	r3, [r7, #16]
 8002cdc:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	2201      	movs	r2, #1
 8002ce2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	2200      	movs	r2, #0
 8002cea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d07e      	beq.n	8002df4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002cfa:	6878      	ldr	r0, [r7, #4]
 8002cfc:	4798      	blx	r3
        }
        return;
 8002cfe:	e079      	b.n	8002df4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d01d      	beq.n	8002d4a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d10d      	bne.n	8002d38 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d031      	beq.n	8002d88 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d28:	6878      	ldr	r0, [r7, #4]
 8002d2a:	4798      	blx	r3
 8002d2c:	e02c      	b.n	8002d88 <HAL_DMA_IRQHandler+0x2a0>
 8002d2e:	bf00      	nop
 8002d30:	20000010 	.word	0x20000010
 8002d34:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d023      	beq.n	8002d88 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d44:	6878      	ldr	r0, [r7, #4]
 8002d46:	4798      	blx	r3
 8002d48:	e01e      	b.n	8002d88 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d10f      	bne.n	8002d78 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	681a      	ldr	r2, [r3, #0]
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f022 0210 	bic.w	r2, r2, #16
 8002d66:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	2201      	movs	r2, #1
 8002d6c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2200      	movs	r2, #0
 8002d74:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d003      	beq.n	8002d88 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d84:	6878      	ldr	r0, [r7, #4]
 8002d86:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d032      	beq.n	8002df6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d94:	f003 0301 	and.w	r3, r3, #1
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d022      	beq.n	8002de2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	2205      	movs	r2, #5
 8002da0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	681a      	ldr	r2, [r3, #0]
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f022 0201 	bic.w	r2, r2, #1
 8002db2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002db4:	68bb      	ldr	r3, [r7, #8]
 8002db6:	3301      	adds	r3, #1
 8002db8:	60bb      	str	r3, [r7, #8]
 8002dba:	697a      	ldr	r2, [r7, #20]
 8002dbc:	429a      	cmp	r2, r3
 8002dbe:	d307      	bcc.n	8002dd0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f003 0301 	and.w	r3, r3, #1
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d1f2      	bne.n	8002db4 <HAL_DMA_IRQHandler+0x2cc>
 8002dce:	e000      	b.n	8002dd2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002dd0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	2201      	movs	r2, #1
 8002dd6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	2200      	movs	r2, #0
 8002dde:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d005      	beq.n	8002df6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002dee:	6878      	ldr	r0, [r7, #4]
 8002df0:	4798      	blx	r3
 8002df2:	e000      	b.n	8002df6 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002df4:	bf00      	nop
    }
  }
}
 8002df6:	3718      	adds	r7, #24
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	bd80      	pop	{r7, pc}

08002dfc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002dfc:	b480      	push	{r7}
 8002dfe:	b085      	sub	sp, #20
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	60f8      	str	r0, [r7, #12]
 8002e04:	60b9      	str	r1, [r7, #8]
 8002e06:	607a      	str	r2, [r7, #4]
 8002e08:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	681a      	ldr	r2, [r3, #0]
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002e18:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	683a      	ldr	r2, [r7, #0]
 8002e20:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	689b      	ldr	r3, [r3, #8]
 8002e26:	2b40      	cmp	r3, #64	; 0x40
 8002e28:	d108      	bne.n	8002e3c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	687a      	ldr	r2, [r7, #4]
 8002e30:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	68ba      	ldr	r2, [r7, #8]
 8002e38:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002e3a:	e007      	b.n	8002e4c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	68ba      	ldr	r2, [r7, #8]
 8002e42:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	687a      	ldr	r2, [r7, #4]
 8002e4a:	60da      	str	r2, [r3, #12]
}
 8002e4c:	bf00      	nop
 8002e4e:	3714      	adds	r7, #20
 8002e50:	46bd      	mov	sp, r7
 8002e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e56:	4770      	bx	lr

08002e58 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002e58:	b480      	push	{r7}
 8002e5a:	b085      	sub	sp, #20
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	b2db      	uxtb	r3, r3
 8002e66:	3b10      	subs	r3, #16
 8002e68:	4a14      	ldr	r2, [pc, #80]	; (8002ebc <DMA_CalcBaseAndBitshift+0x64>)
 8002e6a:	fba2 2303 	umull	r2, r3, r2, r3
 8002e6e:	091b      	lsrs	r3, r3, #4
 8002e70:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002e72:	4a13      	ldr	r2, [pc, #76]	; (8002ec0 <DMA_CalcBaseAndBitshift+0x68>)
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	4413      	add	r3, r2
 8002e78:	781b      	ldrb	r3, [r3, #0]
 8002e7a:	461a      	mov	r2, r3
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	2b03      	cmp	r3, #3
 8002e84:	d909      	bls.n	8002e9a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002e8e:	f023 0303 	bic.w	r3, r3, #3
 8002e92:	1d1a      	adds	r2, r3, #4
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	659a      	str	r2, [r3, #88]	; 0x58
 8002e98:	e007      	b.n	8002eaa <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002ea2:	f023 0303 	bic.w	r3, r3, #3
 8002ea6:	687a      	ldr	r2, [r7, #4]
 8002ea8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002eae:	4618      	mov	r0, r3
 8002eb0:	3714      	adds	r7, #20
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb8:	4770      	bx	lr
 8002eba:	bf00      	nop
 8002ebc:	aaaaaaab 	.word	0xaaaaaaab
 8002ec0:	0800c94c 	.word	0x0800c94c

08002ec4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002ec4:	b480      	push	{r7}
 8002ec6:	b085      	sub	sp, #20
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002ecc:	2300      	movs	r3, #0
 8002ece:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ed4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	699b      	ldr	r3, [r3, #24]
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d11f      	bne.n	8002f1e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002ede:	68bb      	ldr	r3, [r7, #8]
 8002ee0:	2b03      	cmp	r3, #3
 8002ee2:	d856      	bhi.n	8002f92 <DMA_CheckFifoParam+0xce>
 8002ee4:	a201      	add	r2, pc, #4	; (adr r2, 8002eec <DMA_CheckFifoParam+0x28>)
 8002ee6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002eea:	bf00      	nop
 8002eec:	08002efd 	.word	0x08002efd
 8002ef0:	08002f0f 	.word	0x08002f0f
 8002ef4:	08002efd 	.word	0x08002efd
 8002ef8:	08002f93 	.word	0x08002f93
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f00:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d046      	beq.n	8002f96 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002f08:	2301      	movs	r3, #1
 8002f0a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002f0c:	e043      	b.n	8002f96 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f12:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002f16:	d140      	bne.n	8002f9a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002f18:	2301      	movs	r3, #1
 8002f1a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002f1c:	e03d      	b.n	8002f9a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	699b      	ldr	r3, [r3, #24]
 8002f22:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002f26:	d121      	bne.n	8002f6c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002f28:	68bb      	ldr	r3, [r7, #8]
 8002f2a:	2b03      	cmp	r3, #3
 8002f2c:	d837      	bhi.n	8002f9e <DMA_CheckFifoParam+0xda>
 8002f2e:	a201      	add	r2, pc, #4	; (adr r2, 8002f34 <DMA_CheckFifoParam+0x70>)
 8002f30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f34:	08002f45 	.word	0x08002f45
 8002f38:	08002f4b 	.word	0x08002f4b
 8002f3c:	08002f45 	.word	0x08002f45
 8002f40:	08002f5d 	.word	0x08002f5d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002f44:	2301      	movs	r3, #1
 8002f46:	73fb      	strb	r3, [r7, #15]
      break;
 8002f48:	e030      	b.n	8002fac <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f4e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d025      	beq.n	8002fa2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002f56:	2301      	movs	r3, #1
 8002f58:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002f5a:	e022      	b.n	8002fa2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f60:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002f64:	d11f      	bne.n	8002fa6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002f66:	2301      	movs	r3, #1
 8002f68:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002f6a:	e01c      	b.n	8002fa6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002f6c:	68bb      	ldr	r3, [r7, #8]
 8002f6e:	2b02      	cmp	r3, #2
 8002f70:	d903      	bls.n	8002f7a <DMA_CheckFifoParam+0xb6>
 8002f72:	68bb      	ldr	r3, [r7, #8]
 8002f74:	2b03      	cmp	r3, #3
 8002f76:	d003      	beq.n	8002f80 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002f78:	e018      	b.n	8002fac <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002f7a:	2301      	movs	r3, #1
 8002f7c:	73fb      	strb	r3, [r7, #15]
      break;
 8002f7e:	e015      	b.n	8002fac <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f84:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d00e      	beq.n	8002faa <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002f8c:	2301      	movs	r3, #1
 8002f8e:	73fb      	strb	r3, [r7, #15]
      break;
 8002f90:	e00b      	b.n	8002faa <DMA_CheckFifoParam+0xe6>
      break;
 8002f92:	bf00      	nop
 8002f94:	e00a      	b.n	8002fac <DMA_CheckFifoParam+0xe8>
      break;
 8002f96:	bf00      	nop
 8002f98:	e008      	b.n	8002fac <DMA_CheckFifoParam+0xe8>
      break;
 8002f9a:	bf00      	nop
 8002f9c:	e006      	b.n	8002fac <DMA_CheckFifoParam+0xe8>
      break;
 8002f9e:	bf00      	nop
 8002fa0:	e004      	b.n	8002fac <DMA_CheckFifoParam+0xe8>
      break;
 8002fa2:	bf00      	nop
 8002fa4:	e002      	b.n	8002fac <DMA_CheckFifoParam+0xe8>
      break;   
 8002fa6:	bf00      	nop
 8002fa8:	e000      	b.n	8002fac <DMA_CheckFifoParam+0xe8>
      break;
 8002faa:	bf00      	nop
    }
  } 
  
  return status; 
 8002fac:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fae:	4618      	mov	r0, r3
 8002fb0:	3714      	adds	r7, #20
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb8:	4770      	bx	lr
 8002fba:	bf00      	nop

08002fbc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002fbc:	b480      	push	{r7}
 8002fbe:	b089      	sub	sp, #36	; 0x24
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	6078      	str	r0, [r7, #4]
 8002fc4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002fca:	2300      	movs	r3, #0
 8002fcc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002fce:	2300      	movs	r3, #0
 8002fd0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002fd2:	2300      	movs	r3, #0
 8002fd4:	61fb      	str	r3, [r7, #28]
 8002fd6:	e16b      	b.n	80032b0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002fd8:	2201      	movs	r2, #1
 8002fda:	69fb      	ldr	r3, [r7, #28]
 8002fdc:	fa02 f303 	lsl.w	r3, r2, r3
 8002fe0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002fe2:	683b      	ldr	r3, [r7, #0]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	697a      	ldr	r2, [r7, #20]
 8002fe8:	4013      	ands	r3, r2
 8002fea:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002fec:	693a      	ldr	r2, [r7, #16]
 8002fee:	697b      	ldr	r3, [r7, #20]
 8002ff0:	429a      	cmp	r2, r3
 8002ff2:	f040 815a 	bne.w	80032aa <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002ff6:	683b      	ldr	r3, [r7, #0]
 8002ff8:	685b      	ldr	r3, [r3, #4]
 8002ffa:	f003 0303 	and.w	r3, r3, #3
 8002ffe:	2b01      	cmp	r3, #1
 8003000:	d005      	beq.n	800300e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003002:	683b      	ldr	r3, [r7, #0]
 8003004:	685b      	ldr	r3, [r3, #4]
 8003006:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800300a:	2b02      	cmp	r3, #2
 800300c:	d130      	bne.n	8003070 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	689b      	ldr	r3, [r3, #8]
 8003012:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003014:	69fb      	ldr	r3, [r7, #28]
 8003016:	005b      	lsls	r3, r3, #1
 8003018:	2203      	movs	r2, #3
 800301a:	fa02 f303 	lsl.w	r3, r2, r3
 800301e:	43db      	mvns	r3, r3
 8003020:	69ba      	ldr	r2, [r7, #24]
 8003022:	4013      	ands	r3, r2
 8003024:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003026:	683b      	ldr	r3, [r7, #0]
 8003028:	68da      	ldr	r2, [r3, #12]
 800302a:	69fb      	ldr	r3, [r7, #28]
 800302c:	005b      	lsls	r3, r3, #1
 800302e:	fa02 f303 	lsl.w	r3, r2, r3
 8003032:	69ba      	ldr	r2, [r7, #24]
 8003034:	4313      	orrs	r3, r2
 8003036:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	69ba      	ldr	r2, [r7, #24]
 800303c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	685b      	ldr	r3, [r3, #4]
 8003042:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003044:	2201      	movs	r2, #1
 8003046:	69fb      	ldr	r3, [r7, #28]
 8003048:	fa02 f303 	lsl.w	r3, r2, r3
 800304c:	43db      	mvns	r3, r3
 800304e:	69ba      	ldr	r2, [r7, #24]
 8003050:	4013      	ands	r3, r2
 8003052:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003054:	683b      	ldr	r3, [r7, #0]
 8003056:	685b      	ldr	r3, [r3, #4]
 8003058:	091b      	lsrs	r3, r3, #4
 800305a:	f003 0201 	and.w	r2, r3, #1
 800305e:	69fb      	ldr	r3, [r7, #28]
 8003060:	fa02 f303 	lsl.w	r3, r2, r3
 8003064:	69ba      	ldr	r2, [r7, #24]
 8003066:	4313      	orrs	r3, r2
 8003068:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	69ba      	ldr	r2, [r7, #24]
 800306e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003070:	683b      	ldr	r3, [r7, #0]
 8003072:	685b      	ldr	r3, [r3, #4]
 8003074:	f003 0303 	and.w	r3, r3, #3
 8003078:	2b03      	cmp	r3, #3
 800307a:	d017      	beq.n	80030ac <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	68db      	ldr	r3, [r3, #12]
 8003080:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003082:	69fb      	ldr	r3, [r7, #28]
 8003084:	005b      	lsls	r3, r3, #1
 8003086:	2203      	movs	r2, #3
 8003088:	fa02 f303 	lsl.w	r3, r2, r3
 800308c:	43db      	mvns	r3, r3
 800308e:	69ba      	ldr	r2, [r7, #24]
 8003090:	4013      	ands	r3, r2
 8003092:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003094:	683b      	ldr	r3, [r7, #0]
 8003096:	689a      	ldr	r2, [r3, #8]
 8003098:	69fb      	ldr	r3, [r7, #28]
 800309a:	005b      	lsls	r3, r3, #1
 800309c:	fa02 f303 	lsl.w	r3, r2, r3
 80030a0:	69ba      	ldr	r2, [r7, #24]
 80030a2:	4313      	orrs	r3, r2
 80030a4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	69ba      	ldr	r2, [r7, #24]
 80030aa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80030ac:	683b      	ldr	r3, [r7, #0]
 80030ae:	685b      	ldr	r3, [r3, #4]
 80030b0:	f003 0303 	and.w	r3, r3, #3
 80030b4:	2b02      	cmp	r3, #2
 80030b6:	d123      	bne.n	8003100 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80030b8:	69fb      	ldr	r3, [r7, #28]
 80030ba:	08da      	lsrs	r2, r3, #3
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	3208      	adds	r2, #8
 80030c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80030c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80030c6:	69fb      	ldr	r3, [r7, #28]
 80030c8:	f003 0307 	and.w	r3, r3, #7
 80030cc:	009b      	lsls	r3, r3, #2
 80030ce:	220f      	movs	r2, #15
 80030d0:	fa02 f303 	lsl.w	r3, r2, r3
 80030d4:	43db      	mvns	r3, r3
 80030d6:	69ba      	ldr	r2, [r7, #24]
 80030d8:	4013      	ands	r3, r2
 80030da:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80030dc:	683b      	ldr	r3, [r7, #0]
 80030de:	691a      	ldr	r2, [r3, #16]
 80030e0:	69fb      	ldr	r3, [r7, #28]
 80030e2:	f003 0307 	and.w	r3, r3, #7
 80030e6:	009b      	lsls	r3, r3, #2
 80030e8:	fa02 f303 	lsl.w	r3, r2, r3
 80030ec:	69ba      	ldr	r2, [r7, #24]
 80030ee:	4313      	orrs	r3, r2
 80030f0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80030f2:	69fb      	ldr	r3, [r7, #28]
 80030f4:	08da      	lsrs	r2, r3, #3
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	3208      	adds	r2, #8
 80030fa:	69b9      	ldr	r1, [r7, #24]
 80030fc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003106:	69fb      	ldr	r3, [r7, #28]
 8003108:	005b      	lsls	r3, r3, #1
 800310a:	2203      	movs	r2, #3
 800310c:	fa02 f303 	lsl.w	r3, r2, r3
 8003110:	43db      	mvns	r3, r3
 8003112:	69ba      	ldr	r2, [r7, #24]
 8003114:	4013      	ands	r3, r2
 8003116:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003118:	683b      	ldr	r3, [r7, #0]
 800311a:	685b      	ldr	r3, [r3, #4]
 800311c:	f003 0203 	and.w	r2, r3, #3
 8003120:	69fb      	ldr	r3, [r7, #28]
 8003122:	005b      	lsls	r3, r3, #1
 8003124:	fa02 f303 	lsl.w	r3, r2, r3
 8003128:	69ba      	ldr	r2, [r7, #24]
 800312a:	4313      	orrs	r3, r2
 800312c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	69ba      	ldr	r2, [r7, #24]
 8003132:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003134:	683b      	ldr	r3, [r7, #0]
 8003136:	685b      	ldr	r3, [r3, #4]
 8003138:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800313c:	2b00      	cmp	r3, #0
 800313e:	f000 80b4 	beq.w	80032aa <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003142:	2300      	movs	r3, #0
 8003144:	60fb      	str	r3, [r7, #12]
 8003146:	4b60      	ldr	r3, [pc, #384]	; (80032c8 <HAL_GPIO_Init+0x30c>)
 8003148:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800314a:	4a5f      	ldr	r2, [pc, #380]	; (80032c8 <HAL_GPIO_Init+0x30c>)
 800314c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003150:	6453      	str	r3, [r2, #68]	; 0x44
 8003152:	4b5d      	ldr	r3, [pc, #372]	; (80032c8 <HAL_GPIO_Init+0x30c>)
 8003154:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003156:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800315a:	60fb      	str	r3, [r7, #12]
 800315c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800315e:	4a5b      	ldr	r2, [pc, #364]	; (80032cc <HAL_GPIO_Init+0x310>)
 8003160:	69fb      	ldr	r3, [r7, #28]
 8003162:	089b      	lsrs	r3, r3, #2
 8003164:	3302      	adds	r3, #2
 8003166:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800316a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800316c:	69fb      	ldr	r3, [r7, #28]
 800316e:	f003 0303 	and.w	r3, r3, #3
 8003172:	009b      	lsls	r3, r3, #2
 8003174:	220f      	movs	r2, #15
 8003176:	fa02 f303 	lsl.w	r3, r2, r3
 800317a:	43db      	mvns	r3, r3
 800317c:	69ba      	ldr	r2, [r7, #24]
 800317e:	4013      	ands	r3, r2
 8003180:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	4a52      	ldr	r2, [pc, #328]	; (80032d0 <HAL_GPIO_Init+0x314>)
 8003186:	4293      	cmp	r3, r2
 8003188:	d02b      	beq.n	80031e2 <HAL_GPIO_Init+0x226>
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	4a51      	ldr	r2, [pc, #324]	; (80032d4 <HAL_GPIO_Init+0x318>)
 800318e:	4293      	cmp	r3, r2
 8003190:	d025      	beq.n	80031de <HAL_GPIO_Init+0x222>
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	4a50      	ldr	r2, [pc, #320]	; (80032d8 <HAL_GPIO_Init+0x31c>)
 8003196:	4293      	cmp	r3, r2
 8003198:	d01f      	beq.n	80031da <HAL_GPIO_Init+0x21e>
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	4a4f      	ldr	r2, [pc, #316]	; (80032dc <HAL_GPIO_Init+0x320>)
 800319e:	4293      	cmp	r3, r2
 80031a0:	d019      	beq.n	80031d6 <HAL_GPIO_Init+0x21a>
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	4a4e      	ldr	r2, [pc, #312]	; (80032e0 <HAL_GPIO_Init+0x324>)
 80031a6:	4293      	cmp	r3, r2
 80031a8:	d013      	beq.n	80031d2 <HAL_GPIO_Init+0x216>
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	4a4d      	ldr	r2, [pc, #308]	; (80032e4 <HAL_GPIO_Init+0x328>)
 80031ae:	4293      	cmp	r3, r2
 80031b0:	d00d      	beq.n	80031ce <HAL_GPIO_Init+0x212>
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	4a4c      	ldr	r2, [pc, #304]	; (80032e8 <HAL_GPIO_Init+0x32c>)
 80031b6:	4293      	cmp	r3, r2
 80031b8:	d007      	beq.n	80031ca <HAL_GPIO_Init+0x20e>
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	4a4b      	ldr	r2, [pc, #300]	; (80032ec <HAL_GPIO_Init+0x330>)
 80031be:	4293      	cmp	r3, r2
 80031c0:	d101      	bne.n	80031c6 <HAL_GPIO_Init+0x20a>
 80031c2:	2307      	movs	r3, #7
 80031c4:	e00e      	b.n	80031e4 <HAL_GPIO_Init+0x228>
 80031c6:	2308      	movs	r3, #8
 80031c8:	e00c      	b.n	80031e4 <HAL_GPIO_Init+0x228>
 80031ca:	2306      	movs	r3, #6
 80031cc:	e00a      	b.n	80031e4 <HAL_GPIO_Init+0x228>
 80031ce:	2305      	movs	r3, #5
 80031d0:	e008      	b.n	80031e4 <HAL_GPIO_Init+0x228>
 80031d2:	2304      	movs	r3, #4
 80031d4:	e006      	b.n	80031e4 <HAL_GPIO_Init+0x228>
 80031d6:	2303      	movs	r3, #3
 80031d8:	e004      	b.n	80031e4 <HAL_GPIO_Init+0x228>
 80031da:	2302      	movs	r3, #2
 80031dc:	e002      	b.n	80031e4 <HAL_GPIO_Init+0x228>
 80031de:	2301      	movs	r3, #1
 80031e0:	e000      	b.n	80031e4 <HAL_GPIO_Init+0x228>
 80031e2:	2300      	movs	r3, #0
 80031e4:	69fa      	ldr	r2, [r7, #28]
 80031e6:	f002 0203 	and.w	r2, r2, #3
 80031ea:	0092      	lsls	r2, r2, #2
 80031ec:	4093      	lsls	r3, r2
 80031ee:	69ba      	ldr	r2, [r7, #24]
 80031f0:	4313      	orrs	r3, r2
 80031f2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80031f4:	4935      	ldr	r1, [pc, #212]	; (80032cc <HAL_GPIO_Init+0x310>)
 80031f6:	69fb      	ldr	r3, [r7, #28]
 80031f8:	089b      	lsrs	r3, r3, #2
 80031fa:	3302      	adds	r3, #2
 80031fc:	69ba      	ldr	r2, [r7, #24]
 80031fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003202:	4b3b      	ldr	r3, [pc, #236]	; (80032f0 <HAL_GPIO_Init+0x334>)
 8003204:	689b      	ldr	r3, [r3, #8]
 8003206:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003208:	693b      	ldr	r3, [r7, #16]
 800320a:	43db      	mvns	r3, r3
 800320c:	69ba      	ldr	r2, [r7, #24]
 800320e:	4013      	ands	r3, r2
 8003210:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003212:	683b      	ldr	r3, [r7, #0]
 8003214:	685b      	ldr	r3, [r3, #4]
 8003216:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800321a:	2b00      	cmp	r3, #0
 800321c:	d003      	beq.n	8003226 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800321e:	69ba      	ldr	r2, [r7, #24]
 8003220:	693b      	ldr	r3, [r7, #16]
 8003222:	4313      	orrs	r3, r2
 8003224:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003226:	4a32      	ldr	r2, [pc, #200]	; (80032f0 <HAL_GPIO_Init+0x334>)
 8003228:	69bb      	ldr	r3, [r7, #24]
 800322a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800322c:	4b30      	ldr	r3, [pc, #192]	; (80032f0 <HAL_GPIO_Init+0x334>)
 800322e:	68db      	ldr	r3, [r3, #12]
 8003230:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003232:	693b      	ldr	r3, [r7, #16]
 8003234:	43db      	mvns	r3, r3
 8003236:	69ba      	ldr	r2, [r7, #24]
 8003238:	4013      	ands	r3, r2
 800323a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800323c:	683b      	ldr	r3, [r7, #0]
 800323e:	685b      	ldr	r3, [r3, #4]
 8003240:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003244:	2b00      	cmp	r3, #0
 8003246:	d003      	beq.n	8003250 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003248:	69ba      	ldr	r2, [r7, #24]
 800324a:	693b      	ldr	r3, [r7, #16]
 800324c:	4313      	orrs	r3, r2
 800324e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003250:	4a27      	ldr	r2, [pc, #156]	; (80032f0 <HAL_GPIO_Init+0x334>)
 8003252:	69bb      	ldr	r3, [r7, #24]
 8003254:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003256:	4b26      	ldr	r3, [pc, #152]	; (80032f0 <HAL_GPIO_Init+0x334>)
 8003258:	685b      	ldr	r3, [r3, #4]
 800325a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800325c:	693b      	ldr	r3, [r7, #16]
 800325e:	43db      	mvns	r3, r3
 8003260:	69ba      	ldr	r2, [r7, #24]
 8003262:	4013      	ands	r3, r2
 8003264:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003266:	683b      	ldr	r3, [r7, #0]
 8003268:	685b      	ldr	r3, [r3, #4]
 800326a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800326e:	2b00      	cmp	r3, #0
 8003270:	d003      	beq.n	800327a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003272:	69ba      	ldr	r2, [r7, #24]
 8003274:	693b      	ldr	r3, [r7, #16]
 8003276:	4313      	orrs	r3, r2
 8003278:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800327a:	4a1d      	ldr	r2, [pc, #116]	; (80032f0 <HAL_GPIO_Init+0x334>)
 800327c:	69bb      	ldr	r3, [r7, #24]
 800327e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003280:	4b1b      	ldr	r3, [pc, #108]	; (80032f0 <HAL_GPIO_Init+0x334>)
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003286:	693b      	ldr	r3, [r7, #16]
 8003288:	43db      	mvns	r3, r3
 800328a:	69ba      	ldr	r2, [r7, #24]
 800328c:	4013      	ands	r3, r2
 800328e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003290:	683b      	ldr	r3, [r7, #0]
 8003292:	685b      	ldr	r3, [r3, #4]
 8003294:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003298:	2b00      	cmp	r3, #0
 800329a:	d003      	beq.n	80032a4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800329c:	69ba      	ldr	r2, [r7, #24]
 800329e:	693b      	ldr	r3, [r7, #16]
 80032a0:	4313      	orrs	r3, r2
 80032a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80032a4:	4a12      	ldr	r2, [pc, #72]	; (80032f0 <HAL_GPIO_Init+0x334>)
 80032a6:	69bb      	ldr	r3, [r7, #24]
 80032a8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80032aa:	69fb      	ldr	r3, [r7, #28]
 80032ac:	3301      	adds	r3, #1
 80032ae:	61fb      	str	r3, [r7, #28]
 80032b0:	69fb      	ldr	r3, [r7, #28]
 80032b2:	2b0f      	cmp	r3, #15
 80032b4:	f67f ae90 	bls.w	8002fd8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80032b8:	bf00      	nop
 80032ba:	bf00      	nop
 80032bc:	3724      	adds	r7, #36	; 0x24
 80032be:	46bd      	mov	sp, r7
 80032c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c4:	4770      	bx	lr
 80032c6:	bf00      	nop
 80032c8:	40023800 	.word	0x40023800
 80032cc:	40013800 	.word	0x40013800
 80032d0:	40020000 	.word	0x40020000
 80032d4:	40020400 	.word	0x40020400
 80032d8:	40020800 	.word	0x40020800
 80032dc:	40020c00 	.word	0x40020c00
 80032e0:	40021000 	.word	0x40021000
 80032e4:	40021400 	.word	0x40021400
 80032e8:	40021800 	.word	0x40021800
 80032ec:	40021c00 	.word	0x40021c00
 80032f0:	40013c00 	.word	0x40013c00

080032f4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80032f4:	b480      	push	{r7}
 80032f6:	b083      	sub	sp, #12
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	6078      	str	r0, [r7, #4]
 80032fc:	460b      	mov	r3, r1
 80032fe:	807b      	strh	r3, [r7, #2]
 8003300:	4613      	mov	r3, r2
 8003302:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003304:	787b      	ldrb	r3, [r7, #1]
 8003306:	2b00      	cmp	r3, #0
 8003308:	d003      	beq.n	8003312 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800330a:	887a      	ldrh	r2, [r7, #2]
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003310:	e003      	b.n	800331a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003312:	887b      	ldrh	r3, [r7, #2]
 8003314:	041a      	lsls	r2, r3, #16
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	619a      	str	r2, [r3, #24]
}
 800331a:	bf00      	nop
 800331c:	370c      	adds	r7, #12
 800331e:	46bd      	mov	sp, r7
 8003320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003324:	4770      	bx	lr
	...

08003328 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003328:	b580      	push	{r7, lr}
 800332a:	b082      	sub	sp, #8
 800332c:	af00      	add	r7, sp, #0
 800332e:	4603      	mov	r3, r0
 8003330:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003332:	4b08      	ldr	r3, [pc, #32]	; (8003354 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003334:	695a      	ldr	r2, [r3, #20]
 8003336:	88fb      	ldrh	r3, [r7, #6]
 8003338:	4013      	ands	r3, r2
 800333a:	2b00      	cmp	r3, #0
 800333c:	d006      	beq.n	800334c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800333e:	4a05      	ldr	r2, [pc, #20]	; (8003354 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003340:	88fb      	ldrh	r3, [r7, #6]
 8003342:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003344:	88fb      	ldrh	r3, [r7, #6]
 8003346:	4618      	mov	r0, r3
 8003348:	f7fe fcf8 	bl	8001d3c <HAL_GPIO_EXTI_Callback>
  }
}
 800334c:	bf00      	nop
 800334e:	3708      	adds	r7, #8
 8003350:	46bd      	mov	sp, r7
 8003352:	bd80      	pop	{r7, pc}
 8003354:	40013c00 	.word	0x40013c00

08003358 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003358:	b5f0      	push	{r4, r5, r6, r7, lr}
 800335a:	b08f      	sub	sp, #60	; 0x3c
 800335c:	af0a      	add	r7, sp, #40	; 0x28
 800335e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	2b00      	cmp	r3, #0
 8003364:	d101      	bne.n	800336a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003366:	2301      	movs	r3, #1
 8003368:	e10f      	b.n	800358a <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8003376:	b2db      	uxtb	r3, r3
 8003378:	2b00      	cmp	r3, #0
 800337a:	d106      	bne.n	800338a <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	2200      	movs	r2, #0
 8003380:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003384:	6878      	ldr	r0, [r7, #4]
 8003386:	f008 f969 	bl	800b65c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	2203      	movs	r2, #3
 800338e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003392:	68bb      	ldr	r3, [r7, #8]
 8003394:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003396:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800339a:	2b00      	cmp	r3, #0
 800339c:	d102      	bne.n	80033a4 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	2200      	movs	r2, #0
 80033a2:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	4618      	mov	r0, r3
 80033aa:	f004 fc92 	bl	8007cd2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	603b      	str	r3, [r7, #0]
 80033b4:	687e      	ldr	r6, [r7, #4]
 80033b6:	466d      	mov	r5, sp
 80033b8:	f106 0410 	add.w	r4, r6, #16
 80033bc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80033be:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80033c0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80033c2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80033c4:	e894 0003 	ldmia.w	r4, {r0, r1}
 80033c8:	e885 0003 	stmia.w	r5, {r0, r1}
 80033cc:	1d33      	adds	r3, r6, #4
 80033ce:	cb0e      	ldmia	r3, {r1, r2, r3}
 80033d0:	6838      	ldr	r0, [r7, #0]
 80033d2:	f004 fb69 	bl	8007aa8 <USB_CoreInit>
 80033d6:	4603      	mov	r3, r0
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d005      	beq.n	80033e8 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	2202      	movs	r2, #2
 80033e0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80033e4:	2301      	movs	r3, #1
 80033e6:	e0d0      	b.n	800358a <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	2100      	movs	r1, #0
 80033ee:	4618      	mov	r0, r3
 80033f0:	f004 fc80 	bl	8007cf4 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80033f4:	2300      	movs	r3, #0
 80033f6:	73fb      	strb	r3, [r7, #15]
 80033f8:	e04a      	b.n	8003490 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80033fa:	7bfa      	ldrb	r2, [r7, #15]
 80033fc:	6879      	ldr	r1, [r7, #4]
 80033fe:	4613      	mov	r3, r2
 8003400:	00db      	lsls	r3, r3, #3
 8003402:	4413      	add	r3, r2
 8003404:	009b      	lsls	r3, r3, #2
 8003406:	440b      	add	r3, r1
 8003408:	333d      	adds	r3, #61	; 0x3d
 800340a:	2201      	movs	r2, #1
 800340c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800340e:	7bfa      	ldrb	r2, [r7, #15]
 8003410:	6879      	ldr	r1, [r7, #4]
 8003412:	4613      	mov	r3, r2
 8003414:	00db      	lsls	r3, r3, #3
 8003416:	4413      	add	r3, r2
 8003418:	009b      	lsls	r3, r3, #2
 800341a:	440b      	add	r3, r1
 800341c:	333c      	adds	r3, #60	; 0x3c
 800341e:	7bfa      	ldrb	r2, [r7, #15]
 8003420:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003422:	7bfa      	ldrb	r2, [r7, #15]
 8003424:	7bfb      	ldrb	r3, [r7, #15]
 8003426:	b298      	uxth	r0, r3
 8003428:	6879      	ldr	r1, [r7, #4]
 800342a:	4613      	mov	r3, r2
 800342c:	00db      	lsls	r3, r3, #3
 800342e:	4413      	add	r3, r2
 8003430:	009b      	lsls	r3, r3, #2
 8003432:	440b      	add	r3, r1
 8003434:	3344      	adds	r3, #68	; 0x44
 8003436:	4602      	mov	r2, r0
 8003438:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800343a:	7bfa      	ldrb	r2, [r7, #15]
 800343c:	6879      	ldr	r1, [r7, #4]
 800343e:	4613      	mov	r3, r2
 8003440:	00db      	lsls	r3, r3, #3
 8003442:	4413      	add	r3, r2
 8003444:	009b      	lsls	r3, r3, #2
 8003446:	440b      	add	r3, r1
 8003448:	3340      	adds	r3, #64	; 0x40
 800344a:	2200      	movs	r2, #0
 800344c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800344e:	7bfa      	ldrb	r2, [r7, #15]
 8003450:	6879      	ldr	r1, [r7, #4]
 8003452:	4613      	mov	r3, r2
 8003454:	00db      	lsls	r3, r3, #3
 8003456:	4413      	add	r3, r2
 8003458:	009b      	lsls	r3, r3, #2
 800345a:	440b      	add	r3, r1
 800345c:	3348      	adds	r3, #72	; 0x48
 800345e:	2200      	movs	r2, #0
 8003460:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003462:	7bfa      	ldrb	r2, [r7, #15]
 8003464:	6879      	ldr	r1, [r7, #4]
 8003466:	4613      	mov	r3, r2
 8003468:	00db      	lsls	r3, r3, #3
 800346a:	4413      	add	r3, r2
 800346c:	009b      	lsls	r3, r3, #2
 800346e:	440b      	add	r3, r1
 8003470:	334c      	adds	r3, #76	; 0x4c
 8003472:	2200      	movs	r2, #0
 8003474:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003476:	7bfa      	ldrb	r2, [r7, #15]
 8003478:	6879      	ldr	r1, [r7, #4]
 800347a:	4613      	mov	r3, r2
 800347c:	00db      	lsls	r3, r3, #3
 800347e:	4413      	add	r3, r2
 8003480:	009b      	lsls	r3, r3, #2
 8003482:	440b      	add	r3, r1
 8003484:	3354      	adds	r3, #84	; 0x54
 8003486:	2200      	movs	r2, #0
 8003488:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800348a:	7bfb      	ldrb	r3, [r7, #15]
 800348c:	3301      	adds	r3, #1
 800348e:	73fb      	strb	r3, [r7, #15]
 8003490:	7bfa      	ldrb	r2, [r7, #15]
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	685b      	ldr	r3, [r3, #4]
 8003496:	429a      	cmp	r2, r3
 8003498:	d3af      	bcc.n	80033fa <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800349a:	2300      	movs	r3, #0
 800349c:	73fb      	strb	r3, [r7, #15]
 800349e:	e044      	b.n	800352a <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80034a0:	7bfa      	ldrb	r2, [r7, #15]
 80034a2:	6879      	ldr	r1, [r7, #4]
 80034a4:	4613      	mov	r3, r2
 80034a6:	00db      	lsls	r3, r3, #3
 80034a8:	4413      	add	r3, r2
 80034aa:	009b      	lsls	r3, r3, #2
 80034ac:	440b      	add	r3, r1
 80034ae:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80034b2:	2200      	movs	r2, #0
 80034b4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80034b6:	7bfa      	ldrb	r2, [r7, #15]
 80034b8:	6879      	ldr	r1, [r7, #4]
 80034ba:	4613      	mov	r3, r2
 80034bc:	00db      	lsls	r3, r3, #3
 80034be:	4413      	add	r3, r2
 80034c0:	009b      	lsls	r3, r3, #2
 80034c2:	440b      	add	r3, r1
 80034c4:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80034c8:	7bfa      	ldrb	r2, [r7, #15]
 80034ca:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80034cc:	7bfa      	ldrb	r2, [r7, #15]
 80034ce:	6879      	ldr	r1, [r7, #4]
 80034d0:	4613      	mov	r3, r2
 80034d2:	00db      	lsls	r3, r3, #3
 80034d4:	4413      	add	r3, r2
 80034d6:	009b      	lsls	r3, r3, #2
 80034d8:	440b      	add	r3, r1
 80034da:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80034de:	2200      	movs	r2, #0
 80034e0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80034e2:	7bfa      	ldrb	r2, [r7, #15]
 80034e4:	6879      	ldr	r1, [r7, #4]
 80034e6:	4613      	mov	r3, r2
 80034e8:	00db      	lsls	r3, r3, #3
 80034ea:	4413      	add	r3, r2
 80034ec:	009b      	lsls	r3, r3, #2
 80034ee:	440b      	add	r3, r1
 80034f0:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80034f4:	2200      	movs	r2, #0
 80034f6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80034f8:	7bfa      	ldrb	r2, [r7, #15]
 80034fa:	6879      	ldr	r1, [r7, #4]
 80034fc:	4613      	mov	r3, r2
 80034fe:	00db      	lsls	r3, r3, #3
 8003500:	4413      	add	r3, r2
 8003502:	009b      	lsls	r3, r3, #2
 8003504:	440b      	add	r3, r1
 8003506:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800350a:	2200      	movs	r2, #0
 800350c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800350e:	7bfa      	ldrb	r2, [r7, #15]
 8003510:	6879      	ldr	r1, [r7, #4]
 8003512:	4613      	mov	r3, r2
 8003514:	00db      	lsls	r3, r3, #3
 8003516:	4413      	add	r3, r2
 8003518:	009b      	lsls	r3, r3, #2
 800351a:	440b      	add	r3, r1
 800351c:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8003520:	2200      	movs	r2, #0
 8003522:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003524:	7bfb      	ldrb	r3, [r7, #15]
 8003526:	3301      	adds	r3, #1
 8003528:	73fb      	strb	r3, [r7, #15]
 800352a:	7bfa      	ldrb	r2, [r7, #15]
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	685b      	ldr	r3, [r3, #4]
 8003530:	429a      	cmp	r2, r3
 8003532:	d3b5      	bcc.n	80034a0 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	603b      	str	r3, [r7, #0]
 800353a:	687e      	ldr	r6, [r7, #4]
 800353c:	466d      	mov	r5, sp
 800353e:	f106 0410 	add.w	r4, r6, #16
 8003542:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003544:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003546:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003548:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800354a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800354e:	e885 0003 	stmia.w	r5, {r0, r1}
 8003552:	1d33      	adds	r3, r6, #4
 8003554:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003556:	6838      	ldr	r0, [r7, #0]
 8003558:	f004 fc18 	bl	8007d8c <USB_DevInit>
 800355c:	4603      	mov	r3, r0
 800355e:	2b00      	cmp	r3, #0
 8003560:	d005      	beq.n	800356e <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	2202      	movs	r2, #2
 8003566:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800356a:	2301      	movs	r3, #1
 800356c:	e00d      	b.n	800358a <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	2200      	movs	r2, #0
 8003572:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	2201      	movs	r2, #1
 800357a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	4618      	mov	r0, r3
 8003584:	f005 fd67 	bl	8009056 <USB_DevDisconnect>

  return HAL_OK;
 8003588:	2300      	movs	r3, #0
}
 800358a:	4618      	mov	r0, r3
 800358c:	3714      	adds	r7, #20
 800358e:	46bd      	mov	sp, r7
 8003590:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003592 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003592:	b580      	push	{r7, lr}
 8003594:	b084      	sub	sp, #16
 8003596:	af00      	add	r7, sp, #0
 8003598:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80035a6:	2b01      	cmp	r3, #1
 80035a8:	d101      	bne.n	80035ae <HAL_PCD_Start+0x1c>
 80035aa:	2302      	movs	r3, #2
 80035ac:	e020      	b.n	80035f0 <HAL_PCD_Start+0x5e>
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	2201      	movs	r2, #1
 80035b2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035ba:	2b01      	cmp	r3, #1
 80035bc:	d109      	bne.n	80035d2 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80035c2:	2b01      	cmp	r3, #1
 80035c4:	d005      	beq.n	80035d2 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035ca:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	4618      	mov	r0, r3
 80035d8:	f004 fb6a 	bl	8007cb0 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	4618      	mov	r0, r3
 80035e2:	f005 fd17 	bl	8009014 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	2200      	movs	r2, #0
 80035ea:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80035ee:	2300      	movs	r3, #0
}
 80035f0:	4618      	mov	r0, r3
 80035f2:	3710      	adds	r7, #16
 80035f4:	46bd      	mov	sp, r7
 80035f6:	bd80      	pop	{r7, pc}

080035f8 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80035f8:	b590      	push	{r4, r7, lr}
 80035fa:	b08d      	sub	sp, #52	; 0x34
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003606:	6a3b      	ldr	r3, [r7, #32]
 8003608:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	4618      	mov	r0, r3
 8003610:	f005 fdd5 	bl	80091be <USB_GetMode>
 8003614:	4603      	mov	r3, r0
 8003616:	2b00      	cmp	r3, #0
 8003618:	f040 848a 	bne.w	8003f30 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	4618      	mov	r0, r3
 8003622:	f005 fd39 	bl	8009098 <USB_ReadInterrupts>
 8003626:	4603      	mov	r3, r0
 8003628:	2b00      	cmp	r3, #0
 800362a:	f000 8480 	beq.w	8003f2e <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800362e:	69fb      	ldr	r3, [r7, #28]
 8003630:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003634:	689b      	ldr	r3, [r3, #8]
 8003636:	0a1b      	lsrs	r3, r3, #8
 8003638:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	4618      	mov	r0, r3
 8003648:	f005 fd26 	bl	8009098 <USB_ReadInterrupts>
 800364c:	4603      	mov	r3, r0
 800364e:	f003 0302 	and.w	r3, r3, #2
 8003652:	2b02      	cmp	r3, #2
 8003654:	d107      	bne.n	8003666 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	695a      	ldr	r2, [r3, #20]
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f002 0202 	and.w	r2, r2, #2
 8003664:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	4618      	mov	r0, r3
 800366c:	f005 fd14 	bl	8009098 <USB_ReadInterrupts>
 8003670:	4603      	mov	r3, r0
 8003672:	f003 0310 	and.w	r3, r3, #16
 8003676:	2b10      	cmp	r3, #16
 8003678:	d161      	bne.n	800373e <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	699a      	ldr	r2, [r3, #24]
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f022 0210 	bic.w	r2, r2, #16
 8003688:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800368a:	6a3b      	ldr	r3, [r7, #32]
 800368c:	6a1b      	ldr	r3, [r3, #32]
 800368e:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8003690:	69bb      	ldr	r3, [r7, #24]
 8003692:	f003 020f 	and.w	r2, r3, #15
 8003696:	4613      	mov	r3, r2
 8003698:	00db      	lsls	r3, r3, #3
 800369a:	4413      	add	r3, r2
 800369c:	009b      	lsls	r3, r3, #2
 800369e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80036a2:	687a      	ldr	r2, [r7, #4]
 80036a4:	4413      	add	r3, r2
 80036a6:	3304      	adds	r3, #4
 80036a8:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80036aa:	69bb      	ldr	r3, [r7, #24]
 80036ac:	0c5b      	lsrs	r3, r3, #17
 80036ae:	f003 030f 	and.w	r3, r3, #15
 80036b2:	2b02      	cmp	r3, #2
 80036b4:	d124      	bne.n	8003700 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80036b6:	69ba      	ldr	r2, [r7, #24]
 80036b8:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80036bc:	4013      	ands	r3, r2
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d035      	beq.n	800372e <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80036c2:	697b      	ldr	r3, [r7, #20]
 80036c4:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80036c6:	69bb      	ldr	r3, [r7, #24]
 80036c8:	091b      	lsrs	r3, r3, #4
 80036ca:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80036cc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80036d0:	b29b      	uxth	r3, r3
 80036d2:	461a      	mov	r2, r3
 80036d4:	6a38      	ldr	r0, [r7, #32]
 80036d6:	f005 fb4b 	bl	8008d70 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80036da:	697b      	ldr	r3, [r7, #20]
 80036dc:	691a      	ldr	r2, [r3, #16]
 80036de:	69bb      	ldr	r3, [r7, #24]
 80036e0:	091b      	lsrs	r3, r3, #4
 80036e2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80036e6:	441a      	add	r2, r3
 80036e8:	697b      	ldr	r3, [r7, #20]
 80036ea:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80036ec:	697b      	ldr	r3, [r7, #20]
 80036ee:	6a1a      	ldr	r2, [r3, #32]
 80036f0:	69bb      	ldr	r3, [r7, #24]
 80036f2:	091b      	lsrs	r3, r3, #4
 80036f4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80036f8:	441a      	add	r2, r3
 80036fa:	697b      	ldr	r3, [r7, #20]
 80036fc:	621a      	str	r2, [r3, #32]
 80036fe:	e016      	b.n	800372e <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8003700:	69bb      	ldr	r3, [r7, #24]
 8003702:	0c5b      	lsrs	r3, r3, #17
 8003704:	f003 030f 	and.w	r3, r3, #15
 8003708:	2b06      	cmp	r3, #6
 800370a:	d110      	bne.n	800372e <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003712:	2208      	movs	r2, #8
 8003714:	4619      	mov	r1, r3
 8003716:	6a38      	ldr	r0, [r7, #32]
 8003718:	f005 fb2a 	bl	8008d70 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800371c:	697b      	ldr	r3, [r7, #20]
 800371e:	6a1a      	ldr	r2, [r3, #32]
 8003720:	69bb      	ldr	r3, [r7, #24]
 8003722:	091b      	lsrs	r3, r3, #4
 8003724:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003728:	441a      	add	r2, r3
 800372a:	697b      	ldr	r3, [r7, #20]
 800372c:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	699a      	ldr	r2, [r3, #24]
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f042 0210 	orr.w	r2, r2, #16
 800373c:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	4618      	mov	r0, r3
 8003744:	f005 fca8 	bl	8009098 <USB_ReadInterrupts>
 8003748:	4603      	mov	r3, r0
 800374a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800374e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003752:	f040 80a7 	bne.w	80038a4 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8003756:	2300      	movs	r3, #0
 8003758:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	4618      	mov	r0, r3
 8003760:	f005 fcad 	bl	80090be <USB_ReadDevAllOutEpInterrupt>
 8003764:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8003766:	e099      	b.n	800389c <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8003768:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800376a:	f003 0301 	and.w	r3, r3, #1
 800376e:	2b00      	cmp	r3, #0
 8003770:	f000 808e 	beq.w	8003890 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800377a:	b2d2      	uxtb	r2, r2
 800377c:	4611      	mov	r1, r2
 800377e:	4618      	mov	r0, r3
 8003780:	f005 fcd1 	bl	8009126 <USB_ReadDevOutEPInterrupt>
 8003784:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8003786:	693b      	ldr	r3, [r7, #16]
 8003788:	f003 0301 	and.w	r3, r3, #1
 800378c:	2b00      	cmp	r3, #0
 800378e:	d00c      	beq.n	80037aa <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8003790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003792:	015a      	lsls	r2, r3, #5
 8003794:	69fb      	ldr	r3, [r7, #28]
 8003796:	4413      	add	r3, r2
 8003798:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800379c:	461a      	mov	r2, r3
 800379e:	2301      	movs	r3, #1
 80037a0:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80037a2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80037a4:	6878      	ldr	r0, [r7, #4]
 80037a6:	f000 fec3 	bl	8004530 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80037aa:	693b      	ldr	r3, [r7, #16]
 80037ac:	f003 0308 	and.w	r3, r3, #8
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d00c      	beq.n	80037ce <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80037b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037b6:	015a      	lsls	r2, r3, #5
 80037b8:	69fb      	ldr	r3, [r7, #28]
 80037ba:	4413      	add	r3, r2
 80037bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80037c0:	461a      	mov	r2, r3
 80037c2:	2308      	movs	r3, #8
 80037c4:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80037c6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80037c8:	6878      	ldr	r0, [r7, #4]
 80037ca:	f000 ff99 	bl	8004700 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80037ce:	693b      	ldr	r3, [r7, #16]
 80037d0:	f003 0310 	and.w	r3, r3, #16
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d008      	beq.n	80037ea <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80037d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037da:	015a      	lsls	r2, r3, #5
 80037dc:	69fb      	ldr	r3, [r7, #28]
 80037de:	4413      	add	r3, r2
 80037e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80037e4:	461a      	mov	r2, r3
 80037e6:	2310      	movs	r3, #16
 80037e8:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80037ea:	693b      	ldr	r3, [r7, #16]
 80037ec:	f003 0302 	and.w	r3, r3, #2
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d030      	beq.n	8003856 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80037f4:	6a3b      	ldr	r3, [r7, #32]
 80037f6:	695b      	ldr	r3, [r3, #20]
 80037f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037fc:	2b80      	cmp	r3, #128	; 0x80
 80037fe:	d109      	bne.n	8003814 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8003800:	69fb      	ldr	r3, [r7, #28]
 8003802:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003806:	685b      	ldr	r3, [r3, #4]
 8003808:	69fa      	ldr	r2, [r7, #28]
 800380a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800380e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003812:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8003814:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003816:	4613      	mov	r3, r2
 8003818:	00db      	lsls	r3, r3, #3
 800381a:	4413      	add	r3, r2
 800381c:	009b      	lsls	r3, r3, #2
 800381e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003822:	687a      	ldr	r2, [r7, #4]
 8003824:	4413      	add	r3, r2
 8003826:	3304      	adds	r3, #4
 8003828:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800382a:	697b      	ldr	r3, [r7, #20]
 800382c:	78db      	ldrb	r3, [r3, #3]
 800382e:	2b01      	cmp	r3, #1
 8003830:	d108      	bne.n	8003844 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8003832:	697b      	ldr	r3, [r7, #20]
 8003834:	2200      	movs	r2, #0
 8003836:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8003838:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800383a:	b2db      	uxtb	r3, r3
 800383c:	4619      	mov	r1, r3
 800383e:	6878      	ldr	r0, [r7, #4]
 8003840:	f008 f80e 	bl	800b860 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8003844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003846:	015a      	lsls	r2, r3, #5
 8003848:	69fb      	ldr	r3, [r7, #28]
 800384a:	4413      	add	r3, r2
 800384c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003850:	461a      	mov	r2, r3
 8003852:	2302      	movs	r3, #2
 8003854:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003856:	693b      	ldr	r3, [r7, #16]
 8003858:	f003 0320 	and.w	r3, r3, #32
 800385c:	2b00      	cmp	r3, #0
 800385e:	d008      	beq.n	8003872 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003862:	015a      	lsls	r2, r3, #5
 8003864:	69fb      	ldr	r3, [r7, #28]
 8003866:	4413      	add	r3, r2
 8003868:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800386c:	461a      	mov	r2, r3
 800386e:	2320      	movs	r3, #32
 8003870:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8003872:	693b      	ldr	r3, [r7, #16]
 8003874:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003878:	2b00      	cmp	r3, #0
 800387a:	d009      	beq.n	8003890 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800387c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800387e:	015a      	lsls	r2, r3, #5
 8003880:	69fb      	ldr	r3, [r7, #28]
 8003882:	4413      	add	r3, r2
 8003884:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003888:	461a      	mov	r2, r3
 800388a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800388e:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8003890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003892:	3301      	adds	r3, #1
 8003894:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003896:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003898:	085b      	lsrs	r3, r3, #1
 800389a:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800389c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800389e:	2b00      	cmp	r3, #0
 80038a0:	f47f af62 	bne.w	8003768 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	4618      	mov	r0, r3
 80038aa:	f005 fbf5 	bl	8009098 <USB_ReadInterrupts>
 80038ae:	4603      	mov	r3, r0
 80038b0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80038b4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80038b8:	f040 80db 	bne.w	8003a72 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	4618      	mov	r0, r3
 80038c2:	f005 fc16 	bl	80090f2 <USB_ReadDevAllInEpInterrupt>
 80038c6:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80038c8:	2300      	movs	r3, #0
 80038ca:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80038cc:	e0cd      	b.n	8003a6a <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80038ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038d0:	f003 0301 	and.w	r3, r3, #1
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	f000 80c2 	beq.w	8003a5e <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038e0:	b2d2      	uxtb	r2, r2
 80038e2:	4611      	mov	r1, r2
 80038e4:	4618      	mov	r0, r3
 80038e6:	f005 fc3c 	bl	8009162 <USB_ReadDevInEPInterrupt>
 80038ea:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80038ec:	693b      	ldr	r3, [r7, #16]
 80038ee:	f003 0301 	and.w	r3, r3, #1
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d057      	beq.n	80039a6 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80038f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038f8:	f003 030f 	and.w	r3, r3, #15
 80038fc:	2201      	movs	r2, #1
 80038fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003902:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003904:	69fb      	ldr	r3, [r7, #28]
 8003906:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800390a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	43db      	mvns	r3, r3
 8003910:	69f9      	ldr	r1, [r7, #28]
 8003912:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003916:	4013      	ands	r3, r2
 8003918:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800391a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800391c:	015a      	lsls	r2, r3, #5
 800391e:	69fb      	ldr	r3, [r7, #28]
 8003920:	4413      	add	r3, r2
 8003922:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003926:	461a      	mov	r2, r3
 8003928:	2301      	movs	r3, #1
 800392a:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	691b      	ldr	r3, [r3, #16]
 8003930:	2b01      	cmp	r3, #1
 8003932:	d132      	bne.n	800399a <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8003934:	6879      	ldr	r1, [r7, #4]
 8003936:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003938:	4613      	mov	r3, r2
 800393a:	00db      	lsls	r3, r3, #3
 800393c:	4413      	add	r3, r2
 800393e:	009b      	lsls	r3, r3, #2
 8003940:	440b      	add	r3, r1
 8003942:	334c      	adds	r3, #76	; 0x4c
 8003944:	6819      	ldr	r1, [r3, #0]
 8003946:	6878      	ldr	r0, [r7, #4]
 8003948:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800394a:	4613      	mov	r3, r2
 800394c:	00db      	lsls	r3, r3, #3
 800394e:	4413      	add	r3, r2
 8003950:	009b      	lsls	r3, r3, #2
 8003952:	4403      	add	r3, r0
 8003954:	3348      	adds	r3, #72	; 0x48
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	4419      	add	r1, r3
 800395a:	6878      	ldr	r0, [r7, #4]
 800395c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800395e:	4613      	mov	r3, r2
 8003960:	00db      	lsls	r3, r3, #3
 8003962:	4413      	add	r3, r2
 8003964:	009b      	lsls	r3, r3, #2
 8003966:	4403      	add	r3, r0
 8003968:	334c      	adds	r3, #76	; 0x4c
 800396a:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800396c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800396e:	2b00      	cmp	r3, #0
 8003970:	d113      	bne.n	800399a <HAL_PCD_IRQHandler+0x3a2>
 8003972:	6879      	ldr	r1, [r7, #4]
 8003974:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003976:	4613      	mov	r3, r2
 8003978:	00db      	lsls	r3, r3, #3
 800397a:	4413      	add	r3, r2
 800397c:	009b      	lsls	r3, r3, #2
 800397e:	440b      	add	r3, r1
 8003980:	3354      	adds	r3, #84	; 0x54
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	2b00      	cmp	r3, #0
 8003986:	d108      	bne.n	800399a <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	6818      	ldr	r0, [r3, #0]
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003992:	461a      	mov	r2, r3
 8003994:	2101      	movs	r1, #1
 8003996:	f005 fc43 	bl	8009220 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800399a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800399c:	b2db      	uxtb	r3, r3
 800399e:	4619      	mov	r1, r3
 80039a0:	6878      	ldr	r0, [r7, #4]
 80039a2:	f007 fed8 	bl	800b756 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80039a6:	693b      	ldr	r3, [r7, #16]
 80039a8:	f003 0308 	and.w	r3, r3, #8
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d008      	beq.n	80039c2 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80039b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039b2:	015a      	lsls	r2, r3, #5
 80039b4:	69fb      	ldr	r3, [r7, #28]
 80039b6:	4413      	add	r3, r2
 80039b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80039bc:	461a      	mov	r2, r3
 80039be:	2308      	movs	r3, #8
 80039c0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80039c2:	693b      	ldr	r3, [r7, #16]
 80039c4:	f003 0310 	and.w	r3, r3, #16
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d008      	beq.n	80039de <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80039cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039ce:	015a      	lsls	r2, r3, #5
 80039d0:	69fb      	ldr	r3, [r7, #28]
 80039d2:	4413      	add	r3, r2
 80039d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80039d8:	461a      	mov	r2, r3
 80039da:	2310      	movs	r3, #16
 80039dc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80039de:	693b      	ldr	r3, [r7, #16]
 80039e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d008      	beq.n	80039fa <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80039e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039ea:	015a      	lsls	r2, r3, #5
 80039ec:	69fb      	ldr	r3, [r7, #28]
 80039ee:	4413      	add	r3, r2
 80039f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80039f4:	461a      	mov	r2, r3
 80039f6:	2340      	movs	r3, #64	; 0x40
 80039f8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80039fa:	693b      	ldr	r3, [r7, #16]
 80039fc:	f003 0302 	and.w	r3, r3, #2
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d023      	beq.n	8003a4c <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8003a04:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003a06:	6a38      	ldr	r0, [r7, #32]
 8003a08:	f004 fb24 	bl	8008054 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8003a0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a0e:	4613      	mov	r3, r2
 8003a10:	00db      	lsls	r3, r3, #3
 8003a12:	4413      	add	r3, r2
 8003a14:	009b      	lsls	r3, r3, #2
 8003a16:	3338      	adds	r3, #56	; 0x38
 8003a18:	687a      	ldr	r2, [r7, #4]
 8003a1a:	4413      	add	r3, r2
 8003a1c:	3304      	adds	r3, #4
 8003a1e:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003a20:	697b      	ldr	r3, [r7, #20]
 8003a22:	78db      	ldrb	r3, [r3, #3]
 8003a24:	2b01      	cmp	r3, #1
 8003a26:	d108      	bne.n	8003a3a <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8003a28:	697b      	ldr	r3, [r7, #20]
 8003a2a:	2200      	movs	r2, #0
 8003a2c:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003a2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a30:	b2db      	uxtb	r3, r3
 8003a32:	4619      	mov	r1, r3
 8003a34:	6878      	ldr	r0, [r7, #4]
 8003a36:	f007 ff25 	bl	800b884 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a3c:	015a      	lsls	r2, r3, #5
 8003a3e:	69fb      	ldr	r3, [r7, #28]
 8003a40:	4413      	add	r3, r2
 8003a42:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a46:	461a      	mov	r2, r3
 8003a48:	2302      	movs	r3, #2
 8003a4a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003a4c:	693b      	ldr	r3, [r7, #16]
 8003a4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d003      	beq.n	8003a5e <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003a56:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003a58:	6878      	ldr	r0, [r7, #4]
 8003a5a:	f000 fcdb 	bl	8004414 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003a5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a60:	3301      	adds	r3, #1
 8003a62:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003a64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a66:	085b      	lsrs	r3, r3, #1
 8003a68:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003a6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	f47f af2e 	bne.w	80038ce <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	4618      	mov	r0, r3
 8003a78:	f005 fb0e 	bl	8009098 <USB_ReadInterrupts>
 8003a7c:	4603      	mov	r3, r0
 8003a7e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003a82:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003a86:	d122      	bne.n	8003ace <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003a88:	69fb      	ldr	r3, [r7, #28]
 8003a8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a8e:	685b      	ldr	r3, [r3, #4]
 8003a90:	69fa      	ldr	r2, [r7, #28]
 8003a92:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003a96:	f023 0301 	bic.w	r3, r3, #1
 8003a9a:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8003aa2:	2b01      	cmp	r3, #1
 8003aa4:	d108      	bne.n	8003ab8 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	2200      	movs	r2, #0
 8003aaa:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003aae:	2100      	movs	r1, #0
 8003ab0:	6878      	ldr	r0, [r7, #4]
 8003ab2:	f000 fec3 	bl	800483c <HAL_PCDEx_LPM_Callback>
 8003ab6:	e002      	b.n	8003abe <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003ab8:	6878      	ldr	r0, [r7, #4]
 8003aba:	f007 fec3 	bl	800b844 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	695a      	ldr	r2, [r3, #20]
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8003acc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	4618      	mov	r0, r3
 8003ad4:	f005 fae0 	bl	8009098 <USB_ReadInterrupts>
 8003ad8:	4603      	mov	r3, r0
 8003ada:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003ade:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003ae2:	d112      	bne.n	8003b0a <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003ae4:	69fb      	ldr	r3, [r7, #28]
 8003ae6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003aea:	689b      	ldr	r3, [r3, #8]
 8003aec:	f003 0301 	and.w	r3, r3, #1
 8003af0:	2b01      	cmp	r3, #1
 8003af2:	d102      	bne.n	8003afa <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003af4:	6878      	ldr	r0, [r7, #4]
 8003af6:	f007 fe7f 	bl	800b7f8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	695a      	ldr	r2, [r3, #20]
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8003b08:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	4618      	mov	r0, r3
 8003b10:	f005 fac2 	bl	8009098 <USB_ReadInterrupts>
 8003b14:	4603      	mov	r3, r0
 8003b16:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003b1a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b1e:	f040 80b7 	bne.w	8003c90 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003b22:	69fb      	ldr	r3, [r7, #28]
 8003b24:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b28:	685b      	ldr	r3, [r3, #4]
 8003b2a:	69fa      	ldr	r2, [r7, #28]
 8003b2c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003b30:	f023 0301 	bic.w	r3, r3, #1
 8003b34:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	2110      	movs	r1, #16
 8003b3c:	4618      	mov	r0, r3
 8003b3e:	f004 fa89 	bl	8008054 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003b42:	2300      	movs	r3, #0
 8003b44:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003b46:	e046      	b.n	8003bd6 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003b48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b4a:	015a      	lsls	r2, r3, #5
 8003b4c:	69fb      	ldr	r3, [r7, #28]
 8003b4e:	4413      	add	r3, r2
 8003b50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b54:	461a      	mov	r2, r3
 8003b56:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003b5a:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003b5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b5e:	015a      	lsls	r2, r3, #5
 8003b60:	69fb      	ldr	r3, [r7, #28]
 8003b62:	4413      	add	r3, r2
 8003b64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003b6c:	0151      	lsls	r1, r2, #5
 8003b6e:	69fa      	ldr	r2, [r7, #28]
 8003b70:	440a      	add	r2, r1
 8003b72:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003b76:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003b7a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003b7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b7e:	015a      	lsls	r2, r3, #5
 8003b80:	69fb      	ldr	r3, [r7, #28]
 8003b82:	4413      	add	r3, r2
 8003b84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b88:	461a      	mov	r2, r3
 8003b8a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003b8e:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003b90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b92:	015a      	lsls	r2, r3, #5
 8003b94:	69fb      	ldr	r3, [r7, #28]
 8003b96:	4413      	add	r3, r2
 8003b98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003ba0:	0151      	lsls	r1, r2, #5
 8003ba2:	69fa      	ldr	r2, [r7, #28]
 8003ba4:	440a      	add	r2, r1
 8003ba6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003baa:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003bae:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003bb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bb2:	015a      	lsls	r2, r3, #5
 8003bb4:	69fb      	ldr	r3, [r7, #28]
 8003bb6:	4413      	add	r3, r2
 8003bb8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003bc0:	0151      	lsls	r1, r2, #5
 8003bc2:	69fa      	ldr	r2, [r7, #28]
 8003bc4:	440a      	add	r2, r1
 8003bc6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003bca:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003bce:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003bd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bd2:	3301      	adds	r3, #1
 8003bd4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	685b      	ldr	r3, [r3, #4]
 8003bda:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003bdc:	429a      	cmp	r2, r3
 8003bde:	d3b3      	bcc.n	8003b48 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003be0:	69fb      	ldr	r3, [r7, #28]
 8003be2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003be6:	69db      	ldr	r3, [r3, #28]
 8003be8:	69fa      	ldr	r2, [r7, #28]
 8003bea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003bee:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8003bf2:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d016      	beq.n	8003c2a <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003bfc:	69fb      	ldr	r3, [r7, #28]
 8003bfe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c02:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003c06:	69fa      	ldr	r2, [r7, #28]
 8003c08:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003c0c:	f043 030b 	orr.w	r3, r3, #11
 8003c10:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003c14:	69fb      	ldr	r3, [r7, #28]
 8003c16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c1c:	69fa      	ldr	r2, [r7, #28]
 8003c1e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003c22:	f043 030b 	orr.w	r3, r3, #11
 8003c26:	6453      	str	r3, [r2, #68]	; 0x44
 8003c28:	e015      	b.n	8003c56 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003c2a:	69fb      	ldr	r3, [r7, #28]
 8003c2c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c30:	695b      	ldr	r3, [r3, #20]
 8003c32:	69fa      	ldr	r2, [r7, #28]
 8003c34:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003c38:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003c3c:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8003c40:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003c42:	69fb      	ldr	r3, [r7, #28]
 8003c44:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c48:	691b      	ldr	r3, [r3, #16]
 8003c4a:	69fa      	ldr	r2, [r7, #28]
 8003c4c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003c50:	f043 030b 	orr.w	r3, r3, #11
 8003c54:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003c56:	69fb      	ldr	r3, [r7, #28]
 8003c58:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	69fa      	ldr	r2, [r7, #28]
 8003c60:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003c64:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8003c68:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	6818      	ldr	r0, [r3, #0]
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	691b      	ldr	r3, [r3, #16]
 8003c72:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003c7a:	461a      	mov	r2, r3
 8003c7c:	f005 fad0 	bl	8009220 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	695a      	ldr	r2, [r3, #20]
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8003c8e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	4618      	mov	r0, r3
 8003c96:	f005 f9ff 	bl	8009098 <USB_ReadInterrupts>
 8003c9a:	4603      	mov	r3, r0
 8003c9c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003ca0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003ca4:	d124      	bne.n	8003cf0 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	4618      	mov	r0, r3
 8003cac:	f005 fa95 	bl	80091da <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	4618      	mov	r0, r3
 8003cb6:	f004 fa4a 	bl	800814e <USB_GetDevSpeed>
 8003cba:	4603      	mov	r3, r0
 8003cbc:	461a      	mov	r2, r3
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681c      	ldr	r4, [r3, #0]
 8003cc6:	f001 f9e9 	bl	800509c <HAL_RCC_GetHCLKFreq>
 8003cca:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003cd0:	b2db      	uxtb	r3, r3
 8003cd2:	461a      	mov	r2, r3
 8003cd4:	4620      	mov	r0, r4
 8003cd6:	f003 ff49 	bl	8007b6c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003cda:	6878      	ldr	r0, [r7, #4]
 8003cdc:	f007 fd63 	bl	800b7a6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	695a      	ldr	r2, [r3, #20]
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8003cee:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	4618      	mov	r0, r3
 8003cf6:	f005 f9cf 	bl	8009098 <USB_ReadInterrupts>
 8003cfa:	4603      	mov	r3, r0
 8003cfc:	f003 0308 	and.w	r3, r3, #8
 8003d00:	2b08      	cmp	r3, #8
 8003d02:	d10a      	bne.n	8003d1a <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003d04:	6878      	ldr	r0, [r7, #4]
 8003d06:	f007 fd40 	bl	800b78a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	695a      	ldr	r2, [r3, #20]
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f002 0208 	and.w	r2, r2, #8
 8003d18:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	4618      	mov	r0, r3
 8003d20:	f005 f9ba 	bl	8009098 <USB_ReadInterrupts>
 8003d24:	4603      	mov	r3, r0
 8003d26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d2a:	2b80      	cmp	r3, #128	; 0x80
 8003d2c:	d122      	bne.n	8003d74 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8003d2e:	6a3b      	ldr	r3, [r7, #32]
 8003d30:	699b      	ldr	r3, [r3, #24]
 8003d32:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003d36:	6a3b      	ldr	r3, [r7, #32]
 8003d38:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003d3a:	2301      	movs	r3, #1
 8003d3c:	627b      	str	r3, [r7, #36]	; 0x24
 8003d3e:	e014      	b.n	8003d6a <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8003d40:	6879      	ldr	r1, [r7, #4]
 8003d42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d44:	4613      	mov	r3, r2
 8003d46:	00db      	lsls	r3, r3, #3
 8003d48:	4413      	add	r3, r2
 8003d4a:	009b      	lsls	r3, r3, #2
 8003d4c:	440b      	add	r3, r1
 8003d4e:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8003d52:	781b      	ldrb	r3, [r3, #0]
 8003d54:	2b01      	cmp	r3, #1
 8003d56:	d105      	bne.n	8003d64 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8003d58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d5a:	b2db      	uxtb	r3, r3
 8003d5c:	4619      	mov	r1, r3
 8003d5e:	6878      	ldr	r0, [r7, #4]
 8003d60:	f000 fb27 	bl	80043b2 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003d64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d66:	3301      	adds	r3, #1
 8003d68:	627b      	str	r3, [r7, #36]	; 0x24
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	685b      	ldr	r3, [r3, #4]
 8003d6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d70:	429a      	cmp	r2, r3
 8003d72:	d3e5      	bcc.n	8003d40 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	4618      	mov	r0, r3
 8003d7a:	f005 f98d 	bl	8009098 <USB_ReadInterrupts>
 8003d7e:	4603      	mov	r3, r0
 8003d80:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003d84:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003d88:	d13b      	bne.n	8003e02 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003d8a:	2301      	movs	r3, #1
 8003d8c:	627b      	str	r3, [r7, #36]	; 0x24
 8003d8e:	e02b      	b.n	8003de8 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8003d90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d92:	015a      	lsls	r2, r3, #5
 8003d94:	69fb      	ldr	r3, [r7, #28]
 8003d96:	4413      	add	r3, r2
 8003d98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003da0:	6879      	ldr	r1, [r7, #4]
 8003da2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003da4:	4613      	mov	r3, r2
 8003da6:	00db      	lsls	r3, r3, #3
 8003da8:	4413      	add	r3, r2
 8003daa:	009b      	lsls	r3, r3, #2
 8003dac:	440b      	add	r3, r1
 8003dae:	3340      	adds	r3, #64	; 0x40
 8003db0:	781b      	ldrb	r3, [r3, #0]
 8003db2:	2b01      	cmp	r3, #1
 8003db4:	d115      	bne.n	8003de2 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8003db6:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	da12      	bge.n	8003de2 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8003dbc:	6879      	ldr	r1, [r7, #4]
 8003dbe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003dc0:	4613      	mov	r3, r2
 8003dc2:	00db      	lsls	r3, r3, #3
 8003dc4:	4413      	add	r3, r2
 8003dc6:	009b      	lsls	r3, r3, #2
 8003dc8:	440b      	add	r3, r1
 8003dca:	333f      	adds	r3, #63	; 0x3f
 8003dcc:	2201      	movs	r2, #1
 8003dce:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8003dd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dd2:	b2db      	uxtb	r3, r3
 8003dd4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003dd8:	b2db      	uxtb	r3, r3
 8003dda:	4619      	mov	r1, r3
 8003ddc:	6878      	ldr	r0, [r7, #4]
 8003dde:	f000 fae8 	bl	80043b2 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003de2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003de4:	3301      	adds	r3, #1
 8003de6:	627b      	str	r3, [r7, #36]	; 0x24
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	685b      	ldr	r3, [r3, #4]
 8003dec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003dee:	429a      	cmp	r2, r3
 8003df0:	d3ce      	bcc.n	8003d90 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	695a      	ldr	r2, [r3, #20]
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8003e00:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	4618      	mov	r0, r3
 8003e08:	f005 f946 	bl	8009098 <USB_ReadInterrupts>
 8003e0c:	4603      	mov	r3, r0
 8003e0e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003e12:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003e16:	d155      	bne.n	8003ec4 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003e18:	2301      	movs	r3, #1
 8003e1a:	627b      	str	r3, [r7, #36]	; 0x24
 8003e1c:	e045      	b.n	8003eaa <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8003e1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e20:	015a      	lsls	r2, r3, #5
 8003e22:	69fb      	ldr	r3, [r7, #28]
 8003e24:	4413      	add	r3, r2
 8003e26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003e2e:	6879      	ldr	r1, [r7, #4]
 8003e30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e32:	4613      	mov	r3, r2
 8003e34:	00db      	lsls	r3, r3, #3
 8003e36:	4413      	add	r3, r2
 8003e38:	009b      	lsls	r3, r3, #2
 8003e3a:	440b      	add	r3, r1
 8003e3c:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003e40:	781b      	ldrb	r3, [r3, #0]
 8003e42:	2b01      	cmp	r3, #1
 8003e44:	d12e      	bne.n	8003ea4 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003e46:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	da2b      	bge.n	8003ea4 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8003e4c:	69bb      	ldr	r3, [r7, #24]
 8003e4e:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8003e58:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003e5c:	429a      	cmp	r2, r3
 8003e5e:	d121      	bne.n	8003ea4 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8003e60:	6879      	ldr	r1, [r7, #4]
 8003e62:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e64:	4613      	mov	r3, r2
 8003e66:	00db      	lsls	r3, r3, #3
 8003e68:	4413      	add	r3, r2
 8003e6a:	009b      	lsls	r3, r3, #2
 8003e6c:	440b      	add	r3, r1
 8003e6e:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8003e72:	2201      	movs	r2, #1
 8003e74:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8003e76:	6a3b      	ldr	r3, [r7, #32]
 8003e78:	699b      	ldr	r3, [r3, #24]
 8003e7a:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8003e7e:	6a3b      	ldr	r3, [r7, #32]
 8003e80:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8003e82:	6a3b      	ldr	r3, [r7, #32]
 8003e84:	695b      	ldr	r3, [r3, #20]
 8003e86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d10a      	bne.n	8003ea4 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8003e8e:	69fb      	ldr	r3, [r7, #28]
 8003e90:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e94:	685b      	ldr	r3, [r3, #4]
 8003e96:	69fa      	ldr	r2, [r7, #28]
 8003e98:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003e9c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003ea0:	6053      	str	r3, [r2, #4]
            break;
 8003ea2:	e007      	b.n	8003eb4 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003ea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ea6:	3301      	adds	r3, #1
 8003ea8:	627b      	str	r3, [r7, #36]	; 0x24
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	685b      	ldr	r3, [r3, #4]
 8003eae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003eb0:	429a      	cmp	r2, r3
 8003eb2:	d3b4      	bcc.n	8003e1e <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	695a      	ldr	r2, [r3, #20]
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8003ec2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	4618      	mov	r0, r3
 8003eca:	f005 f8e5 	bl	8009098 <USB_ReadInterrupts>
 8003ece:	4603      	mov	r3, r0
 8003ed0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003ed4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ed8:	d10a      	bne.n	8003ef0 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003eda:	6878      	ldr	r0, [r7, #4]
 8003edc:	f007 fce4 	bl	800b8a8 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	695a      	ldr	r2, [r3, #20]
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003eee:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	4618      	mov	r0, r3
 8003ef6:	f005 f8cf 	bl	8009098 <USB_ReadInterrupts>
 8003efa:	4603      	mov	r3, r0
 8003efc:	f003 0304 	and.w	r3, r3, #4
 8003f00:	2b04      	cmp	r3, #4
 8003f02:	d115      	bne.n	8003f30 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	685b      	ldr	r3, [r3, #4]
 8003f0a:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003f0c:	69bb      	ldr	r3, [r7, #24]
 8003f0e:	f003 0304 	and.w	r3, r3, #4
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d002      	beq.n	8003f1c <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003f16:	6878      	ldr	r0, [r7, #4]
 8003f18:	f007 fcd4 	bl	800b8c4 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	6859      	ldr	r1, [r3, #4]
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	69ba      	ldr	r2, [r7, #24]
 8003f28:	430a      	orrs	r2, r1
 8003f2a:	605a      	str	r2, [r3, #4]
 8003f2c:	e000      	b.n	8003f30 <HAL_PCD_IRQHandler+0x938>
      return;
 8003f2e:	bf00      	nop
    }
  }
}
 8003f30:	3734      	adds	r7, #52	; 0x34
 8003f32:	46bd      	mov	sp, r7
 8003f34:	bd90      	pop	{r4, r7, pc}

08003f36 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003f36:	b580      	push	{r7, lr}
 8003f38:	b082      	sub	sp, #8
 8003f3a:	af00      	add	r7, sp, #0
 8003f3c:	6078      	str	r0, [r7, #4]
 8003f3e:	460b      	mov	r3, r1
 8003f40:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003f48:	2b01      	cmp	r3, #1
 8003f4a:	d101      	bne.n	8003f50 <HAL_PCD_SetAddress+0x1a>
 8003f4c:	2302      	movs	r3, #2
 8003f4e:	e013      	b.n	8003f78 <HAL_PCD_SetAddress+0x42>
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	2201      	movs	r2, #1
 8003f54:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	78fa      	ldrb	r2, [r7, #3]
 8003f5c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	78fa      	ldrb	r2, [r7, #3]
 8003f66:	4611      	mov	r1, r2
 8003f68:	4618      	mov	r0, r3
 8003f6a:	f005 f82d 	bl	8008fc8 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	2200      	movs	r2, #0
 8003f72:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003f76:	2300      	movs	r3, #0
}
 8003f78:	4618      	mov	r0, r3
 8003f7a:	3708      	adds	r7, #8
 8003f7c:	46bd      	mov	sp, r7
 8003f7e:	bd80      	pop	{r7, pc}

08003f80 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003f80:	b580      	push	{r7, lr}
 8003f82:	b084      	sub	sp, #16
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	6078      	str	r0, [r7, #4]
 8003f88:	4608      	mov	r0, r1
 8003f8a:	4611      	mov	r1, r2
 8003f8c:	461a      	mov	r2, r3
 8003f8e:	4603      	mov	r3, r0
 8003f90:	70fb      	strb	r3, [r7, #3]
 8003f92:	460b      	mov	r3, r1
 8003f94:	803b      	strh	r3, [r7, #0]
 8003f96:	4613      	mov	r3, r2
 8003f98:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003f9a:	2300      	movs	r3, #0
 8003f9c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003f9e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	da0f      	bge.n	8003fc6 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003fa6:	78fb      	ldrb	r3, [r7, #3]
 8003fa8:	f003 020f 	and.w	r2, r3, #15
 8003fac:	4613      	mov	r3, r2
 8003fae:	00db      	lsls	r3, r3, #3
 8003fb0:	4413      	add	r3, r2
 8003fb2:	009b      	lsls	r3, r3, #2
 8003fb4:	3338      	adds	r3, #56	; 0x38
 8003fb6:	687a      	ldr	r2, [r7, #4]
 8003fb8:	4413      	add	r3, r2
 8003fba:	3304      	adds	r3, #4
 8003fbc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	2201      	movs	r2, #1
 8003fc2:	705a      	strb	r2, [r3, #1]
 8003fc4:	e00f      	b.n	8003fe6 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003fc6:	78fb      	ldrb	r3, [r7, #3]
 8003fc8:	f003 020f 	and.w	r2, r3, #15
 8003fcc:	4613      	mov	r3, r2
 8003fce:	00db      	lsls	r3, r3, #3
 8003fd0:	4413      	add	r3, r2
 8003fd2:	009b      	lsls	r3, r3, #2
 8003fd4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003fd8:	687a      	ldr	r2, [r7, #4]
 8003fda:	4413      	add	r3, r2
 8003fdc:	3304      	adds	r3, #4
 8003fde:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	2200      	movs	r2, #0
 8003fe4:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003fe6:	78fb      	ldrb	r3, [r7, #3]
 8003fe8:	f003 030f 	and.w	r3, r3, #15
 8003fec:	b2da      	uxtb	r2, r3
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003ff2:	883a      	ldrh	r2, [r7, #0]
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	78ba      	ldrb	r2, [r7, #2]
 8003ffc:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	785b      	ldrb	r3, [r3, #1]
 8004002:	2b00      	cmp	r3, #0
 8004004:	d004      	beq.n	8004010 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	781b      	ldrb	r3, [r3, #0]
 800400a:	b29a      	uxth	r2, r3
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8004010:	78bb      	ldrb	r3, [r7, #2]
 8004012:	2b02      	cmp	r3, #2
 8004014:	d102      	bne.n	800401c <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	2200      	movs	r2, #0
 800401a:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004022:	2b01      	cmp	r3, #1
 8004024:	d101      	bne.n	800402a <HAL_PCD_EP_Open+0xaa>
 8004026:	2302      	movs	r3, #2
 8004028:	e00e      	b.n	8004048 <HAL_PCD_EP_Open+0xc8>
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	2201      	movs	r2, #1
 800402e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	68f9      	ldr	r1, [r7, #12]
 8004038:	4618      	mov	r0, r3
 800403a:	f004 f8ad 	bl	8008198 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	2200      	movs	r2, #0
 8004042:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8004046:	7afb      	ldrb	r3, [r7, #11]
}
 8004048:	4618      	mov	r0, r3
 800404a:	3710      	adds	r7, #16
 800404c:	46bd      	mov	sp, r7
 800404e:	bd80      	pop	{r7, pc}

08004050 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004050:	b580      	push	{r7, lr}
 8004052:	b084      	sub	sp, #16
 8004054:	af00      	add	r7, sp, #0
 8004056:	6078      	str	r0, [r7, #4]
 8004058:	460b      	mov	r3, r1
 800405a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800405c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004060:	2b00      	cmp	r3, #0
 8004062:	da0f      	bge.n	8004084 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004064:	78fb      	ldrb	r3, [r7, #3]
 8004066:	f003 020f 	and.w	r2, r3, #15
 800406a:	4613      	mov	r3, r2
 800406c:	00db      	lsls	r3, r3, #3
 800406e:	4413      	add	r3, r2
 8004070:	009b      	lsls	r3, r3, #2
 8004072:	3338      	adds	r3, #56	; 0x38
 8004074:	687a      	ldr	r2, [r7, #4]
 8004076:	4413      	add	r3, r2
 8004078:	3304      	adds	r3, #4
 800407a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	2201      	movs	r2, #1
 8004080:	705a      	strb	r2, [r3, #1]
 8004082:	e00f      	b.n	80040a4 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004084:	78fb      	ldrb	r3, [r7, #3]
 8004086:	f003 020f 	and.w	r2, r3, #15
 800408a:	4613      	mov	r3, r2
 800408c:	00db      	lsls	r3, r3, #3
 800408e:	4413      	add	r3, r2
 8004090:	009b      	lsls	r3, r3, #2
 8004092:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004096:	687a      	ldr	r2, [r7, #4]
 8004098:	4413      	add	r3, r2
 800409a:	3304      	adds	r3, #4
 800409c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	2200      	movs	r2, #0
 80040a2:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80040a4:	78fb      	ldrb	r3, [r7, #3]
 80040a6:	f003 030f 	and.w	r3, r3, #15
 80040aa:	b2da      	uxtb	r2, r3
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80040b6:	2b01      	cmp	r3, #1
 80040b8:	d101      	bne.n	80040be <HAL_PCD_EP_Close+0x6e>
 80040ba:	2302      	movs	r3, #2
 80040bc:	e00e      	b.n	80040dc <HAL_PCD_EP_Close+0x8c>
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	2201      	movs	r2, #1
 80040c2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	68f9      	ldr	r1, [r7, #12]
 80040cc:	4618      	mov	r0, r3
 80040ce:	f004 f8eb 	bl	80082a8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	2200      	movs	r2, #0
 80040d6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 80040da:	2300      	movs	r3, #0
}
 80040dc:	4618      	mov	r0, r3
 80040de:	3710      	adds	r7, #16
 80040e0:	46bd      	mov	sp, r7
 80040e2:	bd80      	pop	{r7, pc}

080040e4 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80040e4:	b580      	push	{r7, lr}
 80040e6:	b086      	sub	sp, #24
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	60f8      	str	r0, [r7, #12]
 80040ec:	607a      	str	r2, [r7, #4]
 80040ee:	603b      	str	r3, [r7, #0]
 80040f0:	460b      	mov	r3, r1
 80040f2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80040f4:	7afb      	ldrb	r3, [r7, #11]
 80040f6:	f003 020f 	and.w	r2, r3, #15
 80040fa:	4613      	mov	r3, r2
 80040fc:	00db      	lsls	r3, r3, #3
 80040fe:	4413      	add	r3, r2
 8004100:	009b      	lsls	r3, r3, #2
 8004102:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004106:	68fa      	ldr	r2, [r7, #12]
 8004108:	4413      	add	r3, r2
 800410a:	3304      	adds	r3, #4
 800410c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800410e:	697b      	ldr	r3, [r7, #20]
 8004110:	687a      	ldr	r2, [r7, #4]
 8004112:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8004114:	697b      	ldr	r3, [r7, #20]
 8004116:	683a      	ldr	r2, [r7, #0]
 8004118:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800411a:	697b      	ldr	r3, [r7, #20]
 800411c:	2200      	movs	r2, #0
 800411e:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8004120:	697b      	ldr	r3, [r7, #20]
 8004122:	2200      	movs	r2, #0
 8004124:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004126:	7afb      	ldrb	r3, [r7, #11]
 8004128:	f003 030f 	and.w	r3, r3, #15
 800412c:	b2da      	uxtb	r2, r3
 800412e:	697b      	ldr	r3, [r7, #20]
 8004130:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	691b      	ldr	r3, [r3, #16]
 8004136:	2b01      	cmp	r3, #1
 8004138:	d102      	bne.n	8004140 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800413a:	687a      	ldr	r2, [r7, #4]
 800413c:	697b      	ldr	r3, [r7, #20]
 800413e:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004140:	7afb      	ldrb	r3, [r7, #11]
 8004142:	f003 030f 	and.w	r3, r3, #15
 8004146:	2b00      	cmp	r3, #0
 8004148:	d109      	bne.n	800415e <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	6818      	ldr	r0, [r3, #0]
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	691b      	ldr	r3, [r3, #16]
 8004152:	b2db      	uxtb	r3, r3
 8004154:	461a      	mov	r2, r3
 8004156:	6979      	ldr	r1, [r7, #20]
 8004158:	f004 fbca 	bl	80088f0 <USB_EP0StartXfer>
 800415c:	e008      	b.n	8004170 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	6818      	ldr	r0, [r3, #0]
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	691b      	ldr	r3, [r3, #16]
 8004166:	b2db      	uxtb	r3, r3
 8004168:	461a      	mov	r2, r3
 800416a:	6979      	ldr	r1, [r7, #20]
 800416c:	f004 f978 	bl	8008460 <USB_EPStartXfer>
  }

  return HAL_OK;
 8004170:	2300      	movs	r3, #0
}
 8004172:	4618      	mov	r0, r3
 8004174:	3718      	adds	r7, #24
 8004176:	46bd      	mov	sp, r7
 8004178:	bd80      	pop	{r7, pc}

0800417a <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800417a:	b480      	push	{r7}
 800417c:	b083      	sub	sp, #12
 800417e:	af00      	add	r7, sp, #0
 8004180:	6078      	str	r0, [r7, #4]
 8004182:	460b      	mov	r3, r1
 8004184:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8004186:	78fb      	ldrb	r3, [r7, #3]
 8004188:	f003 020f 	and.w	r2, r3, #15
 800418c:	6879      	ldr	r1, [r7, #4]
 800418e:	4613      	mov	r3, r2
 8004190:	00db      	lsls	r3, r3, #3
 8004192:	4413      	add	r3, r2
 8004194:	009b      	lsls	r3, r3, #2
 8004196:	440b      	add	r3, r1
 8004198:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 800419c:	681b      	ldr	r3, [r3, #0]
}
 800419e:	4618      	mov	r0, r3
 80041a0:	370c      	adds	r7, #12
 80041a2:	46bd      	mov	sp, r7
 80041a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a8:	4770      	bx	lr

080041aa <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80041aa:	b580      	push	{r7, lr}
 80041ac:	b086      	sub	sp, #24
 80041ae:	af00      	add	r7, sp, #0
 80041b0:	60f8      	str	r0, [r7, #12]
 80041b2:	607a      	str	r2, [r7, #4]
 80041b4:	603b      	str	r3, [r7, #0]
 80041b6:	460b      	mov	r3, r1
 80041b8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80041ba:	7afb      	ldrb	r3, [r7, #11]
 80041bc:	f003 020f 	and.w	r2, r3, #15
 80041c0:	4613      	mov	r3, r2
 80041c2:	00db      	lsls	r3, r3, #3
 80041c4:	4413      	add	r3, r2
 80041c6:	009b      	lsls	r3, r3, #2
 80041c8:	3338      	adds	r3, #56	; 0x38
 80041ca:	68fa      	ldr	r2, [r7, #12]
 80041cc:	4413      	add	r3, r2
 80041ce:	3304      	adds	r3, #4
 80041d0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80041d2:	697b      	ldr	r3, [r7, #20]
 80041d4:	687a      	ldr	r2, [r7, #4]
 80041d6:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80041d8:	697b      	ldr	r3, [r7, #20]
 80041da:	683a      	ldr	r2, [r7, #0]
 80041dc:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80041de:	697b      	ldr	r3, [r7, #20]
 80041e0:	2200      	movs	r2, #0
 80041e2:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 80041e4:	697b      	ldr	r3, [r7, #20]
 80041e6:	2201      	movs	r2, #1
 80041e8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80041ea:	7afb      	ldrb	r3, [r7, #11]
 80041ec:	f003 030f 	and.w	r3, r3, #15
 80041f0:	b2da      	uxtb	r2, r3
 80041f2:	697b      	ldr	r3, [r7, #20]
 80041f4:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	691b      	ldr	r3, [r3, #16]
 80041fa:	2b01      	cmp	r3, #1
 80041fc:	d102      	bne.n	8004204 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80041fe:	687a      	ldr	r2, [r7, #4]
 8004200:	697b      	ldr	r3, [r7, #20]
 8004202:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004204:	7afb      	ldrb	r3, [r7, #11]
 8004206:	f003 030f 	and.w	r3, r3, #15
 800420a:	2b00      	cmp	r3, #0
 800420c:	d109      	bne.n	8004222 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	6818      	ldr	r0, [r3, #0]
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	691b      	ldr	r3, [r3, #16]
 8004216:	b2db      	uxtb	r3, r3
 8004218:	461a      	mov	r2, r3
 800421a:	6979      	ldr	r1, [r7, #20]
 800421c:	f004 fb68 	bl	80088f0 <USB_EP0StartXfer>
 8004220:	e008      	b.n	8004234 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	6818      	ldr	r0, [r3, #0]
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	691b      	ldr	r3, [r3, #16]
 800422a:	b2db      	uxtb	r3, r3
 800422c:	461a      	mov	r2, r3
 800422e:	6979      	ldr	r1, [r7, #20]
 8004230:	f004 f916 	bl	8008460 <USB_EPStartXfer>
  }

  return HAL_OK;
 8004234:	2300      	movs	r3, #0
}
 8004236:	4618      	mov	r0, r3
 8004238:	3718      	adds	r7, #24
 800423a:	46bd      	mov	sp, r7
 800423c:	bd80      	pop	{r7, pc}

0800423e <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800423e:	b580      	push	{r7, lr}
 8004240:	b084      	sub	sp, #16
 8004242:	af00      	add	r7, sp, #0
 8004244:	6078      	str	r0, [r7, #4]
 8004246:	460b      	mov	r3, r1
 8004248:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800424a:	78fb      	ldrb	r3, [r7, #3]
 800424c:	f003 020f 	and.w	r2, r3, #15
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	685b      	ldr	r3, [r3, #4]
 8004254:	429a      	cmp	r2, r3
 8004256:	d901      	bls.n	800425c <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8004258:	2301      	movs	r3, #1
 800425a:	e050      	b.n	80042fe <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800425c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004260:	2b00      	cmp	r3, #0
 8004262:	da0f      	bge.n	8004284 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004264:	78fb      	ldrb	r3, [r7, #3]
 8004266:	f003 020f 	and.w	r2, r3, #15
 800426a:	4613      	mov	r3, r2
 800426c:	00db      	lsls	r3, r3, #3
 800426e:	4413      	add	r3, r2
 8004270:	009b      	lsls	r3, r3, #2
 8004272:	3338      	adds	r3, #56	; 0x38
 8004274:	687a      	ldr	r2, [r7, #4]
 8004276:	4413      	add	r3, r2
 8004278:	3304      	adds	r3, #4
 800427a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	2201      	movs	r2, #1
 8004280:	705a      	strb	r2, [r3, #1]
 8004282:	e00d      	b.n	80042a0 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004284:	78fa      	ldrb	r2, [r7, #3]
 8004286:	4613      	mov	r3, r2
 8004288:	00db      	lsls	r3, r3, #3
 800428a:	4413      	add	r3, r2
 800428c:	009b      	lsls	r3, r3, #2
 800428e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004292:	687a      	ldr	r2, [r7, #4]
 8004294:	4413      	add	r3, r2
 8004296:	3304      	adds	r3, #4
 8004298:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	2200      	movs	r2, #0
 800429e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	2201      	movs	r2, #1
 80042a4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80042a6:	78fb      	ldrb	r3, [r7, #3]
 80042a8:	f003 030f 	and.w	r3, r3, #15
 80042ac:	b2da      	uxtb	r2, r3
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80042b8:	2b01      	cmp	r3, #1
 80042ba:	d101      	bne.n	80042c0 <HAL_PCD_EP_SetStall+0x82>
 80042bc:	2302      	movs	r3, #2
 80042be:	e01e      	b.n	80042fe <HAL_PCD_EP_SetStall+0xc0>
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	2201      	movs	r2, #1
 80042c4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	68f9      	ldr	r1, [r7, #12]
 80042ce:	4618      	mov	r0, r3
 80042d0:	f004 fda6 	bl	8008e20 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80042d4:	78fb      	ldrb	r3, [r7, #3]
 80042d6:	f003 030f 	and.w	r3, r3, #15
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d10a      	bne.n	80042f4 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	6818      	ldr	r0, [r3, #0]
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	691b      	ldr	r3, [r3, #16]
 80042e6:	b2d9      	uxtb	r1, r3
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80042ee:	461a      	mov	r2, r3
 80042f0:	f004 ff96 	bl	8009220 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	2200      	movs	r2, #0
 80042f8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80042fc:	2300      	movs	r3, #0
}
 80042fe:	4618      	mov	r0, r3
 8004300:	3710      	adds	r7, #16
 8004302:	46bd      	mov	sp, r7
 8004304:	bd80      	pop	{r7, pc}

08004306 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004306:	b580      	push	{r7, lr}
 8004308:	b084      	sub	sp, #16
 800430a:	af00      	add	r7, sp, #0
 800430c:	6078      	str	r0, [r7, #4]
 800430e:	460b      	mov	r3, r1
 8004310:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004312:	78fb      	ldrb	r3, [r7, #3]
 8004314:	f003 020f 	and.w	r2, r3, #15
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	685b      	ldr	r3, [r3, #4]
 800431c:	429a      	cmp	r2, r3
 800431e:	d901      	bls.n	8004324 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8004320:	2301      	movs	r3, #1
 8004322:	e042      	b.n	80043aa <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004324:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004328:	2b00      	cmp	r3, #0
 800432a:	da0f      	bge.n	800434c <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800432c:	78fb      	ldrb	r3, [r7, #3]
 800432e:	f003 020f 	and.w	r2, r3, #15
 8004332:	4613      	mov	r3, r2
 8004334:	00db      	lsls	r3, r3, #3
 8004336:	4413      	add	r3, r2
 8004338:	009b      	lsls	r3, r3, #2
 800433a:	3338      	adds	r3, #56	; 0x38
 800433c:	687a      	ldr	r2, [r7, #4]
 800433e:	4413      	add	r3, r2
 8004340:	3304      	adds	r3, #4
 8004342:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	2201      	movs	r2, #1
 8004348:	705a      	strb	r2, [r3, #1]
 800434a:	e00f      	b.n	800436c <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800434c:	78fb      	ldrb	r3, [r7, #3]
 800434e:	f003 020f 	and.w	r2, r3, #15
 8004352:	4613      	mov	r3, r2
 8004354:	00db      	lsls	r3, r3, #3
 8004356:	4413      	add	r3, r2
 8004358:	009b      	lsls	r3, r3, #2
 800435a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800435e:	687a      	ldr	r2, [r7, #4]
 8004360:	4413      	add	r3, r2
 8004362:	3304      	adds	r3, #4
 8004364:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	2200      	movs	r2, #0
 800436a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	2200      	movs	r2, #0
 8004370:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004372:	78fb      	ldrb	r3, [r7, #3]
 8004374:	f003 030f 	and.w	r3, r3, #15
 8004378:	b2da      	uxtb	r2, r3
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004384:	2b01      	cmp	r3, #1
 8004386:	d101      	bne.n	800438c <HAL_PCD_EP_ClrStall+0x86>
 8004388:	2302      	movs	r3, #2
 800438a:	e00e      	b.n	80043aa <HAL_PCD_EP_ClrStall+0xa4>
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	2201      	movs	r2, #1
 8004390:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	68f9      	ldr	r1, [r7, #12]
 800439a:	4618      	mov	r0, r3
 800439c:	f004 fdae 	bl	8008efc <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	2200      	movs	r2, #0
 80043a4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80043a8:	2300      	movs	r3, #0
}
 80043aa:	4618      	mov	r0, r3
 80043ac:	3710      	adds	r7, #16
 80043ae:	46bd      	mov	sp, r7
 80043b0:	bd80      	pop	{r7, pc}

080043b2 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80043b2:	b580      	push	{r7, lr}
 80043b4:	b084      	sub	sp, #16
 80043b6:	af00      	add	r7, sp, #0
 80043b8:	6078      	str	r0, [r7, #4]
 80043ba:	460b      	mov	r3, r1
 80043bc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80043be:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	da0c      	bge.n	80043e0 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80043c6:	78fb      	ldrb	r3, [r7, #3]
 80043c8:	f003 020f 	and.w	r2, r3, #15
 80043cc:	4613      	mov	r3, r2
 80043ce:	00db      	lsls	r3, r3, #3
 80043d0:	4413      	add	r3, r2
 80043d2:	009b      	lsls	r3, r3, #2
 80043d4:	3338      	adds	r3, #56	; 0x38
 80043d6:	687a      	ldr	r2, [r7, #4]
 80043d8:	4413      	add	r3, r2
 80043da:	3304      	adds	r3, #4
 80043dc:	60fb      	str	r3, [r7, #12]
 80043de:	e00c      	b.n	80043fa <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80043e0:	78fb      	ldrb	r3, [r7, #3]
 80043e2:	f003 020f 	and.w	r2, r3, #15
 80043e6:	4613      	mov	r3, r2
 80043e8:	00db      	lsls	r3, r3, #3
 80043ea:	4413      	add	r3, r2
 80043ec:	009b      	lsls	r3, r3, #2
 80043ee:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80043f2:	687a      	ldr	r2, [r7, #4]
 80043f4:	4413      	add	r3, r2
 80043f6:	3304      	adds	r3, #4
 80043f8:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	68f9      	ldr	r1, [r7, #12]
 8004400:	4618      	mov	r0, r3
 8004402:	f004 fbcd 	bl	8008ba0 <USB_EPStopXfer>
 8004406:	4603      	mov	r3, r0
 8004408:	72fb      	strb	r3, [r7, #11]

  return ret;
 800440a:	7afb      	ldrb	r3, [r7, #11]
}
 800440c:	4618      	mov	r0, r3
 800440e:	3710      	adds	r7, #16
 8004410:	46bd      	mov	sp, r7
 8004412:	bd80      	pop	{r7, pc}

08004414 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004414:	b580      	push	{r7, lr}
 8004416:	b08a      	sub	sp, #40	; 0x28
 8004418:	af02      	add	r7, sp, #8
 800441a:	6078      	str	r0, [r7, #4]
 800441c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004424:	697b      	ldr	r3, [r7, #20]
 8004426:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8004428:	683a      	ldr	r2, [r7, #0]
 800442a:	4613      	mov	r3, r2
 800442c:	00db      	lsls	r3, r3, #3
 800442e:	4413      	add	r3, r2
 8004430:	009b      	lsls	r3, r3, #2
 8004432:	3338      	adds	r3, #56	; 0x38
 8004434:	687a      	ldr	r2, [r7, #4]
 8004436:	4413      	add	r3, r2
 8004438:	3304      	adds	r3, #4
 800443a:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	6a1a      	ldr	r2, [r3, #32]
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	699b      	ldr	r3, [r3, #24]
 8004444:	429a      	cmp	r2, r3
 8004446:	d901      	bls.n	800444c <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8004448:	2301      	movs	r3, #1
 800444a:	e06c      	b.n	8004526 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	699a      	ldr	r2, [r3, #24]
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	6a1b      	ldr	r3, [r3, #32]
 8004454:	1ad3      	subs	r3, r2, r3
 8004456:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	68db      	ldr	r3, [r3, #12]
 800445c:	69fa      	ldr	r2, [r7, #28]
 800445e:	429a      	cmp	r2, r3
 8004460:	d902      	bls.n	8004468 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	68db      	ldr	r3, [r3, #12]
 8004466:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8004468:	69fb      	ldr	r3, [r7, #28]
 800446a:	3303      	adds	r3, #3
 800446c:	089b      	lsrs	r3, r3, #2
 800446e:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004470:	e02b      	b.n	80044ca <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	699a      	ldr	r2, [r3, #24]
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	6a1b      	ldr	r3, [r3, #32]
 800447a:	1ad3      	subs	r3, r2, r3
 800447c:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	68db      	ldr	r3, [r3, #12]
 8004482:	69fa      	ldr	r2, [r7, #28]
 8004484:	429a      	cmp	r2, r3
 8004486:	d902      	bls.n	800448e <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	68db      	ldr	r3, [r3, #12]
 800448c:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800448e:	69fb      	ldr	r3, [r7, #28]
 8004490:	3303      	adds	r3, #3
 8004492:	089b      	lsrs	r3, r3, #2
 8004494:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	6919      	ldr	r1, [r3, #16]
 800449a:	683b      	ldr	r3, [r7, #0]
 800449c:	b2da      	uxtb	r2, r3
 800449e:	69fb      	ldr	r3, [r7, #28]
 80044a0:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80044a6:	b2db      	uxtb	r3, r3
 80044a8:	9300      	str	r3, [sp, #0]
 80044aa:	4603      	mov	r3, r0
 80044ac:	6978      	ldr	r0, [r7, #20]
 80044ae:	f004 fc21 	bl	8008cf4 <USB_WritePacket>

    ep->xfer_buff  += len;
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	691a      	ldr	r2, [r3, #16]
 80044b6:	69fb      	ldr	r3, [r7, #28]
 80044b8:	441a      	add	r2, r3
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	6a1a      	ldr	r2, [r3, #32]
 80044c2:	69fb      	ldr	r3, [r7, #28]
 80044c4:	441a      	add	r2, r3
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80044ca:	683b      	ldr	r3, [r7, #0]
 80044cc:	015a      	lsls	r2, r3, #5
 80044ce:	693b      	ldr	r3, [r7, #16]
 80044d0:	4413      	add	r3, r2
 80044d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80044d6:	699b      	ldr	r3, [r3, #24]
 80044d8:	b29b      	uxth	r3, r3
 80044da:	69ba      	ldr	r2, [r7, #24]
 80044dc:	429a      	cmp	r2, r3
 80044de:	d809      	bhi.n	80044f4 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	6a1a      	ldr	r2, [r3, #32]
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80044e8:	429a      	cmp	r2, r3
 80044ea:	d203      	bcs.n	80044f4 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	699b      	ldr	r3, [r3, #24]
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d1be      	bne.n	8004472 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	699a      	ldr	r2, [r3, #24]
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	6a1b      	ldr	r3, [r3, #32]
 80044fc:	429a      	cmp	r2, r3
 80044fe:	d811      	bhi.n	8004524 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004500:	683b      	ldr	r3, [r7, #0]
 8004502:	f003 030f 	and.w	r3, r3, #15
 8004506:	2201      	movs	r2, #1
 8004508:	fa02 f303 	lsl.w	r3, r2, r3
 800450c:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800450e:	693b      	ldr	r3, [r7, #16]
 8004510:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004514:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004516:	68bb      	ldr	r3, [r7, #8]
 8004518:	43db      	mvns	r3, r3
 800451a:	6939      	ldr	r1, [r7, #16]
 800451c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004520:	4013      	ands	r3, r2
 8004522:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8004524:	2300      	movs	r3, #0
}
 8004526:	4618      	mov	r0, r3
 8004528:	3720      	adds	r7, #32
 800452a:	46bd      	mov	sp, r7
 800452c:	bd80      	pop	{r7, pc}
	...

08004530 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004530:	b580      	push	{r7, lr}
 8004532:	b088      	sub	sp, #32
 8004534:	af00      	add	r7, sp, #0
 8004536:	6078      	str	r0, [r7, #4]
 8004538:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004540:	69fb      	ldr	r3, [r7, #28]
 8004542:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004544:	69fb      	ldr	r3, [r7, #28]
 8004546:	333c      	adds	r3, #60	; 0x3c
 8004548:	3304      	adds	r3, #4
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800454e:	683b      	ldr	r3, [r7, #0]
 8004550:	015a      	lsls	r2, r3, #5
 8004552:	69bb      	ldr	r3, [r7, #24]
 8004554:	4413      	add	r3, r2
 8004556:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800455a:	689b      	ldr	r3, [r3, #8]
 800455c:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	691b      	ldr	r3, [r3, #16]
 8004562:	2b01      	cmp	r3, #1
 8004564:	d17b      	bne.n	800465e <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8004566:	693b      	ldr	r3, [r7, #16]
 8004568:	f003 0308 	and.w	r3, r3, #8
 800456c:	2b00      	cmp	r3, #0
 800456e:	d015      	beq.n	800459c <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004570:	697b      	ldr	r3, [r7, #20]
 8004572:	4a61      	ldr	r2, [pc, #388]	; (80046f8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004574:	4293      	cmp	r3, r2
 8004576:	f240 80b9 	bls.w	80046ec <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800457a:	693b      	ldr	r3, [r7, #16]
 800457c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004580:	2b00      	cmp	r3, #0
 8004582:	f000 80b3 	beq.w	80046ec <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004586:	683b      	ldr	r3, [r7, #0]
 8004588:	015a      	lsls	r2, r3, #5
 800458a:	69bb      	ldr	r3, [r7, #24]
 800458c:	4413      	add	r3, r2
 800458e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004592:	461a      	mov	r2, r3
 8004594:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004598:	6093      	str	r3, [r2, #8]
 800459a:	e0a7      	b.n	80046ec <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800459c:	693b      	ldr	r3, [r7, #16]
 800459e:	f003 0320 	and.w	r3, r3, #32
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d009      	beq.n	80045ba <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80045a6:	683b      	ldr	r3, [r7, #0]
 80045a8:	015a      	lsls	r2, r3, #5
 80045aa:	69bb      	ldr	r3, [r7, #24]
 80045ac:	4413      	add	r3, r2
 80045ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045b2:	461a      	mov	r2, r3
 80045b4:	2320      	movs	r3, #32
 80045b6:	6093      	str	r3, [r2, #8]
 80045b8:	e098      	b.n	80046ec <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80045ba:	693b      	ldr	r3, [r7, #16]
 80045bc:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	f040 8093 	bne.w	80046ec <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80045c6:	697b      	ldr	r3, [r7, #20]
 80045c8:	4a4b      	ldr	r2, [pc, #300]	; (80046f8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80045ca:	4293      	cmp	r3, r2
 80045cc:	d90f      	bls.n	80045ee <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80045ce:	693b      	ldr	r3, [r7, #16]
 80045d0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d00a      	beq.n	80045ee <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80045d8:	683b      	ldr	r3, [r7, #0]
 80045da:	015a      	lsls	r2, r3, #5
 80045dc:	69bb      	ldr	r3, [r7, #24]
 80045de:	4413      	add	r3, r2
 80045e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045e4:	461a      	mov	r2, r3
 80045e6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80045ea:	6093      	str	r3, [r2, #8]
 80045ec:	e07e      	b.n	80046ec <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80045ee:	683a      	ldr	r2, [r7, #0]
 80045f0:	4613      	mov	r3, r2
 80045f2:	00db      	lsls	r3, r3, #3
 80045f4:	4413      	add	r3, r2
 80045f6:	009b      	lsls	r3, r3, #2
 80045f8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80045fc:	687a      	ldr	r2, [r7, #4]
 80045fe:	4413      	add	r3, r2
 8004600:	3304      	adds	r3, #4
 8004602:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	69da      	ldr	r2, [r3, #28]
 8004608:	683b      	ldr	r3, [r7, #0]
 800460a:	0159      	lsls	r1, r3, #5
 800460c:	69bb      	ldr	r3, [r7, #24]
 800460e:	440b      	add	r3, r1
 8004610:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004614:	691b      	ldr	r3, [r3, #16]
 8004616:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800461a:	1ad2      	subs	r2, r2, r3
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8004620:	683b      	ldr	r3, [r7, #0]
 8004622:	2b00      	cmp	r3, #0
 8004624:	d114      	bne.n	8004650 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	699b      	ldr	r3, [r3, #24]
 800462a:	2b00      	cmp	r3, #0
 800462c:	d109      	bne.n	8004642 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	6818      	ldr	r0, [r3, #0]
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004638:	461a      	mov	r2, r3
 800463a:	2101      	movs	r1, #1
 800463c:	f004 fdf0 	bl	8009220 <USB_EP0_OutStart>
 8004640:	e006      	b.n	8004650 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	691a      	ldr	r2, [r3, #16]
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	6a1b      	ldr	r3, [r3, #32]
 800464a:	441a      	add	r2, r3
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004650:	683b      	ldr	r3, [r7, #0]
 8004652:	b2db      	uxtb	r3, r3
 8004654:	4619      	mov	r1, r3
 8004656:	6878      	ldr	r0, [r7, #4]
 8004658:	f007 f862 	bl	800b720 <HAL_PCD_DataOutStageCallback>
 800465c:	e046      	b.n	80046ec <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800465e:	697b      	ldr	r3, [r7, #20]
 8004660:	4a26      	ldr	r2, [pc, #152]	; (80046fc <PCD_EP_OutXfrComplete_int+0x1cc>)
 8004662:	4293      	cmp	r3, r2
 8004664:	d124      	bne.n	80046b0 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8004666:	693b      	ldr	r3, [r7, #16]
 8004668:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800466c:	2b00      	cmp	r3, #0
 800466e:	d00a      	beq.n	8004686 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004670:	683b      	ldr	r3, [r7, #0]
 8004672:	015a      	lsls	r2, r3, #5
 8004674:	69bb      	ldr	r3, [r7, #24]
 8004676:	4413      	add	r3, r2
 8004678:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800467c:	461a      	mov	r2, r3
 800467e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004682:	6093      	str	r3, [r2, #8]
 8004684:	e032      	b.n	80046ec <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004686:	693b      	ldr	r3, [r7, #16]
 8004688:	f003 0320 	and.w	r3, r3, #32
 800468c:	2b00      	cmp	r3, #0
 800468e:	d008      	beq.n	80046a2 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004690:	683b      	ldr	r3, [r7, #0]
 8004692:	015a      	lsls	r2, r3, #5
 8004694:	69bb      	ldr	r3, [r7, #24]
 8004696:	4413      	add	r3, r2
 8004698:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800469c:	461a      	mov	r2, r3
 800469e:	2320      	movs	r3, #32
 80046a0:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80046a2:	683b      	ldr	r3, [r7, #0]
 80046a4:	b2db      	uxtb	r3, r3
 80046a6:	4619      	mov	r1, r3
 80046a8:	6878      	ldr	r0, [r7, #4]
 80046aa:	f007 f839 	bl	800b720 <HAL_PCD_DataOutStageCallback>
 80046ae:	e01d      	b.n	80046ec <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80046b0:	683b      	ldr	r3, [r7, #0]
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d114      	bne.n	80046e0 <PCD_EP_OutXfrComplete_int+0x1b0>
 80046b6:	6879      	ldr	r1, [r7, #4]
 80046b8:	683a      	ldr	r2, [r7, #0]
 80046ba:	4613      	mov	r3, r2
 80046bc:	00db      	lsls	r3, r3, #3
 80046be:	4413      	add	r3, r2
 80046c0:	009b      	lsls	r3, r3, #2
 80046c2:	440b      	add	r3, r1
 80046c4:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d108      	bne.n	80046e0 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	6818      	ldr	r0, [r3, #0]
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80046d8:	461a      	mov	r2, r3
 80046da:	2100      	movs	r1, #0
 80046dc:	f004 fda0 	bl	8009220 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80046e0:	683b      	ldr	r3, [r7, #0]
 80046e2:	b2db      	uxtb	r3, r3
 80046e4:	4619      	mov	r1, r3
 80046e6:	6878      	ldr	r0, [r7, #4]
 80046e8:	f007 f81a 	bl	800b720 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80046ec:	2300      	movs	r3, #0
}
 80046ee:	4618      	mov	r0, r3
 80046f0:	3720      	adds	r7, #32
 80046f2:	46bd      	mov	sp, r7
 80046f4:	bd80      	pop	{r7, pc}
 80046f6:	bf00      	nop
 80046f8:	4f54300a 	.word	0x4f54300a
 80046fc:	4f54310a 	.word	0x4f54310a

08004700 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004700:	b580      	push	{r7, lr}
 8004702:	b086      	sub	sp, #24
 8004704:	af00      	add	r7, sp, #0
 8004706:	6078      	str	r0, [r7, #4]
 8004708:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004710:	697b      	ldr	r3, [r7, #20]
 8004712:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004714:	697b      	ldr	r3, [r7, #20]
 8004716:	333c      	adds	r3, #60	; 0x3c
 8004718:	3304      	adds	r3, #4
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800471e:	683b      	ldr	r3, [r7, #0]
 8004720:	015a      	lsls	r2, r3, #5
 8004722:	693b      	ldr	r3, [r7, #16]
 8004724:	4413      	add	r3, r2
 8004726:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800472a:	689b      	ldr	r3, [r3, #8]
 800472c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	4a15      	ldr	r2, [pc, #84]	; (8004788 <PCD_EP_OutSetupPacket_int+0x88>)
 8004732:	4293      	cmp	r3, r2
 8004734:	d90e      	bls.n	8004754 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004736:	68bb      	ldr	r3, [r7, #8]
 8004738:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800473c:	2b00      	cmp	r3, #0
 800473e:	d009      	beq.n	8004754 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004740:	683b      	ldr	r3, [r7, #0]
 8004742:	015a      	lsls	r2, r3, #5
 8004744:	693b      	ldr	r3, [r7, #16]
 8004746:	4413      	add	r3, r2
 8004748:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800474c:	461a      	mov	r2, r3
 800474e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004752:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8004754:	6878      	ldr	r0, [r7, #4]
 8004756:	f006 ffd1 	bl	800b6fc <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	4a0a      	ldr	r2, [pc, #40]	; (8004788 <PCD_EP_OutSetupPacket_int+0x88>)
 800475e:	4293      	cmp	r3, r2
 8004760:	d90c      	bls.n	800477c <PCD_EP_OutSetupPacket_int+0x7c>
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	691b      	ldr	r3, [r3, #16]
 8004766:	2b01      	cmp	r3, #1
 8004768:	d108      	bne.n	800477c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	6818      	ldr	r0, [r3, #0]
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004774:	461a      	mov	r2, r3
 8004776:	2101      	movs	r1, #1
 8004778:	f004 fd52 	bl	8009220 <USB_EP0_OutStart>
  }

  return HAL_OK;
 800477c:	2300      	movs	r3, #0
}
 800477e:	4618      	mov	r0, r3
 8004780:	3718      	adds	r7, #24
 8004782:	46bd      	mov	sp, r7
 8004784:	bd80      	pop	{r7, pc}
 8004786:	bf00      	nop
 8004788:	4f54300a 	.word	0x4f54300a

0800478c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800478c:	b480      	push	{r7}
 800478e:	b085      	sub	sp, #20
 8004790:	af00      	add	r7, sp, #0
 8004792:	6078      	str	r0, [r7, #4]
 8004794:	460b      	mov	r3, r1
 8004796:	70fb      	strb	r3, [r7, #3]
 8004798:	4613      	mov	r3, r2
 800479a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047a2:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80047a4:	78fb      	ldrb	r3, [r7, #3]
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d107      	bne.n	80047ba <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80047aa:	883b      	ldrh	r3, [r7, #0]
 80047ac:	0419      	lsls	r1, r3, #16
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	68ba      	ldr	r2, [r7, #8]
 80047b4:	430a      	orrs	r2, r1
 80047b6:	629a      	str	r2, [r3, #40]	; 0x28
 80047b8:	e028      	b.n	800480c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047c0:	0c1b      	lsrs	r3, r3, #16
 80047c2:	68ba      	ldr	r2, [r7, #8]
 80047c4:	4413      	add	r3, r2
 80047c6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80047c8:	2300      	movs	r3, #0
 80047ca:	73fb      	strb	r3, [r7, #15]
 80047cc:	e00d      	b.n	80047ea <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681a      	ldr	r2, [r3, #0]
 80047d2:	7bfb      	ldrb	r3, [r7, #15]
 80047d4:	3340      	adds	r3, #64	; 0x40
 80047d6:	009b      	lsls	r3, r3, #2
 80047d8:	4413      	add	r3, r2
 80047da:	685b      	ldr	r3, [r3, #4]
 80047dc:	0c1b      	lsrs	r3, r3, #16
 80047de:	68ba      	ldr	r2, [r7, #8]
 80047e0:	4413      	add	r3, r2
 80047e2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80047e4:	7bfb      	ldrb	r3, [r7, #15]
 80047e6:	3301      	adds	r3, #1
 80047e8:	73fb      	strb	r3, [r7, #15]
 80047ea:	7bfa      	ldrb	r2, [r7, #15]
 80047ec:	78fb      	ldrb	r3, [r7, #3]
 80047ee:	3b01      	subs	r3, #1
 80047f0:	429a      	cmp	r2, r3
 80047f2:	d3ec      	bcc.n	80047ce <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80047f4:	883b      	ldrh	r3, [r7, #0]
 80047f6:	0418      	lsls	r0, r3, #16
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	6819      	ldr	r1, [r3, #0]
 80047fc:	78fb      	ldrb	r3, [r7, #3]
 80047fe:	3b01      	subs	r3, #1
 8004800:	68ba      	ldr	r2, [r7, #8]
 8004802:	4302      	orrs	r2, r0
 8004804:	3340      	adds	r3, #64	; 0x40
 8004806:	009b      	lsls	r3, r3, #2
 8004808:	440b      	add	r3, r1
 800480a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800480c:	2300      	movs	r3, #0
}
 800480e:	4618      	mov	r0, r3
 8004810:	3714      	adds	r7, #20
 8004812:	46bd      	mov	sp, r7
 8004814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004818:	4770      	bx	lr

0800481a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800481a:	b480      	push	{r7}
 800481c:	b083      	sub	sp, #12
 800481e:	af00      	add	r7, sp, #0
 8004820:	6078      	str	r0, [r7, #4]
 8004822:	460b      	mov	r3, r1
 8004824:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	887a      	ldrh	r2, [r7, #2]
 800482c:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800482e:	2300      	movs	r3, #0
}
 8004830:	4618      	mov	r0, r3
 8004832:	370c      	adds	r7, #12
 8004834:	46bd      	mov	sp, r7
 8004836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800483a:	4770      	bx	lr

0800483c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800483c:	b480      	push	{r7}
 800483e:	b083      	sub	sp, #12
 8004840:	af00      	add	r7, sp, #0
 8004842:	6078      	str	r0, [r7, #4]
 8004844:	460b      	mov	r3, r1
 8004846:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8004848:	bf00      	nop
 800484a:	370c      	adds	r7, #12
 800484c:	46bd      	mov	sp, r7
 800484e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004852:	4770      	bx	lr

08004854 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004854:	b580      	push	{r7, lr}
 8004856:	b086      	sub	sp, #24
 8004858:	af00      	add	r7, sp, #0
 800485a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	2b00      	cmp	r3, #0
 8004860:	d101      	bne.n	8004866 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004862:	2301      	movs	r3, #1
 8004864:	e267      	b.n	8004d36 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f003 0301 	and.w	r3, r3, #1
 800486e:	2b00      	cmp	r3, #0
 8004870:	d075      	beq.n	800495e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004872:	4b88      	ldr	r3, [pc, #544]	; (8004a94 <HAL_RCC_OscConfig+0x240>)
 8004874:	689b      	ldr	r3, [r3, #8]
 8004876:	f003 030c 	and.w	r3, r3, #12
 800487a:	2b04      	cmp	r3, #4
 800487c:	d00c      	beq.n	8004898 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800487e:	4b85      	ldr	r3, [pc, #532]	; (8004a94 <HAL_RCC_OscConfig+0x240>)
 8004880:	689b      	ldr	r3, [r3, #8]
 8004882:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004886:	2b08      	cmp	r3, #8
 8004888:	d112      	bne.n	80048b0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800488a:	4b82      	ldr	r3, [pc, #520]	; (8004a94 <HAL_RCC_OscConfig+0x240>)
 800488c:	685b      	ldr	r3, [r3, #4]
 800488e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004892:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004896:	d10b      	bne.n	80048b0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004898:	4b7e      	ldr	r3, [pc, #504]	; (8004a94 <HAL_RCC_OscConfig+0x240>)
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d05b      	beq.n	800495c <HAL_RCC_OscConfig+0x108>
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	685b      	ldr	r3, [r3, #4]
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d157      	bne.n	800495c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80048ac:	2301      	movs	r3, #1
 80048ae:	e242      	b.n	8004d36 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	685b      	ldr	r3, [r3, #4]
 80048b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80048b8:	d106      	bne.n	80048c8 <HAL_RCC_OscConfig+0x74>
 80048ba:	4b76      	ldr	r3, [pc, #472]	; (8004a94 <HAL_RCC_OscConfig+0x240>)
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	4a75      	ldr	r2, [pc, #468]	; (8004a94 <HAL_RCC_OscConfig+0x240>)
 80048c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80048c4:	6013      	str	r3, [r2, #0]
 80048c6:	e01d      	b.n	8004904 <HAL_RCC_OscConfig+0xb0>
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	685b      	ldr	r3, [r3, #4]
 80048cc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80048d0:	d10c      	bne.n	80048ec <HAL_RCC_OscConfig+0x98>
 80048d2:	4b70      	ldr	r3, [pc, #448]	; (8004a94 <HAL_RCC_OscConfig+0x240>)
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	4a6f      	ldr	r2, [pc, #444]	; (8004a94 <HAL_RCC_OscConfig+0x240>)
 80048d8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80048dc:	6013      	str	r3, [r2, #0]
 80048de:	4b6d      	ldr	r3, [pc, #436]	; (8004a94 <HAL_RCC_OscConfig+0x240>)
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	4a6c      	ldr	r2, [pc, #432]	; (8004a94 <HAL_RCC_OscConfig+0x240>)
 80048e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80048e8:	6013      	str	r3, [r2, #0]
 80048ea:	e00b      	b.n	8004904 <HAL_RCC_OscConfig+0xb0>
 80048ec:	4b69      	ldr	r3, [pc, #420]	; (8004a94 <HAL_RCC_OscConfig+0x240>)
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	4a68      	ldr	r2, [pc, #416]	; (8004a94 <HAL_RCC_OscConfig+0x240>)
 80048f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80048f6:	6013      	str	r3, [r2, #0]
 80048f8:	4b66      	ldr	r3, [pc, #408]	; (8004a94 <HAL_RCC_OscConfig+0x240>)
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	4a65      	ldr	r2, [pc, #404]	; (8004a94 <HAL_RCC_OscConfig+0x240>)
 80048fe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004902:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	685b      	ldr	r3, [r3, #4]
 8004908:	2b00      	cmp	r3, #0
 800490a:	d013      	beq.n	8004934 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800490c:	f7fd fe12 	bl	8002534 <HAL_GetTick>
 8004910:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004912:	e008      	b.n	8004926 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004914:	f7fd fe0e 	bl	8002534 <HAL_GetTick>
 8004918:	4602      	mov	r2, r0
 800491a:	693b      	ldr	r3, [r7, #16]
 800491c:	1ad3      	subs	r3, r2, r3
 800491e:	2b64      	cmp	r3, #100	; 0x64
 8004920:	d901      	bls.n	8004926 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004922:	2303      	movs	r3, #3
 8004924:	e207      	b.n	8004d36 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004926:	4b5b      	ldr	r3, [pc, #364]	; (8004a94 <HAL_RCC_OscConfig+0x240>)
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800492e:	2b00      	cmp	r3, #0
 8004930:	d0f0      	beq.n	8004914 <HAL_RCC_OscConfig+0xc0>
 8004932:	e014      	b.n	800495e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004934:	f7fd fdfe 	bl	8002534 <HAL_GetTick>
 8004938:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800493a:	e008      	b.n	800494e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800493c:	f7fd fdfa 	bl	8002534 <HAL_GetTick>
 8004940:	4602      	mov	r2, r0
 8004942:	693b      	ldr	r3, [r7, #16]
 8004944:	1ad3      	subs	r3, r2, r3
 8004946:	2b64      	cmp	r3, #100	; 0x64
 8004948:	d901      	bls.n	800494e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800494a:	2303      	movs	r3, #3
 800494c:	e1f3      	b.n	8004d36 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800494e:	4b51      	ldr	r3, [pc, #324]	; (8004a94 <HAL_RCC_OscConfig+0x240>)
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004956:	2b00      	cmp	r3, #0
 8004958:	d1f0      	bne.n	800493c <HAL_RCC_OscConfig+0xe8>
 800495a:	e000      	b.n	800495e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800495c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	f003 0302 	and.w	r3, r3, #2
 8004966:	2b00      	cmp	r3, #0
 8004968:	d063      	beq.n	8004a32 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800496a:	4b4a      	ldr	r3, [pc, #296]	; (8004a94 <HAL_RCC_OscConfig+0x240>)
 800496c:	689b      	ldr	r3, [r3, #8]
 800496e:	f003 030c 	and.w	r3, r3, #12
 8004972:	2b00      	cmp	r3, #0
 8004974:	d00b      	beq.n	800498e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004976:	4b47      	ldr	r3, [pc, #284]	; (8004a94 <HAL_RCC_OscConfig+0x240>)
 8004978:	689b      	ldr	r3, [r3, #8]
 800497a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800497e:	2b08      	cmp	r3, #8
 8004980:	d11c      	bne.n	80049bc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004982:	4b44      	ldr	r3, [pc, #272]	; (8004a94 <HAL_RCC_OscConfig+0x240>)
 8004984:	685b      	ldr	r3, [r3, #4]
 8004986:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800498a:	2b00      	cmp	r3, #0
 800498c:	d116      	bne.n	80049bc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800498e:	4b41      	ldr	r3, [pc, #260]	; (8004a94 <HAL_RCC_OscConfig+0x240>)
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	f003 0302 	and.w	r3, r3, #2
 8004996:	2b00      	cmp	r3, #0
 8004998:	d005      	beq.n	80049a6 <HAL_RCC_OscConfig+0x152>
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	68db      	ldr	r3, [r3, #12]
 800499e:	2b01      	cmp	r3, #1
 80049a0:	d001      	beq.n	80049a6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80049a2:	2301      	movs	r3, #1
 80049a4:	e1c7      	b.n	8004d36 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80049a6:	4b3b      	ldr	r3, [pc, #236]	; (8004a94 <HAL_RCC_OscConfig+0x240>)
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	691b      	ldr	r3, [r3, #16]
 80049b2:	00db      	lsls	r3, r3, #3
 80049b4:	4937      	ldr	r1, [pc, #220]	; (8004a94 <HAL_RCC_OscConfig+0x240>)
 80049b6:	4313      	orrs	r3, r2
 80049b8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80049ba:	e03a      	b.n	8004a32 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	68db      	ldr	r3, [r3, #12]
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d020      	beq.n	8004a06 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80049c4:	4b34      	ldr	r3, [pc, #208]	; (8004a98 <HAL_RCC_OscConfig+0x244>)
 80049c6:	2201      	movs	r2, #1
 80049c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049ca:	f7fd fdb3 	bl	8002534 <HAL_GetTick>
 80049ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80049d0:	e008      	b.n	80049e4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80049d2:	f7fd fdaf 	bl	8002534 <HAL_GetTick>
 80049d6:	4602      	mov	r2, r0
 80049d8:	693b      	ldr	r3, [r7, #16]
 80049da:	1ad3      	subs	r3, r2, r3
 80049dc:	2b02      	cmp	r3, #2
 80049de:	d901      	bls.n	80049e4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80049e0:	2303      	movs	r3, #3
 80049e2:	e1a8      	b.n	8004d36 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80049e4:	4b2b      	ldr	r3, [pc, #172]	; (8004a94 <HAL_RCC_OscConfig+0x240>)
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	f003 0302 	and.w	r3, r3, #2
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d0f0      	beq.n	80049d2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80049f0:	4b28      	ldr	r3, [pc, #160]	; (8004a94 <HAL_RCC_OscConfig+0x240>)
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	691b      	ldr	r3, [r3, #16]
 80049fc:	00db      	lsls	r3, r3, #3
 80049fe:	4925      	ldr	r1, [pc, #148]	; (8004a94 <HAL_RCC_OscConfig+0x240>)
 8004a00:	4313      	orrs	r3, r2
 8004a02:	600b      	str	r3, [r1, #0]
 8004a04:	e015      	b.n	8004a32 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004a06:	4b24      	ldr	r3, [pc, #144]	; (8004a98 <HAL_RCC_OscConfig+0x244>)
 8004a08:	2200      	movs	r2, #0
 8004a0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a0c:	f7fd fd92 	bl	8002534 <HAL_GetTick>
 8004a10:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004a12:	e008      	b.n	8004a26 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004a14:	f7fd fd8e 	bl	8002534 <HAL_GetTick>
 8004a18:	4602      	mov	r2, r0
 8004a1a:	693b      	ldr	r3, [r7, #16]
 8004a1c:	1ad3      	subs	r3, r2, r3
 8004a1e:	2b02      	cmp	r3, #2
 8004a20:	d901      	bls.n	8004a26 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004a22:	2303      	movs	r3, #3
 8004a24:	e187      	b.n	8004d36 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004a26:	4b1b      	ldr	r3, [pc, #108]	; (8004a94 <HAL_RCC_OscConfig+0x240>)
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	f003 0302 	and.w	r3, r3, #2
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d1f0      	bne.n	8004a14 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	f003 0308 	and.w	r3, r3, #8
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d036      	beq.n	8004aac <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	695b      	ldr	r3, [r3, #20]
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d016      	beq.n	8004a74 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004a46:	4b15      	ldr	r3, [pc, #84]	; (8004a9c <HAL_RCC_OscConfig+0x248>)
 8004a48:	2201      	movs	r2, #1
 8004a4a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a4c:	f7fd fd72 	bl	8002534 <HAL_GetTick>
 8004a50:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004a52:	e008      	b.n	8004a66 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004a54:	f7fd fd6e 	bl	8002534 <HAL_GetTick>
 8004a58:	4602      	mov	r2, r0
 8004a5a:	693b      	ldr	r3, [r7, #16]
 8004a5c:	1ad3      	subs	r3, r2, r3
 8004a5e:	2b02      	cmp	r3, #2
 8004a60:	d901      	bls.n	8004a66 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004a62:	2303      	movs	r3, #3
 8004a64:	e167      	b.n	8004d36 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004a66:	4b0b      	ldr	r3, [pc, #44]	; (8004a94 <HAL_RCC_OscConfig+0x240>)
 8004a68:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a6a:	f003 0302 	and.w	r3, r3, #2
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d0f0      	beq.n	8004a54 <HAL_RCC_OscConfig+0x200>
 8004a72:	e01b      	b.n	8004aac <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004a74:	4b09      	ldr	r3, [pc, #36]	; (8004a9c <HAL_RCC_OscConfig+0x248>)
 8004a76:	2200      	movs	r2, #0
 8004a78:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004a7a:	f7fd fd5b 	bl	8002534 <HAL_GetTick>
 8004a7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004a80:	e00e      	b.n	8004aa0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004a82:	f7fd fd57 	bl	8002534 <HAL_GetTick>
 8004a86:	4602      	mov	r2, r0
 8004a88:	693b      	ldr	r3, [r7, #16]
 8004a8a:	1ad3      	subs	r3, r2, r3
 8004a8c:	2b02      	cmp	r3, #2
 8004a8e:	d907      	bls.n	8004aa0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004a90:	2303      	movs	r3, #3
 8004a92:	e150      	b.n	8004d36 <HAL_RCC_OscConfig+0x4e2>
 8004a94:	40023800 	.word	0x40023800
 8004a98:	42470000 	.word	0x42470000
 8004a9c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004aa0:	4b88      	ldr	r3, [pc, #544]	; (8004cc4 <HAL_RCC_OscConfig+0x470>)
 8004aa2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004aa4:	f003 0302 	and.w	r3, r3, #2
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d1ea      	bne.n	8004a82 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	f003 0304 	and.w	r3, r3, #4
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	f000 8097 	beq.w	8004be8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004aba:	2300      	movs	r3, #0
 8004abc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004abe:	4b81      	ldr	r3, [pc, #516]	; (8004cc4 <HAL_RCC_OscConfig+0x470>)
 8004ac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ac2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d10f      	bne.n	8004aea <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004aca:	2300      	movs	r3, #0
 8004acc:	60bb      	str	r3, [r7, #8]
 8004ace:	4b7d      	ldr	r3, [pc, #500]	; (8004cc4 <HAL_RCC_OscConfig+0x470>)
 8004ad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ad2:	4a7c      	ldr	r2, [pc, #496]	; (8004cc4 <HAL_RCC_OscConfig+0x470>)
 8004ad4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ad8:	6413      	str	r3, [r2, #64]	; 0x40
 8004ada:	4b7a      	ldr	r3, [pc, #488]	; (8004cc4 <HAL_RCC_OscConfig+0x470>)
 8004adc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ade:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ae2:	60bb      	str	r3, [r7, #8]
 8004ae4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004ae6:	2301      	movs	r3, #1
 8004ae8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004aea:	4b77      	ldr	r3, [pc, #476]	; (8004cc8 <HAL_RCC_OscConfig+0x474>)
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d118      	bne.n	8004b28 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004af6:	4b74      	ldr	r3, [pc, #464]	; (8004cc8 <HAL_RCC_OscConfig+0x474>)
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	4a73      	ldr	r2, [pc, #460]	; (8004cc8 <HAL_RCC_OscConfig+0x474>)
 8004afc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b00:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004b02:	f7fd fd17 	bl	8002534 <HAL_GetTick>
 8004b06:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b08:	e008      	b.n	8004b1c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004b0a:	f7fd fd13 	bl	8002534 <HAL_GetTick>
 8004b0e:	4602      	mov	r2, r0
 8004b10:	693b      	ldr	r3, [r7, #16]
 8004b12:	1ad3      	subs	r3, r2, r3
 8004b14:	2b02      	cmp	r3, #2
 8004b16:	d901      	bls.n	8004b1c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004b18:	2303      	movs	r3, #3
 8004b1a:	e10c      	b.n	8004d36 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b1c:	4b6a      	ldr	r3, [pc, #424]	; (8004cc8 <HAL_RCC_OscConfig+0x474>)
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d0f0      	beq.n	8004b0a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	689b      	ldr	r3, [r3, #8]
 8004b2c:	2b01      	cmp	r3, #1
 8004b2e:	d106      	bne.n	8004b3e <HAL_RCC_OscConfig+0x2ea>
 8004b30:	4b64      	ldr	r3, [pc, #400]	; (8004cc4 <HAL_RCC_OscConfig+0x470>)
 8004b32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b34:	4a63      	ldr	r2, [pc, #396]	; (8004cc4 <HAL_RCC_OscConfig+0x470>)
 8004b36:	f043 0301 	orr.w	r3, r3, #1
 8004b3a:	6713      	str	r3, [r2, #112]	; 0x70
 8004b3c:	e01c      	b.n	8004b78 <HAL_RCC_OscConfig+0x324>
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	689b      	ldr	r3, [r3, #8]
 8004b42:	2b05      	cmp	r3, #5
 8004b44:	d10c      	bne.n	8004b60 <HAL_RCC_OscConfig+0x30c>
 8004b46:	4b5f      	ldr	r3, [pc, #380]	; (8004cc4 <HAL_RCC_OscConfig+0x470>)
 8004b48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b4a:	4a5e      	ldr	r2, [pc, #376]	; (8004cc4 <HAL_RCC_OscConfig+0x470>)
 8004b4c:	f043 0304 	orr.w	r3, r3, #4
 8004b50:	6713      	str	r3, [r2, #112]	; 0x70
 8004b52:	4b5c      	ldr	r3, [pc, #368]	; (8004cc4 <HAL_RCC_OscConfig+0x470>)
 8004b54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b56:	4a5b      	ldr	r2, [pc, #364]	; (8004cc4 <HAL_RCC_OscConfig+0x470>)
 8004b58:	f043 0301 	orr.w	r3, r3, #1
 8004b5c:	6713      	str	r3, [r2, #112]	; 0x70
 8004b5e:	e00b      	b.n	8004b78 <HAL_RCC_OscConfig+0x324>
 8004b60:	4b58      	ldr	r3, [pc, #352]	; (8004cc4 <HAL_RCC_OscConfig+0x470>)
 8004b62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b64:	4a57      	ldr	r2, [pc, #348]	; (8004cc4 <HAL_RCC_OscConfig+0x470>)
 8004b66:	f023 0301 	bic.w	r3, r3, #1
 8004b6a:	6713      	str	r3, [r2, #112]	; 0x70
 8004b6c:	4b55      	ldr	r3, [pc, #340]	; (8004cc4 <HAL_RCC_OscConfig+0x470>)
 8004b6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b70:	4a54      	ldr	r2, [pc, #336]	; (8004cc4 <HAL_RCC_OscConfig+0x470>)
 8004b72:	f023 0304 	bic.w	r3, r3, #4
 8004b76:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	689b      	ldr	r3, [r3, #8]
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d015      	beq.n	8004bac <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b80:	f7fd fcd8 	bl	8002534 <HAL_GetTick>
 8004b84:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b86:	e00a      	b.n	8004b9e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004b88:	f7fd fcd4 	bl	8002534 <HAL_GetTick>
 8004b8c:	4602      	mov	r2, r0
 8004b8e:	693b      	ldr	r3, [r7, #16]
 8004b90:	1ad3      	subs	r3, r2, r3
 8004b92:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b96:	4293      	cmp	r3, r2
 8004b98:	d901      	bls.n	8004b9e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004b9a:	2303      	movs	r3, #3
 8004b9c:	e0cb      	b.n	8004d36 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b9e:	4b49      	ldr	r3, [pc, #292]	; (8004cc4 <HAL_RCC_OscConfig+0x470>)
 8004ba0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ba2:	f003 0302 	and.w	r3, r3, #2
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d0ee      	beq.n	8004b88 <HAL_RCC_OscConfig+0x334>
 8004baa:	e014      	b.n	8004bd6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004bac:	f7fd fcc2 	bl	8002534 <HAL_GetTick>
 8004bb0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004bb2:	e00a      	b.n	8004bca <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004bb4:	f7fd fcbe 	bl	8002534 <HAL_GetTick>
 8004bb8:	4602      	mov	r2, r0
 8004bba:	693b      	ldr	r3, [r7, #16]
 8004bbc:	1ad3      	subs	r3, r2, r3
 8004bbe:	f241 3288 	movw	r2, #5000	; 0x1388
 8004bc2:	4293      	cmp	r3, r2
 8004bc4:	d901      	bls.n	8004bca <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004bc6:	2303      	movs	r3, #3
 8004bc8:	e0b5      	b.n	8004d36 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004bca:	4b3e      	ldr	r3, [pc, #248]	; (8004cc4 <HAL_RCC_OscConfig+0x470>)
 8004bcc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bce:	f003 0302 	and.w	r3, r3, #2
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d1ee      	bne.n	8004bb4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004bd6:	7dfb      	ldrb	r3, [r7, #23]
 8004bd8:	2b01      	cmp	r3, #1
 8004bda:	d105      	bne.n	8004be8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004bdc:	4b39      	ldr	r3, [pc, #228]	; (8004cc4 <HAL_RCC_OscConfig+0x470>)
 8004bde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004be0:	4a38      	ldr	r2, [pc, #224]	; (8004cc4 <HAL_RCC_OscConfig+0x470>)
 8004be2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004be6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	699b      	ldr	r3, [r3, #24]
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	f000 80a1 	beq.w	8004d34 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004bf2:	4b34      	ldr	r3, [pc, #208]	; (8004cc4 <HAL_RCC_OscConfig+0x470>)
 8004bf4:	689b      	ldr	r3, [r3, #8]
 8004bf6:	f003 030c 	and.w	r3, r3, #12
 8004bfa:	2b08      	cmp	r3, #8
 8004bfc:	d05c      	beq.n	8004cb8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	699b      	ldr	r3, [r3, #24]
 8004c02:	2b02      	cmp	r3, #2
 8004c04:	d141      	bne.n	8004c8a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c06:	4b31      	ldr	r3, [pc, #196]	; (8004ccc <HAL_RCC_OscConfig+0x478>)
 8004c08:	2200      	movs	r2, #0
 8004c0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c0c:	f7fd fc92 	bl	8002534 <HAL_GetTick>
 8004c10:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c12:	e008      	b.n	8004c26 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004c14:	f7fd fc8e 	bl	8002534 <HAL_GetTick>
 8004c18:	4602      	mov	r2, r0
 8004c1a:	693b      	ldr	r3, [r7, #16]
 8004c1c:	1ad3      	subs	r3, r2, r3
 8004c1e:	2b02      	cmp	r3, #2
 8004c20:	d901      	bls.n	8004c26 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004c22:	2303      	movs	r3, #3
 8004c24:	e087      	b.n	8004d36 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c26:	4b27      	ldr	r3, [pc, #156]	; (8004cc4 <HAL_RCC_OscConfig+0x470>)
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d1f0      	bne.n	8004c14 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	69da      	ldr	r2, [r3, #28]
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	6a1b      	ldr	r3, [r3, #32]
 8004c3a:	431a      	orrs	r2, r3
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c40:	019b      	lsls	r3, r3, #6
 8004c42:	431a      	orrs	r2, r3
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c48:	085b      	lsrs	r3, r3, #1
 8004c4a:	3b01      	subs	r3, #1
 8004c4c:	041b      	lsls	r3, r3, #16
 8004c4e:	431a      	orrs	r2, r3
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c54:	061b      	lsls	r3, r3, #24
 8004c56:	491b      	ldr	r1, [pc, #108]	; (8004cc4 <HAL_RCC_OscConfig+0x470>)
 8004c58:	4313      	orrs	r3, r2
 8004c5a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004c5c:	4b1b      	ldr	r3, [pc, #108]	; (8004ccc <HAL_RCC_OscConfig+0x478>)
 8004c5e:	2201      	movs	r2, #1
 8004c60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c62:	f7fd fc67 	bl	8002534 <HAL_GetTick>
 8004c66:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004c68:	e008      	b.n	8004c7c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004c6a:	f7fd fc63 	bl	8002534 <HAL_GetTick>
 8004c6e:	4602      	mov	r2, r0
 8004c70:	693b      	ldr	r3, [r7, #16]
 8004c72:	1ad3      	subs	r3, r2, r3
 8004c74:	2b02      	cmp	r3, #2
 8004c76:	d901      	bls.n	8004c7c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004c78:	2303      	movs	r3, #3
 8004c7a:	e05c      	b.n	8004d36 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004c7c:	4b11      	ldr	r3, [pc, #68]	; (8004cc4 <HAL_RCC_OscConfig+0x470>)
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d0f0      	beq.n	8004c6a <HAL_RCC_OscConfig+0x416>
 8004c88:	e054      	b.n	8004d34 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c8a:	4b10      	ldr	r3, [pc, #64]	; (8004ccc <HAL_RCC_OscConfig+0x478>)
 8004c8c:	2200      	movs	r2, #0
 8004c8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c90:	f7fd fc50 	bl	8002534 <HAL_GetTick>
 8004c94:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c96:	e008      	b.n	8004caa <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004c98:	f7fd fc4c 	bl	8002534 <HAL_GetTick>
 8004c9c:	4602      	mov	r2, r0
 8004c9e:	693b      	ldr	r3, [r7, #16]
 8004ca0:	1ad3      	subs	r3, r2, r3
 8004ca2:	2b02      	cmp	r3, #2
 8004ca4:	d901      	bls.n	8004caa <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004ca6:	2303      	movs	r3, #3
 8004ca8:	e045      	b.n	8004d36 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004caa:	4b06      	ldr	r3, [pc, #24]	; (8004cc4 <HAL_RCC_OscConfig+0x470>)
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d1f0      	bne.n	8004c98 <HAL_RCC_OscConfig+0x444>
 8004cb6:	e03d      	b.n	8004d34 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	699b      	ldr	r3, [r3, #24]
 8004cbc:	2b01      	cmp	r3, #1
 8004cbe:	d107      	bne.n	8004cd0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004cc0:	2301      	movs	r3, #1
 8004cc2:	e038      	b.n	8004d36 <HAL_RCC_OscConfig+0x4e2>
 8004cc4:	40023800 	.word	0x40023800
 8004cc8:	40007000 	.word	0x40007000
 8004ccc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004cd0:	4b1b      	ldr	r3, [pc, #108]	; (8004d40 <HAL_RCC_OscConfig+0x4ec>)
 8004cd2:	685b      	ldr	r3, [r3, #4]
 8004cd4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	699b      	ldr	r3, [r3, #24]
 8004cda:	2b01      	cmp	r3, #1
 8004cdc:	d028      	beq.n	8004d30 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004ce8:	429a      	cmp	r2, r3
 8004cea:	d121      	bne.n	8004d30 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004cf6:	429a      	cmp	r2, r3
 8004cf8:	d11a      	bne.n	8004d30 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004cfa:	68fa      	ldr	r2, [r7, #12]
 8004cfc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004d00:	4013      	ands	r3, r2
 8004d02:	687a      	ldr	r2, [r7, #4]
 8004d04:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004d06:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004d08:	4293      	cmp	r3, r2
 8004d0a:	d111      	bne.n	8004d30 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d16:	085b      	lsrs	r3, r3, #1
 8004d18:	3b01      	subs	r3, #1
 8004d1a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004d1c:	429a      	cmp	r2, r3
 8004d1e:	d107      	bne.n	8004d30 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d2a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004d2c:	429a      	cmp	r2, r3
 8004d2e:	d001      	beq.n	8004d34 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004d30:	2301      	movs	r3, #1
 8004d32:	e000      	b.n	8004d36 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004d34:	2300      	movs	r3, #0
}
 8004d36:	4618      	mov	r0, r3
 8004d38:	3718      	adds	r7, #24
 8004d3a:	46bd      	mov	sp, r7
 8004d3c:	bd80      	pop	{r7, pc}
 8004d3e:	bf00      	nop
 8004d40:	40023800 	.word	0x40023800

08004d44 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004d44:	b580      	push	{r7, lr}
 8004d46:	b084      	sub	sp, #16
 8004d48:	af00      	add	r7, sp, #0
 8004d4a:	6078      	str	r0, [r7, #4]
 8004d4c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d101      	bne.n	8004d58 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004d54:	2301      	movs	r3, #1
 8004d56:	e0cc      	b.n	8004ef2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004d58:	4b68      	ldr	r3, [pc, #416]	; (8004efc <HAL_RCC_ClockConfig+0x1b8>)
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	f003 0307 	and.w	r3, r3, #7
 8004d60:	683a      	ldr	r2, [r7, #0]
 8004d62:	429a      	cmp	r2, r3
 8004d64:	d90c      	bls.n	8004d80 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d66:	4b65      	ldr	r3, [pc, #404]	; (8004efc <HAL_RCC_ClockConfig+0x1b8>)
 8004d68:	683a      	ldr	r2, [r7, #0]
 8004d6a:	b2d2      	uxtb	r2, r2
 8004d6c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d6e:	4b63      	ldr	r3, [pc, #396]	; (8004efc <HAL_RCC_ClockConfig+0x1b8>)
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	f003 0307 	and.w	r3, r3, #7
 8004d76:	683a      	ldr	r2, [r7, #0]
 8004d78:	429a      	cmp	r2, r3
 8004d7a:	d001      	beq.n	8004d80 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004d7c:	2301      	movs	r3, #1
 8004d7e:	e0b8      	b.n	8004ef2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	f003 0302 	and.w	r3, r3, #2
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d020      	beq.n	8004dce <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	f003 0304 	and.w	r3, r3, #4
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d005      	beq.n	8004da4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004d98:	4b59      	ldr	r3, [pc, #356]	; (8004f00 <HAL_RCC_ClockConfig+0x1bc>)
 8004d9a:	689b      	ldr	r3, [r3, #8]
 8004d9c:	4a58      	ldr	r2, [pc, #352]	; (8004f00 <HAL_RCC_ClockConfig+0x1bc>)
 8004d9e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004da2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	f003 0308 	and.w	r3, r3, #8
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d005      	beq.n	8004dbc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004db0:	4b53      	ldr	r3, [pc, #332]	; (8004f00 <HAL_RCC_ClockConfig+0x1bc>)
 8004db2:	689b      	ldr	r3, [r3, #8]
 8004db4:	4a52      	ldr	r2, [pc, #328]	; (8004f00 <HAL_RCC_ClockConfig+0x1bc>)
 8004db6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004dba:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004dbc:	4b50      	ldr	r3, [pc, #320]	; (8004f00 <HAL_RCC_ClockConfig+0x1bc>)
 8004dbe:	689b      	ldr	r3, [r3, #8]
 8004dc0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	689b      	ldr	r3, [r3, #8]
 8004dc8:	494d      	ldr	r1, [pc, #308]	; (8004f00 <HAL_RCC_ClockConfig+0x1bc>)
 8004dca:	4313      	orrs	r3, r2
 8004dcc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	f003 0301 	and.w	r3, r3, #1
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d044      	beq.n	8004e64 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	685b      	ldr	r3, [r3, #4]
 8004dde:	2b01      	cmp	r3, #1
 8004de0:	d107      	bne.n	8004df2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004de2:	4b47      	ldr	r3, [pc, #284]	; (8004f00 <HAL_RCC_ClockConfig+0x1bc>)
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d119      	bne.n	8004e22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004dee:	2301      	movs	r3, #1
 8004df0:	e07f      	b.n	8004ef2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	685b      	ldr	r3, [r3, #4]
 8004df6:	2b02      	cmp	r3, #2
 8004df8:	d003      	beq.n	8004e02 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004dfe:	2b03      	cmp	r3, #3
 8004e00:	d107      	bne.n	8004e12 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004e02:	4b3f      	ldr	r3, [pc, #252]	; (8004f00 <HAL_RCC_ClockConfig+0x1bc>)
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d109      	bne.n	8004e22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004e0e:	2301      	movs	r3, #1
 8004e10:	e06f      	b.n	8004ef2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e12:	4b3b      	ldr	r3, [pc, #236]	; (8004f00 <HAL_RCC_ClockConfig+0x1bc>)
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	f003 0302 	and.w	r3, r3, #2
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d101      	bne.n	8004e22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004e1e:	2301      	movs	r3, #1
 8004e20:	e067      	b.n	8004ef2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004e22:	4b37      	ldr	r3, [pc, #220]	; (8004f00 <HAL_RCC_ClockConfig+0x1bc>)
 8004e24:	689b      	ldr	r3, [r3, #8]
 8004e26:	f023 0203 	bic.w	r2, r3, #3
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	685b      	ldr	r3, [r3, #4]
 8004e2e:	4934      	ldr	r1, [pc, #208]	; (8004f00 <HAL_RCC_ClockConfig+0x1bc>)
 8004e30:	4313      	orrs	r3, r2
 8004e32:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004e34:	f7fd fb7e 	bl	8002534 <HAL_GetTick>
 8004e38:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e3a:	e00a      	b.n	8004e52 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004e3c:	f7fd fb7a 	bl	8002534 <HAL_GetTick>
 8004e40:	4602      	mov	r2, r0
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	1ad3      	subs	r3, r2, r3
 8004e46:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e4a:	4293      	cmp	r3, r2
 8004e4c:	d901      	bls.n	8004e52 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004e4e:	2303      	movs	r3, #3
 8004e50:	e04f      	b.n	8004ef2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e52:	4b2b      	ldr	r3, [pc, #172]	; (8004f00 <HAL_RCC_ClockConfig+0x1bc>)
 8004e54:	689b      	ldr	r3, [r3, #8]
 8004e56:	f003 020c 	and.w	r2, r3, #12
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	685b      	ldr	r3, [r3, #4]
 8004e5e:	009b      	lsls	r3, r3, #2
 8004e60:	429a      	cmp	r2, r3
 8004e62:	d1eb      	bne.n	8004e3c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004e64:	4b25      	ldr	r3, [pc, #148]	; (8004efc <HAL_RCC_ClockConfig+0x1b8>)
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	f003 0307 	and.w	r3, r3, #7
 8004e6c:	683a      	ldr	r2, [r7, #0]
 8004e6e:	429a      	cmp	r2, r3
 8004e70:	d20c      	bcs.n	8004e8c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e72:	4b22      	ldr	r3, [pc, #136]	; (8004efc <HAL_RCC_ClockConfig+0x1b8>)
 8004e74:	683a      	ldr	r2, [r7, #0]
 8004e76:	b2d2      	uxtb	r2, r2
 8004e78:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e7a:	4b20      	ldr	r3, [pc, #128]	; (8004efc <HAL_RCC_ClockConfig+0x1b8>)
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	f003 0307 	and.w	r3, r3, #7
 8004e82:	683a      	ldr	r2, [r7, #0]
 8004e84:	429a      	cmp	r2, r3
 8004e86:	d001      	beq.n	8004e8c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004e88:	2301      	movs	r3, #1
 8004e8a:	e032      	b.n	8004ef2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	f003 0304 	and.w	r3, r3, #4
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d008      	beq.n	8004eaa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004e98:	4b19      	ldr	r3, [pc, #100]	; (8004f00 <HAL_RCC_ClockConfig+0x1bc>)
 8004e9a:	689b      	ldr	r3, [r3, #8]
 8004e9c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	68db      	ldr	r3, [r3, #12]
 8004ea4:	4916      	ldr	r1, [pc, #88]	; (8004f00 <HAL_RCC_ClockConfig+0x1bc>)
 8004ea6:	4313      	orrs	r3, r2
 8004ea8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	f003 0308 	and.w	r3, r3, #8
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d009      	beq.n	8004eca <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004eb6:	4b12      	ldr	r3, [pc, #72]	; (8004f00 <HAL_RCC_ClockConfig+0x1bc>)
 8004eb8:	689b      	ldr	r3, [r3, #8]
 8004eba:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	691b      	ldr	r3, [r3, #16]
 8004ec2:	00db      	lsls	r3, r3, #3
 8004ec4:	490e      	ldr	r1, [pc, #56]	; (8004f00 <HAL_RCC_ClockConfig+0x1bc>)
 8004ec6:	4313      	orrs	r3, r2
 8004ec8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004eca:	f000 f821 	bl	8004f10 <HAL_RCC_GetSysClockFreq>
 8004ece:	4602      	mov	r2, r0
 8004ed0:	4b0b      	ldr	r3, [pc, #44]	; (8004f00 <HAL_RCC_ClockConfig+0x1bc>)
 8004ed2:	689b      	ldr	r3, [r3, #8]
 8004ed4:	091b      	lsrs	r3, r3, #4
 8004ed6:	f003 030f 	and.w	r3, r3, #15
 8004eda:	490a      	ldr	r1, [pc, #40]	; (8004f04 <HAL_RCC_ClockConfig+0x1c0>)
 8004edc:	5ccb      	ldrb	r3, [r1, r3]
 8004ede:	fa22 f303 	lsr.w	r3, r2, r3
 8004ee2:	4a09      	ldr	r2, [pc, #36]	; (8004f08 <HAL_RCC_ClockConfig+0x1c4>)
 8004ee4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004ee6:	4b09      	ldr	r3, [pc, #36]	; (8004f0c <HAL_RCC_ClockConfig+0x1c8>)
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	4618      	mov	r0, r3
 8004eec:	f7fd fade 	bl	80024ac <HAL_InitTick>

  return HAL_OK;
 8004ef0:	2300      	movs	r3, #0
}
 8004ef2:	4618      	mov	r0, r3
 8004ef4:	3710      	adds	r7, #16
 8004ef6:	46bd      	mov	sp, r7
 8004ef8:	bd80      	pop	{r7, pc}
 8004efa:	bf00      	nop
 8004efc:	40023c00 	.word	0x40023c00
 8004f00:	40023800 	.word	0x40023800
 8004f04:	0800c934 	.word	0x0800c934
 8004f08:	20000010 	.word	0x20000010
 8004f0c:	20000014 	.word	0x20000014

08004f10 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004f10:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004f14:	b090      	sub	sp, #64	; 0x40
 8004f16:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004f18:	2300      	movs	r3, #0
 8004f1a:	637b      	str	r3, [r7, #52]	; 0x34
 8004f1c:	2300      	movs	r3, #0
 8004f1e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004f20:	2300      	movs	r3, #0
 8004f22:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8004f24:	2300      	movs	r3, #0
 8004f26:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004f28:	4b59      	ldr	r3, [pc, #356]	; (8005090 <HAL_RCC_GetSysClockFreq+0x180>)
 8004f2a:	689b      	ldr	r3, [r3, #8]
 8004f2c:	f003 030c 	and.w	r3, r3, #12
 8004f30:	2b08      	cmp	r3, #8
 8004f32:	d00d      	beq.n	8004f50 <HAL_RCC_GetSysClockFreq+0x40>
 8004f34:	2b08      	cmp	r3, #8
 8004f36:	f200 80a1 	bhi.w	800507c <HAL_RCC_GetSysClockFreq+0x16c>
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d002      	beq.n	8004f44 <HAL_RCC_GetSysClockFreq+0x34>
 8004f3e:	2b04      	cmp	r3, #4
 8004f40:	d003      	beq.n	8004f4a <HAL_RCC_GetSysClockFreq+0x3a>
 8004f42:	e09b      	b.n	800507c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004f44:	4b53      	ldr	r3, [pc, #332]	; (8005094 <HAL_RCC_GetSysClockFreq+0x184>)
 8004f46:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8004f48:	e09b      	b.n	8005082 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004f4a:	4b53      	ldr	r3, [pc, #332]	; (8005098 <HAL_RCC_GetSysClockFreq+0x188>)
 8004f4c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004f4e:	e098      	b.n	8005082 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004f50:	4b4f      	ldr	r3, [pc, #316]	; (8005090 <HAL_RCC_GetSysClockFreq+0x180>)
 8004f52:	685b      	ldr	r3, [r3, #4]
 8004f54:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004f58:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004f5a:	4b4d      	ldr	r3, [pc, #308]	; (8005090 <HAL_RCC_GetSysClockFreq+0x180>)
 8004f5c:	685b      	ldr	r3, [r3, #4]
 8004f5e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d028      	beq.n	8004fb8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004f66:	4b4a      	ldr	r3, [pc, #296]	; (8005090 <HAL_RCC_GetSysClockFreq+0x180>)
 8004f68:	685b      	ldr	r3, [r3, #4]
 8004f6a:	099b      	lsrs	r3, r3, #6
 8004f6c:	2200      	movs	r2, #0
 8004f6e:	623b      	str	r3, [r7, #32]
 8004f70:	627a      	str	r2, [r7, #36]	; 0x24
 8004f72:	6a3b      	ldr	r3, [r7, #32]
 8004f74:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004f78:	2100      	movs	r1, #0
 8004f7a:	4b47      	ldr	r3, [pc, #284]	; (8005098 <HAL_RCC_GetSysClockFreq+0x188>)
 8004f7c:	fb03 f201 	mul.w	r2, r3, r1
 8004f80:	2300      	movs	r3, #0
 8004f82:	fb00 f303 	mul.w	r3, r0, r3
 8004f86:	4413      	add	r3, r2
 8004f88:	4a43      	ldr	r2, [pc, #268]	; (8005098 <HAL_RCC_GetSysClockFreq+0x188>)
 8004f8a:	fba0 1202 	umull	r1, r2, r0, r2
 8004f8e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004f90:	460a      	mov	r2, r1
 8004f92:	62ba      	str	r2, [r7, #40]	; 0x28
 8004f94:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004f96:	4413      	add	r3, r2
 8004f98:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004f9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f9c:	2200      	movs	r2, #0
 8004f9e:	61bb      	str	r3, [r7, #24]
 8004fa0:	61fa      	str	r2, [r7, #28]
 8004fa2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004fa6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8004faa:	f7fb fcfb 	bl	80009a4 <__aeabi_uldivmod>
 8004fae:	4602      	mov	r2, r0
 8004fb0:	460b      	mov	r3, r1
 8004fb2:	4613      	mov	r3, r2
 8004fb4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004fb6:	e053      	b.n	8005060 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004fb8:	4b35      	ldr	r3, [pc, #212]	; (8005090 <HAL_RCC_GetSysClockFreq+0x180>)
 8004fba:	685b      	ldr	r3, [r3, #4]
 8004fbc:	099b      	lsrs	r3, r3, #6
 8004fbe:	2200      	movs	r2, #0
 8004fc0:	613b      	str	r3, [r7, #16]
 8004fc2:	617a      	str	r2, [r7, #20]
 8004fc4:	693b      	ldr	r3, [r7, #16]
 8004fc6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8004fca:	f04f 0b00 	mov.w	fp, #0
 8004fce:	4652      	mov	r2, sl
 8004fd0:	465b      	mov	r3, fp
 8004fd2:	f04f 0000 	mov.w	r0, #0
 8004fd6:	f04f 0100 	mov.w	r1, #0
 8004fda:	0159      	lsls	r1, r3, #5
 8004fdc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004fe0:	0150      	lsls	r0, r2, #5
 8004fe2:	4602      	mov	r2, r0
 8004fe4:	460b      	mov	r3, r1
 8004fe6:	ebb2 080a 	subs.w	r8, r2, sl
 8004fea:	eb63 090b 	sbc.w	r9, r3, fp
 8004fee:	f04f 0200 	mov.w	r2, #0
 8004ff2:	f04f 0300 	mov.w	r3, #0
 8004ff6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8004ffa:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8004ffe:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8005002:	ebb2 0408 	subs.w	r4, r2, r8
 8005006:	eb63 0509 	sbc.w	r5, r3, r9
 800500a:	f04f 0200 	mov.w	r2, #0
 800500e:	f04f 0300 	mov.w	r3, #0
 8005012:	00eb      	lsls	r3, r5, #3
 8005014:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005018:	00e2      	lsls	r2, r4, #3
 800501a:	4614      	mov	r4, r2
 800501c:	461d      	mov	r5, r3
 800501e:	eb14 030a 	adds.w	r3, r4, sl
 8005022:	603b      	str	r3, [r7, #0]
 8005024:	eb45 030b 	adc.w	r3, r5, fp
 8005028:	607b      	str	r3, [r7, #4]
 800502a:	f04f 0200 	mov.w	r2, #0
 800502e:	f04f 0300 	mov.w	r3, #0
 8005032:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005036:	4629      	mov	r1, r5
 8005038:	028b      	lsls	r3, r1, #10
 800503a:	4621      	mov	r1, r4
 800503c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005040:	4621      	mov	r1, r4
 8005042:	028a      	lsls	r2, r1, #10
 8005044:	4610      	mov	r0, r2
 8005046:	4619      	mov	r1, r3
 8005048:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800504a:	2200      	movs	r2, #0
 800504c:	60bb      	str	r3, [r7, #8]
 800504e:	60fa      	str	r2, [r7, #12]
 8005050:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005054:	f7fb fca6 	bl	80009a4 <__aeabi_uldivmod>
 8005058:	4602      	mov	r2, r0
 800505a:	460b      	mov	r3, r1
 800505c:	4613      	mov	r3, r2
 800505e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005060:	4b0b      	ldr	r3, [pc, #44]	; (8005090 <HAL_RCC_GetSysClockFreq+0x180>)
 8005062:	685b      	ldr	r3, [r3, #4]
 8005064:	0c1b      	lsrs	r3, r3, #16
 8005066:	f003 0303 	and.w	r3, r3, #3
 800506a:	3301      	adds	r3, #1
 800506c:	005b      	lsls	r3, r3, #1
 800506e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8005070:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005072:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005074:	fbb2 f3f3 	udiv	r3, r2, r3
 8005078:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800507a:	e002      	b.n	8005082 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800507c:	4b05      	ldr	r3, [pc, #20]	; (8005094 <HAL_RCC_GetSysClockFreq+0x184>)
 800507e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005080:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005082:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8005084:	4618      	mov	r0, r3
 8005086:	3740      	adds	r7, #64	; 0x40
 8005088:	46bd      	mov	sp, r7
 800508a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800508e:	bf00      	nop
 8005090:	40023800 	.word	0x40023800
 8005094:	00f42400 	.word	0x00f42400
 8005098:	016e3600 	.word	0x016e3600

0800509c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800509c:	b480      	push	{r7}
 800509e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80050a0:	4b03      	ldr	r3, [pc, #12]	; (80050b0 <HAL_RCC_GetHCLKFreq+0x14>)
 80050a2:	681b      	ldr	r3, [r3, #0]
}
 80050a4:	4618      	mov	r0, r3
 80050a6:	46bd      	mov	sp, r7
 80050a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ac:	4770      	bx	lr
 80050ae:	bf00      	nop
 80050b0:	20000010 	.word	0x20000010

080050b4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80050b4:	b580      	push	{r7, lr}
 80050b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80050b8:	f7ff fff0 	bl	800509c <HAL_RCC_GetHCLKFreq>
 80050bc:	4602      	mov	r2, r0
 80050be:	4b05      	ldr	r3, [pc, #20]	; (80050d4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80050c0:	689b      	ldr	r3, [r3, #8]
 80050c2:	0a9b      	lsrs	r3, r3, #10
 80050c4:	f003 0307 	and.w	r3, r3, #7
 80050c8:	4903      	ldr	r1, [pc, #12]	; (80050d8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80050ca:	5ccb      	ldrb	r3, [r1, r3]
 80050cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80050d0:	4618      	mov	r0, r3
 80050d2:	bd80      	pop	{r7, pc}
 80050d4:	40023800 	.word	0x40023800
 80050d8:	0800c944 	.word	0x0800c944

080050dc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80050dc:	b580      	push	{r7, lr}
 80050de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80050e0:	f7ff ffdc 	bl	800509c <HAL_RCC_GetHCLKFreq>
 80050e4:	4602      	mov	r2, r0
 80050e6:	4b05      	ldr	r3, [pc, #20]	; (80050fc <HAL_RCC_GetPCLK2Freq+0x20>)
 80050e8:	689b      	ldr	r3, [r3, #8]
 80050ea:	0b5b      	lsrs	r3, r3, #13
 80050ec:	f003 0307 	and.w	r3, r3, #7
 80050f0:	4903      	ldr	r1, [pc, #12]	; (8005100 <HAL_RCC_GetPCLK2Freq+0x24>)
 80050f2:	5ccb      	ldrb	r3, [r1, r3]
 80050f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80050f8:	4618      	mov	r0, r3
 80050fa:	bd80      	pop	{r7, pc}
 80050fc:	40023800 	.word	0x40023800
 8005100:	0800c944 	.word	0x0800c944

08005104 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005104:	b580      	push	{r7, lr}
 8005106:	b082      	sub	sp, #8
 8005108:	af00      	add	r7, sp, #0
 800510a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	2b00      	cmp	r3, #0
 8005110:	d101      	bne.n	8005116 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005112:	2301      	movs	r3, #1
 8005114:	e07b      	b.n	800520e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800511a:	2b00      	cmp	r3, #0
 800511c:	d108      	bne.n	8005130 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	685b      	ldr	r3, [r3, #4]
 8005122:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005126:	d009      	beq.n	800513c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	2200      	movs	r2, #0
 800512c:	61da      	str	r2, [r3, #28]
 800512e:	e005      	b.n	800513c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	2200      	movs	r2, #0
 8005134:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	2200      	movs	r2, #0
 800513a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	2200      	movs	r2, #0
 8005140:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005148:	b2db      	uxtb	r3, r3
 800514a:	2b00      	cmp	r3, #0
 800514c:	d106      	bne.n	800515c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	2200      	movs	r2, #0
 8005152:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005156:	6878      	ldr	r0, [r7, #4]
 8005158:	f7fc ff78 	bl	800204c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	2202      	movs	r2, #2
 8005160:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	681a      	ldr	r2, [r3, #0]
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005172:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	685b      	ldr	r3, [r3, #4]
 8005178:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	689b      	ldr	r3, [r3, #8]
 8005180:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005184:	431a      	orrs	r2, r3
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	68db      	ldr	r3, [r3, #12]
 800518a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800518e:	431a      	orrs	r2, r3
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	691b      	ldr	r3, [r3, #16]
 8005194:	f003 0302 	and.w	r3, r3, #2
 8005198:	431a      	orrs	r2, r3
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	695b      	ldr	r3, [r3, #20]
 800519e:	f003 0301 	and.w	r3, r3, #1
 80051a2:	431a      	orrs	r2, r3
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	699b      	ldr	r3, [r3, #24]
 80051a8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80051ac:	431a      	orrs	r2, r3
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	69db      	ldr	r3, [r3, #28]
 80051b2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80051b6:	431a      	orrs	r2, r3
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	6a1b      	ldr	r3, [r3, #32]
 80051bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051c0:	ea42 0103 	orr.w	r1, r2, r3
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051c8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	430a      	orrs	r2, r1
 80051d2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	699b      	ldr	r3, [r3, #24]
 80051d8:	0c1b      	lsrs	r3, r3, #16
 80051da:	f003 0104 	and.w	r1, r3, #4
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051e2:	f003 0210 	and.w	r2, r3, #16
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	430a      	orrs	r2, r1
 80051ec:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	69da      	ldr	r2, [r3, #28]
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80051fc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	2200      	movs	r2, #0
 8005202:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	2201      	movs	r2, #1
 8005208:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800520c:	2300      	movs	r3, #0
}
 800520e:	4618      	mov	r0, r3
 8005210:	3708      	adds	r7, #8
 8005212:	46bd      	mov	sp, r7
 8005214:	bd80      	pop	{r7, pc}

08005216 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005216:	b580      	push	{r7, lr}
 8005218:	b088      	sub	sp, #32
 800521a:	af00      	add	r7, sp, #0
 800521c:	60f8      	str	r0, [r7, #12]
 800521e:	60b9      	str	r1, [r7, #8]
 8005220:	603b      	str	r3, [r7, #0]
 8005222:	4613      	mov	r3, r2
 8005224:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005226:	2300      	movs	r3, #0
 8005228:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005230:	2b01      	cmp	r3, #1
 8005232:	d101      	bne.n	8005238 <HAL_SPI_Transmit+0x22>
 8005234:	2302      	movs	r3, #2
 8005236:	e126      	b.n	8005486 <HAL_SPI_Transmit+0x270>
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	2201      	movs	r2, #1
 800523c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005240:	f7fd f978 	bl	8002534 <HAL_GetTick>
 8005244:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005246:	88fb      	ldrh	r3, [r7, #6]
 8005248:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005250:	b2db      	uxtb	r3, r3
 8005252:	2b01      	cmp	r3, #1
 8005254:	d002      	beq.n	800525c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005256:	2302      	movs	r3, #2
 8005258:	77fb      	strb	r3, [r7, #31]
    goto error;
 800525a:	e10b      	b.n	8005474 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 800525c:	68bb      	ldr	r3, [r7, #8]
 800525e:	2b00      	cmp	r3, #0
 8005260:	d002      	beq.n	8005268 <HAL_SPI_Transmit+0x52>
 8005262:	88fb      	ldrh	r3, [r7, #6]
 8005264:	2b00      	cmp	r3, #0
 8005266:	d102      	bne.n	800526e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005268:	2301      	movs	r3, #1
 800526a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800526c:	e102      	b.n	8005474 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	2203      	movs	r2, #3
 8005272:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	2200      	movs	r2, #0
 800527a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	68ba      	ldr	r2, [r7, #8]
 8005280:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	88fa      	ldrh	r2, [r7, #6]
 8005286:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	88fa      	ldrh	r2, [r7, #6]
 800528c:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	2200      	movs	r2, #0
 8005292:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	2200      	movs	r2, #0
 8005298:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	2200      	movs	r2, #0
 800529e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	2200      	movs	r2, #0
 80052a4:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	2200      	movs	r2, #0
 80052aa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	689b      	ldr	r3, [r3, #8]
 80052b0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80052b4:	d10f      	bne.n	80052d6 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	681a      	ldr	r2, [r3, #0]
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80052c4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	681a      	ldr	r2, [r3, #0]
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80052d4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052e0:	2b40      	cmp	r3, #64	; 0x40
 80052e2:	d007      	beq.n	80052f4 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	681a      	ldr	r2, [r3, #0]
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80052f2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	68db      	ldr	r3, [r3, #12]
 80052f8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80052fc:	d14b      	bne.n	8005396 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	685b      	ldr	r3, [r3, #4]
 8005302:	2b00      	cmp	r3, #0
 8005304:	d002      	beq.n	800530c <HAL_SPI_Transmit+0xf6>
 8005306:	8afb      	ldrh	r3, [r7, #22]
 8005308:	2b01      	cmp	r3, #1
 800530a:	d13e      	bne.n	800538a <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005310:	881a      	ldrh	r2, [r3, #0]
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800531c:	1c9a      	adds	r2, r3, #2
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005326:	b29b      	uxth	r3, r3
 8005328:	3b01      	subs	r3, #1
 800532a:	b29a      	uxth	r2, r3
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005330:	e02b      	b.n	800538a <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	689b      	ldr	r3, [r3, #8]
 8005338:	f003 0302 	and.w	r3, r3, #2
 800533c:	2b02      	cmp	r3, #2
 800533e:	d112      	bne.n	8005366 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005344:	881a      	ldrh	r2, [r3, #0]
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005350:	1c9a      	adds	r2, r3, #2
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800535a:	b29b      	uxth	r3, r3
 800535c:	3b01      	subs	r3, #1
 800535e:	b29a      	uxth	r2, r3
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	86da      	strh	r2, [r3, #54]	; 0x36
 8005364:	e011      	b.n	800538a <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005366:	f7fd f8e5 	bl	8002534 <HAL_GetTick>
 800536a:	4602      	mov	r2, r0
 800536c:	69bb      	ldr	r3, [r7, #24]
 800536e:	1ad3      	subs	r3, r2, r3
 8005370:	683a      	ldr	r2, [r7, #0]
 8005372:	429a      	cmp	r2, r3
 8005374:	d803      	bhi.n	800537e <HAL_SPI_Transmit+0x168>
 8005376:	683b      	ldr	r3, [r7, #0]
 8005378:	f1b3 3fff 	cmp.w	r3, #4294967295
 800537c:	d102      	bne.n	8005384 <HAL_SPI_Transmit+0x16e>
 800537e:	683b      	ldr	r3, [r7, #0]
 8005380:	2b00      	cmp	r3, #0
 8005382:	d102      	bne.n	800538a <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8005384:	2303      	movs	r3, #3
 8005386:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005388:	e074      	b.n	8005474 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800538e:	b29b      	uxth	r3, r3
 8005390:	2b00      	cmp	r3, #0
 8005392:	d1ce      	bne.n	8005332 <HAL_SPI_Transmit+0x11c>
 8005394:	e04c      	b.n	8005430 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	685b      	ldr	r3, [r3, #4]
 800539a:	2b00      	cmp	r3, #0
 800539c:	d002      	beq.n	80053a4 <HAL_SPI_Transmit+0x18e>
 800539e:	8afb      	ldrh	r3, [r7, #22]
 80053a0:	2b01      	cmp	r3, #1
 80053a2:	d140      	bne.n	8005426 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	330c      	adds	r3, #12
 80053ae:	7812      	ldrb	r2, [r2, #0]
 80053b0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053b6:	1c5a      	adds	r2, r3, #1
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80053c0:	b29b      	uxth	r3, r3
 80053c2:	3b01      	subs	r3, #1
 80053c4:	b29a      	uxth	r2, r3
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80053ca:	e02c      	b.n	8005426 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	689b      	ldr	r3, [r3, #8]
 80053d2:	f003 0302 	and.w	r3, r3, #2
 80053d6:	2b02      	cmp	r3, #2
 80053d8:	d113      	bne.n	8005402 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	330c      	adds	r3, #12
 80053e4:	7812      	ldrb	r2, [r2, #0]
 80053e6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053ec:	1c5a      	adds	r2, r3, #1
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80053f6:	b29b      	uxth	r3, r3
 80053f8:	3b01      	subs	r3, #1
 80053fa:	b29a      	uxth	r2, r3
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	86da      	strh	r2, [r3, #54]	; 0x36
 8005400:	e011      	b.n	8005426 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005402:	f7fd f897 	bl	8002534 <HAL_GetTick>
 8005406:	4602      	mov	r2, r0
 8005408:	69bb      	ldr	r3, [r7, #24]
 800540a:	1ad3      	subs	r3, r2, r3
 800540c:	683a      	ldr	r2, [r7, #0]
 800540e:	429a      	cmp	r2, r3
 8005410:	d803      	bhi.n	800541a <HAL_SPI_Transmit+0x204>
 8005412:	683b      	ldr	r3, [r7, #0]
 8005414:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005418:	d102      	bne.n	8005420 <HAL_SPI_Transmit+0x20a>
 800541a:	683b      	ldr	r3, [r7, #0]
 800541c:	2b00      	cmp	r3, #0
 800541e:	d102      	bne.n	8005426 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8005420:	2303      	movs	r3, #3
 8005422:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005424:	e026      	b.n	8005474 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800542a:	b29b      	uxth	r3, r3
 800542c:	2b00      	cmp	r3, #0
 800542e:	d1cd      	bne.n	80053cc <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005430:	69ba      	ldr	r2, [r7, #24]
 8005432:	6839      	ldr	r1, [r7, #0]
 8005434:	68f8      	ldr	r0, [r7, #12]
 8005436:	f000 fbd9 	bl	8005bec <SPI_EndRxTxTransaction>
 800543a:	4603      	mov	r3, r0
 800543c:	2b00      	cmp	r3, #0
 800543e:	d002      	beq.n	8005446 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	2220      	movs	r2, #32
 8005444:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	689b      	ldr	r3, [r3, #8]
 800544a:	2b00      	cmp	r3, #0
 800544c:	d10a      	bne.n	8005464 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800544e:	2300      	movs	r3, #0
 8005450:	613b      	str	r3, [r7, #16]
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	68db      	ldr	r3, [r3, #12]
 8005458:	613b      	str	r3, [r7, #16]
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	689b      	ldr	r3, [r3, #8]
 8005460:	613b      	str	r3, [r7, #16]
 8005462:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005468:	2b00      	cmp	r3, #0
 800546a:	d002      	beq.n	8005472 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 800546c:	2301      	movs	r3, #1
 800546e:	77fb      	strb	r3, [r7, #31]
 8005470:	e000      	b.n	8005474 <HAL_SPI_Transmit+0x25e>
  }

error:
 8005472:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	2201      	movs	r2, #1
 8005478:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	2200      	movs	r2, #0
 8005480:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005484:	7ffb      	ldrb	r3, [r7, #31]
}
 8005486:	4618      	mov	r0, r3
 8005488:	3720      	adds	r7, #32
 800548a:	46bd      	mov	sp, r7
 800548c:	bd80      	pop	{r7, pc}

0800548e <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800548e:	b580      	push	{r7, lr}
 8005490:	b088      	sub	sp, #32
 8005492:	af02      	add	r7, sp, #8
 8005494:	60f8      	str	r0, [r7, #12]
 8005496:	60b9      	str	r1, [r7, #8]
 8005498:	603b      	str	r3, [r7, #0]
 800549a:	4613      	mov	r3, r2
 800549c:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800549e:	2300      	movs	r3, #0
 80054a0:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	685b      	ldr	r3, [r3, #4]
 80054a6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80054aa:	d112      	bne.n	80054d2 <HAL_SPI_Receive+0x44>
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	689b      	ldr	r3, [r3, #8]
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d10e      	bne.n	80054d2 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	2204      	movs	r2, #4
 80054b8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80054bc:	88fa      	ldrh	r2, [r7, #6]
 80054be:	683b      	ldr	r3, [r7, #0]
 80054c0:	9300      	str	r3, [sp, #0]
 80054c2:	4613      	mov	r3, r2
 80054c4:	68ba      	ldr	r2, [r7, #8]
 80054c6:	68b9      	ldr	r1, [r7, #8]
 80054c8:	68f8      	ldr	r0, [r7, #12]
 80054ca:	f000 f8f1 	bl	80056b0 <HAL_SPI_TransmitReceive>
 80054ce:	4603      	mov	r3, r0
 80054d0:	e0ea      	b.n	80056a8 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80054d8:	2b01      	cmp	r3, #1
 80054da:	d101      	bne.n	80054e0 <HAL_SPI_Receive+0x52>
 80054dc:	2302      	movs	r3, #2
 80054de:	e0e3      	b.n	80056a8 <HAL_SPI_Receive+0x21a>
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	2201      	movs	r2, #1
 80054e4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80054e8:	f7fd f824 	bl	8002534 <HAL_GetTick>
 80054ec:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80054f4:	b2db      	uxtb	r3, r3
 80054f6:	2b01      	cmp	r3, #1
 80054f8:	d002      	beq.n	8005500 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80054fa:	2302      	movs	r3, #2
 80054fc:	75fb      	strb	r3, [r7, #23]
    goto error;
 80054fe:	e0ca      	b.n	8005696 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8005500:	68bb      	ldr	r3, [r7, #8]
 8005502:	2b00      	cmp	r3, #0
 8005504:	d002      	beq.n	800550c <HAL_SPI_Receive+0x7e>
 8005506:	88fb      	ldrh	r3, [r7, #6]
 8005508:	2b00      	cmp	r3, #0
 800550a:	d102      	bne.n	8005512 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800550c:	2301      	movs	r3, #1
 800550e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005510:	e0c1      	b.n	8005696 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	2204      	movs	r2, #4
 8005516:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	2200      	movs	r2, #0
 800551e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	68ba      	ldr	r2, [r7, #8]
 8005524:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	88fa      	ldrh	r2, [r7, #6]
 800552a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	88fa      	ldrh	r2, [r7, #6]
 8005530:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	2200      	movs	r2, #0
 8005536:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	2200      	movs	r2, #0
 800553c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	2200      	movs	r2, #0
 8005542:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	2200      	movs	r2, #0
 8005548:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	2200      	movs	r2, #0
 800554e:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	689b      	ldr	r3, [r3, #8]
 8005554:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005558:	d10f      	bne.n	800557a <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	681a      	ldr	r2, [r3, #0]
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005568:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	681a      	ldr	r2, [r3, #0]
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005578:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005584:	2b40      	cmp	r3, #64	; 0x40
 8005586:	d007      	beq.n	8005598 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	681a      	ldr	r2, [r3, #0]
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005596:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	68db      	ldr	r3, [r3, #12]
 800559c:	2b00      	cmp	r3, #0
 800559e:	d162      	bne.n	8005666 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80055a0:	e02e      	b.n	8005600 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	689b      	ldr	r3, [r3, #8]
 80055a8:	f003 0301 	and.w	r3, r3, #1
 80055ac:	2b01      	cmp	r3, #1
 80055ae:	d115      	bne.n	80055dc <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	f103 020c 	add.w	r2, r3, #12
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055bc:	7812      	ldrb	r2, [r2, #0]
 80055be:	b2d2      	uxtb	r2, r2
 80055c0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055c6:	1c5a      	adds	r2, r3, #1
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80055d0:	b29b      	uxth	r3, r3
 80055d2:	3b01      	subs	r3, #1
 80055d4:	b29a      	uxth	r2, r3
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	87da      	strh	r2, [r3, #62]	; 0x3e
 80055da:	e011      	b.n	8005600 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80055dc:	f7fc ffaa 	bl	8002534 <HAL_GetTick>
 80055e0:	4602      	mov	r2, r0
 80055e2:	693b      	ldr	r3, [r7, #16]
 80055e4:	1ad3      	subs	r3, r2, r3
 80055e6:	683a      	ldr	r2, [r7, #0]
 80055e8:	429a      	cmp	r2, r3
 80055ea:	d803      	bhi.n	80055f4 <HAL_SPI_Receive+0x166>
 80055ec:	683b      	ldr	r3, [r7, #0]
 80055ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055f2:	d102      	bne.n	80055fa <HAL_SPI_Receive+0x16c>
 80055f4:	683b      	ldr	r3, [r7, #0]
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d102      	bne.n	8005600 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 80055fa:	2303      	movs	r3, #3
 80055fc:	75fb      	strb	r3, [r7, #23]
          goto error;
 80055fe:	e04a      	b.n	8005696 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005604:	b29b      	uxth	r3, r3
 8005606:	2b00      	cmp	r3, #0
 8005608:	d1cb      	bne.n	80055a2 <HAL_SPI_Receive+0x114>
 800560a:	e031      	b.n	8005670 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	689b      	ldr	r3, [r3, #8]
 8005612:	f003 0301 	and.w	r3, r3, #1
 8005616:	2b01      	cmp	r3, #1
 8005618:	d113      	bne.n	8005642 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	68da      	ldr	r2, [r3, #12]
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005624:	b292      	uxth	r2, r2
 8005626:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800562c:	1c9a      	adds	r2, r3, #2
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005636:	b29b      	uxth	r3, r3
 8005638:	3b01      	subs	r3, #1
 800563a:	b29a      	uxth	r2, r3
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005640:	e011      	b.n	8005666 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005642:	f7fc ff77 	bl	8002534 <HAL_GetTick>
 8005646:	4602      	mov	r2, r0
 8005648:	693b      	ldr	r3, [r7, #16]
 800564a:	1ad3      	subs	r3, r2, r3
 800564c:	683a      	ldr	r2, [r7, #0]
 800564e:	429a      	cmp	r2, r3
 8005650:	d803      	bhi.n	800565a <HAL_SPI_Receive+0x1cc>
 8005652:	683b      	ldr	r3, [r7, #0]
 8005654:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005658:	d102      	bne.n	8005660 <HAL_SPI_Receive+0x1d2>
 800565a:	683b      	ldr	r3, [r7, #0]
 800565c:	2b00      	cmp	r3, #0
 800565e:	d102      	bne.n	8005666 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8005660:	2303      	movs	r3, #3
 8005662:	75fb      	strb	r3, [r7, #23]
          goto error;
 8005664:	e017      	b.n	8005696 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800566a:	b29b      	uxth	r3, r3
 800566c:	2b00      	cmp	r3, #0
 800566e:	d1cd      	bne.n	800560c <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005670:	693a      	ldr	r2, [r7, #16]
 8005672:	6839      	ldr	r1, [r7, #0]
 8005674:	68f8      	ldr	r0, [r7, #12]
 8005676:	f000 fa53 	bl	8005b20 <SPI_EndRxTransaction>
 800567a:	4603      	mov	r3, r0
 800567c:	2b00      	cmp	r3, #0
 800567e:	d002      	beq.n	8005686 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	2220      	movs	r2, #32
 8005684:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800568a:	2b00      	cmp	r3, #0
 800568c:	d002      	beq.n	8005694 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 800568e:	2301      	movs	r3, #1
 8005690:	75fb      	strb	r3, [r7, #23]
 8005692:	e000      	b.n	8005696 <HAL_SPI_Receive+0x208>
  }

error :
 8005694:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	2201      	movs	r2, #1
 800569a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	2200      	movs	r2, #0
 80056a2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80056a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80056a8:	4618      	mov	r0, r3
 80056aa:	3718      	adds	r7, #24
 80056ac:	46bd      	mov	sp, r7
 80056ae:	bd80      	pop	{r7, pc}

080056b0 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80056b0:	b580      	push	{r7, lr}
 80056b2:	b08c      	sub	sp, #48	; 0x30
 80056b4:	af00      	add	r7, sp, #0
 80056b6:	60f8      	str	r0, [r7, #12]
 80056b8:	60b9      	str	r1, [r7, #8]
 80056ba:	607a      	str	r2, [r7, #4]
 80056bc:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80056be:	2301      	movs	r3, #1
 80056c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80056c2:	2300      	movs	r3, #0
 80056c4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80056ce:	2b01      	cmp	r3, #1
 80056d0:	d101      	bne.n	80056d6 <HAL_SPI_TransmitReceive+0x26>
 80056d2:	2302      	movs	r3, #2
 80056d4:	e18a      	b.n	80059ec <HAL_SPI_TransmitReceive+0x33c>
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	2201      	movs	r2, #1
 80056da:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80056de:	f7fc ff29 	bl	8002534 <HAL_GetTick>
 80056e2:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80056ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	685b      	ldr	r3, [r3, #4]
 80056f2:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80056f4:	887b      	ldrh	r3, [r7, #2]
 80056f6:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80056f8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80056fc:	2b01      	cmp	r3, #1
 80056fe:	d00f      	beq.n	8005720 <HAL_SPI_TransmitReceive+0x70>
 8005700:	69fb      	ldr	r3, [r7, #28]
 8005702:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005706:	d107      	bne.n	8005718 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	689b      	ldr	r3, [r3, #8]
 800570c:	2b00      	cmp	r3, #0
 800570e:	d103      	bne.n	8005718 <HAL_SPI_TransmitReceive+0x68>
 8005710:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005714:	2b04      	cmp	r3, #4
 8005716:	d003      	beq.n	8005720 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8005718:	2302      	movs	r3, #2
 800571a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800571e:	e15b      	b.n	80059d8 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005720:	68bb      	ldr	r3, [r7, #8]
 8005722:	2b00      	cmp	r3, #0
 8005724:	d005      	beq.n	8005732 <HAL_SPI_TransmitReceive+0x82>
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	2b00      	cmp	r3, #0
 800572a:	d002      	beq.n	8005732 <HAL_SPI_TransmitReceive+0x82>
 800572c:	887b      	ldrh	r3, [r7, #2]
 800572e:	2b00      	cmp	r3, #0
 8005730:	d103      	bne.n	800573a <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8005732:	2301      	movs	r3, #1
 8005734:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005738:	e14e      	b.n	80059d8 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005740:	b2db      	uxtb	r3, r3
 8005742:	2b04      	cmp	r3, #4
 8005744:	d003      	beq.n	800574e <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	2205      	movs	r2, #5
 800574a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	2200      	movs	r2, #0
 8005752:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	687a      	ldr	r2, [r7, #4]
 8005758:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	887a      	ldrh	r2, [r7, #2]
 800575e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	887a      	ldrh	r2, [r7, #2]
 8005764:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	68ba      	ldr	r2, [r7, #8]
 800576a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	887a      	ldrh	r2, [r7, #2]
 8005770:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	887a      	ldrh	r2, [r7, #2]
 8005776:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	2200      	movs	r2, #0
 800577c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	2200      	movs	r2, #0
 8005782:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800578e:	2b40      	cmp	r3, #64	; 0x40
 8005790:	d007      	beq.n	80057a2 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	681a      	ldr	r2, [r3, #0]
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80057a0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	68db      	ldr	r3, [r3, #12]
 80057a6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80057aa:	d178      	bne.n	800589e <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	685b      	ldr	r3, [r3, #4]
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d002      	beq.n	80057ba <HAL_SPI_TransmitReceive+0x10a>
 80057b4:	8b7b      	ldrh	r3, [r7, #26]
 80057b6:	2b01      	cmp	r3, #1
 80057b8:	d166      	bne.n	8005888 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057be:	881a      	ldrh	r2, [r3, #0]
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057ca:	1c9a      	adds	r2, r3, #2
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80057d4:	b29b      	uxth	r3, r3
 80057d6:	3b01      	subs	r3, #1
 80057d8:	b29a      	uxth	r2, r3
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80057de:	e053      	b.n	8005888 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	689b      	ldr	r3, [r3, #8]
 80057e6:	f003 0302 	and.w	r3, r3, #2
 80057ea:	2b02      	cmp	r3, #2
 80057ec:	d11b      	bne.n	8005826 <HAL_SPI_TransmitReceive+0x176>
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80057f2:	b29b      	uxth	r3, r3
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d016      	beq.n	8005826 <HAL_SPI_TransmitReceive+0x176>
 80057f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057fa:	2b01      	cmp	r3, #1
 80057fc:	d113      	bne.n	8005826 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005802:	881a      	ldrh	r2, [r3, #0]
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800580e:	1c9a      	adds	r2, r3, #2
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005818:	b29b      	uxth	r3, r3
 800581a:	3b01      	subs	r3, #1
 800581c:	b29a      	uxth	r2, r3
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005822:	2300      	movs	r3, #0
 8005824:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	689b      	ldr	r3, [r3, #8]
 800582c:	f003 0301 	and.w	r3, r3, #1
 8005830:	2b01      	cmp	r3, #1
 8005832:	d119      	bne.n	8005868 <HAL_SPI_TransmitReceive+0x1b8>
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005838:	b29b      	uxth	r3, r3
 800583a:	2b00      	cmp	r3, #0
 800583c:	d014      	beq.n	8005868 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	68da      	ldr	r2, [r3, #12]
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005848:	b292      	uxth	r2, r2
 800584a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005850:	1c9a      	adds	r2, r3, #2
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800585a:	b29b      	uxth	r3, r3
 800585c:	3b01      	subs	r3, #1
 800585e:	b29a      	uxth	r2, r3
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005864:	2301      	movs	r3, #1
 8005866:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005868:	f7fc fe64 	bl	8002534 <HAL_GetTick>
 800586c:	4602      	mov	r2, r0
 800586e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005870:	1ad3      	subs	r3, r2, r3
 8005872:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005874:	429a      	cmp	r2, r3
 8005876:	d807      	bhi.n	8005888 <HAL_SPI_TransmitReceive+0x1d8>
 8005878:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800587a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800587e:	d003      	beq.n	8005888 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8005880:	2303      	movs	r3, #3
 8005882:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005886:	e0a7      	b.n	80059d8 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800588c:	b29b      	uxth	r3, r3
 800588e:	2b00      	cmp	r3, #0
 8005890:	d1a6      	bne.n	80057e0 <HAL_SPI_TransmitReceive+0x130>
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005896:	b29b      	uxth	r3, r3
 8005898:	2b00      	cmp	r3, #0
 800589a:	d1a1      	bne.n	80057e0 <HAL_SPI_TransmitReceive+0x130>
 800589c:	e07c      	b.n	8005998 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	685b      	ldr	r3, [r3, #4]
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d002      	beq.n	80058ac <HAL_SPI_TransmitReceive+0x1fc>
 80058a6:	8b7b      	ldrh	r3, [r7, #26]
 80058a8:	2b01      	cmp	r3, #1
 80058aa:	d16b      	bne.n	8005984 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	330c      	adds	r3, #12
 80058b6:	7812      	ldrb	r2, [r2, #0]
 80058b8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058be:	1c5a      	adds	r2, r3, #1
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80058c8:	b29b      	uxth	r3, r3
 80058ca:	3b01      	subs	r3, #1
 80058cc:	b29a      	uxth	r2, r3
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80058d2:	e057      	b.n	8005984 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	689b      	ldr	r3, [r3, #8]
 80058da:	f003 0302 	and.w	r3, r3, #2
 80058de:	2b02      	cmp	r3, #2
 80058e0:	d11c      	bne.n	800591c <HAL_SPI_TransmitReceive+0x26c>
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80058e6:	b29b      	uxth	r3, r3
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d017      	beq.n	800591c <HAL_SPI_TransmitReceive+0x26c>
 80058ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058ee:	2b01      	cmp	r3, #1
 80058f0:	d114      	bne.n	800591c <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	330c      	adds	r3, #12
 80058fc:	7812      	ldrb	r2, [r2, #0]
 80058fe:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005904:	1c5a      	adds	r2, r3, #1
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800590e:	b29b      	uxth	r3, r3
 8005910:	3b01      	subs	r3, #1
 8005912:	b29a      	uxth	r2, r3
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005918:	2300      	movs	r3, #0
 800591a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	689b      	ldr	r3, [r3, #8]
 8005922:	f003 0301 	and.w	r3, r3, #1
 8005926:	2b01      	cmp	r3, #1
 8005928:	d119      	bne.n	800595e <HAL_SPI_TransmitReceive+0x2ae>
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800592e:	b29b      	uxth	r3, r3
 8005930:	2b00      	cmp	r3, #0
 8005932:	d014      	beq.n	800595e <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	68da      	ldr	r2, [r3, #12]
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800593e:	b2d2      	uxtb	r2, r2
 8005940:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005946:	1c5a      	adds	r2, r3, #1
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005950:	b29b      	uxth	r3, r3
 8005952:	3b01      	subs	r3, #1
 8005954:	b29a      	uxth	r2, r3
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800595a:	2301      	movs	r3, #1
 800595c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800595e:	f7fc fde9 	bl	8002534 <HAL_GetTick>
 8005962:	4602      	mov	r2, r0
 8005964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005966:	1ad3      	subs	r3, r2, r3
 8005968:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800596a:	429a      	cmp	r2, r3
 800596c:	d803      	bhi.n	8005976 <HAL_SPI_TransmitReceive+0x2c6>
 800596e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005970:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005974:	d102      	bne.n	800597c <HAL_SPI_TransmitReceive+0x2cc>
 8005976:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005978:	2b00      	cmp	r3, #0
 800597a:	d103      	bne.n	8005984 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800597c:	2303      	movs	r3, #3
 800597e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005982:	e029      	b.n	80059d8 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005988:	b29b      	uxth	r3, r3
 800598a:	2b00      	cmp	r3, #0
 800598c:	d1a2      	bne.n	80058d4 <HAL_SPI_TransmitReceive+0x224>
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005992:	b29b      	uxth	r3, r3
 8005994:	2b00      	cmp	r3, #0
 8005996:	d19d      	bne.n	80058d4 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005998:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800599a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800599c:	68f8      	ldr	r0, [r7, #12]
 800599e:	f000 f925 	bl	8005bec <SPI_EndRxTxTransaction>
 80059a2:	4603      	mov	r3, r0
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d006      	beq.n	80059b6 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80059a8:	2301      	movs	r3, #1
 80059aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	2220      	movs	r2, #32
 80059b2:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80059b4:	e010      	b.n	80059d8 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	689b      	ldr	r3, [r3, #8]
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d10b      	bne.n	80059d6 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80059be:	2300      	movs	r3, #0
 80059c0:	617b      	str	r3, [r7, #20]
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	68db      	ldr	r3, [r3, #12]
 80059c8:	617b      	str	r3, [r7, #20]
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	689b      	ldr	r3, [r3, #8]
 80059d0:	617b      	str	r3, [r7, #20]
 80059d2:	697b      	ldr	r3, [r7, #20]
 80059d4:	e000      	b.n	80059d8 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80059d6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	2201      	movs	r2, #1
 80059dc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	2200      	movs	r2, #0
 80059e4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80059e8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80059ec:	4618      	mov	r0, r3
 80059ee:	3730      	adds	r7, #48	; 0x30
 80059f0:	46bd      	mov	sp, r7
 80059f2:	bd80      	pop	{r7, pc}

080059f4 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 80059f4:	b480      	push	{r7}
 80059f6:	b083      	sub	sp, #12
 80059f8:	af00      	add	r7, sp, #0
 80059fa:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005a02:	b2db      	uxtb	r3, r3
}
 8005a04:	4618      	mov	r0, r3
 8005a06:	370c      	adds	r7, #12
 8005a08:	46bd      	mov	sp, r7
 8005a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a0e:	4770      	bx	lr

08005a10 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005a10:	b580      	push	{r7, lr}
 8005a12:	b088      	sub	sp, #32
 8005a14:	af00      	add	r7, sp, #0
 8005a16:	60f8      	str	r0, [r7, #12]
 8005a18:	60b9      	str	r1, [r7, #8]
 8005a1a:	603b      	str	r3, [r7, #0]
 8005a1c:	4613      	mov	r3, r2
 8005a1e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005a20:	f7fc fd88 	bl	8002534 <HAL_GetTick>
 8005a24:	4602      	mov	r2, r0
 8005a26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a28:	1a9b      	subs	r3, r3, r2
 8005a2a:	683a      	ldr	r2, [r7, #0]
 8005a2c:	4413      	add	r3, r2
 8005a2e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005a30:	f7fc fd80 	bl	8002534 <HAL_GetTick>
 8005a34:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005a36:	4b39      	ldr	r3, [pc, #228]	; (8005b1c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	015b      	lsls	r3, r3, #5
 8005a3c:	0d1b      	lsrs	r3, r3, #20
 8005a3e:	69fa      	ldr	r2, [r7, #28]
 8005a40:	fb02 f303 	mul.w	r3, r2, r3
 8005a44:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005a46:	e054      	b.n	8005af2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005a48:	683b      	ldr	r3, [r7, #0]
 8005a4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a4e:	d050      	beq.n	8005af2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005a50:	f7fc fd70 	bl	8002534 <HAL_GetTick>
 8005a54:	4602      	mov	r2, r0
 8005a56:	69bb      	ldr	r3, [r7, #24]
 8005a58:	1ad3      	subs	r3, r2, r3
 8005a5a:	69fa      	ldr	r2, [r7, #28]
 8005a5c:	429a      	cmp	r2, r3
 8005a5e:	d902      	bls.n	8005a66 <SPI_WaitFlagStateUntilTimeout+0x56>
 8005a60:	69fb      	ldr	r3, [r7, #28]
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d13d      	bne.n	8005ae2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	685a      	ldr	r2, [r3, #4]
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005a74:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	685b      	ldr	r3, [r3, #4]
 8005a7a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005a7e:	d111      	bne.n	8005aa4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	689b      	ldr	r3, [r3, #8]
 8005a84:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005a88:	d004      	beq.n	8005a94 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	689b      	ldr	r3, [r3, #8]
 8005a8e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005a92:	d107      	bne.n	8005aa4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	681a      	ldr	r2, [r3, #0]
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005aa2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005aa8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005aac:	d10f      	bne.n	8005ace <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	681a      	ldr	r2, [r3, #0]
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005abc:	601a      	str	r2, [r3, #0]
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	681a      	ldr	r2, [r3, #0]
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005acc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	2201      	movs	r2, #1
 8005ad2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	2200      	movs	r2, #0
 8005ada:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8005ade:	2303      	movs	r3, #3
 8005ae0:	e017      	b.n	8005b12 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005ae2:	697b      	ldr	r3, [r7, #20]
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d101      	bne.n	8005aec <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005ae8:	2300      	movs	r3, #0
 8005aea:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005aec:	697b      	ldr	r3, [r7, #20]
 8005aee:	3b01      	subs	r3, #1
 8005af0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	689a      	ldr	r2, [r3, #8]
 8005af8:	68bb      	ldr	r3, [r7, #8]
 8005afa:	4013      	ands	r3, r2
 8005afc:	68ba      	ldr	r2, [r7, #8]
 8005afe:	429a      	cmp	r2, r3
 8005b00:	bf0c      	ite	eq
 8005b02:	2301      	moveq	r3, #1
 8005b04:	2300      	movne	r3, #0
 8005b06:	b2db      	uxtb	r3, r3
 8005b08:	461a      	mov	r2, r3
 8005b0a:	79fb      	ldrb	r3, [r7, #7]
 8005b0c:	429a      	cmp	r2, r3
 8005b0e:	d19b      	bne.n	8005a48 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005b10:	2300      	movs	r3, #0
}
 8005b12:	4618      	mov	r0, r3
 8005b14:	3720      	adds	r7, #32
 8005b16:	46bd      	mov	sp, r7
 8005b18:	bd80      	pop	{r7, pc}
 8005b1a:	bf00      	nop
 8005b1c:	20000010 	.word	0x20000010

08005b20 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005b20:	b580      	push	{r7, lr}
 8005b22:	b086      	sub	sp, #24
 8005b24:	af02      	add	r7, sp, #8
 8005b26:	60f8      	str	r0, [r7, #12]
 8005b28:	60b9      	str	r1, [r7, #8]
 8005b2a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	685b      	ldr	r3, [r3, #4]
 8005b30:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005b34:	d111      	bne.n	8005b5a <SPI_EndRxTransaction+0x3a>
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	689b      	ldr	r3, [r3, #8]
 8005b3a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005b3e:	d004      	beq.n	8005b4a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	689b      	ldr	r3, [r3, #8]
 8005b44:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005b48:	d107      	bne.n	8005b5a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	681a      	ldr	r2, [r3, #0]
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005b58:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	685b      	ldr	r3, [r3, #4]
 8005b5e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005b62:	d12a      	bne.n	8005bba <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	689b      	ldr	r3, [r3, #8]
 8005b68:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005b6c:	d012      	beq.n	8005b94 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	9300      	str	r3, [sp, #0]
 8005b72:	68bb      	ldr	r3, [r7, #8]
 8005b74:	2200      	movs	r2, #0
 8005b76:	2180      	movs	r1, #128	; 0x80
 8005b78:	68f8      	ldr	r0, [r7, #12]
 8005b7a:	f7ff ff49 	bl	8005a10 <SPI_WaitFlagStateUntilTimeout>
 8005b7e:	4603      	mov	r3, r0
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d02d      	beq.n	8005be0 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b88:	f043 0220 	orr.w	r2, r3, #32
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8005b90:	2303      	movs	r3, #3
 8005b92:	e026      	b.n	8005be2 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	9300      	str	r3, [sp, #0]
 8005b98:	68bb      	ldr	r3, [r7, #8]
 8005b9a:	2200      	movs	r2, #0
 8005b9c:	2101      	movs	r1, #1
 8005b9e:	68f8      	ldr	r0, [r7, #12]
 8005ba0:	f7ff ff36 	bl	8005a10 <SPI_WaitFlagStateUntilTimeout>
 8005ba4:	4603      	mov	r3, r0
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d01a      	beq.n	8005be0 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005bae:	f043 0220 	orr.w	r2, r3, #32
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8005bb6:	2303      	movs	r3, #3
 8005bb8:	e013      	b.n	8005be2 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	9300      	str	r3, [sp, #0]
 8005bbe:	68bb      	ldr	r3, [r7, #8]
 8005bc0:	2200      	movs	r2, #0
 8005bc2:	2101      	movs	r1, #1
 8005bc4:	68f8      	ldr	r0, [r7, #12]
 8005bc6:	f7ff ff23 	bl	8005a10 <SPI_WaitFlagStateUntilTimeout>
 8005bca:	4603      	mov	r3, r0
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d007      	beq.n	8005be0 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005bd4:	f043 0220 	orr.w	r2, r3, #32
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005bdc:	2303      	movs	r3, #3
 8005bde:	e000      	b.n	8005be2 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8005be0:	2300      	movs	r3, #0
}
 8005be2:	4618      	mov	r0, r3
 8005be4:	3710      	adds	r7, #16
 8005be6:	46bd      	mov	sp, r7
 8005be8:	bd80      	pop	{r7, pc}
	...

08005bec <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005bec:	b580      	push	{r7, lr}
 8005bee:	b088      	sub	sp, #32
 8005bf0:	af02      	add	r7, sp, #8
 8005bf2:	60f8      	str	r0, [r7, #12]
 8005bf4:	60b9      	str	r1, [r7, #8]
 8005bf6:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005bf8:	4b1b      	ldr	r3, [pc, #108]	; (8005c68 <SPI_EndRxTxTransaction+0x7c>)
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	4a1b      	ldr	r2, [pc, #108]	; (8005c6c <SPI_EndRxTxTransaction+0x80>)
 8005bfe:	fba2 2303 	umull	r2, r3, r2, r3
 8005c02:	0d5b      	lsrs	r3, r3, #21
 8005c04:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005c08:	fb02 f303 	mul.w	r3, r2, r3
 8005c0c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	685b      	ldr	r3, [r3, #4]
 8005c12:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005c16:	d112      	bne.n	8005c3e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	9300      	str	r3, [sp, #0]
 8005c1c:	68bb      	ldr	r3, [r7, #8]
 8005c1e:	2200      	movs	r2, #0
 8005c20:	2180      	movs	r1, #128	; 0x80
 8005c22:	68f8      	ldr	r0, [r7, #12]
 8005c24:	f7ff fef4 	bl	8005a10 <SPI_WaitFlagStateUntilTimeout>
 8005c28:	4603      	mov	r3, r0
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d016      	beq.n	8005c5c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c32:	f043 0220 	orr.w	r2, r3, #32
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005c3a:	2303      	movs	r3, #3
 8005c3c:	e00f      	b.n	8005c5e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005c3e:	697b      	ldr	r3, [r7, #20]
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d00a      	beq.n	8005c5a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8005c44:	697b      	ldr	r3, [r7, #20]
 8005c46:	3b01      	subs	r3, #1
 8005c48:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	689b      	ldr	r3, [r3, #8]
 8005c50:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c54:	2b80      	cmp	r3, #128	; 0x80
 8005c56:	d0f2      	beq.n	8005c3e <SPI_EndRxTxTransaction+0x52>
 8005c58:	e000      	b.n	8005c5c <SPI_EndRxTxTransaction+0x70>
        break;
 8005c5a:	bf00      	nop
  }

  return HAL_OK;
 8005c5c:	2300      	movs	r3, #0
}
 8005c5e:	4618      	mov	r0, r3
 8005c60:	3718      	adds	r7, #24
 8005c62:	46bd      	mov	sp, r7
 8005c64:	bd80      	pop	{r7, pc}
 8005c66:	bf00      	nop
 8005c68:	20000010 	.word	0x20000010
 8005c6c:	165e9f81 	.word	0x165e9f81

08005c70 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005c70:	b580      	push	{r7, lr}
 8005c72:	b082      	sub	sp, #8
 8005c74:	af00      	add	r7, sp, #0
 8005c76:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d101      	bne.n	8005c82 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005c7e:	2301      	movs	r3, #1
 8005c80:	e041      	b.n	8005d06 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c88:	b2db      	uxtb	r3, r3
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d106      	bne.n	8005c9c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	2200      	movs	r2, #0
 8005c92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005c96:	6878      	ldr	r0, [r7, #4]
 8005c98:	f7fc fa20 	bl	80020dc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	2202      	movs	r2, #2
 8005ca0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681a      	ldr	r2, [r3, #0]
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	3304      	adds	r3, #4
 8005cac:	4619      	mov	r1, r3
 8005cae:	4610      	mov	r0, r2
 8005cb0:	f000 fa96 	bl	80061e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	2201      	movs	r2, #1
 8005cb8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	2201      	movs	r2, #1
 8005cc0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	2201      	movs	r2, #1
 8005cc8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	2201      	movs	r2, #1
 8005cd0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	2201      	movs	r2, #1
 8005cd8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	2201      	movs	r2, #1
 8005ce0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	2201      	movs	r2, #1
 8005ce8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	2201      	movs	r2, #1
 8005cf0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	2201      	movs	r2, #1
 8005cf8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	2201      	movs	r2, #1
 8005d00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005d04:	2300      	movs	r3, #0
}
 8005d06:	4618      	mov	r0, r3
 8005d08:	3708      	adds	r7, #8
 8005d0a:	46bd      	mov	sp, r7
 8005d0c:	bd80      	pop	{r7, pc}
	...

08005d10 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005d10:	b480      	push	{r7}
 8005d12:	b085      	sub	sp, #20
 8005d14:	af00      	add	r7, sp, #0
 8005d16:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d1e:	b2db      	uxtb	r3, r3
 8005d20:	2b01      	cmp	r3, #1
 8005d22:	d001      	beq.n	8005d28 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005d24:	2301      	movs	r3, #1
 8005d26:	e04e      	b.n	8005dc6 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	2202      	movs	r2, #2
 8005d2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	68da      	ldr	r2, [r3, #12]
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	f042 0201 	orr.w	r2, r2, #1
 8005d3e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	4a23      	ldr	r2, [pc, #140]	; (8005dd4 <HAL_TIM_Base_Start_IT+0xc4>)
 8005d46:	4293      	cmp	r3, r2
 8005d48:	d022      	beq.n	8005d90 <HAL_TIM_Base_Start_IT+0x80>
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d52:	d01d      	beq.n	8005d90 <HAL_TIM_Base_Start_IT+0x80>
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	4a1f      	ldr	r2, [pc, #124]	; (8005dd8 <HAL_TIM_Base_Start_IT+0xc8>)
 8005d5a:	4293      	cmp	r3, r2
 8005d5c:	d018      	beq.n	8005d90 <HAL_TIM_Base_Start_IT+0x80>
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	4a1e      	ldr	r2, [pc, #120]	; (8005ddc <HAL_TIM_Base_Start_IT+0xcc>)
 8005d64:	4293      	cmp	r3, r2
 8005d66:	d013      	beq.n	8005d90 <HAL_TIM_Base_Start_IT+0x80>
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	4a1c      	ldr	r2, [pc, #112]	; (8005de0 <HAL_TIM_Base_Start_IT+0xd0>)
 8005d6e:	4293      	cmp	r3, r2
 8005d70:	d00e      	beq.n	8005d90 <HAL_TIM_Base_Start_IT+0x80>
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	4a1b      	ldr	r2, [pc, #108]	; (8005de4 <HAL_TIM_Base_Start_IT+0xd4>)
 8005d78:	4293      	cmp	r3, r2
 8005d7a:	d009      	beq.n	8005d90 <HAL_TIM_Base_Start_IT+0x80>
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	4a19      	ldr	r2, [pc, #100]	; (8005de8 <HAL_TIM_Base_Start_IT+0xd8>)
 8005d82:	4293      	cmp	r3, r2
 8005d84:	d004      	beq.n	8005d90 <HAL_TIM_Base_Start_IT+0x80>
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	4a18      	ldr	r2, [pc, #96]	; (8005dec <HAL_TIM_Base_Start_IT+0xdc>)
 8005d8c:	4293      	cmp	r3, r2
 8005d8e:	d111      	bne.n	8005db4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	689b      	ldr	r3, [r3, #8]
 8005d96:	f003 0307 	and.w	r3, r3, #7
 8005d9a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	2b06      	cmp	r3, #6
 8005da0:	d010      	beq.n	8005dc4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	681a      	ldr	r2, [r3, #0]
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	f042 0201 	orr.w	r2, r2, #1
 8005db0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005db2:	e007      	b.n	8005dc4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	681a      	ldr	r2, [r3, #0]
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	f042 0201 	orr.w	r2, r2, #1
 8005dc2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005dc4:	2300      	movs	r3, #0
}
 8005dc6:	4618      	mov	r0, r3
 8005dc8:	3714      	adds	r7, #20
 8005dca:	46bd      	mov	sp, r7
 8005dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd0:	4770      	bx	lr
 8005dd2:	bf00      	nop
 8005dd4:	40010000 	.word	0x40010000
 8005dd8:	40000400 	.word	0x40000400
 8005ddc:	40000800 	.word	0x40000800
 8005de0:	40000c00 	.word	0x40000c00
 8005de4:	40010400 	.word	0x40010400
 8005de8:	40014000 	.word	0x40014000
 8005dec:	40001800 	.word	0x40001800

08005df0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005df0:	b580      	push	{r7, lr}
 8005df2:	b082      	sub	sp, #8
 8005df4:	af00      	add	r7, sp, #0
 8005df6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	691b      	ldr	r3, [r3, #16]
 8005dfe:	f003 0302 	and.w	r3, r3, #2
 8005e02:	2b02      	cmp	r3, #2
 8005e04:	d122      	bne.n	8005e4c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	68db      	ldr	r3, [r3, #12]
 8005e0c:	f003 0302 	and.w	r3, r3, #2
 8005e10:	2b02      	cmp	r3, #2
 8005e12:	d11b      	bne.n	8005e4c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	f06f 0202 	mvn.w	r2, #2
 8005e1c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	2201      	movs	r2, #1
 8005e22:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	699b      	ldr	r3, [r3, #24]
 8005e2a:	f003 0303 	and.w	r3, r3, #3
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d003      	beq.n	8005e3a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005e32:	6878      	ldr	r0, [r7, #4]
 8005e34:	f000 f9b5 	bl	80061a2 <HAL_TIM_IC_CaptureCallback>
 8005e38:	e005      	b.n	8005e46 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e3a:	6878      	ldr	r0, [r7, #4]
 8005e3c:	f000 f9a7 	bl	800618e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e40:	6878      	ldr	r0, [r7, #4]
 8005e42:	f000 f9b8 	bl	80061b6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	2200      	movs	r2, #0
 8005e4a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	691b      	ldr	r3, [r3, #16]
 8005e52:	f003 0304 	and.w	r3, r3, #4
 8005e56:	2b04      	cmp	r3, #4
 8005e58:	d122      	bne.n	8005ea0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	68db      	ldr	r3, [r3, #12]
 8005e60:	f003 0304 	and.w	r3, r3, #4
 8005e64:	2b04      	cmp	r3, #4
 8005e66:	d11b      	bne.n	8005ea0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	f06f 0204 	mvn.w	r2, #4
 8005e70:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	2202      	movs	r2, #2
 8005e76:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	699b      	ldr	r3, [r3, #24]
 8005e7e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d003      	beq.n	8005e8e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005e86:	6878      	ldr	r0, [r7, #4]
 8005e88:	f000 f98b 	bl	80061a2 <HAL_TIM_IC_CaptureCallback>
 8005e8c:	e005      	b.n	8005e9a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e8e:	6878      	ldr	r0, [r7, #4]
 8005e90:	f000 f97d 	bl	800618e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e94:	6878      	ldr	r0, [r7, #4]
 8005e96:	f000 f98e 	bl	80061b6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	2200      	movs	r2, #0
 8005e9e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	691b      	ldr	r3, [r3, #16]
 8005ea6:	f003 0308 	and.w	r3, r3, #8
 8005eaa:	2b08      	cmp	r3, #8
 8005eac:	d122      	bne.n	8005ef4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	68db      	ldr	r3, [r3, #12]
 8005eb4:	f003 0308 	and.w	r3, r3, #8
 8005eb8:	2b08      	cmp	r3, #8
 8005eba:	d11b      	bne.n	8005ef4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	f06f 0208 	mvn.w	r2, #8
 8005ec4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	2204      	movs	r2, #4
 8005eca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	69db      	ldr	r3, [r3, #28]
 8005ed2:	f003 0303 	and.w	r3, r3, #3
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d003      	beq.n	8005ee2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005eda:	6878      	ldr	r0, [r7, #4]
 8005edc:	f000 f961 	bl	80061a2 <HAL_TIM_IC_CaptureCallback>
 8005ee0:	e005      	b.n	8005eee <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ee2:	6878      	ldr	r0, [r7, #4]
 8005ee4:	f000 f953 	bl	800618e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ee8:	6878      	ldr	r0, [r7, #4]
 8005eea:	f000 f964 	bl	80061b6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	2200      	movs	r2, #0
 8005ef2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	691b      	ldr	r3, [r3, #16]
 8005efa:	f003 0310 	and.w	r3, r3, #16
 8005efe:	2b10      	cmp	r3, #16
 8005f00:	d122      	bne.n	8005f48 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	68db      	ldr	r3, [r3, #12]
 8005f08:	f003 0310 	and.w	r3, r3, #16
 8005f0c:	2b10      	cmp	r3, #16
 8005f0e:	d11b      	bne.n	8005f48 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	f06f 0210 	mvn.w	r2, #16
 8005f18:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	2208      	movs	r2, #8
 8005f1e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	69db      	ldr	r3, [r3, #28]
 8005f26:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d003      	beq.n	8005f36 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005f2e:	6878      	ldr	r0, [r7, #4]
 8005f30:	f000 f937 	bl	80061a2 <HAL_TIM_IC_CaptureCallback>
 8005f34:	e005      	b.n	8005f42 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f36:	6878      	ldr	r0, [r7, #4]
 8005f38:	f000 f929 	bl	800618e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f3c:	6878      	ldr	r0, [r7, #4]
 8005f3e:	f000 f93a 	bl	80061b6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	2200      	movs	r2, #0
 8005f46:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	691b      	ldr	r3, [r3, #16]
 8005f4e:	f003 0301 	and.w	r3, r3, #1
 8005f52:	2b01      	cmp	r3, #1
 8005f54:	d10e      	bne.n	8005f74 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	68db      	ldr	r3, [r3, #12]
 8005f5c:	f003 0301 	and.w	r3, r3, #1
 8005f60:	2b01      	cmp	r3, #1
 8005f62:	d107      	bne.n	8005f74 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	f06f 0201 	mvn.w	r2, #1
 8005f6c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005f6e:	6878      	ldr	r0, [r7, #4]
 8005f70:	f7fb ff40 	bl	8001df4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	691b      	ldr	r3, [r3, #16]
 8005f7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f7e:	2b80      	cmp	r3, #128	; 0x80
 8005f80:	d10e      	bne.n	8005fa0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	68db      	ldr	r3, [r3, #12]
 8005f88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f8c:	2b80      	cmp	r3, #128	; 0x80
 8005f8e:	d107      	bne.n	8005fa0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005f98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005f9a:	6878      	ldr	r0, [r7, #4]
 8005f9c:	f000 fae0 	bl	8006560 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	691b      	ldr	r3, [r3, #16]
 8005fa6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005faa:	2b40      	cmp	r3, #64	; 0x40
 8005fac:	d10e      	bne.n	8005fcc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	68db      	ldr	r3, [r3, #12]
 8005fb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fb8:	2b40      	cmp	r3, #64	; 0x40
 8005fba:	d107      	bne.n	8005fcc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005fc4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005fc6:	6878      	ldr	r0, [r7, #4]
 8005fc8:	f000 f8ff 	bl	80061ca <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	691b      	ldr	r3, [r3, #16]
 8005fd2:	f003 0320 	and.w	r3, r3, #32
 8005fd6:	2b20      	cmp	r3, #32
 8005fd8:	d10e      	bne.n	8005ff8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	68db      	ldr	r3, [r3, #12]
 8005fe0:	f003 0320 	and.w	r3, r3, #32
 8005fe4:	2b20      	cmp	r3, #32
 8005fe6:	d107      	bne.n	8005ff8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	f06f 0220 	mvn.w	r2, #32
 8005ff0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005ff2:	6878      	ldr	r0, [r7, #4]
 8005ff4:	f000 faaa 	bl	800654c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005ff8:	bf00      	nop
 8005ffa:	3708      	adds	r7, #8
 8005ffc:	46bd      	mov	sp, r7
 8005ffe:	bd80      	pop	{r7, pc}

08006000 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006000:	b580      	push	{r7, lr}
 8006002:	b084      	sub	sp, #16
 8006004:	af00      	add	r7, sp, #0
 8006006:	6078      	str	r0, [r7, #4]
 8006008:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800600a:	2300      	movs	r3, #0
 800600c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006014:	2b01      	cmp	r3, #1
 8006016:	d101      	bne.n	800601c <HAL_TIM_ConfigClockSource+0x1c>
 8006018:	2302      	movs	r3, #2
 800601a:	e0b4      	b.n	8006186 <HAL_TIM_ConfigClockSource+0x186>
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	2201      	movs	r2, #1
 8006020:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	2202      	movs	r2, #2
 8006028:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	689b      	ldr	r3, [r3, #8]
 8006032:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006034:	68bb      	ldr	r3, [r7, #8]
 8006036:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800603a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800603c:	68bb      	ldr	r3, [r7, #8]
 800603e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006042:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	68ba      	ldr	r2, [r7, #8]
 800604a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800604c:	683b      	ldr	r3, [r7, #0]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006054:	d03e      	beq.n	80060d4 <HAL_TIM_ConfigClockSource+0xd4>
 8006056:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800605a:	f200 8087 	bhi.w	800616c <HAL_TIM_ConfigClockSource+0x16c>
 800605e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006062:	f000 8086 	beq.w	8006172 <HAL_TIM_ConfigClockSource+0x172>
 8006066:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800606a:	d87f      	bhi.n	800616c <HAL_TIM_ConfigClockSource+0x16c>
 800606c:	2b70      	cmp	r3, #112	; 0x70
 800606e:	d01a      	beq.n	80060a6 <HAL_TIM_ConfigClockSource+0xa6>
 8006070:	2b70      	cmp	r3, #112	; 0x70
 8006072:	d87b      	bhi.n	800616c <HAL_TIM_ConfigClockSource+0x16c>
 8006074:	2b60      	cmp	r3, #96	; 0x60
 8006076:	d050      	beq.n	800611a <HAL_TIM_ConfigClockSource+0x11a>
 8006078:	2b60      	cmp	r3, #96	; 0x60
 800607a:	d877      	bhi.n	800616c <HAL_TIM_ConfigClockSource+0x16c>
 800607c:	2b50      	cmp	r3, #80	; 0x50
 800607e:	d03c      	beq.n	80060fa <HAL_TIM_ConfigClockSource+0xfa>
 8006080:	2b50      	cmp	r3, #80	; 0x50
 8006082:	d873      	bhi.n	800616c <HAL_TIM_ConfigClockSource+0x16c>
 8006084:	2b40      	cmp	r3, #64	; 0x40
 8006086:	d058      	beq.n	800613a <HAL_TIM_ConfigClockSource+0x13a>
 8006088:	2b40      	cmp	r3, #64	; 0x40
 800608a:	d86f      	bhi.n	800616c <HAL_TIM_ConfigClockSource+0x16c>
 800608c:	2b30      	cmp	r3, #48	; 0x30
 800608e:	d064      	beq.n	800615a <HAL_TIM_ConfigClockSource+0x15a>
 8006090:	2b30      	cmp	r3, #48	; 0x30
 8006092:	d86b      	bhi.n	800616c <HAL_TIM_ConfigClockSource+0x16c>
 8006094:	2b20      	cmp	r3, #32
 8006096:	d060      	beq.n	800615a <HAL_TIM_ConfigClockSource+0x15a>
 8006098:	2b20      	cmp	r3, #32
 800609a:	d867      	bhi.n	800616c <HAL_TIM_ConfigClockSource+0x16c>
 800609c:	2b00      	cmp	r3, #0
 800609e:	d05c      	beq.n	800615a <HAL_TIM_ConfigClockSource+0x15a>
 80060a0:	2b10      	cmp	r3, #16
 80060a2:	d05a      	beq.n	800615a <HAL_TIM_ConfigClockSource+0x15a>
 80060a4:	e062      	b.n	800616c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	6818      	ldr	r0, [r3, #0]
 80060aa:	683b      	ldr	r3, [r7, #0]
 80060ac:	6899      	ldr	r1, [r3, #8]
 80060ae:	683b      	ldr	r3, [r7, #0]
 80060b0:	685a      	ldr	r2, [r3, #4]
 80060b2:	683b      	ldr	r3, [r7, #0]
 80060b4:	68db      	ldr	r3, [r3, #12]
 80060b6:	f000 f9ad 	bl	8006414 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	689b      	ldr	r3, [r3, #8]
 80060c0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80060c2:	68bb      	ldr	r3, [r7, #8]
 80060c4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80060c8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	68ba      	ldr	r2, [r7, #8]
 80060d0:	609a      	str	r2, [r3, #8]
      break;
 80060d2:	e04f      	b.n	8006174 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	6818      	ldr	r0, [r3, #0]
 80060d8:	683b      	ldr	r3, [r7, #0]
 80060da:	6899      	ldr	r1, [r3, #8]
 80060dc:	683b      	ldr	r3, [r7, #0]
 80060de:	685a      	ldr	r2, [r3, #4]
 80060e0:	683b      	ldr	r3, [r7, #0]
 80060e2:	68db      	ldr	r3, [r3, #12]
 80060e4:	f000 f996 	bl	8006414 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	689a      	ldr	r2, [r3, #8]
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80060f6:	609a      	str	r2, [r3, #8]
      break;
 80060f8:	e03c      	b.n	8006174 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	6818      	ldr	r0, [r3, #0]
 80060fe:	683b      	ldr	r3, [r7, #0]
 8006100:	6859      	ldr	r1, [r3, #4]
 8006102:	683b      	ldr	r3, [r7, #0]
 8006104:	68db      	ldr	r3, [r3, #12]
 8006106:	461a      	mov	r2, r3
 8006108:	f000 f90a 	bl	8006320 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	2150      	movs	r1, #80	; 0x50
 8006112:	4618      	mov	r0, r3
 8006114:	f000 f963 	bl	80063de <TIM_ITRx_SetConfig>
      break;
 8006118:	e02c      	b.n	8006174 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	6818      	ldr	r0, [r3, #0]
 800611e:	683b      	ldr	r3, [r7, #0]
 8006120:	6859      	ldr	r1, [r3, #4]
 8006122:	683b      	ldr	r3, [r7, #0]
 8006124:	68db      	ldr	r3, [r3, #12]
 8006126:	461a      	mov	r2, r3
 8006128:	f000 f929 	bl	800637e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	2160      	movs	r1, #96	; 0x60
 8006132:	4618      	mov	r0, r3
 8006134:	f000 f953 	bl	80063de <TIM_ITRx_SetConfig>
      break;
 8006138:	e01c      	b.n	8006174 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	6818      	ldr	r0, [r3, #0]
 800613e:	683b      	ldr	r3, [r7, #0]
 8006140:	6859      	ldr	r1, [r3, #4]
 8006142:	683b      	ldr	r3, [r7, #0]
 8006144:	68db      	ldr	r3, [r3, #12]
 8006146:	461a      	mov	r2, r3
 8006148:	f000 f8ea 	bl	8006320 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	2140      	movs	r1, #64	; 0x40
 8006152:	4618      	mov	r0, r3
 8006154:	f000 f943 	bl	80063de <TIM_ITRx_SetConfig>
      break;
 8006158:	e00c      	b.n	8006174 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681a      	ldr	r2, [r3, #0]
 800615e:	683b      	ldr	r3, [r7, #0]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	4619      	mov	r1, r3
 8006164:	4610      	mov	r0, r2
 8006166:	f000 f93a 	bl	80063de <TIM_ITRx_SetConfig>
      break;
 800616a:	e003      	b.n	8006174 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800616c:	2301      	movs	r3, #1
 800616e:	73fb      	strb	r3, [r7, #15]
      break;
 8006170:	e000      	b.n	8006174 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006172:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	2201      	movs	r2, #1
 8006178:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	2200      	movs	r2, #0
 8006180:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006184:	7bfb      	ldrb	r3, [r7, #15]
}
 8006186:	4618      	mov	r0, r3
 8006188:	3710      	adds	r7, #16
 800618a:	46bd      	mov	sp, r7
 800618c:	bd80      	pop	{r7, pc}

0800618e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800618e:	b480      	push	{r7}
 8006190:	b083      	sub	sp, #12
 8006192:	af00      	add	r7, sp, #0
 8006194:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006196:	bf00      	nop
 8006198:	370c      	adds	r7, #12
 800619a:	46bd      	mov	sp, r7
 800619c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a0:	4770      	bx	lr

080061a2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80061a2:	b480      	push	{r7}
 80061a4:	b083      	sub	sp, #12
 80061a6:	af00      	add	r7, sp, #0
 80061a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80061aa:	bf00      	nop
 80061ac:	370c      	adds	r7, #12
 80061ae:	46bd      	mov	sp, r7
 80061b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b4:	4770      	bx	lr

080061b6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80061b6:	b480      	push	{r7}
 80061b8:	b083      	sub	sp, #12
 80061ba:	af00      	add	r7, sp, #0
 80061bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80061be:	bf00      	nop
 80061c0:	370c      	adds	r7, #12
 80061c2:	46bd      	mov	sp, r7
 80061c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c8:	4770      	bx	lr

080061ca <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80061ca:	b480      	push	{r7}
 80061cc:	b083      	sub	sp, #12
 80061ce:	af00      	add	r7, sp, #0
 80061d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80061d2:	bf00      	nop
 80061d4:	370c      	adds	r7, #12
 80061d6:	46bd      	mov	sp, r7
 80061d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061dc:	4770      	bx	lr
	...

080061e0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80061e0:	b480      	push	{r7}
 80061e2:	b085      	sub	sp, #20
 80061e4:	af00      	add	r7, sp, #0
 80061e6:	6078      	str	r0, [r7, #4]
 80061e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	4a40      	ldr	r2, [pc, #256]	; (80062f4 <TIM_Base_SetConfig+0x114>)
 80061f4:	4293      	cmp	r3, r2
 80061f6:	d013      	beq.n	8006220 <TIM_Base_SetConfig+0x40>
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80061fe:	d00f      	beq.n	8006220 <TIM_Base_SetConfig+0x40>
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	4a3d      	ldr	r2, [pc, #244]	; (80062f8 <TIM_Base_SetConfig+0x118>)
 8006204:	4293      	cmp	r3, r2
 8006206:	d00b      	beq.n	8006220 <TIM_Base_SetConfig+0x40>
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	4a3c      	ldr	r2, [pc, #240]	; (80062fc <TIM_Base_SetConfig+0x11c>)
 800620c:	4293      	cmp	r3, r2
 800620e:	d007      	beq.n	8006220 <TIM_Base_SetConfig+0x40>
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	4a3b      	ldr	r2, [pc, #236]	; (8006300 <TIM_Base_SetConfig+0x120>)
 8006214:	4293      	cmp	r3, r2
 8006216:	d003      	beq.n	8006220 <TIM_Base_SetConfig+0x40>
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	4a3a      	ldr	r2, [pc, #232]	; (8006304 <TIM_Base_SetConfig+0x124>)
 800621c:	4293      	cmp	r3, r2
 800621e:	d108      	bne.n	8006232 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006226:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006228:	683b      	ldr	r3, [r7, #0]
 800622a:	685b      	ldr	r3, [r3, #4]
 800622c:	68fa      	ldr	r2, [r7, #12]
 800622e:	4313      	orrs	r3, r2
 8006230:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	4a2f      	ldr	r2, [pc, #188]	; (80062f4 <TIM_Base_SetConfig+0x114>)
 8006236:	4293      	cmp	r3, r2
 8006238:	d02b      	beq.n	8006292 <TIM_Base_SetConfig+0xb2>
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006240:	d027      	beq.n	8006292 <TIM_Base_SetConfig+0xb2>
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	4a2c      	ldr	r2, [pc, #176]	; (80062f8 <TIM_Base_SetConfig+0x118>)
 8006246:	4293      	cmp	r3, r2
 8006248:	d023      	beq.n	8006292 <TIM_Base_SetConfig+0xb2>
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	4a2b      	ldr	r2, [pc, #172]	; (80062fc <TIM_Base_SetConfig+0x11c>)
 800624e:	4293      	cmp	r3, r2
 8006250:	d01f      	beq.n	8006292 <TIM_Base_SetConfig+0xb2>
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	4a2a      	ldr	r2, [pc, #168]	; (8006300 <TIM_Base_SetConfig+0x120>)
 8006256:	4293      	cmp	r3, r2
 8006258:	d01b      	beq.n	8006292 <TIM_Base_SetConfig+0xb2>
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	4a29      	ldr	r2, [pc, #164]	; (8006304 <TIM_Base_SetConfig+0x124>)
 800625e:	4293      	cmp	r3, r2
 8006260:	d017      	beq.n	8006292 <TIM_Base_SetConfig+0xb2>
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	4a28      	ldr	r2, [pc, #160]	; (8006308 <TIM_Base_SetConfig+0x128>)
 8006266:	4293      	cmp	r3, r2
 8006268:	d013      	beq.n	8006292 <TIM_Base_SetConfig+0xb2>
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	4a27      	ldr	r2, [pc, #156]	; (800630c <TIM_Base_SetConfig+0x12c>)
 800626e:	4293      	cmp	r3, r2
 8006270:	d00f      	beq.n	8006292 <TIM_Base_SetConfig+0xb2>
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	4a26      	ldr	r2, [pc, #152]	; (8006310 <TIM_Base_SetConfig+0x130>)
 8006276:	4293      	cmp	r3, r2
 8006278:	d00b      	beq.n	8006292 <TIM_Base_SetConfig+0xb2>
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	4a25      	ldr	r2, [pc, #148]	; (8006314 <TIM_Base_SetConfig+0x134>)
 800627e:	4293      	cmp	r3, r2
 8006280:	d007      	beq.n	8006292 <TIM_Base_SetConfig+0xb2>
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	4a24      	ldr	r2, [pc, #144]	; (8006318 <TIM_Base_SetConfig+0x138>)
 8006286:	4293      	cmp	r3, r2
 8006288:	d003      	beq.n	8006292 <TIM_Base_SetConfig+0xb2>
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	4a23      	ldr	r2, [pc, #140]	; (800631c <TIM_Base_SetConfig+0x13c>)
 800628e:	4293      	cmp	r3, r2
 8006290:	d108      	bne.n	80062a4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006298:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800629a:	683b      	ldr	r3, [r7, #0]
 800629c:	68db      	ldr	r3, [r3, #12]
 800629e:	68fa      	ldr	r2, [r7, #12]
 80062a0:	4313      	orrs	r3, r2
 80062a2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80062aa:	683b      	ldr	r3, [r7, #0]
 80062ac:	695b      	ldr	r3, [r3, #20]
 80062ae:	4313      	orrs	r3, r2
 80062b0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	68fa      	ldr	r2, [r7, #12]
 80062b6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80062b8:	683b      	ldr	r3, [r7, #0]
 80062ba:	689a      	ldr	r2, [r3, #8]
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80062c0:	683b      	ldr	r3, [r7, #0]
 80062c2:	681a      	ldr	r2, [r3, #0]
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	4a0a      	ldr	r2, [pc, #40]	; (80062f4 <TIM_Base_SetConfig+0x114>)
 80062cc:	4293      	cmp	r3, r2
 80062ce:	d003      	beq.n	80062d8 <TIM_Base_SetConfig+0xf8>
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	4a0c      	ldr	r2, [pc, #48]	; (8006304 <TIM_Base_SetConfig+0x124>)
 80062d4:	4293      	cmp	r3, r2
 80062d6:	d103      	bne.n	80062e0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80062d8:	683b      	ldr	r3, [r7, #0]
 80062da:	691a      	ldr	r2, [r3, #16]
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	2201      	movs	r2, #1
 80062e4:	615a      	str	r2, [r3, #20]
}
 80062e6:	bf00      	nop
 80062e8:	3714      	adds	r7, #20
 80062ea:	46bd      	mov	sp, r7
 80062ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f0:	4770      	bx	lr
 80062f2:	bf00      	nop
 80062f4:	40010000 	.word	0x40010000
 80062f8:	40000400 	.word	0x40000400
 80062fc:	40000800 	.word	0x40000800
 8006300:	40000c00 	.word	0x40000c00
 8006304:	40010400 	.word	0x40010400
 8006308:	40014000 	.word	0x40014000
 800630c:	40014400 	.word	0x40014400
 8006310:	40014800 	.word	0x40014800
 8006314:	40001800 	.word	0x40001800
 8006318:	40001c00 	.word	0x40001c00
 800631c:	40002000 	.word	0x40002000

08006320 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006320:	b480      	push	{r7}
 8006322:	b087      	sub	sp, #28
 8006324:	af00      	add	r7, sp, #0
 8006326:	60f8      	str	r0, [r7, #12]
 8006328:	60b9      	str	r1, [r7, #8]
 800632a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	6a1b      	ldr	r3, [r3, #32]
 8006330:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	6a1b      	ldr	r3, [r3, #32]
 8006336:	f023 0201 	bic.w	r2, r3, #1
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	699b      	ldr	r3, [r3, #24]
 8006342:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006344:	693b      	ldr	r3, [r7, #16]
 8006346:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800634a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	011b      	lsls	r3, r3, #4
 8006350:	693a      	ldr	r2, [r7, #16]
 8006352:	4313      	orrs	r3, r2
 8006354:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006356:	697b      	ldr	r3, [r7, #20]
 8006358:	f023 030a 	bic.w	r3, r3, #10
 800635c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800635e:	697a      	ldr	r2, [r7, #20]
 8006360:	68bb      	ldr	r3, [r7, #8]
 8006362:	4313      	orrs	r3, r2
 8006364:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	693a      	ldr	r2, [r7, #16]
 800636a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	697a      	ldr	r2, [r7, #20]
 8006370:	621a      	str	r2, [r3, #32]
}
 8006372:	bf00      	nop
 8006374:	371c      	adds	r7, #28
 8006376:	46bd      	mov	sp, r7
 8006378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800637c:	4770      	bx	lr

0800637e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800637e:	b480      	push	{r7}
 8006380:	b087      	sub	sp, #28
 8006382:	af00      	add	r7, sp, #0
 8006384:	60f8      	str	r0, [r7, #12]
 8006386:	60b9      	str	r1, [r7, #8]
 8006388:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	6a1b      	ldr	r3, [r3, #32]
 800638e:	f023 0210 	bic.w	r2, r3, #16
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	699b      	ldr	r3, [r3, #24]
 800639a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	6a1b      	ldr	r3, [r3, #32]
 80063a0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80063a2:	697b      	ldr	r3, [r7, #20]
 80063a4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80063a8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	031b      	lsls	r3, r3, #12
 80063ae:	697a      	ldr	r2, [r7, #20]
 80063b0:	4313      	orrs	r3, r2
 80063b2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80063b4:	693b      	ldr	r3, [r7, #16]
 80063b6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80063ba:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80063bc:	68bb      	ldr	r3, [r7, #8]
 80063be:	011b      	lsls	r3, r3, #4
 80063c0:	693a      	ldr	r2, [r7, #16]
 80063c2:	4313      	orrs	r3, r2
 80063c4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	697a      	ldr	r2, [r7, #20]
 80063ca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	693a      	ldr	r2, [r7, #16]
 80063d0:	621a      	str	r2, [r3, #32]
}
 80063d2:	bf00      	nop
 80063d4:	371c      	adds	r7, #28
 80063d6:	46bd      	mov	sp, r7
 80063d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063dc:	4770      	bx	lr

080063de <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80063de:	b480      	push	{r7}
 80063e0:	b085      	sub	sp, #20
 80063e2:	af00      	add	r7, sp, #0
 80063e4:	6078      	str	r0, [r7, #4]
 80063e6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	689b      	ldr	r3, [r3, #8]
 80063ec:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80063f4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80063f6:	683a      	ldr	r2, [r7, #0]
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	4313      	orrs	r3, r2
 80063fc:	f043 0307 	orr.w	r3, r3, #7
 8006400:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	68fa      	ldr	r2, [r7, #12]
 8006406:	609a      	str	r2, [r3, #8]
}
 8006408:	bf00      	nop
 800640a:	3714      	adds	r7, #20
 800640c:	46bd      	mov	sp, r7
 800640e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006412:	4770      	bx	lr

08006414 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006414:	b480      	push	{r7}
 8006416:	b087      	sub	sp, #28
 8006418:	af00      	add	r7, sp, #0
 800641a:	60f8      	str	r0, [r7, #12]
 800641c:	60b9      	str	r1, [r7, #8]
 800641e:	607a      	str	r2, [r7, #4]
 8006420:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	689b      	ldr	r3, [r3, #8]
 8006426:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006428:	697b      	ldr	r3, [r7, #20]
 800642a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800642e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006430:	683b      	ldr	r3, [r7, #0]
 8006432:	021a      	lsls	r2, r3, #8
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	431a      	orrs	r2, r3
 8006438:	68bb      	ldr	r3, [r7, #8]
 800643a:	4313      	orrs	r3, r2
 800643c:	697a      	ldr	r2, [r7, #20]
 800643e:	4313      	orrs	r3, r2
 8006440:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	697a      	ldr	r2, [r7, #20]
 8006446:	609a      	str	r2, [r3, #8]
}
 8006448:	bf00      	nop
 800644a:	371c      	adds	r7, #28
 800644c:	46bd      	mov	sp, r7
 800644e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006452:	4770      	bx	lr

08006454 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006454:	b480      	push	{r7}
 8006456:	b085      	sub	sp, #20
 8006458:	af00      	add	r7, sp, #0
 800645a:	6078      	str	r0, [r7, #4]
 800645c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006464:	2b01      	cmp	r3, #1
 8006466:	d101      	bne.n	800646c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006468:	2302      	movs	r3, #2
 800646a:	e05a      	b.n	8006522 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	2201      	movs	r2, #1
 8006470:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	2202      	movs	r2, #2
 8006478:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	685b      	ldr	r3, [r3, #4]
 8006482:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	689b      	ldr	r3, [r3, #8]
 800648a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006492:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006494:	683b      	ldr	r3, [r7, #0]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	68fa      	ldr	r2, [r7, #12]
 800649a:	4313      	orrs	r3, r2
 800649c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	68fa      	ldr	r2, [r7, #12]
 80064a4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	4a21      	ldr	r2, [pc, #132]	; (8006530 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80064ac:	4293      	cmp	r3, r2
 80064ae:	d022      	beq.n	80064f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80064b8:	d01d      	beq.n	80064f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	4a1d      	ldr	r2, [pc, #116]	; (8006534 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80064c0:	4293      	cmp	r3, r2
 80064c2:	d018      	beq.n	80064f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	4a1b      	ldr	r2, [pc, #108]	; (8006538 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80064ca:	4293      	cmp	r3, r2
 80064cc:	d013      	beq.n	80064f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	4a1a      	ldr	r2, [pc, #104]	; (800653c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80064d4:	4293      	cmp	r3, r2
 80064d6:	d00e      	beq.n	80064f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	4a18      	ldr	r2, [pc, #96]	; (8006540 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80064de:	4293      	cmp	r3, r2
 80064e0:	d009      	beq.n	80064f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	4a17      	ldr	r2, [pc, #92]	; (8006544 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80064e8:	4293      	cmp	r3, r2
 80064ea:	d004      	beq.n	80064f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	4a15      	ldr	r2, [pc, #84]	; (8006548 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80064f2:	4293      	cmp	r3, r2
 80064f4:	d10c      	bne.n	8006510 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80064f6:	68bb      	ldr	r3, [r7, #8]
 80064f8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80064fc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80064fe:	683b      	ldr	r3, [r7, #0]
 8006500:	685b      	ldr	r3, [r3, #4]
 8006502:	68ba      	ldr	r2, [r7, #8]
 8006504:	4313      	orrs	r3, r2
 8006506:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	68ba      	ldr	r2, [r7, #8]
 800650e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	2201      	movs	r2, #1
 8006514:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	2200      	movs	r2, #0
 800651c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006520:	2300      	movs	r3, #0
}
 8006522:	4618      	mov	r0, r3
 8006524:	3714      	adds	r7, #20
 8006526:	46bd      	mov	sp, r7
 8006528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800652c:	4770      	bx	lr
 800652e:	bf00      	nop
 8006530:	40010000 	.word	0x40010000
 8006534:	40000400 	.word	0x40000400
 8006538:	40000800 	.word	0x40000800
 800653c:	40000c00 	.word	0x40000c00
 8006540:	40010400 	.word	0x40010400
 8006544:	40014000 	.word	0x40014000
 8006548:	40001800 	.word	0x40001800

0800654c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800654c:	b480      	push	{r7}
 800654e:	b083      	sub	sp, #12
 8006550:	af00      	add	r7, sp, #0
 8006552:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006554:	bf00      	nop
 8006556:	370c      	adds	r7, #12
 8006558:	46bd      	mov	sp, r7
 800655a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800655e:	4770      	bx	lr

08006560 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006560:	b480      	push	{r7}
 8006562:	b083      	sub	sp, #12
 8006564:	af00      	add	r7, sp, #0
 8006566:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006568:	bf00      	nop
 800656a:	370c      	adds	r7, #12
 800656c:	46bd      	mov	sp, r7
 800656e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006572:	4770      	bx	lr

08006574 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006574:	b580      	push	{r7, lr}
 8006576:	b082      	sub	sp, #8
 8006578:	af00      	add	r7, sp, #0
 800657a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	2b00      	cmp	r3, #0
 8006580:	d101      	bne.n	8006586 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006582:	2301      	movs	r3, #1
 8006584:	e03f      	b.n	8006606 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800658c:	b2db      	uxtb	r3, r3
 800658e:	2b00      	cmp	r3, #0
 8006590:	d106      	bne.n	80065a0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	2200      	movs	r2, #0
 8006596:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800659a:	6878      	ldr	r0, [r7, #4]
 800659c:	f7fb fdc4 	bl	8002128 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	2224      	movs	r2, #36	; 0x24
 80065a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	68da      	ldr	r2, [r3, #12]
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80065b6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80065b8:	6878      	ldr	r0, [r7, #4]
 80065ba:	f001 f801 	bl	80075c0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	691a      	ldr	r2, [r3, #16]
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80065cc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	695a      	ldr	r2, [r3, #20]
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80065dc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	68da      	ldr	r2, [r3, #12]
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80065ec:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	2200      	movs	r2, #0
 80065f2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	2220      	movs	r2, #32
 80065f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	2220      	movs	r2, #32
 8006600:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006604:	2300      	movs	r3, #0
}
 8006606:	4618      	mov	r0, r3
 8006608:	3708      	adds	r7, #8
 800660a:	46bd      	mov	sp, r7
 800660c:	bd80      	pop	{r7, pc}

0800660e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800660e:	b580      	push	{r7, lr}
 8006610:	b08a      	sub	sp, #40	; 0x28
 8006612:	af02      	add	r7, sp, #8
 8006614:	60f8      	str	r0, [r7, #12]
 8006616:	60b9      	str	r1, [r7, #8]
 8006618:	603b      	str	r3, [r7, #0]
 800661a:	4613      	mov	r3, r2
 800661c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800661e:	2300      	movs	r3, #0
 8006620:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006628:	b2db      	uxtb	r3, r3
 800662a:	2b20      	cmp	r3, #32
 800662c:	d17c      	bne.n	8006728 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800662e:	68bb      	ldr	r3, [r7, #8]
 8006630:	2b00      	cmp	r3, #0
 8006632:	d002      	beq.n	800663a <HAL_UART_Transmit+0x2c>
 8006634:	88fb      	ldrh	r3, [r7, #6]
 8006636:	2b00      	cmp	r3, #0
 8006638:	d101      	bne.n	800663e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800663a:	2301      	movs	r3, #1
 800663c:	e075      	b.n	800672a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006644:	2b01      	cmp	r3, #1
 8006646:	d101      	bne.n	800664c <HAL_UART_Transmit+0x3e>
 8006648:	2302      	movs	r3, #2
 800664a:	e06e      	b.n	800672a <HAL_UART_Transmit+0x11c>
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	2201      	movs	r2, #1
 8006650:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	2200      	movs	r2, #0
 8006658:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	2221      	movs	r2, #33	; 0x21
 800665e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006662:	f7fb ff67 	bl	8002534 <HAL_GetTick>
 8006666:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	88fa      	ldrh	r2, [r7, #6]
 800666c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	88fa      	ldrh	r2, [r7, #6]
 8006672:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	689b      	ldr	r3, [r3, #8]
 8006678:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800667c:	d108      	bne.n	8006690 <HAL_UART_Transmit+0x82>
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	691b      	ldr	r3, [r3, #16]
 8006682:	2b00      	cmp	r3, #0
 8006684:	d104      	bne.n	8006690 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8006686:	2300      	movs	r3, #0
 8006688:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800668a:	68bb      	ldr	r3, [r7, #8]
 800668c:	61bb      	str	r3, [r7, #24]
 800668e:	e003      	b.n	8006698 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8006690:	68bb      	ldr	r3, [r7, #8]
 8006692:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006694:	2300      	movs	r3, #0
 8006696:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	2200      	movs	r2, #0
 800669c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80066a0:	e02a      	b.n	80066f8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80066a2:	683b      	ldr	r3, [r7, #0]
 80066a4:	9300      	str	r3, [sp, #0]
 80066a6:	697b      	ldr	r3, [r7, #20]
 80066a8:	2200      	movs	r2, #0
 80066aa:	2180      	movs	r1, #128	; 0x80
 80066ac:	68f8      	ldr	r0, [r7, #12]
 80066ae:	f000 fcb9 	bl	8007024 <UART_WaitOnFlagUntilTimeout>
 80066b2:	4603      	mov	r3, r0
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d001      	beq.n	80066bc <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80066b8:	2303      	movs	r3, #3
 80066ba:	e036      	b.n	800672a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80066bc:	69fb      	ldr	r3, [r7, #28]
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d10b      	bne.n	80066da <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80066c2:	69bb      	ldr	r3, [r7, #24]
 80066c4:	881b      	ldrh	r3, [r3, #0]
 80066c6:	461a      	mov	r2, r3
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80066d0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80066d2:	69bb      	ldr	r3, [r7, #24]
 80066d4:	3302      	adds	r3, #2
 80066d6:	61bb      	str	r3, [r7, #24]
 80066d8:	e007      	b.n	80066ea <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80066da:	69fb      	ldr	r3, [r7, #28]
 80066dc:	781a      	ldrb	r2, [r3, #0]
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80066e4:	69fb      	ldr	r3, [r7, #28]
 80066e6:	3301      	adds	r3, #1
 80066e8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80066ee:	b29b      	uxth	r3, r3
 80066f0:	3b01      	subs	r3, #1
 80066f2:	b29a      	uxth	r2, r3
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80066fc:	b29b      	uxth	r3, r3
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d1cf      	bne.n	80066a2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006702:	683b      	ldr	r3, [r7, #0]
 8006704:	9300      	str	r3, [sp, #0]
 8006706:	697b      	ldr	r3, [r7, #20]
 8006708:	2200      	movs	r2, #0
 800670a:	2140      	movs	r1, #64	; 0x40
 800670c:	68f8      	ldr	r0, [r7, #12]
 800670e:	f000 fc89 	bl	8007024 <UART_WaitOnFlagUntilTimeout>
 8006712:	4603      	mov	r3, r0
 8006714:	2b00      	cmp	r3, #0
 8006716:	d001      	beq.n	800671c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8006718:	2303      	movs	r3, #3
 800671a:	e006      	b.n	800672a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	2220      	movs	r2, #32
 8006720:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8006724:	2300      	movs	r3, #0
 8006726:	e000      	b.n	800672a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8006728:	2302      	movs	r3, #2
  }
}
 800672a:	4618      	mov	r0, r3
 800672c:	3720      	adds	r7, #32
 800672e:	46bd      	mov	sp, r7
 8006730:	bd80      	pop	{r7, pc}

08006732 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006732:	b580      	push	{r7, lr}
 8006734:	b08a      	sub	sp, #40	; 0x28
 8006736:	af02      	add	r7, sp, #8
 8006738:	60f8      	str	r0, [r7, #12]
 800673a:	60b9      	str	r1, [r7, #8]
 800673c:	603b      	str	r3, [r7, #0]
 800673e:	4613      	mov	r3, r2
 8006740:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006742:	2300      	movs	r3, #0
 8006744:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800674c:	b2db      	uxtb	r3, r3
 800674e:	2b20      	cmp	r3, #32
 8006750:	f040 808c 	bne.w	800686c <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006754:	68bb      	ldr	r3, [r7, #8]
 8006756:	2b00      	cmp	r3, #0
 8006758:	d002      	beq.n	8006760 <HAL_UART_Receive+0x2e>
 800675a:	88fb      	ldrh	r3, [r7, #6]
 800675c:	2b00      	cmp	r3, #0
 800675e:	d101      	bne.n	8006764 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8006760:	2301      	movs	r3, #1
 8006762:	e084      	b.n	800686e <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800676a:	2b01      	cmp	r3, #1
 800676c:	d101      	bne.n	8006772 <HAL_UART_Receive+0x40>
 800676e:	2302      	movs	r3, #2
 8006770:	e07d      	b.n	800686e <HAL_UART_Receive+0x13c>
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	2201      	movs	r2, #1
 8006776:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	2200      	movs	r2, #0
 800677e:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	2222      	movs	r2, #34	; 0x22
 8006784:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	2200      	movs	r2, #0
 800678c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800678e:	f7fb fed1 	bl	8002534 <HAL_GetTick>
 8006792:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	88fa      	ldrh	r2, [r7, #6]
 8006798:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	88fa      	ldrh	r2, [r7, #6]
 800679e:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	689b      	ldr	r3, [r3, #8]
 80067a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80067a8:	d108      	bne.n	80067bc <HAL_UART_Receive+0x8a>
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	691b      	ldr	r3, [r3, #16]
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d104      	bne.n	80067bc <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 80067b2:	2300      	movs	r3, #0
 80067b4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80067b6:	68bb      	ldr	r3, [r7, #8]
 80067b8:	61bb      	str	r3, [r7, #24]
 80067ba:	e003      	b.n	80067c4 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 80067bc:	68bb      	ldr	r3, [r7, #8]
 80067be:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80067c0:	2300      	movs	r3, #0
 80067c2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	2200      	movs	r2, #0
 80067c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80067cc:	e043      	b.n	8006856 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80067ce:	683b      	ldr	r3, [r7, #0]
 80067d0:	9300      	str	r3, [sp, #0]
 80067d2:	697b      	ldr	r3, [r7, #20]
 80067d4:	2200      	movs	r2, #0
 80067d6:	2120      	movs	r1, #32
 80067d8:	68f8      	ldr	r0, [r7, #12]
 80067da:	f000 fc23 	bl	8007024 <UART_WaitOnFlagUntilTimeout>
 80067de:	4603      	mov	r3, r0
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d001      	beq.n	80067e8 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 80067e4:	2303      	movs	r3, #3
 80067e6:	e042      	b.n	800686e <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 80067e8:	69fb      	ldr	r3, [r7, #28]
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d10c      	bne.n	8006808 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	685b      	ldr	r3, [r3, #4]
 80067f4:	b29b      	uxth	r3, r3
 80067f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80067fa:	b29a      	uxth	r2, r3
 80067fc:	69bb      	ldr	r3, [r7, #24]
 80067fe:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8006800:	69bb      	ldr	r3, [r7, #24]
 8006802:	3302      	adds	r3, #2
 8006804:	61bb      	str	r3, [r7, #24]
 8006806:	e01f      	b.n	8006848 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	689b      	ldr	r3, [r3, #8]
 800680c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006810:	d007      	beq.n	8006822 <HAL_UART_Receive+0xf0>
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	689b      	ldr	r3, [r3, #8]
 8006816:	2b00      	cmp	r3, #0
 8006818:	d10a      	bne.n	8006830 <HAL_UART_Receive+0xfe>
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	691b      	ldr	r3, [r3, #16]
 800681e:	2b00      	cmp	r3, #0
 8006820:	d106      	bne.n	8006830 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	685b      	ldr	r3, [r3, #4]
 8006828:	b2da      	uxtb	r2, r3
 800682a:	69fb      	ldr	r3, [r7, #28]
 800682c:	701a      	strb	r2, [r3, #0]
 800682e:	e008      	b.n	8006842 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	685b      	ldr	r3, [r3, #4]
 8006836:	b2db      	uxtb	r3, r3
 8006838:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800683c:	b2da      	uxtb	r2, r3
 800683e:	69fb      	ldr	r3, [r7, #28]
 8006840:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8006842:	69fb      	ldr	r3, [r7, #28]
 8006844:	3301      	adds	r3, #1
 8006846:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800684c:	b29b      	uxth	r3, r3
 800684e:	3b01      	subs	r3, #1
 8006850:	b29a      	uxth	r2, r3
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800685a:	b29b      	uxth	r3, r3
 800685c:	2b00      	cmp	r3, #0
 800685e:	d1b6      	bne.n	80067ce <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	2220      	movs	r2, #32
 8006864:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8006868:	2300      	movs	r3, #0
 800686a:	e000      	b.n	800686e <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 800686c:	2302      	movs	r3, #2
  }
}
 800686e:	4618      	mov	r0, r3
 8006870:	3720      	adds	r7, #32
 8006872:	46bd      	mov	sp, r7
 8006874:	bd80      	pop	{r7, pc}

08006876 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006876:	b580      	push	{r7, lr}
 8006878:	b084      	sub	sp, #16
 800687a:	af00      	add	r7, sp, #0
 800687c:	60f8      	str	r0, [r7, #12]
 800687e:	60b9      	str	r1, [r7, #8]
 8006880:	4613      	mov	r3, r2
 8006882:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800688a:	b2db      	uxtb	r3, r3
 800688c:	2b20      	cmp	r3, #32
 800688e:	d11d      	bne.n	80068cc <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8006890:	68bb      	ldr	r3, [r7, #8]
 8006892:	2b00      	cmp	r3, #0
 8006894:	d002      	beq.n	800689c <HAL_UART_Receive_DMA+0x26>
 8006896:	88fb      	ldrh	r3, [r7, #6]
 8006898:	2b00      	cmp	r3, #0
 800689a:	d101      	bne.n	80068a0 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800689c:	2301      	movs	r3, #1
 800689e:	e016      	b.n	80068ce <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80068a6:	2b01      	cmp	r3, #1
 80068a8:	d101      	bne.n	80068ae <HAL_UART_Receive_DMA+0x38>
 80068aa:	2302      	movs	r3, #2
 80068ac:	e00f      	b.n	80068ce <HAL_UART_Receive_DMA+0x58>
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	2201      	movs	r2, #1
 80068b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	2200      	movs	r2, #0
 80068ba:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80068bc:	88fb      	ldrh	r3, [r7, #6]
 80068be:	461a      	mov	r2, r3
 80068c0:	68b9      	ldr	r1, [r7, #8]
 80068c2:	68f8      	ldr	r0, [r7, #12]
 80068c4:	f000 fc1c 	bl	8007100 <UART_Start_Receive_DMA>
 80068c8:	4603      	mov	r3, r0
 80068ca:	e000      	b.n	80068ce <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 80068cc:	2302      	movs	r3, #2
  }
}
 80068ce:	4618      	mov	r0, r3
 80068d0:	3710      	adds	r7, #16
 80068d2:	46bd      	mov	sp, r7
 80068d4:	bd80      	pop	{r7, pc}
	...

080068d8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80068d8:	b580      	push	{r7, lr}
 80068da:	b0ba      	sub	sp, #232	; 0xe8
 80068dc:	af00      	add	r7, sp, #0
 80068de:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	68db      	ldr	r3, [r3, #12]
 80068f0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	695b      	ldr	r3, [r3, #20]
 80068fa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80068fe:	2300      	movs	r3, #0
 8006900:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8006904:	2300      	movs	r3, #0
 8006906:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800690a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800690e:	f003 030f 	and.w	r3, r3, #15
 8006912:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8006916:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800691a:	2b00      	cmp	r3, #0
 800691c:	d10f      	bne.n	800693e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800691e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006922:	f003 0320 	and.w	r3, r3, #32
 8006926:	2b00      	cmp	r3, #0
 8006928:	d009      	beq.n	800693e <HAL_UART_IRQHandler+0x66>
 800692a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800692e:	f003 0320 	and.w	r3, r3, #32
 8006932:	2b00      	cmp	r3, #0
 8006934:	d003      	beq.n	800693e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8006936:	6878      	ldr	r0, [r7, #4]
 8006938:	f000 fd87 	bl	800744a <UART_Receive_IT>
      return;
 800693c:	e256      	b.n	8006dec <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800693e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006942:	2b00      	cmp	r3, #0
 8006944:	f000 80de 	beq.w	8006b04 <HAL_UART_IRQHandler+0x22c>
 8006948:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800694c:	f003 0301 	and.w	r3, r3, #1
 8006950:	2b00      	cmp	r3, #0
 8006952:	d106      	bne.n	8006962 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006954:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006958:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800695c:	2b00      	cmp	r3, #0
 800695e:	f000 80d1 	beq.w	8006b04 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006962:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006966:	f003 0301 	and.w	r3, r3, #1
 800696a:	2b00      	cmp	r3, #0
 800696c:	d00b      	beq.n	8006986 <HAL_UART_IRQHandler+0xae>
 800696e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006972:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006976:	2b00      	cmp	r3, #0
 8006978:	d005      	beq.n	8006986 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800697e:	f043 0201 	orr.w	r2, r3, #1
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006986:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800698a:	f003 0304 	and.w	r3, r3, #4
 800698e:	2b00      	cmp	r3, #0
 8006990:	d00b      	beq.n	80069aa <HAL_UART_IRQHandler+0xd2>
 8006992:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006996:	f003 0301 	and.w	r3, r3, #1
 800699a:	2b00      	cmp	r3, #0
 800699c:	d005      	beq.n	80069aa <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069a2:	f043 0202 	orr.w	r2, r3, #2
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80069aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80069ae:	f003 0302 	and.w	r3, r3, #2
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d00b      	beq.n	80069ce <HAL_UART_IRQHandler+0xf6>
 80069b6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80069ba:	f003 0301 	and.w	r3, r3, #1
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d005      	beq.n	80069ce <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069c6:	f043 0204 	orr.w	r2, r3, #4
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80069ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80069d2:	f003 0308 	and.w	r3, r3, #8
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d011      	beq.n	80069fe <HAL_UART_IRQHandler+0x126>
 80069da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80069de:	f003 0320 	and.w	r3, r3, #32
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d105      	bne.n	80069f2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80069e6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80069ea:	f003 0301 	and.w	r3, r3, #1
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d005      	beq.n	80069fe <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069f6:	f043 0208 	orr.w	r2, r3, #8
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	f000 81ed 	beq.w	8006de2 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006a08:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a0c:	f003 0320 	and.w	r3, r3, #32
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d008      	beq.n	8006a26 <HAL_UART_IRQHandler+0x14e>
 8006a14:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006a18:	f003 0320 	and.w	r3, r3, #32
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d002      	beq.n	8006a26 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006a20:	6878      	ldr	r0, [r7, #4]
 8006a22:	f000 fd12 	bl	800744a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	695b      	ldr	r3, [r3, #20]
 8006a2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a30:	2b40      	cmp	r3, #64	; 0x40
 8006a32:	bf0c      	ite	eq
 8006a34:	2301      	moveq	r3, #1
 8006a36:	2300      	movne	r3, #0
 8006a38:	b2db      	uxtb	r3, r3
 8006a3a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a42:	f003 0308 	and.w	r3, r3, #8
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d103      	bne.n	8006a52 <HAL_UART_IRQHandler+0x17a>
 8006a4a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d04f      	beq.n	8006af2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006a52:	6878      	ldr	r0, [r7, #4]
 8006a54:	f000 fc1a 	bl	800728c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	695b      	ldr	r3, [r3, #20]
 8006a5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a62:	2b40      	cmp	r3, #64	; 0x40
 8006a64:	d141      	bne.n	8006aea <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	3314      	adds	r3, #20
 8006a6c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a70:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006a74:	e853 3f00 	ldrex	r3, [r3]
 8006a78:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006a7c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006a80:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006a84:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	3314      	adds	r3, #20
 8006a8e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006a92:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006a96:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a9a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006a9e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006aa2:	e841 2300 	strex	r3, r2, [r1]
 8006aa6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006aaa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d1d9      	bne.n	8006a66 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d013      	beq.n	8006ae2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006abe:	4a7d      	ldr	r2, [pc, #500]	; (8006cb4 <HAL_UART_IRQHandler+0x3dc>)
 8006ac0:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ac6:	4618      	mov	r0, r3
 8006ac8:	f7fb ffec 	bl	8002aa4 <HAL_DMA_Abort_IT>
 8006acc:	4603      	mov	r3, r0
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d016      	beq.n	8006b00 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ad6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006ad8:	687a      	ldr	r2, [r7, #4]
 8006ada:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006adc:	4610      	mov	r0, r2
 8006ade:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ae0:	e00e      	b.n	8006b00 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006ae2:	6878      	ldr	r0, [r7, #4]
 8006ae4:	f000 f990 	bl	8006e08 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ae8:	e00a      	b.n	8006b00 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006aea:	6878      	ldr	r0, [r7, #4]
 8006aec:	f000 f98c 	bl	8006e08 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006af0:	e006      	b.n	8006b00 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006af2:	6878      	ldr	r0, [r7, #4]
 8006af4:	f000 f988 	bl	8006e08 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	2200      	movs	r2, #0
 8006afc:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8006afe:	e170      	b.n	8006de2 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b00:	bf00      	nop
    return;
 8006b02:	e16e      	b.n	8006de2 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b08:	2b01      	cmp	r3, #1
 8006b0a:	f040 814a 	bne.w	8006da2 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006b0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b12:	f003 0310 	and.w	r3, r3, #16
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	f000 8143 	beq.w	8006da2 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006b1c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006b20:	f003 0310 	and.w	r3, r3, #16
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	f000 813c 	beq.w	8006da2 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006b2a:	2300      	movs	r3, #0
 8006b2c:	60bb      	str	r3, [r7, #8]
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	60bb      	str	r3, [r7, #8]
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	685b      	ldr	r3, [r3, #4]
 8006b3c:	60bb      	str	r3, [r7, #8]
 8006b3e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	695b      	ldr	r3, [r3, #20]
 8006b46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b4a:	2b40      	cmp	r3, #64	; 0x40
 8006b4c:	f040 80b4 	bne.w	8006cb8 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	685b      	ldr	r3, [r3, #4]
 8006b58:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006b5c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	f000 8140 	beq.w	8006de6 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006b6a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006b6e:	429a      	cmp	r2, r3
 8006b70:	f080 8139 	bcs.w	8006de6 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006b7a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b80:	69db      	ldr	r3, [r3, #28]
 8006b82:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006b86:	f000 8088 	beq.w	8006c9a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	330c      	adds	r3, #12
 8006b90:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b94:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006b98:	e853 3f00 	ldrex	r3, [r3]
 8006b9c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006ba0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006ba4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006ba8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	330c      	adds	r3, #12
 8006bb2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8006bb6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006bba:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bbe:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006bc2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006bc6:	e841 2300 	strex	r3, r2, [r1]
 8006bca:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006bce:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d1d9      	bne.n	8006b8a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	3314      	adds	r3, #20
 8006bdc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bde:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006be0:	e853 3f00 	ldrex	r3, [r3]
 8006be4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006be6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006be8:	f023 0301 	bic.w	r3, r3, #1
 8006bec:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	3314      	adds	r3, #20
 8006bf6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006bfa:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006bfe:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c00:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006c02:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006c06:	e841 2300 	strex	r3, r2, [r1]
 8006c0a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006c0c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d1e1      	bne.n	8006bd6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	3314      	adds	r3, #20
 8006c18:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c1a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006c1c:	e853 3f00 	ldrex	r3, [r3]
 8006c20:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006c22:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006c24:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006c28:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	3314      	adds	r3, #20
 8006c32:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006c36:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006c38:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c3a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006c3c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006c3e:	e841 2300 	strex	r3, r2, [r1]
 8006c42:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006c44:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d1e3      	bne.n	8006c12 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	2220      	movs	r2, #32
 8006c4e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	2200      	movs	r2, #0
 8006c56:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	330c      	adds	r3, #12
 8006c5e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c60:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006c62:	e853 3f00 	ldrex	r3, [r3]
 8006c66:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006c68:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006c6a:	f023 0310 	bic.w	r3, r3, #16
 8006c6e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	330c      	adds	r3, #12
 8006c78:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8006c7c:	65ba      	str	r2, [r7, #88]	; 0x58
 8006c7e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c80:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006c82:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006c84:	e841 2300 	strex	r3, r2, [r1]
 8006c88:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006c8a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d1e3      	bne.n	8006c58 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c94:	4618      	mov	r0, r3
 8006c96:	f7fb fe95 	bl	80029c4 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006ca2:	b29b      	uxth	r3, r3
 8006ca4:	1ad3      	subs	r3, r2, r3
 8006ca6:	b29b      	uxth	r3, r3
 8006ca8:	4619      	mov	r1, r3
 8006caa:	6878      	ldr	r0, [r7, #4]
 8006cac:	f000 f8b6 	bl	8006e1c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006cb0:	e099      	b.n	8006de6 <HAL_UART_IRQHandler+0x50e>
 8006cb2:	bf00      	nop
 8006cb4:	08007353 	.word	0x08007353
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006cc0:	b29b      	uxth	r3, r3
 8006cc2:	1ad3      	subs	r3, r2, r3
 8006cc4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006ccc:	b29b      	uxth	r3, r3
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	f000 808b 	beq.w	8006dea <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8006cd4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	f000 8086 	beq.w	8006dea <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	330c      	adds	r3, #12
 8006ce4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ce6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ce8:	e853 3f00 	ldrex	r3, [r3]
 8006cec:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006cee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006cf0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006cf4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	330c      	adds	r3, #12
 8006cfe:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8006d02:	647a      	str	r2, [r7, #68]	; 0x44
 8006d04:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d06:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006d08:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006d0a:	e841 2300 	strex	r3, r2, [r1]
 8006d0e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006d10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d1e3      	bne.n	8006cde <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	3314      	adds	r3, #20
 8006d1c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d20:	e853 3f00 	ldrex	r3, [r3]
 8006d24:	623b      	str	r3, [r7, #32]
   return(result);
 8006d26:	6a3b      	ldr	r3, [r7, #32]
 8006d28:	f023 0301 	bic.w	r3, r3, #1
 8006d2c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	3314      	adds	r3, #20
 8006d36:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006d3a:	633a      	str	r2, [r7, #48]	; 0x30
 8006d3c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d3e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006d40:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006d42:	e841 2300 	strex	r3, r2, [r1]
 8006d46:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006d48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d1e3      	bne.n	8006d16 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	2220      	movs	r2, #32
 8006d52:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	2200      	movs	r2, #0
 8006d5a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	330c      	adds	r3, #12
 8006d62:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d64:	693b      	ldr	r3, [r7, #16]
 8006d66:	e853 3f00 	ldrex	r3, [r3]
 8006d6a:	60fb      	str	r3, [r7, #12]
   return(result);
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	f023 0310 	bic.w	r3, r3, #16
 8006d72:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	330c      	adds	r3, #12
 8006d7c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8006d80:	61fa      	str	r2, [r7, #28]
 8006d82:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d84:	69b9      	ldr	r1, [r7, #24]
 8006d86:	69fa      	ldr	r2, [r7, #28]
 8006d88:	e841 2300 	strex	r3, r2, [r1]
 8006d8c:	617b      	str	r3, [r7, #20]
   return(result);
 8006d8e:	697b      	ldr	r3, [r7, #20]
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d1e3      	bne.n	8006d5c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006d94:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006d98:	4619      	mov	r1, r3
 8006d9a:	6878      	ldr	r0, [r7, #4]
 8006d9c:	f000 f83e 	bl	8006e1c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006da0:	e023      	b.n	8006dea <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006da2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006da6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d009      	beq.n	8006dc2 <HAL_UART_IRQHandler+0x4ea>
 8006dae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006db2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d003      	beq.n	8006dc2 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8006dba:	6878      	ldr	r0, [r7, #4]
 8006dbc:	f000 fadd 	bl	800737a <UART_Transmit_IT>
    return;
 8006dc0:	e014      	b.n	8006dec <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006dc2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006dc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d00e      	beq.n	8006dec <HAL_UART_IRQHandler+0x514>
 8006dce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006dd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d008      	beq.n	8006dec <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8006dda:	6878      	ldr	r0, [r7, #4]
 8006ddc:	f000 fb1d 	bl	800741a <UART_EndTransmit_IT>
    return;
 8006de0:	e004      	b.n	8006dec <HAL_UART_IRQHandler+0x514>
    return;
 8006de2:	bf00      	nop
 8006de4:	e002      	b.n	8006dec <HAL_UART_IRQHandler+0x514>
      return;
 8006de6:	bf00      	nop
 8006de8:	e000      	b.n	8006dec <HAL_UART_IRQHandler+0x514>
      return;
 8006dea:	bf00      	nop
  }
}
 8006dec:	37e8      	adds	r7, #232	; 0xe8
 8006dee:	46bd      	mov	sp, r7
 8006df0:	bd80      	pop	{r7, pc}
 8006df2:	bf00      	nop

08006df4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006df4:	b480      	push	{r7}
 8006df6:	b083      	sub	sp, #12
 8006df8:	af00      	add	r7, sp, #0
 8006dfa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006dfc:	bf00      	nop
 8006dfe:	370c      	adds	r7, #12
 8006e00:	46bd      	mov	sp, r7
 8006e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e06:	4770      	bx	lr

08006e08 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006e08:	b480      	push	{r7}
 8006e0a:	b083      	sub	sp, #12
 8006e0c:	af00      	add	r7, sp, #0
 8006e0e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006e10:	bf00      	nop
 8006e12:	370c      	adds	r7, #12
 8006e14:	46bd      	mov	sp, r7
 8006e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e1a:	4770      	bx	lr

08006e1c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006e1c:	b480      	push	{r7}
 8006e1e:	b083      	sub	sp, #12
 8006e20:	af00      	add	r7, sp, #0
 8006e22:	6078      	str	r0, [r7, #4]
 8006e24:	460b      	mov	r3, r1
 8006e26:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006e28:	bf00      	nop
 8006e2a:	370c      	adds	r7, #12
 8006e2c:	46bd      	mov	sp, r7
 8006e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e32:	4770      	bx	lr

08006e34 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006e34:	b580      	push	{r7, lr}
 8006e36:	b09c      	sub	sp, #112	; 0x70
 8006e38:	af00      	add	r7, sp, #0
 8006e3a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e40:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d172      	bne.n	8006f36 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8006e50:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006e52:	2200      	movs	r2, #0
 8006e54:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006e56:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	330c      	adds	r3, #12
 8006e5c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e5e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006e60:	e853 3f00 	ldrex	r3, [r3]
 8006e64:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006e66:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006e68:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006e6c:	66bb      	str	r3, [r7, #104]	; 0x68
 8006e6e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	330c      	adds	r3, #12
 8006e74:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006e76:	65ba      	str	r2, [r7, #88]	; 0x58
 8006e78:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e7a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006e7c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006e7e:	e841 2300 	strex	r3, r2, [r1]
 8006e82:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006e84:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d1e5      	bne.n	8006e56 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e8a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	3314      	adds	r3, #20
 8006e90:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e94:	e853 3f00 	ldrex	r3, [r3]
 8006e98:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006e9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e9c:	f023 0301 	bic.w	r3, r3, #1
 8006ea0:	667b      	str	r3, [r7, #100]	; 0x64
 8006ea2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	3314      	adds	r3, #20
 8006ea8:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8006eaa:	647a      	str	r2, [r7, #68]	; 0x44
 8006eac:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006eae:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006eb0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006eb2:	e841 2300 	strex	r3, r2, [r1]
 8006eb6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006eb8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d1e5      	bne.n	8006e8a <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006ebe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	3314      	adds	r3, #20
 8006ec4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ec8:	e853 3f00 	ldrex	r3, [r3]
 8006ecc:	623b      	str	r3, [r7, #32]
   return(result);
 8006ece:	6a3b      	ldr	r3, [r7, #32]
 8006ed0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006ed4:	663b      	str	r3, [r7, #96]	; 0x60
 8006ed6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	3314      	adds	r3, #20
 8006edc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006ede:	633a      	str	r2, [r7, #48]	; 0x30
 8006ee0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ee2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006ee4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006ee6:	e841 2300 	strex	r3, r2, [r1]
 8006eea:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006eec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d1e5      	bne.n	8006ebe <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006ef2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ef4:	2220      	movs	r2, #32
 8006ef6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006efa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006efc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006efe:	2b01      	cmp	r3, #1
 8006f00:	d119      	bne.n	8006f36 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006f02:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	330c      	adds	r3, #12
 8006f08:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f0a:	693b      	ldr	r3, [r7, #16]
 8006f0c:	e853 3f00 	ldrex	r3, [r3]
 8006f10:	60fb      	str	r3, [r7, #12]
   return(result);
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	f023 0310 	bic.w	r3, r3, #16
 8006f18:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006f1a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	330c      	adds	r3, #12
 8006f20:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006f22:	61fa      	str	r2, [r7, #28]
 8006f24:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f26:	69b9      	ldr	r1, [r7, #24]
 8006f28:	69fa      	ldr	r2, [r7, #28]
 8006f2a:	e841 2300 	strex	r3, r2, [r1]
 8006f2e:	617b      	str	r3, [r7, #20]
   return(result);
 8006f30:	697b      	ldr	r3, [r7, #20]
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d1e5      	bne.n	8006f02 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006f36:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f3a:	2b01      	cmp	r3, #1
 8006f3c:	d106      	bne.n	8006f4c <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006f3e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006f40:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006f42:	4619      	mov	r1, r3
 8006f44:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8006f46:	f7ff ff69 	bl	8006e1c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006f4a:	e002      	b.n	8006f52 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8006f4c:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8006f4e:	f7fa ff0f 	bl	8001d70 <HAL_UART_RxCpltCallback>
}
 8006f52:	bf00      	nop
 8006f54:	3770      	adds	r7, #112	; 0x70
 8006f56:	46bd      	mov	sp, r7
 8006f58:	bd80      	pop	{r7, pc}

08006f5a <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006f5a:	b580      	push	{r7, lr}
 8006f5c:	b084      	sub	sp, #16
 8006f5e:	af00      	add	r7, sp, #0
 8006f60:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f66:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f6c:	2b01      	cmp	r3, #1
 8006f6e:	d108      	bne.n	8006f82 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006f74:	085b      	lsrs	r3, r3, #1
 8006f76:	b29b      	uxth	r3, r3
 8006f78:	4619      	mov	r1, r3
 8006f7a:	68f8      	ldr	r0, [r7, #12]
 8006f7c:	f7ff ff4e 	bl	8006e1c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006f80:	e002      	b.n	8006f88 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8006f82:	68f8      	ldr	r0, [r7, #12]
 8006f84:	f7fa ff1c 	bl	8001dc0 <HAL_UART_RxHalfCpltCallback>
}
 8006f88:	bf00      	nop
 8006f8a:	3710      	adds	r7, #16
 8006f8c:	46bd      	mov	sp, r7
 8006f8e:	bd80      	pop	{r7, pc}

08006f90 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8006f90:	b580      	push	{r7, lr}
 8006f92:	b084      	sub	sp, #16
 8006f94:	af00      	add	r7, sp, #0
 8006f96:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8006f98:	2300      	movs	r3, #0
 8006f9a:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fa0:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8006fa2:	68bb      	ldr	r3, [r7, #8]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	695b      	ldr	r3, [r3, #20]
 8006fa8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006fac:	2b80      	cmp	r3, #128	; 0x80
 8006fae:	bf0c      	ite	eq
 8006fb0:	2301      	moveq	r3, #1
 8006fb2:	2300      	movne	r3, #0
 8006fb4:	b2db      	uxtb	r3, r3
 8006fb6:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8006fb8:	68bb      	ldr	r3, [r7, #8]
 8006fba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006fbe:	b2db      	uxtb	r3, r3
 8006fc0:	2b21      	cmp	r3, #33	; 0x21
 8006fc2:	d108      	bne.n	8006fd6 <UART_DMAError+0x46>
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d005      	beq.n	8006fd6 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8006fca:	68bb      	ldr	r3, [r7, #8]
 8006fcc:	2200      	movs	r2, #0
 8006fce:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8006fd0:	68b8      	ldr	r0, [r7, #8]
 8006fd2:	f000 f933 	bl	800723c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006fd6:	68bb      	ldr	r3, [r7, #8]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	695b      	ldr	r3, [r3, #20]
 8006fdc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006fe0:	2b40      	cmp	r3, #64	; 0x40
 8006fe2:	bf0c      	ite	eq
 8006fe4:	2301      	moveq	r3, #1
 8006fe6:	2300      	movne	r3, #0
 8006fe8:	b2db      	uxtb	r3, r3
 8006fea:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8006fec:	68bb      	ldr	r3, [r7, #8]
 8006fee:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006ff2:	b2db      	uxtb	r3, r3
 8006ff4:	2b22      	cmp	r3, #34	; 0x22
 8006ff6:	d108      	bne.n	800700a <UART_DMAError+0x7a>
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d005      	beq.n	800700a <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8006ffe:	68bb      	ldr	r3, [r7, #8]
 8007000:	2200      	movs	r2, #0
 8007002:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8007004:	68b8      	ldr	r0, [r7, #8]
 8007006:	f000 f941 	bl	800728c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800700a:	68bb      	ldr	r3, [r7, #8]
 800700c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800700e:	f043 0210 	orr.w	r2, r3, #16
 8007012:	68bb      	ldr	r3, [r7, #8]
 8007014:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007016:	68b8      	ldr	r0, [r7, #8]
 8007018:	f7ff fef6 	bl	8006e08 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800701c:	bf00      	nop
 800701e:	3710      	adds	r7, #16
 8007020:	46bd      	mov	sp, r7
 8007022:	bd80      	pop	{r7, pc}

08007024 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8007024:	b580      	push	{r7, lr}
 8007026:	b090      	sub	sp, #64	; 0x40
 8007028:	af00      	add	r7, sp, #0
 800702a:	60f8      	str	r0, [r7, #12]
 800702c:	60b9      	str	r1, [r7, #8]
 800702e:	603b      	str	r3, [r7, #0]
 8007030:	4613      	mov	r3, r2
 8007032:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007034:	e050      	b.n	80070d8 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007036:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007038:	f1b3 3fff 	cmp.w	r3, #4294967295
 800703c:	d04c      	beq.n	80070d8 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800703e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007040:	2b00      	cmp	r3, #0
 8007042:	d007      	beq.n	8007054 <UART_WaitOnFlagUntilTimeout+0x30>
 8007044:	f7fb fa76 	bl	8002534 <HAL_GetTick>
 8007048:	4602      	mov	r2, r0
 800704a:	683b      	ldr	r3, [r7, #0]
 800704c:	1ad3      	subs	r3, r2, r3
 800704e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007050:	429a      	cmp	r2, r3
 8007052:	d241      	bcs.n	80070d8 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	330c      	adds	r3, #12
 800705a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800705c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800705e:	e853 3f00 	ldrex	r3, [r3]
 8007062:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007066:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800706a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	330c      	adds	r3, #12
 8007072:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007074:	637a      	str	r2, [r7, #52]	; 0x34
 8007076:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007078:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800707a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800707c:	e841 2300 	strex	r3, r2, [r1]
 8007080:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007082:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007084:	2b00      	cmp	r3, #0
 8007086:	d1e5      	bne.n	8007054 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	3314      	adds	r3, #20
 800708e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007090:	697b      	ldr	r3, [r7, #20]
 8007092:	e853 3f00 	ldrex	r3, [r3]
 8007096:	613b      	str	r3, [r7, #16]
   return(result);
 8007098:	693b      	ldr	r3, [r7, #16]
 800709a:	f023 0301 	bic.w	r3, r3, #1
 800709e:	63bb      	str	r3, [r7, #56]	; 0x38
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	3314      	adds	r3, #20
 80070a6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80070a8:	623a      	str	r2, [r7, #32]
 80070aa:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070ac:	69f9      	ldr	r1, [r7, #28]
 80070ae:	6a3a      	ldr	r2, [r7, #32]
 80070b0:	e841 2300 	strex	r3, r2, [r1]
 80070b4:	61bb      	str	r3, [r7, #24]
   return(result);
 80070b6:	69bb      	ldr	r3, [r7, #24]
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d1e5      	bne.n	8007088 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	2220      	movs	r2, #32
 80070c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	2220      	movs	r2, #32
 80070c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	2200      	movs	r2, #0
 80070d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80070d4:	2303      	movs	r3, #3
 80070d6:	e00f      	b.n	80070f8 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	681a      	ldr	r2, [r3, #0]
 80070de:	68bb      	ldr	r3, [r7, #8]
 80070e0:	4013      	ands	r3, r2
 80070e2:	68ba      	ldr	r2, [r7, #8]
 80070e4:	429a      	cmp	r2, r3
 80070e6:	bf0c      	ite	eq
 80070e8:	2301      	moveq	r3, #1
 80070ea:	2300      	movne	r3, #0
 80070ec:	b2db      	uxtb	r3, r3
 80070ee:	461a      	mov	r2, r3
 80070f0:	79fb      	ldrb	r3, [r7, #7]
 80070f2:	429a      	cmp	r2, r3
 80070f4:	d09f      	beq.n	8007036 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80070f6:	2300      	movs	r3, #0
}
 80070f8:	4618      	mov	r0, r3
 80070fa:	3740      	adds	r7, #64	; 0x40
 80070fc:	46bd      	mov	sp, r7
 80070fe:	bd80      	pop	{r7, pc}

08007100 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007100:	b580      	push	{r7, lr}
 8007102:	b098      	sub	sp, #96	; 0x60
 8007104:	af00      	add	r7, sp, #0
 8007106:	60f8      	str	r0, [r7, #12]
 8007108:	60b9      	str	r1, [r7, #8]
 800710a:	4613      	mov	r3, r2
 800710c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800710e:	68ba      	ldr	r2, [r7, #8]
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	88fa      	ldrh	r2, [r7, #6]
 8007118:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	2200      	movs	r2, #0
 800711e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	2222      	movs	r2, #34	; 0x22
 8007124:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800712c:	4a40      	ldr	r2, [pc, #256]	; (8007230 <UART_Start_Receive_DMA+0x130>)
 800712e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007134:	4a3f      	ldr	r2, [pc, #252]	; (8007234 <UART_Start_Receive_DMA+0x134>)
 8007136:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800713c:	4a3e      	ldr	r2, [pc, #248]	; (8007238 <UART_Start_Receive_DMA+0x138>)
 800713e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007144:	2200      	movs	r2, #0
 8007146:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8007148:	f107 0308 	add.w	r3, r7, #8
 800714c:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	3304      	adds	r3, #4
 8007158:	4619      	mov	r1, r3
 800715a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800715c:	681a      	ldr	r2, [r3, #0]
 800715e:	88fb      	ldrh	r3, [r7, #6]
 8007160:	f7fb fbd8 	bl	8002914 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8007164:	2300      	movs	r3, #0
 8007166:	613b      	str	r3, [r7, #16]
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	613b      	str	r3, [r7, #16]
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	685b      	ldr	r3, [r3, #4]
 8007176:	613b      	str	r3, [r7, #16]
 8007178:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	2200      	movs	r2, #0
 800717e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	691b      	ldr	r3, [r3, #16]
 8007186:	2b00      	cmp	r3, #0
 8007188:	d019      	beq.n	80071be <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	330c      	adds	r3, #12
 8007190:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007192:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007194:	e853 3f00 	ldrex	r3, [r3]
 8007198:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800719a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800719c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80071a0:	65bb      	str	r3, [r7, #88]	; 0x58
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	330c      	adds	r3, #12
 80071a8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80071aa:	64fa      	str	r2, [r7, #76]	; 0x4c
 80071ac:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071ae:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80071b0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80071b2:	e841 2300 	strex	r3, r2, [r1]
 80071b6:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80071b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d1e5      	bne.n	800718a <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	3314      	adds	r3, #20
 80071c4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071c8:	e853 3f00 	ldrex	r3, [r3]
 80071cc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80071ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071d0:	f043 0301 	orr.w	r3, r3, #1
 80071d4:	657b      	str	r3, [r7, #84]	; 0x54
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	3314      	adds	r3, #20
 80071dc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80071de:	63ba      	str	r2, [r7, #56]	; 0x38
 80071e0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071e2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80071e4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80071e6:	e841 2300 	strex	r3, r2, [r1]
 80071ea:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80071ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d1e5      	bne.n	80071be <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	3314      	adds	r3, #20
 80071f8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071fa:	69bb      	ldr	r3, [r7, #24]
 80071fc:	e853 3f00 	ldrex	r3, [r3]
 8007200:	617b      	str	r3, [r7, #20]
   return(result);
 8007202:	697b      	ldr	r3, [r7, #20]
 8007204:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007208:	653b      	str	r3, [r7, #80]	; 0x50
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	3314      	adds	r3, #20
 8007210:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007212:	627a      	str	r2, [r7, #36]	; 0x24
 8007214:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007216:	6a39      	ldr	r1, [r7, #32]
 8007218:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800721a:	e841 2300 	strex	r3, r2, [r1]
 800721e:	61fb      	str	r3, [r7, #28]
   return(result);
 8007220:	69fb      	ldr	r3, [r7, #28]
 8007222:	2b00      	cmp	r3, #0
 8007224:	d1e5      	bne.n	80071f2 <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 8007226:	2300      	movs	r3, #0
}
 8007228:	4618      	mov	r0, r3
 800722a:	3760      	adds	r7, #96	; 0x60
 800722c:	46bd      	mov	sp, r7
 800722e:	bd80      	pop	{r7, pc}
 8007230:	08006e35 	.word	0x08006e35
 8007234:	08006f5b 	.word	0x08006f5b
 8007238:	08006f91 	.word	0x08006f91

0800723c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800723c:	b480      	push	{r7}
 800723e:	b089      	sub	sp, #36	; 0x24
 8007240:	af00      	add	r7, sp, #0
 8007242:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	330c      	adds	r3, #12
 800724a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	e853 3f00 	ldrex	r3, [r3]
 8007252:	60bb      	str	r3, [r7, #8]
   return(result);
 8007254:	68bb      	ldr	r3, [r7, #8]
 8007256:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800725a:	61fb      	str	r3, [r7, #28]
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	330c      	adds	r3, #12
 8007262:	69fa      	ldr	r2, [r7, #28]
 8007264:	61ba      	str	r2, [r7, #24]
 8007266:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007268:	6979      	ldr	r1, [r7, #20]
 800726a:	69ba      	ldr	r2, [r7, #24]
 800726c:	e841 2300 	strex	r3, r2, [r1]
 8007270:	613b      	str	r3, [r7, #16]
   return(result);
 8007272:	693b      	ldr	r3, [r7, #16]
 8007274:	2b00      	cmp	r3, #0
 8007276:	d1e5      	bne.n	8007244 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	2220      	movs	r2, #32
 800727c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8007280:	bf00      	nop
 8007282:	3724      	adds	r7, #36	; 0x24
 8007284:	46bd      	mov	sp, r7
 8007286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800728a:	4770      	bx	lr

0800728c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800728c:	b480      	push	{r7}
 800728e:	b095      	sub	sp, #84	; 0x54
 8007290:	af00      	add	r7, sp, #0
 8007292:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	330c      	adds	r3, #12
 800729a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800729c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800729e:	e853 3f00 	ldrex	r3, [r3]
 80072a2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80072a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072a6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80072aa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	330c      	adds	r3, #12
 80072b2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80072b4:	643a      	str	r2, [r7, #64]	; 0x40
 80072b6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072b8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80072ba:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80072bc:	e841 2300 	strex	r3, r2, [r1]
 80072c0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80072c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d1e5      	bne.n	8007294 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	3314      	adds	r3, #20
 80072ce:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072d0:	6a3b      	ldr	r3, [r7, #32]
 80072d2:	e853 3f00 	ldrex	r3, [r3]
 80072d6:	61fb      	str	r3, [r7, #28]
   return(result);
 80072d8:	69fb      	ldr	r3, [r7, #28]
 80072da:	f023 0301 	bic.w	r3, r3, #1
 80072de:	64bb      	str	r3, [r7, #72]	; 0x48
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	3314      	adds	r3, #20
 80072e6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80072e8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80072ea:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072ec:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80072ee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80072f0:	e841 2300 	strex	r3, r2, [r1]
 80072f4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80072f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d1e5      	bne.n	80072c8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007300:	2b01      	cmp	r3, #1
 8007302:	d119      	bne.n	8007338 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	330c      	adds	r3, #12
 800730a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	e853 3f00 	ldrex	r3, [r3]
 8007312:	60bb      	str	r3, [r7, #8]
   return(result);
 8007314:	68bb      	ldr	r3, [r7, #8]
 8007316:	f023 0310 	bic.w	r3, r3, #16
 800731a:	647b      	str	r3, [r7, #68]	; 0x44
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	330c      	adds	r3, #12
 8007322:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007324:	61ba      	str	r2, [r7, #24]
 8007326:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007328:	6979      	ldr	r1, [r7, #20]
 800732a:	69ba      	ldr	r2, [r7, #24]
 800732c:	e841 2300 	strex	r3, r2, [r1]
 8007330:	613b      	str	r3, [r7, #16]
   return(result);
 8007332:	693b      	ldr	r3, [r7, #16]
 8007334:	2b00      	cmp	r3, #0
 8007336:	d1e5      	bne.n	8007304 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	2220      	movs	r2, #32
 800733c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	2200      	movs	r2, #0
 8007344:	631a      	str	r2, [r3, #48]	; 0x30
}
 8007346:	bf00      	nop
 8007348:	3754      	adds	r7, #84	; 0x54
 800734a:	46bd      	mov	sp, r7
 800734c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007350:	4770      	bx	lr

08007352 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007352:	b580      	push	{r7, lr}
 8007354:	b084      	sub	sp, #16
 8007356:	af00      	add	r7, sp, #0
 8007358:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800735e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	2200      	movs	r2, #0
 8007364:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	2200      	movs	r2, #0
 800736a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800736c:	68f8      	ldr	r0, [r7, #12]
 800736e:	f7ff fd4b 	bl	8006e08 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007372:	bf00      	nop
 8007374:	3710      	adds	r7, #16
 8007376:	46bd      	mov	sp, r7
 8007378:	bd80      	pop	{r7, pc}

0800737a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800737a:	b480      	push	{r7}
 800737c:	b085      	sub	sp, #20
 800737e:	af00      	add	r7, sp, #0
 8007380:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007388:	b2db      	uxtb	r3, r3
 800738a:	2b21      	cmp	r3, #33	; 0x21
 800738c:	d13e      	bne.n	800740c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	689b      	ldr	r3, [r3, #8]
 8007392:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007396:	d114      	bne.n	80073c2 <UART_Transmit_IT+0x48>
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	691b      	ldr	r3, [r3, #16]
 800739c:	2b00      	cmp	r3, #0
 800739e:	d110      	bne.n	80073c2 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	6a1b      	ldr	r3, [r3, #32]
 80073a4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	881b      	ldrh	r3, [r3, #0]
 80073aa:	461a      	mov	r2, r3
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80073b4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	6a1b      	ldr	r3, [r3, #32]
 80073ba:	1c9a      	adds	r2, r3, #2
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	621a      	str	r2, [r3, #32]
 80073c0:	e008      	b.n	80073d4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	6a1b      	ldr	r3, [r3, #32]
 80073c6:	1c59      	adds	r1, r3, #1
 80073c8:	687a      	ldr	r2, [r7, #4]
 80073ca:	6211      	str	r1, [r2, #32]
 80073cc:	781a      	ldrb	r2, [r3, #0]
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80073d8:	b29b      	uxth	r3, r3
 80073da:	3b01      	subs	r3, #1
 80073dc:	b29b      	uxth	r3, r3
 80073de:	687a      	ldr	r2, [r7, #4]
 80073e0:	4619      	mov	r1, r3
 80073e2:	84d1      	strh	r1, [r2, #38]	; 0x26
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d10f      	bne.n	8007408 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	68da      	ldr	r2, [r3, #12]
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80073f6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	68da      	ldr	r2, [r3, #12]
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007406:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007408:	2300      	movs	r3, #0
 800740a:	e000      	b.n	800740e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800740c:	2302      	movs	r3, #2
  }
}
 800740e:	4618      	mov	r0, r3
 8007410:	3714      	adds	r7, #20
 8007412:	46bd      	mov	sp, r7
 8007414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007418:	4770      	bx	lr

0800741a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800741a:	b580      	push	{r7, lr}
 800741c:	b082      	sub	sp, #8
 800741e:	af00      	add	r7, sp, #0
 8007420:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	68da      	ldr	r2, [r3, #12]
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007430:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	2220      	movs	r2, #32
 8007436:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800743a:	6878      	ldr	r0, [r7, #4]
 800743c:	f7ff fcda 	bl	8006df4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007440:	2300      	movs	r3, #0
}
 8007442:	4618      	mov	r0, r3
 8007444:	3708      	adds	r7, #8
 8007446:	46bd      	mov	sp, r7
 8007448:	bd80      	pop	{r7, pc}

0800744a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800744a:	b580      	push	{r7, lr}
 800744c:	b08c      	sub	sp, #48	; 0x30
 800744e:	af00      	add	r7, sp, #0
 8007450:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007458:	b2db      	uxtb	r3, r3
 800745a:	2b22      	cmp	r3, #34	; 0x22
 800745c:	f040 80ab 	bne.w	80075b6 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	689b      	ldr	r3, [r3, #8]
 8007464:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007468:	d117      	bne.n	800749a <UART_Receive_IT+0x50>
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	691b      	ldr	r3, [r3, #16]
 800746e:	2b00      	cmp	r3, #0
 8007470:	d113      	bne.n	800749a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8007472:	2300      	movs	r3, #0
 8007474:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800747a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	685b      	ldr	r3, [r3, #4]
 8007482:	b29b      	uxth	r3, r3
 8007484:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007488:	b29a      	uxth	r2, r3
 800748a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800748c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007492:	1c9a      	adds	r2, r3, #2
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	629a      	str	r2, [r3, #40]	; 0x28
 8007498:	e026      	b.n	80074e8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800749e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80074a0:	2300      	movs	r3, #0
 80074a2:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	689b      	ldr	r3, [r3, #8]
 80074a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80074ac:	d007      	beq.n	80074be <UART_Receive_IT+0x74>
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	689b      	ldr	r3, [r3, #8]
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d10a      	bne.n	80074cc <UART_Receive_IT+0x82>
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	691b      	ldr	r3, [r3, #16]
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d106      	bne.n	80074cc <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	685b      	ldr	r3, [r3, #4]
 80074c4:	b2da      	uxtb	r2, r3
 80074c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074c8:	701a      	strb	r2, [r3, #0]
 80074ca:	e008      	b.n	80074de <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	685b      	ldr	r3, [r3, #4]
 80074d2:	b2db      	uxtb	r3, r3
 80074d4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80074d8:	b2da      	uxtb	r2, r3
 80074da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074dc:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074e2:	1c5a      	adds	r2, r3, #1
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80074ec:	b29b      	uxth	r3, r3
 80074ee:	3b01      	subs	r3, #1
 80074f0:	b29b      	uxth	r3, r3
 80074f2:	687a      	ldr	r2, [r7, #4]
 80074f4:	4619      	mov	r1, r3
 80074f6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d15a      	bne.n	80075b2 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	68da      	ldr	r2, [r3, #12]
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	f022 0220 	bic.w	r2, r2, #32
 800750a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	68da      	ldr	r2, [r3, #12]
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800751a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	695a      	ldr	r2, [r3, #20]
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	f022 0201 	bic.w	r2, r2, #1
 800752a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	2220      	movs	r2, #32
 8007530:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007538:	2b01      	cmp	r3, #1
 800753a:	d135      	bne.n	80075a8 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	2200      	movs	r2, #0
 8007540:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	330c      	adds	r3, #12
 8007548:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800754a:	697b      	ldr	r3, [r7, #20]
 800754c:	e853 3f00 	ldrex	r3, [r3]
 8007550:	613b      	str	r3, [r7, #16]
   return(result);
 8007552:	693b      	ldr	r3, [r7, #16]
 8007554:	f023 0310 	bic.w	r3, r3, #16
 8007558:	627b      	str	r3, [r7, #36]	; 0x24
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	330c      	adds	r3, #12
 8007560:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007562:	623a      	str	r2, [r7, #32]
 8007564:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007566:	69f9      	ldr	r1, [r7, #28]
 8007568:	6a3a      	ldr	r2, [r7, #32]
 800756a:	e841 2300 	strex	r3, r2, [r1]
 800756e:	61bb      	str	r3, [r7, #24]
   return(result);
 8007570:	69bb      	ldr	r3, [r7, #24]
 8007572:	2b00      	cmp	r3, #0
 8007574:	d1e5      	bne.n	8007542 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	f003 0310 	and.w	r3, r3, #16
 8007580:	2b10      	cmp	r3, #16
 8007582:	d10a      	bne.n	800759a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007584:	2300      	movs	r3, #0
 8007586:	60fb      	str	r3, [r7, #12]
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	60fb      	str	r3, [r7, #12]
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	685b      	ldr	r3, [r3, #4]
 8007596:	60fb      	str	r3, [r7, #12]
 8007598:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800759e:	4619      	mov	r1, r3
 80075a0:	6878      	ldr	r0, [r7, #4]
 80075a2:	f7ff fc3b 	bl	8006e1c <HAL_UARTEx_RxEventCallback>
 80075a6:	e002      	b.n	80075ae <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80075a8:	6878      	ldr	r0, [r7, #4]
 80075aa:	f7fa fbe1 	bl	8001d70 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80075ae:	2300      	movs	r3, #0
 80075b0:	e002      	b.n	80075b8 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80075b2:	2300      	movs	r3, #0
 80075b4:	e000      	b.n	80075b8 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80075b6:	2302      	movs	r3, #2
  }
}
 80075b8:	4618      	mov	r0, r3
 80075ba:	3730      	adds	r7, #48	; 0x30
 80075bc:	46bd      	mov	sp, r7
 80075be:	bd80      	pop	{r7, pc}

080075c0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80075c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80075c4:	b0c0      	sub	sp, #256	; 0x100
 80075c6:	af00      	add	r7, sp, #0
 80075c8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80075cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	691b      	ldr	r3, [r3, #16]
 80075d4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80075d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80075dc:	68d9      	ldr	r1, [r3, #12]
 80075de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80075e2:	681a      	ldr	r2, [r3, #0]
 80075e4:	ea40 0301 	orr.w	r3, r0, r1
 80075e8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80075ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80075ee:	689a      	ldr	r2, [r3, #8]
 80075f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80075f4:	691b      	ldr	r3, [r3, #16]
 80075f6:	431a      	orrs	r2, r3
 80075f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80075fc:	695b      	ldr	r3, [r3, #20]
 80075fe:	431a      	orrs	r2, r3
 8007600:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007604:	69db      	ldr	r3, [r3, #28]
 8007606:	4313      	orrs	r3, r2
 8007608:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800760c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	68db      	ldr	r3, [r3, #12]
 8007614:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8007618:	f021 010c 	bic.w	r1, r1, #12
 800761c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007620:	681a      	ldr	r2, [r3, #0]
 8007622:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007626:	430b      	orrs	r3, r1
 8007628:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800762a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	695b      	ldr	r3, [r3, #20]
 8007632:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8007636:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800763a:	6999      	ldr	r1, [r3, #24]
 800763c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007640:	681a      	ldr	r2, [r3, #0]
 8007642:	ea40 0301 	orr.w	r3, r0, r1
 8007646:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007648:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800764c:	681a      	ldr	r2, [r3, #0]
 800764e:	4b8f      	ldr	r3, [pc, #572]	; (800788c <UART_SetConfig+0x2cc>)
 8007650:	429a      	cmp	r2, r3
 8007652:	d005      	beq.n	8007660 <UART_SetConfig+0xa0>
 8007654:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007658:	681a      	ldr	r2, [r3, #0]
 800765a:	4b8d      	ldr	r3, [pc, #564]	; (8007890 <UART_SetConfig+0x2d0>)
 800765c:	429a      	cmp	r2, r3
 800765e:	d104      	bne.n	800766a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007660:	f7fd fd3c 	bl	80050dc <HAL_RCC_GetPCLK2Freq>
 8007664:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8007668:	e003      	b.n	8007672 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800766a:	f7fd fd23 	bl	80050b4 <HAL_RCC_GetPCLK1Freq>
 800766e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007672:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007676:	69db      	ldr	r3, [r3, #28]
 8007678:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800767c:	f040 810c 	bne.w	8007898 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007680:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007684:	2200      	movs	r2, #0
 8007686:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800768a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800768e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8007692:	4622      	mov	r2, r4
 8007694:	462b      	mov	r3, r5
 8007696:	1891      	adds	r1, r2, r2
 8007698:	65b9      	str	r1, [r7, #88]	; 0x58
 800769a:	415b      	adcs	r3, r3
 800769c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800769e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80076a2:	4621      	mov	r1, r4
 80076a4:	eb12 0801 	adds.w	r8, r2, r1
 80076a8:	4629      	mov	r1, r5
 80076aa:	eb43 0901 	adc.w	r9, r3, r1
 80076ae:	f04f 0200 	mov.w	r2, #0
 80076b2:	f04f 0300 	mov.w	r3, #0
 80076b6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80076ba:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80076be:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80076c2:	4690      	mov	r8, r2
 80076c4:	4699      	mov	r9, r3
 80076c6:	4623      	mov	r3, r4
 80076c8:	eb18 0303 	adds.w	r3, r8, r3
 80076cc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80076d0:	462b      	mov	r3, r5
 80076d2:	eb49 0303 	adc.w	r3, r9, r3
 80076d6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80076da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80076de:	685b      	ldr	r3, [r3, #4]
 80076e0:	2200      	movs	r2, #0
 80076e2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80076e6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80076ea:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80076ee:	460b      	mov	r3, r1
 80076f0:	18db      	adds	r3, r3, r3
 80076f2:	653b      	str	r3, [r7, #80]	; 0x50
 80076f4:	4613      	mov	r3, r2
 80076f6:	eb42 0303 	adc.w	r3, r2, r3
 80076fa:	657b      	str	r3, [r7, #84]	; 0x54
 80076fc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8007700:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8007704:	f7f9 f94e 	bl	80009a4 <__aeabi_uldivmod>
 8007708:	4602      	mov	r2, r0
 800770a:	460b      	mov	r3, r1
 800770c:	4b61      	ldr	r3, [pc, #388]	; (8007894 <UART_SetConfig+0x2d4>)
 800770e:	fba3 2302 	umull	r2, r3, r3, r2
 8007712:	095b      	lsrs	r3, r3, #5
 8007714:	011c      	lsls	r4, r3, #4
 8007716:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800771a:	2200      	movs	r2, #0
 800771c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007720:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8007724:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8007728:	4642      	mov	r2, r8
 800772a:	464b      	mov	r3, r9
 800772c:	1891      	adds	r1, r2, r2
 800772e:	64b9      	str	r1, [r7, #72]	; 0x48
 8007730:	415b      	adcs	r3, r3
 8007732:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007734:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8007738:	4641      	mov	r1, r8
 800773a:	eb12 0a01 	adds.w	sl, r2, r1
 800773e:	4649      	mov	r1, r9
 8007740:	eb43 0b01 	adc.w	fp, r3, r1
 8007744:	f04f 0200 	mov.w	r2, #0
 8007748:	f04f 0300 	mov.w	r3, #0
 800774c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007750:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007754:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007758:	4692      	mov	sl, r2
 800775a:	469b      	mov	fp, r3
 800775c:	4643      	mov	r3, r8
 800775e:	eb1a 0303 	adds.w	r3, sl, r3
 8007762:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007766:	464b      	mov	r3, r9
 8007768:	eb4b 0303 	adc.w	r3, fp, r3
 800776c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007770:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007774:	685b      	ldr	r3, [r3, #4]
 8007776:	2200      	movs	r2, #0
 8007778:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800777c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8007780:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8007784:	460b      	mov	r3, r1
 8007786:	18db      	adds	r3, r3, r3
 8007788:	643b      	str	r3, [r7, #64]	; 0x40
 800778a:	4613      	mov	r3, r2
 800778c:	eb42 0303 	adc.w	r3, r2, r3
 8007790:	647b      	str	r3, [r7, #68]	; 0x44
 8007792:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007796:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800779a:	f7f9 f903 	bl	80009a4 <__aeabi_uldivmod>
 800779e:	4602      	mov	r2, r0
 80077a0:	460b      	mov	r3, r1
 80077a2:	4611      	mov	r1, r2
 80077a4:	4b3b      	ldr	r3, [pc, #236]	; (8007894 <UART_SetConfig+0x2d4>)
 80077a6:	fba3 2301 	umull	r2, r3, r3, r1
 80077aa:	095b      	lsrs	r3, r3, #5
 80077ac:	2264      	movs	r2, #100	; 0x64
 80077ae:	fb02 f303 	mul.w	r3, r2, r3
 80077b2:	1acb      	subs	r3, r1, r3
 80077b4:	00db      	lsls	r3, r3, #3
 80077b6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80077ba:	4b36      	ldr	r3, [pc, #216]	; (8007894 <UART_SetConfig+0x2d4>)
 80077bc:	fba3 2302 	umull	r2, r3, r3, r2
 80077c0:	095b      	lsrs	r3, r3, #5
 80077c2:	005b      	lsls	r3, r3, #1
 80077c4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80077c8:	441c      	add	r4, r3
 80077ca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80077ce:	2200      	movs	r2, #0
 80077d0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80077d4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80077d8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80077dc:	4642      	mov	r2, r8
 80077de:	464b      	mov	r3, r9
 80077e0:	1891      	adds	r1, r2, r2
 80077e2:	63b9      	str	r1, [r7, #56]	; 0x38
 80077e4:	415b      	adcs	r3, r3
 80077e6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80077e8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80077ec:	4641      	mov	r1, r8
 80077ee:	1851      	adds	r1, r2, r1
 80077f0:	6339      	str	r1, [r7, #48]	; 0x30
 80077f2:	4649      	mov	r1, r9
 80077f4:	414b      	adcs	r3, r1
 80077f6:	637b      	str	r3, [r7, #52]	; 0x34
 80077f8:	f04f 0200 	mov.w	r2, #0
 80077fc:	f04f 0300 	mov.w	r3, #0
 8007800:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8007804:	4659      	mov	r1, fp
 8007806:	00cb      	lsls	r3, r1, #3
 8007808:	4651      	mov	r1, sl
 800780a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800780e:	4651      	mov	r1, sl
 8007810:	00ca      	lsls	r2, r1, #3
 8007812:	4610      	mov	r0, r2
 8007814:	4619      	mov	r1, r3
 8007816:	4603      	mov	r3, r0
 8007818:	4642      	mov	r2, r8
 800781a:	189b      	adds	r3, r3, r2
 800781c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007820:	464b      	mov	r3, r9
 8007822:	460a      	mov	r2, r1
 8007824:	eb42 0303 	adc.w	r3, r2, r3
 8007828:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800782c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007830:	685b      	ldr	r3, [r3, #4]
 8007832:	2200      	movs	r2, #0
 8007834:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007838:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800783c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8007840:	460b      	mov	r3, r1
 8007842:	18db      	adds	r3, r3, r3
 8007844:	62bb      	str	r3, [r7, #40]	; 0x28
 8007846:	4613      	mov	r3, r2
 8007848:	eb42 0303 	adc.w	r3, r2, r3
 800784c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800784e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007852:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8007856:	f7f9 f8a5 	bl	80009a4 <__aeabi_uldivmod>
 800785a:	4602      	mov	r2, r0
 800785c:	460b      	mov	r3, r1
 800785e:	4b0d      	ldr	r3, [pc, #52]	; (8007894 <UART_SetConfig+0x2d4>)
 8007860:	fba3 1302 	umull	r1, r3, r3, r2
 8007864:	095b      	lsrs	r3, r3, #5
 8007866:	2164      	movs	r1, #100	; 0x64
 8007868:	fb01 f303 	mul.w	r3, r1, r3
 800786c:	1ad3      	subs	r3, r2, r3
 800786e:	00db      	lsls	r3, r3, #3
 8007870:	3332      	adds	r3, #50	; 0x32
 8007872:	4a08      	ldr	r2, [pc, #32]	; (8007894 <UART_SetConfig+0x2d4>)
 8007874:	fba2 2303 	umull	r2, r3, r2, r3
 8007878:	095b      	lsrs	r3, r3, #5
 800787a:	f003 0207 	and.w	r2, r3, #7
 800787e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	4422      	add	r2, r4
 8007886:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007888:	e105      	b.n	8007a96 <UART_SetConfig+0x4d6>
 800788a:	bf00      	nop
 800788c:	40011000 	.word	0x40011000
 8007890:	40011400 	.word	0x40011400
 8007894:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007898:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800789c:	2200      	movs	r2, #0
 800789e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80078a2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80078a6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80078aa:	4642      	mov	r2, r8
 80078ac:	464b      	mov	r3, r9
 80078ae:	1891      	adds	r1, r2, r2
 80078b0:	6239      	str	r1, [r7, #32]
 80078b2:	415b      	adcs	r3, r3
 80078b4:	627b      	str	r3, [r7, #36]	; 0x24
 80078b6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80078ba:	4641      	mov	r1, r8
 80078bc:	1854      	adds	r4, r2, r1
 80078be:	4649      	mov	r1, r9
 80078c0:	eb43 0501 	adc.w	r5, r3, r1
 80078c4:	f04f 0200 	mov.w	r2, #0
 80078c8:	f04f 0300 	mov.w	r3, #0
 80078cc:	00eb      	lsls	r3, r5, #3
 80078ce:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80078d2:	00e2      	lsls	r2, r4, #3
 80078d4:	4614      	mov	r4, r2
 80078d6:	461d      	mov	r5, r3
 80078d8:	4643      	mov	r3, r8
 80078da:	18e3      	adds	r3, r4, r3
 80078dc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80078e0:	464b      	mov	r3, r9
 80078e2:	eb45 0303 	adc.w	r3, r5, r3
 80078e6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80078ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80078ee:	685b      	ldr	r3, [r3, #4]
 80078f0:	2200      	movs	r2, #0
 80078f2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80078f6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80078fa:	f04f 0200 	mov.w	r2, #0
 80078fe:	f04f 0300 	mov.w	r3, #0
 8007902:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8007906:	4629      	mov	r1, r5
 8007908:	008b      	lsls	r3, r1, #2
 800790a:	4621      	mov	r1, r4
 800790c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007910:	4621      	mov	r1, r4
 8007912:	008a      	lsls	r2, r1, #2
 8007914:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8007918:	f7f9 f844 	bl	80009a4 <__aeabi_uldivmod>
 800791c:	4602      	mov	r2, r0
 800791e:	460b      	mov	r3, r1
 8007920:	4b60      	ldr	r3, [pc, #384]	; (8007aa4 <UART_SetConfig+0x4e4>)
 8007922:	fba3 2302 	umull	r2, r3, r3, r2
 8007926:	095b      	lsrs	r3, r3, #5
 8007928:	011c      	lsls	r4, r3, #4
 800792a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800792e:	2200      	movs	r2, #0
 8007930:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007934:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8007938:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800793c:	4642      	mov	r2, r8
 800793e:	464b      	mov	r3, r9
 8007940:	1891      	adds	r1, r2, r2
 8007942:	61b9      	str	r1, [r7, #24]
 8007944:	415b      	adcs	r3, r3
 8007946:	61fb      	str	r3, [r7, #28]
 8007948:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800794c:	4641      	mov	r1, r8
 800794e:	1851      	adds	r1, r2, r1
 8007950:	6139      	str	r1, [r7, #16]
 8007952:	4649      	mov	r1, r9
 8007954:	414b      	adcs	r3, r1
 8007956:	617b      	str	r3, [r7, #20]
 8007958:	f04f 0200 	mov.w	r2, #0
 800795c:	f04f 0300 	mov.w	r3, #0
 8007960:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007964:	4659      	mov	r1, fp
 8007966:	00cb      	lsls	r3, r1, #3
 8007968:	4651      	mov	r1, sl
 800796a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800796e:	4651      	mov	r1, sl
 8007970:	00ca      	lsls	r2, r1, #3
 8007972:	4610      	mov	r0, r2
 8007974:	4619      	mov	r1, r3
 8007976:	4603      	mov	r3, r0
 8007978:	4642      	mov	r2, r8
 800797a:	189b      	adds	r3, r3, r2
 800797c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007980:	464b      	mov	r3, r9
 8007982:	460a      	mov	r2, r1
 8007984:	eb42 0303 	adc.w	r3, r2, r3
 8007988:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800798c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007990:	685b      	ldr	r3, [r3, #4]
 8007992:	2200      	movs	r2, #0
 8007994:	67bb      	str	r3, [r7, #120]	; 0x78
 8007996:	67fa      	str	r2, [r7, #124]	; 0x7c
 8007998:	f04f 0200 	mov.w	r2, #0
 800799c:	f04f 0300 	mov.w	r3, #0
 80079a0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80079a4:	4649      	mov	r1, r9
 80079a6:	008b      	lsls	r3, r1, #2
 80079a8:	4641      	mov	r1, r8
 80079aa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80079ae:	4641      	mov	r1, r8
 80079b0:	008a      	lsls	r2, r1, #2
 80079b2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80079b6:	f7f8 fff5 	bl	80009a4 <__aeabi_uldivmod>
 80079ba:	4602      	mov	r2, r0
 80079bc:	460b      	mov	r3, r1
 80079be:	4b39      	ldr	r3, [pc, #228]	; (8007aa4 <UART_SetConfig+0x4e4>)
 80079c0:	fba3 1302 	umull	r1, r3, r3, r2
 80079c4:	095b      	lsrs	r3, r3, #5
 80079c6:	2164      	movs	r1, #100	; 0x64
 80079c8:	fb01 f303 	mul.w	r3, r1, r3
 80079cc:	1ad3      	subs	r3, r2, r3
 80079ce:	011b      	lsls	r3, r3, #4
 80079d0:	3332      	adds	r3, #50	; 0x32
 80079d2:	4a34      	ldr	r2, [pc, #208]	; (8007aa4 <UART_SetConfig+0x4e4>)
 80079d4:	fba2 2303 	umull	r2, r3, r2, r3
 80079d8:	095b      	lsrs	r3, r3, #5
 80079da:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80079de:	441c      	add	r4, r3
 80079e0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80079e4:	2200      	movs	r2, #0
 80079e6:	673b      	str	r3, [r7, #112]	; 0x70
 80079e8:	677a      	str	r2, [r7, #116]	; 0x74
 80079ea:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80079ee:	4642      	mov	r2, r8
 80079f0:	464b      	mov	r3, r9
 80079f2:	1891      	adds	r1, r2, r2
 80079f4:	60b9      	str	r1, [r7, #8]
 80079f6:	415b      	adcs	r3, r3
 80079f8:	60fb      	str	r3, [r7, #12]
 80079fa:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80079fe:	4641      	mov	r1, r8
 8007a00:	1851      	adds	r1, r2, r1
 8007a02:	6039      	str	r1, [r7, #0]
 8007a04:	4649      	mov	r1, r9
 8007a06:	414b      	adcs	r3, r1
 8007a08:	607b      	str	r3, [r7, #4]
 8007a0a:	f04f 0200 	mov.w	r2, #0
 8007a0e:	f04f 0300 	mov.w	r3, #0
 8007a12:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007a16:	4659      	mov	r1, fp
 8007a18:	00cb      	lsls	r3, r1, #3
 8007a1a:	4651      	mov	r1, sl
 8007a1c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007a20:	4651      	mov	r1, sl
 8007a22:	00ca      	lsls	r2, r1, #3
 8007a24:	4610      	mov	r0, r2
 8007a26:	4619      	mov	r1, r3
 8007a28:	4603      	mov	r3, r0
 8007a2a:	4642      	mov	r2, r8
 8007a2c:	189b      	adds	r3, r3, r2
 8007a2e:	66bb      	str	r3, [r7, #104]	; 0x68
 8007a30:	464b      	mov	r3, r9
 8007a32:	460a      	mov	r2, r1
 8007a34:	eb42 0303 	adc.w	r3, r2, r3
 8007a38:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007a3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007a3e:	685b      	ldr	r3, [r3, #4]
 8007a40:	2200      	movs	r2, #0
 8007a42:	663b      	str	r3, [r7, #96]	; 0x60
 8007a44:	667a      	str	r2, [r7, #100]	; 0x64
 8007a46:	f04f 0200 	mov.w	r2, #0
 8007a4a:	f04f 0300 	mov.w	r3, #0
 8007a4e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8007a52:	4649      	mov	r1, r9
 8007a54:	008b      	lsls	r3, r1, #2
 8007a56:	4641      	mov	r1, r8
 8007a58:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007a5c:	4641      	mov	r1, r8
 8007a5e:	008a      	lsls	r2, r1, #2
 8007a60:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8007a64:	f7f8 ff9e 	bl	80009a4 <__aeabi_uldivmod>
 8007a68:	4602      	mov	r2, r0
 8007a6a:	460b      	mov	r3, r1
 8007a6c:	4b0d      	ldr	r3, [pc, #52]	; (8007aa4 <UART_SetConfig+0x4e4>)
 8007a6e:	fba3 1302 	umull	r1, r3, r3, r2
 8007a72:	095b      	lsrs	r3, r3, #5
 8007a74:	2164      	movs	r1, #100	; 0x64
 8007a76:	fb01 f303 	mul.w	r3, r1, r3
 8007a7a:	1ad3      	subs	r3, r2, r3
 8007a7c:	011b      	lsls	r3, r3, #4
 8007a7e:	3332      	adds	r3, #50	; 0x32
 8007a80:	4a08      	ldr	r2, [pc, #32]	; (8007aa4 <UART_SetConfig+0x4e4>)
 8007a82:	fba2 2303 	umull	r2, r3, r2, r3
 8007a86:	095b      	lsrs	r3, r3, #5
 8007a88:	f003 020f 	and.w	r2, r3, #15
 8007a8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	4422      	add	r2, r4
 8007a94:	609a      	str	r2, [r3, #8]
}
 8007a96:	bf00      	nop
 8007a98:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8007a9c:	46bd      	mov	sp, r7
 8007a9e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007aa2:	bf00      	nop
 8007aa4:	51eb851f 	.word	0x51eb851f

08007aa8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007aa8:	b084      	sub	sp, #16
 8007aaa:	b580      	push	{r7, lr}
 8007aac:	b084      	sub	sp, #16
 8007aae:	af00      	add	r7, sp, #0
 8007ab0:	6078      	str	r0, [r7, #4]
 8007ab2:	f107 001c 	add.w	r0, r7, #28
 8007ab6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007aba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007abc:	2b01      	cmp	r3, #1
 8007abe:	d122      	bne.n	8007b06 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ac4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	68db      	ldr	r3, [r3, #12]
 8007ad0:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8007ad4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007ad8:	687a      	ldr	r2, [r7, #4]
 8007ada:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	68db      	ldr	r3, [r3, #12]
 8007ae0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007ae8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007aea:	2b01      	cmp	r3, #1
 8007aec:	d105      	bne.n	8007afa <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	68db      	ldr	r3, [r3, #12]
 8007af2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007afa:	6878      	ldr	r0, [r7, #4]
 8007afc:	f001 fbee 	bl	80092dc <USB_CoreReset>
 8007b00:	4603      	mov	r3, r0
 8007b02:	73fb      	strb	r3, [r7, #15]
 8007b04:	e01a      	b.n	8007b3c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	68db      	ldr	r3, [r3, #12]
 8007b0a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007b12:	6878      	ldr	r0, [r7, #4]
 8007b14:	f001 fbe2 	bl	80092dc <USB_CoreReset>
 8007b18:	4603      	mov	r3, r0
 8007b1a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8007b1c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d106      	bne.n	8007b30 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b26:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	639a      	str	r2, [r3, #56]	; 0x38
 8007b2e:	e005      	b.n	8007b3c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b34:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8007b3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b3e:	2b01      	cmp	r3, #1
 8007b40:	d10b      	bne.n	8007b5a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	689b      	ldr	r3, [r3, #8]
 8007b46:	f043 0206 	orr.w	r2, r3, #6
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	689b      	ldr	r3, [r3, #8]
 8007b52:	f043 0220 	orr.w	r2, r3, #32
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8007b5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b5c:	4618      	mov	r0, r3
 8007b5e:	3710      	adds	r7, #16
 8007b60:	46bd      	mov	sp, r7
 8007b62:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007b66:	b004      	add	sp, #16
 8007b68:	4770      	bx	lr
	...

08007b6c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8007b6c:	b480      	push	{r7}
 8007b6e:	b087      	sub	sp, #28
 8007b70:	af00      	add	r7, sp, #0
 8007b72:	60f8      	str	r0, [r7, #12]
 8007b74:	60b9      	str	r1, [r7, #8]
 8007b76:	4613      	mov	r3, r2
 8007b78:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8007b7a:	79fb      	ldrb	r3, [r7, #7]
 8007b7c:	2b02      	cmp	r3, #2
 8007b7e:	d165      	bne.n	8007c4c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8007b80:	68bb      	ldr	r3, [r7, #8]
 8007b82:	4a41      	ldr	r2, [pc, #260]	; (8007c88 <USB_SetTurnaroundTime+0x11c>)
 8007b84:	4293      	cmp	r3, r2
 8007b86:	d906      	bls.n	8007b96 <USB_SetTurnaroundTime+0x2a>
 8007b88:	68bb      	ldr	r3, [r7, #8]
 8007b8a:	4a40      	ldr	r2, [pc, #256]	; (8007c8c <USB_SetTurnaroundTime+0x120>)
 8007b8c:	4293      	cmp	r3, r2
 8007b8e:	d202      	bcs.n	8007b96 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8007b90:	230f      	movs	r3, #15
 8007b92:	617b      	str	r3, [r7, #20]
 8007b94:	e062      	b.n	8007c5c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8007b96:	68bb      	ldr	r3, [r7, #8]
 8007b98:	4a3c      	ldr	r2, [pc, #240]	; (8007c8c <USB_SetTurnaroundTime+0x120>)
 8007b9a:	4293      	cmp	r3, r2
 8007b9c:	d306      	bcc.n	8007bac <USB_SetTurnaroundTime+0x40>
 8007b9e:	68bb      	ldr	r3, [r7, #8]
 8007ba0:	4a3b      	ldr	r2, [pc, #236]	; (8007c90 <USB_SetTurnaroundTime+0x124>)
 8007ba2:	4293      	cmp	r3, r2
 8007ba4:	d202      	bcs.n	8007bac <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8007ba6:	230e      	movs	r3, #14
 8007ba8:	617b      	str	r3, [r7, #20]
 8007baa:	e057      	b.n	8007c5c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8007bac:	68bb      	ldr	r3, [r7, #8]
 8007bae:	4a38      	ldr	r2, [pc, #224]	; (8007c90 <USB_SetTurnaroundTime+0x124>)
 8007bb0:	4293      	cmp	r3, r2
 8007bb2:	d306      	bcc.n	8007bc2 <USB_SetTurnaroundTime+0x56>
 8007bb4:	68bb      	ldr	r3, [r7, #8]
 8007bb6:	4a37      	ldr	r2, [pc, #220]	; (8007c94 <USB_SetTurnaroundTime+0x128>)
 8007bb8:	4293      	cmp	r3, r2
 8007bba:	d202      	bcs.n	8007bc2 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8007bbc:	230d      	movs	r3, #13
 8007bbe:	617b      	str	r3, [r7, #20]
 8007bc0:	e04c      	b.n	8007c5c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8007bc2:	68bb      	ldr	r3, [r7, #8]
 8007bc4:	4a33      	ldr	r2, [pc, #204]	; (8007c94 <USB_SetTurnaroundTime+0x128>)
 8007bc6:	4293      	cmp	r3, r2
 8007bc8:	d306      	bcc.n	8007bd8 <USB_SetTurnaroundTime+0x6c>
 8007bca:	68bb      	ldr	r3, [r7, #8]
 8007bcc:	4a32      	ldr	r2, [pc, #200]	; (8007c98 <USB_SetTurnaroundTime+0x12c>)
 8007bce:	4293      	cmp	r3, r2
 8007bd0:	d802      	bhi.n	8007bd8 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8007bd2:	230c      	movs	r3, #12
 8007bd4:	617b      	str	r3, [r7, #20]
 8007bd6:	e041      	b.n	8007c5c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8007bd8:	68bb      	ldr	r3, [r7, #8]
 8007bda:	4a2f      	ldr	r2, [pc, #188]	; (8007c98 <USB_SetTurnaroundTime+0x12c>)
 8007bdc:	4293      	cmp	r3, r2
 8007bde:	d906      	bls.n	8007bee <USB_SetTurnaroundTime+0x82>
 8007be0:	68bb      	ldr	r3, [r7, #8]
 8007be2:	4a2e      	ldr	r2, [pc, #184]	; (8007c9c <USB_SetTurnaroundTime+0x130>)
 8007be4:	4293      	cmp	r3, r2
 8007be6:	d802      	bhi.n	8007bee <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8007be8:	230b      	movs	r3, #11
 8007bea:	617b      	str	r3, [r7, #20]
 8007bec:	e036      	b.n	8007c5c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8007bee:	68bb      	ldr	r3, [r7, #8]
 8007bf0:	4a2a      	ldr	r2, [pc, #168]	; (8007c9c <USB_SetTurnaroundTime+0x130>)
 8007bf2:	4293      	cmp	r3, r2
 8007bf4:	d906      	bls.n	8007c04 <USB_SetTurnaroundTime+0x98>
 8007bf6:	68bb      	ldr	r3, [r7, #8]
 8007bf8:	4a29      	ldr	r2, [pc, #164]	; (8007ca0 <USB_SetTurnaroundTime+0x134>)
 8007bfa:	4293      	cmp	r3, r2
 8007bfc:	d802      	bhi.n	8007c04 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8007bfe:	230a      	movs	r3, #10
 8007c00:	617b      	str	r3, [r7, #20]
 8007c02:	e02b      	b.n	8007c5c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8007c04:	68bb      	ldr	r3, [r7, #8]
 8007c06:	4a26      	ldr	r2, [pc, #152]	; (8007ca0 <USB_SetTurnaroundTime+0x134>)
 8007c08:	4293      	cmp	r3, r2
 8007c0a:	d906      	bls.n	8007c1a <USB_SetTurnaroundTime+0xae>
 8007c0c:	68bb      	ldr	r3, [r7, #8]
 8007c0e:	4a25      	ldr	r2, [pc, #148]	; (8007ca4 <USB_SetTurnaroundTime+0x138>)
 8007c10:	4293      	cmp	r3, r2
 8007c12:	d202      	bcs.n	8007c1a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8007c14:	2309      	movs	r3, #9
 8007c16:	617b      	str	r3, [r7, #20]
 8007c18:	e020      	b.n	8007c5c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8007c1a:	68bb      	ldr	r3, [r7, #8]
 8007c1c:	4a21      	ldr	r2, [pc, #132]	; (8007ca4 <USB_SetTurnaroundTime+0x138>)
 8007c1e:	4293      	cmp	r3, r2
 8007c20:	d306      	bcc.n	8007c30 <USB_SetTurnaroundTime+0xc4>
 8007c22:	68bb      	ldr	r3, [r7, #8]
 8007c24:	4a20      	ldr	r2, [pc, #128]	; (8007ca8 <USB_SetTurnaroundTime+0x13c>)
 8007c26:	4293      	cmp	r3, r2
 8007c28:	d802      	bhi.n	8007c30 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8007c2a:	2308      	movs	r3, #8
 8007c2c:	617b      	str	r3, [r7, #20]
 8007c2e:	e015      	b.n	8007c5c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8007c30:	68bb      	ldr	r3, [r7, #8]
 8007c32:	4a1d      	ldr	r2, [pc, #116]	; (8007ca8 <USB_SetTurnaroundTime+0x13c>)
 8007c34:	4293      	cmp	r3, r2
 8007c36:	d906      	bls.n	8007c46 <USB_SetTurnaroundTime+0xda>
 8007c38:	68bb      	ldr	r3, [r7, #8]
 8007c3a:	4a1c      	ldr	r2, [pc, #112]	; (8007cac <USB_SetTurnaroundTime+0x140>)
 8007c3c:	4293      	cmp	r3, r2
 8007c3e:	d202      	bcs.n	8007c46 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8007c40:	2307      	movs	r3, #7
 8007c42:	617b      	str	r3, [r7, #20]
 8007c44:	e00a      	b.n	8007c5c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8007c46:	2306      	movs	r3, #6
 8007c48:	617b      	str	r3, [r7, #20]
 8007c4a:	e007      	b.n	8007c5c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8007c4c:	79fb      	ldrb	r3, [r7, #7]
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d102      	bne.n	8007c58 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8007c52:	2309      	movs	r3, #9
 8007c54:	617b      	str	r3, [r7, #20]
 8007c56:	e001      	b.n	8007c5c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8007c58:	2309      	movs	r3, #9
 8007c5a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	68db      	ldr	r3, [r3, #12]
 8007c60:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	68da      	ldr	r2, [r3, #12]
 8007c6c:	697b      	ldr	r3, [r7, #20]
 8007c6e:	029b      	lsls	r3, r3, #10
 8007c70:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8007c74:	431a      	orrs	r2, r3
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8007c7a:	2300      	movs	r3, #0
}
 8007c7c:	4618      	mov	r0, r3
 8007c7e:	371c      	adds	r7, #28
 8007c80:	46bd      	mov	sp, r7
 8007c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c86:	4770      	bx	lr
 8007c88:	00d8acbf 	.word	0x00d8acbf
 8007c8c:	00e4e1c0 	.word	0x00e4e1c0
 8007c90:	00f42400 	.word	0x00f42400
 8007c94:	01067380 	.word	0x01067380
 8007c98:	011a499f 	.word	0x011a499f
 8007c9c:	01312cff 	.word	0x01312cff
 8007ca0:	014ca43f 	.word	0x014ca43f
 8007ca4:	016e3600 	.word	0x016e3600
 8007ca8:	01a6ab1f 	.word	0x01a6ab1f
 8007cac:	01e84800 	.word	0x01e84800

08007cb0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007cb0:	b480      	push	{r7}
 8007cb2:	b083      	sub	sp, #12
 8007cb4:	af00      	add	r7, sp, #0
 8007cb6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	689b      	ldr	r3, [r3, #8]
 8007cbc:	f043 0201 	orr.w	r2, r3, #1
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007cc4:	2300      	movs	r3, #0
}
 8007cc6:	4618      	mov	r0, r3
 8007cc8:	370c      	adds	r7, #12
 8007cca:	46bd      	mov	sp, r7
 8007ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cd0:	4770      	bx	lr

08007cd2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007cd2:	b480      	push	{r7}
 8007cd4:	b083      	sub	sp, #12
 8007cd6:	af00      	add	r7, sp, #0
 8007cd8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	689b      	ldr	r3, [r3, #8]
 8007cde:	f023 0201 	bic.w	r2, r3, #1
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007ce6:	2300      	movs	r3, #0
}
 8007ce8:	4618      	mov	r0, r3
 8007cea:	370c      	adds	r7, #12
 8007cec:	46bd      	mov	sp, r7
 8007cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cf2:	4770      	bx	lr

08007cf4 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007cf4:	b580      	push	{r7, lr}
 8007cf6:	b084      	sub	sp, #16
 8007cf8:	af00      	add	r7, sp, #0
 8007cfa:	6078      	str	r0, [r7, #4]
 8007cfc:	460b      	mov	r3, r1
 8007cfe:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8007d00:	2300      	movs	r3, #0
 8007d02:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	68db      	ldr	r3, [r3, #12]
 8007d08:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007d10:	78fb      	ldrb	r3, [r7, #3]
 8007d12:	2b01      	cmp	r3, #1
 8007d14:	d115      	bne.n	8007d42 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	68db      	ldr	r3, [r3, #12]
 8007d1a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007d22:	2001      	movs	r0, #1
 8007d24:	f7fa fc12 	bl	800254c <HAL_Delay>
      ms++;
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	3301      	adds	r3, #1
 8007d2c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8007d2e:	6878      	ldr	r0, [r7, #4]
 8007d30:	f001 fa45 	bl	80091be <USB_GetMode>
 8007d34:	4603      	mov	r3, r0
 8007d36:	2b01      	cmp	r3, #1
 8007d38:	d01e      	beq.n	8007d78 <USB_SetCurrentMode+0x84>
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	2b31      	cmp	r3, #49	; 0x31
 8007d3e:	d9f0      	bls.n	8007d22 <USB_SetCurrentMode+0x2e>
 8007d40:	e01a      	b.n	8007d78 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8007d42:	78fb      	ldrb	r3, [r7, #3]
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d115      	bne.n	8007d74 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	68db      	ldr	r3, [r3, #12]
 8007d4c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007d54:	2001      	movs	r0, #1
 8007d56:	f7fa fbf9 	bl	800254c <HAL_Delay>
      ms++;
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	3301      	adds	r3, #1
 8007d5e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8007d60:	6878      	ldr	r0, [r7, #4]
 8007d62:	f001 fa2c 	bl	80091be <USB_GetMode>
 8007d66:	4603      	mov	r3, r0
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d005      	beq.n	8007d78 <USB_SetCurrentMode+0x84>
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	2b31      	cmp	r3, #49	; 0x31
 8007d70:	d9f0      	bls.n	8007d54 <USB_SetCurrentMode+0x60>
 8007d72:	e001      	b.n	8007d78 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8007d74:	2301      	movs	r3, #1
 8007d76:	e005      	b.n	8007d84 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	2b32      	cmp	r3, #50	; 0x32
 8007d7c:	d101      	bne.n	8007d82 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8007d7e:	2301      	movs	r3, #1
 8007d80:	e000      	b.n	8007d84 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8007d82:	2300      	movs	r3, #0
}
 8007d84:	4618      	mov	r0, r3
 8007d86:	3710      	adds	r7, #16
 8007d88:	46bd      	mov	sp, r7
 8007d8a:	bd80      	pop	{r7, pc}

08007d8c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007d8c:	b084      	sub	sp, #16
 8007d8e:	b580      	push	{r7, lr}
 8007d90:	b086      	sub	sp, #24
 8007d92:	af00      	add	r7, sp, #0
 8007d94:	6078      	str	r0, [r7, #4]
 8007d96:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8007d9a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8007d9e:	2300      	movs	r3, #0
 8007da0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8007da6:	2300      	movs	r3, #0
 8007da8:	613b      	str	r3, [r7, #16]
 8007daa:	e009      	b.n	8007dc0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8007dac:	687a      	ldr	r2, [r7, #4]
 8007dae:	693b      	ldr	r3, [r7, #16]
 8007db0:	3340      	adds	r3, #64	; 0x40
 8007db2:	009b      	lsls	r3, r3, #2
 8007db4:	4413      	add	r3, r2
 8007db6:	2200      	movs	r2, #0
 8007db8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8007dba:	693b      	ldr	r3, [r7, #16]
 8007dbc:	3301      	adds	r3, #1
 8007dbe:	613b      	str	r3, [r7, #16]
 8007dc0:	693b      	ldr	r3, [r7, #16]
 8007dc2:	2b0e      	cmp	r3, #14
 8007dc4:	d9f2      	bls.n	8007dac <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8007dc6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d11c      	bne.n	8007e06 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007dd2:	685b      	ldr	r3, [r3, #4]
 8007dd4:	68fa      	ldr	r2, [r7, #12]
 8007dd6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007dda:	f043 0302 	orr.w	r3, r3, #2
 8007dde:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007de4:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007df0:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007dfc:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	639a      	str	r2, [r3, #56]	; 0x38
 8007e04:	e00b      	b.n	8007e1e <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e0a:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e16:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007e24:	461a      	mov	r2, r3
 8007e26:	2300      	movs	r3, #0
 8007e28:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007e30:	4619      	mov	r1, r3
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007e38:	461a      	mov	r2, r3
 8007e3a:	680b      	ldr	r3, [r1, #0]
 8007e3c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007e3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e40:	2b01      	cmp	r3, #1
 8007e42:	d10c      	bne.n	8007e5e <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8007e44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d104      	bne.n	8007e54 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8007e4a:	2100      	movs	r1, #0
 8007e4c:	6878      	ldr	r0, [r7, #4]
 8007e4e:	f000 f965 	bl	800811c <USB_SetDevSpeed>
 8007e52:	e008      	b.n	8007e66 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8007e54:	2101      	movs	r1, #1
 8007e56:	6878      	ldr	r0, [r7, #4]
 8007e58:	f000 f960 	bl	800811c <USB_SetDevSpeed>
 8007e5c:	e003      	b.n	8007e66 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8007e5e:	2103      	movs	r1, #3
 8007e60:	6878      	ldr	r0, [r7, #4]
 8007e62:	f000 f95b 	bl	800811c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007e66:	2110      	movs	r1, #16
 8007e68:	6878      	ldr	r0, [r7, #4]
 8007e6a:	f000 f8f3 	bl	8008054 <USB_FlushTxFifo>
 8007e6e:	4603      	mov	r3, r0
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	d001      	beq.n	8007e78 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8007e74:	2301      	movs	r3, #1
 8007e76:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007e78:	6878      	ldr	r0, [r7, #4]
 8007e7a:	f000 f91f 	bl	80080bc <USB_FlushRxFifo>
 8007e7e:	4603      	mov	r3, r0
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d001      	beq.n	8007e88 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8007e84:	2301      	movs	r3, #1
 8007e86:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007e8e:	461a      	mov	r2, r3
 8007e90:	2300      	movs	r3, #0
 8007e92:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007e9a:	461a      	mov	r2, r3
 8007e9c:	2300      	movs	r3, #0
 8007e9e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007ea6:	461a      	mov	r2, r3
 8007ea8:	2300      	movs	r3, #0
 8007eaa:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007eac:	2300      	movs	r3, #0
 8007eae:	613b      	str	r3, [r7, #16]
 8007eb0:	e043      	b.n	8007f3a <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007eb2:	693b      	ldr	r3, [r7, #16]
 8007eb4:	015a      	lsls	r2, r3, #5
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	4413      	add	r3, r2
 8007eba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007ec4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007ec8:	d118      	bne.n	8007efc <USB_DevInit+0x170>
    {
      if (i == 0U)
 8007eca:	693b      	ldr	r3, [r7, #16]
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	d10a      	bne.n	8007ee6 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8007ed0:	693b      	ldr	r3, [r7, #16]
 8007ed2:	015a      	lsls	r2, r3, #5
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	4413      	add	r3, r2
 8007ed8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007edc:	461a      	mov	r2, r3
 8007ede:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007ee2:	6013      	str	r3, [r2, #0]
 8007ee4:	e013      	b.n	8007f0e <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8007ee6:	693b      	ldr	r3, [r7, #16]
 8007ee8:	015a      	lsls	r2, r3, #5
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	4413      	add	r3, r2
 8007eee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ef2:	461a      	mov	r2, r3
 8007ef4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007ef8:	6013      	str	r3, [r2, #0]
 8007efa:	e008      	b.n	8007f0e <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8007efc:	693b      	ldr	r3, [r7, #16]
 8007efe:	015a      	lsls	r2, r3, #5
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	4413      	add	r3, r2
 8007f04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f08:	461a      	mov	r2, r3
 8007f0a:	2300      	movs	r3, #0
 8007f0c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8007f0e:	693b      	ldr	r3, [r7, #16]
 8007f10:	015a      	lsls	r2, r3, #5
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	4413      	add	r3, r2
 8007f16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f1a:	461a      	mov	r2, r3
 8007f1c:	2300      	movs	r3, #0
 8007f1e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8007f20:	693b      	ldr	r3, [r7, #16]
 8007f22:	015a      	lsls	r2, r3, #5
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	4413      	add	r3, r2
 8007f28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f2c:	461a      	mov	r2, r3
 8007f2e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007f32:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007f34:	693b      	ldr	r3, [r7, #16]
 8007f36:	3301      	adds	r3, #1
 8007f38:	613b      	str	r3, [r7, #16]
 8007f3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f3c:	693a      	ldr	r2, [r7, #16]
 8007f3e:	429a      	cmp	r2, r3
 8007f40:	d3b7      	bcc.n	8007eb2 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007f42:	2300      	movs	r3, #0
 8007f44:	613b      	str	r3, [r7, #16]
 8007f46:	e043      	b.n	8007fd0 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007f48:	693b      	ldr	r3, [r7, #16]
 8007f4a:	015a      	lsls	r2, r3, #5
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	4413      	add	r3, r2
 8007f50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007f5a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007f5e:	d118      	bne.n	8007f92 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8007f60:	693b      	ldr	r3, [r7, #16]
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d10a      	bne.n	8007f7c <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8007f66:	693b      	ldr	r3, [r7, #16]
 8007f68:	015a      	lsls	r2, r3, #5
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	4413      	add	r3, r2
 8007f6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f72:	461a      	mov	r2, r3
 8007f74:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007f78:	6013      	str	r3, [r2, #0]
 8007f7a:	e013      	b.n	8007fa4 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8007f7c:	693b      	ldr	r3, [r7, #16]
 8007f7e:	015a      	lsls	r2, r3, #5
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	4413      	add	r3, r2
 8007f84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f88:	461a      	mov	r2, r3
 8007f8a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007f8e:	6013      	str	r3, [r2, #0]
 8007f90:	e008      	b.n	8007fa4 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8007f92:	693b      	ldr	r3, [r7, #16]
 8007f94:	015a      	lsls	r2, r3, #5
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	4413      	add	r3, r2
 8007f9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f9e:	461a      	mov	r2, r3
 8007fa0:	2300      	movs	r3, #0
 8007fa2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8007fa4:	693b      	ldr	r3, [r7, #16]
 8007fa6:	015a      	lsls	r2, r3, #5
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	4413      	add	r3, r2
 8007fac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007fb0:	461a      	mov	r2, r3
 8007fb2:	2300      	movs	r3, #0
 8007fb4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8007fb6:	693b      	ldr	r3, [r7, #16]
 8007fb8:	015a      	lsls	r2, r3, #5
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	4413      	add	r3, r2
 8007fbe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007fc2:	461a      	mov	r2, r3
 8007fc4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007fc8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007fca:	693b      	ldr	r3, [r7, #16]
 8007fcc:	3301      	adds	r3, #1
 8007fce:	613b      	str	r3, [r7, #16]
 8007fd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fd2:	693a      	ldr	r2, [r7, #16]
 8007fd4:	429a      	cmp	r2, r3
 8007fd6:	d3b7      	bcc.n	8007f48 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007fde:	691b      	ldr	r3, [r3, #16]
 8007fe0:	68fa      	ldr	r2, [r7, #12]
 8007fe2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007fe6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007fea:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	2200      	movs	r2, #0
 8007ff0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8007ff8:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007ffa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	d105      	bne.n	800800c <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	699b      	ldr	r3, [r3, #24]
 8008004:	f043 0210 	orr.w	r2, r3, #16
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	699a      	ldr	r2, [r3, #24]
 8008010:	4b0f      	ldr	r3, [pc, #60]	; (8008050 <USB_DevInit+0x2c4>)
 8008012:	4313      	orrs	r3, r2
 8008014:	687a      	ldr	r2, [r7, #4]
 8008016:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8008018:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800801a:	2b00      	cmp	r3, #0
 800801c:	d005      	beq.n	800802a <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	699b      	ldr	r3, [r3, #24]
 8008022:	f043 0208 	orr.w	r2, r3, #8
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800802a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800802c:	2b01      	cmp	r3, #1
 800802e:	d107      	bne.n	8008040 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	699b      	ldr	r3, [r3, #24]
 8008034:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008038:	f043 0304 	orr.w	r3, r3, #4
 800803c:	687a      	ldr	r2, [r7, #4]
 800803e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8008040:	7dfb      	ldrb	r3, [r7, #23]
}
 8008042:	4618      	mov	r0, r3
 8008044:	3718      	adds	r7, #24
 8008046:	46bd      	mov	sp, r7
 8008048:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800804c:	b004      	add	sp, #16
 800804e:	4770      	bx	lr
 8008050:	803c3800 	.word	0x803c3800

08008054 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008054:	b480      	push	{r7}
 8008056:	b085      	sub	sp, #20
 8008058:	af00      	add	r7, sp, #0
 800805a:	6078      	str	r0, [r7, #4]
 800805c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800805e:	2300      	movs	r3, #0
 8008060:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	3301      	adds	r3, #1
 8008066:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	4a13      	ldr	r2, [pc, #76]	; (80080b8 <USB_FlushTxFifo+0x64>)
 800806c:	4293      	cmp	r3, r2
 800806e:	d901      	bls.n	8008074 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8008070:	2303      	movs	r3, #3
 8008072:	e01b      	b.n	80080ac <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	691b      	ldr	r3, [r3, #16]
 8008078:	2b00      	cmp	r3, #0
 800807a:	daf2      	bge.n	8008062 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800807c:	2300      	movs	r3, #0
 800807e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8008080:	683b      	ldr	r3, [r7, #0]
 8008082:	019b      	lsls	r3, r3, #6
 8008084:	f043 0220 	orr.w	r2, r3, #32
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	3301      	adds	r3, #1
 8008090:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	4a08      	ldr	r2, [pc, #32]	; (80080b8 <USB_FlushTxFifo+0x64>)
 8008096:	4293      	cmp	r3, r2
 8008098:	d901      	bls.n	800809e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800809a:	2303      	movs	r3, #3
 800809c:	e006      	b.n	80080ac <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	691b      	ldr	r3, [r3, #16]
 80080a2:	f003 0320 	and.w	r3, r3, #32
 80080a6:	2b20      	cmp	r3, #32
 80080a8:	d0f0      	beq.n	800808c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80080aa:	2300      	movs	r3, #0
}
 80080ac:	4618      	mov	r0, r3
 80080ae:	3714      	adds	r7, #20
 80080b0:	46bd      	mov	sp, r7
 80080b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080b6:	4770      	bx	lr
 80080b8:	00030d40 	.word	0x00030d40

080080bc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80080bc:	b480      	push	{r7}
 80080be:	b085      	sub	sp, #20
 80080c0:	af00      	add	r7, sp, #0
 80080c2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80080c4:	2300      	movs	r3, #0
 80080c6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	3301      	adds	r3, #1
 80080cc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	4a11      	ldr	r2, [pc, #68]	; (8008118 <USB_FlushRxFifo+0x5c>)
 80080d2:	4293      	cmp	r3, r2
 80080d4:	d901      	bls.n	80080da <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80080d6:	2303      	movs	r3, #3
 80080d8:	e018      	b.n	800810c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	691b      	ldr	r3, [r3, #16]
 80080de:	2b00      	cmp	r3, #0
 80080e0:	daf2      	bge.n	80080c8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80080e2:	2300      	movs	r3, #0
 80080e4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	2210      	movs	r2, #16
 80080ea:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	3301      	adds	r3, #1
 80080f0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	4a08      	ldr	r2, [pc, #32]	; (8008118 <USB_FlushRxFifo+0x5c>)
 80080f6:	4293      	cmp	r3, r2
 80080f8:	d901      	bls.n	80080fe <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80080fa:	2303      	movs	r3, #3
 80080fc:	e006      	b.n	800810c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	691b      	ldr	r3, [r3, #16]
 8008102:	f003 0310 	and.w	r3, r3, #16
 8008106:	2b10      	cmp	r3, #16
 8008108:	d0f0      	beq.n	80080ec <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800810a:	2300      	movs	r3, #0
}
 800810c:	4618      	mov	r0, r3
 800810e:	3714      	adds	r7, #20
 8008110:	46bd      	mov	sp, r7
 8008112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008116:	4770      	bx	lr
 8008118:	00030d40 	.word	0x00030d40

0800811c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800811c:	b480      	push	{r7}
 800811e:	b085      	sub	sp, #20
 8008120:	af00      	add	r7, sp, #0
 8008122:	6078      	str	r0, [r7, #4]
 8008124:	460b      	mov	r3, r1
 8008126:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008132:	681a      	ldr	r2, [r3, #0]
 8008134:	78fb      	ldrb	r3, [r7, #3]
 8008136:	68f9      	ldr	r1, [r7, #12]
 8008138:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800813c:	4313      	orrs	r3, r2
 800813e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8008140:	2300      	movs	r3, #0
}
 8008142:	4618      	mov	r0, r3
 8008144:	3714      	adds	r7, #20
 8008146:	46bd      	mov	sp, r7
 8008148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800814c:	4770      	bx	lr

0800814e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800814e:	b480      	push	{r7}
 8008150:	b087      	sub	sp, #28
 8008152:	af00      	add	r7, sp, #0
 8008154:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800815a:	693b      	ldr	r3, [r7, #16]
 800815c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008160:	689b      	ldr	r3, [r3, #8]
 8008162:	f003 0306 	and.w	r3, r3, #6
 8008166:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	2b00      	cmp	r3, #0
 800816c:	d102      	bne.n	8008174 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800816e:	2300      	movs	r3, #0
 8008170:	75fb      	strb	r3, [r7, #23]
 8008172:	e00a      	b.n	800818a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	2b02      	cmp	r3, #2
 8008178:	d002      	beq.n	8008180 <USB_GetDevSpeed+0x32>
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	2b06      	cmp	r3, #6
 800817e:	d102      	bne.n	8008186 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8008180:	2302      	movs	r3, #2
 8008182:	75fb      	strb	r3, [r7, #23]
 8008184:	e001      	b.n	800818a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8008186:	230f      	movs	r3, #15
 8008188:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800818a:	7dfb      	ldrb	r3, [r7, #23]
}
 800818c:	4618      	mov	r0, r3
 800818e:	371c      	adds	r7, #28
 8008190:	46bd      	mov	sp, r7
 8008192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008196:	4770      	bx	lr

08008198 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008198:	b480      	push	{r7}
 800819a:	b085      	sub	sp, #20
 800819c:	af00      	add	r7, sp, #0
 800819e:	6078      	str	r0, [r7, #4]
 80081a0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80081a6:	683b      	ldr	r3, [r7, #0]
 80081a8:	781b      	ldrb	r3, [r3, #0]
 80081aa:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80081ac:	683b      	ldr	r3, [r7, #0]
 80081ae:	785b      	ldrb	r3, [r3, #1]
 80081b0:	2b01      	cmp	r3, #1
 80081b2:	d13a      	bne.n	800822a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80081ba:	69da      	ldr	r2, [r3, #28]
 80081bc:	683b      	ldr	r3, [r7, #0]
 80081be:	781b      	ldrb	r3, [r3, #0]
 80081c0:	f003 030f 	and.w	r3, r3, #15
 80081c4:	2101      	movs	r1, #1
 80081c6:	fa01 f303 	lsl.w	r3, r1, r3
 80081ca:	b29b      	uxth	r3, r3
 80081cc:	68f9      	ldr	r1, [r7, #12]
 80081ce:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80081d2:	4313      	orrs	r3, r2
 80081d4:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80081d6:	68bb      	ldr	r3, [r7, #8]
 80081d8:	015a      	lsls	r2, r3, #5
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	4413      	add	r3, r2
 80081de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	d155      	bne.n	8008298 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80081ec:	68bb      	ldr	r3, [r7, #8]
 80081ee:	015a      	lsls	r2, r3, #5
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	4413      	add	r3, r2
 80081f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80081f8:	681a      	ldr	r2, [r3, #0]
 80081fa:	683b      	ldr	r3, [r7, #0]
 80081fc:	68db      	ldr	r3, [r3, #12]
 80081fe:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8008202:	683b      	ldr	r3, [r7, #0]
 8008204:	791b      	ldrb	r3, [r3, #4]
 8008206:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008208:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800820a:	68bb      	ldr	r3, [r7, #8]
 800820c:	059b      	lsls	r3, r3, #22
 800820e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008210:	4313      	orrs	r3, r2
 8008212:	68ba      	ldr	r2, [r7, #8]
 8008214:	0151      	lsls	r1, r2, #5
 8008216:	68fa      	ldr	r2, [r7, #12]
 8008218:	440a      	add	r2, r1
 800821a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800821e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008222:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008226:	6013      	str	r3, [r2, #0]
 8008228:	e036      	b.n	8008298 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008230:	69da      	ldr	r2, [r3, #28]
 8008232:	683b      	ldr	r3, [r7, #0]
 8008234:	781b      	ldrb	r3, [r3, #0]
 8008236:	f003 030f 	and.w	r3, r3, #15
 800823a:	2101      	movs	r1, #1
 800823c:	fa01 f303 	lsl.w	r3, r1, r3
 8008240:	041b      	lsls	r3, r3, #16
 8008242:	68f9      	ldr	r1, [r7, #12]
 8008244:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008248:	4313      	orrs	r3, r2
 800824a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800824c:	68bb      	ldr	r3, [r7, #8]
 800824e:	015a      	lsls	r2, r3, #5
 8008250:	68fb      	ldr	r3, [r7, #12]
 8008252:	4413      	add	r3, r2
 8008254:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800825e:	2b00      	cmp	r3, #0
 8008260:	d11a      	bne.n	8008298 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8008262:	68bb      	ldr	r3, [r7, #8]
 8008264:	015a      	lsls	r2, r3, #5
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	4413      	add	r3, r2
 800826a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800826e:	681a      	ldr	r2, [r3, #0]
 8008270:	683b      	ldr	r3, [r7, #0]
 8008272:	68db      	ldr	r3, [r3, #12]
 8008274:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8008278:	683b      	ldr	r3, [r7, #0]
 800827a:	791b      	ldrb	r3, [r3, #4]
 800827c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800827e:	430b      	orrs	r3, r1
 8008280:	4313      	orrs	r3, r2
 8008282:	68ba      	ldr	r2, [r7, #8]
 8008284:	0151      	lsls	r1, r2, #5
 8008286:	68fa      	ldr	r2, [r7, #12]
 8008288:	440a      	add	r2, r1
 800828a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800828e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008292:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008296:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8008298:	2300      	movs	r3, #0
}
 800829a:	4618      	mov	r0, r3
 800829c:	3714      	adds	r7, #20
 800829e:	46bd      	mov	sp, r7
 80082a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082a4:	4770      	bx	lr
	...

080082a8 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80082a8:	b480      	push	{r7}
 80082aa:	b085      	sub	sp, #20
 80082ac:	af00      	add	r7, sp, #0
 80082ae:	6078      	str	r0, [r7, #4]
 80082b0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80082b6:	683b      	ldr	r3, [r7, #0]
 80082b8:	781b      	ldrb	r3, [r3, #0]
 80082ba:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80082bc:	683b      	ldr	r3, [r7, #0]
 80082be:	785b      	ldrb	r3, [r3, #1]
 80082c0:	2b01      	cmp	r3, #1
 80082c2:	d161      	bne.n	8008388 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80082c4:	68bb      	ldr	r3, [r7, #8]
 80082c6:	015a      	lsls	r2, r3, #5
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	4413      	add	r3, r2
 80082cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80082d6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80082da:	d11f      	bne.n	800831c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80082dc:	68bb      	ldr	r3, [r7, #8]
 80082de:	015a      	lsls	r2, r3, #5
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	4413      	add	r3, r2
 80082e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	68ba      	ldr	r2, [r7, #8]
 80082ec:	0151      	lsls	r1, r2, #5
 80082ee:	68fa      	ldr	r2, [r7, #12]
 80082f0:	440a      	add	r2, r1
 80082f2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80082f6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80082fa:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80082fc:	68bb      	ldr	r3, [r7, #8]
 80082fe:	015a      	lsls	r2, r3, #5
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	4413      	add	r3, r2
 8008304:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	68ba      	ldr	r2, [r7, #8]
 800830c:	0151      	lsls	r1, r2, #5
 800830e:	68fa      	ldr	r2, [r7, #12]
 8008310:	440a      	add	r2, r1
 8008312:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008316:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800831a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008322:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008324:	683b      	ldr	r3, [r7, #0]
 8008326:	781b      	ldrb	r3, [r3, #0]
 8008328:	f003 030f 	and.w	r3, r3, #15
 800832c:	2101      	movs	r1, #1
 800832e:	fa01 f303 	lsl.w	r3, r1, r3
 8008332:	b29b      	uxth	r3, r3
 8008334:	43db      	mvns	r3, r3
 8008336:	68f9      	ldr	r1, [r7, #12]
 8008338:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800833c:	4013      	ands	r3, r2
 800833e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008346:	69da      	ldr	r2, [r3, #28]
 8008348:	683b      	ldr	r3, [r7, #0]
 800834a:	781b      	ldrb	r3, [r3, #0]
 800834c:	f003 030f 	and.w	r3, r3, #15
 8008350:	2101      	movs	r1, #1
 8008352:	fa01 f303 	lsl.w	r3, r1, r3
 8008356:	b29b      	uxth	r3, r3
 8008358:	43db      	mvns	r3, r3
 800835a:	68f9      	ldr	r1, [r7, #12]
 800835c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008360:	4013      	ands	r3, r2
 8008362:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8008364:	68bb      	ldr	r3, [r7, #8]
 8008366:	015a      	lsls	r2, r3, #5
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	4413      	add	r3, r2
 800836c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008370:	681a      	ldr	r2, [r3, #0]
 8008372:	68bb      	ldr	r3, [r7, #8]
 8008374:	0159      	lsls	r1, r3, #5
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	440b      	add	r3, r1
 800837a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800837e:	4619      	mov	r1, r3
 8008380:	4b35      	ldr	r3, [pc, #212]	; (8008458 <USB_DeactivateEndpoint+0x1b0>)
 8008382:	4013      	ands	r3, r2
 8008384:	600b      	str	r3, [r1, #0]
 8008386:	e060      	b.n	800844a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008388:	68bb      	ldr	r3, [r7, #8]
 800838a:	015a      	lsls	r2, r3, #5
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	4413      	add	r3, r2
 8008390:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800839a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800839e:	d11f      	bne.n	80083e0 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80083a0:	68bb      	ldr	r3, [r7, #8]
 80083a2:	015a      	lsls	r2, r3, #5
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	4413      	add	r3, r2
 80083a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	68ba      	ldr	r2, [r7, #8]
 80083b0:	0151      	lsls	r1, r2, #5
 80083b2:	68fa      	ldr	r2, [r7, #12]
 80083b4:	440a      	add	r2, r1
 80083b6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80083ba:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80083be:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80083c0:	68bb      	ldr	r3, [r7, #8]
 80083c2:	015a      	lsls	r2, r3, #5
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	4413      	add	r3, r2
 80083c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	68ba      	ldr	r2, [r7, #8]
 80083d0:	0151      	lsls	r1, r2, #5
 80083d2:	68fa      	ldr	r2, [r7, #12]
 80083d4:	440a      	add	r2, r1
 80083d6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80083da:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80083de:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80083e6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80083e8:	683b      	ldr	r3, [r7, #0]
 80083ea:	781b      	ldrb	r3, [r3, #0]
 80083ec:	f003 030f 	and.w	r3, r3, #15
 80083f0:	2101      	movs	r1, #1
 80083f2:	fa01 f303 	lsl.w	r3, r1, r3
 80083f6:	041b      	lsls	r3, r3, #16
 80083f8:	43db      	mvns	r3, r3
 80083fa:	68f9      	ldr	r1, [r7, #12]
 80083fc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008400:	4013      	ands	r3, r2
 8008402:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800840a:	69da      	ldr	r2, [r3, #28]
 800840c:	683b      	ldr	r3, [r7, #0]
 800840e:	781b      	ldrb	r3, [r3, #0]
 8008410:	f003 030f 	and.w	r3, r3, #15
 8008414:	2101      	movs	r1, #1
 8008416:	fa01 f303 	lsl.w	r3, r1, r3
 800841a:	041b      	lsls	r3, r3, #16
 800841c:	43db      	mvns	r3, r3
 800841e:	68f9      	ldr	r1, [r7, #12]
 8008420:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008424:	4013      	ands	r3, r2
 8008426:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8008428:	68bb      	ldr	r3, [r7, #8]
 800842a:	015a      	lsls	r2, r3, #5
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	4413      	add	r3, r2
 8008430:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008434:	681a      	ldr	r2, [r3, #0]
 8008436:	68bb      	ldr	r3, [r7, #8]
 8008438:	0159      	lsls	r1, r3, #5
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	440b      	add	r3, r1
 800843e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008442:	4619      	mov	r1, r3
 8008444:	4b05      	ldr	r3, [pc, #20]	; (800845c <USB_DeactivateEndpoint+0x1b4>)
 8008446:	4013      	ands	r3, r2
 8008448:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800844a:	2300      	movs	r3, #0
}
 800844c:	4618      	mov	r0, r3
 800844e:	3714      	adds	r7, #20
 8008450:	46bd      	mov	sp, r7
 8008452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008456:	4770      	bx	lr
 8008458:	ec337800 	.word	0xec337800
 800845c:	eff37800 	.word	0xeff37800

08008460 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8008460:	b580      	push	{r7, lr}
 8008462:	b08a      	sub	sp, #40	; 0x28
 8008464:	af02      	add	r7, sp, #8
 8008466:	60f8      	str	r0, [r7, #12]
 8008468:	60b9      	str	r1, [r7, #8]
 800846a:	4613      	mov	r3, r2
 800846c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8008472:	68bb      	ldr	r3, [r7, #8]
 8008474:	781b      	ldrb	r3, [r3, #0]
 8008476:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008478:	68bb      	ldr	r3, [r7, #8]
 800847a:	785b      	ldrb	r3, [r3, #1]
 800847c:	2b01      	cmp	r3, #1
 800847e:	f040 815c 	bne.w	800873a <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8008482:	68bb      	ldr	r3, [r7, #8]
 8008484:	699b      	ldr	r3, [r3, #24]
 8008486:	2b00      	cmp	r3, #0
 8008488:	d132      	bne.n	80084f0 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800848a:	69bb      	ldr	r3, [r7, #24]
 800848c:	015a      	lsls	r2, r3, #5
 800848e:	69fb      	ldr	r3, [r7, #28]
 8008490:	4413      	add	r3, r2
 8008492:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008496:	691b      	ldr	r3, [r3, #16]
 8008498:	69ba      	ldr	r2, [r7, #24]
 800849a:	0151      	lsls	r1, r2, #5
 800849c:	69fa      	ldr	r2, [r7, #28]
 800849e:	440a      	add	r2, r1
 80084a0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80084a4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80084a8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80084ac:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80084ae:	69bb      	ldr	r3, [r7, #24]
 80084b0:	015a      	lsls	r2, r3, #5
 80084b2:	69fb      	ldr	r3, [r7, #28]
 80084b4:	4413      	add	r3, r2
 80084b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80084ba:	691b      	ldr	r3, [r3, #16]
 80084bc:	69ba      	ldr	r2, [r7, #24]
 80084be:	0151      	lsls	r1, r2, #5
 80084c0:	69fa      	ldr	r2, [r7, #28]
 80084c2:	440a      	add	r2, r1
 80084c4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80084c8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80084cc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80084ce:	69bb      	ldr	r3, [r7, #24]
 80084d0:	015a      	lsls	r2, r3, #5
 80084d2:	69fb      	ldr	r3, [r7, #28]
 80084d4:	4413      	add	r3, r2
 80084d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80084da:	691b      	ldr	r3, [r3, #16]
 80084dc:	69ba      	ldr	r2, [r7, #24]
 80084de:	0151      	lsls	r1, r2, #5
 80084e0:	69fa      	ldr	r2, [r7, #28]
 80084e2:	440a      	add	r2, r1
 80084e4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80084e8:	0cdb      	lsrs	r3, r3, #19
 80084ea:	04db      	lsls	r3, r3, #19
 80084ec:	6113      	str	r3, [r2, #16]
 80084ee:	e074      	b.n	80085da <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80084f0:	69bb      	ldr	r3, [r7, #24]
 80084f2:	015a      	lsls	r2, r3, #5
 80084f4:	69fb      	ldr	r3, [r7, #28]
 80084f6:	4413      	add	r3, r2
 80084f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80084fc:	691b      	ldr	r3, [r3, #16]
 80084fe:	69ba      	ldr	r2, [r7, #24]
 8008500:	0151      	lsls	r1, r2, #5
 8008502:	69fa      	ldr	r2, [r7, #28]
 8008504:	440a      	add	r2, r1
 8008506:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800850a:	0cdb      	lsrs	r3, r3, #19
 800850c:	04db      	lsls	r3, r3, #19
 800850e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008510:	69bb      	ldr	r3, [r7, #24]
 8008512:	015a      	lsls	r2, r3, #5
 8008514:	69fb      	ldr	r3, [r7, #28]
 8008516:	4413      	add	r3, r2
 8008518:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800851c:	691b      	ldr	r3, [r3, #16]
 800851e:	69ba      	ldr	r2, [r7, #24]
 8008520:	0151      	lsls	r1, r2, #5
 8008522:	69fa      	ldr	r2, [r7, #28]
 8008524:	440a      	add	r2, r1
 8008526:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800852a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800852e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008532:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8008534:	69bb      	ldr	r3, [r7, #24]
 8008536:	015a      	lsls	r2, r3, #5
 8008538:	69fb      	ldr	r3, [r7, #28]
 800853a:	4413      	add	r3, r2
 800853c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008540:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8008542:	68bb      	ldr	r3, [r7, #8]
 8008544:	6999      	ldr	r1, [r3, #24]
 8008546:	68bb      	ldr	r3, [r7, #8]
 8008548:	68db      	ldr	r3, [r3, #12]
 800854a:	440b      	add	r3, r1
 800854c:	1e59      	subs	r1, r3, #1
 800854e:	68bb      	ldr	r3, [r7, #8]
 8008550:	68db      	ldr	r3, [r3, #12]
 8008552:	fbb1 f3f3 	udiv	r3, r1, r3
 8008556:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8008558:	4b9d      	ldr	r3, [pc, #628]	; (80087d0 <USB_EPStartXfer+0x370>)
 800855a:	400b      	ands	r3, r1
 800855c:	69b9      	ldr	r1, [r7, #24]
 800855e:	0148      	lsls	r0, r1, #5
 8008560:	69f9      	ldr	r1, [r7, #28]
 8008562:	4401      	add	r1, r0
 8008564:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8008568:	4313      	orrs	r3, r2
 800856a:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800856c:	69bb      	ldr	r3, [r7, #24]
 800856e:	015a      	lsls	r2, r3, #5
 8008570:	69fb      	ldr	r3, [r7, #28]
 8008572:	4413      	add	r3, r2
 8008574:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008578:	691a      	ldr	r2, [r3, #16]
 800857a:	68bb      	ldr	r3, [r7, #8]
 800857c:	699b      	ldr	r3, [r3, #24]
 800857e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008582:	69b9      	ldr	r1, [r7, #24]
 8008584:	0148      	lsls	r0, r1, #5
 8008586:	69f9      	ldr	r1, [r7, #28]
 8008588:	4401      	add	r1, r0
 800858a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800858e:	4313      	orrs	r3, r2
 8008590:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8008592:	68bb      	ldr	r3, [r7, #8]
 8008594:	791b      	ldrb	r3, [r3, #4]
 8008596:	2b01      	cmp	r3, #1
 8008598:	d11f      	bne.n	80085da <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800859a:	69bb      	ldr	r3, [r7, #24]
 800859c:	015a      	lsls	r2, r3, #5
 800859e:	69fb      	ldr	r3, [r7, #28]
 80085a0:	4413      	add	r3, r2
 80085a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80085a6:	691b      	ldr	r3, [r3, #16]
 80085a8:	69ba      	ldr	r2, [r7, #24]
 80085aa:	0151      	lsls	r1, r2, #5
 80085ac:	69fa      	ldr	r2, [r7, #28]
 80085ae:	440a      	add	r2, r1
 80085b0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80085b4:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80085b8:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80085ba:	69bb      	ldr	r3, [r7, #24]
 80085bc:	015a      	lsls	r2, r3, #5
 80085be:	69fb      	ldr	r3, [r7, #28]
 80085c0:	4413      	add	r3, r2
 80085c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80085c6:	691b      	ldr	r3, [r3, #16]
 80085c8:	69ba      	ldr	r2, [r7, #24]
 80085ca:	0151      	lsls	r1, r2, #5
 80085cc:	69fa      	ldr	r2, [r7, #28]
 80085ce:	440a      	add	r2, r1
 80085d0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80085d4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80085d8:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80085da:	79fb      	ldrb	r3, [r7, #7]
 80085dc:	2b01      	cmp	r3, #1
 80085de:	d14b      	bne.n	8008678 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80085e0:	68bb      	ldr	r3, [r7, #8]
 80085e2:	695b      	ldr	r3, [r3, #20]
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d009      	beq.n	80085fc <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80085e8:	69bb      	ldr	r3, [r7, #24]
 80085ea:	015a      	lsls	r2, r3, #5
 80085ec:	69fb      	ldr	r3, [r7, #28]
 80085ee:	4413      	add	r3, r2
 80085f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80085f4:	461a      	mov	r2, r3
 80085f6:	68bb      	ldr	r3, [r7, #8]
 80085f8:	695b      	ldr	r3, [r3, #20]
 80085fa:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80085fc:	68bb      	ldr	r3, [r7, #8]
 80085fe:	791b      	ldrb	r3, [r3, #4]
 8008600:	2b01      	cmp	r3, #1
 8008602:	d128      	bne.n	8008656 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008604:	69fb      	ldr	r3, [r7, #28]
 8008606:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800860a:	689b      	ldr	r3, [r3, #8]
 800860c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008610:	2b00      	cmp	r3, #0
 8008612:	d110      	bne.n	8008636 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8008614:	69bb      	ldr	r3, [r7, #24]
 8008616:	015a      	lsls	r2, r3, #5
 8008618:	69fb      	ldr	r3, [r7, #28]
 800861a:	4413      	add	r3, r2
 800861c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	69ba      	ldr	r2, [r7, #24]
 8008624:	0151      	lsls	r1, r2, #5
 8008626:	69fa      	ldr	r2, [r7, #28]
 8008628:	440a      	add	r2, r1
 800862a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800862e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008632:	6013      	str	r3, [r2, #0]
 8008634:	e00f      	b.n	8008656 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8008636:	69bb      	ldr	r3, [r7, #24]
 8008638:	015a      	lsls	r2, r3, #5
 800863a:	69fb      	ldr	r3, [r7, #28]
 800863c:	4413      	add	r3, r2
 800863e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	69ba      	ldr	r2, [r7, #24]
 8008646:	0151      	lsls	r1, r2, #5
 8008648:	69fa      	ldr	r2, [r7, #28]
 800864a:	440a      	add	r2, r1
 800864c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008650:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008654:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008656:	69bb      	ldr	r3, [r7, #24]
 8008658:	015a      	lsls	r2, r3, #5
 800865a:	69fb      	ldr	r3, [r7, #28]
 800865c:	4413      	add	r3, r2
 800865e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	69ba      	ldr	r2, [r7, #24]
 8008666:	0151      	lsls	r1, r2, #5
 8008668:	69fa      	ldr	r2, [r7, #28]
 800866a:	440a      	add	r2, r1
 800866c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008670:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008674:	6013      	str	r3, [r2, #0]
 8008676:	e133      	b.n	80088e0 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008678:	69bb      	ldr	r3, [r7, #24]
 800867a:	015a      	lsls	r2, r3, #5
 800867c:	69fb      	ldr	r3, [r7, #28]
 800867e:	4413      	add	r3, r2
 8008680:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	69ba      	ldr	r2, [r7, #24]
 8008688:	0151      	lsls	r1, r2, #5
 800868a:	69fa      	ldr	r2, [r7, #28]
 800868c:	440a      	add	r2, r1
 800868e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008692:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008696:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008698:	68bb      	ldr	r3, [r7, #8]
 800869a:	791b      	ldrb	r3, [r3, #4]
 800869c:	2b01      	cmp	r3, #1
 800869e:	d015      	beq.n	80086cc <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80086a0:	68bb      	ldr	r3, [r7, #8]
 80086a2:	699b      	ldr	r3, [r3, #24]
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	f000 811b 	beq.w	80088e0 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80086aa:	69fb      	ldr	r3, [r7, #28]
 80086ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80086b0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80086b2:	68bb      	ldr	r3, [r7, #8]
 80086b4:	781b      	ldrb	r3, [r3, #0]
 80086b6:	f003 030f 	and.w	r3, r3, #15
 80086ba:	2101      	movs	r1, #1
 80086bc:	fa01 f303 	lsl.w	r3, r1, r3
 80086c0:	69f9      	ldr	r1, [r7, #28]
 80086c2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80086c6:	4313      	orrs	r3, r2
 80086c8:	634b      	str	r3, [r1, #52]	; 0x34
 80086ca:	e109      	b.n	80088e0 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80086cc:	69fb      	ldr	r3, [r7, #28]
 80086ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80086d2:	689b      	ldr	r3, [r3, #8]
 80086d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80086d8:	2b00      	cmp	r3, #0
 80086da:	d110      	bne.n	80086fe <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80086dc:	69bb      	ldr	r3, [r7, #24]
 80086de:	015a      	lsls	r2, r3, #5
 80086e0:	69fb      	ldr	r3, [r7, #28]
 80086e2:	4413      	add	r3, r2
 80086e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	69ba      	ldr	r2, [r7, #24]
 80086ec:	0151      	lsls	r1, r2, #5
 80086ee:	69fa      	ldr	r2, [r7, #28]
 80086f0:	440a      	add	r2, r1
 80086f2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80086f6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80086fa:	6013      	str	r3, [r2, #0]
 80086fc:	e00f      	b.n	800871e <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80086fe:	69bb      	ldr	r3, [r7, #24]
 8008700:	015a      	lsls	r2, r3, #5
 8008702:	69fb      	ldr	r3, [r7, #28]
 8008704:	4413      	add	r3, r2
 8008706:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	69ba      	ldr	r2, [r7, #24]
 800870e:	0151      	lsls	r1, r2, #5
 8008710:	69fa      	ldr	r2, [r7, #28]
 8008712:	440a      	add	r2, r1
 8008714:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008718:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800871c:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800871e:	68bb      	ldr	r3, [r7, #8]
 8008720:	6919      	ldr	r1, [r3, #16]
 8008722:	68bb      	ldr	r3, [r7, #8]
 8008724:	781a      	ldrb	r2, [r3, #0]
 8008726:	68bb      	ldr	r3, [r7, #8]
 8008728:	699b      	ldr	r3, [r3, #24]
 800872a:	b298      	uxth	r0, r3
 800872c:	79fb      	ldrb	r3, [r7, #7]
 800872e:	9300      	str	r3, [sp, #0]
 8008730:	4603      	mov	r3, r0
 8008732:	68f8      	ldr	r0, [r7, #12]
 8008734:	f000 fade 	bl	8008cf4 <USB_WritePacket>
 8008738:	e0d2      	b.n	80088e0 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800873a:	69bb      	ldr	r3, [r7, #24]
 800873c:	015a      	lsls	r2, r3, #5
 800873e:	69fb      	ldr	r3, [r7, #28]
 8008740:	4413      	add	r3, r2
 8008742:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008746:	691b      	ldr	r3, [r3, #16]
 8008748:	69ba      	ldr	r2, [r7, #24]
 800874a:	0151      	lsls	r1, r2, #5
 800874c:	69fa      	ldr	r2, [r7, #28]
 800874e:	440a      	add	r2, r1
 8008750:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008754:	0cdb      	lsrs	r3, r3, #19
 8008756:	04db      	lsls	r3, r3, #19
 8008758:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800875a:	69bb      	ldr	r3, [r7, #24]
 800875c:	015a      	lsls	r2, r3, #5
 800875e:	69fb      	ldr	r3, [r7, #28]
 8008760:	4413      	add	r3, r2
 8008762:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008766:	691b      	ldr	r3, [r3, #16]
 8008768:	69ba      	ldr	r2, [r7, #24]
 800876a:	0151      	lsls	r1, r2, #5
 800876c:	69fa      	ldr	r2, [r7, #28]
 800876e:	440a      	add	r2, r1
 8008770:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008774:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008778:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800877c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800877e:	68bb      	ldr	r3, [r7, #8]
 8008780:	699b      	ldr	r3, [r3, #24]
 8008782:	2b00      	cmp	r3, #0
 8008784:	d126      	bne.n	80087d4 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8008786:	69bb      	ldr	r3, [r7, #24]
 8008788:	015a      	lsls	r2, r3, #5
 800878a:	69fb      	ldr	r3, [r7, #28]
 800878c:	4413      	add	r3, r2
 800878e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008792:	691a      	ldr	r2, [r3, #16]
 8008794:	68bb      	ldr	r3, [r7, #8]
 8008796:	68db      	ldr	r3, [r3, #12]
 8008798:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800879c:	69b9      	ldr	r1, [r7, #24]
 800879e:	0148      	lsls	r0, r1, #5
 80087a0:	69f9      	ldr	r1, [r7, #28]
 80087a2:	4401      	add	r1, r0
 80087a4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80087a8:	4313      	orrs	r3, r2
 80087aa:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80087ac:	69bb      	ldr	r3, [r7, #24]
 80087ae:	015a      	lsls	r2, r3, #5
 80087b0:	69fb      	ldr	r3, [r7, #28]
 80087b2:	4413      	add	r3, r2
 80087b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80087b8:	691b      	ldr	r3, [r3, #16]
 80087ba:	69ba      	ldr	r2, [r7, #24]
 80087bc:	0151      	lsls	r1, r2, #5
 80087be:	69fa      	ldr	r2, [r7, #28]
 80087c0:	440a      	add	r2, r1
 80087c2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80087c6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80087ca:	6113      	str	r3, [r2, #16]
 80087cc:	e03a      	b.n	8008844 <USB_EPStartXfer+0x3e4>
 80087ce:	bf00      	nop
 80087d0:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80087d4:	68bb      	ldr	r3, [r7, #8]
 80087d6:	699a      	ldr	r2, [r3, #24]
 80087d8:	68bb      	ldr	r3, [r7, #8]
 80087da:	68db      	ldr	r3, [r3, #12]
 80087dc:	4413      	add	r3, r2
 80087de:	1e5a      	subs	r2, r3, #1
 80087e0:	68bb      	ldr	r3, [r7, #8]
 80087e2:	68db      	ldr	r3, [r3, #12]
 80087e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80087e8:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 80087ea:	68bb      	ldr	r3, [r7, #8]
 80087ec:	68db      	ldr	r3, [r3, #12]
 80087ee:	8afa      	ldrh	r2, [r7, #22]
 80087f0:	fb03 f202 	mul.w	r2, r3, r2
 80087f4:	68bb      	ldr	r3, [r7, #8]
 80087f6:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80087f8:	69bb      	ldr	r3, [r7, #24]
 80087fa:	015a      	lsls	r2, r3, #5
 80087fc:	69fb      	ldr	r3, [r7, #28]
 80087fe:	4413      	add	r3, r2
 8008800:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008804:	691a      	ldr	r2, [r3, #16]
 8008806:	8afb      	ldrh	r3, [r7, #22]
 8008808:	04d9      	lsls	r1, r3, #19
 800880a:	4b38      	ldr	r3, [pc, #224]	; (80088ec <USB_EPStartXfer+0x48c>)
 800880c:	400b      	ands	r3, r1
 800880e:	69b9      	ldr	r1, [r7, #24]
 8008810:	0148      	lsls	r0, r1, #5
 8008812:	69f9      	ldr	r1, [r7, #28]
 8008814:	4401      	add	r1, r0
 8008816:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800881a:	4313      	orrs	r3, r2
 800881c:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800881e:	69bb      	ldr	r3, [r7, #24]
 8008820:	015a      	lsls	r2, r3, #5
 8008822:	69fb      	ldr	r3, [r7, #28]
 8008824:	4413      	add	r3, r2
 8008826:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800882a:	691a      	ldr	r2, [r3, #16]
 800882c:	68bb      	ldr	r3, [r7, #8]
 800882e:	69db      	ldr	r3, [r3, #28]
 8008830:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008834:	69b9      	ldr	r1, [r7, #24]
 8008836:	0148      	lsls	r0, r1, #5
 8008838:	69f9      	ldr	r1, [r7, #28]
 800883a:	4401      	add	r1, r0
 800883c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008840:	4313      	orrs	r3, r2
 8008842:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8008844:	79fb      	ldrb	r3, [r7, #7]
 8008846:	2b01      	cmp	r3, #1
 8008848:	d10d      	bne.n	8008866 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800884a:	68bb      	ldr	r3, [r7, #8]
 800884c:	691b      	ldr	r3, [r3, #16]
 800884e:	2b00      	cmp	r3, #0
 8008850:	d009      	beq.n	8008866 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8008852:	68bb      	ldr	r3, [r7, #8]
 8008854:	6919      	ldr	r1, [r3, #16]
 8008856:	69bb      	ldr	r3, [r7, #24]
 8008858:	015a      	lsls	r2, r3, #5
 800885a:	69fb      	ldr	r3, [r7, #28]
 800885c:	4413      	add	r3, r2
 800885e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008862:	460a      	mov	r2, r1
 8008864:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8008866:	68bb      	ldr	r3, [r7, #8]
 8008868:	791b      	ldrb	r3, [r3, #4]
 800886a:	2b01      	cmp	r3, #1
 800886c:	d128      	bne.n	80088c0 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800886e:	69fb      	ldr	r3, [r7, #28]
 8008870:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008874:	689b      	ldr	r3, [r3, #8]
 8008876:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800887a:	2b00      	cmp	r3, #0
 800887c:	d110      	bne.n	80088a0 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800887e:	69bb      	ldr	r3, [r7, #24]
 8008880:	015a      	lsls	r2, r3, #5
 8008882:	69fb      	ldr	r3, [r7, #28]
 8008884:	4413      	add	r3, r2
 8008886:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	69ba      	ldr	r2, [r7, #24]
 800888e:	0151      	lsls	r1, r2, #5
 8008890:	69fa      	ldr	r2, [r7, #28]
 8008892:	440a      	add	r2, r1
 8008894:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008898:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800889c:	6013      	str	r3, [r2, #0]
 800889e:	e00f      	b.n	80088c0 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80088a0:	69bb      	ldr	r3, [r7, #24]
 80088a2:	015a      	lsls	r2, r3, #5
 80088a4:	69fb      	ldr	r3, [r7, #28]
 80088a6:	4413      	add	r3, r2
 80088a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	69ba      	ldr	r2, [r7, #24]
 80088b0:	0151      	lsls	r1, r2, #5
 80088b2:	69fa      	ldr	r2, [r7, #28]
 80088b4:	440a      	add	r2, r1
 80088b6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80088ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80088be:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80088c0:	69bb      	ldr	r3, [r7, #24]
 80088c2:	015a      	lsls	r2, r3, #5
 80088c4:	69fb      	ldr	r3, [r7, #28]
 80088c6:	4413      	add	r3, r2
 80088c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	69ba      	ldr	r2, [r7, #24]
 80088d0:	0151      	lsls	r1, r2, #5
 80088d2:	69fa      	ldr	r2, [r7, #28]
 80088d4:	440a      	add	r2, r1
 80088d6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80088da:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80088de:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80088e0:	2300      	movs	r3, #0
}
 80088e2:	4618      	mov	r0, r3
 80088e4:	3720      	adds	r7, #32
 80088e6:	46bd      	mov	sp, r7
 80088e8:	bd80      	pop	{r7, pc}
 80088ea:	bf00      	nop
 80088ec:	1ff80000 	.word	0x1ff80000

080088f0 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80088f0:	b480      	push	{r7}
 80088f2:	b087      	sub	sp, #28
 80088f4:	af00      	add	r7, sp, #0
 80088f6:	60f8      	str	r0, [r7, #12]
 80088f8:	60b9      	str	r1, [r7, #8]
 80088fa:	4613      	mov	r3, r2
 80088fc:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8008902:	68bb      	ldr	r3, [r7, #8]
 8008904:	781b      	ldrb	r3, [r3, #0]
 8008906:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008908:	68bb      	ldr	r3, [r7, #8]
 800890a:	785b      	ldrb	r3, [r3, #1]
 800890c:	2b01      	cmp	r3, #1
 800890e:	f040 80ce 	bne.w	8008aae <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8008912:	68bb      	ldr	r3, [r7, #8]
 8008914:	699b      	ldr	r3, [r3, #24]
 8008916:	2b00      	cmp	r3, #0
 8008918:	d132      	bne.n	8008980 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800891a:	693b      	ldr	r3, [r7, #16]
 800891c:	015a      	lsls	r2, r3, #5
 800891e:	697b      	ldr	r3, [r7, #20]
 8008920:	4413      	add	r3, r2
 8008922:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008926:	691b      	ldr	r3, [r3, #16]
 8008928:	693a      	ldr	r2, [r7, #16]
 800892a:	0151      	lsls	r1, r2, #5
 800892c:	697a      	ldr	r2, [r7, #20]
 800892e:	440a      	add	r2, r1
 8008930:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008934:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008938:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800893c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800893e:	693b      	ldr	r3, [r7, #16]
 8008940:	015a      	lsls	r2, r3, #5
 8008942:	697b      	ldr	r3, [r7, #20]
 8008944:	4413      	add	r3, r2
 8008946:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800894a:	691b      	ldr	r3, [r3, #16]
 800894c:	693a      	ldr	r2, [r7, #16]
 800894e:	0151      	lsls	r1, r2, #5
 8008950:	697a      	ldr	r2, [r7, #20]
 8008952:	440a      	add	r2, r1
 8008954:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008958:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800895c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800895e:	693b      	ldr	r3, [r7, #16]
 8008960:	015a      	lsls	r2, r3, #5
 8008962:	697b      	ldr	r3, [r7, #20]
 8008964:	4413      	add	r3, r2
 8008966:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800896a:	691b      	ldr	r3, [r3, #16]
 800896c:	693a      	ldr	r2, [r7, #16]
 800896e:	0151      	lsls	r1, r2, #5
 8008970:	697a      	ldr	r2, [r7, #20]
 8008972:	440a      	add	r2, r1
 8008974:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008978:	0cdb      	lsrs	r3, r3, #19
 800897a:	04db      	lsls	r3, r3, #19
 800897c:	6113      	str	r3, [r2, #16]
 800897e:	e04e      	b.n	8008a1e <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008980:	693b      	ldr	r3, [r7, #16]
 8008982:	015a      	lsls	r2, r3, #5
 8008984:	697b      	ldr	r3, [r7, #20]
 8008986:	4413      	add	r3, r2
 8008988:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800898c:	691b      	ldr	r3, [r3, #16]
 800898e:	693a      	ldr	r2, [r7, #16]
 8008990:	0151      	lsls	r1, r2, #5
 8008992:	697a      	ldr	r2, [r7, #20]
 8008994:	440a      	add	r2, r1
 8008996:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800899a:	0cdb      	lsrs	r3, r3, #19
 800899c:	04db      	lsls	r3, r3, #19
 800899e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80089a0:	693b      	ldr	r3, [r7, #16]
 80089a2:	015a      	lsls	r2, r3, #5
 80089a4:	697b      	ldr	r3, [r7, #20]
 80089a6:	4413      	add	r3, r2
 80089a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80089ac:	691b      	ldr	r3, [r3, #16]
 80089ae:	693a      	ldr	r2, [r7, #16]
 80089b0:	0151      	lsls	r1, r2, #5
 80089b2:	697a      	ldr	r2, [r7, #20]
 80089b4:	440a      	add	r2, r1
 80089b6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80089ba:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80089be:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80089c2:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 80089c4:	68bb      	ldr	r3, [r7, #8]
 80089c6:	699a      	ldr	r2, [r3, #24]
 80089c8:	68bb      	ldr	r3, [r7, #8]
 80089ca:	68db      	ldr	r3, [r3, #12]
 80089cc:	429a      	cmp	r2, r3
 80089ce:	d903      	bls.n	80089d8 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 80089d0:	68bb      	ldr	r3, [r7, #8]
 80089d2:	68da      	ldr	r2, [r3, #12]
 80089d4:	68bb      	ldr	r3, [r7, #8]
 80089d6:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80089d8:	693b      	ldr	r3, [r7, #16]
 80089da:	015a      	lsls	r2, r3, #5
 80089dc:	697b      	ldr	r3, [r7, #20]
 80089de:	4413      	add	r3, r2
 80089e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80089e4:	691b      	ldr	r3, [r3, #16]
 80089e6:	693a      	ldr	r2, [r7, #16]
 80089e8:	0151      	lsls	r1, r2, #5
 80089ea:	697a      	ldr	r2, [r7, #20]
 80089ec:	440a      	add	r2, r1
 80089ee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80089f2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80089f6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80089f8:	693b      	ldr	r3, [r7, #16]
 80089fa:	015a      	lsls	r2, r3, #5
 80089fc:	697b      	ldr	r3, [r7, #20]
 80089fe:	4413      	add	r3, r2
 8008a00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a04:	691a      	ldr	r2, [r3, #16]
 8008a06:	68bb      	ldr	r3, [r7, #8]
 8008a08:	699b      	ldr	r3, [r3, #24]
 8008a0a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008a0e:	6939      	ldr	r1, [r7, #16]
 8008a10:	0148      	lsls	r0, r1, #5
 8008a12:	6979      	ldr	r1, [r7, #20]
 8008a14:	4401      	add	r1, r0
 8008a16:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8008a1a:	4313      	orrs	r3, r2
 8008a1c:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8008a1e:	79fb      	ldrb	r3, [r7, #7]
 8008a20:	2b01      	cmp	r3, #1
 8008a22:	d11e      	bne.n	8008a62 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8008a24:	68bb      	ldr	r3, [r7, #8]
 8008a26:	695b      	ldr	r3, [r3, #20]
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	d009      	beq.n	8008a40 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8008a2c:	693b      	ldr	r3, [r7, #16]
 8008a2e:	015a      	lsls	r2, r3, #5
 8008a30:	697b      	ldr	r3, [r7, #20]
 8008a32:	4413      	add	r3, r2
 8008a34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a38:	461a      	mov	r2, r3
 8008a3a:	68bb      	ldr	r3, [r7, #8]
 8008a3c:	695b      	ldr	r3, [r3, #20]
 8008a3e:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008a40:	693b      	ldr	r3, [r7, #16]
 8008a42:	015a      	lsls	r2, r3, #5
 8008a44:	697b      	ldr	r3, [r7, #20]
 8008a46:	4413      	add	r3, r2
 8008a48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	693a      	ldr	r2, [r7, #16]
 8008a50:	0151      	lsls	r1, r2, #5
 8008a52:	697a      	ldr	r2, [r7, #20]
 8008a54:	440a      	add	r2, r1
 8008a56:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008a5a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008a5e:	6013      	str	r3, [r2, #0]
 8008a60:	e097      	b.n	8008b92 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008a62:	693b      	ldr	r3, [r7, #16]
 8008a64:	015a      	lsls	r2, r3, #5
 8008a66:	697b      	ldr	r3, [r7, #20]
 8008a68:	4413      	add	r3, r2
 8008a6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	693a      	ldr	r2, [r7, #16]
 8008a72:	0151      	lsls	r1, r2, #5
 8008a74:	697a      	ldr	r2, [r7, #20]
 8008a76:	440a      	add	r2, r1
 8008a78:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008a7c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008a80:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8008a82:	68bb      	ldr	r3, [r7, #8]
 8008a84:	699b      	ldr	r3, [r3, #24]
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	f000 8083 	beq.w	8008b92 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8008a8c:	697b      	ldr	r3, [r7, #20]
 8008a8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008a92:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008a94:	68bb      	ldr	r3, [r7, #8]
 8008a96:	781b      	ldrb	r3, [r3, #0]
 8008a98:	f003 030f 	and.w	r3, r3, #15
 8008a9c:	2101      	movs	r1, #1
 8008a9e:	fa01 f303 	lsl.w	r3, r1, r3
 8008aa2:	6979      	ldr	r1, [r7, #20]
 8008aa4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008aa8:	4313      	orrs	r3, r2
 8008aaa:	634b      	str	r3, [r1, #52]	; 0x34
 8008aac:	e071      	b.n	8008b92 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8008aae:	693b      	ldr	r3, [r7, #16]
 8008ab0:	015a      	lsls	r2, r3, #5
 8008ab2:	697b      	ldr	r3, [r7, #20]
 8008ab4:	4413      	add	r3, r2
 8008ab6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008aba:	691b      	ldr	r3, [r3, #16]
 8008abc:	693a      	ldr	r2, [r7, #16]
 8008abe:	0151      	lsls	r1, r2, #5
 8008ac0:	697a      	ldr	r2, [r7, #20]
 8008ac2:	440a      	add	r2, r1
 8008ac4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008ac8:	0cdb      	lsrs	r3, r3, #19
 8008aca:	04db      	lsls	r3, r3, #19
 8008acc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8008ace:	693b      	ldr	r3, [r7, #16]
 8008ad0:	015a      	lsls	r2, r3, #5
 8008ad2:	697b      	ldr	r3, [r7, #20]
 8008ad4:	4413      	add	r3, r2
 8008ad6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008ada:	691b      	ldr	r3, [r3, #16]
 8008adc:	693a      	ldr	r2, [r7, #16]
 8008ade:	0151      	lsls	r1, r2, #5
 8008ae0:	697a      	ldr	r2, [r7, #20]
 8008ae2:	440a      	add	r2, r1
 8008ae4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008ae8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008aec:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008af0:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8008af2:	68bb      	ldr	r3, [r7, #8]
 8008af4:	699b      	ldr	r3, [r3, #24]
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d003      	beq.n	8008b02 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8008afa:	68bb      	ldr	r3, [r7, #8]
 8008afc:	68da      	ldr	r2, [r3, #12]
 8008afe:	68bb      	ldr	r3, [r7, #8]
 8008b00:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8008b02:	68bb      	ldr	r3, [r7, #8]
 8008b04:	68da      	ldr	r2, [r3, #12]
 8008b06:	68bb      	ldr	r3, [r7, #8]
 8008b08:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008b0a:	693b      	ldr	r3, [r7, #16]
 8008b0c:	015a      	lsls	r2, r3, #5
 8008b0e:	697b      	ldr	r3, [r7, #20]
 8008b10:	4413      	add	r3, r2
 8008b12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008b16:	691b      	ldr	r3, [r3, #16]
 8008b18:	693a      	ldr	r2, [r7, #16]
 8008b1a:	0151      	lsls	r1, r2, #5
 8008b1c:	697a      	ldr	r2, [r7, #20]
 8008b1e:	440a      	add	r2, r1
 8008b20:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008b24:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008b28:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8008b2a:	693b      	ldr	r3, [r7, #16]
 8008b2c:	015a      	lsls	r2, r3, #5
 8008b2e:	697b      	ldr	r3, [r7, #20]
 8008b30:	4413      	add	r3, r2
 8008b32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008b36:	691a      	ldr	r2, [r3, #16]
 8008b38:	68bb      	ldr	r3, [r7, #8]
 8008b3a:	69db      	ldr	r3, [r3, #28]
 8008b3c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008b40:	6939      	ldr	r1, [r7, #16]
 8008b42:	0148      	lsls	r0, r1, #5
 8008b44:	6979      	ldr	r1, [r7, #20]
 8008b46:	4401      	add	r1, r0
 8008b48:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008b4c:	4313      	orrs	r3, r2
 8008b4e:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8008b50:	79fb      	ldrb	r3, [r7, #7]
 8008b52:	2b01      	cmp	r3, #1
 8008b54:	d10d      	bne.n	8008b72 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8008b56:	68bb      	ldr	r3, [r7, #8]
 8008b58:	691b      	ldr	r3, [r3, #16]
 8008b5a:	2b00      	cmp	r3, #0
 8008b5c:	d009      	beq.n	8008b72 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8008b5e:	68bb      	ldr	r3, [r7, #8]
 8008b60:	6919      	ldr	r1, [r3, #16]
 8008b62:	693b      	ldr	r3, [r7, #16]
 8008b64:	015a      	lsls	r2, r3, #5
 8008b66:	697b      	ldr	r3, [r7, #20]
 8008b68:	4413      	add	r3, r2
 8008b6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008b6e:	460a      	mov	r2, r1
 8008b70:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8008b72:	693b      	ldr	r3, [r7, #16]
 8008b74:	015a      	lsls	r2, r3, #5
 8008b76:	697b      	ldr	r3, [r7, #20]
 8008b78:	4413      	add	r3, r2
 8008b7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	693a      	ldr	r2, [r7, #16]
 8008b82:	0151      	lsls	r1, r2, #5
 8008b84:	697a      	ldr	r2, [r7, #20]
 8008b86:	440a      	add	r2, r1
 8008b88:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008b8c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008b90:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008b92:	2300      	movs	r3, #0
}
 8008b94:	4618      	mov	r0, r3
 8008b96:	371c      	adds	r7, #28
 8008b98:	46bd      	mov	sp, r7
 8008b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b9e:	4770      	bx	lr

08008ba0 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008ba0:	b480      	push	{r7}
 8008ba2:	b087      	sub	sp, #28
 8008ba4:	af00      	add	r7, sp, #0
 8008ba6:	6078      	str	r0, [r7, #4]
 8008ba8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8008baa:	2300      	movs	r3, #0
 8008bac:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8008bae:	2300      	movs	r3, #0
 8008bb0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008bb6:	683b      	ldr	r3, [r7, #0]
 8008bb8:	785b      	ldrb	r3, [r3, #1]
 8008bba:	2b01      	cmp	r3, #1
 8008bbc:	d14a      	bne.n	8008c54 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008bbe:	683b      	ldr	r3, [r7, #0]
 8008bc0:	781b      	ldrb	r3, [r3, #0]
 8008bc2:	015a      	lsls	r2, r3, #5
 8008bc4:	693b      	ldr	r3, [r7, #16]
 8008bc6:	4413      	add	r3, r2
 8008bc8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008bd2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008bd6:	f040 8086 	bne.w	8008ce6 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8008bda:	683b      	ldr	r3, [r7, #0]
 8008bdc:	781b      	ldrb	r3, [r3, #0]
 8008bde:	015a      	lsls	r2, r3, #5
 8008be0:	693b      	ldr	r3, [r7, #16]
 8008be2:	4413      	add	r3, r2
 8008be4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	683a      	ldr	r2, [r7, #0]
 8008bec:	7812      	ldrb	r2, [r2, #0]
 8008bee:	0151      	lsls	r1, r2, #5
 8008bf0:	693a      	ldr	r2, [r7, #16]
 8008bf2:	440a      	add	r2, r1
 8008bf4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008bf8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008bfc:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8008bfe:	683b      	ldr	r3, [r7, #0]
 8008c00:	781b      	ldrb	r3, [r3, #0]
 8008c02:	015a      	lsls	r2, r3, #5
 8008c04:	693b      	ldr	r3, [r7, #16]
 8008c06:	4413      	add	r3, r2
 8008c08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	683a      	ldr	r2, [r7, #0]
 8008c10:	7812      	ldrb	r2, [r2, #0]
 8008c12:	0151      	lsls	r1, r2, #5
 8008c14:	693a      	ldr	r2, [r7, #16]
 8008c16:	440a      	add	r2, r1
 8008c18:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008c1c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008c20:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8008c22:	68fb      	ldr	r3, [r7, #12]
 8008c24:	3301      	adds	r3, #1
 8008c26:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8008c28:	68fb      	ldr	r3, [r7, #12]
 8008c2a:	f242 7210 	movw	r2, #10000	; 0x2710
 8008c2e:	4293      	cmp	r3, r2
 8008c30:	d902      	bls.n	8008c38 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8008c32:	2301      	movs	r3, #1
 8008c34:	75fb      	strb	r3, [r7, #23]
          break;
 8008c36:	e056      	b.n	8008ce6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8008c38:	683b      	ldr	r3, [r7, #0]
 8008c3a:	781b      	ldrb	r3, [r3, #0]
 8008c3c:	015a      	lsls	r2, r3, #5
 8008c3e:	693b      	ldr	r3, [r7, #16]
 8008c40:	4413      	add	r3, r2
 8008c42:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008c4c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008c50:	d0e7      	beq.n	8008c22 <USB_EPStopXfer+0x82>
 8008c52:	e048      	b.n	8008ce6 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008c54:	683b      	ldr	r3, [r7, #0]
 8008c56:	781b      	ldrb	r3, [r3, #0]
 8008c58:	015a      	lsls	r2, r3, #5
 8008c5a:	693b      	ldr	r3, [r7, #16]
 8008c5c:	4413      	add	r3, r2
 8008c5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008c68:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008c6c:	d13b      	bne.n	8008ce6 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8008c6e:	683b      	ldr	r3, [r7, #0]
 8008c70:	781b      	ldrb	r3, [r3, #0]
 8008c72:	015a      	lsls	r2, r3, #5
 8008c74:	693b      	ldr	r3, [r7, #16]
 8008c76:	4413      	add	r3, r2
 8008c78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	683a      	ldr	r2, [r7, #0]
 8008c80:	7812      	ldrb	r2, [r2, #0]
 8008c82:	0151      	lsls	r1, r2, #5
 8008c84:	693a      	ldr	r2, [r7, #16]
 8008c86:	440a      	add	r2, r1
 8008c88:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008c8c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008c90:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8008c92:	683b      	ldr	r3, [r7, #0]
 8008c94:	781b      	ldrb	r3, [r3, #0]
 8008c96:	015a      	lsls	r2, r3, #5
 8008c98:	693b      	ldr	r3, [r7, #16]
 8008c9a:	4413      	add	r3, r2
 8008c9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	683a      	ldr	r2, [r7, #0]
 8008ca4:	7812      	ldrb	r2, [r2, #0]
 8008ca6:	0151      	lsls	r1, r2, #5
 8008ca8:	693a      	ldr	r2, [r7, #16]
 8008caa:	440a      	add	r2, r1
 8008cac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008cb0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008cb4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8008cb6:	68fb      	ldr	r3, [r7, #12]
 8008cb8:	3301      	adds	r3, #1
 8008cba:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8008cbc:	68fb      	ldr	r3, [r7, #12]
 8008cbe:	f242 7210 	movw	r2, #10000	; 0x2710
 8008cc2:	4293      	cmp	r3, r2
 8008cc4:	d902      	bls.n	8008ccc <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8008cc6:	2301      	movs	r3, #1
 8008cc8:	75fb      	strb	r3, [r7, #23]
          break;
 8008cca:	e00c      	b.n	8008ce6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8008ccc:	683b      	ldr	r3, [r7, #0]
 8008cce:	781b      	ldrb	r3, [r3, #0]
 8008cd0:	015a      	lsls	r2, r3, #5
 8008cd2:	693b      	ldr	r3, [r7, #16]
 8008cd4:	4413      	add	r3, r2
 8008cd6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008ce0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008ce4:	d0e7      	beq.n	8008cb6 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8008ce6:	7dfb      	ldrb	r3, [r7, #23]
}
 8008ce8:	4618      	mov	r0, r3
 8008cea:	371c      	adds	r7, #28
 8008cec:	46bd      	mov	sp, r7
 8008cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cf2:	4770      	bx	lr

08008cf4 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8008cf4:	b480      	push	{r7}
 8008cf6:	b089      	sub	sp, #36	; 0x24
 8008cf8:	af00      	add	r7, sp, #0
 8008cfa:	60f8      	str	r0, [r7, #12]
 8008cfc:	60b9      	str	r1, [r7, #8]
 8008cfe:	4611      	mov	r1, r2
 8008d00:	461a      	mov	r2, r3
 8008d02:	460b      	mov	r3, r1
 8008d04:	71fb      	strb	r3, [r7, #7]
 8008d06:	4613      	mov	r3, r2
 8008d08:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008d0a:	68fb      	ldr	r3, [r7, #12]
 8008d0c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8008d0e:	68bb      	ldr	r3, [r7, #8]
 8008d10:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8008d12:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8008d16:	2b00      	cmp	r3, #0
 8008d18:	d123      	bne.n	8008d62 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8008d1a:	88bb      	ldrh	r3, [r7, #4]
 8008d1c:	3303      	adds	r3, #3
 8008d1e:	089b      	lsrs	r3, r3, #2
 8008d20:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8008d22:	2300      	movs	r3, #0
 8008d24:	61bb      	str	r3, [r7, #24]
 8008d26:	e018      	b.n	8008d5a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8008d28:	79fb      	ldrb	r3, [r7, #7]
 8008d2a:	031a      	lsls	r2, r3, #12
 8008d2c:	697b      	ldr	r3, [r7, #20]
 8008d2e:	4413      	add	r3, r2
 8008d30:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008d34:	461a      	mov	r2, r3
 8008d36:	69fb      	ldr	r3, [r7, #28]
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	6013      	str	r3, [r2, #0]
      pSrc++;
 8008d3c:	69fb      	ldr	r3, [r7, #28]
 8008d3e:	3301      	adds	r3, #1
 8008d40:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008d42:	69fb      	ldr	r3, [r7, #28]
 8008d44:	3301      	adds	r3, #1
 8008d46:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008d48:	69fb      	ldr	r3, [r7, #28]
 8008d4a:	3301      	adds	r3, #1
 8008d4c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008d4e:	69fb      	ldr	r3, [r7, #28]
 8008d50:	3301      	adds	r3, #1
 8008d52:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8008d54:	69bb      	ldr	r3, [r7, #24]
 8008d56:	3301      	adds	r3, #1
 8008d58:	61bb      	str	r3, [r7, #24]
 8008d5a:	69ba      	ldr	r2, [r7, #24]
 8008d5c:	693b      	ldr	r3, [r7, #16]
 8008d5e:	429a      	cmp	r2, r3
 8008d60:	d3e2      	bcc.n	8008d28 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8008d62:	2300      	movs	r3, #0
}
 8008d64:	4618      	mov	r0, r3
 8008d66:	3724      	adds	r7, #36	; 0x24
 8008d68:	46bd      	mov	sp, r7
 8008d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d6e:	4770      	bx	lr

08008d70 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8008d70:	b480      	push	{r7}
 8008d72:	b08b      	sub	sp, #44	; 0x2c
 8008d74:	af00      	add	r7, sp, #0
 8008d76:	60f8      	str	r0, [r7, #12]
 8008d78:	60b9      	str	r1, [r7, #8]
 8008d7a:	4613      	mov	r3, r2
 8008d7c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8008d82:	68bb      	ldr	r3, [r7, #8]
 8008d84:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8008d86:	88fb      	ldrh	r3, [r7, #6]
 8008d88:	089b      	lsrs	r3, r3, #2
 8008d8a:	b29b      	uxth	r3, r3
 8008d8c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8008d8e:	88fb      	ldrh	r3, [r7, #6]
 8008d90:	f003 0303 	and.w	r3, r3, #3
 8008d94:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8008d96:	2300      	movs	r3, #0
 8008d98:	623b      	str	r3, [r7, #32]
 8008d9a:	e014      	b.n	8008dc6 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8008d9c:	69bb      	ldr	r3, [r7, #24]
 8008d9e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008da2:	681a      	ldr	r2, [r3, #0]
 8008da4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008da6:	601a      	str	r2, [r3, #0]
    pDest++;
 8008da8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008daa:	3301      	adds	r3, #1
 8008dac:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8008dae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008db0:	3301      	adds	r3, #1
 8008db2:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8008db4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008db6:	3301      	adds	r3, #1
 8008db8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8008dba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dbc:	3301      	adds	r3, #1
 8008dbe:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8008dc0:	6a3b      	ldr	r3, [r7, #32]
 8008dc2:	3301      	adds	r3, #1
 8008dc4:	623b      	str	r3, [r7, #32]
 8008dc6:	6a3a      	ldr	r2, [r7, #32]
 8008dc8:	697b      	ldr	r3, [r7, #20]
 8008dca:	429a      	cmp	r2, r3
 8008dcc:	d3e6      	bcc.n	8008d9c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8008dce:	8bfb      	ldrh	r3, [r7, #30]
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	d01e      	beq.n	8008e12 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8008dd4:	2300      	movs	r3, #0
 8008dd6:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8008dd8:	69bb      	ldr	r3, [r7, #24]
 8008dda:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008dde:	461a      	mov	r2, r3
 8008de0:	f107 0310 	add.w	r3, r7, #16
 8008de4:	6812      	ldr	r2, [r2, #0]
 8008de6:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8008de8:	693a      	ldr	r2, [r7, #16]
 8008dea:	6a3b      	ldr	r3, [r7, #32]
 8008dec:	b2db      	uxtb	r3, r3
 8008dee:	00db      	lsls	r3, r3, #3
 8008df0:	fa22 f303 	lsr.w	r3, r2, r3
 8008df4:	b2da      	uxtb	r2, r3
 8008df6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008df8:	701a      	strb	r2, [r3, #0]
      i++;
 8008dfa:	6a3b      	ldr	r3, [r7, #32]
 8008dfc:	3301      	adds	r3, #1
 8008dfe:	623b      	str	r3, [r7, #32]
      pDest++;
 8008e00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e02:	3301      	adds	r3, #1
 8008e04:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8008e06:	8bfb      	ldrh	r3, [r7, #30]
 8008e08:	3b01      	subs	r3, #1
 8008e0a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8008e0c:	8bfb      	ldrh	r3, [r7, #30]
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	d1ea      	bne.n	8008de8 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8008e12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008e14:	4618      	mov	r0, r3
 8008e16:	372c      	adds	r7, #44	; 0x2c
 8008e18:	46bd      	mov	sp, r7
 8008e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e1e:	4770      	bx	lr

08008e20 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008e20:	b480      	push	{r7}
 8008e22:	b085      	sub	sp, #20
 8008e24:	af00      	add	r7, sp, #0
 8008e26:	6078      	str	r0, [r7, #4]
 8008e28:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008e2e:	683b      	ldr	r3, [r7, #0]
 8008e30:	781b      	ldrb	r3, [r3, #0]
 8008e32:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008e34:	683b      	ldr	r3, [r7, #0]
 8008e36:	785b      	ldrb	r3, [r3, #1]
 8008e38:	2b01      	cmp	r3, #1
 8008e3a:	d12c      	bne.n	8008e96 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8008e3c:	68bb      	ldr	r3, [r7, #8]
 8008e3e:	015a      	lsls	r2, r3, #5
 8008e40:	68fb      	ldr	r3, [r7, #12]
 8008e42:	4413      	add	r3, r2
 8008e44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	db12      	blt.n	8008e74 <USB_EPSetStall+0x54>
 8008e4e:	68bb      	ldr	r3, [r7, #8]
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	d00f      	beq.n	8008e74 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8008e54:	68bb      	ldr	r3, [r7, #8]
 8008e56:	015a      	lsls	r2, r3, #5
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	4413      	add	r3, r2
 8008e5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	68ba      	ldr	r2, [r7, #8]
 8008e64:	0151      	lsls	r1, r2, #5
 8008e66:	68fa      	ldr	r2, [r7, #12]
 8008e68:	440a      	add	r2, r1
 8008e6a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008e6e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008e72:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8008e74:	68bb      	ldr	r3, [r7, #8]
 8008e76:	015a      	lsls	r2, r3, #5
 8008e78:	68fb      	ldr	r3, [r7, #12]
 8008e7a:	4413      	add	r3, r2
 8008e7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	68ba      	ldr	r2, [r7, #8]
 8008e84:	0151      	lsls	r1, r2, #5
 8008e86:	68fa      	ldr	r2, [r7, #12]
 8008e88:	440a      	add	r2, r1
 8008e8a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008e8e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008e92:	6013      	str	r3, [r2, #0]
 8008e94:	e02b      	b.n	8008eee <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8008e96:	68bb      	ldr	r3, [r7, #8]
 8008e98:	015a      	lsls	r2, r3, #5
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	4413      	add	r3, r2
 8008e9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	2b00      	cmp	r3, #0
 8008ea6:	db12      	blt.n	8008ece <USB_EPSetStall+0xae>
 8008ea8:	68bb      	ldr	r3, [r7, #8]
 8008eaa:	2b00      	cmp	r3, #0
 8008eac:	d00f      	beq.n	8008ece <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8008eae:	68bb      	ldr	r3, [r7, #8]
 8008eb0:	015a      	lsls	r2, r3, #5
 8008eb2:	68fb      	ldr	r3, [r7, #12]
 8008eb4:	4413      	add	r3, r2
 8008eb6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	68ba      	ldr	r2, [r7, #8]
 8008ebe:	0151      	lsls	r1, r2, #5
 8008ec0:	68fa      	ldr	r2, [r7, #12]
 8008ec2:	440a      	add	r2, r1
 8008ec4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008ec8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008ecc:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8008ece:	68bb      	ldr	r3, [r7, #8]
 8008ed0:	015a      	lsls	r2, r3, #5
 8008ed2:	68fb      	ldr	r3, [r7, #12]
 8008ed4:	4413      	add	r3, r2
 8008ed6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	68ba      	ldr	r2, [r7, #8]
 8008ede:	0151      	lsls	r1, r2, #5
 8008ee0:	68fa      	ldr	r2, [r7, #12]
 8008ee2:	440a      	add	r2, r1
 8008ee4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008ee8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008eec:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008eee:	2300      	movs	r3, #0
}
 8008ef0:	4618      	mov	r0, r3
 8008ef2:	3714      	adds	r7, #20
 8008ef4:	46bd      	mov	sp, r7
 8008ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008efa:	4770      	bx	lr

08008efc <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008efc:	b480      	push	{r7}
 8008efe:	b085      	sub	sp, #20
 8008f00:	af00      	add	r7, sp, #0
 8008f02:	6078      	str	r0, [r7, #4]
 8008f04:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008f0a:	683b      	ldr	r3, [r7, #0]
 8008f0c:	781b      	ldrb	r3, [r3, #0]
 8008f0e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008f10:	683b      	ldr	r3, [r7, #0]
 8008f12:	785b      	ldrb	r3, [r3, #1]
 8008f14:	2b01      	cmp	r3, #1
 8008f16:	d128      	bne.n	8008f6a <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8008f18:	68bb      	ldr	r3, [r7, #8]
 8008f1a:	015a      	lsls	r2, r3, #5
 8008f1c:	68fb      	ldr	r3, [r7, #12]
 8008f1e:	4413      	add	r3, r2
 8008f20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	68ba      	ldr	r2, [r7, #8]
 8008f28:	0151      	lsls	r1, r2, #5
 8008f2a:	68fa      	ldr	r2, [r7, #12]
 8008f2c:	440a      	add	r2, r1
 8008f2e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008f32:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008f36:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8008f38:	683b      	ldr	r3, [r7, #0]
 8008f3a:	791b      	ldrb	r3, [r3, #4]
 8008f3c:	2b03      	cmp	r3, #3
 8008f3e:	d003      	beq.n	8008f48 <USB_EPClearStall+0x4c>
 8008f40:	683b      	ldr	r3, [r7, #0]
 8008f42:	791b      	ldrb	r3, [r3, #4]
 8008f44:	2b02      	cmp	r3, #2
 8008f46:	d138      	bne.n	8008fba <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8008f48:	68bb      	ldr	r3, [r7, #8]
 8008f4a:	015a      	lsls	r2, r3, #5
 8008f4c:	68fb      	ldr	r3, [r7, #12]
 8008f4e:	4413      	add	r3, r2
 8008f50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	68ba      	ldr	r2, [r7, #8]
 8008f58:	0151      	lsls	r1, r2, #5
 8008f5a:	68fa      	ldr	r2, [r7, #12]
 8008f5c:	440a      	add	r2, r1
 8008f5e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008f62:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008f66:	6013      	str	r3, [r2, #0]
 8008f68:	e027      	b.n	8008fba <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8008f6a:	68bb      	ldr	r3, [r7, #8]
 8008f6c:	015a      	lsls	r2, r3, #5
 8008f6e:	68fb      	ldr	r3, [r7, #12]
 8008f70:	4413      	add	r3, r2
 8008f72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	68ba      	ldr	r2, [r7, #8]
 8008f7a:	0151      	lsls	r1, r2, #5
 8008f7c:	68fa      	ldr	r2, [r7, #12]
 8008f7e:	440a      	add	r2, r1
 8008f80:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008f84:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008f88:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8008f8a:	683b      	ldr	r3, [r7, #0]
 8008f8c:	791b      	ldrb	r3, [r3, #4]
 8008f8e:	2b03      	cmp	r3, #3
 8008f90:	d003      	beq.n	8008f9a <USB_EPClearStall+0x9e>
 8008f92:	683b      	ldr	r3, [r7, #0]
 8008f94:	791b      	ldrb	r3, [r3, #4]
 8008f96:	2b02      	cmp	r3, #2
 8008f98:	d10f      	bne.n	8008fba <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8008f9a:	68bb      	ldr	r3, [r7, #8]
 8008f9c:	015a      	lsls	r2, r3, #5
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	4413      	add	r3, r2
 8008fa2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	68ba      	ldr	r2, [r7, #8]
 8008faa:	0151      	lsls	r1, r2, #5
 8008fac:	68fa      	ldr	r2, [r7, #12]
 8008fae:	440a      	add	r2, r1
 8008fb0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008fb4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008fb8:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8008fba:	2300      	movs	r3, #0
}
 8008fbc:	4618      	mov	r0, r3
 8008fbe:	3714      	adds	r7, #20
 8008fc0:	46bd      	mov	sp, r7
 8008fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fc6:	4770      	bx	lr

08008fc8 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8008fc8:	b480      	push	{r7}
 8008fca:	b085      	sub	sp, #20
 8008fcc:	af00      	add	r7, sp, #0
 8008fce:	6078      	str	r0, [r7, #4]
 8008fd0:	460b      	mov	r3, r1
 8008fd2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8008fd8:	68fb      	ldr	r3, [r7, #12]
 8008fda:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	68fa      	ldr	r2, [r7, #12]
 8008fe2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008fe6:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8008fea:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8008fec:	68fb      	ldr	r3, [r7, #12]
 8008fee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008ff2:	681a      	ldr	r2, [r3, #0]
 8008ff4:	78fb      	ldrb	r3, [r7, #3]
 8008ff6:	011b      	lsls	r3, r3, #4
 8008ff8:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8008ffc:	68f9      	ldr	r1, [r7, #12]
 8008ffe:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009002:	4313      	orrs	r3, r2
 8009004:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8009006:	2300      	movs	r3, #0
}
 8009008:	4618      	mov	r0, r3
 800900a:	3714      	adds	r7, #20
 800900c:	46bd      	mov	sp, r7
 800900e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009012:	4770      	bx	lr

08009014 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8009014:	b480      	push	{r7}
 8009016:	b085      	sub	sp, #20
 8009018:	af00      	add	r7, sp, #0
 800901a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8009020:	68fb      	ldr	r3, [r7, #12]
 8009022:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	68fa      	ldr	r2, [r7, #12]
 800902a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800902e:	f023 0303 	bic.w	r3, r3, #3
 8009032:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8009034:	68fb      	ldr	r3, [r7, #12]
 8009036:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800903a:	685b      	ldr	r3, [r3, #4]
 800903c:	68fa      	ldr	r2, [r7, #12]
 800903e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009042:	f023 0302 	bic.w	r3, r3, #2
 8009046:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009048:	2300      	movs	r3, #0
}
 800904a:	4618      	mov	r0, r3
 800904c:	3714      	adds	r7, #20
 800904e:	46bd      	mov	sp, r7
 8009050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009054:	4770      	bx	lr

08009056 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8009056:	b480      	push	{r7}
 8009058:	b085      	sub	sp, #20
 800905a:	af00      	add	r7, sp, #0
 800905c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8009062:	68fb      	ldr	r3, [r7, #12]
 8009064:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	68fa      	ldr	r2, [r7, #12]
 800906c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009070:	f023 0303 	bic.w	r3, r3, #3
 8009074:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009076:	68fb      	ldr	r3, [r7, #12]
 8009078:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800907c:	685b      	ldr	r3, [r3, #4]
 800907e:	68fa      	ldr	r2, [r7, #12]
 8009080:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009084:	f043 0302 	orr.w	r3, r3, #2
 8009088:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800908a:	2300      	movs	r3, #0
}
 800908c:	4618      	mov	r0, r3
 800908e:	3714      	adds	r7, #20
 8009090:	46bd      	mov	sp, r7
 8009092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009096:	4770      	bx	lr

08009098 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8009098:	b480      	push	{r7}
 800909a:	b085      	sub	sp, #20
 800909c:	af00      	add	r7, sp, #0
 800909e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	695b      	ldr	r3, [r3, #20]
 80090a4:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	699b      	ldr	r3, [r3, #24]
 80090aa:	68fa      	ldr	r2, [r7, #12]
 80090ac:	4013      	ands	r3, r2
 80090ae:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80090b0:	68fb      	ldr	r3, [r7, #12]
}
 80090b2:	4618      	mov	r0, r3
 80090b4:	3714      	adds	r7, #20
 80090b6:	46bd      	mov	sp, r7
 80090b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090bc:	4770      	bx	lr

080090be <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80090be:	b480      	push	{r7}
 80090c0:	b085      	sub	sp, #20
 80090c2:	af00      	add	r7, sp, #0
 80090c4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80090ca:	68fb      	ldr	r3, [r7, #12]
 80090cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80090d0:	699b      	ldr	r3, [r3, #24]
 80090d2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80090d4:	68fb      	ldr	r3, [r7, #12]
 80090d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80090da:	69db      	ldr	r3, [r3, #28]
 80090dc:	68ba      	ldr	r2, [r7, #8]
 80090de:	4013      	ands	r3, r2
 80090e0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80090e2:	68bb      	ldr	r3, [r7, #8]
 80090e4:	0c1b      	lsrs	r3, r3, #16
}
 80090e6:	4618      	mov	r0, r3
 80090e8:	3714      	adds	r7, #20
 80090ea:	46bd      	mov	sp, r7
 80090ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090f0:	4770      	bx	lr

080090f2 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80090f2:	b480      	push	{r7}
 80090f4:	b085      	sub	sp, #20
 80090f6:	af00      	add	r7, sp, #0
 80090f8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80090fe:	68fb      	ldr	r3, [r7, #12]
 8009100:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009104:	699b      	ldr	r3, [r3, #24]
 8009106:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8009108:	68fb      	ldr	r3, [r7, #12]
 800910a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800910e:	69db      	ldr	r3, [r3, #28]
 8009110:	68ba      	ldr	r2, [r7, #8]
 8009112:	4013      	ands	r3, r2
 8009114:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8009116:	68bb      	ldr	r3, [r7, #8]
 8009118:	b29b      	uxth	r3, r3
}
 800911a:	4618      	mov	r0, r3
 800911c:	3714      	adds	r7, #20
 800911e:	46bd      	mov	sp, r7
 8009120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009124:	4770      	bx	lr

08009126 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8009126:	b480      	push	{r7}
 8009128:	b085      	sub	sp, #20
 800912a:	af00      	add	r7, sp, #0
 800912c:	6078      	str	r0, [r7, #4]
 800912e:	460b      	mov	r3, r1
 8009130:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8009136:	78fb      	ldrb	r3, [r7, #3]
 8009138:	015a      	lsls	r2, r3, #5
 800913a:	68fb      	ldr	r3, [r7, #12]
 800913c:	4413      	add	r3, r2
 800913e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009142:	689b      	ldr	r3, [r3, #8]
 8009144:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8009146:	68fb      	ldr	r3, [r7, #12]
 8009148:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800914c:	695b      	ldr	r3, [r3, #20]
 800914e:	68ba      	ldr	r2, [r7, #8]
 8009150:	4013      	ands	r3, r2
 8009152:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8009154:	68bb      	ldr	r3, [r7, #8]
}
 8009156:	4618      	mov	r0, r3
 8009158:	3714      	adds	r7, #20
 800915a:	46bd      	mov	sp, r7
 800915c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009160:	4770      	bx	lr

08009162 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8009162:	b480      	push	{r7}
 8009164:	b087      	sub	sp, #28
 8009166:	af00      	add	r7, sp, #0
 8009168:	6078      	str	r0, [r7, #4]
 800916a:	460b      	mov	r3, r1
 800916c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8009172:	697b      	ldr	r3, [r7, #20]
 8009174:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009178:	691b      	ldr	r3, [r3, #16]
 800917a:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800917c:	697b      	ldr	r3, [r7, #20]
 800917e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009182:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009184:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8009186:	78fb      	ldrb	r3, [r7, #3]
 8009188:	f003 030f 	and.w	r3, r3, #15
 800918c:	68fa      	ldr	r2, [r7, #12]
 800918e:	fa22 f303 	lsr.w	r3, r2, r3
 8009192:	01db      	lsls	r3, r3, #7
 8009194:	b2db      	uxtb	r3, r3
 8009196:	693a      	ldr	r2, [r7, #16]
 8009198:	4313      	orrs	r3, r2
 800919a:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800919c:	78fb      	ldrb	r3, [r7, #3]
 800919e:	015a      	lsls	r2, r3, #5
 80091a0:	697b      	ldr	r3, [r7, #20]
 80091a2:	4413      	add	r3, r2
 80091a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80091a8:	689b      	ldr	r3, [r3, #8]
 80091aa:	693a      	ldr	r2, [r7, #16]
 80091ac:	4013      	ands	r3, r2
 80091ae:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80091b0:	68bb      	ldr	r3, [r7, #8]
}
 80091b2:	4618      	mov	r0, r3
 80091b4:	371c      	adds	r7, #28
 80091b6:	46bd      	mov	sp, r7
 80091b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091bc:	4770      	bx	lr

080091be <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80091be:	b480      	push	{r7}
 80091c0:	b083      	sub	sp, #12
 80091c2:	af00      	add	r7, sp, #0
 80091c4:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	695b      	ldr	r3, [r3, #20]
 80091ca:	f003 0301 	and.w	r3, r3, #1
}
 80091ce:	4618      	mov	r0, r3
 80091d0:	370c      	adds	r7, #12
 80091d2:	46bd      	mov	sp, r7
 80091d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091d8:	4770      	bx	lr

080091da <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80091da:	b480      	push	{r7}
 80091dc:	b085      	sub	sp, #20
 80091de:	af00      	add	r7, sp, #0
 80091e0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80091e6:	68fb      	ldr	r3, [r7, #12]
 80091e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	68fa      	ldr	r2, [r7, #12]
 80091f0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80091f4:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80091f8:	f023 0307 	bic.w	r3, r3, #7
 80091fc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80091fe:	68fb      	ldr	r3, [r7, #12]
 8009200:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009204:	685b      	ldr	r3, [r3, #4]
 8009206:	68fa      	ldr	r2, [r7, #12]
 8009208:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800920c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009210:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009212:	2300      	movs	r3, #0
}
 8009214:	4618      	mov	r0, r3
 8009216:	3714      	adds	r7, #20
 8009218:	46bd      	mov	sp, r7
 800921a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800921e:	4770      	bx	lr

08009220 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8009220:	b480      	push	{r7}
 8009222:	b087      	sub	sp, #28
 8009224:	af00      	add	r7, sp, #0
 8009226:	60f8      	str	r0, [r7, #12]
 8009228:	460b      	mov	r3, r1
 800922a:	607a      	str	r2, [r7, #4]
 800922c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800922e:	68fb      	ldr	r3, [r7, #12]
 8009230:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8009232:	68fb      	ldr	r3, [r7, #12]
 8009234:	333c      	adds	r3, #60	; 0x3c
 8009236:	3304      	adds	r3, #4
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800923c:	693b      	ldr	r3, [r7, #16]
 800923e:	4a26      	ldr	r2, [pc, #152]	; (80092d8 <USB_EP0_OutStart+0xb8>)
 8009240:	4293      	cmp	r3, r2
 8009242:	d90a      	bls.n	800925a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009244:	697b      	ldr	r3, [r7, #20]
 8009246:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009250:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009254:	d101      	bne.n	800925a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8009256:	2300      	movs	r3, #0
 8009258:	e037      	b.n	80092ca <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800925a:	697b      	ldr	r3, [r7, #20]
 800925c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009260:	461a      	mov	r2, r3
 8009262:	2300      	movs	r3, #0
 8009264:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009266:	697b      	ldr	r3, [r7, #20]
 8009268:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800926c:	691b      	ldr	r3, [r3, #16]
 800926e:	697a      	ldr	r2, [r7, #20]
 8009270:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009274:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009278:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800927a:	697b      	ldr	r3, [r7, #20]
 800927c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009280:	691b      	ldr	r3, [r3, #16]
 8009282:	697a      	ldr	r2, [r7, #20]
 8009284:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009288:	f043 0318 	orr.w	r3, r3, #24
 800928c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800928e:	697b      	ldr	r3, [r7, #20]
 8009290:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009294:	691b      	ldr	r3, [r3, #16]
 8009296:	697a      	ldr	r2, [r7, #20]
 8009298:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800929c:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80092a0:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80092a2:	7afb      	ldrb	r3, [r7, #11]
 80092a4:	2b01      	cmp	r3, #1
 80092a6:	d10f      	bne.n	80092c8 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80092a8:	697b      	ldr	r3, [r7, #20]
 80092aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80092ae:	461a      	mov	r2, r3
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80092b4:	697b      	ldr	r3, [r7, #20]
 80092b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	697a      	ldr	r2, [r7, #20]
 80092be:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80092c2:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80092c6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80092c8:	2300      	movs	r3, #0
}
 80092ca:	4618      	mov	r0, r3
 80092cc:	371c      	adds	r7, #28
 80092ce:	46bd      	mov	sp, r7
 80092d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092d4:	4770      	bx	lr
 80092d6:	bf00      	nop
 80092d8:	4f54300a 	.word	0x4f54300a

080092dc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80092dc:	b480      	push	{r7}
 80092de:	b085      	sub	sp, #20
 80092e0:	af00      	add	r7, sp, #0
 80092e2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80092e4:	2300      	movs	r3, #0
 80092e6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80092e8:	68fb      	ldr	r3, [r7, #12]
 80092ea:	3301      	adds	r3, #1
 80092ec:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80092ee:	68fb      	ldr	r3, [r7, #12]
 80092f0:	4a13      	ldr	r2, [pc, #76]	; (8009340 <USB_CoreReset+0x64>)
 80092f2:	4293      	cmp	r3, r2
 80092f4:	d901      	bls.n	80092fa <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80092f6:	2303      	movs	r3, #3
 80092f8:	e01b      	b.n	8009332 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	691b      	ldr	r3, [r3, #16]
 80092fe:	2b00      	cmp	r3, #0
 8009300:	daf2      	bge.n	80092e8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8009302:	2300      	movs	r3, #0
 8009304:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	691b      	ldr	r3, [r3, #16]
 800930a:	f043 0201 	orr.w	r2, r3, #1
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009312:	68fb      	ldr	r3, [r7, #12]
 8009314:	3301      	adds	r3, #1
 8009316:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009318:	68fb      	ldr	r3, [r7, #12]
 800931a:	4a09      	ldr	r2, [pc, #36]	; (8009340 <USB_CoreReset+0x64>)
 800931c:	4293      	cmp	r3, r2
 800931e:	d901      	bls.n	8009324 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8009320:	2303      	movs	r3, #3
 8009322:	e006      	b.n	8009332 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	691b      	ldr	r3, [r3, #16]
 8009328:	f003 0301 	and.w	r3, r3, #1
 800932c:	2b01      	cmp	r3, #1
 800932e:	d0f0      	beq.n	8009312 <USB_CoreReset+0x36>

  return HAL_OK;
 8009330:	2300      	movs	r3, #0
}
 8009332:	4618      	mov	r0, r3
 8009334:	3714      	adds	r7, #20
 8009336:	46bd      	mov	sp, r7
 8009338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800933c:	4770      	bx	lr
 800933e:	bf00      	nop
 8009340:	00030d40 	.word	0x00030d40

08009344 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009344:	b580      	push	{r7, lr}
 8009346:	b084      	sub	sp, #16
 8009348:	af00      	add	r7, sp, #0
 800934a:	6078      	str	r0, [r7, #4]
 800934c:	460b      	mov	r3, r1
 800934e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8009350:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8009354:	f002 fc54 	bl	800bc00 <USBD_static_malloc>
 8009358:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800935a:	68fb      	ldr	r3, [r7, #12]
 800935c:	2b00      	cmp	r3, #0
 800935e:	d109      	bne.n	8009374 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	32b0      	adds	r2, #176	; 0xb0
 800936a:	2100      	movs	r1, #0
 800936c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8009370:	2302      	movs	r3, #2
 8009372:	e0d4      	b.n	800951e <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8009374:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8009378:	2100      	movs	r1, #0
 800937a:	68f8      	ldr	r0, [r7, #12]
 800937c:	f002 fcbc 	bl	800bcf8 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	32b0      	adds	r2, #176	; 0xb0
 800938a:	68f9      	ldr	r1, [r7, #12]
 800938c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	32b0      	adds	r2, #176	; 0xb0
 800939a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	7c1b      	ldrb	r3, [r3, #16]
 80093a8:	2b00      	cmp	r3, #0
 80093aa:	d138      	bne.n	800941e <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80093ac:	4b5e      	ldr	r3, [pc, #376]	; (8009528 <USBD_CDC_Init+0x1e4>)
 80093ae:	7819      	ldrb	r1, [r3, #0]
 80093b0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80093b4:	2202      	movs	r2, #2
 80093b6:	6878      	ldr	r0, [r7, #4]
 80093b8:	f002 faff 	bl	800b9ba <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80093bc:	4b5a      	ldr	r3, [pc, #360]	; (8009528 <USBD_CDC_Init+0x1e4>)
 80093be:	781b      	ldrb	r3, [r3, #0]
 80093c0:	f003 020f 	and.w	r2, r3, #15
 80093c4:	6879      	ldr	r1, [r7, #4]
 80093c6:	4613      	mov	r3, r2
 80093c8:	009b      	lsls	r3, r3, #2
 80093ca:	4413      	add	r3, r2
 80093cc:	009b      	lsls	r3, r3, #2
 80093ce:	440b      	add	r3, r1
 80093d0:	3324      	adds	r3, #36	; 0x24
 80093d2:	2201      	movs	r2, #1
 80093d4:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80093d6:	4b55      	ldr	r3, [pc, #340]	; (800952c <USBD_CDC_Init+0x1e8>)
 80093d8:	7819      	ldrb	r1, [r3, #0]
 80093da:	f44f 7300 	mov.w	r3, #512	; 0x200
 80093de:	2202      	movs	r2, #2
 80093e0:	6878      	ldr	r0, [r7, #4]
 80093e2:	f002 faea 	bl	800b9ba <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80093e6:	4b51      	ldr	r3, [pc, #324]	; (800952c <USBD_CDC_Init+0x1e8>)
 80093e8:	781b      	ldrb	r3, [r3, #0]
 80093ea:	f003 020f 	and.w	r2, r3, #15
 80093ee:	6879      	ldr	r1, [r7, #4]
 80093f0:	4613      	mov	r3, r2
 80093f2:	009b      	lsls	r3, r3, #2
 80093f4:	4413      	add	r3, r2
 80093f6:	009b      	lsls	r3, r3, #2
 80093f8:	440b      	add	r3, r1
 80093fa:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80093fe:	2201      	movs	r2, #1
 8009400:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8009402:	4b4b      	ldr	r3, [pc, #300]	; (8009530 <USBD_CDC_Init+0x1ec>)
 8009404:	781b      	ldrb	r3, [r3, #0]
 8009406:	f003 020f 	and.w	r2, r3, #15
 800940a:	6879      	ldr	r1, [r7, #4]
 800940c:	4613      	mov	r3, r2
 800940e:	009b      	lsls	r3, r3, #2
 8009410:	4413      	add	r3, r2
 8009412:	009b      	lsls	r3, r3, #2
 8009414:	440b      	add	r3, r1
 8009416:	3326      	adds	r3, #38	; 0x26
 8009418:	2210      	movs	r2, #16
 800941a:	801a      	strh	r2, [r3, #0]
 800941c:	e035      	b.n	800948a <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800941e:	4b42      	ldr	r3, [pc, #264]	; (8009528 <USBD_CDC_Init+0x1e4>)
 8009420:	7819      	ldrb	r1, [r3, #0]
 8009422:	2340      	movs	r3, #64	; 0x40
 8009424:	2202      	movs	r2, #2
 8009426:	6878      	ldr	r0, [r7, #4]
 8009428:	f002 fac7 	bl	800b9ba <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800942c:	4b3e      	ldr	r3, [pc, #248]	; (8009528 <USBD_CDC_Init+0x1e4>)
 800942e:	781b      	ldrb	r3, [r3, #0]
 8009430:	f003 020f 	and.w	r2, r3, #15
 8009434:	6879      	ldr	r1, [r7, #4]
 8009436:	4613      	mov	r3, r2
 8009438:	009b      	lsls	r3, r3, #2
 800943a:	4413      	add	r3, r2
 800943c:	009b      	lsls	r3, r3, #2
 800943e:	440b      	add	r3, r1
 8009440:	3324      	adds	r3, #36	; 0x24
 8009442:	2201      	movs	r2, #1
 8009444:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8009446:	4b39      	ldr	r3, [pc, #228]	; (800952c <USBD_CDC_Init+0x1e8>)
 8009448:	7819      	ldrb	r1, [r3, #0]
 800944a:	2340      	movs	r3, #64	; 0x40
 800944c:	2202      	movs	r2, #2
 800944e:	6878      	ldr	r0, [r7, #4]
 8009450:	f002 fab3 	bl	800b9ba <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8009454:	4b35      	ldr	r3, [pc, #212]	; (800952c <USBD_CDC_Init+0x1e8>)
 8009456:	781b      	ldrb	r3, [r3, #0]
 8009458:	f003 020f 	and.w	r2, r3, #15
 800945c:	6879      	ldr	r1, [r7, #4]
 800945e:	4613      	mov	r3, r2
 8009460:	009b      	lsls	r3, r3, #2
 8009462:	4413      	add	r3, r2
 8009464:	009b      	lsls	r3, r3, #2
 8009466:	440b      	add	r3, r1
 8009468:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800946c:	2201      	movs	r2, #1
 800946e:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8009470:	4b2f      	ldr	r3, [pc, #188]	; (8009530 <USBD_CDC_Init+0x1ec>)
 8009472:	781b      	ldrb	r3, [r3, #0]
 8009474:	f003 020f 	and.w	r2, r3, #15
 8009478:	6879      	ldr	r1, [r7, #4]
 800947a:	4613      	mov	r3, r2
 800947c:	009b      	lsls	r3, r3, #2
 800947e:	4413      	add	r3, r2
 8009480:	009b      	lsls	r3, r3, #2
 8009482:	440b      	add	r3, r1
 8009484:	3326      	adds	r3, #38	; 0x26
 8009486:	2210      	movs	r2, #16
 8009488:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800948a:	4b29      	ldr	r3, [pc, #164]	; (8009530 <USBD_CDC_Init+0x1ec>)
 800948c:	7819      	ldrb	r1, [r3, #0]
 800948e:	2308      	movs	r3, #8
 8009490:	2203      	movs	r2, #3
 8009492:	6878      	ldr	r0, [r7, #4]
 8009494:	f002 fa91 	bl	800b9ba <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8009498:	4b25      	ldr	r3, [pc, #148]	; (8009530 <USBD_CDC_Init+0x1ec>)
 800949a:	781b      	ldrb	r3, [r3, #0]
 800949c:	f003 020f 	and.w	r2, r3, #15
 80094a0:	6879      	ldr	r1, [r7, #4]
 80094a2:	4613      	mov	r3, r2
 80094a4:	009b      	lsls	r3, r3, #2
 80094a6:	4413      	add	r3, r2
 80094a8:	009b      	lsls	r3, r3, #2
 80094aa:	440b      	add	r3, r1
 80094ac:	3324      	adds	r3, #36	; 0x24
 80094ae:	2201      	movs	r2, #1
 80094b0:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 80094b2:	68fb      	ldr	r3, [r7, #12]
 80094b4:	2200      	movs	r2, #0
 80094b6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80094c0:	687a      	ldr	r2, [r7, #4]
 80094c2:	33b0      	adds	r3, #176	; 0xb0
 80094c4:	009b      	lsls	r3, r3, #2
 80094c6:	4413      	add	r3, r2
 80094c8:	685b      	ldr	r3, [r3, #4]
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80094ce:	68fb      	ldr	r3, [r7, #12]
 80094d0:	2200      	movs	r2, #0
 80094d2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 80094d6:	68fb      	ldr	r3, [r7, #12]
 80094d8:	2200      	movs	r2, #0
 80094da:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 80094de:	68fb      	ldr	r3, [r7, #12]
 80094e0:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80094e4:	2b00      	cmp	r3, #0
 80094e6:	d101      	bne.n	80094ec <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 80094e8:	2302      	movs	r3, #2
 80094ea:	e018      	b.n	800951e <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	7c1b      	ldrb	r3, [r3, #16]
 80094f0:	2b00      	cmp	r3, #0
 80094f2:	d10a      	bne.n	800950a <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80094f4:	4b0d      	ldr	r3, [pc, #52]	; (800952c <USBD_CDC_Init+0x1e8>)
 80094f6:	7819      	ldrb	r1, [r3, #0]
 80094f8:	68fb      	ldr	r3, [r7, #12]
 80094fa:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80094fe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009502:	6878      	ldr	r0, [r7, #4]
 8009504:	f002 fb48 	bl	800bb98 <USBD_LL_PrepareReceive>
 8009508:	e008      	b.n	800951c <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800950a:	4b08      	ldr	r3, [pc, #32]	; (800952c <USBD_CDC_Init+0x1e8>)
 800950c:	7819      	ldrb	r1, [r3, #0]
 800950e:	68fb      	ldr	r3, [r7, #12]
 8009510:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009514:	2340      	movs	r3, #64	; 0x40
 8009516:	6878      	ldr	r0, [r7, #4]
 8009518:	f002 fb3e 	bl	800bb98 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800951c:	2300      	movs	r3, #0
}
 800951e:	4618      	mov	r0, r3
 8009520:	3710      	adds	r7, #16
 8009522:	46bd      	mov	sp, r7
 8009524:	bd80      	pop	{r7, pc}
 8009526:	bf00      	nop
 8009528:	200000a3 	.word	0x200000a3
 800952c:	200000a4 	.word	0x200000a4
 8009530:	200000a5 	.word	0x200000a5

08009534 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009534:	b580      	push	{r7, lr}
 8009536:	b082      	sub	sp, #8
 8009538:	af00      	add	r7, sp, #0
 800953a:	6078      	str	r0, [r7, #4]
 800953c:	460b      	mov	r3, r1
 800953e:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8009540:	4b3a      	ldr	r3, [pc, #232]	; (800962c <USBD_CDC_DeInit+0xf8>)
 8009542:	781b      	ldrb	r3, [r3, #0]
 8009544:	4619      	mov	r1, r3
 8009546:	6878      	ldr	r0, [r7, #4]
 8009548:	f002 fa5d 	bl	800ba06 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800954c:	4b37      	ldr	r3, [pc, #220]	; (800962c <USBD_CDC_DeInit+0xf8>)
 800954e:	781b      	ldrb	r3, [r3, #0]
 8009550:	f003 020f 	and.w	r2, r3, #15
 8009554:	6879      	ldr	r1, [r7, #4]
 8009556:	4613      	mov	r3, r2
 8009558:	009b      	lsls	r3, r3, #2
 800955a:	4413      	add	r3, r2
 800955c:	009b      	lsls	r3, r3, #2
 800955e:	440b      	add	r3, r1
 8009560:	3324      	adds	r3, #36	; 0x24
 8009562:	2200      	movs	r2, #0
 8009564:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8009566:	4b32      	ldr	r3, [pc, #200]	; (8009630 <USBD_CDC_DeInit+0xfc>)
 8009568:	781b      	ldrb	r3, [r3, #0]
 800956a:	4619      	mov	r1, r3
 800956c:	6878      	ldr	r0, [r7, #4]
 800956e:	f002 fa4a 	bl	800ba06 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8009572:	4b2f      	ldr	r3, [pc, #188]	; (8009630 <USBD_CDC_DeInit+0xfc>)
 8009574:	781b      	ldrb	r3, [r3, #0]
 8009576:	f003 020f 	and.w	r2, r3, #15
 800957a:	6879      	ldr	r1, [r7, #4]
 800957c:	4613      	mov	r3, r2
 800957e:	009b      	lsls	r3, r3, #2
 8009580:	4413      	add	r3, r2
 8009582:	009b      	lsls	r3, r3, #2
 8009584:	440b      	add	r3, r1
 8009586:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800958a:	2200      	movs	r2, #0
 800958c:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800958e:	4b29      	ldr	r3, [pc, #164]	; (8009634 <USBD_CDC_DeInit+0x100>)
 8009590:	781b      	ldrb	r3, [r3, #0]
 8009592:	4619      	mov	r1, r3
 8009594:	6878      	ldr	r0, [r7, #4]
 8009596:	f002 fa36 	bl	800ba06 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800959a:	4b26      	ldr	r3, [pc, #152]	; (8009634 <USBD_CDC_DeInit+0x100>)
 800959c:	781b      	ldrb	r3, [r3, #0]
 800959e:	f003 020f 	and.w	r2, r3, #15
 80095a2:	6879      	ldr	r1, [r7, #4]
 80095a4:	4613      	mov	r3, r2
 80095a6:	009b      	lsls	r3, r3, #2
 80095a8:	4413      	add	r3, r2
 80095aa:	009b      	lsls	r3, r3, #2
 80095ac:	440b      	add	r3, r1
 80095ae:	3324      	adds	r3, #36	; 0x24
 80095b0:	2200      	movs	r2, #0
 80095b2:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 80095b4:	4b1f      	ldr	r3, [pc, #124]	; (8009634 <USBD_CDC_DeInit+0x100>)
 80095b6:	781b      	ldrb	r3, [r3, #0]
 80095b8:	f003 020f 	and.w	r2, r3, #15
 80095bc:	6879      	ldr	r1, [r7, #4]
 80095be:	4613      	mov	r3, r2
 80095c0:	009b      	lsls	r3, r3, #2
 80095c2:	4413      	add	r3, r2
 80095c4:	009b      	lsls	r3, r3, #2
 80095c6:	440b      	add	r3, r1
 80095c8:	3326      	adds	r3, #38	; 0x26
 80095ca:	2200      	movs	r2, #0
 80095cc:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	32b0      	adds	r2, #176	; 0xb0
 80095d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80095dc:	2b00      	cmp	r3, #0
 80095de:	d01f      	beq.n	8009620 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80095e6:	687a      	ldr	r2, [r7, #4]
 80095e8:	33b0      	adds	r3, #176	; 0xb0
 80095ea:	009b      	lsls	r3, r3, #2
 80095ec:	4413      	add	r3, r2
 80095ee:	685b      	ldr	r3, [r3, #4]
 80095f0:	685b      	ldr	r3, [r3, #4]
 80095f2:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	32b0      	adds	r2, #176	; 0xb0
 80095fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009602:	4618      	mov	r0, r3
 8009604:	f002 fb0a 	bl	800bc1c <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	32b0      	adds	r2, #176	; 0xb0
 8009612:	2100      	movs	r1, #0
 8009614:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	2200      	movs	r2, #0
 800961c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8009620:	2300      	movs	r3, #0
}
 8009622:	4618      	mov	r0, r3
 8009624:	3708      	adds	r7, #8
 8009626:	46bd      	mov	sp, r7
 8009628:	bd80      	pop	{r7, pc}
 800962a:	bf00      	nop
 800962c:	200000a3 	.word	0x200000a3
 8009630:	200000a4 	.word	0x200000a4
 8009634:	200000a5 	.word	0x200000a5

08009638 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8009638:	b580      	push	{r7, lr}
 800963a:	b086      	sub	sp, #24
 800963c:	af00      	add	r7, sp, #0
 800963e:	6078      	str	r0, [r7, #4]
 8009640:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	32b0      	adds	r2, #176	; 0xb0
 800964c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009650:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8009652:	2300      	movs	r3, #0
 8009654:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8009656:	2300      	movs	r3, #0
 8009658:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800965a:	2300      	movs	r3, #0
 800965c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800965e:	693b      	ldr	r3, [r7, #16]
 8009660:	2b00      	cmp	r3, #0
 8009662:	d101      	bne.n	8009668 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8009664:	2303      	movs	r3, #3
 8009666:	e0bf      	b.n	80097e8 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009668:	683b      	ldr	r3, [r7, #0]
 800966a:	781b      	ldrb	r3, [r3, #0]
 800966c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009670:	2b00      	cmp	r3, #0
 8009672:	d050      	beq.n	8009716 <USBD_CDC_Setup+0xde>
 8009674:	2b20      	cmp	r3, #32
 8009676:	f040 80af 	bne.w	80097d8 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800967a:	683b      	ldr	r3, [r7, #0]
 800967c:	88db      	ldrh	r3, [r3, #6]
 800967e:	2b00      	cmp	r3, #0
 8009680:	d03a      	beq.n	80096f8 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8009682:	683b      	ldr	r3, [r7, #0]
 8009684:	781b      	ldrb	r3, [r3, #0]
 8009686:	b25b      	sxtb	r3, r3
 8009688:	2b00      	cmp	r3, #0
 800968a:	da1b      	bge.n	80096c4 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009692:	687a      	ldr	r2, [r7, #4]
 8009694:	33b0      	adds	r3, #176	; 0xb0
 8009696:	009b      	lsls	r3, r3, #2
 8009698:	4413      	add	r3, r2
 800969a:	685b      	ldr	r3, [r3, #4]
 800969c:	689b      	ldr	r3, [r3, #8]
 800969e:	683a      	ldr	r2, [r7, #0]
 80096a0:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 80096a2:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80096a4:	683a      	ldr	r2, [r7, #0]
 80096a6:	88d2      	ldrh	r2, [r2, #6]
 80096a8:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80096aa:	683b      	ldr	r3, [r7, #0]
 80096ac:	88db      	ldrh	r3, [r3, #6]
 80096ae:	2b07      	cmp	r3, #7
 80096b0:	bf28      	it	cs
 80096b2:	2307      	movcs	r3, #7
 80096b4:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80096b6:	693b      	ldr	r3, [r7, #16]
 80096b8:	89fa      	ldrh	r2, [r7, #14]
 80096ba:	4619      	mov	r1, r3
 80096bc:	6878      	ldr	r0, [r7, #4]
 80096be:	f001 fd43 	bl	800b148 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 80096c2:	e090      	b.n	80097e6 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 80096c4:	683b      	ldr	r3, [r7, #0]
 80096c6:	785a      	ldrb	r2, [r3, #1]
 80096c8:	693b      	ldr	r3, [r7, #16]
 80096ca:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 80096ce:	683b      	ldr	r3, [r7, #0]
 80096d0:	88db      	ldrh	r3, [r3, #6]
 80096d2:	2b3f      	cmp	r3, #63	; 0x3f
 80096d4:	d803      	bhi.n	80096de <USBD_CDC_Setup+0xa6>
 80096d6:	683b      	ldr	r3, [r7, #0]
 80096d8:	88db      	ldrh	r3, [r3, #6]
 80096da:	b2da      	uxtb	r2, r3
 80096dc:	e000      	b.n	80096e0 <USBD_CDC_Setup+0xa8>
 80096de:	2240      	movs	r2, #64	; 0x40
 80096e0:	693b      	ldr	r3, [r7, #16]
 80096e2:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 80096e6:	6939      	ldr	r1, [r7, #16]
 80096e8:	693b      	ldr	r3, [r7, #16]
 80096ea:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 80096ee:	461a      	mov	r2, r3
 80096f0:	6878      	ldr	r0, [r7, #4]
 80096f2:	f001 fd55 	bl	800b1a0 <USBD_CtlPrepareRx>
      break;
 80096f6:	e076      	b.n	80097e6 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80096fe:	687a      	ldr	r2, [r7, #4]
 8009700:	33b0      	adds	r3, #176	; 0xb0
 8009702:	009b      	lsls	r3, r3, #2
 8009704:	4413      	add	r3, r2
 8009706:	685b      	ldr	r3, [r3, #4]
 8009708:	689b      	ldr	r3, [r3, #8]
 800970a:	683a      	ldr	r2, [r7, #0]
 800970c:	7850      	ldrb	r0, [r2, #1]
 800970e:	2200      	movs	r2, #0
 8009710:	6839      	ldr	r1, [r7, #0]
 8009712:	4798      	blx	r3
      break;
 8009714:	e067      	b.n	80097e6 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009716:	683b      	ldr	r3, [r7, #0]
 8009718:	785b      	ldrb	r3, [r3, #1]
 800971a:	2b0b      	cmp	r3, #11
 800971c:	d851      	bhi.n	80097c2 <USBD_CDC_Setup+0x18a>
 800971e:	a201      	add	r2, pc, #4	; (adr r2, 8009724 <USBD_CDC_Setup+0xec>)
 8009720:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009724:	08009755 	.word	0x08009755
 8009728:	080097d1 	.word	0x080097d1
 800972c:	080097c3 	.word	0x080097c3
 8009730:	080097c3 	.word	0x080097c3
 8009734:	080097c3 	.word	0x080097c3
 8009738:	080097c3 	.word	0x080097c3
 800973c:	080097c3 	.word	0x080097c3
 8009740:	080097c3 	.word	0x080097c3
 8009744:	080097c3 	.word	0x080097c3
 8009748:	080097c3 	.word	0x080097c3
 800974c:	0800977f 	.word	0x0800977f
 8009750:	080097a9 	.word	0x080097a9
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800975a:	b2db      	uxtb	r3, r3
 800975c:	2b03      	cmp	r3, #3
 800975e:	d107      	bne.n	8009770 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8009760:	f107 030a 	add.w	r3, r7, #10
 8009764:	2202      	movs	r2, #2
 8009766:	4619      	mov	r1, r3
 8009768:	6878      	ldr	r0, [r7, #4]
 800976a:	f001 fced 	bl	800b148 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800976e:	e032      	b.n	80097d6 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8009770:	6839      	ldr	r1, [r7, #0]
 8009772:	6878      	ldr	r0, [r7, #4]
 8009774:	f001 fc77 	bl	800b066 <USBD_CtlError>
            ret = USBD_FAIL;
 8009778:	2303      	movs	r3, #3
 800977a:	75fb      	strb	r3, [r7, #23]
          break;
 800977c:	e02b      	b.n	80097d6 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009784:	b2db      	uxtb	r3, r3
 8009786:	2b03      	cmp	r3, #3
 8009788:	d107      	bne.n	800979a <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800978a:	f107 030d 	add.w	r3, r7, #13
 800978e:	2201      	movs	r2, #1
 8009790:	4619      	mov	r1, r3
 8009792:	6878      	ldr	r0, [r7, #4]
 8009794:	f001 fcd8 	bl	800b148 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009798:	e01d      	b.n	80097d6 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800979a:	6839      	ldr	r1, [r7, #0]
 800979c:	6878      	ldr	r0, [r7, #4]
 800979e:	f001 fc62 	bl	800b066 <USBD_CtlError>
            ret = USBD_FAIL;
 80097a2:	2303      	movs	r3, #3
 80097a4:	75fb      	strb	r3, [r7, #23]
          break;
 80097a6:	e016      	b.n	80097d6 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80097ae:	b2db      	uxtb	r3, r3
 80097b0:	2b03      	cmp	r3, #3
 80097b2:	d00f      	beq.n	80097d4 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 80097b4:	6839      	ldr	r1, [r7, #0]
 80097b6:	6878      	ldr	r0, [r7, #4]
 80097b8:	f001 fc55 	bl	800b066 <USBD_CtlError>
            ret = USBD_FAIL;
 80097bc:	2303      	movs	r3, #3
 80097be:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80097c0:	e008      	b.n	80097d4 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80097c2:	6839      	ldr	r1, [r7, #0]
 80097c4:	6878      	ldr	r0, [r7, #4]
 80097c6:	f001 fc4e 	bl	800b066 <USBD_CtlError>
          ret = USBD_FAIL;
 80097ca:	2303      	movs	r3, #3
 80097cc:	75fb      	strb	r3, [r7, #23]
          break;
 80097ce:	e002      	b.n	80097d6 <USBD_CDC_Setup+0x19e>
          break;
 80097d0:	bf00      	nop
 80097d2:	e008      	b.n	80097e6 <USBD_CDC_Setup+0x1ae>
          break;
 80097d4:	bf00      	nop
      }
      break;
 80097d6:	e006      	b.n	80097e6 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 80097d8:	6839      	ldr	r1, [r7, #0]
 80097da:	6878      	ldr	r0, [r7, #4]
 80097dc:	f001 fc43 	bl	800b066 <USBD_CtlError>
      ret = USBD_FAIL;
 80097e0:	2303      	movs	r3, #3
 80097e2:	75fb      	strb	r3, [r7, #23]
      break;
 80097e4:	bf00      	nop
  }

  return (uint8_t)ret;
 80097e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80097e8:	4618      	mov	r0, r3
 80097ea:	3718      	adds	r7, #24
 80097ec:	46bd      	mov	sp, r7
 80097ee:	bd80      	pop	{r7, pc}

080097f0 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80097f0:	b580      	push	{r7, lr}
 80097f2:	b084      	sub	sp, #16
 80097f4:	af00      	add	r7, sp, #0
 80097f6:	6078      	str	r0, [r7, #4]
 80097f8:	460b      	mov	r3, r1
 80097fa:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009802:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	32b0      	adds	r2, #176	; 0xb0
 800980e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009812:	2b00      	cmp	r3, #0
 8009814:	d101      	bne.n	800981a <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8009816:	2303      	movs	r3, #3
 8009818:	e065      	b.n	80098e6 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	32b0      	adds	r2, #176	; 0xb0
 8009824:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009828:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800982a:	78fb      	ldrb	r3, [r7, #3]
 800982c:	f003 020f 	and.w	r2, r3, #15
 8009830:	6879      	ldr	r1, [r7, #4]
 8009832:	4613      	mov	r3, r2
 8009834:	009b      	lsls	r3, r3, #2
 8009836:	4413      	add	r3, r2
 8009838:	009b      	lsls	r3, r3, #2
 800983a:	440b      	add	r3, r1
 800983c:	3318      	adds	r3, #24
 800983e:	681b      	ldr	r3, [r3, #0]
 8009840:	2b00      	cmp	r3, #0
 8009842:	d02f      	beq.n	80098a4 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8009844:	78fb      	ldrb	r3, [r7, #3]
 8009846:	f003 020f 	and.w	r2, r3, #15
 800984a:	6879      	ldr	r1, [r7, #4]
 800984c:	4613      	mov	r3, r2
 800984e:	009b      	lsls	r3, r3, #2
 8009850:	4413      	add	r3, r2
 8009852:	009b      	lsls	r3, r3, #2
 8009854:	440b      	add	r3, r1
 8009856:	3318      	adds	r3, #24
 8009858:	681a      	ldr	r2, [r3, #0]
 800985a:	78fb      	ldrb	r3, [r7, #3]
 800985c:	f003 010f 	and.w	r1, r3, #15
 8009860:	68f8      	ldr	r0, [r7, #12]
 8009862:	460b      	mov	r3, r1
 8009864:	00db      	lsls	r3, r3, #3
 8009866:	440b      	add	r3, r1
 8009868:	009b      	lsls	r3, r3, #2
 800986a:	4403      	add	r3, r0
 800986c:	3348      	adds	r3, #72	; 0x48
 800986e:	681b      	ldr	r3, [r3, #0]
 8009870:	fbb2 f1f3 	udiv	r1, r2, r3
 8009874:	fb01 f303 	mul.w	r3, r1, r3
 8009878:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800987a:	2b00      	cmp	r3, #0
 800987c:	d112      	bne.n	80098a4 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800987e:	78fb      	ldrb	r3, [r7, #3]
 8009880:	f003 020f 	and.w	r2, r3, #15
 8009884:	6879      	ldr	r1, [r7, #4]
 8009886:	4613      	mov	r3, r2
 8009888:	009b      	lsls	r3, r3, #2
 800988a:	4413      	add	r3, r2
 800988c:	009b      	lsls	r3, r3, #2
 800988e:	440b      	add	r3, r1
 8009890:	3318      	adds	r3, #24
 8009892:	2200      	movs	r2, #0
 8009894:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8009896:	78f9      	ldrb	r1, [r7, #3]
 8009898:	2300      	movs	r3, #0
 800989a:	2200      	movs	r2, #0
 800989c:	6878      	ldr	r0, [r7, #4]
 800989e:	f002 f95a 	bl	800bb56 <USBD_LL_Transmit>
 80098a2:	e01f      	b.n	80098e4 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 80098a4:	68bb      	ldr	r3, [r7, #8]
 80098a6:	2200      	movs	r2, #0
 80098a8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80098b2:	687a      	ldr	r2, [r7, #4]
 80098b4:	33b0      	adds	r3, #176	; 0xb0
 80098b6:	009b      	lsls	r3, r3, #2
 80098b8:	4413      	add	r3, r2
 80098ba:	685b      	ldr	r3, [r3, #4]
 80098bc:	691b      	ldr	r3, [r3, #16]
 80098be:	2b00      	cmp	r3, #0
 80098c0:	d010      	beq.n	80098e4 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80098c8:	687a      	ldr	r2, [r7, #4]
 80098ca:	33b0      	adds	r3, #176	; 0xb0
 80098cc:	009b      	lsls	r3, r3, #2
 80098ce:	4413      	add	r3, r2
 80098d0:	685b      	ldr	r3, [r3, #4]
 80098d2:	691b      	ldr	r3, [r3, #16]
 80098d4:	68ba      	ldr	r2, [r7, #8]
 80098d6:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 80098da:	68ba      	ldr	r2, [r7, #8]
 80098dc:	f502 7104 	add.w	r1, r2, #528	; 0x210
 80098e0:	78fa      	ldrb	r2, [r7, #3]
 80098e2:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80098e4:	2300      	movs	r3, #0
}
 80098e6:	4618      	mov	r0, r3
 80098e8:	3710      	adds	r7, #16
 80098ea:	46bd      	mov	sp, r7
 80098ec:	bd80      	pop	{r7, pc}

080098ee <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80098ee:	b580      	push	{r7, lr}
 80098f0:	b084      	sub	sp, #16
 80098f2:	af00      	add	r7, sp, #0
 80098f4:	6078      	str	r0, [r7, #4]
 80098f6:	460b      	mov	r3, r1
 80098f8:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	32b0      	adds	r2, #176	; 0xb0
 8009904:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009908:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	32b0      	adds	r2, #176	; 0xb0
 8009914:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009918:	2b00      	cmp	r3, #0
 800991a:	d101      	bne.n	8009920 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800991c:	2303      	movs	r3, #3
 800991e:	e01a      	b.n	8009956 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8009920:	78fb      	ldrb	r3, [r7, #3]
 8009922:	4619      	mov	r1, r3
 8009924:	6878      	ldr	r0, [r7, #4]
 8009926:	f002 f958 	bl	800bbda <USBD_LL_GetRxDataSize>
 800992a:	4602      	mov	r2, r0
 800992c:	68fb      	ldr	r3, [r7, #12]
 800992e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009938:	687a      	ldr	r2, [r7, #4]
 800993a:	33b0      	adds	r3, #176	; 0xb0
 800993c:	009b      	lsls	r3, r3, #2
 800993e:	4413      	add	r3, r2
 8009940:	685b      	ldr	r3, [r3, #4]
 8009942:	68db      	ldr	r3, [r3, #12]
 8009944:	68fa      	ldr	r2, [r7, #12]
 8009946:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800994a:	68fa      	ldr	r2, [r7, #12]
 800994c:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8009950:	4611      	mov	r1, r2
 8009952:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8009954:	2300      	movs	r3, #0
}
 8009956:	4618      	mov	r0, r3
 8009958:	3710      	adds	r7, #16
 800995a:	46bd      	mov	sp, r7
 800995c:	bd80      	pop	{r7, pc}

0800995e <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800995e:	b580      	push	{r7, lr}
 8009960:	b084      	sub	sp, #16
 8009962:	af00      	add	r7, sp, #0
 8009964:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	32b0      	adds	r2, #176	; 0xb0
 8009970:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009974:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8009976:	68fb      	ldr	r3, [r7, #12]
 8009978:	2b00      	cmp	r3, #0
 800997a:	d101      	bne.n	8009980 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800997c:	2303      	movs	r3, #3
 800997e:	e025      	b.n	80099cc <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009986:	687a      	ldr	r2, [r7, #4]
 8009988:	33b0      	adds	r3, #176	; 0xb0
 800998a:	009b      	lsls	r3, r3, #2
 800998c:	4413      	add	r3, r2
 800998e:	685b      	ldr	r3, [r3, #4]
 8009990:	2b00      	cmp	r3, #0
 8009992:	d01a      	beq.n	80099ca <USBD_CDC_EP0_RxReady+0x6c>
 8009994:	68fb      	ldr	r3, [r7, #12]
 8009996:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800999a:	2bff      	cmp	r3, #255	; 0xff
 800999c:	d015      	beq.n	80099ca <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80099a4:	687a      	ldr	r2, [r7, #4]
 80099a6:	33b0      	adds	r3, #176	; 0xb0
 80099a8:	009b      	lsls	r3, r3, #2
 80099aa:	4413      	add	r3, r2
 80099ac:	685b      	ldr	r3, [r3, #4]
 80099ae:	689b      	ldr	r3, [r3, #8]
 80099b0:	68fa      	ldr	r2, [r7, #12]
 80099b2:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 80099b6:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 80099b8:	68fa      	ldr	r2, [r7, #12]
 80099ba:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80099be:	b292      	uxth	r2, r2
 80099c0:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80099c2:	68fb      	ldr	r3, [r7, #12]
 80099c4:	22ff      	movs	r2, #255	; 0xff
 80099c6:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 80099ca:	2300      	movs	r3, #0
}
 80099cc:	4618      	mov	r0, r3
 80099ce:	3710      	adds	r7, #16
 80099d0:	46bd      	mov	sp, r7
 80099d2:	bd80      	pop	{r7, pc}

080099d4 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80099d4:	b580      	push	{r7, lr}
 80099d6:	b086      	sub	sp, #24
 80099d8:	af00      	add	r7, sp, #0
 80099da:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80099dc:	2182      	movs	r1, #130	; 0x82
 80099de:	4818      	ldr	r0, [pc, #96]	; (8009a40 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80099e0:	f000 fd09 	bl	800a3f6 <USBD_GetEpDesc>
 80099e4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80099e6:	2101      	movs	r1, #1
 80099e8:	4815      	ldr	r0, [pc, #84]	; (8009a40 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80099ea:	f000 fd04 	bl	800a3f6 <USBD_GetEpDesc>
 80099ee:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80099f0:	2181      	movs	r1, #129	; 0x81
 80099f2:	4813      	ldr	r0, [pc, #76]	; (8009a40 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80099f4:	f000 fcff 	bl	800a3f6 <USBD_GetEpDesc>
 80099f8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80099fa:	697b      	ldr	r3, [r7, #20]
 80099fc:	2b00      	cmp	r3, #0
 80099fe:	d002      	beq.n	8009a06 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8009a00:	697b      	ldr	r3, [r7, #20]
 8009a02:	2210      	movs	r2, #16
 8009a04:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8009a06:	693b      	ldr	r3, [r7, #16]
 8009a08:	2b00      	cmp	r3, #0
 8009a0a:	d006      	beq.n	8009a1a <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009a0c:	693b      	ldr	r3, [r7, #16]
 8009a0e:	2200      	movs	r2, #0
 8009a10:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009a14:	711a      	strb	r2, [r3, #4]
 8009a16:	2200      	movs	r2, #0
 8009a18:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8009a1a:	68fb      	ldr	r3, [r7, #12]
 8009a1c:	2b00      	cmp	r3, #0
 8009a1e:	d006      	beq.n	8009a2e <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009a20:	68fb      	ldr	r3, [r7, #12]
 8009a22:	2200      	movs	r2, #0
 8009a24:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009a28:	711a      	strb	r2, [r3, #4]
 8009a2a:	2200      	movs	r2, #0
 8009a2c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	2243      	movs	r2, #67	; 0x43
 8009a32:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8009a34:	4b02      	ldr	r3, [pc, #8]	; (8009a40 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8009a36:	4618      	mov	r0, r3
 8009a38:	3718      	adds	r7, #24
 8009a3a:	46bd      	mov	sp, r7
 8009a3c:	bd80      	pop	{r7, pc}
 8009a3e:	bf00      	nop
 8009a40:	20000060 	.word	0x20000060

08009a44 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8009a44:	b580      	push	{r7, lr}
 8009a46:	b086      	sub	sp, #24
 8009a48:	af00      	add	r7, sp, #0
 8009a4a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8009a4c:	2182      	movs	r1, #130	; 0x82
 8009a4e:	4818      	ldr	r0, [pc, #96]	; (8009ab0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8009a50:	f000 fcd1 	bl	800a3f6 <USBD_GetEpDesc>
 8009a54:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8009a56:	2101      	movs	r1, #1
 8009a58:	4815      	ldr	r0, [pc, #84]	; (8009ab0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8009a5a:	f000 fccc 	bl	800a3f6 <USBD_GetEpDesc>
 8009a5e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8009a60:	2181      	movs	r1, #129	; 0x81
 8009a62:	4813      	ldr	r0, [pc, #76]	; (8009ab0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8009a64:	f000 fcc7 	bl	800a3f6 <USBD_GetEpDesc>
 8009a68:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8009a6a:	697b      	ldr	r3, [r7, #20]
 8009a6c:	2b00      	cmp	r3, #0
 8009a6e:	d002      	beq.n	8009a76 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8009a70:	697b      	ldr	r3, [r7, #20]
 8009a72:	2210      	movs	r2, #16
 8009a74:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8009a76:	693b      	ldr	r3, [r7, #16]
 8009a78:	2b00      	cmp	r3, #0
 8009a7a:	d006      	beq.n	8009a8a <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8009a7c:	693b      	ldr	r3, [r7, #16]
 8009a7e:	2200      	movs	r2, #0
 8009a80:	711a      	strb	r2, [r3, #4]
 8009a82:	2200      	movs	r2, #0
 8009a84:	f042 0202 	orr.w	r2, r2, #2
 8009a88:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8009a8a:	68fb      	ldr	r3, [r7, #12]
 8009a8c:	2b00      	cmp	r3, #0
 8009a8e:	d006      	beq.n	8009a9e <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8009a90:	68fb      	ldr	r3, [r7, #12]
 8009a92:	2200      	movs	r2, #0
 8009a94:	711a      	strb	r2, [r3, #4]
 8009a96:	2200      	movs	r2, #0
 8009a98:	f042 0202 	orr.w	r2, r2, #2
 8009a9c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	2243      	movs	r2, #67	; 0x43
 8009aa2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8009aa4:	4b02      	ldr	r3, [pc, #8]	; (8009ab0 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8009aa6:	4618      	mov	r0, r3
 8009aa8:	3718      	adds	r7, #24
 8009aaa:	46bd      	mov	sp, r7
 8009aac:	bd80      	pop	{r7, pc}
 8009aae:	bf00      	nop
 8009ab0:	20000060 	.word	0x20000060

08009ab4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8009ab4:	b580      	push	{r7, lr}
 8009ab6:	b086      	sub	sp, #24
 8009ab8:	af00      	add	r7, sp, #0
 8009aba:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8009abc:	2182      	movs	r1, #130	; 0x82
 8009abe:	4818      	ldr	r0, [pc, #96]	; (8009b20 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8009ac0:	f000 fc99 	bl	800a3f6 <USBD_GetEpDesc>
 8009ac4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8009ac6:	2101      	movs	r1, #1
 8009ac8:	4815      	ldr	r0, [pc, #84]	; (8009b20 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8009aca:	f000 fc94 	bl	800a3f6 <USBD_GetEpDesc>
 8009ace:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8009ad0:	2181      	movs	r1, #129	; 0x81
 8009ad2:	4813      	ldr	r0, [pc, #76]	; (8009b20 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8009ad4:	f000 fc8f 	bl	800a3f6 <USBD_GetEpDesc>
 8009ad8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8009ada:	697b      	ldr	r3, [r7, #20]
 8009adc:	2b00      	cmp	r3, #0
 8009ade:	d002      	beq.n	8009ae6 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8009ae0:	697b      	ldr	r3, [r7, #20]
 8009ae2:	2210      	movs	r2, #16
 8009ae4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8009ae6:	693b      	ldr	r3, [r7, #16]
 8009ae8:	2b00      	cmp	r3, #0
 8009aea:	d006      	beq.n	8009afa <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009aec:	693b      	ldr	r3, [r7, #16]
 8009aee:	2200      	movs	r2, #0
 8009af0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009af4:	711a      	strb	r2, [r3, #4]
 8009af6:	2200      	movs	r2, #0
 8009af8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8009afa:	68fb      	ldr	r3, [r7, #12]
 8009afc:	2b00      	cmp	r3, #0
 8009afe:	d006      	beq.n	8009b0e <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009b00:	68fb      	ldr	r3, [r7, #12]
 8009b02:	2200      	movs	r2, #0
 8009b04:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009b08:	711a      	strb	r2, [r3, #4]
 8009b0a:	2200      	movs	r2, #0
 8009b0c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	2243      	movs	r2, #67	; 0x43
 8009b12:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8009b14:	4b02      	ldr	r3, [pc, #8]	; (8009b20 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8009b16:	4618      	mov	r0, r3
 8009b18:	3718      	adds	r7, #24
 8009b1a:	46bd      	mov	sp, r7
 8009b1c:	bd80      	pop	{r7, pc}
 8009b1e:	bf00      	nop
 8009b20:	20000060 	.word	0x20000060

08009b24 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8009b24:	b480      	push	{r7}
 8009b26:	b083      	sub	sp, #12
 8009b28:	af00      	add	r7, sp, #0
 8009b2a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	220a      	movs	r2, #10
 8009b30:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8009b32:	4b03      	ldr	r3, [pc, #12]	; (8009b40 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8009b34:	4618      	mov	r0, r3
 8009b36:	370c      	adds	r7, #12
 8009b38:	46bd      	mov	sp, r7
 8009b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b3e:	4770      	bx	lr
 8009b40:	2000001c 	.word	0x2000001c

08009b44 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8009b44:	b480      	push	{r7}
 8009b46:	b083      	sub	sp, #12
 8009b48:	af00      	add	r7, sp, #0
 8009b4a:	6078      	str	r0, [r7, #4]
 8009b4c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8009b4e:	683b      	ldr	r3, [r7, #0]
 8009b50:	2b00      	cmp	r3, #0
 8009b52:	d101      	bne.n	8009b58 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8009b54:	2303      	movs	r3, #3
 8009b56:	e009      	b.n	8009b6c <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009b5e:	687a      	ldr	r2, [r7, #4]
 8009b60:	33b0      	adds	r3, #176	; 0xb0
 8009b62:	009b      	lsls	r3, r3, #2
 8009b64:	4413      	add	r3, r2
 8009b66:	683a      	ldr	r2, [r7, #0]
 8009b68:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8009b6a:	2300      	movs	r3, #0
}
 8009b6c:	4618      	mov	r0, r3
 8009b6e:	370c      	adds	r7, #12
 8009b70:	46bd      	mov	sp, r7
 8009b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b76:	4770      	bx	lr

08009b78 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8009b78:	b480      	push	{r7}
 8009b7a:	b087      	sub	sp, #28
 8009b7c:	af00      	add	r7, sp, #0
 8009b7e:	60f8      	str	r0, [r7, #12]
 8009b80:	60b9      	str	r1, [r7, #8]
 8009b82:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009b84:	68fb      	ldr	r3, [r7, #12]
 8009b86:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009b8a:	68fb      	ldr	r3, [r7, #12]
 8009b8c:	32b0      	adds	r2, #176	; 0xb0
 8009b8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009b92:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8009b94:	697b      	ldr	r3, [r7, #20]
 8009b96:	2b00      	cmp	r3, #0
 8009b98:	d101      	bne.n	8009b9e <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8009b9a:	2303      	movs	r3, #3
 8009b9c:	e008      	b.n	8009bb0 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8009b9e:	697b      	ldr	r3, [r7, #20]
 8009ba0:	68ba      	ldr	r2, [r7, #8]
 8009ba2:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8009ba6:	697b      	ldr	r3, [r7, #20]
 8009ba8:	687a      	ldr	r2, [r7, #4]
 8009baa:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8009bae:	2300      	movs	r3, #0
}
 8009bb0:	4618      	mov	r0, r3
 8009bb2:	371c      	adds	r7, #28
 8009bb4:	46bd      	mov	sp, r7
 8009bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bba:	4770      	bx	lr

08009bbc <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8009bbc:	b480      	push	{r7}
 8009bbe:	b085      	sub	sp, #20
 8009bc0:	af00      	add	r7, sp, #0
 8009bc2:	6078      	str	r0, [r7, #4]
 8009bc4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	32b0      	adds	r2, #176	; 0xb0
 8009bd0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009bd4:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8009bd6:	68fb      	ldr	r3, [r7, #12]
 8009bd8:	2b00      	cmp	r3, #0
 8009bda:	d101      	bne.n	8009be0 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8009bdc:	2303      	movs	r3, #3
 8009bde:	e004      	b.n	8009bea <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8009be0:	68fb      	ldr	r3, [r7, #12]
 8009be2:	683a      	ldr	r2, [r7, #0]
 8009be4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8009be8:	2300      	movs	r3, #0
}
 8009bea:	4618      	mov	r0, r3
 8009bec:	3714      	adds	r7, #20
 8009bee:	46bd      	mov	sp, r7
 8009bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bf4:	4770      	bx	lr
	...

08009bf8 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8009bf8:	b580      	push	{r7, lr}
 8009bfa:	b084      	sub	sp, #16
 8009bfc:	af00      	add	r7, sp, #0
 8009bfe:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	32b0      	adds	r2, #176	; 0xb0
 8009c0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009c0e:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	32b0      	adds	r2, #176	; 0xb0
 8009c1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009c1e:	2b00      	cmp	r3, #0
 8009c20:	d101      	bne.n	8009c26 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8009c22:	2303      	movs	r3, #3
 8009c24:	e018      	b.n	8009c58 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	7c1b      	ldrb	r3, [r3, #16]
 8009c2a:	2b00      	cmp	r3, #0
 8009c2c:	d10a      	bne.n	8009c44 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009c2e:	4b0c      	ldr	r3, [pc, #48]	; (8009c60 <USBD_CDC_ReceivePacket+0x68>)
 8009c30:	7819      	ldrb	r1, [r3, #0]
 8009c32:	68fb      	ldr	r3, [r7, #12]
 8009c34:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009c38:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009c3c:	6878      	ldr	r0, [r7, #4]
 8009c3e:	f001 ffab 	bl	800bb98 <USBD_LL_PrepareReceive>
 8009c42:	e008      	b.n	8009c56 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009c44:	4b06      	ldr	r3, [pc, #24]	; (8009c60 <USBD_CDC_ReceivePacket+0x68>)
 8009c46:	7819      	ldrb	r1, [r3, #0]
 8009c48:	68fb      	ldr	r3, [r7, #12]
 8009c4a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009c4e:	2340      	movs	r3, #64	; 0x40
 8009c50:	6878      	ldr	r0, [r7, #4]
 8009c52:	f001 ffa1 	bl	800bb98 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8009c56:	2300      	movs	r3, #0
}
 8009c58:	4618      	mov	r0, r3
 8009c5a:	3710      	adds	r7, #16
 8009c5c:	46bd      	mov	sp, r7
 8009c5e:	bd80      	pop	{r7, pc}
 8009c60:	200000a4 	.word	0x200000a4

08009c64 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8009c64:	b580      	push	{r7, lr}
 8009c66:	b086      	sub	sp, #24
 8009c68:	af00      	add	r7, sp, #0
 8009c6a:	60f8      	str	r0, [r7, #12]
 8009c6c:	60b9      	str	r1, [r7, #8]
 8009c6e:	4613      	mov	r3, r2
 8009c70:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8009c72:	68fb      	ldr	r3, [r7, #12]
 8009c74:	2b00      	cmp	r3, #0
 8009c76:	d101      	bne.n	8009c7c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8009c78:	2303      	movs	r3, #3
 8009c7a:	e01f      	b.n	8009cbc <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8009c7c:	68fb      	ldr	r3, [r7, #12]
 8009c7e:	2200      	movs	r2, #0
 8009c80:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8009c84:	68fb      	ldr	r3, [r7, #12]
 8009c86:	2200      	movs	r2, #0
 8009c88:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8009c8c:	68fb      	ldr	r3, [r7, #12]
 8009c8e:	2200      	movs	r2, #0
 8009c90:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8009c94:	68bb      	ldr	r3, [r7, #8]
 8009c96:	2b00      	cmp	r3, #0
 8009c98:	d003      	beq.n	8009ca2 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8009c9a:	68fb      	ldr	r3, [r7, #12]
 8009c9c:	68ba      	ldr	r2, [r7, #8]
 8009c9e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009ca2:	68fb      	ldr	r3, [r7, #12]
 8009ca4:	2201      	movs	r2, #1
 8009ca6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8009caa:	68fb      	ldr	r3, [r7, #12]
 8009cac:	79fa      	ldrb	r2, [r7, #7]
 8009cae:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8009cb0:	68f8      	ldr	r0, [r7, #12]
 8009cb2:	f001 fe15 	bl	800b8e0 <USBD_LL_Init>
 8009cb6:	4603      	mov	r3, r0
 8009cb8:	75fb      	strb	r3, [r7, #23]

  return ret;
 8009cba:	7dfb      	ldrb	r3, [r7, #23]
}
 8009cbc:	4618      	mov	r0, r3
 8009cbe:	3718      	adds	r7, #24
 8009cc0:	46bd      	mov	sp, r7
 8009cc2:	bd80      	pop	{r7, pc}

08009cc4 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8009cc4:	b580      	push	{r7, lr}
 8009cc6:	b084      	sub	sp, #16
 8009cc8:	af00      	add	r7, sp, #0
 8009cca:	6078      	str	r0, [r7, #4]
 8009ccc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009cce:	2300      	movs	r3, #0
 8009cd0:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8009cd2:	683b      	ldr	r3, [r7, #0]
 8009cd4:	2b00      	cmp	r3, #0
 8009cd6:	d101      	bne.n	8009cdc <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8009cd8:	2303      	movs	r3, #3
 8009cda:	e025      	b.n	8009d28 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	683a      	ldr	r2, [r7, #0]
 8009ce0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	32ae      	adds	r2, #174	; 0xae
 8009cee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009cf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009cf4:	2b00      	cmp	r3, #0
 8009cf6:	d00f      	beq.n	8009d18 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	32ae      	adds	r2, #174	; 0xae
 8009d02:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009d06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d08:	f107 020e 	add.w	r2, r7, #14
 8009d0c:	4610      	mov	r0, r2
 8009d0e:	4798      	blx	r3
 8009d10:	4602      	mov	r2, r0
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8009d1e:	1c5a      	adds	r2, r3, #1
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8009d26:	2300      	movs	r3, #0
}
 8009d28:	4618      	mov	r0, r3
 8009d2a:	3710      	adds	r7, #16
 8009d2c:	46bd      	mov	sp, r7
 8009d2e:	bd80      	pop	{r7, pc}

08009d30 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8009d30:	b580      	push	{r7, lr}
 8009d32:	b082      	sub	sp, #8
 8009d34:	af00      	add	r7, sp, #0
 8009d36:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8009d38:	6878      	ldr	r0, [r7, #4]
 8009d3a:	f001 fe23 	bl	800b984 <USBD_LL_Start>
 8009d3e:	4603      	mov	r3, r0
}
 8009d40:	4618      	mov	r0, r3
 8009d42:	3708      	adds	r7, #8
 8009d44:	46bd      	mov	sp, r7
 8009d46:	bd80      	pop	{r7, pc}

08009d48 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8009d48:	b480      	push	{r7}
 8009d4a:	b083      	sub	sp, #12
 8009d4c:	af00      	add	r7, sp, #0
 8009d4e:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009d50:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8009d52:	4618      	mov	r0, r3
 8009d54:	370c      	adds	r7, #12
 8009d56:	46bd      	mov	sp, r7
 8009d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d5c:	4770      	bx	lr

08009d5e <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009d5e:	b580      	push	{r7, lr}
 8009d60:	b084      	sub	sp, #16
 8009d62:	af00      	add	r7, sp, #0
 8009d64:	6078      	str	r0, [r7, #4]
 8009d66:	460b      	mov	r3, r1
 8009d68:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8009d6a:	2300      	movs	r3, #0
 8009d6c:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009d74:	2b00      	cmp	r3, #0
 8009d76:	d009      	beq.n	8009d8c <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009d7e:	681b      	ldr	r3, [r3, #0]
 8009d80:	78fa      	ldrb	r2, [r7, #3]
 8009d82:	4611      	mov	r1, r2
 8009d84:	6878      	ldr	r0, [r7, #4]
 8009d86:	4798      	blx	r3
 8009d88:	4603      	mov	r3, r0
 8009d8a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8009d8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d8e:	4618      	mov	r0, r3
 8009d90:	3710      	adds	r7, #16
 8009d92:	46bd      	mov	sp, r7
 8009d94:	bd80      	pop	{r7, pc}

08009d96 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009d96:	b580      	push	{r7, lr}
 8009d98:	b084      	sub	sp, #16
 8009d9a:	af00      	add	r7, sp, #0
 8009d9c:	6078      	str	r0, [r7, #4]
 8009d9e:	460b      	mov	r3, r1
 8009da0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8009da2:	2300      	movs	r3, #0
 8009da4:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009dac:	685b      	ldr	r3, [r3, #4]
 8009dae:	78fa      	ldrb	r2, [r7, #3]
 8009db0:	4611      	mov	r1, r2
 8009db2:	6878      	ldr	r0, [r7, #4]
 8009db4:	4798      	blx	r3
 8009db6:	4603      	mov	r3, r0
 8009db8:	2b00      	cmp	r3, #0
 8009dba:	d001      	beq.n	8009dc0 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8009dbc:	2303      	movs	r3, #3
 8009dbe:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8009dc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8009dc2:	4618      	mov	r0, r3
 8009dc4:	3710      	adds	r7, #16
 8009dc6:	46bd      	mov	sp, r7
 8009dc8:	bd80      	pop	{r7, pc}

08009dca <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8009dca:	b580      	push	{r7, lr}
 8009dcc:	b084      	sub	sp, #16
 8009dce:	af00      	add	r7, sp, #0
 8009dd0:	6078      	str	r0, [r7, #4]
 8009dd2:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009dda:	6839      	ldr	r1, [r7, #0]
 8009ddc:	4618      	mov	r0, r3
 8009dde:	f001 f908 	bl	800aff2 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	2201      	movs	r2, #1
 8009de6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8009df0:	461a      	mov	r2, r3
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8009dfe:	f003 031f 	and.w	r3, r3, #31
 8009e02:	2b02      	cmp	r3, #2
 8009e04:	d01a      	beq.n	8009e3c <USBD_LL_SetupStage+0x72>
 8009e06:	2b02      	cmp	r3, #2
 8009e08:	d822      	bhi.n	8009e50 <USBD_LL_SetupStage+0x86>
 8009e0a:	2b00      	cmp	r3, #0
 8009e0c:	d002      	beq.n	8009e14 <USBD_LL_SetupStage+0x4a>
 8009e0e:	2b01      	cmp	r3, #1
 8009e10:	d00a      	beq.n	8009e28 <USBD_LL_SetupStage+0x5e>
 8009e12:	e01d      	b.n	8009e50 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009e1a:	4619      	mov	r1, r3
 8009e1c:	6878      	ldr	r0, [r7, #4]
 8009e1e:	f000 fb5f 	bl	800a4e0 <USBD_StdDevReq>
 8009e22:	4603      	mov	r3, r0
 8009e24:	73fb      	strb	r3, [r7, #15]
      break;
 8009e26:	e020      	b.n	8009e6a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009e2e:	4619      	mov	r1, r3
 8009e30:	6878      	ldr	r0, [r7, #4]
 8009e32:	f000 fbc7 	bl	800a5c4 <USBD_StdItfReq>
 8009e36:	4603      	mov	r3, r0
 8009e38:	73fb      	strb	r3, [r7, #15]
      break;
 8009e3a:	e016      	b.n	8009e6a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009e42:	4619      	mov	r1, r3
 8009e44:	6878      	ldr	r0, [r7, #4]
 8009e46:	f000 fc29 	bl	800a69c <USBD_StdEPReq>
 8009e4a:	4603      	mov	r3, r0
 8009e4c:	73fb      	strb	r3, [r7, #15]
      break;
 8009e4e:	e00c      	b.n	8009e6a <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8009e56:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8009e5a:	b2db      	uxtb	r3, r3
 8009e5c:	4619      	mov	r1, r3
 8009e5e:	6878      	ldr	r0, [r7, #4]
 8009e60:	f001 fdf0 	bl	800ba44 <USBD_LL_StallEP>
 8009e64:	4603      	mov	r3, r0
 8009e66:	73fb      	strb	r3, [r7, #15]
      break;
 8009e68:	bf00      	nop
  }

  return ret;
 8009e6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e6c:	4618      	mov	r0, r3
 8009e6e:	3710      	adds	r7, #16
 8009e70:	46bd      	mov	sp, r7
 8009e72:	bd80      	pop	{r7, pc}

08009e74 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8009e74:	b580      	push	{r7, lr}
 8009e76:	b086      	sub	sp, #24
 8009e78:	af00      	add	r7, sp, #0
 8009e7a:	60f8      	str	r0, [r7, #12]
 8009e7c:	460b      	mov	r3, r1
 8009e7e:	607a      	str	r2, [r7, #4]
 8009e80:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8009e82:	2300      	movs	r3, #0
 8009e84:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8009e86:	7afb      	ldrb	r3, [r7, #11]
 8009e88:	2b00      	cmp	r3, #0
 8009e8a:	d16e      	bne.n	8009f6a <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8009e8c:	68fb      	ldr	r3, [r7, #12]
 8009e8e:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8009e92:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8009e94:	68fb      	ldr	r3, [r7, #12]
 8009e96:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009e9a:	2b03      	cmp	r3, #3
 8009e9c:	f040 8098 	bne.w	8009fd0 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8009ea0:	693b      	ldr	r3, [r7, #16]
 8009ea2:	689a      	ldr	r2, [r3, #8]
 8009ea4:	693b      	ldr	r3, [r7, #16]
 8009ea6:	68db      	ldr	r3, [r3, #12]
 8009ea8:	429a      	cmp	r2, r3
 8009eaa:	d913      	bls.n	8009ed4 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8009eac:	693b      	ldr	r3, [r7, #16]
 8009eae:	689a      	ldr	r2, [r3, #8]
 8009eb0:	693b      	ldr	r3, [r7, #16]
 8009eb2:	68db      	ldr	r3, [r3, #12]
 8009eb4:	1ad2      	subs	r2, r2, r3
 8009eb6:	693b      	ldr	r3, [r7, #16]
 8009eb8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8009eba:	693b      	ldr	r3, [r7, #16]
 8009ebc:	68da      	ldr	r2, [r3, #12]
 8009ebe:	693b      	ldr	r3, [r7, #16]
 8009ec0:	689b      	ldr	r3, [r3, #8]
 8009ec2:	4293      	cmp	r3, r2
 8009ec4:	bf28      	it	cs
 8009ec6:	4613      	movcs	r3, r2
 8009ec8:	461a      	mov	r2, r3
 8009eca:	6879      	ldr	r1, [r7, #4]
 8009ecc:	68f8      	ldr	r0, [r7, #12]
 8009ece:	f001 f984 	bl	800b1da <USBD_CtlContinueRx>
 8009ed2:	e07d      	b.n	8009fd0 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8009ed4:	68fb      	ldr	r3, [r7, #12]
 8009ed6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8009eda:	f003 031f 	and.w	r3, r3, #31
 8009ede:	2b02      	cmp	r3, #2
 8009ee0:	d014      	beq.n	8009f0c <USBD_LL_DataOutStage+0x98>
 8009ee2:	2b02      	cmp	r3, #2
 8009ee4:	d81d      	bhi.n	8009f22 <USBD_LL_DataOutStage+0xae>
 8009ee6:	2b00      	cmp	r3, #0
 8009ee8:	d002      	beq.n	8009ef0 <USBD_LL_DataOutStage+0x7c>
 8009eea:	2b01      	cmp	r3, #1
 8009eec:	d003      	beq.n	8009ef6 <USBD_LL_DataOutStage+0x82>
 8009eee:	e018      	b.n	8009f22 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8009ef0:	2300      	movs	r3, #0
 8009ef2:	75bb      	strb	r3, [r7, #22]
            break;
 8009ef4:	e018      	b.n	8009f28 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8009ef6:	68fb      	ldr	r3, [r7, #12]
 8009ef8:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8009efc:	b2db      	uxtb	r3, r3
 8009efe:	4619      	mov	r1, r3
 8009f00:	68f8      	ldr	r0, [r7, #12]
 8009f02:	f000 fa5e 	bl	800a3c2 <USBD_CoreFindIF>
 8009f06:	4603      	mov	r3, r0
 8009f08:	75bb      	strb	r3, [r7, #22]
            break;
 8009f0a:	e00d      	b.n	8009f28 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8009f0c:	68fb      	ldr	r3, [r7, #12]
 8009f0e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8009f12:	b2db      	uxtb	r3, r3
 8009f14:	4619      	mov	r1, r3
 8009f16:	68f8      	ldr	r0, [r7, #12]
 8009f18:	f000 fa60 	bl	800a3dc <USBD_CoreFindEP>
 8009f1c:	4603      	mov	r3, r0
 8009f1e:	75bb      	strb	r3, [r7, #22]
            break;
 8009f20:	e002      	b.n	8009f28 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8009f22:	2300      	movs	r3, #0
 8009f24:	75bb      	strb	r3, [r7, #22]
            break;
 8009f26:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8009f28:	7dbb      	ldrb	r3, [r7, #22]
 8009f2a:	2b00      	cmp	r3, #0
 8009f2c:	d119      	bne.n	8009f62 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009f2e:	68fb      	ldr	r3, [r7, #12]
 8009f30:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009f34:	b2db      	uxtb	r3, r3
 8009f36:	2b03      	cmp	r3, #3
 8009f38:	d113      	bne.n	8009f62 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8009f3a:	7dba      	ldrb	r2, [r7, #22]
 8009f3c:	68fb      	ldr	r3, [r7, #12]
 8009f3e:	32ae      	adds	r2, #174	; 0xae
 8009f40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009f44:	691b      	ldr	r3, [r3, #16]
 8009f46:	2b00      	cmp	r3, #0
 8009f48:	d00b      	beq.n	8009f62 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8009f4a:	7dba      	ldrb	r2, [r7, #22]
 8009f4c:	68fb      	ldr	r3, [r7, #12]
 8009f4e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8009f52:	7dba      	ldrb	r2, [r7, #22]
 8009f54:	68fb      	ldr	r3, [r7, #12]
 8009f56:	32ae      	adds	r2, #174	; 0xae
 8009f58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009f5c:	691b      	ldr	r3, [r3, #16]
 8009f5e:	68f8      	ldr	r0, [r7, #12]
 8009f60:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8009f62:	68f8      	ldr	r0, [r7, #12]
 8009f64:	f001 f94a 	bl	800b1fc <USBD_CtlSendStatus>
 8009f68:	e032      	b.n	8009fd0 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8009f6a:	7afb      	ldrb	r3, [r7, #11]
 8009f6c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009f70:	b2db      	uxtb	r3, r3
 8009f72:	4619      	mov	r1, r3
 8009f74:	68f8      	ldr	r0, [r7, #12]
 8009f76:	f000 fa31 	bl	800a3dc <USBD_CoreFindEP>
 8009f7a:	4603      	mov	r3, r0
 8009f7c:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009f7e:	7dbb      	ldrb	r3, [r7, #22]
 8009f80:	2bff      	cmp	r3, #255	; 0xff
 8009f82:	d025      	beq.n	8009fd0 <USBD_LL_DataOutStage+0x15c>
 8009f84:	7dbb      	ldrb	r3, [r7, #22]
 8009f86:	2b00      	cmp	r3, #0
 8009f88:	d122      	bne.n	8009fd0 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009f8a:	68fb      	ldr	r3, [r7, #12]
 8009f8c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009f90:	b2db      	uxtb	r3, r3
 8009f92:	2b03      	cmp	r3, #3
 8009f94:	d117      	bne.n	8009fc6 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8009f96:	7dba      	ldrb	r2, [r7, #22]
 8009f98:	68fb      	ldr	r3, [r7, #12]
 8009f9a:	32ae      	adds	r2, #174	; 0xae
 8009f9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009fa0:	699b      	ldr	r3, [r3, #24]
 8009fa2:	2b00      	cmp	r3, #0
 8009fa4:	d00f      	beq.n	8009fc6 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8009fa6:	7dba      	ldrb	r2, [r7, #22]
 8009fa8:	68fb      	ldr	r3, [r7, #12]
 8009faa:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8009fae:	7dba      	ldrb	r2, [r7, #22]
 8009fb0:	68fb      	ldr	r3, [r7, #12]
 8009fb2:	32ae      	adds	r2, #174	; 0xae
 8009fb4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009fb8:	699b      	ldr	r3, [r3, #24]
 8009fba:	7afa      	ldrb	r2, [r7, #11]
 8009fbc:	4611      	mov	r1, r2
 8009fbe:	68f8      	ldr	r0, [r7, #12]
 8009fc0:	4798      	blx	r3
 8009fc2:	4603      	mov	r3, r0
 8009fc4:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8009fc6:	7dfb      	ldrb	r3, [r7, #23]
 8009fc8:	2b00      	cmp	r3, #0
 8009fca:	d001      	beq.n	8009fd0 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8009fcc:	7dfb      	ldrb	r3, [r7, #23]
 8009fce:	e000      	b.n	8009fd2 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8009fd0:	2300      	movs	r3, #0
}
 8009fd2:	4618      	mov	r0, r3
 8009fd4:	3718      	adds	r7, #24
 8009fd6:	46bd      	mov	sp, r7
 8009fd8:	bd80      	pop	{r7, pc}

08009fda <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8009fda:	b580      	push	{r7, lr}
 8009fdc:	b086      	sub	sp, #24
 8009fde:	af00      	add	r7, sp, #0
 8009fe0:	60f8      	str	r0, [r7, #12]
 8009fe2:	460b      	mov	r3, r1
 8009fe4:	607a      	str	r2, [r7, #4]
 8009fe6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8009fe8:	7afb      	ldrb	r3, [r7, #11]
 8009fea:	2b00      	cmp	r3, #0
 8009fec:	d16f      	bne.n	800a0ce <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8009fee:	68fb      	ldr	r3, [r7, #12]
 8009ff0:	3314      	adds	r3, #20
 8009ff2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8009ff4:	68fb      	ldr	r3, [r7, #12]
 8009ff6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009ffa:	2b02      	cmp	r3, #2
 8009ffc:	d15a      	bne.n	800a0b4 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8009ffe:	693b      	ldr	r3, [r7, #16]
 800a000:	689a      	ldr	r2, [r3, #8]
 800a002:	693b      	ldr	r3, [r7, #16]
 800a004:	68db      	ldr	r3, [r3, #12]
 800a006:	429a      	cmp	r2, r3
 800a008:	d914      	bls.n	800a034 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800a00a:	693b      	ldr	r3, [r7, #16]
 800a00c:	689a      	ldr	r2, [r3, #8]
 800a00e:	693b      	ldr	r3, [r7, #16]
 800a010:	68db      	ldr	r3, [r3, #12]
 800a012:	1ad2      	subs	r2, r2, r3
 800a014:	693b      	ldr	r3, [r7, #16]
 800a016:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800a018:	693b      	ldr	r3, [r7, #16]
 800a01a:	689b      	ldr	r3, [r3, #8]
 800a01c:	461a      	mov	r2, r3
 800a01e:	6879      	ldr	r1, [r7, #4]
 800a020:	68f8      	ldr	r0, [r7, #12]
 800a022:	f001 f8ac 	bl	800b17e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a026:	2300      	movs	r3, #0
 800a028:	2200      	movs	r2, #0
 800a02a:	2100      	movs	r1, #0
 800a02c:	68f8      	ldr	r0, [r7, #12]
 800a02e:	f001 fdb3 	bl	800bb98 <USBD_LL_PrepareReceive>
 800a032:	e03f      	b.n	800a0b4 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800a034:	693b      	ldr	r3, [r7, #16]
 800a036:	68da      	ldr	r2, [r3, #12]
 800a038:	693b      	ldr	r3, [r7, #16]
 800a03a:	689b      	ldr	r3, [r3, #8]
 800a03c:	429a      	cmp	r2, r3
 800a03e:	d11c      	bne.n	800a07a <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800a040:	693b      	ldr	r3, [r7, #16]
 800a042:	685a      	ldr	r2, [r3, #4]
 800a044:	693b      	ldr	r3, [r7, #16]
 800a046:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800a048:	429a      	cmp	r2, r3
 800a04a:	d316      	bcc.n	800a07a <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800a04c:	693b      	ldr	r3, [r7, #16]
 800a04e:	685a      	ldr	r2, [r3, #4]
 800a050:	68fb      	ldr	r3, [r7, #12]
 800a052:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800a056:	429a      	cmp	r2, r3
 800a058:	d20f      	bcs.n	800a07a <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800a05a:	2200      	movs	r2, #0
 800a05c:	2100      	movs	r1, #0
 800a05e:	68f8      	ldr	r0, [r7, #12]
 800a060:	f001 f88d 	bl	800b17e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800a064:	68fb      	ldr	r3, [r7, #12]
 800a066:	2200      	movs	r2, #0
 800a068:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a06c:	2300      	movs	r3, #0
 800a06e:	2200      	movs	r2, #0
 800a070:	2100      	movs	r1, #0
 800a072:	68f8      	ldr	r0, [r7, #12]
 800a074:	f001 fd90 	bl	800bb98 <USBD_LL_PrepareReceive>
 800a078:	e01c      	b.n	800a0b4 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a07a:	68fb      	ldr	r3, [r7, #12]
 800a07c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a080:	b2db      	uxtb	r3, r3
 800a082:	2b03      	cmp	r3, #3
 800a084:	d10f      	bne.n	800a0a6 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800a086:	68fb      	ldr	r3, [r7, #12]
 800a088:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a08c:	68db      	ldr	r3, [r3, #12]
 800a08e:	2b00      	cmp	r3, #0
 800a090:	d009      	beq.n	800a0a6 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800a092:	68fb      	ldr	r3, [r7, #12]
 800a094:	2200      	movs	r2, #0
 800a096:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800a09a:	68fb      	ldr	r3, [r7, #12]
 800a09c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a0a0:	68db      	ldr	r3, [r3, #12]
 800a0a2:	68f8      	ldr	r0, [r7, #12]
 800a0a4:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800a0a6:	2180      	movs	r1, #128	; 0x80
 800a0a8:	68f8      	ldr	r0, [r7, #12]
 800a0aa:	f001 fccb 	bl	800ba44 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800a0ae:	68f8      	ldr	r0, [r7, #12]
 800a0b0:	f001 f8b7 	bl	800b222 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 800a0b4:	68fb      	ldr	r3, [r7, #12]
 800a0b6:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800a0ba:	2b00      	cmp	r3, #0
 800a0bc:	d03a      	beq.n	800a134 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800a0be:	68f8      	ldr	r0, [r7, #12]
 800a0c0:	f7ff fe42 	bl	8009d48 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800a0c4:	68fb      	ldr	r3, [r7, #12]
 800a0c6:	2200      	movs	r2, #0
 800a0c8:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800a0cc:	e032      	b.n	800a134 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800a0ce:	7afb      	ldrb	r3, [r7, #11]
 800a0d0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800a0d4:	b2db      	uxtb	r3, r3
 800a0d6:	4619      	mov	r1, r3
 800a0d8:	68f8      	ldr	r0, [r7, #12]
 800a0da:	f000 f97f 	bl	800a3dc <USBD_CoreFindEP>
 800a0de:	4603      	mov	r3, r0
 800a0e0:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a0e2:	7dfb      	ldrb	r3, [r7, #23]
 800a0e4:	2bff      	cmp	r3, #255	; 0xff
 800a0e6:	d025      	beq.n	800a134 <USBD_LL_DataInStage+0x15a>
 800a0e8:	7dfb      	ldrb	r3, [r7, #23]
 800a0ea:	2b00      	cmp	r3, #0
 800a0ec:	d122      	bne.n	800a134 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a0ee:	68fb      	ldr	r3, [r7, #12]
 800a0f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a0f4:	b2db      	uxtb	r3, r3
 800a0f6:	2b03      	cmp	r3, #3
 800a0f8:	d11c      	bne.n	800a134 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800a0fa:	7dfa      	ldrb	r2, [r7, #23]
 800a0fc:	68fb      	ldr	r3, [r7, #12]
 800a0fe:	32ae      	adds	r2, #174	; 0xae
 800a100:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a104:	695b      	ldr	r3, [r3, #20]
 800a106:	2b00      	cmp	r3, #0
 800a108:	d014      	beq.n	800a134 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800a10a:	7dfa      	ldrb	r2, [r7, #23]
 800a10c:	68fb      	ldr	r3, [r7, #12]
 800a10e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800a112:	7dfa      	ldrb	r2, [r7, #23]
 800a114:	68fb      	ldr	r3, [r7, #12]
 800a116:	32ae      	adds	r2, #174	; 0xae
 800a118:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a11c:	695b      	ldr	r3, [r3, #20]
 800a11e:	7afa      	ldrb	r2, [r7, #11]
 800a120:	4611      	mov	r1, r2
 800a122:	68f8      	ldr	r0, [r7, #12]
 800a124:	4798      	blx	r3
 800a126:	4603      	mov	r3, r0
 800a128:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800a12a:	7dbb      	ldrb	r3, [r7, #22]
 800a12c:	2b00      	cmp	r3, #0
 800a12e:	d001      	beq.n	800a134 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800a130:	7dbb      	ldrb	r3, [r7, #22]
 800a132:	e000      	b.n	800a136 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800a134:	2300      	movs	r3, #0
}
 800a136:	4618      	mov	r0, r3
 800a138:	3718      	adds	r7, #24
 800a13a:	46bd      	mov	sp, r7
 800a13c:	bd80      	pop	{r7, pc}

0800a13e <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800a13e:	b580      	push	{r7, lr}
 800a140:	b084      	sub	sp, #16
 800a142:	af00      	add	r7, sp, #0
 800a144:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800a146:	2300      	movs	r3, #0
 800a148:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	2201      	movs	r2, #1
 800a14e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	2200      	movs	r2, #0
 800a156:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	2200      	movs	r2, #0
 800a15e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	2200      	movs	r2, #0
 800a164:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	2200      	movs	r2, #0
 800a16c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a176:	2b00      	cmp	r3, #0
 800a178:	d014      	beq.n	800a1a4 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a180:	685b      	ldr	r3, [r3, #4]
 800a182:	2b00      	cmp	r3, #0
 800a184:	d00e      	beq.n	800a1a4 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a18c:	685b      	ldr	r3, [r3, #4]
 800a18e:	687a      	ldr	r2, [r7, #4]
 800a190:	6852      	ldr	r2, [r2, #4]
 800a192:	b2d2      	uxtb	r2, r2
 800a194:	4611      	mov	r1, r2
 800a196:	6878      	ldr	r0, [r7, #4]
 800a198:	4798      	blx	r3
 800a19a:	4603      	mov	r3, r0
 800a19c:	2b00      	cmp	r3, #0
 800a19e:	d001      	beq.n	800a1a4 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800a1a0:	2303      	movs	r3, #3
 800a1a2:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a1a4:	2340      	movs	r3, #64	; 0x40
 800a1a6:	2200      	movs	r2, #0
 800a1a8:	2100      	movs	r1, #0
 800a1aa:	6878      	ldr	r0, [r7, #4]
 800a1ac:	f001 fc05 	bl	800b9ba <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	2201      	movs	r2, #1
 800a1b4:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	2240      	movs	r2, #64	; 0x40
 800a1bc:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a1c0:	2340      	movs	r3, #64	; 0x40
 800a1c2:	2200      	movs	r2, #0
 800a1c4:	2180      	movs	r1, #128	; 0x80
 800a1c6:	6878      	ldr	r0, [r7, #4]
 800a1c8:	f001 fbf7 	bl	800b9ba <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	2201      	movs	r2, #1
 800a1d0:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	2240      	movs	r2, #64	; 0x40
 800a1d6:	621a      	str	r2, [r3, #32]

  return ret;
 800a1d8:	7bfb      	ldrb	r3, [r7, #15]
}
 800a1da:	4618      	mov	r0, r3
 800a1dc:	3710      	adds	r7, #16
 800a1de:	46bd      	mov	sp, r7
 800a1e0:	bd80      	pop	{r7, pc}

0800a1e2 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800a1e2:	b480      	push	{r7}
 800a1e4:	b083      	sub	sp, #12
 800a1e6:	af00      	add	r7, sp, #0
 800a1e8:	6078      	str	r0, [r7, #4]
 800a1ea:	460b      	mov	r3, r1
 800a1ec:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	78fa      	ldrb	r2, [r7, #3]
 800a1f2:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800a1f4:	2300      	movs	r3, #0
}
 800a1f6:	4618      	mov	r0, r3
 800a1f8:	370c      	adds	r7, #12
 800a1fa:	46bd      	mov	sp, r7
 800a1fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a200:	4770      	bx	lr

0800a202 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800a202:	b480      	push	{r7}
 800a204:	b083      	sub	sp, #12
 800a206:	af00      	add	r7, sp, #0
 800a208:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a210:	b2da      	uxtb	r2, r3
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	2204      	movs	r2, #4
 800a21c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800a220:	2300      	movs	r3, #0
}
 800a222:	4618      	mov	r0, r3
 800a224:	370c      	adds	r7, #12
 800a226:	46bd      	mov	sp, r7
 800a228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a22c:	4770      	bx	lr

0800a22e <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800a22e:	b480      	push	{r7}
 800a230:	b083      	sub	sp, #12
 800a232:	af00      	add	r7, sp, #0
 800a234:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a23c:	b2db      	uxtb	r3, r3
 800a23e:	2b04      	cmp	r3, #4
 800a240:	d106      	bne.n	800a250 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800a248:	b2da      	uxtb	r2, r3
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800a250:	2300      	movs	r3, #0
}
 800a252:	4618      	mov	r0, r3
 800a254:	370c      	adds	r7, #12
 800a256:	46bd      	mov	sp, r7
 800a258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a25c:	4770      	bx	lr

0800a25e <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800a25e:	b580      	push	{r7, lr}
 800a260:	b082      	sub	sp, #8
 800a262:	af00      	add	r7, sp, #0
 800a264:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a26c:	b2db      	uxtb	r3, r3
 800a26e:	2b03      	cmp	r3, #3
 800a270:	d110      	bne.n	800a294 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a278:	2b00      	cmp	r3, #0
 800a27a:	d00b      	beq.n	800a294 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a282:	69db      	ldr	r3, [r3, #28]
 800a284:	2b00      	cmp	r3, #0
 800a286:	d005      	beq.n	800a294 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a28e:	69db      	ldr	r3, [r3, #28]
 800a290:	6878      	ldr	r0, [r7, #4]
 800a292:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800a294:	2300      	movs	r3, #0
}
 800a296:	4618      	mov	r0, r3
 800a298:	3708      	adds	r7, #8
 800a29a:	46bd      	mov	sp, r7
 800a29c:	bd80      	pop	{r7, pc}

0800a29e <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800a29e:	b580      	push	{r7, lr}
 800a2a0:	b082      	sub	sp, #8
 800a2a2:	af00      	add	r7, sp, #0
 800a2a4:	6078      	str	r0, [r7, #4]
 800a2a6:	460b      	mov	r3, r1
 800a2a8:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	32ae      	adds	r2, #174	; 0xae
 800a2b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a2b8:	2b00      	cmp	r3, #0
 800a2ba:	d101      	bne.n	800a2c0 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800a2bc:	2303      	movs	r3, #3
 800a2be:	e01c      	b.n	800a2fa <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a2c6:	b2db      	uxtb	r3, r3
 800a2c8:	2b03      	cmp	r3, #3
 800a2ca:	d115      	bne.n	800a2f8 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	32ae      	adds	r2, #174	; 0xae
 800a2d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a2da:	6a1b      	ldr	r3, [r3, #32]
 800a2dc:	2b00      	cmp	r3, #0
 800a2de:	d00b      	beq.n	800a2f8 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	32ae      	adds	r2, #174	; 0xae
 800a2ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a2ee:	6a1b      	ldr	r3, [r3, #32]
 800a2f0:	78fa      	ldrb	r2, [r7, #3]
 800a2f2:	4611      	mov	r1, r2
 800a2f4:	6878      	ldr	r0, [r7, #4]
 800a2f6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800a2f8:	2300      	movs	r3, #0
}
 800a2fa:	4618      	mov	r0, r3
 800a2fc:	3708      	adds	r7, #8
 800a2fe:	46bd      	mov	sp, r7
 800a300:	bd80      	pop	{r7, pc}

0800a302 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800a302:	b580      	push	{r7, lr}
 800a304:	b082      	sub	sp, #8
 800a306:	af00      	add	r7, sp, #0
 800a308:	6078      	str	r0, [r7, #4]
 800a30a:	460b      	mov	r3, r1
 800a30c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	32ae      	adds	r2, #174	; 0xae
 800a318:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a31c:	2b00      	cmp	r3, #0
 800a31e:	d101      	bne.n	800a324 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800a320:	2303      	movs	r3, #3
 800a322:	e01c      	b.n	800a35e <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a32a:	b2db      	uxtb	r3, r3
 800a32c:	2b03      	cmp	r3, #3
 800a32e:	d115      	bne.n	800a35c <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	32ae      	adds	r2, #174	; 0xae
 800a33a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a33e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a340:	2b00      	cmp	r3, #0
 800a342:	d00b      	beq.n	800a35c <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	32ae      	adds	r2, #174	; 0xae
 800a34e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a352:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a354:	78fa      	ldrb	r2, [r7, #3]
 800a356:	4611      	mov	r1, r2
 800a358:	6878      	ldr	r0, [r7, #4]
 800a35a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800a35c:	2300      	movs	r3, #0
}
 800a35e:	4618      	mov	r0, r3
 800a360:	3708      	adds	r7, #8
 800a362:	46bd      	mov	sp, r7
 800a364:	bd80      	pop	{r7, pc}

0800a366 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800a366:	b480      	push	{r7}
 800a368:	b083      	sub	sp, #12
 800a36a:	af00      	add	r7, sp, #0
 800a36c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a36e:	2300      	movs	r3, #0
}
 800a370:	4618      	mov	r0, r3
 800a372:	370c      	adds	r7, #12
 800a374:	46bd      	mov	sp, r7
 800a376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a37a:	4770      	bx	lr

0800a37c <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800a37c:	b580      	push	{r7, lr}
 800a37e:	b084      	sub	sp, #16
 800a380:	af00      	add	r7, sp, #0
 800a382:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800a384:	2300      	movs	r3, #0
 800a386:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	2201      	movs	r2, #1
 800a38c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a396:	2b00      	cmp	r3, #0
 800a398:	d00e      	beq.n	800a3b8 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a3a0:	685b      	ldr	r3, [r3, #4]
 800a3a2:	687a      	ldr	r2, [r7, #4]
 800a3a4:	6852      	ldr	r2, [r2, #4]
 800a3a6:	b2d2      	uxtb	r2, r2
 800a3a8:	4611      	mov	r1, r2
 800a3aa:	6878      	ldr	r0, [r7, #4]
 800a3ac:	4798      	blx	r3
 800a3ae:	4603      	mov	r3, r0
 800a3b0:	2b00      	cmp	r3, #0
 800a3b2:	d001      	beq.n	800a3b8 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800a3b4:	2303      	movs	r3, #3
 800a3b6:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800a3b8:	7bfb      	ldrb	r3, [r7, #15]
}
 800a3ba:	4618      	mov	r0, r3
 800a3bc:	3710      	adds	r7, #16
 800a3be:	46bd      	mov	sp, r7
 800a3c0:	bd80      	pop	{r7, pc}

0800a3c2 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800a3c2:	b480      	push	{r7}
 800a3c4:	b083      	sub	sp, #12
 800a3c6:	af00      	add	r7, sp, #0
 800a3c8:	6078      	str	r0, [r7, #4]
 800a3ca:	460b      	mov	r3, r1
 800a3cc:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800a3ce:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800a3d0:	4618      	mov	r0, r3
 800a3d2:	370c      	adds	r7, #12
 800a3d4:	46bd      	mov	sp, r7
 800a3d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3da:	4770      	bx	lr

0800a3dc <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800a3dc:	b480      	push	{r7}
 800a3de:	b083      	sub	sp, #12
 800a3e0:	af00      	add	r7, sp, #0
 800a3e2:	6078      	str	r0, [r7, #4]
 800a3e4:	460b      	mov	r3, r1
 800a3e6:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800a3e8:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800a3ea:	4618      	mov	r0, r3
 800a3ec:	370c      	adds	r7, #12
 800a3ee:	46bd      	mov	sp, r7
 800a3f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3f4:	4770      	bx	lr

0800a3f6 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800a3f6:	b580      	push	{r7, lr}
 800a3f8:	b086      	sub	sp, #24
 800a3fa:	af00      	add	r7, sp, #0
 800a3fc:	6078      	str	r0, [r7, #4]
 800a3fe:	460b      	mov	r3, r1
 800a400:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800a40a:	2300      	movs	r3, #0
 800a40c:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800a40e:	68fb      	ldr	r3, [r7, #12]
 800a410:	885b      	ldrh	r3, [r3, #2]
 800a412:	b29a      	uxth	r2, r3
 800a414:	68fb      	ldr	r3, [r7, #12]
 800a416:	781b      	ldrb	r3, [r3, #0]
 800a418:	b29b      	uxth	r3, r3
 800a41a:	429a      	cmp	r2, r3
 800a41c:	d920      	bls.n	800a460 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800a41e:	68fb      	ldr	r3, [r7, #12]
 800a420:	781b      	ldrb	r3, [r3, #0]
 800a422:	b29b      	uxth	r3, r3
 800a424:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800a426:	e013      	b.n	800a450 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800a428:	f107 030a 	add.w	r3, r7, #10
 800a42c:	4619      	mov	r1, r3
 800a42e:	6978      	ldr	r0, [r7, #20]
 800a430:	f000 f81b 	bl	800a46a <USBD_GetNextDesc>
 800a434:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800a436:	697b      	ldr	r3, [r7, #20]
 800a438:	785b      	ldrb	r3, [r3, #1]
 800a43a:	2b05      	cmp	r3, #5
 800a43c:	d108      	bne.n	800a450 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800a43e:	697b      	ldr	r3, [r7, #20]
 800a440:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800a442:	693b      	ldr	r3, [r7, #16]
 800a444:	789b      	ldrb	r3, [r3, #2]
 800a446:	78fa      	ldrb	r2, [r7, #3]
 800a448:	429a      	cmp	r2, r3
 800a44a:	d008      	beq.n	800a45e <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800a44c:	2300      	movs	r3, #0
 800a44e:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800a450:	68fb      	ldr	r3, [r7, #12]
 800a452:	885b      	ldrh	r3, [r3, #2]
 800a454:	b29a      	uxth	r2, r3
 800a456:	897b      	ldrh	r3, [r7, #10]
 800a458:	429a      	cmp	r2, r3
 800a45a:	d8e5      	bhi.n	800a428 <USBD_GetEpDesc+0x32>
 800a45c:	e000      	b.n	800a460 <USBD_GetEpDesc+0x6a>
          break;
 800a45e:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800a460:	693b      	ldr	r3, [r7, #16]
}
 800a462:	4618      	mov	r0, r3
 800a464:	3718      	adds	r7, #24
 800a466:	46bd      	mov	sp, r7
 800a468:	bd80      	pop	{r7, pc}

0800a46a <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800a46a:	b480      	push	{r7}
 800a46c:	b085      	sub	sp, #20
 800a46e:	af00      	add	r7, sp, #0
 800a470:	6078      	str	r0, [r7, #4]
 800a472:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800a478:	683b      	ldr	r3, [r7, #0]
 800a47a:	881a      	ldrh	r2, [r3, #0]
 800a47c:	68fb      	ldr	r3, [r7, #12]
 800a47e:	781b      	ldrb	r3, [r3, #0]
 800a480:	b29b      	uxth	r3, r3
 800a482:	4413      	add	r3, r2
 800a484:	b29a      	uxth	r2, r3
 800a486:	683b      	ldr	r3, [r7, #0]
 800a488:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800a48a:	68fb      	ldr	r3, [r7, #12]
 800a48c:	781b      	ldrb	r3, [r3, #0]
 800a48e:	461a      	mov	r2, r3
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	4413      	add	r3, r2
 800a494:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800a496:	68fb      	ldr	r3, [r7, #12]
}
 800a498:	4618      	mov	r0, r3
 800a49a:	3714      	adds	r7, #20
 800a49c:	46bd      	mov	sp, r7
 800a49e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4a2:	4770      	bx	lr

0800a4a4 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800a4a4:	b480      	push	{r7}
 800a4a6:	b087      	sub	sp, #28
 800a4a8:	af00      	add	r7, sp, #0
 800a4aa:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800a4b0:	697b      	ldr	r3, [r7, #20]
 800a4b2:	781b      	ldrb	r3, [r3, #0]
 800a4b4:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800a4b6:	697b      	ldr	r3, [r7, #20]
 800a4b8:	3301      	adds	r3, #1
 800a4ba:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800a4bc:	697b      	ldr	r3, [r7, #20]
 800a4be:	781b      	ldrb	r3, [r3, #0]
 800a4c0:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800a4c2:	8a3b      	ldrh	r3, [r7, #16]
 800a4c4:	021b      	lsls	r3, r3, #8
 800a4c6:	b21a      	sxth	r2, r3
 800a4c8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800a4cc:	4313      	orrs	r3, r2
 800a4ce:	b21b      	sxth	r3, r3
 800a4d0:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800a4d2:	89fb      	ldrh	r3, [r7, #14]
}
 800a4d4:	4618      	mov	r0, r3
 800a4d6:	371c      	adds	r7, #28
 800a4d8:	46bd      	mov	sp, r7
 800a4da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4de:	4770      	bx	lr

0800a4e0 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a4e0:	b580      	push	{r7, lr}
 800a4e2:	b084      	sub	sp, #16
 800a4e4:	af00      	add	r7, sp, #0
 800a4e6:	6078      	str	r0, [r7, #4]
 800a4e8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a4ea:	2300      	movs	r3, #0
 800a4ec:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a4ee:	683b      	ldr	r3, [r7, #0]
 800a4f0:	781b      	ldrb	r3, [r3, #0]
 800a4f2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a4f6:	2b40      	cmp	r3, #64	; 0x40
 800a4f8:	d005      	beq.n	800a506 <USBD_StdDevReq+0x26>
 800a4fa:	2b40      	cmp	r3, #64	; 0x40
 800a4fc:	d857      	bhi.n	800a5ae <USBD_StdDevReq+0xce>
 800a4fe:	2b00      	cmp	r3, #0
 800a500:	d00f      	beq.n	800a522 <USBD_StdDevReq+0x42>
 800a502:	2b20      	cmp	r3, #32
 800a504:	d153      	bne.n	800a5ae <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	32ae      	adds	r2, #174	; 0xae
 800a510:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a514:	689b      	ldr	r3, [r3, #8]
 800a516:	6839      	ldr	r1, [r7, #0]
 800a518:	6878      	ldr	r0, [r7, #4]
 800a51a:	4798      	blx	r3
 800a51c:	4603      	mov	r3, r0
 800a51e:	73fb      	strb	r3, [r7, #15]
      break;
 800a520:	e04a      	b.n	800a5b8 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a522:	683b      	ldr	r3, [r7, #0]
 800a524:	785b      	ldrb	r3, [r3, #1]
 800a526:	2b09      	cmp	r3, #9
 800a528:	d83b      	bhi.n	800a5a2 <USBD_StdDevReq+0xc2>
 800a52a:	a201      	add	r2, pc, #4	; (adr r2, 800a530 <USBD_StdDevReq+0x50>)
 800a52c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a530:	0800a585 	.word	0x0800a585
 800a534:	0800a599 	.word	0x0800a599
 800a538:	0800a5a3 	.word	0x0800a5a3
 800a53c:	0800a58f 	.word	0x0800a58f
 800a540:	0800a5a3 	.word	0x0800a5a3
 800a544:	0800a563 	.word	0x0800a563
 800a548:	0800a559 	.word	0x0800a559
 800a54c:	0800a5a3 	.word	0x0800a5a3
 800a550:	0800a57b 	.word	0x0800a57b
 800a554:	0800a56d 	.word	0x0800a56d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800a558:	6839      	ldr	r1, [r7, #0]
 800a55a:	6878      	ldr	r0, [r7, #4]
 800a55c:	f000 fa3c 	bl	800a9d8 <USBD_GetDescriptor>
          break;
 800a560:	e024      	b.n	800a5ac <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800a562:	6839      	ldr	r1, [r7, #0]
 800a564:	6878      	ldr	r0, [r7, #4]
 800a566:	f000 fba1 	bl	800acac <USBD_SetAddress>
          break;
 800a56a:	e01f      	b.n	800a5ac <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800a56c:	6839      	ldr	r1, [r7, #0]
 800a56e:	6878      	ldr	r0, [r7, #4]
 800a570:	f000 fbe0 	bl	800ad34 <USBD_SetConfig>
 800a574:	4603      	mov	r3, r0
 800a576:	73fb      	strb	r3, [r7, #15]
          break;
 800a578:	e018      	b.n	800a5ac <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800a57a:	6839      	ldr	r1, [r7, #0]
 800a57c:	6878      	ldr	r0, [r7, #4]
 800a57e:	f000 fc83 	bl	800ae88 <USBD_GetConfig>
          break;
 800a582:	e013      	b.n	800a5ac <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800a584:	6839      	ldr	r1, [r7, #0]
 800a586:	6878      	ldr	r0, [r7, #4]
 800a588:	f000 fcb4 	bl	800aef4 <USBD_GetStatus>
          break;
 800a58c:	e00e      	b.n	800a5ac <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800a58e:	6839      	ldr	r1, [r7, #0]
 800a590:	6878      	ldr	r0, [r7, #4]
 800a592:	f000 fce3 	bl	800af5c <USBD_SetFeature>
          break;
 800a596:	e009      	b.n	800a5ac <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800a598:	6839      	ldr	r1, [r7, #0]
 800a59a:	6878      	ldr	r0, [r7, #4]
 800a59c:	f000 fd07 	bl	800afae <USBD_ClrFeature>
          break;
 800a5a0:	e004      	b.n	800a5ac <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800a5a2:	6839      	ldr	r1, [r7, #0]
 800a5a4:	6878      	ldr	r0, [r7, #4]
 800a5a6:	f000 fd5e 	bl	800b066 <USBD_CtlError>
          break;
 800a5aa:	bf00      	nop
      }
      break;
 800a5ac:	e004      	b.n	800a5b8 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800a5ae:	6839      	ldr	r1, [r7, #0]
 800a5b0:	6878      	ldr	r0, [r7, #4]
 800a5b2:	f000 fd58 	bl	800b066 <USBD_CtlError>
      break;
 800a5b6:	bf00      	nop
  }

  return ret;
 800a5b8:	7bfb      	ldrb	r3, [r7, #15]
}
 800a5ba:	4618      	mov	r0, r3
 800a5bc:	3710      	adds	r7, #16
 800a5be:	46bd      	mov	sp, r7
 800a5c0:	bd80      	pop	{r7, pc}
 800a5c2:	bf00      	nop

0800a5c4 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a5c4:	b580      	push	{r7, lr}
 800a5c6:	b084      	sub	sp, #16
 800a5c8:	af00      	add	r7, sp, #0
 800a5ca:	6078      	str	r0, [r7, #4]
 800a5cc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a5ce:	2300      	movs	r3, #0
 800a5d0:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a5d2:	683b      	ldr	r3, [r7, #0]
 800a5d4:	781b      	ldrb	r3, [r3, #0]
 800a5d6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a5da:	2b40      	cmp	r3, #64	; 0x40
 800a5dc:	d005      	beq.n	800a5ea <USBD_StdItfReq+0x26>
 800a5de:	2b40      	cmp	r3, #64	; 0x40
 800a5e0:	d852      	bhi.n	800a688 <USBD_StdItfReq+0xc4>
 800a5e2:	2b00      	cmp	r3, #0
 800a5e4:	d001      	beq.n	800a5ea <USBD_StdItfReq+0x26>
 800a5e6:	2b20      	cmp	r3, #32
 800a5e8:	d14e      	bne.n	800a688 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a5f0:	b2db      	uxtb	r3, r3
 800a5f2:	3b01      	subs	r3, #1
 800a5f4:	2b02      	cmp	r3, #2
 800a5f6:	d840      	bhi.n	800a67a <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800a5f8:	683b      	ldr	r3, [r7, #0]
 800a5fa:	889b      	ldrh	r3, [r3, #4]
 800a5fc:	b2db      	uxtb	r3, r3
 800a5fe:	2b01      	cmp	r3, #1
 800a600:	d836      	bhi.n	800a670 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800a602:	683b      	ldr	r3, [r7, #0]
 800a604:	889b      	ldrh	r3, [r3, #4]
 800a606:	b2db      	uxtb	r3, r3
 800a608:	4619      	mov	r1, r3
 800a60a:	6878      	ldr	r0, [r7, #4]
 800a60c:	f7ff fed9 	bl	800a3c2 <USBD_CoreFindIF>
 800a610:	4603      	mov	r3, r0
 800a612:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a614:	7bbb      	ldrb	r3, [r7, #14]
 800a616:	2bff      	cmp	r3, #255	; 0xff
 800a618:	d01d      	beq.n	800a656 <USBD_StdItfReq+0x92>
 800a61a:	7bbb      	ldrb	r3, [r7, #14]
 800a61c:	2b00      	cmp	r3, #0
 800a61e:	d11a      	bne.n	800a656 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800a620:	7bba      	ldrb	r2, [r7, #14]
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	32ae      	adds	r2, #174	; 0xae
 800a626:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a62a:	689b      	ldr	r3, [r3, #8]
 800a62c:	2b00      	cmp	r3, #0
 800a62e:	d00f      	beq.n	800a650 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800a630:	7bba      	ldrb	r2, [r7, #14]
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800a638:	7bba      	ldrb	r2, [r7, #14]
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	32ae      	adds	r2, #174	; 0xae
 800a63e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a642:	689b      	ldr	r3, [r3, #8]
 800a644:	6839      	ldr	r1, [r7, #0]
 800a646:	6878      	ldr	r0, [r7, #4]
 800a648:	4798      	blx	r3
 800a64a:	4603      	mov	r3, r0
 800a64c:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800a64e:	e004      	b.n	800a65a <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800a650:	2303      	movs	r3, #3
 800a652:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800a654:	e001      	b.n	800a65a <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800a656:	2303      	movs	r3, #3
 800a658:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800a65a:	683b      	ldr	r3, [r7, #0]
 800a65c:	88db      	ldrh	r3, [r3, #6]
 800a65e:	2b00      	cmp	r3, #0
 800a660:	d110      	bne.n	800a684 <USBD_StdItfReq+0xc0>
 800a662:	7bfb      	ldrb	r3, [r7, #15]
 800a664:	2b00      	cmp	r3, #0
 800a666:	d10d      	bne.n	800a684 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800a668:	6878      	ldr	r0, [r7, #4]
 800a66a:	f000 fdc7 	bl	800b1fc <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800a66e:	e009      	b.n	800a684 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800a670:	6839      	ldr	r1, [r7, #0]
 800a672:	6878      	ldr	r0, [r7, #4]
 800a674:	f000 fcf7 	bl	800b066 <USBD_CtlError>
          break;
 800a678:	e004      	b.n	800a684 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800a67a:	6839      	ldr	r1, [r7, #0]
 800a67c:	6878      	ldr	r0, [r7, #4]
 800a67e:	f000 fcf2 	bl	800b066 <USBD_CtlError>
          break;
 800a682:	e000      	b.n	800a686 <USBD_StdItfReq+0xc2>
          break;
 800a684:	bf00      	nop
      }
      break;
 800a686:	e004      	b.n	800a692 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800a688:	6839      	ldr	r1, [r7, #0]
 800a68a:	6878      	ldr	r0, [r7, #4]
 800a68c:	f000 fceb 	bl	800b066 <USBD_CtlError>
      break;
 800a690:	bf00      	nop
  }

  return ret;
 800a692:	7bfb      	ldrb	r3, [r7, #15]
}
 800a694:	4618      	mov	r0, r3
 800a696:	3710      	adds	r7, #16
 800a698:	46bd      	mov	sp, r7
 800a69a:	bd80      	pop	{r7, pc}

0800a69c <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a69c:	b580      	push	{r7, lr}
 800a69e:	b084      	sub	sp, #16
 800a6a0:	af00      	add	r7, sp, #0
 800a6a2:	6078      	str	r0, [r7, #4]
 800a6a4:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800a6a6:	2300      	movs	r3, #0
 800a6a8:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800a6aa:	683b      	ldr	r3, [r7, #0]
 800a6ac:	889b      	ldrh	r3, [r3, #4]
 800a6ae:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a6b0:	683b      	ldr	r3, [r7, #0]
 800a6b2:	781b      	ldrb	r3, [r3, #0]
 800a6b4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a6b8:	2b40      	cmp	r3, #64	; 0x40
 800a6ba:	d007      	beq.n	800a6cc <USBD_StdEPReq+0x30>
 800a6bc:	2b40      	cmp	r3, #64	; 0x40
 800a6be:	f200 817f 	bhi.w	800a9c0 <USBD_StdEPReq+0x324>
 800a6c2:	2b00      	cmp	r3, #0
 800a6c4:	d02a      	beq.n	800a71c <USBD_StdEPReq+0x80>
 800a6c6:	2b20      	cmp	r3, #32
 800a6c8:	f040 817a 	bne.w	800a9c0 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800a6cc:	7bbb      	ldrb	r3, [r7, #14]
 800a6ce:	4619      	mov	r1, r3
 800a6d0:	6878      	ldr	r0, [r7, #4]
 800a6d2:	f7ff fe83 	bl	800a3dc <USBD_CoreFindEP>
 800a6d6:	4603      	mov	r3, r0
 800a6d8:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a6da:	7b7b      	ldrb	r3, [r7, #13]
 800a6dc:	2bff      	cmp	r3, #255	; 0xff
 800a6de:	f000 8174 	beq.w	800a9ca <USBD_StdEPReq+0x32e>
 800a6e2:	7b7b      	ldrb	r3, [r7, #13]
 800a6e4:	2b00      	cmp	r3, #0
 800a6e6:	f040 8170 	bne.w	800a9ca <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800a6ea:	7b7a      	ldrb	r2, [r7, #13]
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800a6f2:	7b7a      	ldrb	r2, [r7, #13]
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	32ae      	adds	r2, #174	; 0xae
 800a6f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a6fc:	689b      	ldr	r3, [r3, #8]
 800a6fe:	2b00      	cmp	r3, #0
 800a700:	f000 8163 	beq.w	800a9ca <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800a704:	7b7a      	ldrb	r2, [r7, #13]
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	32ae      	adds	r2, #174	; 0xae
 800a70a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a70e:	689b      	ldr	r3, [r3, #8]
 800a710:	6839      	ldr	r1, [r7, #0]
 800a712:	6878      	ldr	r0, [r7, #4]
 800a714:	4798      	blx	r3
 800a716:	4603      	mov	r3, r0
 800a718:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800a71a:	e156      	b.n	800a9ca <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a71c:	683b      	ldr	r3, [r7, #0]
 800a71e:	785b      	ldrb	r3, [r3, #1]
 800a720:	2b03      	cmp	r3, #3
 800a722:	d008      	beq.n	800a736 <USBD_StdEPReq+0x9a>
 800a724:	2b03      	cmp	r3, #3
 800a726:	f300 8145 	bgt.w	800a9b4 <USBD_StdEPReq+0x318>
 800a72a:	2b00      	cmp	r3, #0
 800a72c:	f000 809b 	beq.w	800a866 <USBD_StdEPReq+0x1ca>
 800a730:	2b01      	cmp	r3, #1
 800a732:	d03c      	beq.n	800a7ae <USBD_StdEPReq+0x112>
 800a734:	e13e      	b.n	800a9b4 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a73c:	b2db      	uxtb	r3, r3
 800a73e:	2b02      	cmp	r3, #2
 800a740:	d002      	beq.n	800a748 <USBD_StdEPReq+0xac>
 800a742:	2b03      	cmp	r3, #3
 800a744:	d016      	beq.n	800a774 <USBD_StdEPReq+0xd8>
 800a746:	e02c      	b.n	800a7a2 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a748:	7bbb      	ldrb	r3, [r7, #14]
 800a74a:	2b00      	cmp	r3, #0
 800a74c:	d00d      	beq.n	800a76a <USBD_StdEPReq+0xce>
 800a74e:	7bbb      	ldrb	r3, [r7, #14]
 800a750:	2b80      	cmp	r3, #128	; 0x80
 800a752:	d00a      	beq.n	800a76a <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800a754:	7bbb      	ldrb	r3, [r7, #14]
 800a756:	4619      	mov	r1, r3
 800a758:	6878      	ldr	r0, [r7, #4]
 800a75a:	f001 f973 	bl	800ba44 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800a75e:	2180      	movs	r1, #128	; 0x80
 800a760:	6878      	ldr	r0, [r7, #4]
 800a762:	f001 f96f 	bl	800ba44 <USBD_LL_StallEP>
 800a766:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a768:	e020      	b.n	800a7ac <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800a76a:	6839      	ldr	r1, [r7, #0]
 800a76c:	6878      	ldr	r0, [r7, #4]
 800a76e:	f000 fc7a 	bl	800b066 <USBD_CtlError>
              break;
 800a772:	e01b      	b.n	800a7ac <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a774:	683b      	ldr	r3, [r7, #0]
 800a776:	885b      	ldrh	r3, [r3, #2]
 800a778:	2b00      	cmp	r3, #0
 800a77a:	d10e      	bne.n	800a79a <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800a77c:	7bbb      	ldrb	r3, [r7, #14]
 800a77e:	2b00      	cmp	r3, #0
 800a780:	d00b      	beq.n	800a79a <USBD_StdEPReq+0xfe>
 800a782:	7bbb      	ldrb	r3, [r7, #14]
 800a784:	2b80      	cmp	r3, #128	; 0x80
 800a786:	d008      	beq.n	800a79a <USBD_StdEPReq+0xfe>
 800a788:	683b      	ldr	r3, [r7, #0]
 800a78a:	88db      	ldrh	r3, [r3, #6]
 800a78c:	2b00      	cmp	r3, #0
 800a78e:	d104      	bne.n	800a79a <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800a790:	7bbb      	ldrb	r3, [r7, #14]
 800a792:	4619      	mov	r1, r3
 800a794:	6878      	ldr	r0, [r7, #4]
 800a796:	f001 f955 	bl	800ba44 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800a79a:	6878      	ldr	r0, [r7, #4]
 800a79c:	f000 fd2e 	bl	800b1fc <USBD_CtlSendStatus>

              break;
 800a7a0:	e004      	b.n	800a7ac <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800a7a2:	6839      	ldr	r1, [r7, #0]
 800a7a4:	6878      	ldr	r0, [r7, #4]
 800a7a6:	f000 fc5e 	bl	800b066 <USBD_CtlError>
              break;
 800a7aa:	bf00      	nop
          }
          break;
 800a7ac:	e107      	b.n	800a9be <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a7b4:	b2db      	uxtb	r3, r3
 800a7b6:	2b02      	cmp	r3, #2
 800a7b8:	d002      	beq.n	800a7c0 <USBD_StdEPReq+0x124>
 800a7ba:	2b03      	cmp	r3, #3
 800a7bc:	d016      	beq.n	800a7ec <USBD_StdEPReq+0x150>
 800a7be:	e04b      	b.n	800a858 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a7c0:	7bbb      	ldrb	r3, [r7, #14]
 800a7c2:	2b00      	cmp	r3, #0
 800a7c4:	d00d      	beq.n	800a7e2 <USBD_StdEPReq+0x146>
 800a7c6:	7bbb      	ldrb	r3, [r7, #14]
 800a7c8:	2b80      	cmp	r3, #128	; 0x80
 800a7ca:	d00a      	beq.n	800a7e2 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800a7cc:	7bbb      	ldrb	r3, [r7, #14]
 800a7ce:	4619      	mov	r1, r3
 800a7d0:	6878      	ldr	r0, [r7, #4]
 800a7d2:	f001 f937 	bl	800ba44 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800a7d6:	2180      	movs	r1, #128	; 0x80
 800a7d8:	6878      	ldr	r0, [r7, #4]
 800a7da:	f001 f933 	bl	800ba44 <USBD_LL_StallEP>
 800a7de:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a7e0:	e040      	b.n	800a864 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800a7e2:	6839      	ldr	r1, [r7, #0]
 800a7e4:	6878      	ldr	r0, [r7, #4]
 800a7e6:	f000 fc3e 	bl	800b066 <USBD_CtlError>
              break;
 800a7ea:	e03b      	b.n	800a864 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a7ec:	683b      	ldr	r3, [r7, #0]
 800a7ee:	885b      	ldrh	r3, [r3, #2]
 800a7f0:	2b00      	cmp	r3, #0
 800a7f2:	d136      	bne.n	800a862 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800a7f4:	7bbb      	ldrb	r3, [r7, #14]
 800a7f6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a7fa:	2b00      	cmp	r3, #0
 800a7fc:	d004      	beq.n	800a808 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800a7fe:	7bbb      	ldrb	r3, [r7, #14]
 800a800:	4619      	mov	r1, r3
 800a802:	6878      	ldr	r0, [r7, #4]
 800a804:	f001 f93d 	bl	800ba82 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800a808:	6878      	ldr	r0, [r7, #4]
 800a80a:	f000 fcf7 	bl	800b1fc <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800a80e:	7bbb      	ldrb	r3, [r7, #14]
 800a810:	4619      	mov	r1, r3
 800a812:	6878      	ldr	r0, [r7, #4]
 800a814:	f7ff fde2 	bl	800a3dc <USBD_CoreFindEP>
 800a818:	4603      	mov	r3, r0
 800a81a:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a81c:	7b7b      	ldrb	r3, [r7, #13]
 800a81e:	2bff      	cmp	r3, #255	; 0xff
 800a820:	d01f      	beq.n	800a862 <USBD_StdEPReq+0x1c6>
 800a822:	7b7b      	ldrb	r3, [r7, #13]
 800a824:	2b00      	cmp	r3, #0
 800a826:	d11c      	bne.n	800a862 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800a828:	7b7a      	ldrb	r2, [r7, #13]
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800a830:	7b7a      	ldrb	r2, [r7, #13]
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	32ae      	adds	r2, #174	; 0xae
 800a836:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a83a:	689b      	ldr	r3, [r3, #8]
 800a83c:	2b00      	cmp	r3, #0
 800a83e:	d010      	beq.n	800a862 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800a840:	7b7a      	ldrb	r2, [r7, #13]
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	32ae      	adds	r2, #174	; 0xae
 800a846:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a84a:	689b      	ldr	r3, [r3, #8]
 800a84c:	6839      	ldr	r1, [r7, #0]
 800a84e:	6878      	ldr	r0, [r7, #4]
 800a850:	4798      	blx	r3
 800a852:	4603      	mov	r3, r0
 800a854:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800a856:	e004      	b.n	800a862 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800a858:	6839      	ldr	r1, [r7, #0]
 800a85a:	6878      	ldr	r0, [r7, #4]
 800a85c:	f000 fc03 	bl	800b066 <USBD_CtlError>
              break;
 800a860:	e000      	b.n	800a864 <USBD_StdEPReq+0x1c8>
              break;
 800a862:	bf00      	nop
          }
          break;
 800a864:	e0ab      	b.n	800a9be <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a86c:	b2db      	uxtb	r3, r3
 800a86e:	2b02      	cmp	r3, #2
 800a870:	d002      	beq.n	800a878 <USBD_StdEPReq+0x1dc>
 800a872:	2b03      	cmp	r3, #3
 800a874:	d032      	beq.n	800a8dc <USBD_StdEPReq+0x240>
 800a876:	e097      	b.n	800a9a8 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a878:	7bbb      	ldrb	r3, [r7, #14]
 800a87a:	2b00      	cmp	r3, #0
 800a87c:	d007      	beq.n	800a88e <USBD_StdEPReq+0x1f2>
 800a87e:	7bbb      	ldrb	r3, [r7, #14]
 800a880:	2b80      	cmp	r3, #128	; 0x80
 800a882:	d004      	beq.n	800a88e <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800a884:	6839      	ldr	r1, [r7, #0]
 800a886:	6878      	ldr	r0, [r7, #4]
 800a888:	f000 fbed 	bl	800b066 <USBD_CtlError>
                break;
 800a88c:	e091      	b.n	800a9b2 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a88e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a892:	2b00      	cmp	r3, #0
 800a894:	da0b      	bge.n	800a8ae <USBD_StdEPReq+0x212>
 800a896:	7bbb      	ldrb	r3, [r7, #14]
 800a898:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a89c:	4613      	mov	r3, r2
 800a89e:	009b      	lsls	r3, r3, #2
 800a8a0:	4413      	add	r3, r2
 800a8a2:	009b      	lsls	r3, r3, #2
 800a8a4:	3310      	adds	r3, #16
 800a8a6:	687a      	ldr	r2, [r7, #4]
 800a8a8:	4413      	add	r3, r2
 800a8aa:	3304      	adds	r3, #4
 800a8ac:	e00b      	b.n	800a8c6 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a8ae:	7bbb      	ldrb	r3, [r7, #14]
 800a8b0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a8b4:	4613      	mov	r3, r2
 800a8b6:	009b      	lsls	r3, r3, #2
 800a8b8:	4413      	add	r3, r2
 800a8ba:	009b      	lsls	r3, r3, #2
 800a8bc:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800a8c0:	687a      	ldr	r2, [r7, #4]
 800a8c2:	4413      	add	r3, r2
 800a8c4:	3304      	adds	r3, #4
 800a8c6:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800a8c8:	68bb      	ldr	r3, [r7, #8]
 800a8ca:	2200      	movs	r2, #0
 800a8cc:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800a8ce:	68bb      	ldr	r3, [r7, #8]
 800a8d0:	2202      	movs	r2, #2
 800a8d2:	4619      	mov	r1, r3
 800a8d4:	6878      	ldr	r0, [r7, #4]
 800a8d6:	f000 fc37 	bl	800b148 <USBD_CtlSendData>
              break;
 800a8da:	e06a      	b.n	800a9b2 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800a8dc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a8e0:	2b00      	cmp	r3, #0
 800a8e2:	da11      	bge.n	800a908 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800a8e4:	7bbb      	ldrb	r3, [r7, #14]
 800a8e6:	f003 020f 	and.w	r2, r3, #15
 800a8ea:	6879      	ldr	r1, [r7, #4]
 800a8ec:	4613      	mov	r3, r2
 800a8ee:	009b      	lsls	r3, r3, #2
 800a8f0:	4413      	add	r3, r2
 800a8f2:	009b      	lsls	r3, r3, #2
 800a8f4:	440b      	add	r3, r1
 800a8f6:	3324      	adds	r3, #36	; 0x24
 800a8f8:	881b      	ldrh	r3, [r3, #0]
 800a8fa:	2b00      	cmp	r3, #0
 800a8fc:	d117      	bne.n	800a92e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800a8fe:	6839      	ldr	r1, [r7, #0]
 800a900:	6878      	ldr	r0, [r7, #4]
 800a902:	f000 fbb0 	bl	800b066 <USBD_CtlError>
                  break;
 800a906:	e054      	b.n	800a9b2 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800a908:	7bbb      	ldrb	r3, [r7, #14]
 800a90a:	f003 020f 	and.w	r2, r3, #15
 800a90e:	6879      	ldr	r1, [r7, #4]
 800a910:	4613      	mov	r3, r2
 800a912:	009b      	lsls	r3, r3, #2
 800a914:	4413      	add	r3, r2
 800a916:	009b      	lsls	r3, r3, #2
 800a918:	440b      	add	r3, r1
 800a91a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800a91e:	881b      	ldrh	r3, [r3, #0]
 800a920:	2b00      	cmp	r3, #0
 800a922:	d104      	bne.n	800a92e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800a924:	6839      	ldr	r1, [r7, #0]
 800a926:	6878      	ldr	r0, [r7, #4]
 800a928:	f000 fb9d 	bl	800b066 <USBD_CtlError>
                  break;
 800a92c:	e041      	b.n	800a9b2 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a92e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a932:	2b00      	cmp	r3, #0
 800a934:	da0b      	bge.n	800a94e <USBD_StdEPReq+0x2b2>
 800a936:	7bbb      	ldrb	r3, [r7, #14]
 800a938:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a93c:	4613      	mov	r3, r2
 800a93e:	009b      	lsls	r3, r3, #2
 800a940:	4413      	add	r3, r2
 800a942:	009b      	lsls	r3, r3, #2
 800a944:	3310      	adds	r3, #16
 800a946:	687a      	ldr	r2, [r7, #4]
 800a948:	4413      	add	r3, r2
 800a94a:	3304      	adds	r3, #4
 800a94c:	e00b      	b.n	800a966 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a94e:	7bbb      	ldrb	r3, [r7, #14]
 800a950:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a954:	4613      	mov	r3, r2
 800a956:	009b      	lsls	r3, r3, #2
 800a958:	4413      	add	r3, r2
 800a95a:	009b      	lsls	r3, r3, #2
 800a95c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800a960:	687a      	ldr	r2, [r7, #4]
 800a962:	4413      	add	r3, r2
 800a964:	3304      	adds	r3, #4
 800a966:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800a968:	7bbb      	ldrb	r3, [r7, #14]
 800a96a:	2b00      	cmp	r3, #0
 800a96c:	d002      	beq.n	800a974 <USBD_StdEPReq+0x2d8>
 800a96e:	7bbb      	ldrb	r3, [r7, #14]
 800a970:	2b80      	cmp	r3, #128	; 0x80
 800a972:	d103      	bne.n	800a97c <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800a974:	68bb      	ldr	r3, [r7, #8]
 800a976:	2200      	movs	r2, #0
 800a978:	601a      	str	r2, [r3, #0]
 800a97a:	e00e      	b.n	800a99a <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800a97c:	7bbb      	ldrb	r3, [r7, #14]
 800a97e:	4619      	mov	r1, r3
 800a980:	6878      	ldr	r0, [r7, #4]
 800a982:	f001 f89d 	bl	800bac0 <USBD_LL_IsStallEP>
 800a986:	4603      	mov	r3, r0
 800a988:	2b00      	cmp	r3, #0
 800a98a:	d003      	beq.n	800a994 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800a98c:	68bb      	ldr	r3, [r7, #8]
 800a98e:	2201      	movs	r2, #1
 800a990:	601a      	str	r2, [r3, #0]
 800a992:	e002      	b.n	800a99a <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800a994:	68bb      	ldr	r3, [r7, #8]
 800a996:	2200      	movs	r2, #0
 800a998:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800a99a:	68bb      	ldr	r3, [r7, #8]
 800a99c:	2202      	movs	r2, #2
 800a99e:	4619      	mov	r1, r3
 800a9a0:	6878      	ldr	r0, [r7, #4]
 800a9a2:	f000 fbd1 	bl	800b148 <USBD_CtlSendData>
              break;
 800a9a6:	e004      	b.n	800a9b2 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800a9a8:	6839      	ldr	r1, [r7, #0]
 800a9aa:	6878      	ldr	r0, [r7, #4]
 800a9ac:	f000 fb5b 	bl	800b066 <USBD_CtlError>
              break;
 800a9b0:	bf00      	nop
          }
          break;
 800a9b2:	e004      	b.n	800a9be <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800a9b4:	6839      	ldr	r1, [r7, #0]
 800a9b6:	6878      	ldr	r0, [r7, #4]
 800a9b8:	f000 fb55 	bl	800b066 <USBD_CtlError>
          break;
 800a9bc:	bf00      	nop
      }
      break;
 800a9be:	e005      	b.n	800a9cc <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800a9c0:	6839      	ldr	r1, [r7, #0]
 800a9c2:	6878      	ldr	r0, [r7, #4]
 800a9c4:	f000 fb4f 	bl	800b066 <USBD_CtlError>
      break;
 800a9c8:	e000      	b.n	800a9cc <USBD_StdEPReq+0x330>
      break;
 800a9ca:	bf00      	nop
  }

  return ret;
 800a9cc:	7bfb      	ldrb	r3, [r7, #15]
}
 800a9ce:	4618      	mov	r0, r3
 800a9d0:	3710      	adds	r7, #16
 800a9d2:	46bd      	mov	sp, r7
 800a9d4:	bd80      	pop	{r7, pc}
	...

0800a9d8 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a9d8:	b580      	push	{r7, lr}
 800a9da:	b084      	sub	sp, #16
 800a9dc:	af00      	add	r7, sp, #0
 800a9de:	6078      	str	r0, [r7, #4]
 800a9e0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a9e2:	2300      	movs	r3, #0
 800a9e4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800a9e6:	2300      	movs	r3, #0
 800a9e8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800a9ea:	2300      	movs	r3, #0
 800a9ec:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800a9ee:	683b      	ldr	r3, [r7, #0]
 800a9f0:	885b      	ldrh	r3, [r3, #2]
 800a9f2:	0a1b      	lsrs	r3, r3, #8
 800a9f4:	b29b      	uxth	r3, r3
 800a9f6:	3b01      	subs	r3, #1
 800a9f8:	2b06      	cmp	r3, #6
 800a9fa:	f200 8128 	bhi.w	800ac4e <USBD_GetDescriptor+0x276>
 800a9fe:	a201      	add	r2, pc, #4	; (adr r2, 800aa04 <USBD_GetDescriptor+0x2c>)
 800aa00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa04:	0800aa21 	.word	0x0800aa21
 800aa08:	0800aa39 	.word	0x0800aa39
 800aa0c:	0800aa79 	.word	0x0800aa79
 800aa10:	0800ac4f 	.word	0x0800ac4f
 800aa14:	0800ac4f 	.word	0x0800ac4f
 800aa18:	0800abef 	.word	0x0800abef
 800aa1c:	0800ac1b 	.word	0x0800ac1b
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800aa26:	681b      	ldr	r3, [r3, #0]
 800aa28:	687a      	ldr	r2, [r7, #4]
 800aa2a:	7c12      	ldrb	r2, [r2, #16]
 800aa2c:	f107 0108 	add.w	r1, r7, #8
 800aa30:	4610      	mov	r0, r2
 800aa32:	4798      	blx	r3
 800aa34:	60f8      	str	r0, [r7, #12]
      break;
 800aa36:	e112      	b.n	800ac5e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	7c1b      	ldrb	r3, [r3, #16]
 800aa3c:	2b00      	cmp	r3, #0
 800aa3e:	d10d      	bne.n	800aa5c <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aa46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aa48:	f107 0208 	add.w	r2, r7, #8
 800aa4c:	4610      	mov	r0, r2
 800aa4e:	4798      	blx	r3
 800aa50:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800aa52:	68fb      	ldr	r3, [r7, #12]
 800aa54:	3301      	adds	r3, #1
 800aa56:	2202      	movs	r2, #2
 800aa58:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800aa5a:	e100      	b.n	800ac5e <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aa62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa64:	f107 0208 	add.w	r2, r7, #8
 800aa68:	4610      	mov	r0, r2
 800aa6a:	4798      	blx	r3
 800aa6c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800aa6e:	68fb      	ldr	r3, [r7, #12]
 800aa70:	3301      	adds	r3, #1
 800aa72:	2202      	movs	r2, #2
 800aa74:	701a      	strb	r2, [r3, #0]
      break;
 800aa76:	e0f2      	b.n	800ac5e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800aa78:	683b      	ldr	r3, [r7, #0]
 800aa7a:	885b      	ldrh	r3, [r3, #2]
 800aa7c:	b2db      	uxtb	r3, r3
 800aa7e:	2b05      	cmp	r3, #5
 800aa80:	f200 80ac 	bhi.w	800abdc <USBD_GetDescriptor+0x204>
 800aa84:	a201      	add	r2, pc, #4	; (adr r2, 800aa8c <USBD_GetDescriptor+0xb4>)
 800aa86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa8a:	bf00      	nop
 800aa8c:	0800aaa5 	.word	0x0800aaa5
 800aa90:	0800aad9 	.word	0x0800aad9
 800aa94:	0800ab0d 	.word	0x0800ab0d
 800aa98:	0800ab41 	.word	0x0800ab41
 800aa9c:	0800ab75 	.word	0x0800ab75
 800aaa0:	0800aba9 	.word	0x0800aba9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800aaaa:	685b      	ldr	r3, [r3, #4]
 800aaac:	2b00      	cmp	r3, #0
 800aaae:	d00b      	beq.n	800aac8 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800aab6:	685b      	ldr	r3, [r3, #4]
 800aab8:	687a      	ldr	r2, [r7, #4]
 800aaba:	7c12      	ldrb	r2, [r2, #16]
 800aabc:	f107 0108 	add.w	r1, r7, #8
 800aac0:	4610      	mov	r0, r2
 800aac2:	4798      	blx	r3
 800aac4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800aac6:	e091      	b.n	800abec <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800aac8:	6839      	ldr	r1, [r7, #0]
 800aaca:	6878      	ldr	r0, [r7, #4]
 800aacc:	f000 facb 	bl	800b066 <USBD_CtlError>
            err++;
 800aad0:	7afb      	ldrb	r3, [r7, #11]
 800aad2:	3301      	adds	r3, #1
 800aad4:	72fb      	strb	r3, [r7, #11]
          break;
 800aad6:	e089      	b.n	800abec <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800aade:	689b      	ldr	r3, [r3, #8]
 800aae0:	2b00      	cmp	r3, #0
 800aae2:	d00b      	beq.n	800aafc <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800aaea:	689b      	ldr	r3, [r3, #8]
 800aaec:	687a      	ldr	r2, [r7, #4]
 800aaee:	7c12      	ldrb	r2, [r2, #16]
 800aaf0:	f107 0108 	add.w	r1, r7, #8
 800aaf4:	4610      	mov	r0, r2
 800aaf6:	4798      	blx	r3
 800aaf8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800aafa:	e077      	b.n	800abec <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800aafc:	6839      	ldr	r1, [r7, #0]
 800aafe:	6878      	ldr	r0, [r7, #4]
 800ab00:	f000 fab1 	bl	800b066 <USBD_CtlError>
            err++;
 800ab04:	7afb      	ldrb	r3, [r7, #11]
 800ab06:	3301      	adds	r3, #1
 800ab08:	72fb      	strb	r3, [r7, #11]
          break;
 800ab0a:	e06f      	b.n	800abec <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ab12:	68db      	ldr	r3, [r3, #12]
 800ab14:	2b00      	cmp	r3, #0
 800ab16:	d00b      	beq.n	800ab30 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ab1e:	68db      	ldr	r3, [r3, #12]
 800ab20:	687a      	ldr	r2, [r7, #4]
 800ab22:	7c12      	ldrb	r2, [r2, #16]
 800ab24:	f107 0108 	add.w	r1, r7, #8
 800ab28:	4610      	mov	r0, r2
 800ab2a:	4798      	blx	r3
 800ab2c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ab2e:	e05d      	b.n	800abec <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ab30:	6839      	ldr	r1, [r7, #0]
 800ab32:	6878      	ldr	r0, [r7, #4]
 800ab34:	f000 fa97 	bl	800b066 <USBD_CtlError>
            err++;
 800ab38:	7afb      	ldrb	r3, [r7, #11]
 800ab3a:	3301      	adds	r3, #1
 800ab3c:	72fb      	strb	r3, [r7, #11]
          break;
 800ab3e:	e055      	b.n	800abec <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ab46:	691b      	ldr	r3, [r3, #16]
 800ab48:	2b00      	cmp	r3, #0
 800ab4a:	d00b      	beq.n	800ab64 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ab52:	691b      	ldr	r3, [r3, #16]
 800ab54:	687a      	ldr	r2, [r7, #4]
 800ab56:	7c12      	ldrb	r2, [r2, #16]
 800ab58:	f107 0108 	add.w	r1, r7, #8
 800ab5c:	4610      	mov	r0, r2
 800ab5e:	4798      	blx	r3
 800ab60:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ab62:	e043      	b.n	800abec <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ab64:	6839      	ldr	r1, [r7, #0]
 800ab66:	6878      	ldr	r0, [r7, #4]
 800ab68:	f000 fa7d 	bl	800b066 <USBD_CtlError>
            err++;
 800ab6c:	7afb      	ldrb	r3, [r7, #11]
 800ab6e:	3301      	adds	r3, #1
 800ab70:	72fb      	strb	r3, [r7, #11]
          break;
 800ab72:	e03b      	b.n	800abec <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ab7a:	695b      	ldr	r3, [r3, #20]
 800ab7c:	2b00      	cmp	r3, #0
 800ab7e:	d00b      	beq.n	800ab98 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ab86:	695b      	ldr	r3, [r3, #20]
 800ab88:	687a      	ldr	r2, [r7, #4]
 800ab8a:	7c12      	ldrb	r2, [r2, #16]
 800ab8c:	f107 0108 	add.w	r1, r7, #8
 800ab90:	4610      	mov	r0, r2
 800ab92:	4798      	blx	r3
 800ab94:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ab96:	e029      	b.n	800abec <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ab98:	6839      	ldr	r1, [r7, #0]
 800ab9a:	6878      	ldr	r0, [r7, #4]
 800ab9c:	f000 fa63 	bl	800b066 <USBD_CtlError>
            err++;
 800aba0:	7afb      	ldrb	r3, [r7, #11]
 800aba2:	3301      	adds	r3, #1
 800aba4:	72fb      	strb	r3, [r7, #11]
          break;
 800aba6:	e021      	b.n	800abec <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800abae:	699b      	ldr	r3, [r3, #24]
 800abb0:	2b00      	cmp	r3, #0
 800abb2:	d00b      	beq.n	800abcc <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800abba:	699b      	ldr	r3, [r3, #24]
 800abbc:	687a      	ldr	r2, [r7, #4]
 800abbe:	7c12      	ldrb	r2, [r2, #16]
 800abc0:	f107 0108 	add.w	r1, r7, #8
 800abc4:	4610      	mov	r0, r2
 800abc6:	4798      	blx	r3
 800abc8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800abca:	e00f      	b.n	800abec <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800abcc:	6839      	ldr	r1, [r7, #0]
 800abce:	6878      	ldr	r0, [r7, #4]
 800abd0:	f000 fa49 	bl	800b066 <USBD_CtlError>
            err++;
 800abd4:	7afb      	ldrb	r3, [r7, #11]
 800abd6:	3301      	adds	r3, #1
 800abd8:	72fb      	strb	r3, [r7, #11]
          break;
 800abda:	e007      	b.n	800abec <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800abdc:	6839      	ldr	r1, [r7, #0]
 800abde:	6878      	ldr	r0, [r7, #4]
 800abe0:	f000 fa41 	bl	800b066 <USBD_CtlError>
          err++;
 800abe4:	7afb      	ldrb	r3, [r7, #11]
 800abe6:	3301      	adds	r3, #1
 800abe8:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800abea:	bf00      	nop
      }
      break;
 800abec:	e037      	b.n	800ac5e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	7c1b      	ldrb	r3, [r3, #16]
 800abf2:	2b00      	cmp	r3, #0
 800abf4:	d109      	bne.n	800ac0a <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800abfc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800abfe:	f107 0208 	add.w	r2, r7, #8
 800ac02:	4610      	mov	r0, r2
 800ac04:	4798      	blx	r3
 800ac06:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ac08:	e029      	b.n	800ac5e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800ac0a:	6839      	ldr	r1, [r7, #0]
 800ac0c:	6878      	ldr	r0, [r7, #4]
 800ac0e:	f000 fa2a 	bl	800b066 <USBD_CtlError>
        err++;
 800ac12:	7afb      	ldrb	r3, [r7, #11]
 800ac14:	3301      	adds	r3, #1
 800ac16:	72fb      	strb	r3, [r7, #11]
      break;
 800ac18:	e021      	b.n	800ac5e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	7c1b      	ldrb	r3, [r3, #16]
 800ac1e:	2b00      	cmp	r3, #0
 800ac20:	d10d      	bne.n	800ac3e <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ac28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ac2a:	f107 0208 	add.w	r2, r7, #8
 800ac2e:	4610      	mov	r0, r2
 800ac30:	4798      	blx	r3
 800ac32:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800ac34:	68fb      	ldr	r3, [r7, #12]
 800ac36:	3301      	adds	r3, #1
 800ac38:	2207      	movs	r2, #7
 800ac3a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ac3c:	e00f      	b.n	800ac5e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800ac3e:	6839      	ldr	r1, [r7, #0]
 800ac40:	6878      	ldr	r0, [r7, #4]
 800ac42:	f000 fa10 	bl	800b066 <USBD_CtlError>
        err++;
 800ac46:	7afb      	ldrb	r3, [r7, #11]
 800ac48:	3301      	adds	r3, #1
 800ac4a:	72fb      	strb	r3, [r7, #11]
      break;
 800ac4c:	e007      	b.n	800ac5e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800ac4e:	6839      	ldr	r1, [r7, #0]
 800ac50:	6878      	ldr	r0, [r7, #4]
 800ac52:	f000 fa08 	bl	800b066 <USBD_CtlError>
      err++;
 800ac56:	7afb      	ldrb	r3, [r7, #11]
 800ac58:	3301      	adds	r3, #1
 800ac5a:	72fb      	strb	r3, [r7, #11]
      break;
 800ac5c:	bf00      	nop
  }

  if (err != 0U)
 800ac5e:	7afb      	ldrb	r3, [r7, #11]
 800ac60:	2b00      	cmp	r3, #0
 800ac62:	d11e      	bne.n	800aca2 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800ac64:	683b      	ldr	r3, [r7, #0]
 800ac66:	88db      	ldrh	r3, [r3, #6]
 800ac68:	2b00      	cmp	r3, #0
 800ac6a:	d016      	beq.n	800ac9a <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800ac6c:	893b      	ldrh	r3, [r7, #8]
 800ac6e:	2b00      	cmp	r3, #0
 800ac70:	d00e      	beq.n	800ac90 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800ac72:	683b      	ldr	r3, [r7, #0]
 800ac74:	88da      	ldrh	r2, [r3, #6]
 800ac76:	893b      	ldrh	r3, [r7, #8]
 800ac78:	4293      	cmp	r3, r2
 800ac7a:	bf28      	it	cs
 800ac7c:	4613      	movcs	r3, r2
 800ac7e:	b29b      	uxth	r3, r3
 800ac80:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800ac82:	893b      	ldrh	r3, [r7, #8]
 800ac84:	461a      	mov	r2, r3
 800ac86:	68f9      	ldr	r1, [r7, #12]
 800ac88:	6878      	ldr	r0, [r7, #4]
 800ac8a:	f000 fa5d 	bl	800b148 <USBD_CtlSendData>
 800ac8e:	e009      	b.n	800aca4 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800ac90:	6839      	ldr	r1, [r7, #0]
 800ac92:	6878      	ldr	r0, [r7, #4]
 800ac94:	f000 f9e7 	bl	800b066 <USBD_CtlError>
 800ac98:	e004      	b.n	800aca4 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800ac9a:	6878      	ldr	r0, [r7, #4]
 800ac9c:	f000 faae 	bl	800b1fc <USBD_CtlSendStatus>
 800aca0:	e000      	b.n	800aca4 <USBD_GetDescriptor+0x2cc>
    return;
 800aca2:	bf00      	nop
  }
}
 800aca4:	3710      	adds	r7, #16
 800aca6:	46bd      	mov	sp, r7
 800aca8:	bd80      	pop	{r7, pc}
 800acaa:	bf00      	nop

0800acac <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800acac:	b580      	push	{r7, lr}
 800acae:	b084      	sub	sp, #16
 800acb0:	af00      	add	r7, sp, #0
 800acb2:	6078      	str	r0, [r7, #4]
 800acb4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800acb6:	683b      	ldr	r3, [r7, #0]
 800acb8:	889b      	ldrh	r3, [r3, #4]
 800acba:	2b00      	cmp	r3, #0
 800acbc:	d131      	bne.n	800ad22 <USBD_SetAddress+0x76>
 800acbe:	683b      	ldr	r3, [r7, #0]
 800acc0:	88db      	ldrh	r3, [r3, #6]
 800acc2:	2b00      	cmp	r3, #0
 800acc4:	d12d      	bne.n	800ad22 <USBD_SetAddress+0x76>
 800acc6:	683b      	ldr	r3, [r7, #0]
 800acc8:	885b      	ldrh	r3, [r3, #2]
 800acca:	2b7f      	cmp	r3, #127	; 0x7f
 800accc:	d829      	bhi.n	800ad22 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800acce:	683b      	ldr	r3, [r7, #0]
 800acd0:	885b      	ldrh	r3, [r3, #2]
 800acd2:	b2db      	uxtb	r3, r3
 800acd4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800acd8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ace0:	b2db      	uxtb	r3, r3
 800ace2:	2b03      	cmp	r3, #3
 800ace4:	d104      	bne.n	800acf0 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800ace6:	6839      	ldr	r1, [r7, #0]
 800ace8:	6878      	ldr	r0, [r7, #4]
 800acea:	f000 f9bc 	bl	800b066 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800acee:	e01d      	b.n	800ad2c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	7bfa      	ldrb	r2, [r7, #15]
 800acf4:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800acf8:	7bfb      	ldrb	r3, [r7, #15]
 800acfa:	4619      	mov	r1, r3
 800acfc:	6878      	ldr	r0, [r7, #4]
 800acfe:	f000 ff0b 	bl	800bb18 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800ad02:	6878      	ldr	r0, [r7, #4]
 800ad04:	f000 fa7a 	bl	800b1fc <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800ad08:	7bfb      	ldrb	r3, [r7, #15]
 800ad0a:	2b00      	cmp	r3, #0
 800ad0c:	d004      	beq.n	800ad18 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	2202      	movs	r2, #2
 800ad12:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ad16:	e009      	b.n	800ad2c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	2201      	movs	r2, #1
 800ad1c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ad20:	e004      	b.n	800ad2c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800ad22:	6839      	ldr	r1, [r7, #0]
 800ad24:	6878      	ldr	r0, [r7, #4]
 800ad26:	f000 f99e 	bl	800b066 <USBD_CtlError>
  }
}
 800ad2a:	bf00      	nop
 800ad2c:	bf00      	nop
 800ad2e:	3710      	adds	r7, #16
 800ad30:	46bd      	mov	sp, r7
 800ad32:	bd80      	pop	{r7, pc}

0800ad34 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ad34:	b580      	push	{r7, lr}
 800ad36:	b084      	sub	sp, #16
 800ad38:	af00      	add	r7, sp, #0
 800ad3a:	6078      	str	r0, [r7, #4]
 800ad3c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ad3e:	2300      	movs	r3, #0
 800ad40:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800ad42:	683b      	ldr	r3, [r7, #0]
 800ad44:	885b      	ldrh	r3, [r3, #2]
 800ad46:	b2da      	uxtb	r2, r3
 800ad48:	4b4e      	ldr	r3, [pc, #312]	; (800ae84 <USBD_SetConfig+0x150>)
 800ad4a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800ad4c:	4b4d      	ldr	r3, [pc, #308]	; (800ae84 <USBD_SetConfig+0x150>)
 800ad4e:	781b      	ldrb	r3, [r3, #0]
 800ad50:	2b01      	cmp	r3, #1
 800ad52:	d905      	bls.n	800ad60 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800ad54:	6839      	ldr	r1, [r7, #0]
 800ad56:	6878      	ldr	r0, [r7, #4]
 800ad58:	f000 f985 	bl	800b066 <USBD_CtlError>
    return USBD_FAIL;
 800ad5c:	2303      	movs	r3, #3
 800ad5e:	e08c      	b.n	800ae7a <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ad66:	b2db      	uxtb	r3, r3
 800ad68:	2b02      	cmp	r3, #2
 800ad6a:	d002      	beq.n	800ad72 <USBD_SetConfig+0x3e>
 800ad6c:	2b03      	cmp	r3, #3
 800ad6e:	d029      	beq.n	800adc4 <USBD_SetConfig+0x90>
 800ad70:	e075      	b.n	800ae5e <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800ad72:	4b44      	ldr	r3, [pc, #272]	; (800ae84 <USBD_SetConfig+0x150>)
 800ad74:	781b      	ldrb	r3, [r3, #0]
 800ad76:	2b00      	cmp	r3, #0
 800ad78:	d020      	beq.n	800adbc <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800ad7a:	4b42      	ldr	r3, [pc, #264]	; (800ae84 <USBD_SetConfig+0x150>)
 800ad7c:	781b      	ldrb	r3, [r3, #0]
 800ad7e:	461a      	mov	r2, r3
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800ad84:	4b3f      	ldr	r3, [pc, #252]	; (800ae84 <USBD_SetConfig+0x150>)
 800ad86:	781b      	ldrb	r3, [r3, #0]
 800ad88:	4619      	mov	r1, r3
 800ad8a:	6878      	ldr	r0, [r7, #4]
 800ad8c:	f7fe ffe7 	bl	8009d5e <USBD_SetClassConfig>
 800ad90:	4603      	mov	r3, r0
 800ad92:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800ad94:	7bfb      	ldrb	r3, [r7, #15]
 800ad96:	2b00      	cmp	r3, #0
 800ad98:	d008      	beq.n	800adac <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800ad9a:	6839      	ldr	r1, [r7, #0]
 800ad9c:	6878      	ldr	r0, [r7, #4]
 800ad9e:	f000 f962 	bl	800b066 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	2202      	movs	r2, #2
 800ada6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800adaa:	e065      	b.n	800ae78 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800adac:	6878      	ldr	r0, [r7, #4]
 800adae:	f000 fa25 	bl	800b1fc <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	2203      	movs	r2, #3
 800adb6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800adba:	e05d      	b.n	800ae78 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800adbc:	6878      	ldr	r0, [r7, #4]
 800adbe:	f000 fa1d 	bl	800b1fc <USBD_CtlSendStatus>
      break;
 800adc2:	e059      	b.n	800ae78 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800adc4:	4b2f      	ldr	r3, [pc, #188]	; (800ae84 <USBD_SetConfig+0x150>)
 800adc6:	781b      	ldrb	r3, [r3, #0]
 800adc8:	2b00      	cmp	r3, #0
 800adca:	d112      	bne.n	800adf2 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	2202      	movs	r2, #2
 800add0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800add4:	4b2b      	ldr	r3, [pc, #172]	; (800ae84 <USBD_SetConfig+0x150>)
 800add6:	781b      	ldrb	r3, [r3, #0]
 800add8:	461a      	mov	r2, r3
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800adde:	4b29      	ldr	r3, [pc, #164]	; (800ae84 <USBD_SetConfig+0x150>)
 800ade0:	781b      	ldrb	r3, [r3, #0]
 800ade2:	4619      	mov	r1, r3
 800ade4:	6878      	ldr	r0, [r7, #4]
 800ade6:	f7fe ffd6 	bl	8009d96 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800adea:	6878      	ldr	r0, [r7, #4]
 800adec:	f000 fa06 	bl	800b1fc <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800adf0:	e042      	b.n	800ae78 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800adf2:	4b24      	ldr	r3, [pc, #144]	; (800ae84 <USBD_SetConfig+0x150>)
 800adf4:	781b      	ldrb	r3, [r3, #0]
 800adf6:	461a      	mov	r2, r3
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	685b      	ldr	r3, [r3, #4]
 800adfc:	429a      	cmp	r2, r3
 800adfe:	d02a      	beq.n	800ae56 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	685b      	ldr	r3, [r3, #4]
 800ae04:	b2db      	uxtb	r3, r3
 800ae06:	4619      	mov	r1, r3
 800ae08:	6878      	ldr	r0, [r7, #4]
 800ae0a:	f7fe ffc4 	bl	8009d96 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800ae0e:	4b1d      	ldr	r3, [pc, #116]	; (800ae84 <USBD_SetConfig+0x150>)
 800ae10:	781b      	ldrb	r3, [r3, #0]
 800ae12:	461a      	mov	r2, r3
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800ae18:	4b1a      	ldr	r3, [pc, #104]	; (800ae84 <USBD_SetConfig+0x150>)
 800ae1a:	781b      	ldrb	r3, [r3, #0]
 800ae1c:	4619      	mov	r1, r3
 800ae1e:	6878      	ldr	r0, [r7, #4]
 800ae20:	f7fe ff9d 	bl	8009d5e <USBD_SetClassConfig>
 800ae24:	4603      	mov	r3, r0
 800ae26:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800ae28:	7bfb      	ldrb	r3, [r7, #15]
 800ae2a:	2b00      	cmp	r3, #0
 800ae2c:	d00f      	beq.n	800ae4e <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800ae2e:	6839      	ldr	r1, [r7, #0]
 800ae30:	6878      	ldr	r0, [r7, #4]
 800ae32:	f000 f918 	bl	800b066 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	685b      	ldr	r3, [r3, #4]
 800ae3a:	b2db      	uxtb	r3, r3
 800ae3c:	4619      	mov	r1, r3
 800ae3e:	6878      	ldr	r0, [r7, #4]
 800ae40:	f7fe ffa9 	bl	8009d96 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	2202      	movs	r2, #2
 800ae48:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800ae4c:	e014      	b.n	800ae78 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800ae4e:	6878      	ldr	r0, [r7, #4]
 800ae50:	f000 f9d4 	bl	800b1fc <USBD_CtlSendStatus>
      break;
 800ae54:	e010      	b.n	800ae78 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800ae56:	6878      	ldr	r0, [r7, #4]
 800ae58:	f000 f9d0 	bl	800b1fc <USBD_CtlSendStatus>
      break;
 800ae5c:	e00c      	b.n	800ae78 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800ae5e:	6839      	ldr	r1, [r7, #0]
 800ae60:	6878      	ldr	r0, [r7, #4]
 800ae62:	f000 f900 	bl	800b066 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800ae66:	4b07      	ldr	r3, [pc, #28]	; (800ae84 <USBD_SetConfig+0x150>)
 800ae68:	781b      	ldrb	r3, [r3, #0]
 800ae6a:	4619      	mov	r1, r3
 800ae6c:	6878      	ldr	r0, [r7, #4]
 800ae6e:	f7fe ff92 	bl	8009d96 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800ae72:	2303      	movs	r3, #3
 800ae74:	73fb      	strb	r3, [r7, #15]
      break;
 800ae76:	bf00      	nop
  }

  return ret;
 800ae78:	7bfb      	ldrb	r3, [r7, #15]
}
 800ae7a:	4618      	mov	r0, r3
 800ae7c:	3710      	adds	r7, #16
 800ae7e:	46bd      	mov	sp, r7
 800ae80:	bd80      	pop	{r7, pc}
 800ae82:	bf00      	nop
 800ae84:	20000838 	.word	0x20000838

0800ae88 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ae88:	b580      	push	{r7, lr}
 800ae8a:	b082      	sub	sp, #8
 800ae8c:	af00      	add	r7, sp, #0
 800ae8e:	6078      	str	r0, [r7, #4]
 800ae90:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800ae92:	683b      	ldr	r3, [r7, #0]
 800ae94:	88db      	ldrh	r3, [r3, #6]
 800ae96:	2b01      	cmp	r3, #1
 800ae98:	d004      	beq.n	800aea4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800ae9a:	6839      	ldr	r1, [r7, #0]
 800ae9c:	6878      	ldr	r0, [r7, #4]
 800ae9e:	f000 f8e2 	bl	800b066 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800aea2:	e023      	b.n	800aeec <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aeaa:	b2db      	uxtb	r3, r3
 800aeac:	2b02      	cmp	r3, #2
 800aeae:	dc02      	bgt.n	800aeb6 <USBD_GetConfig+0x2e>
 800aeb0:	2b00      	cmp	r3, #0
 800aeb2:	dc03      	bgt.n	800aebc <USBD_GetConfig+0x34>
 800aeb4:	e015      	b.n	800aee2 <USBD_GetConfig+0x5a>
 800aeb6:	2b03      	cmp	r3, #3
 800aeb8:	d00b      	beq.n	800aed2 <USBD_GetConfig+0x4a>
 800aeba:	e012      	b.n	800aee2 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	2200      	movs	r2, #0
 800aec0:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	3308      	adds	r3, #8
 800aec6:	2201      	movs	r2, #1
 800aec8:	4619      	mov	r1, r3
 800aeca:	6878      	ldr	r0, [r7, #4]
 800aecc:	f000 f93c 	bl	800b148 <USBD_CtlSendData>
        break;
 800aed0:	e00c      	b.n	800aeec <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	3304      	adds	r3, #4
 800aed6:	2201      	movs	r2, #1
 800aed8:	4619      	mov	r1, r3
 800aeda:	6878      	ldr	r0, [r7, #4]
 800aedc:	f000 f934 	bl	800b148 <USBD_CtlSendData>
        break;
 800aee0:	e004      	b.n	800aeec <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800aee2:	6839      	ldr	r1, [r7, #0]
 800aee4:	6878      	ldr	r0, [r7, #4]
 800aee6:	f000 f8be 	bl	800b066 <USBD_CtlError>
        break;
 800aeea:	bf00      	nop
}
 800aeec:	bf00      	nop
 800aeee:	3708      	adds	r7, #8
 800aef0:	46bd      	mov	sp, r7
 800aef2:	bd80      	pop	{r7, pc}

0800aef4 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800aef4:	b580      	push	{r7, lr}
 800aef6:	b082      	sub	sp, #8
 800aef8:	af00      	add	r7, sp, #0
 800aefa:	6078      	str	r0, [r7, #4]
 800aefc:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800af04:	b2db      	uxtb	r3, r3
 800af06:	3b01      	subs	r3, #1
 800af08:	2b02      	cmp	r3, #2
 800af0a:	d81e      	bhi.n	800af4a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800af0c:	683b      	ldr	r3, [r7, #0]
 800af0e:	88db      	ldrh	r3, [r3, #6]
 800af10:	2b02      	cmp	r3, #2
 800af12:	d004      	beq.n	800af1e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800af14:	6839      	ldr	r1, [r7, #0]
 800af16:	6878      	ldr	r0, [r7, #4]
 800af18:	f000 f8a5 	bl	800b066 <USBD_CtlError>
        break;
 800af1c:	e01a      	b.n	800af54 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	2201      	movs	r2, #1
 800af22:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800af2a:	2b00      	cmp	r3, #0
 800af2c:	d005      	beq.n	800af3a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	68db      	ldr	r3, [r3, #12]
 800af32:	f043 0202 	orr.w	r2, r3, #2
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	330c      	adds	r3, #12
 800af3e:	2202      	movs	r2, #2
 800af40:	4619      	mov	r1, r3
 800af42:	6878      	ldr	r0, [r7, #4]
 800af44:	f000 f900 	bl	800b148 <USBD_CtlSendData>
      break;
 800af48:	e004      	b.n	800af54 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800af4a:	6839      	ldr	r1, [r7, #0]
 800af4c:	6878      	ldr	r0, [r7, #4]
 800af4e:	f000 f88a 	bl	800b066 <USBD_CtlError>
      break;
 800af52:	bf00      	nop
  }
}
 800af54:	bf00      	nop
 800af56:	3708      	adds	r7, #8
 800af58:	46bd      	mov	sp, r7
 800af5a:	bd80      	pop	{r7, pc}

0800af5c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800af5c:	b580      	push	{r7, lr}
 800af5e:	b082      	sub	sp, #8
 800af60:	af00      	add	r7, sp, #0
 800af62:	6078      	str	r0, [r7, #4]
 800af64:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800af66:	683b      	ldr	r3, [r7, #0]
 800af68:	885b      	ldrh	r3, [r3, #2]
 800af6a:	2b01      	cmp	r3, #1
 800af6c:	d107      	bne.n	800af7e <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	2201      	movs	r2, #1
 800af72:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800af76:	6878      	ldr	r0, [r7, #4]
 800af78:	f000 f940 	bl	800b1fc <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800af7c:	e013      	b.n	800afa6 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800af7e:	683b      	ldr	r3, [r7, #0]
 800af80:	885b      	ldrh	r3, [r3, #2]
 800af82:	2b02      	cmp	r3, #2
 800af84:	d10b      	bne.n	800af9e <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 800af86:	683b      	ldr	r3, [r7, #0]
 800af88:	889b      	ldrh	r3, [r3, #4]
 800af8a:	0a1b      	lsrs	r3, r3, #8
 800af8c:	b29b      	uxth	r3, r3
 800af8e:	b2da      	uxtb	r2, r3
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800af96:	6878      	ldr	r0, [r7, #4]
 800af98:	f000 f930 	bl	800b1fc <USBD_CtlSendStatus>
}
 800af9c:	e003      	b.n	800afa6 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800af9e:	6839      	ldr	r1, [r7, #0]
 800afa0:	6878      	ldr	r0, [r7, #4]
 800afa2:	f000 f860 	bl	800b066 <USBD_CtlError>
}
 800afa6:	bf00      	nop
 800afa8:	3708      	adds	r7, #8
 800afaa:	46bd      	mov	sp, r7
 800afac:	bd80      	pop	{r7, pc}

0800afae <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800afae:	b580      	push	{r7, lr}
 800afb0:	b082      	sub	sp, #8
 800afb2:	af00      	add	r7, sp, #0
 800afb4:	6078      	str	r0, [r7, #4]
 800afb6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800afbe:	b2db      	uxtb	r3, r3
 800afc0:	3b01      	subs	r3, #1
 800afc2:	2b02      	cmp	r3, #2
 800afc4:	d80b      	bhi.n	800afde <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800afc6:	683b      	ldr	r3, [r7, #0]
 800afc8:	885b      	ldrh	r3, [r3, #2]
 800afca:	2b01      	cmp	r3, #1
 800afcc:	d10c      	bne.n	800afe8 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	2200      	movs	r2, #0
 800afd2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800afd6:	6878      	ldr	r0, [r7, #4]
 800afd8:	f000 f910 	bl	800b1fc <USBD_CtlSendStatus>
      }
      break;
 800afdc:	e004      	b.n	800afe8 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800afde:	6839      	ldr	r1, [r7, #0]
 800afe0:	6878      	ldr	r0, [r7, #4]
 800afe2:	f000 f840 	bl	800b066 <USBD_CtlError>
      break;
 800afe6:	e000      	b.n	800afea <USBD_ClrFeature+0x3c>
      break;
 800afe8:	bf00      	nop
  }
}
 800afea:	bf00      	nop
 800afec:	3708      	adds	r7, #8
 800afee:	46bd      	mov	sp, r7
 800aff0:	bd80      	pop	{r7, pc}

0800aff2 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800aff2:	b580      	push	{r7, lr}
 800aff4:	b084      	sub	sp, #16
 800aff6:	af00      	add	r7, sp, #0
 800aff8:	6078      	str	r0, [r7, #4]
 800affa:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800affc:	683b      	ldr	r3, [r7, #0]
 800affe:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800b000:	68fb      	ldr	r3, [r7, #12]
 800b002:	781a      	ldrb	r2, [r3, #0]
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800b008:	68fb      	ldr	r3, [r7, #12]
 800b00a:	3301      	adds	r3, #1
 800b00c:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800b00e:	68fb      	ldr	r3, [r7, #12]
 800b010:	781a      	ldrb	r2, [r3, #0]
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800b016:	68fb      	ldr	r3, [r7, #12]
 800b018:	3301      	adds	r3, #1
 800b01a:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800b01c:	68f8      	ldr	r0, [r7, #12]
 800b01e:	f7ff fa41 	bl	800a4a4 <SWAPBYTE>
 800b022:	4603      	mov	r3, r0
 800b024:	461a      	mov	r2, r3
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800b02a:	68fb      	ldr	r3, [r7, #12]
 800b02c:	3301      	adds	r3, #1
 800b02e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b030:	68fb      	ldr	r3, [r7, #12]
 800b032:	3301      	adds	r3, #1
 800b034:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800b036:	68f8      	ldr	r0, [r7, #12]
 800b038:	f7ff fa34 	bl	800a4a4 <SWAPBYTE>
 800b03c:	4603      	mov	r3, r0
 800b03e:	461a      	mov	r2, r3
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800b044:	68fb      	ldr	r3, [r7, #12]
 800b046:	3301      	adds	r3, #1
 800b048:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b04a:	68fb      	ldr	r3, [r7, #12]
 800b04c:	3301      	adds	r3, #1
 800b04e:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800b050:	68f8      	ldr	r0, [r7, #12]
 800b052:	f7ff fa27 	bl	800a4a4 <SWAPBYTE>
 800b056:	4603      	mov	r3, r0
 800b058:	461a      	mov	r2, r3
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	80da      	strh	r2, [r3, #6]
}
 800b05e:	bf00      	nop
 800b060:	3710      	adds	r7, #16
 800b062:	46bd      	mov	sp, r7
 800b064:	bd80      	pop	{r7, pc}

0800b066 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b066:	b580      	push	{r7, lr}
 800b068:	b082      	sub	sp, #8
 800b06a:	af00      	add	r7, sp, #0
 800b06c:	6078      	str	r0, [r7, #4]
 800b06e:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800b070:	2180      	movs	r1, #128	; 0x80
 800b072:	6878      	ldr	r0, [r7, #4]
 800b074:	f000 fce6 	bl	800ba44 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800b078:	2100      	movs	r1, #0
 800b07a:	6878      	ldr	r0, [r7, #4]
 800b07c:	f000 fce2 	bl	800ba44 <USBD_LL_StallEP>
}
 800b080:	bf00      	nop
 800b082:	3708      	adds	r7, #8
 800b084:	46bd      	mov	sp, r7
 800b086:	bd80      	pop	{r7, pc}

0800b088 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800b088:	b580      	push	{r7, lr}
 800b08a:	b086      	sub	sp, #24
 800b08c:	af00      	add	r7, sp, #0
 800b08e:	60f8      	str	r0, [r7, #12]
 800b090:	60b9      	str	r1, [r7, #8]
 800b092:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800b094:	2300      	movs	r3, #0
 800b096:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800b098:	68fb      	ldr	r3, [r7, #12]
 800b09a:	2b00      	cmp	r3, #0
 800b09c:	d036      	beq.n	800b10c <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800b09e:	68fb      	ldr	r3, [r7, #12]
 800b0a0:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800b0a2:	6938      	ldr	r0, [r7, #16]
 800b0a4:	f000 f836 	bl	800b114 <USBD_GetLen>
 800b0a8:	4603      	mov	r3, r0
 800b0aa:	3301      	adds	r3, #1
 800b0ac:	b29b      	uxth	r3, r3
 800b0ae:	005b      	lsls	r3, r3, #1
 800b0b0:	b29a      	uxth	r2, r3
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800b0b6:	7dfb      	ldrb	r3, [r7, #23]
 800b0b8:	68ba      	ldr	r2, [r7, #8]
 800b0ba:	4413      	add	r3, r2
 800b0bc:	687a      	ldr	r2, [r7, #4]
 800b0be:	7812      	ldrb	r2, [r2, #0]
 800b0c0:	701a      	strb	r2, [r3, #0]
  idx++;
 800b0c2:	7dfb      	ldrb	r3, [r7, #23]
 800b0c4:	3301      	adds	r3, #1
 800b0c6:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800b0c8:	7dfb      	ldrb	r3, [r7, #23]
 800b0ca:	68ba      	ldr	r2, [r7, #8]
 800b0cc:	4413      	add	r3, r2
 800b0ce:	2203      	movs	r2, #3
 800b0d0:	701a      	strb	r2, [r3, #0]
  idx++;
 800b0d2:	7dfb      	ldrb	r3, [r7, #23]
 800b0d4:	3301      	adds	r3, #1
 800b0d6:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800b0d8:	e013      	b.n	800b102 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800b0da:	7dfb      	ldrb	r3, [r7, #23]
 800b0dc:	68ba      	ldr	r2, [r7, #8]
 800b0de:	4413      	add	r3, r2
 800b0e0:	693a      	ldr	r2, [r7, #16]
 800b0e2:	7812      	ldrb	r2, [r2, #0]
 800b0e4:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800b0e6:	693b      	ldr	r3, [r7, #16]
 800b0e8:	3301      	adds	r3, #1
 800b0ea:	613b      	str	r3, [r7, #16]
    idx++;
 800b0ec:	7dfb      	ldrb	r3, [r7, #23]
 800b0ee:	3301      	adds	r3, #1
 800b0f0:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800b0f2:	7dfb      	ldrb	r3, [r7, #23]
 800b0f4:	68ba      	ldr	r2, [r7, #8]
 800b0f6:	4413      	add	r3, r2
 800b0f8:	2200      	movs	r2, #0
 800b0fa:	701a      	strb	r2, [r3, #0]
    idx++;
 800b0fc:	7dfb      	ldrb	r3, [r7, #23]
 800b0fe:	3301      	adds	r3, #1
 800b100:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800b102:	693b      	ldr	r3, [r7, #16]
 800b104:	781b      	ldrb	r3, [r3, #0]
 800b106:	2b00      	cmp	r3, #0
 800b108:	d1e7      	bne.n	800b0da <USBD_GetString+0x52>
 800b10a:	e000      	b.n	800b10e <USBD_GetString+0x86>
    return;
 800b10c:	bf00      	nop
  }
}
 800b10e:	3718      	adds	r7, #24
 800b110:	46bd      	mov	sp, r7
 800b112:	bd80      	pop	{r7, pc}

0800b114 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800b114:	b480      	push	{r7}
 800b116:	b085      	sub	sp, #20
 800b118:	af00      	add	r7, sp, #0
 800b11a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800b11c:	2300      	movs	r3, #0
 800b11e:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800b124:	e005      	b.n	800b132 <USBD_GetLen+0x1e>
  {
    len++;
 800b126:	7bfb      	ldrb	r3, [r7, #15]
 800b128:	3301      	adds	r3, #1
 800b12a:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800b12c:	68bb      	ldr	r3, [r7, #8]
 800b12e:	3301      	adds	r3, #1
 800b130:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800b132:	68bb      	ldr	r3, [r7, #8]
 800b134:	781b      	ldrb	r3, [r3, #0]
 800b136:	2b00      	cmp	r3, #0
 800b138:	d1f5      	bne.n	800b126 <USBD_GetLen+0x12>
  }

  return len;
 800b13a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b13c:	4618      	mov	r0, r3
 800b13e:	3714      	adds	r7, #20
 800b140:	46bd      	mov	sp, r7
 800b142:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b146:	4770      	bx	lr

0800b148 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800b148:	b580      	push	{r7, lr}
 800b14a:	b084      	sub	sp, #16
 800b14c:	af00      	add	r7, sp, #0
 800b14e:	60f8      	str	r0, [r7, #12]
 800b150:	60b9      	str	r1, [r7, #8]
 800b152:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800b154:	68fb      	ldr	r3, [r7, #12]
 800b156:	2202      	movs	r2, #2
 800b158:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800b15c:	68fb      	ldr	r3, [r7, #12]
 800b15e:	687a      	ldr	r2, [r7, #4]
 800b160:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800b162:	68fb      	ldr	r3, [r7, #12]
 800b164:	687a      	ldr	r2, [r7, #4]
 800b166:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	68ba      	ldr	r2, [r7, #8]
 800b16c:	2100      	movs	r1, #0
 800b16e:	68f8      	ldr	r0, [r7, #12]
 800b170:	f000 fcf1 	bl	800bb56 <USBD_LL_Transmit>

  return USBD_OK;
 800b174:	2300      	movs	r3, #0
}
 800b176:	4618      	mov	r0, r3
 800b178:	3710      	adds	r7, #16
 800b17a:	46bd      	mov	sp, r7
 800b17c:	bd80      	pop	{r7, pc}

0800b17e <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800b17e:	b580      	push	{r7, lr}
 800b180:	b084      	sub	sp, #16
 800b182:	af00      	add	r7, sp, #0
 800b184:	60f8      	str	r0, [r7, #12]
 800b186:	60b9      	str	r1, [r7, #8]
 800b188:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	68ba      	ldr	r2, [r7, #8]
 800b18e:	2100      	movs	r1, #0
 800b190:	68f8      	ldr	r0, [r7, #12]
 800b192:	f000 fce0 	bl	800bb56 <USBD_LL_Transmit>

  return USBD_OK;
 800b196:	2300      	movs	r3, #0
}
 800b198:	4618      	mov	r0, r3
 800b19a:	3710      	adds	r7, #16
 800b19c:	46bd      	mov	sp, r7
 800b19e:	bd80      	pop	{r7, pc}

0800b1a0 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800b1a0:	b580      	push	{r7, lr}
 800b1a2:	b084      	sub	sp, #16
 800b1a4:	af00      	add	r7, sp, #0
 800b1a6:	60f8      	str	r0, [r7, #12]
 800b1a8:	60b9      	str	r1, [r7, #8]
 800b1aa:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800b1ac:	68fb      	ldr	r3, [r7, #12]
 800b1ae:	2203      	movs	r2, #3
 800b1b0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800b1b4:	68fb      	ldr	r3, [r7, #12]
 800b1b6:	687a      	ldr	r2, [r7, #4]
 800b1b8:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800b1bc:	68fb      	ldr	r3, [r7, #12]
 800b1be:	687a      	ldr	r2, [r7, #4]
 800b1c0:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	68ba      	ldr	r2, [r7, #8]
 800b1c8:	2100      	movs	r1, #0
 800b1ca:	68f8      	ldr	r0, [r7, #12]
 800b1cc:	f000 fce4 	bl	800bb98 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b1d0:	2300      	movs	r3, #0
}
 800b1d2:	4618      	mov	r0, r3
 800b1d4:	3710      	adds	r7, #16
 800b1d6:	46bd      	mov	sp, r7
 800b1d8:	bd80      	pop	{r7, pc}

0800b1da <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800b1da:	b580      	push	{r7, lr}
 800b1dc:	b084      	sub	sp, #16
 800b1de:	af00      	add	r7, sp, #0
 800b1e0:	60f8      	str	r0, [r7, #12]
 800b1e2:	60b9      	str	r1, [r7, #8]
 800b1e4:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b1e6:	687b      	ldr	r3, [r7, #4]
 800b1e8:	68ba      	ldr	r2, [r7, #8]
 800b1ea:	2100      	movs	r1, #0
 800b1ec:	68f8      	ldr	r0, [r7, #12]
 800b1ee:	f000 fcd3 	bl	800bb98 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b1f2:	2300      	movs	r3, #0
}
 800b1f4:	4618      	mov	r0, r3
 800b1f6:	3710      	adds	r7, #16
 800b1f8:	46bd      	mov	sp, r7
 800b1fa:	bd80      	pop	{r7, pc}

0800b1fc <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800b1fc:	b580      	push	{r7, lr}
 800b1fe:	b082      	sub	sp, #8
 800b200:	af00      	add	r7, sp, #0
 800b202:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	2204      	movs	r2, #4
 800b208:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800b20c:	2300      	movs	r3, #0
 800b20e:	2200      	movs	r2, #0
 800b210:	2100      	movs	r1, #0
 800b212:	6878      	ldr	r0, [r7, #4]
 800b214:	f000 fc9f 	bl	800bb56 <USBD_LL_Transmit>

  return USBD_OK;
 800b218:	2300      	movs	r3, #0
}
 800b21a:	4618      	mov	r0, r3
 800b21c:	3708      	adds	r7, #8
 800b21e:	46bd      	mov	sp, r7
 800b220:	bd80      	pop	{r7, pc}

0800b222 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800b222:	b580      	push	{r7, lr}
 800b224:	b082      	sub	sp, #8
 800b226:	af00      	add	r7, sp, #0
 800b228:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	2205      	movs	r2, #5
 800b22e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b232:	2300      	movs	r3, #0
 800b234:	2200      	movs	r2, #0
 800b236:	2100      	movs	r1, #0
 800b238:	6878      	ldr	r0, [r7, #4]
 800b23a:	f000 fcad 	bl	800bb98 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b23e:	2300      	movs	r3, #0
}
 800b240:	4618      	mov	r0, r3
 800b242:	3708      	adds	r7, #8
 800b244:	46bd      	mov	sp, r7
 800b246:	bd80      	pop	{r7, pc}

0800b248 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800b248:	b580      	push	{r7, lr}
 800b24a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceHS, &HS_Desc, DEVICE_HS) != USBD_OK)
 800b24c:	2201      	movs	r2, #1
 800b24e:	4912      	ldr	r1, [pc, #72]	; (800b298 <MX_USB_DEVICE_Init+0x50>)
 800b250:	4812      	ldr	r0, [pc, #72]	; (800b29c <MX_USB_DEVICE_Init+0x54>)
 800b252:	f7fe fd07 	bl	8009c64 <USBD_Init>
 800b256:	4603      	mov	r3, r0
 800b258:	2b00      	cmp	r3, #0
 800b25a:	d001      	beq.n	800b260 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800b25c:	f7f6 fe02 	bl	8001e64 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceHS, &USBD_CDC) != USBD_OK)
 800b260:	490f      	ldr	r1, [pc, #60]	; (800b2a0 <MX_USB_DEVICE_Init+0x58>)
 800b262:	480e      	ldr	r0, [pc, #56]	; (800b29c <MX_USB_DEVICE_Init+0x54>)
 800b264:	f7fe fd2e 	bl	8009cc4 <USBD_RegisterClass>
 800b268:	4603      	mov	r3, r0
 800b26a:	2b00      	cmp	r3, #0
 800b26c:	d001      	beq.n	800b272 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800b26e:	f7f6 fdf9 	bl	8001e64 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceHS, &USBD_Interface_fops_HS) != USBD_OK)
 800b272:	490c      	ldr	r1, [pc, #48]	; (800b2a4 <MX_USB_DEVICE_Init+0x5c>)
 800b274:	4809      	ldr	r0, [pc, #36]	; (800b29c <MX_USB_DEVICE_Init+0x54>)
 800b276:	f7fe fc65 	bl	8009b44 <USBD_CDC_RegisterInterface>
 800b27a:	4603      	mov	r3, r0
 800b27c:	2b00      	cmp	r3, #0
 800b27e:	d001      	beq.n	800b284 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800b280:	f7f6 fdf0 	bl	8001e64 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceHS) != USBD_OK)
 800b284:	4805      	ldr	r0, [pc, #20]	; (800b29c <MX_USB_DEVICE_Init+0x54>)
 800b286:	f7fe fd53 	bl	8009d30 <USBD_Start>
 800b28a:	4603      	mov	r3, r0
 800b28c:	2b00      	cmp	r3, #0
 800b28e:	d001      	beq.n	800b294 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800b290:	f7f6 fde8 	bl	8001e64 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800b294:	bf00      	nop
 800b296:	bd80      	pop	{r7, pc}
 800b298:	200000bc 	.word	0x200000bc
 800b29c:	2000083c 	.word	0x2000083c
 800b2a0:	20000028 	.word	0x20000028
 800b2a4:	200000a8 	.word	0x200000a8

0800b2a8 <CDC_Init_HS>:
/**
  * @brief  Initializes the CDC media low layer over the USB HS IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_HS(void)
{
 800b2a8:	b580      	push	{r7, lr}
 800b2aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, UserTxBufferHS, 0);
 800b2ac:	2200      	movs	r2, #0
 800b2ae:	4905      	ldr	r1, [pc, #20]	; (800b2c4 <CDC_Init_HS+0x1c>)
 800b2b0:	4805      	ldr	r0, [pc, #20]	; (800b2c8 <CDC_Init_HS+0x20>)
 800b2b2:	f7fe fc61 	bl	8009b78 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, UserRxBufferHS);
 800b2b6:	4905      	ldr	r1, [pc, #20]	; (800b2cc <CDC_Init_HS+0x24>)
 800b2b8:	4803      	ldr	r0, [pc, #12]	; (800b2c8 <CDC_Init_HS+0x20>)
 800b2ba:	f7fe fc7f 	bl	8009bbc <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800b2be:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 800b2c0:	4618      	mov	r0, r3
 800b2c2:	bd80      	pop	{r7, pc}
 800b2c4:	20001318 	.word	0x20001318
 800b2c8:	2000083c 	.word	0x2000083c
 800b2cc:	20000b18 	.word	0x20000b18

0800b2d0 <CDC_DeInit_HS>:
  * @brief  DeInitializes the CDC media low layer
  * @param  None
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_HS(void)
{
 800b2d0:	b480      	push	{r7}
 800b2d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 9 */
  return (USBD_OK);
 800b2d4:	2300      	movs	r3, #0
  /* USER CODE END 9 */
}
 800b2d6:	4618      	mov	r0, r3
 800b2d8:	46bd      	mov	sp, r7
 800b2da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2de:	4770      	bx	lr

0800b2e0 <CDC_Control_HS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_HS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800b2e0:	b480      	push	{r7}
 800b2e2:	b083      	sub	sp, #12
 800b2e4:	af00      	add	r7, sp, #0
 800b2e6:	4603      	mov	r3, r0
 800b2e8:	6039      	str	r1, [r7, #0]
 800b2ea:	71fb      	strb	r3, [r7, #7]
 800b2ec:	4613      	mov	r3, r2
 800b2ee:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 10 */
  switch(cmd)
 800b2f0:	79fb      	ldrb	r3, [r7, #7]
 800b2f2:	2b23      	cmp	r3, #35	; 0x23
 800b2f4:	d84a      	bhi.n	800b38c <CDC_Control_HS+0xac>
 800b2f6:	a201      	add	r2, pc, #4	; (adr r2, 800b2fc <CDC_Control_HS+0x1c>)
 800b2f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b2fc:	0800b38d 	.word	0x0800b38d
 800b300:	0800b38d 	.word	0x0800b38d
 800b304:	0800b38d 	.word	0x0800b38d
 800b308:	0800b38d 	.word	0x0800b38d
 800b30c:	0800b38d 	.word	0x0800b38d
 800b310:	0800b38d 	.word	0x0800b38d
 800b314:	0800b38d 	.word	0x0800b38d
 800b318:	0800b38d 	.word	0x0800b38d
 800b31c:	0800b38d 	.word	0x0800b38d
 800b320:	0800b38d 	.word	0x0800b38d
 800b324:	0800b38d 	.word	0x0800b38d
 800b328:	0800b38d 	.word	0x0800b38d
 800b32c:	0800b38d 	.word	0x0800b38d
 800b330:	0800b38d 	.word	0x0800b38d
 800b334:	0800b38d 	.word	0x0800b38d
 800b338:	0800b38d 	.word	0x0800b38d
 800b33c:	0800b38d 	.word	0x0800b38d
 800b340:	0800b38d 	.word	0x0800b38d
 800b344:	0800b38d 	.word	0x0800b38d
 800b348:	0800b38d 	.word	0x0800b38d
 800b34c:	0800b38d 	.word	0x0800b38d
 800b350:	0800b38d 	.word	0x0800b38d
 800b354:	0800b38d 	.word	0x0800b38d
 800b358:	0800b38d 	.word	0x0800b38d
 800b35c:	0800b38d 	.word	0x0800b38d
 800b360:	0800b38d 	.word	0x0800b38d
 800b364:	0800b38d 	.word	0x0800b38d
 800b368:	0800b38d 	.word	0x0800b38d
 800b36c:	0800b38d 	.word	0x0800b38d
 800b370:	0800b38d 	.word	0x0800b38d
 800b374:	0800b38d 	.word	0x0800b38d
 800b378:	0800b38d 	.word	0x0800b38d
 800b37c:	0800b38d 	.word	0x0800b38d
 800b380:	0800b38d 	.word	0x0800b38d
 800b384:	0800b38d 	.word	0x0800b38d
 800b388:	0800b38d 	.word	0x0800b38d
  case CDC_SEND_BREAK:

    break;

  default:
    break;
 800b38c:	bf00      	nop
  }

  return (USBD_OK);
 800b38e:	2300      	movs	r3, #0
  /* USER CODE END 10 */
}
 800b390:	4618      	mov	r0, r3
 800b392:	370c      	adds	r7, #12
 800b394:	46bd      	mov	sp, r7
 800b396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b39a:	4770      	bx	lr

0800b39c <CDC_Receive_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAILL
  */
static int8_t CDC_Receive_HS(uint8_t* Buf, uint32_t *Len)
{
 800b39c:	b580      	push	{r7, lr}
 800b39e:	b082      	sub	sp, #8
 800b3a0:	af00      	add	r7, sp, #0
 800b3a2:	6078      	str	r0, [r7, #4]
 800b3a4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 11 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, &Buf[0]);
 800b3a6:	6879      	ldr	r1, [r7, #4]
 800b3a8:	4818      	ldr	r0, [pc, #96]	; (800b40c <CDC_Receive_HS+0x70>)
 800b3aa:	f7fe fc07 	bl	8009bbc <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceHS);
 800b3ae:	4817      	ldr	r0, [pc, #92]	; (800b40c <CDC_Receive_HS+0x70>)
 800b3b0:	f7fe fc22 	bl	8009bf8 <USBD_CDC_ReceivePacket>
  // Put usb data into usb buffer
  if((RF_transmit_buff_offset + *Len) > sizeof(RF_transmit_buffer)) RF_transmit_buff_offset = 0;
 800b3b4:	4b16      	ldr	r3, [pc, #88]	; (800b410 <CDC_Receive_HS+0x74>)
 800b3b6:	781b      	ldrb	r3, [r3, #0]
 800b3b8:	461a      	mov	r2, r3
 800b3ba:	683b      	ldr	r3, [r7, #0]
 800b3bc:	681b      	ldr	r3, [r3, #0]
 800b3be:	4413      	add	r3, r2
 800b3c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b3c4:	d902      	bls.n	800b3cc <CDC_Receive_HS+0x30>
 800b3c6:	4b12      	ldr	r3, [pc, #72]	; (800b410 <CDC_Receive_HS+0x74>)
 800b3c8:	2200      	movs	r2, #0
 800b3ca:	701a      	strb	r2, [r3, #0]
  memcpy(&RF_transmit_buffer[RF_transmit_buff_offset], Buf, *Len);  // copy the data to the RF_transmit_buffer
 800b3cc:	4b10      	ldr	r3, [pc, #64]	; (800b410 <CDC_Receive_HS+0x74>)
 800b3ce:	781b      	ldrb	r3, [r3, #0]
 800b3d0:	461a      	mov	r2, r3
 800b3d2:	4b10      	ldr	r3, [pc, #64]	; (800b414 <CDC_Receive_HS+0x78>)
 800b3d4:	18d0      	adds	r0, r2, r3
 800b3d6:	683b      	ldr	r3, [r7, #0]
 800b3d8:	681b      	ldr	r3, [r3, #0]
 800b3da:	461a      	mov	r2, r3
 800b3dc:	6879      	ldr	r1, [r7, #4]
 800b3de:	f000 fc7d 	bl	800bcdc <memcpy>
  memset(Buf, '\0', *Len);   // clear the Buf
 800b3e2:	683b      	ldr	r3, [r7, #0]
 800b3e4:	681b      	ldr	r3, [r3, #0]
 800b3e6:	461a      	mov	r2, r3
 800b3e8:	2100      	movs	r1, #0
 800b3ea:	6878      	ldr	r0, [r7, #4]
 800b3ec:	f000 fc84 	bl	800bcf8 <memset>
  RF_transmit_buff_offset += *Len;
 800b3f0:	683b      	ldr	r3, [r7, #0]
 800b3f2:	681b      	ldr	r3, [r3, #0]
 800b3f4:	b2da      	uxtb	r2, r3
 800b3f6:	4b06      	ldr	r3, [pc, #24]	; (800b410 <CDC_Receive_HS+0x74>)
 800b3f8:	781b      	ldrb	r3, [r3, #0]
 800b3fa:	4413      	add	r3, r2
 800b3fc:	b2da      	uxtb	r2, r3
 800b3fe:	4b04      	ldr	r3, [pc, #16]	; (800b410 <CDC_Receive_HS+0x74>)
 800b400:	701a      	strb	r2, [r3, #0]
  return (USBD_OK);
 800b402:	2300      	movs	r3, #0
  /* USER CODE END 11 */
}
 800b404:	4618      	mov	r0, r3
 800b406:	3708      	adds	r7, #8
 800b408:	46bd      	mov	sp, r7
 800b40a:	bd80      	pop	{r7, pc}
 800b40c:	2000083c 	.word	0x2000083c
 800b410:	200007f8 	.word	0x200007f8
 800b414:	200005f8 	.word	0x200005f8

0800b418 <CDC_TransmitCplt_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_HS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800b418:	b480      	push	{r7}
 800b41a:	b087      	sub	sp, #28
 800b41c:	af00      	add	r7, sp, #0
 800b41e:	60f8      	str	r0, [r7, #12]
 800b420:	60b9      	str	r1, [r7, #8]
 800b422:	4613      	mov	r3, r2
 800b424:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800b426:	2300      	movs	r3, #0
 800b428:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 14 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 14 */
  return result;
 800b42a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b42e:	4618      	mov	r0, r3
 800b430:	371c      	adds	r7, #28
 800b432:	46bd      	mov	sp, r7
 800b434:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b438:	4770      	bx	lr
	...

0800b43c <USBD_HS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b43c:	b480      	push	{r7}
 800b43e:	b083      	sub	sp, #12
 800b440:	af00      	add	r7, sp, #0
 800b442:	4603      	mov	r3, r0
 800b444:	6039      	str	r1, [r7, #0]
 800b446:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_HS_DeviceDesc);
 800b448:	683b      	ldr	r3, [r7, #0]
 800b44a:	2212      	movs	r2, #18
 800b44c:	801a      	strh	r2, [r3, #0]
  return USBD_HS_DeviceDesc;
 800b44e:	4b03      	ldr	r3, [pc, #12]	; (800b45c <USBD_HS_DeviceDescriptor+0x20>)
}
 800b450:	4618      	mov	r0, r3
 800b452:	370c      	adds	r7, #12
 800b454:	46bd      	mov	sp, r7
 800b456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b45a:	4770      	bx	lr
 800b45c:	200000d8 	.word	0x200000d8

0800b460 <USBD_HS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b460:	b480      	push	{r7}
 800b462:	b083      	sub	sp, #12
 800b464:	af00      	add	r7, sp, #0
 800b466:	4603      	mov	r3, r0
 800b468:	6039      	str	r1, [r7, #0]
 800b46a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800b46c:	683b      	ldr	r3, [r7, #0]
 800b46e:	2204      	movs	r2, #4
 800b470:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800b472:	4b03      	ldr	r3, [pc, #12]	; (800b480 <USBD_HS_LangIDStrDescriptor+0x20>)
}
 800b474:	4618      	mov	r0, r3
 800b476:	370c      	adds	r7, #12
 800b478:	46bd      	mov	sp, r7
 800b47a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b47e:	4770      	bx	lr
 800b480:	200000ec 	.word	0x200000ec

0800b484 <USBD_HS_ProductStrDescriptor>:
  * @param  speed : current device speed
  * @param  length : pointer to data length variable
  * @retval pointer to descriptor buffer
  */
uint8_t * USBD_HS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b484:	b580      	push	{r7, lr}
 800b486:	b082      	sub	sp, #8
 800b488:	af00      	add	r7, sp, #0
 800b48a:	4603      	mov	r3, r0
 800b48c:	6039      	str	r1, [r7, #0]
 800b48e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b490:	79fb      	ldrb	r3, [r7, #7]
 800b492:	2b00      	cmp	r3, #0
 800b494:	d105      	bne.n	800b4a2 <USBD_HS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 800b496:	683a      	ldr	r2, [r7, #0]
 800b498:	4907      	ldr	r1, [pc, #28]	; (800b4b8 <USBD_HS_ProductStrDescriptor+0x34>)
 800b49a:	4808      	ldr	r0, [pc, #32]	; (800b4bc <USBD_HS_ProductStrDescriptor+0x38>)
 800b49c:	f7ff fdf4 	bl	800b088 <USBD_GetString>
 800b4a0:	e004      	b.n	800b4ac <USBD_HS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 800b4a2:	683a      	ldr	r2, [r7, #0]
 800b4a4:	4904      	ldr	r1, [pc, #16]	; (800b4b8 <USBD_HS_ProductStrDescriptor+0x34>)
 800b4a6:	4805      	ldr	r0, [pc, #20]	; (800b4bc <USBD_HS_ProductStrDescriptor+0x38>)
 800b4a8:	f7ff fdee 	bl	800b088 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b4ac:	4b02      	ldr	r3, [pc, #8]	; (800b4b8 <USBD_HS_ProductStrDescriptor+0x34>)
}
 800b4ae:	4618      	mov	r0, r3
 800b4b0:	3708      	adds	r7, #8
 800b4b2:	46bd      	mov	sp, r7
 800b4b4:	bd80      	pop	{r7, pc}
 800b4b6:	bf00      	nop
 800b4b8:	20001b18 	.word	0x20001b18
 800b4bc:	0800c8ec 	.word	0x0800c8ec

0800b4c0 <USBD_HS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b4c0:	b580      	push	{r7, lr}
 800b4c2:	b082      	sub	sp, #8
 800b4c4:	af00      	add	r7, sp, #0
 800b4c6:	4603      	mov	r3, r0
 800b4c8:	6039      	str	r1, [r7, #0]
 800b4ca:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800b4cc:	683a      	ldr	r2, [r7, #0]
 800b4ce:	4904      	ldr	r1, [pc, #16]	; (800b4e0 <USBD_HS_ManufacturerStrDescriptor+0x20>)
 800b4d0:	4804      	ldr	r0, [pc, #16]	; (800b4e4 <USBD_HS_ManufacturerStrDescriptor+0x24>)
 800b4d2:	f7ff fdd9 	bl	800b088 <USBD_GetString>
  return USBD_StrDesc;
 800b4d6:	4b02      	ldr	r3, [pc, #8]	; (800b4e0 <USBD_HS_ManufacturerStrDescriptor+0x20>)
}
 800b4d8:	4618      	mov	r0, r3
 800b4da:	3708      	adds	r7, #8
 800b4dc:	46bd      	mov	sp, r7
 800b4de:	bd80      	pop	{r7, pc}
 800b4e0:	20001b18 	.word	0x20001b18
 800b4e4:	0800c904 	.word	0x0800c904

0800b4e8 <USBD_HS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b4e8:	b580      	push	{r7, lr}
 800b4ea:	b082      	sub	sp, #8
 800b4ec:	af00      	add	r7, sp, #0
 800b4ee:	4603      	mov	r3, r0
 800b4f0:	6039      	str	r1, [r7, #0]
 800b4f2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800b4f4:	683b      	ldr	r3, [r7, #0]
 800b4f6:	221a      	movs	r2, #26
 800b4f8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800b4fa:	f000 f843 	bl	800b584 <Get_SerialNum>
  /* USER CODE BEGIN USBD_HS_SerialStrDescriptor */

  /* USER CODE END USBD_HS_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 800b4fe:	4b02      	ldr	r3, [pc, #8]	; (800b508 <USBD_HS_SerialStrDescriptor+0x20>)
}
 800b500:	4618      	mov	r0, r3
 800b502:	3708      	adds	r7, #8
 800b504:	46bd      	mov	sp, r7
 800b506:	bd80      	pop	{r7, pc}
 800b508:	200000f0 	.word	0x200000f0

0800b50c <USBD_HS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b50c:	b580      	push	{r7, lr}
 800b50e:	b082      	sub	sp, #8
 800b510:	af00      	add	r7, sp, #0
 800b512:	4603      	mov	r3, r0
 800b514:	6039      	str	r1, [r7, #0]
 800b516:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800b518:	79fb      	ldrb	r3, [r7, #7]
 800b51a:	2b00      	cmp	r3, #0
 800b51c:	d105      	bne.n	800b52a <USBD_HS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 800b51e:	683a      	ldr	r2, [r7, #0]
 800b520:	4907      	ldr	r1, [pc, #28]	; (800b540 <USBD_HS_ConfigStrDescriptor+0x34>)
 800b522:	4808      	ldr	r0, [pc, #32]	; (800b544 <USBD_HS_ConfigStrDescriptor+0x38>)
 800b524:	f7ff fdb0 	bl	800b088 <USBD_GetString>
 800b528:	e004      	b.n	800b534 <USBD_HS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 800b52a:	683a      	ldr	r2, [r7, #0]
 800b52c:	4904      	ldr	r1, [pc, #16]	; (800b540 <USBD_HS_ConfigStrDescriptor+0x34>)
 800b52e:	4805      	ldr	r0, [pc, #20]	; (800b544 <USBD_HS_ConfigStrDescriptor+0x38>)
 800b530:	f7ff fdaa 	bl	800b088 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b534:	4b02      	ldr	r3, [pc, #8]	; (800b540 <USBD_HS_ConfigStrDescriptor+0x34>)
}
 800b536:	4618      	mov	r0, r3
 800b538:	3708      	adds	r7, #8
 800b53a:	46bd      	mov	sp, r7
 800b53c:	bd80      	pop	{r7, pc}
 800b53e:	bf00      	nop
 800b540:	20001b18 	.word	0x20001b18
 800b544:	0800c918 	.word	0x0800c918

0800b548 <USBD_HS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b548:	b580      	push	{r7, lr}
 800b54a:	b082      	sub	sp, #8
 800b54c:	af00      	add	r7, sp, #0
 800b54e:	4603      	mov	r3, r0
 800b550:	6039      	str	r1, [r7, #0]
 800b552:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b554:	79fb      	ldrb	r3, [r7, #7]
 800b556:	2b00      	cmp	r3, #0
 800b558:	d105      	bne.n	800b566 <USBD_HS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 800b55a:	683a      	ldr	r2, [r7, #0]
 800b55c:	4907      	ldr	r1, [pc, #28]	; (800b57c <USBD_HS_InterfaceStrDescriptor+0x34>)
 800b55e:	4808      	ldr	r0, [pc, #32]	; (800b580 <USBD_HS_InterfaceStrDescriptor+0x38>)
 800b560:	f7ff fd92 	bl	800b088 <USBD_GetString>
 800b564:	e004      	b.n	800b570 <USBD_HS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 800b566:	683a      	ldr	r2, [r7, #0]
 800b568:	4904      	ldr	r1, [pc, #16]	; (800b57c <USBD_HS_InterfaceStrDescriptor+0x34>)
 800b56a:	4805      	ldr	r0, [pc, #20]	; (800b580 <USBD_HS_InterfaceStrDescriptor+0x38>)
 800b56c:	f7ff fd8c 	bl	800b088 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b570:	4b02      	ldr	r3, [pc, #8]	; (800b57c <USBD_HS_InterfaceStrDescriptor+0x34>)
}
 800b572:	4618      	mov	r0, r3
 800b574:	3708      	adds	r7, #8
 800b576:	46bd      	mov	sp, r7
 800b578:	bd80      	pop	{r7, pc}
 800b57a:	bf00      	nop
 800b57c:	20001b18 	.word	0x20001b18
 800b580:	0800c924 	.word	0x0800c924

0800b584 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800b584:	b580      	push	{r7, lr}
 800b586:	b084      	sub	sp, #16
 800b588:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800b58a:	4b0f      	ldr	r3, [pc, #60]	; (800b5c8 <Get_SerialNum+0x44>)
 800b58c:	681b      	ldr	r3, [r3, #0]
 800b58e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800b590:	4b0e      	ldr	r3, [pc, #56]	; (800b5cc <Get_SerialNum+0x48>)
 800b592:	681b      	ldr	r3, [r3, #0]
 800b594:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800b596:	4b0e      	ldr	r3, [pc, #56]	; (800b5d0 <Get_SerialNum+0x4c>)
 800b598:	681b      	ldr	r3, [r3, #0]
 800b59a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800b59c:	68fa      	ldr	r2, [r7, #12]
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	4413      	add	r3, r2
 800b5a2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800b5a4:	68fb      	ldr	r3, [r7, #12]
 800b5a6:	2b00      	cmp	r3, #0
 800b5a8:	d009      	beq.n	800b5be <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800b5aa:	2208      	movs	r2, #8
 800b5ac:	4909      	ldr	r1, [pc, #36]	; (800b5d4 <Get_SerialNum+0x50>)
 800b5ae:	68f8      	ldr	r0, [r7, #12]
 800b5b0:	f000 f814 	bl	800b5dc <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800b5b4:	2204      	movs	r2, #4
 800b5b6:	4908      	ldr	r1, [pc, #32]	; (800b5d8 <Get_SerialNum+0x54>)
 800b5b8:	68b8      	ldr	r0, [r7, #8]
 800b5ba:	f000 f80f 	bl	800b5dc <IntToUnicode>
  }
}
 800b5be:	bf00      	nop
 800b5c0:	3710      	adds	r7, #16
 800b5c2:	46bd      	mov	sp, r7
 800b5c4:	bd80      	pop	{r7, pc}
 800b5c6:	bf00      	nop
 800b5c8:	1fff7a10 	.word	0x1fff7a10
 800b5cc:	1fff7a14 	.word	0x1fff7a14
 800b5d0:	1fff7a18 	.word	0x1fff7a18
 800b5d4:	200000f2 	.word	0x200000f2
 800b5d8:	20000102 	.word	0x20000102

0800b5dc <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800b5dc:	b480      	push	{r7}
 800b5de:	b087      	sub	sp, #28
 800b5e0:	af00      	add	r7, sp, #0
 800b5e2:	60f8      	str	r0, [r7, #12]
 800b5e4:	60b9      	str	r1, [r7, #8]
 800b5e6:	4613      	mov	r3, r2
 800b5e8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800b5ea:	2300      	movs	r3, #0
 800b5ec:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800b5ee:	2300      	movs	r3, #0
 800b5f0:	75fb      	strb	r3, [r7, #23]
 800b5f2:	e027      	b.n	800b644 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800b5f4:	68fb      	ldr	r3, [r7, #12]
 800b5f6:	0f1b      	lsrs	r3, r3, #28
 800b5f8:	2b09      	cmp	r3, #9
 800b5fa:	d80b      	bhi.n	800b614 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800b5fc:	68fb      	ldr	r3, [r7, #12]
 800b5fe:	0f1b      	lsrs	r3, r3, #28
 800b600:	b2da      	uxtb	r2, r3
 800b602:	7dfb      	ldrb	r3, [r7, #23]
 800b604:	005b      	lsls	r3, r3, #1
 800b606:	4619      	mov	r1, r3
 800b608:	68bb      	ldr	r3, [r7, #8]
 800b60a:	440b      	add	r3, r1
 800b60c:	3230      	adds	r2, #48	; 0x30
 800b60e:	b2d2      	uxtb	r2, r2
 800b610:	701a      	strb	r2, [r3, #0]
 800b612:	e00a      	b.n	800b62a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800b614:	68fb      	ldr	r3, [r7, #12]
 800b616:	0f1b      	lsrs	r3, r3, #28
 800b618:	b2da      	uxtb	r2, r3
 800b61a:	7dfb      	ldrb	r3, [r7, #23]
 800b61c:	005b      	lsls	r3, r3, #1
 800b61e:	4619      	mov	r1, r3
 800b620:	68bb      	ldr	r3, [r7, #8]
 800b622:	440b      	add	r3, r1
 800b624:	3237      	adds	r2, #55	; 0x37
 800b626:	b2d2      	uxtb	r2, r2
 800b628:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800b62a:	68fb      	ldr	r3, [r7, #12]
 800b62c:	011b      	lsls	r3, r3, #4
 800b62e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800b630:	7dfb      	ldrb	r3, [r7, #23]
 800b632:	005b      	lsls	r3, r3, #1
 800b634:	3301      	adds	r3, #1
 800b636:	68ba      	ldr	r2, [r7, #8]
 800b638:	4413      	add	r3, r2
 800b63a:	2200      	movs	r2, #0
 800b63c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800b63e:	7dfb      	ldrb	r3, [r7, #23]
 800b640:	3301      	adds	r3, #1
 800b642:	75fb      	strb	r3, [r7, #23]
 800b644:	7dfa      	ldrb	r2, [r7, #23]
 800b646:	79fb      	ldrb	r3, [r7, #7]
 800b648:	429a      	cmp	r2, r3
 800b64a:	d3d3      	bcc.n	800b5f4 <IntToUnicode+0x18>
  }
}
 800b64c:	bf00      	nop
 800b64e:	bf00      	nop
 800b650:	371c      	adds	r7, #28
 800b652:	46bd      	mov	sp, r7
 800b654:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b658:	4770      	bx	lr
	...

0800b65c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800b65c:	b580      	push	{r7, lr}
 800b65e:	b08a      	sub	sp, #40	; 0x28
 800b660:	af00      	add	r7, sp, #0
 800b662:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b664:	f107 0314 	add.w	r3, r7, #20
 800b668:	2200      	movs	r2, #0
 800b66a:	601a      	str	r2, [r3, #0]
 800b66c:	605a      	str	r2, [r3, #4]
 800b66e:	609a      	str	r2, [r3, #8]
 800b670:	60da      	str	r2, [r3, #12]
 800b672:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_HS)
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	681b      	ldr	r3, [r3, #0]
 800b678:	4a1d      	ldr	r2, [pc, #116]	; (800b6f0 <HAL_PCD_MspInit+0x94>)
 800b67a:	4293      	cmp	r3, r2
 800b67c:	d134      	bne.n	800b6e8 <HAL_PCD_MspInit+0x8c>
  {
  /* USER CODE BEGIN USB_OTG_HS_MspInit 0 */

  /* USER CODE END USB_OTG_HS_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800b67e:	2300      	movs	r3, #0
 800b680:	613b      	str	r3, [r7, #16]
 800b682:	4b1c      	ldr	r3, [pc, #112]	; (800b6f4 <HAL_PCD_MspInit+0x98>)
 800b684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b686:	4a1b      	ldr	r2, [pc, #108]	; (800b6f4 <HAL_PCD_MspInit+0x98>)
 800b688:	f043 0302 	orr.w	r3, r3, #2
 800b68c:	6313      	str	r3, [r2, #48]	; 0x30
 800b68e:	4b19      	ldr	r3, [pc, #100]	; (800b6f4 <HAL_PCD_MspInit+0x98>)
 800b690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b692:	f003 0302 	and.w	r3, r3, #2
 800b696:	613b      	str	r3, [r7, #16]
 800b698:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_HS GPIO Configuration
    PB14     ------> USB_OTG_HS_DM
    PB15     ------> USB_OTG_HS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 800b69a:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800b69e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b6a0:	2302      	movs	r3, #2
 800b6a2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b6a4:	2300      	movs	r3, #0
 800b6a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b6a8:	2303      	movs	r3, #3
 800b6aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 800b6ac:	230c      	movs	r3, #12
 800b6ae:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800b6b0:	f107 0314 	add.w	r3, r7, #20
 800b6b4:	4619      	mov	r1, r3
 800b6b6:	4810      	ldr	r0, [pc, #64]	; (800b6f8 <HAL_PCD_MspInit+0x9c>)
 800b6b8:	f7f7 fc80 	bl	8002fbc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 800b6bc:	2300      	movs	r3, #0
 800b6be:	60fb      	str	r3, [r7, #12]
 800b6c0:	4b0c      	ldr	r3, [pc, #48]	; (800b6f4 <HAL_PCD_MspInit+0x98>)
 800b6c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b6c4:	4a0b      	ldr	r2, [pc, #44]	; (800b6f4 <HAL_PCD_MspInit+0x98>)
 800b6c6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800b6ca:	6313      	str	r3, [r2, #48]	; 0x30
 800b6cc:	4b09      	ldr	r3, [pc, #36]	; (800b6f4 <HAL_PCD_MspInit+0x98>)
 800b6ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b6d0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b6d4:	60fb      	str	r3, [r7, #12]
 800b6d6:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 1, 0);
 800b6d8:	2200      	movs	r2, #0
 800b6da:	2101      	movs	r1, #1
 800b6dc:	204d      	movs	r0, #77	; 0x4d
 800b6de:	f7f7 f834 	bl	800274a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 800b6e2:	204d      	movs	r0, #77	; 0x4d
 800b6e4:	f7f7 f84d 	bl	8002782 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 800b6e8:	bf00      	nop
 800b6ea:	3728      	adds	r7, #40	; 0x28
 800b6ec:	46bd      	mov	sp, r7
 800b6ee:	bd80      	pop	{r7, pc}
 800b6f0:	40040000 	.word	0x40040000
 800b6f4:	40023800 	.word	0x40023800
 800b6f8:	40020400 	.word	0x40020400

0800b6fc <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b6fc:	b580      	push	{r7, lr}
 800b6fe:	b082      	sub	sp, #8
 800b700:	af00      	add	r7, sp, #0
 800b702:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800b710:	4619      	mov	r1, r3
 800b712:	4610      	mov	r0, r2
 800b714:	f7fe fb59 	bl	8009dca <USBD_LL_SetupStage>
}
 800b718:	bf00      	nop
 800b71a:	3708      	adds	r7, #8
 800b71c:	46bd      	mov	sp, r7
 800b71e:	bd80      	pop	{r7, pc}

0800b720 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b720:	b580      	push	{r7, lr}
 800b722:	b082      	sub	sp, #8
 800b724:	af00      	add	r7, sp, #0
 800b726:	6078      	str	r0, [r7, #4]
 800b728:	460b      	mov	r3, r1
 800b72a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800b732:	78fa      	ldrb	r2, [r7, #3]
 800b734:	6879      	ldr	r1, [r7, #4]
 800b736:	4613      	mov	r3, r2
 800b738:	00db      	lsls	r3, r3, #3
 800b73a:	4413      	add	r3, r2
 800b73c:	009b      	lsls	r3, r3, #2
 800b73e:	440b      	add	r3, r1
 800b740:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800b744:	681a      	ldr	r2, [r3, #0]
 800b746:	78fb      	ldrb	r3, [r7, #3]
 800b748:	4619      	mov	r1, r3
 800b74a:	f7fe fb93 	bl	8009e74 <USBD_LL_DataOutStage>
}
 800b74e:	bf00      	nop
 800b750:	3708      	adds	r7, #8
 800b752:	46bd      	mov	sp, r7
 800b754:	bd80      	pop	{r7, pc}

0800b756 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b756:	b580      	push	{r7, lr}
 800b758:	b082      	sub	sp, #8
 800b75a:	af00      	add	r7, sp, #0
 800b75c:	6078      	str	r0, [r7, #4]
 800b75e:	460b      	mov	r3, r1
 800b760:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800b762:	687b      	ldr	r3, [r7, #4]
 800b764:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800b768:	78fa      	ldrb	r2, [r7, #3]
 800b76a:	6879      	ldr	r1, [r7, #4]
 800b76c:	4613      	mov	r3, r2
 800b76e:	00db      	lsls	r3, r3, #3
 800b770:	4413      	add	r3, r2
 800b772:	009b      	lsls	r3, r3, #2
 800b774:	440b      	add	r3, r1
 800b776:	334c      	adds	r3, #76	; 0x4c
 800b778:	681a      	ldr	r2, [r3, #0]
 800b77a:	78fb      	ldrb	r3, [r7, #3]
 800b77c:	4619      	mov	r1, r3
 800b77e:	f7fe fc2c 	bl	8009fda <USBD_LL_DataInStage>
}
 800b782:	bf00      	nop
 800b784:	3708      	adds	r7, #8
 800b786:	46bd      	mov	sp, r7
 800b788:	bd80      	pop	{r7, pc}

0800b78a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b78a:	b580      	push	{r7, lr}
 800b78c:	b082      	sub	sp, #8
 800b78e:	af00      	add	r7, sp, #0
 800b790:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800b792:	687b      	ldr	r3, [r7, #4]
 800b794:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b798:	4618      	mov	r0, r3
 800b79a:	f7fe fd60 	bl	800a25e <USBD_LL_SOF>
}
 800b79e:	bf00      	nop
 800b7a0:	3708      	adds	r7, #8
 800b7a2:	46bd      	mov	sp, r7
 800b7a4:	bd80      	pop	{r7, pc}

0800b7a6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b7a6:	b580      	push	{r7, lr}
 800b7a8:	b084      	sub	sp, #16
 800b7aa:	af00      	add	r7, sp, #0
 800b7ac:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800b7ae:	2301      	movs	r3, #1
 800b7b0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800b7b2:	687b      	ldr	r3, [r7, #4]
 800b7b4:	68db      	ldr	r3, [r3, #12]
 800b7b6:	2b00      	cmp	r3, #0
 800b7b8:	d102      	bne.n	800b7c0 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800b7ba:	2300      	movs	r3, #0
 800b7bc:	73fb      	strb	r3, [r7, #15]
 800b7be:	e008      	b.n	800b7d2 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	68db      	ldr	r3, [r3, #12]
 800b7c4:	2b02      	cmp	r3, #2
 800b7c6:	d102      	bne.n	800b7ce <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800b7c8:	2301      	movs	r3, #1
 800b7ca:	73fb      	strb	r3, [r7, #15]
 800b7cc:	e001      	b.n	800b7d2 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800b7ce:	f7f6 fb49 	bl	8001e64 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b7d8:	7bfa      	ldrb	r2, [r7, #15]
 800b7da:	4611      	mov	r1, r2
 800b7dc:	4618      	mov	r0, r3
 800b7de:	f7fe fd00 	bl	800a1e2 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800b7e2:	687b      	ldr	r3, [r7, #4]
 800b7e4:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b7e8:	4618      	mov	r0, r3
 800b7ea:	f7fe fca8 	bl	800a13e <USBD_LL_Reset>
}
 800b7ee:	bf00      	nop
 800b7f0:	3710      	adds	r7, #16
 800b7f2:	46bd      	mov	sp, r7
 800b7f4:	bd80      	pop	{r7, pc}
	...

0800b7f8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b7f8:	b580      	push	{r7, lr}
 800b7fa:	b082      	sub	sp, #8
 800b7fc:	af00      	add	r7, sp, #0
 800b7fe:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b806:	4618      	mov	r0, r3
 800b808:	f7fe fcfb 	bl	800a202 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	681b      	ldr	r3, [r3, #0]
 800b810:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800b814:	681b      	ldr	r3, [r3, #0]
 800b816:	687a      	ldr	r2, [r7, #4]
 800b818:	6812      	ldr	r2, [r2, #0]
 800b81a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800b81e:	f043 0301 	orr.w	r3, r3, #1
 800b822:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	6a1b      	ldr	r3, [r3, #32]
 800b828:	2b00      	cmp	r3, #0
 800b82a:	d005      	beq.n	800b838 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b82c:	4b04      	ldr	r3, [pc, #16]	; (800b840 <HAL_PCD_SuspendCallback+0x48>)
 800b82e:	691b      	ldr	r3, [r3, #16]
 800b830:	4a03      	ldr	r2, [pc, #12]	; (800b840 <HAL_PCD_SuspendCallback+0x48>)
 800b832:	f043 0306 	orr.w	r3, r3, #6
 800b836:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800b838:	bf00      	nop
 800b83a:	3708      	adds	r7, #8
 800b83c:	46bd      	mov	sp, r7
 800b83e:	bd80      	pop	{r7, pc}
 800b840:	e000ed00 	.word	0xe000ed00

0800b844 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b844:	b580      	push	{r7, lr}
 800b846:	b082      	sub	sp, #8
 800b848:	af00      	add	r7, sp, #0
 800b84a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b852:	4618      	mov	r0, r3
 800b854:	f7fe fceb 	bl	800a22e <USBD_LL_Resume>
}
 800b858:	bf00      	nop
 800b85a:	3708      	adds	r7, #8
 800b85c:	46bd      	mov	sp, r7
 800b85e:	bd80      	pop	{r7, pc}

0800b860 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b860:	b580      	push	{r7, lr}
 800b862:	b082      	sub	sp, #8
 800b864:	af00      	add	r7, sp, #0
 800b866:	6078      	str	r0, [r7, #4]
 800b868:	460b      	mov	r3, r1
 800b86a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b872:	78fa      	ldrb	r2, [r7, #3]
 800b874:	4611      	mov	r1, r2
 800b876:	4618      	mov	r0, r3
 800b878:	f7fe fd43 	bl	800a302 <USBD_LL_IsoOUTIncomplete>
}
 800b87c:	bf00      	nop
 800b87e:	3708      	adds	r7, #8
 800b880:	46bd      	mov	sp, r7
 800b882:	bd80      	pop	{r7, pc}

0800b884 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b884:	b580      	push	{r7, lr}
 800b886:	b082      	sub	sp, #8
 800b888:	af00      	add	r7, sp, #0
 800b88a:	6078      	str	r0, [r7, #4]
 800b88c:	460b      	mov	r3, r1
 800b88e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b896:	78fa      	ldrb	r2, [r7, #3]
 800b898:	4611      	mov	r1, r2
 800b89a:	4618      	mov	r0, r3
 800b89c:	f7fe fcff 	bl	800a29e <USBD_LL_IsoINIncomplete>
}
 800b8a0:	bf00      	nop
 800b8a2:	3708      	adds	r7, #8
 800b8a4:	46bd      	mov	sp, r7
 800b8a6:	bd80      	pop	{r7, pc}

0800b8a8 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b8a8:	b580      	push	{r7, lr}
 800b8aa:	b082      	sub	sp, #8
 800b8ac:	af00      	add	r7, sp, #0
 800b8ae:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b8b6:	4618      	mov	r0, r3
 800b8b8:	f7fe fd55 	bl	800a366 <USBD_LL_DevConnected>
}
 800b8bc:	bf00      	nop
 800b8be:	3708      	adds	r7, #8
 800b8c0:	46bd      	mov	sp, r7
 800b8c2:	bd80      	pop	{r7, pc}

0800b8c4 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b8c4:	b580      	push	{r7, lr}
 800b8c6:	b082      	sub	sp, #8
 800b8c8:	af00      	add	r7, sp, #0
 800b8ca:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b8d2:	4618      	mov	r0, r3
 800b8d4:	f7fe fd52 	bl	800a37c <USBD_LL_DevDisconnected>
}
 800b8d8:	bf00      	nop
 800b8da:	3708      	adds	r7, #8
 800b8dc:	46bd      	mov	sp, r7
 800b8de:	bd80      	pop	{r7, pc}

0800b8e0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800b8e0:	b580      	push	{r7, lr}
 800b8e2:	b082      	sub	sp, #8
 800b8e4:	af00      	add	r7, sp, #0
 800b8e6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_HS) {
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	781b      	ldrb	r3, [r3, #0]
 800b8ec:	2b01      	cmp	r3, #1
 800b8ee:	d140      	bne.n	800b972 <USBD_LL_Init+0x92>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_HS.pData = pdev;
 800b8f0:	4a22      	ldr	r2, [pc, #136]	; (800b97c <USBD_LL_Init+0x9c>)
 800b8f2:	687b      	ldr	r3, [r7, #4]
 800b8f4:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_HS;
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	4a20      	ldr	r2, [pc, #128]	; (800b97c <USBD_LL_Init+0x9c>)
 800b8fc:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 800b900:	4b1e      	ldr	r3, [pc, #120]	; (800b97c <USBD_LL_Init+0x9c>)
 800b902:	4a1f      	ldr	r2, [pc, #124]	; (800b980 <USBD_LL_Init+0xa0>)
 800b904:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_HS.Init.dev_endpoints = 6;
 800b906:	4b1d      	ldr	r3, [pc, #116]	; (800b97c <USBD_LL_Init+0x9c>)
 800b908:	2206      	movs	r2, #6
 800b90a:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_FULL;
 800b90c:	4b1b      	ldr	r3, [pc, #108]	; (800b97c <USBD_LL_Init+0x9c>)
 800b90e:	2202      	movs	r2, #2
 800b910:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 800b912:	4b1a      	ldr	r3, [pc, #104]	; (800b97c <USBD_LL_Init+0x9c>)
 800b914:	2200      	movs	r2, #0
 800b916:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 800b918:	4b18      	ldr	r3, [pc, #96]	; (800b97c <USBD_LL_Init+0x9c>)
 800b91a:	2202      	movs	r2, #2
 800b91c:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 800b91e:	4b17      	ldr	r3, [pc, #92]	; (800b97c <USBD_LL_Init+0x9c>)
 800b920:	2200      	movs	r2, #0
 800b922:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 800b924:	4b15      	ldr	r3, [pc, #84]	; (800b97c <USBD_LL_Init+0x9c>)
 800b926:	2200      	movs	r2, #0
 800b928:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 800b92a:	4b14      	ldr	r3, [pc, #80]	; (800b97c <USBD_LL_Init+0x9c>)
 800b92c:	2200      	movs	r2, #0
 800b92e:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 800b930:	4b12      	ldr	r3, [pc, #72]	; (800b97c <USBD_LL_Init+0x9c>)
 800b932:	2200      	movs	r2, #0
 800b934:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 800b936:	4b11      	ldr	r3, [pc, #68]	; (800b97c <USBD_LL_Init+0x9c>)
 800b938:	2200      	movs	r2, #0
 800b93a:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 800b93c:	4b0f      	ldr	r3, [pc, #60]	; (800b97c <USBD_LL_Init+0x9c>)
 800b93e:	2200      	movs	r2, #0
 800b940:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 800b942:	480e      	ldr	r0, [pc, #56]	; (800b97c <USBD_LL_Init+0x9c>)
 800b944:	f7f7 fd08 	bl	8003358 <HAL_PCD_Init>
 800b948:	4603      	mov	r3, r0
 800b94a:	2b00      	cmp	r3, #0
 800b94c:	d001      	beq.n	800b952 <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 800b94e:	f7f6 fa89 	bl	8001e64 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_HS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_HS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_HS, 0x200);
 800b952:	f44f 7100 	mov.w	r1, #512	; 0x200
 800b956:	4809      	ldr	r0, [pc, #36]	; (800b97c <USBD_LL_Init+0x9c>)
 800b958:	f7f8 ff5f 	bl	800481a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 0, 0x80);
 800b95c:	2280      	movs	r2, #128	; 0x80
 800b95e:	2100      	movs	r1, #0
 800b960:	4806      	ldr	r0, [pc, #24]	; (800b97c <USBD_LL_Init+0x9c>)
 800b962:	f7f8 ff13 	bl	800478c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 1, 0x174);
 800b966:	f44f 72ba 	mov.w	r2, #372	; 0x174
 800b96a:	2101      	movs	r1, #1
 800b96c:	4803      	ldr	r0, [pc, #12]	; (800b97c <USBD_LL_Init+0x9c>)
 800b96e:	f7f8 ff0d 	bl	800478c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800b972:	2300      	movs	r3, #0
}
 800b974:	4618      	mov	r0, r3
 800b976:	3708      	adds	r7, #8
 800b978:	46bd      	mov	sp, r7
 800b97a:	bd80      	pop	{r7, pc}
 800b97c:	20001d18 	.word	0x20001d18
 800b980:	40040000 	.word	0x40040000

0800b984 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800b984:	b580      	push	{r7, lr}
 800b986:	b084      	sub	sp, #16
 800b988:	af00      	add	r7, sp, #0
 800b98a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b98c:	2300      	movs	r3, #0
 800b98e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b990:	2300      	movs	r3, #0
 800b992:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b99a:	4618      	mov	r0, r3
 800b99c:	f7f7 fdf9 	bl	8003592 <HAL_PCD_Start>
 800b9a0:	4603      	mov	r3, r0
 800b9a2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b9a4:	7bfb      	ldrb	r3, [r7, #15]
 800b9a6:	4618      	mov	r0, r3
 800b9a8:	f000 f942 	bl	800bc30 <USBD_Get_USB_Status>
 800b9ac:	4603      	mov	r3, r0
 800b9ae:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b9b0:	7bbb      	ldrb	r3, [r7, #14]
}
 800b9b2:	4618      	mov	r0, r3
 800b9b4:	3710      	adds	r7, #16
 800b9b6:	46bd      	mov	sp, r7
 800b9b8:	bd80      	pop	{r7, pc}

0800b9ba <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800b9ba:	b580      	push	{r7, lr}
 800b9bc:	b084      	sub	sp, #16
 800b9be:	af00      	add	r7, sp, #0
 800b9c0:	6078      	str	r0, [r7, #4]
 800b9c2:	4608      	mov	r0, r1
 800b9c4:	4611      	mov	r1, r2
 800b9c6:	461a      	mov	r2, r3
 800b9c8:	4603      	mov	r3, r0
 800b9ca:	70fb      	strb	r3, [r7, #3]
 800b9cc:	460b      	mov	r3, r1
 800b9ce:	70bb      	strb	r3, [r7, #2]
 800b9d0:	4613      	mov	r3, r2
 800b9d2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b9d4:	2300      	movs	r3, #0
 800b9d6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b9d8:	2300      	movs	r3, #0
 800b9da:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800b9e2:	78bb      	ldrb	r3, [r7, #2]
 800b9e4:	883a      	ldrh	r2, [r7, #0]
 800b9e6:	78f9      	ldrb	r1, [r7, #3]
 800b9e8:	f7f8 faca 	bl	8003f80 <HAL_PCD_EP_Open>
 800b9ec:	4603      	mov	r3, r0
 800b9ee:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b9f0:	7bfb      	ldrb	r3, [r7, #15]
 800b9f2:	4618      	mov	r0, r3
 800b9f4:	f000 f91c 	bl	800bc30 <USBD_Get_USB_Status>
 800b9f8:	4603      	mov	r3, r0
 800b9fa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b9fc:	7bbb      	ldrb	r3, [r7, #14]
}
 800b9fe:	4618      	mov	r0, r3
 800ba00:	3710      	adds	r7, #16
 800ba02:	46bd      	mov	sp, r7
 800ba04:	bd80      	pop	{r7, pc}

0800ba06 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ba06:	b580      	push	{r7, lr}
 800ba08:	b084      	sub	sp, #16
 800ba0a:	af00      	add	r7, sp, #0
 800ba0c:	6078      	str	r0, [r7, #4]
 800ba0e:	460b      	mov	r3, r1
 800ba10:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ba12:	2300      	movs	r3, #0
 800ba14:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ba16:	2300      	movs	r3, #0
 800ba18:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800ba1a:	687b      	ldr	r3, [r7, #4]
 800ba1c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800ba20:	78fa      	ldrb	r2, [r7, #3]
 800ba22:	4611      	mov	r1, r2
 800ba24:	4618      	mov	r0, r3
 800ba26:	f7f8 fb13 	bl	8004050 <HAL_PCD_EP_Close>
 800ba2a:	4603      	mov	r3, r0
 800ba2c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ba2e:	7bfb      	ldrb	r3, [r7, #15]
 800ba30:	4618      	mov	r0, r3
 800ba32:	f000 f8fd 	bl	800bc30 <USBD_Get_USB_Status>
 800ba36:	4603      	mov	r3, r0
 800ba38:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ba3a:	7bbb      	ldrb	r3, [r7, #14]
}
 800ba3c:	4618      	mov	r0, r3
 800ba3e:	3710      	adds	r7, #16
 800ba40:	46bd      	mov	sp, r7
 800ba42:	bd80      	pop	{r7, pc}

0800ba44 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ba44:	b580      	push	{r7, lr}
 800ba46:	b084      	sub	sp, #16
 800ba48:	af00      	add	r7, sp, #0
 800ba4a:	6078      	str	r0, [r7, #4]
 800ba4c:	460b      	mov	r3, r1
 800ba4e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ba50:	2300      	movs	r3, #0
 800ba52:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ba54:	2300      	movs	r3, #0
 800ba56:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800ba5e:	78fa      	ldrb	r2, [r7, #3]
 800ba60:	4611      	mov	r1, r2
 800ba62:	4618      	mov	r0, r3
 800ba64:	f7f8 fbeb 	bl	800423e <HAL_PCD_EP_SetStall>
 800ba68:	4603      	mov	r3, r0
 800ba6a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ba6c:	7bfb      	ldrb	r3, [r7, #15]
 800ba6e:	4618      	mov	r0, r3
 800ba70:	f000 f8de 	bl	800bc30 <USBD_Get_USB_Status>
 800ba74:	4603      	mov	r3, r0
 800ba76:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ba78:	7bbb      	ldrb	r3, [r7, #14]
}
 800ba7a:	4618      	mov	r0, r3
 800ba7c:	3710      	adds	r7, #16
 800ba7e:	46bd      	mov	sp, r7
 800ba80:	bd80      	pop	{r7, pc}

0800ba82 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ba82:	b580      	push	{r7, lr}
 800ba84:	b084      	sub	sp, #16
 800ba86:	af00      	add	r7, sp, #0
 800ba88:	6078      	str	r0, [r7, #4]
 800ba8a:	460b      	mov	r3, r1
 800ba8c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ba8e:	2300      	movs	r3, #0
 800ba90:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ba92:	2300      	movs	r3, #0
 800ba94:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800ba96:	687b      	ldr	r3, [r7, #4]
 800ba98:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800ba9c:	78fa      	ldrb	r2, [r7, #3]
 800ba9e:	4611      	mov	r1, r2
 800baa0:	4618      	mov	r0, r3
 800baa2:	f7f8 fc30 	bl	8004306 <HAL_PCD_EP_ClrStall>
 800baa6:	4603      	mov	r3, r0
 800baa8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800baaa:	7bfb      	ldrb	r3, [r7, #15]
 800baac:	4618      	mov	r0, r3
 800baae:	f000 f8bf 	bl	800bc30 <USBD_Get_USB_Status>
 800bab2:	4603      	mov	r3, r0
 800bab4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bab6:	7bbb      	ldrb	r3, [r7, #14]
}
 800bab8:	4618      	mov	r0, r3
 800baba:	3710      	adds	r7, #16
 800babc:	46bd      	mov	sp, r7
 800babe:	bd80      	pop	{r7, pc}

0800bac0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bac0:	b480      	push	{r7}
 800bac2:	b085      	sub	sp, #20
 800bac4:	af00      	add	r7, sp, #0
 800bac6:	6078      	str	r0, [r7, #4]
 800bac8:	460b      	mov	r3, r1
 800baca:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800bacc:	687b      	ldr	r3, [r7, #4]
 800bace:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800bad2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800bad4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800bad8:	2b00      	cmp	r3, #0
 800bada:	da0b      	bge.n	800baf4 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800badc:	78fb      	ldrb	r3, [r7, #3]
 800bade:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800bae2:	68f9      	ldr	r1, [r7, #12]
 800bae4:	4613      	mov	r3, r2
 800bae6:	00db      	lsls	r3, r3, #3
 800bae8:	4413      	add	r3, r2
 800baea:	009b      	lsls	r3, r3, #2
 800baec:	440b      	add	r3, r1
 800baee:	333e      	adds	r3, #62	; 0x3e
 800baf0:	781b      	ldrb	r3, [r3, #0]
 800baf2:	e00b      	b.n	800bb0c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800baf4:	78fb      	ldrb	r3, [r7, #3]
 800baf6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800bafa:	68f9      	ldr	r1, [r7, #12]
 800bafc:	4613      	mov	r3, r2
 800bafe:	00db      	lsls	r3, r3, #3
 800bb00:	4413      	add	r3, r2
 800bb02:	009b      	lsls	r3, r3, #2
 800bb04:	440b      	add	r3, r1
 800bb06:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800bb0a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800bb0c:	4618      	mov	r0, r3
 800bb0e:	3714      	adds	r7, #20
 800bb10:	46bd      	mov	sp, r7
 800bb12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb16:	4770      	bx	lr

0800bb18 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800bb18:	b580      	push	{r7, lr}
 800bb1a:	b084      	sub	sp, #16
 800bb1c:	af00      	add	r7, sp, #0
 800bb1e:	6078      	str	r0, [r7, #4]
 800bb20:	460b      	mov	r3, r1
 800bb22:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bb24:	2300      	movs	r3, #0
 800bb26:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bb28:	2300      	movs	r3, #0
 800bb2a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800bb32:	78fa      	ldrb	r2, [r7, #3]
 800bb34:	4611      	mov	r1, r2
 800bb36:	4618      	mov	r0, r3
 800bb38:	f7f8 f9fd 	bl	8003f36 <HAL_PCD_SetAddress>
 800bb3c:	4603      	mov	r3, r0
 800bb3e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bb40:	7bfb      	ldrb	r3, [r7, #15]
 800bb42:	4618      	mov	r0, r3
 800bb44:	f000 f874 	bl	800bc30 <USBD_Get_USB_Status>
 800bb48:	4603      	mov	r3, r0
 800bb4a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bb4c:	7bbb      	ldrb	r3, [r7, #14]
}
 800bb4e:	4618      	mov	r0, r3
 800bb50:	3710      	adds	r7, #16
 800bb52:	46bd      	mov	sp, r7
 800bb54:	bd80      	pop	{r7, pc}

0800bb56 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800bb56:	b580      	push	{r7, lr}
 800bb58:	b086      	sub	sp, #24
 800bb5a:	af00      	add	r7, sp, #0
 800bb5c:	60f8      	str	r0, [r7, #12]
 800bb5e:	607a      	str	r2, [r7, #4]
 800bb60:	603b      	str	r3, [r7, #0]
 800bb62:	460b      	mov	r3, r1
 800bb64:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bb66:	2300      	movs	r3, #0
 800bb68:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bb6a:	2300      	movs	r3, #0
 800bb6c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800bb6e:	68fb      	ldr	r3, [r7, #12]
 800bb70:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800bb74:	7af9      	ldrb	r1, [r7, #11]
 800bb76:	683b      	ldr	r3, [r7, #0]
 800bb78:	687a      	ldr	r2, [r7, #4]
 800bb7a:	f7f8 fb16 	bl	80041aa <HAL_PCD_EP_Transmit>
 800bb7e:	4603      	mov	r3, r0
 800bb80:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bb82:	7dfb      	ldrb	r3, [r7, #23]
 800bb84:	4618      	mov	r0, r3
 800bb86:	f000 f853 	bl	800bc30 <USBD_Get_USB_Status>
 800bb8a:	4603      	mov	r3, r0
 800bb8c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800bb8e:	7dbb      	ldrb	r3, [r7, #22]
}
 800bb90:	4618      	mov	r0, r3
 800bb92:	3718      	adds	r7, #24
 800bb94:	46bd      	mov	sp, r7
 800bb96:	bd80      	pop	{r7, pc}

0800bb98 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800bb98:	b580      	push	{r7, lr}
 800bb9a:	b086      	sub	sp, #24
 800bb9c:	af00      	add	r7, sp, #0
 800bb9e:	60f8      	str	r0, [r7, #12]
 800bba0:	607a      	str	r2, [r7, #4]
 800bba2:	603b      	str	r3, [r7, #0]
 800bba4:	460b      	mov	r3, r1
 800bba6:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bba8:	2300      	movs	r3, #0
 800bbaa:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bbac:	2300      	movs	r3, #0
 800bbae:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800bbb0:	68fb      	ldr	r3, [r7, #12]
 800bbb2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800bbb6:	7af9      	ldrb	r1, [r7, #11]
 800bbb8:	683b      	ldr	r3, [r7, #0]
 800bbba:	687a      	ldr	r2, [r7, #4]
 800bbbc:	f7f8 fa92 	bl	80040e4 <HAL_PCD_EP_Receive>
 800bbc0:	4603      	mov	r3, r0
 800bbc2:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bbc4:	7dfb      	ldrb	r3, [r7, #23]
 800bbc6:	4618      	mov	r0, r3
 800bbc8:	f000 f832 	bl	800bc30 <USBD_Get_USB_Status>
 800bbcc:	4603      	mov	r3, r0
 800bbce:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800bbd0:	7dbb      	ldrb	r3, [r7, #22]
}
 800bbd2:	4618      	mov	r0, r3
 800bbd4:	3718      	adds	r7, #24
 800bbd6:	46bd      	mov	sp, r7
 800bbd8:	bd80      	pop	{r7, pc}

0800bbda <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bbda:	b580      	push	{r7, lr}
 800bbdc:	b082      	sub	sp, #8
 800bbde:	af00      	add	r7, sp, #0
 800bbe0:	6078      	str	r0, [r7, #4]
 800bbe2:	460b      	mov	r3, r1
 800bbe4:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800bbec:	78fa      	ldrb	r2, [r7, #3]
 800bbee:	4611      	mov	r1, r2
 800bbf0:	4618      	mov	r0, r3
 800bbf2:	f7f8 fac2 	bl	800417a <HAL_PCD_EP_GetRxCount>
 800bbf6:	4603      	mov	r3, r0
}
 800bbf8:	4618      	mov	r0, r3
 800bbfa:	3708      	adds	r7, #8
 800bbfc:	46bd      	mov	sp, r7
 800bbfe:	bd80      	pop	{r7, pc}

0800bc00 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800bc00:	b480      	push	{r7}
 800bc02:	b083      	sub	sp, #12
 800bc04:	af00      	add	r7, sp, #0
 800bc06:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800bc08:	4b03      	ldr	r3, [pc, #12]	; (800bc18 <USBD_static_malloc+0x18>)
}
 800bc0a:	4618      	mov	r0, r3
 800bc0c:	370c      	adds	r7, #12
 800bc0e:	46bd      	mov	sp, r7
 800bc10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc14:	4770      	bx	lr
 800bc16:	bf00      	nop
 800bc18:	20002224 	.word	0x20002224

0800bc1c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800bc1c:	b480      	push	{r7}
 800bc1e:	b083      	sub	sp, #12
 800bc20:	af00      	add	r7, sp, #0
 800bc22:	6078      	str	r0, [r7, #4]

}
 800bc24:	bf00      	nop
 800bc26:	370c      	adds	r7, #12
 800bc28:	46bd      	mov	sp, r7
 800bc2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc2e:	4770      	bx	lr

0800bc30 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800bc30:	b480      	push	{r7}
 800bc32:	b085      	sub	sp, #20
 800bc34:	af00      	add	r7, sp, #0
 800bc36:	4603      	mov	r3, r0
 800bc38:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bc3a:	2300      	movs	r3, #0
 800bc3c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800bc3e:	79fb      	ldrb	r3, [r7, #7]
 800bc40:	2b03      	cmp	r3, #3
 800bc42:	d817      	bhi.n	800bc74 <USBD_Get_USB_Status+0x44>
 800bc44:	a201      	add	r2, pc, #4	; (adr r2, 800bc4c <USBD_Get_USB_Status+0x1c>)
 800bc46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc4a:	bf00      	nop
 800bc4c:	0800bc5d 	.word	0x0800bc5d
 800bc50:	0800bc63 	.word	0x0800bc63
 800bc54:	0800bc69 	.word	0x0800bc69
 800bc58:	0800bc6f 	.word	0x0800bc6f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800bc5c:	2300      	movs	r3, #0
 800bc5e:	73fb      	strb	r3, [r7, #15]
    break;
 800bc60:	e00b      	b.n	800bc7a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800bc62:	2303      	movs	r3, #3
 800bc64:	73fb      	strb	r3, [r7, #15]
    break;
 800bc66:	e008      	b.n	800bc7a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800bc68:	2301      	movs	r3, #1
 800bc6a:	73fb      	strb	r3, [r7, #15]
    break;
 800bc6c:	e005      	b.n	800bc7a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800bc6e:	2303      	movs	r3, #3
 800bc70:	73fb      	strb	r3, [r7, #15]
    break;
 800bc72:	e002      	b.n	800bc7a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800bc74:	2303      	movs	r3, #3
 800bc76:	73fb      	strb	r3, [r7, #15]
    break;
 800bc78:	bf00      	nop
  }
  return usb_status;
 800bc7a:	7bfb      	ldrb	r3, [r7, #15]
}
 800bc7c:	4618      	mov	r0, r3
 800bc7e:	3714      	adds	r7, #20
 800bc80:	46bd      	mov	sp, r7
 800bc82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc86:	4770      	bx	lr

0800bc88 <__errno>:
 800bc88:	4b01      	ldr	r3, [pc, #4]	; (800bc90 <__errno+0x8>)
 800bc8a:	6818      	ldr	r0, [r3, #0]
 800bc8c:	4770      	bx	lr
 800bc8e:	bf00      	nop
 800bc90:	2000010c 	.word	0x2000010c

0800bc94 <__libc_init_array>:
 800bc94:	b570      	push	{r4, r5, r6, lr}
 800bc96:	4d0d      	ldr	r5, [pc, #52]	; (800bccc <__libc_init_array+0x38>)
 800bc98:	4c0d      	ldr	r4, [pc, #52]	; (800bcd0 <__libc_init_array+0x3c>)
 800bc9a:	1b64      	subs	r4, r4, r5
 800bc9c:	10a4      	asrs	r4, r4, #2
 800bc9e:	2600      	movs	r6, #0
 800bca0:	42a6      	cmp	r6, r4
 800bca2:	d109      	bne.n	800bcb8 <__libc_init_array+0x24>
 800bca4:	4d0b      	ldr	r5, [pc, #44]	; (800bcd4 <__libc_init_array+0x40>)
 800bca6:	4c0c      	ldr	r4, [pc, #48]	; (800bcd8 <__libc_init_array+0x44>)
 800bca8:	f000 fdfa 	bl	800c8a0 <_init>
 800bcac:	1b64      	subs	r4, r4, r5
 800bcae:	10a4      	asrs	r4, r4, #2
 800bcb0:	2600      	movs	r6, #0
 800bcb2:	42a6      	cmp	r6, r4
 800bcb4:	d105      	bne.n	800bcc2 <__libc_init_array+0x2e>
 800bcb6:	bd70      	pop	{r4, r5, r6, pc}
 800bcb8:	f855 3b04 	ldr.w	r3, [r5], #4
 800bcbc:	4798      	blx	r3
 800bcbe:	3601      	adds	r6, #1
 800bcc0:	e7ee      	b.n	800bca0 <__libc_init_array+0xc>
 800bcc2:	f855 3b04 	ldr.w	r3, [r5], #4
 800bcc6:	4798      	blx	r3
 800bcc8:	3601      	adds	r6, #1
 800bcca:	e7f2      	b.n	800bcb2 <__libc_init_array+0x1e>
 800bccc:	0800c9c0 	.word	0x0800c9c0
 800bcd0:	0800c9c0 	.word	0x0800c9c0
 800bcd4:	0800c9c0 	.word	0x0800c9c0
 800bcd8:	0800c9c4 	.word	0x0800c9c4

0800bcdc <memcpy>:
 800bcdc:	440a      	add	r2, r1
 800bcde:	4291      	cmp	r1, r2
 800bce0:	f100 33ff 	add.w	r3, r0, #4294967295
 800bce4:	d100      	bne.n	800bce8 <memcpy+0xc>
 800bce6:	4770      	bx	lr
 800bce8:	b510      	push	{r4, lr}
 800bcea:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bcee:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bcf2:	4291      	cmp	r1, r2
 800bcf4:	d1f9      	bne.n	800bcea <memcpy+0xe>
 800bcf6:	bd10      	pop	{r4, pc}

0800bcf8 <memset>:
 800bcf8:	4402      	add	r2, r0
 800bcfa:	4603      	mov	r3, r0
 800bcfc:	4293      	cmp	r3, r2
 800bcfe:	d100      	bne.n	800bd02 <memset+0xa>
 800bd00:	4770      	bx	lr
 800bd02:	f803 1b01 	strb.w	r1, [r3], #1
 800bd06:	e7f9      	b.n	800bcfc <memset+0x4>

0800bd08 <_puts_r>:
 800bd08:	b570      	push	{r4, r5, r6, lr}
 800bd0a:	460e      	mov	r6, r1
 800bd0c:	4605      	mov	r5, r0
 800bd0e:	b118      	cbz	r0, 800bd18 <_puts_r+0x10>
 800bd10:	6983      	ldr	r3, [r0, #24]
 800bd12:	b90b      	cbnz	r3, 800bd18 <_puts_r+0x10>
 800bd14:	f000 fb0e 	bl	800c334 <__sinit>
 800bd18:	69ab      	ldr	r3, [r5, #24]
 800bd1a:	68ac      	ldr	r4, [r5, #8]
 800bd1c:	b913      	cbnz	r3, 800bd24 <_puts_r+0x1c>
 800bd1e:	4628      	mov	r0, r5
 800bd20:	f000 fb08 	bl	800c334 <__sinit>
 800bd24:	4b2c      	ldr	r3, [pc, #176]	; (800bdd8 <_puts_r+0xd0>)
 800bd26:	429c      	cmp	r4, r3
 800bd28:	d120      	bne.n	800bd6c <_puts_r+0x64>
 800bd2a:	686c      	ldr	r4, [r5, #4]
 800bd2c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800bd2e:	07db      	lsls	r3, r3, #31
 800bd30:	d405      	bmi.n	800bd3e <_puts_r+0x36>
 800bd32:	89a3      	ldrh	r3, [r4, #12]
 800bd34:	0598      	lsls	r0, r3, #22
 800bd36:	d402      	bmi.n	800bd3e <_puts_r+0x36>
 800bd38:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bd3a:	f000 fb99 	bl	800c470 <__retarget_lock_acquire_recursive>
 800bd3e:	89a3      	ldrh	r3, [r4, #12]
 800bd40:	0719      	lsls	r1, r3, #28
 800bd42:	d51d      	bpl.n	800bd80 <_puts_r+0x78>
 800bd44:	6923      	ldr	r3, [r4, #16]
 800bd46:	b1db      	cbz	r3, 800bd80 <_puts_r+0x78>
 800bd48:	3e01      	subs	r6, #1
 800bd4a:	68a3      	ldr	r3, [r4, #8]
 800bd4c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800bd50:	3b01      	subs	r3, #1
 800bd52:	60a3      	str	r3, [r4, #8]
 800bd54:	bb39      	cbnz	r1, 800bda6 <_puts_r+0x9e>
 800bd56:	2b00      	cmp	r3, #0
 800bd58:	da38      	bge.n	800bdcc <_puts_r+0xc4>
 800bd5a:	4622      	mov	r2, r4
 800bd5c:	210a      	movs	r1, #10
 800bd5e:	4628      	mov	r0, r5
 800bd60:	f000 f90e 	bl	800bf80 <__swbuf_r>
 800bd64:	3001      	adds	r0, #1
 800bd66:	d011      	beq.n	800bd8c <_puts_r+0x84>
 800bd68:	250a      	movs	r5, #10
 800bd6a:	e011      	b.n	800bd90 <_puts_r+0x88>
 800bd6c:	4b1b      	ldr	r3, [pc, #108]	; (800bddc <_puts_r+0xd4>)
 800bd6e:	429c      	cmp	r4, r3
 800bd70:	d101      	bne.n	800bd76 <_puts_r+0x6e>
 800bd72:	68ac      	ldr	r4, [r5, #8]
 800bd74:	e7da      	b.n	800bd2c <_puts_r+0x24>
 800bd76:	4b1a      	ldr	r3, [pc, #104]	; (800bde0 <_puts_r+0xd8>)
 800bd78:	429c      	cmp	r4, r3
 800bd7a:	bf08      	it	eq
 800bd7c:	68ec      	ldreq	r4, [r5, #12]
 800bd7e:	e7d5      	b.n	800bd2c <_puts_r+0x24>
 800bd80:	4621      	mov	r1, r4
 800bd82:	4628      	mov	r0, r5
 800bd84:	f000 f94e 	bl	800c024 <__swsetup_r>
 800bd88:	2800      	cmp	r0, #0
 800bd8a:	d0dd      	beq.n	800bd48 <_puts_r+0x40>
 800bd8c:	f04f 35ff 	mov.w	r5, #4294967295
 800bd90:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800bd92:	07da      	lsls	r2, r3, #31
 800bd94:	d405      	bmi.n	800bda2 <_puts_r+0x9a>
 800bd96:	89a3      	ldrh	r3, [r4, #12]
 800bd98:	059b      	lsls	r3, r3, #22
 800bd9a:	d402      	bmi.n	800bda2 <_puts_r+0x9a>
 800bd9c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bd9e:	f000 fb68 	bl	800c472 <__retarget_lock_release_recursive>
 800bda2:	4628      	mov	r0, r5
 800bda4:	bd70      	pop	{r4, r5, r6, pc}
 800bda6:	2b00      	cmp	r3, #0
 800bda8:	da04      	bge.n	800bdb4 <_puts_r+0xac>
 800bdaa:	69a2      	ldr	r2, [r4, #24]
 800bdac:	429a      	cmp	r2, r3
 800bdae:	dc06      	bgt.n	800bdbe <_puts_r+0xb6>
 800bdb0:	290a      	cmp	r1, #10
 800bdb2:	d004      	beq.n	800bdbe <_puts_r+0xb6>
 800bdb4:	6823      	ldr	r3, [r4, #0]
 800bdb6:	1c5a      	adds	r2, r3, #1
 800bdb8:	6022      	str	r2, [r4, #0]
 800bdba:	7019      	strb	r1, [r3, #0]
 800bdbc:	e7c5      	b.n	800bd4a <_puts_r+0x42>
 800bdbe:	4622      	mov	r2, r4
 800bdc0:	4628      	mov	r0, r5
 800bdc2:	f000 f8dd 	bl	800bf80 <__swbuf_r>
 800bdc6:	3001      	adds	r0, #1
 800bdc8:	d1bf      	bne.n	800bd4a <_puts_r+0x42>
 800bdca:	e7df      	b.n	800bd8c <_puts_r+0x84>
 800bdcc:	6823      	ldr	r3, [r4, #0]
 800bdce:	250a      	movs	r5, #10
 800bdd0:	1c5a      	adds	r2, r3, #1
 800bdd2:	6022      	str	r2, [r4, #0]
 800bdd4:	701d      	strb	r5, [r3, #0]
 800bdd6:	e7db      	b.n	800bd90 <_puts_r+0x88>
 800bdd8:	0800c978 	.word	0x0800c978
 800bddc:	0800c998 	.word	0x0800c998
 800bde0:	0800c958 	.word	0x0800c958

0800bde4 <puts>:
 800bde4:	4b02      	ldr	r3, [pc, #8]	; (800bdf0 <puts+0xc>)
 800bde6:	4601      	mov	r1, r0
 800bde8:	6818      	ldr	r0, [r3, #0]
 800bdea:	f7ff bf8d 	b.w	800bd08 <_puts_r>
 800bdee:	bf00      	nop
 800bdf0:	2000010c 	.word	0x2000010c

0800bdf4 <setvbuf>:
 800bdf4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800bdf8:	461d      	mov	r5, r3
 800bdfa:	4b5d      	ldr	r3, [pc, #372]	; (800bf70 <setvbuf+0x17c>)
 800bdfc:	681f      	ldr	r7, [r3, #0]
 800bdfe:	4604      	mov	r4, r0
 800be00:	460e      	mov	r6, r1
 800be02:	4690      	mov	r8, r2
 800be04:	b127      	cbz	r7, 800be10 <setvbuf+0x1c>
 800be06:	69bb      	ldr	r3, [r7, #24]
 800be08:	b913      	cbnz	r3, 800be10 <setvbuf+0x1c>
 800be0a:	4638      	mov	r0, r7
 800be0c:	f000 fa92 	bl	800c334 <__sinit>
 800be10:	4b58      	ldr	r3, [pc, #352]	; (800bf74 <setvbuf+0x180>)
 800be12:	429c      	cmp	r4, r3
 800be14:	d167      	bne.n	800bee6 <setvbuf+0xf2>
 800be16:	687c      	ldr	r4, [r7, #4]
 800be18:	f1b8 0f02 	cmp.w	r8, #2
 800be1c:	d006      	beq.n	800be2c <setvbuf+0x38>
 800be1e:	f1b8 0f01 	cmp.w	r8, #1
 800be22:	f200 809f 	bhi.w	800bf64 <setvbuf+0x170>
 800be26:	2d00      	cmp	r5, #0
 800be28:	f2c0 809c 	blt.w	800bf64 <setvbuf+0x170>
 800be2c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800be2e:	07db      	lsls	r3, r3, #31
 800be30:	d405      	bmi.n	800be3e <setvbuf+0x4a>
 800be32:	89a3      	ldrh	r3, [r4, #12]
 800be34:	0598      	lsls	r0, r3, #22
 800be36:	d402      	bmi.n	800be3e <setvbuf+0x4a>
 800be38:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800be3a:	f000 fb19 	bl	800c470 <__retarget_lock_acquire_recursive>
 800be3e:	4621      	mov	r1, r4
 800be40:	4638      	mov	r0, r7
 800be42:	f000 f9e3 	bl	800c20c <_fflush_r>
 800be46:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800be48:	b141      	cbz	r1, 800be5c <setvbuf+0x68>
 800be4a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800be4e:	4299      	cmp	r1, r3
 800be50:	d002      	beq.n	800be58 <setvbuf+0x64>
 800be52:	4638      	mov	r0, r7
 800be54:	f000 fb7c 	bl	800c550 <_free_r>
 800be58:	2300      	movs	r3, #0
 800be5a:	6363      	str	r3, [r4, #52]	; 0x34
 800be5c:	2300      	movs	r3, #0
 800be5e:	61a3      	str	r3, [r4, #24]
 800be60:	6063      	str	r3, [r4, #4]
 800be62:	89a3      	ldrh	r3, [r4, #12]
 800be64:	0619      	lsls	r1, r3, #24
 800be66:	d503      	bpl.n	800be70 <setvbuf+0x7c>
 800be68:	6921      	ldr	r1, [r4, #16]
 800be6a:	4638      	mov	r0, r7
 800be6c:	f000 fb70 	bl	800c550 <_free_r>
 800be70:	89a3      	ldrh	r3, [r4, #12]
 800be72:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 800be76:	f023 0303 	bic.w	r3, r3, #3
 800be7a:	f1b8 0f02 	cmp.w	r8, #2
 800be7e:	81a3      	strh	r3, [r4, #12]
 800be80:	d06c      	beq.n	800bf5c <setvbuf+0x168>
 800be82:	ab01      	add	r3, sp, #4
 800be84:	466a      	mov	r2, sp
 800be86:	4621      	mov	r1, r4
 800be88:	4638      	mov	r0, r7
 800be8a:	f000 faf3 	bl	800c474 <__swhatbuf_r>
 800be8e:	89a3      	ldrh	r3, [r4, #12]
 800be90:	4318      	orrs	r0, r3
 800be92:	81a0      	strh	r0, [r4, #12]
 800be94:	2d00      	cmp	r5, #0
 800be96:	d130      	bne.n	800befa <setvbuf+0x106>
 800be98:	9d00      	ldr	r5, [sp, #0]
 800be9a:	4628      	mov	r0, r5
 800be9c:	f000 fb50 	bl	800c540 <malloc>
 800bea0:	4606      	mov	r6, r0
 800bea2:	2800      	cmp	r0, #0
 800bea4:	d155      	bne.n	800bf52 <setvbuf+0x15e>
 800bea6:	f8dd 9000 	ldr.w	r9, [sp]
 800beaa:	45a9      	cmp	r9, r5
 800beac:	d14a      	bne.n	800bf44 <setvbuf+0x150>
 800beae:	f04f 35ff 	mov.w	r5, #4294967295
 800beb2:	2200      	movs	r2, #0
 800beb4:	60a2      	str	r2, [r4, #8]
 800beb6:	f104 0247 	add.w	r2, r4, #71	; 0x47
 800beba:	6022      	str	r2, [r4, #0]
 800bebc:	6122      	str	r2, [r4, #16]
 800bebe:	2201      	movs	r2, #1
 800bec0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bec4:	6162      	str	r2, [r4, #20]
 800bec6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800bec8:	f043 0302 	orr.w	r3, r3, #2
 800becc:	07d2      	lsls	r2, r2, #31
 800bece:	81a3      	strh	r3, [r4, #12]
 800bed0:	d405      	bmi.n	800bede <setvbuf+0xea>
 800bed2:	f413 7f00 	tst.w	r3, #512	; 0x200
 800bed6:	d102      	bne.n	800bede <setvbuf+0xea>
 800bed8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800beda:	f000 faca 	bl	800c472 <__retarget_lock_release_recursive>
 800bede:	4628      	mov	r0, r5
 800bee0:	b003      	add	sp, #12
 800bee2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bee6:	4b24      	ldr	r3, [pc, #144]	; (800bf78 <setvbuf+0x184>)
 800bee8:	429c      	cmp	r4, r3
 800beea:	d101      	bne.n	800bef0 <setvbuf+0xfc>
 800beec:	68bc      	ldr	r4, [r7, #8]
 800beee:	e793      	b.n	800be18 <setvbuf+0x24>
 800bef0:	4b22      	ldr	r3, [pc, #136]	; (800bf7c <setvbuf+0x188>)
 800bef2:	429c      	cmp	r4, r3
 800bef4:	bf08      	it	eq
 800bef6:	68fc      	ldreq	r4, [r7, #12]
 800bef8:	e78e      	b.n	800be18 <setvbuf+0x24>
 800befa:	2e00      	cmp	r6, #0
 800befc:	d0cd      	beq.n	800be9a <setvbuf+0xa6>
 800befe:	69bb      	ldr	r3, [r7, #24]
 800bf00:	b913      	cbnz	r3, 800bf08 <setvbuf+0x114>
 800bf02:	4638      	mov	r0, r7
 800bf04:	f000 fa16 	bl	800c334 <__sinit>
 800bf08:	f1b8 0f01 	cmp.w	r8, #1
 800bf0c:	bf08      	it	eq
 800bf0e:	89a3      	ldrheq	r3, [r4, #12]
 800bf10:	6026      	str	r6, [r4, #0]
 800bf12:	bf04      	itt	eq
 800bf14:	f043 0301 	orreq.w	r3, r3, #1
 800bf18:	81a3      	strheq	r3, [r4, #12]
 800bf1a:	89a2      	ldrh	r2, [r4, #12]
 800bf1c:	f012 0308 	ands.w	r3, r2, #8
 800bf20:	e9c4 6504 	strd	r6, r5, [r4, #16]
 800bf24:	d01c      	beq.n	800bf60 <setvbuf+0x16c>
 800bf26:	07d3      	lsls	r3, r2, #31
 800bf28:	bf41      	itttt	mi
 800bf2a:	2300      	movmi	r3, #0
 800bf2c:	426d      	negmi	r5, r5
 800bf2e:	60a3      	strmi	r3, [r4, #8]
 800bf30:	61a5      	strmi	r5, [r4, #24]
 800bf32:	bf58      	it	pl
 800bf34:	60a5      	strpl	r5, [r4, #8]
 800bf36:	6e65      	ldr	r5, [r4, #100]	; 0x64
 800bf38:	f015 0501 	ands.w	r5, r5, #1
 800bf3c:	d115      	bne.n	800bf6a <setvbuf+0x176>
 800bf3e:	f412 7f00 	tst.w	r2, #512	; 0x200
 800bf42:	e7c8      	b.n	800bed6 <setvbuf+0xe2>
 800bf44:	4648      	mov	r0, r9
 800bf46:	f000 fafb 	bl	800c540 <malloc>
 800bf4a:	4606      	mov	r6, r0
 800bf4c:	2800      	cmp	r0, #0
 800bf4e:	d0ae      	beq.n	800beae <setvbuf+0xba>
 800bf50:	464d      	mov	r5, r9
 800bf52:	89a3      	ldrh	r3, [r4, #12]
 800bf54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bf58:	81a3      	strh	r3, [r4, #12]
 800bf5a:	e7d0      	b.n	800befe <setvbuf+0x10a>
 800bf5c:	2500      	movs	r5, #0
 800bf5e:	e7a8      	b.n	800beb2 <setvbuf+0xbe>
 800bf60:	60a3      	str	r3, [r4, #8]
 800bf62:	e7e8      	b.n	800bf36 <setvbuf+0x142>
 800bf64:	f04f 35ff 	mov.w	r5, #4294967295
 800bf68:	e7b9      	b.n	800bede <setvbuf+0xea>
 800bf6a:	2500      	movs	r5, #0
 800bf6c:	e7b7      	b.n	800bede <setvbuf+0xea>
 800bf6e:	bf00      	nop
 800bf70:	2000010c 	.word	0x2000010c
 800bf74:	0800c978 	.word	0x0800c978
 800bf78:	0800c998 	.word	0x0800c998
 800bf7c:	0800c958 	.word	0x0800c958

0800bf80 <__swbuf_r>:
 800bf80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bf82:	460e      	mov	r6, r1
 800bf84:	4614      	mov	r4, r2
 800bf86:	4605      	mov	r5, r0
 800bf88:	b118      	cbz	r0, 800bf92 <__swbuf_r+0x12>
 800bf8a:	6983      	ldr	r3, [r0, #24]
 800bf8c:	b90b      	cbnz	r3, 800bf92 <__swbuf_r+0x12>
 800bf8e:	f000 f9d1 	bl	800c334 <__sinit>
 800bf92:	4b21      	ldr	r3, [pc, #132]	; (800c018 <__swbuf_r+0x98>)
 800bf94:	429c      	cmp	r4, r3
 800bf96:	d12b      	bne.n	800bff0 <__swbuf_r+0x70>
 800bf98:	686c      	ldr	r4, [r5, #4]
 800bf9a:	69a3      	ldr	r3, [r4, #24]
 800bf9c:	60a3      	str	r3, [r4, #8]
 800bf9e:	89a3      	ldrh	r3, [r4, #12]
 800bfa0:	071a      	lsls	r2, r3, #28
 800bfa2:	d52f      	bpl.n	800c004 <__swbuf_r+0x84>
 800bfa4:	6923      	ldr	r3, [r4, #16]
 800bfa6:	b36b      	cbz	r3, 800c004 <__swbuf_r+0x84>
 800bfa8:	6923      	ldr	r3, [r4, #16]
 800bfaa:	6820      	ldr	r0, [r4, #0]
 800bfac:	1ac0      	subs	r0, r0, r3
 800bfae:	6963      	ldr	r3, [r4, #20]
 800bfb0:	b2f6      	uxtb	r6, r6
 800bfb2:	4283      	cmp	r3, r0
 800bfb4:	4637      	mov	r7, r6
 800bfb6:	dc04      	bgt.n	800bfc2 <__swbuf_r+0x42>
 800bfb8:	4621      	mov	r1, r4
 800bfba:	4628      	mov	r0, r5
 800bfbc:	f000 f926 	bl	800c20c <_fflush_r>
 800bfc0:	bb30      	cbnz	r0, 800c010 <__swbuf_r+0x90>
 800bfc2:	68a3      	ldr	r3, [r4, #8]
 800bfc4:	3b01      	subs	r3, #1
 800bfc6:	60a3      	str	r3, [r4, #8]
 800bfc8:	6823      	ldr	r3, [r4, #0]
 800bfca:	1c5a      	adds	r2, r3, #1
 800bfcc:	6022      	str	r2, [r4, #0]
 800bfce:	701e      	strb	r6, [r3, #0]
 800bfd0:	6963      	ldr	r3, [r4, #20]
 800bfd2:	3001      	adds	r0, #1
 800bfd4:	4283      	cmp	r3, r0
 800bfd6:	d004      	beq.n	800bfe2 <__swbuf_r+0x62>
 800bfd8:	89a3      	ldrh	r3, [r4, #12]
 800bfda:	07db      	lsls	r3, r3, #31
 800bfdc:	d506      	bpl.n	800bfec <__swbuf_r+0x6c>
 800bfde:	2e0a      	cmp	r6, #10
 800bfe0:	d104      	bne.n	800bfec <__swbuf_r+0x6c>
 800bfe2:	4621      	mov	r1, r4
 800bfe4:	4628      	mov	r0, r5
 800bfe6:	f000 f911 	bl	800c20c <_fflush_r>
 800bfea:	b988      	cbnz	r0, 800c010 <__swbuf_r+0x90>
 800bfec:	4638      	mov	r0, r7
 800bfee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bff0:	4b0a      	ldr	r3, [pc, #40]	; (800c01c <__swbuf_r+0x9c>)
 800bff2:	429c      	cmp	r4, r3
 800bff4:	d101      	bne.n	800bffa <__swbuf_r+0x7a>
 800bff6:	68ac      	ldr	r4, [r5, #8]
 800bff8:	e7cf      	b.n	800bf9a <__swbuf_r+0x1a>
 800bffa:	4b09      	ldr	r3, [pc, #36]	; (800c020 <__swbuf_r+0xa0>)
 800bffc:	429c      	cmp	r4, r3
 800bffe:	bf08      	it	eq
 800c000:	68ec      	ldreq	r4, [r5, #12]
 800c002:	e7ca      	b.n	800bf9a <__swbuf_r+0x1a>
 800c004:	4621      	mov	r1, r4
 800c006:	4628      	mov	r0, r5
 800c008:	f000 f80c 	bl	800c024 <__swsetup_r>
 800c00c:	2800      	cmp	r0, #0
 800c00e:	d0cb      	beq.n	800bfa8 <__swbuf_r+0x28>
 800c010:	f04f 37ff 	mov.w	r7, #4294967295
 800c014:	e7ea      	b.n	800bfec <__swbuf_r+0x6c>
 800c016:	bf00      	nop
 800c018:	0800c978 	.word	0x0800c978
 800c01c:	0800c998 	.word	0x0800c998
 800c020:	0800c958 	.word	0x0800c958

0800c024 <__swsetup_r>:
 800c024:	4b32      	ldr	r3, [pc, #200]	; (800c0f0 <__swsetup_r+0xcc>)
 800c026:	b570      	push	{r4, r5, r6, lr}
 800c028:	681d      	ldr	r5, [r3, #0]
 800c02a:	4606      	mov	r6, r0
 800c02c:	460c      	mov	r4, r1
 800c02e:	b125      	cbz	r5, 800c03a <__swsetup_r+0x16>
 800c030:	69ab      	ldr	r3, [r5, #24]
 800c032:	b913      	cbnz	r3, 800c03a <__swsetup_r+0x16>
 800c034:	4628      	mov	r0, r5
 800c036:	f000 f97d 	bl	800c334 <__sinit>
 800c03a:	4b2e      	ldr	r3, [pc, #184]	; (800c0f4 <__swsetup_r+0xd0>)
 800c03c:	429c      	cmp	r4, r3
 800c03e:	d10f      	bne.n	800c060 <__swsetup_r+0x3c>
 800c040:	686c      	ldr	r4, [r5, #4]
 800c042:	89a3      	ldrh	r3, [r4, #12]
 800c044:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c048:	0719      	lsls	r1, r3, #28
 800c04a:	d42c      	bmi.n	800c0a6 <__swsetup_r+0x82>
 800c04c:	06dd      	lsls	r5, r3, #27
 800c04e:	d411      	bmi.n	800c074 <__swsetup_r+0x50>
 800c050:	2309      	movs	r3, #9
 800c052:	6033      	str	r3, [r6, #0]
 800c054:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800c058:	81a3      	strh	r3, [r4, #12]
 800c05a:	f04f 30ff 	mov.w	r0, #4294967295
 800c05e:	e03e      	b.n	800c0de <__swsetup_r+0xba>
 800c060:	4b25      	ldr	r3, [pc, #148]	; (800c0f8 <__swsetup_r+0xd4>)
 800c062:	429c      	cmp	r4, r3
 800c064:	d101      	bne.n	800c06a <__swsetup_r+0x46>
 800c066:	68ac      	ldr	r4, [r5, #8]
 800c068:	e7eb      	b.n	800c042 <__swsetup_r+0x1e>
 800c06a:	4b24      	ldr	r3, [pc, #144]	; (800c0fc <__swsetup_r+0xd8>)
 800c06c:	429c      	cmp	r4, r3
 800c06e:	bf08      	it	eq
 800c070:	68ec      	ldreq	r4, [r5, #12]
 800c072:	e7e6      	b.n	800c042 <__swsetup_r+0x1e>
 800c074:	0758      	lsls	r0, r3, #29
 800c076:	d512      	bpl.n	800c09e <__swsetup_r+0x7a>
 800c078:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c07a:	b141      	cbz	r1, 800c08e <__swsetup_r+0x6a>
 800c07c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c080:	4299      	cmp	r1, r3
 800c082:	d002      	beq.n	800c08a <__swsetup_r+0x66>
 800c084:	4630      	mov	r0, r6
 800c086:	f000 fa63 	bl	800c550 <_free_r>
 800c08a:	2300      	movs	r3, #0
 800c08c:	6363      	str	r3, [r4, #52]	; 0x34
 800c08e:	89a3      	ldrh	r3, [r4, #12]
 800c090:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800c094:	81a3      	strh	r3, [r4, #12]
 800c096:	2300      	movs	r3, #0
 800c098:	6063      	str	r3, [r4, #4]
 800c09a:	6923      	ldr	r3, [r4, #16]
 800c09c:	6023      	str	r3, [r4, #0]
 800c09e:	89a3      	ldrh	r3, [r4, #12]
 800c0a0:	f043 0308 	orr.w	r3, r3, #8
 800c0a4:	81a3      	strh	r3, [r4, #12]
 800c0a6:	6923      	ldr	r3, [r4, #16]
 800c0a8:	b94b      	cbnz	r3, 800c0be <__swsetup_r+0x9a>
 800c0aa:	89a3      	ldrh	r3, [r4, #12]
 800c0ac:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800c0b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c0b4:	d003      	beq.n	800c0be <__swsetup_r+0x9a>
 800c0b6:	4621      	mov	r1, r4
 800c0b8:	4630      	mov	r0, r6
 800c0ba:	f000 fa01 	bl	800c4c0 <__smakebuf_r>
 800c0be:	89a0      	ldrh	r0, [r4, #12]
 800c0c0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c0c4:	f010 0301 	ands.w	r3, r0, #1
 800c0c8:	d00a      	beq.n	800c0e0 <__swsetup_r+0xbc>
 800c0ca:	2300      	movs	r3, #0
 800c0cc:	60a3      	str	r3, [r4, #8]
 800c0ce:	6963      	ldr	r3, [r4, #20]
 800c0d0:	425b      	negs	r3, r3
 800c0d2:	61a3      	str	r3, [r4, #24]
 800c0d4:	6923      	ldr	r3, [r4, #16]
 800c0d6:	b943      	cbnz	r3, 800c0ea <__swsetup_r+0xc6>
 800c0d8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800c0dc:	d1ba      	bne.n	800c054 <__swsetup_r+0x30>
 800c0de:	bd70      	pop	{r4, r5, r6, pc}
 800c0e0:	0781      	lsls	r1, r0, #30
 800c0e2:	bf58      	it	pl
 800c0e4:	6963      	ldrpl	r3, [r4, #20]
 800c0e6:	60a3      	str	r3, [r4, #8]
 800c0e8:	e7f4      	b.n	800c0d4 <__swsetup_r+0xb0>
 800c0ea:	2000      	movs	r0, #0
 800c0ec:	e7f7      	b.n	800c0de <__swsetup_r+0xba>
 800c0ee:	bf00      	nop
 800c0f0:	2000010c 	.word	0x2000010c
 800c0f4:	0800c978 	.word	0x0800c978
 800c0f8:	0800c998 	.word	0x0800c998
 800c0fc:	0800c958 	.word	0x0800c958

0800c100 <__sflush_r>:
 800c100:	898a      	ldrh	r2, [r1, #12]
 800c102:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c106:	4605      	mov	r5, r0
 800c108:	0710      	lsls	r0, r2, #28
 800c10a:	460c      	mov	r4, r1
 800c10c:	d458      	bmi.n	800c1c0 <__sflush_r+0xc0>
 800c10e:	684b      	ldr	r3, [r1, #4]
 800c110:	2b00      	cmp	r3, #0
 800c112:	dc05      	bgt.n	800c120 <__sflush_r+0x20>
 800c114:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c116:	2b00      	cmp	r3, #0
 800c118:	dc02      	bgt.n	800c120 <__sflush_r+0x20>
 800c11a:	2000      	movs	r0, #0
 800c11c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c120:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c122:	2e00      	cmp	r6, #0
 800c124:	d0f9      	beq.n	800c11a <__sflush_r+0x1a>
 800c126:	2300      	movs	r3, #0
 800c128:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c12c:	682f      	ldr	r7, [r5, #0]
 800c12e:	602b      	str	r3, [r5, #0]
 800c130:	d032      	beq.n	800c198 <__sflush_r+0x98>
 800c132:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c134:	89a3      	ldrh	r3, [r4, #12]
 800c136:	075a      	lsls	r2, r3, #29
 800c138:	d505      	bpl.n	800c146 <__sflush_r+0x46>
 800c13a:	6863      	ldr	r3, [r4, #4]
 800c13c:	1ac0      	subs	r0, r0, r3
 800c13e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c140:	b10b      	cbz	r3, 800c146 <__sflush_r+0x46>
 800c142:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c144:	1ac0      	subs	r0, r0, r3
 800c146:	2300      	movs	r3, #0
 800c148:	4602      	mov	r2, r0
 800c14a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c14c:	6a21      	ldr	r1, [r4, #32]
 800c14e:	4628      	mov	r0, r5
 800c150:	47b0      	blx	r6
 800c152:	1c43      	adds	r3, r0, #1
 800c154:	89a3      	ldrh	r3, [r4, #12]
 800c156:	d106      	bne.n	800c166 <__sflush_r+0x66>
 800c158:	6829      	ldr	r1, [r5, #0]
 800c15a:	291d      	cmp	r1, #29
 800c15c:	d82c      	bhi.n	800c1b8 <__sflush_r+0xb8>
 800c15e:	4a2a      	ldr	r2, [pc, #168]	; (800c208 <__sflush_r+0x108>)
 800c160:	40ca      	lsrs	r2, r1
 800c162:	07d6      	lsls	r6, r2, #31
 800c164:	d528      	bpl.n	800c1b8 <__sflush_r+0xb8>
 800c166:	2200      	movs	r2, #0
 800c168:	6062      	str	r2, [r4, #4]
 800c16a:	04d9      	lsls	r1, r3, #19
 800c16c:	6922      	ldr	r2, [r4, #16]
 800c16e:	6022      	str	r2, [r4, #0]
 800c170:	d504      	bpl.n	800c17c <__sflush_r+0x7c>
 800c172:	1c42      	adds	r2, r0, #1
 800c174:	d101      	bne.n	800c17a <__sflush_r+0x7a>
 800c176:	682b      	ldr	r3, [r5, #0]
 800c178:	b903      	cbnz	r3, 800c17c <__sflush_r+0x7c>
 800c17a:	6560      	str	r0, [r4, #84]	; 0x54
 800c17c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c17e:	602f      	str	r7, [r5, #0]
 800c180:	2900      	cmp	r1, #0
 800c182:	d0ca      	beq.n	800c11a <__sflush_r+0x1a>
 800c184:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c188:	4299      	cmp	r1, r3
 800c18a:	d002      	beq.n	800c192 <__sflush_r+0x92>
 800c18c:	4628      	mov	r0, r5
 800c18e:	f000 f9df 	bl	800c550 <_free_r>
 800c192:	2000      	movs	r0, #0
 800c194:	6360      	str	r0, [r4, #52]	; 0x34
 800c196:	e7c1      	b.n	800c11c <__sflush_r+0x1c>
 800c198:	6a21      	ldr	r1, [r4, #32]
 800c19a:	2301      	movs	r3, #1
 800c19c:	4628      	mov	r0, r5
 800c19e:	47b0      	blx	r6
 800c1a0:	1c41      	adds	r1, r0, #1
 800c1a2:	d1c7      	bne.n	800c134 <__sflush_r+0x34>
 800c1a4:	682b      	ldr	r3, [r5, #0]
 800c1a6:	2b00      	cmp	r3, #0
 800c1a8:	d0c4      	beq.n	800c134 <__sflush_r+0x34>
 800c1aa:	2b1d      	cmp	r3, #29
 800c1ac:	d001      	beq.n	800c1b2 <__sflush_r+0xb2>
 800c1ae:	2b16      	cmp	r3, #22
 800c1b0:	d101      	bne.n	800c1b6 <__sflush_r+0xb6>
 800c1b2:	602f      	str	r7, [r5, #0]
 800c1b4:	e7b1      	b.n	800c11a <__sflush_r+0x1a>
 800c1b6:	89a3      	ldrh	r3, [r4, #12]
 800c1b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c1bc:	81a3      	strh	r3, [r4, #12]
 800c1be:	e7ad      	b.n	800c11c <__sflush_r+0x1c>
 800c1c0:	690f      	ldr	r7, [r1, #16]
 800c1c2:	2f00      	cmp	r7, #0
 800c1c4:	d0a9      	beq.n	800c11a <__sflush_r+0x1a>
 800c1c6:	0793      	lsls	r3, r2, #30
 800c1c8:	680e      	ldr	r6, [r1, #0]
 800c1ca:	bf08      	it	eq
 800c1cc:	694b      	ldreq	r3, [r1, #20]
 800c1ce:	600f      	str	r7, [r1, #0]
 800c1d0:	bf18      	it	ne
 800c1d2:	2300      	movne	r3, #0
 800c1d4:	eba6 0807 	sub.w	r8, r6, r7
 800c1d8:	608b      	str	r3, [r1, #8]
 800c1da:	f1b8 0f00 	cmp.w	r8, #0
 800c1de:	dd9c      	ble.n	800c11a <__sflush_r+0x1a>
 800c1e0:	6a21      	ldr	r1, [r4, #32]
 800c1e2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c1e4:	4643      	mov	r3, r8
 800c1e6:	463a      	mov	r2, r7
 800c1e8:	4628      	mov	r0, r5
 800c1ea:	47b0      	blx	r6
 800c1ec:	2800      	cmp	r0, #0
 800c1ee:	dc06      	bgt.n	800c1fe <__sflush_r+0xfe>
 800c1f0:	89a3      	ldrh	r3, [r4, #12]
 800c1f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c1f6:	81a3      	strh	r3, [r4, #12]
 800c1f8:	f04f 30ff 	mov.w	r0, #4294967295
 800c1fc:	e78e      	b.n	800c11c <__sflush_r+0x1c>
 800c1fe:	4407      	add	r7, r0
 800c200:	eba8 0800 	sub.w	r8, r8, r0
 800c204:	e7e9      	b.n	800c1da <__sflush_r+0xda>
 800c206:	bf00      	nop
 800c208:	20400001 	.word	0x20400001

0800c20c <_fflush_r>:
 800c20c:	b538      	push	{r3, r4, r5, lr}
 800c20e:	690b      	ldr	r3, [r1, #16]
 800c210:	4605      	mov	r5, r0
 800c212:	460c      	mov	r4, r1
 800c214:	b913      	cbnz	r3, 800c21c <_fflush_r+0x10>
 800c216:	2500      	movs	r5, #0
 800c218:	4628      	mov	r0, r5
 800c21a:	bd38      	pop	{r3, r4, r5, pc}
 800c21c:	b118      	cbz	r0, 800c226 <_fflush_r+0x1a>
 800c21e:	6983      	ldr	r3, [r0, #24]
 800c220:	b90b      	cbnz	r3, 800c226 <_fflush_r+0x1a>
 800c222:	f000 f887 	bl	800c334 <__sinit>
 800c226:	4b14      	ldr	r3, [pc, #80]	; (800c278 <_fflush_r+0x6c>)
 800c228:	429c      	cmp	r4, r3
 800c22a:	d11b      	bne.n	800c264 <_fflush_r+0x58>
 800c22c:	686c      	ldr	r4, [r5, #4]
 800c22e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c232:	2b00      	cmp	r3, #0
 800c234:	d0ef      	beq.n	800c216 <_fflush_r+0xa>
 800c236:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c238:	07d0      	lsls	r0, r2, #31
 800c23a:	d404      	bmi.n	800c246 <_fflush_r+0x3a>
 800c23c:	0599      	lsls	r1, r3, #22
 800c23e:	d402      	bmi.n	800c246 <_fflush_r+0x3a>
 800c240:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c242:	f000 f915 	bl	800c470 <__retarget_lock_acquire_recursive>
 800c246:	4628      	mov	r0, r5
 800c248:	4621      	mov	r1, r4
 800c24a:	f7ff ff59 	bl	800c100 <__sflush_r>
 800c24e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c250:	07da      	lsls	r2, r3, #31
 800c252:	4605      	mov	r5, r0
 800c254:	d4e0      	bmi.n	800c218 <_fflush_r+0xc>
 800c256:	89a3      	ldrh	r3, [r4, #12]
 800c258:	059b      	lsls	r3, r3, #22
 800c25a:	d4dd      	bmi.n	800c218 <_fflush_r+0xc>
 800c25c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c25e:	f000 f908 	bl	800c472 <__retarget_lock_release_recursive>
 800c262:	e7d9      	b.n	800c218 <_fflush_r+0xc>
 800c264:	4b05      	ldr	r3, [pc, #20]	; (800c27c <_fflush_r+0x70>)
 800c266:	429c      	cmp	r4, r3
 800c268:	d101      	bne.n	800c26e <_fflush_r+0x62>
 800c26a:	68ac      	ldr	r4, [r5, #8]
 800c26c:	e7df      	b.n	800c22e <_fflush_r+0x22>
 800c26e:	4b04      	ldr	r3, [pc, #16]	; (800c280 <_fflush_r+0x74>)
 800c270:	429c      	cmp	r4, r3
 800c272:	bf08      	it	eq
 800c274:	68ec      	ldreq	r4, [r5, #12]
 800c276:	e7da      	b.n	800c22e <_fflush_r+0x22>
 800c278:	0800c978 	.word	0x0800c978
 800c27c:	0800c998 	.word	0x0800c998
 800c280:	0800c958 	.word	0x0800c958

0800c284 <std>:
 800c284:	2300      	movs	r3, #0
 800c286:	b510      	push	{r4, lr}
 800c288:	4604      	mov	r4, r0
 800c28a:	e9c0 3300 	strd	r3, r3, [r0]
 800c28e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c292:	6083      	str	r3, [r0, #8]
 800c294:	8181      	strh	r1, [r0, #12]
 800c296:	6643      	str	r3, [r0, #100]	; 0x64
 800c298:	81c2      	strh	r2, [r0, #14]
 800c29a:	6183      	str	r3, [r0, #24]
 800c29c:	4619      	mov	r1, r3
 800c29e:	2208      	movs	r2, #8
 800c2a0:	305c      	adds	r0, #92	; 0x5c
 800c2a2:	f7ff fd29 	bl	800bcf8 <memset>
 800c2a6:	4b05      	ldr	r3, [pc, #20]	; (800c2bc <std+0x38>)
 800c2a8:	6263      	str	r3, [r4, #36]	; 0x24
 800c2aa:	4b05      	ldr	r3, [pc, #20]	; (800c2c0 <std+0x3c>)
 800c2ac:	62a3      	str	r3, [r4, #40]	; 0x28
 800c2ae:	4b05      	ldr	r3, [pc, #20]	; (800c2c4 <std+0x40>)
 800c2b0:	62e3      	str	r3, [r4, #44]	; 0x2c
 800c2b2:	4b05      	ldr	r3, [pc, #20]	; (800c2c8 <std+0x44>)
 800c2b4:	6224      	str	r4, [r4, #32]
 800c2b6:	6323      	str	r3, [r4, #48]	; 0x30
 800c2b8:	bd10      	pop	{r4, pc}
 800c2ba:	bf00      	nop
 800c2bc:	0800c731 	.word	0x0800c731
 800c2c0:	0800c753 	.word	0x0800c753
 800c2c4:	0800c78b 	.word	0x0800c78b
 800c2c8:	0800c7af 	.word	0x0800c7af

0800c2cc <_cleanup_r>:
 800c2cc:	4901      	ldr	r1, [pc, #4]	; (800c2d4 <_cleanup_r+0x8>)
 800c2ce:	f000 b8af 	b.w	800c430 <_fwalk_reent>
 800c2d2:	bf00      	nop
 800c2d4:	0800c20d 	.word	0x0800c20d

0800c2d8 <__sfmoreglue>:
 800c2d8:	b570      	push	{r4, r5, r6, lr}
 800c2da:	2268      	movs	r2, #104	; 0x68
 800c2dc:	1e4d      	subs	r5, r1, #1
 800c2de:	4355      	muls	r5, r2
 800c2e0:	460e      	mov	r6, r1
 800c2e2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800c2e6:	f000 f99f 	bl	800c628 <_malloc_r>
 800c2ea:	4604      	mov	r4, r0
 800c2ec:	b140      	cbz	r0, 800c300 <__sfmoreglue+0x28>
 800c2ee:	2100      	movs	r1, #0
 800c2f0:	e9c0 1600 	strd	r1, r6, [r0]
 800c2f4:	300c      	adds	r0, #12
 800c2f6:	60a0      	str	r0, [r4, #8]
 800c2f8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800c2fc:	f7ff fcfc 	bl	800bcf8 <memset>
 800c300:	4620      	mov	r0, r4
 800c302:	bd70      	pop	{r4, r5, r6, pc}

0800c304 <__sfp_lock_acquire>:
 800c304:	4801      	ldr	r0, [pc, #4]	; (800c30c <__sfp_lock_acquire+0x8>)
 800c306:	f000 b8b3 	b.w	800c470 <__retarget_lock_acquire_recursive>
 800c30a:	bf00      	nop
 800c30c:	20002445 	.word	0x20002445

0800c310 <__sfp_lock_release>:
 800c310:	4801      	ldr	r0, [pc, #4]	; (800c318 <__sfp_lock_release+0x8>)
 800c312:	f000 b8ae 	b.w	800c472 <__retarget_lock_release_recursive>
 800c316:	bf00      	nop
 800c318:	20002445 	.word	0x20002445

0800c31c <__sinit_lock_acquire>:
 800c31c:	4801      	ldr	r0, [pc, #4]	; (800c324 <__sinit_lock_acquire+0x8>)
 800c31e:	f000 b8a7 	b.w	800c470 <__retarget_lock_acquire_recursive>
 800c322:	bf00      	nop
 800c324:	20002446 	.word	0x20002446

0800c328 <__sinit_lock_release>:
 800c328:	4801      	ldr	r0, [pc, #4]	; (800c330 <__sinit_lock_release+0x8>)
 800c32a:	f000 b8a2 	b.w	800c472 <__retarget_lock_release_recursive>
 800c32e:	bf00      	nop
 800c330:	20002446 	.word	0x20002446

0800c334 <__sinit>:
 800c334:	b510      	push	{r4, lr}
 800c336:	4604      	mov	r4, r0
 800c338:	f7ff fff0 	bl	800c31c <__sinit_lock_acquire>
 800c33c:	69a3      	ldr	r3, [r4, #24]
 800c33e:	b11b      	cbz	r3, 800c348 <__sinit+0x14>
 800c340:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c344:	f7ff bff0 	b.w	800c328 <__sinit_lock_release>
 800c348:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800c34c:	6523      	str	r3, [r4, #80]	; 0x50
 800c34e:	4b13      	ldr	r3, [pc, #76]	; (800c39c <__sinit+0x68>)
 800c350:	4a13      	ldr	r2, [pc, #76]	; (800c3a0 <__sinit+0x6c>)
 800c352:	681b      	ldr	r3, [r3, #0]
 800c354:	62a2      	str	r2, [r4, #40]	; 0x28
 800c356:	42a3      	cmp	r3, r4
 800c358:	bf04      	itt	eq
 800c35a:	2301      	moveq	r3, #1
 800c35c:	61a3      	streq	r3, [r4, #24]
 800c35e:	4620      	mov	r0, r4
 800c360:	f000 f820 	bl	800c3a4 <__sfp>
 800c364:	6060      	str	r0, [r4, #4]
 800c366:	4620      	mov	r0, r4
 800c368:	f000 f81c 	bl	800c3a4 <__sfp>
 800c36c:	60a0      	str	r0, [r4, #8]
 800c36e:	4620      	mov	r0, r4
 800c370:	f000 f818 	bl	800c3a4 <__sfp>
 800c374:	2200      	movs	r2, #0
 800c376:	60e0      	str	r0, [r4, #12]
 800c378:	2104      	movs	r1, #4
 800c37a:	6860      	ldr	r0, [r4, #4]
 800c37c:	f7ff ff82 	bl	800c284 <std>
 800c380:	68a0      	ldr	r0, [r4, #8]
 800c382:	2201      	movs	r2, #1
 800c384:	2109      	movs	r1, #9
 800c386:	f7ff ff7d 	bl	800c284 <std>
 800c38a:	68e0      	ldr	r0, [r4, #12]
 800c38c:	2202      	movs	r2, #2
 800c38e:	2112      	movs	r1, #18
 800c390:	f7ff ff78 	bl	800c284 <std>
 800c394:	2301      	movs	r3, #1
 800c396:	61a3      	str	r3, [r4, #24]
 800c398:	e7d2      	b.n	800c340 <__sinit+0xc>
 800c39a:	bf00      	nop
 800c39c:	0800c954 	.word	0x0800c954
 800c3a0:	0800c2cd 	.word	0x0800c2cd

0800c3a4 <__sfp>:
 800c3a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c3a6:	4607      	mov	r7, r0
 800c3a8:	f7ff ffac 	bl	800c304 <__sfp_lock_acquire>
 800c3ac:	4b1e      	ldr	r3, [pc, #120]	; (800c428 <__sfp+0x84>)
 800c3ae:	681e      	ldr	r6, [r3, #0]
 800c3b0:	69b3      	ldr	r3, [r6, #24]
 800c3b2:	b913      	cbnz	r3, 800c3ba <__sfp+0x16>
 800c3b4:	4630      	mov	r0, r6
 800c3b6:	f7ff ffbd 	bl	800c334 <__sinit>
 800c3ba:	3648      	adds	r6, #72	; 0x48
 800c3bc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800c3c0:	3b01      	subs	r3, #1
 800c3c2:	d503      	bpl.n	800c3cc <__sfp+0x28>
 800c3c4:	6833      	ldr	r3, [r6, #0]
 800c3c6:	b30b      	cbz	r3, 800c40c <__sfp+0x68>
 800c3c8:	6836      	ldr	r6, [r6, #0]
 800c3ca:	e7f7      	b.n	800c3bc <__sfp+0x18>
 800c3cc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800c3d0:	b9d5      	cbnz	r5, 800c408 <__sfp+0x64>
 800c3d2:	4b16      	ldr	r3, [pc, #88]	; (800c42c <__sfp+0x88>)
 800c3d4:	60e3      	str	r3, [r4, #12]
 800c3d6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800c3da:	6665      	str	r5, [r4, #100]	; 0x64
 800c3dc:	f000 f847 	bl	800c46e <__retarget_lock_init_recursive>
 800c3e0:	f7ff ff96 	bl	800c310 <__sfp_lock_release>
 800c3e4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800c3e8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800c3ec:	6025      	str	r5, [r4, #0]
 800c3ee:	61a5      	str	r5, [r4, #24]
 800c3f0:	2208      	movs	r2, #8
 800c3f2:	4629      	mov	r1, r5
 800c3f4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800c3f8:	f7ff fc7e 	bl	800bcf8 <memset>
 800c3fc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800c400:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800c404:	4620      	mov	r0, r4
 800c406:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c408:	3468      	adds	r4, #104	; 0x68
 800c40a:	e7d9      	b.n	800c3c0 <__sfp+0x1c>
 800c40c:	2104      	movs	r1, #4
 800c40e:	4638      	mov	r0, r7
 800c410:	f7ff ff62 	bl	800c2d8 <__sfmoreglue>
 800c414:	4604      	mov	r4, r0
 800c416:	6030      	str	r0, [r6, #0]
 800c418:	2800      	cmp	r0, #0
 800c41a:	d1d5      	bne.n	800c3c8 <__sfp+0x24>
 800c41c:	f7ff ff78 	bl	800c310 <__sfp_lock_release>
 800c420:	230c      	movs	r3, #12
 800c422:	603b      	str	r3, [r7, #0]
 800c424:	e7ee      	b.n	800c404 <__sfp+0x60>
 800c426:	bf00      	nop
 800c428:	0800c954 	.word	0x0800c954
 800c42c:	ffff0001 	.word	0xffff0001

0800c430 <_fwalk_reent>:
 800c430:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c434:	4606      	mov	r6, r0
 800c436:	4688      	mov	r8, r1
 800c438:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800c43c:	2700      	movs	r7, #0
 800c43e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c442:	f1b9 0901 	subs.w	r9, r9, #1
 800c446:	d505      	bpl.n	800c454 <_fwalk_reent+0x24>
 800c448:	6824      	ldr	r4, [r4, #0]
 800c44a:	2c00      	cmp	r4, #0
 800c44c:	d1f7      	bne.n	800c43e <_fwalk_reent+0xe>
 800c44e:	4638      	mov	r0, r7
 800c450:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c454:	89ab      	ldrh	r3, [r5, #12]
 800c456:	2b01      	cmp	r3, #1
 800c458:	d907      	bls.n	800c46a <_fwalk_reent+0x3a>
 800c45a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c45e:	3301      	adds	r3, #1
 800c460:	d003      	beq.n	800c46a <_fwalk_reent+0x3a>
 800c462:	4629      	mov	r1, r5
 800c464:	4630      	mov	r0, r6
 800c466:	47c0      	blx	r8
 800c468:	4307      	orrs	r7, r0
 800c46a:	3568      	adds	r5, #104	; 0x68
 800c46c:	e7e9      	b.n	800c442 <_fwalk_reent+0x12>

0800c46e <__retarget_lock_init_recursive>:
 800c46e:	4770      	bx	lr

0800c470 <__retarget_lock_acquire_recursive>:
 800c470:	4770      	bx	lr

0800c472 <__retarget_lock_release_recursive>:
 800c472:	4770      	bx	lr

0800c474 <__swhatbuf_r>:
 800c474:	b570      	push	{r4, r5, r6, lr}
 800c476:	460e      	mov	r6, r1
 800c478:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c47c:	2900      	cmp	r1, #0
 800c47e:	b096      	sub	sp, #88	; 0x58
 800c480:	4614      	mov	r4, r2
 800c482:	461d      	mov	r5, r3
 800c484:	da08      	bge.n	800c498 <__swhatbuf_r+0x24>
 800c486:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800c48a:	2200      	movs	r2, #0
 800c48c:	602a      	str	r2, [r5, #0]
 800c48e:	061a      	lsls	r2, r3, #24
 800c490:	d410      	bmi.n	800c4b4 <__swhatbuf_r+0x40>
 800c492:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c496:	e00e      	b.n	800c4b6 <__swhatbuf_r+0x42>
 800c498:	466a      	mov	r2, sp
 800c49a:	f000 f9af 	bl	800c7fc <_fstat_r>
 800c49e:	2800      	cmp	r0, #0
 800c4a0:	dbf1      	blt.n	800c486 <__swhatbuf_r+0x12>
 800c4a2:	9a01      	ldr	r2, [sp, #4]
 800c4a4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800c4a8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800c4ac:	425a      	negs	r2, r3
 800c4ae:	415a      	adcs	r2, r3
 800c4b0:	602a      	str	r2, [r5, #0]
 800c4b2:	e7ee      	b.n	800c492 <__swhatbuf_r+0x1e>
 800c4b4:	2340      	movs	r3, #64	; 0x40
 800c4b6:	2000      	movs	r0, #0
 800c4b8:	6023      	str	r3, [r4, #0]
 800c4ba:	b016      	add	sp, #88	; 0x58
 800c4bc:	bd70      	pop	{r4, r5, r6, pc}
	...

0800c4c0 <__smakebuf_r>:
 800c4c0:	898b      	ldrh	r3, [r1, #12]
 800c4c2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c4c4:	079d      	lsls	r5, r3, #30
 800c4c6:	4606      	mov	r6, r0
 800c4c8:	460c      	mov	r4, r1
 800c4ca:	d507      	bpl.n	800c4dc <__smakebuf_r+0x1c>
 800c4cc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c4d0:	6023      	str	r3, [r4, #0]
 800c4d2:	6123      	str	r3, [r4, #16]
 800c4d4:	2301      	movs	r3, #1
 800c4d6:	6163      	str	r3, [r4, #20]
 800c4d8:	b002      	add	sp, #8
 800c4da:	bd70      	pop	{r4, r5, r6, pc}
 800c4dc:	ab01      	add	r3, sp, #4
 800c4de:	466a      	mov	r2, sp
 800c4e0:	f7ff ffc8 	bl	800c474 <__swhatbuf_r>
 800c4e4:	9900      	ldr	r1, [sp, #0]
 800c4e6:	4605      	mov	r5, r0
 800c4e8:	4630      	mov	r0, r6
 800c4ea:	f000 f89d 	bl	800c628 <_malloc_r>
 800c4ee:	b948      	cbnz	r0, 800c504 <__smakebuf_r+0x44>
 800c4f0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c4f4:	059a      	lsls	r2, r3, #22
 800c4f6:	d4ef      	bmi.n	800c4d8 <__smakebuf_r+0x18>
 800c4f8:	f023 0303 	bic.w	r3, r3, #3
 800c4fc:	f043 0302 	orr.w	r3, r3, #2
 800c500:	81a3      	strh	r3, [r4, #12]
 800c502:	e7e3      	b.n	800c4cc <__smakebuf_r+0xc>
 800c504:	4b0d      	ldr	r3, [pc, #52]	; (800c53c <__smakebuf_r+0x7c>)
 800c506:	62b3      	str	r3, [r6, #40]	; 0x28
 800c508:	89a3      	ldrh	r3, [r4, #12]
 800c50a:	6020      	str	r0, [r4, #0]
 800c50c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c510:	81a3      	strh	r3, [r4, #12]
 800c512:	9b00      	ldr	r3, [sp, #0]
 800c514:	6163      	str	r3, [r4, #20]
 800c516:	9b01      	ldr	r3, [sp, #4]
 800c518:	6120      	str	r0, [r4, #16]
 800c51a:	b15b      	cbz	r3, 800c534 <__smakebuf_r+0x74>
 800c51c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c520:	4630      	mov	r0, r6
 800c522:	f000 f97d 	bl	800c820 <_isatty_r>
 800c526:	b128      	cbz	r0, 800c534 <__smakebuf_r+0x74>
 800c528:	89a3      	ldrh	r3, [r4, #12]
 800c52a:	f023 0303 	bic.w	r3, r3, #3
 800c52e:	f043 0301 	orr.w	r3, r3, #1
 800c532:	81a3      	strh	r3, [r4, #12]
 800c534:	89a0      	ldrh	r0, [r4, #12]
 800c536:	4305      	orrs	r5, r0
 800c538:	81a5      	strh	r5, [r4, #12]
 800c53a:	e7cd      	b.n	800c4d8 <__smakebuf_r+0x18>
 800c53c:	0800c2cd 	.word	0x0800c2cd

0800c540 <malloc>:
 800c540:	4b02      	ldr	r3, [pc, #8]	; (800c54c <malloc+0xc>)
 800c542:	4601      	mov	r1, r0
 800c544:	6818      	ldr	r0, [r3, #0]
 800c546:	f000 b86f 	b.w	800c628 <_malloc_r>
 800c54a:	bf00      	nop
 800c54c:	2000010c 	.word	0x2000010c

0800c550 <_free_r>:
 800c550:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c552:	2900      	cmp	r1, #0
 800c554:	d044      	beq.n	800c5e0 <_free_r+0x90>
 800c556:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c55a:	9001      	str	r0, [sp, #4]
 800c55c:	2b00      	cmp	r3, #0
 800c55e:	f1a1 0404 	sub.w	r4, r1, #4
 800c562:	bfb8      	it	lt
 800c564:	18e4      	addlt	r4, r4, r3
 800c566:	f000 f97d 	bl	800c864 <__malloc_lock>
 800c56a:	4a1e      	ldr	r2, [pc, #120]	; (800c5e4 <_free_r+0x94>)
 800c56c:	9801      	ldr	r0, [sp, #4]
 800c56e:	6813      	ldr	r3, [r2, #0]
 800c570:	b933      	cbnz	r3, 800c580 <_free_r+0x30>
 800c572:	6063      	str	r3, [r4, #4]
 800c574:	6014      	str	r4, [r2, #0]
 800c576:	b003      	add	sp, #12
 800c578:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c57c:	f000 b978 	b.w	800c870 <__malloc_unlock>
 800c580:	42a3      	cmp	r3, r4
 800c582:	d908      	bls.n	800c596 <_free_r+0x46>
 800c584:	6825      	ldr	r5, [r4, #0]
 800c586:	1961      	adds	r1, r4, r5
 800c588:	428b      	cmp	r3, r1
 800c58a:	bf01      	itttt	eq
 800c58c:	6819      	ldreq	r1, [r3, #0]
 800c58e:	685b      	ldreq	r3, [r3, #4]
 800c590:	1949      	addeq	r1, r1, r5
 800c592:	6021      	streq	r1, [r4, #0]
 800c594:	e7ed      	b.n	800c572 <_free_r+0x22>
 800c596:	461a      	mov	r2, r3
 800c598:	685b      	ldr	r3, [r3, #4]
 800c59a:	b10b      	cbz	r3, 800c5a0 <_free_r+0x50>
 800c59c:	42a3      	cmp	r3, r4
 800c59e:	d9fa      	bls.n	800c596 <_free_r+0x46>
 800c5a0:	6811      	ldr	r1, [r2, #0]
 800c5a2:	1855      	adds	r5, r2, r1
 800c5a4:	42a5      	cmp	r5, r4
 800c5a6:	d10b      	bne.n	800c5c0 <_free_r+0x70>
 800c5a8:	6824      	ldr	r4, [r4, #0]
 800c5aa:	4421      	add	r1, r4
 800c5ac:	1854      	adds	r4, r2, r1
 800c5ae:	42a3      	cmp	r3, r4
 800c5b0:	6011      	str	r1, [r2, #0]
 800c5b2:	d1e0      	bne.n	800c576 <_free_r+0x26>
 800c5b4:	681c      	ldr	r4, [r3, #0]
 800c5b6:	685b      	ldr	r3, [r3, #4]
 800c5b8:	6053      	str	r3, [r2, #4]
 800c5ba:	4421      	add	r1, r4
 800c5bc:	6011      	str	r1, [r2, #0]
 800c5be:	e7da      	b.n	800c576 <_free_r+0x26>
 800c5c0:	d902      	bls.n	800c5c8 <_free_r+0x78>
 800c5c2:	230c      	movs	r3, #12
 800c5c4:	6003      	str	r3, [r0, #0]
 800c5c6:	e7d6      	b.n	800c576 <_free_r+0x26>
 800c5c8:	6825      	ldr	r5, [r4, #0]
 800c5ca:	1961      	adds	r1, r4, r5
 800c5cc:	428b      	cmp	r3, r1
 800c5ce:	bf04      	itt	eq
 800c5d0:	6819      	ldreq	r1, [r3, #0]
 800c5d2:	685b      	ldreq	r3, [r3, #4]
 800c5d4:	6063      	str	r3, [r4, #4]
 800c5d6:	bf04      	itt	eq
 800c5d8:	1949      	addeq	r1, r1, r5
 800c5da:	6021      	streq	r1, [r4, #0]
 800c5dc:	6054      	str	r4, [r2, #4]
 800c5de:	e7ca      	b.n	800c576 <_free_r+0x26>
 800c5e0:	b003      	add	sp, #12
 800c5e2:	bd30      	pop	{r4, r5, pc}
 800c5e4:	20002448 	.word	0x20002448

0800c5e8 <sbrk_aligned>:
 800c5e8:	b570      	push	{r4, r5, r6, lr}
 800c5ea:	4e0e      	ldr	r6, [pc, #56]	; (800c624 <sbrk_aligned+0x3c>)
 800c5ec:	460c      	mov	r4, r1
 800c5ee:	6831      	ldr	r1, [r6, #0]
 800c5f0:	4605      	mov	r5, r0
 800c5f2:	b911      	cbnz	r1, 800c5fa <sbrk_aligned+0x12>
 800c5f4:	f000 f88c 	bl	800c710 <_sbrk_r>
 800c5f8:	6030      	str	r0, [r6, #0]
 800c5fa:	4621      	mov	r1, r4
 800c5fc:	4628      	mov	r0, r5
 800c5fe:	f000 f887 	bl	800c710 <_sbrk_r>
 800c602:	1c43      	adds	r3, r0, #1
 800c604:	d00a      	beq.n	800c61c <sbrk_aligned+0x34>
 800c606:	1cc4      	adds	r4, r0, #3
 800c608:	f024 0403 	bic.w	r4, r4, #3
 800c60c:	42a0      	cmp	r0, r4
 800c60e:	d007      	beq.n	800c620 <sbrk_aligned+0x38>
 800c610:	1a21      	subs	r1, r4, r0
 800c612:	4628      	mov	r0, r5
 800c614:	f000 f87c 	bl	800c710 <_sbrk_r>
 800c618:	3001      	adds	r0, #1
 800c61a:	d101      	bne.n	800c620 <sbrk_aligned+0x38>
 800c61c:	f04f 34ff 	mov.w	r4, #4294967295
 800c620:	4620      	mov	r0, r4
 800c622:	bd70      	pop	{r4, r5, r6, pc}
 800c624:	2000244c 	.word	0x2000244c

0800c628 <_malloc_r>:
 800c628:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c62c:	1ccd      	adds	r5, r1, #3
 800c62e:	f025 0503 	bic.w	r5, r5, #3
 800c632:	3508      	adds	r5, #8
 800c634:	2d0c      	cmp	r5, #12
 800c636:	bf38      	it	cc
 800c638:	250c      	movcc	r5, #12
 800c63a:	2d00      	cmp	r5, #0
 800c63c:	4607      	mov	r7, r0
 800c63e:	db01      	blt.n	800c644 <_malloc_r+0x1c>
 800c640:	42a9      	cmp	r1, r5
 800c642:	d905      	bls.n	800c650 <_malloc_r+0x28>
 800c644:	230c      	movs	r3, #12
 800c646:	603b      	str	r3, [r7, #0]
 800c648:	2600      	movs	r6, #0
 800c64a:	4630      	mov	r0, r6
 800c64c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c650:	4e2e      	ldr	r6, [pc, #184]	; (800c70c <_malloc_r+0xe4>)
 800c652:	f000 f907 	bl	800c864 <__malloc_lock>
 800c656:	6833      	ldr	r3, [r6, #0]
 800c658:	461c      	mov	r4, r3
 800c65a:	bb34      	cbnz	r4, 800c6aa <_malloc_r+0x82>
 800c65c:	4629      	mov	r1, r5
 800c65e:	4638      	mov	r0, r7
 800c660:	f7ff ffc2 	bl	800c5e8 <sbrk_aligned>
 800c664:	1c43      	adds	r3, r0, #1
 800c666:	4604      	mov	r4, r0
 800c668:	d14d      	bne.n	800c706 <_malloc_r+0xde>
 800c66a:	6834      	ldr	r4, [r6, #0]
 800c66c:	4626      	mov	r6, r4
 800c66e:	2e00      	cmp	r6, #0
 800c670:	d140      	bne.n	800c6f4 <_malloc_r+0xcc>
 800c672:	6823      	ldr	r3, [r4, #0]
 800c674:	4631      	mov	r1, r6
 800c676:	4638      	mov	r0, r7
 800c678:	eb04 0803 	add.w	r8, r4, r3
 800c67c:	f000 f848 	bl	800c710 <_sbrk_r>
 800c680:	4580      	cmp	r8, r0
 800c682:	d13a      	bne.n	800c6fa <_malloc_r+0xd2>
 800c684:	6821      	ldr	r1, [r4, #0]
 800c686:	3503      	adds	r5, #3
 800c688:	1a6d      	subs	r5, r5, r1
 800c68a:	f025 0503 	bic.w	r5, r5, #3
 800c68e:	3508      	adds	r5, #8
 800c690:	2d0c      	cmp	r5, #12
 800c692:	bf38      	it	cc
 800c694:	250c      	movcc	r5, #12
 800c696:	4629      	mov	r1, r5
 800c698:	4638      	mov	r0, r7
 800c69a:	f7ff ffa5 	bl	800c5e8 <sbrk_aligned>
 800c69e:	3001      	adds	r0, #1
 800c6a0:	d02b      	beq.n	800c6fa <_malloc_r+0xd2>
 800c6a2:	6823      	ldr	r3, [r4, #0]
 800c6a4:	442b      	add	r3, r5
 800c6a6:	6023      	str	r3, [r4, #0]
 800c6a8:	e00e      	b.n	800c6c8 <_malloc_r+0xa0>
 800c6aa:	6822      	ldr	r2, [r4, #0]
 800c6ac:	1b52      	subs	r2, r2, r5
 800c6ae:	d41e      	bmi.n	800c6ee <_malloc_r+0xc6>
 800c6b0:	2a0b      	cmp	r2, #11
 800c6b2:	d916      	bls.n	800c6e2 <_malloc_r+0xba>
 800c6b4:	1961      	adds	r1, r4, r5
 800c6b6:	42a3      	cmp	r3, r4
 800c6b8:	6025      	str	r5, [r4, #0]
 800c6ba:	bf18      	it	ne
 800c6bc:	6059      	strne	r1, [r3, #4]
 800c6be:	6863      	ldr	r3, [r4, #4]
 800c6c0:	bf08      	it	eq
 800c6c2:	6031      	streq	r1, [r6, #0]
 800c6c4:	5162      	str	r2, [r4, r5]
 800c6c6:	604b      	str	r3, [r1, #4]
 800c6c8:	4638      	mov	r0, r7
 800c6ca:	f104 060b 	add.w	r6, r4, #11
 800c6ce:	f000 f8cf 	bl	800c870 <__malloc_unlock>
 800c6d2:	f026 0607 	bic.w	r6, r6, #7
 800c6d6:	1d23      	adds	r3, r4, #4
 800c6d8:	1af2      	subs	r2, r6, r3
 800c6da:	d0b6      	beq.n	800c64a <_malloc_r+0x22>
 800c6dc:	1b9b      	subs	r3, r3, r6
 800c6de:	50a3      	str	r3, [r4, r2]
 800c6e0:	e7b3      	b.n	800c64a <_malloc_r+0x22>
 800c6e2:	6862      	ldr	r2, [r4, #4]
 800c6e4:	42a3      	cmp	r3, r4
 800c6e6:	bf0c      	ite	eq
 800c6e8:	6032      	streq	r2, [r6, #0]
 800c6ea:	605a      	strne	r2, [r3, #4]
 800c6ec:	e7ec      	b.n	800c6c8 <_malloc_r+0xa0>
 800c6ee:	4623      	mov	r3, r4
 800c6f0:	6864      	ldr	r4, [r4, #4]
 800c6f2:	e7b2      	b.n	800c65a <_malloc_r+0x32>
 800c6f4:	4634      	mov	r4, r6
 800c6f6:	6876      	ldr	r6, [r6, #4]
 800c6f8:	e7b9      	b.n	800c66e <_malloc_r+0x46>
 800c6fa:	230c      	movs	r3, #12
 800c6fc:	603b      	str	r3, [r7, #0]
 800c6fe:	4638      	mov	r0, r7
 800c700:	f000 f8b6 	bl	800c870 <__malloc_unlock>
 800c704:	e7a1      	b.n	800c64a <_malloc_r+0x22>
 800c706:	6025      	str	r5, [r4, #0]
 800c708:	e7de      	b.n	800c6c8 <_malloc_r+0xa0>
 800c70a:	bf00      	nop
 800c70c:	20002448 	.word	0x20002448

0800c710 <_sbrk_r>:
 800c710:	b538      	push	{r3, r4, r5, lr}
 800c712:	4d06      	ldr	r5, [pc, #24]	; (800c72c <_sbrk_r+0x1c>)
 800c714:	2300      	movs	r3, #0
 800c716:	4604      	mov	r4, r0
 800c718:	4608      	mov	r0, r1
 800c71a:	602b      	str	r3, [r5, #0]
 800c71c:	f7f5 fe32 	bl	8002384 <_sbrk>
 800c720:	1c43      	adds	r3, r0, #1
 800c722:	d102      	bne.n	800c72a <_sbrk_r+0x1a>
 800c724:	682b      	ldr	r3, [r5, #0]
 800c726:	b103      	cbz	r3, 800c72a <_sbrk_r+0x1a>
 800c728:	6023      	str	r3, [r4, #0]
 800c72a:	bd38      	pop	{r3, r4, r5, pc}
 800c72c:	20002450 	.word	0x20002450

0800c730 <__sread>:
 800c730:	b510      	push	{r4, lr}
 800c732:	460c      	mov	r4, r1
 800c734:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c738:	f000 f8a0 	bl	800c87c <_read_r>
 800c73c:	2800      	cmp	r0, #0
 800c73e:	bfab      	itete	ge
 800c740:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c742:	89a3      	ldrhlt	r3, [r4, #12]
 800c744:	181b      	addge	r3, r3, r0
 800c746:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c74a:	bfac      	ite	ge
 800c74c:	6563      	strge	r3, [r4, #84]	; 0x54
 800c74e:	81a3      	strhlt	r3, [r4, #12]
 800c750:	bd10      	pop	{r4, pc}

0800c752 <__swrite>:
 800c752:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c756:	461f      	mov	r7, r3
 800c758:	898b      	ldrh	r3, [r1, #12]
 800c75a:	05db      	lsls	r3, r3, #23
 800c75c:	4605      	mov	r5, r0
 800c75e:	460c      	mov	r4, r1
 800c760:	4616      	mov	r6, r2
 800c762:	d505      	bpl.n	800c770 <__swrite+0x1e>
 800c764:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c768:	2302      	movs	r3, #2
 800c76a:	2200      	movs	r2, #0
 800c76c:	f000 f868 	bl	800c840 <_lseek_r>
 800c770:	89a3      	ldrh	r3, [r4, #12]
 800c772:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c776:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c77a:	81a3      	strh	r3, [r4, #12]
 800c77c:	4632      	mov	r2, r6
 800c77e:	463b      	mov	r3, r7
 800c780:	4628      	mov	r0, r5
 800c782:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c786:	f000 b817 	b.w	800c7b8 <_write_r>

0800c78a <__sseek>:
 800c78a:	b510      	push	{r4, lr}
 800c78c:	460c      	mov	r4, r1
 800c78e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c792:	f000 f855 	bl	800c840 <_lseek_r>
 800c796:	1c43      	adds	r3, r0, #1
 800c798:	89a3      	ldrh	r3, [r4, #12]
 800c79a:	bf15      	itete	ne
 800c79c:	6560      	strne	r0, [r4, #84]	; 0x54
 800c79e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c7a2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c7a6:	81a3      	strheq	r3, [r4, #12]
 800c7a8:	bf18      	it	ne
 800c7aa:	81a3      	strhne	r3, [r4, #12]
 800c7ac:	bd10      	pop	{r4, pc}

0800c7ae <__sclose>:
 800c7ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c7b2:	f000 b813 	b.w	800c7dc <_close_r>
	...

0800c7b8 <_write_r>:
 800c7b8:	b538      	push	{r3, r4, r5, lr}
 800c7ba:	4d07      	ldr	r5, [pc, #28]	; (800c7d8 <_write_r+0x20>)
 800c7bc:	4604      	mov	r4, r0
 800c7be:	4608      	mov	r0, r1
 800c7c0:	4611      	mov	r1, r2
 800c7c2:	2200      	movs	r2, #0
 800c7c4:	602a      	str	r2, [r5, #0]
 800c7c6:	461a      	mov	r2, r3
 800c7c8:	f7f5 fb80 	bl	8001ecc <_write>
 800c7cc:	1c43      	adds	r3, r0, #1
 800c7ce:	d102      	bne.n	800c7d6 <_write_r+0x1e>
 800c7d0:	682b      	ldr	r3, [r5, #0]
 800c7d2:	b103      	cbz	r3, 800c7d6 <_write_r+0x1e>
 800c7d4:	6023      	str	r3, [r4, #0]
 800c7d6:	bd38      	pop	{r3, r4, r5, pc}
 800c7d8:	20002450 	.word	0x20002450

0800c7dc <_close_r>:
 800c7dc:	b538      	push	{r3, r4, r5, lr}
 800c7de:	4d06      	ldr	r5, [pc, #24]	; (800c7f8 <_close_r+0x1c>)
 800c7e0:	2300      	movs	r3, #0
 800c7e2:	4604      	mov	r4, r0
 800c7e4:	4608      	mov	r0, r1
 800c7e6:	602b      	str	r3, [r5, #0]
 800c7e8:	f7f5 fb9c 	bl	8001f24 <_close>
 800c7ec:	1c43      	adds	r3, r0, #1
 800c7ee:	d102      	bne.n	800c7f6 <_close_r+0x1a>
 800c7f0:	682b      	ldr	r3, [r5, #0]
 800c7f2:	b103      	cbz	r3, 800c7f6 <_close_r+0x1a>
 800c7f4:	6023      	str	r3, [r4, #0]
 800c7f6:	bd38      	pop	{r3, r4, r5, pc}
 800c7f8:	20002450 	.word	0x20002450

0800c7fc <_fstat_r>:
 800c7fc:	b538      	push	{r3, r4, r5, lr}
 800c7fe:	4d07      	ldr	r5, [pc, #28]	; (800c81c <_fstat_r+0x20>)
 800c800:	2300      	movs	r3, #0
 800c802:	4604      	mov	r4, r0
 800c804:	4608      	mov	r0, r1
 800c806:	4611      	mov	r1, r2
 800c808:	602b      	str	r3, [r5, #0]
 800c80a:	f7f5 fbdb 	bl	8001fc4 <_fstat>
 800c80e:	1c43      	adds	r3, r0, #1
 800c810:	d102      	bne.n	800c818 <_fstat_r+0x1c>
 800c812:	682b      	ldr	r3, [r5, #0]
 800c814:	b103      	cbz	r3, 800c818 <_fstat_r+0x1c>
 800c816:	6023      	str	r3, [r4, #0]
 800c818:	bd38      	pop	{r3, r4, r5, pc}
 800c81a:	bf00      	nop
 800c81c:	20002450 	.word	0x20002450

0800c820 <_isatty_r>:
 800c820:	b538      	push	{r3, r4, r5, lr}
 800c822:	4d06      	ldr	r5, [pc, #24]	; (800c83c <_isatty_r+0x1c>)
 800c824:	2300      	movs	r3, #0
 800c826:	4604      	mov	r4, r0
 800c828:	4608      	mov	r0, r1
 800c82a:	602b      	str	r3, [r5, #0]
 800c82c:	f7f5 fb38 	bl	8001ea0 <_isatty>
 800c830:	1c43      	adds	r3, r0, #1
 800c832:	d102      	bne.n	800c83a <_isatty_r+0x1a>
 800c834:	682b      	ldr	r3, [r5, #0]
 800c836:	b103      	cbz	r3, 800c83a <_isatty_r+0x1a>
 800c838:	6023      	str	r3, [r4, #0]
 800c83a:	bd38      	pop	{r3, r4, r5, pc}
 800c83c:	20002450 	.word	0x20002450

0800c840 <_lseek_r>:
 800c840:	b538      	push	{r3, r4, r5, lr}
 800c842:	4d07      	ldr	r5, [pc, #28]	; (800c860 <_lseek_r+0x20>)
 800c844:	4604      	mov	r4, r0
 800c846:	4608      	mov	r0, r1
 800c848:	4611      	mov	r1, r2
 800c84a:	2200      	movs	r2, #0
 800c84c:	602a      	str	r2, [r5, #0]
 800c84e:	461a      	mov	r2, r3
 800c850:	f7f5 fb7f 	bl	8001f52 <_lseek>
 800c854:	1c43      	adds	r3, r0, #1
 800c856:	d102      	bne.n	800c85e <_lseek_r+0x1e>
 800c858:	682b      	ldr	r3, [r5, #0]
 800c85a:	b103      	cbz	r3, 800c85e <_lseek_r+0x1e>
 800c85c:	6023      	str	r3, [r4, #0]
 800c85e:	bd38      	pop	{r3, r4, r5, pc}
 800c860:	20002450 	.word	0x20002450

0800c864 <__malloc_lock>:
 800c864:	4801      	ldr	r0, [pc, #4]	; (800c86c <__malloc_lock+0x8>)
 800c866:	f7ff be03 	b.w	800c470 <__retarget_lock_acquire_recursive>
 800c86a:	bf00      	nop
 800c86c:	20002444 	.word	0x20002444

0800c870 <__malloc_unlock>:
 800c870:	4801      	ldr	r0, [pc, #4]	; (800c878 <__malloc_unlock+0x8>)
 800c872:	f7ff bdfe 	b.w	800c472 <__retarget_lock_release_recursive>
 800c876:	bf00      	nop
 800c878:	20002444 	.word	0x20002444

0800c87c <_read_r>:
 800c87c:	b538      	push	{r3, r4, r5, lr}
 800c87e:	4d07      	ldr	r5, [pc, #28]	; (800c89c <_read_r+0x20>)
 800c880:	4604      	mov	r4, r0
 800c882:	4608      	mov	r0, r1
 800c884:	4611      	mov	r1, r2
 800c886:	2200      	movs	r2, #0
 800c888:	602a      	str	r2, [r5, #0]
 800c88a:	461a      	mov	r2, r3
 800c88c:	f7f5 fb72 	bl	8001f74 <_read>
 800c890:	1c43      	adds	r3, r0, #1
 800c892:	d102      	bne.n	800c89a <_read_r+0x1e>
 800c894:	682b      	ldr	r3, [r5, #0]
 800c896:	b103      	cbz	r3, 800c89a <_read_r+0x1e>
 800c898:	6023      	str	r3, [r4, #0]
 800c89a:	bd38      	pop	{r3, r4, r5, pc}
 800c89c:	20002450 	.word	0x20002450

0800c8a0 <_init>:
 800c8a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c8a2:	bf00      	nop
 800c8a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c8a6:	bc08      	pop	{r3}
 800c8a8:	469e      	mov	lr, r3
 800c8aa:	4770      	bx	lr

0800c8ac <_fini>:
 800c8ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c8ae:	bf00      	nop
 800c8b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c8b2:	bc08      	pop	{r3}
 800c8b4:	469e      	mov	lr, r3
 800c8b6:	4770      	bx	lr
