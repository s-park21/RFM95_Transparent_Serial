
RFM95_Transparent_Serial.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a554  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f8  0800a6dc  0800a6dc  0001a6dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a7d4  0800a7d4  00020168  2**0
                  CONTENTS
  4 .ARM          00000008  0800a7d4  0800a7d4  0001a7d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a7dc  0800a7dc  00020168  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a7dc  0800a7dc  0001a7dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a7e0  0800a7e0  0001a7e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000168  20000000  0800a7e4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020168  2**0
                  CONTENTS
 10 .bss          0000205c  20000168  20000168  00020168  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200021c4  200021c4  00020168  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020168  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001719f  00000000  00000000  00020198  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000037cc  00000000  00000000  00037337  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001130  00000000  00000000  0003ab08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000fc8  00000000  00000000  0003bc38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022fae  00000000  00000000  0003cc00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00016335  00000000  00000000  0005fbae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000bfe9f  00000000  00000000  00075ee3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00135d82  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004c48  00000000  00000000  00135dd4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000168 	.word	0x20000168
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800a6c4 	.word	0x0800a6c4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000016c 	.word	0x2000016c
 80001c4:	0800a6c4 	.word	0x0800a6c4

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b974 	b.w	80004c8 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468e      	mov	lr, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14d      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000206:	428a      	cmp	r2, r1
 8000208:	4694      	mov	ip, r2
 800020a:	d969      	bls.n	80002e0 <__udivmoddi4+0xe8>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b152      	cbz	r2, 8000228 <__udivmoddi4+0x30>
 8000212:	fa01 f302 	lsl.w	r3, r1, r2
 8000216:	f1c2 0120 	rsb	r1, r2, #32
 800021a:	fa20 f101 	lsr.w	r1, r0, r1
 800021e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000222:	ea41 0e03 	orr.w	lr, r1, r3
 8000226:	4094      	lsls	r4, r2
 8000228:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800022c:	0c21      	lsrs	r1, r4, #16
 800022e:	fbbe f6f8 	udiv	r6, lr, r8
 8000232:	fa1f f78c 	uxth.w	r7, ip
 8000236:	fb08 e316 	mls	r3, r8, r6, lr
 800023a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800023e:	fb06 f107 	mul.w	r1, r6, r7
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f106 30ff 	add.w	r0, r6, #4294967295
 800024e:	f080 811f 	bcs.w	8000490 <__udivmoddi4+0x298>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 811c 	bls.w	8000490 <__udivmoddi4+0x298>
 8000258:	3e02      	subs	r6, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0f8 	udiv	r0, r3, r8
 8000264:	fb08 3310 	mls	r3, r8, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 f707 	mul.w	r7, r0, r7
 8000270:	42a7      	cmp	r7, r4
 8000272:	d90a      	bls.n	800028a <__udivmoddi4+0x92>
 8000274:	eb1c 0404 	adds.w	r4, ip, r4
 8000278:	f100 33ff 	add.w	r3, r0, #4294967295
 800027c:	f080 810a 	bcs.w	8000494 <__udivmoddi4+0x29c>
 8000280:	42a7      	cmp	r7, r4
 8000282:	f240 8107 	bls.w	8000494 <__udivmoddi4+0x29c>
 8000286:	4464      	add	r4, ip
 8000288:	3802      	subs	r0, #2
 800028a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800028e:	1be4      	subs	r4, r4, r7
 8000290:	2600      	movs	r6, #0
 8000292:	b11d      	cbz	r5, 800029c <__udivmoddi4+0xa4>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c5 4300 	strd	r4, r3, [r5]
 800029c:	4631      	mov	r1, r6
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d909      	bls.n	80002ba <__udivmoddi4+0xc2>
 80002a6:	2d00      	cmp	r5, #0
 80002a8:	f000 80ef 	beq.w	800048a <__udivmoddi4+0x292>
 80002ac:	2600      	movs	r6, #0
 80002ae:	e9c5 0100 	strd	r0, r1, [r5]
 80002b2:	4630      	mov	r0, r6
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	fab3 f683 	clz	r6, r3
 80002be:	2e00      	cmp	r6, #0
 80002c0:	d14a      	bne.n	8000358 <__udivmoddi4+0x160>
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xd4>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 80f9 	bhi.w	80004be <__udivmoddi4+0x2c6>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb61 0303 	sbc.w	r3, r1, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	469e      	mov	lr, r3
 80002d6:	2d00      	cmp	r5, #0
 80002d8:	d0e0      	beq.n	800029c <__udivmoddi4+0xa4>
 80002da:	e9c5 4e00 	strd	r4, lr, [r5]
 80002de:	e7dd      	b.n	800029c <__udivmoddi4+0xa4>
 80002e0:	b902      	cbnz	r2, 80002e4 <__udivmoddi4+0xec>
 80002e2:	deff      	udf	#255	; 0xff
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	2a00      	cmp	r2, #0
 80002ea:	f040 8092 	bne.w	8000412 <__udivmoddi4+0x21a>
 80002ee:	eba1 010c 	sub.w	r1, r1, ip
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2601      	movs	r6, #1
 80002fc:	0c20      	lsrs	r0, r4, #16
 80002fe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000302:	fb07 1113 	mls	r1, r7, r3, r1
 8000306:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800030a:	fb0e f003 	mul.w	r0, lr, r3
 800030e:	4288      	cmp	r0, r1
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x12c>
 8000312:	eb1c 0101 	adds.w	r1, ip, r1
 8000316:	f103 38ff 	add.w	r8, r3, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x12a>
 800031c:	4288      	cmp	r0, r1
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2c0>
 8000322:	4643      	mov	r3, r8
 8000324:	1a09      	subs	r1, r1, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb1 f0f7 	udiv	r0, r1, r7
 800032c:	fb07 1110 	mls	r1, r7, r0, r1
 8000330:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x156>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 31ff 	add.w	r1, r0, #4294967295
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x154>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 800034c:	4608      	mov	r0, r1
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000356:	e79c      	b.n	8000292 <__udivmoddi4+0x9a>
 8000358:	f1c6 0720 	rsb	r7, r6, #32
 800035c:	40b3      	lsls	r3, r6
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa20 f407 	lsr.w	r4, r0, r7
 800036a:	fa01 f306 	lsl.w	r3, r1, r6
 800036e:	431c      	orrs	r4, r3
 8000370:	40f9      	lsrs	r1, r7
 8000372:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000376:	fa00 f306 	lsl.w	r3, r0, r6
 800037a:	fbb1 f8f9 	udiv	r8, r1, r9
 800037e:	0c20      	lsrs	r0, r4, #16
 8000380:	fa1f fe8c 	uxth.w	lr, ip
 8000384:	fb09 1118 	mls	r1, r9, r8, r1
 8000388:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800038c:	fb08 f00e 	mul.w	r0, r8, lr
 8000390:	4288      	cmp	r0, r1
 8000392:	fa02 f206 	lsl.w	r2, r2, r6
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b8>
 8000398:	eb1c 0101 	adds.w	r1, ip, r1
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2bc>
 80003a4:	4288      	cmp	r0, r1
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2bc>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4461      	add	r1, ip
 80003b0:	1a09      	subs	r1, r1, r0
 80003b2:	b2a4      	uxth	r4, r4
 80003b4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003b8:	fb09 1110 	mls	r1, r9, r0, r1
 80003bc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c4:	458e      	cmp	lr, r1
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1e2>
 80003c8:	eb1c 0101 	adds.w	r1, ip, r1
 80003cc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2b4>
 80003d2:	458e      	cmp	lr, r1
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2b4>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4461      	add	r1, ip
 80003da:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003de:	fba0 9402 	umull	r9, r4, r0, r2
 80003e2:	eba1 010e 	sub.w	r1, r1, lr
 80003e6:	42a1      	cmp	r1, r4
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46a6      	mov	lr, r4
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x2a4>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x2a0>
 80003f0:	b15d      	cbz	r5, 800040a <__udivmoddi4+0x212>
 80003f2:	ebb3 0208 	subs.w	r2, r3, r8
 80003f6:	eb61 010e 	sbc.w	r1, r1, lr
 80003fa:	fa01 f707 	lsl.w	r7, r1, r7
 80003fe:	fa22 f306 	lsr.w	r3, r2, r6
 8000402:	40f1      	lsrs	r1, r6
 8000404:	431f      	orrs	r7, r3
 8000406:	e9c5 7100 	strd	r7, r1, [r5]
 800040a:	2600      	movs	r6, #0
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	f1c2 0320 	rsb	r3, r2, #32
 8000416:	40d8      	lsrs	r0, r3
 8000418:	fa0c fc02 	lsl.w	ip, ip, r2
 800041c:	fa21 f303 	lsr.w	r3, r1, r3
 8000420:	4091      	lsls	r1, r2
 8000422:	4301      	orrs	r1, r0
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000430:	fb07 3610 	mls	r6, r7, r0, r3
 8000434:	0c0b      	lsrs	r3, r1, #16
 8000436:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800043a:	fb00 f60e 	mul.w	r6, r0, lr
 800043e:	429e      	cmp	r6, r3
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x260>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 38ff 	add.w	r8, r0, #4294967295
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b8>
 8000450:	429e      	cmp	r6, r3
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b8>
 8000454:	3802      	subs	r0, #2
 8000456:	4463      	add	r3, ip
 8000458:	1b9b      	subs	r3, r3, r6
 800045a:	b289      	uxth	r1, r1
 800045c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000460:	fb07 3316 	mls	r3, r7, r6, r3
 8000464:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000468:	fb06 f30e 	mul.w	r3, r6, lr
 800046c:	428b      	cmp	r3, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x28a>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f106 38ff 	add.w	r8, r6, #4294967295
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 800047a:	428b      	cmp	r3, r1
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800047e:	3e02      	subs	r6, #2
 8000480:	4461      	add	r1, ip
 8000482:	1ac9      	subs	r1, r1, r3
 8000484:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0x104>
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e705      	b.n	800029c <__udivmoddi4+0xa4>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e3      	b.n	800025c <__udivmoddi4+0x64>
 8000494:	4618      	mov	r0, r3
 8000496:	e6f8      	b.n	800028a <__udivmoddi4+0x92>
 8000498:	454b      	cmp	r3, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f8>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f8>
 80004a8:	4646      	mov	r6, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x28a>
 80004ac:	4620      	mov	r0, r4
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1e2>
 80004b0:	4640      	mov	r0, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x260>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b8>
 80004b8:	3b02      	subs	r3, #2
 80004ba:	4461      	add	r1, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x12c>
 80004be:	4630      	mov	r0, r6
 80004c0:	e709      	b.n	80002d6 <__udivmoddi4+0xde>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x156>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <newLoRa>:
										  |    spreading factor = 7				       |
											|           bandwidth = 125 KHz        |
											| 		    coding rate = 4/5            |
											----------------------------------------
\* ----------------------------------------------------------------------------- */
LoRa newLoRa(){
 80004cc:	b4b0      	push	{r4, r5, r7}
 80004ce:	b08f      	sub	sp, #60	; 0x3c
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	6078      	str	r0, [r7, #4]
	LoRa new_LoRa;

	new_LoRa.frequency             = 433       ;
 80004d4:	f240 13b1 	movw	r3, #433	; 0x1b1
 80004d8:	62fb      	str	r3, [r7, #44]	; 0x2c
	new_LoRa.spredingFactor        = SF_7      ;
 80004da:	2307      	movs	r3, #7
 80004dc:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
	new_LoRa.bandWidth			   = BW_125KHz ;
 80004e0:	2307      	movs	r3, #7
 80004e2:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
	new_LoRa.crcRate               = CR_4_5    ;
 80004e6:	2301      	movs	r3, #1
 80004e8:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	new_LoRa.power				   = POWER_20db;
 80004ec:	23ff      	movs	r3, #255	; 0xff
 80004ee:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	new_LoRa.overCurrentProtection = 100       ;
 80004f2:	2364      	movs	r3, #100	; 0x64
 80004f4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	new_LoRa.preamble			   = 8         ;
 80004f8:	2308      	movs	r3, #8
 80004fa:	86bb      	strh	r3, [r7, #52]	; 0x34

	return new_LoRa;
 80004fc:	687b      	ldr	r3, [r7, #4]
 80004fe:	461d      	mov	r5, r3
 8000500:	f107 040c 	add.w	r4, r7, #12
 8000504:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000506:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000508:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800050a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800050c:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8000510:	e885 0007 	stmia.w	r5, {r0, r1, r2}
}
 8000514:	6878      	ldr	r0, [r7, #4]
 8000516:	373c      	adds	r7, #60	; 0x3c
 8000518:	46bd      	mov	sp, r7
 800051a:	bcb0      	pop	{r4, r5, r7}
 800051c:	4770      	bx	lr

0800051e <LoRa_reset>:
		description : reset module
		arguments   :
			LoRa* LoRa --> LoRa object handler
		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_reset(LoRa* _LoRa){
 800051e:	b580      	push	{r7, lr}
 8000520:	b082      	sub	sp, #8
 8000522:	af00      	add	r7, sp, #0
 8000524:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(_LoRa->reset_port, _LoRa->reset_pin, GPIO_PIN_RESET);
 8000526:	687b      	ldr	r3, [r7, #4]
 8000528:	6898      	ldr	r0, [r3, #8]
 800052a:	687b      	ldr	r3, [r7, #4]
 800052c:	899b      	ldrh	r3, [r3, #12]
 800052e:	2200      	movs	r2, #0
 8000530:	4619      	mov	r1, r3
 8000532:	f001 fd15 	bl	8001f60 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000536:	2001      	movs	r0, #1
 8000538:	f001 f9ae 	bl	8001898 <HAL_Delay>
	HAL_GPIO_WritePin(_LoRa->reset_port, _LoRa->reset_pin, GPIO_PIN_SET);
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	6898      	ldr	r0, [r3, #8]
 8000540:	687b      	ldr	r3, [r7, #4]
 8000542:	899b      	ldrh	r3, [r3, #12]
 8000544:	2201      	movs	r2, #1
 8000546:	4619      	mov	r1, r3
 8000548:	f001 fd0a 	bl	8001f60 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 800054c:	2064      	movs	r0, #100	; 0x64
 800054e:	f001 f9a3 	bl	8001898 <HAL_Delay>
}
 8000552:	bf00      	nop
 8000554:	3708      	adds	r7, #8
 8000556:	46bd      	mov	sp, r7
 8000558:	bd80      	pop	{r7, pc}

0800055a <LoRa_gotoMode>:
		arguments   :
			LoRa* LoRa    --> LoRa object handler
			mode	        --> select from defined modes
		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_gotoMode(LoRa* _LoRa, int mode){
 800055a:	b580      	push	{r7, lr}
 800055c:	b084      	sub	sp, #16
 800055e:	af00      	add	r7, sp, #0
 8000560:	6078      	str	r0, [r7, #4]
 8000562:	6039      	str	r1, [r7, #0]
	uint8_t    read;
	uint8_t    data;

	read = LoRa_read(_LoRa, RegOpMode);
 8000564:	2101      	movs	r1, #1
 8000566:	6878      	ldr	r0, [r7, #4]
 8000568:	f000 f99f 	bl	80008aa <LoRa_read>
 800056c:	4603      	mov	r3, r0
 800056e:	73bb      	strb	r3, [r7, #14]
	data = read;
 8000570:	7bbb      	ldrb	r3, [r7, #14]
 8000572:	73fb      	strb	r3, [r7, #15]

	if(mode == SLEEP_MODE){
 8000574:	683b      	ldr	r3, [r7, #0]
 8000576:	2b00      	cmp	r3, #0
 8000578:	d107      	bne.n	800058a <LoRa_gotoMode+0x30>
		data = (read & 0xF8) | 0x00;
 800057a:	7bbb      	ldrb	r3, [r7, #14]
 800057c:	f023 0307 	bic.w	r3, r3, #7
 8000580:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = SLEEP_MODE;
 8000582:	687b      	ldr	r3, [r7, #4]
 8000584:	2200      	movs	r2, #0
 8000586:	61da      	str	r2, [r3, #28]
 8000588:	e03e      	b.n	8000608 <LoRa_gotoMode+0xae>
	}else if (mode == STNBY_MODE){
 800058a:	683b      	ldr	r3, [r7, #0]
 800058c:	2b01      	cmp	r3, #1
 800058e:	d10c      	bne.n	80005aa <LoRa_gotoMode+0x50>
		data = (read & 0xF8) | 0x01;
 8000590:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000594:	f023 0307 	bic.w	r3, r3, #7
 8000598:	b25b      	sxtb	r3, r3
 800059a:	f043 0301 	orr.w	r3, r3, #1
 800059e:	b25b      	sxtb	r3, r3
 80005a0:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = STNBY_MODE;
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	2201      	movs	r2, #1
 80005a6:	61da      	str	r2, [r3, #28]
 80005a8:	e02e      	b.n	8000608 <LoRa_gotoMode+0xae>
	}else if (mode == TRANSMIT_MODE){
 80005aa:	683b      	ldr	r3, [r7, #0]
 80005ac:	2b03      	cmp	r3, #3
 80005ae:	d10c      	bne.n	80005ca <LoRa_gotoMode+0x70>
		data = (read & 0xF8) | 0x03;
 80005b0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80005b4:	f023 0307 	bic.w	r3, r3, #7
 80005b8:	b25b      	sxtb	r3, r3
 80005ba:	f043 0303 	orr.w	r3, r3, #3
 80005be:	b25b      	sxtb	r3, r3
 80005c0:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = TRANSMIT_MODE;
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	2203      	movs	r2, #3
 80005c6:	61da      	str	r2, [r3, #28]
 80005c8:	e01e      	b.n	8000608 <LoRa_gotoMode+0xae>
	}else if (mode == RXCONTIN_MODE){
 80005ca:	683b      	ldr	r3, [r7, #0]
 80005cc:	2b05      	cmp	r3, #5
 80005ce:	d10c      	bne.n	80005ea <LoRa_gotoMode+0x90>
		data = (read & 0xF8) | 0x05;
 80005d0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80005d4:	f023 0307 	bic.w	r3, r3, #7
 80005d8:	b25b      	sxtb	r3, r3
 80005da:	f043 0305 	orr.w	r3, r3, #5
 80005de:	b25b      	sxtb	r3, r3
 80005e0:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = RXCONTIN_MODE;
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	2205      	movs	r2, #5
 80005e6:	61da      	str	r2, [r3, #28]
 80005e8:	e00e      	b.n	8000608 <LoRa_gotoMode+0xae>
	}else if (mode == RXSINGLE_MODE){
 80005ea:	683b      	ldr	r3, [r7, #0]
 80005ec:	2b06      	cmp	r3, #6
 80005ee:	d10b      	bne.n	8000608 <LoRa_gotoMode+0xae>
		data = (read & 0xF8) | 0x06;
 80005f0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80005f4:	f023 0307 	bic.w	r3, r3, #7
 80005f8:	b25b      	sxtb	r3, r3
 80005fa:	f043 0306 	orr.w	r3, r3, #6
 80005fe:	b25b      	sxtb	r3, r3
 8000600:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = RXSINGLE_MODE;
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	2206      	movs	r2, #6
 8000606:	61da      	str	r2, [r3, #28]
	}

	LoRa_write(_LoRa, RegOpMode, data);
 8000608:	7bfb      	ldrb	r3, [r7, #15]
 800060a:	461a      	mov	r2, r3
 800060c:	2101      	movs	r1, #1
 800060e:	6878      	ldr	r0, [r7, #4]
 8000610:	f000 f965 	bl	80008de <LoRa_write>
	//HAL_Delay(10);
}
 8000614:	bf00      	nop
 8000616:	3710      	adds	r7, #16
 8000618:	46bd      	mov	sp, r7
 800061a:	bd80      	pop	{r7, pc}

0800061c <LoRa_readReg>:
														you want to send
			uint8_t* output		--> pointer to the beginning of output array
			uint16_t w_length	--> detemines number of bytes that you want to read
		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_readReg(LoRa* _LoRa, uint8_t* address, uint16_t r_length, uint8_t* output, uint16_t w_length){
 800061c:	b580      	push	{r7, lr}
 800061e:	b084      	sub	sp, #16
 8000620:	af00      	add	r7, sp, #0
 8000622:	60f8      	str	r0, [r7, #12]
 8000624:	60b9      	str	r1, [r7, #8]
 8000626:	603b      	str	r3, [r7, #0]
 8000628:	4613      	mov	r3, r2
 800062a:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_RESET);
 800062c:	68fb      	ldr	r3, [r7, #12]
 800062e:	6818      	ldr	r0, [r3, #0]
 8000630:	68fb      	ldr	r3, [r7, #12]
 8000632:	889b      	ldrh	r3, [r3, #4]
 8000634:	2200      	movs	r2, #0
 8000636:	4619      	mov	r1, r3
 8000638:	f001 fc92 	bl	8001f60 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(_LoRa->hSPIx, address, r_length, TRANSMIT_TIMEOUT);
 800063c:	68fb      	ldr	r3, [r7, #12]
 800063e:	6998      	ldr	r0, [r3, #24]
 8000640:	88fa      	ldrh	r2, [r7, #6]
 8000642:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000646:	68b9      	ldr	r1, [r7, #8]
 8000648:	f003 fc1b 	bl	8003e82 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 800064c:	bf00      	nop
 800064e:	68fb      	ldr	r3, [r7, #12]
 8000650:	699b      	ldr	r3, [r3, #24]
 8000652:	4618      	mov	r0, r3
 8000654:	f004 f804 	bl	8004660 <HAL_SPI_GetState>
 8000658:	4603      	mov	r3, r0
 800065a:	2b01      	cmp	r3, #1
 800065c:	d1f7      	bne.n	800064e <LoRa_readReg+0x32>
		;
	HAL_SPI_Receive(_LoRa->hSPIx, output, w_length, RECEIVE_TIMEOUT);
 800065e:	68fb      	ldr	r3, [r7, #12]
 8000660:	6998      	ldr	r0, [r3, #24]
 8000662:	8b3a      	ldrh	r2, [r7, #24]
 8000664:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000668:	6839      	ldr	r1, [r7, #0]
 800066a:	f003 fd46 	bl	80040fa <HAL_SPI_Receive>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 800066e:	bf00      	nop
 8000670:	68fb      	ldr	r3, [r7, #12]
 8000672:	699b      	ldr	r3, [r3, #24]
 8000674:	4618      	mov	r0, r3
 8000676:	f003 fff3 	bl	8004660 <HAL_SPI_GetState>
 800067a:	4603      	mov	r3, r0
 800067c:	2b01      	cmp	r3, #1
 800067e:	d1f7      	bne.n	8000670 <LoRa_readReg+0x54>
		;
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_SET);
 8000680:	68fb      	ldr	r3, [r7, #12]
 8000682:	6818      	ldr	r0, [r3, #0]
 8000684:	68fb      	ldr	r3, [r7, #12]
 8000686:	889b      	ldrh	r3, [r3, #4]
 8000688:	2201      	movs	r2, #1
 800068a:	4619      	mov	r1, r3
 800068c:	f001 fc68 	bl	8001f60 <HAL_GPIO_WritePin>
}
 8000690:	bf00      	nop
 8000692:	3710      	adds	r7, #16
 8000694:	46bd      	mov	sp, r7
 8000696:	bd80      	pop	{r7, pc}

08000698 <LoRa_writeReg>:
														you want to send
			uint8_t* output		--> pointer to the beginning of values array
			uint16_t w_length	--> detemines number of bytes that you want to send
		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_writeReg(LoRa* _LoRa, uint8_t* address, uint16_t r_length, uint8_t* values, uint16_t w_length){
 8000698:	b580      	push	{r7, lr}
 800069a:	b084      	sub	sp, #16
 800069c:	af00      	add	r7, sp, #0
 800069e:	60f8      	str	r0, [r7, #12]
 80006a0:	60b9      	str	r1, [r7, #8]
 80006a2:	603b      	str	r3, [r7, #0]
 80006a4:	4613      	mov	r3, r2
 80006a6:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_RESET);
 80006a8:	68fb      	ldr	r3, [r7, #12]
 80006aa:	6818      	ldr	r0, [r3, #0]
 80006ac:	68fb      	ldr	r3, [r7, #12]
 80006ae:	889b      	ldrh	r3, [r3, #4]
 80006b0:	2200      	movs	r2, #0
 80006b2:	4619      	mov	r1, r3
 80006b4:	f001 fc54 	bl	8001f60 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(_LoRa->hSPIx, address, r_length, TRANSMIT_TIMEOUT);
 80006b8:	68fb      	ldr	r3, [r7, #12]
 80006ba:	6998      	ldr	r0, [r3, #24]
 80006bc:	88fa      	ldrh	r2, [r7, #6]
 80006be:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80006c2:	68b9      	ldr	r1, [r7, #8]
 80006c4:	f003 fbdd 	bl	8003e82 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 80006c8:	bf00      	nop
 80006ca:	68fb      	ldr	r3, [r7, #12]
 80006cc:	699b      	ldr	r3, [r3, #24]
 80006ce:	4618      	mov	r0, r3
 80006d0:	f003 ffc6 	bl	8004660 <HAL_SPI_GetState>
 80006d4:	4603      	mov	r3, r0
 80006d6:	2b01      	cmp	r3, #1
 80006d8:	d1f7      	bne.n	80006ca <LoRa_writeReg+0x32>
		;
	HAL_SPI_Transmit(_LoRa->hSPIx, values, w_length, TRANSMIT_TIMEOUT);
 80006da:	68fb      	ldr	r3, [r7, #12]
 80006dc:	6998      	ldr	r0, [r3, #24]
 80006de:	8b3a      	ldrh	r2, [r7, #24]
 80006e0:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80006e4:	6839      	ldr	r1, [r7, #0]
 80006e6:	f003 fbcc 	bl	8003e82 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 80006ea:	bf00      	nop
 80006ec:	68fb      	ldr	r3, [r7, #12]
 80006ee:	699b      	ldr	r3, [r3, #24]
 80006f0:	4618      	mov	r0, r3
 80006f2:	f003 ffb5 	bl	8004660 <HAL_SPI_GetState>
 80006f6:	4603      	mov	r3, r0
 80006f8:	2b01      	cmp	r3, #1
 80006fa:	d1f7      	bne.n	80006ec <LoRa_writeReg+0x54>
		;
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_SET);
 80006fc:	68fb      	ldr	r3, [r7, #12]
 80006fe:	6818      	ldr	r0, [r3, #0]
 8000700:	68fb      	ldr	r3, [r7, #12]
 8000702:	889b      	ldrh	r3, [r3, #4]
 8000704:	2201      	movs	r2, #1
 8000706:	4619      	mov	r1, r3
 8000708:	f001 fc2a 	bl	8001f60 <HAL_GPIO_WritePin>
}
 800070c:	bf00      	nop
 800070e:	3710      	adds	r7, #16
 8000710:	46bd      	mov	sp, r7
 8000712:	bd80      	pop	{r7, pc}

08000714 <LoRa_setFrequency>:
		arguments   :
			LoRa* LoRa        --> LoRa object handler
			int   freq        --> desired frequency in MHz unit, e.g 434
		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setFrequency(LoRa* _LoRa, int freq){
 8000714:	b580      	push	{r7, lr}
 8000716:	b084      	sub	sp, #16
 8000718:	af00      	add	r7, sp, #0
 800071a:	6078      	str	r0, [r7, #4]
 800071c:	6039      	str	r1, [r7, #0]
	uint8_t  data;
	uint32_t F;
	F = (freq * 524288)>>5;
 800071e:	683b      	ldr	r3, [r7, #0]
 8000720:	04db      	lsls	r3, r3, #19
 8000722:	115b      	asrs	r3, r3, #5
 8000724:	60fb      	str	r3, [r7, #12]

	// write Msb:
	data = F >> 16;
 8000726:	68fb      	ldr	r3, [r7, #12]
 8000728:	0c1b      	lsrs	r3, r3, #16
 800072a:	72fb      	strb	r3, [r7, #11]
	LoRa_write(_LoRa, RegFrMsb, data);
 800072c:	7afb      	ldrb	r3, [r7, #11]
 800072e:	461a      	mov	r2, r3
 8000730:	2106      	movs	r1, #6
 8000732:	6878      	ldr	r0, [r7, #4]
 8000734:	f000 f8d3 	bl	80008de <LoRa_write>
	HAL_Delay(5);
 8000738:	2005      	movs	r0, #5
 800073a:	f001 f8ad 	bl	8001898 <HAL_Delay>

	// write Mid:
	data = F >> 8;
 800073e:	68fb      	ldr	r3, [r7, #12]
 8000740:	0a1b      	lsrs	r3, r3, #8
 8000742:	72fb      	strb	r3, [r7, #11]
	LoRa_write(_LoRa, RegFrMid, data);
 8000744:	7afb      	ldrb	r3, [r7, #11]
 8000746:	461a      	mov	r2, r3
 8000748:	2107      	movs	r1, #7
 800074a:	6878      	ldr	r0, [r7, #4]
 800074c:	f000 f8c7 	bl	80008de <LoRa_write>
	HAL_Delay(5);
 8000750:	2005      	movs	r0, #5
 8000752:	f001 f8a1 	bl	8001898 <HAL_Delay>

	// write Lsb:
	data = F >> 0;
 8000756:	68fb      	ldr	r3, [r7, #12]
 8000758:	72fb      	strb	r3, [r7, #11]
	LoRa_write(_LoRa, RegFrLsb, data);
 800075a:	7afb      	ldrb	r3, [r7, #11]
 800075c:	461a      	mov	r2, r3
 800075e:	2108      	movs	r1, #8
 8000760:	6878      	ldr	r0, [r7, #4]
 8000762:	f000 f8bc 	bl	80008de <LoRa_write>
	HAL_Delay(5);
 8000766:	2005      	movs	r0, #5
 8000768:	f001 f896 	bl	8001898 <HAL_Delay>
}
 800076c:	bf00      	nop
 800076e:	3710      	adds	r7, #16
 8000770:	46bd      	mov	sp, r7
 8000772:	bd80      	pop	{r7, pc}

08000774 <LoRa_setSpreadingFactor>:
		arguments   :
			LoRa* LoRa        --> LoRa object handler
			int   SP          --> desired spreading factor e.g 7
		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setSpreadingFactor(LoRa* _LoRa, int SF){
 8000774:	b580      	push	{r7, lr}
 8000776:	b084      	sub	sp, #16
 8000778:	af00      	add	r7, sp, #0
 800077a:	6078      	str	r0, [r7, #4]
 800077c:	6039      	str	r1, [r7, #0]
	uint8_t	data;
	uint8_t	read;

	if(SF>12)
 800077e:	683b      	ldr	r3, [r7, #0]
 8000780:	2b0c      	cmp	r3, #12
 8000782:	dd01      	ble.n	8000788 <LoRa_setSpreadingFactor+0x14>
		SF = 12;
 8000784:	230c      	movs	r3, #12
 8000786:	603b      	str	r3, [r7, #0]
	if(SF<7)
 8000788:	683b      	ldr	r3, [r7, #0]
 800078a:	2b06      	cmp	r3, #6
 800078c:	dc01      	bgt.n	8000792 <LoRa_setSpreadingFactor+0x1e>
		SF = 7;
 800078e:	2307      	movs	r3, #7
 8000790:	603b      	str	r3, [r7, #0]

	read = LoRa_read(_LoRa, RegModemConfig2);
 8000792:	211e      	movs	r1, #30
 8000794:	6878      	ldr	r0, [r7, #4]
 8000796:	f000 f888 	bl	80008aa <LoRa_read>
 800079a:	4603      	mov	r3, r0
 800079c:	73fb      	strb	r3, [r7, #15]
	HAL_Delay(10);
 800079e:	200a      	movs	r0, #10
 80007a0:	f001 f87a 	bl	8001898 <HAL_Delay>

	data = (SF << 4) + (read & 0x0F);
 80007a4:	683b      	ldr	r3, [r7, #0]
 80007a6:	b2db      	uxtb	r3, r3
 80007a8:	011b      	lsls	r3, r3, #4
 80007aa:	b2da      	uxtb	r2, r3
 80007ac:	7bfb      	ldrb	r3, [r7, #15]
 80007ae:	f003 030f 	and.w	r3, r3, #15
 80007b2:	b2db      	uxtb	r3, r3
 80007b4:	4413      	add	r3, r2
 80007b6:	73bb      	strb	r3, [r7, #14]
	LoRa_write(_LoRa, RegModemConfig2, data);
 80007b8:	7bbb      	ldrb	r3, [r7, #14]
 80007ba:	461a      	mov	r2, r3
 80007bc:	211e      	movs	r1, #30
 80007be:	6878      	ldr	r0, [r7, #4]
 80007c0:	f000 f88d 	bl	80008de <LoRa_write>
	HAL_Delay(10);
 80007c4:	200a      	movs	r0, #10
 80007c6:	f001 f867 	bl	8001898 <HAL_Delay>
}
 80007ca:	bf00      	nop
 80007cc:	3710      	adds	r7, #16
 80007ce:	46bd      	mov	sp, r7
 80007d0:	bd80      	pop	{r7, pc}

080007d2 <LoRa_setPower>:
		arguments   :
			LoRa* LoRa        --> LoRa object handler
			int   power       --> desired power e.g POWER_17db
		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setPower(LoRa* _LoRa, uint8_t power){
 80007d2:	b580      	push	{r7, lr}
 80007d4:	b082      	sub	sp, #8
 80007d6:	af00      	add	r7, sp, #0
 80007d8:	6078      	str	r0, [r7, #4]
 80007da:	460b      	mov	r3, r1
 80007dc:	70fb      	strb	r3, [r7, #3]
	LoRa_write(_LoRa, RegPaConfig, power);
 80007de:	78fb      	ldrb	r3, [r7, #3]
 80007e0:	461a      	mov	r2, r3
 80007e2:	2109      	movs	r1, #9
 80007e4:	6878      	ldr	r0, [r7, #4]
 80007e6:	f000 f87a 	bl	80008de <LoRa_write>
	HAL_Delay(10);
 80007ea:	200a      	movs	r0, #10
 80007ec:	f001 f854 	bl	8001898 <HAL_Delay>
}
 80007f0:	bf00      	nop
 80007f2:	3708      	adds	r7, #8
 80007f4:	46bd      	mov	sp, r7
 80007f6:	bd80      	pop	{r7, pc}

080007f8 <LoRa_setOCP>:
		arguments   :
			LoRa* LoRa        --> LoRa object handler
			int   current     --> desired max currnet in mA, e.g 120
		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setOCP(LoRa* _LoRa, uint8_t current){
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b084      	sub	sp, #16
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	6078      	str	r0, [r7, #4]
 8000800:	460b      	mov	r3, r1
 8000802:	70fb      	strb	r3, [r7, #3]
	uint8_t	OcpTrim = 0;
 8000804:	2300      	movs	r3, #0
 8000806:	73fb      	strb	r3, [r7, #15]

	if(current<45)
 8000808:	78fb      	ldrb	r3, [r7, #3]
 800080a:	2b2c      	cmp	r3, #44	; 0x2c
 800080c:	d801      	bhi.n	8000812 <LoRa_setOCP+0x1a>
		current = 45;
 800080e:	232d      	movs	r3, #45	; 0x2d
 8000810:	70fb      	strb	r3, [r7, #3]
	if(current>240)
 8000812:	78fb      	ldrb	r3, [r7, #3]
 8000814:	2bf0      	cmp	r3, #240	; 0xf0
 8000816:	d901      	bls.n	800081c <LoRa_setOCP+0x24>
		current = 240;
 8000818:	23f0      	movs	r3, #240	; 0xf0
 800081a:	70fb      	strb	r3, [r7, #3]

	if(current <= 120)
 800081c:	78fb      	ldrb	r3, [r7, #3]
 800081e:	2b78      	cmp	r3, #120	; 0x78
 8000820:	d809      	bhi.n	8000836 <LoRa_setOCP+0x3e>
		OcpTrim = (current - 45)/5;
 8000822:	78fb      	ldrb	r3, [r7, #3]
 8000824:	3b2d      	subs	r3, #45	; 0x2d
 8000826:	4a12      	ldr	r2, [pc, #72]	; (8000870 <LoRa_setOCP+0x78>)
 8000828:	fb82 1203 	smull	r1, r2, r2, r3
 800082c:	1052      	asrs	r2, r2, #1
 800082e:	17db      	asrs	r3, r3, #31
 8000830:	1ad3      	subs	r3, r2, r3
 8000832:	73fb      	strb	r3, [r7, #15]
 8000834:	e00b      	b.n	800084e <LoRa_setOCP+0x56>
	else if(current <= 240)
 8000836:	78fb      	ldrb	r3, [r7, #3]
 8000838:	2bf0      	cmp	r3, #240	; 0xf0
 800083a:	d808      	bhi.n	800084e <LoRa_setOCP+0x56>
		OcpTrim = (current + 30)/10;
 800083c:	78fb      	ldrb	r3, [r7, #3]
 800083e:	331e      	adds	r3, #30
 8000840:	4a0b      	ldr	r2, [pc, #44]	; (8000870 <LoRa_setOCP+0x78>)
 8000842:	fb82 1203 	smull	r1, r2, r2, r3
 8000846:	1092      	asrs	r2, r2, #2
 8000848:	17db      	asrs	r3, r3, #31
 800084a:	1ad3      	subs	r3, r2, r3
 800084c:	73fb      	strb	r3, [r7, #15]

	OcpTrim = OcpTrim + (1 << 5);
 800084e:	7bfb      	ldrb	r3, [r7, #15]
 8000850:	3320      	adds	r3, #32
 8000852:	73fb      	strb	r3, [r7, #15]
	LoRa_write(_LoRa, RegOcp, OcpTrim);
 8000854:	7bfb      	ldrb	r3, [r7, #15]
 8000856:	461a      	mov	r2, r3
 8000858:	210b      	movs	r1, #11
 800085a:	6878      	ldr	r0, [r7, #4]
 800085c:	f000 f83f 	bl	80008de <LoRa_write>
	HAL_Delay(10);
 8000860:	200a      	movs	r0, #10
 8000862:	f001 f819 	bl	8001898 <HAL_Delay>
}
 8000866:	bf00      	nop
 8000868:	3710      	adds	r7, #16
 800086a:	46bd      	mov	sp, r7
 800086c:	bd80      	pop	{r7, pc}
 800086e:	bf00      	nop
 8000870:	66666667 	.word	0x66666667

08000874 <LoRa_setTOMsb_setCRCon>:
		description : set timeout msb to 0xFF + set CRC enable.
		arguments   :
			LoRa* LoRa        --> LoRa object handler
		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setTOMsb_setCRCon(LoRa* _LoRa){
 8000874:	b580      	push	{r7, lr}
 8000876:	b084      	sub	sp, #16
 8000878:	af00      	add	r7, sp, #0
 800087a:	6078      	str	r0, [r7, #4]
	uint8_t read, data;

	read = LoRa_read(_LoRa, RegModemConfig2);
 800087c:	211e      	movs	r1, #30
 800087e:	6878      	ldr	r0, [r7, #4]
 8000880:	f000 f813 	bl	80008aa <LoRa_read>
 8000884:	4603      	mov	r3, r0
 8000886:	73fb      	strb	r3, [r7, #15]

	data = read | 0x07;
 8000888:	7bfb      	ldrb	r3, [r7, #15]
 800088a:	f043 0307 	orr.w	r3, r3, #7
 800088e:	73bb      	strb	r3, [r7, #14]
	LoRa_write(_LoRa, RegModemConfig2, data);\
 8000890:	7bbb      	ldrb	r3, [r7, #14]
 8000892:	461a      	mov	r2, r3
 8000894:	211e      	movs	r1, #30
 8000896:	6878      	ldr	r0, [r7, #4]
 8000898:	f000 f821 	bl	80008de <LoRa_write>
	HAL_Delay(10);
 800089c:	200a      	movs	r0, #10
 800089e:	f000 fffb 	bl	8001898 <HAL_Delay>
}
 80008a2:	bf00      	nop
 80008a4:	3710      	adds	r7, #16
 80008a6:	46bd      	mov	sp, r7
 80008a8:	bd80      	pop	{r7, pc}

080008aa <LoRa_read>:
		arguments   :
			LoRa*   LoRa        --> LoRa object handler
			uint8_t address     -->	address of the register e.g 0x1D
		returns     : register value
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_read(LoRa* _LoRa, uint8_t address){
 80008aa:	b580      	push	{r7, lr}
 80008ac:	b086      	sub	sp, #24
 80008ae:	af02      	add	r7, sp, #8
 80008b0:	6078      	str	r0, [r7, #4]
 80008b2:	460b      	mov	r3, r1
 80008b4:	70fb      	strb	r3, [r7, #3]
	uint8_t read_data;
	uint8_t data_addr;

	data_addr = address & 0x7F;
 80008b6:	78fb      	ldrb	r3, [r7, #3]
 80008b8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80008bc:	b2db      	uxtb	r3, r3
 80008be:	73bb      	strb	r3, [r7, #14]
	LoRa_readReg(_LoRa, &data_addr, 1, &read_data, 1);
 80008c0:	f107 030f 	add.w	r3, r7, #15
 80008c4:	f107 010e 	add.w	r1, r7, #14
 80008c8:	2201      	movs	r2, #1
 80008ca:	9200      	str	r2, [sp, #0]
 80008cc:	2201      	movs	r2, #1
 80008ce:	6878      	ldr	r0, [r7, #4]
 80008d0:	f7ff fea4 	bl	800061c <LoRa_readReg>
	//HAL_Delay(5);

	return read_data;
 80008d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80008d6:	4618      	mov	r0, r3
 80008d8:	3710      	adds	r7, #16
 80008da:	46bd      	mov	sp, r7
 80008dc:	bd80      	pop	{r7, pc}

080008de <LoRa_write>:
			LoRa*   LoRa        --> LoRa object handler
			uint8_t address     -->	address of the register e.g 0x1D
			uint8_t value       --> value that you want to write
		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_write(LoRa* _LoRa, uint8_t address, uint8_t value){
 80008de:	b580      	push	{r7, lr}
 80008e0:	b086      	sub	sp, #24
 80008e2:	af02      	add	r7, sp, #8
 80008e4:	6078      	str	r0, [r7, #4]
 80008e6:	460b      	mov	r3, r1
 80008e8:	70fb      	strb	r3, [r7, #3]
 80008ea:	4613      	mov	r3, r2
 80008ec:	70bb      	strb	r3, [r7, #2]
	uint8_t data;
	uint8_t addr;

	addr = address | 0x80;
 80008ee:	78fb      	ldrb	r3, [r7, #3]
 80008f0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80008f4:	b2db      	uxtb	r3, r3
 80008f6:	73bb      	strb	r3, [r7, #14]
	data = value;
 80008f8:	78bb      	ldrb	r3, [r7, #2]
 80008fa:	73fb      	strb	r3, [r7, #15]
	LoRa_writeReg(_LoRa, &addr, 1, &data, 1);
 80008fc:	f107 030f 	add.w	r3, r7, #15
 8000900:	f107 010e 	add.w	r1, r7, #14
 8000904:	2201      	movs	r2, #1
 8000906:	9200      	str	r2, [sp, #0]
 8000908:	2201      	movs	r2, #1
 800090a:	6878      	ldr	r0, [r7, #4]
 800090c:	f7ff fec4 	bl	8000698 <LoRa_writeReg>
	//HAL_Delay(5);
}
 8000910:	bf00      	nop
 8000912:	3710      	adds	r7, #16
 8000914:	46bd      	mov	sp, r7
 8000916:	bd80      	pop	{r7, pc}

08000918 <LoRa_BurstWrite>:
			LoRa*   LoRa        --> LoRa object handler
			uint8_t address     -->	address of the register e.g 0x1D
			uint8_t *value      --> address of values that you want to write
		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_BurstWrite(LoRa* _LoRa, uint8_t address, uint8_t *value, uint8_t length){
 8000918:	b580      	push	{r7, lr}
 800091a:	b086      	sub	sp, #24
 800091c:	af00      	add	r7, sp, #0
 800091e:	60f8      	str	r0, [r7, #12]
 8000920:	607a      	str	r2, [r7, #4]
 8000922:	461a      	mov	r2, r3
 8000924:	460b      	mov	r3, r1
 8000926:	72fb      	strb	r3, [r7, #11]
 8000928:	4613      	mov	r3, r2
 800092a:	72bb      	strb	r3, [r7, #10]
	uint8_t addr;
	addr = address | 0x80;
 800092c:	7afb      	ldrb	r3, [r7, #11]
 800092e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000932:	b2db      	uxtb	r3, r3
 8000934:	75fb      	strb	r3, [r7, #23]

	//NSS = 1
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_RESET);
 8000936:	68fb      	ldr	r3, [r7, #12]
 8000938:	6818      	ldr	r0, [r3, #0]
 800093a:	68fb      	ldr	r3, [r7, #12]
 800093c:	889b      	ldrh	r3, [r3, #4]
 800093e:	2200      	movs	r2, #0
 8000940:	4619      	mov	r1, r3
 8000942:	f001 fb0d 	bl	8001f60 <HAL_GPIO_WritePin>
	//say module thai I want to write in RegFiFo
	HAL_SPI_Transmit(_LoRa->hSPIx, &addr, 1, TRANSMIT_TIMEOUT);
 8000946:	68fb      	ldr	r3, [r7, #12]
 8000948:	6998      	ldr	r0, [r3, #24]
 800094a:	f107 0117 	add.w	r1, r7, #23
 800094e:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000952:	2201      	movs	r2, #1
 8000954:	f003 fa95 	bl	8003e82 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8000958:	bf00      	nop
 800095a:	68fb      	ldr	r3, [r7, #12]
 800095c:	699b      	ldr	r3, [r3, #24]
 800095e:	4618      	mov	r0, r3
 8000960:	f003 fe7e 	bl	8004660 <HAL_SPI_GetState>
 8000964:	4603      	mov	r3, r0
 8000966:	2b01      	cmp	r3, #1
 8000968:	d1f7      	bne.n	800095a <LoRa_BurstWrite+0x42>
		;
	//Write data in FiFo
	HAL_SPI_Transmit(_LoRa->hSPIx, value, length, TRANSMIT_TIMEOUT);
 800096a:	68fb      	ldr	r3, [r7, #12]
 800096c:	6998      	ldr	r0, [r3, #24]
 800096e:	7abb      	ldrb	r3, [r7, #10]
 8000970:	b29a      	uxth	r2, r3
 8000972:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000976:	6879      	ldr	r1, [r7, #4]
 8000978:	f003 fa83 	bl	8003e82 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 800097c:	bf00      	nop
 800097e:	68fb      	ldr	r3, [r7, #12]
 8000980:	699b      	ldr	r3, [r3, #24]
 8000982:	4618      	mov	r0, r3
 8000984:	f003 fe6c 	bl	8004660 <HAL_SPI_GetState>
 8000988:	4603      	mov	r3, r0
 800098a:	2b01      	cmp	r3, #1
 800098c:	d1f7      	bne.n	800097e <LoRa_BurstWrite+0x66>
		;
	//NSS = 0
	//HAL_Delay(5);
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_SET);
 800098e:	68fb      	ldr	r3, [r7, #12]
 8000990:	6818      	ldr	r0, [r3, #0]
 8000992:	68fb      	ldr	r3, [r7, #12]
 8000994:	889b      	ldrh	r3, [r3, #4]
 8000996:	2201      	movs	r2, #1
 8000998:	4619      	mov	r1, r3
 800099a:	f001 fae1 	bl	8001f60 <HAL_GPIO_WritePin>
}
 800099e:	bf00      	nop
 80009a0:	3718      	adds	r7, #24
 80009a2:	46bd      	mov	sp, r7
 80009a4:	bd80      	pop	{r7, pc}

080009a6 <LoRa_isvalid>:
		description : check the LoRa instruct values
		arguments   :
			LoRa* LoRa --> LoRa object handler
		returns     : returns 1 if all of the values were given, otherwise returns 0
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_isvalid(LoRa* _LoRa){
 80009a6:	b480      	push	{r7}
 80009a8:	b083      	sub	sp, #12
 80009aa:	af00      	add	r7, sp, #0
 80009ac:	6078      	str	r0, [r7, #4]

	return 1;
 80009ae:	2301      	movs	r3, #1
}
 80009b0:	4618      	mov	r0, r3
 80009b2:	370c      	adds	r7, #12
 80009b4:	46bd      	mov	sp, r7
 80009b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ba:	4770      	bx	lr

080009bc <LoRa_transmit>:
			uint8_t  data			--> A pointer to the data you wanna send
			uint8_t	 length   --> Size of your data in Bytes
			uint16_t timeOut	--> Timeout in milliseconds
		returns     : 1 in case of success, 0 in case of timeout
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_transmit(LoRa* _LoRa, uint8_t* data, uint8_t length, uint16_t timeout){
 80009bc:	b580      	push	{r7, lr}
 80009be:	b086      	sub	sp, #24
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	60f8      	str	r0, [r7, #12]
 80009c4:	60b9      	str	r1, [r7, #8]
 80009c6:	4611      	mov	r1, r2
 80009c8:	461a      	mov	r2, r3
 80009ca:	460b      	mov	r3, r1
 80009cc:	71fb      	strb	r3, [r7, #7]
 80009ce:	4613      	mov	r3, r2
 80009d0:	80bb      	strh	r3, [r7, #4]
	uint8_t read;

	int mode = _LoRa->current_mode;
 80009d2:	68fb      	ldr	r3, [r7, #12]
 80009d4:	69db      	ldr	r3, [r3, #28]
 80009d6:	617b      	str	r3, [r7, #20]
	LoRa_gotoMode(_LoRa, STNBY_MODE);
 80009d8:	2101      	movs	r1, #1
 80009da:	68f8      	ldr	r0, [r7, #12]
 80009dc:	f7ff fdbd 	bl	800055a <LoRa_gotoMode>
	read = LoRa_read(_LoRa, RegFiFoTxBaseAddr);
 80009e0:	210e      	movs	r1, #14
 80009e2:	68f8      	ldr	r0, [r7, #12]
 80009e4:	f7ff ff61 	bl	80008aa <LoRa_read>
 80009e8:	4603      	mov	r3, r0
 80009ea:	74fb      	strb	r3, [r7, #19]
	LoRa_write(_LoRa, RegFiFoAddPtr, read);
 80009ec:	7cfb      	ldrb	r3, [r7, #19]
 80009ee:	461a      	mov	r2, r3
 80009f0:	210d      	movs	r1, #13
 80009f2:	68f8      	ldr	r0, [r7, #12]
 80009f4:	f7ff ff73 	bl	80008de <LoRa_write>
	LoRa_write(_LoRa, RegPayloadLength, length);
 80009f8:	79fb      	ldrb	r3, [r7, #7]
 80009fa:	461a      	mov	r2, r3
 80009fc:	2122      	movs	r1, #34	; 0x22
 80009fe:	68f8      	ldr	r0, [r7, #12]
 8000a00:	f7ff ff6d 	bl	80008de <LoRa_write>
	LoRa_BurstWrite(_LoRa, RegFiFo, data, length);
 8000a04:	79fb      	ldrb	r3, [r7, #7]
 8000a06:	68ba      	ldr	r2, [r7, #8]
 8000a08:	2100      	movs	r1, #0
 8000a0a:	68f8      	ldr	r0, [r7, #12]
 8000a0c:	f7ff ff84 	bl	8000918 <LoRa_BurstWrite>
	LoRa_gotoMode(_LoRa, TRANSMIT_MODE);
 8000a10:	2103      	movs	r1, #3
 8000a12:	68f8      	ldr	r0, [r7, #12]
 8000a14:	f7ff fda1 	bl	800055a <LoRa_gotoMode>
	while(1){
		read = LoRa_read(_LoRa, RegIrqFlags);
 8000a18:	2112      	movs	r1, #18
 8000a1a:	68f8      	ldr	r0, [r7, #12]
 8000a1c:	f7ff ff45 	bl	80008aa <LoRa_read>
 8000a20:	4603      	mov	r3, r0
 8000a22:	74fb      	strb	r3, [r7, #19]
		if((read & 0x08)!=0){
 8000a24:	7cfb      	ldrb	r3, [r7, #19]
 8000a26:	f003 0308 	and.w	r3, r3, #8
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d00a      	beq.n	8000a44 <LoRa_transmit+0x88>
			LoRa_write(_LoRa, RegIrqFlags, 0xFF);
 8000a2e:	22ff      	movs	r2, #255	; 0xff
 8000a30:	2112      	movs	r1, #18
 8000a32:	68f8      	ldr	r0, [r7, #12]
 8000a34:	f7ff ff53 	bl	80008de <LoRa_write>
			LoRa_gotoMode(_LoRa, mode);
 8000a38:	6979      	ldr	r1, [r7, #20]
 8000a3a:	68f8      	ldr	r0, [r7, #12]
 8000a3c:	f7ff fd8d 	bl	800055a <LoRa_gotoMode>
			return 1;
 8000a40:	2301      	movs	r3, #1
 8000a42:	e00f      	b.n	8000a64 <LoRa_transmit+0xa8>
		}
		else{
			if(--timeout==0){
 8000a44:	88bb      	ldrh	r3, [r7, #4]
 8000a46:	3b01      	subs	r3, #1
 8000a48:	80bb      	strh	r3, [r7, #4]
 8000a4a:	88bb      	ldrh	r3, [r7, #4]
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d105      	bne.n	8000a5c <LoRa_transmit+0xa0>
				LoRa_gotoMode(_LoRa, mode);
 8000a50:	6979      	ldr	r1, [r7, #20]
 8000a52:	68f8      	ldr	r0, [r7, #12]
 8000a54:	f7ff fd81 	bl	800055a <LoRa_gotoMode>
				return 0;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	e003      	b.n	8000a64 <LoRa_transmit+0xa8>
			}
		}
		HAL_Delay(1);
 8000a5c:	2001      	movs	r0, #1
 8000a5e:	f000 ff1b 	bl	8001898 <HAL_Delay>
		read = LoRa_read(_LoRa, RegIrqFlags);
 8000a62:	e7d9      	b.n	8000a18 <LoRa_transmit+0x5c>
	}

}
 8000a64:	4618      	mov	r0, r3
 8000a66:	3718      	adds	r7, #24
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	bd80      	pop	{r7, pc}

08000a6c <LoRa_startReceiving>:
		description : Start receiving continuously
		arguments   :
			LoRa*    LoRa     --> LoRa object handler
		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_startReceiving(LoRa* _LoRa){
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b082      	sub	sp, #8
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	6078      	str	r0, [r7, #4]
	LoRa_gotoMode(_LoRa, RXCONTIN_MODE);
 8000a74:	2105      	movs	r1, #5
 8000a76:	6878      	ldr	r0, [r7, #4]
 8000a78:	f7ff fd6f 	bl	800055a <LoRa_gotoMode>
}
 8000a7c:	bf00      	nop
 8000a7e:	3708      	adds	r7, #8
 8000a80:	46bd      	mov	sp, r7
 8000a82:	bd80      	pop	{r7, pc}

08000a84 <LoRa_receive>:
			LoRa*    LoRa     --> LoRa object handler
			uint8_t  data			--> A pointer to the array that you want to write bytes in it
			uint8_t	 length   --> Determines how many bytes you want to read
		returns     : The number of bytes received
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_receive(LoRa* _LoRa, uint8_t* data, uint8_t length){
 8000a84:	b590      	push	{r4, r7, lr}
 8000a86:	b089      	sub	sp, #36	; 0x24
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	60f8      	str	r0, [r7, #12]
 8000a8c:	60b9      	str	r1, [r7, #8]
 8000a8e:	4613      	mov	r3, r2
 8000a90:	71fb      	strb	r3, [r7, #7]
	uint8_t read;
	uint8_t number_of_bytes;
	uint8_t min = 0;
 8000a92:	2300      	movs	r3, #0
 8000a94:	77fb      	strb	r3, [r7, #31]

	for(int i=0; i<length; i++)
 8000a96:	2300      	movs	r3, #0
 8000a98:	61bb      	str	r3, [r7, #24]
 8000a9a:	e007      	b.n	8000aac <LoRa_receive+0x28>
		data[i]=0;
 8000a9c:	69bb      	ldr	r3, [r7, #24]
 8000a9e:	68ba      	ldr	r2, [r7, #8]
 8000aa0:	4413      	add	r3, r2
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	701a      	strb	r2, [r3, #0]
	for(int i=0; i<length; i++)
 8000aa6:	69bb      	ldr	r3, [r7, #24]
 8000aa8:	3301      	adds	r3, #1
 8000aaa:	61bb      	str	r3, [r7, #24]
 8000aac:	79fb      	ldrb	r3, [r7, #7]
 8000aae:	69ba      	ldr	r2, [r7, #24]
 8000ab0:	429a      	cmp	r2, r3
 8000ab2:	dbf3      	blt.n	8000a9c <LoRa_receive+0x18>

	LoRa_gotoMode(_LoRa, STNBY_MODE);
 8000ab4:	2101      	movs	r1, #1
 8000ab6:	68f8      	ldr	r0, [r7, #12]
 8000ab8:	f7ff fd4f 	bl	800055a <LoRa_gotoMode>
	read = LoRa_read(_LoRa, RegIrqFlags);
 8000abc:	2112      	movs	r1, #18
 8000abe:	68f8      	ldr	r0, [r7, #12]
 8000ac0:	f7ff fef3 	bl	80008aa <LoRa_read>
 8000ac4:	4603      	mov	r3, r0
 8000ac6:	74fb      	strb	r3, [r7, #19]
	if((read & 0x40) != 0){
 8000ac8:	7cfb      	ldrb	r3, [r7, #19]
 8000aca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d02f      	beq.n	8000b32 <LoRa_receive+0xae>
		LoRa_write(_LoRa, RegIrqFlags, 0xFF);
 8000ad2:	22ff      	movs	r2, #255	; 0xff
 8000ad4:	2112      	movs	r1, #18
 8000ad6:	68f8      	ldr	r0, [r7, #12]
 8000ad8:	f7ff ff01 	bl	80008de <LoRa_write>
		number_of_bytes = LoRa_read(_LoRa, RegRxNbBytes);
 8000adc:	2113      	movs	r1, #19
 8000ade:	68f8      	ldr	r0, [r7, #12]
 8000ae0:	f7ff fee3 	bl	80008aa <LoRa_read>
 8000ae4:	4603      	mov	r3, r0
 8000ae6:	74bb      	strb	r3, [r7, #18]
		read = LoRa_read(_LoRa, RegFiFoRxCurrentAddr);
 8000ae8:	2110      	movs	r1, #16
 8000aea:	68f8      	ldr	r0, [r7, #12]
 8000aec:	f7ff fedd 	bl	80008aa <LoRa_read>
 8000af0:	4603      	mov	r3, r0
 8000af2:	74fb      	strb	r3, [r7, #19]
		LoRa_write(_LoRa, RegFiFoAddPtr, read);
 8000af4:	7cfb      	ldrb	r3, [r7, #19]
 8000af6:	461a      	mov	r2, r3
 8000af8:	210d      	movs	r1, #13
 8000afa:	68f8      	ldr	r0, [r7, #12]
 8000afc:	f7ff feef 	bl	80008de <LoRa_write>
		min = length >= number_of_bytes ? number_of_bytes : length;
 8000b00:	7cba      	ldrb	r2, [r7, #18]
 8000b02:	79fb      	ldrb	r3, [r7, #7]
 8000b04:	4293      	cmp	r3, r2
 8000b06:	bf28      	it	cs
 8000b08:	4613      	movcs	r3, r2
 8000b0a:	77fb      	strb	r3, [r7, #31]
		for(int i=0; i<min; i++)
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	617b      	str	r3, [r7, #20]
 8000b10:	e00b      	b.n	8000b2a <LoRa_receive+0xa6>
			data[i] = LoRa_read(_LoRa, RegFiFo);
 8000b12:	697b      	ldr	r3, [r7, #20]
 8000b14:	68ba      	ldr	r2, [r7, #8]
 8000b16:	18d4      	adds	r4, r2, r3
 8000b18:	2100      	movs	r1, #0
 8000b1a:	68f8      	ldr	r0, [r7, #12]
 8000b1c:	f7ff fec5 	bl	80008aa <LoRa_read>
 8000b20:	4603      	mov	r3, r0
 8000b22:	7023      	strb	r3, [r4, #0]
		for(int i=0; i<min; i++)
 8000b24:	697b      	ldr	r3, [r7, #20]
 8000b26:	3301      	adds	r3, #1
 8000b28:	617b      	str	r3, [r7, #20]
 8000b2a:	7ffb      	ldrb	r3, [r7, #31]
 8000b2c:	697a      	ldr	r2, [r7, #20]
 8000b2e:	429a      	cmp	r2, r3
 8000b30:	dbef      	blt.n	8000b12 <LoRa_receive+0x8e>
	}
	LoRa_gotoMode(_LoRa, RXCONTIN_MODE);
 8000b32:	2105      	movs	r1, #5
 8000b34:	68f8      	ldr	r0, [r7, #12]
 8000b36:	f7ff fd10 	bl	800055a <LoRa_gotoMode>
    return min;
 8000b3a:	7ffb      	ldrb	r3, [r7, #31]
}
 8000b3c:	4618      	mov	r0, r3
 8000b3e:	3724      	adds	r7, #36	; 0x24
 8000b40:	46bd      	mov	sp, r7
 8000b42:	bd90      	pop	{r4, r7, pc}

08000b44 <LoRa_init>:
		description : initialize and set the right setting according to LoRa sruct vars
		arguments   :
			LoRa* LoRa        --> LoRa object handler
		returns     : Nothing
\* ----------------------------------------------------------------------------- */
uint16_t LoRa_init(LoRa* _LoRa){
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b084      	sub	sp, #16
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	6078      	str	r0, [r7, #4]
	uint8_t    data;
	uint8_t    read;

	if(LoRa_isvalid(_LoRa)){
 8000b4c:	6878      	ldr	r0, [r7, #4]
 8000b4e:	f7ff ff2a 	bl	80009a6 <LoRa_isvalid>
 8000b52:	4603      	mov	r3, r0
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	f000 8093 	beq.w	8000c80 <LoRa_init+0x13c>
		// goto sleep mode:
			LoRa_gotoMode(_LoRa, SLEEP_MODE);
 8000b5a:	2100      	movs	r1, #0
 8000b5c:	6878      	ldr	r0, [r7, #4]
 8000b5e:	f7ff fcfc 	bl	800055a <LoRa_gotoMode>
			HAL_Delay(10);
 8000b62:	200a      	movs	r0, #10
 8000b64:	f000 fe98 	bl	8001898 <HAL_Delay>

		// turn on lora mode:
			read = LoRa_read(_LoRa, RegOpMode);
 8000b68:	2101      	movs	r1, #1
 8000b6a:	6878      	ldr	r0, [r7, #4]
 8000b6c:	f7ff fe9d 	bl	80008aa <LoRa_read>
 8000b70:	4603      	mov	r3, r0
 8000b72:	73fb      	strb	r3, [r7, #15]
			HAL_Delay(10);
 8000b74:	200a      	movs	r0, #10
 8000b76:	f000 fe8f 	bl	8001898 <HAL_Delay>
			data = read | 0x80;
 8000b7a:	7bfb      	ldrb	r3, [r7, #15]
 8000b7c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000b80:	73bb      	strb	r3, [r7, #14]
			LoRa_write(_LoRa, RegOpMode, data);
 8000b82:	7bbb      	ldrb	r3, [r7, #14]
 8000b84:	461a      	mov	r2, r3
 8000b86:	2101      	movs	r1, #1
 8000b88:	6878      	ldr	r0, [r7, #4]
 8000b8a:	f7ff fea8 	bl	80008de <LoRa_write>
			HAL_Delay(100);
 8000b8e:	2064      	movs	r0, #100	; 0x64
 8000b90:	f000 fe82 	bl	8001898 <HAL_Delay>

		// set frequency:
			LoRa_setFrequency(_LoRa, _LoRa->frequency);
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	6a1b      	ldr	r3, [r3, #32]
 8000b98:	4619      	mov	r1, r3
 8000b9a:	6878      	ldr	r0, [r7, #4]
 8000b9c:	f7ff fdba 	bl	8000714 <LoRa_setFrequency>

		// set output power gain:
			LoRa_setPower(_LoRa, _LoRa->power);
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8000ba6:	4619      	mov	r1, r3
 8000ba8:	6878      	ldr	r0, [r7, #4]
 8000baa:	f7ff fe12 	bl	80007d2 <LoRa_setPower>

		// set over current protection:
			LoRa_setOCP(_LoRa, _LoRa->overCurrentProtection);
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8000bb4:	4619      	mov	r1, r3
 8000bb6:	6878      	ldr	r0, [r7, #4]
 8000bb8:	f7ff fe1e 	bl	80007f8 <LoRa_setOCP>

		// set LNA gain:
			LoRa_write(_LoRa, RegLna, 0x23);
 8000bbc:	2223      	movs	r2, #35	; 0x23
 8000bbe:	210c      	movs	r1, #12
 8000bc0:	6878      	ldr	r0, [r7, #4]
 8000bc2:	f7ff fe8c 	bl	80008de <LoRa_write>

		// set spreading factor, CRC on, and Timeout Msb:
			LoRa_setTOMsb_setCRCon(_LoRa);
 8000bc6:	6878      	ldr	r0, [r7, #4]
 8000bc8:	f7ff fe54 	bl	8000874 <LoRa_setTOMsb_setCRCon>
			LoRa_setSpreadingFactor(_LoRa, _LoRa->spredingFactor);
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000bd2:	4619      	mov	r1, r3
 8000bd4:	6878      	ldr	r0, [r7, #4]
 8000bd6:	f7ff fdcd 	bl	8000774 <LoRa_setSpreadingFactor>

		// set Timeout Lsb:
			LoRa_write(_LoRa, RegSymbTimeoutL, 0xFF);
 8000bda:	22ff      	movs	r2, #255	; 0xff
 8000bdc:	211f      	movs	r1, #31
 8000bde:	6878      	ldr	r0, [r7, #4]
 8000be0:	f7ff fe7d 	bl	80008de <LoRa_write>

		// set bandwidth, coding rate and expilicit mode:
			// 8 bit RegModemConfig --> | X | X | X | X | X | X | X | X |
			//       bits represent --> |   bandwidth   |     CR    |I/E|
			data = 0;
 8000be4:	2300      	movs	r3, #0
 8000be6:	73bb      	strb	r3, [r7, #14]
			data = (_LoRa->bandWidth << 4) + (_LoRa->crcRate << 1);
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000bee:	011b      	lsls	r3, r3, #4
 8000bf0:	b2da      	uxtb	r2, r3
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8000bf8:	005b      	lsls	r3, r3, #1
 8000bfa:	b2db      	uxtb	r3, r3
 8000bfc:	4413      	add	r3, r2
 8000bfe:	73bb      	strb	r3, [r7, #14]
			LoRa_write(_LoRa, RegModemConfig1, data);
 8000c00:	7bbb      	ldrb	r3, [r7, #14]
 8000c02:	461a      	mov	r2, r3
 8000c04:	211d      	movs	r1, #29
 8000c06:	6878      	ldr	r0, [r7, #4]
 8000c08:	f7ff fe69 	bl	80008de <LoRa_write>

		// set preamble:
			LoRa_write(_LoRa, RegPreambleMsb, _LoRa->preamble >> 8);
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000c10:	0a1b      	lsrs	r3, r3, #8
 8000c12:	b29b      	uxth	r3, r3
 8000c14:	b2db      	uxtb	r3, r3
 8000c16:	461a      	mov	r2, r3
 8000c18:	2120      	movs	r1, #32
 8000c1a:	6878      	ldr	r0, [r7, #4]
 8000c1c:	f7ff fe5f 	bl	80008de <LoRa_write>
			LoRa_write(_LoRa, RegPreambleLsb, _LoRa->preamble >> 0);
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000c24:	b2db      	uxtb	r3, r3
 8000c26:	461a      	mov	r2, r3
 8000c28:	2121      	movs	r1, #33	; 0x21
 8000c2a:	6878      	ldr	r0, [r7, #4]
 8000c2c:	f7ff fe57 	bl	80008de <LoRa_write>

		// DIO mapping:   --> DIO: RxDone
			read = LoRa_read(_LoRa, RegDioMapping1);
 8000c30:	2140      	movs	r1, #64	; 0x40
 8000c32:	6878      	ldr	r0, [r7, #4]
 8000c34:	f7ff fe39 	bl	80008aa <LoRa_read>
 8000c38:	4603      	mov	r3, r0
 8000c3a:	73fb      	strb	r3, [r7, #15]
			data = read | 0x3F;
 8000c3c:	7bfb      	ldrb	r3, [r7, #15]
 8000c3e:	f043 033f 	orr.w	r3, r3, #63	; 0x3f
 8000c42:	73bb      	strb	r3, [r7, #14]
			LoRa_write(_LoRa, RegDioMapping1, data);
 8000c44:	7bbb      	ldrb	r3, [r7, #14]
 8000c46:	461a      	mov	r2, r3
 8000c48:	2140      	movs	r1, #64	; 0x40
 8000c4a:	6878      	ldr	r0, [r7, #4]
 8000c4c:	f7ff fe47 	bl	80008de <LoRa_write>

		// goto standby mode:
			LoRa_gotoMode(_LoRa, STNBY_MODE);
 8000c50:	2101      	movs	r1, #1
 8000c52:	6878      	ldr	r0, [r7, #4]
 8000c54:	f7ff fc81 	bl	800055a <LoRa_gotoMode>
			_LoRa->current_mode = STNBY_MODE;
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	2201      	movs	r2, #1
 8000c5c:	61da      	str	r2, [r3, #28]
			HAL_Delay(10);
 8000c5e:	200a      	movs	r0, #10
 8000c60:	f000 fe1a 	bl	8001898 <HAL_Delay>

			read = LoRa_read(_LoRa, RegVersion);
 8000c64:	2142      	movs	r1, #66	; 0x42
 8000c66:	6878      	ldr	r0, [r7, #4]
 8000c68:	f7ff fe1f 	bl	80008aa <LoRa_read>
 8000c6c:	4603      	mov	r3, r0
 8000c6e:	73fb      	strb	r3, [r7, #15]
			if(read == 0x12)
 8000c70:	7bfb      	ldrb	r3, [r7, #15]
 8000c72:	2b12      	cmp	r3, #18
 8000c74:	d101      	bne.n	8000c7a <LoRa_init+0x136>
				return LORA_OK;
 8000c76:	23c8      	movs	r3, #200	; 0xc8
 8000c78:	e004      	b.n	8000c84 <LoRa_init+0x140>
			else
				return LORA_NOT_FOUND;
 8000c7a:	f44f 73ca 	mov.w	r3, #404	; 0x194
 8000c7e:	e001      	b.n	8000c84 <LoRa_init+0x140>
	}
	else {
		return LORA_UNAVAILABLE;
 8000c80:	f240 13f7 	movw	r3, #503	; 0x1f7
	}
}
 8000c84:	4618      	mov	r0, r3
 8000c86:	3710      	adds	r7, #16
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	bd80      	pop	{r7, pc}

08000c8c <LoRa_received_bytes>:
		description : check number of bytes available in FIFO RX buffer
		arguments   :
			LoRa* LoRa        --> LoRa object handler
		returns     : 8 bit integer, number of bytes available to read from FIFO RX buffer
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_received_bytes(LoRa* _LoRa) {
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b082      	sub	sp, #8
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]
	return LoRa_read(_LoRa, RegRxNbBytes);
 8000c94:	2113      	movs	r1, #19
 8000c96:	6878      	ldr	r0, [r7, #4]
 8000c98:	f7ff fe07 	bl	80008aa <LoRa_read>
 8000c9c:	4603      	mov	r3, r0
}
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	3708      	adds	r7, #8
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bd80      	pop	{r7, pc}
	...

08000ca8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ca8:	b5b0      	push	{r4, r5, r7, lr}
 8000caa:	b08e      	sub	sp, #56	; 0x38
 8000cac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  RetargetInit(USB_UART);
 8000cae:	4b68      	ldr	r3, [pc, #416]	; (8000e50 <main+0x1a8>)
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	f000 fafc 	bl	80012b0 <RetargetInit>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000cb8:	f000 fd7c 	bl	80017b4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000cbc:	f000 f8e6 	bl	8000e8c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000cc0:	f000 f9d8 	bl	8001074 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000cc4:	f000 f982 	bl	8000fcc <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000cc8:	f000 f9aa 	bl	8001020 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 8000ccc:	f000 f948 	bl	8000f60 <MX_SPI1_Init>
  MX_USB_DEVICE_Init();
 8000cd0:	f008 fb34 	bl	800933c <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */

  // UART interrupt init
  HAL_UART_Receive_IT (USB_UART, UART_Buff, sizeof(UART_Buff));
 8000cd4:	4b5e      	ldr	r3, [pc, #376]	; (8000e50 <main+0x1a8>)
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000cdc:	495d      	ldr	r1, [pc, #372]	; (8000e54 <main+0x1ac>)
 8000cde:	4618      	mov	r0, r3
 8000ce0:	f003 ff7d 	bl	8004bde <HAL_UART_Receive_IT>

  // LoRa Class definitions
  LoRaClass = newLoRa();
 8000ce4:	4c5c      	ldr	r4, [pc, #368]	; (8000e58 <main+0x1b0>)
 8000ce6:	463b      	mov	r3, r7
 8000ce8:	4618      	mov	r0, r3
 8000cea:	f7ff fbef 	bl	80004cc <newLoRa>
 8000cee:	4625      	mov	r5, r4
 8000cf0:	463c      	mov	r4, r7
 8000cf2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000cf4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000cf6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000cf8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000cfa:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8000cfe:	e885 0007 	stmia.w	r5, {r0, r1, r2}
  LoRaClass.hSPIx                 = RF_SPI;
 8000d02:	4b56      	ldr	r3, [pc, #344]	; (8000e5c <main+0x1b4>)
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	4a54      	ldr	r2, [pc, #336]	; (8000e58 <main+0x1b0>)
 8000d08:	6193      	str	r3, [r2, #24]
  LoRaClass.CS_port               = RF_SPI_NSS_GPIO_Port;
 8000d0a:	4b53      	ldr	r3, [pc, #332]	; (8000e58 <main+0x1b0>)
 8000d0c:	4a54      	ldr	r2, [pc, #336]	; (8000e60 <main+0x1b8>)
 8000d0e:	601a      	str	r2, [r3, #0]
  LoRaClass.CS_pin                = RF_SPI_NSS_Pin;
 8000d10:	4b51      	ldr	r3, [pc, #324]	; (8000e58 <main+0x1b0>)
 8000d12:	2210      	movs	r2, #16
 8000d14:	809a      	strh	r2, [r3, #4]
  LoRaClass.reset_port            = RESET_RF_GPIO_Port;
 8000d16:	4b50      	ldr	r3, [pc, #320]	; (8000e58 <main+0x1b0>)
 8000d18:	4a52      	ldr	r2, [pc, #328]	; (8000e64 <main+0x1bc>)
 8000d1a:	609a      	str	r2, [r3, #8]
  LoRaClass.reset_pin             = RESET_RF_Pin;
 8000d1c:	4b4e      	ldr	r3, [pc, #312]	; (8000e58 <main+0x1b0>)
 8000d1e:	2201      	movs	r2, #1
 8000d20:	819a      	strh	r2, [r3, #12]
  LoRaClass.DIO0_port			  = IO0_RF_GPIO_Port;
 8000d22:	4b4d      	ldr	r3, [pc, #308]	; (8000e58 <main+0x1b0>)
 8000d24:	4a4f      	ldr	r2, [pc, #316]	; (8000e64 <main+0x1bc>)
 8000d26:	611a      	str	r2, [r3, #16]
  LoRaClass.DIO0_pin			  = IO0_RF_Pin;
 8000d28:	4b4b      	ldr	r3, [pc, #300]	; (8000e58 <main+0x1b0>)
 8000d2a:	2202      	movs	r2, #2
 8000d2c:	829a      	strh	r2, [r3, #20]

  LoRaClass.frequency             = 915;
 8000d2e:	4b4a      	ldr	r3, [pc, #296]	; (8000e58 <main+0x1b0>)
 8000d30:	f240 3293 	movw	r2, #915	; 0x393
 8000d34:	621a      	str	r2, [r3, #32]
  LoRaClass.spredingFactor        = SF_7;						// default = SF_7
 8000d36:	4b48      	ldr	r3, [pc, #288]	; (8000e58 <main+0x1b0>)
 8000d38:	2207      	movs	r2, #7
 8000d3a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  LoRaClass.bandWidth			  = BW_125KHz;				  	// default = BW_125KHz
 8000d3e:	4b46      	ldr	r3, [pc, #280]	; (8000e58 <main+0x1b0>)
 8000d40:	2207      	movs	r2, #7
 8000d42:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  LoRaClass.crcRate				  = CR_4_5;						// default = CR_4_5
 8000d46:	4b44      	ldr	r3, [pc, #272]	; (8000e58 <main+0x1b0>)
 8000d48:	2201      	movs	r2, #1
 8000d4a:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  LoRaClass.power			      = POWER_20db;					// default = 20db
 8000d4e:	4b42      	ldr	r3, [pc, #264]	; (8000e58 <main+0x1b0>)
 8000d50:	22ff      	movs	r2, #255	; 0xff
 8000d52:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  LoRaClass.overCurrentProtection = 120; 						// default = 100 mA
 8000d56:	4b40      	ldr	r3, [pc, #256]	; (8000e58 <main+0x1b0>)
 8000d58:	2278      	movs	r2, #120	; 0x78
 8000d5a:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  LoRaClass.preamble			  = 10;		  					// default = 8;
 8000d5e:	4b3e      	ldr	r3, [pc, #248]	; (8000e58 <main+0x1b0>)
 8000d60:	220a      	movs	r2, #10
 8000d62:	851a      	strh	r2, [r3, #40]	; 0x28

  HAL_GPIO_WritePin(RF_SPI_NSS_GPIO_Port, RF_SPI_NSS_Pin, GPIO_PIN_SET);
 8000d64:	2201      	movs	r2, #1
 8000d66:	2110      	movs	r1, #16
 8000d68:	483d      	ldr	r0, [pc, #244]	; (8000e60 <main+0x1b8>)
 8000d6a:	f001 f8f9 	bl	8001f60 <HAL_GPIO_WritePin>

  LoRa_reset(&LoRaClass);
 8000d6e:	483a      	ldr	r0, [pc, #232]	; (8000e58 <main+0x1b0>)
 8000d70:	f7ff fbd5 	bl	800051e <LoRa_reset>
  uint32_t result = LoRa_init(&LoRaClass);
 8000d74:	4838      	ldr	r0, [pc, #224]	; (8000e58 <main+0x1b0>)
 8000d76:	f7ff fee5 	bl	8000b44 <LoRa_init>
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	637b      	str	r3, [r7, #52]	; 0x34
  if(result == LORA_OK) {
 8000d7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000d80:	2bc8      	cmp	r3, #200	; 0xc8
 8000d82:	d104      	bne.n	8000d8e <main+0xe6>
	  CDC_Transmit_HS("LORA_OK\r\n", sizeof("LORA_OK\r\n"));
 8000d84:	210a      	movs	r1, #10
 8000d86:	4838      	ldr	r0, [pc, #224]	; (8000e68 <main+0x1c0>)
 8000d88:	f008 fbb8 	bl	80094fc <CDC_Transmit_HS>
 8000d8c:	e017      	b.n	8000dbe <main+0x116>
  }
  else if(result == LORA_NOT_FOUND) {
 8000d8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000d90:	f5b3 7fca 	cmp.w	r3, #404	; 0x194
 8000d94:	d107      	bne.n	8000da6 <main+0xfe>
	  CDC_Transmit_HS("LORA_NOT_FOUND\r\n", sizeof("LORA_NOT_FOUND\r\n"));
 8000d96:	2111      	movs	r1, #17
 8000d98:	4834      	ldr	r0, [pc, #208]	; (8000e6c <main+0x1c4>)
 8000d9a:	f008 fbaf 	bl	80094fc <CDC_Transmit_HS>
	  Blocking_LED_Blink(1);
 8000d9e:	2001      	movs	r0, #1
 8000da0:	f000 fa5e 	bl	8001260 <Blocking_LED_Blink>
 8000da4:	e00b      	b.n	8000dbe <main+0x116>
  }
  else if(result == LORA_UNAVAILABLE) {
 8000da6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000da8:	f240 12f7 	movw	r2, #503	; 0x1f7
 8000dac:	4293      	cmp	r3, r2
 8000dae:	d106      	bne.n	8000dbe <main+0x116>
	  CDC_Transmit_HS("LORA_UNAVAILABLE\r\n", sizeof("LORA_UNAVAILABLE\r\n"));
 8000db0:	2113      	movs	r1, #19
 8000db2:	482f      	ldr	r0, [pc, #188]	; (8000e70 <main+0x1c8>)
 8000db4:	f008 fba2 	bl	80094fc <CDC_Transmit_HS>
	  Blocking_LED_Blink(2);
 8000db8:	2002      	movs	r0, #2
 8000dba:	f000 fa51 	bl	8001260 <Blocking_LED_Blink>
  }

  // START CONTINUOUS RECEIVING -----------------------------------
  LoRa_startReceiving(&LoRaClass);
 8000dbe:	4826      	ldr	r0, [pc, #152]	; (8000e58 <main+0x1b0>)
 8000dc0:	f7ff fe54 	bl	8000a6c <LoRa_startReceiving>
//	  uint8_t outputArr[10];
//	  memset(outputArr, '\0', sizeof(outputArr));
//	  LoRa_readReg(&LoRaClass, RegVersion, sizeof(RegVersion), outputArr, 4);
//	  CDC_Transmit_HS(outputArr, sizeof(outputArr));

	  if(RF_available_bytes) {
 8000dc4:	4b2b      	ldr	r3, [pc, #172]	; (8000e74 <main+0x1cc>)
 8000dc6:	781b      	ldrb	r3, [r3, #0]
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d019      	beq.n	8000e00 <main+0x158>
		  // Bytes in RF RX buffer to read
		  // Read bytes into buffer
		  LoRa_receive(&LoRaClass, RF_RX_Buff, RF_available_bytes);
 8000dcc:	4b29      	ldr	r3, [pc, #164]	; (8000e74 <main+0x1cc>)
 8000dce:	781b      	ldrb	r3, [r3, #0]
 8000dd0:	461a      	mov	r2, r3
 8000dd2:	4929      	ldr	r1, [pc, #164]	; (8000e78 <main+0x1d0>)
 8000dd4:	4820      	ldr	r0, [pc, #128]	; (8000e58 <main+0x1b0>)
 8000dd6:	f7ff fe55 	bl	8000a84 <LoRa_receive>
		  // Transmit bytes from RF_RX_Buff over UART
		  HAL_UART_Transmit(USB_UART, RF_RX_Buff, RF_available_bytes, 1000);
 8000dda:	4b1d      	ldr	r3, [pc, #116]	; (8000e50 <main+0x1a8>)
 8000ddc:	6818      	ldr	r0, [r3, #0]
 8000dde:	4b25      	ldr	r3, [pc, #148]	; (8000e74 <main+0x1cc>)
 8000de0:	781b      	ldrb	r3, [r3, #0]
 8000de2:	b29a      	uxth	r2, r3
 8000de4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000de8:	4923      	ldr	r1, [pc, #140]	; (8000e78 <main+0x1d0>)
 8000dea:	f003 fdc4 	bl	8004976 <HAL_UART_Transmit>
		  // Transmit bytes from RF_RX Buff over USB
		  CDC_Transmit_HS(RF_RX_Buff, RF_available_bytes);
 8000dee:	4b21      	ldr	r3, [pc, #132]	; (8000e74 <main+0x1cc>)
 8000df0:	781b      	ldrb	r3, [r3, #0]
 8000df2:	4619      	mov	r1, r3
 8000df4:	4820      	ldr	r0, [pc, #128]	; (8000e78 <main+0x1d0>)
 8000df6:	f008 fb81 	bl	80094fc <CDC_Transmit_HS>


		  RF_available_bytes = 0;
 8000dfa:	4b1e      	ldr	r3, [pc, #120]	; (8000e74 <main+0x1cc>)
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	701a      	strb	r2, [r3, #0]
	  }

	  if(UART_READY) {
 8000e00:	4b1e      	ldr	r3, [pc, #120]	; (8000e7c <main+0x1d4>)
 8000e02:	781b      	ldrb	r3, [r3, #0]
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d00c      	beq.n	8000e22 <main+0x17a>
		  UART_READY = false;
 8000e08:	4b1c      	ldr	r3, [pc, #112]	; (8000e7c <main+0x1d4>)
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	701a      	strb	r2, [r3, #0]
		  // Transmit UART buffer over RF
		  if (!LoRa_transmit(&LoRaClass, UART_Buff, (uint8_t)sizeof(UART_Buff), 1000)) {
 8000e0e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e12:	2200      	movs	r2, #0
 8000e14:	490f      	ldr	r1, [pc, #60]	; (8000e54 <main+0x1ac>)
 8000e16:	4810      	ldr	r0, [pc, #64]	; (8000e58 <main+0x1b0>)
 8000e18:	f7ff fdd0 	bl	80009bc <LoRa_transmit>
			  // Print error msg
		  }
		  LoRa_startReceiving(&LoRaClass);
 8000e1c:	480e      	ldr	r0, [pc, #56]	; (8000e58 <main+0x1b0>)
 8000e1e:	f7ff fe25 	bl	8000a6c <LoRa_startReceiving>
	  }

	  if(USB_READY) {
 8000e22:	4b17      	ldr	r3, [pc, #92]	; (8000e80 <main+0x1d8>)
 8000e24:	781b      	ldrb	r3, [r3, #0]
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d0cc      	beq.n	8000dc4 <main+0x11c>
		  if (!LoRa_transmit(&LoRaClass, USB_Buff, USB_rx_data_len, 1000)) {
 8000e2a:	4b16      	ldr	r3, [pc, #88]	; (8000e84 <main+0x1dc>)
 8000e2c:	781a      	ldrb	r2, [r3, #0]
 8000e2e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e32:	4915      	ldr	r1, [pc, #84]	; (8000e88 <main+0x1e0>)
 8000e34:	4808      	ldr	r0, [pc, #32]	; (8000e58 <main+0x1b0>)
 8000e36:	f7ff fdc1 	bl	80009bc <LoRa_transmit>
		  			  // Print error msg
		  }
		  USB_READY = false;
 8000e3a:	4b11      	ldr	r3, [pc, #68]	; (8000e80 <main+0x1d8>)
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	701a      	strb	r2, [r3, #0]
		  USB_rx_data_len = 0;
 8000e40:	4b10      	ldr	r3, [pc, #64]	; (8000e84 <main+0x1dc>)
 8000e42:	2200      	movs	r2, #0
 8000e44:	701a      	strb	r2, [r3, #0]
		  LoRa_startReceiving(&LoRaClass);
 8000e46:	4804      	ldr	r0, [pc, #16]	; (8000e58 <main+0x1b0>)
 8000e48:	f7ff fe10 	bl	8000a6c <LoRa_startReceiving>
	  if(RF_available_bytes) {
 8000e4c:	e7ba      	b.n	8000dc4 <main+0x11c>
 8000e4e:	bf00      	nop
 8000e50:	20000000 	.word	0x20000000
 8000e54:	20000368 	.word	0x20000368
 8000e58:	20000570 	.word	0x20000570
 8000e5c:	20000004 	.word	0x20000004
 8000e60:	40020000 	.word	0x40020000
 8000e64:	40020400 	.word	0x40020400
 8000e68:	0800a6dc 	.word	0x0800a6dc
 8000e6c:	0800a6e8 	.word	0x0800a6e8
 8000e70:	0800a6fc 	.word	0x0800a6fc
 8000e74:	20000264 	.word	0x20000264
 8000e78:	20000268 	.word	0x20000268
 8000e7c:	20000468 	.word	0x20000468
 8000e80:	2000056c 	.word	0x2000056c
 8000e84:	2000056d 	.word	0x2000056d
 8000e88:	2000046c 	.word	0x2000046c

08000e8c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b094      	sub	sp, #80	; 0x50
 8000e90:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e92:	f107 0320 	add.w	r3, r7, #32
 8000e96:	2230      	movs	r2, #48	; 0x30
 8000e98:	2100      	movs	r1, #0
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	f008 ffc4 	bl	8009e28 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ea0:	f107 030c 	add.w	r3, r7, #12
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	601a      	str	r2, [r3, #0]
 8000ea8:	605a      	str	r2, [r3, #4]
 8000eaa:	609a      	str	r2, [r3, #8]
 8000eac:	60da      	str	r2, [r3, #12]
 8000eae:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	60bb      	str	r3, [r7, #8]
 8000eb4:	4b28      	ldr	r3, [pc, #160]	; (8000f58 <SystemClock_Config+0xcc>)
 8000eb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eb8:	4a27      	ldr	r2, [pc, #156]	; (8000f58 <SystemClock_Config+0xcc>)
 8000eba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ebe:	6413      	str	r3, [r2, #64]	; 0x40
 8000ec0:	4b25      	ldr	r3, [pc, #148]	; (8000f58 <SystemClock_Config+0xcc>)
 8000ec2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ec4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ec8:	60bb      	str	r3, [r7, #8]
 8000eca:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000ecc:	2300      	movs	r3, #0
 8000ece:	607b      	str	r3, [r7, #4]
 8000ed0:	4b22      	ldr	r3, [pc, #136]	; (8000f5c <SystemClock_Config+0xd0>)
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	4a21      	ldr	r2, [pc, #132]	; (8000f5c <SystemClock_Config+0xd0>)
 8000ed6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000eda:	6013      	str	r3, [r2, #0]
 8000edc:	4b1f      	ldr	r3, [pc, #124]	; (8000f5c <SystemClock_Config+0xd0>)
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ee4:	607b      	str	r3, [r7, #4]
 8000ee6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000ee8:	2301      	movs	r3, #1
 8000eea:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000eec:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000ef0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ef2:	2302      	movs	r3, #2
 8000ef4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000ef6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000efa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 12;
 8000efc:	230c      	movs	r3, #12
 8000efe:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000f00:	23a8      	movs	r3, #168	; 0xa8
 8000f02:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000f04:	2302      	movs	r3, #2
 8000f06:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000f08:	2307      	movs	r3, #7
 8000f0a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f0c:	f107 0320 	add.w	r3, r7, #32
 8000f10:	4618      	mov	r0, r3
 8000f12:	f002 fad5 	bl	80034c0 <HAL_RCC_OscConfig>
 8000f16:	4603      	mov	r3, r0
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d001      	beq.n	8000f20 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000f1c:	f000 f9c2 	bl	80012a4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f20:	230f      	movs	r3, #15
 8000f22:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f24:	2302      	movs	r3, #2
 8000f26:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f28:	2300      	movs	r3, #0
 8000f2a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000f2c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000f30:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000f32:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f36:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000f38:	f107 030c 	add.w	r3, r7, #12
 8000f3c:	2105      	movs	r1, #5
 8000f3e:	4618      	mov	r0, r3
 8000f40:	f002 fd36 	bl	80039b0 <HAL_RCC_ClockConfig>
 8000f44:	4603      	mov	r3, r0
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d001      	beq.n	8000f4e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000f4a:	f000 f9ab 	bl	80012a4 <Error_Handler>
  }
}
 8000f4e:	bf00      	nop
 8000f50:	3750      	adds	r7, #80	; 0x50
 8000f52:	46bd      	mov	sp, r7
 8000f54:	bd80      	pop	{r7, pc}
 8000f56:	bf00      	nop
 8000f58:	40023800 	.word	0x40023800
 8000f5c:	40007000 	.word	0x40007000

08000f60 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000f64:	4b17      	ldr	r3, [pc, #92]	; (8000fc4 <MX_SPI1_Init+0x64>)
 8000f66:	4a18      	ldr	r2, [pc, #96]	; (8000fc8 <MX_SPI1_Init+0x68>)
 8000f68:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000f6a:	4b16      	ldr	r3, [pc, #88]	; (8000fc4 <MX_SPI1_Init+0x64>)
 8000f6c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000f70:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000f72:	4b14      	ldr	r3, [pc, #80]	; (8000fc4 <MX_SPI1_Init+0x64>)
 8000f74:	2200      	movs	r2, #0
 8000f76:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000f78:	4b12      	ldr	r3, [pc, #72]	; (8000fc4 <MX_SPI1_Init+0x64>)
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000f7e:	4b11      	ldr	r3, [pc, #68]	; (8000fc4 <MX_SPI1_Init+0x64>)
 8000f80:	2200      	movs	r2, #0
 8000f82:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000f84:	4b0f      	ldr	r3, [pc, #60]	; (8000fc4 <MX_SPI1_Init+0x64>)
 8000f86:	2200      	movs	r2, #0
 8000f88:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000f8a:	4b0e      	ldr	r3, [pc, #56]	; (8000fc4 <MX_SPI1_Init+0x64>)
 8000f8c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f90:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8000f92:	4b0c      	ldr	r3, [pc, #48]	; (8000fc4 <MX_SPI1_Init+0x64>)
 8000f94:	2230      	movs	r2, #48	; 0x30
 8000f96:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000f98:	4b0a      	ldr	r3, [pc, #40]	; (8000fc4 <MX_SPI1_Init+0x64>)
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000f9e:	4b09      	ldr	r3, [pc, #36]	; (8000fc4 <MX_SPI1_Init+0x64>)
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000fa4:	4b07      	ldr	r3, [pc, #28]	; (8000fc4 <MX_SPI1_Init+0x64>)
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000faa:	4b06      	ldr	r3, [pc, #24]	; (8000fc4 <MX_SPI1_Init+0x64>)
 8000fac:	220a      	movs	r2, #10
 8000fae:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000fb0:	4804      	ldr	r0, [pc, #16]	; (8000fc4 <MX_SPI1_Init+0x64>)
 8000fb2:	f002 fedd 	bl	8003d70 <HAL_SPI_Init>
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d001      	beq.n	8000fc0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000fbc:	f000 f972 	bl	80012a4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000fc0:	bf00      	nop
 8000fc2:	bd80      	pop	{r7, pc}
 8000fc4:	20000184 	.word	0x20000184
 8000fc8:	40013000 	.word	0x40013000

08000fcc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000fd0:	4b11      	ldr	r3, [pc, #68]	; (8001018 <MX_USART1_UART_Init+0x4c>)
 8000fd2:	4a12      	ldr	r2, [pc, #72]	; (800101c <MX_USART1_UART_Init+0x50>)
 8000fd4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000fd6:	4b10      	ldr	r3, [pc, #64]	; (8001018 <MX_USART1_UART_Init+0x4c>)
 8000fd8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000fdc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000fde:	4b0e      	ldr	r3, [pc, #56]	; (8001018 <MX_USART1_UART_Init+0x4c>)
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000fe4:	4b0c      	ldr	r3, [pc, #48]	; (8001018 <MX_USART1_UART_Init+0x4c>)
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000fea:	4b0b      	ldr	r3, [pc, #44]	; (8001018 <MX_USART1_UART_Init+0x4c>)
 8000fec:	2200      	movs	r2, #0
 8000fee:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000ff0:	4b09      	ldr	r3, [pc, #36]	; (8001018 <MX_USART1_UART_Init+0x4c>)
 8000ff2:	220c      	movs	r2, #12
 8000ff4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ff6:	4b08      	ldr	r3, [pc, #32]	; (8001018 <MX_USART1_UART_Init+0x4c>)
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ffc:	4b06      	ldr	r3, [pc, #24]	; (8001018 <MX_USART1_UART_Init+0x4c>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001002:	4805      	ldr	r0, [pc, #20]	; (8001018 <MX_USART1_UART_Init+0x4c>)
 8001004:	f003 fc6a 	bl	80048dc <HAL_UART_Init>
 8001008:	4603      	mov	r3, r0
 800100a:	2b00      	cmp	r3, #0
 800100c:	d001      	beq.n	8001012 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800100e:	f000 f949 	bl	80012a4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001012:	bf00      	nop
 8001014:	bd80      	pop	{r7, pc}
 8001016:	bf00      	nop
 8001018:	200001dc 	.word	0x200001dc
 800101c:	40011000 	.word	0x40011000

08001020 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001024:	4b11      	ldr	r3, [pc, #68]	; (800106c <MX_USART2_UART_Init+0x4c>)
 8001026:	4a12      	ldr	r2, [pc, #72]	; (8001070 <MX_USART2_UART_Init+0x50>)
 8001028:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800102a:	4b10      	ldr	r3, [pc, #64]	; (800106c <MX_USART2_UART_Init+0x4c>)
 800102c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001030:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001032:	4b0e      	ldr	r3, [pc, #56]	; (800106c <MX_USART2_UART_Init+0x4c>)
 8001034:	2200      	movs	r2, #0
 8001036:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001038:	4b0c      	ldr	r3, [pc, #48]	; (800106c <MX_USART2_UART_Init+0x4c>)
 800103a:	2200      	movs	r2, #0
 800103c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800103e:	4b0b      	ldr	r3, [pc, #44]	; (800106c <MX_USART2_UART_Init+0x4c>)
 8001040:	2200      	movs	r2, #0
 8001042:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001044:	4b09      	ldr	r3, [pc, #36]	; (800106c <MX_USART2_UART_Init+0x4c>)
 8001046:	220c      	movs	r2, #12
 8001048:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 800104a:	4b08      	ldr	r3, [pc, #32]	; (800106c <MX_USART2_UART_Init+0x4c>)
 800104c:	f44f 7240 	mov.w	r2, #768	; 0x300
 8001050:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001052:	4b06      	ldr	r3, [pc, #24]	; (800106c <MX_USART2_UART_Init+0x4c>)
 8001054:	2200      	movs	r2, #0
 8001056:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001058:	4804      	ldr	r0, [pc, #16]	; (800106c <MX_USART2_UART_Init+0x4c>)
 800105a:	f003 fc3f 	bl	80048dc <HAL_UART_Init>
 800105e:	4603      	mov	r3, r0
 8001060:	2b00      	cmp	r3, #0
 8001062:	d001      	beq.n	8001068 <MX_USART2_UART_Init+0x48>
  {
    Error_Handler();
 8001064:	f000 f91e 	bl	80012a4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001068:	bf00      	nop
 800106a:	bd80      	pop	{r7, pc}
 800106c:	20000220 	.word	0x20000220
 8001070:	40004400 	.word	0x40004400

08001074 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b08a      	sub	sp, #40	; 0x28
 8001078:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800107a:	f107 0314 	add.w	r3, r7, #20
 800107e:	2200      	movs	r2, #0
 8001080:	601a      	str	r2, [r3, #0]
 8001082:	605a      	str	r2, [r3, #4]
 8001084:	609a      	str	r2, [r3, #8]
 8001086:	60da      	str	r2, [r3, #12]
 8001088:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800108a:	2300      	movs	r3, #0
 800108c:	613b      	str	r3, [r7, #16]
 800108e:	4b56      	ldr	r3, [pc, #344]	; (80011e8 <MX_GPIO_Init+0x174>)
 8001090:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001092:	4a55      	ldr	r2, [pc, #340]	; (80011e8 <MX_GPIO_Init+0x174>)
 8001094:	f043 0304 	orr.w	r3, r3, #4
 8001098:	6313      	str	r3, [r2, #48]	; 0x30
 800109a:	4b53      	ldr	r3, [pc, #332]	; (80011e8 <MX_GPIO_Init+0x174>)
 800109c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800109e:	f003 0304 	and.w	r3, r3, #4
 80010a2:	613b      	str	r3, [r7, #16]
 80010a4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80010a6:	2300      	movs	r3, #0
 80010a8:	60fb      	str	r3, [r7, #12]
 80010aa:	4b4f      	ldr	r3, [pc, #316]	; (80011e8 <MX_GPIO_Init+0x174>)
 80010ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ae:	4a4e      	ldr	r2, [pc, #312]	; (80011e8 <MX_GPIO_Init+0x174>)
 80010b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80010b4:	6313      	str	r3, [r2, #48]	; 0x30
 80010b6:	4b4c      	ldr	r3, [pc, #304]	; (80011e8 <MX_GPIO_Init+0x174>)
 80010b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80010be:	60fb      	str	r3, [r7, #12]
 80010c0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010c2:	2300      	movs	r3, #0
 80010c4:	60bb      	str	r3, [r7, #8]
 80010c6:	4b48      	ldr	r3, [pc, #288]	; (80011e8 <MX_GPIO_Init+0x174>)
 80010c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ca:	4a47      	ldr	r2, [pc, #284]	; (80011e8 <MX_GPIO_Init+0x174>)
 80010cc:	f043 0301 	orr.w	r3, r3, #1
 80010d0:	6313      	str	r3, [r2, #48]	; 0x30
 80010d2:	4b45      	ldr	r3, [pc, #276]	; (80011e8 <MX_GPIO_Init+0x174>)
 80010d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010d6:	f003 0301 	and.w	r3, r3, #1
 80010da:	60bb      	str	r3, [r7, #8]
 80010dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010de:	2300      	movs	r3, #0
 80010e0:	607b      	str	r3, [r7, #4]
 80010e2:	4b41      	ldr	r3, [pc, #260]	; (80011e8 <MX_GPIO_Init+0x174>)
 80010e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010e6:	4a40      	ldr	r2, [pc, #256]	; (80011e8 <MX_GPIO_Init+0x174>)
 80010e8:	f043 0302 	orr.w	r3, r3, #2
 80010ec:	6313      	str	r3, [r2, #48]	; 0x30
 80010ee:	4b3e      	ldr	r3, [pc, #248]	; (80011e8 <MX_GPIO_Init+0x174>)
 80010f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010f2:	f003 0302 	and.w	r3, r3, #2
 80010f6:	607b      	str	r3, [r7, #4]
 80010f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80010fa:	2300      	movs	r3, #0
 80010fc:	603b      	str	r3, [r7, #0]
 80010fe:	4b3a      	ldr	r3, [pc, #232]	; (80011e8 <MX_GPIO_Init+0x174>)
 8001100:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001102:	4a39      	ldr	r2, [pc, #228]	; (80011e8 <MX_GPIO_Init+0x174>)
 8001104:	f043 0308 	orr.w	r3, r3, #8
 8001108:	6313      	str	r3, [r2, #48]	; 0x30
 800110a:	4b37      	ldr	r3, [pc, #220]	; (80011e8 <MX_GPIO_Init+0x174>)
 800110c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800110e:	f003 0308 	and.w	r3, r3, #8
 8001112:	603b      	str	r3, [r7, #0]
 8001114:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RF_SPI_NSS_GPIO_Port, RF_SPI_NSS_Pin, GPIO_PIN_RESET);
 8001116:	2200      	movs	r2, #0
 8001118:	2110      	movs	r1, #16
 800111a:	4834      	ldr	r0, [pc, #208]	; (80011ec <MX_GPIO_Init+0x178>)
 800111c:	f000 ff20 	bl	8001f60 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RESET_RF_GPIO_Port, RESET_RF_Pin, GPIO_PIN_RESET);
 8001120:	2200      	movs	r2, #0
 8001122:	2101      	movs	r1, #1
 8001124:	4832      	ldr	r0, [pc, #200]	; (80011f0 <MX_GPIO_Init+0x17c>)
 8001126:	f000 ff1b 	bl	8001f60 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(INDICATOR_LED_GPIO_Port, INDICATOR_LED_Pin, GPIO_PIN_RESET);
 800112a:	2200      	movs	r2, #0
 800112c:	2104      	movs	r1, #4
 800112e:	4831      	ldr	r0, [pc, #196]	; (80011f4 <MX_GPIO_Init+0x180>)
 8001130:	f000 ff16 	bl	8001f60 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : RF_SPI_NSS_Pin */
  GPIO_InitStruct.Pin = RF_SPI_NSS_Pin;
 8001134:	2310      	movs	r3, #16
 8001136:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001138:	2301      	movs	r3, #1
 800113a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800113c:	2300      	movs	r3, #0
 800113e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001140:	2300      	movs	r3, #0
 8001142:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(RF_SPI_NSS_GPIO_Port, &GPIO_InitStruct);
 8001144:	f107 0314 	add.w	r3, r7, #20
 8001148:	4619      	mov	r1, r3
 800114a:	4828      	ldr	r0, [pc, #160]	; (80011ec <MX_GPIO_Init+0x178>)
 800114c:	f000 fd6c 	bl	8001c28 <HAL_GPIO_Init>

  /*Configure GPIO pin : RESET_RF_Pin */
  GPIO_InitStruct.Pin = RESET_RF_Pin;
 8001150:	2301      	movs	r3, #1
 8001152:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001154:	2301      	movs	r3, #1
 8001156:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001158:	2300      	movs	r3, #0
 800115a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800115c:	2300      	movs	r3, #0
 800115e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(RESET_RF_GPIO_Port, &GPIO_InitStruct);
 8001160:	f107 0314 	add.w	r3, r7, #20
 8001164:	4619      	mov	r1, r3
 8001166:	4822      	ldr	r0, [pc, #136]	; (80011f0 <MX_GPIO_Init+0x17c>)
 8001168:	f000 fd5e 	bl	8001c28 <HAL_GPIO_Init>

  /*Configure GPIO pins : IO0_RF_Pin IO1_RF_Pin IO2_RF_Pin IO3_RF_Pin
                           IO4_RF_Pin */
  GPIO_InitStruct.Pin = IO0_RF_Pin|IO1_RF_Pin|IO2_RF_Pin|IO3_RF_Pin
 800116c:	f643 4302 	movw	r3, #15362	; 0x3c02
 8001170:	617b      	str	r3, [r7, #20]
                          |IO4_RF_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001172:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001176:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001178:	2300      	movs	r3, #0
 800117a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800117c:	f107 0314 	add.w	r3, r7, #20
 8001180:	4619      	mov	r1, r3
 8001182:	481b      	ldr	r0, [pc, #108]	; (80011f0 <MX_GPIO_Init+0x17c>)
 8001184:	f000 fd50 	bl	8001c28 <HAL_GPIO_Init>

  /*Configure GPIO pin : IO5_RF_Pin */
  GPIO_InitStruct.Pin = IO5_RF_Pin;
 8001188:	f44f 7380 	mov.w	r3, #256	; 0x100
 800118c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800118e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001192:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001194:	2300      	movs	r3, #0
 8001196:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(IO5_RF_GPIO_Port, &GPIO_InitStruct);
 8001198:	f107 0314 	add.w	r3, r7, #20
 800119c:	4619      	mov	r1, r3
 800119e:	4813      	ldr	r0, [pc, #76]	; (80011ec <MX_GPIO_Init+0x178>)
 80011a0:	f000 fd42 	bl	8001c28 <HAL_GPIO_Init>

  /*Configure GPIO pin : INDICATOR_LED_Pin */
  GPIO_InitStruct.Pin = INDICATOR_LED_Pin;
 80011a4:	2304      	movs	r3, #4
 80011a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011a8:	2301      	movs	r3, #1
 80011aa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ac:	2300      	movs	r3, #0
 80011ae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011b0:	2300      	movs	r3, #0
 80011b2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(INDICATOR_LED_GPIO_Port, &GPIO_InitStruct);
 80011b4:	f107 0314 	add.w	r3, r7, #20
 80011b8:	4619      	mov	r1, r3
 80011ba:	480e      	ldr	r0, [pc, #56]	; (80011f4 <MX_GPIO_Init+0x180>)
 80011bc:	f000 fd34 	bl	8001c28 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 80011c0:	2200      	movs	r2, #0
 80011c2:	2100      	movs	r1, #0
 80011c4:	2007      	movs	r0, #7
 80011c6:	f000 fc66 	bl	8001a96 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80011ca:	2007      	movs	r0, #7
 80011cc:	f000 fc7f 	bl	8001ace <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80011d0:	2200      	movs	r2, #0
 80011d2:	2100      	movs	r1, #0
 80011d4:	2028      	movs	r0, #40	; 0x28
 80011d6:	f000 fc5e 	bl	8001a96 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80011da:	2028      	movs	r0, #40	; 0x28
 80011dc:	f000 fc77 	bl	8001ace <HAL_NVIC_EnableIRQ>

}
 80011e0:	bf00      	nop
 80011e2:	3728      	adds	r7, #40	; 0x28
 80011e4:	46bd      	mov	sp, r7
 80011e6:	bd80      	pop	{r7, pc}
 80011e8:	40023800 	.word	0x40023800
 80011ec:	40020000 	.word	0x40020000
 80011f0:	40020400 	.word	0x40020400
 80011f4:	40020c00 	.word	0x40020c00

080011f8 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b082      	sub	sp, #8
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	4603      	mov	r3, r0
 8001200:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == LoRaClass.DIO0_pin){
 8001202:	4b08      	ldr	r3, [pc, #32]	; (8001224 <HAL_GPIO_EXTI_Callback+0x2c>)
 8001204:	8a9b      	ldrh	r3, [r3, #20]
 8001206:	88fa      	ldrh	r2, [r7, #6]
 8001208:	429a      	cmp	r2, r3
 800120a:	d106      	bne.n	800121a <HAL_GPIO_EXTI_Callback+0x22>
		RF_available_bytes = LoRa_received_bytes(&LoRaClass);
 800120c:	4805      	ldr	r0, [pc, #20]	; (8001224 <HAL_GPIO_EXTI_Callback+0x2c>)
 800120e:	f7ff fd3d 	bl	8000c8c <LoRa_received_bytes>
 8001212:	4603      	mov	r3, r0
 8001214:	461a      	mov	r2, r3
 8001216:	4b04      	ldr	r3, [pc, #16]	; (8001228 <HAL_GPIO_EXTI_Callback+0x30>)
 8001218:	701a      	strb	r2, [r3, #0]
	}
}
 800121a:	bf00      	nop
 800121c:	3708      	adds	r7, #8
 800121e:	46bd      	mov	sp, r7
 8001220:	bd80      	pop	{r7, pc}
 8001222:	bf00      	nop
 8001224:	20000570 	.word	0x20000570
 8001228:	20000264 	.word	0x20000264

0800122c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b082      	sub	sp, #8
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
    HAL_UART_Receive_IT(USB_UART, UART_Buff, sizeof(UART_Buff));
 8001234:	4b07      	ldr	r3, [pc, #28]	; (8001254 <HAL_UART_RxCpltCallback+0x28>)
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	f44f 7280 	mov.w	r2, #256	; 0x100
 800123c:	4906      	ldr	r1, [pc, #24]	; (8001258 <HAL_UART_RxCpltCallback+0x2c>)
 800123e:	4618      	mov	r0, r3
 8001240:	f003 fccd 	bl	8004bde <HAL_UART_Receive_IT>
    UART_READY = true;
 8001244:	4b05      	ldr	r3, [pc, #20]	; (800125c <HAL_UART_RxCpltCallback+0x30>)
 8001246:	2201      	movs	r2, #1
 8001248:	701a      	strb	r2, [r3, #0]
}
 800124a:	bf00      	nop
 800124c:	3708      	adds	r7, #8
 800124e:	46bd      	mov	sp, r7
 8001250:	bd80      	pop	{r7, pc}
 8001252:	bf00      	nop
 8001254:	20000000 	.word	0x20000000
 8001258:	20000368 	.word	0x20000368
 800125c:	20000468 	.word	0x20000468

08001260 <Blocking_LED_Blink>:

void Blocking_LED_Blink(uint8_t freq) {
 8001260:	b580      	push	{r7, lr}
 8001262:	b082      	sub	sp, #8
 8001264:	af00      	add	r7, sp, #0
 8001266:	4603      	mov	r3, r0
 8001268:	71fb      	strb	r3, [r7, #7]
	while(1) {
		HAL_GPIO_WritePin(INDICATOR_LED_GPIO_Port, INDICATOR_LED_Pin, GPIO_PIN_SET);
 800126a:	2201      	movs	r2, #1
 800126c:	2104      	movs	r1, #4
 800126e:	480c      	ldr	r0, [pc, #48]	; (80012a0 <Blocking_LED_Blink+0x40>)
 8001270:	f000 fe76 	bl	8001f60 <HAL_GPIO_WritePin>
		HAL_Delay(1000/freq);
 8001274:	79fb      	ldrb	r3, [r7, #7]
 8001276:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800127a:	fb92 f3f3 	sdiv	r3, r2, r3
 800127e:	4618      	mov	r0, r3
 8001280:	f000 fb0a 	bl	8001898 <HAL_Delay>
		HAL_GPIO_WritePin(INDICATOR_LED_GPIO_Port, INDICATOR_LED_Pin, GPIO_PIN_RESET);
 8001284:	2200      	movs	r2, #0
 8001286:	2104      	movs	r1, #4
 8001288:	4805      	ldr	r0, [pc, #20]	; (80012a0 <Blocking_LED_Blink+0x40>)
 800128a:	f000 fe69 	bl	8001f60 <HAL_GPIO_WritePin>
		HAL_Delay(1000/freq);
 800128e:	79fb      	ldrb	r3, [r7, #7]
 8001290:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001294:	fb92 f3f3 	sdiv	r3, r2, r3
 8001298:	4618      	mov	r0, r3
 800129a:	f000 fafd 	bl	8001898 <HAL_Delay>
		HAL_GPIO_WritePin(INDICATOR_LED_GPIO_Port, INDICATOR_LED_Pin, GPIO_PIN_SET);
 800129e:	e7e4      	b.n	800126a <Blocking_LED_Blink+0xa>
 80012a0:	40020c00 	.word	0x40020c00

080012a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012a4:	b480      	push	{r7}
 80012a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012a8:	b672      	cpsid	i
}
 80012aa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80012ac:	e7fe      	b.n	80012ac <Error_Handler+0x8>
	...

080012b0 <RetargetInit>:
#define STDOUT_FILENO 1
#define STDERR_FILENO 2

UART_HandleTypeDef *gHuart;

void RetargetInit(UART_HandleTypeDef *huart) {
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b082      	sub	sp, #8
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
  gHuart = huart;
 80012b8:	4a07      	ldr	r2, [pc, #28]	; (80012d8 <RetargetInit+0x28>)
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	6013      	str	r3, [r2, #0]

  /* Disable I/O buffering for STDOUT stream, so that
   * chars are sent out as soon as they are printed. */
  setvbuf(stdout, NULL, _IONBF, 0);
 80012be:	4b07      	ldr	r3, [pc, #28]	; (80012dc <RetargetInit+0x2c>)
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	6898      	ldr	r0, [r3, #8]
 80012c4:	2300      	movs	r3, #0
 80012c6:	2202      	movs	r2, #2
 80012c8:	2100      	movs	r1, #0
 80012ca:	f008 fdb5 	bl	8009e38 <setvbuf>
}
 80012ce:	bf00      	nop
 80012d0:	3708      	adds	r7, #8
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd80      	pop	{r7, pc}
 80012d6:	bf00      	nop
 80012d8:	2000059c 	.word	0x2000059c
 80012dc:	20000104 	.word	0x20000104

080012e0 <_write>:

  errno = EBADF;
  return 0;
}

int _write(int fd, char* ptr, int len) {
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b086      	sub	sp, #24
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	60f8      	str	r0, [r7, #12]
 80012e8:	60b9      	str	r1, [r7, #8]
 80012ea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDOUT_FILENO || fd == STDERR_FILENO) {
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	2b01      	cmp	r3, #1
 80012f0:	d002      	beq.n	80012f8 <_write+0x18>
 80012f2:	68fb      	ldr	r3, [r7, #12]
 80012f4:	2b02      	cmp	r3, #2
 80012f6:	d111      	bne.n	800131c <_write+0x3c>
    hstatus = HAL_UART_Transmit(gHuart, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 80012f8:	4b0e      	ldr	r3, [pc, #56]	; (8001334 <_write+0x54>)
 80012fa:	6818      	ldr	r0, [r3, #0]
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	b29a      	uxth	r2, r3
 8001300:	f04f 33ff 	mov.w	r3, #4294967295
 8001304:	68b9      	ldr	r1, [r7, #8]
 8001306:	f003 fb36 	bl	8004976 <HAL_UART_Transmit>
 800130a:	4603      	mov	r3, r0
 800130c:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 800130e:	7dfb      	ldrb	r3, [r7, #23]
 8001310:	2b00      	cmp	r3, #0
 8001312:	d101      	bne.n	8001318 <_write+0x38>
      return len;
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	e008      	b.n	800132a <_write+0x4a>
    else
      return EIO;
 8001318:	2305      	movs	r3, #5
 800131a:	e006      	b.n	800132a <_write+0x4a>
  }
  errno = EBADF;
 800131c:	f008 fd4c 	bl	8009db8 <__errno>
 8001320:	4603      	mov	r3, r0
 8001322:	2209      	movs	r2, #9
 8001324:	601a      	str	r2, [r3, #0]
  return -1;
 8001326:	f04f 33ff 	mov.w	r3, #4294967295
}
 800132a:	4618      	mov	r0, r3
 800132c:	3718      	adds	r7, #24
 800132e:	46bd      	mov	sp, r7
 8001330:	bd80      	pop	{r7, pc}
 8001332:	bf00      	nop
 8001334:	2000059c 	.word	0x2000059c

08001338 <_close>:

int _close(int fd) {
 8001338:	b580      	push	{r7, lr}
 800133a:	b082      	sub	sp, #8
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	2b00      	cmp	r3, #0
 8001344:	db04      	blt.n	8001350 <_close+0x18>
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	2b02      	cmp	r3, #2
 800134a:	dc01      	bgt.n	8001350 <_close+0x18>
    return 0;
 800134c:	2300      	movs	r3, #0
 800134e:	e006      	b.n	800135e <_close+0x26>

  errno = EBADF;
 8001350:	f008 fd32 	bl	8009db8 <__errno>
 8001354:	4603      	mov	r3, r0
 8001356:	2209      	movs	r2, #9
 8001358:	601a      	str	r2, [r3, #0]
  return -1;
 800135a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800135e:	4618      	mov	r0, r3
 8001360:	3708      	adds	r7, #8
 8001362:	46bd      	mov	sp, r7
 8001364:	bd80      	pop	{r7, pc}

08001366 <_lseek>:

int _lseek(int fd, int ptr, int dir) {
 8001366:	b580      	push	{r7, lr}
 8001368:	b084      	sub	sp, #16
 800136a:	af00      	add	r7, sp, #0
 800136c:	60f8      	str	r0, [r7, #12]
 800136e:	60b9      	str	r1, [r7, #8]
 8001370:	607a      	str	r2, [r7, #4]
  (void) fd;
  (void) ptr;
  (void) dir;

  errno = EBADF;
 8001372:	f008 fd21 	bl	8009db8 <__errno>
 8001376:	4603      	mov	r3, r0
 8001378:	2209      	movs	r2, #9
 800137a:	601a      	str	r2, [r3, #0]
  return -1;
 800137c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001380:	4618      	mov	r0, r3
 8001382:	3710      	adds	r7, #16
 8001384:	46bd      	mov	sp, r7
 8001386:	bd80      	pop	{r7, pc}

08001388 <_read>:

int _read(int fd, char* ptr, int len) {
 8001388:	b580      	push	{r7, lr}
 800138a:	b086      	sub	sp, #24
 800138c:	af00      	add	r7, sp, #0
 800138e:	60f8      	str	r0, [r7, #12]
 8001390:	60b9      	str	r1, [r7, #8]
 8001392:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDIN_FILENO) {
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	2b00      	cmp	r3, #0
 8001398:	d110      	bne.n	80013bc <_read+0x34>
    hstatus = HAL_UART_Receive(gHuart, (uint8_t *) ptr, 1, HAL_MAX_DELAY);
 800139a:	4b0e      	ldr	r3, [pc, #56]	; (80013d4 <_read+0x4c>)
 800139c:	6818      	ldr	r0, [r3, #0]
 800139e:	f04f 33ff 	mov.w	r3, #4294967295
 80013a2:	2201      	movs	r2, #1
 80013a4:	68b9      	ldr	r1, [r7, #8]
 80013a6:	f003 fb78 	bl	8004a9a <HAL_UART_Receive>
 80013aa:	4603      	mov	r3, r0
 80013ac:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 80013ae:	7dfb      	ldrb	r3, [r7, #23]
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d101      	bne.n	80013b8 <_read+0x30>
      return 1;
 80013b4:	2301      	movs	r3, #1
 80013b6:	e008      	b.n	80013ca <_read+0x42>
    else
      return EIO;
 80013b8:	2305      	movs	r3, #5
 80013ba:	e006      	b.n	80013ca <_read+0x42>
  }
  errno = EBADF;
 80013bc:	f008 fcfc 	bl	8009db8 <__errno>
 80013c0:	4603      	mov	r3, r0
 80013c2:	2209      	movs	r2, #9
 80013c4:	601a      	str	r2, [r3, #0]
  return -1;
 80013c6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80013ca:	4618      	mov	r0, r3
 80013cc:	3718      	adds	r7, #24
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bd80      	pop	{r7, pc}
 80013d2:	bf00      	nop
 80013d4:	2000059c 	.word	0x2000059c

080013d8 <_fstat>:

int _fstat(int fd, struct stat* st) {
 80013d8:	b580      	push	{r7, lr}
 80013da:	b082      	sub	sp, #8
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
 80013e0:	6039      	str	r1, [r7, #0]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO) {
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	db08      	blt.n	80013fa <_fstat+0x22>
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	2b02      	cmp	r3, #2
 80013ec:	dc05      	bgt.n	80013fa <_fstat+0x22>
    st->st_mode = S_IFCHR;
 80013ee:	683b      	ldr	r3, [r7, #0]
 80013f0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80013f4:	605a      	str	r2, [r3, #4]
    return 0;
 80013f6:	2300      	movs	r3, #0
 80013f8:	e005      	b.n	8001406 <_fstat+0x2e>
  }

  errno = EBADF;
 80013fa:	f008 fcdd 	bl	8009db8 <__errno>
 80013fe:	4603      	mov	r3, r0
 8001400:	2209      	movs	r2, #9
 8001402:	601a      	str	r2, [r3, #0]
  return 0;
 8001404:	2300      	movs	r3, #0
}
 8001406:	4618      	mov	r0, r3
 8001408:	3708      	adds	r7, #8
 800140a:	46bd      	mov	sp, r7
 800140c:	bd80      	pop	{r7, pc}
	...

08001410 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001410:	b480      	push	{r7}
 8001412:	b083      	sub	sp, #12
 8001414:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001416:	2300      	movs	r3, #0
 8001418:	607b      	str	r3, [r7, #4]
 800141a:	4b10      	ldr	r3, [pc, #64]	; (800145c <HAL_MspInit+0x4c>)
 800141c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800141e:	4a0f      	ldr	r2, [pc, #60]	; (800145c <HAL_MspInit+0x4c>)
 8001420:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001424:	6453      	str	r3, [r2, #68]	; 0x44
 8001426:	4b0d      	ldr	r3, [pc, #52]	; (800145c <HAL_MspInit+0x4c>)
 8001428:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800142a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800142e:	607b      	str	r3, [r7, #4]
 8001430:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001432:	2300      	movs	r3, #0
 8001434:	603b      	str	r3, [r7, #0]
 8001436:	4b09      	ldr	r3, [pc, #36]	; (800145c <HAL_MspInit+0x4c>)
 8001438:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800143a:	4a08      	ldr	r2, [pc, #32]	; (800145c <HAL_MspInit+0x4c>)
 800143c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001440:	6413      	str	r3, [r2, #64]	; 0x40
 8001442:	4b06      	ldr	r3, [pc, #24]	; (800145c <HAL_MspInit+0x4c>)
 8001444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001446:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800144a:	603b      	str	r3, [r7, #0]
 800144c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800144e:	bf00      	nop
 8001450:	370c      	adds	r7, #12
 8001452:	46bd      	mov	sp, r7
 8001454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001458:	4770      	bx	lr
 800145a:	bf00      	nop
 800145c:	40023800 	.word	0x40023800

08001460 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b08a      	sub	sp, #40	; 0x28
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001468:	f107 0314 	add.w	r3, r7, #20
 800146c:	2200      	movs	r2, #0
 800146e:	601a      	str	r2, [r3, #0]
 8001470:	605a      	str	r2, [r3, #4]
 8001472:	609a      	str	r2, [r3, #8]
 8001474:	60da      	str	r2, [r3, #12]
 8001476:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	4a19      	ldr	r2, [pc, #100]	; (80014e4 <HAL_SPI_MspInit+0x84>)
 800147e:	4293      	cmp	r3, r2
 8001480:	d12b      	bne.n	80014da <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001482:	2300      	movs	r3, #0
 8001484:	613b      	str	r3, [r7, #16]
 8001486:	4b18      	ldr	r3, [pc, #96]	; (80014e8 <HAL_SPI_MspInit+0x88>)
 8001488:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800148a:	4a17      	ldr	r2, [pc, #92]	; (80014e8 <HAL_SPI_MspInit+0x88>)
 800148c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001490:	6453      	str	r3, [r2, #68]	; 0x44
 8001492:	4b15      	ldr	r3, [pc, #84]	; (80014e8 <HAL_SPI_MspInit+0x88>)
 8001494:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001496:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800149a:	613b      	str	r3, [r7, #16]
 800149c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800149e:	2300      	movs	r3, #0
 80014a0:	60fb      	str	r3, [r7, #12]
 80014a2:	4b11      	ldr	r3, [pc, #68]	; (80014e8 <HAL_SPI_MspInit+0x88>)
 80014a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014a6:	4a10      	ldr	r2, [pc, #64]	; (80014e8 <HAL_SPI_MspInit+0x88>)
 80014a8:	f043 0301 	orr.w	r3, r3, #1
 80014ac:	6313      	str	r3, [r2, #48]	; 0x30
 80014ae:	4b0e      	ldr	r3, [pc, #56]	; (80014e8 <HAL_SPI_MspInit+0x88>)
 80014b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014b2:	f003 0301 	and.w	r3, r3, #1
 80014b6:	60fb      	str	r3, [r7, #12]
 80014b8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80014ba:	23e0      	movs	r3, #224	; 0xe0
 80014bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014be:	2302      	movs	r3, #2
 80014c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014c2:	2300      	movs	r3, #0
 80014c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014c6:	2303      	movs	r3, #3
 80014c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80014ca:	2305      	movs	r3, #5
 80014cc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014ce:	f107 0314 	add.w	r3, r7, #20
 80014d2:	4619      	mov	r1, r3
 80014d4:	4805      	ldr	r0, [pc, #20]	; (80014ec <HAL_SPI_MspInit+0x8c>)
 80014d6:	f000 fba7 	bl	8001c28 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80014da:	bf00      	nop
 80014dc:	3728      	adds	r7, #40	; 0x28
 80014de:	46bd      	mov	sp, r7
 80014e0:	bd80      	pop	{r7, pc}
 80014e2:	bf00      	nop
 80014e4:	40013000 	.word	0x40013000
 80014e8:	40023800 	.word	0x40023800
 80014ec:	40020000 	.word	0x40020000

080014f0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b08c      	sub	sp, #48	; 0x30
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014f8:	f107 031c 	add.w	r3, r7, #28
 80014fc:	2200      	movs	r2, #0
 80014fe:	601a      	str	r2, [r3, #0]
 8001500:	605a      	str	r2, [r3, #4]
 8001502:	609a      	str	r2, [r3, #8]
 8001504:	60da      	str	r2, [r3, #12]
 8001506:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	4a3a      	ldr	r2, [pc, #232]	; (80015f8 <HAL_UART_MspInit+0x108>)
 800150e:	4293      	cmp	r3, r2
 8001510:	d135      	bne.n	800157e <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001512:	2300      	movs	r3, #0
 8001514:	61bb      	str	r3, [r7, #24]
 8001516:	4b39      	ldr	r3, [pc, #228]	; (80015fc <HAL_UART_MspInit+0x10c>)
 8001518:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800151a:	4a38      	ldr	r2, [pc, #224]	; (80015fc <HAL_UART_MspInit+0x10c>)
 800151c:	f043 0310 	orr.w	r3, r3, #16
 8001520:	6453      	str	r3, [r2, #68]	; 0x44
 8001522:	4b36      	ldr	r3, [pc, #216]	; (80015fc <HAL_UART_MspInit+0x10c>)
 8001524:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001526:	f003 0310 	and.w	r3, r3, #16
 800152a:	61bb      	str	r3, [r7, #24]
 800152c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800152e:	2300      	movs	r3, #0
 8001530:	617b      	str	r3, [r7, #20]
 8001532:	4b32      	ldr	r3, [pc, #200]	; (80015fc <HAL_UART_MspInit+0x10c>)
 8001534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001536:	4a31      	ldr	r2, [pc, #196]	; (80015fc <HAL_UART_MspInit+0x10c>)
 8001538:	f043 0301 	orr.w	r3, r3, #1
 800153c:	6313      	str	r3, [r2, #48]	; 0x30
 800153e:	4b2f      	ldr	r3, [pc, #188]	; (80015fc <HAL_UART_MspInit+0x10c>)
 8001540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001542:	f003 0301 	and.w	r3, r3, #1
 8001546:	617b      	str	r3, [r7, #20]
 8001548:	697b      	ldr	r3, [r7, #20]
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    PA11     ------> USART1_CTS
    PA12     ------> USART1_RTS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 800154a:	f44f 53f0 	mov.w	r3, #7680	; 0x1e00
 800154e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001550:	2302      	movs	r3, #2
 8001552:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001554:	2300      	movs	r3, #0
 8001556:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001558:	2303      	movs	r3, #3
 800155a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800155c:	2307      	movs	r3, #7
 800155e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001560:	f107 031c 	add.w	r3, r7, #28
 8001564:	4619      	mov	r1, r3
 8001566:	4826      	ldr	r0, [pc, #152]	; (8001600 <HAL_UART_MspInit+0x110>)
 8001568:	f000 fb5e 	bl	8001c28 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800156c:	2200      	movs	r2, #0
 800156e:	2100      	movs	r1, #0
 8001570:	2025      	movs	r0, #37	; 0x25
 8001572:	f000 fa90 	bl	8001a96 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001576:	2025      	movs	r0, #37	; 0x25
 8001578:	f000 faa9 	bl	8001ace <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800157c:	e038      	b.n	80015f0 <HAL_UART_MspInit+0x100>
  else if(huart->Instance==USART2)
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	4a20      	ldr	r2, [pc, #128]	; (8001604 <HAL_UART_MspInit+0x114>)
 8001584:	4293      	cmp	r3, r2
 8001586:	d133      	bne.n	80015f0 <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001588:	2300      	movs	r3, #0
 800158a:	613b      	str	r3, [r7, #16]
 800158c:	4b1b      	ldr	r3, [pc, #108]	; (80015fc <HAL_UART_MspInit+0x10c>)
 800158e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001590:	4a1a      	ldr	r2, [pc, #104]	; (80015fc <HAL_UART_MspInit+0x10c>)
 8001592:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001596:	6413      	str	r3, [r2, #64]	; 0x40
 8001598:	4b18      	ldr	r3, [pc, #96]	; (80015fc <HAL_UART_MspInit+0x10c>)
 800159a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800159c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015a0:	613b      	str	r3, [r7, #16]
 80015a2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015a4:	2300      	movs	r3, #0
 80015a6:	60fb      	str	r3, [r7, #12]
 80015a8:	4b14      	ldr	r3, [pc, #80]	; (80015fc <HAL_UART_MspInit+0x10c>)
 80015aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ac:	4a13      	ldr	r2, [pc, #76]	; (80015fc <HAL_UART_MspInit+0x10c>)
 80015ae:	f043 0301 	orr.w	r3, r3, #1
 80015b2:	6313      	str	r3, [r2, #48]	; 0x30
 80015b4:	4b11      	ldr	r3, [pc, #68]	; (80015fc <HAL_UART_MspInit+0x10c>)
 80015b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015b8:	f003 0301 	and.w	r3, r3, #1
 80015bc:	60fb      	str	r3, [r7, #12]
 80015be:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 80015c0:	230f      	movs	r3, #15
 80015c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015c4:	2302      	movs	r3, #2
 80015c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c8:	2300      	movs	r3, #0
 80015ca:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015cc:	2303      	movs	r3, #3
 80015ce:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80015d0:	2307      	movs	r3, #7
 80015d2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015d4:	f107 031c 	add.w	r3, r7, #28
 80015d8:	4619      	mov	r1, r3
 80015da:	4809      	ldr	r0, [pc, #36]	; (8001600 <HAL_UART_MspInit+0x110>)
 80015dc:	f000 fb24 	bl	8001c28 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80015e0:	2200      	movs	r2, #0
 80015e2:	2100      	movs	r1, #0
 80015e4:	2026      	movs	r0, #38	; 0x26
 80015e6:	f000 fa56 	bl	8001a96 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80015ea:	2026      	movs	r0, #38	; 0x26
 80015ec:	f000 fa6f 	bl	8001ace <HAL_NVIC_EnableIRQ>
}
 80015f0:	bf00      	nop
 80015f2:	3730      	adds	r7, #48	; 0x30
 80015f4:	46bd      	mov	sp, r7
 80015f6:	bd80      	pop	{r7, pc}
 80015f8:	40011000 	.word	0x40011000
 80015fc:	40023800 	.word	0x40023800
 8001600:	40020000 	.word	0x40020000
 8001604:	40004400 	.word	0x40004400

08001608 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001608:	b480      	push	{r7}
 800160a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800160c:	e7fe      	b.n	800160c <NMI_Handler+0x4>

0800160e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800160e:	b480      	push	{r7}
 8001610:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001612:	e7fe      	b.n	8001612 <HardFault_Handler+0x4>

08001614 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001614:	b480      	push	{r7}
 8001616:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001618:	e7fe      	b.n	8001618 <MemManage_Handler+0x4>

0800161a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800161a:	b480      	push	{r7}
 800161c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800161e:	e7fe      	b.n	800161e <BusFault_Handler+0x4>

08001620 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001620:	b480      	push	{r7}
 8001622:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001624:	e7fe      	b.n	8001624 <UsageFault_Handler+0x4>

08001626 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001626:	b480      	push	{r7}
 8001628:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800162a:	bf00      	nop
 800162c:	46bd      	mov	sp, r7
 800162e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001632:	4770      	bx	lr

08001634 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001634:	b480      	push	{r7}
 8001636:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001638:	bf00      	nop
 800163a:	46bd      	mov	sp, r7
 800163c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001640:	4770      	bx	lr

08001642 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001642:	b480      	push	{r7}
 8001644:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001646:	bf00      	nop
 8001648:	46bd      	mov	sp, r7
 800164a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164e:	4770      	bx	lr

08001650 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001654:	f000 f900 	bl	8001858 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001658:	bf00      	nop
 800165a:	bd80      	pop	{r7, pc}

0800165c <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(IO0_RF_Pin);
 8001660:	2002      	movs	r0, #2
 8001662:	f000 fc97 	bl	8001f94 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8001666:	bf00      	nop
 8001668:	bd80      	pop	{r7, pc}
	...

0800166c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001670:	4802      	ldr	r0, [pc, #8]	; (800167c <USART1_IRQHandler+0x10>)
 8001672:	f003 fae5 	bl	8004c40 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001676:	bf00      	nop
 8001678:	bd80      	pop	{r7, pc}
 800167a:	bf00      	nop
 800167c:	200001dc 	.word	0x200001dc

08001680 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001684:	4802      	ldr	r0, [pc, #8]	; (8001690 <USART2_IRQHandler+0x10>)
 8001686:	f003 fadb 	bl	8004c40 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800168a:	bf00      	nop
 800168c:	bd80      	pop	{r7, pc}
 800168e:	bf00      	nop
 8001690:	20000220 	.word	0x20000220

08001694 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(IO1_RF_Pin);
 8001698:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800169c:	f000 fc7a 	bl	8001f94 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(IO2_RF_Pin);
 80016a0:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80016a4:	f000 fc76 	bl	8001f94 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(IO3_RF_Pin);
 80016a8:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80016ac:	f000 fc72 	bl	8001f94 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(IO4_RF_Pin);
 80016b0:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80016b4:	f000 fc6e 	bl	8001f94 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80016b8:	bf00      	nop
 80016ba:	bd80      	pop	{r7, pc}

080016bc <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
 80016c0:	4802      	ldr	r0, [pc, #8]	; (80016cc <OTG_HS_IRQHandler+0x10>)
 80016c2:	f000 fdcf 	bl	8002264 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 80016c6:	bf00      	nop
 80016c8:	bd80      	pop	{r7, pc}
 80016ca:	bf00      	nop
 80016cc:	20001a88 	.word	0x20001a88

080016d0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b086      	sub	sp, #24
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80016d8:	4a14      	ldr	r2, [pc, #80]	; (800172c <_sbrk+0x5c>)
 80016da:	4b15      	ldr	r3, [pc, #84]	; (8001730 <_sbrk+0x60>)
 80016dc:	1ad3      	subs	r3, r2, r3
 80016de:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80016e0:	697b      	ldr	r3, [r7, #20]
 80016e2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80016e4:	4b13      	ldr	r3, [pc, #76]	; (8001734 <_sbrk+0x64>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d102      	bne.n	80016f2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80016ec:	4b11      	ldr	r3, [pc, #68]	; (8001734 <_sbrk+0x64>)
 80016ee:	4a12      	ldr	r2, [pc, #72]	; (8001738 <_sbrk+0x68>)
 80016f0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80016f2:	4b10      	ldr	r3, [pc, #64]	; (8001734 <_sbrk+0x64>)
 80016f4:	681a      	ldr	r2, [r3, #0]
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	4413      	add	r3, r2
 80016fa:	693a      	ldr	r2, [r7, #16]
 80016fc:	429a      	cmp	r2, r3
 80016fe:	d207      	bcs.n	8001710 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001700:	f008 fb5a 	bl	8009db8 <__errno>
 8001704:	4603      	mov	r3, r0
 8001706:	220c      	movs	r2, #12
 8001708:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800170a:	f04f 33ff 	mov.w	r3, #4294967295
 800170e:	e009      	b.n	8001724 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001710:	4b08      	ldr	r3, [pc, #32]	; (8001734 <_sbrk+0x64>)
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001716:	4b07      	ldr	r3, [pc, #28]	; (8001734 <_sbrk+0x64>)
 8001718:	681a      	ldr	r2, [r3, #0]
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	4413      	add	r3, r2
 800171e:	4a05      	ldr	r2, [pc, #20]	; (8001734 <_sbrk+0x64>)
 8001720:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001722:	68fb      	ldr	r3, [r7, #12]
}
 8001724:	4618      	mov	r0, r3
 8001726:	3718      	adds	r7, #24
 8001728:	46bd      	mov	sp, r7
 800172a:	bd80      	pop	{r7, pc}
 800172c:	20020000 	.word	0x20020000
 8001730:	00000400 	.word	0x00000400
 8001734:	200005a0 	.word	0x200005a0
 8001738:	200021c8 	.word	0x200021c8

0800173c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800173c:	b480      	push	{r7}
 800173e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001740:	4b06      	ldr	r3, [pc, #24]	; (800175c <SystemInit+0x20>)
 8001742:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001746:	4a05      	ldr	r2, [pc, #20]	; (800175c <SystemInit+0x20>)
 8001748:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800174c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001750:	bf00      	nop
 8001752:	46bd      	mov	sp, r7
 8001754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001758:	4770      	bx	lr
 800175a:	bf00      	nop
 800175c:	e000ed00 	.word	0xe000ed00

08001760 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001760:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001798 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001764:	480d      	ldr	r0, [pc, #52]	; (800179c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001766:	490e      	ldr	r1, [pc, #56]	; (80017a0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001768:	4a0e      	ldr	r2, [pc, #56]	; (80017a4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800176a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800176c:	e002      	b.n	8001774 <LoopCopyDataInit>

0800176e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800176e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001770:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001772:	3304      	adds	r3, #4

08001774 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001774:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001776:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001778:	d3f9      	bcc.n	800176e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800177a:	4a0b      	ldr	r2, [pc, #44]	; (80017a8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800177c:	4c0b      	ldr	r4, [pc, #44]	; (80017ac <LoopFillZerobss+0x26>)
  movs r3, #0
 800177e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001780:	e001      	b.n	8001786 <LoopFillZerobss>

08001782 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001782:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001784:	3204      	adds	r2, #4

08001786 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001786:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001788:	d3fb      	bcc.n	8001782 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800178a:	f7ff ffd7 	bl	800173c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800178e:	f008 fb19 	bl	8009dc4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001792:	f7ff fa89 	bl	8000ca8 <main>
  bx  lr    
 8001796:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001798:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800179c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80017a0:	20000168 	.word	0x20000168
  ldr r2, =_sidata
 80017a4:	0800a7e4 	.word	0x0800a7e4
  ldr r2, =_sbss
 80017a8:	20000168 	.word	0x20000168
  ldr r4, =_ebss
 80017ac:	200021c4 	.word	0x200021c4

080017b0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80017b0:	e7fe      	b.n	80017b0 <ADC_IRQHandler>
	...

080017b4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80017b8:	4b0e      	ldr	r3, [pc, #56]	; (80017f4 <HAL_Init+0x40>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	4a0d      	ldr	r2, [pc, #52]	; (80017f4 <HAL_Init+0x40>)
 80017be:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80017c2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80017c4:	4b0b      	ldr	r3, [pc, #44]	; (80017f4 <HAL_Init+0x40>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	4a0a      	ldr	r2, [pc, #40]	; (80017f4 <HAL_Init+0x40>)
 80017ca:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80017ce:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80017d0:	4b08      	ldr	r3, [pc, #32]	; (80017f4 <HAL_Init+0x40>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	4a07      	ldr	r2, [pc, #28]	; (80017f4 <HAL_Init+0x40>)
 80017d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017da:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017dc:	2003      	movs	r0, #3
 80017de:	f000 f94f 	bl	8001a80 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80017e2:	200f      	movs	r0, #15
 80017e4:	f000 f808 	bl	80017f8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80017e8:	f7ff fe12 	bl	8001410 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80017ec:	2300      	movs	r3, #0
}
 80017ee:	4618      	mov	r0, r3
 80017f0:	bd80      	pop	{r7, pc}
 80017f2:	bf00      	nop
 80017f4:	40023c00 	.word	0x40023c00

080017f8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b082      	sub	sp, #8
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001800:	4b12      	ldr	r3, [pc, #72]	; (800184c <HAL_InitTick+0x54>)
 8001802:	681a      	ldr	r2, [r3, #0]
 8001804:	4b12      	ldr	r3, [pc, #72]	; (8001850 <HAL_InitTick+0x58>)
 8001806:	781b      	ldrb	r3, [r3, #0]
 8001808:	4619      	mov	r1, r3
 800180a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800180e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001812:	fbb2 f3f3 	udiv	r3, r2, r3
 8001816:	4618      	mov	r0, r3
 8001818:	f000 f967 	bl	8001aea <HAL_SYSTICK_Config>
 800181c:	4603      	mov	r3, r0
 800181e:	2b00      	cmp	r3, #0
 8001820:	d001      	beq.n	8001826 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001822:	2301      	movs	r3, #1
 8001824:	e00e      	b.n	8001844 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	2b0f      	cmp	r3, #15
 800182a:	d80a      	bhi.n	8001842 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800182c:	2200      	movs	r2, #0
 800182e:	6879      	ldr	r1, [r7, #4]
 8001830:	f04f 30ff 	mov.w	r0, #4294967295
 8001834:	f000 f92f 	bl	8001a96 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001838:	4a06      	ldr	r2, [pc, #24]	; (8001854 <HAL_InitTick+0x5c>)
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800183e:	2300      	movs	r3, #0
 8001840:	e000      	b.n	8001844 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001842:	2301      	movs	r3, #1
}
 8001844:	4618      	mov	r0, r3
 8001846:	3708      	adds	r7, #8
 8001848:	46bd      	mov	sp, r7
 800184a:	bd80      	pop	{r7, pc}
 800184c:	20000008 	.word	0x20000008
 8001850:	20000010 	.word	0x20000010
 8001854:	2000000c 	.word	0x2000000c

08001858 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001858:	b480      	push	{r7}
 800185a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800185c:	4b06      	ldr	r3, [pc, #24]	; (8001878 <HAL_IncTick+0x20>)
 800185e:	781b      	ldrb	r3, [r3, #0]
 8001860:	461a      	mov	r2, r3
 8001862:	4b06      	ldr	r3, [pc, #24]	; (800187c <HAL_IncTick+0x24>)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	4413      	add	r3, r2
 8001868:	4a04      	ldr	r2, [pc, #16]	; (800187c <HAL_IncTick+0x24>)
 800186a:	6013      	str	r3, [r2, #0]
}
 800186c:	bf00      	nop
 800186e:	46bd      	mov	sp, r7
 8001870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001874:	4770      	bx	lr
 8001876:	bf00      	nop
 8001878:	20000010 	.word	0x20000010
 800187c:	200005a4 	.word	0x200005a4

08001880 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001880:	b480      	push	{r7}
 8001882:	af00      	add	r7, sp, #0
  return uwTick;
 8001884:	4b03      	ldr	r3, [pc, #12]	; (8001894 <HAL_GetTick+0x14>)
 8001886:	681b      	ldr	r3, [r3, #0]
}
 8001888:	4618      	mov	r0, r3
 800188a:	46bd      	mov	sp, r7
 800188c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001890:	4770      	bx	lr
 8001892:	bf00      	nop
 8001894:	200005a4 	.word	0x200005a4

08001898 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b084      	sub	sp, #16
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80018a0:	f7ff ffee 	bl	8001880 <HAL_GetTick>
 80018a4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018b0:	d005      	beq.n	80018be <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80018b2:	4b0a      	ldr	r3, [pc, #40]	; (80018dc <HAL_Delay+0x44>)
 80018b4:	781b      	ldrb	r3, [r3, #0]
 80018b6:	461a      	mov	r2, r3
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	4413      	add	r3, r2
 80018bc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80018be:	bf00      	nop
 80018c0:	f7ff ffde 	bl	8001880 <HAL_GetTick>
 80018c4:	4602      	mov	r2, r0
 80018c6:	68bb      	ldr	r3, [r7, #8]
 80018c8:	1ad3      	subs	r3, r2, r3
 80018ca:	68fa      	ldr	r2, [r7, #12]
 80018cc:	429a      	cmp	r2, r3
 80018ce:	d8f7      	bhi.n	80018c0 <HAL_Delay+0x28>
  {
  }
}
 80018d0:	bf00      	nop
 80018d2:	bf00      	nop
 80018d4:	3710      	adds	r7, #16
 80018d6:	46bd      	mov	sp, r7
 80018d8:	bd80      	pop	{r7, pc}
 80018da:	bf00      	nop
 80018dc:	20000010 	.word	0x20000010

080018e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018e0:	b480      	push	{r7}
 80018e2:	b085      	sub	sp, #20
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	f003 0307 	and.w	r3, r3, #7
 80018ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80018f0:	4b0c      	ldr	r3, [pc, #48]	; (8001924 <__NVIC_SetPriorityGrouping+0x44>)
 80018f2:	68db      	ldr	r3, [r3, #12]
 80018f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80018f6:	68ba      	ldr	r2, [r7, #8]
 80018f8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80018fc:	4013      	ands	r3, r2
 80018fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001904:	68bb      	ldr	r3, [r7, #8]
 8001906:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001908:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800190c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001910:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001912:	4a04      	ldr	r2, [pc, #16]	; (8001924 <__NVIC_SetPriorityGrouping+0x44>)
 8001914:	68bb      	ldr	r3, [r7, #8]
 8001916:	60d3      	str	r3, [r2, #12]
}
 8001918:	bf00      	nop
 800191a:	3714      	adds	r7, #20
 800191c:	46bd      	mov	sp, r7
 800191e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001922:	4770      	bx	lr
 8001924:	e000ed00 	.word	0xe000ed00

08001928 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001928:	b480      	push	{r7}
 800192a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800192c:	4b04      	ldr	r3, [pc, #16]	; (8001940 <__NVIC_GetPriorityGrouping+0x18>)
 800192e:	68db      	ldr	r3, [r3, #12]
 8001930:	0a1b      	lsrs	r3, r3, #8
 8001932:	f003 0307 	and.w	r3, r3, #7
}
 8001936:	4618      	mov	r0, r3
 8001938:	46bd      	mov	sp, r7
 800193a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193e:	4770      	bx	lr
 8001940:	e000ed00 	.word	0xe000ed00

08001944 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001944:	b480      	push	{r7}
 8001946:	b083      	sub	sp, #12
 8001948:	af00      	add	r7, sp, #0
 800194a:	4603      	mov	r3, r0
 800194c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800194e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001952:	2b00      	cmp	r3, #0
 8001954:	db0b      	blt.n	800196e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001956:	79fb      	ldrb	r3, [r7, #7]
 8001958:	f003 021f 	and.w	r2, r3, #31
 800195c:	4907      	ldr	r1, [pc, #28]	; (800197c <__NVIC_EnableIRQ+0x38>)
 800195e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001962:	095b      	lsrs	r3, r3, #5
 8001964:	2001      	movs	r0, #1
 8001966:	fa00 f202 	lsl.w	r2, r0, r2
 800196a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800196e:	bf00      	nop
 8001970:	370c      	adds	r7, #12
 8001972:	46bd      	mov	sp, r7
 8001974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001978:	4770      	bx	lr
 800197a:	bf00      	nop
 800197c:	e000e100 	.word	0xe000e100

08001980 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001980:	b480      	push	{r7}
 8001982:	b083      	sub	sp, #12
 8001984:	af00      	add	r7, sp, #0
 8001986:	4603      	mov	r3, r0
 8001988:	6039      	str	r1, [r7, #0]
 800198a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800198c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001990:	2b00      	cmp	r3, #0
 8001992:	db0a      	blt.n	80019aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001994:	683b      	ldr	r3, [r7, #0]
 8001996:	b2da      	uxtb	r2, r3
 8001998:	490c      	ldr	r1, [pc, #48]	; (80019cc <__NVIC_SetPriority+0x4c>)
 800199a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800199e:	0112      	lsls	r2, r2, #4
 80019a0:	b2d2      	uxtb	r2, r2
 80019a2:	440b      	add	r3, r1
 80019a4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80019a8:	e00a      	b.n	80019c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019aa:	683b      	ldr	r3, [r7, #0]
 80019ac:	b2da      	uxtb	r2, r3
 80019ae:	4908      	ldr	r1, [pc, #32]	; (80019d0 <__NVIC_SetPriority+0x50>)
 80019b0:	79fb      	ldrb	r3, [r7, #7]
 80019b2:	f003 030f 	and.w	r3, r3, #15
 80019b6:	3b04      	subs	r3, #4
 80019b8:	0112      	lsls	r2, r2, #4
 80019ba:	b2d2      	uxtb	r2, r2
 80019bc:	440b      	add	r3, r1
 80019be:	761a      	strb	r2, [r3, #24]
}
 80019c0:	bf00      	nop
 80019c2:	370c      	adds	r7, #12
 80019c4:	46bd      	mov	sp, r7
 80019c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ca:	4770      	bx	lr
 80019cc:	e000e100 	.word	0xe000e100
 80019d0:	e000ed00 	.word	0xe000ed00

080019d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019d4:	b480      	push	{r7}
 80019d6:	b089      	sub	sp, #36	; 0x24
 80019d8:	af00      	add	r7, sp, #0
 80019da:	60f8      	str	r0, [r7, #12]
 80019dc:	60b9      	str	r1, [r7, #8]
 80019de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	f003 0307 	and.w	r3, r3, #7
 80019e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019e8:	69fb      	ldr	r3, [r7, #28]
 80019ea:	f1c3 0307 	rsb	r3, r3, #7
 80019ee:	2b04      	cmp	r3, #4
 80019f0:	bf28      	it	cs
 80019f2:	2304      	movcs	r3, #4
 80019f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019f6:	69fb      	ldr	r3, [r7, #28]
 80019f8:	3304      	adds	r3, #4
 80019fa:	2b06      	cmp	r3, #6
 80019fc:	d902      	bls.n	8001a04 <NVIC_EncodePriority+0x30>
 80019fe:	69fb      	ldr	r3, [r7, #28]
 8001a00:	3b03      	subs	r3, #3
 8001a02:	e000      	b.n	8001a06 <NVIC_EncodePriority+0x32>
 8001a04:	2300      	movs	r3, #0
 8001a06:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a08:	f04f 32ff 	mov.w	r2, #4294967295
 8001a0c:	69bb      	ldr	r3, [r7, #24]
 8001a0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a12:	43da      	mvns	r2, r3
 8001a14:	68bb      	ldr	r3, [r7, #8]
 8001a16:	401a      	ands	r2, r3
 8001a18:	697b      	ldr	r3, [r7, #20]
 8001a1a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a1c:	f04f 31ff 	mov.w	r1, #4294967295
 8001a20:	697b      	ldr	r3, [r7, #20]
 8001a22:	fa01 f303 	lsl.w	r3, r1, r3
 8001a26:	43d9      	mvns	r1, r3
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a2c:	4313      	orrs	r3, r2
         );
}
 8001a2e:	4618      	mov	r0, r3
 8001a30:	3724      	adds	r7, #36	; 0x24
 8001a32:	46bd      	mov	sp, r7
 8001a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a38:	4770      	bx	lr
	...

08001a3c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b082      	sub	sp, #8
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	3b01      	subs	r3, #1
 8001a48:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a4c:	d301      	bcc.n	8001a52 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a4e:	2301      	movs	r3, #1
 8001a50:	e00f      	b.n	8001a72 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a52:	4a0a      	ldr	r2, [pc, #40]	; (8001a7c <SysTick_Config+0x40>)
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	3b01      	subs	r3, #1
 8001a58:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a5a:	210f      	movs	r1, #15
 8001a5c:	f04f 30ff 	mov.w	r0, #4294967295
 8001a60:	f7ff ff8e 	bl	8001980 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a64:	4b05      	ldr	r3, [pc, #20]	; (8001a7c <SysTick_Config+0x40>)
 8001a66:	2200      	movs	r2, #0
 8001a68:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a6a:	4b04      	ldr	r3, [pc, #16]	; (8001a7c <SysTick_Config+0x40>)
 8001a6c:	2207      	movs	r2, #7
 8001a6e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a70:	2300      	movs	r3, #0
}
 8001a72:	4618      	mov	r0, r3
 8001a74:	3708      	adds	r7, #8
 8001a76:	46bd      	mov	sp, r7
 8001a78:	bd80      	pop	{r7, pc}
 8001a7a:	bf00      	nop
 8001a7c:	e000e010 	.word	0xe000e010

08001a80 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b082      	sub	sp, #8
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a88:	6878      	ldr	r0, [r7, #4]
 8001a8a:	f7ff ff29 	bl	80018e0 <__NVIC_SetPriorityGrouping>
}
 8001a8e:	bf00      	nop
 8001a90:	3708      	adds	r7, #8
 8001a92:	46bd      	mov	sp, r7
 8001a94:	bd80      	pop	{r7, pc}

08001a96 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a96:	b580      	push	{r7, lr}
 8001a98:	b086      	sub	sp, #24
 8001a9a:	af00      	add	r7, sp, #0
 8001a9c:	4603      	mov	r3, r0
 8001a9e:	60b9      	str	r1, [r7, #8]
 8001aa0:	607a      	str	r2, [r7, #4]
 8001aa2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001aa8:	f7ff ff3e 	bl	8001928 <__NVIC_GetPriorityGrouping>
 8001aac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001aae:	687a      	ldr	r2, [r7, #4]
 8001ab0:	68b9      	ldr	r1, [r7, #8]
 8001ab2:	6978      	ldr	r0, [r7, #20]
 8001ab4:	f7ff ff8e 	bl	80019d4 <NVIC_EncodePriority>
 8001ab8:	4602      	mov	r2, r0
 8001aba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001abe:	4611      	mov	r1, r2
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	f7ff ff5d 	bl	8001980 <__NVIC_SetPriority>
}
 8001ac6:	bf00      	nop
 8001ac8:	3718      	adds	r7, #24
 8001aca:	46bd      	mov	sp, r7
 8001acc:	bd80      	pop	{r7, pc}

08001ace <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ace:	b580      	push	{r7, lr}
 8001ad0:	b082      	sub	sp, #8
 8001ad2:	af00      	add	r7, sp, #0
 8001ad4:	4603      	mov	r3, r0
 8001ad6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ad8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001adc:	4618      	mov	r0, r3
 8001ade:	f7ff ff31 	bl	8001944 <__NVIC_EnableIRQ>
}
 8001ae2:	bf00      	nop
 8001ae4:	3708      	adds	r7, #8
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	bd80      	pop	{r7, pc}

08001aea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001aea:	b580      	push	{r7, lr}
 8001aec:	b082      	sub	sp, #8
 8001aee:	af00      	add	r7, sp, #0
 8001af0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001af2:	6878      	ldr	r0, [r7, #4]
 8001af4:	f7ff ffa2 	bl	8001a3c <SysTick_Config>
 8001af8:	4603      	mov	r3, r0
}
 8001afa:	4618      	mov	r0, r3
 8001afc:	3708      	adds	r7, #8
 8001afe:	46bd      	mov	sp, r7
 8001b00:	bd80      	pop	{r7, pc}

08001b02 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001b02:	b580      	push	{r7, lr}
 8001b04:	b084      	sub	sp, #16
 8001b06:	af00      	add	r7, sp, #0
 8001b08:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b0e:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001b10:	f7ff feb6 	bl	8001880 <HAL_GetTick>
 8001b14:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001b1c:	b2db      	uxtb	r3, r3
 8001b1e:	2b02      	cmp	r3, #2
 8001b20:	d008      	beq.n	8001b34 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	2280      	movs	r2, #128	; 0x80
 8001b26:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001b30:	2301      	movs	r3, #1
 8001b32:	e052      	b.n	8001bda <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	681a      	ldr	r2, [r3, #0]
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f022 0216 	bic.w	r2, r2, #22
 8001b42:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	695a      	ldr	r2, [r3, #20]
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001b52:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d103      	bne.n	8001b64 <HAL_DMA_Abort+0x62>
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d007      	beq.n	8001b74 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	681a      	ldr	r2, [r3, #0]
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f022 0208 	bic.w	r2, r2, #8
 8001b72:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	681a      	ldr	r2, [r3, #0]
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f022 0201 	bic.w	r2, r2, #1
 8001b82:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001b84:	e013      	b.n	8001bae <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001b86:	f7ff fe7b 	bl	8001880 <HAL_GetTick>
 8001b8a:	4602      	mov	r2, r0
 8001b8c:	68bb      	ldr	r3, [r7, #8]
 8001b8e:	1ad3      	subs	r3, r2, r3
 8001b90:	2b05      	cmp	r3, #5
 8001b92:	d90c      	bls.n	8001bae <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	2220      	movs	r2, #32
 8001b98:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	2203      	movs	r2, #3
 8001b9e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001baa:	2303      	movs	r3, #3
 8001bac:	e015      	b.n	8001bda <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f003 0301 	and.w	r3, r3, #1
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d1e4      	bne.n	8001b86 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bc0:	223f      	movs	r2, #63	; 0x3f
 8001bc2:	409a      	lsls	r2, r3
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	2201      	movs	r2, #1
 8001bcc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001bd8:	2300      	movs	r3, #0
}
 8001bda:	4618      	mov	r0, r3
 8001bdc:	3710      	adds	r7, #16
 8001bde:	46bd      	mov	sp, r7
 8001be0:	bd80      	pop	{r7, pc}

08001be2 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001be2:	b480      	push	{r7}
 8001be4:	b083      	sub	sp, #12
 8001be6:	af00      	add	r7, sp, #0
 8001be8:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001bf0:	b2db      	uxtb	r3, r3
 8001bf2:	2b02      	cmp	r3, #2
 8001bf4:	d004      	beq.n	8001c00 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	2280      	movs	r2, #128	; 0x80
 8001bfa:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001bfc:	2301      	movs	r3, #1
 8001bfe:	e00c      	b.n	8001c1a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	2205      	movs	r2, #5
 8001c04:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	681a      	ldr	r2, [r3, #0]
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f022 0201 	bic.w	r2, r2, #1
 8001c16:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001c18:	2300      	movs	r3, #0
}
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	370c      	adds	r7, #12
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c24:	4770      	bx	lr
	...

08001c28 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c28:	b480      	push	{r7}
 8001c2a:	b089      	sub	sp, #36	; 0x24
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
 8001c30:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001c32:	2300      	movs	r3, #0
 8001c34:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001c36:	2300      	movs	r3, #0
 8001c38:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c3e:	2300      	movs	r3, #0
 8001c40:	61fb      	str	r3, [r7, #28]
 8001c42:	e16b      	b.n	8001f1c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001c44:	2201      	movs	r2, #1
 8001c46:	69fb      	ldr	r3, [r7, #28]
 8001c48:	fa02 f303 	lsl.w	r3, r2, r3
 8001c4c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001c4e:	683b      	ldr	r3, [r7, #0]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	697a      	ldr	r2, [r7, #20]
 8001c54:	4013      	ands	r3, r2
 8001c56:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001c58:	693a      	ldr	r2, [r7, #16]
 8001c5a:	697b      	ldr	r3, [r7, #20]
 8001c5c:	429a      	cmp	r2, r3
 8001c5e:	f040 815a 	bne.w	8001f16 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001c62:	683b      	ldr	r3, [r7, #0]
 8001c64:	685b      	ldr	r3, [r3, #4]
 8001c66:	f003 0303 	and.w	r3, r3, #3
 8001c6a:	2b01      	cmp	r3, #1
 8001c6c:	d005      	beq.n	8001c7a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c6e:	683b      	ldr	r3, [r7, #0]
 8001c70:	685b      	ldr	r3, [r3, #4]
 8001c72:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001c76:	2b02      	cmp	r3, #2
 8001c78:	d130      	bne.n	8001cdc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	689b      	ldr	r3, [r3, #8]
 8001c7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001c80:	69fb      	ldr	r3, [r7, #28]
 8001c82:	005b      	lsls	r3, r3, #1
 8001c84:	2203      	movs	r2, #3
 8001c86:	fa02 f303 	lsl.w	r3, r2, r3
 8001c8a:	43db      	mvns	r3, r3
 8001c8c:	69ba      	ldr	r2, [r7, #24]
 8001c8e:	4013      	ands	r3, r2
 8001c90:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001c92:	683b      	ldr	r3, [r7, #0]
 8001c94:	68da      	ldr	r2, [r3, #12]
 8001c96:	69fb      	ldr	r3, [r7, #28]
 8001c98:	005b      	lsls	r3, r3, #1
 8001c9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c9e:	69ba      	ldr	r2, [r7, #24]
 8001ca0:	4313      	orrs	r3, r2
 8001ca2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	69ba      	ldr	r2, [r7, #24]
 8001ca8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	685b      	ldr	r3, [r3, #4]
 8001cae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001cb0:	2201      	movs	r2, #1
 8001cb2:	69fb      	ldr	r3, [r7, #28]
 8001cb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb8:	43db      	mvns	r3, r3
 8001cba:	69ba      	ldr	r2, [r7, #24]
 8001cbc:	4013      	ands	r3, r2
 8001cbe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001cc0:	683b      	ldr	r3, [r7, #0]
 8001cc2:	685b      	ldr	r3, [r3, #4]
 8001cc4:	091b      	lsrs	r3, r3, #4
 8001cc6:	f003 0201 	and.w	r2, r3, #1
 8001cca:	69fb      	ldr	r3, [r7, #28]
 8001ccc:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd0:	69ba      	ldr	r2, [r7, #24]
 8001cd2:	4313      	orrs	r3, r2
 8001cd4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	69ba      	ldr	r2, [r7, #24]
 8001cda:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001cdc:	683b      	ldr	r3, [r7, #0]
 8001cde:	685b      	ldr	r3, [r3, #4]
 8001ce0:	f003 0303 	and.w	r3, r3, #3
 8001ce4:	2b03      	cmp	r3, #3
 8001ce6:	d017      	beq.n	8001d18 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	68db      	ldr	r3, [r3, #12]
 8001cec:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001cee:	69fb      	ldr	r3, [r7, #28]
 8001cf0:	005b      	lsls	r3, r3, #1
 8001cf2:	2203      	movs	r2, #3
 8001cf4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf8:	43db      	mvns	r3, r3
 8001cfa:	69ba      	ldr	r2, [r7, #24]
 8001cfc:	4013      	ands	r3, r2
 8001cfe:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001d00:	683b      	ldr	r3, [r7, #0]
 8001d02:	689a      	ldr	r2, [r3, #8]
 8001d04:	69fb      	ldr	r3, [r7, #28]
 8001d06:	005b      	lsls	r3, r3, #1
 8001d08:	fa02 f303 	lsl.w	r3, r2, r3
 8001d0c:	69ba      	ldr	r2, [r7, #24]
 8001d0e:	4313      	orrs	r3, r2
 8001d10:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	69ba      	ldr	r2, [r7, #24]
 8001d16:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d18:	683b      	ldr	r3, [r7, #0]
 8001d1a:	685b      	ldr	r3, [r3, #4]
 8001d1c:	f003 0303 	and.w	r3, r3, #3
 8001d20:	2b02      	cmp	r3, #2
 8001d22:	d123      	bne.n	8001d6c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001d24:	69fb      	ldr	r3, [r7, #28]
 8001d26:	08da      	lsrs	r2, r3, #3
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	3208      	adds	r2, #8
 8001d2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d30:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001d32:	69fb      	ldr	r3, [r7, #28]
 8001d34:	f003 0307 	and.w	r3, r3, #7
 8001d38:	009b      	lsls	r3, r3, #2
 8001d3a:	220f      	movs	r2, #15
 8001d3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d40:	43db      	mvns	r3, r3
 8001d42:	69ba      	ldr	r2, [r7, #24]
 8001d44:	4013      	ands	r3, r2
 8001d46:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001d48:	683b      	ldr	r3, [r7, #0]
 8001d4a:	691a      	ldr	r2, [r3, #16]
 8001d4c:	69fb      	ldr	r3, [r7, #28]
 8001d4e:	f003 0307 	and.w	r3, r3, #7
 8001d52:	009b      	lsls	r3, r3, #2
 8001d54:	fa02 f303 	lsl.w	r3, r2, r3
 8001d58:	69ba      	ldr	r2, [r7, #24]
 8001d5a:	4313      	orrs	r3, r2
 8001d5c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001d5e:	69fb      	ldr	r3, [r7, #28]
 8001d60:	08da      	lsrs	r2, r3, #3
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	3208      	adds	r2, #8
 8001d66:	69b9      	ldr	r1, [r7, #24]
 8001d68:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001d72:	69fb      	ldr	r3, [r7, #28]
 8001d74:	005b      	lsls	r3, r3, #1
 8001d76:	2203      	movs	r2, #3
 8001d78:	fa02 f303 	lsl.w	r3, r2, r3
 8001d7c:	43db      	mvns	r3, r3
 8001d7e:	69ba      	ldr	r2, [r7, #24]
 8001d80:	4013      	ands	r3, r2
 8001d82:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001d84:	683b      	ldr	r3, [r7, #0]
 8001d86:	685b      	ldr	r3, [r3, #4]
 8001d88:	f003 0203 	and.w	r2, r3, #3
 8001d8c:	69fb      	ldr	r3, [r7, #28]
 8001d8e:	005b      	lsls	r3, r3, #1
 8001d90:	fa02 f303 	lsl.w	r3, r2, r3
 8001d94:	69ba      	ldr	r2, [r7, #24]
 8001d96:	4313      	orrs	r3, r2
 8001d98:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	69ba      	ldr	r2, [r7, #24]
 8001d9e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001da0:	683b      	ldr	r3, [r7, #0]
 8001da2:	685b      	ldr	r3, [r3, #4]
 8001da4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	f000 80b4 	beq.w	8001f16 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001dae:	2300      	movs	r3, #0
 8001db0:	60fb      	str	r3, [r7, #12]
 8001db2:	4b60      	ldr	r3, [pc, #384]	; (8001f34 <HAL_GPIO_Init+0x30c>)
 8001db4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001db6:	4a5f      	ldr	r2, [pc, #380]	; (8001f34 <HAL_GPIO_Init+0x30c>)
 8001db8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001dbc:	6453      	str	r3, [r2, #68]	; 0x44
 8001dbe:	4b5d      	ldr	r3, [pc, #372]	; (8001f34 <HAL_GPIO_Init+0x30c>)
 8001dc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dc2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001dc6:	60fb      	str	r3, [r7, #12]
 8001dc8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001dca:	4a5b      	ldr	r2, [pc, #364]	; (8001f38 <HAL_GPIO_Init+0x310>)
 8001dcc:	69fb      	ldr	r3, [r7, #28]
 8001dce:	089b      	lsrs	r3, r3, #2
 8001dd0:	3302      	adds	r3, #2
 8001dd2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001dd6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001dd8:	69fb      	ldr	r3, [r7, #28]
 8001dda:	f003 0303 	and.w	r3, r3, #3
 8001dde:	009b      	lsls	r3, r3, #2
 8001de0:	220f      	movs	r2, #15
 8001de2:	fa02 f303 	lsl.w	r3, r2, r3
 8001de6:	43db      	mvns	r3, r3
 8001de8:	69ba      	ldr	r2, [r7, #24]
 8001dea:	4013      	ands	r3, r2
 8001dec:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	4a52      	ldr	r2, [pc, #328]	; (8001f3c <HAL_GPIO_Init+0x314>)
 8001df2:	4293      	cmp	r3, r2
 8001df4:	d02b      	beq.n	8001e4e <HAL_GPIO_Init+0x226>
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	4a51      	ldr	r2, [pc, #324]	; (8001f40 <HAL_GPIO_Init+0x318>)
 8001dfa:	4293      	cmp	r3, r2
 8001dfc:	d025      	beq.n	8001e4a <HAL_GPIO_Init+0x222>
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	4a50      	ldr	r2, [pc, #320]	; (8001f44 <HAL_GPIO_Init+0x31c>)
 8001e02:	4293      	cmp	r3, r2
 8001e04:	d01f      	beq.n	8001e46 <HAL_GPIO_Init+0x21e>
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	4a4f      	ldr	r2, [pc, #316]	; (8001f48 <HAL_GPIO_Init+0x320>)
 8001e0a:	4293      	cmp	r3, r2
 8001e0c:	d019      	beq.n	8001e42 <HAL_GPIO_Init+0x21a>
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	4a4e      	ldr	r2, [pc, #312]	; (8001f4c <HAL_GPIO_Init+0x324>)
 8001e12:	4293      	cmp	r3, r2
 8001e14:	d013      	beq.n	8001e3e <HAL_GPIO_Init+0x216>
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	4a4d      	ldr	r2, [pc, #308]	; (8001f50 <HAL_GPIO_Init+0x328>)
 8001e1a:	4293      	cmp	r3, r2
 8001e1c:	d00d      	beq.n	8001e3a <HAL_GPIO_Init+0x212>
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	4a4c      	ldr	r2, [pc, #304]	; (8001f54 <HAL_GPIO_Init+0x32c>)
 8001e22:	4293      	cmp	r3, r2
 8001e24:	d007      	beq.n	8001e36 <HAL_GPIO_Init+0x20e>
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	4a4b      	ldr	r2, [pc, #300]	; (8001f58 <HAL_GPIO_Init+0x330>)
 8001e2a:	4293      	cmp	r3, r2
 8001e2c:	d101      	bne.n	8001e32 <HAL_GPIO_Init+0x20a>
 8001e2e:	2307      	movs	r3, #7
 8001e30:	e00e      	b.n	8001e50 <HAL_GPIO_Init+0x228>
 8001e32:	2308      	movs	r3, #8
 8001e34:	e00c      	b.n	8001e50 <HAL_GPIO_Init+0x228>
 8001e36:	2306      	movs	r3, #6
 8001e38:	e00a      	b.n	8001e50 <HAL_GPIO_Init+0x228>
 8001e3a:	2305      	movs	r3, #5
 8001e3c:	e008      	b.n	8001e50 <HAL_GPIO_Init+0x228>
 8001e3e:	2304      	movs	r3, #4
 8001e40:	e006      	b.n	8001e50 <HAL_GPIO_Init+0x228>
 8001e42:	2303      	movs	r3, #3
 8001e44:	e004      	b.n	8001e50 <HAL_GPIO_Init+0x228>
 8001e46:	2302      	movs	r3, #2
 8001e48:	e002      	b.n	8001e50 <HAL_GPIO_Init+0x228>
 8001e4a:	2301      	movs	r3, #1
 8001e4c:	e000      	b.n	8001e50 <HAL_GPIO_Init+0x228>
 8001e4e:	2300      	movs	r3, #0
 8001e50:	69fa      	ldr	r2, [r7, #28]
 8001e52:	f002 0203 	and.w	r2, r2, #3
 8001e56:	0092      	lsls	r2, r2, #2
 8001e58:	4093      	lsls	r3, r2
 8001e5a:	69ba      	ldr	r2, [r7, #24]
 8001e5c:	4313      	orrs	r3, r2
 8001e5e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001e60:	4935      	ldr	r1, [pc, #212]	; (8001f38 <HAL_GPIO_Init+0x310>)
 8001e62:	69fb      	ldr	r3, [r7, #28]
 8001e64:	089b      	lsrs	r3, r3, #2
 8001e66:	3302      	adds	r3, #2
 8001e68:	69ba      	ldr	r2, [r7, #24]
 8001e6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001e6e:	4b3b      	ldr	r3, [pc, #236]	; (8001f5c <HAL_GPIO_Init+0x334>)
 8001e70:	689b      	ldr	r3, [r3, #8]
 8001e72:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e74:	693b      	ldr	r3, [r7, #16]
 8001e76:	43db      	mvns	r3, r3
 8001e78:	69ba      	ldr	r2, [r7, #24]
 8001e7a:	4013      	ands	r3, r2
 8001e7c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001e7e:	683b      	ldr	r3, [r7, #0]
 8001e80:	685b      	ldr	r3, [r3, #4]
 8001e82:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d003      	beq.n	8001e92 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001e8a:	69ba      	ldr	r2, [r7, #24]
 8001e8c:	693b      	ldr	r3, [r7, #16]
 8001e8e:	4313      	orrs	r3, r2
 8001e90:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001e92:	4a32      	ldr	r2, [pc, #200]	; (8001f5c <HAL_GPIO_Init+0x334>)
 8001e94:	69bb      	ldr	r3, [r7, #24]
 8001e96:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001e98:	4b30      	ldr	r3, [pc, #192]	; (8001f5c <HAL_GPIO_Init+0x334>)
 8001e9a:	68db      	ldr	r3, [r3, #12]
 8001e9c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e9e:	693b      	ldr	r3, [r7, #16]
 8001ea0:	43db      	mvns	r3, r3
 8001ea2:	69ba      	ldr	r2, [r7, #24]
 8001ea4:	4013      	ands	r3, r2
 8001ea6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	685b      	ldr	r3, [r3, #4]
 8001eac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d003      	beq.n	8001ebc <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001eb4:	69ba      	ldr	r2, [r7, #24]
 8001eb6:	693b      	ldr	r3, [r7, #16]
 8001eb8:	4313      	orrs	r3, r2
 8001eba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001ebc:	4a27      	ldr	r2, [pc, #156]	; (8001f5c <HAL_GPIO_Init+0x334>)
 8001ebe:	69bb      	ldr	r3, [r7, #24]
 8001ec0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001ec2:	4b26      	ldr	r3, [pc, #152]	; (8001f5c <HAL_GPIO_Init+0x334>)
 8001ec4:	685b      	ldr	r3, [r3, #4]
 8001ec6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ec8:	693b      	ldr	r3, [r7, #16]
 8001eca:	43db      	mvns	r3, r3
 8001ecc:	69ba      	ldr	r2, [r7, #24]
 8001ece:	4013      	ands	r3, r2
 8001ed0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001ed2:	683b      	ldr	r3, [r7, #0]
 8001ed4:	685b      	ldr	r3, [r3, #4]
 8001ed6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d003      	beq.n	8001ee6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001ede:	69ba      	ldr	r2, [r7, #24]
 8001ee0:	693b      	ldr	r3, [r7, #16]
 8001ee2:	4313      	orrs	r3, r2
 8001ee4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001ee6:	4a1d      	ldr	r2, [pc, #116]	; (8001f5c <HAL_GPIO_Init+0x334>)
 8001ee8:	69bb      	ldr	r3, [r7, #24]
 8001eea:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001eec:	4b1b      	ldr	r3, [pc, #108]	; (8001f5c <HAL_GPIO_Init+0x334>)
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ef2:	693b      	ldr	r3, [r7, #16]
 8001ef4:	43db      	mvns	r3, r3
 8001ef6:	69ba      	ldr	r2, [r7, #24]
 8001ef8:	4013      	ands	r3, r2
 8001efa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001efc:	683b      	ldr	r3, [r7, #0]
 8001efe:	685b      	ldr	r3, [r3, #4]
 8001f00:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d003      	beq.n	8001f10 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001f08:	69ba      	ldr	r2, [r7, #24]
 8001f0a:	693b      	ldr	r3, [r7, #16]
 8001f0c:	4313      	orrs	r3, r2
 8001f0e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001f10:	4a12      	ldr	r2, [pc, #72]	; (8001f5c <HAL_GPIO_Init+0x334>)
 8001f12:	69bb      	ldr	r3, [r7, #24]
 8001f14:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f16:	69fb      	ldr	r3, [r7, #28]
 8001f18:	3301      	adds	r3, #1
 8001f1a:	61fb      	str	r3, [r7, #28]
 8001f1c:	69fb      	ldr	r3, [r7, #28]
 8001f1e:	2b0f      	cmp	r3, #15
 8001f20:	f67f ae90 	bls.w	8001c44 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001f24:	bf00      	nop
 8001f26:	bf00      	nop
 8001f28:	3724      	adds	r7, #36	; 0x24
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f30:	4770      	bx	lr
 8001f32:	bf00      	nop
 8001f34:	40023800 	.word	0x40023800
 8001f38:	40013800 	.word	0x40013800
 8001f3c:	40020000 	.word	0x40020000
 8001f40:	40020400 	.word	0x40020400
 8001f44:	40020800 	.word	0x40020800
 8001f48:	40020c00 	.word	0x40020c00
 8001f4c:	40021000 	.word	0x40021000
 8001f50:	40021400 	.word	0x40021400
 8001f54:	40021800 	.word	0x40021800
 8001f58:	40021c00 	.word	0x40021c00
 8001f5c:	40013c00 	.word	0x40013c00

08001f60 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f60:	b480      	push	{r7}
 8001f62:	b083      	sub	sp, #12
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
 8001f68:	460b      	mov	r3, r1
 8001f6a:	807b      	strh	r3, [r7, #2]
 8001f6c:	4613      	mov	r3, r2
 8001f6e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001f70:	787b      	ldrb	r3, [r7, #1]
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d003      	beq.n	8001f7e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001f76:	887a      	ldrh	r2, [r7, #2]
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001f7c:	e003      	b.n	8001f86 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001f7e:	887b      	ldrh	r3, [r7, #2]
 8001f80:	041a      	lsls	r2, r3, #16
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	619a      	str	r2, [r3, #24]
}
 8001f86:	bf00      	nop
 8001f88:	370c      	adds	r7, #12
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f90:	4770      	bx	lr
	...

08001f94 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b082      	sub	sp, #8
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	4603      	mov	r3, r0
 8001f9c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001f9e:	4b08      	ldr	r3, [pc, #32]	; (8001fc0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001fa0:	695a      	ldr	r2, [r3, #20]
 8001fa2:	88fb      	ldrh	r3, [r7, #6]
 8001fa4:	4013      	ands	r3, r2
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d006      	beq.n	8001fb8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001faa:	4a05      	ldr	r2, [pc, #20]	; (8001fc0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001fac:	88fb      	ldrh	r3, [r7, #6]
 8001fae:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001fb0:	88fb      	ldrh	r3, [r7, #6]
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	f7ff f920 	bl	80011f8 <HAL_GPIO_EXTI_Callback>
  }
}
 8001fb8:	bf00      	nop
 8001fba:	3708      	adds	r7, #8
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	bd80      	pop	{r7, pc}
 8001fc0:	40013c00 	.word	0x40013c00

08001fc4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001fc4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001fc6:	b08f      	sub	sp, #60	; 0x3c
 8001fc8:	af0a      	add	r7, sp, #40	; 0x28
 8001fca:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d101      	bne.n	8001fd6 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001fd2:	2301      	movs	r3, #1
 8001fd4:	e10f      	b.n	80021f6 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8001fe2:	b2db      	uxtb	r3, r3
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d106      	bne.n	8001ff6 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	2200      	movs	r2, #0
 8001fec:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001ff0:	6878      	ldr	r0, [r7, #4]
 8001ff2:	f007 fbcb 	bl	800978c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	2203      	movs	r2, #3
 8001ffa:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001ffe:	68bb      	ldr	r3, [r7, #8]
 8002000:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002002:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002006:	2b00      	cmp	r3, #0
 8002008:	d102      	bne.n	8002010 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	2200      	movs	r2, #0
 800200e:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	4618      	mov	r0, r3
 8002016:	f003 fe90 	bl	8005d3a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	603b      	str	r3, [r7, #0]
 8002020:	687e      	ldr	r6, [r7, #4]
 8002022:	466d      	mov	r5, sp
 8002024:	f106 0410 	add.w	r4, r6, #16
 8002028:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800202a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800202c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800202e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002030:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002034:	e885 0003 	stmia.w	r5, {r0, r1}
 8002038:	1d33      	adds	r3, r6, #4
 800203a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800203c:	6838      	ldr	r0, [r7, #0]
 800203e:	f003 fd67 	bl	8005b10 <USB_CoreInit>
 8002042:	4603      	mov	r3, r0
 8002044:	2b00      	cmp	r3, #0
 8002046:	d005      	beq.n	8002054 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	2202      	movs	r2, #2
 800204c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002050:	2301      	movs	r3, #1
 8002052:	e0d0      	b.n	80021f6 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	2100      	movs	r1, #0
 800205a:	4618      	mov	r0, r3
 800205c:	f003 fe7e 	bl	8005d5c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002060:	2300      	movs	r3, #0
 8002062:	73fb      	strb	r3, [r7, #15]
 8002064:	e04a      	b.n	80020fc <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002066:	7bfa      	ldrb	r2, [r7, #15]
 8002068:	6879      	ldr	r1, [r7, #4]
 800206a:	4613      	mov	r3, r2
 800206c:	00db      	lsls	r3, r3, #3
 800206e:	4413      	add	r3, r2
 8002070:	009b      	lsls	r3, r3, #2
 8002072:	440b      	add	r3, r1
 8002074:	333d      	adds	r3, #61	; 0x3d
 8002076:	2201      	movs	r2, #1
 8002078:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800207a:	7bfa      	ldrb	r2, [r7, #15]
 800207c:	6879      	ldr	r1, [r7, #4]
 800207e:	4613      	mov	r3, r2
 8002080:	00db      	lsls	r3, r3, #3
 8002082:	4413      	add	r3, r2
 8002084:	009b      	lsls	r3, r3, #2
 8002086:	440b      	add	r3, r1
 8002088:	333c      	adds	r3, #60	; 0x3c
 800208a:	7bfa      	ldrb	r2, [r7, #15]
 800208c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800208e:	7bfa      	ldrb	r2, [r7, #15]
 8002090:	7bfb      	ldrb	r3, [r7, #15]
 8002092:	b298      	uxth	r0, r3
 8002094:	6879      	ldr	r1, [r7, #4]
 8002096:	4613      	mov	r3, r2
 8002098:	00db      	lsls	r3, r3, #3
 800209a:	4413      	add	r3, r2
 800209c:	009b      	lsls	r3, r3, #2
 800209e:	440b      	add	r3, r1
 80020a0:	3344      	adds	r3, #68	; 0x44
 80020a2:	4602      	mov	r2, r0
 80020a4:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80020a6:	7bfa      	ldrb	r2, [r7, #15]
 80020a8:	6879      	ldr	r1, [r7, #4]
 80020aa:	4613      	mov	r3, r2
 80020ac:	00db      	lsls	r3, r3, #3
 80020ae:	4413      	add	r3, r2
 80020b0:	009b      	lsls	r3, r3, #2
 80020b2:	440b      	add	r3, r1
 80020b4:	3340      	adds	r3, #64	; 0x40
 80020b6:	2200      	movs	r2, #0
 80020b8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80020ba:	7bfa      	ldrb	r2, [r7, #15]
 80020bc:	6879      	ldr	r1, [r7, #4]
 80020be:	4613      	mov	r3, r2
 80020c0:	00db      	lsls	r3, r3, #3
 80020c2:	4413      	add	r3, r2
 80020c4:	009b      	lsls	r3, r3, #2
 80020c6:	440b      	add	r3, r1
 80020c8:	3348      	adds	r3, #72	; 0x48
 80020ca:	2200      	movs	r2, #0
 80020cc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80020ce:	7bfa      	ldrb	r2, [r7, #15]
 80020d0:	6879      	ldr	r1, [r7, #4]
 80020d2:	4613      	mov	r3, r2
 80020d4:	00db      	lsls	r3, r3, #3
 80020d6:	4413      	add	r3, r2
 80020d8:	009b      	lsls	r3, r3, #2
 80020da:	440b      	add	r3, r1
 80020dc:	334c      	adds	r3, #76	; 0x4c
 80020de:	2200      	movs	r2, #0
 80020e0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80020e2:	7bfa      	ldrb	r2, [r7, #15]
 80020e4:	6879      	ldr	r1, [r7, #4]
 80020e6:	4613      	mov	r3, r2
 80020e8:	00db      	lsls	r3, r3, #3
 80020ea:	4413      	add	r3, r2
 80020ec:	009b      	lsls	r3, r3, #2
 80020ee:	440b      	add	r3, r1
 80020f0:	3354      	adds	r3, #84	; 0x54
 80020f2:	2200      	movs	r2, #0
 80020f4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80020f6:	7bfb      	ldrb	r3, [r7, #15]
 80020f8:	3301      	adds	r3, #1
 80020fa:	73fb      	strb	r3, [r7, #15]
 80020fc:	7bfa      	ldrb	r2, [r7, #15]
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	685b      	ldr	r3, [r3, #4]
 8002102:	429a      	cmp	r2, r3
 8002104:	d3af      	bcc.n	8002066 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002106:	2300      	movs	r3, #0
 8002108:	73fb      	strb	r3, [r7, #15]
 800210a:	e044      	b.n	8002196 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800210c:	7bfa      	ldrb	r2, [r7, #15]
 800210e:	6879      	ldr	r1, [r7, #4]
 8002110:	4613      	mov	r3, r2
 8002112:	00db      	lsls	r3, r3, #3
 8002114:	4413      	add	r3, r2
 8002116:	009b      	lsls	r3, r3, #2
 8002118:	440b      	add	r3, r1
 800211a:	f203 237d 	addw	r3, r3, #637	; 0x27d
 800211e:	2200      	movs	r2, #0
 8002120:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002122:	7bfa      	ldrb	r2, [r7, #15]
 8002124:	6879      	ldr	r1, [r7, #4]
 8002126:	4613      	mov	r3, r2
 8002128:	00db      	lsls	r3, r3, #3
 800212a:	4413      	add	r3, r2
 800212c:	009b      	lsls	r3, r3, #2
 800212e:	440b      	add	r3, r1
 8002130:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8002134:	7bfa      	ldrb	r2, [r7, #15]
 8002136:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002138:	7bfa      	ldrb	r2, [r7, #15]
 800213a:	6879      	ldr	r1, [r7, #4]
 800213c:	4613      	mov	r3, r2
 800213e:	00db      	lsls	r3, r3, #3
 8002140:	4413      	add	r3, r2
 8002142:	009b      	lsls	r3, r3, #2
 8002144:	440b      	add	r3, r1
 8002146:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800214a:	2200      	movs	r2, #0
 800214c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800214e:	7bfa      	ldrb	r2, [r7, #15]
 8002150:	6879      	ldr	r1, [r7, #4]
 8002152:	4613      	mov	r3, r2
 8002154:	00db      	lsls	r3, r3, #3
 8002156:	4413      	add	r3, r2
 8002158:	009b      	lsls	r3, r3, #2
 800215a:	440b      	add	r3, r1
 800215c:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8002160:	2200      	movs	r2, #0
 8002162:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002164:	7bfa      	ldrb	r2, [r7, #15]
 8002166:	6879      	ldr	r1, [r7, #4]
 8002168:	4613      	mov	r3, r2
 800216a:	00db      	lsls	r3, r3, #3
 800216c:	4413      	add	r3, r2
 800216e:	009b      	lsls	r3, r3, #2
 8002170:	440b      	add	r3, r1
 8002172:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8002176:	2200      	movs	r2, #0
 8002178:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800217a:	7bfa      	ldrb	r2, [r7, #15]
 800217c:	6879      	ldr	r1, [r7, #4]
 800217e:	4613      	mov	r3, r2
 8002180:	00db      	lsls	r3, r3, #3
 8002182:	4413      	add	r3, r2
 8002184:	009b      	lsls	r3, r3, #2
 8002186:	440b      	add	r3, r1
 8002188:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800218c:	2200      	movs	r2, #0
 800218e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002190:	7bfb      	ldrb	r3, [r7, #15]
 8002192:	3301      	adds	r3, #1
 8002194:	73fb      	strb	r3, [r7, #15]
 8002196:	7bfa      	ldrb	r2, [r7, #15]
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	685b      	ldr	r3, [r3, #4]
 800219c:	429a      	cmp	r2, r3
 800219e:	d3b5      	bcc.n	800210c <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	603b      	str	r3, [r7, #0]
 80021a6:	687e      	ldr	r6, [r7, #4]
 80021a8:	466d      	mov	r5, sp
 80021aa:	f106 0410 	add.w	r4, r6, #16
 80021ae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80021b0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80021b2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80021b4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80021b6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80021ba:	e885 0003 	stmia.w	r5, {r0, r1}
 80021be:	1d33      	adds	r3, r6, #4
 80021c0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80021c2:	6838      	ldr	r0, [r7, #0]
 80021c4:	f003 fe16 	bl	8005df4 <USB_DevInit>
 80021c8:	4603      	mov	r3, r0
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d005      	beq.n	80021da <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	2202      	movs	r2, #2
 80021d2:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80021d6:	2301      	movs	r3, #1
 80021d8:	e00d      	b.n	80021f6 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	2200      	movs	r2, #0
 80021de:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	2201      	movs	r2, #1
 80021e6:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	4618      	mov	r0, r3
 80021f0:	f004 ff65 	bl	80070be <USB_DevDisconnect>

  return HAL_OK;
 80021f4:	2300      	movs	r3, #0
}
 80021f6:	4618      	mov	r0, r3
 80021f8:	3714      	adds	r7, #20
 80021fa:	46bd      	mov	sp, r7
 80021fc:	bdf0      	pop	{r4, r5, r6, r7, pc}

080021fe <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80021fe:	b580      	push	{r7, lr}
 8002200:	b084      	sub	sp, #16
 8002202:	af00      	add	r7, sp, #0
 8002204:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002212:	2b01      	cmp	r3, #1
 8002214:	d101      	bne.n	800221a <HAL_PCD_Start+0x1c>
 8002216:	2302      	movs	r3, #2
 8002218:	e020      	b.n	800225c <HAL_PCD_Start+0x5e>
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	2201      	movs	r2, #1
 800221e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002226:	2b01      	cmp	r3, #1
 8002228:	d109      	bne.n	800223e <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800222e:	2b01      	cmp	r3, #1
 8002230:	d005      	beq.n	800223e <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002236:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	4618      	mov	r0, r3
 8002244:	f003 fd68 	bl	8005d18 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	4618      	mov	r0, r3
 800224e:	f004 ff15 	bl	800707c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	2200      	movs	r2, #0
 8002256:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800225a:	2300      	movs	r3, #0
}
 800225c:	4618      	mov	r0, r3
 800225e:	3710      	adds	r7, #16
 8002260:	46bd      	mov	sp, r7
 8002262:	bd80      	pop	{r7, pc}

08002264 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002264:	b590      	push	{r4, r7, lr}
 8002266:	b08d      	sub	sp, #52	; 0x34
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002272:	6a3b      	ldr	r3, [r7, #32]
 8002274:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	4618      	mov	r0, r3
 800227c:	f004 ffd3 	bl	8007226 <USB_GetMode>
 8002280:	4603      	mov	r3, r0
 8002282:	2b00      	cmp	r3, #0
 8002284:	f040 848a 	bne.w	8002b9c <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	4618      	mov	r0, r3
 800228e:	f004 ff37 	bl	8007100 <USB_ReadInterrupts>
 8002292:	4603      	mov	r3, r0
 8002294:	2b00      	cmp	r3, #0
 8002296:	f000 8480 	beq.w	8002b9a <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800229a:	69fb      	ldr	r3, [r7, #28]
 800229c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80022a0:	689b      	ldr	r3, [r3, #8]
 80022a2:	0a1b      	lsrs	r3, r3, #8
 80022a4:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	4618      	mov	r0, r3
 80022b4:	f004 ff24 	bl	8007100 <USB_ReadInterrupts>
 80022b8:	4603      	mov	r3, r0
 80022ba:	f003 0302 	and.w	r3, r3, #2
 80022be:	2b02      	cmp	r3, #2
 80022c0:	d107      	bne.n	80022d2 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	695a      	ldr	r2, [r3, #20]
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f002 0202 	and.w	r2, r2, #2
 80022d0:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	4618      	mov	r0, r3
 80022d8:	f004 ff12 	bl	8007100 <USB_ReadInterrupts>
 80022dc:	4603      	mov	r3, r0
 80022de:	f003 0310 	and.w	r3, r3, #16
 80022e2:	2b10      	cmp	r3, #16
 80022e4:	d161      	bne.n	80023aa <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	699a      	ldr	r2, [r3, #24]
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f022 0210 	bic.w	r2, r2, #16
 80022f4:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80022f6:	6a3b      	ldr	r3, [r7, #32]
 80022f8:	6a1b      	ldr	r3, [r3, #32]
 80022fa:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80022fc:	69bb      	ldr	r3, [r7, #24]
 80022fe:	f003 020f 	and.w	r2, r3, #15
 8002302:	4613      	mov	r3, r2
 8002304:	00db      	lsls	r3, r3, #3
 8002306:	4413      	add	r3, r2
 8002308:	009b      	lsls	r3, r3, #2
 800230a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800230e:	687a      	ldr	r2, [r7, #4]
 8002310:	4413      	add	r3, r2
 8002312:	3304      	adds	r3, #4
 8002314:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002316:	69bb      	ldr	r3, [r7, #24]
 8002318:	0c5b      	lsrs	r3, r3, #17
 800231a:	f003 030f 	and.w	r3, r3, #15
 800231e:	2b02      	cmp	r3, #2
 8002320:	d124      	bne.n	800236c <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002322:	69ba      	ldr	r2, [r7, #24]
 8002324:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8002328:	4013      	ands	r3, r2
 800232a:	2b00      	cmp	r3, #0
 800232c:	d035      	beq.n	800239a <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800232e:	697b      	ldr	r3, [r7, #20]
 8002330:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002332:	69bb      	ldr	r3, [r7, #24]
 8002334:	091b      	lsrs	r3, r3, #4
 8002336:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002338:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800233c:	b29b      	uxth	r3, r3
 800233e:	461a      	mov	r2, r3
 8002340:	6a38      	ldr	r0, [r7, #32]
 8002342:	f004 fd49 	bl	8006dd8 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002346:	697b      	ldr	r3, [r7, #20]
 8002348:	691a      	ldr	r2, [r3, #16]
 800234a:	69bb      	ldr	r3, [r7, #24]
 800234c:	091b      	lsrs	r3, r3, #4
 800234e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002352:	441a      	add	r2, r3
 8002354:	697b      	ldr	r3, [r7, #20]
 8002356:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002358:	697b      	ldr	r3, [r7, #20]
 800235a:	6a1a      	ldr	r2, [r3, #32]
 800235c:	69bb      	ldr	r3, [r7, #24]
 800235e:	091b      	lsrs	r3, r3, #4
 8002360:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002364:	441a      	add	r2, r3
 8002366:	697b      	ldr	r3, [r7, #20]
 8002368:	621a      	str	r2, [r3, #32]
 800236a:	e016      	b.n	800239a <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800236c:	69bb      	ldr	r3, [r7, #24]
 800236e:	0c5b      	lsrs	r3, r3, #17
 8002370:	f003 030f 	and.w	r3, r3, #15
 8002374:	2b06      	cmp	r3, #6
 8002376:	d110      	bne.n	800239a <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800237e:	2208      	movs	r2, #8
 8002380:	4619      	mov	r1, r3
 8002382:	6a38      	ldr	r0, [r7, #32]
 8002384:	f004 fd28 	bl	8006dd8 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002388:	697b      	ldr	r3, [r7, #20]
 800238a:	6a1a      	ldr	r2, [r3, #32]
 800238c:	69bb      	ldr	r3, [r7, #24]
 800238e:	091b      	lsrs	r3, r3, #4
 8002390:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002394:	441a      	add	r2, r3
 8002396:	697b      	ldr	r3, [r7, #20]
 8002398:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	699a      	ldr	r2, [r3, #24]
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f042 0210 	orr.w	r2, r2, #16
 80023a8:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	4618      	mov	r0, r3
 80023b0:	f004 fea6 	bl	8007100 <USB_ReadInterrupts>
 80023b4:	4603      	mov	r3, r0
 80023b6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80023ba:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80023be:	f040 80a7 	bne.w	8002510 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80023c2:	2300      	movs	r3, #0
 80023c4:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	4618      	mov	r0, r3
 80023cc:	f004 feab 	bl	8007126 <USB_ReadDevAllOutEpInterrupt>
 80023d0:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80023d2:	e099      	b.n	8002508 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80023d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023d6:	f003 0301 	and.w	r3, r3, #1
 80023da:	2b00      	cmp	r3, #0
 80023dc:	f000 808e 	beq.w	80024fc <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023e6:	b2d2      	uxtb	r2, r2
 80023e8:	4611      	mov	r1, r2
 80023ea:	4618      	mov	r0, r3
 80023ec:	f004 fecf 	bl	800718e <USB_ReadDevOutEPInterrupt>
 80023f0:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80023f2:	693b      	ldr	r3, [r7, #16]
 80023f4:	f003 0301 	and.w	r3, r3, #1
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d00c      	beq.n	8002416 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80023fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023fe:	015a      	lsls	r2, r3, #5
 8002400:	69fb      	ldr	r3, [r7, #28]
 8002402:	4413      	add	r3, r2
 8002404:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002408:	461a      	mov	r2, r3
 800240a:	2301      	movs	r3, #1
 800240c:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800240e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002410:	6878      	ldr	r0, [r7, #4]
 8002412:	f000 fec3 	bl	800319c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002416:	693b      	ldr	r3, [r7, #16]
 8002418:	f003 0308 	and.w	r3, r3, #8
 800241c:	2b00      	cmp	r3, #0
 800241e:	d00c      	beq.n	800243a <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002422:	015a      	lsls	r2, r3, #5
 8002424:	69fb      	ldr	r3, [r7, #28]
 8002426:	4413      	add	r3, r2
 8002428:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800242c:	461a      	mov	r2, r3
 800242e:	2308      	movs	r3, #8
 8002430:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002432:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002434:	6878      	ldr	r0, [r7, #4]
 8002436:	f000 ff99 	bl	800336c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800243a:	693b      	ldr	r3, [r7, #16]
 800243c:	f003 0310 	and.w	r3, r3, #16
 8002440:	2b00      	cmp	r3, #0
 8002442:	d008      	beq.n	8002456 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002446:	015a      	lsls	r2, r3, #5
 8002448:	69fb      	ldr	r3, [r7, #28]
 800244a:	4413      	add	r3, r2
 800244c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002450:	461a      	mov	r2, r3
 8002452:	2310      	movs	r3, #16
 8002454:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8002456:	693b      	ldr	r3, [r7, #16]
 8002458:	f003 0302 	and.w	r3, r3, #2
 800245c:	2b00      	cmp	r3, #0
 800245e:	d030      	beq.n	80024c2 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8002460:	6a3b      	ldr	r3, [r7, #32]
 8002462:	695b      	ldr	r3, [r3, #20]
 8002464:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002468:	2b80      	cmp	r3, #128	; 0x80
 800246a:	d109      	bne.n	8002480 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800246c:	69fb      	ldr	r3, [r7, #28]
 800246e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002472:	685b      	ldr	r3, [r3, #4]
 8002474:	69fa      	ldr	r2, [r7, #28]
 8002476:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800247a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800247e:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8002480:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002482:	4613      	mov	r3, r2
 8002484:	00db      	lsls	r3, r3, #3
 8002486:	4413      	add	r3, r2
 8002488:	009b      	lsls	r3, r3, #2
 800248a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800248e:	687a      	ldr	r2, [r7, #4]
 8002490:	4413      	add	r3, r2
 8002492:	3304      	adds	r3, #4
 8002494:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002496:	697b      	ldr	r3, [r7, #20]
 8002498:	78db      	ldrb	r3, [r3, #3]
 800249a:	2b01      	cmp	r3, #1
 800249c:	d108      	bne.n	80024b0 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800249e:	697b      	ldr	r3, [r7, #20]
 80024a0:	2200      	movs	r2, #0
 80024a2:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80024a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024a6:	b2db      	uxtb	r3, r3
 80024a8:	4619      	mov	r1, r3
 80024aa:	6878      	ldr	r0, [r7, #4]
 80024ac:	f007 fa70 	bl	8009990 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80024b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024b2:	015a      	lsls	r2, r3, #5
 80024b4:	69fb      	ldr	r3, [r7, #28]
 80024b6:	4413      	add	r3, r2
 80024b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80024bc:	461a      	mov	r2, r3
 80024be:	2302      	movs	r3, #2
 80024c0:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80024c2:	693b      	ldr	r3, [r7, #16]
 80024c4:	f003 0320 	and.w	r3, r3, #32
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d008      	beq.n	80024de <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80024cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ce:	015a      	lsls	r2, r3, #5
 80024d0:	69fb      	ldr	r3, [r7, #28]
 80024d2:	4413      	add	r3, r2
 80024d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80024d8:	461a      	mov	r2, r3
 80024da:	2320      	movs	r3, #32
 80024dc:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80024de:	693b      	ldr	r3, [r7, #16]
 80024e0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d009      	beq.n	80024fc <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80024e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ea:	015a      	lsls	r2, r3, #5
 80024ec:	69fb      	ldr	r3, [r7, #28]
 80024ee:	4413      	add	r3, r2
 80024f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80024f4:	461a      	mov	r2, r3
 80024f6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80024fa:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80024fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024fe:	3301      	adds	r3, #1
 8002500:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002502:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002504:	085b      	lsrs	r3, r3, #1
 8002506:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002508:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800250a:	2b00      	cmp	r3, #0
 800250c:	f47f af62 	bne.w	80023d4 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	4618      	mov	r0, r3
 8002516:	f004 fdf3 	bl	8007100 <USB_ReadInterrupts>
 800251a:	4603      	mov	r3, r0
 800251c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002520:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002524:	f040 80db 	bne.w	80026de <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	4618      	mov	r0, r3
 800252e:	f004 fe14 	bl	800715a <USB_ReadDevAllInEpInterrupt>
 8002532:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8002534:	2300      	movs	r3, #0
 8002536:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8002538:	e0cd      	b.n	80026d6 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800253a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800253c:	f003 0301 	and.w	r3, r3, #1
 8002540:	2b00      	cmp	r3, #0
 8002542:	f000 80c2 	beq.w	80026ca <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800254c:	b2d2      	uxtb	r2, r2
 800254e:	4611      	mov	r1, r2
 8002550:	4618      	mov	r0, r3
 8002552:	f004 fe3a 	bl	80071ca <USB_ReadDevInEPInterrupt>
 8002556:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002558:	693b      	ldr	r3, [r7, #16]
 800255a:	f003 0301 	and.w	r3, r3, #1
 800255e:	2b00      	cmp	r3, #0
 8002560:	d057      	beq.n	8002612 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002562:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002564:	f003 030f 	and.w	r3, r3, #15
 8002568:	2201      	movs	r2, #1
 800256a:	fa02 f303 	lsl.w	r3, r2, r3
 800256e:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002570:	69fb      	ldr	r3, [r7, #28]
 8002572:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002576:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	43db      	mvns	r3, r3
 800257c:	69f9      	ldr	r1, [r7, #28]
 800257e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002582:	4013      	ands	r3, r2
 8002584:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002588:	015a      	lsls	r2, r3, #5
 800258a:	69fb      	ldr	r3, [r7, #28]
 800258c:	4413      	add	r3, r2
 800258e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002592:	461a      	mov	r2, r3
 8002594:	2301      	movs	r3, #1
 8002596:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	691b      	ldr	r3, [r3, #16]
 800259c:	2b01      	cmp	r3, #1
 800259e:	d132      	bne.n	8002606 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80025a0:	6879      	ldr	r1, [r7, #4]
 80025a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025a4:	4613      	mov	r3, r2
 80025a6:	00db      	lsls	r3, r3, #3
 80025a8:	4413      	add	r3, r2
 80025aa:	009b      	lsls	r3, r3, #2
 80025ac:	440b      	add	r3, r1
 80025ae:	334c      	adds	r3, #76	; 0x4c
 80025b0:	6819      	ldr	r1, [r3, #0]
 80025b2:	6878      	ldr	r0, [r7, #4]
 80025b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025b6:	4613      	mov	r3, r2
 80025b8:	00db      	lsls	r3, r3, #3
 80025ba:	4413      	add	r3, r2
 80025bc:	009b      	lsls	r3, r3, #2
 80025be:	4403      	add	r3, r0
 80025c0:	3348      	adds	r3, #72	; 0x48
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	4419      	add	r1, r3
 80025c6:	6878      	ldr	r0, [r7, #4]
 80025c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025ca:	4613      	mov	r3, r2
 80025cc:	00db      	lsls	r3, r3, #3
 80025ce:	4413      	add	r3, r2
 80025d0:	009b      	lsls	r3, r3, #2
 80025d2:	4403      	add	r3, r0
 80025d4:	334c      	adds	r3, #76	; 0x4c
 80025d6:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80025d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d113      	bne.n	8002606 <HAL_PCD_IRQHandler+0x3a2>
 80025de:	6879      	ldr	r1, [r7, #4]
 80025e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025e2:	4613      	mov	r3, r2
 80025e4:	00db      	lsls	r3, r3, #3
 80025e6:	4413      	add	r3, r2
 80025e8:	009b      	lsls	r3, r3, #2
 80025ea:	440b      	add	r3, r1
 80025ec:	3354      	adds	r3, #84	; 0x54
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d108      	bne.n	8002606 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	6818      	ldr	r0, [r3, #0]
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80025fe:	461a      	mov	r2, r3
 8002600:	2101      	movs	r1, #1
 8002602:	f004 fe41 	bl	8007288 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002608:	b2db      	uxtb	r3, r3
 800260a:	4619      	mov	r1, r3
 800260c:	6878      	ldr	r0, [r7, #4]
 800260e:	f007 f93a 	bl	8009886 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002612:	693b      	ldr	r3, [r7, #16]
 8002614:	f003 0308 	and.w	r3, r3, #8
 8002618:	2b00      	cmp	r3, #0
 800261a:	d008      	beq.n	800262e <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800261c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800261e:	015a      	lsls	r2, r3, #5
 8002620:	69fb      	ldr	r3, [r7, #28]
 8002622:	4413      	add	r3, r2
 8002624:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002628:	461a      	mov	r2, r3
 800262a:	2308      	movs	r3, #8
 800262c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800262e:	693b      	ldr	r3, [r7, #16]
 8002630:	f003 0310 	and.w	r3, r3, #16
 8002634:	2b00      	cmp	r3, #0
 8002636:	d008      	beq.n	800264a <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800263a:	015a      	lsls	r2, r3, #5
 800263c:	69fb      	ldr	r3, [r7, #28]
 800263e:	4413      	add	r3, r2
 8002640:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002644:	461a      	mov	r2, r3
 8002646:	2310      	movs	r3, #16
 8002648:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800264a:	693b      	ldr	r3, [r7, #16]
 800264c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002650:	2b00      	cmp	r3, #0
 8002652:	d008      	beq.n	8002666 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002656:	015a      	lsls	r2, r3, #5
 8002658:	69fb      	ldr	r3, [r7, #28]
 800265a:	4413      	add	r3, r2
 800265c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002660:	461a      	mov	r2, r3
 8002662:	2340      	movs	r3, #64	; 0x40
 8002664:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002666:	693b      	ldr	r3, [r7, #16]
 8002668:	f003 0302 	and.w	r3, r3, #2
 800266c:	2b00      	cmp	r3, #0
 800266e:	d023      	beq.n	80026b8 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8002670:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002672:	6a38      	ldr	r0, [r7, #32]
 8002674:	f003 fd22 	bl	80060bc <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8002678:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800267a:	4613      	mov	r3, r2
 800267c:	00db      	lsls	r3, r3, #3
 800267e:	4413      	add	r3, r2
 8002680:	009b      	lsls	r3, r3, #2
 8002682:	3338      	adds	r3, #56	; 0x38
 8002684:	687a      	ldr	r2, [r7, #4]
 8002686:	4413      	add	r3, r2
 8002688:	3304      	adds	r3, #4
 800268a:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800268c:	697b      	ldr	r3, [r7, #20]
 800268e:	78db      	ldrb	r3, [r3, #3]
 8002690:	2b01      	cmp	r3, #1
 8002692:	d108      	bne.n	80026a6 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8002694:	697b      	ldr	r3, [r7, #20]
 8002696:	2200      	movs	r2, #0
 8002698:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800269a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800269c:	b2db      	uxtb	r3, r3
 800269e:	4619      	mov	r1, r3
 80026a0:	6878      	ldr	r0, [r7, #4]
 80026a2:	f007 f987 	bl	80099b4 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80026a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026a8:	015a      	lsls	r2, r3, #5
 80026aa:	69fb      	ldr	r3, [r7, #28]
 80026ac:	4413      	add	r3, r2
 80026ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80026b2:	461a      	mov	r2, r3
 80026b4:	2302      	movs	r3, #2
 80026b6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80026b8:	693b      	ldr	r3, [r7, #16]
 80026ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d003      	beq.n	80026ca <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80026c2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80026c4:	6878      	ldr	r0, [r7, #4]
 80026c6:	f000 fcdb 	bl	8003080 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80026ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026cc:	3301      	adds	r3, #1
 80026ce:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80026d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026d2:	085b      	lsrs	r3, r3, #1
 80026d4:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80026d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026d8:	2b00      	cmp	r3, #0
 80026da:	f47f af2e 	bne.w	800253a <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	4618      	mov	r0, r3
 80026e4:	f004 fd0c 	bl	8007100 <USB_ReadInterrupts>
 80026e8:	4603      	mov	r3, r0
 80026ea:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80026ee:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80026f2:	d122      	bne.n	800273a <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80026f4:	69fb      	ldr	r3, [r7, #28]
 80026f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80026fa:	685b      	ldr	r3, [r3, #4]
 80026fc:	69fa      	ldr	r2, [r7, #28]
 80026fe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002702:	f023 0301 	bic.w	r3, r3, #1
 8002706:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 800270e:	2b01      	cmp	r3, #1
 8002710:	d108      	bne.n	8002724 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	2200      	movs	r2, #0
 8002716:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800271a:	2100      	movs	r1, #0
 800271c:	6878      	ldr	r0, [r7, #4]
 800271e:	f000 fec3 	bl	80034a8 <HAL_PCDEx_LPM_Callback>
 8002722:	e002      	b.n	800272a <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002724:	6878      	ldr	r0, [r7, #4]
 8002726:	f007 f925 	bl	8009974 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	695a      	ldr	r2, [r3, #20]
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8002738:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	4618      	mov	r0, r3
 8002740:	f004 fcde 	bl	8007100 <USB_ReadInterrupts>
 8002744:	4603      	mov	r3, r0
 8002746:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800274a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800274e:	d112      	bne.n	8002776 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002750:	69fb      	ldr	r3, [r7, #28]
 8002752:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002756:	689b      	ldr	r3, [r3, #8]
 8002758:	f003 0301 	and.w	r3, r3, #1
 800275c:	2b01      	cmp	r3, #1
 800275e:	d102      	bne.n	8002766 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002760:	6878      	ldr	r0, [r7, #4]
 8002762:	f007 f8e1 	bl	8009928 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	695a      	ldr	r2, [r3, #20]
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8002774:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	4618      	mov	r0, r3
 800277c:	f004 fcc0 	bl	8007100 <USB_ReadInterrupts>
 8002780:	4603      	mov	r3, r0
 8002782:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002786:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800278a:	f040 80b7 	bne.w	80028fc <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800278e:	69fb      	ldr	r3, [r7, #28]
 8002790:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002794:	685b      	ldr	r3, [r3, #4]
 8002796:	69fa      	ldr	r2, [r7, #28]
 8002798:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800279c:	f023 0301 	bic.w	r3, r3, #1
 80027a0:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	2110      	movs	r1, #16
 80027a8:	4618      	mov	r0, r3
 80027aa:	f003 fc87 	bl	80060bc <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80027ae:	2300      	movs	r3, #0
 80027b0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80027b2:	e046      	b.n	8002842 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80027b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027b6:	015a      	lsls	r2, r3, #5
 80027b8:	69fb      	ldr	r3, [r7, #28]
 80027ba:	4413      	add	r3, r2
 80027bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80027c0:	461a      	mov	r2, r3
 80027c2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80027c6:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80027c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027ca:	015a      	lsls	r2, r3, #5
 80027cc:	69fb      	ldr	r3, [r7, #28]
 80027ce:	4413      	add	r3, r2
 80027d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80027d8:	0151      	lsls	r1, r2, #5
 80027da:	69fa      	ldr	r2, [r7, #28]
 80027dc:	440a      	add	r2, r1
 80027de:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80027e2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80027e6:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80027e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027ea:	015a      	lsls	r2, r3, #5
 80027ec:	69fb      	ldr	r3, [r7, #28]
 80027ee:	4413      	add	r3, r2
 80027f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80027f4:	461a      	mov	r2, r3
 80027f6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80027fa:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80027fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027fe:	015a      	lsls	r2, r3, #5
 8002800:	69fb      	ldr	r3, [r7, #28]
 8002802:	4413      	add	r3, r2
 8002804:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800280c:	0151      	lsls	r1, r2, #5
 800280e:	69fa      	ldr	r2, [r7, #28]
 8002810:	440a      	add	r2, r1
 8002812:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002816:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800281a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800281c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800281e:	015a      	lsls	r2, r3, #5
 8002820:	69fb      	ldr	r3, [r7, #28]
 8002822:	4413      	add	r3, r2
 8002824:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800282c:	0151      	lsls	r1, r2, #5
 800282e:	69fa      	ldr	r2, [r7, #28]
 8002830:	440a      	add	r2, r1
 8002832:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002836:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800283a:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800283c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800283e:	3301      	adds	r3, #1
 8002840:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	685b      	ldr	r3, [r3, #4]
 8002846:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002848:	429a      	cmp	r2, r3
 800284a:	d3b3      	bcc.n	80027b4 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800284c:	69fb      	ldr	r3, [r7, #28]
 800284e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002852:	69db      	ldr	r3, [r3, #28]
 8002854:	69fa      	ldr	r2, [r7, #28]
 8002856:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800285a:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800285e:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002864:	2b00      	cmp	r3, #0
 8002866:	d016      	beq.n	8002896 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002868:	69fb      	ldr	r3, [r7, #28]
 800286a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800286e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002872:	69fa      	ldr	r2, [r7, #28]
 8002874:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002878:	f043 030b 	orr.w	r3, r3, #11
 800287c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002880:	69fb      	ldr	r3, [r7, #28]
 8002882:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002886:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002888:	69fa      	ldr	r2, [r7, #28]
 800288a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800288e:	f043 030b 	orr.w	r3, r3, #11
 8002892:	6453      	str	r3, [r2, #68]	; 0x44
 8002894:	e015      	b.n	80028c2 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002896:	69fb      	ldr	r3, [r7, #28]
 8002898:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800289c:	695b      	ldr	r3, [r3, #20]
 800289e:	69fa      	ldr	r2, [r7, #28]
 80028a0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80028a4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80028a8:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80028ac:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80028ae:	69fb      	ldr	r3, [r7, #28]
 80028b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80028b4:	691b      	ldr	r3, [r3, #16]
 80028b6:	69fa      	ldr	r2, [r7, #28]
 80028b8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80028bc:	f043 030b 	orr.w	r3, r3, #11
 80028c0:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80028c2:	69fb      	ldr	r3, [r7, #28]
 80028c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	69fa      	ldr	r2, [r7, #28]
 80028cc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80028d0:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80028d4:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	6818      	ldr	r0, [r3, #0]
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	691b      	ldr	r3, [r3, #16]
 80028de:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80028e6:	461a      	mov	r2, r3
 80028e8:	f004 fcce 	bl	8007288 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	695a      	ldr	r2, [r3, #20]
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80028fa:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	4618      	mov	r0, r3
 8002902:	f004 fbfd 	bl	8007100 <USB_ReadInterrupts>
 8002906:	4603      	mov	r3, r0
 8002908:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800290c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002910:	d124      	bne.n	800295c <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	4618      	mov	r0, r3
 8002918:	f004 fc93 	bl	8007242 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	4618      	mov	r0, r3
 8002922:	f003 fc48 	bl	80061b6 <USB_GetDevSpeed>
 8002926:	4603      	mov	r3, r0
 8002928:	461a      	mov	r2, r3
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681c      	ldr	r4, [r3, #0]
 8002932:	f001 f9e9 	bl	8003d08 <HAL_RCC_GetHCLKFreq>
 8002936:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800293c:	b2db      	uxtb	r3, r3
 800293e:	461a      	mov	r2, r3
 8002940:	4620      	mov	r0, r4
 8002942:	f003 f947 	bl	8005bd4 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002946:	6878      	ldr	r0, [r7, #4]
 8002948:	f006 ffc5 	bl	80098d6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	695a      	ldr	r2, [r3, #20]
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800295a:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	4618      	mov	r0, r3
 8002962:	f004 fbcd 	bl	8007100 <USB_ReadInterrupts>
 8002966:	4603      	mov	r3, r0
 8002968:	f003 0308 	and.w	r3, r3, #8
 800296c:	2b08      	cmp	r3, #8
 800296e:	d10a      	bne.n	8002986 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002970:	6878      	ldr	r0, [r7, #4]
 8002972:	f006 ffa2 	bl	80098ba <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	695a      	ldr	r2, [r3, #20]
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f002 0208 	and.w	r2, r2, #8
 8002984:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	4618      	mov	r0, r3
 800298c:	f004 fbb8 	bl	8007100 <USB_ReadInterrupts>
 8002990:	4603      	mov	r3, r0
 8002992:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002996:	2b80      	cmp	r3, #128	; 0x80
 8002998:	d122      	bne.n	80029e0 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800299a:	6a3b      	ldr	r3, [r7, #32]
 800299c:	699b      	ldr	r3, [r3, #24]
 800299e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80029a2:	6a3b      	ldr	r3, [r7, #32]
 80029a4:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80029a6:	2301      	movs	r3, #1
 80029a8:	627b      	str	r3, [r7, #36]	; 0x24
 80029aa:	e014      	b.n	80029d6 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80029ac:	6879      	ldr	r1, [r7, #4]
 80029ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029b0:	4613      	mov	r3, r2
 80029b2:	00db      	lsls	r3, r3, #3
 80029b4:	4413      	add	r3, r2
 80029b6:	009b      	lsls	r3, r3, #2
 80029b8:	440b      	add	r3, r1
 80029ba:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80029be:	781b      	ldrb	r3, [r3, #0]
 80029c0:	2b01      	cmp	r3, #1
 80029c2:	d105      	bne.n	80029d0 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80029c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029c6:	b2db      	uxtb	r3, r3
 80029c8:	4619      	mov	r1, r3
 80029ca:	6878      	ldr	r0, [r7, #4]
 80029cc:	f000 fb27 	bl	800301e <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80029d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029d2:	3301      	adds	r3, #1
 80029d4:	627b      	str	r3, [r7, #36]	; 0x24
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	685b      	ldr	r3, [r3, #4]
 80029da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029dc:	429a      	cmp	r2, r3
 80029de:	d3e5      	bcc.n	80029ac <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	4618      	mov	r0, r3
 80029e6:	f004 fb8b 	bl	8007100 <USB_ReadInterrupts>
 80029ea:	4603      	mov	r3, r0
 80029ec:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80029f0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80029f4:	d13b      	bne.n	8002a6e <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80029f6:	2301      	movs	r3, #1
 80029f8:	627b      	str	r3, [r7, #36]	; 0x24
 80029fa:	e02b      	b.n	8002a54 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80029fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029fe:	015a      	lsls	r2, r3, #5
 8002a00:	69fb      	ldr	r3, [r7, #28]
 8002a02:	4413      	add	r3, r2
 8002a04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002a0c:	6879      	ldr	r1, [r7, #4]
 8002a0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a10:	4613      	mov	r3, r2
 8002a12:	00db      	lsls	r3, r3, #3
 8002a14:	4413      	add	r3, r2
 8002a16:	009b      	lsls	r3, r3, #2
 8002a18:	440b      	add	r3, r1
 8002a1a:	3340      	adds	r3, #64	; 0x40
 8002a1c:	781b      	ldrb	r3, [r3, #0]
 8002a1e:	2b01      	cmp	r3, #1
 8002a20:	d115      	bne.n	8002a4e <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8002a22:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	da12      	bge.n	8002a4e <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8002a28:	6879      	ldr	r1, [r7, #4]
 8002a2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a2c:	4613      	mov	r3, r2
 8002a2e:	00db      	lsls	r3, r3, #3
 8002a30:	4413      	add	r3, r2
 8002a32:	009b      	lsls	r3, r3, #2
 8002a34:	440b      	add	r3, r1
 8002a36:	333f      	adds	r3, #63	; 0x3f
 8002a38:	2201      	movs	r2, #1
 8002a3a:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8002a3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a3e:	b2db      	uxtb	r3, r3
 8002a40:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002a44:	b2db      	uxtb	r3, r3
 8002a46:	4619      	mov	r1, r3
 8002a48:	6878      	ldr	r0, [r7, #4]
 8002a4a:	f000 fae8 	bl	800301e <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002a4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a50:	3301      	adds	r3, #1
 8002a52:	627b      	str	r3, [r7, #36]	; 0x24
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	685b      	ldr	r3, [r3, #4]
 8002a58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a5a:	429a      	cmp	r2, r3
 8002a5c:	d3ce      	bcc.n	80029fc <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	695a      	ldr	r2, [r3, #20]
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8002a6c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	4618      	mov	r0, r3
 8002a74:	f004 fb44 	bl	8007100 <USB_ReadInterrupts>
 8002a78:	4603      	mov	r3, r0
 8002a7a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a7e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002a82:	d155      	bne.n	8002b30 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002a84:	2301      	movs	r3, #1
 8002a86:	627b      	str	r3, [r7, #36]	; 0x24
 8002a88:	e045      	b.n	8002b16 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8002a8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a8c:	015a      	lsls	r2, r3, #5
 8002a8e:	69fb      	ldr	r3, [r7, #28]
 8002a90:	4413      	add	r3, r2
 8002a92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002a9a:	6879      	ldr	r1, [r7, #4]
 8002a9c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a9e:	4613      	mov	r3, r2
 8002aa0:	00db      	lsls	r3, r3, #3
 8002aa2:	4413      	add	r3, r2
 8002aa4:	009b      	lsls	r3, r3, #2
 8002aa6:	440b      	add	r3, r1
 8002aa8:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002aac:	781b      	ldrb	r3, [r3, #0]
 8002aae:	2b01      	cmp	r3, #1
 8002ab0:	d12e      	bne.n	8002b10 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002ab2:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	da2b      	bge.n	8002b10 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8002ab8:	69bb      	ldr	r3, [r7, #24]
 8002aba:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8002ac4:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002ac8:	429a      	cmp	r2, r3
 8002aca:	d121      	bne.n	8002b10 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8002acc:	6879      	ldr	r1, [r7, #4]
 8002ace:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ad0:	4613      	mov	r3, r2
 8002ad2:	00db      	lsls	r3, r3, #3
 8002ad4:	4413      	add	r3, r2
 8002ad6:	009b      	lsls	r3, r3, #2
 8002ad8:	440b      	add	r3, r1
 8002ada:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8002ade:	2201      	movs	r2, #1
 8002ae0:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8002ae2:	6a3b      	ldr	r3, [r7, #32]
 8002ae4:	699b      	ldr	r3, [r3, #24]
 8002ae6:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002aea:	6a3b      	ldr	r3, [r7, #32]
 8002aec:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8002aee:	6a3b      	ldr	r3, [r7, #32]
 8002af0:	695b      	ldr	r3, [r3, #20]
 8002af2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d10a      	bne.n	8002b10 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8002afa:	69fb      	ldr	r3, [r7, #28]
 8002afc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002b00:	685b      	ldr	r3, [r3, #4]
 8002b02:	69fa      	ldr	r2, [r7, #28]
 8002b04:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002b08:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002b0c:	6053      	str	r3, [r2, #4]
            break;
 8002b0e:	e007      	b.n	8002b20 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002b10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b12:	3301      	adds	r3, #1
 8002b14:	627b      	str	r3, [r7, #36]	; 0x24
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	685b      	ldr	r3, [r3, #4]
 8002b1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b1c:	429a      	cmp	r2, r3
 8002b1e:	d3b4      	bcc.n	8002a8a <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	695a      	ldr	r2, [r3, #20]
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8002b2e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	4618      	mov	r0, r3
 8002b36:	f004 fae3 	bl	8007100 <USB_ReadInterrupts>
 8002b3a:	4603      	mov	r3, r0
 8002b3c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002b40:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b44:	d10a      	bne.n	8002b5c <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002b46:	6878      	ldr	r0, [r7, #4]
 8002b48:	f006 ff46 	bl	80099d8 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	695a      	ldr	r2, [r3, #20]
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002b5a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	4618      	mov	r0, r3
 8002b62:	f004 facd 	bl	8007100 <USB_ReadInterrupts>
 8002b66:	4603      	mov	r3, r0
 8002b68:	f003 0304 	and.w	r3, r3, #4
 8002b6c:	2b04      	cmp	r3, #4
 8002b6e:	d115      	bne.n	8002b9c <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	685b      	ldr	r3, [r3, #4]
 8002b76:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002b78:	69bb      	ldr	r3, [r7, #24]
 8002b7a:	f003 0304 	and.w	r3, r3, #4
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d002      	beq.n	8002b88 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002b82:	6878      	ldr	r0, [r7, #4]
 8002b84:	f006 ff36 	bl	80099f4 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	6859      	ldr	r1, [r3, #4]
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	69ba      	ldr	r2, [r7, #24]
 8002b94:	430a      	orrs	r2, r1
 8002b96:	605a      	str	r2, [r3, #4]
 8002b98:	e000      	b.n	8002b9c <HAL_PCD_IRQHandler+0x938>
      return;
 8002b9a:	bf00      	nop
    }
  }
}
 8002b9c:	3734      	adds	r7, #52	; 0x34
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	bd90      	pop	{r4, r7, pc}

08002ba2 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002ba2:	b580      	push	{r7, lr}
 8002ba4:	b082      	sub	sp, #8
 8002ba6:	af00      	add	r7, sp, #0
 8002ba8:	6078      	str	r0, [r7, #4]
 8002baa:	460b      	mov	r3, r1
 8002bac:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002bb4:	2b01      	cmp	r3, #1
 8002bb6:	d101      	bne.n	8002bbc <HAL_PCD_SetAddress+0x1a>
 8002bb8:	2302      	movs	r3, #2
 8002bba:	e013      	b.n	8002be4 <HAL_PCD_SetAddress+0x42>
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	2201      	movs	r2, #1
 8002bc0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	78fa      	ldrb	r2, [r7, #3]
 8002bc8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	78fa      	ldrb	r2, [r7, #3]
 8002bd2:	4611      	mov	r1, r2
 8002bd4:	4618      	mov	r0, r3
 8002bd6:	f004 fa2b 	bl	8007030 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	2200      	movs	r2, #0
 8002bde:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002be2:	2300      	movs	r3, #0
}
 8002be4:	4618      	mov	r0, r3
 8002be6:	3708      	adds	r7, #8
 8002be8:	46bd      	mov	sp, r7
 8002bea:	bd80      	pop	{r7, pc}

08002bec <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002bec:	b580      	push	{r7, lr}
 8002bee:	b084      	sub	sp, #16
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
 8002bf4:	4608      	mov	r0, r1
 8002bf6:	4611      	mov	r1, r2
 8002bf8:	461a      	mov	r2, r3
 8002bfa:	4603      	mov	r3, r0
 8002bfc:	70fb      	strb	r3, [r7, #3]
 8002bfe:	460b      	mov	r3, r1
 8002c00:	803b      	strh	r3, [r7, #0]
 8002c02:	4613      	mov	r3, r2
 8002c04:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002c06:	2300      	movs	r3, #0
 8002c08:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002c0a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	da0f      	bge.n	8002c32 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002c12:	78fb      	ldrb	r3, [r7, #3]
 8002c14:	f003 020f 	and.w	r2, r3, #15
 8002c18:	4613      	mov	r3, r2
 8002c1a:	00db      	lsls	r3, r3, #3
 8002c1c:	4413      	add	r3, r2
 8002c1e:	009b      	lsls	r3, r3, #2
 8002c20:	3338      	adds	r3, #56	; 0x38
 8002c22:	687a      	ldr	r2, [r7, #4]
 8002c24:	4413      	add	r3, r2
 8002c26:	3304      	adds	r3, #4
 8002c28:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	2201      	movs	r2, #1
 8002c2e:	705a      	strb	r2, [r3, #1]
 8002c30:	e00f      	b.n	8002c52 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002c32:	78fb      	ldrb	r3, [r7, #3]
 8002c34:	f003 020f 	and.w	r2, r3, #15
 8002c38:	4613      	mov	r3, r2
 8002c3a:	00db      	lsls	r3, r3, #3
 8002c3c:	4413      	add	r3, r2
 8002c3e:	009b      	lsls	r3, r3, #2
 8002c40:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002c44:	687a      	ldr	r2, [r7, #4]
 8002c46:	4413      	add	r3, r2
 8002c48:	3304      	adds	r3, #4
 8002c4a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	2200      	movs	r2, #0
 8002c50:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002c52:	78fb      	ldrb	r3, [r7, #3]
 8002c54:	f003 030f 	and.w	r3, r3, #15
 8002c58:	b2da      	uxtb	r2, r3
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002c5e:	883a      	ldrh	r2, [r7, #0]
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	78ba      	ldrb	r2, [r7, #2]
 8002c68:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	785b      	ldrb	r3, [r3, #1]
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d004      	beq.n	8002c7c <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	781b      	ldrb	r3, [r3, #0]
 8002c76:	b29a      	uxth	r2, r3
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002c7c:	78bb      	ldrb	r3, [r7, #2]
 8002c7e:	2b02      	cmp	r3, #2
 8002c80:	d102      	bne.n	8002c88 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	2200      	movs	r2, #0
 8002c86:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002c8e:	2b01      	cmp	r3, #1
 8002c90:	d101      	bne.n	8002c96 <HAL_PCD_EP_Open+0xaa>
 8002c92:	2302      	movs	r3, #2
 8002c94:	e00e      	b.n	8002cb4 <HAL_PCD_EP_Open+0xc8>
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	2201      	movs	r2, #1
 8002c9a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	68f9      	ldr	r1, [r7, #12]
 8002ca4:	4618      	mov	r0, r3
 8002ca6:	f003 faab 	bl	8006200 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	2200      	movs	r2, #0
 8002cae:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8002cb2:	7afb      	ldrb	r3, [r7, #11]
}
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	3710      	adds	r7, #16
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	bd80      	pop	{r7, pc}

08002cbc <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	b084      	sub	sp, #16
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
 8002cc4:	460b      	mov	r3, r1
 8002cc6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002cc8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	da0f      	bge.n	8002cf0 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002cd0:	78fb      	ldrb	r3, [r7, #3]
 8002cd2:	f003 020f 	and.w	r2, r3, #15
 8002cd6:	4613      	mov	r3, r2
 8002cd8:	00db      	lsls	r3, r3, #3
 8002cda:	4413      	add	r3, r2
 8002cdc:	009b      	lsls	r3, r3, #2
 8002cde:	3338      	adds	r3, #56	; 0x38
 8002ce0:	687a      	ldr	r2, [r7, #4]
 8002ce2:	4413      	add	r3, r2
 8002ce4:	3304      	adds	r3, #4
 8002ce6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	2201      	movs	r2, #1
 8002cec:	705a      	strb	r2, [r3, #1]
 8002cee:	e00f      	b.n	8002d10 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002cf0:	78fb      	ldrb	r3, [r7, #3]
 8002cf2:	f003 020f 	and.w	r2, r3, #15
 8002cf6:	4613      	mov	r3, r2
 8002cf8:	00db      	lsls	r3, r3, #3
 8002cfa:	4413      	add	r3, r2
 8002cfc:	009b      	lsls	r3, r3, #2
 8002cfe:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002d02:	687a      	ldr	r2, [r7, #4]
 8002d04:	4413      	add	r3, r2
 8002d06:	3304      	adds	r3, #4
 8002d08:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002d10:	78fb      	ldrb	r3, [r7, #3]
 8002d12:	f003 030f 	and.w	r3, r3, #15
 8002d16:	b2da      	uxtb	r2, r3
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002d22:	2b01      	cmp	r3, #1
 8002d24:	d101      	bne.n	8002d2a <HAL_PCD_EP_Close+0x6e>
 8002d26:	2302      	movs	r3, #2
 8002d28:	e00e      	b.n	8002d48 <HAL_PCD_EP_Close+0x8c>
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	2201      	movs	r2, #1
 8002d2e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	68f9      	ldr	r1, [r7, #12]
 8002d38:	4618      	mov	r0, r3
 8002d3a:	f003 fae9 	bl	8006310 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	2200      	movs	r2, #0
 8002d42:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8002d46:	2300      	movs	r3, #0
}
 8002d48:	4618      	mov	r0, r3
 8002d4a:	3710      	adds	r7, #16
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	bd80      	pop	{r7, pc}

08002d50 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002d50:	b580      	push	{r7, lr}
 8002d52:	b086      	sub	sp, #24
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	60f8      	str	r0, [r7, #12]
 8002d58:	607a      	str	r2, [r7, #4]
 8002d5a:	603b      	str	r3, [r7, #0]
 8002d5c:	460b      	mov	r3, r1
 8002d5e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002d60:	7afb      	ldrb	r3, [r7, #11]
 8002d62:	f003 020f 	and.w	r2, r3, #15
 8002d66:	4613      	mov	r3, r2
 8002d68:	00db      	lsls	r3, r3, #3
 8002d6a:	4413      	add	r3, r2
 8002d6c:	009b      	lsls	r3, r3, #2
 8002d6e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002d72:	68fa      	ldr	r2, [r7, #12]
 8002d74:	4413      	add	r3, r2
 8002d76:	3304      	adds	r3, #4
 8002d78:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002d7a:	697b      	ldr	r3, [r7, #20]
 8002d7c:	687a      	ldr	r2, [r7, #4]
 8002d7e:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8002d80:	697b      	ldr	r3, [r7, #20]
 8002d82:	683a      	ldr	r2, [r7, #0]
 8002d84:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002d86:	697b      	ldr	r3, [r7, #20]
 8002d88:	2200      	movs	r2, #0
 8002d8a:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8002d8c:	697b      	ldr	r3, [r7, #20]
 8002d8e:	2200      	movs	r2, #0
 8002d90:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002d92:	7afb      	ldrb	r3, [r7, #11]
 8002d94:	f003 030f 	and.w	r3, r3, #15
 8002d98:	b2da      	uxtb	r2, r3
 8002d9a:	697b      	ldr	r3, [r7, #20]
 8002d9c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	691b      	ldr	r3, [r3, #16]
 8002da2:	2b01      	cmp	r3, #1
 8002da4:	d102      	bne.n	8002dac <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002da6:	687a      	ldr	r2, [r7, #4]
 8002da8:	697b      	ldr	r3, [r7, #20]
 8002daa:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002dac:	7afb      	ldrb	r3, [r7, #11]
 8002dae:	f003 030f 	and.w	r3, r3, #15
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d109      	bne.n	8002dca <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	6818      	ldr	r0, [r3, #0]
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	691b      	ldr	r3, [r3, #16]
 8002dbe:	b2db      	uxtb	r3, r3
 8002dc0:	461a      	mov	r2, r3
 8002dc2:	6979      	ldr	r1, [r7, #20]
 8002dc4:	f003 fdc8 	bl	8006958 <USB_EP0StartXfer>
 8002dc8:	e008      	b.n	8002ddc <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	6818      	ldr	r0, [r3, #0]
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	691b      	ldr	r3, [r3, #16]
 8002dd2:	b2db      	uxtb	r3, r3
 8002dd4:	461a      	mov	r2, r3
 8002dd6:	6979      	ldr	r1, [r7, #20]
 8002dd8:	f003 fb76 	bl	80064c8 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002ddc:	2300      	movs	r3, #0
}
 8002dde:	4618      	mov	r0, r3
 8002de0:	3718      	adds	r7, #24
 8002de2:	46bd      	mov	sp, r7
 8002de4:	bd80      	pop	{r7, pc}

08002de6 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002de6:	b480      	push	{r7}
 8002de8:	b083      	sub	sp, #12
 8002dea:	af00      	add	r7, sp, #0
 8002dec:	6078      	str	r0, [r7, #4]
 8002dee:	460b      	mov	r3, r1
 8002df0:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002df2:	78fb      	ldrb	r3, [r7, #3]
 8002df4:	f003 020f 	and.w	r2, r3, #15
 8002df8:	6879      	ldr	r1, [r7, #4]
 8002dfa:	4613      	mov	r3, r2
 8002dfc:	00db      	lsls	r3, r3, #3
 8002dfe:	4413      	add	r3, r2
 8002e00:	009b      	lsls	r3, r3, #2
 8002e02:	440b      	add	r3, r1
 8002e04:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8002e08:	681b      	ldr	r3, [r3, #0]
}
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	370c      	adds	r7, #12
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e14:	4770      	bx	lr

08002e16 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002e16:	b580      	push	{r7, lr}
 8002e18:	b086      	sub	sp, #24
 8002e1a:	af00      	add	r7, sp, #0
 8002e1c:	60f8      	str	r0, [r7, #12]
 8002e1e:	607a      	str	r2, [r7, #4]
 8002e20:	603b      	str	r3, [r7, #0]
 8002e22:	460b      	mov	r3, r1
 8002e24:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002e26:	7afb      	ldrb	r3, [r7, #11]
 8002e28:	f003 020f 	and.w	r2, r3, #15
 8002e2c:	4613      	mov	r3, r2
 8002e2e:	00db      	lsls	r3, r3, #3
 8002e30:	4413      	add	r3, r2
 8002e32:	009b      	lsls	r3, r3, #2
 8002e34:	3338      	adds	r3, #56	; 0x38
 8002e36:	68fa      	ldr	r2, [r7, #12]
 8002e38:	4413      	add	r3, r2
 8002e3a:	3304      	adds	r3, #4
 8002e3c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002e3e:	697b      	ldr	r3, [r7, #20]
 8002e40:	687a      	ldr	r2, [r7, #4]
 8002e42:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8002e44:	697b      	ldr	r3, [r7, #20]
 8002e46:	683a      	ldr	r2, [r7, #0]
 8002e48:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002e4a:	697b      	ldr	r3, [r7, #20]
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8002e50:	697b      	ldr	r3, [r7, #20]
 8002e52:	2201      	movs	r2, #1
 8002e54:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002e56:	7afb      	ldrb	r3, [r7, #11]
 8002e58:	f003 030f 	and.w	r3, r3, #15
 8002e5c:	b2da      	uxtb	r2, r3
 8002e5e:	697b      	ldr	r3, [r7, #20]
 8002e60:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	691b      	ldr	r3, [r3, #16]
 8002e66:	2b01      	cmp	r3, #1
 8002e68:	d102      	bne.n	8002e70 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002e6a:	687a      	ldr	r2, [r7, #4]
 8002e6c:	697b      	ldr	r3, [r7, #20]
 8002e6e:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002e70:	7afb      	ldrb	r3, [r7, #11]
 8002e72:	f003 030f 	and.w	r3, r3, #15
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d109      	bne.n	8002e8e <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	6818      	ldr	r0, [r3, #0]
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	691b      	ldr	r3, [r3, #16]
 8002e82:	b2db      	uxtb	r3, r3
 8002e84:	461a      	mov	r2, r3
 8002e86:	6979      	ldr	r1, [r7, #20]
 8002e88:	f003 fd66 	bl	8006958 <USB_EP0StartXfer>
 8002e8c:	e008      	b.n	8002ea0 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	6818      	ldr	r0, [r3, #0]
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	691b      	ldr	r3, [r3, #16]
 8002e96:	b2db      	uxtb	r3, r3
 8002e98:	461a      	mov	r2, r3
 8002e9a:	6979      	ldr	r1, [r7, #20]
 8002e9c:	f003 fb14 	bl	80064c8 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002ea0:	2300      	movs	r3, #0
}
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	3718      	adds	r7, #24
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	bd80      	pop	{r7, pc}

08002eaa <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002eaa:	b580      	push	{r7, lr}
 8002eac:	b084      	sub	sp, #16
 8002eae:	af00      	add	r7, sp, #0
 8002eb0:	6078      	str	r0, [r7, #4]
 8002eb2:	460b      	mov	r3, r1
 8002eb4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002eb6:	78fb      	ldrb	r3, [r7, #3]
 8002eb8:	f003 020f 	and.w	r2, r3, #15
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	685b      	ldr	r3, [r3, #4]
 8002ec0:	429a      	cmp	r2, r3
 8002ec2:	d901      	bls.n	8002ec8 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002ec4:	2301      	movs	r3, #1
 8002ec6:	e050      	b.n	8002f6a <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002ec8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	da0f      	bge.n	8002ef0 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002ed0:	78fb      	ldrb	r3, [r7, #3]
 8002ed2:	f003 020f 	and.w	r2, r3, #15
 8002ed6:	4613      	mov	r3, r2
 8002ed8:	00db      	lsls	r3, r3, #3
 8002eda:	4413      	add	r3, r2
 8002edc:	009b      	lsls	r3, r3, #2
 8002ede:	3338      	adds	r3, #56	; 0x38
 8002ee0:	687a      	ldr	r2, [r7, #4]
 8002ee2:	4413      	add	r3, r2
 8002ee4:	3304      	adds	r3, #4
 8002ee6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	2201      	movs	r2, #1
 8002eec:	705a      	strb	r2, [r3, #1]
 8002eee:	e00d      	b.n	8002f0c <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002ef0:	78fa      	ldrb	r2, [r7, #3]
 8002ef2:	4613      	mov	r3, r2
 8002ef4:	00db      	lsls	r3, r3, #3
 8002ef6:	4413      	add	r3, r2
 8002ef8:	009b      	lsls	r3, r3, #2
 8002efa:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002efe:	687a      	ldr	r2, [r7, #4]
 8002f00:	4413      	add	r3, r2
 8002f02:	3304      	adds	r3, #4
 8002f04:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	2200      	movs	r2, #0
 8002f0a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	2201      	movs	r2, #1
 8002f10:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002f12:	78fb      	ldrb	r3, [r7, #3]
 8002f14:	f003 030f 	and.w	r3, r3, #15
 8002f18:	b2da      	uxtb	r2, r3
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002f24:	2b01      	cmp	r3, #1
 8002f26:	d101      	bne.n	8002f2c <HAL_PCD_EP_SetStall+0x82>
 8002f28:	2302      	movs	r3, #2
 8002f2a:	e01e      	b.n	8002f6a <HAL_PCD_EP_SetStall+0xc0>
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	2201      	movs	r2, #1
 8002f30:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	68f9      	ldr	r1, [r7, #12]
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	f003 ffa4 	bl	8006e88 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002f40:	78fb      	ldrb	r3, [r7, #3]
 8002f42:	f003 030f 	and.w	r3, r3, #15
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d10a      	bne.n	8002f60 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	6818      	ldr	r0, [r3, #0]
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	691b      	ldr	r3, [r3, #16]
 8002f52:	b2d9      	uxtb	r1, r3
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002f5a:	461a      	mov	r2, r3
 8002f5c:	f004 f994 	bl	8007288 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	2200      	movs	r2, #0
 8002f64:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002f68:	2300      	movs	r3, #0
}
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	3710      	adds	r7, #16
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	bd80      	pop	{r7, pc}

08002f72 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002f72:	b580      	push	{r7, lr}
 8002f74:	b084      	sub	sp, #16
 8002f76:	af00      	add	r7, sp, #0
 8002f78:	6078      	str	r0, [r7, #4]
 8002f7a:	460b      	mov	r3, r1
 8002f7c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002f7e:	78fb      	ldrb	r3, [r7, #3]
 8002f80:	f003 020f 	and.w	r2, r3, #15
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	685b      	ldr	r3, [r3, #4]
 8002f88:	429a      	cmp	r2, r3
 8002f8a:	d901      	bls.n	8002f90 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002f8c:	2301      	movs	r3, #1
 8002f8e:	e042      	b.n	8003016 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002f90:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	da0f      	bge.n	8002fb8 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002f98:	78fb      	ldrb	r3, [r7, #3]
 8002f9a:	f003 020f 	and.w	r2, r3, #15
 8002f9e:	4613      	mov	r3, r2
 8002fa0:	00db      	lsls	r3, r3, #3
 8002fa2:	4413      	add	r3, r2
 8002fa4:	009b      	lsls	r3, r3, #2
 8002fa6:	3338      	adds	r3, #56	; 0x38
 8002fa8:	687a      	ldr	r2, [r7, #4]
 8002faa:	4413      	add	r3, r2
 8002fac:	3304      	adds	r3, #4
 8002fae:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	2201      	movs	r2, #1
 8002fb4:	705a      	strb	r2, [r3, #1]
 8002fb6:	e00f      	b.n	8002fd8 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002fb8:	78fb      	ldrb	r3, [r7, #3]
 8002fba:	f003 020f 	and.w	r2, r3, #15
 8002fbe:	4613      	mov	r3, r2
 8002fc0:	00db      	lsls	r3, r3, #3
 8002fc2:	4413      	add	r3, r2
 8002fc4:	009b      	lsls	r3, r3, #2
 8002fc6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002fca:	687a      	ldr	r2, [r7, #4]
 8002fcc:	4413      	add	r3, r2
 8002fce:	3304      	adds	r3, #4
 8002fd0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	2200      	movs	r2, #0
 8002fdc:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002fde:	78fb      	ldrb	r3, [r7, #3]
 8002fe0:	f003 030f 	and.w	r3, r3, #15
 8002fe4:	b2da      	uxtb	r2, r3
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002ff0:	2b01      	cmp	r3, #1
 8002ff2:	d101      	bne.n	8002ff8 <HAL_PCD_EP_ClrStall+0x86>
 8002ff4:	2302      	movs	r3, #2
 8002ff6:	e00e      	b.n	8003016 <HAL_PCD_EP_ClrStall+0xa4>
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	2201      	movs	r2, #1
 8002ffc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	68f9      	ldr	r1, [r7, #12]
 8003006:	4618      	mov	r0, r3
 8003008:	f003 ffac 	bl	8006f64 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	2200      	movs	r2, #0
 8003010:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003014:	2300      	movs	r3, #0
}
 8003016:	4618      	mov	r0, r3
 8003018:	3710      	adds	r7, #16
 800301a:	46bd      	mov	sp, r7
 800301c:	bd80      	pop	{r7, pc}

0800301e <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800301e:	b580      	push	{r7, lr}
 8003020:	b084      	sub	sp, #16
 8003022:	af00      	add	r7, sp, #0
 8003024:	6078      	str	r0, [r7, #4]
 8003026:	460b      	mov	r3, r1
 8003028:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800302a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800302e:	2b00      	cmp	r3, #0
 8003030:	da0c      	bge.n	800304c <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003032:	78fb      	ldrb	r3, [r7, #3]
 8003034:	f003 020f 	and.w	r2, r3, #15
 8003038:	4613      	mov	r3, r2
 800303a:	00db      	lsls	r3, r3, #3
 800303c:	4413      	add	r3, r2
 800303e:	009b      	lsls	r3, r3, #2
 8003040:	3338      	adds	r3, #56	; 0x38
 8003042:	687a      	ldr	r2, [r7, #4]
 8003044:	4413      	add	r3, r2
 8003046:	3304      	adds	r3, #4
 8003048:	60fb      	str	r3, [r7, #12]
 800304a:	e00c      	b.n	8003066 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800304c:	78fb      	ldrb	r3, [r7, #3]
 800304e:	f003 020f 	and.w	r2, r3, #15
 8003052:	4613      	mov	r3, r2
 8003054:	00db      	lsls	r3, r3, #3
 8003056:	4413      	add	r3, r2
 8003058:	009b      	lsls	r3, r3, #2
 800305a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800305e:	687a      	ldr	r2, [r7, #4]
 8003060:	4413      	add	r3, r2
 8003062:	3304      	adds	r3, #4
 8003064:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	68f9      	ldr	r1, [r7, #12]
 800306c:	4618      	mov	r0, r3
 800306e:	f003 fdcb 	bl	8006c08 <USB_EPStopXfer>
 8003072:	4603      	mov	r3, r0
 8003074:	72fb      	strb	r3, [r7, #11]

  return ret;
 8003076:	7afb      	ldrb	r3, [r7, #11]
}
 8003078:	4618      	mov	r0, r3
 800307a:	3710      	adds	r7, #16
 800307c:	46bd      	mov	sp, r7
 800307e:	bd80      	pop	{r7, pc}

08003080 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003080:	b580      	push	{r7, lr}
 8003082:	b08a      	sub	sp, #40	; 0x28
 8003084:	af02      	add	r7, sp, #8
 8003086:	6078      	str	r0, [r7, #4]
 8003088:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003090:	697b      	ldr	r3, [r7, #20]
 8003092:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003094:	683a      	ldr	r2, [r7, #0]
 8003096:	4613      	mov	r3, r2
 8003098:	00db      	lsls	r3, r3, #3
 800309a:	4413      	add	r3, r2
 800309c:	009b      	lsls	r3, r3, #2
 800309e:	3338      	adds	r3, #56	; 0x38
 80030a0:	687a      	ldr	r2, [r7, #4]
 80030a2:	4413      	add	r3, r2
 80030a4:	3304      	adds	r3, #4
 80030a6:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	6a1a      	ldr	r2, [r3, #32]
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	699b      	ldr	r3, [r3, #24]
 80030b0:	429a      	cmp	r2, r3
 80030b2:	d901      	bls.n	80030b8 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80030b4:	2301      	movs	r3, #1
 80030b6:	e06c      	b.n	8003192 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	699a      	ldr	r2, [r3, #24]
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	6a1b      	ldr	r3, [r3, #32]
 80030c0:	1ad3      	subs	r3, r2, r3
 80030c2:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	68db      	ldr	r3, [r3, #12]
 80030c8:	69fa      	ldr	r2, [r7, #28]
 80030ca:	429a      	cmp	r2, r3
 80030cc:	d902      	bls.n	80030d4 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	68db      	ldr	r3, [r3, #12]
 80030d2:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80030d4:	69fb      	ldr	r3, [r7, #28]
 80030d6:	3303      	adds	r3, #3
 80030d8:	089b      	lsrs	r3, r3, #2
 80030da:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80030dc:	e02b      	b.n	8003136 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	699a      	ldr	r2, [r3, #24]
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	6a1b      	ldr	r3, [r3, #32]
 80030e6:	1ad3      	subs	r3, r2, r3
 80030e8:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	68db      	ldr	r3, [r3, #12]
 80030ee:	69fa      	ldr	r2, [r7, #28]
 80030f0:	429a      	cmp	r2, r3
 80030f2:	d902      	bls.n	80030fa <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	68db      	ldr	r3, [r3, #12]
 80030f8:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80030fa:	69fb      	ldr	r3, [r7, #28]
 80030fc:	3303      	adds	r3, #3
 80030fe:	089b      	lsrs	r3, r3, #2
 8003100:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	6919      	ldr	r1, [r3, #16]
 8003106:	683b      	ldr	r3, [r7, #0]
 8003108:	b2da      	uxtb	r2, r3
 800310a:	69fb      	ldr	r3, [r7, #28]
 800310c:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003112:	b2db      	uxtb	r3, r3
 8003114:	9300      	str	r3, [sp, #0]
 8003116:	4603      	mov	r3, r0
 8003118:	6978      	ldr	r0, [r7, #20]
 800311a:	f003 fe1f 	bl	8006d5c <USB_WritePacket>

    ep->xfer_buff  += len;
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	691a      	ldr	r2, [r3, #16]
 8003122:	69fb      	ldr	r3, [r7, #28]
 8003124:	441a      	add	r2, r3
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	6a1a      	ldr	r2, [r3, #32]
 800312e:	69fb      	ldr	r3, [r7, #28]
 8003130:	441a      	add	r2, r3
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003136:	683b      	ldr	r3, [r7, #0]
 8003138:	015a      	lsls	r2, r3, #5
 800313a:	693b      	ldr	r3, [r7, #16]
 800313c:	4413      	add	r3, r2
 800313e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003142:	699b      	ldr	r3, [r3, #24]
 8003144:	b29b      	uxth	r3, r3
 8003146:	69ba      	ldr	r2, [r7, #24]
 8003148:	429a      	cmp	r2, r3
 800314a:	d809      	bhi.n	8003160 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	6a1a      	ldr	r2, [r3, #32]
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003154:	429a      	cmp	r2, r3
 8003156:	d203      	bcs.n	8003160 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	699b      	ldr	r3, [r3, #24]
 800315c:	2b00      	cmp	r3, #0
 800315e:	d1be      	bne.n	80030de <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	699a      	ldr	r2, [r3, #24]
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	6a1b      	ldr	r3, [r3, #32]
 8003168:	429a      	cmp	r2, r3
 800316a:	d811      	bhi.n	8003190 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800316c:	683b      	ldr	r3, [r7, #0]
 800316e:	f003 030f 	and.w	r3, r3, #15
 8003172:	2201      	movs	r2, #1
 8003174:	fa02 f303 	lsl.w	r3, r2, r3
 8003178:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800317a:	693b      	ldr	r3, [r7, #16]
 800317c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003180:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003182:	68bb      	ldr	r3, [r7, #8]
 8003184:	43db      	mvns	r3, r3
 8003186:	6939      	ldr	r1, [r7, #16]
 8003188:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800318c:	4013      	ands	r3, r2
 800318e:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8003190:	2300      	movs	r3, #0
}
 8003192:	4618      	mov	r0, r3
 8003194:	3720      	adds	r7, #32
 8003196:	46bd      	mov	sp, r7
 8003198:	bd80      	pop	{r7, pc}
	...

0800319c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800319c:	b580      	push	{r7, lr}
 800319e:	b088      	sub	sp, #32
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]
 80031a4:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80031ac:	69fb      	ldr	r3, [r7, #28]
 80031ae:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80031b0:	69fb      	ldr	r3, [r7, #28]
 80031b2:	333c      	adds	r3, #60	; 0x3c
 80031b4:	3304      	adds	r3, #4
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80031ba:	683b      	ldr	r3, [r7, #0]
 80031bc:	015a      	lsls	r2, r3, #5
 80031be:	69bb      	ldr	r3, [r7, #24]
 80031c0:	4413      	add	r3, r2
 80031c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80031c6:	689b      	ldr	r3, [r3, #8]
 80031c8:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	691b      	ldr	r3, [r3, #16]
 80031ce:	2b01      	cmp	r3, #1
 80031d0:	d17b      	bne.n	80032ca <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80031d2:	693b      	ldr	r3, [r7, #16]
 80031d4:	f003 0308 	and.w	r3, r3, #8
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d015      	beq.n	8003208 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80031dc:	697b      	ldr	r3, [r7, #20]
 80031de:	4a61      	ldr	r2, [pc, #388]	; (8003364 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80031e0:	4293      	cmp	r3, r2
 80031e2:	f240 80b9 	bls.w	8003358 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80031e6:	693b      	ldr	r3, [r7, #16]
 80031e8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	f000 80b3 	beq.w	8003358 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80031f2:	683b      	ldr	r3, [r7, #0]
 80031f4:	015a      	lsls	r2, r3, #5
 80031f6:	69bb      	ldr	r3, [r7, #24]
 80031f8:	4413      	add	r3, r2
 80031fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80031fe:	461a      	mov	r2, r3
 8003200:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003204:	6093      	str	r3, [r2, #8]
 8003206:	e0a7      	b.n	8003358 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003208:	693b      	ldr	r3, [r7, #16]
 800320a:	f003 0320 	and.w	r3, r3, #32
 800320e:	2b00      	cmp	r3, #0
 8003210:	d009      	beq.n	8003226 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003212:	683b      	ldr	r3, [r7, #0]
 8003214:	015a      	lsls	r2, r3, #5
 8003216:	69bb      	ldr	r3, [r7, #24]
 8003218:	4413      	add	r3, r2
 800321a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800321e:	461a      	mov	r2, r3
 8003220:	2320      	movs	r3, #32
 8003222:	6093      	str	r3, [r2, #8]
 8003224:	e098      	b.n	8003358 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003226:	693b      	ldr	r3, [r7, #16]
 8003228:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800322c:	2b00      	cmp	r3, #0
 800322e:	f040 8093 	bne.w	8003358 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003232:	697b      	ldr	r3, [r7, #20]
 8003234:	4a4b      	ldr	r2, [pc, #300]	; (8003364 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003236:	4293      	cmp	r3, r2
 8003238:	d90f      	bls.n	800325a <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800323a:	693b      	ldr	r3, [r7, #16]
 800323c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003240:	2b00      	cmp	r3, #0
 8003242:	d00a      	beq.n	800325a <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003244:	683b      	ldr	r3, [r7, #0]
 8003246:	015a      	lsls	r2, r3, #5
 8003248:	69bb      	ldr	r3, [r7, #24]
 800324a:	4413      	add	r3, r2
 800324c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003250:	461a      	mov	r2, r3
 8003252:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003256:	6093      	str	r3, [r2, #8]
 8003258:	e07e      	b.n	8003358 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800325a:	683a      	ldr	r2, [r7, #0]
 800325c:	4613      	mov	r3, r2
 800325e:	00db      	lsls	r3, r3, #3
 8003260:	4413      	add	r3, r2
 8003262:	009b      	lsls	r3, r3, #2
 8003264:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003268:	687a      	ldr	r2, [r7, #4]
 800326a:	4413      	add	r3, r2
 800326c:	3304      	adds	r3, #4
 800326e:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	69da      	ldr	r2, [r3, #28]
 8003274:	683b      	ldr	r3, [r7, #0]
 8003276:	0159      	lsls	r1, r3, #5
 8003278:	69bb      	ldr	r3, [r7, #24]
 800327a:	440b      	add	r3, r1
 800327c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003280:	691b      	ldr	r3, [r3, #16]
 8003282:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003286:	1ad2      	subs	r2, r2, r3
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 800328c:	683b      	ldr	r3, [r7, #0]
 800328e:	2b00      	cmp	r3, #0
 8003290:	d114      	bne.n	80032bc <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	699b      	ldr	r3, [r3, #24]
 8003296:	2b00      	cmp	r3, #0
 8003298:	d109      	bne.n	80032ae <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	6818      	ldr	r0, [r3, #0]
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80032a4:	461a      	mov	r2, r3
 80032a6:	2101      	movs	r1, #1
 80032a8:	f003 ffee 	bl	8007288 <USB_EP0_OutStart>
 80032ac:	e006      	b.n	80032bc <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	691a      	ldr	r2, [r3, #16]
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	6a1b      	ldr	r3, [r3, #32]
 80032b6:	441a      	add	r2, r3
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80032bc:	683b      	ldr	r3, [r7, #0]
 80032be:	b2db      	uxtb	r3, r3
 80032c0:	4619      	mov	r1, r3
 80032c2:	6878      	ldr	r0, [r7, #4]
 80032c4:	f006 fac4 	bl	8009850 <HAL_PCD_DataOutStageCallback>
 80032c8:	e046      	b.n	8003358 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80032ca:	697b      	ldr	r3, [r7, #20]
 80032cc:	4a26      	ldr	r2, [pc, #152]	; (8003368 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80032ce:	4293      	cmp	r3, r2
 80032d0:	d124      	bne.n	800331c <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80032d2:	693b      	ldr	r3, [r7, #16]
 80032d4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d00a      	beq.n	80032f2 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80032dc:	683b      	ldr	r3, [r7, #0]
 80032de:	015a      	lsls	r2, r3, #5
 80032e0:	69bb      	ldr	r3, [r7, #24]
 80032e2:	4413      	add	r3, r2
 80032e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80032e8:	461a      	mov	r2, r3
 80032ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80032ee:	6093      	str	r3, [r2, #8]
 80032f0:	e032      	b.n	8003358 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80032f2:	693b      	ldr	r3, [r7, #16]
 80032f4:	f003 0320 	and.w	r3, r3, #32
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d008      	beq.n	800330e <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80032fc:	683b      	ldr	r3, [r7, #0]
 80032fe:	015a      	lsls	r2, r3, #5
 8003300:	69bb      	ldr	r3, [r7, #24]
 8003302:	4413      	add	r3, r2
 8003304:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003308:	461a      	mov	r2, r3
 800330a:	2320      	movs	r3, #32
 800330c:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800330e:	683b      	ldr	r3, [r7, #0]
 8003310:	b2db      	uxtb	r3, r3
 8003312:	4619      	mov	r1, r3
 8003314:	6878      	ldr	r0, [r7, #4]
 8003316:	f006 fa9b 	bl	8009850 <HAL_PCD_DataOutStageCallback>
 800331a:	e01d      	b.n	8003358 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800331c:	683b      	ldr	r3, [r7, #0]
 800331e:	2b00      	cmp	r3, #0
 8003320:	d114      	bne.n	800334c <PCD_EP_OutXfrComplete_int+0x1b0>
 8003322:	6879      	ldr	r1, [r7, #4]
 8003324:	683a      	ldr	r2, [r7, #0]
 8003326:	4613      	mov	r3, r2
 8003328:	00db      	lsls	r3, r3, #3
 800332a:	4413      	add	r3, r2
 800332c:	009b      	lsls	r3, r3, #2
 800332e:	440b      	add	r3, r1
 8003330:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	2b00      	cmp	r3, #0
 8003338:	d108      	bne.n	800334c <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	6818      	ldr	r0, [r3, #0]
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003344:	461a      	mov	r2, r3
 8003346:	2100      	movs	r1, #0
 8003348:	f003 ff9e 	bl	8007288 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800334c:	683b      	ldr	r3, [r7, #0]
 800334e:	b2db      	uxtb	r3, r3
 8003350:	4619      	mov	r1, r3
 8003352:	6878      	ldr	r0, [r7, #4]
 8003354:	f006 fa7c 	bl	8009850 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003358:	2300      	movs	r3, #0
}
 800335a:	4618      	mov	r0, r3
 800335c:	3720      	adds	r7, #32
 800335e:	46bd      	mov	sp, r7
 8003360:	bd80      	pop	{r7, pc}
 8003362:	bf00      	nop
 8003364:	4f54300a 	.word	0x4f54300a
 8003368:	4f54310a 	.word	0x4f54310a

0800336c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800336c:	b580      	push	{r7, lr}
 800336e:	b086      	sub	sp, #24
 8003370:	af00      	add	r7, sp, #0
 8003372:	6078      	str	r0, [r7, #4]
 8003374:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800337c:	697b      	ldr	r3, [r7, #20]
 800337e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003380:	697b      	ldr	r3, [r7, #20]
 8003382:	333c      	adds	r3, #60	; 0x3c
 8003384:	3304      	adds	r3, #4
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800338a:	683b      	ldr	r3, [r7, #0]
 800338c:	015a      	lsls	r2, r3, #5
 800338e:	693b      	ldr	r3, [r7, #16]
 8003390:	4413      	add	r3, r2
 8003392:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003396:	689b      	ldr	r3, [r3, #8]
 8003398:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	4a15      	ldr	r2, [pc, #84]	; (80033f4 <PCD_EP_OutSetupPacket_int+0x88>)
 800339e:	4293      	cmp	r3, r2
 80033a0:	d90e      	bls.n	80033c0 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80033a2:	68bb      	ldr	r3, [r7, #8]
 80033a4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d009      	beq.n	80033c0 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80033ac:	683b      	ldr	r3, [r7, #0]
 80033ae:	015a      	lsls	r2, r3, #5
 80033b0:	693b      	ldr	r3, [r7, #16]
 80033b2:	4413      	add	r3, r2
 80033b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80033b8:	461a      	mov	r2, r3
 80033ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80033be:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80033c0:	6878      	ldr	r0, [r7, #4]
 80033c2:	f006 fa33 	bl	800982c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	4a0a      	ldr	r2, [pc, #40]	; (80033f4 <PCD_EP_OutSetupPacket_int+0x88>)
 80033ca:	4293      	cmp	r3, r2
 80033cc:	d90c      	bls.n	80033e8 <PCD_EP_OutSetupPacket_int+0x7c>
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	691b      	ldr	r3, [r3, #16]
 80033d2:	2b01      	cmp	r3, #1
 80033d4:	d108      	bne.n	80033e8 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	6818      	ldr	r0, [r3, #0]
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80033e0:	461a      	mov	r2, r3
 80033e2:	2101      	movs	r1, #1
 80033e4:	f003 ff50 	bl	8007288 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80033e8:	2300      	movs	r3, #0
}
 80033ea:	4618      	mov	r0, r3
 80033ec:	3718      	adds	r7, #24
 80033ee:	46bd      	mov	sp, r7
 80033f0:	bd80      	pop	{r7, pc}
 80033f2:	bf00      	nop
 80033f4:	4f54300a 	.word	0x4f54300a

080033f8 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80033f8:	b480      	push	{r7}
 80033fa:	b085      	sub	sp, #20
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	6078      	str	r0, [r7, #4]
 8003400:	460b      	mov	r3, r1
 8003402:	70fb      	strb	r3, [r7, #3]
 8003404:	4613      	mov	r3, r2
 8003406:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800340e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003410:	78fb      	ldrb	r3, [r7, #3]
 8003412:	2b00      	cmp	r3, #0
 8003414:	d107      	bne.n	8003426 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003416:	883b      	ldrh	r3, [r7, #0]
 8003418:	0419      	lsls	r1, r3, #16
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	68ba      	ldr	r2, [r7, #8]
 8003420:	430a      	orrs	r2, r1
 8003422:	629a      	str	r2, [r3, #40]	; 0x28
 8003424:	e028      	b.n	8003478 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800342c:	0c1b      	lsrs	r3, r3, #16
 800342e:	68ba      	ldr	r2, [r7, #8]
 8003430:	4413      	add	r3, r2
 8003432:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003434:	2300      	movs	r3, #0
 8003436:	73fb      	strb	r3, [r7, #15]
 8003438:	e00d      	b.n	8003456 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681a      	ldr	r2, [r3, #0]
 800343e:	7bfb      	ldrb	r3, [r7, #15]
 8003440:	3340      	adds	r3, #64	; 0x40
 8003442:	009b      	lsls	r3, r3, #2
 8003444:	4413      	add	r3, r2
 8003446:	685b      	ldr	r3, [r3, #4]
 8003448:	0c1b      	lsrs	r3, r3, #16
 800344a:	68ba      	ldr	r2, [r7, #8]
 800344c:	4413      	add	r3, r2
 800344e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003450:	7bfb      	ldrb	r3, [r7, #15]
 8003452:	3301      	adds	r3, #1
 8003454:	73fb      	strb	r3, [r7, #15]
 8003456:	7bfa      	ldrb	r2, [r7, #15]
 8003458:	78fb      	ldrb	r3, [r7, #3]
 800345a:	3b01      	subs	r3, #1
 800345c:	429a      	cmp	r2, r3
 800345e:	d3ec      	bcc.n	800343a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003460:	883b      	ldrh	r3, [r7, #0]
 8003462:	0418      	lsls	r0, r3, #16
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	6819      	ldr	r1, [r3, #0]
 8003468:	78fb      	ldrb	r3, [r7, #3]
 800346a:	3b01      	subs	r3, #1
 800346c:	68ba      	ldr	r2, [r7, #8]
 800346e:	4302      	orrs	r2, r0
 8003470:	3340      	adds	r3, #64	; 0x40
 8003472:	009b      	lsls	r3, r3, #2
 8003474:	440b      	add	r3, r1
 8003476:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003478:	2300      	movs	r3, #0
}
 800347a:	4618      	mov	r0, r3
 800347c:	3714      	adds	r7, #20
 800347e:	46bd      	mov	sp, r7
 8003480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003484:	4770      	bx	lr

08003486 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003486:	b480      	push	{r7}
 8003488:	b083      	sub	sp, #12
 800348a:	af00      	add	r7, sp, #0
 800348c:	6078      	str	r0, [r7, #4]
 800348e:	460b      	mov	r3, r1
 8003490:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	887a      	ldrh	r2, [r7, #2]
 8003498:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800349a:	2300      	movs	r3, #0
}
 800349c:	4618      	mov	r0, r3
 800349e:	370c      	adds	r7, #12
 80034a0:	46bd      	mov	sp, r7
 80034a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a6:	4770      	bx	lr

080034a8 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80034a8:	b480      	push	{r7}
 80034aa:	b083      	sub	sp, #12
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	6078      	str	r0, [r7, #4]
 80034b0:	460b      	mov	r3, r1
 80034b2:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80034b4:	bf00      	nop
 80034b6:	370c      	adds	r7, #12
 80034b8:	46bd      	mov	sp, r7
 80034ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034be:	4770      	bx	lr

080034c0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80034c0:	b580      	push	{r7, lr}
 80034c2:	b086      	sub	sp, #24
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d101      	bne.n	80034d2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80034ce:	2301      	movs	r3, #1
 80034d0:	e267      	b.n	80039a2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f003 0301 	and.w	r3, r3, #1
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d075      	beq.n	80035ca <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80034de:	4b88      	ldr	r3, [pc, #544]	; (8003700 <HAL_RCC_OscConfig+0x240>)
 80034e0:	689b      	ldr	r3, [r3, #8]
 80034e2:	f003 030c 	and.w	r3, r3, #12
 80034e6:	2b04      	cmp	r3, #4
 80034e8:	d00c      	beq.n	8003504 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80034ea:	4b85      	ldr	r3, [pc, #532]	; (8003700 <HAL_RCC_OscConfig+0x240>)
 80034ec:	689b      	ldr	r3, [r3, #8]
 80034ee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80034f2:	2b08      	cmp	r3, #8
 80034f4:	d112      	bne.n	800351c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80034f6:	4b82      	ldr	r3, [pc, #520]	; (8003700 <HAL_RCC_OscConfig+0x240>)
 80034f8:	685b      	ldr	r3, [r3, #4]
 80034fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80034fe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003502:	d10b      	bne.n	800351c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003504:	4b7e      	ldr	r3, [pc, #504]	; (8003700 <HAL_RCC_OscConfig+0x240>)
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800350c:	2b00      	cmp	r3, #0
 800350e:	d05b      	beq.n	80035c8 <HAL_RCC_OscConfig+0x108>
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	685b      	ldr	r3, [r3, #4]
 8003514:	2b00      	cmp	r3, #0
 8003516:	d157      	bne.n	80035c8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003518:	2301      	movs	r3, #1
 800351a:	e242      	b.n	80039a2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	685b      	ldr	r3, [r3, #4]
 8003520:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003524:	d106      	bne.n	8003534 <HAL_RCC_OscConfig+0x74>
 8003526:	4b76      	ldr	r3, [pc, #472]	; (8003700 <HAL_RCC_OscConfig+0x240>)
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	4a75      	ldr	r2, [pc, #468]	; (8003700 <HAL_RCC_OscConfig+0x240>)
 800352c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003530:	6013      	str	r3, [r2, #0]
 8003532:	e01d      	b.n	8003570 <HAL_RCC_OscConfig+0xb0>
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	685b      	ldr	r3, [r3, #4]
 8003538:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800353c:	d10c      	bne.n	8003558 <HAL_RCC_OscConfig+0x98>
 800353e:	4b70      	ldr	r3, [pc, #448]	; (8003700 <HAL_RCC_OscConfig+0x240>)
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	4a6f      	ldr	r2, [pc, #444]	; (8003700 <HAL_RCC_OscConfig+0x240>)
 8003544:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003548:	6013      	str	r3, [r2, #0]
 800354a:	4b6d      	ldr	r3, [pc, #436]	; (8003700 <HAL_RCC_OscConfig+0x240>)
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	4a6c      	ldr	r2, [pc, #432]	; (8003700 <HAL_RCC_OscConfig+0x240>)
 8003550:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003554:	6013      	str	r3, [r2, #0]
 8003556:	e00b      	b.n	8003570 <HAL_RCC_OscConfig+0xb0>
 8003558:	4b69      	ldr	r3, [pc, #420]	; (8003700 <HAL_RCC_OscConfig+0x240>)
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	4a68      	ldr	r2, [pc, #416]	; (8003700 <HAL_RCC_OscConfig+0x240>)
 800355e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003562:	6013      	str	r3, [r2, #0]
 8003564:	4b66      	ldr	r3, [pc, #408]	; (8003700 <HAL_RCC_OscConfig+0x240>)
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	4a65      	ldr	r2, [pc, #404]	; (8003700 <HAL_RCC_OscConfig+0x240>)
 800356a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800356e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	685b      	ldr	r3, [r3, #4]
 8003574:	2b00      	cmp	r3, #0
 8003576:	d013      	beq.n	80035a0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003578:	f7fe f982 	bl	8001880 <HAL_GetTick>
 800357c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800357e:	e008      	b.n	8003592 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003580:	f7fe f97e 	bl	8001880 <HAL_GetTick>
 8003584:	4602      	mov	r2, r0
 8003586:	693b      	ldr	r3, [r7, #16]
 8003588:	1ad3      	subs	r3, r2, r3
 800358a:	2b64      	cmp	r3, #100	; 0x64
 800358c:	d901      	bls.n	8003592 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800358e:	2303      	movs	r3, #3
 8003590:	e207      	b.n	80039a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003592:	4b5b      	ldr	r3, [pc, #364]	; (8003700 <HAL_RCC_OscConfig+0x240>)
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800359a:	2b00      	cmp	r3, #0
 800359c:	d0f0      	beq.n	8003580 <HAL_RCC_OscConfig+0xc0>
 800359e:	e014      	b.n	80035ca <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035a0:	f7fe f96e 	bl	8001880 <HAL_GetTick>
 80035a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80035a6:	e008      	b.n	80035ba <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80035a8:	f7fe f96a 	bl	8001880 <HAL_GetTick>
 80035ac:	4602      	mov	r2, r0
 80035ae:	693b      	ldr	r3, [r7, #16]
 80035b0:	1ad3      	subs	r3, r2, r3
 80035b2:	2b64      	cmp	r3, #100	; 0x64
 80035b4:	d901      	bls.n	80035ba <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80035b6:	2303      	movs	r3, #3
 80035b8:	e1f3      	b.n	80039a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80035ba:	4b51      	ldr	r3, [pc, #324]	; (8003700 <HAL_RCC_OscConfig+0x240>)
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d1f0      	bne.n	80035a8 <HAL_RCC_OscConfig+0xe8>
 80035c6:	e000      	b.n	80035ca <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f003 0302 	and.w	r3, r3, #2
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d063      	beq.n	800369e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80035d6:	4b4a      	ldr	r3, [pc, #296]	; (8003700 <HAL_RCC_OscConfig+0x240>)
 80035d8:	689b      	ldr	r3, [r3, #8]
 80035da:	f003 030c 	and.w	r3, r3, #12
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d00b      	beq.n	80035fa <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80035e2:	4b47      	ldr	r3, [pc, #284]	; (8003700 <HAL_RCC_OscConfig+0x240>)
 80035e4:	689b      	ldr	r3, [r3, #8]
 80035e6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80035ea:	2b08      	cmp	r3, #8
 80035ec:	d11c      	bne.n	8003628 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80035ee:	4b44      	ldr	r3, [pc, #272]	; (8003700 <HAL_RCC_OscConfig+0x240>)
 80035f0:	685b      	ldr	r3, [r3, #4]
 80035f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d116      	bne.n	8003628 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80035fa:	4b41      	ldr	r3, [pc, #260]	; (8003700 <HAL_RCC_OscConfig+0x240>)
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f003 0302 	and.w	r3, r3, #2
 8003602:	2b00      	cmp	r3, #0
 8003604:	d005      	beq.n	8003612 <HAL_RCC_OscConfig+0x152>
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	68db      	ldr	r3, [r3, #12]
 800360a:	2b01      	cmp	r3, #1
 800360c:	d001      	beq.n	8003612 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800360e:	2301      	movs	r3, #1
 8003610:	e1c7      	b.n	80039a2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003612:	4b3b      	ldr	r3, [pc, #236]	; (8003700 <HAL_RCC_OscConfig+0x240>)
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	691b      	ldr	r3, [r3, #16]
 800361e:	00db      	lsls	r3, r3, #3
 8003620:	4937      	ldr	r1, [pc, #220]	; (8003700 <HAL_RCC_OscConfig+0x240>)
 8003622:	4313      	orrs	r3, r2
 8003624:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003626:	e03a      	b.n	800369e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	68db      	ldr	r3, [r3, #12]
 800362c:	2b00      	cmp	r3, #0
 800362e:	d020      	beq.n	8003672 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003630:	4b34      	ldr	r3, [pc, #208]	; (8003704 <HAL_RCC_OscConfig+0x244>)
 8003632:	2201      	movs	r2, #1
 8003634:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003636:	f7fe f923 	bl	8001880 <HAL_GetTick>
 800363a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800363c:	e008      	b.n	8003650 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800363e:	f7fe f91f 	bl	8001880 <HAL_GetTick>
 8003642:	4602      	mov	r2, r0
 8003644:	693b      	ldr	r3, [r7, #16]
 8003646:	1ad3      	subs	r3, r2, r3
 8003648:	2b02      	cmp	r3, #2
 800364a:	d901      	bls.n	8003650 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800364c:	2303      	movs	r3, #3
 800364e:	e1a8      	b.n	80039a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003650:	4b2b      	ldr	r3, [pc, #172]	; (8003700 <HAL_RCC_OscConfig+0x240>)
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f003 0302 	and.w	r3, r3, #2
 8003658:	2b00      	cmp	r3, #0
 800365a:	d0f0      	beq.n	800363e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800365c:	4b28      	ldr	r3, [pc, #160]	; (8003700 <HAL_RCC_OscConfig+0x240>)
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	691b      	ldr	r3, [r3, #16]
 8003668:	00db      	lsls	r3, r3, #3
 800366a:	4925      	ldr	r1, [pc, #148]	; (8003700 <HAL_RCC_OscConfig+0x240>)
 800366c:	4313      	orrs	r3, r2
 800366e:	600b      	str	r3, [r1, #0]
 8003670:	e015      	b.n	800369e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003672:	4b24      	ldr	r3, [pc, #144]	; (8003704 <HAL_RCC_OscConfig+0x244>)
 8003674:	2200      	movs	r2, #0
 8003676:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003678:	f7fe f902 	bl	8001880 <HAL_GetTick>
 800367c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800367e:	e008      	b.n	8003692 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003680:	f7fe f8fe 	bl	8001880 <HAL_GetTick>
 8003684:	4602      	mov	r2, r0
 8003686:	693b      	ldr	r3, [r7, #16]
 8003688:	1ad3      	subs	r3, r2, r3
 800368a:	2b02      	cmp	r3, #2
 800368c:	d901      	bls.n	8003692 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800368e:	2303      	movs	r3, #3
 8003690:	e187      	b.n	80039a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003692:	4b1b      	ldr	r3, [pc, #108]	; (8003700 <HAL_RCC_OscConfig+0x240>)
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f003 0302 	and.w	r3, r3, #2
 800369a:	2b00      	cmp	r3, #0
 800369c:	d1f0      	bne.n	8003680 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f003 0308 	and.w	r3, r3, #8
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d036      	beq.n	8003718 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	695b      	ldr	r3, [r3, #20]
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d016      	beq.n	80036e0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80036b2:	4b15      	ldr	r3, [pc, #84]	; (8003708 <HAL_RCC_OscConfig+0x248>)
 80036b4:	2201      	movs	r2, #1
 80036b6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036b8:	f7fe f8e2 	bl	8001880 <HAL_GetTick>
 80036bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80036be:	e008      	b.n	80036d2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80036c0:	f7fe f8de 	bl	8001880 <HAL_GetTick>
 80036c4:	4602      	mov	r2, r0
 80036c6:	693b      	ldr	r3, [r7, #16]
 80036c8:	1ad3      	subs	r3, r2, r3
 80036ca:	2b02      	cmp	r3, #2
 80036cc:	d901      	bls.n	80036d2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80036ce:	2303      	movs	r3, #3
 80036d0:	e167      	b.n	80039a2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80036d2:	4b0b      	ldr	r3, [pc, #44]	; (8003700 <HAL_RCC_OscConfig+0x240>)
 80036d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80036d6:	f003 0302 	and.w	r3, r3, #2
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d0f0      	beq.n	80036c0 <HAL_RCC_OscConfig+0x200>
 80036de:	e01b      	b.n	8003718 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80036e0:	4b09      	ldr	r3, [pc, #36]	; (8003708 <HAL_RCC_OscConfig+0x248>)
 80036e2:	2200      	movs	r2, #0
 80036e4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80036e6:	f7fe f8cb 	bl	8001880 <HAL_GetTick>
 80036ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80036ec:	e00e      	b.n	800370c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80036ee:	f7fe f8c7 	bl	8001880 <HAL_GetTick>
 80036f2:	4602      	mov	r2, r0
 80036f4:	693b      	ldr	r3, [r7, #16]
 80036f6:	1ad3      	subs	r3, r2, r3
 80036f8:	2b02      	cmp	r3, #2
 80036fa:	d907      	bls.n	800370c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80036fc:	2303      	movs	r3, #3
 80036fe:	e150      	b.n	80039a2 <HAL_RCC_OscConfig+0x4e2>
 8003700:	40023800 	.word	0x40023800
 8003704:	42470000 	.word	0x42470000
 8003708:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800370c:	4b88      	ldr	r3, [pc, #544]	; (8003930 <HAL_RCC_OscConfig+0x470>)
 800370e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003710:	f003 0302 	and.w	r3, r3, #2
 8003714:	2b00      	cmp	r3, #0
 8003716:	d1ea      	bne.n	80036ee <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f003 0304 	and.w	r3, r3, #4
 8003720:	2b00      	cmp	r3, #0
 8003722:	f000 8097 	beq.w	8003854 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003726:	2300      	movs	r3, #0
 8003728:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800372a:	4b81      	ldr	r3, [pc, #516]	; (8003930 <HAL_RCC_OscConfig+0x470>)
 800372c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800372e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003732:	2b00      	cmp	r3, #0
 8003734:	d10f      	bne.n	8003756 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003736:	2300      	movs	r3, #0
 8003738:	60bb      	str	r3, [r7, #8]
 800373a:	4b7d      	ldr	r3, [pc, #500]	; (8003930 <HAL_RCC_OscConfig+0x470>)
 800373c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800373e:	4a7c      	ldr	r2, [pc, #496]	; (8003930 <HAL_RCC_OscConfig+0x470>)
 8003740:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003744:	6413      	str	r3, [r2, #64]	; 0x40
 8003746:	4b7a      	ldr	r3, [pc, #488]	; (8003930 <HAL_RCC_OscConfig+0x470>)
 8003748:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800374a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800374e:	60bb      	str	r3, [r7, #8]
 8003750:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003752:	2301      	movs	r3, #1
 8003754:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003756:	4b77      	ldr	r3, [pc, #476]	; (8003934 <HAL_RCC_OscConfig+0x474>)
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800375e:	2b00      	cmp	r3, #0
 8003760:	d118      	bne.n	8003794 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003762:	4b74      	ldr	r3, [pc, #464]	; (8003934 <HAL_RCC_OscConfig+0x474>)
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	4a73      	ldr	r2, [pc, #460]	; (8003934 <HAL_RCC_OscConfig+0x474>)
 8003768:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800376c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800376e:	f7fe f887 	bl	8001880 <HAL_GetTick>
 8003772:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003774:	e008      	b.n	8003788 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003776:	f7fe f883 	bl	8001880 <HAL_GetTick>
 800377a:	4602      	mov	r2, r0
 800377c:	693b      	ldr	r3, [r7, #16]
 800377e:	1ad3      	subs	r3, r2, r3
 8003780:	2b02      	cmp	r3, #2
 8003782:	d901      	bls.n	8003788 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003784:	2303      	movs	r3, #3
 8003786:	e10c      	b.n	80039a2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003788:	4b6a      	ldr	r3, [pc, #424]	; (8003934 <HAL_RCC_OscConfig+0x474>)
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003790:	2b00      	cmp	r3, #0
 8003792:	d0f0      	beq.n	8003776 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	689b      	ldr	r3, [r3, #8]
 8003798:	2b01      	cmp	r3, #1
 800379a:	d106      	bne.n	80037aa <HAL_RCC_OscConfig+0x2ea>
 800379c:	4b64      	ldr	r3, [pc, #400]	; (8003930 <HAL_RCC_OscConfig+0x470>)
 800379e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037a0:	4a63      	ldr	r2, [pc, #396]	; (8003930 <HAL_RCC_OscConfig+0x470>)
 80037a2:	f043 0301 	orr.w	r3, r3, #1
 80037a6:	6713      	str	r3, [r2, #112]	; 0x70
 80037a8:	e01c      	b.n	80037e4 <HAL_RCC_OscConfig+0x324>
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	689b      	ldr	r3, [r3, #8]
 80037ae:	2b05      	cmp	r3, #5
 80037b0:	d10c      	bne.n	80037cc <HAL_RCC_OscConfig+0x30c>
 80037b2:	4b5f      	ldr	r3, [pc, #380]	; (8003930 <HAL_RCC_OscConfig+0x470>)
 80037b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037b6:	4a5e      	ldr	r2, [pc, #376]	; (8003930 <HAL_RCC_OscConfig+0x470>)
 80037b8:	f043 0304 	orr.w	r3, r3, #4
 80037bc:	6713      	str	r3, [r2, #112]	; 0x70
 80037be:	4b5c      	ldr	r3, [pc, #368]	; (8003930 <HAL_RCC_OscConfig+0x470>)
 80037c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037c2:	4a5b      	ldr	r2, [pc, #364]	; (8003930 <HAL_RCC_OscConfig+0x470>)
 80037c4:	f043 0301 	orr.w	r3, r3, #1
 80037c8:	6713      	str	r3, [r2, #112]	; 0x70
 80037ca:	e00b      	b.n	80037e4 <HAL_RCC_OscConfig+0x324>
 80037cc:	4b58      	ldr	r3, [pc, #352]	; (8003930 <HAL_RCC_OscConfig+0x470>)
 80037ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037d0:	4a57      	ldr	r2, [pc, #348]	; (8003930 <HAL_RCC_OscConfig+0x470>)
 80037d2:	f023 0301 	bic.w	r3, r3, #1
 80037d6:	6713      	str	r3, [r2, #112]	; 0x70
 80037d8:	4b55      	ldr	r3, [pc, #340]	; (8003930 <HAL_RCC_OscConfig+0x470>)
 80037da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037dc:	4a54      	ldr	r2, [pc, #336]	; (8003930 <HAL_RCC_OscConfig+0x470>)
 80037de:	f023 0304 	bic.w	r3, r3, #4
 80037e2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	689b      	ldr	r3, [r3, #8]
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d015      	beq.n	8003818 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037ec:	f7fe f848 	bl	8001880 <HAL_GetTick>
 80037f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037f2:	e00a      	b.n	800380a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80037f4:	f7fe f844 	bl	8001880 <HAL_GetTick>
 80037f8:	4602      	mov	r2, r0
 80037fa:	693b      	ldr	r3, [r7, #16]
 80037fc:	1ad3      	subs	r3, r2, r3
 80037fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8003802:	4293      	cmp	r3, r2
 8003804:	d901      	bls.n	800380a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003806:	2303      	movs	r3, #3
 8003808:	e0cb      	b.n	80039a2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800380a:	4b49      	ldr	r3, [pc, #292]	; (8003930 <HAL_RCC_OscConfig+0x470>)
 800380c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800380e:	f003 0302 	and.w	r3, r3, #2
 8003812:	2b00      	cmp	r3, #0
 8003814:	d0ee      	beq.n	80037f4 <HAL_RCC_OscConfig+0x334>
 8003816:	e014      	b.n	8003842 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003818:	f7fe f832 	bl	8001880 <HAL_GetTick>
 800381c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800381e:	e00a      	b.n	8003836 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003820:	f7fe f82e 	bl	8001880 <HAL_GetTick>
 8003824:	4602      	mov	r2, r0
 8003826:	693b      	ldr	r3, [r7, #16]
 8003828:	1ad3      	subs	r3, r2, r3
 800382a:	f241 3288 	movw	r2, #5000	; 0x1388
 800382e:	4293      	cmp	r3, r2
 8003830:	d901      	bls.n	8003836 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003832:	2303      	movs	r3, #3
 8003834:	e0b5      	b.n	80039a2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003836:	4b3e      	ldr	r3, [pc, #248]	; (8003930 <HAL_RCC_OscConfig+0x470>)
 8003838:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800383a:	f003 0302 	and.w	r3, r3, #2
 800383e:	2b00      	cmp	r3, #0
 8003840:	d1ee      	bne.n	8003820 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003842:	7dfb      	ldrb	r3, [r7, #23]
 8003844:	2b01      	cmp	r3, #1
 8003846:	d105      	bne.n	8003854 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003848:	4b39      	ldr	r3, [pc, #228]	; (8003930 <HAL_RCC_OscConfig+0x470>)
 800384a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800384c:	4a38      	ldr	r2, [pc, #224]	; (8003930 <HAL_RCC_OscConfig+0x470>)
 800384e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003852:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	699b      	ldr	r3, [r3, #24]
 8003858:	2b00      	cmp	r3, #0
 800385a:	f000 80a1 	beq.w	80039a0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800385e:	4b34      	ldr	r3, [pc, #208]	; (8003930 <HAL_RCC_OscConfig+0x470>)
 8003860:	689b      	ldr	r3, [r3, #8]
 8003862:	f003 030c 	and.w	r3, r3, #12
 8003866:	2b08      	cmp	r3, #8
 8003868:	d05c      	beq.n	8003924 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	699b      	ldr	r3, [r3, #24]
 800386e:	2b02      	cmp	r3, #2
 8003870:	d141      	bne.n	80038f6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003872:	4b31      	ldr	r3, [pc, #196]	; (8003938 <HAL_RCC_OscConfig+0x478>)
 8003874:	2200      	movs	r2, #0
 8003876:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003878:	f7fe f802 	bl	8001880 <HAL_GetTick>
 800387c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800387e:	e008      	b.n	8003892 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003880:	f7fd fffe 	bl	8001880 <HAL_GetTick>
 8003884:	4602      	mov	r2, r0
 8003886:	693b      	ldr	r3, [r7, #16]
 8003888:	1ad3      	subs	r3, r2, r3
 800388a:	2b02      	cmp	r3, #2
 800388c:	d901      	bls.n	8003892 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800388e:	2303      	movs	r3, #3
 8003890:	e087      	b.n	80039a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003892:	4b27      	ldr	r3, [pc, #156]	; (8003930 <HAL_RCC_OscConfig+0x470>)
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800389a:	2b00      	cmp	r3, #0
 800389c:	d1f0      	bne.n	8003880 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	69da      	ldr	r2, [r3, #28]
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	6a1b      	ldr	r3, [r3, #32]
 80038a6:	431a      	orrs	r2, r3
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038ac:	019b      	lsls	r3, r3, #6
 80038ae:	431a      	orrs	r2, r3
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038b4:	085b      	lsrs	r3, r3, #1
 80038b6:	3b01      	subs	r3, #1
 80038b8:	041b      	lsls	r3, r3, #16
 80038ba:	431a      	orrs	r2, r3
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038c0:	061b      	lsls	r3, r3, #24
 80038c2:	491b      	ldr	r1, [pc, #108]	; (8003930 <HAL_RCC_OscConfig+0x470>)
 80038c4:	4313      	orrs	r3, r2
 80038c6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80038c8:	4b1b      	ldr	r3, [pc, #108]	; (8003938 <HAL_RCC_OscConfig+0x478>)
 80038ca:	2201      	movs	r2, #1
 80038cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038ce:	f7fd ffd7 	bl	8001880 <HAL_GetTick>
 80038d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80038d4:	e008      	b.n	80038e8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80038d6:	f7fd ffd3 	bl	8001880 <HAL_GetTick>
 80038da:	4602      	mov	r2, r0
 80038dc:	693b      	ldr	r3, [r7, #16]
 80038de:	1ad3      	subs	r3, r2, r3
 80038e0:	2b02      	cmp	r3, #2
 80038e2:	d901      	bls.n	80038e8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80038e4:	2303      	movs	r3, #3
 80038e6:	e05c      	b.n	80039a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80038e8:	4b11      	ldr	r3, [pc, #68]	; (8003930 <HAL_RCC_OscConfig+0x470>)
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d0f0      	beq.n	80038d6 <HAL_RCC_OscConfig+0x416>
 80038f4:	e054      	b.n	80039a0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038f6:	4b10      	ldr	r3, [pc, #64]	; (8003938 <HAL_RCC_OscConfig+0x478>)
 80038f8:	2200      	movs	r2, #0
 80038fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038fc:	f7fd ffc0 	bl	8001880 <HAL_GetTick>
 8003900:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003902:	e008      	b.n	8003916 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003904:	f7fd ffbc 	bl	8001880 <HAL_GetTick>
 8003908:	4602      	mov	r2, r0
 800390a:	693b      	ldr	r3, [r7, #16]
 800390c:	1ad3      	subs	r3, r2, r3
 800390e:	2b02      	cmp	r3, #2
 8003910:	d901      	bls.n	8003916 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003912:	2303      	movs	r3, #3
 8003914:	e045      	b.n	80039a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003916:	4b06      	ldr	r3, [pc, #24]	; (8003930 <HAL_RCC_OscConfig+0x470>)
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800391e:	2b00      	cmp	r3, #0
 8003920:	d1f0      	bne.n	8003904 <HAL_RCC_OscConfig+0x444>
 8003922:	e03d      	b.n	80039a0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	699b      	ldr	r3, [r3, #24]
 8003928:	2b01      	cmp	r3, #1
 800392a:	d107      	bne.n	800393c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800392c:	2301      	movs	r3, #1
 800392e:	e038      	b.n	80039a2 <HAL_RCC_OscConfig+0x4e2>
 8003930:	40023800 	.word	0x40023800
 8003934:	40007000 	.word	0x40007000
 8003938:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800393c:	4b1b      	ldr	r3, [pc, #108]	; (80039ac <HAL_RCC_OscConfig+0x4ec>)
 800393e:	685b      	ldr	r3, [r3, #4]
 8003940:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	699b      	ldr	r3, [r3, #24]
 8003946:	2b01      	cmp	r3, #1
 8003948:	d028      	beq.n	800399c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003954:	429a      	cmp	r2, r3
 8003956:	d121      	bne.n	800399c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003962:	429a      	cmp	r2, r3
 8003964:	d11a      	bne.n	800399c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003966:	68fa      	ldr	r2, [r7, #12]
 8003968:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800396c:	4013      	ands	r3, r2
 800396e:	687a      	ldr	r2, [r7, #4]
 8003970:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003972:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003974:	4293      	cmp	r3, r2
 8003976:	d111      	bne.n	800399c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003982:	085b      	lsrs	r3, r3, #1
 8003984:	3b01      	subs	r3, #1
 8003986:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003988:	429a      	cmp	r2, r3
 800398a:	d107      	bne.n	800399c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003996:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003998:	429a      	cmp	r2, r3
 800399a:	d001      	beq.n	80039a0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800399c:	2301      	movs	r3, #1
 800399e:	e000      	b.n	80039a2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80039a0:	2300      	movs	r3, #0
}
 80039a2:	4618      	mov	r0, r3
 80039a4:	3718      	adds	r7, #24
 80039a6:	46bd      	mov	sp, r7
 80039a8:	bd80      	pop	{r7, pc}
 80039aa:	bf00      	nop
 80039ac:	40023800 	.word	0x40023800

080039b0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80039b0:	b580      	push	{r7, lr}
 80039b2:	b084      	sub	sp, #16
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]
 80039b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d101      	bne.n	80039c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80039c0:	2301      	movs	r3, #1
 80039c2:	e0cc      	b.n	8003b5e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80039c4:	4b68      	ldr	r3, [pc, #416]	; (8003b68 <HAL_RCC_ClockConfig+0x1b8>)
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f003 0307 	and.w	r3, r3, #7
 80039cc:	683a      	ldr	r2, [r7, #0]
 80039ce:	429a      	cmp	r2, r3
 80039d0:	d90c      	bls.n	80039ec <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039d2:	4b65      	ldr	r3, [pc, #404]	; (8003b68 <HAL_RCC_ClockConfig+0x1b8>)
 80039d4:	683a      	ldr	r2, [r7, #0]
 80039d6:	b2d2      	uxtb	r2, r2
 80039d8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80039da:	4b63      	ldr	r3, [pc, #396]	; (8003b68 <HAL_RCC_ClockConfig+0x1b8>)
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f003 0307 	and.w	r3, r3, #7
 80039e2:	683a      	ldr	r2, [r7, #0]
 80039e4:	429a      	cmp	r2, r3
 80039e6:	d001      	beq.n	80039ec <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80039e8:	2301      	movs	r3, #1
 80039ea:	e0b8      	b.n	8003b5e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f003 0302 	and.w	r3, r3, #2
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d020      	beq.n	8003a3a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f003 0304 	and.w	r3, r3, #4
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d005      	beq.n	8003a10 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003a04:	4b59      	ldr	r3, [pc, #356]	; (8003b6c <HAL_RCC_ClockConfig+0x1bc>)
 8003a06:	689b      	ldr	r3, [r3, #8]
 8003a08:	4a58      	ldr	r2, [pc, #352]	; (8003b6c <HAL_RCC_ClockConfig+0x1bc>)
 8003a0a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003a0e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f003 0308 	and.w	r3, r3, #8
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d005      	beq.n	8003a28 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003a1c:	4b53      	ldr	r3, [pc, #332]	; (8003b6c <HAL_RCC_ClockConfig+0x1bc>)
 8003a1e:	689b      	ldr	r3, [r3, #8]
 8003a20:	4a52      	ldr	r2, [pc, #328]	; (8003b6c <HAL_RCC_ClockConfig+0x1bc>)
 8003a22:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003a26:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a28:	4b50      	ldr	r3, [pc, #320]	; (8003b6c <HAL_RCC_ClockConfig+0x1bc>)
 8003a2a:	689b      	ldr	r3, [r3, #8]
 8003a2c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	689b      	ldr	r3, [r3, #8]
 8003a34:	494d      	ldr	r1, [pc, #308]	; (8003b6c <HAL_RCC_ClockConfig+0x1bc>)
 8003a36:	4313      	orrs	r3, r2
 8003a38:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f003 0301 	and.w	r3, r3, #1
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d044      	beq.n	8003ad0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	685b      	ldr	r3, [r3, #4]
 8003a4a:	2b01      	cmp	r3, #1
 8003a4c:	d107      	bne.n	8003a5e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a4e:	4b47      	ldr	r3, [pc, #284]	; (8003b6c <HAL_RCC_ClockConfig+0x1bc>)
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d119      	bne.n	8003a8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a5a:	2301      	movs	r3, #1
 8003a5c:	e07f      	b.n	8003b5e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	685b      	ldr	r3, [r3, #4]
 8003a62:	2b02      	cmp	r3, #2
 8003a64:	d003      	beq.n	8003a6e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003a6a:	2b03      	cmp	r3, #3
 8003a6c:	d107      	bne.n	8003a7e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a6e:	4b3f      	ldr	r3, [pc, #252]	; (8003b6c <HAL_RCC_ClockConfig+0x1bc>)
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d109      	bne.n	8003a8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a7a:	2301      	movs	r3, #1
 8003a7c:	e06f      	b.n	8003b5e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a7e:	4b3b      	ldr	r3, [pc, #236]	; (8003b6c <HAL_RCC_ClockConfig+0x1bc>)
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f003 0302 	and.w	r3, r3, #2
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d101      	bne.n	8003a8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a8a:	2301      	movs	r3, #1
 8003a8c:	e067      	b.n	8003b5e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003a8e:	4b37      	ldr	r3, [pc, #220]	; (8003b6c <HAL_RCC_ClockConfig+0x1bc>)
 8003a90:	689b      	ldr	r3, [r3, #8]
 8003a92:	f023 0203 	bic.w	r2, r3, #3
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	685b      	ldr	r3, [r3, #4]
 8003a9a:	4934      	ldr	r1, [pc, #208]	; (8003b6c <HAL_RCC_ClockConfig+0x1bc>)
 8003a9c:	4313      	orrs	r3, r2
 8003a9e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003aa0:	f7fd feee 	bl	8001880 <HAL_GetTick>
 8003aa4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003aa6:	e00a      	b.n	8003abe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003aa8:	f7fd feea 	bl	8001880 <HAL_GetTick>
 8003aac:	4602      	mov	r2, r0
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	1ad3      	subs	r3, r2, r3
 8003ab2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ab6:	4293      	cmp	r3, r2
 8003ab8:	d901      	bls.n	8003abe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003aba:	2303      	movs	r3, #3
 8003abc:	e04f      	b.n	8003b5e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003abe:	4b2b      	ldr	r3, [pc, #172]	; (8003b6c <HAL_RCC_ClockConfig+0x1bc>)
 8003ac0:	689b      	ldr	r3, [r3, #8]
 8003ac2:	f003 020c 	and.w	r2, r3, #12
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	685b      	ldr	r3, [r3, #4]
 8003aca:	009b      	lsls	r3, r3, #2
 8003acc:	429a      	cmp	r2, r3
 8003ace:	d1eb      	bne.n	8003aa8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003ad0:	4b25      	ldr	r3, [pc, #148]	; (8003b68 <HAL_RCC_ClockConfig+0x1b8>)
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f003 0307 	and.w	r3, r3, #7
 8003ad8:	683a      	ldr	r2, [r7, #0]
 8003ada:	429a      	cmp	r2, r3
 8003adc:	d20c      	bcs.n	8003af8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ade:	4b22      	ldr	r3, [pc, #136]	; (8003b68 <HAL_RCC_ClockConfig+0x1b8>)
 8003ae0:	683a      	ldr	r2, [r7, #0]
 8003ae2:	b2d2      	uxtb	r2, r2
 8003ae4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ae6:	4b20      	ldr	r3, [pc, #128]	; (8003b68 <HAL_RCC_ClockConfig+0x1b8>)
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f003 0307 	and.w	r3, r3, #7
 8003aee:	683a      	ldr	r2, [r7, #0]
 8003af0:	429a      	cmp	r2, r3
 8003af2:	d001      	beq.n	8003af8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003af4:	2301      	movs	r3, #1
 8003af6:	e032      	b.n	8003b5e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f003 0304 	and.w	r3, r3, #4
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d008      	beq.n	8003b16 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003b04:	4b19      	ldr	r3, [pc, #100]	; (8003b6c <HAL_RCC_ClockConfig+0x1bc>)
 8003b06:	689b      	ldr	r3, [r3, #8]
 8003b08:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	68db      	ldr	r3, [r3, #12]
 8003b10:	4916      	ldr	r1, [pc, #88]	; (8003b6c <HAL_RCC_ClockConfig+0x1bc>)
 8003b12:	4313      	orrs	r3, r2
 8003b14:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f003 0308 	and.w	r3, r3, #8
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d009      	beq.n	8003b36 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003b22:	4b12      	ldr	r3, [pc, #72]	; (8003b6c <HAL_RCC_ClockConfig+0x1bc>)
 8003b24:	689b      	ldr	r3, [r3, #8]
 8003b26:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	691b      	ldr	r3, [r3, #16]
 8003b2e:	00db      	lsls	r3, r3, #3
 8003b30:	490e      	ldr	r1, [pc, #56]	; (8003b6c <HAL_RCC_ClockConfig+0x1bc>)
 8003b32:	4313      	orrs	r3, r2
 8003b34:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003b36:	f000 f821 	bl	8003b7c <HAL_RCC_GetSysClockFreq>
 8003b3a:	4602      	mov	r2, r0
 8003b3c:	4b0b      	ldr	r3, [pc, #44]	; (8003b6c <HAL_RCC_ClockConfig+0x1bc>)
 8003b3e:	689b      	ldr	r3, [r3, #8]
 8003b40:	091b      	lsrs	r3, r3, #4
 8003b42:	f003 030f 	and.w	r3, r3, #15
 8003b46:	490a      	ldr	r1, [pc, #40]	; (8003b70 <HAL_RCC_ClockConfig+0x1c0>)
 8003b48:	5ccb      	ldrb	r3, [r1, r3]
 8003b4a:	fa22 f303 	lsr.w	r3, r2, r3
 8003b4e:	4a09      	ldr	r2, [pc, #36]	; (8003b74 <HAL_RCC_ClockConfig+0x1c4>)
 8003b50:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003b52:	4b09      	ldr	r3, [pc, #36]	; (8003b78 <HAL_RCC_ClockConfig+0x1c8>)
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	4618      	mov	r0, r3
 8003b58:	f7fd fe4e 	bl	80017f8 <HAL_InitTick>

  return HAL_OK;
 8003b5c:	2300      	movs	r3, #0
}
 8003b5e:	4618      	mov	r0, r3
 8003b60:	3710      	adds	r7, #16
 8003b62:	46bd      	mov	sp, r7
 8003b64:	bd80      	pop	{r7, pc}
 8003b66:	bf00      	nop
 8003b68:	40023c00 	.word	0x40023c00
 8003b6c:	40023800 	.word	0x40023800
 8003b70:	0800a758 	.word	0x0800a758
 8003b74:	20000008 	.word	0x20000008
 8003b78:	2000000c 	.word	0x2000000c

08003b7c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003b7c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003b80:	b090      	sub	sp, #64	; 0x40
 8003b82:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003b84:	2300      	movs	r3, #0
 8003b86:	637b      	str	r3, [r7, #52]	; 0x34
 8003b88:	2300      	movs	r3, #0
 8003b8a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003b8c:	2300      	movs	r3, #0
 8003b8e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8003b90:	2300      	movs	r3, #0
 8003b92:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003b94:	4b59      	ldr	r3, [pc, #356]	; (8003cfc <HAL_RCC_GetSysClockFreq+0x180>)
 8003b96:	689b      	ldr	r3, [r3, #8]
 8003b98:	f003 030c 	and.w	r3, r3, #12
 8003b9c:	2b08      	cmp	r3, #8
 8003b9e:	d00d      	beq.n	8003bbc <HAL_RCC_GetSysClockFreq+0x40>
 8003ba0:	2b08      	cmp	r3, #8
 8003ba2:	f200 80a1 	bhi.w	8003ce8 <HAL_RCC_GetSysClockFreq+0x16c>
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d002      	beq.n	8003bb0 <HAL_RCC_GetSysClockFreq+0x34>
 8003baa:	2b04      	cmp	r3, #4
 8003bac:	d003      	beq.n	8003bb6 <HAL_RCC_GetSysClockFreq+0x3a>
 8003bae:	e09b      	b.n	8003ce8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003bb0:	4b53      	ldr	r3, [pc, #332]	; (8003d00 <HAL_RCC_GetSysClockFreq+0x184>)
 8003bb2:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8003bb4:	e09b      	b.n	8003cee <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003bb6:	4b53      	ldr	r3, [pc, #332]	; (8003d04 <HAL_RCC_GetSysClockFreq+0x188>)
 8003bb8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003bba:	e098      	b.n	8003cee <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003bbc:	4b4f      	ldr	r3, [pc, #316]	; (8003cfc <HAL_RCC_GetSysClockFreq+0x180>)
 8003bbe:	685b      	ldr	r3, [r3, #4]
 8003bc0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003bc4:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003bc6:	4b4d      	ldr	r3, [pc, #308]	; (8003cfc <HAL_RCC_GetSysClockFreq+0x180>)
 8003bc8:	685b      	ldr	r3, [r3, #4]
 8003bca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d028      	beq.n	8003c24 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003bd2:	4b4a      	ldr	r3, [pc, #296]	; (8003cfc <HAL_RCC_GetSysClockFreq+0x180>)
 8003bd4:	685b      	ldr	r3, [r3, #4]
 8003bd6:	099b      	lsrs	r3, r3, #6
 8003bd8:	2200      	movs	r2, #0
 8003bda:	623b      	str	r3, [r7, #32]
 8003bdc:	627a      	str	r2, [r7, #36]	; 0x24
 8003bde:	6a3b      	ldr	r3, [r7, #32]
 8003be0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003be4:	2100      	movs	r1, #0
 8003be6:	4b47      	ldr	r3, [pc, #284]	; (8003d04 <HAL_RCC_GetSysClockFreq+0x188>)
 8003be8:	fb03 f201 	mul.w	r2, r3, r1
 8003bec:	2300      	movs	r3, #0
 8003bee:	fb00 f303 	mul.w	r3, r0, r3
 8003bf2:	4413      	add	r3, r2
 8003bf4:	4a43      	ldr	r2, [pc, #268]	; (8003d04 <HAL_RCC_GetSysClockFreq+0x188>)
 8003bf6:	fba0 1202 	umull	r1, r2, r0, r2
 8003bfa:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003bfc:	460a      	mov	r2, r1
 8003bfe:	62ba      	str	r2, [r7, #40]	; 0x28
 8003c00:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003c02:	4413      	add	r3, r2
 8003c04:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003c06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c08:	2200      	movs	r2, #0
 8003c0a:	61bb      	str	r3, [r7, #24]
 8003c0c:	61fa      	str	r2, [r7, #28]
 8003c0e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003c12:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003c16:	f7fc fad7 	bl	80001c8 <__aeabi_uldivmod>
 8003c1a:	4602      	mov	r2, r0
 8003c1c:	460b      	mov	r3, r1
 8003c1e:	4613      	mov	r3, r2
 8003c20:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003c22:	e053      	b.n	8003ccc <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c24:	4b35      	ldr	r3, [pc, #212]	; (8003cfc <HAL_RCC_GetSysClockFreq+0x180>)
 8003c26:	685b      	ldr	r3, [r3, #4]
 8003c28:	099b      	lsrs	r3, r3, #6
 8003c2a:	2200      	movs	r2, #0
 8003c2c:	613b      	str	r3, [r7, #16]
 8003c2e:	617a      	str	r2, [r7, #20]
 8003c30:	693b      	ldr	r3, [r7, #16]
 8003c32:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003c36:	f04f 0b00 	mov.w	fp, #0
 8003c3a:	4652      	mov	r2, sl
 8003c3c:	465b      	mov	r3, fp
 8003c3e:	f04f 0000 	mov.w	r0, #0
 8003c42:	f04f 0100 	mov.w	r1, #0
 8003c46:	0159      	lsls	r1, r3, #5
 8003c48:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003c4c:	0150      	lsls	r0, r2, #5
 8003c4e:	4602      	mov	r2, r0
 8003c50:	460b      	mov	r3, r1
 8003c52:	ebb2 080a 	subs.w	r8, r2, sl
 8003c56:	eb63 090b 	sbc.w	r9, r3, fp
 8003c5a:	f04f 0200 	mov.w	r2, #0
 8003c5e:	f04f 0300 	mov.w	r3, #0
 8003c62:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003c66:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003c6a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003c6e:	ebb2 0408 	subs.w	r4, r2, r8
 8003c72:	eb63 0509 	sbc.w	r5, r3, r9
 8003c76:	f04f 0200 	mov.w	r2, #0
 8003c7a:	f04f 0300 	mov.w	r3, #0
 8003c7e:	00eb      	lsls	r3, r5, #3
 8003c80:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003c84:	00e2      	lsls	r2, r4, #3
 8003c86:	4614      	mov	r4, r2
 8003c88:	461d      	mov	r5, r3
 8003c8a:	eb14 030a 	adds.w	r3, r4, sl
 8003c8e:	603b      	str	r3, [r7, #0]
 8003c90:	eb45 030b 	adc.w	r3, r5, fp
 8003c94:	607b      	str	r3, [r7, #4]
 8003c96:	f04f 0200 	mov.w	r2, #0
 8003c9a:	f04f 0300 	mov.w	r3, #0
 8003c9e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003ca2:	4629      	mov	r1, r5
 8003ca4:	028b      	lsls	r3, r1, #10
 8003ca6:	4621      	mov	r1, r4
 8003ca8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003cac:	4621      	mov	r1, r4
 8003cae:	028a      	lsls	r2, r1, #10
 8003cb0:	4610      	mov	r0, r2
 8003cb2:	4619      	mov	r1, r3
 8003cb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003cb6:	2200      	movs	r2, #0
 8003cb8:	60bb      	str	r3, [r7, #8]
 8003cba:	60fa      	str	r2, [r7, #12]
 8003cbc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003cc0:	f7fc fa82 	bl	80001c8 <__aeabi_uldivmod>
 8003cc4:	4602      	mov	r2, r0
 8003cc6:	460b      	mov	r3, r1
 8003cc8:	4613      	mov	r3, r2
 8003cca:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003ccc:	4b0b      	ldr	r3, [pc, #44]	; (8003cfc <HAL_RCC_GetSysClockFreq+0x180>)
 8003cce:	685b      	ldr	r3, [r3, #4]
 8003cd0:	0c1b      	lsrs	r3, r3, #16
 8003cd2:	f003 0303 	and.w	r3, r3, #3
 8003cd6:	3301      	adds	r3, #1
 8003cd8:	005b      	lsls	r3, r3, #1
 8003cda:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8003cdc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003cde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ce0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ce4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003ce6:	e002      	b.n	8003cee <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003ce8:	4b05      	ldr	r3, [pc, #20]	; (8003d00 <HAL_RCC_GetSysClockFreq+0x184>)
 8003cea:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003cec:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003cee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003cf0:	4618      	mov	r0, r3
 8003cf2:	3740      	adds	r7, #64	; 0x40
 8003cf4:	46bd      	mov	sp, r7
 8003cf6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003cfa:	bf00      	nop
 8003cfc:	40023800 	.word	0x40023800
 8003d00:	00f42400 	.word	0x00f42400
 8003d04:	016e3600 	.word	0x016e3600

08003d08 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003d08:	b480      	push	{r7}
 8003d0a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003d0c:	4b03      	ldr	r3, [pc, #12]	; (8003d1c <HAL_RCC_GetHCLKFreq+0x14>)
 8003d0e:	681b      	ldr	r3, [r3, #0]
}
 8003d10:	4618      	mov	r0, r3
 8003d12:	46bd      	mov	sp, r7
 8003d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d18:	4770      	bx	lr
 8003d1a:	bf00      	nop
 8003d1c:	20000008 	.word	0x20000008

08003d20 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003d20:	b580      	push	{r7, lr}
 8003d22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003d24:	f7ff fff0 	bl	8003d08 <HAL_RCC_GetHCLKFreq>
 8003d28:	4602      	mov	r2, r0
 8003d2a:	4b05      	ldr	r3, [pc, #20]	; (8003d40 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003d2c:	689b      	ldr	r3, [r3, #8]
 8003d2e:	0a9b      	lsrs	r3, r3, #10
 8003d30:	f003 0307 	and.w	r3, r3, #7
 8003d34:	4903      	ldr	r1, [pc, #12]	; (8003d44 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003d36:	5ccb      	ldrb	r3, [r1, r3]
 8003d38:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d3c:	4618      	mov	r0, r3
 8003d3e:	bd80      	pop	{r7, pc}
 8003d40:	40023800 	.word	0x40023800
 8003d44:	0800a768 	.word	0x0800a768

08003d48 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003d48:	b580      	push	{r7, lr}
 8003d4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003d4c:	f7ff ffdc 	bl	8003d08 <HAL_RCC_GetHCLKFreq>
 8003d50:	4602      	mov	r2, r0
 8003d52:	4b05      	ldr	r3, [pc, #20]	; (8003d68 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003d54:	689b      	ldr	r3, [r3, #8]
 8003d56:	0b5b      	lsrs	r3, r3, #13
 8003d58:	f003 0307 	and.w	r3, r3, #7
 8003d5c:	4903      	ldr	r1, [pc, #12]	; (8003d6c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003d5e:	5ccb      	ldrb	r3, [r1, r3]
 8003d60:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d64:	4618      	mov	r0, r3
 8003d66:	bd80      	pop	{r7, pc}
 8003d68:	40023800 	.word	0x40023800
 8003d6c:	0800a768 	.word	0x0800a768

08003d70 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003d70:	b580      	push	{r7, lr}
 8003d72:	b082      	sub	sp, #8
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d101      	bne.n	8003d82 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003d7e:	2301      	movs	r3, #1
 8003d80:	e07b      	b.n	8003e7a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d108      	bne.n	8003d9c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	685b      	ldr	r3, [r3, #4]
 8003d8e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003d92:	d009      	beq.n	8003da8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	2200      	movs	r2, #0
 8003d98:	61da      	str	r2, [r3, #28]
 8003d9a:	e005      	b.n	8003da8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	2200      	movs	r2, #0
 8003da0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	2200      	movs	r2, #0
 8003da6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	2200      	movs	r2, #0
 8003dac:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003db4:	b2db      	uxtb	r3, r3
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d106      	bne.n	8003dc8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	2200      	movs	r2, #0
 8003dbe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003dc2:	6878      	ldr	r0, [r7, #4]
 8003dc4:	f7fd fb4c 	bl	8001460 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	2202      	movs	r2, #2
 8003dcc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	681a      	ldr	r2, [r3, #0]
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003dde:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	685b      	ldr	r3, [r3, #4]
 8003de4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	689b      	ldr	r3, [r3, #8]
 8003dec:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003df0:	431a      	orrs	r2, r3
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	68db      	ldr	r3, [r3, #12]
 8003df6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003dfa:	431a      	orrs	r2, r3
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	691b      	ldr	r3, [r3, #16]
 8003e00:	f003 0302 	and.w	r3, r3, #2
 8003e04:	431a      	orrs	r2, r3
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	695b      	ldr	r3, [r3, #20]
 8003e0a:	f003 0301 	and.w	r3, r3, #1
 8003e0e:	431a      	orrs	r2, r3
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	699b      	ldr	r3, [r3, #24]
 8003e14:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003e18:	431a      	orrs	r2, r3
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	69db      	ldr	r3, [r3, #28]
 8003e1e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003e22:	431a      	orrs	r2, r3
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	6a1b      	ldr	r3, [r3, #32]
 8003e28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e2c:	ea42 0103 	orr.w	r1, r2, r3
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e34:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	430a      	orrs	r2, r1
 8003e3e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	699b      	ldr	r3, [r3, #24]
 8003e44:	0c1b      	lsrs	r3, r3, #16
 8003e46:	f003 0104 	and.w	r1, r3, #4
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e4e:	f003 0210 	and.w	r2, r3, #16
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	430a      	orrs	r2, r1
 8003e58:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	69da      	ldr	r2, [r3, #28]
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003e68:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	2200      	movs	r2, #0
 8003e6e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	2201      	movs	r2, #1
 8003e74:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003e78:	2300      	movs	r3, #0
}
 8003e7a:	4618      	mov	r0, r3
 8003e7c:	3708      	adds	r7, #8
 8003e7e:	46bd      	mov	sp, r7
 8003e80:	bd80      	pop	{r7, pc}

08003e82 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003e82:	b580      	push	{r7, lr}
 8003e84:	b088      	sub	sp, #32
 8003e86:	af00      	add	r7, sp, #0
 8003e88:	60f8      	str	r0, [r7, #12]
 8003e8a:	60b9      	str	r1, [r7, #8]
 8003e8c:	603b      	str	r3, [r7, #0]
 8003e8e:	4613      	mov	r3, r2
 8003e90:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003e92:	2300      	movs	r3, #0
 8003e94:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003e9c:	2b01      	cmp	r3, #1
 8003e9e:	d101      	bne.n	8003ea4 <HAL_SPI_Transmit+0x22>
 8003ea0:	2302      	movs	r3, #2
 8003ea2:	e126      	b.n	80040f2 <HAL_SPI_Transmit+0x270>
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	2201      	movs	r2, #1
 8003ea8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003eac:	f7fd fce8 	bl	8001880 <HAL_GetTick>
 8003eb0:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003eb2:	88fb      	ldrh	r3, [r7, #6]
 8003eb4:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003ebc:	b2db      	uxtb	r3, r3
 8003ebe:	2b01      	cmp	r3, #1
 8003ec0:	d002      	beq.n	8003ec8 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003ec2:	2302      	movs	r3, #2
 8003ec4:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003ec6:	e10b      	b.n	80040e0 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8003ec8:	68bb      	ldr	r3, [r7, #8]
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d002      	beq.n	8003ed4 <HAL_SPI_Transmit+0x52>
 8003ece:	88fb      	ldrh	r3, [r7, #6]
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d102      	bne.n	8003eda <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003ed4:	2301      	movs	r3, #1
 8003ed6:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003ed8:	e102      	b.n	80040e0 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	2203      	movs	r2, #3
 8003ede:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	2200      	movs	r2, #0
 8003ee6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	68ba      	ldr	r2, [r7, #8]
 8003eec:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	88fa      	ldrh	r2, [r7, #6]
 8003ef2:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	88fa      	ldrh	r2, [r7, #6]
 8003ef8:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	2200      	movs	r2, #0
 8003efe:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	2200      	movs	r2, #0
 8003f04:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	2200      	movs	r2, #0
 8003f0a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	2200      	movs	r2, #0
 8003f10:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	2200      	movs	r2, #0
 8003f16:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	689b      	ldr	r3, [r3, #8]
 8003f1c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003f20:	d10f      	bne.n	8003f42 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	681a      	ldr	r2, [r3, #0]
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003f30:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	681a      	ldr	r2, [r3, #0]
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003f40:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f4c:	2b40      	cmp	r3, #64	; 0x40
 8003f4e:	d007      	beq.n	8003f60 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	681a      	ldr	r2, [r3, #0]
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003f5e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	68db      	ldr	r3, [r3, #12]
 8003f64:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003f68:	d14b      	bne.n	8004002 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	685b      	ldr	r3, [r3, #4]
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d002      	beq.n	8003f78 <HAL_SPI_Transmit+0xf6>
 8003f72:	8afb      	ldrh	r3, [r7, #22]
 8003f74:	2b01      	cmp	r3, #1
 8003f76:	d13e      	bne.n	8003ff6 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f7c:	881a      	ldrh	r2, [r3, #0]
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f88:	1c9a      	adds	r2, r3, #2
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003f92:	b29b      	uxth	r3, r3
 8003f94:	3b01      	subs	r3, #1
 8003f96:	b29a      	uxth	r2, r3
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003f9c:	e02b      	b.n	8003ff6 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	689b      	ldr	r3, [r3, #8]
 8003fa4:	f003 0302 	and.w	r3, r3, #2
 8003fa8:	2b02      	cmp	r3, #2
 8003faa:	d112      	bne.n	8003fd2 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fb0:	881a      	ldrh	r2, [r3, #0]
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fbc:	1c9a      	adds	r2, r3, #2
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003fc6:	b29b      	uxth	r3, r3
 8003fc8:	3b01      	subs	r3, #1
 8003fca:	b29a      	uxth	r2, r3
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	86da      	strh	r2, [r3, #54]	; 0x36
 8003fd0:	e011      	b.n	8003ff6 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003fd2:	f7fd fc55 	bl	8001880 <HAL_GetTick>
 8003fd6:	4602      	mov	r2, r0
 8003fd8:	69bb      	ldr	r3, [r7, #24]
 8003fda:	1ad3      	subs	r3, r2, r3
 8003fdc:	683a      	ldr	r2, [r7, #0]
 8003fde:	429a      	cmp	r2, r3
 8003fe0:	d803      	bhi.n	8003fea <HAL_SPI_Transmit+0x168>
 8003fe2:	683b      	ldr	r3, [r7, #0]
 8003fe4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fe8:	d102      	bne.n	8003ff0 <HAL_SPI_Transmit+0x16e>
 8003fea:	683b      	ldr	r3, [r7, #0]
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d102      	bne.n	8003ff6 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8003ff0:	2303      	movs	r3, #3
 8003ff2:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003ff4:	e074      	b.n	80040e0 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003ffa:	b29b      	uxth	r3, r3
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d1ce      	bne.n	8003f9e <HAL_SPI_Transmit+0x11c>
 8004000:	e04c      	b.n	800409c <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	685b      	ldr	r3, [r3, #4]
 8004006:	2b00      	cmp	r3, #0
 8004008:	d002      	beq.n	8004010 <HAL_SPI_Transmit+0x18e>
 800400a:	8afb      	ldrh	r3, [r7, #22]
 800400c:	2b01      	cmp	r3, #1
 800400e:	d140      	bne.n	8004092 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	330c      	adds	r3, #12
 800401a:	7812      	ldrb	r2, [r2, #0]
 800401c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004022:	1c5a      	adds	r2, r3, #1
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800402c:	b29b      	uxth	r3, r3
 800402e:	3b01      	subs	r3, #1
 8004030:	b29a      	uxth	r2, r3
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004036:	e02c      	b.n	8004092 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	689b      	ldr	r3, [r3, #8]
 800403e:	f003 0302 	and.w	r3, r3, #2
 8004042:	2b02      	cmp	r3, #2
 8004044:	d113      	bne.n	800406e <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	330c      	adds	r3, #12
 8004050:	7812      	ldrb	r2, [r2, #0]
 8004052:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004058:	1c5a      	adds	r2, r3, #1
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004062:	b29b      	uxth	r3, r3
 8004064:	3b01      	subs	r3, #1
 8004066:	b29a      	uxth	r2, r3
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	86da      	strh	r2, [r3, #54]	; 0x36
 800406c:	e011      	b.n	8004092 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800406e:	f7fd fc07 	bl	8001880 <HAL_GetTick>
 8004072:	4602      	mov	r2, r0
 8004074:	69bb      	ldr	r3, [r7, #24]
 8004076:	1ad3      	subs	r3, r2, r3
 8004078:	683a      	ldr	r2, [r7, #0]
 800407a:	429a      	cmp	r2, r3
 800407c:	d803      	bhi.n	8004086 <HAL_SPI_Transmit+0x204>
 800407e:	683b      	ldr	r3, [r7, #0]
 8004080:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004084:	d102      	bne.n	800408c <HAL_SPI_Transmit+0x20a>
 8004086:	683b      	ldr	r3, [r7, #0]
 8004088:	2b00      	cmp	r3, #0
 800408a:	d102      	bne.n	8004092 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800408c:	2303      	movs	r3, #3
 800408e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004090:	e026      	b.n	80040e0 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004096:	b29b      	uxth	r3, r3
 8004098:	2b00      	cmp	r3, #0
 800409a:	d1cd      	bne.n	8004038 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800409c:	69ba      	ldr	r2, [r7, #24]
 800409e:	6839      	ldr	r1, [r7, #0]
 80040a0:	68f8      	ldr	r0, [r7, #12]
 80040a2:	f000 fbd9 	bl	8004858 <SPI_EndRxTxTransaction>
 80040a6:	4603      	mov	r3, r0
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d002      	beq.n	80040b2 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	2220      	movs	r2, #32
 80040b0:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	689b      	ldr	r3, [r3, #8]
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d10a      	bne.n	80040d0 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80040ba:	2300      	movs	r3, #0
 80040bc:	613b      	str	r3, [r7, #16]
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	68db      	ldr	r3, [r3, #12]
 80040c4:	613b      	str	r3, [r7, #16]
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	689b      	ldr	r3, [r3, #8]
 80040cc:	613b      	str	r3, [r7, #16]
 80040ce:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d002      	beq.n	80040de <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80040d8:	2301      	movs	r3, #1
 80040da:	77fb      	strb	r3, [r7, #31]
 80040dc:	e000      	b.n	80040e0 <HAL_SPI_Transmit+0x25e>
  }

error:
 80040de:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	2201      	movs	r2, #1
 80040e4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	2200      	movs	r2, #0
 80040ec:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80040f0:	7ffb      	ldrb	r3, [r7, #31]
}
 80040f2:	4618      	mov	r0, r3
 80040f4:	3720      	adds	r7, #32
 80040f6:	46bd      	mov	sp, r7
 80040f8:	bd80      	pop	{r7, pc}

080040fa <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80040fa:	b580      	push	{r7, lr}
 80040fc:	b088      	sub	sp, #32
 80040fe:	af02      	add	r7, sp, #8
 8004100:	60f8      	str	r0, [r7, #12]
 8004102:	60b9      	str	r1, [r7, #8]
 8004104:	603b      	str	r3, [r7, #0]
 8004106:	4613      	mov	r3, r2
 8004108:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800410a:	2300      	movs	r3, #0
 800410c:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	685b      	ldr	r3, [r3, #4]
 8004112:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004116:	d112      	bne.n	800413e <HAL_SPI_Receive+0x44>
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	689b      	ldr	r3, [r3, #8]
 800411c:	2b00      	cmp	r3, #0
 800411e:	d10e      	bne.n	800413e <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	2204      	movs	r2, #4
 8004124:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004128:	88fa      	ldrh	r2, [r7, #6]
 800412a:	683b      	ldr	r3, [r7, #0]
 800412c:	9300      	str	r3, [sp, #0]
 800412e:	4613      	mov	r3, r2
 8004130:	68ba      	ldr	r2, [r7, #8]
 8004132:	68b9      	ldr	r1, [r7, #8]
 8004134:	68f8      	ldr	r0, [r7, #12]
 8004136:	f000 f8f1 	bl	800431c <HAL_SPI_TransmitReceive>
 800413a:	4603      	mov	r3, r0
 800413c:	e0ea      	b.n	8004314 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004144:	2b01      	cmp	r3, #1
 8004146:	d101      	bne.n	800414c <HAL_SPI_Receive+0x52>
 8004148:	2302      	movs	r3, #2
 800414a:	e0e3      	b.n	8004314 <HAL_SPI_Receive+0x21a>
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	2201      	movs	r2, #1
 8004150:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004154:	f7fd fb94 	bl	8001880 <HAL_GetTick>
 8004158:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004160:	b2db      	uxtb	r3, r3
 8004162:	2b01      	cmp	r3, #1
 8004164:	d002      	beq.n	800416c <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8004166:	2302      	movs	r3, #2
 8004168:	75fb      	strb	r3, [r7, #23]
    goto error;
 800416a:	e0ca      	b.n	8004302 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 800416c:	68bb      	ldr	r3, [r7, #8]
 800416e:	2b00      	cmp	r3, #0
 8004170:	d002      	beq.n	8004178 <HAL_SPI_Receive+0x7e>
 8004172:	88fb      	ldrh	r3, [r7, #6]
 8004174:	2b00      	cmp	r3, #0
 8004176:	d102      	bne.n	800417e <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8004178:	2301      	movs	r3, #1
 800417a:	75fb      	strb	r3, [r7, #23]
    goto error;
 800417c:	e0c1      	b.n	8004302 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	2204      	movs	r2, #4
 8004182:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	2200      	movs	r2, #0
 800418a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	68ba      	ldr	r2, [r7, #8]
 8004190:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	88fa      	ldrh	r2, [r7, #6]
 8004196:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	88fa      	ldrh	r2, [r7, #6]
 800419c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	2200      	movs	r2, #0
 80041a2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	2200      	movs	r2, #0
 80041a8:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	2200      	movs	r2, #0
 80041ae:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	2200      	movs	r2, #0
 80041b4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	2200      	movs	r2, #0
 80041ba:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	689b      	ldr	r3, [r3, #8]
 80041c0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80041c4:	d10f      	bne.n	80041e6 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	681a      	ldr	r2, [r3, #0]
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80041d4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	681a      	ldr	r2, [r3, #0]
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80041e4:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041f0:	2b40      	cmp	r3, #64	; 0x40
 80041f2:	d007      	beq.n	8004204 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	681a      	ldr	r2, [r3, #0]
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004202:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	68db      	ldr	r3, [r3, #12]
 8004208:	2b00      	cmp	r3, #0
 800420a:	d162      	bne.n	80042d2 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800420c:	e02e      	b.n	800426c <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	689b      	ldr	r3, [r3, #8]
 8004214:	f003 0301 	and.w	r3, r3, #1
 8004218:	2b01      	cmp	r3, #1
 800421a:	d115      	bne.n	8004248 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f103 020c 	add.w	r2, r3, #12
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004228:	7812      	ldrb	r2, [r2, #0]
 800422a:	b2d2      	uxtb	r2, r2
 800422c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004232:	1c5a      	adds	r2, r3, #1
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800423c:	b29b      	uxth	r3, r3
 800423e:	3b01      	subs	r3, #1
 8004240:	b29a      	uxth	r2, r3
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004246:	e011      	b.n	800426c <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004248:	f7fd fb1a 	bl	8001880 <HAL_GetTick>
 800424c:	4602      	mov	r2, r0
 800424e:	693b      	ldr	r3, [r7, #16]
 8004250:	1ad3      	subs	r3, r2, r3
 8004252:	683a      	ldr	r2, [r7, #0]
 8004254:	429a      	cmp	r2, r3
 8004256:	d803      	bhi.n	8004260 <HAL_SPI_Receive+0x166>
 8004258:	683b      	ldr	r3, [r7, #0]
 800425a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800425e:	d102      	bne.n	8004266 <HAL_SPI_Receive+0x16c>
 8004260:	683b      	ldr	r3, [r7, #0]
 8004262:	2b00      	cmp	r3, #0
 8004264:	d102      	bne.n	800426c <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8004266:	2303      	movs	r3, #3
 8004268:	75fb      	strb	r3, [r7, #23]
          goto error;
 800426a:	e04a      	b.n	8004302 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004270:	b29b      	uxth	r3, r3
 8004272:	2b00      	cmp	r3, #0
 8004274:	d1cb      	bne.n	800420e <HAL_SPI_Receive+0x114>
 8004276:	e031      	b.n	80042dc <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	689b      	ldr	r3, [r3, #8]
 800427e:	f003 0301 	and.w	r3, r3, #1
 8004282:	2b01      	cmp	r3, #1
 8004284:	d113      	bne.n	80042ae <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	68da      	ldr	r2, [r3, #12]
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004290:	b292      	uxth	r2, r2
 8004292:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004298:	1c9a      	adds	r2, r3, #2
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80042a2:	b29b      	uxth	r3, r3
 80042a4:	3b01      	subs	r3, #1
 80042a6:	b29a      	uxth	r2, r3
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	87da      	strh	r2, [r3, #62]	; 0x3e
 80042ac:	e011      	b.n	80042d2 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80042ae:	f7fd fae7 	bl	8001880 <HAL_GetTick>
 80042b2:	4602      	mov	r2, r0
 80042b4:	693b      	ldr	r3, [r7, #16]
 80042b6:	1ad3      	subs	r3, r2, r3
 80042b8:	683a      	ldr	r2, [r7, #0]
 80042ba:	429a      	cmp	r2, r3
 80042bc:	d803      	bhi.n	80042c6 <HAL_SPI_Receive+0x1cc>
 80042be:	683b      	ldr	r3, [r7, #0]
 80042c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042c4:	d102      	bne.n	80042cc <HAL_SPI_Receive+0x1d2>
 80042c6:	683b      	ldr	r3, [r7, #0]
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d102      	bne.n	80042d2 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 80042cc:	2303      	movs	r3, #3
 80042ce:	75fb      	strb	r3, [r7, #23]
          goto error;
 80042d0:	e017      	b.n	8004302 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80042d6:	b29b      	uxth	r3, r3
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d1cd      	bne.n	8004278 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80042dc:	693a      	ldr	r2, [r7, #16]
 80042de:	6839      	ldr	r1, [r7, #0]
 80042e0:	68f8      	ldr	r0, [r7, #12]
 80042e2:	f000 fa53 	bl	800478c <SPI_EndRxTransaction>
 80042e6:	4603      	mov	r3, r0
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d002      	beq.n	80042f2 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	2220      	movs	r2, #32
 80042f0:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d002      	beq.n	8004300 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 80042fa:	2301      	movs	r3, #1
 80042fc:	75fb      	strb	r3, [r7, #23]
 80042fe:	e000      	b.n	8004302 <HAL_SPI_Receive+0x208>
  }

error :
 8004300:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	2201      	movs	r2, #1
 8004306:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	2200      	movs	r2, #0
 800430e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004312:	7dfb      	ldrb	r3, [r7, #23]
}
 8004314:	4618      	mov	r0, r3
 8004316:	3718      	adds	r7, #24
 8004318:	46bd      	mov	sp, r7
 800431a:	bd80      	pop	{r7, pc}

0800431c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800431c:	b580      	push	{r7, lr}
 800431e:	b08c      	sub	sp, #48	; 0x30
 8004320:	af00      	add	r7, sp, #0
 8004322:	60f8      	str	r0, [r7, #12]
 8004324:	60b9      	str	r1, [r7, #8]
 8004326:	607a      	str	r2, [r7, #4]
 8004328:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800432a:	2301      	movs	r3, #1
 800432c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800432e:	2300      	movs	r3, #0
 8004330:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800433a:	2b01      	cmp	r3, #1
 800433c:	d101      	bne.n	8004342 <HAL_SPI_TransmitReceive+0x26>
 800433e:	2302      	movs	r3, #2
 8004340:	e18a      	b.n	8004658 <HAL_SPI_TransmitReceive+0x33c>
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	2201      	movs	r2, #1
 8004346:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800434a:	f7fd fa99 	bl	8001880 <HAL_GetTick>
 800434e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004356:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	685b      	ldr	r3, [r3, #4]
 800435e:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8004360:	887b      	ldrh	r3, [r7, #2]
 8004362:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004364:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004368:	2b01      	cmp	r3, #1
 800436a:	d00f      	beq.n	800438c <HAL_SPI_TransmitReceive+0x70>
 800436c:	69fb      	ldr	r3, [r7, #28]
 800436e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004372:	d107      	bne.n	8004384 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	689b      	ldr	r3, [r3, #8]
 8004378:	2b00      	cmp	r3, #0
 800437a:	d103      	bne.n	8004384 <HAL_SPI_TransmitReceive+0x68>
 800437c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004380:	2b04      	cmp	r3, #4
 8004382:	d003      	beq.n	800438c <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8004384:	2302      	movs	r3, #2
 8004386:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800438a:	e15b      	b.n	8004644 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800438c:	68bb      	ldr	r3, [r7, #8]
 800438e:	2b00      	cmp	r3, #0
 8004390:	d005      	beq.n	800439e <HAL_SPI_TransmitReceive+0x82>
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	2b00      	cmp	r3, #0
 8004396:	d002      	beq.n	800439e <HAL_SPI_TransmitReceive+0x82>
 8004398:	887b      	ldrh	r3, [r7, #2]
 800439a:	2b00      	cmp	r3, #0
 800439c:	d103      	bne.n	80043a6 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800439e:	2301      	movs	r3, #1
 80043a0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80043a4:	e14e      	b.n	8004644 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80043ac:	b2db      	uxtb	r3, r3
 80043ae:	2b04      	cmp	r3, #4
 80043b0:	d003      	beq.n	80043ba <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	2205      	movs	r2, #5
 80043b6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	2200      	movs	r2, #0
 80043be:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	687a      	ldr	r2, [r7, #4]
 80043c4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	887a      	ldrh	r2, [r7, #2]
 80043ca:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	887a      	ldrh	r2, [r7, #2]
 80043d0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	68ba      	ldr	r2, [r7, #8]
 80043d6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	887a      	ldrh	r2, [r7, #2]
 80043dc:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	887a      	ldrh	r2, [r7, #2]
 80043e2:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	2200      	movs	r2, #0
 80043e8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	2200      	movs	r2, #0
 80043ee:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043fa:	2b40      	cmp	r3, #64	; 0x40
 80043fc:	d007      	beq.n	800440e <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	681a      	ldr	r2, [r3, #0]
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800440c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	68db      	ldr	r3, [r3, #12]
 8004412:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004416:	d178      	bne.n	800450a <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	685b      	ldr	r3, [r3, #4]
 800441c:	2b00      	cmp	r3, #0
 800441e:	d002      	beq.n	8004426 <HAL_SPI_TransmitReceive+0x10a>
 8004420:	8b7b      	ldrh	r3, [r7, #26]
 8004422:	2b01      	cmp	r3, #1
 8004424:	d166      	bne.n	80044f4 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800442a:	881a      	ldrh	r2, [r3, #0]
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004436:	1c9a      	adds	r2, r3, #2
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004440:	b29b      	uxth	r3, r3
 8004442:	3b01      	subs	r3, #1
 8004444:	b29a      	uxth	r2, r3
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800444a:	e053      	b.n	80044f4 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	689b      	ldr	r3, [r3, #8]
 8004452:	f003 0302 	and.w	r3, r3, #2
 8004456:	2b02      	cmp	r3, #2
 8004458:	d11b      	bne.n	8004492 <HAL_SPI_TransmitReceive+0x176>
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800445e:	b29b      	uxth	r3, r3
 8004460:	2b00      	cmp	r3, #0
 8004462:	d016      	beq.n	8004492 <HAL_SPI_TransmitReceive+0x176>
 8004464:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004466:	2b01      	cmp	r3, #1
 8004468:	d113      	bne.n	8004492 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800446e:	881a      	ldrh	r2, [r3, #0]
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800447a:	1c9a      	adds	r2, r3, #2
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004484:	b29b      	uxth	r3, r3
 8004486:	3b01      	subs	r3, #1
 8004488:	b29a      	uxth	r2, r3
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800448e:	2300      	movs	r3, #0
 8004490:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	689b      	ldr	r3, [r3, #8]
 8004498:	f003 0301 	and.w	r3, r3, #1
 800449c:	2b01      	cmp	r3, #1
 800449e:	d119      	bne.n	80044d4 <HAL_SPI_TransmitReceive+0x1b8>
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80044a4:	b29b      	uxth	r3, r3
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d014      	beq.n	80044d4 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	68da      	ldr	r2, [r3, #12]
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044b4:	b292      	uxth	r2, r2
 80044b6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044bc:	1c9a      	adds	r2, r3, #2
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80044c6:	b29b      	uxth	r3, r3
 80044c8:	3b01      	subs	r3, #1
 80044ca:	b29a      	uxth	r2, r3
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80044d0:	2301      	movs	r3, #1
 80044d2:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80044d4:	f7fd f9d4 	bl	8001880 <HAL_GetTick>
 80044d8:	4602      	mov	r2, r0
 80044da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044dc:	1ad3      	subs	r3, r2, r3
 80044de:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80044e0:	429a      	cmp	r2, r3
 80044e2:	d807      	bhi.n	80044f4 <HAL_SPI_TransmitReceive+0x1d8>
 80044e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044ea:	d003      	beq.n	80044f4 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80044ec:	2303      	movs	r3, #3
 80044ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80044f2:	e0a7      	b.n	8004644 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80044f8:	b29b      	uxth	r3, r3
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d1a6      	bne.n	800444c <HAL_SPI_TransmitReceive+0x130>
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004502:	b29b      	uxth	r3, r3
 8004504:	2b00      	cmp	r3, #0
 8004506:	d1a1      	bne.n	800444c <HAL_SPI_TransmitReceive+0x130>
 8004508:	e07c      	b.n	8004604 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	685b      	ldr	r3, [r3, #4]
 800450e:	2b00      	cmp	r3, #0
 8004510:	d002      	beq.n	8004518 <HAL_SPI_TransmitReceive+0x1fc>
 8004512:	8b7b      	ldrh	r3, [r7, #26]
 8004514:	2b01      	cmp	r3, #1
 8004516:	d16b      	bne.n	80045f0 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	330c      	adds	r3, #12
 8004522:	7812      	ldrb	r2, [r2, #0]
 8004524:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800452a:	1c5a      	adds	r2, r3, #1
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004534:	b29b      	uxth	r3, r3
 8004536:	3b01      	subs	r3, #1
 8004538:	b29a      	uxth	r2, r3
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800453e:	e057      	b.n	80045f0 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	689b      	ldr	r3, [r3, #8]
 8004546:	f003 0302 	and.w	r3, r3, #2
 800454a:	2b02      	cmp	r3, #2
 800454c:	d11c      	bne.n	8004588 <HAL_SPI_TransmitReceive+0x26c>
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004552:	b29b      	uxth	r3, r3
 8004554:	2b00      	cmp	r3, #0
 8004556:	d017      	beq.n	8004588 <HAL_SPI_TransmitReceive+0x26c>
 8004558:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800455a:	2b01      	cmp	r3, #1
 800455c:	d114      	bne.n	8004588 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	330c      	adds	r3, #12
 8004568:	7812      	ldrb	r2, [r2, #0]
 800456a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004570:	1c5a      	adds	r2, r3, #1
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800457a:	b29b      	uxth	r3, r3
 800457c:	3b01      	subs	r3, #1
 800457e:	b29a      	uxth	r2, r3
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004584:	2300      	movs	r3, #0
 8004586:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	689b      	ldr	r3, [r3, #8]
 800458e:	f003 0301 	and.w	r3, r3, #1
 8004592:	2b01      	cmp	r3, #1
 8004594:	d119      	bne.n	80045ca <HAL_SPI_TransmitReceive+0x2ae>
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800459a:	b29b      	uxth	r3, r3
 800459c:	2b00      	cmp	r3, #0
 800459e:	d014      	beq.n	80045ca <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	68da      	ldr	r2, [r3, #12]
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045aa:	b2d2      	uxtb	r2, r2
 80045ac:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045b2:	1c5a      	adds	r2, r3, #1
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80045bc:	b29b      	uxth	r3, r3
 80045be:	3b01      	subs	r3, #1
 80045c0:	b29a      	uxth	r2, r3
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80045c6:	2301      	movs	r3, #1
 80045c8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80045ca:	f7fd f959 	bl	8001880 <HAL_GetTick>
 80045ce:	4602      	mov	r2, r0
 80045d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045d2:	1ad3      	subs	r3, r2, r3
 80045d4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80045d6:	429a      	cmp	r2, r3
 80045d8:	d803      	bhi.n	80045e2 <HAL_SPI_TransmitReceive+0x2c6>
 80045da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045e0:	d102      	bne.n	80045e8 <HAL_SPI_TransmitReceive+0x2cc>
 80045e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d103      	bne.n	80045f0 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80045e8:	2303      	movs	r3, #3
 80045ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80045ee:	e029      	b.n	8004644 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80045f4:	b29b      	uxth	r3, r3
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d1a2      	bne.n	8004540 <HAL_SPI_TransmitReceive+0x224>
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80045fe:	b29b      	uxth	r3, r3
 8004600:	2b00      	cmp	r3, #0
 8004602:	d19d      	bne.n	8004540 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004604:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004606:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004608:	68f8      	ldr	r0, [r7, #12]
 800460a:	f000 f925 	bl	8004858 <SPI_EndRxTxTransaction>
 800460e:	4603      	mov	r3, r0
 8004610:	2b00      	cmp	r3, #0
 8004612:	d006      	beq.n	8004622 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8004614:	2301      	movs	r3, #1
 8004616:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	2220      	movs	r2, #32
 800461e:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8004620:	e010      	b.n	8004644 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	689b      	ldr	r3, [r3, #8]
 8004626:	2b00      	cmp	r3, #0
 8004628:	d10b      	bne.n	8004642 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800462a:	2300      	movs	r3, #0
 800462c:	617b      	str	r3, [r7, #20]
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	68db      	ldr	r3, [r3, #12]
 8004634:	617b      	str	r3, [r7, #20]
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	689b      	ldr	r3, [r3, #8]
 800463c:	617b      	str	r3, [r7, #20]
 800463e:	697b      	ldr	r3, [r7, #20]
 8004640:	e000      	b.n	8004644 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8004642:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	2201      	movs	r2, #1
 8004648:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	2200      	movs	r2, #0
 8004650:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004654:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8004658:	4618      	mov	r0, r3
 800465a:	3730      	adds	r7, #48	; 0x30
 800465c:	46bd      	mov	sp, r7
 800465e:	bd80      	pop	{r7, pc}

08004660 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8004660:	b480      	push	{r7}
 8004662:	b083      	sub	sp, #12
 8004664:	af00      	add	r7, sp, #0
 8004666:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800466e:	b2db      	uxtb	r3, r3
}
 8004670:	4618      	mov	r0, r3
 8004672:	370c      	adds	r7, #12
 8004674:	46bd      	mov	sp, r7
 8004676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800467a:	4770      	bx	lr

0800467c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800467c:	b580      	push	{r7, lr}
 800467e:	b088      	sub	sp, #32
 8004680:	af00      	add	r7, sp, #0
 8004682:	60f8      	str	r0, [r7, #12]
 8004684:	60b9      	str	r1, [r7, #8]
 8004686:	603b      	str	r3, [r7, #0]
 8004688:	4613      	mov	r3, r2
 800468a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800468c:	f7fd f8f8 	bl	8001880 <HAL_GetTick>
 8004690:	4602      	mov	r2, r0
 8004692:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004694:	1a9b      	subs	r3, r3, r2
 8004696:	683a      	ldr	r2, [r7, #0]
 8004698:	4413      	add	r3, r2
 800469a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800469c:	f7fd f8f0 	bl	8001880 <HAL_GetTick>
 80046a0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80046a2:	4b39      	ldr	r3, [pc, #228]	; (8004788 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	015b      	lsls	r3, r3, #5
 80046a8:	0d1b      	lsrs	r3, r3, #20
 80046aa:	69fa      	ldr	r2, [r7, #28]
 80046ac:	fb02 f303 	mul.w	r3, r2, r3
 80046b0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80046b2:	e054      	b.n	800475e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80046b4:	683b      	ldr	r3, [r7, #0]
 80046b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046ba:	d050      	beq.n	800475e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80046bc:	f7fd f8e0 	bl	8001880 <HAL_GetTick>
 80046c0:	4602      	mov	r2, r0
 80046c2:	69bb      	ldr	r3, [r7, #24]
 80046c4:	1ad3      	subs	r3, r2, r3
 80046c6:	69fa      	ldr	r2, [r7, #28]
 80046c8:	429a      	cmp	r2, r3
 80046ca:	d902      	bls.n	80046d2 <SPI_WaitFlagStateUntilTimeout+0x56>
 80046cc:	69fb      	ldr	r3, [r7, #28]
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d13d      	bne.n	800474e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	685a      	ldr	r2, [r3, #4]
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80046e0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	685b      	ldr	r3, [r3, #4]
 80046e6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80046ea:	d111      	bne.n	8004710 <SPI_WaitFlagStateUntilTimeout+0x94>
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	689b      	ldr	r3, [r3, #8]
 80046f0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80046f4:	d004      	beq.n	8004700 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	689b      	ldr	r3, [r3, #8]
 80046fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80046fe:	d107      	bne.n	8004710 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	681a      	ldr	r2, [r3, #0]
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800470e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004714:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004718:	d10f      	bne.n	800473a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	681a      	ldr	r2, [r3, #0]
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004728:	601a      	str	r2, [r3, #0]
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	681a      	ldr	r2, [r3, #0]
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004738:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	2201      	movs	r2, #1
 800473e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	2200      	movs	r2, #0
 8004746:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800474a:	2303      	movs	r3, #3
 800474c:	e017      	b.n	800477e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800474e:	697b      	ldr	r3, [r7, #20]
 8004750:	2b00      	cmp	r3, #0
 8004752:	d101      	bne.n	8004758 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004754:	2300      	movs	r3, #0
 8004756:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004758:	697b      	ldr	r3, [r7, #20]
 800475a:	3b01      	subs	r3, #1
 800475c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	689a      	ldr	r2, [r3, #8]
 8004764:	68bb      	ldr	r3, [r7, #8]
 8004766:	4013      	ands	r3, r2
 8004768:	68ba      	ldr	r2, [r7, #8]
 800476a:	429a      	cmp	r2, r3
 800476c:	bf0c      	ite	eq
 800476e:	2301      	moveq	r3, #1
 8004770:	2300      	movne	r3, #0
 8004772:	b2db      	uxtb	r3, r3
 8004774:	461a      	mov	r2, r3
 8004776:	79fb      	ldrb	r3, [r7, #7]
 8004778:	429a      	cmp	r2, r3
 800477a:	d19b      	bne.n	80046b4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800477c:	2300      	movs	r3, #0
}
 800477e:	4618      	mov	r0, r3
 8004780:	3720      	adds	r7, #32
 8004782:	46bd      	mov	sp, r7
 8004784:	bd80      	pop	{r7, pc}
 8004786:	bf00      	nop
 8004788:	20000008 	.word	0x20000008

0800478c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800478c:	b580      	push	{r7, lr}
 800478e:	b086      	sub	sp, #24
 8004790:	af02      	add	r7, sp, #8
 8004792:	60f8      	str	r0, [r7, #12]
 8004794:	60b9      	str	r1, [r7, #8]
 8004796:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	685b      	ldr	r3, [r3, #4]
 800479c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80047a0:	d111      	bne.n	80047c6 <SPI_EndRxTransaction+0x3a>
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	689b      	ldr	r3, [r3, #8]
 80047a6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80047aa:	d004      	beq.n	80047b6 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	689b      	ldr	r3, [r3, #8]
 80047b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80047b4:	d107      	bne.n	80047c6 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	681a      	ldr	r2, [r3, #0]
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80047c4:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	685b      	ldr	r3, [r3, #4]
 80047ca:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80047ce:	d12a      	bne.n	8004826 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	689b      	ldr	r3, [r3, #8]
 80047d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80047d8:	d012      	beq.n	8004800 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	9300      	str	r3, [sp, #0]
 80047de:	68bb      	ldr	r3, [r7, #8]
 80047e0:	2200      	movs	r2, #0
 80047e2:	2180      	movs	r1, #128	; 0x80
 80047e4:	68f8      	ldr	r0, [r7, #12]
 80047e6:	f7ff ff49 	bl	800467c <SPI_WaitFlagStateUntilTimeout>
 80047ea:	4603      	mov	r3, r0
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d02d      	beq.n	800484c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047f4:	f043 0220 	orr.w	r2, r3, #32
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80047fc:	2303      	movs	r3, #3
 80047fe:	e026      	b.n	800484e <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	9300      	str	r3, [sp, #0]
 8004804:	68bb      	ldr	r3, [r7, #8]
 8004806:	2200      	movs	r2, #0
 8004808:	2101      	movs	r1, #1
 800480a:	68f8      	ldr	r0, [r7, #12]
 800480c:	f7ff ff36 	bl	800467c <SPI_WaitFlagStateUntilTimeout>
 8004810:	4603      	mov	r3, r0
 8004812:	2b00      	cmp	r3, #0
 8004814:	d01a      	beq.n	800484c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800481a:	f043 0220 	orr.w	r2, r3, #32
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8004822:	2303      	movs	r3, #3
 8004824:	e013      	b.n	800484e <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	9300      	str	r3, [sp, #0]
 800482a:	68bb      	ldr	r3, [r7, #8]
 800482c:	2200      	movs	r2, #0
 800482e:	2101      	movs	r1, #1
 8004830:	68f8      	ldr	r0, [r7, #12]
 8004832:	f7ff ff23 	bl	800467c <SPI_WaitFlagStateUntilTimeout>
 8004836:	4603      	mov	r3, r0
 8004838:	2b00      	cmp	r3, #0
 800483a:	d007      	beq.n	800484c <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004840:	f043 0220 	orr.w	r2, r3, #32
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004848:	2303      	movs	r3, #3
 800484a:	e000      	b.n	800484e <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800484c:	2300      	movs	r3, #0
}
 800484e:	4618      	mov	r0, r3
 8004850:	3710      	adds	r7, #16
 8004852:	46bd      	mov	sp, r7
 8004854:	bd80      	pop	{r7, pc}
	...

08004858 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004858:	b580      	push	{r7, lr}
 800485a:	b088      	sub	sp, #32
 800485c:	af02      	add	r7, sp, #8
 800485e:	60f8      	str	r0, [r7, #12]
 8004860:	60b9      	str	r1, [r7, #8]
 8004862:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004864:	4b1b      	ldr	r3, [pc, #108]	; (80048d4 <SPI_EndRxTxTransaction+0x7c>)
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	4a1b      	ldr	r2, [pc, #108]	; (80048d8 <SPI_EndRxTxTransaction+0x80>)
 800486a:	fba2 2303 	umull	r2, r3, r2, r3
 800486e:	0d5b      	lsrs	r3, r3, #21
 8004870:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004874:	fb02 f303 	mul.w	r3, r2, r3
 8004878:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	685b      	ldr	r3, [r3, #4]
 800487e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004882:	d112      	bne.n	80048aa <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	9300      	str	r3, [sp, #0]
 8004888:	68bb      	ldr	r3, [r7, #8]
 800488a:	2200      	movs	r2, #0
 800488c:	2180      	movs	r1, #128	; 0x80
 800488e:	68f8      	ldr	r0, [r7, #12]
 8004890:	f7ff fef4 	bl	800467c <SPI_WaitFlagStateUntilTimeout>
 8004894:	4603      	mov	r3, r0
 8004896:	2b00      	cmp	r3, #0
 8004898:	d016      	beq.n	80048c8 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800489e:	f043 0220 	orr.w	r2, r3, #32
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80048a6:	2303      	movs	r3, #3
 80048a8:	e00f      	b.n	80048ca <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80048aa:	697b      	ldr	r3, [r7, #20]
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d00a      	beq.n	80048c6 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80048b0:	697b      	ldr	r3, [r7, #20]
 80048b2:	3b01      	subs	r3, #1
 80048b4:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	689b      	ldr	r3, [r3, #8]
 80048bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048c0:	2b80      	cmp	r3, #128	; 0x80
 80048c2:	d0f2      	beq.n	80048aa <SPI_EndRxTxTransaction+0x52>
 80048c4:	e000      	b.n	80048c8 <SPI_EndRxTxTransaction+0x70>
        break;
 80048c6:	bf00      	nop
  }

  return HAL_OK;
 80048c8:	2300      	movs	r3, #0
}
 80048ca:	4618      	mov	r0, r3
 80048cc:	3718      	adds	r7, #24
 80048ce:	46bd      	mov	sp, r7
 80048d0:	bd80      	pop	{r7, pc}
 80048d2:	bf00      	nop
 80048d4:	20000008 	.word	0x20000008
 80048d8:	165e9f81 	.word	0x165e9f81

080048dc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80048dc:	b580      	push	{r7, lr}
 80048de:	b082      	sub	sp, #8
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d101      	bne.n	80048ee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80048ea:	2301      	movs	r3, #1
 80048ec:	e03f      	b.n	800496e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048f4:	b2db      	uxtb	r3, r3
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d106      	bne.n	8004908 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	2200      	movs	r2, #0
 80048fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004902:	6878      	ldr	r0, [r7, #4]
 8004904:	f7fc fdf4 	bl	80014f0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	2224      	movs	r2, #36	; 0x24
 800490c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	68da      	ldr	r2, [r3, #12]
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800491e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004920:	6878      	ldr	r0, [r7, #4]
 8004922:	f000 fe81 	bl	8005628 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	691a      	ldr	r2, [r3, #16]
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004934:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	695a      	ldr	r2, [r3, #20]
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004944:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	68da      	ldr	r2, [r3, #12]
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004954:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	2200      	movs	r2, #0
 800495a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	2220      	movs	r2, #32
 8004960:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	2220      	movs	r2, #32
 8004968:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800496c:	2300      	movs	r3, #0
}
 800496e:	4618      	mov	r0, r3
 8004970:	3708      	adds	r7, #8
 8004972:	46bd      	mov	sp, r7
 8004974:	bd80      	pop	{r7, pc}

08004976 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004976:	b580      	push	{r7, lr}
 8004978:	b08a      	sub	sp, #40	; 0x28
 800497a:	af02      	add	r7, sp, #8
 800497c:	60f8      	str	r0, [r7, #12]
 800497e:	60b9      	str	r1, [r7, #8]
 8004980:	603b      	str	r3, [r7, #0]
 8004982:	4613      	mov	r3, r2
 8004984:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004986:	2300      	movs	r3, #0
 8004988:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004990:	b2db      	uxtb	r3, r3
 8004992:	2b20      	cmp	r3, #32
 8004994:	d17c      	bne.n	8004a90 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004996:	68bb      	ldr	r3, [r7, #8]
 8004998:	2b00      	cmp	r3, #0
 800499a:	d002      	beq.n	80049a2 <HAL_UART_Transmit+0x2c>
 800499c:	88fb      	ldrh	r3, [r7, #6]
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d101      	bne.n	80049a6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80049a2:	2301      	movs	r3, #1
 80049a4:	e075      	b.n	8004a92 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80049ac:	2b01      	cmp	r3, #1
 80049ae:	d101      	bne.n	80049b4 <HAL_UART_Transmit+0x3e>
 80049b0:	2302      	movs	r3, #2
 80049b2:	e06e      	b.n	8004a92 <HAL_UART_Transmit+0x11c>
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	2201      	movs	r2, #1
 80049b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	2200      	movs	r2, #0
 80049c0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	2221      	movs	r2, #33	; 0x21
 80049c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80049ca:	f7fc ff59 	bl	8001880 <HAL_GetTick>
 80049ce:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	88fa      	ldrh	r2, [r7, #6]
 80049d4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	88fa      	ldrh	r2, [r7, #6]
 80049da:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	689b      	ldr	r3, [r3, #8]
 80049e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80049e4:	d108      	bne.n	80049f8 <HAL_UART_Transmit+0x82>
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	691b      	ldr	r3, [r3, #16]
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d104      	bne.n	80049f8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80049ee:	2300      	movs	r3, #0
 80049f0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80049f2:	68bb      	ldr	r3, [r7, #8]
 80049f4:	61bb      	str	r3, [r7, #24]
 80049f6:	e003      	b.n	8004a00 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80049f8:	68bb      	ldr	r3, [r7, #8]
 80049fa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80049fc:	2300      	movs	r3, #0
 80049fe:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	2200      	movs	r2, #0
 8004a04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004a08:	e02a      	b.n	8004a60 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004a0a:	683b      	ldr	r3, [r7, #0]
 8004a0c:	9300      	str	r3, [sp, #0]
 8004a0e:	697b      	ldr	r3, [r7, #20]
 8004a10:	2200      	movs	r2, #0
 8004a12:	2180      	movs	r1, #128	; 0x80
 8004a14:	68f8      	ldr	r0, [r7, #12]
 8004a16:	f000 fbc1 	bl	800519c <UART_WaitOnFlagUntilTimeout>
 8004a1a:	4603      	mov	r3, r0
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d001      	beq.n	8004a24 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004a20:	2303      	movs	r3, #3
 8004a22:	e036      	b.n	8004a92 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004a24:	69fb      	ldr	r3, [r7, #28]
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d10b      	bne.n	8004a42 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004a2a:	69bb      	ldr	r3, [r7, #24]
 8004a2c:	881b      	ldrh	r3, [r3, #0]
 8004a2e:	461a      	mov	r2, r3
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004a38:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004a3a:	69bb      	ldr	r3, [r7, #24]
 8004a3c:	3302      	adds	r3, #2
 8004a3e:	61bb      	str	r3, [r7, #24]
 8004a40:	e007      	b.n	8004a52 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004a42:	69fb      	ldr	r3, [r7, #28]
 8004a44:	781a      	ldrb	r2, [r3, #0]
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004a4c:	69fb      	ldr	r3, [r7, #28]
 8004a4e:	3301      	adds	r3, #1
 8004a50:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004a56:	b29b      	uxth	r3, r3
 8004a58:	3b01      	subs	r3, #1
 8004a5a:	b29a      	uxth	r2, r3
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004a64:	b29b      	uxth	r3, r3
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d1cf      	bne.n	8004a0a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004a6a:	683b      	ldr	r3, [r7, #0]
 8004a6c:	9300      	str	r3, [sp, #0]
 8004a6e:	697b      	ldr	r3, [r7, #20]
 8004a70:	2200      	movs	r2, #0
 8004a72:	2140      	movs	r1, #64	; 0x40
 8004a74:	68f8      	ldr	r0, [r7, #12]
 8004a76:	f000 fb91 	bl	800519c <UART_WaitOnFlagUntilTimeout>
 8004a7a:	4603      	mov	r3, r0
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d001      	beq.n	8004a84 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004a80:	2303      	movs	r3, #3
 8004a82:	e006      	b.n	8004a92 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	2220      	movs	r2, #32
 8004a88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004a8c:	2300      	movs	r3, #0
 8004a8e:	e000      	b.n	8004a92 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004a90:	2302      	movs	r3, #2
  }
}
 8004a92:	4618      	mov	r0, r3
 8004a94:	3720      	adds	r7, #32
 8004a96:	46bd      	mov	sp, r7
 8004a98:	bd80      	pop	{r7, pc}

08004a9a <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004a9a:	b580      	push	{r7, lr}
 8004a9c:	b08a      	sub	sp, #40	; 0x28
 8004a9e:	af02      	add	r7, sp, #8
 8004aa0:	60f8      	str	r0, [r7, #12]
 8004aa2:	60b9      	str	r1, [r7, #8]
 8004aa4:	603b      	str	r3, [r7, #0]
 8004aa6:	4613      	mov	r3, r2
 8004aa8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004aaa:	2300      	movs	r3, #0
 8004aac:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004ab4:	b2db      	uxtb	r3, r3
 8004ab6:	2b20      	cmp	r3, #32
 8004ab8:	f040 808c 	bne.w	8004bd4 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004abc:	68bb      	ldr	r3, [r7, #8]
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d002      	beq.n	8004ac8 <HAL_UART_Receive+0x2e>
 8004ac2:	88fb      	ldrh	r3, [r7, #6]
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d101      	bne.n	8004acc <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8004ac8:	2301      	movs	r3, #1
 8004aca:	e084      	b.n	8004bd6 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ad2:	2b01      	cmp	r3, #1
 8004ad4:	d101      	bne.n	8004ada <HAL_UART_Receive+0x40>
 8004ad6:	2302      	movs	r3, #2
 8004ad8:	e07d      	b.n	8004bd6 <HAL_UART_Receive+0x13c>
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	2201      	movs	r2, #1
 8004ade:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	2200      	movs	r2, #0
 8004ae6:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	2222      	movs	r2, #34	; 0x22
 8004aec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	2200      	movs	r2, #0
 8004af4:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004af6:	f7fc fec3 	bl	8001880 <HAL_GetTick>
 8004afa:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	88fa      	ldrh	r2, [r7, #6]
 8004b00:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	88fa      	ldrh	r2, [r7, #6]
 8004b06:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	689b      	ldr	r3, [r3, #8]
 8004b0c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b10:	d108      	bne.n	8004b24 <HAL_UART_Receive+0x8a>
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	691b      	ldr	r3, [r3, #16]
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d104      	bne.n	8004b24 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8004b1a:	2300      	movs	r3, #0
 8004b1c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004b1e:	68bb      	ldr	r3, [r7, #8]
 8004b20:	61bb      	str	r3, [r7, #24]
 8004b22:	e003      	b.n	8004b2c <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8004b24:	68bb      	ldr	r3, [r7, #8]
 8004b26:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004b28:	2300      	movs	r3, #0
 8004b2a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	2200      	movs	r2, #0
 8004b30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8004b34:	e043      	b.n	8004bbe <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8004b36:	683b      	ldr	r3, [r7, #0]
 8004b38:	9300      	str	r3, [sp, #0]
 8004b3a:	697b      	ldr	r3, [r7, #20]
 8004b3c:	2200      	movs	r2, #0
 8004b3e:	2120      	movs	r1, #32
 8004b40:	68f8      	ldr	r0, [r7, #12]
 8004b42:	f000 fb2b 	bl	800519c <UART_WaitOnFlagUntilTimeout>
 8004b46:	4603      	mov	r3, r0
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d001      	beq.n	8004b50 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8004b4c:	2303      	movs	r3, #3
 8004b4e:	e042      	b.n	8004bd6 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8004b50:	69fb      	ldr	r3, [r7, #28]
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d10c      	bne.n	8004b70 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	685b      	ldr	r3, [r3, #4]
 8004b5c:	b29b      	uxth	r3, r3
 8004b5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b62:	b29a      	uxth	r2, r3
 8004b64:	69bb      	ldr	r3, [r7, #24]
 8004b66:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8004b68:	69bb      	ldr	r3, [r7, #24]
 8004b6a:	3302      	adds	r3, #2
 8004b6c:	61bb      	str	r3, [r7, #24]
 8004b6e:	e01f      	b.n	8004bb0 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	689b      	ldr	r3, [r3, #8]
 8004b74:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b78:	d007      	beq.n	8004b8a <HAL_UART_Receive+0xf0>
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	689b      	ldr	r3, [r3, #8]
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d10a      	bne.n	8004b98 <HAL_UART_Receive+0xfe>
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	691b      	ldr	r3, [r3, #16]
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d106      	bne.n	8004b98 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	685b      	ldr	r3, [r3, #4]
 8004b90:	b2da      	uxtb	r2, r3
 8004b92:	69fb      	ldr	r3, [r7, #28]
 8004b94:	701a      	strb	r2, [r3, #0]
 8004b96:	e008      	b.n	8004baa <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	685b      	ldr	r3, [r3, #4]
 8004b9e:	b2db      	uxtb	r3, r3
 8004ba0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004ba4:	b2da      	uxtb	r2, r3
 8004ba6:	69fb      	ldr	r3, [r7, #28]
 8004ba8:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8004baa:	69fb      	ldr	r3, [r7, #28]
 8004bac:	3301      	adds	r3, #1
 8004bae:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004bb4:	b29b      	uxth	r3, r3
 8004bb6:	3b01      	subs	r3, #1
 8004bb8:	b29a      	uxth	r2, r3
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004bc2:	b29b      	uxth	r3, r3
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d1b6      	bne.n	8004b36 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	2220      	movs	r2, #32
 8004bcc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8004bd0:	2300      	movs	r3, #0
 8004bd2:	e000      	b.n	8004bd6 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8004bd4:	2302      	movs	r3, #2
  }
}
 8004bd6:	4618      	mov	r0, r3
 8004bd8:	3720      	adds	r7, #32
 8004bda:	46bd      	mov	sp, r7
 8004bdc:	bd80      	pop	{r7, pc}

08004bde <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004bde:	b580      	push	{r7, lr}
 8004be0:	b084      	sub	sp, #16
 8004be2:	af00      	add	r7, sp, #0
 8004be4:	60f8      	str	r0, [r7, #12]
 8004be6:	60b9      	str	r1, [r7, #8]
 8004be8:	4613      	mov	r3, r2
 8004bea:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004bf2:	b2db      	uxtb	r3, r3
 8004bf4:	2b20      	cmp	r3, #32
 8004bf6:	d11d      	bne.n	8004c34 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8004bf8:	68bb      	ldr	r3, [r7, #8]
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d002      	beq.n	8004c04 <HAL_UART_Receive_IT+0x26>
 8004bfe:	88fb      	ldrh	r3, [r7, #6]
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d101      	bne.n	8004c08 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004c04:	2301      	movs	r3, #1
 8004c06:	e016      	b.n	8004c36 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c0e:	2b01      	cmp	r3, #1
 8004c10:	d101      	bne.n	8004c16 <HAL_UART_Receive_IT+0x38>
 8004c12:	2302      	movs	r3, #2
 8004c14:	e00f      	b.n	8004c36 <HAL_UART_Receive_IT+0x58>
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	2201      	movs	r2, #1
 8004c1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	2200      	movs	r2, #0
 8004c22:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004c24:	88fb      	ldrh	r3, [r7, #6]
 8004c26:	461a      	mov	r2, r3
 8004c28:	68b9      	ldr	r1, [r7, #8]
 8004c2a:	68f8      	ldr	r0, [r7, #12]
 8004c2c:	f000 fb24 	bl	8005278 <UART_Start_Receive_IT>
 8004c30:	4603      	mov	r3, r0
 8004c32:	e000      	b.n	8004c36 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8004c34:	2302      	movs	r3, #2
  }
}
 8004c36:	4618      	mov	r0, r3
 8004c38:	3710      	adds	r7, #16
 8004c3a:	46bd      	mov	sp, r7
 8004c3c:	bd80      	pop	{r7, pc}
	...

08004c40 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004c40:	b580      	push	{r7, lr}
 8004c42:	b0ba      	sub	sp, #232	; 0xe8
 8004c44:	af00      	add	r7, sp, #0
 8004c46:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	68db      	ldr	r3, [r3, #12]
 8004c58:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	695b      	ldr	r3, [r3, #20]
 8004c62:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8004c66:	2300      	movs	r3, #0
 8004c68:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8004c6c:	2300      	movs	r3, #0
 8004c6e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004c72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c76:	f003 030f 	and.w	r3, r3, #15
 8004c7a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8004c7e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d10f      	bne.n	8004ca6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004c86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c8a:	f003 0320 	and.w	r3, r3, #32
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d009      	beq.n	8004ca6 <HAL_UART_IRQHandler+0x66>
 8004c92:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004c96:	f003 0320 	and.w	r3, r3, #32
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d003      	beq.n	8004ca6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004c9e:	6878      	ldr	r0, [r7, #4]
 8004ca0:	f000 fc07 	bl	80054b2 <UART_Receive_IT>
      return;
 8004ca4:	e256      	b.n	8005154 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004ca6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	f000 80de 	beq.w	8004e6c <HAL_UART_IRQHandler+0x22c>
 8004cb0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004cb4:	f003 0301 	and.w	r3, r3, #1
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d106      	bne.n	8004cca <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004cbc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004cc0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	f000 80d1 	beq.w	8004e6c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004cca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004cce:	f003 0301 	and.w	r3, r3, #1
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d00b      	beq.n	8004cee <HAL_UART_IRQHandler+0xae>
 8004cd6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004cda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d005      	beq.n	8004cee <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ce6:	f043 0201 	orr.w	r2, r3, #1
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004cee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004cf2:	f003 0304 	and.w	r3, r3, #4
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d00b      	beq.n	8004d12 <HAL_UART_IRQHandler+0xd2>
 8004cfa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004cfe:	f003 0301 	and.w	r3, r3, #1
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d005      	beq.n	8004d12 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d0a:	f043 0202 	orr.w	r2, r3, #2
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004d12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d16:	f003 0302 	and.w	r3, r3, #2
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d00b      	beq.n	8004d36 <HAL_UART_IRQHandler+0xf6>
 8004d1e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004d22:	f003 0301 	and.w	r3, r3, #1
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d005      	beq.n	8004d36 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d2e:	f043 0204 	orr.w	r2, r3, #4
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004d36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d3a:	f003 0308 	and.w	r3, r3, #8
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d011      	beq.n	8004d66 <HAL_UART_IRQHandler+0x126>
 8004d42:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004d46:	f003 0320 	and.w	r3, r3, #32
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d105      	bne.n	8004d5a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004d4e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004d52:	f003 0301 	and.w	r3, r3, #1
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d005      	beq.n	8004d66 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d5e:	f043 0208 	orr.w	r2, r3, #8
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	f000 81ed 	beq.w	800514a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004d70:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d74:	f003 0320 	and.w	r3, r3, #32
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d008      	beq.n	8004d8e <HAL_UART_IRQHandler+0x14e>
 8004d7c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004d80:	f003 0320 	and.w	r3, r3, #32
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d002      	beq.n	8004d8e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004d88:	6878      	ldr	r0, [r7, #4]
 8004d8a:	f000 fb92 	bl	80054b2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	695b      	ldr	r3, [r3, #20]
 8004d94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d98:	2b40      	cmp	r3, #64	; 0x40
 8004d9a:	bf0c      	ite	eq
 8004d9c:	2301      	moveq	r3, #1
 8004d9e:	2300      	movne	r3, #0
 8004da0:	b2db      	uxtb	r3, r3
 8004da2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004daa:	f003 0308 	and.w	r3, r3, #8
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d103      	bne.n	8004dba <HAL_UART_IRQHandler+0x17a>
 8004db2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d04f      	beq.n	8004e5a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004dba:	6878      	ldr	r0, [r7, #4]
 8004dbc:	f000 fa9a 	bl	80052f4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	695b      	ldr	r3, [r3, #20]
 8004dc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004dca:	2b40      	cmp	r3, #64	; 0x40
 8004dcc:	d141      	bne.n	8004e52 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	3314      	adds	r3, #20
 8004dd4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dd8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004ddc:	e853 3f00 	ldrex	r3, [r3]
 8004de0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004de4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004de8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004dec:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	3314      	adds	r3, #20
 8004df6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004dfa:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004dfe:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e02:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004e06:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004e0a:	e841 2300 	strex	r3, r2, [r1]
 8004e0e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004e12:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d1d9      	bne.n	8004dce <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d013      	beq.n	8004e4a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e26:	4a7d      	ldr	r2, [pc, #500]	; (800501c <HAL_UART_IRQHandler+0x3dc>)
 8004e28:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e2e:	4618      	mov	r0, r3
 8004e30:	f7fc fed7 	bl	8001be2 <HAL_DMA_Abort_IT>
 8004e34:	4603      	mov	r3, r0
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d016      	beq.n	8004e68 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e3e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e40:	687a      	ldr	r2, [r7, #4]
 8004e42:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004e44:	4610      	mov	r0, r2
 8004e46:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e48:	e00e      	b.n	8004e68 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004e4a:	6878      	ldr	r0, [r7, #4]
 8004e4c:	f000 f990 	bl	8005170 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e50:	e00a      	b.n	8004e68 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004e52:	6878      	ldr	r0, [r7, #4]
 8004e54:	f000 f98c 	bl	8005170 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e58:	e006      	b.n	8004e68 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004e5a:	6878      	ldr	r0, [r7, #4]
 8004e5c:	f000 f988 	bl	8005170 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	2200      	movs	r2, #0
 8004e64:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8004e66:	e170      	b.n	800514a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e68:	bf00      	nop
    return;
 8004e6a:	e16e      	b.n	800514a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e70:	2b01      	cmp	r3, #1
 8004e72:	f040 814a 	bne.w	800510a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004e76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004e7a:	f003 0310 	and.w	r3, r3, #16
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	f000 8143 	beq.w	800510a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004e84:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004e88:	f003 0310 	and.w	r3, r3, #16
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	f000 813c 	beq.w	800510a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004e92:	2300      	movs	r3, #0
 8004e94:	60bb      	str	r3, [r7, #8]
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	60bb      	str	r3, [r7, #8]
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	685b      	ldr	r3, [r3, #4]
 8004ea4:	60bb      	str	r3, [r7, #8]
 8004ea6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	695b      	ldr	r3, [r3, #20]
 8004eae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004eb2:	2b40      	cmp	r3, #64	; 0x40
 8004eb4:	f040 80b4 	bne.w	8005020 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	685b      	ldr	r3, [r3, #4]
 8004ec0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004ec4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	f000 8140 	beq.w	800514e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004ed2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004ed6:	429a      	cmp	r2, r3
 8004ed8:	f080 8139 	bcs.w	800514e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004ee2:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ee8:	69db      	ldr	r3, [r3, #28]
 8004eea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004eee:	f000 8088 	beq.w	8005002 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	330c      	adds	r3, #12
 8004ef8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004efc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004f00:	e853 3f00 	ldrex	r3, [r3]
 8004f04:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004f08:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004f0c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004f10:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	330c      	adds	r3, #12
 8004f1a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8004f1e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004f22:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f26:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004f2a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004f2e:	e841 2300 	strex	r3, r2, [r1]
 8004f32:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004f36:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d1d9      	bne.n	8004ef2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	3314      	adds	r3, #20
 8004f44:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f46:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004f48:	e853 3f00 	ldrex	r3, [r3]
 8004f4c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004f4e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004f50:	f023 0301 	bic.w	r3, r3, #1
 8004f54:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	3314      	adds	r3, #20
 8004f5e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004f62:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004f66:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f68:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004f6a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004f6e:	e841 2300 	strex	r3, r2, [r1]
 8004f72:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004f74:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d1e1      	bne.n	8004f3e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	3314      	adds	r3, #20
 8004f80:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f82:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004f84:	e853 3f00 	ldrex	r3, [r3]
 8004f88:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004f8a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004f8c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004f90:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	3314      	adds	r3, #20
 8004f9a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004f9e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004fa0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fa2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004fa4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004fa6:	e841 2300 	strex	r3, r2, [r1]
 8004faa:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004fac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d1e3      	bne.n	8004f7a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	2220      	movs	r2, #32
 8004fb6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	2200      	movs	r2, #0
 8004fbe:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	330c      	adds	r3, #12
 8004fc6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fc8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004fca:	e853 3f00 	ldrex	r3, [r3]
 8004fce:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004fd0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004fd2:	f023 0310 	bic.w	r3, r3, #16
 8004fd6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	330c      	adds	r3, #12
 8004fe0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004fe4:	65ba      	str	r2, [r7, #88]	; 0x58
 8004fe6:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fe8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004fea:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004fec:	e841 2300 	strex	r3, r2, [r1]
 8004ff0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004ff2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d1e3      	bne.n	8004fc0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ffc:	4618      	mov	r0, r3
 8004ffe:	f7fc fd80 	bl	8001b02 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800500a:	b29b      	uxth	r3, r3
 800500c:	1ad3      	subs	r3, r2, r3
 800500e:	b29b      	uxth	r3, r3
 8005010:	4619      	mov	r1, r3
 8005012:	6878      	ldr	r0, [r7, #4]
 8005014:	f000 f8b6 	bl	8005184 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005018:	e099      	b.n	800514e <HAL_UART_IRQHandler+0x50e>
 800501a:	bf00      	nop
 800501c:	080053bb 	.word	0x080053bb
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005028:	b29b      	uxth	r3, r3
 800502a:	1ad3      	subs	r3, r2, r3
 800502c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005034:	b29b      	uxth	r3, r3
 8005036:	2b00      	cmp	r3, #0
 8005038:	f000 808b 	beq.w	8005152 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800503c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005040:	2b00      	cmp	r3, #0
 8005042:	f000 8086 	beq.w	8005152 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	330c      	adds	r3, #12
 800504c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800504e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005050:	e853 3f00 	ldrex	r3, [r3]
 8005054:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005056:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005058:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800505c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	330c      	adds	r3, #12
 8005066:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800506a:	647a      	str	r2, [r7, #68]	; 0x44
 800506c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800506e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005070:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005072:	e841 2300 	strex	r3, r2, [r1]
 8005076:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005078:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800507a:	2b00      	cmp	r3, #0
 800507c:	d1e3      	bne.n	8005046 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	3314      	adds	r3, #20
 8005084:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005088:	e853 3f00 	ldrex	r3, [r3]
 800508c:	623b      	str	r3, [r7, #32]
   return(result);
 800508e:	6a3b      	ldr	r3, [r7, #32]
 8005090:	f023 0301 	bic.w	r3, r3, #1
 8005094:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	3314      	adds	r3, #20
 800509e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80050a2:	633a      	str	r2, [r7, #48]	; 0x30
 80050a4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050a6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80050a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80050aa:	e841 2300 	strex	r3, r2, [r1]
 80050ae:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80050b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d1e3      	bne.n	800507e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	2220      	movs	r2, #32
 80050ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	2200      	movs	r2, #0
 80050c2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	330c      	adds	r3, #12
 80050ca:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050cc:	693b      	ldr	r3, [r7, #16]
 80050ce:	e853 3f00 	ldrex	r3, [r3]
 80050d2:	60fb      	str	r3, [r7, #12]
   return(result);
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	f023 0310 	bic.w	r3, r3, #16
 80050da:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	330c      	adds	r3, #12
 80050e4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80050e8:	61fa      	str	r2, [r7, #28]
 80050ea:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050ec:	69b9      	ldr	r1, [r7, #24]
 80050ee:	69fa      	ldr	r2, [r7, #28]
 80050f0:	e841 2300 	strex	r3, r2, [r1]
 80050f4:	617b      	str	r3, [r7, #20]
   return(result);
 80050f6:	697b      	ldr	r3, [r7, #20]
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d1e3      	bne.n	80050c4 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80050fc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005100:	4619      	mov	r1, r3
 8005102:	6878      	ldr	r0, [r7, #4]
 8005104:	f000 f83e 	bl	8005184 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005108:	e023      	b.n	8005152 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800510a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800510e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005112:	2b00      	cmp	r3, #0
 8005114:	d009      	beq.n	800512a <HAL_UART_IRQHandler+0x4ea>
 8005116:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800511a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800511e:	2b00      	cmp	r3, #0
 8005120:	d003      	beq.n	800512a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8005122:	6878      	ldr	r0, [r7, #4]
 8005124:	f000 f95d 	bl	80053e2 <UART_Transmit_IT>
    return;
 8005128:	e014      	b.n	8005154 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800512a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800512e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005132:	2b00      	cmp	r3, #0
 8005134:	d00e      	beq.n	8005154 <HAL_UART_IRQHandler+0x514>
 8005136:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800513a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800513e:	2b00      	cmp	r3, #0
 8005140:	d008      	beq.n	8005154 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8005142:	6878      	ldr	r0, [r7, #4]
 8005144:	f000 f99d 	bl	8005482 <UART_EndTransmit_IT>
    return;
 8005148:	e004      	b.n	8005154 <HAL_UART_IRQHandler+0x514>
    return;
 800514a:	bf00      	nop
 800514c:	e002      	b.n	8005154 <HAL_UART_IRQHandler+0x514>
      return;
 800514e:	bf00      	nop
 8005150:	e000      	b.n	8005154 <HAL_UART_IRQHandler+0x514>
      return;
 8005152:	bf00      	nop
  }
}
 8005154:	37e8      	adds	r7, #232	; 0xe8
 8005156:	46bd      	mov	sp, r7
 8005158:	bd80      	pop	{r7, pc}
 800515a:	bf00      	nop

0800515c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800515c:	b480      	push	{r7}
 800515e:	b083      	sub	sp, #12
 8005160:	af00      	add	r7, sp, #0
 8005162:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005164:	bf00      	nop
 8005166:	370c      	adds	r7, #12
 8005168:	46bd      	mov	sp, r7
 800516a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800516e:	4770      	bx	lr

08005170 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005170:	b480      	push	{r7}
 8005172:	b083      	sub	sp, #12
 8005174:	af00      	add	r7, sp, #0
 8005176:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005178:	bf00      	nop
 800517a:	370c      	adds	r7, #12
 800517c:	46bd      	mov	sp, r7
 800517e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005182:	4770      	bx	lr

08005184 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005184:	b480      	push	{r7}
 8005186:	b083      	sub	sp, #12
 8005188:	af00      	add	r7, sp, #0
 800518a:	6078      	str	r0, [r7, #4]
 800518c:	460b      	mov	r3, r1
 800518e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005190:	bf00      	nop
 8005192:	370c      	adds	r7, #12
 8005194:	46bd      	mov	sp, r7
 8005196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800519a:	4770      	bx	lr

0800519c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800519c:	b580      	push	{r7, lr}
 800519e:	b090      	sub	sp, #64	; 0x40
 80051a0:	af00      	add	r7, sp, #0
 80051a2:	60f8      	str	r0, [r7, #12]
 80051a4:	60b9      	str	r1, [r7, #8]
 80051a6:	603b      	str	r3, [r7, #0]
 80051a8:	4613      	mov	r3, r2
 80051aa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80051ac:	e050      	b.n	8005250 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80051ae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80051b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051b4:	d04c      	beq.n	8005250 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80051b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d007      	beq.n	80051cc <UART_WaitOnFlagUntilTimeout+0x30>
 80051bc:	f7fc fb60 	bl	8001880 <HAL_GetTick>
 80051c0:	4602      	mov	r2, r0
 80051c2:	683b      	ldr	r3, [r7, #0]
 80051c4:	1ad3      	subs	r3, r2, r3
 80051c6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80051c8:	429a      	cmp	r2, r3
 80051ca:	d241      	bcs.n	8005250 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	330c      	adds	r3, #12
 80051d2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051d6:	e853 3f00 	ldrex	r3, [r3]
 80051da:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80051dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051de:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80051e2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	330c      	adds	r3, #12
 80051ea:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80051ec:	637a      	str	r2, [r7, #52]	; 0x34
 80051ee:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051f0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80051f2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80051f4:	e841 2300 	strex	r3, r2, [r1]
 80051f8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80051fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d1e5      	bne.n	80051cc <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	3314      	adds	r3, #20
 8005206:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005208:	697b      	ldr	r3, [r7, #20]
 800520a:	e853 3f00 	ldrex	r3, [r3]
 800520e:	613b      	str	r3, [r7, #16]
   return(result);
 8005210:	693b      	ldr	r3, [r7, #16]
 8005212:	f023 0301 	bic.w	r3, r3, #1
 8005216:	63bb      	str	r3, [r7, #56]	; 0x38
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	3314      	adds	r3, #20
 800521e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005220:	623a      	str	r2, [r7, #32]
 8005222:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005224:	69f9      	ldr	r1, [r7, #28]
 8005226:	6a3a      	ldr	r2, [r7, #32]
 8005228:	e841 2300 	strex	r3, r2, [r1]
 800522c:	61bb      	str	r3, [r7, #24]
   return(result);
 800522e:	69bb      	ldr	r3, [r7, #24]
 8005230:	2b00      	cmp	r3, #0
 8005232:	d1e5      	bne.n	8005200 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	2220      	movs	r2, #32
 8005238:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	2220      	movs	r2, #32
 8005240:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	2200      	movs	r2, #0
 8005248:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800524c:	2303      	movs	r3, #3
 800524e:	e00f      	b.n	8005270 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	681a      	ldr	r2, [r3, #0]
 8005256:	68bb      	ldr	r3, [r7, #8]
 8005258:	4013      	ands	r3, r2
 800525a:	68ba      	ldr	r2, [r7, #8]
 800525c:	429a      	cmp	r2, r3
 800525e:	bf0c      	ite	eq
 8005260:	2301      	moveq	r3, #1
 8005262:	2300      	movne	r3, #0
 8005264:	b2db      	uxtb	r3, r3
 8005266:	461a      	mov	r2, r3
 8005268:	79fb      	ldrb	r3, [r7, #7]
 800526a:	429a      	cmp	r2, r3
 800526c:	d09f      	beq.n	80051ae <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800526e:	2300      	movs	r3, #0
}
 8005270:	4618      	mov	r0, r3
 8005272:	3740      	adds	r7, #64	; 0x40
 8005274:	46bd      	mov	sp, r7
 8005276:	bd80      	pop	{r7, pc}

08005278 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005278:	b480      	push	{r7}
 800527a:	b085      	sub	sp, #20
 800527c:	af00      	add	r7, sp, #0
 800527e:	60f8      	str	r0, [r7, #12]
 8005280:	60b9      	str	r1, [r7, #8]
 8005282:	4613      	mov	r3, r2
 8005284:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	68ba      	ldr	r2, [r7, #8]
 800528a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	88fa      	ldrh	r2, [r7, #6]
 8005290:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	88fa      	ldrh	r2, [r7, #6]
 8005296:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	2200      	movs	r2, #0
 800529c:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	2222      	movs	r2, #34	; 0x22
 80052a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	2200      	movs	r2, #0
 80052aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	691b      	ldr	r3, [r3, #16]
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d007      	beq.n	80052c6 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	68da      	ldr	r2, [r3, #12]
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80052c4:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	695a      	ldr	r2, [r3, #20]
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	f042 0201 	orr.w	r2, r2, #1
 80052d4:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	68da      	ldr	r2, [r3, #12]
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	f042 0220 	orr.w	r2, r2, #32
 80052e4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80052e6:	2300      	movs	r3, #0
}
 80052e8:	4618      	mov	r0, r3
 80052ea:	3714      	adds	r7, #20
 80052ec:	46bd      	mov	sp, r7
 80052ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f2:	4770      	bx	lr

080052f4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80052f4:	b480      	push	{r7}
 80052f6:	b095      	sub	sp, #84	; 0x54
 80052f8:	af00      	add	r7, sp, #0
 80052fa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	330c      	adds	r3, #12
 8005302:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005304:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005306:	e853 3f00 	ldrex	r3, [r3]
 800530a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800530c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800530e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005312:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	330c      	adds	r3, #12
 800531a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800531c:	643a      	str	r2, [r7, #64]	; 0x40
 800531e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005320:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005322:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005324:	e841 2300 	strex	r3, r2, [r1]
 8005328:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800532a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800532c:	2b00      	cmp	r3, #0
 800532e:	d1e5      	bne.n	80052fc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	3314      	adds	r3, #20
 8005336:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005338:	6a3b      	ldr	r3, [r7, #32]
 800533a:	e853 3f00 	ldrex	r3, [r3]
 800533e:	61fb      	str	r3, [r7, #28]
   return(result);
 8005340:	69fb      	ldr	r3, [r7, #28]
 8005342:	f023 0301 	bic.w	r3, r3, #1
 8005346:	64bb      	str	r3, [r7, #72]	; 0x48
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	3314      	adds	r3, #20
 800534e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005350:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005352:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005354:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005356:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005358:	e841 2300 	strex	r3, r2, [r1]
 800535c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800535e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005360:	2b00      	cmp	r3, #0
 8005362:	d1e5      	bne.n	8005330 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005368:	2b01      	cmp	r3, #1
 800536a:	d119      	bne.n	80053a0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	330c      	adds	r3, #12
 8005372:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	e853 3f00 	ldrex	r3, [r3]
 800537a:	60bb      	str	r3, [r7, #8]
   return(result);
 800537c:	68bb      	ldr	r3, [r7, #8]
 800537e:	f023 0310 	bic.w	r3, r3, #16
 8005382:	647b      	str	r3, [r7, #68]	; 0x44
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	330c      	adds	r3, #12
 800538a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800538c:	61ba      	str	r2, [r7, #24]
 800538e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005390:	6979      	ldr	r1, [r7, #20]
 8005392:	69ba      	ldr	r2, [r7, #24]
 8005394:	e841 2300 	strex	r3, r2, [r1]
 8005398:	613b      	str	r3, [r7, #16]
   return(result);
 800539a:	693b      	ldr	r3, [r7, #16]
 800539c:	2b00      	cmp	r3, #0
 800539e:	d1e5      	bne.n	800536c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	2220      	movs	r2, #32
 80053a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	2200      	movs	r2, #0
 80053ac:	631a      	str	r2, [r3, #48]	; 0x30
}
 80053ae:	bf00      	nop
 80053b0:	3754      	adds	r7, #84	; 0x54
 80053b2:	46bd      	mov	sp, r7
 80053b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b8:	4770      	bx	lr

080053ba <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80053ba:	b580      	push	{r7, lr}
 80053bc:	b084      	sub	sp, #16
 80053be:	af00      	add	r7, sp, #0
 80053c0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053c6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	2200      	movs	r2, #0
 80053cc:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	2200      	movs	r2, #0
 80053d2:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80053d4:	68f8      	ldr	r0, [r7, #12]
 80053d6:	f7ff fecb 	bl	8005170 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80053da:	bf00      	nop
 80053dc:	3710      	adds	r7, #16
 80053de:	46bd      	mov	sp, r7
 80053e0:	bd80      	pop	{r7, pc}

080053e2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80053e2:	b480      	push	{r7}
 80053e4:	b085      	sub	sp, #20
 80053e6:	af00      	add	r7, sp, #0
 80053e8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80053f0:	b2db      	uxtb	r3, r3
 80053f2:	2b21      	cmp	r3, #33	; 0x21
 80053f4:	d13e      	bne.n	8005474 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	689b      	ldr	r3, [r3, #8]
 80053fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80053fe:	d114      	bne.n	800542a <UART_Transmit_IT+0x48>
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	691b      	ldr	r3, [r3, #16]
 8005404:	2b00      	cmp	r3, #0
 8005406:	d110      	bne.n	800542a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	6a1b      	ldr	r3, [r3, #32]
 800540c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	881b      	ldrh	r3, [r3, #0]
 8005412:	461a      	mov	r2, r3
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800541c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	6a1b      	ldr	r3, [r3, #32]
 8005422:	1c9a      	adds	r2, r3, #2
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	621a      	str	r2, [r3, #32]
 8005428:	e008      	b.n	800543c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	6a1b      	ldr	r3, [r3, #32]
 800542e:	1c59      	adds	r1, r3, #1
 8005430:	687a      	ldr	r2, [r7, #4]
 8005432:	6211      	str	r1, [r2, #32]
 8005434:	781a      	ldrb	r2, [r3, #0]
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005440:	b29b      	uxth	r3, r3
 8005442:	3b01      	subs	r3, #1
 8005444:	b29b      	uxth	r3, r3
 8005446:	687a      	ldr	r2, [r7, #4]
 8005448:	4619      	mov	r1, r3
 800544a:	84d1      	strh	r1, [r2, #38]	; 0x26
 800544c:	2b00      	cmp	r3, #0
 800544e:	d10f      	bne.n	8005470 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	68da      	ldr	r2, [r3, #12]
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800545e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	68da      	ldr	r2, [r3, #12]
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800546e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005470:	2300      	movs	r3, #0
 8005472:	e000      	b.n	8005476 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005474:	2302      	movs	r3, #2
  }
}
 8005476:	4618      	mov	r0, r3
 8005478:	3714      	adds	r7, #20
 800547a:	46bd      	mov	sp, r7
 800547c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005480:	4770      	bx	lr

08005482 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005482:	b580      	push	{r7, lr}
 8005484:	b082      	sub	sp, #8
 8005486:	af00      	add	r7, sp, #0
 8005488:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	68da      	ldr	r2, [r3, #12]
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005498:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	2220      	movs	r2, #32
 800549e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80054a2:	6878      	ldr	r0, [r7, #4]
 80054a4:	f7ff fe5a 	bl	800515c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80054a8:	2300      	movs	r3, #0
}
 80054aa:	4618      	mov	r0, r3
 80054ac:	3708      	adds	r7, #8
 80054ae:	46bd      	mov	sp, r7
 80054b0:	bd80      	pop	{r7, pc}

080054b2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80054b2:	b580      	push	{r7, lr}
 80054b4:	b08c      	sub	sp, #48	; 0x30
 80054b6:	af00      	add	r7, sp, #0
 80054b8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80054c0:	b2db      	uxtb	r3, r3
 80054c2:	2b22      	cmp	r3, #34	; 0x22
 80054c4:	f040 80ab 	bne.w	800561e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	689b      	ldr	r3, [r3, #8]
 80054cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80054d0:	d117      	bne.n	8005502 <UART_Receive_IT+0x50>
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	691b      	ldr	r3, [r3, #16]
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d113      	bne.n	8005502 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80054da:	2300      	movs	r3, #0
 80054dc:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054e2:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	685b      	ldr	r3, [r3, #4]
 80054ea:	b29b      	uxth	r3, r3
 80054ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80054f0:	b29a      	uxth	r2, r3
 80054f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054f4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054fa:	1c9a      	adds	r2, r3, #2
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	629a      	str	r2, [r3, #40]	; 0x28
 8005500:	e026      	b.n	8005550 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005506:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8005508:	2300      	movs	r3, #0
 800550a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	689b      	ldr	r3, [r3, #8]
 8005510:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005514:	d007      	beq.n	8005526 <UART_Receive_IT+0x74>
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	689b      	ldr	r3, [r3, #8]
 800551a:	2b00      	cmp	r3, #0
 800551c:	d10a      	bne.n	8005534 <UART_Receive_IT+0x82>
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	691b      	ldr	r3, [r3, #16]
 8005522:	2b00      	cmp	r3, #0
 8005524:	d106      	bne.n	8005534 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	685b      	ldr	r3, [r3, #4]
 800552c:	b2da      	uxtb	r2, r3
 800552e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005530:	701a      	strb	r2, [r3, #0]
 8005532:	e008      	b.n	8005546 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	685b      	ldr	r3, [r3, #4]
 800553a:	b2db      	uxtb	r3, r3
 800553c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005540:	b2da      	uxtb	r2, r3
 8005542:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005544:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800554a:	1c5a      	adds	r2, r3, #1
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005554:	b29b      	uxth	r3, r3
 8005556:	3b01      	subs	r3, #1
 8005558:	b29b      	uxth	r3, r3
 800555a:	687a      	ldr	r2, [r7, #4]
 800555c:	4619      	mov	r1, r3
 800555e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005560:	2b00      	cmp	r3, #0
 8005562:	d15a      	bne.n	800561a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	68da      	ldr	r2, [r3, #12]
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	f022 0220 	bic.w	r2, r2, #32
 8005572:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	68da      	ldr	r2, [r3, #12]
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005582:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	695a      	ldr	r2, [r3, #20]
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	f022 0201 	bic.w	r2, r2, #1
 8005592:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	2220      	movs	r2, #32
 8005598:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055a0:	2b01      	cmp	r3, #1
 80055a2:	d135      	bne.n	8005610 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	2200      	movs	r2, #0
 80055a8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	330c      	adds	r3, #12
 80055b0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055b2:	697b      	ldr	r3, [r7, #20]
 80055b4:	e853 3f00 	ldrex	r3, [r3]
 80055b8:	613b      	str	r3, [r7, #16]
   return(result);
 80055ba:	693b      	ldr	r3, [r7, #16]
 80055bc:	f023 0310 	bic.w	r3, r3, #16
 80055c0:	627b      	str	r3, [r7, #36]	; 0x24
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	330c      	adds	r3, #12
 80055c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80055ca:	623a      	str	r2, [r7, #32]
 80055cc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055ce:	69f9      	ldr	r1, [r7, #28]
 80055d0:	6a3a      	ldr	r2, [r7, #32]
 80055d2:	e841 2300 	strex	r3, r2, [r1]
 80055d6:	61bb      	str	r3, [r7, #24]
   return(result);
 80055d8:	69bb      	ldr	r3, [r7, #24]
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d1e5      	bne.n	80055aa <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	f003 0310 	and.w	r3, r3, #16
 80055e8:	2b10      	cmp	r3, #16
 80055ea:	d10a      	bne.n	8005602 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80055ec:	2300      	movs	r3, #0
 80055ee:	60fb      	str	r3, [r7, #12]
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	60fb      	str	r3, [r7, #12]
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	685b      	ldr	r3, [r3, #4]
 80055fe:	60fb      	str	r3, [r7, #12]
 8005600:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005606:	4619      	mov	r1, r3
 8005608:	6878      	ldr	r0, [r7, #4]
 800560a:	f7ff fdbb 	bl	8005184 <HAL_UARTEx_RxEventCallback>
 800560e:	e002      	b.n	8005616 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005610:	6878      	ldr	r0, [r7, #4]
 8005612:	f7fb fe0b 	bl	800122c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005616:	2300      	movs	r3, #0
 8005618:	e002      	b.n	8005620 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800561a:	2300      	movs	r3, #0
 800561c:	e000      	b.n	8005620 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800561e:	2302      	movs	r3, #2
  }
}
 8005620:	4618      	mov	r0, r3
 8005622:	3730      	adds	r7, #48	; 0x30
 8005624:	46bd      	mov	sp, r7
 8005626:	bd80      	pop	{r7, pc}

08005628 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005628:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800562c:	b0c0      	sub	sp, #256	; 0x100
 800562e:	af00      	add	r7, sp, #0
 8005630:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005634:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	691b      	ldr	r3, [r3, #16]
 800563c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005640:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005644:	68d9      	ldr	r1, [r3, #12]
 8005646:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800564a:	681a      	ldr	r2, [r3, #0]
 800564c:	ea40 0301 	orr.w	r3, r0, r1
 8005650:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005652:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005656:	689a      	ldr	r2, [r3, #8]
 8005658:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800565c:	691b      	ldr	r3, [r3, #16]
 800565e:	431a      	orrs	r2, r3
 8005660:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005664:	695b      	ldr	r3, [r3, #20]
 8005666:	431a      	orrs	r2, r3
 8005668:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800566c:	69db      	ldr	r3, [r3, #28]
 800566e:	4313      	orrs	r3, r2
 8005670:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005674:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	68db      	ldr	r3, [r3, #12]
 800567c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005680:	f021 010c 	bic.w	r1, r1, #12
 8005684:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005688:	681a      	ldr	r2, [r3, #0]
 800568a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800568e:	430b      	orrs	r3, r1
 8005690:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005692:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	695b      	ldr	r3, [r3, #20]
 800569a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800569e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80056a2:	6999      	ldr	r1, [r3, #24]
 80056a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80056a8:	681a      	ldr	r2, [r3, #0]
 80056aa:	ea40 0301 	orr.w	r3, r0, r1
 80056ae:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80056b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80056b4:	681a      	ldr	r2, [r3, #0]
 80056b6:	4b8f      	ldr	r3, [pc, #572]	; (80058f4 <UART_SetConfig+0x2cc>)
 80056b8:	429a      	cmp	r2, r3
 80056ba:	d005      	beq.n	80056c8 <UART_SetConfig+0xa0>
 80056bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80056c0:	681a      	ldr	r2, [r3, #0]
 80056c2:	4b8d      	ldr	r3, [pc, #564]	; (80058f8 <UART_SetConfig+0x2d0>)
 80056c4:	429a      	cmp	r2, r3
 80056c6:	d104      	bne.n	80056d2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80056c8:	f7fe fb3e 	bl	8003d48 <HAL_RCC_GetPCLK2Freq>
 80056cc:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80056d0:	e003      	b.n	80056da <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80056d2:	f7fe fb25 	bl	8003d20 <HAL_RCC_GetPCLK1Freq>
 80056d6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80056da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80056de:	69db      	ldr	r3, [r3, #28]
 80056e0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80056e4:	f040 810c 	bne.w	8005900 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80056e8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80056ec:	2200      	movs	r2, #0
 80056ee:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80056f2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80056f6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80056fa:	4622      	mov	r2, r4
 80056fc:	462b      	mov	r3, r5
 80056fe:	1891      	adds	r1, r2, r2
 8005700:	65b9      	str	r1, [r7, #88]	; 0x58
 8005702:	415b      	adcs	r3, r3
 8005704:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005706:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800570a:	4621      	mov	r1, r4
 800570c:	eb12 0801 	adds.w	r8, r2, r1
 8005710:	4629      	mov	r1, r5
 8005712:	eb43 0901 	adc.w	r9, r3, r1
 8005716:	f04f 0200 	mov.w	r2, #0
 800571a:	f04f 0300 	mov.w	r3, #0
 800571e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005722:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005726:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800572a:	4690      	mov	r8, r2
 800572c:	4699      	mov	r9, r3
 800572e:	4623      	mov	r3, r4
 8005730:	eb18 0303 	adds.w	r3, r8, r3
 8005734:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005738:	462b      	mov	r3, r5
 800573a:	eb49 0303 	adc.w	r3, r9, r3
 800573e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005742:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005746:	685b      	ldr	r3, [r3, #4]
 8005748:	2200      	movs	r2, #0
 800574a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800574e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8005752:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005756:	460b      	mov	r3, r1
 8005758:	18db      	adds	r3, r3, r3
 800575a:	653b      	str	r3, [r7, #80]	; 0x50
 800575c:	4613      	mov	r3, r2
 800575e:	eb42 0303 	adc.w	r3, r2, r3
 8005762:	657b      	str	r3, [r7, #84]	; 0x54
 8005764:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005768:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800576c:	f7fa fd2c 	bl	80001c8 <__aeabi_uldivmod>
 8005770:	4602      	mov	r2, r0
 8005772:	460b      	mov	r3, r1
 8005774:	4b61      	ldr	r3, [pc, #388]	; (80058fc <UART_SetConfig+0x2d4>)
 8005776:	fba3 2302 	umull	r2, r3, r3, r2
 800577a:	095b      	lsrs	r3, r3, #5
 800577c:	011c      	lsls	r4, r3, #4
 800577e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005782:	2200      	movs	r2, #0
 8005784:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005788:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800578c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005790:	4642      	mov	r2, r8
 8005792:	464b      	mov	r3, r9
 8005794:	1891      	adds	r1, r2, r2
 8005796:	64b9      	str	r1, [r7, #72]	; 0x48
 8005798:	415b      	adcs	r3, r3
 800579a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800579c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80057a0:	4641      	mov	r1, r8
 80057a2:	eb12 0a01 	adds.w	sl, r2, r1
 80057a6:	4649      	mov	r1, r9
 80057a8:	eb43 0b01 	adc.w	fp, r3, r1
 80057ac:	f04f 0200 	mov.w	r2, #0
 80057b0:	f04f 0300 	mov.w	r3, #0
 80057b4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80057b8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80057bc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80057c0:	4692      	mov	sl, r2
 80057c2:	469b      	mov	fp, r3
 80057c4:	4643      	mov	r3, r8
 80057c6:	eb1a 0303 	adds.w	r3, sl, r3
 80057ca:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80057ce:	464b      	mov	r3, r9
 80057d0:	eb4b 0303 	adc.w	r3, fp, r3
 80057d4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80057d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80057dc:	685b      	ldr	r3, [r3, #4]
 80057de:	2200      	movs	r2, #0
 80057e0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80057e4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80057e8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80057ec:	460b      	mov	r3, r1
 80057ee:	18db      	adds	r3, r3, r3
 80057f0:	643b      	str	r3, [r7, #64]	; 0x40
 80057f2:	4613      	mov	r3, r2
 80057f4:	eb42 0303 	adc.w	r3, r2, r3
 80057f8:	647b      	str	r3, [r7, #68]	; 0x44
 80057fa:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80057fe:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8005802:	f7fa fce1 	bl	80001c8 <__aeabi_uldivmod>
 8005806:	4602      	mov	r2, r0
 8005808:	460b      	mov	r3, r1
 800580a:	4611      	mov	r1, r2
 800580c:	4b3b      	ldr	r3, [pc, #236]	; (80058fc <UART_SetConfig+0x2d4>)
 800580e:	fba3 2301 	umull	r2, r3, r3, r1
 8005812:	095b      	lsrs	r3, r3, #5
 8005814:	2264      	movs	r2, #100	; 0x64
 8005816:	fb02 f303 	mul.w	r3, r2, r3
 800581a:	1acb      	subs	r3, r1, r3
 800581c:	00db      	lsls	r3, r3, #3
 800581e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8005822:	4b36      	ldr	r3, [pc, #216]	; (80058fc <UART_SetConfig+0x2d4>)
 8005824:	fba3 2302 	umull	r2, r3, r3, r2
 8005828:	095b      	lsrs	r3, r3, #5
 800582a:	005b      	lsls	r3, r3, #1
 800582c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005830:	441c      	add	r4, r3
 8005832:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005836:	2200      	movs	r2, #0
 8005838:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800583c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005840:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005844:	4642      	mov	r2, r8
 8005846:	464b      	mov	r3, r9
 8005848:	1891      	adds	r1, r2, r2
 800584a:	63b9      	str	r1, [r7, #56]	; 0x38
 800584c:	415b      	adcs	r3, r3
 800584e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005850:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005854:	4641      	mov	r1, r8
 8005856:	1851      	adds	r1, r2, r1
 8005858:	6339      	str	r1, [r7, #48]	; 0x30
 800585a:	4649      	mov	r1, r9
 800585c:	414b      	adcs	r3, r1
 800585e:	637b      	str	r3, [r7, #52]	; 0x34
 8005860:	f04f 0200 	mov.w	r2, #0
 8005864:	f04f 0300 	mov.w	r3, #0
 8005868:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800586c:	4659      	mov	r1, fp
 800586e:	00cb      	lsls	r3, r1, #3
 8005870:	4651      	mov	r1, sl
 8005872:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005876:	4651      	mov	r1, sl
 8005878:	00ca      	lsls	r2, r1, #3
 800587a:	4610      	mov	r0, r2
 800587c:	4619      	mov	r1, r3
 800587e:	4603      	mov	r3, r0
 8005880:	4642      	mov	r2, r8
 8005882:	189b      	adds	r3, r3, r2
 8005884:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005888:	464b      	mov	r3, r9
 800588a:	460a      	mov	r2, r1
 800588c:	eb42 0303 	adc.w	r3, r2, r3
 8005890:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005894:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005898:	685b      	ldr	r3, [r3, #4]
 800589a:	2200      	movs	r2, #0
 800589c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80058a0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80058a4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80058a8:	460b      	mov	r3, r1
 80058aa:	18db      	adds	r3, r3, r3
 80058ac:	62bb      	str	r3, [r7, #40]	; 0x28
 80058ae:	4613      	mov	r3, r2
 80058b0:	eb42 0303 	adc.w	r3, r2, r3
 80058b4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80058b6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80058ba:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80058be:	f7fa fc83 	bl	80001c8 <__aeabi_uldivmod>
 80058c2:	4602      	mov	r2, r0
 80058c4:	460b      	mov	r3, r1
 80058c6:	4b0d      	ldr	r3, [pc, #52]	; (80058fc <UART_SetConfig+0x2d4>)
 80058c8:	fba3 1302 	umull	r1, r3, r3, r2
 80058cc:	095b      	lsrs	r3, r3, #5
 80058ce:	2164      	movs	r1, #100	; 0x64
 80058d0:	fb01 f303 	mul.w	r3, r1, r3
 80058d4:	1ad3      	subs	r3, r2, r3
 80058d6:	00db      	lsls	r3, r3, #3
 80058d8:	3332      	adds	r3, #50	; 0x32
 80058da:	4a08      	ldr	r2, [pc, #32]	; (80058fc <UART_SetConfig+0x2d4>)
 80058dc:	fba2 2303 	umull	r2, r3, r2, r3
 80058e0:	095b      	lsrs	r3, r3, #5
 80058e2:	f003 0207 	and.w	r2, r3, #7
 80058e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	4422      	add	r2, r4
 80058ee:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80058f0:	e105      	b.n	8005afe <UART_SetConfig+0x4d6>
 80058f2:	bf00      	nop
 80058f4:	40011000 	.word	0x40011000
 80058f8:	40011400 	.word	0x40011400
 80058fc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005900:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005904:	2200      	movs	r2, #0
 8005906:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800590a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800590e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8005912:	4642      	mov	r2, r8
 8005914:	464b      	mov	r3, r9
 8005916:	1891      	adds	r1, r2, r2
 8005918:	6239      	str	r1, [r7, #32]
 800591a:	415b      	adcs	r3, r3
 800591c:	627b      	str	r3, [r7, #36]	; 0x24
 800591e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005922:	4641      	mov	r1, r8
 8005924:	1854      	adds	r4, r2, r1
 8005926:	4649      	mov	r1, r9
 8005928:	eb43 0501 	adc.w	r5, r3, r1
 800592c:	f04f 0200 	mov.w	r2, #0
 8005930:	f04f 0300 	mov.w	r3, #0
 8005934:	00eb      	lsls	r3, r5, #3
 8005936:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800593a:	00e2      	lsls	r2, r4, #3
 800593c:	4614      	mov	r4, r2
 800593e:	461d      	mov	r5, r3
 8005940:	4643      	mov	r3, r8
 8005942:	18e3      	adds	r3, r4, r3
 8005944:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005948:	464b      	mov	r3, r9
 800594a:	eb45 0303 	adc.w	r3, r5, r3
 800594e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005952:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005956:	685b      	ldr	r3, [r3, #4]
 8005958:	2200      	movs	r2, #0
 800595a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800595e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005962:	f04f 0200 	mov.w	r2, #0
 8005966:	f04f 0300 	mov.w	r3, #0
 800596a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800596e:	4629      	mov	r1, r5
 8005970:	008b      	lsls	r3, r1, #2
 8005972:	4621      	mov	r1, r4
 8005974:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005978:	4621      	mov	r1, r4
 800597a:	008a      	lsls	r2, r1, #2
 800597c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005980:	f7fa fc22 	bl	80001c8 <__aeabi_uldivmod>
 8005984:	4602      	mov	r2, r0
 8005986:	460b      	mov	r3, r1
 8005988:	4b60      	ldr	r3, [pc, #384]	; (8005b0c <UART_SetConfig+0x4e4>)
 800598a:	fba3 2302 	umull	r2, r3, r3, r2
 800598e:	095b      	lsrs	r3, r3, #5
 8005990:	011c      	lsls	r4, r3, #4
 8005992:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005996:	2200      	movs	r2, #0
 8005998:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800599c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80059a0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80059a4:	4642      	mov	r2, r8
 80059a6:	464b      	mov	r3, r9
 80059a8:	1891      	adds	r1, r2, r2
 80059aa:	61b9      	str	r1, [r7, #24]
 80059ac:	415b      	adcs	r3, r3
 80059ae:	61fb      	str	r3, [r7, #28]
 80059b0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80059b4:	4641      	mov	r1, r8
 80059b6:	1851      	adds	r1, r2, r1
 80059b8:	6139      	str	r1, [r7, #16]
 80059ba:	4649      	mov	r1, r9
 80059bc:	414b      	adcs	r3, r1
 80059be:	617b      	str	r3, [r7, #20]
 80059c0:	f04f 0200 	mov.w	r2, #0
 80059c4:	f04f 0300 	mov.w	r3, #0
 80059c8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80059cc:	4659      	mov	r1, fp
 80059ce:	00cb      	lsls	r3, r1, #3
 80059d0:	4651      	mov	r1, sl
 80059d2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80059d6:	4651      	mov	r1, sl
 80059d8:	00ca      	lsls	r2, r1, #3
 80059da:	4610      	mov	r0, r2
 80059dc:	4619      	mov	r1, r3
 80059de:	4603      	mov	r3, r0
 80059e0:	4642      	mov	r2, r8
 80059e2:	189b      	adds	r3, r3, r2
 80059e4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80059e8:	464b      	mov	r3, r9
 80059ea:	460a      	mov	r2, r1
 80059ec:	eb42 0303 	adc.w	r3, r2, r3
 80059f0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80059f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80059f8:	685b      	ldr	r3, [r3, #4]
 80059fa:	2200      	movs	r2, #0
 80059fc:	67bb      	str	r3, [r7, #120]	; 0x78
 80059fe:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005a00:	f04f 0200 	mov.w	r2, #0
 8005a04:	f04f 0300 	mov.w	r3, #0
 8005a08:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005a0c:	4649      	mov	r1, r9
 8005a0e:	008b      	lsls	r3, r1, #2
 8005a10:	4641      	mov	r1, r8
 8005a12:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005a16:	4641      	mov	r1, r8
 8005a18:	008a      	lsls	r2, r1, #2
 8005a1a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8005a1e:	f7fa fbd3 	bl	80001c8 <__aeabi_uldivmod>
 8005a22:	4602      	mov	r2, r0
 8005a24:	460b      	mov	r3, r1
 8005a26:	4b39      	ldr	r3, [pc, #228]	; (8005b0c <UART_SetConfig+0x4e4>)
 8005a28:	fba3 1302 	umull	r1, r3, r3, r2
 8005a2c:	095b      	lsrs	r3, r3, #5
 8005a2e:	2164      	movs	r1, #100	; 0x64
 8005a30:	fb01 f303 	mul.w	r3, r1, r3
 8005a34:	1ad3      	subs	r3, r2, r3
 8005a36:	011b      	lsls	r3, r3, #4
 8005a38:	3332      	adds	r3, #50	; 0x32
 8005a3a:	4a34      	ldr	r2, [pc, #208]	; (8005b0c <UART_SetConfig+0x4e4>)
 8005a3c:	fba2 2303 	umull	r2, r3, r2, r3
 8005a40:	095b      	lsrs	r3, r3, #5
 8005a42:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005a46:	441c      	add	r4, r3
 8005a48:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005a4c:	2200      	movs	r2, #0
 8005a4e:	673b      	str	r3, [r7, #112]	; 0x70
 8005a50:	677a      	str	r2, [r7, #116]	; 0x74
 8005a52:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005a56:	4642      	mov	r2, r8
 8005a58:	464b      	mov	r3, r9
 8005a5a:	1891      	adds	r1, r2, r2
 8005a5c:	60b9      	str	r1, [r7, #8]
 8005a5e:	415b      	adcs	r3, r3
 8005a60:	60fb      	str	r3, [r7, #12]
 8005a62:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005a66:	4641      	mov	r1, r8
 8005a68:	1851      	adds	r1, r2, r1
 8005a6a:	6039      	str	r1, [r7, #0]
 8005a6c:	4649      	mov	r1, r9
 8005a6e:	414b      	adcs	r3, r1
 8005a70:	607b      	str	r3, [r7, #4]
 8005a72:	f04f 0200 	mov.w	r2, #0
 8005a76:	f04f 0300 	mov.w	r3, #0
 8005a7a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005a7e:	4659      	mov	r1, fp
 8005a80:	00cb      	lsls	r3, r1, #3
 8005a82:	4651      	mov	r1, sl
 8005a84:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005a88:	4651      	mov	r1, sl
 8005a8a:	00ca      	lsls	r2, r1, #3
 8005a8c:	4610      	mov	r0, r2
 8005a8e:	4619      	mov	r1, r3
 8005a90:	4603      	mov	r3, r0
 8005a92:	4642      	mov	r2, r8
 8005a94:	189b      	adds	r3, r3, r2
 8005a96:	66bb      	str	r3, [r7, #104]	; 0x68
 8005a98:	464b      	mov	r3, r9
 8005a9a:	460a      	mov	r2, r1
 8005a9c:	eb42 0303 	adc.w	r3, r2, r3
 8005aa0:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005aa2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005aa6:	685b      	ldr	r3, [r3, #4]
 8005aa8:	2200      	movs	r2, #0
 8005aaa:	663b      	str	r3, [r7, #96]	; 0x60
 8005aac:	667a      	str	r2, [r7, #100]	; 0x64
 8005aae:	f04f 0200 	mov.w	r2, #0
 8005ab2:	f04f 0300 	mov.w	r3, #0
 8005ab6:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005aba:	4649      	mov	r1, r9
 8005abc:	008b      	lsls	r3, r1, #2
 8005abe:	4641      	mov	r1, r8
 8005ac0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005ac4:	4641      	mov	r1, r8
 8005ac6:	008a      	lsls	r2, r1, #2
 8005ac8:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005acc:	f7fa fb7c 	bl	80001c8 <__aeabi_uldivmod>
 8005ad0:	4602      	mov	r2, r0
 8005ad2:	460b      	mov	r3, r1
 8005ad4:	4b0d      	ldr	r3, [pc, #52]	; (8005b0c <UART_SetConfig+0x4e4>)
 8005ad6:	fba3 1302 	umull	r1, r3, r3, r2
 8005ada:	095b      	lsrs	r3, r3, #5
 8005adc:	2164      	movs	r1, #100	; 0x64
 8005ade:	fb01 f303 	mul.w	r3, r1, r3
 8005ae2:	1ad3      	subs	r3, r2, r3
 8005ae4:	011b      	lsls	r3, r3, #4
 8005ae6:	3332      	adds	r3, #50	; 0x32
 8005ae8:	4a08      	ldr	r2, [pc, #32]	; (8005b0c <UART_SetConfig+0x4e4>)
 8005aea:	fba2 2303 	umull	r2, r3, r2, r3
 8005aee:	095b      	lsrs	r3, r3, #5
 8005af0:	f003 020f 	and.w	r2, r3, #15
 8005af4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	4422      	add	r2, r4
 8005afc:	609a      	str	r2, [r3, #8]
}
 8005afe:	bf00      	nop
 8005b00:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005b04:	46bd      	mov	sp, r7
 8005b06:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005b0a:	bf00      	nop
 8005b0c:	51eb851f 	.word	0x51eb851f

08005b10 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005b10:	b084      	sub	sp, #16
 8005b12:	b580      	push	{r7, lr}
 8005b14:	b084      	sub	sp, #16
 8005b16:	af00      	add	r7, sp, #0
 8005b18:	6078      	str	r0, [r7, #4]
 8005b1a:	f107 001c 	add.w	r0, r7, #28
 8005b1e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005b22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b24:	2b01      	cmp	r3, #1
 8005b26:	d122      	bne.n	8005b6e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b2c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	68db      	ldr	r3, [r3, #12]
 8005b38:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8005b3c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005b40:	687a      	ldr	r2, [r7, #4]
 8005b42:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	68db      	ldr	r3, [r3, #12]
 8005b48:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005b50:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005b52:	2b01      	cmp	r3, #1
 8005b54:	d105      	bne.n	8005b62 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	68db      	ldr	r3, [r3, #12]
 8005b5a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005b62:	6878      	ldr	r0, [r7, #4]
 8005b64:	f001 fbee 	bl	8007344 <USB_CoreReset>
 8005b68:	4603      	mov	r3, r0
 8005b6a:	73fb      	strb	r3, [r7, #15]
 8005b6c:	e01a      	b.n	8005ba4 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	68db      	ldr	r3, [r3, #12]
 8005b72:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005b7a:	6878      	ldr	r0, [r7, #4]
 8005b7c:	f001 fbe2 	bl	8007344 <USB_CoreReset>
 8005b80:	4603      	mov	r3, r0
 8005b82:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005b84:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d106      	bne.n	8005b98 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b8e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	639a      	str	r2, [r3, #56]	; 0x38
 8005b96:	e005      	b.n	8005ba4 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b9c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005ba4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ba6:	2b01      	cmp	r3, #1
 8005ba8:	d10b      	bne.n	8005bc2 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	689b      	ldr	r3, [r3, #8]
 8005bae:	f043 0206 	orr.w	r2, r3, #6
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	689b      	ldr	r3, [r3, #8]
 8005bba:	f043 0220 	orr.w	r2, r3, #32
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005bc2:	7bfb      	ldrb	r3, [r7, #15]
}
 8005bc4:	4618      	mov	r0, r3
 8005bc6:	3710      	adds	r7, #16
 8005bc8:	46bd      	mov	sp, r7
 8005bca:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005bce:	b004      	add	sp, #16
 8005bd0:	4770      	bx	lr
	...

08005bd4 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8005bd4:	b480      	push	{r7}
 8005bd6:	b087      	sub	sp, #28
 8005bd8:	af00      	add	r7, sp, #0
 8005bda:	60f8      	str	r0, [r7, #12]
 8005bdc:	60b9      	str	r1, [r7, #8]
 8005bde:	4613      	mov	r3, r2
 8005be0:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8005be2:	79fb      	ldrb	r3, [r7, #7]
 8005be4:	2b02      	cmp	r3, #2
 8005be6:	d165      	bne.n	8005cb4 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8005be8:	68bb      	ldr	r3, [r7, #8]
 8005bea:	4a41      	ldr	r2, [pc, #260]	; (8005cf0 <USB_SetTurnaroundTime+0x11c>)
 8005bec:	4293      	cmp	r3, r2
 8005bee:	d906      	bls.n	8005bfe <USB_SetTurnaroundTime+0x2a>
 8005bf0:	68bb      	ldr	r3, [r7, #8]
 8005bf2:	4a40      	ldr	r2, [pc, #256]	; (8005cf4 <USB_SetTurnaroundTime+0x120>)
 8005bf4:	4293      	cmp	r3, r2
 8005bf6:	d202      	bcs.n	8005bfe <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8005bf8:	230f      	movs	r3, #15
 8005bfa:	617b      	str	r3, [r7, #20]
 8005bfc:	e062      	b.n	8005cc4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8005bfe:	68bb      	ldr	r3, [r7, #8]
 8005c00:	4a3c      	ldr	r2, [pc, #240]	; (8005cf4 <USB_SetTurnaroundTime+0x120>)
 8005c02:	4293      	cmp	r3, r2
 8005c04:	d306      	bcc.n	8005c14 <USB_SetTurnaroundTime+0x40>
 8005c06:	68bb      	ldr	r3, [r7, #8]
 8005c08:	4a3b      	ldr	r2, [pc, #236]	; (8005cf8 <USB_SetTurnaroundTime+0x124>)
 8005c0a:	4293      	cmp	r3, r2
 8005c0c:	d202      	bcs.n	8005c14 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8005c0e:	230e      	movs	r3, #14
 8005c10:	617b      	str	r3, [r7, #20]
 8005c12:	e057      	b.n	8005cc4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8005c14:	68bb      	ldr	r3, [r7, #8]
 8005c16:	4a38      	ldr	r2, [pc, #224]	; (8005cf8 <USB_SetTurnaroundTime+0x124>)
 8005c18:	4293      	cmp	r3, r2
 8005c1a:	d306      	bcc.n	8005c2a <USB_SetTurnaroundTime+0x56>
 8005c1c:	68bb      	ldr	r3, [r7, #8]
 8005c1e:	4a37      	ldr	r2, [pc, #220]	; (8005cfc <USB_SetTurnaroundTime+0x128>)
 8005c20:	4293      	cmp	r3, r2
 8005c22:	d202      	bcs.n	8005c2a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8005c24:	230d      	movs	r3, #13
 8005c26:	617b      	str	r3, [r7, #20]
 8005c28:	e04c      	b.n	8005cc4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8005c2a:	68bb      	ldr	r3, [r7, #8]
 8005c2c:	4a33      	ldr	r2, [pc, #204]	; (8005cfc <USB_SetTurnaroundTime+0x128>)
 8005c2e:	4293      	cmp	r3, r2
 8005c30:	d306      	bcc.n	8005c40 <USB_SetTurnaroundTime+0x6c>
 8005c32:	68bb      	ldr	r3, [r7, #8]
 8005c34:	4a32      	ldr	r2, [pc, #200]	; (8005d00 <USB_SetTurnaroundTime+0x12c>)
 8005c36:	4293      	cmp	r3, r2
 8005c38:	d802      	bhi.n	8005c40 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8005c3a:	230c      	movs	r3, #12
 8005c3c:	617b      	str	r3, [r7, #20]
 8005c3e:	e041      	b.n	8005cc4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8005c40:	68bb      	ldr	r3, [r7, #8]
 8005c42:	4a2f      	ldr	r2, [pc, #188]	; (8005d00 <USB_SetTurnaroundTime+0x12c>)
 8005c44:	4293      	cmp	r3, r2
 8005c46:	d906      	bls.n	8005c56 <USB_SetTurnaroundTime+0x82>
 8005c48:	68bb      	ldr	r3, [r7, #8]
 8005c4a:	4a2e      	ldr	r2, [pc, #184]	; (8005d04 <USB_SetTurnaroundTime+0x130>)
 8005c4c:	4293      	cmp	r3, r2
 8005c4e:	d802      	bhi.n	8005c56 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8005c50:	230b      	movs	r3, #11
 8005c52:	617b      	str	r3, [r7, #20]
 8005c54:	e036      	b.n	8005cc4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8005c56:	68bb      	ldr	r3, [r7, #8]
 8005c58:	4a2a      	ldr	r2, [pc, #168]	; (8005d04 <USB_SetTurnaroundTime+0x130>)
 8005c5a:	4293      	cmp	r3, r2
 8005c5c:	d906      	bls.n	8005c6c <USB_SetTurnaroundTime+0x98>
 8005c5e:	68bb      	ldr	r3, [r7, #8]
 8005c60:	4a29      	ldr	r2, [pc, #164]	; (8005d08 <USB_SetTurnaroundTime+0x134>)
 8005c62:	4293      	cmp	r3, r2
 8005c64:	d802      	bhi.n	8005c6c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8005c66:	230a      	movs	r3, #10
 8005c68:	617b      	str	r3, [r7, #20]
 8005c6a:	e02b      	b.n	8005cc4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8005c6c:	68bb      	ldr	r3, [r7, #8]
 8005c6e:	4a26      	ldr	r2, [pc, #152]	; (8005d08 <USB_SetTurnaroundTime+0x134>)
 8005c70:	4293      	cmp	r3, r2
 8005c72:	d906      	bls.n	8005c82 <USB_SetTurnaroundTime+0xae>
 8005c74:	68bb      	ldr	r3, [r7, #8]
 8005c76:	4a25      	ldr	r2, [pc, #148]	; (8005d0c <USB_SetTurnaroundTime+0x138>)
 8005c78:	4293      	cmp	r3, r2
 8005c7a:	d202      	bcs.n	8005c82 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8005c7c:	2309      	movs	r3, #9
 8005c7e:	617b      	str	r3, [r7, #20]
 8005c80:	e020      	b.n	8005cc4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8005c82:	68bb      	ldr	r3, [r7, #8]
 8005c84:	4a21      	ldr	r2, [pc, #132]	; (8005d0c <USB_SetTurnaroundTime+0x138>)
 8005c86:	4293      	cmp	r3, r2
 8005c88:	d306      	bcc.n	8005c98 <USB_SetTurnaroundTime+0xc4>
 8005c8a:	68bb      	ldr	r3, [r7, #8]
 8005c8c:	4a20      	ldr	r2, [pc, #128]	; (8005d10 <USB_SetTurnaroundTime+0x13c>)
 8005c8e:	4293      	cmp	r3, r2
 8005c90:	d802      	bhi.n	8005c98 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8005c92:	2308      	movs	r3, #8
 8005c94:	617b      	str	r3, [r7, #20]
 8005c96:	e015      	b.n	8005cc4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8005c98:	68bb      	ldr	r3, [r7, #8]
 8005c9a:	4a1d      	ldr	r2, [pc, #116]	; (8005d10 <USB_SetTurnaroundTime+0x13c>)
 8005c9c:	4293      	cmp	r3, r2
 8005c9e:	d906      	bls.n	8005cae <USB_SetTurnaroundTime+0xda>
 8005ca0:	68bb      	ldr	r3, [r7, #8]
 8005ca2:	4a1c      	ldr	r2, [pc, #112]	; (8005d14 <USB_SetTurnaroundTime+0x140>)
 8005ca4:	4293      	cmp	r3, r2
 8005ca6:	d202      	bcs.n	8005cae <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8005ca8:	2307      	movs	r3, #7
 8005caa:	617b      	str	r3, [r7, #20]
 8005cac:	e00a      	b.n	8005cc4 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8005cae:	2306      	movs	r3, #6
 8005cb0:	617b      	str	r3, [r7, #20]
 8005cb2:	e007      	b.n	8005cc4 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8005cb4:	79fb      	ldrb	r3, [r7, #7]
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d102      	bne.n	8005cc0 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8005cba:	2309      	movs	r3, #9
 8005cbc:	617b      	str	r3, [r7, #20]
 8005cbe:	e001      	b.n	8005cc4 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8005cc0:	2309      	movs	r3, #9
 8005cc2:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	68db      	ldr	r3, [r3, #12]
 8005cc8:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	68da      	ldr	r2, [r3, #12]
 8005cd4:	697b      	ldr	r3, [r7, #20]
 8005cd6:	029b      	lsls	r3, r3, #10
 8005cd8:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8005cdc:	431a      	orrs	r2, r3
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005ce2:	2300      	movs	r3, #0
}
 8005ce4:	4618      	mov	r0, r3
 8005ce6:	371c      	adds	r7, #28
 8005ce8:	46bd      	mov	sp, r7
 8005cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cee:	4770      	bx	lr
 8005cf0:	00d8acbf 	.word	0x00d8acbf
 8005cf4:	00e4e1c0 	.word	0x00e4e1c0
 8005cf8:	00f42400 	.word	0x00f42400
 8005cfc:	01067380 	.word	0x01067380
 8005d00:	011a499f 	.word	0x011a499f
 8005d04:	01312cff 	.word	0x01312cff
 8005d08:	014ca43f 	.word	0x014ca43f
 8005d0c:	016e3600 	.word	0x016e3600
 8005d10:	01a6ab1f 	.word	0x01a6ab1f
 8005d14:	01e84800 	.word	0x01e84800

08005d18 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005d18:	b480      	push	{r7}
 8005d1a:	b083      	sub	sp, #12
 8005d1c:	af00      	add	r7, sp, #0
 8005d1e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	689b      	ldr	r3, [r3, #8]
 8005d24:	f043 0201 	orr.w	r2, r3, #1
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005d2c:	2300      	movs	r3, #0
}
 8005d2e:	4618      	mov	r0, r3
 8005d30:	370c      	adds	r7, #12
 8005d32:	46bd      	mov	sp, r7
 8005d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d38:	4770      	bx	lr

08005d3a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005d3a:	b480      	push	{r7}
 8005d3c:	b083      	sub	sp, #12
 8005d3e:	af00      	add	r7, sp, #0
 8005d40:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	689b      	ldr	r3, [r3, #8]
 8005d46:	f023 0201 	bic.w	r2, r3, #1
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005d4e:	2300      	movs	r3, #0
}
 8005d50:	4618      	mov	r0, r3
 8005d52:	370c      	adds	r7, #12
 8005d54:	46bd      	mov	sp, r7
 8005d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d5a:	4770      	bx	lr

08005d5c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005d5c:	b580      	push	{r7, lr}
 8005d5e:	b084      	sub	sp, #16
 8005d60:	af00      	add	r7, sp, #0
 8005d62:	6078      	str	r0, [r7, #4]
 8005d64:	460b      	mov	r3, r1
 8005d66:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005d68:	2300      	movs	r3, #0
 8005d6a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	68db      	ldr	r3, [r3, #12]
 8005d70:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005d78:	78fb      	ldrb	r3, [r7, #3]
 8005d7a:	2b01      	cmp	r3, #1
 8005d7c:	d115      	bne.n	8005daa <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	68db      	ldr	r3, [r3, #12]
 8005d82:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005d8a:	2001      	movs	r0, #1
 8005d8c:	f7fb fd84 	bl	8001898 <HAL_Delay>
      ms++;
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	3301      	adds	r3, #1
 8005d94:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8005d96:	6878      	ldr	r0, [r7, #4]
 8005d98:	f001 fa45 	bl	8007226 <USB_GetMode>
 8005d9c:	4603      	mov	r3, r0
 8005d9e:	2b01      	cmp	r3, #1
 8005da0:	d01e      	beq.n	8005de0 <USB_SetCurrentMode+0x84>
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	2b31      	cmp	r3, #49	; 0x31
 8005da6:	d9f0      	bls.n	8005d8a <USB_SetCurrentMode+0x2e>
 8005da8:	e01a      	b.n	8005de0 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005daa:	78fb      	ldrb	r3, [r7, #3]
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d115      	bne.n	8005ddc <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	68db      	ldr	r3, [r3, #12]
 8005db4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005dbc:	2001      	movs	r0, #1
 8005dbe:	f7fb fd6b 	bl	8001898 <HAL_Delay>
      ms++;
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	3301      	adds	r3, #1
 8005dc6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8005dc8:	6878      	ldr	r0, [r7, #4]
 8005dca:	f001 fa2c 	bl	8007226 <USB_GetMode>
 8005dce:	4603      	mov	r3, r0
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d005      	beq.n	8005de0 <USB_SetCurrentMode+0x84>
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	2b31      	cmp	r3, #49	; 0x31
 8005dd8:	d9f0      	bls.n	8005dbc <USB_SetCurrentMode+0x60>
 8005dda:	e001      	b.n	8005de0 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005ddc:	2301      	movs	r3, #1
 8005dde:	e005      	b.n	8005dec <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	2b32      	cmp	r3, #50	; 0x32
 8005de4:	d101      	bne.n	8005dea <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005de6:	2301      	movs	r3, #1
 8005de8:	e000      	b.n	8005dec <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005dea:	2300      	movs	r3, #0
}
 8005dec:	4618      	mov	r0, r3
 8005dee:	3710      	adds	r7, #16
 8005df0:	46bd      	mov	sp, r7
 8005df2:	bd80      	pop	{r7, pc}

08005df4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005df4:	b084      	sub	sp, #16
 8005df6:	b580      	push	{r7, lr}
 8005df8:	b086      	sub	sp, #24
 8005dfa:	af00      	add	r7, sp, #0
 8005dfc:	6078      	str	r0, [r7, #4]
 8005dfe:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005e02:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005e06:	2300      	movs	r3, #0
 8005e08:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005e0e:	2300      	movs	r3, #0
 8005e10:	613b      	str	r3, [r7, #16]
 8005e12:	e009      	b.n	8005e28 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005e14:	687a      	ldr	r2, [r7, #4]
 8005e16:	693b      	ldr	r3, [r7, #16]
 8005e18:	3340      	adds	r3, #64	; 0x40
 8005e1a:	009b      	lsls	r3, r3, #2
 8005e1c:	4413      	add	r3, r2
 8005e1e:	2200      	movs	r2, #0
 8005e20:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005e22:	693b      	ldr	r3, [r7, #16]
 8005e24:	3301      	adds	r3, #1
 8005e26:	613b      	str	r3, [r7, #16]
 8005e28:	693b      	ldr	r3, [r7, #16]
 8005e2a:	2b0e      	cmp	r3, #14
 8005e2c:	d9f2      	bls.n	8005e14 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005e2e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d11c      	bne.n	8005e6e <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e3a:	685b      	ldr	r3, [r3, #4]
 8005e3c:	68fa      	ldr	r2, [r7, #12]
 8005e3e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005e42:	f043 0302 	orr.w	r3, r3, #2
 8005e46:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e4c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e58:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e64:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	639a      	str	r2, [r3, #56]	; 0x38
 8005e6c:	e00b      	b.n	8005e86 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e72:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e7e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005e8c:	461a      	mov	r2, r3
 8005e8e:	2300      	movs	r3, #0
 8005e90:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e98:	4619      	mov	r1, r3
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ea0:	461a      	mov	r2, r3
 8005ea2:	680b      	ldr	r3, [r1, #0]
 8005ea4:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005ea6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ea8:	2b01      	cmp	r3, #1
 8005eaa:	d10c      	bne.n	8005ec6 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005eac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d104      	bne.n	8005ebc <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005eb2:	2100      	movs	r1, #0
 8005eb4:	6878      	ldr	r0, [r7, #4]
 8005eb6:	f000 f965 	bl	8006184 <USB_SetDevSpeed>
 8005eba:	e008      	b.n	8005ece <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005ebc:	2101      	movs	r1, #1
 8005ebe:	6878      	ldr	r0, [r7, #4]
 8005ec0:	f000 f960 	bl	8006184 <USB_SetDevSpeed>
 8005ec4:	e003      	b.n	8005ece <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005ec6:	2103      	movs	r1, #3
 8005ec8:	6878      	ldr	r0, [r7, #4]
 8005eca:	f000 f95b 	bl	8006184 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005ece:	2110      	movs	r1, #16
 8005ed0:	6878      	ldr	r0, [r7, #4]
 8005ed2:	f000 f8f3 	bl	80060bc <USB_FlushTxFifo>
 8005ed6:	4603      	mov	r3, r0
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d001      	beq.n	8005ee0 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8005edc:	2301      	movs	r3, #1
 8005ede:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005ee0:	6878      	ldr	r0, [r7, #4]
 8005ee2:	f000 f91f 	bl	8006124 <USB_FlushRxFifo>
 8005ee6:	4603      	mov	r3, r0
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d001      	beq.n	8005ef0 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8005eec:	2301      	movs	r3, #1
 8005eee:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ef6:	461a      	mov	r2, r3
 8005ef8:	2300      	movs	r3, #0
 8005efa:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f02:	461a      	mov	r2, r3
 8005f04:	2300      	movs	r3, #0
 8005f06:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f0e:	461a      	mov	r2, r3
 8005f10:	2300      	movs	r3, #0
 8005f12:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005f14:	2300      	movs	r3, #0
 8005f16:	613b      	str	r3, [r7, #16]
 8005f18:	e043      	b.n	8005fa2 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005f1a:	693b      	ldr	r3, [r7, #16]
 8005f1c:	015a      	lsls	r2, r3, #5
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	4413      	add	r3, r2
 8005f22:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005f2c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005f30:	d118      	bne.n	8005f64 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8005f32:	693b      	ldr	r3, [r7, #16]
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d10a      	bne.n	8005f4e <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005f38:	693b      	ldr	r3, [r7, #16]
 8005f3a:	015a      	lsls	r2, r3, #5
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	4413      	add	r3, r2
 8005f40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f44:	461a      	mov	r2, r3
 8005f46:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005f4a:	6013      	str	r3, [r2, #0]
 8005f4c:	e013      	b.n	8005f76 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005f4e:	693b      	ldr	r3, [r7, #16]
 8005f50:	015a      	lsls	r2, r3, #5
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	4413      	add	r3, r2
 8005f56:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f5a:	461a      	mov	r2, r3
 8005f5c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005f60:	6013      	str	r3, [r2, #0]
 8005f62:	e008      	b.n	8005f76 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005f64:	693b      	ldr	r3, [r7, #16]
 8005f66:	015a      	lsls	r2, r3, #5
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	4413      	add	r3, r2
 8005f6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f70:	461a      	mov	r2, r3
 8005f72:	2300      	movs	r3, #0
 8005f74:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005f76:	693b      	ldr	r3, [r7, #16]
 8005f78:	015a      	lsls	r2, r3, #5
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	4413      	add	r3, r2
 8005f7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f82:	461a      	mov	r2, r3
 8005f84:	2300      	movs	r3, #0
 8005f86:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005f88:	693b      	ldr	r3, [r7, #16]
 8005f8a:	015a      	lsls	r2, r3, #5
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	4413      	add	r3, r2
 8005f90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f94:	461a      	mov	r2, r3
 8005f96:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005f9a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005f9c:	693b      	ldr	r3, [r7, #16]
 8005f9e:	3301      	adds	r3, #1
 8005fa0:	613b      	str	r3, [r7, #16]
 8005fa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fa4:	693a      	ldr	r2, [r7, #16]
 8005fa6:	429a      	cmp	r2, r3
 8005fa8:	d3b7      	bcc.n	8005f1a <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005faa:	2300      	movs	r3, #0
 8005fac:	613b      	str	r3, [r7, #16]
 8005fae:	e043      	b.n	8006038 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005fb0:	693b      	ldr	r3, [r7, #16]
 8005fb2:	015a      	lsls	r2, r3, #5
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	4413      	add	r3, r2
 8005fb8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005fc2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005fc6:	d118      	bne.n	8005ffa <USB_DevInit+0x206>
    {
      if (i == 0U)
 8005fc8:	693b      	ldr	r3, [r7, #16]
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d10a      	bne.n	8005fe4 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005fce:	693b      	ldr	r3, [r7, #16]
 8005fd0:	015a      	lsls	r2, r3, #5
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	4413      	add	r3, r2
 8005fd6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fda:	461a      	mov	r2, r3
 8005fdc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005fe0:	6013      	str	r3, [r2, #0]
 8005fe2:	e013      	b.n	800600c <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005fe4:	693b      	ldr	r3, [r7, #16]
 8005fe6:	015a      	lsls	r2, r3, #5
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	4413      	add	r3, r2
 8005fec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ff0:	461a      	mov	r2, r3
 8005ff2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005ff6:	6013      	str	r3, [r2, #0]
 8005ff8:	e008      	b.n	800600c <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005ffa:	693b      	ldr	r3, [r7, #16]
 8005ffc:	015a      	lsls	r2, r3, #5
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	4413      	add	r3, r2
 8006002:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006006:	461a      	mov	r2, r3
 8006008:	2300      	movs	r3, #0
 800600a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800600c:	693b      	ldr	r3, [r7, #16]
 800600e:	015a      	lsls	r2, r3, #5
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	4413      	add	r3, r2
 8006014:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006018:	461a      	mov	r2, r3
 800601a:	2300      	movs	r3, #0
 800601c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800601e:	693b      	ldr	r3, [r7, #16]
 8006020:	015a      	lsls	r2, r3, #5
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	4413      	add	r3, r2
 8006026:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800602a:	461a      	mov	r2, r3
 800602c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006030:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006032:	693b      	ldr	r3, [r7, #16]
 8006034:	3301      	adds	r3, #1
 8006036:	613b      	str	r3, [r7, #16]
 8006038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800603a:	693a      	ldr	r2, [r7, #16]
 800603c:	429a      	cmp	r2, r3
 800603e:	d3b7      	bcc.n	8005fb0 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006046:	691b      	ldr	r3, [r3, #16]
 8006048:	68fa      	ldr	r2, [r7, #12]
 800604a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800604e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006052:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	2200      	movs	r2, #0
 8006058:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8006060:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006062:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006064:	2b00      	cmp	r3, #0
 8006066:	d105      	bne.n	8006074 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	699b      	ldr	r3, [r3, #24]
 800606c:	f043 0210 	orr.w	r2, r3, #16
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	699a      	ldr	r2, [r3, #24]
 8006078:	4b0f      	ldr	r3, [pc, #60]	; (80060b8 <USB_DevInit+0x2c4>)
 800607a:	4313      	orrs	r3, r2
 800607c:	687a      	ldr	r2, [r7, #4]
 800607e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006080:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006082:	2b00      	cmp	r3, #0
 8006084:	d005      	beq.n	8006092 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	699b      	ldr	r3, [r3, #24]
 800608a:	f043 0208 	orr.w	r2, r3, #8
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006092:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006094:	2b01      	cmp	r3, #1
 8006096:	d107      	bne.n	80060a8 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	699b      	ldr	r3, [r3, #24]
 800609c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80060a0:	f043 0304 	orr.w	r3, r3, #4
 80060a4:	687a      	ldr	r2, [r7, #4]
 80060a6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80060a8:	7dfb      	ldrb	r3, [r7, #23]
}
 80060aa:	4618      	mov	r0, r3
 80060ac:	3718      	adds	r7, #24
 80060ae:	46bd      	mov	sp, r7
 80060b0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80060b4:	b004      	add	sp, #16
 80060b6:	4770      	bx	lr
 80060b8:	803c3800 	.word	0x803c3800

080060bc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80060bc:	b480      	push	{r7}
 80060be:	b085      	sub	sp, #20
 80060c0:	af00      	add	r7, sp, #0
 80060c2:	6078      	str	r0, [r7, #4]
 80060c4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80060c6:	2300      	movs	r3, #0
 80060c8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	3301      	adds	r3, #1
 80060ce:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	4a13      	ldr	r2, [pc, #76]	; (8006120 <USB_FlushTxFifo+0x64>)
 80060d4:	4293      	cmp	r3, r2
 80060d6:	d901      	bls.n	80060dc <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80060d8:	2303      	movs	r3, #3
 80060da:	e01b      	b.n	8006114 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	691b      	ldr	r3, [r3, #16]
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	daf2      	bge.n	80060ca <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80060e4:	2300      	movs	r3, #0
 80060e6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80060e8:	683b      	ldr	r3, [r7, #0]
 80060ea:	019b      	lsls	r3, r3, #6
 80060ec:	f043 0220 	orr.w	r2, r3, #32
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	3301      	adds	r3, #1
 80060f8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	4a08      	ldr	r2, [pc, #32]	; (8006120 <USB_FlushTxFifo+0x64>)
 80060fe:	4293      	cmp	r3, r2
 8006100:	d901      	bls.n	8006106 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8006102:	2303      	movs	r3, #3
 8006104:	e006      	b.n	8006114 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	691b      	ldr	r3, [r3, #16]
 800610a:	f003 0320 	and.w	r3, r3, #32
 800610e:	2b20      	cmp	r3, #32
 8006110:	d0f0      	beq.n	80060f4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8006112:	2300      	movs	r3, #0
}
 8006114:	4618      	mov	r0, r3
 8006116:	3714      	adds	r7, #20
 8006118:	46bd      	mov	sp, r7
 800611a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800611e:	4770      	bx	lr
 8006120:	00030d40 	.word	0x00030d40

08006124 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006124:	b480      	push	{r7}
 8006126:	b085      	sub	sp, #20
 8006128:	af00      	add	r7, sp, #0
 800612a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800612c:	2300      	movs	r3, #0
 800612e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	3301      	adds	r3, #1
 8006134:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	4a11      	ldr	r2, [pc, #68]	; (8006180 <USB_FlushRxFifo+0x5c>)
 800613a:	4293      	cmp	r3, r2
 800613c:	d901      	bls.n	8006142 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800613e:	2303      	movs	r3, #3
 8006140:	e018      	b.n	8006174 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	691b      	ldr	r3, [r3, #16]
 8006146:	2b00      	cmp	r3, #0
 8006148:	daf2      	bge.n	8006130 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800614a:	2300      	movs	r3, #0
 800614c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	2210      	movs	r2, #16
 8006152:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	3301      	adds	r3, #1
 8006158:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	4a08      	ldr	r2, [pc, #32]	; (8006180 <USB_FlushRxFifo+0x5c>)
 800615e:	4293      	cmp	r3, r2
 8006160:	d901      	bls.n	8006166 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8006162:	2303      	movs	r3, #3
 8006164:	e006      	b.n	8006174 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	691b      	ldr	r3, [r3, #16]
 800616a:	f003 0310 	and.w	r3, r3, #16
 800616e:	2b10      	cmp	r3, #16
 8006170:	d0f0      	beq.n	8006154 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006172:	2300      	movs	r3, #0
}
 8006174:	4618      	mov	r0, r3
 8006176:	3714      	adds	r7, #20
 8006178:	46bd      	mov	sp, r7
 800617a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800617e:	4770      	bx	lr
 8006180:	00030d40 	.word	0x00030d40

08006184 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006184:	b480      	push	{r7}
 8006186:	b085      	sub	sp, #20
 8006188:	af00      	add	r7, sp, #0
 800618a:	6078      	str	r0, [r7, #4]
 800618c:	460b      	mov	r3, r1
 800618e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800619a:	681a      	ldr	r2, [r3, #0]
 800619c:	78fb      	ldrb	r3, [r7, #3]
 800619e:	68f9      	ldr	r1, [r7, #12]
 80061a0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80061a4:	4313      	orrs	r3, r2
 80061a6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80061a8:	2300      	movs	r3, #0
}
 80061aa:	4618      	mov	r0, r3
 80061ac:	3714      	adds	r7, #20
 80061ae:	46bd      	mov	sp, r7
 80061b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b4:	4770      	bx	lr

080061b6 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80061b6:	b480      	push	{r7}
 80061b8:	b087      	sub	sp, #28
 80061ba:	af00      	add	r7, sp, #0
 80061bc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80061c2:	693b      	ldr	r3, [r7, #16]
 80061c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80061c8:	689b      	ldr	r3, [r3, #8]
 80061ca:	f003 0306 	and.w	r3, r3, #6
 80061ce:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d102      	bne.n	80061dc <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80061d6:	2300      	movs	r3, #0
 80061d8:	75fb      	strb	r3, [r7, #23]
 80061da:	e00a      	b.n	80061f2 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	2b02      	cmp	r3, #2
 80061e0:	d002      	beq.n	80061e8 <USB_GetDevSpeed+0x32>
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	2b06      	cmp	r3, #6
 80061e6:	d102      	bne.n	80061ee <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80061e8:	2302      	movs	r3, #2
 80061ea:	75fb      	strb	r3, [r7, #23]
 80061ec:	e001      	b.n	80061f2 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80061ee:	230f      	movs	r3, #15
 80061f0:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80061f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80061f4:	4618      	mov	r0, r3
 80061f6:	371c      	adds	r7, #28
 80061f8:	46bd      	mov	sp, r7
 80061fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061fe:	4770      	bx	lr

08006200 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006200:	b480      	push	{r7}
 8006202:	b085      	sub	sp, #20
 8006204:	af00      	add	r7, sp, #0
 8006206:	6078      	str	r0, [r7, #4]
 8006208:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800620e:	683b      	ldr	r3, [r7, #0]
 8006210:	781b      	ldrb	r3, [r3, #0]
 8006212:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006214:	683b      	ldr	r3, [r7, #0]
 8006216:	785b      	ldrb	r3, [r3, #1]
 8006218:	2b01      	cmp	r3, #1
 800621a:	d13a      	bne.n	8006292 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006222:	69da      	ldr	r2, [r3, #28]
 8006224:	683b      	ldr	r3, [r7, #0]
 8006226:	781b      	ldrb	r3, [r3, #0]
 8006228:	f003 030f 	and.w	r3, r3, #15
 800622c:	2101      	movs	r1, #1
 800622e:	fa01 f303 	lsl.w	r3, r1, r3
 8006232:	b29b      	uxth	r3, r3
 8006234:	68f9      	ldr	r1, [r7, #12]
 8006236:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800623a:	4313      	orrs	r3, r2
 800623c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800623e:	68bb      	ldr	r3, [r7, #8]
 8006240:	015a      	lsls	r2, r3, #5
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	4413      	add	r3, r2
 8006246:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006250:	2b00      	cmp	r3, #0
 8006252:	d155      	bne.n	8006300 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006254:	68bb      	ldr	r3, [r7, #8]
 8006256:	015a      	lsls	r2, r3, #5
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	4413      	add	r3, r2
 800625c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006260:	681a      	ldr	r2, [r3, #0]
 8006262:	683b      	ldr	r3, [r7, #0]
 8006264:	68db      	ldr	r3, [r3, #12]
 8006266:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800626a:	683b      	ldr	r3, [r7, #0]
 800626c:	791b      	ldrb	r3, [r3, #4]
 800626e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006270:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006272:	68bb      	ldr	r3, [r7, #8]
 8006274:	059b      	lsls	r3, r3, #22
 8006276:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006278:	4313      	orrs	r3, r2
 800627a:	68ba      	ldr	r2, [r7, #8]
 800627c:	0151      	lsls	r1, r2, #5
 800627e:	68fa      	ldr	r2, [r7, #12]
 8006280:	440a      	add	r2, r1
 8006282:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006286:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800628a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800628e:	6013      	str	r3, [r2, #0]
 8006290:	e036      	b.n	8006300 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006298:	69da      	ldr	r2, [r3, #28]
 800629a:	683b      	ldr	r3, [r7, #0]
 800629c:	781b      	ldrb	r3, [r3, #0]
 800629e:	f003 030f 	and.w	r3, r3, #15
 80062a2:	2101      	movs	r1, #1
 80062a4:	fa01 f303 	lsl.w	r3, r1, r3
 80062a8:	041b      	lsls	r3, r3, #16
 80062aa:	68f9      	ldr	r1, [r7, #12]
 80062ac:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80062b0:	4313      	orrs	r3, r2
 80062b2:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80062b4:	68bb      	ldr	r3, [r7, #8]
 80062b6:	015a      	lsls	r2, r3, #5
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	4413      	add	r3, r2
 80062bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d11a      	bne.n	8006300 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80062ca:	68bb      	ldr	r3, [r7, #8]
 80062cc:	015a      	lsls	r2, r3, #5
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	4413      	add	r3, r2
 80062d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062d6:	681a      	ldr	r2, [r3, #0]
 80062d8:	683b      	ldr	r3, [r7, #0]
 80062da:	68db      	ldr	r3, [r3, #12]
 80062dc:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80062e0:	683b      	ldr	r3, [r7, #0]
 80062e2:	791b      	ldrb	r3, [r3, #4]
 80062e4:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80062e6:	430b      	orrs	r3, r1
 80062e8:	4313      	orrs	r3, r2
 80062ea:	68ba      	ldr	r2, [r7, #8]
 80062ec:	0151      	lsls	r1, r2, #5
 80062ee:	68fa      	ldr	r2, [r7, #12]
 80062f0:	440a      	add	r2, r1
 80062f2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80062f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80062fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80062fe:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8006300:	2300      	movs	r3, #0
}
 8006302:	4618      	mov	r0, r3
 8006304:	3714      	adds	r7, #20
 8006306:	46bd      	mov	sp, r7
 8006308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800630c:	4770      	bx	lr
	...

08006310 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006310:	b480      	push	{r7}
 8006312:	b085      	sub	sp, #20
 8006314:	af00      	add	r7, sp, #0
 8006316:	6078      	str	r0, [r7, #4]
 8006318:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800631e:	683b      	ldr	r3, [r7, #0]
 8006320:	781b      	ldrb	r3, [r3, #0]
 8006322:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8006324:	683b      	ldr	r3, [r7, #0]
 8006326:	785b      	ldrb	r3, [r3, #1]
 8006328:	2b01      	cmp	r3, #1
 800632a:	d161      	bne.n	80063f0 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800632c:	68bb      	ldr	r3, [r7, #8]
 800632e:	015a      	lsls	r2, r3, #5
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	4413      	add	r3, r2
 8006334:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800633e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006342:	d11f      	bne.n	8006384 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8006344:	68bb      	ldr	r3, [r7, #8]
 8006346:	015a      	lsls	r2, r3, #5
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	4413      	add	r3, r2
 800634c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	68ba      	ldr	r2, [r7, #8]
 8006354:	0151      	lsls	r1, r2, #5
 8006356:	68fa      	ldr	r2, [r7, #12]
 8006358:	440a      	add	r2, r1
 800635a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800635e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006362:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8006364:	68bb      	ldr	r3, [r7, #8]
 8006366:	015a      	lsls	r2, r3, #5
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	4413      	add	r3, r2
 800636c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	68ba      	ldr	r2, [r7, #8]
 8006374:	0151      	lsls	r1, r2, #5
 8006376:	68fa      	ldr	r2, [r7, #12]
 8006378:	440a      	add	r2, r1
 800637a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800637e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006382:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800638a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800638c:	683b      	ldr	r3, [r7, #0]
 800638e:	781b      	ldrb	r3, [r3, #0]
 8006390:	f003 030f 	and.w	r3, r3, #15
 8006394:	2101      	movs	r1, #1
 8006396:	fa01 f303 	lsl.w	r3, r1, r3
 800639a:	b29b      	uxth	r3, r3
 800639c:	43db      	mvns	r3, r3
 800639e:	68f9      	ldr	r1, [r7, #12]
 80063a0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80063a4:	4013      	ands	r3, r2
 80063a6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80063ae:	69da      	ldr	r2, [r3, #28]
 80063b0:	683b      	ldr	r3, [r7, #0]
 80063b2:	781b      	ldrb	r3, [r3, #0]
 80063b4:	f003 030f 	and.w	r3, r3, #15
 80063b8:	2101      	movs	r1, #1
 80063ba:	fa01 f303 	lsl.w	r3, r1, r3
 80063be:	b29b      	uxth	r3, r3
 80063c0:	43db      	mvns	r3, r3
 80063c2:	68f9      	ldr	r1, [r7, #12]
 80063c4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80063c8:	4013      	ands	r3, r2
 80063ca:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80063cc:	68bb      	ldr	r3, [r7, #8]
 80063ce:	015a      	lsls	r2, r3, #5
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	4413      	add	r3, r2
 80063d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063d8:	681a      	ldr	r2, [r3, #0]
 80063da:	68bb      	ldr	r3, [r7, #8]
 80063dc:	0159      	lsls	r1, r3, #5
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	440b      	add	r3, r1
 80063e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063e6:	4619      	mov	r1, r3
 80063e8:	4b35      	ldr	r3, [pc, #212]	; (80064c0 <USB_DeactivateEndpoint+0x1b0>)
 80063ea:	4013      	ands	r3, r2
 80063ec:	600b      	str	r3, [r1, #0]
 80063ee:	e060      	b.n	80064b2 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80063f0:	68bb      	ldr	r3, [r7, #8]
 80063f2:	015a      	lsls	r2, r3, #5
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	4413      	add	r3, r2
 80063f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006402:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006406:	d11f      	bne.n	8006448 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8006408:	68bb      	ldr	r3, [r7, #8]
 800640a:	015a      	lsls	r2, r3, #5
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	4413      	add	r3, r2
 8006410:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	68ba      	ldr	r2, [r7, #8]
 8006418:	0151      	lsls	r1, r2, #5
 800641a:	68fa      	ldr	r2, [r7, #12]
 800641c:	440a      	add	r2, r1
 800641e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006422:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006426:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8006428:	68bb      	ldr	r3, [r7, #8]
 800642a:	015a      	lsls	r2, r3, #5
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	4413      	add	r3, r2
 8006430:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	68ba      	ldr	r2, [r7, #8]
 8006438:	0151      	lsls	r1, r2, #5
 800643a:	68fa      	ldr	r2, [r7, #12]
 800643c:	440a      	add	r2, r1
 800643e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006442:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006446:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800644e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006450:	683b      	ldr	r3, [r7, #0]
 8006452:	781b      	ldrb	r3, [r3, #0]
 8006454:	f003 030f 	and.w	r3, r3, #15
 8006458:	2101      	movs	r1, #1
 800645a:	fa01 f303 	lsl.w	r3, r1, r3
 800645e:	041b      	lsls	r3, r3, #16
 8006460:	43db      	mvns	r3, r3
 8006462:	68f9      	ldr	r1, [r7, #12]
 8006464:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006468:	4013      	ands	r3, r2
 800646a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006472:	69da      	ldr	r2, [r3, #28]
 8006474:	683b      	ldr	r3, [r7, #0]
 8006476:	781b      	ldrb	r3, [r3, #0]
 8006478:	f003 030f 	and.w	r3, r3, #15
 800647c:	2101      	movs	r1, #1
 800647e:	fa01 f303 	lsl.w	r3, r1, r3
 8006482:	041b      	lsls	r3, r3, #16
 8006484:	43db      	mvns	r3, r3
 8006486:	68f9      	ldr	r1, [r7, #12]
 8006488:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800648c:	4013      	ands	r3, r2
 800648e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8006490:	68bb      	ldr	r3, [r7, #8]
 8006492:	015a      	lsls	r2, r3, #5
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	4413      	add	r3, r2
 8006498:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800649c:	681a      	ldr	r2, [r3, #0]
 800649e:	68bb      	ldr	r3, [r7, #8]
 80064a0:	0159      	lsls	r1, r3, #5
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	440b      	add	r3, r1
 80064a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064aa:	4619      	mov	r1, r3
 80064ac:	4b05      	ldr	r3, [pc, #20]	; (80064c4 <USB_DeactivateEndpoint+0x1b4>)
 80064ae:	4013      	ands	r3, r2
 80064b0:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80064b2:	2300      	movs	r3, #0
}
 80064b4:	4618      	mov	r0, r3
 80064b6:	3714      	adds	r7, #20
 80064b8:	46bd      	mov	sp, r7
 80064ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064be:	4770      	bx	lr
 80064c0:	ec337800 	.word	0xec337800
 80064c4:	eff37800 	.word	0xeff37800

080064c8 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80064c8:	b580      	push	{r7, lr}
 80064ca:	b08a      	sub	sp, #40	; 0x28
 80064cc:	af02      	add	r7, sp, #8
 80064ce:	60f8      	str	r0, [r7, #12]
 80064d0:	60b9      	str	r1, [r7, #8]
 80064d2:	4613      	mov	r3, r2
 80064d4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80064da:	68bb      	ldr	r3, [r7, #8]
 80064dc:	781b      	ldrb	r3, [r3, #0]
 80064de:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80064e0:	68bb      	ldr	r3, [r7, #8]
 80064e2:	785b      	ldrb	r3, [r3, #1]
 80064e4:	2b01      	cmp	r3, #1
 80064e6:	f040 815c 	bne.w	80067a2 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80064ea:	68bb      	ldr	r3, [r7, #8]
 80064ec:	699b      	ldr	r3, [r3, #24]
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d132      	bne.n	8006558 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80064f2:	69bb      	ldr	r3, [r7, #24]
 80064f4:	015a      	lsls	r2, r3, #5
 80064f6:	69fb      	ldr	r3, [r7, #28]
 80064f8:	4413      	add	r3, r2
 80064fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064fe:	691b      	ldr	r3, [r3, #16]
 8006500:	69ba      	ldr	r2, [r7, #24]
 8006502:	0151      	lsls	r1, r2, #5
 8006504:	69fa      	ldr	r2, [r7, #28]
 8006506:	440a      	add	r2, r1
 8006508:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800650c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006510:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006514:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006516:	69bb      	ldr	r3, [r7, #24]
 8006518:	015a      	lsls	r2, r3, #5
 800651a:	69fb      	ldr	r3, [r7, #28]
 800651c:	4413      	add	r3, r2
 800651e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006522:	691b      	ldr	r3, [r3, #16]
 8006524:	69ba      	ldr	r2, [r7, #24]
 8006526:	0151      	lsls	r1, r2, #5
 8006528:	69fa      	ldr	r2, [r7, #28]
 800652a:	440a      	add	r2, r1
 800652c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006530:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006534:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006536:	69bb      	ldr	r3, [r7, #24]
 8006538:	015a      	lsls	r2, r3, #5
 800653a:	69fb      	ldr	r3, [r7, #28]
 800653c:	4413      	add	r3, r2
 800653e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006542:	691b      	ldr	r3, [r3, #16]
 8006544:	69ba      	ldr	r2, [r7, #24]
 8006546:	0151      	lsls	r1, r2, #5
 8006548:	69fa      	ldr	r2, [r7, #28]
 800654a:	440a      	add	r2, r1
 800654c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006550:	0cdb      	lsrs	r3, r3, #19
 8006552:	04db      	lsls	r3, r3, #19
 8006554:	6113      	str	r3, [r2, #16]
 8006556:	e074      	b.n	8006642 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006558:	69bb      	ldr	r3, [r7, #24]
 800655a:	015a      	lsls	r2, r3, #5
 800655c:	69fb      	ldr	r3, [r7, #28]
 800655e:	4413      	add	r3, r2
 8006560:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006564:	691b      	ldr	r3, [r3, #16]
 8006566:	69ba      	ldr	r2, [r7, #24]
 8006568:	0151      	lsls	r1, r2, #5
 800656a:	69fa      	ldr	r2, [r7, #28]
 800656c:	440a      	add	r2, r1
 800656e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006572:	0cdb      	lsrs	r3, r3, #19
 8006574:	04db      	lsls	r3, r3, #19
 8006576:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006578:	69bb      	ldr	r3, [r7, #24]
 800657a:	015a      	lsls	r2, r3, #5
 800657c:	69fb      	ldr	r3, [r7, #28]
 800657e:	4413      	add	r3, r2
 8006580:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006584:	691b      	ldr	r3, [r3, #16]
 8006586:	69ba      	ldr	r2, [r7, #24]
 8006588:	0151      	lsls	r1, r2, #5
 800658a:	69fa      	ldr	r2, [r7, #28]
 800658c:	440a      	add	r2, r1
 800658e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006592:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006596:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800659a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800659c:	69bb      	ldr	r3, [r7, #24]
 800659e:	015a      	lsls	r2, r3, #5
 80065a0:	69fb      	ldr	r3, [r7, #28]
 80065a2:	4413      	add	r3, r2
 80065a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80065a8:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80065aa:	68bb      	ldr	r3, [r7, #8]
 80065ac:	6999      	ldr	r1, [r3, #24]
 80065ae:	68bb      	ldr	r3, [r7, #8]
 80065b0:	68db      	ldr	r3, [r3, #12]
 80065b2:	440b      	add	r3, r1
 80065b4:	1e59      	subs	r1, r3, #1
 80065b6:	68bb      	ldr	r3, [r7, #8]
 80065b8:	68db      	ldr	r3, [r3, #12]
 80065ba:	fbb1 f3f3 	udiv	r3, r1, r3
 80065be:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80065c0:	4b9d      	ldr	r3, [pc, #628]	; (8006838 <USB_EPStartXfer+0x370>)
 80065c2:	400b      	ands	r3, r1
 80065c4:	69b9      	ldr	r1, [r7, #24]
 80065c6:	0148      	lsls	r0, r1, #5
 80065c8:	69f9      	ldr	r1, [r7, #28]
 80065ca:	4401      	add	r1, r0
 80065cc:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80065d0:	4313      	orrs	r3, r2
 80065d2:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80065d4:	69bb      	ldr	r3, [r7, #24]
 80065d6:	015a      	lsls	r2, r3, #5
 80065d8:	69fb      	ldr	r3, [r7, #28]
 80065da:	4413      	add	r3, r2
 80065dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80065e0:	691a      	ldr	r2, [r3, #16]
 80065e2:	68bb      	ldr	r3, [r7, #8]
 80065e4:	699b      	ldr	r3, [r3, #24]
 80065e6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80065ea:	69b9      	ldr	r1, [r7, #24]
 80065ec:	0148      	lsls	r0, r1, #5
 80065ee:	69f9      	ldr	r1, [r7, #28]
 80065f0:	4401      	add	r1, r0
 80065f2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80065f6:	4313      	orrs	r3, r2
 80065f8:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80065fa:	68bb      	ldr	r3, [r7, #8]
 80065fc:	791b      	ldrb	r3, [r3, #4]
 80065fe:	2b01      	cmp	r3, #1
 8006600:	d11f      	bne.n	8006642 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8006602:	69bb      	ldr	r3, [r7, #24]
 8006604:	015a      	lsls	r2, r3, #5
 8006606:	69fb      	ldr	r3, [r7, #28]
 8006608:	4413      	add	r3, r2
 800660a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800660e:	691b      	ldr	r3, [r3, #16]
 8006610:	69ba      	ldr	r2, [r7, #24]
 8006612:	0151      	lsls	r1, r2, #5
 8006614:	69fa      	ldr	r2, [r7, #28]
 8006616:	440a      	add	r2, r1
 8006618:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800661c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8006620:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8006622:	69bb      	ldr	r3, [r7, #24]
 8006624:	015a      	lsls	r2, r3, #5
 8006626:	69fb      	ldr	r3, [r7, #28]
 8006628:	4413      	add	r3, r2
 800662a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800662e:	691b      	ldr	r3, [r3, #16]
 8006630:	69ba      	ldr	r2, [r7, #24]
 8006632:	0151      	lsls	r1, r2, #5
 8006634:	69fa      	ldr	r2, [r7, #28]
 8006636:	440a      	add	r2, r1
 8006638:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800663c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006640:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8006642:	79fb      	ldrb	r3, [r7, #7]
 8006644:	2b01      	cmp	r3, #1
 8006646:	d14b      	bne.n	80066e0 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006648:	68bb      	ldr	r3, [r7, #8]
 800664a:	695b      	ldr	r3, [r3, #20]
 800664c:	2b00      	cmp	r3, #0
 800664e:	d009      	beq.n	8006664 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006650:	69bb      	ldr	r3, [r7, #24]
 8006652:	015a      	lsls	r2, r3, #5
 8006654:	69fb      	ldr	r3, [r7, #28]
 8006656:	4413      	add	r3, r2
 8006658:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800665c:	461a      	mov	r2, r3
 800665e:	68bb      	ldr	r3, [r7, #8]
 8006660:	695b      	ldr	r3, [r3, #20]
 8006662:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8006664:	68bb      	ldr	r3, [r7, #8]
 8006666:	791b      	ldrb	r3, [r3, #4]
 8006668:	2b01      	cmp	r3, #1
 800666a:	d128      	bne.n	80066be <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800666c:	69fb      	ldr	r3, [r7, #28]
 800666e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006672:	689b      	ldr	r3, [r3, #8]
 8006674:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006678:	2b00      	cmp	r3, #0
 800667a:	d110      	bne.n	800669e <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800667c:	69bb      	ldr	r3, [r7, #24]
 800667e:	015a      	lsls	r2, r3, #5
 8006680:	69fb      	ldr	r3, [r7, #28]
 8006682:	4413      	add	r3, r2
 8006684:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	69ba      	ldr	r2, [r7, #24]
 800668c:	0151      	lsls	r1, r2, #5
 800668e:	69fa      	ldr	r2, [r7, #28]
 8006690:	440a      	add	r2, r1
 8006692:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006696:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800669a:	6013      	str	r3, [r2, #0]
 800669c:	e00f      	b.n	80066be <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800669e:	69bb      	ldr	r3, [r7, #24]
 80066a0:	015a      	lsls	r2, r3, #5
 80066a2:	69fb      	ldr	r3, [r7, #28]
 80066a4:	4413      	add	r3, r2
 80066a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	69ba      	ldr	r2, [r7, #24]
 80066ae:	0151      	lsls	r1, r2, #5
 80066b0:	69fa      	ldr	r2, [r7, #28]
 80066b2:	440a      	add	r2, r1
 80066b4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80066b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80066bc:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80066be:	69bb      	ldr	r3, [r7, #24]
 80066c0:	015a      	lsls	r2, r3, #5
 80066c2:	69fb      	ldr	r3, [r7, #28]
 80066c4:	4413      	add	r3, r2
 80066c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	69ba      	ldr	r2, [r7, #24]
 80066ce:	0151      	lsls	r1, r2, #5
 80066d0:	69fa      	ldr	r2, [r7, #28]
 80066d2:	440a      	add	r2, r1
 80066d4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80066d8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80066dc:	6013      	str	r3, [r2, #0]
 80066de:	e133      	b.n	8006948 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80066e0:	69bb      	ldr	r3, [r7, #24]
 80066e2:	015a      	lsls	r2, r3, #5
 80066e4:	69fb      	ldr	r3, [r7, #28]
 80066e6:	4413      	add	r3, r2
 80066e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	69ba      	ldr	r2, [r7, #24]
 80066f0:	0151      	lsls	r1, r2, #5
 80066f2:	69fa      	ldr	r2, [r7, #28]
 80066f4:	440a      	add	r2, r1
 80066f6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80066fa:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80066fe:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006700:	68bb      	ldr	r3, [r7, #8]
 8006702:	791b      	ldrb	r3, [r3, #4]
 8006704:	2b01      	cmp	r3, #1
 8006706:	d015      	beq.n	8006734 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8006708:	68bb      	ldr	r3, [r7, #8]
 800670a:	699b      	ldr	r3, [r3, #24]
 800670c:	2b00      	cmp	r3, #0
 800670e:	f000 811b 	beq.w	8006948 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8006712:	69fb      	ldr	r3, [r7, #28]
 8006714:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006718:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800671a:	68bb      	ldr	r3, [r7, #8]
 800671c:	781b      	ldrb	r3, [r3, #0]
 800671e:	f003 030f 	and.w	r3, r3, #15
 8006722:	2101      	movs	r1, #1
 8006724:	fa01 f303 	lsl.w	r3, r1, r3
 8006728:	69f9      	ldr	r1, [r7, #28]
 800672a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800672e:	4313      	orrs	r3, r2
 8006730:	634b      	str	r3, [r1, #52]	; 0x34
 8006732:	e109      	b.n	8006948 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006734:	69fb      	ldr	r3, [r7, #28]
 8006736:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800673a:	689b      	ldr	r3, [r3, #8]
 800673c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006740:	2b00      	cmp	r3, #0
 8006742:	d110      	bne.n	8006766 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006744:	69bb      	ldr	r3, [r7, #24]
 8006746:	015a      	lsls	r2, r3, #5
 8006748:	69fb      	ldr	r3, [r7, #28]
 800674a:	4413      	add	r3, r2
 800674c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	69ba      	ldr	r2, [r7, #24]
 8006754:	0151      	lsls	r1, r2, #5
 8006756:	69fa      	ldr	r2, [r7, #28]
 8006758:	440a      	add	r2, r1
 800675a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800675e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006762:	6013      	str	r3, [r2, #0]
 8006764:	e00f      	b.n	8006786 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006766:	69bb      	ldr	r3, [r7, #24]
 8006768:	015a      	lsls	r2, r3, #5
 800676a:	69fb      	ldr	r3, [r7, #28]
 800676c:	4413      	add	r3, r2
 800676e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	69ba      	ldr	r2, [r7, #24]
 8006776:	0151      	lsls	r1, r2, #5
 8006778:	69fa      	ldr	r2, [r7, #28]
 800677a:	440a      	add	r2, r1
 800677c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006780:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006784:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8006786:	68bb      	ldr	r3, [r7, #8]
 8006788:	6919      	ldr	r1, [r3, #16]
 800678a:	68bb      	ldr	r3, [r7, #8]
 800678c:	781a      	ldrb	r2, [r3, #0]
 800678e:	68bb      	ldr	r3, [r7, #8]
 8006790:	699b      	ldr	r3, [r3, #24]
 8006792:	b298      	uxth	r0, r3
 8006794:	79fb      	ldrb	r3, [r7, #7]
 8006796:	9300      	str	r3, [sp, #0]
 8006798:	4603      	mov	r3, r0
 800679a:	68f8      	ldr	r0, [r7, #12]
 800679c:	f000 fade 	bl	8006d5c <USB_WritePacket>
 80067a0:	e0d2      	b.n	8006948 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80067a2:	69bb      	ldr	r3, [r7, #24]
 80067a4:	015a      	lsls	r2, r3, #5
 80067a6:	69fb      	ldr	r3, [r7, #28]
 80067a8:	4413      	add	r3, r2
 80067aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067ae:	691b      	ldr	r3, [r3, #16]
 80067b0:	69ba      	ldr	r2, [r7, #24]
 80067b2:	0151      	lsls	r1, r2, #5
 80067b4:	69fa      	ldr	r2, [r7, #28]
 80067b6:	440a      	add	r2, r1
 80067b8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80067bc:	0cdb      	lsrs	r3, r3, #19
 80067be:	04db      	lsls	r3, r3, #19
 80067c0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80067c2:	69bb      	ldr	r3, [r7, #24]
 80067c4:	015a      	lsls	r2, r3, #5
 80067c6:	69fb      	ldr	r3, [r7, #28]
 80067c8:	4413      	add	r3, r2
 80067ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067ce:	691b      	ldr	r3, [r3, #16]
 80067d0:	69ba      	ldr	r2, [r7, #24]
 80067d2:	0151      	lsls	r1, r2, #5
 80067d4:	69fa      	ldr	r2, [r7, #28]
 80067d6:	440a      	add	r2, r1
 80067d8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80067dc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80067e0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80067e4:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 80067e6:	68bb      	ldr	r3, [r7, #8]
 80067e8:	699b      	ldr	r3, [r3, #24]
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d126      	bne.n	800683c <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80067ee:	69bb      	ldr	r3, [r7, #24]
 80067f0:	015a      	lsls	r2, r3, #5
 80067f2:	69fb      	ldr	r3, [r7, #28]
 80067f4:	4413      	add	r3, r2
 80067f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067fa:	691a      	ldr	r2, [r3, #16]
 80067fc:	68bb      	ldr	r3, [r7, #8]
 80067fe:	68db      	ldr	r3, [r3, #12]
 8006800:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006804:	69b9      	ldr	r1, [r7, #24]
 8006806:	0148      	lsls	r0, r1, #5
 8006808:	69f9      	ldr	r1, [r7, #28]
 800680a:	4401      	add	r1, r0
 800680c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006810:	4313      	orrs	r3, r2
 8006812:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006814:	69bb      	ldr	r3, [r7, #24]
 8006816:	015a      	lsls	r2, r3, #5
 8006818:	69fb      	ldr	r3, [r7, #28]
 800681a:	4413      	add	r3, r2
 800681c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006820:	691b      	ldr	r3, [r3, #16]
 8006822:	69ba      	ldr	r2, [r7, #24]
 8006824:	0151      	lsls	r1, r2, #5
 8006826:	69fa      	ldr	r2, [r7, #28]
 8006828:	440a      	add	r2, r1
 800682a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800682e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006832:	6113      	str	r3, [r2, #16]
 8006834:	e03a      	b.n	80068ac <USB_EPStartXfer+0x3e4>
 8006836:	bf00      	nop
 8006838:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800683c:	68bb      	ldr	r3, [r7, #8]
 800683e:	699a      	ldr	r2, [r3, #24]
 8006840:	68bb      	ldr	r3, [r7, #8]
 8006842:	68db      	ldr	r3, [r3, #12]
 8006844:	4413      	add	r3, r2
 8006846:	1e5a      	subs	r2, r3, #1
 8006848:	68bb      	ldr	r3, [r7, #8]
 800684a:	68db      	ldr	r3, [r3, #12]
 800684c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006850:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8006852:	68bb      	ldr	r3, [r7, #8]
 8006854:	68db      	ldr	r3, [r3, #12]
 8006856:	8afa      	ldrh	r2, [r7, #22]
 8006858:	fb03 f202 	mul.w	r2, r3, r2
 800685c:	68bb      	ldr	r3, [r7, #8]
 800685e:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8006860:	69bb      	ldr	r3, [r7, #24]
 8006862:	015a      	lsls	r2, r3, #5
 8006864:	69fb      	ldr	r3, [r7, #28]
 8006866:	4413      	add	r3, r2
 8006868:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800686c:	691a      	ldr	r2, [r3, #16]
 800686e:	8afb      	ldrh	r3, [r7, #22]
 8006870:	04d9      	lsls	r1, r3, #19
 8006872:	4b38      	ldr	r3, [pc, #224]	; (8006954 <USB_EPStartXfer+0x48c>)
 8006874:	400b      	ands	r3, r1
 8006876:	69b9      	ldr	r1, [r7, #24]
 8006878:	0148      	lsls	r0, r1, #5
 800687a:	69f9      	ldr	r1, [r7, #28]
 800687c:	4401      	add	r1, r0
 800687e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006882:	4313      	orrs	r3, r2
 8006884:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8006886:	69bb      	ldr	r3, [r7, #24]
 8006888:	015a      	lsls	r2, r3, #5
 800688a:	69fb      	ldr	r3, [r7, #28]
 800688c:	4413      	add	r3, r2
 800688e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006892:	691a      	ldr	r2, [r3, #16]
 8006894:	68bb      	ldr	r3, [r7, #8]
 8006896:	69db      	ldr	r3, [r3, #28]
 8006898:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800689c:	69b9      	ldr	r1, [r7, #24]
 800689e:	0148      	lsls	r0, r1, #5
 80068a0:	69f9      	ldr	r1, [r7, #28]
 80068a2:	4401      	add	r1, r0
 80068a4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80068a8:	4313      	orrs	r3, r2
 80068aa:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80068ac:	79fb      	ldrb	r3, [r7, #7]
 80068ae:	2b01      	cmp	r3, #1
 80068b0:	d10d      	bne.n	80068ce <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80068b2:	68bb      	ldr	r3, [r7, #8]
 80068b4:	691b      	ldr	r3, [r3, #16]
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d009      	beq.n	80068ce <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80068ba:	68bb      	ldr	r3, [r7, #8]
 80068bc:	6919      	ldr	r1, [r3, #16]
 80068be:	69bb      	ldr	r3, [r7, #24]
 80068c0:	015a      	lsls	r2, r3, #5
 80068c2:	69fb      	ldr	r3, [r7, #28]
 80068c4:	4413      	add	r3, r2
 80068c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80068ca:	460a      	mov	r2, r1
 80068cc:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80068ce:	68bb      	ldr	r3, [r7, #8]
 80068d0:	791b      	ldrb	r3, [r3, #4]
 80068d2:	2b01      	cmp	r3, #1
 80068d4:	d128      	bne.n	8006928 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80068d6:	69fb      	ldr	r3, [r7, #28]
 80068d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80068dc:	689b      	ldr	r3, [r3, #8]
 80068de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d110      	bne.n	8006908 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80068e6:	69bb      	ldr	r3, [r7, #24]
 80068e8:	015a      	lsls	r2, r3, #5
 80068ea:	69fb      	ldr	r3, [r7, #28]
 80068ec:	4413      	add	r3, r2
 80068ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	69ba      	ldr	r2, [r7, #24]
 80068f6:	0151      	lsls	r1, r2, #5
 80068f8:	69fa      	ldr	r2, [r7, #28]
 80068fa:	440a      	add	r2, r1
 80068fc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006900:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006904:	6013      	str	r3, [r2, #0]
 8006906:	e00f      	b.n	8006928 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8006908:	69bb      	ldr	r3, [r7, #24]
 800690a:	015a      	lsls	r2, r3, #5
 800690c:	69fb      	ldr	r3, [r7, #28]
 800690e:	4413      	add	r3, r2
 8006910:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	69ba      	ldr	r2, [r7, #24]
 8006918:	0151      	lsls	r1, r2, #5
 800691a:	69fa      	ldr	r2, [r7, #28]
 800691c:	440a      	add	r2, r1
 800691e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006922:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006926:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006928:	69bb      	ldr	r3, [r7, #24]
 800692a:	015a      	lsls	r2, r3, #5
 800692c:	69fb      	ldr	r3, [r7, #28]
 800692e:	4413      	add	r3, r2
 8006930:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	69ba      	ldr	r2, [r7, #24]
 8006938:	0151      	lsls	r1, r2, #5
 800693a:	69fa      	ldr	r2, [r7, #28]
 800693c:	440a      	add	r2, r1
 800693e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006942:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006946:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006948:	2300      	movs	r3, #0
}
 800694a:	4618      	mov	r0, r3
 800694c:	3720      	adds	r7, #32
 800694e:	46bd      	mov	sp, r7
 8006950:	bd80      	pop	{r7, pc}
 8006952:	bf00      	nop
 8006954:	1ff80000 	.word	0x1ff80000

08006958 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006958:	b480      	push	{r7}
 800695a:	b087      	sub	sp, #28
 800695c:	af00      	add	r7, sp, #0
 800695e:	60f8      	str	r0, [r7, #12]
 8006960:	60b9      	str	r1, [r7, #8]
 8006962:	4613      	mov	r3, r2
 8006964:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800696a:	68bb      	ldr	r3, [r7, #8]
 800696c:	781b      	ldrb	r3, [r3, #0]
 800696e:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006970:	68bb      	ldr	r3, [r7, #8]
 8006972:	785b      	ldrb	r3, [r3, #1]
 8006974:	2b01      	cmp	r3, #1
 8006976:	f040 80ce 	bne.w	8006b16 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800697a:	68bb      	ldr	r3, [r7, #8]
 800697c:	699b      	ldr	r3, [r3, #24]
 800697e:	2b00      	cmp	r3, #0
 8006980:	d132      	bne.n	80069e8 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006982:	693b      	ldr	r3, [r7, #16]
 8006984:	015a      	lsls	r2, r3, #5
 8006986:	697b      	ldr	r3, [r7, #20]
 8006988:	4413      	add	r3, r2
 800698a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800698e:	691b      	ldr	r3, [r3, #16]
 8006990:	693a      	ldr	r2, [r7, #16]
 8006992:	0151      	lsls	r1, r2, #5
 8006994:	697a      	ldr	r2, [r7, #20]
 8006996:	440a      	add	r2, r1
 8006998:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800699c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80069a0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80069a4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80069a6:	693b      	ldr	r3, [r7, #16]
 80069a8:	015a      	lsls	r2, r3, #5
 80069aa:	697b      	ldr	r3, [r7, #20]
 80069ac:	4413      	add	r3, r2
 80069ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80069b2:	691b      	ldr	r3, [r3, #16]
 80069b4:	693a      	ldr	r2, [r7, #16]
 80069b6:	0151      	lsls	r1, r2, #5
 80069b8:	697a      	ldr	r2, [r7, #20]
 80069ba:	440a      	add	r2, r1
 80069bc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80069c0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80069c4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80069c6:	693b      	ldr	r3, [r7, #16]
 80069c8:	015a      	lsls	r2, r3, #5
 80069ca:	697b      	ldr	r3, [r7, #20]
 80069cc:	4413      	add	r3, r2
 80069ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80069d2:	691b      	ldr	r3, [r3, #16]
 80069d4:	693a      	ldr	r2, [r7, #16]
 80069d6:	0151      	lsls	r1, r2, #5
 80069d8:	697a      	ldr	r2, [r7, #20]
 80069da:	440a      	add	r2, r1
 80069dc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80069e0:	0cdb      	lsrs	r3, r3, #19
 80069e2:	04db      	lsls	r3, r3, #19
 80069e4:	6113      	str	r3, [r2, #16]
 80069e6:	e04e      	b.n	8006a86 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80069e8:	693b      	ldr	r3, [r7, #16]
 80069ea:	015a      	lsls	r2, r3, #5
 80069ec:	697b      	ldr	r3, [r7, #20]
 80069ee:	4413      	add	r3, r2
 80069f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80069f4:	691b      	ldr	r3, [r3, #16]
 80069f6:	693a      	ldr	r2, [r7, #16]
 80069f8:	0151      	lsls	r1, r2, #5
 80069fa:	697a      	ldr	r2, [r7, #20]
 80069fc:	440a      	add	r2, r1
 80069fe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006a02:	0cdb      	lsrs	r3, r3, #19
 8006a04:	04db      	lsls	r3, r3, #19
 8006a06:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006a08:	693b      	ldr	r3, [r7, #16]
 8006a0a:	015a      	lsls	r2, r3, #5
 8006a0c:	697b      	ldr	r3, [r7, #20]
 8006a0e:	4413      	add	r3, r2
 8006a10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a14:	691b      	ldr	r3, [r3, #16]
 8006a16:	693a      	ldr	r2, [r7, #16]
 8006a18:	0151      	lsls	r1, r2, #5
 8006a1a:	697a      	ldr	r2, [r7, #20]
 8006a1c:	440a      	add	r2, r1
 8006a1e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006a22:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006a26:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006a2a:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8006a2c:	68bb      	ldr	r3, [r7, #8]
 8006a2e:	699a      	ldr	r2, [r3, #24]
 8006a30:	68bb      	ldr	r3, [r7, #8]
 8006a32:	68db      	ldr	r3, [r3, #12]
 8006a34:	429a      	cmp	r2, r3
 8006a36:	d903      	bls.n	8006a40 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8006a38:	68bb      	ldr	r3, [r7, #8]
 8006a3a:	68da      	ldr	r2, [r3, #12]
 8006a3c:	68bb      	ldr	r3, [r7, #8]
 8006a3e:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006a40:	693b      	ldr	r3, [r7, #16]
 8006a42:	015a      	lsls	r2, r3, #5
 8006a44:	697b      	ldr	r3, [r7, #20]
 8006a46:	4413      	add	r3, r2
 8006a48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a4c:	691b      	ldr	r3, [r3, #16]
 8006a4e:	693a      	ldr	r2, [r7, #16]
 8006a50:	0151      	lsls	r1, r2, #5
 8006a52:	697a      	ldr	r2, [r7, #20]
 8006a54:	440a      	add	r2, r1
 8006a56:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006a5a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006a5e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006a60:	693b      	ldr	r3, [r7, #16]
 8006a62:	015a      	lsls	r2, r3, #5
 8006a64:	697b      	ldr	r3, [r7, #20]
 8006a66:	4413      	add	r3, r2
 8006a68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a6c:	691a      	ldr	r2, [r3, #16]
 8006a6e:	68bb      	ldr	r3, [r7, #8]
 8006a70:	699b      	ldr	r3, [r3, #24]
 8006a72:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006a76:	6939      	ldr	r1, [r7, #16]
 8006a78:	0148      	lsls	r0, r1, #5
 8006a7a:	6979      	ldr	r1, [r7, #20]
 8006a7c:	4401      	add	r1, r0
 8006a7e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006a82:	4313      	orrs	r3, r2
 8006a84:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8006a86:	79fb      	ldrb	r3, [r7, #7]
 8006a88:	2b01      	cmp	r3, #1
 8006a8a:	d11e      	bne.n	8006aca <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006a8c:	68bb      	ldr	r3, [r7, #8]
 8006a8e:	695b      	ldr	r3, [r3, #20]
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d009      	beq.n	8006aa8 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006a94:	693b      	ldr	r3, [r7, #16]
 8006a96:	015a      	lsls	r2, r3, #5
 8006a98:	697b      	ldr	r3, [r7, #20]
 8006a9a:	4413      	add	r3, r2
 8006a9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006aa0:	461a      	mov	r2, r3
 8006aa2:	68bb      	ldr	r3, [r7, #8]
 8006aa4:	695b      	ldr	r3, [r3, #20]
 8006aa6:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006aa8:	693b      	ldr	r3, [r7, #16]
 8006aaa:	015a      	lsls	r2, r3, #5
 8006aac:	697b      	ldr	r3, [r7, #20]
 8006aae:	4413      	add	r3, r2
 8006ab0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	693a      	ldr	r2, [r7, #16]
 8006ab8:	0151      	lsls	r1, r2, #5
 8006aba:	697a      	ldr	r2, [r7, #20]
 8006abc:	440a      	add	r2, r1
 8006abe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006ac2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006ac6:	6013      	str	r3, [r2, #0]
 8006ac8:	e097      	b.n	8006bfa <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006aca:	693b      	ldr	r3, [r7, #16]
 8006acc:	015a      	lsls	r2, r3, #5
 8006ace:	697b      	ldr	r3, [r7, #20]
 8006ad0:	4413      	add	r3, r2
 8006ad2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	693a      	ldr	r2, [r7, #16]
 8006ada:	0151      	lsls	r1, r2, #5
 8006adc:	697a      	ldr	r2, [r7, #20]
 8006ade:	440a      	add	r2, r1
 8006ae0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006ae4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006ae8:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8006aea:	68bb      	ldr	r3, [r7, #8]
 8006aec:	699b      	ldr	r3, [r3, #24]
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	f000 8083 	beq.w	8006bfa <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8006af4:	697b      	ldr	r3, [r7, #20]
 8006af6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006afa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006afc:	68bb      	ldr	r3, [r7, #8]
 8006afe:	781b      	ldrb	r3, [r3, #0]
 8006b00:	f003 030f 	and.w	r3, r3, #15
 8006b04:	2101      	movs	r1, #1
 8006b06:	fa01 f303 	lsl.w	r3, r1, r3
 8006b0a:	6979      	ldr	r1, [r7, #20]
 8006b0c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006b10:	4313      	orrs	r3, r2
 8006b12:	634b      	str	r3, [r1, #52]	; 0x34
 8006b14:	e071      	b.n	8006bfa <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006b16:	693b      	ldr	r3, [r7, #16]
 8006b18:	015a      	lsls	r2, r3, #5
 8006b1a:	697b      	ldr	r3, [r7, #20]
 8006b1c:	4413      	add	r3, r2
 8006b1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b22:	691b      	ldr	r3, [r3, #16]
 8006b24:	693a      	ldr	r2, [r7, #16]
 8006b26:	0151      	lsls	r1, r2, #5
 8006b28:	697a      	ldr	r2, [r7, #20]
 8006b2a:	440a      	add	r2, r1
 8006b2c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006b30:	0cdb      	lsrs	r3, r3, #19
 8006b32:	04db      	lsls	r3, r3, #19
 8006b34:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006b36:	693b      	ldr	r3, [r7, #16]
 8006b38:	015a      	lsls	r2, r3, #5
 8006b3a:	697b      	ldr	r3, [r7, #20]
 8006b3c:	4413      	add	r3, r2
 8006b3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b42:	691b      	ldr	r3, [r3, #16]
 8006b44:	693a      	ldr	r2, [r7, #16]
 8006b46:	0151      	lsls	r1, r2, #5
 8006b48:	697a      	ldr	r2, [r7, #20]
 8006b4a:	440a      	add	r2, r1
 8006b4c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006b50:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006b54:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006b58:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8006b5a:	68bb      	ldr	r3, [r7, #8]
 8006b5c:	699b      	ldr	r3, [r3, #24]
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d003      	beq.n	8006b6a <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8006b62:	68bb      	ldr	r3, [r7, #8]
 8006b64:	68da      	ldr	r2, [r3, #12]
 8006b66:	68bb      	ldr	r3, [r7, #8]
 8006b68:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8006b6a:	68bb      	ldr	r3, [r7, #8]
 8006b6c:	68da      	ldr	r2, [r3, #12]
 8006b6e:	68bb      	ldr	r3, [r7, #8]
 8006b70:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006b72:	693b      	ldr	r3, [r7, #16]
 8006b74:	015a      	lsls	r2, r3, #5
 8006b76:	697b      	ldr	r3, [r7, #20]
 8006b78:	4413      	add	r3, r2
 8006b7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b7e:	691b      	ldr	r3, [r3, #16]
 8006b80:	693a      	ldr	r2, [r7, #16]
 8006b82:	0151      	lsls	r1, r2, #5
 8006b84:	697a      	ldr	r2, [r7, #20]
 8006b86:	440a      	add	r2, r1
 8006b88:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006b8c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006b90:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8006b92:	693b      	ldr	r3, [r7, #16]
 8006b94:	015a      	lsls	r2, r3, #5
 8006b96:	697b      	ldr	r3, [r7, #20]
 8006b98:	4413      	add	r3, r2
 8006b9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b9e:	691a      	ldr	r2, [r3, #16]
 8006ba0:	68bb      	ldr	r3, [r7, #8]
 8006ba2:	69db      	ldr	r3, [r3, #28]
 8006ba4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006ba8:	6939      	ldr	r1, [r7, #16]
 8006baa:	0148      	lsls	r0, r1, #5
 8006bac:	6979      	ldr	r1, [r7, #20]
 8006bae:	4401      	add	r1, r0
 8006bb0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006bb4:	4313      	orrs	r3, r2
 8006bb6:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8006bb8:	79fb      	ldrb	r3, [r7, #7]
 8006bba:	2b01      	cmp	r3, #1
 8006bbc:	d10d      	bne.n	8006bda <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8006bbe:	68bb      	ldr	r3, [r7, #8]
 8006bc0:	691b      	ldr	r3, [r3, #16]
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d009      	beq.n	8006bda <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8006bc6:	68bb      	ldr	r3, [r7, #8]
 8006bc8:	6919      	ldr	r1, [r3, #16]
 8006bca:	693b      	ldr	r3, [r7, #16]
 8006bcc:	015a      	lsls	r2, r3, #5
 8006bce:	697b      	ldr	r3, [r7, #20]
 8006bd0:	4413      	add	r3, r2
 8006bd2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006bd6:	460a      	mov	r2, r1
 8006bd8:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006bda:	693b      	ldr	r3, [r7, #16]
 8006bdc:	015a      	lsls	r2, r3, #5
 8006bde:	697b      	ldr	r3, [r7, #20]
 8006be0:	4413      	add	r3, r2
 8006be2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	693a      	ldr	r2, [r7, #16]
 8006bea:	0151      	lsls	r1, r2, #5
 8006bec:	697a      	ldr	r2, [r7, #20]
 8006bee:	440a      	add	r2, r1
 8006bf0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006bf4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006bf8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006bfa:	2300      	movs	r3, #0
}
 8006bfc:	4618      	mov	r0, r3
 8006bfe:	371c      	adds	r7, #28
 8006c00:	46bd      	mov	sp, r7
 8006c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c06:	4770      	bx	lr

08006c08 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006c08:	b480      	push	{r7}
 8006c0a:	b087      	sub	sp, #28
 8006c0c:	af00      	add	r7, sp, #0
 8006c0e:	6078      	str	r0, [r7, #4]
 8006c10:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006c12:	2300      	movs	r3, #0
 8006c14:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8006c16:	2300      	movs	r3, #0
 8006c18:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006c1e:	683b      	ldr	r3, [r7, #0]
 8006c20:	785b      	ldrb	r3, [r3, #1]
 8006c22:	2b01      	cmp	r3, #1
 8006c24:	d14a      	bne.n	8006cbc <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006c26:	683b      	ldr	r3, [r7, #0]
 8006c28:	781b      	ldrb	r3, [r3, #0]
 8006c2a:	015a      	lsls	r2, r3, #5
 8006c2c:	693b      	ldr	r3, [r7, #16]
 8006c2e:	4413      	add	r3, r2
 8006c30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006c3a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006c3e:	f040 8086 	bne.w	8006d4e <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8006c42:	683b      	ldr	r3, [r7, #0]
 8006c44:	781b      	ldrb	r3, [r3, #0]
 8006c46:	015a      	lsls	r2, r3, #5
 8006c48:	693b      	ldr	r3, [r7, #16]
 8006c4a:	4413      	add	r3, r2
 8006c4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	683a      	ldr	r2, [r7, #0]
 8006c54:	7812      	ldrb	r2, [r2, #0]
 8006c56:	0151      	lsls	r1, r2, #5
 8006c58:	693a      	ldr	r2, [r7, #16]
 8006c5a:	440a      	add	r2, r1
 8006c5c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006c60:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006c64:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8006c66:	683b      	ldr	r3, [r7, #0]
 8006c68:	781b      	ldrb	r3, [r3, #0]
 8006c6a:	015a      	lsls	r2, r3, #5
 8006c6c:	693b      	ldr	r3, [r7, #16]
 8006c6e:	4413      	add	r3, r2
 8006c70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	683a      	ldr	r2, [r7, #0]
 8006c78:	7812      	ldrb	r2, [r2, #0]
 8006c7a:	0151      	lsls	r1, r2, #5
 8006c7c:	693a      	ldr	r2, [r7, #16]
 8006c7e:	440a      	add	r2, r1
 8006c80:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006c84:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006c88:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	3301      	adds	r3, #1
 8006c8e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	f242 7210 	movw	r2, #10000	; 0x2710
 8006c96:	4293      	cmp	r3, r2
 8006c98:	d902      	bls.n	8006ca0 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8006c9a:	2301      	movs	r3, #1
 8006c9c:	75fb      	strb	r3, [r7, #23]
          break;
 8006c9e:	e056      	b.n	8006d4e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8006ca0:	683b      	ldr	r3, [r7, #0]
 8006ca2:	781b      	ldrb	r3, [r3, #0]
 8006ca4:	015a      	lsls	r2, r3, #5
 8006ca6:	693b      	ldr	r3, [r7, #16]
 8006ca8:	4413      	add	r3, r2
 8006caa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006cb4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006cb8:	d0e7      	beq.n	8006c8a <USB_EPStopXfer+0x82>
 8006cba:	e048      	b.n	8006d4e <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006cbc:	683b      	ldr	r3, [r7, #0]
 8006cbe:	781b      	ldrb	r3, [r3, #0]
 8006cc0:	015a      	lsls	r2, r3, #5
 8006cc2:	693b      	ldr	r3, [r7, #16]
 8006cc4:	4413      	add	r3, r2
 8006cc6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006cd0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006cd4:	d13b      	bne.n	8006d4e <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8006cd6:	683b      	ldr	r3, [r7, #0]
 8006cd8:	781b      	ldrb	r3, [r3, #0]
 8006cda:	015a      	lsls	r2, r3, #5
 8006cdc:	693b      	ldr	r3, [r7, #16]
 8006cde:	4413      	add	r3, r2
 8006ce0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	683a      	ldr	r2, [r7, #0]
 8006ce8:	7812      	ldrb	r2, [r2, #0]
 8006cea:	0151      	lsls	r1, r2, #5
 8006cec:	693a      	ldr	r2, [r7, #16]
 8006cee:	440a      	add	r2, r1
 8006cf0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006cf4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006cf8:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8006cfa:	683b      	ldr	r3, [r7, #0]
 8006cfc:	781b      	ldrb	r3, [r3, #0]
 8006cfe:	015a      	lsls	r2, r3, #5
 8006d00:	693b      	ldr	r3, [r7, #16]
 8006d02:	4413      	add	r3, r2
 8006d04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	683a      	ldr	r2, [r7, #0]
 8006d0c:	7812      	ldrb	r2, [r2, #0]
 8006d0e:	0151      	lsls	r1, r2, #5
 8006d10:	693a      	ldr	r2, [r7, #16]
 8006d12:	440a      	add	r2, r1
 8006d14:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006d18:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006d1c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	3301      	adds	r3, #1
 8006d22:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	f242 7210 	movw	r2, #10000	; 0x2710
 8006d2a:	4293      	cmp	r3, r2
 8006d2c:	d902      	bls.n	8006d34 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8006d2e:	2301      	movs	r3, #1
 8006d30:	75fb      	strb	r3, [r7, #23]
          break;
 8006d32:	e00c      	b.n	8006d4e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8006d34:	683b      	ldr	r3, [r7, #0]
 8006d36:	781b      	ldrb	r3, [r3, #0]
 8006d38:	015a      	lsls	r2, r3, #5
 8006d3a:	693b      	ldr	r3, [r7, #16]
 8006d3c:	4413      	add	r3, r2
 8006d3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006d48:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006d4c:	d0e7      	beq.n	8006d1e <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8006d4e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006d50:	4618      	mov	r0, r3
 8006d52:	371c      	adds	r7, #28
 8006d54:	46bd      	mov	sp, r7
 8006d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d5a:	4770      	bx	lr

08006d5c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8006d5c:	b480      	push	{r7}
 8006d5e:	b089      	sub	sp, #36	; 0x24
 8006d60:	af00      	add	r7, sp, #0
 8006d62:	60f8      	str	r0, [r7, #12]
 8006d64:	60b9      	str	r1, [r7, #8]
 8006d66:	4611      	mov	r1, r2
 8006d68:	461a      	mov	r2, r3
 8006d6a:	460b      	mov	r3, r1
 8006d6c:	71fb      	strb	r3, [r7, #7]
 8006d6e:	4613      	mov	r3, r2
 8006d70:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8006d76:	68bb      	ldr	r3, [r7, #8]
 8006d78:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8006d7a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d123      	bne.n	8006dca <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8006d82:	88bb      	ldrh	r3, [r7, #4]
 8006d84:	3303      	adds	r3, #3
 8006d86:	089b      	lsrs	r3, r3, #2
 8006d88:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8006d8a:	2300      	movs	r3, #0
 8006d8c:	61bb      	str	r3, [r7, #24]
 8006d8e:	e018      	b.n	8006dc2 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006d90:	79fb      	ldrb	r3, [r7, #7]
 8006d92:	031a      	lsls	r2, r3, #12
 8006d94:	697b      	ldr	r3, [r7, #20]
 8006d96:	4413      	add	r3, r2
 8006d98:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006d9c:	461a      	mov	r2, r3
 8006d9e:	69fb      	ldr	r3, [r7, #28]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006da4:	69fb      	ldr	r3, [r7, #28]
 8006da6:	3301      	adds	r3, #1
 8006da8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006daa:	69fb      	ldr	r3, [r7, #28]
 8006dac:	3301      	adds	r3, #1
 8006dae:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006db0:	69fb      	ldr	r3, [r7, #28]
 8006db2:	3301      	adds	r3, #1
 8006db4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006db6:	69fb      	ldr	r3, [r7, #28]
 8006db8:	3301      	adds	r3, #1
 8006dba:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006dbc:	69bb      	ldr	r3, [r7, #24]
 8006dbe:	3301      	adds	r3, #1
 8006dc0:	61bb      	str	r3, [r7, #24]
 8006dc2:	69ba      	ldr	r2, [r7, #24]
 8006dc4:	693b      	ldr	r3, [r7, #16]
 8006dc6:	429a      	cmp	r2, r3
 8006dc8:	d3e2      	bcc.n	8006d90 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8006dca:	2300      	movs	r3, #0
}
 8006dcc:	4618      	mov	r0, r3
 8006dce:	3724      	adds	r7, #36	; 0x24
 8006dd0:	46bd      	mov	sp, r7
 8006dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd6:	4770      	bx	lr

08006dd8 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006dd8:	b480      	push	{r7}
 8006dda:	b08b      	sub	sp, #44	; 0x2c
 8006ddc:	af00      	add	r7, sp, #0
 8006dde:	60f8      	str	r0, [r7, #12]
 8006de0:	60b9      	str	r1, [r7, #8]
 8006de2:	4613      	mov	r3, r2
 8006de4:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8006dea:	68bb      	ldr	r3, [r7, #8]
 8006dec:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8006dee:	88fb      	ldrh	r3, [r7, #6]
 8006df0:	089b      	lsrs	r3, r3, #2
 8006df2:	b29b      	uxth	r3, r3
 8006df4:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8006df6:	88fb      	ldrh	r3, [r7, #6]
 8006df8:	f003 0303 	and.w	r3, r3, #3
 8006dfc:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8006dfe:	2300      	movs	r3, #0
 8006e00:	623b      	str	r3, [r7, #32]
 8006e02:	e014      	b.n	8006e2e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006e04:	69bb      	ldr	r3, [r7, #24]
 8006e06:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006e0a:	681a      	ldr	r2, [r3, #0]
 8006e0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e0e:	601a      	str	r2, [r3, #0]
    pDest++;
 8006e10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e12:	3301      	adds	r3, #1
 8006e14:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006e16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e18:	3301      	adds	r3, #1
 8006e1a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006e1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e1e:	3301      	adds	r3, #1
 8006e20:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006e22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e24:	3301      	adds	r3, #1
 8006e26:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8006e28:	6a3b      	ldr	r3, [r7, #32]
 8006e2a:	3301      	adds	r3, #1
 8006e2c:	623b      	str	r3, [r7, #32]
 8006e2e:	6a3a      	ldr	r2, [r7, #32]
 8006e30:	697b      	ldr	r3, [r7, #20]
 8006e32:	429a      	cmp	r2, r3
 8006e34:	d3e6      	bcc.n	8006e04 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8006e36:	8bfb      	ldrh	r3, [r7, #30]
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d01e      	beq.n	8006e7a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8006e3c:	2300      	movs	r3, #0
 8006e3e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8006e40:	69bb      	ldr	r3, [r7, #24]
 8006e42:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006e46:	461a      	mov	r2, r3
 8006e48:	f107 0310 	add.w	r3, r7, #16
 8006e4c:	6812      	ldr	r2, [r2, #0]
 8006e4e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8006e50:	693a      	ldr	r2, [r7, #16]
 8006e52:	6a3b      	ldr	r3, [r7, #32]
 8006e54:	b2db      	uxtb	r3, r3
 8006e56:	00db      	lsls	r3, r3, #3
 8006e58:	fa22 f303 	lsr.w	r3, r2, r3
 8006e5c:	b2da      	uxtb	r2, r3
 8006e5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e60:	701a      	strb	r2, [r3, #0]
      i++;
 8006e62:	6a3b      	ldr	r3, [r7, #32]
 8006e64:	3301      	adds	r3, #1
 8006e66:	623b      	str	r3, [r7, #32]
      pDest++;
 8006e68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e6a:	3301      	adds	r3, #1
 8006e6c:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8006e6e:	8bfb      	ldrh	r3, [r7, #30]
 8006e70:	3b01      	subs	r3, #1
 8006e72:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8006e74:	8bfb      	ldrh	r3, [r7, #30]
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d1ea      	bne.n	8006e50 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8006e7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006e7c:	4618      	mov	r0, r3
 8006e7e:	372c      	adds	r7, #44	; 0x2c
 8006e80:	46bd      	mov	sp, r7
 8006e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e86:	4770      	bx	lr

08006e88 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006e88:	b480      	push	{r7}
 8006e8a:	b085      	sub	sp, #20
 8006e8c:	af00      	add	r7, sp, #0
 8006e8e:	6078      	str	r0, [r7, #4]
 8006e90:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006e96:	683b      	ldr	r3, [r7, #0]
 8006e98:	781b      	ldrb	r3, [r3, #0]
 8006e9a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006e9c:	683b      	ldr	r3, [r7, #0]
 8006e9e:	785b      	ldrb	r3, [r3, #1]
 8006ea0:	2b01      	cmp	r3, #1
 8006ea2:	d12c      	bne.n	8006efe <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006ea4:	68bb      	ldr	r3, [r7, #8]
 8006ea6:	015a      	lsls	r2, r3, #5
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	4413      	add	r3, r2
 8006eac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	db12      	blt.n	8006edc <USB_EPSetStall+0x54>
 8006eb6:	68bb      	ldr	r3, [r7, #8]
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d00f      	beq.n	8006edc <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8006ebc:	68bb      	ldr	r3, [r7, #8]
 8006ebe:	015a      	lsls	r2, r3, #5
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	4413      	add	r3, r2
 8006ec4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	68ba      	ldr	r2, [r7, #8]
 8006ecc:	0151      	lsls	r1, r2, #5
 8006ece:	68fa      	ldr	r2, [r7, #12]
 8006ed0:	440a      	add	r2, r1
 8006ed2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006ed6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006eda:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8006edc:	68bb      	ldr	r3, [r7, #8]
 8006ede:	015a      	lsls	r2, r3, #5
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	4413      	add	r3, r2
 8006ee4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	68ba      	ldr	r2, [r7, #8]
 8006eec:	0151      	lsls	r1, r2, #5
 8006eee:	68fa      	ldr	r2, [r7, #12]
 8006ef0:	440a      	add	r2, r1
 8006ef2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006ef6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006efa:	6013      	str	r3, [r2, #0]
 8006efc:	e02b      	b.n	8006f56 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006efe:	68bb      	ldr	r3, [r7, #8]
 8006f00:	015a      	lsls	r2, r3, #5
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	4413      	add	r3, r2
 8006f06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	db12      	blt.n	8006f36 <USB_EPSetStall+0xae>
 8006f10:	68bb      	ldr	r3, [r7, #8]
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d00f      	beq.n	8006f36 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8006f16:	68bb      	ldr	r3, [r7, #8]
 8006f18:	015a      	lsls	r2, r3, #5
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	4413      	add	r3, r2
 8006f1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	68ba      	ldr	r2, [r7, #8]
 8006f26:	0151      	lsls	r1, r2, #5
 8006f28:	68fa      	ldr	r2, [r7, #12]
 8006f2a:	440a      	add	r2, r1
 8006f2c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006f30:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006f34:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8006f36:	68bb      	ldr	r3, [r7, #8]
 8006f38:	015a      	lsls	r2, r3, #5
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	4413      	add	r3, r2
 8006f3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	68ba      	ldr	r2, [r7, #8]
 8006f46:	0151      	lsls	r1, r2, #5
 8006f48:	68fa      	ldr	r2, [r7, #12]
 8006f4a:	440a      	add	r2, r1
 8006f4c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006f50:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006f54:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006f56:	2300      	movs	r3, #0
}
 8006f58:	4618      	mov	r0, r3
 8006f5a:	3714      	adds	r7, #20
 8006f5c:	46bd      	mov	sp, r7
 8006f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f62:	4770      	bx	lr

08006f64 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006f64:	b480      	push	{r7}
 8006f66:	b085      	sub	sp, #20
 8006f68:	af00      	add	r7, sp, #0
 8006f6a:	6078      	str	r0, [r7, #4]
 8006f6c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006f72:	683b      	ldr	r3, [r7, #0]
 8006f74:	781b      	ldrb	r3, [r3, #0]
 8006f76:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006f78:	683b      	ldr	r3, [r7, #0]
 8006f7a:	785b      	ldrb	r3, [r3, #1]
 8006f7c:	2b01      	cmp	r3, #1
 8006f7e:	d128      	bne.n	8006fd2 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006f80:	68bb      	ldr	r3, [r7, #8]
 8006f82:	015a      	lsls	r2, r3, #5
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	4413      	add	r3, r2
 8006f88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	68ba      	ldr	r2, [r7, #8]
 8006f90:	0151      	lsls	r1, r2, #5
 8006f92:	68fa      	ldr	r2, [r7, #12]
 8006f94:	440a      	add	r2, r1
 8006f96:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006f9a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006f9e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006fa0:	683b      	ldr	r3, [r7, #0]
 8006fa2:	791b      	ldrb	r3, [r3, #4]
 8006fa4:	2b03      	cmp	r3, #3
 8006fa6:	d003      	beq.n	8006fb0 <USB_EPClearStall+0x4c>
 8006fa8:	683b      	ldr	r3, [r7, #0]
 8006faa:	791b      	ldrb	r3, [r3, #4]
 8006fac:	2b02      	cmp	r3, #2
 8006fae:	d138      	bne.n	8007022 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006fb0:	68bb      	ldr	r3, [r7, #8]
 8006fb2:	015a      	lsls	r2, r3, #5
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	4413      	add	r3, r2
 8006fb8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	68ba      	ldr	r2, [r7, #8]
 8006fc0:	0151      	lsls	r1, r2, #5
 8006fc2:	68fa      	ldr	r2, [r7, #12]
 8006fc4:	440a      	add	r2, r1
 8006fc6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006fca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006fce:	6013      	str	r3, [r2, #0]
 8006fd0:	e027      	b.n	8007022 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8006fd2:	68bb      	ldr	r3, [r7, #8]
 8006fd4:	015a      	lsls	r2, r3, #5
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	4413      	add	r3, r2
 8006fda:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	68ba      	ldr	r2, [r7, #8]
 8006fe2:	0151      	lsls	r1, r2, #5
 8006fe4:	68fa      	ldr	r2, [r7, #12]
 8006fe6:	440a      	add	r2, r1
 8006fe8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006fec:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006ff0:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006ff2:	683b      	ldr	r3, [r7, #0]
 8006ff4:	791b      	ldrb	r3, [r3, #4]
 8006ff6:	2b03      	cmp	r3, #3
 8006ff8:	d003      	beq.n	8007002 <USB_EPClearStall+0x9e>
 8006ffa:	683b      	ldr	r3, [r7, #0]
 8006ffc:	791b      	ldrb	r3, [r3, #4]
 8006ffe:	2b02      	cmp	r3, #2
 8007000:	d10f      	bne.n	8007022 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007002:	68bb      	ldr	r3, [r7, #8]
 8007004:	015a      	lsls	r2, r3, #5
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	4413      	add	r3, r2
 800700a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	68ba      	ldr	r2, [r7, #8]
 8007012:	0151      	lsls	r1, r2, #5
 8007014:	68fa      	ldr	r2, [r7, #12]
 8007016:	440a      	add	r2, r1
 8007018:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800701c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007020:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8007022:	2300      	movs	r3, #0
}
 8007024:	4618      	mov	r0, r3
 8007026:	3714      	adds	r7, #20
 8007028:	46bd      	mov	sp, r7
 800702a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800702e:	4770      	bx	lr

08007030 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8007030:	b480      	push	{r7}
 8007032:	b085      	sub	sp, #20
 8007034:	af00      	add	r7, sp, #0
 8007036:	6078      	str	r0, [r7, #4]
 8007038:	460b      	mov	r3, r1
 800703a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	68fa      	ldr	r2, [r7, #12]
 800704a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800704e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8007052:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800705a:	681a      	ldr	r2, [r3, #0]
 800705c:	78fb      	ldrb	r3, [r7, #3]
 800705e:	011b      	lsls	r3, r3, #4
 8007060:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8007064:	68f9      	ldr	r1, [r7, #12]
 8007066:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800706a:	4313      	orrs	r3, r2
 800706c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800706e:	2300      	movs	r3, #0
}
 8007070:	4618      	mov	r0, r3
 8007072:	3714      	adds	r7, #20
 8007074:	46bd      	mov	sp, r7
 8007076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800707a:	4770      	bx	lr

0800707c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800707c:	b480      	push	{r7}
 800707e:	b085      	sub	sp, #20
 8007080:	af00      	add	r7, sp, #0
 8007082:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	68fa      	ldr	r2, [r7, #12]
 8007092:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007096:	f023 0303 	bic.w	r3, r3, #3
 800709a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80070a2:	685b      	ldr	r3, [r3, #4]
 80070a4:	68fa      	ldr	r2, [r7, #12]
 80070a6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80070aa:	f023 0302 	bic.w	r3, r3, #2
 80070ae:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80070b0:	2300      	movs	r3, #0
}
 80070b2:	4618      	mov	r0, r3
 80070b4:	3714      	adds	r7, #20
 80070b6:	46bd      	mov	sp, r7
 80070b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070bc:	4770      	bx	lr

080070be <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80070be:	b480      	push	{r7}
 80070c0:	b085      	sub	sp, #20
 80070c2:	af00      	add	r7, sp, #0
 80070c4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	68fa      	ldr	r2, [r7, #12]
 80070d4:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80070d8:	f023 0303 	bic.w	r3, r3, #3
 80070dc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80070e4:	685b      	ldr	r3, [r3, #4]
 80070e6:	68fa      	ldr	r2, [r7, #12]
 80070e8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80070ec:	f043 0302 	orr.w	r3, r3, #2
 80070f0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80070f2:	2300      	movs	r3, #0
}
 80070f4:	4618      	mov	r0, r3
 80070f6:	3714      	adds	r7, #20
 80070f8:	46bd      	mov	sp, r7
 80070fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070fe:	4770      	bx	lr

08007100 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8007100:	b480      	push	{r7}
 8007102:	b085      	sub	sp, #20
 8007104:	af00      	add	r7, sp, #0
 8007106:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	695b      	ldr	r3, [r3, #20]
 800710c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	699b      	ldr	r3, [r3, #24]
 8007112:	68fa      	ldr	r2, [r7, #12]
 8007114:	4013      	ands	r3, r2
 8007116:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8007118:	68fb      	ldr	r3, [r7, #12]
}
 800711a:	4618      	mov	r0, r3
 800711c:	3714      	adds	r7, #20
 800711e:	46bd      	mov	sp, r7
 8007120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007124:	4770      	bx	lr

08007126 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007126:	b480      	push	{r7}
 8007128:	b085      	sub	sp, #20
 800712a:	af00      	add	r7, sp, #0
 800712c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007138:	699b      	ldr	r3, [r3, #24]
 800713a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007142:	69db      	ldr	r3, [r3, #28]
 8007144:	68ba      	ldr	r2, [r7, #8]
 8007146:	4013      	ands	r3, r2
 8007148:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800714a:	68bb      	ldr	r3, [r7, #8]
 800714c:	0c1b      	lsrs	r3, r3, #16
}
 800714e:	4618      	mov	r0, r3
 8007150:	3714      	adds	r7, #20
 8007152:	46bd      	mov	sp, r7
 8007154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007158:	4770      	bx	lr

0800715a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800715a:	b480      	push	{r7}
 800715c:	b085      	sub	sp, #20
 800715e:	af00      	add	r7, sp, #0
 8007160:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800716c:	699b      	ldr	r3, [r3, #24]
 800716e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007176:	69db      	ldr	r3, [r3, #28]
 8007178:	68ba      	ldr	r2, [r7, #8]
 800717a:	4013      	ands	r3, r2
 800717c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800717e:	68bb      	ldr	r3, [r7, #8]
 8007180:	b29b      	uxth	r3, r3
}
 8007182:	4618      	mov	r0, r3
 8007184:	3714      	adds	r7, #20
 8007186:	46bd      	mov	sp, r7
 8007188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800718c:	4770      	bx	lr

0800718e <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800718e:	b480      	push	{r7}
 8007190:	b085      	sub	sp, #20
 8007192:	af00      	add	r7, sp, #0
 8007194:	6078      	str	r0, [r7, #4]
 8007196:	460b      	mov	r3, r1
 8007198:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800719e:	78fb      	ldrb	r3, [r7, #3]
 80071a0:	015a      	lsls	r2, r3, #5
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	4413      	add	r3, r2
 80071a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80071aa:	689b      	ldr	r3, [r3, #8]
 80071ac:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80071b4:	695b      	ldr	r3, [r3, #20]
 80071b6:	68ba      	ldr	r2, [r7, #8]
 80071b8:	4013      	ands	r3, r2
 80071ba:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80071bc:	68bb      	ldr	r3, [r7, #8]
}
 80071be:	4618      	mov	r0, r3
 80071c0:	3714      	adds	r7, #20
 80071c2:	46bd      	mov	sp, r7
 80071c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071c8:	4770      	bx	lr

080071ca <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80071ca:	b480      	push	{r7}
 80071cc:	b087      	sub	sp, #28
 80071ce:	af00      	add	r7, sp, #0
 80071d0:	6078      	str	r0, [r7, #4]
 80071d2:	460b      	mov	r3, r1
 80071d4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80071da:	697b      	ldr	r3, [r7, #20]
 80071dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80071e0:	691b      	ldr	r3, [r3, #16]
 80071e2:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80071e4:	697b      	ldr	r3, [r7, #20]
 80071e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80071ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80071ec:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80071ee:	78fb      	ldrb	r3, [r7, #3]
 80071f0:	f003 030f 	and.w	r3, r3, #15
 80071f4:	68fa      	ldr	r2, [r7, #12]
 80071f6:	fa22 f303 	lsr.w	r3, r2, r3
 80071fa:	01db      	lsls	r3, r3, #7
 80071fc:	b2db      	uxtb	r3, r3
 80071fe:	693a      	ldr	r2, [r7, #16]
 8007200:	4313      	orrs	r3, r2
 8007202:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8007204:	78fb      	ldrb	r3, [r7, #3]
 8007206:	015a      	lsls	r2, r3, #5
 8007208:	697b      	ldr	r3, [r7, #20]
 800720a:	4413      	add	r3, r2
 800720c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007210:	689b      	ldr	r3, [r3, #8]
 8007212:	693a      	ldr	r2, [r7, #16]
 8007214:	4013      	ands	r3, r2
 8007216:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007218:	68bb      	ldr	r3, [r7, #8]
}
 800721a:	4618      	mov	r0, r3
 800721c:	371c      	adds	r7, #28
 800721e:	46bd      	mov	sp, r7
 8007220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007224:	4770      	bx	lr

08007226 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8007226:	b480      	push	{r7}
 8007228:	b083      	sub	sp, #12
 800722a:	af00      	add	r7, sp, #0
 800722c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	695b      	ldr	r3, [r3, #20]
 8007232:	f003 0301 	and.w	r3, r3, #1
}
 8007236:	4618      	mov	r0, r3
 8007238:	370c      	adds	r7, #12
 800723a:	46bd      	mov	sp, r7
 800723c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007240:	4770      	bx	lr

08007242 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8007242:	b480      	push	{r7}
 8007244:	b085      	sub	sp, #20
 8007246:	af00      	add	r7, sp, #0
 8007248:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	68fa      	ldr	r2, [r7, #12]
 8007258:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800725c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8007260:	f023 0307 	bic.w	r3, r3, #7
 8007264:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800726c:	685b      	ldr	r3, [r3, #4]
 800726e:	68fa      	ldr	r2, [r7, #12]
 8007270:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007274:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007278:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800727a:	2300      	movs	r3, #0
}
 800727c:	4618      	mov	r0, r3
 800727e:	3714      	adds	r7, #20
 8007280:	46bd      	mov	sp, r7
 8007282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007286:	4770      	bx	lr

08007288 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8007288:	b480      	push	{r7}
 800728a:	b087      	sub	sp, #28
 800728c:	af00      	add	r7, sp, #0
 800728e:	60f8      	str	r0, [r7, #12]
 8007290:	460b      	mov	r3, r1
 8007292:	607a      	str	r2, [r7, #4]
 8007294:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	333c      	adds	r3, #60	; 0x3c
 800729e:	3304      	adds	r3, #4
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80072a4:	693b      	ldr	r3, [r7, #16]
 80072a6:	4a26      	ldr	r2, [pc, #152]	; (8007340 <USB_EP0_OutStart+0xb8>)
 80072a8:	4293      	cmp	r3, r2
 80072aa:	d90a      	bls.n	80072c2 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80072ac:	697b      	ldr	r3, [r7, #20]
 80072ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80072b8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80072bc:	d101      	bne.n	80072c2 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80072be:	2300      	movs	r3, #0
 80072c0:	e037      	b.n	8007332 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80072c2:	697b      	ldr	r3, [r7, #20]
 80072c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80072c8:	461a      	mov	r2, r3
 80072ca:	2300      	movs	r3, #0
 80072cc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80072ce:	697b      	ldr	r3, [r7, #20]
 80072d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80072d4:	691b      	ldr	r3, [r3, #16]
 80072d6:	697a      	ldr	r2, [r7, #20]
 80072d8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80072dc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80072e0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80072e2:	697b      	ldr	r3, [r7, #20]
 80072e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80072e8:	691b      	ldr	r3, [r3, #16]
 80072ea:	697a      	ldr	r2, [r7, #20]
 80072ec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80072f0:	f043 0318 	orr.w	r3, r3, #24
 80072f4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80072f6:	697b      	ldr	r3, [r7, #20]
 80072f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80072fc:	691b      	ldr	r3, [r3, #16]
 80072fe:	697a      	ldr	r2, [r7, #20]
 8007300:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007304:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8007308:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800730a:	7afb      	ldrb	r3, [r7, #11]
 800730c:	2b01      	cmp	r3, #1
 800730e:	d10f      	bne.n	8007330 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8007310:	697b      	ldr	r3, [r7, #20]
 8007312:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007316:	461a      	mov	r2, r3
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800731c:	697b      	ldr	r3, [r7, #20]
 800731e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	697a      	ldr	r2, [r7, #20]
 8007326:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800732a:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800732e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007330:	2300      	movs	r3, #0
}
 8007332:	4618      	mov	r0, r3
 8007334:	371c      	adds	r7, #28
 8007336:	46bd      	mov	sp, r7
 8007338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800733c:	4770      	bx	lr
 800733e:	bf00      	nop
 8007340:	4f54300a 	.word	0x4f54300a

08007344 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007344:	b480      	push	{r7}
 8007346:	b085      	sub	sp, #20
 8007348:	af00      	add	r7, sp, #0
 800734a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800734c:	2300      	movs	r3, #0
 800734e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	3301      	adds	r3, #1
 8007354:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	4a13      	ldr	r2, [pc, #76]	; (80073a8 <USB_CoreReset+0x64>)
 800735a:	4293      	cmp	r3, r2
 800735c:	d901      	bls.n	8007362 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800735e:	2303      	movs	r3, #3
 8007360:	e01b      	b.n	800739a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	691b      	ldr	r3, [r3, #16]
 8007366:	2b00      	cmp	r3, #0
 8007368:	daf2      	bge.n	8007350 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800736a:	2300      	movs	r3, #0
 800736c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	691b      	ldr	r3, [r3, #16]
 8007372:	f043 0201 	orr.w	r2, r3, #1
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	3301      	adds	r3, #1
 800737e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	4a09      	ldr	r2, [pc, #36]	; (80073a8 <USB_CoreReset+0x64>)
 8007384:	4293      	cmp	r3, r2
 8007386:	d901      	bls.n	800738c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007388:	2303      	movs	r3, #3
 800738a:	e006      	b.n	800739a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	691b      	ldr	r3, [r3, #16]
 8007390:	f003 0301 	and.w	r3, r3, #1
 8007394:	2b01      	cmp	r3, #1
 8007396:	d0f0      	beq.n	800737a <USB_CoreReset+0x36>

  return HAL_OK;
 8007398:	2300      	movs	r3, #0
}
 800739a:	4618      	mov	r0, r3
 800739c:	3714      	adds	r7, #20
 800739e:	46bd      	mov	sp, r7
 80073a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073a4:	4770      	bx	lr
 80073a6:	bf00      	nop
 80073a8:	00030d40 	.word	0x00030d40

080073ac <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80073ac:	b580      	push	{r7, lr}
 80073ae:	b084      	sub	sp, #16
 80073b0:	af00      	add	r7, sp, #0
 80073b2:	6078      	str	r0, [r7, #4]
 80073b4:	460b      	mov	r3, r1
 80073b6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80073b8:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80073bc:	f002 fcb8 	bl	8009d30 <USBD_static_malloc>
 80073c0:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d109      	bne.n	80073dc <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	32b0      	adds	r2, #176	; 0xb0
 80073d2:	2100      	movs	r1, #0
 80073d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 80073d8:	2302      	movs	r3, #2
 80073da:	e0d4      	b.n	8007586 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 80073dc:	f44f 7207 	mov.w	r2, #540	; 0x21c
 80073e0:	2100      	movs	r1, #0
 80073e2:	68f8      	ldr	r0, [r7, #12]
 80073e4:	f002 fd20 	bl	8009e28 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	32b0      	adds	r2, #176	; 0xb0
 80073f2:	68f9      	ldr	r1, [r7, #12]
 80073f4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	32b0      	adds	r2, #176	; 0xb0
 8007402:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	7c1b      	ldrb	r3, [r3, #16]
 8007410:	2b00      	cmp	r3, #0
 8007412:	d138      	bne.n	8007486 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8007414:	4b5e      	ldr	r3, [pc, #376]	; (8007590 <USBD_CDC_Init+0x1e4>)
 8007416:	7819      	ldrb	r1, [r3, #0]
 8007418:	f44f 7300 	mov.w	r3, #512	; 0x200
 800741c:	2202      	movs	r2, #2
 800741e:	6878      	ldr	r0, [r7, #4]
 8007420:	f002 fb63 	bl	8009aea <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8007424:	4b5a      	ldr	r3, [pc, #360]	; (8007590 <USBD_CDC_Init+0x1e4>)
 8007426:	781b      	ldrb	r3, [r3, #0]
 8007428:	f003 020f 	and.w	r2, r3, #15
 800742c:	6879      	ldr	r1, [r7, #4]
 800742e:	4613      	mov	r3, r2
 8007430:	009b      	lsls	r3, r3, #2
 8007432:	4413      	add	r3, r2
 8007434:	009b      	lsls	r3, r3, #2
 8007436:	440b      	add	r3, r1
 8007438:	3324      	adds	r3, #36	; 0x24
 800743a:	2201      	movs	r2, #1
 800743c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800743e:	4b55      	ldr	r3, [pc, #340]	; (8007594 <USBD_CDC_Init+0x1e8>)
 8007440:	7819      	ldrb	r1, [r3, #0]
 8007442:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007446:	2202      	movs	r2, #2
 8007448:	6878      	ldr	r0, [r7, #4]
 800744a:	f002 fb4e 	bl	8009aea <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800744e:	4b51      	ldr	r3, [pc, #324]	; (8007594 <USBD_CDC_Init+0x1e8>)
 8007450:	781b      	ldrb	r3, [r3, #0]
 8007452:	f003 020f 	and.w	r2, r3, #15
 8007456:	6879      	ldr	r1, [r7, #4]
 8007458:	4613      	mov	r3, r2
 800745a:	009b      	lsls	r3, r3, #2
 800745c:	4413      	add	r3, r2
 800745e:	009b      	lsls	r3, r3, #2
 8007460:	440b      	add	r3, r1
 8007462:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007466:	2201      	movs	r2, #1
 8007468:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800746a:	4b4b      	ldr	r3, [pc, #300]	; (8007598 <USBD_CDC_Init+0x1ec>)
 800746c:	781b      	ldrb	r3, [r3, #0]
 800746e:	f003 020f 	and.w	r2, r3, #15
 8007472:	6879      	ldr	r1, [r7, #4]
 8007474:	4613      	mov	r3, r2
 8007476:	009b      	lsls	r3, r3, #2
 8007478:	4413      	add	r3, r2
 800747a:	009b      	lsls	r3, r3, #2
 800747c:	440b      	add	r3, r1
 800747e:	3326      	adds	r3, #38	; 0x26
 8007480:	2210      	movs	r2, #16
 8007482:	801a      	strh	r2, [r3, #0]
 8007484:	e035      	b.n	80074f2 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8007486:	4b42      	ldr	r3, [pc, #264]	; (8007590 <USBD_CDC_Init+0x1e4>)
 8007488:	7819      	ldrb	r1, [r3, #0]
 800748a:	2340      	movs	r3, #64	; 0x40
 800748c:	2202      	movs	r2, #2
 800748e:	6878      	ldr	r0, [r7, #4]
 8007490:	f002 fb2b 	bl	8009aea <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8007494:	4b3e      	ldr	r3, [pc, #248]	; (8007590 <USBD_CDC_Init+0x1e4>)
 8007496:	781b      	ldrb	r3, [r3, #0]
 8007498:	f003 020f 	and.w	r2, r3, #15
 800749c:	6879      	ldr	r1, [r7, #4]
 800749e:	4613      	mov	r3, r2
 80074a0:	009b      	lsls	r3, r3, #2
 80074a2:	4413      	add	r3, r2
 80074a4:	009b      	lsls	r3, r3, #2
 80074a6:	440b      	add	r3, r1
 80074a8:	3324      	adds	r3, #36	; 0x24
 80074aa:	2201      	movs	r2, #1
 80074ac:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80074ae:	4b39      	ldr	r3, [pc, #228]	; (8007594 <USBD_CDC_Init+0x1e8>)
 80074b0:	7819      	ldrb	r1, [r3, #0]
 80074b2:	2340      	movs	r3, #64	; 0x40
 80074b4:	2202      	movs	r2, #2
 80074b6:	6878      	ldr	r0, [r7, #4]
 80074b8:	f002 fb17 	bl	8009aea <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80074bc:	4b35      	ldr	r3, [pc, #212]	; (8007594 <USBD_CDC_Init+0x1e8>)
 80074be:	781b      	ldrb	r3, [r3, #0]
 80074c0:	f003 020f 	and.w	r2, r3, #15
 80074c4:	6879      	ldr	r1, [r7, #4]
 80074c6:	4613      	mov	r3, r2
 80074c8:	009b      	lsls	r3, r3, #2
 80074ca:	4413      	add	r3, r2
 80074cc:	009b      	lsls	r3, r3, #2
 80074ce:	440b      	add	r3, r1
 80074d0:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80074d4:	2201      	movs	r2, #1
 80074d6:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80074d8:	4b2f      	ldr	r3, [pc, #188]	; (8007598 <USBD_CDC_Init+0x1ec>)
 80074da:	781b      	ldrb	r3, [r3, #0]
 80074dc:	f003 020f 	and.w	r2, r3, #15
 80074e0:	6879      	ldr	r1, [r7, #4]
 80074e2:	4613      	mov	r3, r2
 80074e4:	009b      	lsls	r3, r3, #2
 80074e6:	4413      	add	r3, r2
 80074e8:	009b      	lsls	r3, r3, #2
 80074ea:	440b      	add	r3, r1
 80074ec:	3326      	adds	r3, #38	; 0x26
 80074ee:	2210      	movs	r2, #16
 80074f0:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80074f2:	4b29      	ldr	r3, [pc, #164]	; (8007598 <USBD_CDC_Init+0x1ec>)
 80074f4:	7819      	ldrb	r1, [r3, #0]
 80074f6:	2308      	movs	r3, #8
 80074f8:	2203      	movs	r2, #3
 80074fa:	6878      	ldr	r0, [r7, #4]
 80074fc:	f002 faf5 	bl	8009aea <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8007500:	4b25      	ldr	r3, [pc, #148]	; (8007598 <USBD_CDC_Init+0x1ec>)
 8007502:	781b      	ldrb	r3, [r3, #0]
 8007504:	f003 020f 	and.w	r2, r3, #15
 8007508:	6879      	ldr	r1, [r7, #4]
 800750a:	4613      	mov	r3, r2
 800750c:	009b      	lsls	r3, r3, #2
 800750e:	4413      	add	r3, r2
 8007510:	009b      	lsls	r3, r3, #2
 8007512:	440b      	add	r3, r1
 8007514:	3324      	adds	r3, #36	; 0x24
 8007516:	2201      	movs	r2, #1
 8007518:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	2200      	movs	r2, #0
 800751e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007528:	687a      	ldr	r2, [r7, #4]
 800752a:	33b0      	adds	r3, #176	; 0xb0
 800752c:	009b      	lsls	r3, r3, #2
 800752e:	4413      	add	r3, r2
 8007530:	685b      	ldr	r3, [r3, #4]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	2200      	movs	r2, #0
 800753a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	2200      	movs	r2, #0
 8007542:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800754c:	2b00      	cmp	r3, #0
 800754e:	d101      	bne.n	8007554 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8007550:	2302      	movs	r3, #2
 8007552:	e018      	b.n	8007586 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	7c1b      	ldrb	r3, [r3, #16]
 8007558:	2b00      	cmp	r3, #0
 800755a:	d10a      	bne.n	8007572 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800755c:	4b0d      	ldr	r3, [pc, #52]	; (8007594 <USBD_CDC_Init+0x1e8>)
 800755e:	7819      	ldrb	r1, [r3, #0]
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007566:	f44f 7300 	mov.w	r3, #512	; 0x200
 800756a:	6878      	ldr	r0, [r7, #4]
 800756c:	f002 fbac 	bl	8009cc8 <USBD_LL_PrepareReceive>
 8007570:	e008      	b.n	8007584 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007572:	4b08      	ldr	r3, [pc, #32]	; (8007594 <USBD_CDC_Init+0x1e8>)
 8007574:	7819      	ldrb	r1, [r3, #0]
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800757c:	2340      	movs	r3, #64	; 0x40
 800757e:	6878      	ldr	r0, [r7, #4]
 8007580:	f002 fba2 	bl	8009cc8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007584:	2300      	movs	r3, #0
}
 8007586:	4618      	mov	r0, r3
 8007588:	3710      	adds	r7, #16
 800758a:	46bd      	mov	sp, r7
 800758c:	bd80      	pop	{r7, pc}
 800758e:	bf00      	nop
 8007590:	2000009b 	.word	0x2000009b
 8007594:	2000009c 	.word	0x2000009c
 8007598:	2000009d 	.word	0x2000009d

0800759c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800759c:	b580      	push	{r7, lr}
 800759e:	b082      	sub	sp, #8
 80075a0:	af00      	add	r7, sp, #0
 80075a2:	6078      	str	r0, [r7, #4]
 80075a4:	460b      	mov	r3, r1
 80075a6:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 80075a8:	4b3a      	ldr	r3, [pc, #232]	; (8007694 <USBD_CDC_DeInit+0xf8>)
 80075aa:	781b      	ldrb	r3, [r3, #0]
 80075ac:	4619      	mov	r1, r3
 80075ae:	6878      	ldr	r0, [r7, #4]
 80075b0:	f002 fac1 	bl	8009b36 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 80075b4:	4b37      	ldr	r3, [pc, #220]	; (8007694 <USBD_CDC_DeInit+0xf8>)
 80075b6:	781b      	ldrb	r3, [r3, #0]
 80075b8:	f003 020f 	and.w	r2, r3, #15
 80075bc:	6879      	ldr	r1, [r7, #4]
 80075be:	4613      	mov	r3, r2
 80075c0:	009b      	lsls	r3, r3, #2
 80075c2:	4413      	add	r3, r2
 80075c4:	009b      	lsls	r3, r3, #2
 80075c6:	440b      	add	r3, r1
 80075c8:	3324      	adds	r3, #36	; 0x24
 80075ca:	2200      	movs	r2, #0
 80075cc:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 80075ce:	4b32      	ldr	r3, [pc, #200]	; (8007698 <USBD_CDC_DeInit+0xfc>)
 80075d0:	781b      	ldrb	r3, [r3, #0]
 80075d2:	4619      	mov	r1, r3
 80075d4:	6878      	ldr	r0, [r7, #4]
 80075d6:	f002 faae 	bl	8009b36 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 80075da:	4b2f      	ldr	r3, [pc, #188]	; (8007698 <USBD_CDC_DeInit+0xfc>)
 80075dc:	781b      	ldrb	r3, [r3, #0]
 80075de:	f003 020f 	and.w	r2, r3, #15
 80075e2:	6879      	ldr	r1, [r7, #4]
 80075e4:	4613      	mov	r3, r2
 80075e6:	009b      	lsls	r3, r3, #2
 80075e8:	4413      	add	r3, r2
 80075ea:	009b      	lsls	r3, r3, #2
 80075ec:	440b      	add	r3, r1
 80075ee:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80075f2:	2200      	movs	r2, #0
 80075f4:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 80075f6:	4b29      	ldr	r3, [pc, #164]	; (800769c <USBD_CDC_DeInit+0x100>)
 80075f8:	781b      	ldrb	r3, [r3, #0]
 80075fa:	4619      	mov	r1, r3
 80075fc:	6878      	ldr	r0, [r7, #4]
 80075fe:	f002 fa9a 	bl	8009b36 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8007602:	4b26      	ldr	r3, [pc, #152]	; (800769c <USBD_CDC_DeInit+0x100>)
 8007604:	781b      	ldrb	r3, [r3, #0]
 8007606:	f003 020f 	and.w	r2, r3, #15
 800760a:	6879      	ldr	r1, [r7, #4]
 800760c:	4613      	mov	r3, r2
 800760e:	009b      	lsls	r3, r3, #2
 8007610:	4413      	add	r3, r2
 8007612:	009b      	lsls	r3, r3, #2
 8007614:	440b      	add	r3, r1
 8007616:	3324      	adds	r3, #36	; 0x24
 8007618:	2200      	movs	r2, #0
 800761a:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800761c:	4b1f      	ldr	r3, [pc, #124]	; (800769c <USBD_CDC_DeInit+0x100>)
 800761e:	781b      	ldrb	r3, [r3, #0]
 8007620:	f003 020f 	and.w	r2, r3, #15
 8007624:	6879      	ldr	r1, [r7, #4]
 8007626:	4613      	mov	r3, r2
 8007628:	009b      	lsls	r3, r3, #2
 800762a:	4413      	add	r3, r2
 800762c:	009b      	lsls	r3, r3, #2
 800762e:	440b      	add	r3, r1
 8007630:	3326      	adds	r3, #38	; 0x26
 8007632:	2200      	movs	r2, #0
 8007634:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	32b0      	adds	r2, #176	; 0xb0
 8007640:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007644:	2b00      	cmp	r3, #0
 8007646:	d01f      	beq.n	8007688 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800764e:	687a      	ldr	r2, [r7, #4]
 8007650:	33b0      	adds	r3, #176	; 0xb0
 8007652:	009b      	lsls	r3, r3, #2
 8007654:	4413      	add	r3, r2
 8007656:	685b      	ldr	r3, [r3, #4]
 8007658:	685b      	ldr	r3, [r3, #4]
 800765a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	32b0      	adds	r2, #176	; 0xb0
 8007666:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800766a:	4618      	mov	r0, r3
 800766c:	f002 fb6e 	bl	8009d4c <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	32b0      	adds	r2, #176	; 0xb0
 800767a:	2100      	movs	r1, #0
 800767c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	2200      	movs	r2, #0
 8007684:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8007688:	2300      	movs	r3, #0
}
 800768a:	4618      	mov	r0, r3
 800768c:	3708      	adds	r7, #8
 800768e:	46bd      	mov	sp, r7
 8007690:	bd80      	pop	{r7, pc}
 8007692:	bf00      	nop
 8007694:	2000009b 	.word	0x2000009b
 8007698:	2000009c 	.word	0x2000009c
 800769c:	2000009d 	.word	0x2000009d

080076a0 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80076a0:	b580      	push	{r7, lr}
 80076a2:	b086      	sub	sp, #24
 80076a4:	af00      	add	r7, sp, #0
 80076a6:	6078      	str	r0, [r7, #4]
 80076a8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	32b0      	adds	r2, #176	; 0xb0
 80076b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80076b8:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80076ba:	2300      	movs	r3, #0
 80076bc:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80076be:	2300      	movs	r3, #0
 80076c0:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80076c2:	2300      	movs	r3, #0
 80076c4:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80076c6:	693b      	ldr	r3, [r7, #16]
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d101      	bne.n	80076d0 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 80076cc:	2303      	movs	r3, #3
 80076ce:	e0bf      	b.n	8007850 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80076d0:	683b      	ldr	r3, [r7, #0]
 80076d2:	781b      	ldrb	r3, [r3, #0]
 80076d4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d050      	beq.n	800777e <USBD_CDC_Setup+0xde>
 80076dc:	2b20      	cmp	r3, #32
 80076de:	f040 80af 	bne.w	8007840 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80076e2:	683b      	ldr	r3, [r7, #0]
 80076e4:	88db      	ldrh	r3, [r3, #6]
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d03a      	beq.n	8007760 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80076ea:	683b      	ldr	r3, [r7, #0]
 80076ec:	781b      	ldrb	r3, [r3, #0]
 80076ee:	b25b      	sxtb	r3, r3
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	da1b      	bge.n	800772c <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80076fa:	687a      	ldr	r2, [r7, #4]
 80076fc:	33b0      	adds	r3, #176	; 0xb0
 80076fe:	009b      	lsls	r3, r3, #2
 8007700:	4413      	add	r3, r2
 8007702:	685b      	ldr	r3, [r3, #4]
 8007704:	689b      	ldr	r3, [r3, #8]
 8007706:	683a      	ldr	r2, [r7, #0]
 8007708:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800770a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800770c:	683a      	ldr	r2, [r7, #0]
 800770e:	88d2      	ldrh	r2, [r2, #6]
 8007710:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8007712:	683b      	ldr	r3, [r7, #0]
 8007714:	88db      	ldrh	r3, [r3, #6]
 8007716:	2b07      	cmp	r3, #7
 8007718:	bf28      	it	cs
 800771a:	2307      	movcs	r3, #7
 800771c:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800771e:	693b      	ldr	r3, [r7, #16]
 8007720:	89fa      	ldrh	r2, [r7, #14]
 8007722:	4619      	mov	r1, r3
 8007724:	6878      	ldr	r0, [r7, #4]
 8007726:	f001 fd89 	bl	800923c <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800772a:	e090      	b.n	800784e <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800772c:	683b      	ldr	r3, [r7, #0]
 800772e:	785a      	ldrb	r2, [r3, #1]
 8007730:	693b      	ldr	r3, [r7, #16]
 8007732:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8007736:	683b      	ldr	r3, [r7, #0]
 8007738:	88db      	ldrh	r3, [r3, #6]
 800773a:	2b3f      	cmp	r3, #63	; 0x3f
 800773c:	d803      	bhi.n	8007746 <USBD_CDC_Setup+0xa6>
 800773e:	683b      	ldr	r3, [r7, #0]
 8007740:	88db      	ldrh	r3, [r3, #6]
 8007742:	b2da      	uxtb	r2, r3
 8007744:	e000      	b.n	8007748 <USBD_CDC_Setup+0xa8>
 8007746:	2240      	movs	r2, #64	; 0x40
 8007748:	693b      	ldr	r3, [r7, #16]
 800774a:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800774e:	6939      	ldr	r1, [r7, #16]
 8007750:	693b      	ldr	r3, [r7, #16]
 8007752:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8007756:	461a      	mov	r2, r3
 8007758:	6878      	ldr	r0, [r7, #4]
 800775a:	f001 fd9b 	bl	8009294 <USBD_CtlPrepareRx>
      break;
 800775e:	e076      	b.n	800784e <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007766:	687a      	ldr	r2, [r7, #4]
 8007768:	33b0      	adds	r3, #176	; 0xb0
 800776a:	009b      	lsls	r3, r3, #2
 800776c:	4413      	add	r3, r2
 800776e:	685b      	ldr	r3, [r3, #4]
 8007770:	689b      	ldr	r3, [r3, #8]
 8007772:	683a      	ldr	r2, [r7, #0]
 8007774:	7850      	ldrb	r0, [r2, #1]
 8007776:	2200      	movs	r2, #0
 8007778:	6839      	ldr	r1, [r7, #0]
 800777a:	4798      	blx	r3
      break;
 800777c:	e067      	b.n	800784e <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800777e:	683b      	ldr	r3, [r7, #0]
 8007780:	785b      	ldrb	r3, [r3, #1]
 8007782:	2b0b      	cmp	r3, #11
 8007784:	d851      	bhi.n	800782a <USBD_CDC_Setup+0x18a>
 8007786:	a201      	add	r2, pc, #4	; (adr r2, 800778c <USBD_CDC_Setup+0xec>)
 8007788:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800778c:	080077bd 	.word	0x080077bd
 8007790:	08007839 	.word	0x08007839
 8007794:	0800782b 	.word	0x0800782b
 8007798:	0800782b 	.word	0x0800782b
 800779c:	0800782b 	.word	0x0800782b
 80077a0:	0800782b 	.word	0x0800782b
 80077a4:	0800782b 	.word	0x0800782b
 80077a8:	0800782b 	.word	0x0800782b
 80077ac:	0800782b 	.word	0x0800782b
 80077b0:	0800782b 	.word	0x0800782b
 80077b4:	080077e7 	.word	0x080077e7
 80077b8:	08007811 	.word	0x08007811
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80077c2:	b2db      	uxtb	r3, r3
 80077c4:	2b03      	cmp	r3, #3
 80077c6:	d107      	bne.n	80077d8 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80077c8:	f107 030a 	add.w	r3, r7, #10
 80077cc:	2202      	movs	r2, #2
 80077ce:	4619      	mov	r1, r3
 80077d0:	6878      	ldr	r0, [r7, #4]
 80077d2:	f001 fd33 	bl	800923c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80077d6:	e032      	b.n	800783e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80077d8:	6839      	ldr	r1, [r7, #0]
 80077da:	6878      	ldr	r0, [r7, #4]
 80077dc:	f001 fcbd 	bl	800915a <USBD_CtlError>
            ret = USBD_FAIL;
 80077e0:	2303      	movs	r3, #3
 80077e2:	75fb      	strb	r3, [r7, #23]
          break;
 80077e4:	e02b      	b.n	800783e <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80077ec:	b2db      	uxtb	r3, r3
 80077ee:	2b03      	cmp	r3, #3
 80077f0:	d107      	bne.n	8007802 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80077f2:	f107 030d 	add.w	r3, r7, #13
 80077f6:	2201      	movs	r2, #1
 80077f8:	4619      	mov	r1, r3
 80077fa:	6878      	ldr	r0, [r7, #4]
 80077fc:	f001 fd1e 	bl	800923c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007800:	e01d      	b.n	800783e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8007802:	6839      	ldr	r1, [r7, #0]
 8007804:	6878      	ldr	r0, [r7, #4]
 8007806:	f001 fca8 	bl	800915a <USBD_CtlError>
            ret = USBD_FAIL;
 800780a:	2303      	movs	r3, #3
 800780c:	75fb      	strb	r3, [r7, #23]
          break;
 800780e:	e016      	b.n	800783e <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007816:	b2db      	uxtb	r3, r3
 8007818:	2b03      	cmp	r3, #3
 800781a:	d00f      	beq.n	800783c <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800781c:	6839      	ldr	r1, [r7, #0]
 800781e:	6878      	ldr	r0, [r7, #4]
 8007820:	f001 fc9b 	bl	800915a <USBD_CtlError>
            ret = USBD_FAIL;
 8007824:	2303      	movs	r3, #3
 8007826:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8007828:	e008      	b.n	800783c <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800782a:	6839      	ldr	r1, [r7, #0]
 800782c:	6878      	ldr	r0, [r7, #4]
 800782e:	f001 fc94 	bl	800915a <USBD_CtlError>
          ret = USBD_FAIL;
 8007832:	2303      	movs	r3, #3
 8007834:	75fb      	strb	r3, [r7, #23]
          break;
 8007836:	e002      	b.n	800783e <USBD_CDC_Setup+0x19e>
          break;
 8007838:	bf00      	nop
 800783a:	e008      	b.n	800784e <USBD_CDC_Setup+0x1ae>
          break;
 800783c:	bf00      	nop
      }
      break;
 800783e:	e006      	b.n	800784e <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8007840:	6839      	ldr	r1, [r7, #0]
 8007842:	6878      	ldr	r0, [r7, #4]
 8007844:	f001 fc89 	bl	800915a <USBD_CtlError>
      ret = USBD_FAIL;
 8007848:	2303      	movs	r3, #3
 800784a:	75fb      	strb	r3, [r7, #23]
      break;
 800784c:	bf00      	nop
  }

  return (uint8_t)ret;
 800784e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007850:	4618      	mov	r0, r3
 8007852:	3718      	adds	r7, #24
 8007854:	46bd      	mov	sp, r7
 8007856:	bd80      	pop	{r7, pc}

08007858 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007858:	b580      	push	{r7, lr}
 800785a:	b084      	sub	sp, #16
 800785c:	af00      	add	r7, sp, #0
 800785e:	6078      	str	r0, [r7, #4]
 8007860:	460b      	mov	r3, r1
 8007862:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800786a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	32b0      	adds	r2, #176	; 0xb0
 8007876:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800787a:	2b00      	cmp	r3, #0
 800787c:	d101      	bne.n	8007882 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800787e:	2303      	movs	r3, #3
 8007880:	e065      	b.n	800794e <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	32b0      	adds	r2, #176	; 0xb0
 800788c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007890:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8007892:	78fb      	ldrb	r3, [r7, #3]
 8007894:	f003 020f 	and.w	r2, r3, #15
 8007898:	6879      	ldr	r1, [r7, #4]
 800789a:	4613      	mov	r3, r2
 800789c:	009b      	lsls	r3, r3, #2
 800789e:	4413      	add	r3, r2
 80078a0:	009b      	lsls	r3, r3, #2
 80078a2:	440b      	add	r3, r1
 80078a4:	3318      	adds	r3, #24
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d02f      	beq.n	800790c <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 80078ac:	78fb      	ldrb	r3, [r7, #3]
 80078ae:	f003 020f 	and.w	r2, r3, #15
 80078b2:	6879      	ldr	r1, [r7, #4]
 80078b4:	4613      	mov	r3, r2
 80078b6:	009b      	lsls	r3, r3, #2
 80078b8:	4413      	add	r3, r2
 80078ba:	009b      	lsls	r3, r3, #2
 80078bc:	440b      	add	r3, r1
 80078be:	3318      	adds	r3, #24
 80078c0:	681a      	ldr	r2, [r3, #0]
 80078c2:	78fb      	ldrb	r3, [r7, #3]
 80078c4:	f003 010f 	and.w	r1, r3, #15
 80078c8:	68f8      	ldr	r0, [r7, #12]
 80078ca:	460b      	mov	r3, r1
 80078cc:	00db      	lsls	r3, r3, #3
 80078ce:	440b      	add	r3, r1
 80078d0:	009b      	lsls	r3, r3, #2
 80078d2:	4403      	add	r3, r0
 80078d4:	3348      	adds	r3, #72	; 0x48
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	fbb2 f1f3 	udiv	r1, r2, r3
 80078dc:	fb01 f303 	mul.w	r3, r1, r3
 80078e0:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d112      	bne.n	800790c <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 80078e6:	78fb      	ldrb	r3, [r7, #3]
 80078e8:	f003 020f 	and.w	r2, r3, #15
 80078ec:	6879      	ldr	r1, [r7, #4]
 80078ee:	4613      	mov	r3, r2
 80078f0:	009b      	lsls	r3, r3, #2
 80078f2:	4413      	add	r3, r2
 80078f4:	009b      	lsls	r3, r3, #2
 80078f6:	440b      	add	r3, r1
 80078f8:	3318      	adds	r3, #24
 80078fa:	2200      	movs	r2, #0
 80078fc:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80078fe:	78f9      	ldrb	r1, [r7, #3]
 8007900:	2300      	movs	r3, #0
 8007902:	2200      	movs	r2, #0
 8007904:	6878      	ldr	r0, [r7, #4]
 8007906:	f002 f9be 	bl	8009c86 <USBD_LL_Transmit>
 800790a:	e01f      	b.n	800794c <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800790c:	68bb      	ldr	r3, [r7, #8]
 800790e:	2200      	movs	r2, #0
 8007910:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800791a:	687a      	ldr	r2, [r7, #4]
 800791c:	33b0      	adds	r3, #176	; 0xb0
 800791e:	009b      	lsls	r3, r3, #2
 8007920:	4413      	add	r3, r2
 8007922:	685b      	ldr	r3, [r3, #4]
 8007924:	691b      	ldr	r3, [r3, #16]
 8007926:	2b00      	cmp	r3, #0
 8007928:	d010      	beq.n	800794c <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007930:	687a      	ldr	r2, [r7, #4]
 8007932:	33b0      	adds	r3, #176	; 0xb0
 8007934:	009b      	lsls	r3, r3, #2
 8007936:	4413      	add	r3, r2
 8007938:	685b      	ldr	r3, [r3, #4]
 800793a:	691b      	ldr	r3, [r3, #16]
 800793c:	68ba      	ldr	r2, [r7, #8]
 800793e:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8007942:	68ba      	ldr	r2, [r7, #8]
 8007944:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8007948:	78fa      	ldrb	r2, [r7, #3]
 800794a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800794c:	2300      	movs	r3, #0
}
 800794e:	4618      	mov	r0, r3
 8007950:	3710      	adds	r7, #16
 8007952:	46bd      	mov	sp, r7
 8007954:	bd80      	pop	{r7, pc}

08007956 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007956:	b580      	push	{r7, lr}
 8007958:	b084      	sub	sp, #16
 800795a:	af00      	add	r7, sp, #0
 800795c:	6078      	str	r0, [r7, #4]
 800795e:	460b      	mov	r3, r1
 8007960:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	32b0      	adds	r2, #176	; 0xb0
 800796c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007970:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	32b0      	adds	r2, #176	; 0xb0
 800797c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007980:	2b00      	cmp	r3, #0
 8007982:	d101      	bne.n	8007988 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8007984:	2303      	movs	r3, #3
 8007986:	e01a      	b.n	80079be <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8007988:	78fb      	ldrb	r3, [r7, #3]
 800798a:	4619      	mov	r1, r3
 800798c:	6878      	ldr	r0, [r7, #4]
 800798e:	f002 f9bc 	bl	8009d0a <USBD_LL_GetRxDataSize>
 8007992:	4602      	mov	r2, r0
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80079a0:	687a      	ldr	r2, [r7, #4]
 80079a2:	33b0      	adds	r3, #176	; 0xb0
 80079a4:	009b      	lsls	r3, r3, #2
 80079a6:	4413      	add	r3, r2
 80079a8:	685b      	ldr	r3, [r3, #4]
 80079aa:	68db      	ldr	r3, [r3, #12]
 80079ac:	68fa      	ldr	r2, [r7, #12]
 80079ae:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80079b2:	68fa      	ldr	r2, [r7, #12]
 80079b4:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80079b8:	4611      	mov	r1, r2
 80079ba:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80079bc:	2300      	movs	r3, #0
}
 80079be:	4618      	mov	r0, r3
 80079c0:	3710      	adds	r7, #16
 80079c2:	46bd      	mov	sp, r7
 80079c4:	bd80      	pop	{r7, pc}

080079c6 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80079c6:	b580      	push	{r7, lr}
 80079c8:	b084      	sub	sp, #16
 80079ca:	af00      	add	r7, sp, #0
 80079cc:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	32b0      	adds	r2, #176	; 0xb0
 80079d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80079dc:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d101      	bne.n	80079e8 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80079e4:	2303      	movs	r3, #3
 80079e6:	e025      	b.n	8007a34 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80079ee:	687a      	ldr	r2, [r7, #4]
 80079f0:	33b0      	adds	r3, #176	; 0xb0
 80079f2:	009b      	lsls	r3, r3, #2
 80079f4:	4413      	add	r3, r2
 80079f6:	685b      	ldr	r3, [r3, #4]
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d01a      	beq.n	8007a32 <USBD_CDC_EP0_RxReady+0x6c>
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8007a02:	2bff      	cmp	r3, #255	; 0xff
 8007a04:	d015      	beq.n	8007a32 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007a0c:	687a      	ldr	r2, [r7, #4]
 8007a0e:	33b0      	adds	r3, #176	; 0xb0
 8007a10:	009b      	lsls	r3, r3, #2
 8007a12:	4413      	add	r3, r2
 8007a14:	685b      	ldr	r3, [r3, #4]
 8007a16:	689b      	ldr	r3, [r3, #8]
 8007a18:	68fa      	ldr	r2, [r7, #12]
 8007a1a:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8007a1e:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8007a20:	68fa      	ldr	r2, [r7, #12]
 8007a22:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8007a26:	b292      	uxth	r2, r2
 8007a28:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	22ff      	movs	r2, #255	; 0xff
 8007a2e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8007a32:	2300      	movs	r3, #0
}
 8007a34:	4618      	mov	r0, r3
 8007a36:	3710      	adds	r7, #16
 8007a38:	46bd      	mov	sp, r7
 8007a3a:	bd80      	pop	{r7, pc}

08007a3c <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8007a3c:	b580      	push	{r7, lr}
 8007a3e:	b086      	sub	sp, #24
 8007a40:	af00      	add	r7, sp, #0
 8007a42:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007a44:	2182      	movs	r1, #130	; 0x82
 8007a46:	4818      	ldr	r0, [pc, #96]	; (8007aa8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007a48:	f000 fd4f 	bl	80084ea <USBD_GetEpDesc>
 8007a4c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007a4e:	2101      	movs	r1, #1
 8007a50:	4815      	ldr	r0, [pc, #84]	; (8007aa8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007a52:	f000 fd4a 	bl	80084ea <USBD_GetEpDesc>
 8007a56:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007a58:	2181      	movs	r1, #129	; 0x81
 8007a5a:	4813      	ldr	r0, [pc, #76]	; (8007aa8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007a5c:	f000 fd45 	bl	80084ea <USBD_GetEpDesc>
 8007a60:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8007a62:	697b      	ldr	r3, [r7, #20]
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d002      	beq.n	8007a6e <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8007a68:	697b      	ldr	r3, [r7, #20]
 8007a6a:	2210      	movs	r2, #16
 8007a6c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007a6e:	693b      	ldr	r3, [r7, #16]
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d006      	beq.n	8007a82 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007a74:	693b      	ldr	r3, [r7, #16]
 8007a76:	2200      	movs	r2, #0
 8007a78:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007a7c:	711a      	strb	r2, [r3, #4]
 8007a7e:	2200      	movs	r2, #0
 8007a80:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d006      	beq.n	8007a96 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	2200      	movs	r2, #0
 8007a8c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007a90:	711a      	strb	r2, [r3, #4]
 8007a92:	2200      	movs	r2, #0
 8007a94:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	2243      	movs	r2, #67	; 0x43
 8007a9a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007a9c:	4b02      	ldr	r3, [pc, #8]	; (8007aa8 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8007a9e:	4618      	mov	r0, r3
 8007aa0:	3718      	adds	r7, #24
 8007aa2:	46bd      	mov	sp, r7
 8007aa4:	bd80      	pop	{r7, pc}
 8007aa6:	bf00      	nop
 8007aa8:	20000058 	.word	0x20000058

08007aac <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8007aac:	b580      	push	{r7, lr}
 8007aae:	b086      	sub	sp, #24
 8007ab0:	af00      	add	r7, sp, #0
 8007ab2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007ab4:	2182      	movs	r1, #130	; 0x82
 8007ab6:	4818      	ldr	r0, [pc, #96]	; (8007b18 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007ab8:	f000 fd17 	bl	80084ea <USBD_GetEpDesc>
 8007abc:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007abe:	2101      	movs	r1, #1
 8007ac0:	4815      	ldr	r0, [pc, #84]	; (8007b18 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007ac2:	f000 fd12 	bl	80084ea <USBD_GetEpDesc>
 8007ac6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007ac8:	2181      	movs	r1, #129	; 0x81
 8007aca:	4813      	ldr	r0, [pc, #76]	; (8007b18 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007acc:	f000 fd0d 	bl	80084ea <USBD_GetEpDesc>
 8007ad0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8007ad2:	697b      	ldr	r3, [r7, #20]
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d002      	beq.n	8007ade <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8007ad8:	697b      	ldr	r3, [r7, #20]
 8007ada:	2210      	movs	r2, #16
 8007adc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007ade:	693b      	ldr	r3, [r7, #16]
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d006      	beq.n	8007af2 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8007ae4:	693b      	ldr	r3, [r7, #16]
 8007ae6:	2200      	movs	r2, #0
 8007ae8:	711a      	strb	r2, [r3, #4]
 8007aea:	2200      	movs	r2, #0
 8007aec:	f042 0202 	orr.w	r2, r2, #2
 8007af0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d006      	beq.n	8007b06 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	2200      	movs	r2, #0
 8007afc:	711a      	strb	r2, [r3, #4]
 8007afe:	2200      	movs	r2, #0
 8007b00:	f042 0202 	orr.w	r2, r2, #2
 8007b04:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	2243      	movs	r2, #67	; 0x43
 8007b0a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007b0c:	4b02      	ldr	r3, [pc, #8]	; (8007b18 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8007b0e:	4618      	mov	r0, r3
 8007b10:	3718      	adds	r7, #24
 8007b12:	46bd      	mov	sp, r7
 8007b14:	bd80      	pop	{r7, pc}
 8007b16:	bf00      	nop
 8007b18:	20000058 	.word	0x20000058

08007b1c <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007b1c:	b580      	push	{r7, lr}
 8007b1e:	b086      	sub	sp, #24
 8007b20:	af00      	add	r7, sp, #0
 8007b22:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007b24:	2182      	movs	r1, #130	; 0x82
 8007b26:	4818      	ldr	r0, [pc, #96]	; (8007b88 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007b28:	f000 fcdf 	bl	80084ea <USBD_GetEpDesc>
 8007b2c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007b2e:	2101      	movs	r1, #1
 8007b30:	4815      	ldr	r0, [pc, #84]	; (8007b88 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007b32:	f000 fcda 	bl	80084ea <USBD_GetEpDesc>
 8007b36:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007b38:	2181      	movs	r1, #129	; 0x81
 8007b3a:	4813      	ldr	r0, [pc, #76]	; (8007b88 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007b3c:	f000 fcd5 	bl	80084ea <USBD_GetEpDesc>
 8007b40:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8007b42:	697b      	ldr	r3, [r7, #20]
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d002      	beq.n	8007b4e <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8007b48:	697b      	ldr	r3, [r7, #20]
 8007b4a:	2210      	movs	r2, #16
 8007b4c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007b4e:	693b      	ldr	r3, [r7, #16]
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d006      	beq.n	8007b62 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007b54:	693b      	ldr	r3, [r7, #16]
 8007b56:	2200      	movs	r2, #0
 8007b58:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007b5c:	711a      	strb	r2, [r3, #4]
 8007b5e:	2200      	movs	r2, #0
 8007b60:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d006      	beq.n	8007b76 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	2200      	movs	r2, #0
 8007b6c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007b70:	711a      	strb	r2, [r3, #4]
 8007b72:	2200      	movs	r2, #0
 8007b74:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	2243      	movs	r2, #67	; 0x43
 8007b7a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007b7c:	4b02      	ldr	r3, [pc, #8]	; (8007b88 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8007b7e:	4618      	mov	r0, r3
 8007b80:	3718      	adds	r7, #24
 8007b82:	46bd      	mov	sp, r7
 8007b84:	bd80      	pop	{r7, pc}
 8007b86:	bf00      	nop
 8007b88:	20000058 	.word	0x20000058

08007b8c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8007b8c:	b480      	push	{r7}
 8007b8e:	b083      	sub	sp, #12
 8007b90:	af00      	add	r7, sp, #0
 8007b92:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	220a      	movs	r2, #10
 8007b98:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8007b9a:	4b03      	ldr	r3, [pc, #12]	; (8007ba8 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8007b9c:	4618      	mov	r0, r3
 8007b9e:	370c      	adds	r7, #12
 8007ba0:	46bd      	mov	sp, r7
 8007ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ba6:	4770      	bx	lr
 8007ba8:	20000014 	.word	0x20000014

08007bac <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8007bac:	b480      	push	{r7}
 8007bae:	b083      	sub	sp, #12
 8007bb0:	af00      	add	r7, sp, #0
 8007bb2:	6078      	str	r0, [r7, #4]
 8007bb4:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8007bb6:	683b      	ldr	r3, [r7, #0]
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d101      	bne.n	8007bc0 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8007bbc:	2303      	movs	r3, #3
 8007bbe:	e009      	b.n	8007bd4 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007bc6:	687a      	ldr	r2, [r7, #4]
 8007bc8:	33b0      	adds	r3, #176	; 0xb0
 8007bca:	009b      	lsls	r3, r3, #2
 8007bcc:	4413      	add	r3, r2
 8007bce:	683a      	ldr	r2, [r7, #0]
 8007bd0:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8007bd2:	2300      	movs	r3, #0
}
 8007bd4:	4618      	mov	r0, r3
 8007bd6:	370c      	adds	r7, #12
 8007bd8:	46bd      	mov	sp, r7
 8007bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bde:	4770      	bx	lr

08007be0 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8007be0:	b480      	push	{r7}
 8007be2:	b087      	sub	sp, #28
 8007be4:	af00      	add	r7, sp, #0
 8007be6:	60f8      	str	r0, [r7, #12]
 8007be8:	60b9      	str	r1, [r7, #8]
 8007bea:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	32b0      	adds	r2, #176	; 0xb0
 8007bf6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007bfa:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8007bfc:	697b      	ldr	r3, [r7, #20]
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d101      	bne.n	8007c06 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8007c02:	2303      	movs	r3, #3
 8007c04:	e008      	b.n	8007c18 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8007c06:	697b      	ldr	r3, [r7, #20]
 8007c08:	68ba      	ldr	r2, [r7, #8]
 8007c0a:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8007c0e:	697b      	ldr	r3, [r7, #20]
 8007c10:	687a      	ldr	r2, [r7, #4]
 8007c12:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8007c16:	2300      	movs	r3, #0
}
 8007c18:	4618      	mov	r0, r3
 8007c1a:	371c      	adds	r7, #28
 8007c1c:	46bd      	mov	sp, r7
 8007c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c22:	4770      	bx	lr

08007c24 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8007c24:	b480      	push	{r7}
 8007c26:	b085      	sub	sp, #20
 8007c28:	af00      	add	r7, sp, #0
 8007c2a:	6078      	str	r0, [r7, #4]
 8007c2c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	32b0      	adds	r2, #176	; 0xb0
 8007c38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c3c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d101      	bne.n	8007c48 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8007c44:	2303      	movs	r3, #3
 8007c46:	e004      	b.n	8007c52 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	683a      	ldr	r2, [r7, #0]
 8007c4c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8007c50:	2300      	movs	r3, #0
}
 8007c52:	4618      	mov	r0, r3
 8007c54:	3714      	adds	r7, #20
 8007c56:	46bd      	mov	sp, r7
 8007c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c5c:	4770      	bx	lr
	...

08007c60 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8007c60:	b580      	push	{r7, lr}
 8007c62:	b084      	sub	sp, #16
 8007c64:	af00      	add	r7, sp, #0
 8007c66:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	32b0      	adds	r2, #176	; 0xb0
 8007c72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c76:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8007c78:	2301      	movs	r3, #1
 8007c7a:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	32b0      	adds	r2, #176	; 0xb0
 8007c86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d101      	bne.n	8007c92 <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8007c8e:	2303      	movs	r3, #3
 8007c90:	e025      	b.n	8007cde <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 8007c92:	68bb      	ldr	r3, [r7, #8]
 8007c94:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d11f      	bne.n	8007cdc <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8007c9c:	68bb      	ldr	r3, [r7, #8]
 8007c9e:	2201      	movs	r2, #1
 8007ca0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8007ca4:	4b10      	ldr	r3, [pc, #64]	; (8007ce8 <USBD_CDC_TransmitPacket+0x88>)
 8007ca6:	781b      	ldrb	r3, [r3, #0]
 8007ca8:	f003 020f 	and.w	r2, r3, #15
 8007cac:	68bb      	ldr	r3, [r7, #8]
 8007cae:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 8007cb2:	6878      	ldr	r0, [r7, #4]
 8007cb4:	4613      	mov	r3, r2
 8007cb6:	009b      	lsls	r3, r3, #2
 8007cb8:	4413      	add	r3, r2
 8007cba:	009b      	lsls	r3, r3, #2
 8007cbc:	4403      	add	r3, r0
 8007cbe:	3318      	adds	r3, #24
 8007cc0:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8007cc2:	4b09      	ldr	r3, [pc, #36]	; (8007ce8 <USBD_CDC_TransmitPacket+0x88>)
 8007cc4:	7819      	ldrb	r1, [r3, #0]
 8007cc6:	68bb      	ldr	r3, [r7, #8]
 8007cc8:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8007ccc:	68bb      	ldr	r3, [r7, #8]
 8007cce:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8007cd2:	6878      	ldr	r0, [r7, #4]
 8007cd4:	f001 ffd7 	bl	8009c86 <USBD_LL_Transmit>

    ret = USBD_OK;
 8007cd8:	2300      	movs	r3, #0
 8007cda:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8007cdc:	7bfb      	ldrb	r3, [r7, #15]
}
 8007cde:	4618      	mov	r0, r3
 8007ce0:	3710      	adds	r7, #16
 8007ce2:	46bd      	mov	sp, r7
 8007ce4:	bd80      	pop	{r7, pc}
 8007ce6:	bf00      	nop
 8007ce8:	2000009b 	.word	0x2000009b

08007cec <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8007cec:	b580      	push	{r7, lr}
 8007cee:	b084      	sub	sp, #16
 8007cf0:	af00      	add	r7, sp, #0
 8007cf2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	32b0      	adds	r2, #176	; 0xb0
 8007cfe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d02:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	32b0      	adds	r2, #176	; 0xb0
 8007d0e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d101      	bne.n	8007d1a <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8007d16:	2303      	movs	r3, #3
 8007d18:	e018      	b.n	8007d4c <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	7c1b      	ldrb	r3, [r3, #16]
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d10a      	bne.n	8007d38 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007d22:	4b0c      	ldr	r3, [pc, #48]	; (8007d54 <USBD_CDC_ReceivePacket+0x68>)
 8007d24:	7819      	ldrb	r1, [r3, #0]
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007d2c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007d30:	6878      	ldr	r0, [r7, #4]
 8007d32:	f001 ffc9 	bl	8009cc8 <USBD_LL_PrepareReceive>
 8007d36:	e008      	b.n	8007d4a <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007d38:	4b06      	ldr	r3, [pc, #24]	; (8007d54 <USBD_CDC_ReceivePacket+0x68>)
 8007d3a:	7819      	ldrb	r1, [r3, #0]
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007d42:	2340      	movs	r3, #64	; 0x40
 8007d44:	6878      	ldr	r0, [r7, #4]
 8007d46:	f001 ffbf 	bl	8009cc8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007d4a:	2300      	movs	r3, #0
}
 8007d4c:	4618      	mov	r0, r3
 8007d4e:	3710      	adds	r7, #16
 8007d50:	46bd      	mov	sp, r7
 8007d52:	bd80      	pop	{r7, pc}
 8007d54:	2000009c 	.word	0x2000009c

08007d58 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007d58:	b580      	push	{r7, lr}
 8007d5a:	b086      	sub	sp, #24
 8007d5c:	af00      	add	r7, sp, #0
 8007d5e:	60f8      	str	r0, [r7, #12]
 8007d60:	60b9      	str	r1, [r7, #8]
 8007d62:	4613      	mov	r3, r2
 8007d64:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d101      	bne.n	8007d70 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8007d6c:	2303      	movs	r3, #3
 8007d6e:	e01f      	b.n	8007db0 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	2200      	movs	r2, #0
 8007d74:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	2200      	movs	r2, #0
 8007d7c:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	2200      	movs	r2, #0
 8007d84:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007d88:	68bb      	ldr	r3, [r7, #8]
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d003      	beq.n	8007d96 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	68ba      	ldr	r2, [r7, #8]
 8007d92:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	2201      	movs	r2, #1
 8007d9a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	79fa      	ldrb	r2, [r7, #7]
 8007da2:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8007da4:	68f8      	ldr	r0, [r7, #12]
 8007da6:	f001 fe33 	bl	8009a10 <USBD_LL_Init>
 8007daa:	4603      	mov	r3, r0
 8007dac:	75fb      	strb	r3, [r7, #23]

  return ret;
 8007dae:	7dfb      	ldrb	r3, [r7, #23]
}
 8007db0:	4618      	mov	r0, r3
 8007db2:	3718      	adds	r7, #24
 8007db4:	46bd      	mov	sp, r7
 8007db6:	bd80      	pop	{r7, pc}

08007db8 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007db8:	b580      	push	{r7, lr}
 8007dba:	b084      	sub	sp, #16
 8007dbc:	af00      	add	r7, sp, #0
 8007dbe:	6078      	str	r0, [r7, #4]
 8007dc0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007dc2:	2300      	movs	r3, #0
 8007dc4:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8007dc6:	683b      	ldr	r3, [r7, #0]
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d101      	bne.n	8007dd0 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8007dcc:	2303      	movs	r3, #3
 8007dce:	e025      	b.n	8007e1c <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	683a      	ldr	r2, [r7, #0]
 8007dd4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	32ae      	adds	r2, #174	; 0xae
 8007de2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007de6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d00f      	beq.n	8007e0c <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	32ae      	adds	r2, #174	; 0xae
 8007df6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007dfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007dfc:	f107 020e 	add.w	r2, r7, #14
 8007e00:	4610      	mov	r0, r2
 8007e02:	4798      	blx	r3
 8007e04:	4602      	mov	r2, r0
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8007e12:	1c5a      	adds	r2, r3, #1
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8007e1a:	2300      	movs	r3, #0
}
 8007e1c:	4618      	mov	r0, r3
 8007e1e:	3710      	adds	r7, #16
 8007e20:	46bd      	mov	sp, r7
 8007e22:	bd80      	pop	{r7, pc}

08007e24 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007e24:	b580      	push	{r7, lr}
 8007e26:	b082      	sub	sp, #8
 8007e28:	af00      	add	r7, sp, #0
 8007e2a:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8007e2c:	6878      	ldr	r0, [r7, #4]
 8007e2e:	f001 fe41 	bl	8009ab4 <USBD_LL_Start>
 8007e32:	4603      	mov	r3, r0
}
 8007e34:	4618      	mov	r0, r3
 8007e36:	3708      	adds	r7, #8
 8007e38:	46bd      	mov	sp, r7
 8007e3a:	bd80      	pop	{r7, pc}

08007e3c <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8007e3c:	b480      	push	{r7}
 8007e3e:	b083      	sub	sp, #12
 8007e40:	af00      	add	r7, sp, #0
 8007e42:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007e44:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8007e46:	4618      	mov	r0, r3
 8007e48:	370c      	adds	r7, #12
 8007e4a:	46bd      	mov	sp, r7
 8007e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e50:	4770      	bx	lr

08007e52 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007e52:	b580      	push	{r7, lr}
 8007e54:	b084      	sub	sp, #16
 8007e56:	af00      	add	r7, sp, #0
 8007e58:	6078      	str	r0, [r7, #4]
 8007e5a:	460b      	mov	r3, r1
 8007e5c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8007e5e:	2300      	movs	r3, #0
 8007e60:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	d009      	beq.n	8007e80 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	78fa      	ldrb	r2, [r7, #3]
 8007e76:	4611      	mov	r1, r2
 8007e78:	6878      	ldr	r0, [r7, #4]
 8007e7a:	4798      	blx	r3
 8007e7c:	4603      	mov	r3, r0
 8007e7e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007e80:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e82:	4618      	mov	r0, r3
 8007e84:	3710      	adds	r7, #16
 8007e86:	46bd      	mov	sp, r7
 8007e88:	bd80      	pop	{r7, pc}

08007e8a <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007e8a:	b580      	push	{r7, lr}
 8007e8c:	b084      	sub	sp, #16
 8007e8e:	af00      	add	r7, sp, #0
 8007e90:	6078      	str	r0, [r7, #4]
 8007e92:	460b      	mov	r3, r1
 8007e94:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8007e96:	2300      	movs	r3, #0
 8007e98:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007ea0:	685b      	ldr	r3, [r3, #4]
 8007ea2:	78fa      	ldrb	r2, [r7, #3]
 8007ea4:	4611      	mov	r1, r2
 8007ea6:	6878      	ldr	r0, [r7, #4]
 8007ea8:	4798      	blx	r3
 8007eaa:	4603      	mov	r3, r0
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d001      	beq.n	8007eb4 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8007eb0:	2303      	movs	r3, #3
 8007eb2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007eb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8007eb6:	4618      	mov	r0, r3
 8007eb8:	3710      	adds	r7, #16
 8007eba:	46bd      	mov	sp, r7
 8007ebc:	bd80      	pop	{r7, pc}

08007ebe <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007ebe:	b580      	push	{r7, lr}
 8007ec0:	b084      	sub	sp, #16
 8007ec2:	af00      	add	r7, sp, #0
 8007ec4:	6078      	str	r0, [r7, #4]
 8007ec6:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007ece:	6839      	ldr	r1, [r7, #0]
 8007ed0:	4618      	mov	r0, r3
 8007ed2:	f001 f908 	bl	80090e6 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	2201      	movs	r2, #1
 8007eda:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8007ee4:	461a      	mov	r2, r3
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007ef2:	f003 031f 	and.w	r3, r3, #31
 8007ef6:	2b02      	cmp	r3, #2
 8007ef8:	d01a      	beq.n	8007f30 <USBD_LL_SetupStage+0x72>
 8007efa:	2b02      	cmp	r3, #2
 8007efc:	d822      	bhi.n	8007f44 <USBD_LL_SetupStage+0x86>
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d002      	beq.n	8007f08 <USBD_LL_SetupStage+0x4a>
 8007f02:	2b01      	cmp	r3, #1
 8007f04:	d00a      	beq.n	8007f1c <USBD_LL_SetupStage+0x5e>
 8007f06:	e01d      	b.n	8007f44 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007f0e:	4619      	mov	r1, r3
 8007f10:	6878      	ldr	r0, [r7, #4]
 8007f12:	f000 fb5f 	bl	80085d4 <USBD_StdDevReq>
 8007f16:	4603      	mov	r3, r0
 8007f18:	73fb      	strb	r3, [r7, #15]
      break;
 8007f1a:	e020      	b.n	8007f5e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007f22:	4619      	mov	r1, r3
 8007f24:	6878      	ldr	r0, [r7, #4]
 8007f26:	f000 fbc7 	bl	80086b8 <USBD_StdItfReq>
 8007f2a:	4603      	mov	r3, r0
 8007f2c:	73fb      	strb	r3, [r7, #15]
      break;
 8007f2e:	e016      	b.n	8007f5e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007f36:	4619      	mov	r1, r3
 8007f38:	6878      	ldr	r0, [r7, #4]
 8007f3a:	f000 fc29 	bl	8008790 <USBD_StdEPReq>
 8007f3e:	4603      	mov	r3, r0
 8007f40:	73fb      	strb	r3, [r7, #15]
      break;
 8007f42:	e00c      	b.n	8007f5e <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007f4a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007f4e:	b2db      	uxtb	r3, r3
 8007f50:	4619      	mov	r1, r3
 8007f52:	6878      	ldr	r0, [r7, #4]
 8007f54:	f001 fe0e 	bl	8009b74 <USBD_LL_StallEP>
 8007f58:	4603      	mov	r3, r0
 8007f5a:	73fb      	strb	r3, [r7, #15]
      break;
 8007f5c:	bf00      	nop
  }

  return ret;
 8007f5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f60:	4618      	mov	r0, r3
 8007f62:	3710      	adds	r7, #16
 8007f64:	46bd      	mov	sp, r7
 8007f66:	bd80      	pop	{r7, pc}

08007f68 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007f68:	b580      	push	{r7, lr}
 8007f6a:	b086      	sub	sp, #24
 8007f6c:	af00      	add	r7, sp, #0
 8007f6e:	60f8      	str	r0, [r7, #12]
 8007f70:	460b      	mov	r3, r1
 8007f72:	607a      	str	r2, [r7, #4]
 8007f74:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8007f76:	2300      	movs	r3, #0
 8007f78:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8007f7a:	7afb      	ldrb	r3, [r7, #11]
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d16e      	bne.n	800805e <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8007f86:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007f8e:	2b03      	cmp	r3, #3
 8007f90:	f040 8098 	bne.w	80080c4 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8007f94:	693b      	ldr	r3, [r7, #16]
 8007f96:	689a      	ldr	r2, [r3, #8]
 8007f98:	693b      	ldr	r3, [r7, #16]
 8007f9a:	68db      	ldr	r3, [r3, #12]
 8007f9c:	429a      	cmp	r2, r3
 8007f9e:	d913      	bls.n	8007fc8 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8007fa0:	693b      	ldr	r3, [r7, #16]
 8007fa2:	689a      	ldr	r2, [r3, #8]
 8007fa4:	693b      	ldr	r3, [r7, #16]
 8007fa6:	68db      	ldr	r3, [r3, #12]
 8007fa8:	1ad2      	subs	r2, r2, r3
 8007faa:	693b      	ldr	r3, [r7, #16]
 8007fac:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8007fae:	693b      	ldr	r3, [r7, #16]
 8007fb0:	68da      	ldr	r2, [r3, #12]
 8007fb2:	693b      	ldr	r3, [r7, #16]
 8007fb4:	689b      	ldr	r3, [r3, #8]
 8007fb6:	4293      	cmp	r3, r2
 8007fb8:	bf28      	it	cs
 8007fba:	4613      	movcs	r3, r2
 8007fbc:	461a      	mov	r2, r3
 8007fbe:	6879      	ldr	r1, [r7, #4]
 8007fc0:	68f8      	ldr	r0, [r7, #12]
 8007fc2:	f001 f984 	bl	80092ce <USBD_CtlContinueRx>
 8007fc6:	e07d      	b.n	80080c4 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007fce:	f003 031f 	and.w	r3, r3, #31
 8007fd2:	2b02      	cmp	r3, #2
 8007fd4:	d014      	beq.n	8008000 <USBD_LL_DataOutStage+0x98>
 8007fd6:	2b02      	cmp	r3, #2
 8007fd8:	d81d      	bhi.n	8008016 <USBD_LL_DataOutStage+0xae>
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d002      	beq.n	8007fe4 <USBD_LL_DataOutStage+0x7c>
 8007fde:	2b01      	cmp	r3, #1
 8007fe0:	d003      	beq.n	8007fea <USBD_LL_DataOutStage+0x82>
 8007fe2:	e018      	b.n	8008016 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8007fe4:	2300      	movs	r3, #0
 8007fe6:	75bb      	strb	r3, [r7, #22]
            break;
 8007fe8:	e018      	b.n	800801c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8007ff0:	b2db      	uxtb	r3, r3
 8007ff2:	4619      	mov	r1, r3
 8007ff4:	68f8      	ldr	r0, [r7, #12]
 8007ff6:	f000 fa5e 	bl	80084b6 <USBD_CoreFindIF>
 8007ffa:	4603      	mov	r3, r0
 8007ffc:	75bb      	strb	r3, [r7, #22]
            break;
 8007ffe:	e00d      	b.n	800801c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8008006:	b2db      	uxtb	r3, r3
 8008008:	4619      	mov	r1, r3
 800800a:	68f8      	ldr	r0, [r7, #12]
 800800c:	f000 fa60 	bl	80084d0 <USBD_CoreFindEP>
 8008010:	4603      	mov	r3, r0
 8008012:	75bb      	strb	r3, [r7, #22]
            break;
 8008014:	e002      	b.n	800801c <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8008016:	2300      	movs	r3, #0
 8008018:	75bb      	strb	r3, [r7, #22]
            break;
 800801a:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800801c:	7dbb      	ldrb	r3, [r7, #22]
 800801e:	2b00      	cmp	r3, #0
 8008020:	d119      	bne.n	8008056 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008028:	b2db      	uxtb	r3, r3
 800802a:	2b03      	cmp	r3, #3
 800802c:	d113      	bne.n	8008056 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800802e:	7dba      	ldrb	r2, [r7, #22]
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	32ae      	adds	r2, #174	; 0xae
 8008034:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008038:	691b      	ldr	r3, [r3, #16]
 800803a:	2b00      	cmp	r3, #0
 800803c:	d00b      	beq.n	8008056 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800803e:	7dba      	ldrb	r2, [r7, #22]
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8008046:	7dba      	ldrb	r2, [r7, #22]
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	32ae      	adds	r2, #174	; 0xae
 800804c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008050:	691b      	ldr	r3, [r3, #16]
 8008052:	68f8      	ldr	r0, [r7, #12]
 8008054:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8008056:	68f8      	ldr	r0, [r7, #12]
 8008058:	f001 f94a 	bl	80092f0 <USBD_CtlSendStatus>
 800805c:	e032      	b.n	80080c4 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800805e:	7afb      	ldrb	r3, [r7, #11]
 8008060:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008064:	b2db      	uxtb	r3, r3
 8008066:	4619      	mov	r1, r3
 8008068:	68f8      	ldr	r0, [r7, #12]
 800806a:	f000 fa31 	bl	80084d0 <USBD_CoreFindEP>
 800806e:	4603      	mov	r3, r0
 8008070:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008072:	7dbb      	ldrb	r3, [r7, #22]
 8008074:	2bff      	cmp	r3, #255	; 0xff
 8008076:	d025      	beq.n	80080c4 <USBD_LL_DataOutStage+0x15c>
 8008078:	7dbb      	ldrb	r3, [r7, #22]
 800807a:	2b00      	cmp	r3, #0
 800807c:	d122      	bne.n	80080c4 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008084:	b2db      	uxtb	r3, r3
 8008086:	2b03      	cmp	r3, #3
 8008088:	d117      	bne.n	80080ba <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800808a:	7dba      	ldrb	r2, [r7, #22]
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	32ae      	adds	r2, #174	; 0xae
 8008090:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008094:	699b      	ldr	r3, [r3, #24]
 8008096:	2b00      	cmp	r3, #0
 8008098:	d00f      	beq.n	80080ba <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800809a:	7dba      	ldrb	r2, [r7, #22]
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 80080a2:	7dba      	ldrb	r2, [r7, #22]
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	32ae      	adds	r2, #174	; 0xae
 80080a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80080ac:	699b      	ldr	r3, [r3, #24]
 80080ae:	7afa      	ldrb	r2, [r7, #11]
 80080b0:	4611      	mov	r1, r2
 80080b2:	68f8      	ldr	r0, [r7, #12]
 80080b4:	4798      	blx	r3
 80080b6:	4603      	mov	r3, r0
 80080b8:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 80080ba:	7dfb      	ldrb	r3, [r7, #23]
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d001      	beq.n	80080c4 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 80080c0:	7dfb      	ldrb	r3, [r7, #23]
 80080c2:	e000      	b.n	80080c6 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 80080c4:	2300      	movs	r3, #0
}
 80080c6:	4618      	mov	r0, r3
 80080c8:	3718      	adds	r7, #24
 80080ca:	46bd      	mov	sp, r7
 80080cc:	bd80      	pop	{r7, pc}

080080ce <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80080ce:	b580      	push	{r7, lr}
 80080d0:	b086      	sub	sp, #24
 80080d2:	af00      	add	r7, sp, #0
 80080d4:	60f8      	str	r0, [r7, #12]
 80080d6:	460b      	mov	r3, r1
 80080d8:	607a      	str	r2, [r7, #4]
 80080da:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 80080dc:	7afb      	ldrb	r3, [r7, #11]
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d16f      	bne.n	80081c2 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	3314      	adds	r3, #20
 80080e6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80080ee:	2b02      	cmp	r3, #2
 80080f0:	d15a      	bne.n	80081a8 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 80080f2:	693b      	ldr	r3, [r7, #16]
 80080f4:	689a      	ldr	r2, [r3, #8]
 80080f6:	693b      	ldr	r3, [r7, #16]
 80080f8:	68db      	ldr	r3, [r3, #12]
 80080fa:	429a      	cmp	r2, r3
 80080fc:	d914      	bls.n	8008128 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80080fe:	693b      	ldr	r3, [r7, #16]
 8008100:	689a      	ldr	r2, [r3, #8]
 8008102:	693b      	ldr	r3, [r7, #16]
 8008104:	68db      	ldr	r3, [r3, #12]
 8008106:	1ad2      	subs	r2, r2, r3
 8008108:	693b      	ldr	r3, [r7, #16]
 800810a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800810c:	693b      	ldr	r3, [r7, #16]
 800810e:	689b      	ldr	r3, [r3, #8]
 8008110:	461a      	mov	r2, r3
 8008112:	6879      	ldr	r1, [r7, #4]
 8008114:	68f8      	ldr	r0, [r7, #12]
 8008116:	f001 f8ac 	bl	8009272 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800811a:	2300      	movs	r3, #0
 800811c:	2200      	movs	r2, #0
 800811e:	2100      	movs	r1, #0
 8008120:	68f8      	ldr	r0, [r7, #12]
 8008122:	f001 fdd1 	bl	8009cc8 <USBD_LL_PrepareReceive>
 8008126:	e03f      	b.n	80081a8 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8008128:	693b      	ldr	r3, [r7, #16]
 800812a:	68da      	ldr	r2, [r3, #12]
 800812c:	693b      	ldr	r3, [r7, #16]
 800812e:	689b      	ldr	r3, [r3, #8]
 8008130:	429a      	cmp	r2, r3
 8008132:	d11c      	bne.n	800816e <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8008134:	693b      	ldr	r3, [r7, #16]
 8008136:	685a      	ldr	r2, [r3, #4]
 8008138:	693b      	ldr	r3, [r7, #16]
 800813a:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800813c:	429a      	cmp	r2, r3
 800813e:	d316      	bcc.n	800816e <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8008140:	693b      	ldr	r3, [r7, #16]
 8008142:	685a      	ldr	r2, [r3, #4]
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800814a:	429a      	cmp	r2, r3
 800814c:	d20f      	bcs.n	800816e <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800814e:	2200      	movs	r2, #0
 8008150:	2100      	movs	r1, #0
 8008152:	68f8      	ldr	r0, [r7, #12]
 8008154:	f001 f88d 	bl	8009272 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	2200      	movs	r2, #0
 800815c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008160:	2300      	movs	r3, #0
 8008162:	2200      	movs	r2, #0
 8008164:	2100      	movs	r1, #0
 8008166:	68f8      	ldr	r0, [r7, #12]
 8008168:	f001 fdae 	bl	8009cc8 <USBD_LL_PrepareReceive>
 800816c:	e01c      	b.n	80081a8 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008174:	b2db      	uxtb	r3, r3
 8008176:	2b03      	cmp	r3, #3
 8008178:	d10f      	bne.n	800819a <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008180:	68db      	ldr	r3, [r3, #12]
 8008182:	2b00      	cmp	r3, #0
 8008184:	d009      	beq.n	800819a <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	2200      	movs	r2, #0
 800818a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008194:	68db      	ldr	r3, [r3, #12]
 8008196:	68f8      	ldr	r0, [r7, #12]
 8008198:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800819a:	2180      	movs	r1, #128	; 0x80
 800819c:	68f8      	ldr	r0, [r7, #12]
 800819e:	f001 fce9 	bl	8009b74 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80081a2:	68f8      	ldr	r0, [r7, #12]
 80081a4:	f001 f8b7 	bl	8009316 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d03a      	beq.n	8008228 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 80081b2:	68f8      	ldr	r0, [r7, #12]
 80081b4:	f7ff fe42 	bl	8007e3c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	2200      	movs	r2, #0
 80081bc:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80081c0:	e032      	b.n	8008228 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 80081c2:	7afb      	ldrb	r3, [r7, #11]
 80081c4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80081c8:	b2db      	uxtb	r3, r3
 80081ca:	4619      	mov	r1, r3
 80081cc:	68f8      	ldr	r0, [r7, #12]
 80081ce:	f000 f97f 	bl	80084d0 <USBD_CoreFindEP>
 80081d2:	4603      	mov	r3, r0
 80081d4:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80081d6:	7dfb      	ldrb	r3, [r7, #23]
 80081d8:	2bff      	cmp	r3, #255	; 0xff
 80081da:	d025      	beq.n	8008228 <USBD_LL_DataInStage+0x15a>
 80081dc:	7dfb      	ldrb	r3, [r7, #23]
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d122      	bne.n	8008228 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80081e8:	b2db      	uxtb	r3, r3
 80081ea:	2b03      	cmp	r3, #3
 80081ec:	d11c      	bne.n	8008228 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 80081ee:	7dfa      	ldrb	r2, [r7, #23]
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	32ae      	adds	r2, #174	; 0xae
 80081f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80081f8:	695b      	ldr	r3, [r3, #20]
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d014      	beq.n	8008228 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 80081fe:	7dfa      	ldrb	r2, [r7, #23]
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8008206:	7dfa      	ldrb	r2, [r7, #23]
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	32ae      	adds	r2, #174	; 0xae
 800820c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008210:	695b      	ldr	r3, [r3, #20]
 8008212:	7afa      	ldrb	r2, [r7, #11]
 8008214:	4611      	mov	r1, r2
 8008216:	68f8      	ldr	r0, [r7, #12]
 8008218:	4798      	blx	r3
 800821a:	4603      	mov	r3, r0
 800821c:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800821e:	7dbb      	ldrb	r3, [r7, #22]
 8008220:	2b00      	cmp	r3, #0
 8008222:	d001      	beq.n	8008228 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8008224:	7dbb      	ldrb	r3, [r7, #22]
 8008226:	e000      	b.n	800822a <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8008228:	2300      	movs	r3, #0
}
 800822a:	4618      	mov	r0, r3
 800822c:	3718      	adds	r7, #24
 800822e:	46bd      	mov	sp, r7
 8008230:	bd80      	pop	{r7, pc}

08008232 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8008232:	b580      	push	{r7, lr}
 8008234:	b084      	sub	sp, #16
 8008236:	af00      	add	r7, sp, #0
 8008238:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800823a:	2300      	movs	r3, #0
 800823c:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	2201      	movs	r2, #1
 8008242:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	2200      	movs	r2, #0
 800824a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	2200      	movs	r2, #0
 8008252:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	2200      	movs	r2, #0
 8008258:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	2200      	movs	r2, #0
 8008260:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800826a:	2b00      	cmp	r3, #0
 800826c:	d014      	beq.n	8008298 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008274:	685b      	ldr	r3, [r3, #4]
 8008276:	2b00      	cmp	r3, #0
 8008278:	d00e      	beq.n	8008298 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008280:	685b      	ldr	r3, [r3, #4]
 8008282:	687a      	ldr	r2, [r7, #4]
 8008284:	6852      	ldr	r2, [r2, #4]
 8008286:	b2d2      	uxtb	r2, r2
 8008288:	4611      	mov	r1, r2
 800828a:	6878      	ldr	r0, [r7, #4]
 800828c:	4798      	blx	r3
 800828e:	4603      	mov	r3, r0
 8008290:	2b00      	cmp	r3, #0
 8008292:	d001      	beq.n	8008298 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8008294:	2303      	movs	r3, #3
 8008296:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008298:	2340      	movs	r3, #64	; 0x40
 800829a:	2200      	movs	r2, #0
 800829c:	2100      	movs	r1, #0
 800829e:	6878      	ldr	r0, [r7, #4]
 80082a0:	f001 fc23 	bl	8009aea <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	2201      	movs	r2, #1
 80082a8:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	2240      	movs	r2, #64	; 0x40
 80082b0:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80082b4:	2340      	movs	r3, #64	; 0x40
 80082b6:	2200      	movs	r2, #0
 80082b8:	2180      	movs	r1, #128	; 0x80
 80082ba:	6878      	ldr	r0, [r7, #4]
 80082bc:	f001 fc15 	bl	8009aea <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	2201      	movs	r2, #1
 80082c4:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	2240      	movs	r2, #64	; 0x40
 80082ca:	621a      	str	r2, [r3, #32]

  return ret;
 80082cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80082ce:	4618      	mov	r0, r3
 80082d0:	3710      	adds	r7, #16
 80082d2:	46bd      	mov	sp, r7
 80082d4:	bd80      	pop	{r7, pc}

080082d6 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80082d6:	b480      	push	{r7}
 80082d8:	b083      	sub	sp, #12
 80082da:	af00      	add	r7, sp, #0
 80082dc:	6078      	str	r0, [r7, #4]
 80082de:	460b      	mov	r3, r1
 80082e0:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	78fa      	ldrb	r2, [r7, #3]
 80082e6:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80082e8:	2300      	movs	r3, #0
}
 80082ea:	4618      	mov	r0, r3
 80082ec:	370c      	adds	r7, #12
 80082ee:	46bd      	mov	sp, r7
 80082f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082f4:	4770      	bx	lr

080082f6 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80082f6:	b480      	push	{r7}
 80082f8:	b083      	sub	sp, #12
 80082fa:	af00      	add	r7, sp, #0
 80082fc:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008304:	b2da      	uxtb	r2, r3
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	2204      	movs	r2, #4
 8008310:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8008314:	2300      	movs	r3, #0
}
 8008316:	4618      	mov	r0, r3
 8008318:	370c      	adds	r7, #12
 800831a:	46bd      	mov	sp, r7
 800831c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008320:	4770      	bx	lr

08008322 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8008322:	b480      	push	{r7}
 8008324:	b083      	sub	sp, #12
 8008326:	af00      	add	r7, sp, #0
 8008328:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008330:	b2db      	uxtb	r3, r3
 8008332:	2b04      	cmp	r3, #4
 8008334:	d106      	bne.n	8008344 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800833c:	b2da      	uxtb	r2, r3
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8008344:	2300      	movs	r3, #0
}
 8008346:	4618      	mov	r0, r3
 8008348:	370c      	adds	r7, #12
 800834a:	46bd      	mov	sp, r7
 800834c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008350:	4770      	bx	lr

08008352 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8008352:	b580      	push	{r7, lr}
 8008354:	b082      	sub	sp, #8
 8008356:	af00      	add	r7, sp, #0
 8008358:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008360:	b2db      	uxtb	r3, r3
 8008362:	2b03      	cmp	r3, #3
 8008364:	d110      	bne.n	8008388 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800836c:	2b00      	cmp	r3, #0
 800836e:	d00b      	beq.n	8008388 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008376:	69db      	ldr	r3, [r3, #28]
 8008378:	2b00      	cmp	r3, #0
 800837a:	d005      	beq.n	8008388 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008382:	69db      	ldr	r3, [r3, #28]
 8008384:	6878      	ldr	r0, [r7, #4]
 8008386:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8008388:	2300      	movs	r3, #0
}
 800838a:	4618      	mov	r0, r3
 800838c:	3708      	adds	r7, #8
 800838e:	46bd      	mov	sp, r7
 8008390:	bd80      	pop	{r7, pc}

08008392 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8008392:	b580      	push	{r7, lr}
 8008394:	b082      	sub	sp, #8
 8008396:	af00      	add	r7, sp, #0
 8008398:	6078      	str	r0, [r7, #4]
 800839a:	460b      	mov	r3, r1
 800839c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	32ae      	adds	r2, #174	; 0xae
 80083a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	d101      	bne.n	80083b4 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 80083b0:	2303      	movs	r3, #3
 80083b2:	e01c      	b.n	80083ee <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80083ba:	b2db      	uxtb	r3, r3
 80083bc:	2b03      	cmp	r3, #3
 80083be:	d115      	bne.n	80083ec <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	32ae      	adds	r2, #174	; 0xae
 80083ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80083ce:	6a1b      	ldr	r3, [r3, #32]
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	d00b      	beq.n	80083ec <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	32ae      	adds	r2, #174	; 0xae
 80083de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80083e2:	6a1b      	ldr	r3, [r3, #32]
 80083e4:	78fa      	ldrb	r2, [r7, #3]
 80083e6:	4611      	mov	r1, r2
 80083e8:	6878      	ldr	r0, [r7, #4]
 80083ea:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80083ec:	2300      	movs	r3, #0
}
 80083ee:	4618      	mov	r0, r3
 80083f0:	3708      	adds	r7, #8
 80083f2:	46bd      	mov	sp, r7
 80083f4:	bd80      	pop	{r7, pc}

080083f6 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80083f6:	b580      	push	{r7, lr}
 80083f8:	b082      	sub	sp, #8
 80083fa:	af00      	add	r7, sp, #0
 80083fc:	6078      	str	r0, [r7, #4]
 80083fe:	460b      	mov	r3, r1
 8008400:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	32ae      	adds	r2, #174	; 0xae
 800840c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008410:	2b00      	cmp	r3, #0
 8008412:	d101      	bne.n	8008418 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8008414:	2303      	movs	r3, #3
 8008416:	e01c      	b.n	8008452 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800841e:	b2db      	uxtb	r3, r3
 8008420:	2b03      	cmp	r3, #3
 8008422:	d115      	bne.n	8008450 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	32ae      	adds	r2, #174	; 0xae
 800842e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008432:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008434:	2b00      	cmp	r3, #0
 8008436:	d00b      	beq.n	8008450 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	32ae      	adds	r2, #174	; 0xae
 8008442:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008446:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008448:	78fa      	ldrb	r2, [r7, #3]
 800844a:	4611      	mov	r1, r2
 800844c:	6878      	ldr	r0, [r7, #4]
 800844e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008450:	2300      	movs	r3, #0
}
 8008452:	4618      	mov	r0, r3
 8008454:	3708      	adds	r7, #8
 8008456:	46bd      	mov	sp, r7
 8008458:	bd80      	pop	{r7, pc}

0800845a <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800845a:	b480      	push	{r7}
 800845c:	b083      	sub	sp, #12
 800845e:	af00      	add	r7, sp, #0
 8008460:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008462:	2300      	movs	r3, #0
}
 8008464:	4618      	mov	r0, r3
 8008466:	370c      	adds	r7, #12
 8008468:	46bd      	mov	sp, r7
 800846a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800846e:	4770      	bx	lr

08008470 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8008470:	b580      	push	{r7, lr}
 8008472:	b084      	sub	sp, #16
 8008474:	af00      	add	r7, sp, #0
 8008476:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8008478:	2300      	movs	r3, #0
 800847a:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	2201      	movs	r2, #1
 8008480:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800848a:	2b00      	cmp	r3, #0
 800848c:	d00e      	beq.n	80084ac <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008494:	685b      	ldr	r3, [r3, #4]
 8008496:	687a      	ldr	r2, [r7, #4]
 8008498:	6852      	ldr	r2, [r2, #4]
 800849a:	b2d2      	uxtb	r2, r2
 800849c:	4611      	mov	r1, r2
 800849e:	6878      	ldr	r0, [r7, #4]
 80084a0:	4798      	blx	r3
 80084a2:	4603      	mov	r3, r0
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	d001      	beq.n	80084ac <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 80084a8:	2303      	movs	r3, #3
 80084aa:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80084ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80084ae:	4618      	mov	r0, r3
 80084b0:	3710      	adds	r7, #16
 80084b2:	46bd      	mov	sp, r7
 80084b4:	bd80      	pop	{r7, pc}

080084b6 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80084b6:	b480      	push	{r7}
 80084b8:	b083      	sub	sp, #12
 80084ba:	af00      	add	r7, sp, #0
 80084bc:	6078      	str	r0, [r7, #4]
 80084be:	460b      	mov	r3, r1
 80084c0:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80084c2:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80084c4:	4618      	mov	r0, r3
 80084c6:	370c      	adds	r7, #12
 80084c8:	46bd      	mov	sp, r7
 80084ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ce:	4770      	bx	lr

080084d0 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80084d0:	b480      	push	{r7}
 80084d2:	b083      	sub	sp, #12
 80084d4:	af00      	add	r7, sp, #0
 80084d6:	6078      	str	r0, [r7, #4]
 80084d8:	460b      	mov	r3, r1
 80084da:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80084dc:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80084de:	4618      	mov	r0, r3
 80084e0:	370c      	adds	r7, #12
 80084e2:	46bd      	mov	sp, r7
 80084e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084e8:	4770      	bx	lr

080084ea <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 80084ea:	b580      	push	{r7, lr}
 80084ec:	b086      	sub	sp, #24
 80084ee:	af00      	add	r7, sp, #0
 80084f0:	6078      	str	r0, [r7, #4]
 80084f2:	460b      	mov	r3, r1
 80084f4:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 80084fe:	2300      	movs	r3, #0
 8008500:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	885b      	ldrh	r3, [r3, #2]
 8008506:	b29a      	uxth	r2, r3
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	781b      	ldrb	r3, [r3, #0]
 800850c:	b29b      	uxth	r3, r3
 800850e:	429a      	cmp	r2, r3
 8008510:	d920      	bls.n	8008554 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	781b      	ldrb	r3, [r3, #0]
 8008516:	b29b      	uxth	r3, r3
 8008518:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800851a:	e013      	b.n	8008544 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800851c:	f107 030a 	add.w	r3, r7, #10
 8008520:	4619      	mov	r1, r3
 8008522:	6978      	ldr	r0, [r7, #20]
 8008524:	f000 f81b 	bl	800855e <USBD_GetNextDesc>
 8008528:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800852a:	697b      	ldr	r3, [r7, #20]
 800852c:	785b      	ldrb	r3, [r3, #1]
 800852e:	2b05      	cmp	r3, #5
 8008530:	d108      	bne.n	8008544 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8008532:	697b      	ldr	r3, [r7, #20]
 8008534:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8008536:	693b      	ldr	r3, [r7, #16]
 8008538:	789b      	ldrb	r3, [r3, #2]
 800853a:	78fa      	ldrb	r2, [r7, #3]
 800853c:	429a      	cmp	r2, r3
 800853e:	d008      	beq.n	8008552 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8008540:	2300      	movs	r3, #0
 8008542:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	885b      	ldrh	r3, [r3, #2]
 8008548:	b29a      	uxth	r2, r3
 800854a:	897b      	ldrh	r3, [r7, #10]
 800854c:	429a      	cmp	r2, r3
 800854e:	d8e5      	bhi.n	800851c <USBD_GetEpDesc+0x32>
 8008550:	e000      	b.n	8008554 <USBD_GetEpDesc+0x6a>
          break;
 8008552:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8008554:	693b      	ldr	r3, [r7, #16]
}
 8008556:	4618      	mov	r0, r3
 8008558:	3718      	adds	r7, #24
 800855a:	46bd      	mov	sp, r7
 800855c:	bd80      	pop	{r7, pc}

0800855e <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800855e:	b480      	push	{r7}
 8008560:	b085      	sub	sp, #20
 8008562:	af00      	add	r7, sp, #0
 8008564:	6078      	str	r0, [r7, #4]
 8008566:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800856c:	683b      	ldr	r3, [r7, #0]
 800856e:	881a      	ldrh	r2, [r3, #0]
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	781b      	ldrb	r3, [r3, #0]
 8008574:	b29b      	uxth	r3, r3
 8008576:	4413      	add	r3, r2
 8008578:	b29a      	uxth	r2, r3
 800857a:	683b      	ldr	r3, [r7, #0]
 800857c:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	781b      	ldrb	r3, [r3, #0]
 8008582:	461a      	mov	r2, r3
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	4413      	add	r3, r2
 8008588:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800858a:	68fb      	ldr	r3, [r7, #12]
}
 800858c:	4618      	mov	r0, r3
 800858e:	3714      	adds	r7, #20
 8008590:	46bd      	mov	sp, r7
 8008592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008596:	4770      	bx	lr

08008598 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8008598:	b480      	push	{r7}
 800859a:	b087      	sub	sp, #28
 800859c:	af00      	add	r7, sp, #0
 800859e:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80085a4:	697b      	ldr	r3, [r7, #20]
 80085a6:	781b      	ldrb	r3, [r3, #0]
 80085a8:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80085aa:	697b      	ldr	r3, [r7, #20]
 80085ac:	3301      	adds	r3, #1
 80085ae:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80085b0:	697b      	ldr	r3, [r7, #20]
 80085b2:	781b      	ldrb	r3, [r3, #0]
 80085b4:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80085b6:	8a3b      	ldrh	r3, [r7, #16]
 80085b8:	021b      	lsls	r3, r3, #8
 80085ba:	b21a      	sxth	r2, r3
 80085bc:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80085c0:	4313      	orrs	r3, r2
 80085c2:	b21b      	sxth	r3, r3
 80085c4:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80085c6:	89fb      	ldrh	r3, [r7, #14]
}
 80085c8:	4618      	mov	r0, r3
 80085ca:	371c      	adds	r7, #28
 80085cc:	46bd      	mov	sp, r7
 80085ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085d2:	4770      	bx	lr

080085d4 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80085d4:	b580      	push	{r7, lr}
 80085d6:	b084      	sub	sp, #16
 80085d8:	af00      	add	r7, sp, #0
 80085da:	6078      	str	r0, [r7, #4]
 80085dc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80085de:	2300      	movs	r3, #0
 80085e0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80085e2:	683b      	ldr	r3, [r7, #0]
 80085e4:	781b      	ldrb	r3, [r3, #0]
 80085e6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80085ea:	2b40      	cmp	r3, #64	; 0x40
 80085ec:	d005      	beq.n	80085fa <USBD_StdDevReq+0x26>
 80085ee:	2b40      	cmp	r3, #64	; 0x40
 80085f0:	d857      	bhi.n	80086a2 <USBD_StdDevReq+0xce>
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	d00f      	beq.n	8008616 <USBD_StdDevReq+0x42>
 80085f6:	2b20      	cmp	r3, #32
 80085f8:	d153      	bne.n	80086a2 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	32ae      	adds	r2, #174	; 0xae
 8008604:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008608:	689b      	ldr	r3, [r3, #8]
 800860a:	6839      	ldr	r1, [r7, #0]
 800860c:	6878      	ldr	r0, [r7, #4]
 800860e:	4798      	blx	r3
 8008610:	4603      	mov	r3, r0
 8008612:	73fb      	strb	r3, [r7, #15]
      break;
 8008614:	e04a      	b.n	80086ac <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008616:	683b      	ldr	r3, [r7, #0]
 8008618:	785b      	ldrb	r3, [r3, #1]
 800861a:	2b09      	cmp	r3, #9
 800861c:	d83b      	bhi.n	8008696 <USBD_StdDevReq+0xc2>
 800861e:	a201      	add	r2, pc, #4	; (adr r2, 8008624 <USBD_StdDevReq+0x50>)
 8008620:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008624:	08008679 	.word	0x08008679
 8008628:	0800868d 	.word	0x0800868d
 800862c:	08008697 	.word	0x08008697
 8008630:	08008683 	.word	0x08008683
 8008634:	08008697 	.word	0x08008697
 8008638:	08008657 	.word	0x08008657
 800863c:	0800864d 	.word	0x0800864d
 8008640:	08008697 	.word	0x08008697
 8008644:	0800866f 	.word	0x0800866f
 8008648:	08008661 	.word	0x08008661
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800864c:	6839      	ldr	r1, [r7, #0]
 800864e:	6878      	ldr	r0, [r7, #4]
 8008650:	f000 fa3c 	bl	8008acc <USBD_GetDescriptor>
          break;
 8008654:	e024      	b.n	80086a0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8008656:	6839      	ldr	r1, [r7, #0]
 8008658:	6878      	ldr	r0, [r7, #4]
 800865a:	f000 fba1 	bl	8008da0 <USBD_SetAddress>
          break;
 800865e:	e01f      	b.n	80086a0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8008660:	6839      	ldr	r1, [r7, #0]
 8008662:	6878      	ldr	r0, [r7, #4]
 8008664:	f000 fbe0 	bl	8008e28 <USBD_SetConfig>
 8008668:	4603      	mov	r3, r0
 800866a:	73fb      	strb	r3, [r7, #15]
          break;
 800866c:	e018      	b.n	80086a0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800866e:	6839      	ldr	r1, [r7, #0]
 8008670:	6878      	ldr	r0, [r7, #4]
 8008672:	f000 fc83 	bl	8008f7c <USBD_GetConfig>
          break;
 8008676:	e013      	b.n	80086a0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8008678:	6839      	ldr	r1, [r7, #0]
 800867a:	6878      	ldr	r0, [r7, #4]
 800867c:	f000 fcb4 	bl	8008fe8 <USBD_GetStatus>
          break;
 8008680:	e00e      	b.n	80086a0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8008682:	6839      	ldr	r1, [r7, #0]
 8008684:	6878      	ldr	r0, [r7, #4]
 8008686:	f000 fce3 	bl	8009050 <USBD_SetFeature>
          break;
 800868a:	e009      	b.n	80086a0 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800868c:	6839      	ldr	r1, [r7, #0]
 800868e:	6878      	ldr	r0, [r7, #4]
 8008690:	f000 fd07 	bl	80090a2 <USBD_ClrFeature>
          break;
 8008694:	e004      	b.n	80086a0 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8008696:	6839      	ldr	r1, [r7, #0]
 8008698:	6878      	ldr	r0, [r7, #4]
 800869a:	f000 fd5e 	bl	800915a <USBD_CtlError>
          break;
 800869e:	bf00      	nop
      }
      break;
 80086a0:	e004      	b.n	80086ac <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 80086a2:	6839      	ldr	r1, [r7, #0]
 80086a4:	6878      	ldr	r0, [r7, #4]
 80086a6:	f000 fd58 	bl	800915a <USBD_CtlError>
      break;
 80086aa:	bf00      	nop
  }

  return ret;
 80086ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80086ae:	4618      	mov	r0, r3
 80086b0:	3710      	adds	r7, #16
 80086b2:	46bd      	mov	sp, r7
 80086b4:	bd80      	pop	{r7, pc}
 80086b6:	bf00      	nop

080086b8 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80086b8:	b580      	push	{r7, lr}
 80086ba:	b084      	sub	sp, #16
 80086bc:	af00      	add	r7, sp, #0
 80086be:	6078      	str	r0, [r7, #4]
 80086c0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80086c2:	2300      	movs	r3, #0
 80086c4:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80086c6:	683b      	ldr	r3, [r7, #0]
 80086c8:	781b      	ldrb	r3, [r3, #0]
 80086ca:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80086ce:	2b40      	cmp	r3, #64	; 0x40
 80086d0:	d005      	beq.n	80086de <USBD_StdItfReq+0x26>
 80086d2:	2b40      	cmp	r3, #64	; 0x40
 80086d4:	d852      	bhi.n	800877c <USBD_StdItfReq+0xc4>
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d001      	beq.n	80086de <USBD_StdItfReq+0x26>
 80086da:	2b20      	cmp	r3, #32
 80086dc:	d14e      	bne.n	800877c <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80086e4:	b2db      	uxtb	r3, r3
 80086e6:	3b01      	subs	r3, #1
 80086e8:	2b02      	cmp	r3, #2
 80086ea:	d840      	bhi.n	800876e <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80086ec:	683b      	ldr	r3, [r7, #0]
 80086ee:	889b      	ldrh	r3, [r3, #4]
 80086f0:	b2db      	uxtb	r3, r3
 80086f2:	2b01      	cmp	r3, #1
 80086f4:	d836      	bhi.n	8008764 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 80086f6:	683b      	ldr	r3, [r7, #0]
 80086f8:	889b      	ldrh	r3, [r3, #4]
 80086fa:	b2db      	uxtb	r3, r3
 80086fc:	4619      	mov	r1, r3
 80086fe:	6878      	ldr	r0, [r7, #4]
 8008700:	f7ff fed9 	bl	80084b6 <USBD_CoreFindIF>
 8008704:	4603      	mov	r3, r0
 8008706:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008708:	7bbb      	ldrb	r3, [r7, #14]
 800870a:	2bff      	cmp	r3, #255	; 0xff
 800870c:	d01d      	beq.n	800874a <USBD_StdItfReq+0x92>
 800870e:	7bbb      	ldrb	r3, [r7, #14]
 8008710:	2b00      	cmp	r3, #0
 8008712:	d11a      	bne.n	800874a <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8008714:	7bba      	ldrb	r2, [r7, #14]
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	32ae      	adds	r2, #174	; 0xae
 800871a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800871e:	689b      	ldr	r3, [r3, #8]
 8008720:	2b00      	cmp	r3, #0
 8008722:	d00f      	beq.n	8008744 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8008724:	7bba      	ldrb	r2, [r7, #14]
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800872c:	7bba      	ldrb	r2, [r7, #14]
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	32ae      	adds	r2, #174	; 0xae
 8008732:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008736:	689b      	ldr	r3, [r3, #8]
 8008738:	6839      	ldr	r1, [r7, #0]
 800873a:	6878      	ldr	r0, [r7, #4]
 800873c:	4798      	blx	r3
 800873e:	4603      	mov	r3, r0
 8008740:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8008742:	e004      	b.n	800874e <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8008744:	2303      	movs	r3, #3
 8008746:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8008748:	e001      	b.n	800874e <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800874a:	2303      	movs	r3, #3
 800874c:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800874e:	683b      	ldr	r3, [r7, #0]
 8008750:	88db      	ldrh	r3, [r3, #6]
 8008752:	2b00      	cmp	r3, #0
 8008754:	d110      	bne.n	8008778 <USBD_StdItfReq+0xc0>
 8008756:	7bfb      	ldrb	r3, [r7, #15]
 8008758:	2b00      	cmp	r3, #0
 800875a:	d10d      	bne.n	8008778 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800875c:	6878      	ldr	r0, [r7, #4]
 800875e:	f000 fdc7 	bl	80092f0 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8008762:	e009      	b.n	8008778 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8008764:	6839      	ldr	r1, [r7, #0]
 8008766:	6878      	ldr	r0, [r7, #4]
 8008768:	f000 fcf7 	bl	800915a <USBD_CtlError>
          break;
 800876c:	e004      	b.n	8008778 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800876e:	6839      	ldr	r1, [r7, #0]
 8008770:	6878      	ldr	r0, [r7, #4]
 8008772:	f000 fcf2 	bl	800915a <USBD_CtlError>
          break;
 8008776:	e000      	b.n	800877a <USBD_StdItfReq+0xc2>
          break;
 8008778:	bf00      	nop
      }
      break;
 800877a:	e004      	b.n	8008786 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800877c:	6839      	ldr	r1, [r7, #0]
 800877e:	6878      	ldr	r0, [r7, #4]
 8008780:	f000 fceb 	bl	800915a <USBD_CtlError>
      break;
 8008784:	bf00      	nop
  }

  return ret;
 8008786:	7bfb      	ldrb	r3, [r7, #15]
}
 8008788:	4618      	mov	r0, r3
 800878a:	3710      	adds	r7, #16
 800878c:	46bd      	mov	sp, r7
 800878e:	bd80      	pop	{r7, pc}

08008790 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008790:	b580      	push	{r7, lr}
 8008792:	b084      	sub	sp, #16
 8008794:	af00      	add	r7, sp, #0
 8008796:	6078      	str	r0, [r7, #4]
 8008798:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800879a:	2300      	movs	r3, #0
 800879c:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800879e:	683b      	ldr	r3, [r7, #0]
 80087a0:	889b      	ldrh	r3, [r3, #4]
 80087a2:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80087a4:	683b      	ldr	r3, [r7, #0]
 80087a6:	781b      	ldrb	r3, [r3, #0]
 80087a8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80087ac:	2b40      	cmp	r3, #64	; 0x40
 80087ae:	d007      	beq.n	80087c0 <USBD_StdEPReq+0x30>
 80087b0:	2b40      	cmp	r3, #64	; 0x40
 80087b2:	f200 817f 	bhi.w	8008ab4 <USBD_StdEPReq+0x324>
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	d02a      	beq.n	8008810 <USBD_StdEPReq+0x80>
 80087ba:	2b20      	cmp	r3, #32
 80087bc:	f040 817a 	bne.w	8008ab4 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 80087c0:	7bbb      	ldrb	r3, [r7, #14]
 80087c2:	4619      	mov	r1, r3
 80087c4:	6878      	ldr	r0, [r7, #4]
 80087c6:	f7ff fe83 	bl	80084d0 <USBD_CoreFindEP>
 80087ca:	4603      	mov	r3, r0
 80087cc:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80087ce:	7b7b      	ldrb	r3, [r7, #13]
 80087d0:	2bff      	cmp	r3, #255	; 0xff
 80087d2:	f000 8174 	beq.w	8008abe <USBD_StdEPReq+0x32e>
 80087d6:	7b7b      	ldrb	r3, [r7, #13]
 80087d8:	2b00      	cmp	r3, #0
 80087da:	f040 8170 	bne.w	8008abe <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 80087de:	7b7a      	ldrb	r2, [r7, #13]
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 80087e6:	7b7a      	ldrb	r2, [r7, #13]
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	32ae      	adds	r2, #174	; 0xae
 80087ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80087f0:	689b      	ldr	r3, [r3, #8]
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	f000 8163 	beq.w	8008abe <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 80087f8:	7b7a      	ldrb	r2, [r7, #13]
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	32ae      	adds	r2, #174	; 0xae
 80087fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008802:	689b      	ldr	r3, [r3, #8]
 8008804:	6839      	ldr	r1, [r7, #0]
 8008806:	6878      	ldr	r0, [r7, #4]
 8008808:	4798      	blx	r3
 800880a:	4603      	mov	r3, r0
 800880c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800880e:	e156      	b.n	8008abe <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008810:	683b      	ldr	r3, [r7, #0]
 8008812:	785b      	ldrb	r3, [r3, #1]
 8008814:	2b03      	cmp	r3, #3
 8008816:	d008      	beq.n	800882a <USBD_StdEPReq+0x9a>
 8008818:	2b03      	cmp	r3, #3
 800881a:	f300 8145 	bgt.w	8008aa8 <USBD_StdEPReq+0x318>
 800881e:	2b00      	cmp	r3, #0
 8008820:	f000 809b 	beq.w	800895a <USBD_StdEPReq+0x1ca>
 8008824:	2b01      	cmp	r3, #1
 8008826:	d03c      	beq.n	80088a2 <USBD_StdEPReq+0x112>
 8008828:	e13e      	b.n	8008aa8 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008830:	b2db      	uxtb	r3, r3
 8008832:	2b02      	cmp	r3, #2
 8008834:	d002      	beq.n	800883c <USBD_StdEPReq+0xac>
 8008836:	2b03      	cmp	r3, #3
 8008838:	d016      	beq.n	8008868 <USBD_StdEPReq+0xd8>
 800883a:	e02c      	b.n	8008896 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800883c:	7bbb      	ldrb	r3, [r7, #14]
 800883e:	2b00      	cmp	r3, #0
 8008840:	d00d      	beq.n	800885e <USBD_StdEPReq+0xce>
 8008842:	7bbb      	ldrb	r3, [r7, #14]
 8008844:	2b80      	cmp	r3, #128	; 0x80
 8008846:	d00a      	beq.n	800885e <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008848:	7bbb      	ldrb	r3, [r7, #14]
 800884a:	4619      	mov	r1, r3
 800884c:	6878      	ldr	r0, [r7, #4]
 800884e:	f001 f991 	bl	8009b74 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008852:	2180      	movs	r1, #128	; 0x80
 8008854:	6878      	ldr	r0, [r7, #4]
 8008856:	f001 f98d 	bl	8009b74 <USBD_LL_StallEP>
 800885a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800885c:	e020      	b.n	80088a0 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800885e:	6839      	ldr	r1, [r7, #0]
 8008860:	6878      	ldr	r0, [r7, #4]
 8008862:	f000 fc7a 	bl	800915a <USBD_CtlError>
              break;
 8008866:	e01b      	b.n	80088a0 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008868:	683b      	ldr	r3, [r7, #0]
 800886a:	885b      	ldrh	r3, [r3, #2]
 800886c:	2b00      	cmp	r3, #0
 800886e:	d10e      	bne.n	800888e <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008870:	7bbb      	ldrb	r3, [r7, #14]
 8008872:	2b00      	cmp	r3, #0
 8008874:	d00b      	beq.n	800888e <USBD_StdEPReq+0xfe>
 8008876:	7bbb      	ldrb	r3, [r7, #14]
 8008878:	2b80      	cmp	r3, #128	; 0x80
 800887a:	d008      	beq.n	800888e <USBD_StdEPReq+0xfe>
 800887c:	683b      	ldr	r3, [r7, #0]
 800887e:	88db      	ldrh	r3, [r3, #6]
 8008880:	2b00      	cmp	r3, #0
 8008882:	d104      	bne.n	800888e <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8008884:	7bbb      	ldrb	r3, [r7, #14]
 8008886:	4619      	mov	r1, r3
 8008888:	6878      	ldr	r0, [r7, #4]
 800888a:	f001 f973 	bl	8009b74 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800888e:	6878      	ldr	r0, [r7, #4]
 8008890:	f000 fd2e 	bl	80092f0 <USBD_CtlSendStatus>

              break;
 8008894:	e004      	b.n	80088a0 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8008896:	6839      	ldr	r1, [r7, #0]
 8008898:	6878      	ldr	r0, [r7, #4]
 800889a:	f000 fc5e 	bl	800915a <USBD_CtlError>
              break;
 800889e:	bf00      	nop
          }
          break;
 80088a0:	e107      	b.n	8008ab2 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80088a8:	b2db      	uxtb	r3, r3
 80088aa:	2b02      	cmp	r3, #2
 80088ac:	d002      	beq.n	80088b4 <USBD_StdEPReq+0x124>
 80088ae:	2b03      	cmp	r3, #3
 80088b0:	d016      	beq.n	80088e0 <USBD_StdEPReq+0x150>
 80088b2:	e04b      	b.n	800894c <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80088b4:	7bbb      	ldrb	r3, [r7, #14]
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	d00d      	beq.n	80088d6 <USBD_StdEPReq+0x146>
 80088ba:	7bbb      	ldrb	r3, [r7, #14]
 80088bc:	2b80      	cmp	r3, #128	; 0x80
 80088be:	d00a      	beq.n	80088d6 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80088c0:	7bbb      	ldrb	r3, [r7, #14]
 80088c2:	4619      	mov	r1, r3
 80088c4:	6878      	ldr	r0, [r7, #4]
 80088c6:	f001 f955 	bl	8009b74 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80088ca:	2180      	movs	r1, #128	; 0x80
 80088cc:	6878      	ldr	r0, [r7, #4]
 80088ce:	f001 f951 	bl	8009b74 <USBD_LL_StallEP>
 80088d2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80088d4:	e040      	b.n	8008958 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 80088d6:	6839      	ldr	r1, [r7, #0]
 80088d8:	6878      	ldr	r0, [r7, #4]
 80088da:	f000 fc3e 	bl	800915a <USBD_CtlError>
              break;
 80088de:	e03b      	b.n	8008958 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80088e0:	683b      	ldr	r3, [r7, #0]
 80088e2:	885b      	ldrh	r3, [r3, #2]
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	d136      	bne.n	8008956 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80088e8:	7bbb      	ldrb	r3, [r7, #14]
 80088ea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	d004      	beq.n	80088fc <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80088f2:	7bbb      	ldrb	r3, [r7, #14]
 80088f4:	4619      	mov	r1, r3
 80088f6:	6878      	ldr	r0, [r7, #4]
 80088f8:	f001 f95b 	bl	8009bb2 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80088fc:	6878      	ldr	r0, [r7, #4]
 80088fe:	f000 fcf7 	bl	80092f0 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8008902:	7bbb      	ldrb	r3, [r7, #14]
 8008904:	4619      	mov	r1, r3
 8008906:	6878      	ldr	r0, [r7, #4]
 8008908:	f7ff fde2 	bl	80084d0 <USBD_CoreFindEP>
 800890c:	4603      	mov	r3, r0
 800890e:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008910:	7b7b      	ldrb	r3, [r7, #13]
 8008912:	2bff      	cmp	r3, #255	; 0xff
 8008914:	d01f      	beq.n	8008956 <USBD_StdEPReq+0x1c6>
 8008916:	7b7b      	ldrb	r3, [r7, #13]
 8008918:	2b00      	cmp	r3, #0
 800891a:	d11c      	bne.n	8008956 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800891c:	7b7a      	ldrb	r2, [r7, #13]
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8008924:	7b7a      	ldrb	r2, [r7, #13]
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	32ae      	adds	r2, #174	; 0xae
 800892a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800892e:	689b      	ldr	r3, [r3, #8]
 8008930:	2b00      	cmp	r3, #0
 8008932:	d010      	beq.n	8008956 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8008934:	7b7a      	ldrb	r2, [r7, #13]
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	32ae      	adds	r2, #174	; 0xae
 800893a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800893e:	689b      	ldr	r3, [r3, #8]
 8008940:	6839      	ldr	r1, [r7, #0]
 8008942:	6878      	ldr	r0, [r7, #4]
 8008944:	4798      	blx	r3
 8008946:	4603      	mov	r3, r0
 8008948:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800894a:	e004      	b.n	8008956 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800894c:	6839      	ldr	r1, [r7, #0]
 800894e:	6878      	ldr	r0, [r7, #4]
 8008950:	f000 fc03 	bl	800915a <USBD_CtlError>
              break;
 8008954:	e000      	b.n	8008958 <USBD_StdEPReq+0x1c8>
              break;
 8008956:	bf00      	nop
          }
          break;
 8008958:	e0ab      	b.n	8008ab2 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008960:	b2db      	uxtb	r3, r3
 8008962:	2b02      	cmp	r3, #2
 8008964:	d002      	beq.n	800896c <USBD_StdEPReq+0x1dc>
 8008966:	2b03      	cmp	r3, #3
 8008968:	d032      	beq.n	80089d0 <USBD_StdEPReq+0x240>
 800896a:	e097      	b.n	8008a9c <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800896c:	7bbb      	ldrb	r3, [r7, #14]
 800896e:	2b00      	cmp	r3, #0
 8008970:	d007      	beq.n	8008982 <USBD_StdEPReq+0x1f2>
 8008972:	7bbb      	ldrb	r3, [r7, #14]
 8008974:	2b80      	cmp	r3, #128	; 0x80
 8008976:	d004      	beq.n	8008982 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8008978:	6839      	ldr	r1, [r7, #0]
 800897a:	6878      	ldr	r0, [r7, #4]
 800897c:	f000 fbed 	bl	800915a <USBD_CtlError>
                break;
 8008980:	e091      	b.n	8008aa6 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008982:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008986:	2b00      	cmp	r3, #0
 8008988:	da0b      	bge.n	80089a2 <USBD_StdEPReq+0x212>
 800898a:	7bbb      	ldrb	r3, [r7, #14]
 800898c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008990:	4613      	mov	r3, r2
 8008992:	009b      	lsls	r3, r3, #2
 8008994:	4413      	add	r3, r2
 8008996:	009b      	lsls	r3, r3, #2
 8008998:	3310      	adds	r3, #16
 800899a:	687a      	ldr	r2, [r7, #4]
 800899c:	4413      	add	r3, r2
 800899e:	3304      	adds	r3, #4
 80089a0:	e00b      	b.n	80089ba <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80089a2:	7bbb      	ldrb	r3, [r7, #14]
 80089a4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80089a8:	4613      	mov	r3, r2
 80089aa:	009b      	lsls	r3, r3, #2
 80089ac:	4413      	add	r3, r2
 80089ae:	009b      	lsls	r3, r3, #2
 80089b0:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80089b4:	687a      	ldr	r2, [r7, #4]
 80089b6:	4413      	add	r3, r2
 80089b8:	3304      	adds	r3, #4
 80089ba:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80089bc:	68bb      	ldr	r3, [r7, #8]
 80089be:	2200      	movs	r2, #0
 80089c0:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80089c2:	68bb      	ldr	r3, [r7, #8]
 80089c4:	2202      	movs	r2, #2
 80089c6:	4619      	mov	r1, r3
 80089c8:	6878      	ldr	r0, [r7, #4]
 80089ca:	f000 fc37 	bl	800923c <USBD_CtlSendData>
              break;
 80089ce:	e06a      	b.n	8008aa6 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80089d0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	da11      	bge.n	80089fc <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80089d8:	7bbb      	ldrb	r3, [r7, #14]
 80089da:	f003 020f 	and.w	r2, r3, #15
 80089de:	6879      	ldr	r1, [r7, #4]
 80089e0:	4613      	mov	r3, r2
 80089e2:	009b      	lsls	r3, r3, #2
 80089e4:	4413      	add	r3, r2
 80089e6:	009b      	lsls	r3, r3, #2
 80089e8:	440b      	add	r3, r1
 80089ea:	3324      	adds	r3, #36	; 0x24
 80089ec:	881b      	ldrh	r3, [r3, #0]
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	d117      	bne.n	8008a22 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80089f2:	6839      	ldr	r1, [r7, #0]
 80089f4:	6878      	ldr	r0, [r7, #4]
 80089f6:	f000 fbb0 	bl	800915a <USBD_CtlError>
                  break;
 80089fa:	e054      	b.n	8008aa6 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80089fc:	7bbb      	ldrb	r3, [r7, #14]
 80089fe:	f003 020f 	and.w	r2, r3, #15
 8008a02:	6879      	ldr	r1, [r7, #4]
 8008a04:	4613      	mov	r3, r2
 8008a06:	009b      	lsls	r3, r3, #2
 8008a08:	4413      	add	r3, r2
 8008a0a:	009b      	lsls	r3, r3, #2
 8008a0c:	440b      	add	r3, r1
 8008a0e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008a12:	881b      	ldrh	r3, [r3, #0]
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	d104      	bne.n	8008a22 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8008a18:	6839      	ldr	r1, [r7, #0]
 8008a1a:	6878      	ldr	r0, [r7, #4]
 8008a1c:	f000 fb9d 	bl	800915a <USBD_CtlError>
                  break;
 8008a20:	e041      	b.n	8008aa6 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008a22:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	da0b      	bge.n	8008a42 <USBD_StdEPReq+0x2b2>
 8008a2a:	7bbb      	ldrb	r3, [r7, #14]
 8008a2c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008a30:	4613      	mov	r3, r2
 8008a32:	009b      	lsls	r3, r3, #2
 8008a34:	4413      	add	r3, r2
 8008a36:	009b      	lsls	r3, r3, #2
 8008a38:	3310      	adds	r3, #16
 8008a3a:	687a      	ldr	r2, [r7, #4]
 8008a3c:	4413      	add	r3, r2
 8008a3e:	3304      	adds	r3, #4
 8008a40:	e00b      	b.n	8008a5a <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008a42:	7bbb      	ldrb	r3, [r7, #14]
 8008a44:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008a48:	4613      	mov	r3, r2
 8008a4a:	009b      	lsls	r3, r3, #2
 8008a4c:	4413      	add	r3, r2
 8008a4e:	009b      	lsls	r3, r3, #2
 8008a50:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008a54:	687a      	ldr	r2, [r7, #4]
 8008a56:	4413      	add	r3, r2
 8008a58:	3304      	adds	r3, #4
 8008a5a:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008a5c:	7bbb      	ldrb	r3, [r7, #14]
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	d002      	beq.n	8008a68 <USBD_StdEPReq+0x2d8>
 8008a62:	7bbb      	ldrb	r3, [r7, #14]
 8008a64:	2b80      	cmp	r3, #128	; 0x80
 8008a66:	d103      	bne.n	8008a70 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8008a68:	68bb      	ldr	r3, [r7, #8]
 8008a6a:	2200      	movs	r2, #0
 8008a6c:	601a      	str	r2, [r3, #0]
 8008a6e:	e00e      	b.n	8008a8e <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8008a70:	7bbb      	ldrb	r3, [r7, #14]
 8008a72:	4619      	mov	r1, r3
 8008a74:	6878      	ldr	r0, [r7, #4]
 8008a76:	f001 f8bb 	bl	8009bf0 <USBD_LL_IsStallEP>
 8008a7a:	4603      	mov	r3, r0
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	d003      	beq.n	8008a88 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8008a80:	68bb      	ldr	r3, [r7, #8]
 8008a82:	2201      	movs	r2, #1
 8008a84:	601a      	str	r2, [r3, #0]
 8008a86:	e002      	b.n	8008a8e <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8008a88:	68bb      	ldr	r3, [r7, #8]
 8008a8a:	2200      	movs	r2, #0
 8008a8c:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008a8e:	68bb      	ldr	r3, [r7, #8]
 8008a90:	2202      	movs	r2, #2
 8008a92:	4619      	mov	r1, r3
 8008a94:	6878      	ldr	r0, [r7, #4]
 8008a96:	f000 fbd1 	bl	800923c <USBD_CtlSendData>
              break;
 8008a9a:	e004      	b.n	8008aa6 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8008a9c:	6839      	ldr	r1, [r7, #0]
 8008a9e:	6878      	ldr	r0, [r7, #4]
 8008aa0:	f000 fb5b 	bl	800915a <USBD_CtlError>
              break;
 8008aa4:	bf00      	nop
          }
          break;
 8008aa6:	e004      	b.n	8008ab2 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8008aa8:	6839      	ldr	r1, [r7, #0]
 8008aaa:	6878      	ldr	r0, [r7, #4]
 8008aac:	f000 fb55 	bl	800915a <USBD_CtlError>
          break;
 8008ab0:	bf00      	nop
      }
      break;
 8008ab2:	e005      	b.n	8008ac0 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8008ab4:	6839      	ldr	r1, [r7, #0]
 8008ab6:	6878      	ldr	r0, [r7, #4]
 8008ab8:	f000 fb4f 	bl	800915a <USBD_CtlError>
      break;
 8008abc:	e000      	b.n	8008ac0 <USBD_StdEPReq+0x330>
      break;
 8008abe:	bf00      	nop
  }

  return ret;
 8008ac0:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ac2:	4618      	mov	r0, r3
 8008ac4:	3710      	adds	r7, #16
 8008ac6:	46bd      	mov	sp, r7
 8008ac8:	bd80      	pop	{r7, pc}
	...

08008acc <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008acc:	b580      	push	{r7, lr}
 8008ace:	b084      	sub	sp, #16
 8008ad0:	af00      	add	r7, sp, #0
 8008ad2:	6078      	str	r0, [r7, #4]
 8008ad4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008ad6:	2300      	movs	r3, #0
 8008ad8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8008ada:	2300      	movs	r3, #0
 8008adc:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8008ade:	2300      	movs	r3, #0
 8008ae0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8008ae2:	683b      	ldr	r3, [r7, #0]
 8008ae4:	885b      	ldrh	r3, [r3, #2]
 8008ae6:	0a1b      	lsrs	r3, r3, #8
 8008ae8:	b29b      	uxth	r3, r3
 8008aea:	3b01      	subs	r3, #1
 8008aec:	2b06      	cmp	r3, #6
 8008aee:	f200 8128 	bhi.w	8008d42 <USBD_GetDescriptor+0x276>
 8008af2:	a201      	add	r2, pc, #4	; (adr r2, 8008af8 <USBD_GetDescriptor+0x2c>)
 8008af4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008af8:	08008b15 	.word	0x08008b15
 8008afc:	08008b2d 	.word	0x08008b2d
 8008b00:	08008b6d 	.word	0x08008b6d
 8008b04:	08008d43 	.word	0x08008d43
 8008b08:	08008d43 	.word	0x08008d43
 8008b0c:	08008ce3 	.word	0x08008ce3
 8008b10:	08008d0f 	.word	0x08008d0f
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	687a      	ldr	r2, [r7, #4]
 8008b1e:	7c12      	ldrb	r2, [r2, #16]
 8008b20:	f107 0108 	add.w	r1, r7, #8
 8008b24:	4610      	mov	r0, r2
 8008b26:	4798      	blx	r3
 8008b28:	60f8      	str	r0, [r7, #12]
      break;
 8008b2a:	e112      	b.n	8008d52 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	7c1b      	ldrb	r3, [r3, #16]
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	d10d      	bne.n	8008b50 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008b3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b3c:	f107 0208 	add.w	r2, r7, #8
 8008b40:	4610      	mov	r0, r2
 8008b42:	4798      	blx	r3
 8008b44:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008b46:	68fb      	ldr	r3, [r7, #12]
 8008b48:	3301      	adds	r3, #1
 8008b4a:	2202      	movs	r2, #2
 8008b4c:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8008b4e:	e100      	b.n	8008d52 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008b56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b58:	f107 0208 	add.w	r2, r7, #8
 8008b5c:	4610      	mov	r0, r2
 8008b5e:	4798      	blx	r3
 8008b60:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008b62:	68fb      	ldr	r3, [r7, #12]
 8008b64:	3301      	adds	r3, #1
 8008b66:	2202      	movs	r2, #2
 8008b68:	701a      	strb	r2, [r3, #0]
      break;
 8008b6a:	e0f2      	b.n	8008d52 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008b6c:	683b      	ldr	r3, [r7, #0]
 8008b6e:	885b      	ldrh	r3, [r3, #2]
 8008b70:	b2db      	uxtb	r3, r3
 8008b72:	2b05      	cmp	r3, #5
 8008b74:	f200 80ac 	bhi.w	8008cd0 <USBD_GetDescriptor+0x204>
 8008b78:	a201      	add	r2, pc, #4	; (adr r2, 8008b80 <USBD_GetDescriptor+0xb4>)
 8008b7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b7e:	bf00      	nop
 8008b80:	08008b99 	.word	0x08008b99
 8008b84:	08008bcd 	.word	0x08008bcd
 8008b88:	08008c01 	.word	0x08008c01
 8008b8c:	08008c35 	.word	0x08008c35
 8008b90:	08008c69 	.word	0x08008c69
 8008b94:	08008c9d 	.word	0x08008c9d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008b9e:	685b      	ldr	r3, [r3, #4]
 8008ba0:	2b00      	cmp	r3, #0
 8008ba2:	d00b      	beq.n	8008bbc <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008baa:	685b      	ldr	r3, [r3, #4]
 8008bac:	687a      	ldr	r2, [r7, #4]
 8008bae:	7c12      	ldrb	r2, [r2, #16]
 8008bb0:	f107 0108 	add.w	r1, r7, #8
 8008bb4:	4610      	mov	r0, r2
 8008bb6:	4798      	blx	r3
 8008bb8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008bba:	e091      	b.n	8008ce0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008bbc:	6839      	ldr	r1, [r7, #0]
 8008bbe:	6878      	ldr	r0, [r7, #4]
 8008bc0:	f000 facb 	bl	800915a <USBD_CtlError>
            err++;
 8008bc4:	7afb      	ldrb	r3, [r7, #11]
 8008bc6:	3301      	adds	r3, #1
 8008bc8:	72fb      	strb	r3, [r7, #11]
          break;
 8008bca:	e089      	b.n	8008ce0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008bd2:	689b      	ldr	r3, [r3, #8]
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	d00b      	beq.n	8008bf0 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008bde:	689b      	ldr	r3, [r3, #8]
 8008be0:	687a      	ldr	r2, [r7, #4]
 8008be2:	7c12      	ldrb	r2, [r2, #16]
 8008be4:	f107 0108 	add.w	r1, r7, #8
 8008be8:	4610      	mov	r0, r2
 8008bea:	4798      	blx	r3
 8008bec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008bee:	e077      	b.n	8008ce0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008bf0:	6839      	ldr	r1, [r7, #0]
 8008bf2:	6878      	ldr	r0, [r7, #4]
 8008bf4:	f000 fab1 	bl	800915a <USBD_CtlError>
            err++;
 8008bf8:	7afb      	ldrb	r3, [r7, #11]
 8008bfa:	3301      	adds	r3, #1
 8008bfc:	72fb      	strb	r3, [r7, #11]
          break;
 8008bfe:	e06f      	b.n	8008ce0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008c06:	68db      	ldr	r3, [r3, #12]
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	d00b      	beq.n	8008c24 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008c12:	68db      	ldr	r3, [r3, #12]
 8008c14:	687a      	ldr	r2, [r7, #4]
 8008c16:	7c12      	ldrb	r2, [r2, #16]
 8008c18:	f107 0108 	add.w	r1, r7, #8
 8008c1c:	4610      	mov	r0, r2
 8008c1e:	4798      	blx	r3
 8008c20:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008c22:	e05d      	b.n	8008ce0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008c24:	6839      	ldr	r1, [r7, #0]
 8008c26:	6878      	ldr	r0, [r7, #4]
 8008c28:	f000 fa97 	bl	800915a <USBD_CtlError>
            err++;
 8008c2c:	7afb      	ldrb	r3, [r7, #11]
 8008c2e:	3301      	adds	r3, #1
 8008c30:	72fb      	strb	r3, [r7, #11]
          break;
 8008c32:	e055      	b.n	8008ce0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008c3a:	691b      	ldr	r3, [r3, #16]
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	d00b      	beq.n	8008c58 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008c46:	691b      	ldr	r3, [r3, #16]
 8008c48:	687a      	ldr	r2, [r7, #4]
 8008c4a:	7c12      	ldrb	r2, [r2, #16]
 8008c4c:	f107 0108 	add.w	r1, r7, #8
 8008c50:	4610      	mov	r0, r2
 8008c52:	4798      	blx	r3
 8008c54:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008c56:	e043      	b.n	8008ce0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008c58:	6839      	ldr	r1, [r7, #0]
 8008c5a:	6878      	ldr	r0, [r7, #4]
 8008c5c:	f000 fa7d 	bl	800915a <USBD_CtlError>
            err++;
 8008c60:	7afb      	ldrb	r3, [r7, #11]
 8008c62:	3301      	adds	r3, #1
 8008c64:	72fb      	strb	r3, [r7, #11]
          break;
 8008c66:	e03b      	b.n	8008ce0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008c6e:	695b      	ldr	r3, [r3, #20]
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	d00b      	beq.n	8008c8c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008c7a:	695b      	ldr	r3, [r3, #20]
 8008c7c:	687a      	ldr	r2, [r7, #4]
 8008c7e:	7c12      	ldrb	r2, [r2, #16]
 8008c80:	f107 0108 	add.w	r1, r7, #8
 8008c84:	4610      	mov	r0, r2
 8008c86:	4798      	blx	r3
 8008c88:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008c8a:	e029      	b.n	8008ce0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008c8c:	6839      	ldr	r1, [r7, #0]
 8008c8e:	6878      	ldr	r0, [r7, #4]
 8008c90:	f000 fa63 	bl	800915a <USBD_CtlError>
            err++;
 8008c94:	7afb      	ldrb	r3, [r7, #11]
 8008c96:	3301      	adds	r3, #1
 8008c98:	72fb      	strb	r3, [r7, #11]
          break;
 8008c9a:	e021      	b.n	8008ce0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008ca2:	699b      	ldr	r3, [r3, #24]
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	d00b      	beq.n	8008cc0 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008cae:	699b      	ldr	r3, [r3, #24]
 8008cb0:	687a      	ldr	r2, [r7, #4]
 8008cb2:	7c12      	ldrb	r2, [r2, #16]
 8008cb4:	f107 0108 	add.w	r1, r7, #8
 8008cb8:	4610      	mov	r0, r2
 8008cba:	4798      	blx	r3
 8008cbc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008cbe:	e00f      	b.n	8008ce0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008cc0:	6839      	ldr	r1, [r7, #0]
 8008cc2:	6878      	ldr	r0, [r7, #4]
 8008cc4:	f000 fa49 	bl	800915a <USBD_CtlError>
            err++;
 8008cc8:	7afb      	ldrb	r3, [r7, #11]
 8008cca:	3301      	adds	r3, #1
 8008ccc:	72fb      	strb	r3, [r7, #11]
          break;
 8008cce:	e007      	b.n	8008ce0 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8008cd0:	6839      	ldr	r1, [r7, #0]
 8008cd2:	6878      	ldr	r0, [r7, #4]
 8008cd4:	f000 fa41 	bl	800915a <USBD_CtlError>
          err++;
 8008cd8:	7afb      	ldrb	r3, [r7, #11]
 8008cda:	3301      	adds	r3, #1
 8008cdc:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8008cde:	bf00      	nop
      }
      break;
 8008ce0:	e037      	b.n	8008d52 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	7c1b      	ldrb	r3, [r3, #16]
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	d109      	bne.n	8008cfe <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008cf0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008cf2:	f107 0208 	add.w	r2, r7, #8
 8008cf6:	4610      	mov	r0, r2
 8008cf8:	4798      	blx	r3
 8008cfa:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008cfc:	e029      	b.n	8008d52 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008cfe:	6839      	ldr	r1, [r7, #0]
 8008d00:	6878      	ldr	r0, [r7, #4]
 8008d02:	f000 fa2a 	bl	800915a <USBD_CtlError>
        err++;
 8008d06:	7afb      	ldrb	r3, [r7, #11]
 8008d08:	3301      	adds	r3, #1
 8008d0a:	72fb      	strb	r3, [r7, #11]
      break;
 8008d0c:	e021      	b.n	8008d52 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	7c1b      	ldrb	r3, [r3, #16]
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	d10d      	bne.n	8008d32 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008d1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d1e:	f107 0208 	add.w	r2, r7, #8
 8008d22:	4610      	mov	r0, r2
 8008d24:	4798      	blx	r3
 8008d26:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008d28:	68fb      	ldr	r3, [r7, #12]
 8008d2a:	3301      	adds	r3, #1
 8008d2c:	2207      	movs	r2, #7
 8008d2e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008d30:	e00f      	b.n	8008d52 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008d32:	6839      	ldr	r1, [r7, #0]
 8008d34:	6878      	ldr	r0, [r7, #4]
 8008d36:	f000 fa10 	bl	800915a <USBD_CtlError>
        err++;
 8008d3a:	7afb      	ldrb	r3, [r7, #11]
 8008d3c:	3301      	adds	r3, #1
 8008d3e:	72fb      	strb	r3, [r7, #11]
      break;
 8008d40:	e007      	b.n	8008d52 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8008d42:	6839      	ldr	r1, [r7, #0]
 8008d44:	6878      	ldr	r0, [r7, #4]
 8008d46:	f000 fa08 	bl	800915a <USBD_CtlError>
      err++;
 8008d4a:	7afb      	ldrb	r3, [r7, #11]
 8008d4c:	3301      	adds	r3, #1
 8008d4e:	72fb      	strb	r3, [r7, #11]
      break;
 8008d50:	bf00      	nop
  }

  if (err != 0U)
 8008d52:	7afb      	ldrb	r3, [r7, #11]
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	d11e      	bne.n	8008d96 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8008d58:	683b      	ldr	r3, [r7, #0]
 8008d5a:	88db      	ldrh	r3, [r3, #6]
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	d016      	beq.n	8008d8e <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8008d60:	893b      	ldrh	r3, [r7, #8]
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	d00e      	beq.n	8008d84 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8008d66:	683b      	ldr	r3, [r7, #0]
 8008d68:	88da      	ldrh	r2, [r3, #6]
 8008d6a:	893b      	ldrh	r3, [r7, #8]
 8008d6c:	4293      	cmp	r3, r2
 8008d6e:	bf28      	it	cs
 8008d70:	4613      	movcs	r3, r2
 8008d72:	b29b      	uxth	r3, r3
 8008d74:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8008d76:	893b      	ldrh	r3, [r7, #8]
 8008d78:	461a      	mov	r2, r3
 8008d7a:	68f9      	ldr	r1, [r7, #12]
 8008d7c:	6878      	ldr	r0, [r7, #4]
 8008d7e:	f000 fa5d 	bl	800923c <USBD_CtlSendData>
 8008d82:	e009      	b.n	8008d98 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8008d84:	6839      	ldr	r1, [r7, #0]
 8008d86:	6878      	ldr	r0, [r7, #4]
 8008d88:	f000 f9e7 	bl	800915a <USBD_CtlError>
 8008d8c:	e004      	b.n	8008d98 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8008d8e:	6878      	ldr	r0, [r7, #4]
 8008d90:	f000 faae 	bl	80092f0 <USBD_CtlSendStatus>
 8008d94:	e000      	b.n	8008d98 <USBD_GetDescriptor+0x2cc>
    return;
 8008d96:	bf00      	nop
  }
}
 8008d98:	3710      	adds	r7, #16
 8008d9a:	46bd      	mov	sp, r7
 8008d9c:	bd80      	pop	{r7, pc}
 8008d9e:	bf00      	nop

08008da0 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008da0:	b580      	push	{r7, lr}
 8008da2:	b084      	sub	sp, #16
 8008da4:	af00      	add	r7, sp, #0
 8008da6:	6078      	str	r0, [r7, #4]
 8008da8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008daa:	683b      	ldr	r3, [r7, #0]
 8008dac:	889b      	ldrh	r3, [r3, #4]
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	d131      	bne.n	8008e16 <USBD_SetAddress+0x76>
 8008db2:	683b      	ldr	r3, [r7, #0]
 8008db4:	88db      	ldrh	r3, [r3, #6]
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	d12d      	bne.n	8008e16 <USBD_SetAddress+0x76>
 8008dba:	683b      	ldr	r3, [r7, #0]
 8008dbc:	885b      	ldrh	r3, [r3, #2]
 8008dbe:	2b7f      	cmp	r3, #127	; 0x7f
 8008dc0:	d829      	bhi.n	8008e16 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008dc2:	683b      	ldr	r3, [r7, #0]
 8008dc4:	885b      	ldrh	r3, [r3, #2]
 8008dc6:	b2db      	uxtb	r3, r3
 8008dc8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008dcc:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008dd4:	b2db      	uxtb	r3, r3
 8008dd6:	2b03      	cmp	r3, #3
 8008dd8:	d104      	bne.n	8008de4 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8008dda:	6839      	ldr	r1, [r7, #0]
 8008ddc:	6878      	ldr	r0, [r7, #4]
 8008dde:	f000 f9bc 	bl	800915a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008de2:	e01d      	b.n	8008e20 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	7bfa      	ldrb	r2, [r7, #15]
 8008de8:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008dec:	7bfb      	ldrb	r3, [r7, #15]
 8008dee:	4619      	mov	r1, r3
 8008df0:	6878      	ldr	r0, [r7, #4]
 8008df2:	f000 ff29 	bl	8009c48 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8008df6:	6878      	ldr	r0, [r7, #4]
 8008df8:	f000 fa7a 	bl	80092f0 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008dfc:	7bfb      	ldrb	r3, [r7, #15]
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	d004      	beq.n	8008e0c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	2202      	movs	r2, #2
 8008e06:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008e0a:	e009      	b.n	8008e20 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	2201      	movs	r2, #1
 8008e10:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008e14:	e004      	b.n	8008e20 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008e16:	6839      	ldr	r1, [r7, #0]
 8008e18:	6878      	ldr	r0, [r7, #4]
 8008e1a:	f000 f99e 	bl	800915a <USBD_CtlError>
  }
}
 8008e1e:	bf00      	nop
 8008e20:	bf00      	nop
 8008e22:	3710      	adds	r7, #16
 8008e24:	46bd      	mov	sp, r7
 8008e26:	bd80      	pop	{r7, pc}

08008e28 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008e28:	b580      	push	{r7, lr}
 8008e2a:	b084      	sub	sp, #16
 8008e2c:	af00      	add	r7, sp, #0
 8008e2e:	6078      	str	r0, [r7, #4]
 8008e30:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008e32:	2300      	movs	r3, #0
 8008e34:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008e36:	683b      	ldr	r3, [r7, #0]
 8008e38:	885b      	ldrh	r3, [r3, #2]
 8008e3a:	b2da      	uxtb	r2, r3
 8008e3c:	4b4e      	ldr	r3, [pc, #312]	; (8008f78 <USBD_SetConfig+0x150>)
 8008e3e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008e40:	4b4d      	ldr	r3, [pc, #308]	; (8008f78 <USBD_SetConfig+0x150>)
 8008e42:	781b      	ldrb	r3, [r3, #0]
 8008e44:	2b01      	cmp	r3, #1
 8008e46:	d905      	bls.n	8008e54 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8008e48:	6839      	ldr	r1, [r7, #0]
 8008e4a:	6878      	ldr	r0, [r7, #4]
 8008e4c:	f000 f985 	bl	800915a <USBD_CtlError>
    return USBD_FAIL;
 8008e50:	2303      	movs	r3, #3
 8008e52:	e08c      	b.n	8008f6e <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008e5a:	b2db      	uxtb	r3, r3
 8008e5c:	2b02      	cmp	r3, #2
 8008e5e:	d002      	beq.n	8008e66 <USBD_SetConfig+0x3e>
 8008e60:	2b03      	cmp	r3, #3
 8008e62:	d029      	beq.n	8008eb8 <USBD_SetConfig+0x90>
 8008e64:	e075      	b.n	8008f52 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8008e66:	4b44      	ldr	r3, [pc, #272]	; (8008f78 <USBD_SetConfig+0x150>)
 8008e68:	781b      	ldrb	r3, [r3, #0]
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	d020      	beq.n	8008eb0 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8008e6e:	4b42      	ldr	r3, [pc, #264]	; (8008f78 <USBD_SetConfig+0x150>)
 8008e70:	781b      	ldrb	r3, [r3, #0]
 8008e72:	461a      	mov	r2, r3
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008e78:	4b3f      	ldr	r3, [pc, #252]	; (8008f78 <USBD_SetConfig+0x150>)
 8008e7a:	781b      	ldrb	r3, [r3, #0]
 8008e7c:	4619      	mov	r1, r3
 8008e7e:	6878      	ldr	r0, [r7, #4]
 8008e80:	f7fe ffe7 	bl	8007e52 <USBD_SetClassConfig>
 8008e84:	4603      	mov	r3, r0
 8008e86:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8008e88:	7bfb      	ldrb	r3, [r7, #15]
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	d008      	beq.n	8008ea0 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8008e8e:	6839      	ldr	r1, [r7, #0]
 8008e90:	6878      	ldr	r0, [r7, #4]
 8008e92:	f000 f962 	bl	800915a <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	2202      	movs	r2, #2
 8008e9a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008e9e:	e065      	b.n	8008f6c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8008ea0:	6878      	ldr	r0, [r7, #4]
 8008ea2:	f000 fa25 	bl	80092f0 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	2203      	movs	r2, #3
 8008eaa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8008eae:	e05d      	b.n	8008f6c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8008eb0:	6878      	ldr	r0, [r7, #4]
 8008eb2:	f000 fa1d 	bl	80092f0 <USBD_CtlSendStatus>
      break;
 8008eb6:	e059      	b.n	8008f6c <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8008eb8:	4b2f      	ldr	r3, [pc, #188]	; (8008f78 <USBD_SetConfig+0x150>)
 8008eba:	781b      	ldrb	r3, [r3, #0]
 8008ebc:	2b00      	cmp	r3, #0
 8008ebe:	d112      	bne.n	8008ee6 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	2202      	movs	r2, #2
 8008ec4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8008ec8:	4b2b      	ldr	r3, [pc, #172]	; (8008f78 <USBD_SetConfig+0x150>)
 8008eca:	781b      	ldrb	r3, [r3, #0]
 8008ecc:	461a      	mov	r2, r3
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008ed2:	4b29      	ldr	r3, [pc, #164]	; (8008f78 <USBD_SetConfig+0x150>)
 8008ed4:	781b      	ldrb	r3, [r3, #0]
 8008ed6:	4619      	mov	r1, r3
 8008ed8:	6878      	ldr	r0, [r7, #4]
 8008eda:	f7fe ffd6 	bl	8007e8a <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8008ede:	6878      	ldr	r0, [r7, #4]
 8008ee0:	f000 fa06 	bl	80092f0 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008ee4:	e042      	b.n	8008f6c <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8008ee6:	4b24      	ldr	r3, [pc, #144]	; (8008f78 <USBD_SetConfig+0x150>)
 8008ee8:	781b      	ldrb	r3, [r3, #0]
 8008eea:	461a      	mov	r2, r3
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	685b      	ldr	r3, [r3, #4]
 8008ef0:	429a      	cmp	r2, r3
 8008ef2:	d02a      	beq.n	8008f4a <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	685b      	ldr	r3, [r3, #4]
 8008ef8:	b2db      	uxtb	r3, r3
 8008efa:	4619      	mov	r1, r3
 8008efc:	6878      	ldr	r0, [r7, #4]
 8008efe:	f7fe ffc4 	bl	8007e8a <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8008f02:	4b1d      	ldr	r3, [pc, #116]	; (8008f78 <USBD_SetConfig+0x150>)
 8008f04:	781b      	ldrb	r3, [r3, #0]
 8008f06:	461a      	mov	r2, r3
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008f0c:	4b1a      	ldr	r3, [pc, #104]	; (8008f78 <USBD_SetConfig+0x150>)
 8008f0e:	781b      	ldrb	r3, [r3, #0]
 8008f10:	4619      	mov	r1, r3
 8008f12:	6878      	ldr	r0, [r7, #4]
 8008f14:	f7fe ff9d 	bl	8007e52 <USBD_SetClassConfig>
 8008f18:	4603      	mov	r3, r0
 8008f1a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8008f1c:	7bfb      	ldrb	r3, [r7, #15]
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	d00f      	beq.n	8008f42 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8008f22:	6839      	ldr	r1, [r7, #0]
 8008f24:	6878      	ldr	r0, [r7, #4]
 8008f26:	f000 f918 	bl	800915a <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	685b      	ldr	r3, [r3, #4]
 8008f2e:	b2db      	uxtb	r3, r3
 8008f30:	4619      	mov	r1, r3
 8008f32:	6878      	ldr	r0, [r7, #4]
 8008f34:	f7fe ffa9 	bl	8007e8a <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	2202      	movs	r2, #2
 8008f3c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8008f40:	e014      	b.n	8008f6c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8008f42:	6878      	ldr	r0, [r7, #4]
 8008f44:	f000 f9d4 	bl	80092f0 <USBD_CtlSendStatus>
      break;
 8008f48:	e010      	b.n	8008f6c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8008f4a:	6878      	ldr	r0, [r7, #4]
 8008f4c:	f000 f9d0 	bl	80092f0 <USBD_CtlSendStatus>
      break;
 8008f50:	e00c      	b.n	8008f6c <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8008f52:	6839      	ldr	r1, [r7, #0]
 8008f54:	6878      	ldr	r0, [r7, #4]
 8008f56:	f000 f900 	bl	800915a <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008f5a:	4b07      	ldr	r3, [pc, #28]	; (8008f78 <USBD_SetConfig+0x150>)
 8008f5c:	781b      	ldrb	r3, [r3, #0]
 8008f5e:	4619      	mov	r1, r3
 8008f60:	6878      	ldr	r0, [r7, #4]
 8008f62:	f7fe ff92 	bl	8007e8a <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8008f66:	2303      	movs	r3, #3
 8008f68:	73fb      	strb	r3, [r7, #15]
      break;
 8008f6a:	bf00      	nop
  }

  return ret;
 8008f6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f6e:	4618      	mov	r0, r3
 8008f70:	3710      	adds	r7, #16
 8008f72:	46bd      	mov	sp, r7
 8008f74:	bd80      	pop	{r7, pc}
 8008f76:	bf00      	nop
 8008f78:	200005a8 	.word	0x200005a8

08008f7c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008f7c:	b580      	push	{r7, lr}
 8008f7e:	b082      	sub	sp, #8
 8008f80:	af00      	add	r7, sp, #0
 8008f82:	6078      	str	r0, [r7, #4]
 8008f84:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008f86:	683b      	ldr	r3, [r7, #0]
 8008f88:	88db      	ldrh	r3, [r3, #6]
 8008f8a:	2b01      	cmp	r3, #1
 8008f8c:	d004      	beq.n	8008f98 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8008f8e:	6839      	ldr	r1, [r7, #0]
 8008f90:	6878      	ldr	r0, [r7, #4]
 8008f92:	f000 f8e2 	bl	800915a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8008f96:	e023      	b.n	8008fe0 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008f9e:	b2db      	uxtb	r3, r3
 8008fa0:	2b02      	cmp	r3, #2
 8008fa2:	dc02      	bgt.n	8008faa <USBD_GetConfig+0x2e>
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	dc03      	bgt.n	8008fb0 <USBD_GetConfig+0x34>
 8008fa8:	e015      	b.n	8008fd6 <USBD_GetConfig+0x5a>
 8008faa:	2b03      	cmp	r3, #3
 8008fac:	d00b      	beq.n	8008fc6 <USBD_GetConfig+0x4a>
 8008fae:	e012      	b.n	8008fd6 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	2200      	movs	r2, #0
 8008fb4:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	3308      	adds	r3, #8
 8008fba:	2201      	movs	r2, #1
 8008fbc:	4619      	mov	r1, r3
 8008fbe:	6878      	ldr	r0, [r7, #4]
 8008fc0:	f000 f93c 	bl	800923c <USBD_CtlSendData>
        break;
 8008fc4:	e00c      	b.n	8008fe0 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	3304      	adds	r3, #4
 8008fca:	2201      	movs	r2, #1
 8008fcc:	4619      	mov	r1, r3
 8008fce:	6878      	ldr	r0, [r7, #4]
 8008fd0:	f000 f934 	bl	800923c <USBD_CtlSendData>
        break;
 8008fd4:	e004      	b.n	8008fe0 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8008fd6:	6839      	ldr	r1, [r7, #0]
 8008fd8:	6878      	ldr	r0, [r7, #4]
 8008fda:	f000 f8be 	bl	800915a <USBD_CtlError>
        break;
 8008fde:	bf00      	nop
}
 8008fe0:	bf00      	nop
 8008fe2:	3708      	adds	r7, #8
 8008fe4:	46bd      	mov	sp, r7
 8008fe6:	bd80      	pop	{r7, pc}

08008fe8 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008fe8:	b580      	push	{r7, lr}
 8008fea:	b082      	sub	sp, #8
 8008fec:	af00      	add	r7, sp, #0
 8008fee:	6078      	str	r0, [r7, #4]
 8008ff0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008ff8:	b2db      	uxtb	r3, r3
 8008ffa:	3b01      	subs	r3, #1
 8008ffc:	2b02      	cmp	r3, #2
 8008ffe:	d81e      	bhi.n	800903e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8009000:	683b      	ldr	r3, [r7, #0]
 8009002:	88db      	ldrh	r3, [r3, #6]
 8009004:	2b02      	cmp	r3, #2
 8009006:	d004      	beq.n	8009012 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8009008:	6839      	ldr	r1, [r7, #0]
 800900a:	6878      	ldr	r0, [r7, #4]
 800900c:	f000 f8a5 	bl	800915a <USBD_CtlError>
        break;
 8009010:	e01a      	b.n	8009048 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	2201      	movs	r2, #1
 8009016:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800901e:	2b00      	cmp	r3, #0
 8009020:	d005      	beq.n	800902e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	68db      	ldr	r3, [r3, #12]
 8009026:	f043 0202 	orr.w	r2, r3, #2
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	330c      	adds	r3, #12
 8009032:	2202      	movs	r2, #2
 8009034:	4619      	mov	r1, r3
 8009036:	6878      	ldr	r0, [r7, #4]
 8009038:	f000 f900 	bl	800923c <USBD_CtlSendData>
      break;
 800903c:	e004      	b.n	8009048 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800903e:	6839      	ldr	r1, [r7, #0]
 8009040:	6878      	ldr	r0, [r7, #4]
 8009042:	f000 f88a 	bl	800915a <USBD_CtlError>
      break;
 8009046:	bf00      	nop
  }
}
 8009048:	bf00      	nop
 800904a:	3708      	adds	r7, #8
 800904c:	46bd      	mov	sp, r7
 800904e:	bd80      	pop	{r7, pc}

08009050 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009050:	b580      	push	{r7, lr}
 8009052:	b082      	sub	sp, #8
 8009054:	af00      	add	r7, sp, #0
 8009056:	6078      	str	r0, [r7, #4]
 8009058:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800905a:	683b      	ldr	r3, [r7, #0]
 800905c:	885b      	ldrh	r3, [r3, #2]
 800905e:	2b01      	cmp	r3, #1
 8009060:	d107      	bne.n	8009072 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	2201      	movs	r2, #1
 8009066:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800906a:	6878      	ldr	r0, [r7, #4]
 800906c:	f000 f940 	bl	80092f0 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8009070:	e013      	b.n	800909a <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8009072:	683b      	ldr	r3, [r7, #0]
 8009074:	885b      	ldrh	r3, [r3, #2]
 8009076:	2b02      	cmp	r3, #2
 8009078:	d10b      	bne.n	8009092 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 800907a:	683b      	ldr	r3, [r7, #0]
 800907c:	889b      	ldrh	r3, [r3, #4]
 800907e:	0a1b      	lsrs	r3, r3, #8
 8009080:	b29b      	uxth	r3, r3
 8009082:	b2da      	uxtb	r2, r3
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800908a:	6878      	ldr	r0, [r7, #4]
 800908c:	f000 f930 	bl	80092f0 <USBD_CtlSendStatus>
}
 8009090:	e003      	b.n	800909a <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8009092:	6839      	ldr	r1, [r7, #0]
 8009094:	6878      	ldr	r0, [r7, #4]
 8009096:	f000 f860 	bl	800915a <USBD_CtlError>
}
 800909a:	bf00      	nop
 800909c:	3708      	adds	r7, #8
 800909e:	46bd      	mov	sp, r7
 80090a0:	bd80      	pop	{r7, pc}

080090a2 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80090a2:	b580      	push	{r7, lr}
 80090a4:	b082      	sub	sp, #8
 80090a6:	af00      	add	r7, sp, #0
 80090a8:	6078      	str	r0, [r7, #4]
 80090aa:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80090b2:	b2db      	uxtb	r3, r3
 80090b4:	3b01      	subs	r3, #1
 80090b6:	2b02      	cmp	r3, #2
 80090b8:	d80b      	bhi.n	80090d2 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80090ba:	683b      	ldr	r3, [r7, #0]
 80090bc:	885b      	ldrh	r3, [r3, #2]
 80090be:	2b01      	cmp	r3, #1
 80090c0:	d10c      	bne.n	80090dc <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	2200      	movs	r2, #0
 80090c6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80090ca:	6878      	ldr	r0, [r7, #4]
 80090cc:	f000 f910 	bl	80092f0 <USBD_CtlSendStatus>
      }
      break;
 80090d0:	e004      	b.n	80090dc <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80090d2:	6839      	ldr	r1, [r7, #0]
 80090d4:	6878      	ldr	r0, [r7, #4]
 80090d6:	f000 f840 	bl	800915a <USBD_CtlError>
      break;
 80090da:	e000      	b.n	80090de <USBD_ClrFeature+0x3c>
      break;
 80090dc:	bf00      	nop
  }
}
 80090de:	bf00      	nop
 80090e0:	3708      	adds	r7, #8
 80090e2:	46bd      	mov	sp, r7
 80090e4:	bd80      	pop	{r7, pc}

080090e6 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80090e6:	b580      	push	{r7, lr}
 80090e8:	b084      	sub	sp, #16
 80090ea:	af00      	add	r7, sp, #0
 80090ec:	6078      	str	r0, [r7, #4]
 80090ee:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80090f0:	683b      	ldr	r3, [r7, #0]
 80090f2:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80090f4:	68fb      	ldr	r3, [r7, #12]
 80090f6:	781a      	ldrb	r2, [r3, #0]
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80090fc:	68fb      	ldr	r3, [r7, #12]
 80090fe:	3301      	adds	r3, #1
 8009100:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8009102:	68fb      	ldr	r3, [r7, #12]
 8009104:	781a      	ldrb	r2, [r3, #0]
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800910a:	68fb      	ldr	r3, [r7, #12]
 800910c:	3301      	adds	r3, #1
 800910e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8009110:	68f8      	ldr	r0, [r7, #12]
 8009112:	f7ff fa41 	bl	8008598 <SWAPBYTE>
 8009116:	4603      	mov	r3, r0
 8009118:	461a      	mov	r2, r3
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800911e:	68fb      	ldr	r3, [r7, #12]
 8009120:	3301      	adds	r3, #1
 8009122:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009124:	68fb      	ldr	r3, [r7, #12]
 8009126:	3301      	adds	r3, #1
 8009128:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800912a:	68f8      	ldr	r0, [r7, #12]
 800912c:	f7ff fa34 	bl	8008598 <SWAPBYTE>
 8009130:	4603      	mov	r3, r0
 8009132:	461a      	mov	r2, r3
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8009138:	68fb      	ldr	r3, [r7, #12]
 800913a:	3301      	adds	r3, #1
 800913c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800913e:	68fb      	ldr	r3, [r7, #12]
 8009140:	3301      	adds	r3, #1
 8009142:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8009144:	68f8      	ldr	r0, [r7, #12]
 8009146:	f7ff fa27 	bl	8008598 <SWAPBYTE>
 800914a:	4603      	mov	r3, r0
 800914c:	461a      	mov	r2, r3
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	80da      	strh	r2, [r3, #6]
}
 8009152:	bf00      	nop
 8009154:	3710      	adds	r7, #16
 8009156:	46bd      	mov	sp, r7
 8009158:	bd80      	pop	{r7, pc}

0800915a <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800915a:	b580      	push	{r7, lr}
 800915c:	b082      	sub	sp, #8
 800915e:	af00      	add	r7, sp, #0
 8009160:	6078      	str	r0, [r7, #4]
 8009162:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8009164:	2180      	movs	r1, #128	; 0x80
 8009166:	6878      	ldr	r0, [r7, #4]
 8009168:	f000 fd04 	bl	8009b74 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800916c:	2100      	movs	r1, #0
 800916e:	6878      	ldr	r0, [r7, #4]
 8009170:	f000 fd00 	bl	8009b74 <USBD_LL_StallEP>
}
 8009174:	bf00      	nop
 8009176:	3708      	adds	r7, #8
 8009178:	46bd      	mov	sp, r7
 800917a:	bd80      	pop	{r7, pc}

0800917c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800917c:	b580      	push	{r7, lr}
 800917e:	b086      	sub	sp, #24
 8009180:	af00      	add	r7, sp, #0
 8009182:	60f8      	str	r0, [r7, #12]
 8009184:	60b9      	str	r1, [r7, #8]
 8009186:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8009188:	2300      	movs	r3, #0
 800918a:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800918c:	68fb      	ldr	r3, [r7, #12]
 800918e:	2b00      	cmp	r3, #0
 8009190:	d036      	beq.n	8009200 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8009192:	68fb      	ldr	r3, [r7, #12]
 8009194:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8009196:	6938      	ldr	r0, [r7, #16]
 8009198:	f000 f836 	bl	8009208 <USBD_GetLen>
 800919c:	4603      	mov	r3, r0
 800919e:	3301      	adds	r3, #1
 80091a0:	b29b      	uxth	r3, r3
 80091a2:	005b      	lsls	r3, r3, #1
 80091a4:	b29a      	uxth	r2, r3
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80091aa:	7dfb      	ldrb	r3, [r7, #23]
 80091ac:	68ba      	ldr	r2, [r7, #8]
 80091ae:	4413      	add	r3, r2
 80091b0:	687a      	ldr	r2, [r7, #4]
 80091b2:	7812      	ldrb	r2, [r2, #0]
 80091b4:	701a      	strb	r2, [r3, #0]
  idx++;
 80091b6:	7dfb      	ldrb	r3, [r7, #23]
 80091b8:	3301      	adds	r3, #1
 80091ba:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80091bc:	7dfb      	ldrb	r3, [r7, #23]
 80091be:	68ba      	ldr	r2, [r7, #8]
 80091c0:	4413      	add	r3, r2
 80091c2:	2203      	movs	r2, #3
 80091c4:	701a      	strb	r2, [r3, #0]
  idx++;
 80091c6:	7dfb      	ldrb	r3, [r7, #23]
 80091c8:	3301      	adds	r3, #1
 80091ca:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80091cc:	e013      	b.n	80091f6 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80091ce:	7dfb      	ldrb	r3, [r7, #23]
 80091d0:	68ba      	ldr	r2, [r7, #8]
 80091d2:	4413      	add	r3, r2
 80091d4:	693a      	ldr	r2, [r7, #16]
 80091d6:	7812      	ldrb	r2, [r2, #0]
 80091d8:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80091da:	693b      	ldr	r3, [r7, #16]
 80091dc:	3301      	adds	r3, #1
 80091de:	613b      	str	r3, [r7, #16]
    idx++;
 80091e0:	7dfb      	ldrb	r3, [r7, #23]
 80091e2:	3301      	adds	r3, #1
 80091e4:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80091e6:	7dfb      	ldrb	r3, [r7, #23]
 80091e8:	68ba      	ldr	r2, [r7, #8]
 80091ea:	4413      	add	r3, r2
 80091ec:	2200      	movs	r2, #0
 80091ee:	701a      	strb	r2, [r3, #0]
    idx++;
 80091f0:	7dfb      	ldrb	r3, [r7, #23]
 80091f2:	3301      	adds	r3, #1
 80091f4:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80091f6:	693b      	ldr	r3, [r7, #16]
 80091f8:	781b      	ldrb	r3, [r3, #0]
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	d1e7      	bne.n	80091ce <USBD_GetString+0x52>
 80091fe:	e000      	b.n	8009202 <USBD_GetString+0x86>
    return;
 8009200:	bf00      	nop
  }
}
 8009202:	3718      	adds	r7, #24
 8009204:	46bd      	mov	sp, r7
 8009206:	bd80      	pop	{r7, pc}

08009208 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8009208:	b480      	push	{r7}
 800920a:	b085      	sub	sp, #20
 800920c:	af00      	add	r7, sp, #0
 800920e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8009210:	2300      	movs	r3, #0
 8009212:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8009218:	e005      	b.n	8009226 <USBD_GetLen+0x1e>
  {
    len++;
 800921a:	7bfb      	ldrb	r3, [r7, #15]
 800921c:	3301      	adds	r3, #1
 800921e:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8009220:	68bb      	ldr	r3, [r7, #8]
 8009222:	3301      	adds	r3, #1
 8009224:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8009226:	68bb      	ldr	r3, [r7, #8]
 8009228:	781b      	ldrb	r3, [r3, #0]
 800922a:	2b00      	cmp	r3, #0
 800922c:	d1f5      	bne.n	800921a <USBD_GetLen+0x12>
  }

  return len;
 800922e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009230:	4618      	mov	r0, r3
 8009232:	3714      	adds	r7, #20
 8009234:	46bd      	mov	sp, r7
 8009236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800923a:	4770      	bx	lr

0800923c <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800923c:	b580      	push	{r7, lr}
 800923e:	b084      	sub	sp, #16
 8009240:	af00      	add	r7, sp, #0
 8009242:	60f8      	str	r0, [r7, #12]
 8009244:	60b9      	str	r1, [r7, #8]
 8009246:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009248:	68fb      	ldr	r3, [r7, #12]
 800924a:	2202      	movs	r2, #2
 800924c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8009250:	68fb      	ldr	r3, [r7, #12]
 8009252:	687a      	ldr	r2, [r7, #4]
 8009254:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8009256:	68fb      	ldr	r3, [r7, #12]
 8009258:	687a      	ldr	r2, [r7, #4]
 800925a:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	68ba      	ldr	r2, [r7, #8]
 8009260:	2100      	movs	r1, #0
 8009262:	68f8      	ldr	r0, [r7, #12]
 8009264:	f000 fd0f 	bl	8009c86 <USBD_LL_Transmit>

  return USBD_OK;
 8009268:	2300      	movs	r3, #0
}
 800926a:	4618      	mov	r0, r3
 800926c:	3710      	adds	r7, #16
 800926e:	46bd      	mov	sp, r7
 8009270:	bd80      	pop	{r7, pc}

08009272 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8009272:	b580      	push	{r7, lr}
 8009274:	b084      	sub	sp, #16
 8009276:	af00      	add	r7, sp, #0
 8009278:	60f8      	str	r0, [r7, #12]
 800927a:	60b9      	str	r1, [r7, #8]
 800927c:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	68ba      	ldr	r2, [r7, #8]
 8009282:	2100      	movs	r1, #0
 8009284:	68f8      	ldr	r0, [r7, #12]
 8009286:	f000 fcfe 	bl	8009c86 <USBD_LL_Transmit>

  return USBD_OK;
 800928a:	2300      	movs	r3, #0
}
 800928c:	4618      	mov	r0, r3
 800928e:	3710      	adds	r7, #16
 8009290:	46bd      	mov	sp, r7
 8009292:	bd80      	pop	{r7, pc}

08009294 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8009294:	b580      	push	{r7, lr}
 8009296:	b084      	sub	sp, #16
 8009298:	af00      	add	r7, sp, #0
 800929a:	60f8      	str	r0, [r7, #12]
 800929c:	60b9      	str	r1, [r7, #8]
 800929e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80092a0:	68fb      	ldr	r3, [r7, #12]
 80092a2:	2203      	movs	r2, #3
 80092a4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80092a8:	68fb      	ldr	r3, [r7, #12]
 80092aa:	687a      	ldr	r2, [r7, #4]
 80092ac:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80092b0:	68fb      	ldr	r3, [r7, #12]
 80092b2:	687a      	ldr	r2, [r7, #4]
 80092b4:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	68ba      	ldr	r2, [r7, #8]
 80092bc:	2100      	movs	r1, #0
 80092be:	68f8      	ldr	r0, [r7, #12]
 80092c0:	f000 fd02 	bl	8009cc8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80092c4:	2300      	movs	r3, #0
}
 80092c6:	4618      	mov	r0, r3
 80092c8:	3710      	adds	r7, #16
 80092ca:	46bd      	mov	sp, r7
 80092cc:	bd80      	pop	{r7, pc}

080092ce <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80092ce:	b580      	push	{r7, lr}
 80092d0:	b084      	sub	sp, #16
 80092d2:	af00      	add	r7, sp, #0
 80092d4:	60f8      	str	r0, [r7, #12]
 80092d6:	60b9      	str	r1, [r7, #8]
 80092d8:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	68ba      	ldr	r2, [r7, #8]
 80092de:	2100      	movs	r1, #0
 80092e0:	68f8      	ldr	r0, [r7, #12]
 80092e2:	f000 fcf1 	bl	8009cc8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80092e6:	2300      	movs	r3, #0
}
 80092e8:	4618      	mov	r0, r3
 80092ea:	3710      	adds	r7, #16
 80092ec:	46bd      	mov	sp, r7
 80092ee:	bd80      	pop	{r7, pc}

080092f0 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80092f0:	b580      	push	{r7, lr}
 80092f2:	b082      	sub	sp, #8
 80092f4:	af00      	add	r7, sp, #0
 80092f6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	2204      	movs	r2, #4
 80092fc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009300:	2300      	movs	r3, #0
 8009302:	2200      	movs	r2, #0
 8009304:	2100      	movs	r1, #0
 8009306:	6878      	ldr	r0, [r7, #4]
 8009308:	f000 fcbd 	bl	8009c86 <USBD_LL_Transmit>

  return USBD_OK;
 800930c:	2300      	movs	r3, #0
}
 800930e:	4618      	mov	r0, r3
 8009310:	3708      	adds	r7, #8
 8009312:	46bd      	mov	sp, r7
 8009314:	bd80      	pop	{r7, pc}

08009316 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8009316:	b580      	push	{r7, lr}
 8009318:	b082      	sub	sp, #8
 800931a:	af00      	add	r7, sp, #0
 800931c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	2205      	movs	r2, #5
 8009322:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009326:	2300      	movs	r3, #0
 8009328:	2200      	movs	r2, #0
 800932a:	2100      	movs	r1, #0
 800932c:	6878      	ldr	r0, [r7, #4]
 800932e:	f000 fccb 	bl	8009cc8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009332:	2300      	movs	r3, #0
}
 8009334:	4618      	mov	r0, r3
 8009336:	3708      	adds	r7, #8
 8009338:	46bd      	mov	sp, r7
 800933a:	bd80      	pop	{r7, pc}

0800933c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800933c:	b580      	push	{r7, lr}
 800933e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceHS, &HS_Desc, DEVICE_HS) != USBD_OK)
 8009340:	2201      	movs	r2, #1
 8009342:	4912      	ldr	r1, [pc, #72]	; (800938c <MX_USB_DEVICE_Init+0x50>)
 8009344:	4812      	ldr	r0, [pc, #72]	; (8009390 <MX_USB_DEVICE_Init+0x54>)
 8009346:	f7fe fd07 	bl	8007d58 <USBD_Init>
 800934a:	4603      	mov	r3, r0
 800934c:	2b00      	cmp	r3, #0
 800934e:	d001      	beq.n	8009354 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8009350:	f7f7 ffa8 	bl	80012a4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceHS, &USBD_CDC) != USBD_OK)
 8009354:	490f      	ldr	r1, [pc, #60]	; (8009394 <MX_USB_DEVICE_Init+0x58>)
 8009356:	480e      	ldr	r0, [pc, #56]	; (8009390 <MX_USB_DEVICE_Init+0x54>)
 8009358:	f7fe fd2e 	bl	8007db8 <USBD_RegisterClass>
 800935c:	4603      	mov	r3, r0
 800935e:	2b00      	cmp	r3, #0
 8009360:	d001      	beq.n	8009366 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8009362:	f7f7 ff9f 	bl	80012a4 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceHS, &USBD_Interface_fops_HS) != USBD_OK)
 8009366:	490c      	ldr	r1, [pc, #48]	; (8009398 <MX_USB_DEVICE_Init+0x5c>)
 8009368:	4809      	ldr	r0, [pc, #36]	; (8009390 <MX_USB_DEVICE_Init+0x54>)
 800936a:	f7fe fc1f 	bl	8007bac <USBD_CDC_RegisterInterface>
 800936e:	4603      	mov	r3, r0
 8009370:	2b00      	cmp	r3, #0
 8009372:	d001      	beq.n	8009378 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8009374:	f7f7 ff96 	bl	80012a4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceHS) != USBD_OK)
 8009378:	4805      	ldr	r0, [pc, #20]	; (8009390 <MX_USB_DEVICE_Init+0x54>)
 800937a:	f7fe fd53 	bl	8007e24 <USBD_Start>
 800937e:	4603      	mov	r3, r0
 8009380:	2b00      	cmp	r3, #0
 8009382:	d001      	beq.n	8009388 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8009384:	f7f7 ff8e 	bl	80012a4 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8009388:	bf00      	nop
 800938a:	bd80      	pop	{r7, pc}
 800938c:	200000b4 	.word	0x200000b4
 8009390:	200005ac 	.word	0x200005ac
 8009394:	20000020 	.word	0x20000020
 8009398:	200000a0 	.word	0x200000a0

0800939c <CDC_Init_HS>:
/**
  * @brief  Initializes the CDC media low layer over the USB HS IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_HS(void)
{
 800939c:	b580      	push	{r7, lr}
 800939e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, UserTxBufferHS, 0);
 80093a0:	2200      	movs	r2, #0
 80093a2:	4905      	ldr	r1, [pc, #20]	; (80093b8 <CDC_Init_HS+0x1c>)
 80093a4:	4805      	ldr	r0, [pc, #20]	; (80093bc <CDC_Init_HS+0x20>)
 80093a6:	f7fe fc1b 	bl	8007be0 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, UserRxBufferHS);
 80093aa:	4905      	ldr	r1, [pc, #20]	; (80093c0 <CDC_Init_HS+0x24>)
 80093ac:	4803      	ldr	r0, [pc, #12]	; (80093bc <CDC_Init_HS+0x20>)
 80093ae:	f7fe fc39 	bl	8007c24 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80093b2:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 80093b4:	4618      	mov	r0, r3
 80093b6:	bd80      	pop	{r7, pc}
 80093b8:	20001088 	.word	0x20001088
 80093bc:	200005ac 	.word	0x200005ac
 80093c0:	20000888 	.word	0x20000888

080093c4 <CDC_DeInit_HS>:
  * @brief  DeInitializes the CDC media low layer
  * @param  None
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_HS(void)
{
 80093c4:	b480      	push	{r7}
 80093c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 9 */
  return (USBD_OK);
 80093c8:	2300      	movs	r3, #0
  /* USER CODE END 9 */
}
 80093ca:	4618      	mov	r0, r3
 80093cc:	46bd      	mov	sp, r7
 80093ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093d2:	4770      	bx	lr

080093d4 <CDC_Control_HS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_HS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80093d4:	b480      	push	{r7}
 80093d6:	b083      	sub	sp, #12
 80093d8:	af00      	add	r7, sp, #0
 80093da:	4603      	mov	r3, r0
 80093dc:	6039      	str	r1, [r7, #0]
 80093de:	71fb      	strb	r3, [r7, #7]
 80093e0:	4613      	mov	r3, r2
 80093e2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 10 */
  switch(cmd)
 80093e4:	79fb      	ldrb	r3, [r7, #7]
 80093e6:	2b23      	cmp	r3, #35	; 0x23
 80093e8:	d84a      	bhi.n	8009480 <CDC_Control_HS+0xac>
 80093ea:	a201      	add	r2, pc, #4	; (adr r2, 80093f0 <CDC_Control_HS+0x1c>)
 80093ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093f0:	08009481 	.word	0x08009481
 80093f4:	08009481 	.word	0x08009481
 80093f8:	08009481 	.word	0x08009481
 80093fc:	08009481 	.word	0x08009481
 8009400:	08009481 	.word	0x08009481
 8009404:	08009481 	.word	0x08009481
 8009408:	08009481 	.word	0x08009481
 800940c:	08009481 	.word	0x08009481
 8009410:	08009481 	.word	0x08009481
 8009414:	08009481 	.word	0x08009481
 8009418:	08009481 	.word	0x08009481
 800941c:	08009481 	.word	0x08009481
 8009420:	08009481 	.word	0x08009481
 8009424:	08009481 	.word	0x08009481
 8009428:	08009481 	.word	0x08009481
 800942c:	08009481 	.word	0x08009481
 8009430:	08009481 	.word	0x08009481
 8009434:	08009481 	.word	0x08009481
 8009438:	08009481 	.word	0x08009481
 800943c:	08009481 	.word	0x08009481
 8009440:	08009481 	.word	0x08009481
 8009444:	08009481 	.word	0x08009481
 8009448:	08009481 	.word	0x08009481
 800944c:	08009481 	.word	0x08009481
 8009450:	08009481 	.word	0x08009481
 8009454:	08009481 	.word	0x08009481
 8009458:	08009481 	.word	0x08009481
 800945c:	08009481 	.word	0x08009481
 8009460:	08009481 	.word	0x08009481
 8009464:	08009481 	.word	0x08009481
 8009468:	08009481 	.word	0x08009481
 800946c:	08009481 	.word	0x08009481
 8009470:	08009481 	.word	0x08009481
 8009474:	08009481 	.word	0x08009481
 8009478:	08009481 	.word	0x08009481
 800947c:	08009481 	.word	0x08009481
  case CDC_SEND_BREAK:

    break;

  default:
    break;
 8009480:	bf00      	nop
  }

  return (USBD_OK);
 8009482:	2300      	movs	r3, #0
  /* USER CODE END 10 */
}
 8009484:	4618      	mov	r0, r3
 8009486:	370c      	adds	r7, #12
 8009488:	46bd      	mov	sp, r7
 800948a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800948e:	4770      	bx	lr

08009490 <CDC_Receive_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAILL
  */
static int8_t CDC_Receive_HS(uint8_t* Buf, uint32_t *Len)
{
 8009490:	b580      	push	{r7, lr}
 8009492:	b082      	sub	sp, #8
 8009494:	af00      	add	r7, sp, #0
 8009496:	6078      	str	r0, [r7, #4]
 8009498:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 11 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, &Buf[0]);
 800949a:	6879      	ldr	r1, [r7, #4]
 800949c:	4813      	ldr	r0, [pc, #76]	; (80094ec <CDC_Receive_HS+0x5c>)
 800949e:	f7fe fbc1 	bl	8007c24 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceHS);
 80094a2:	4812      	ldr	r0, [pc, #72]	; (80094ec <CDC_Receive_HS+0x5c>)
 80094a4:	f7fe fc22 	bl	8007cec <USBD_CDC_ReceivePacket>
  // Signal to main thread that USB has received data
  USB_READY = true;
 80094a8:	4b11      	ldr	r3, [pc, #68]	; (80094f0 <CDC_Receive_HS+0x60>)
 80094aa:	2201      	movs	r2, #1
 80094ac:	701a      	strb	r2, [r3, #0]
  // Put usb data into usb buffer
  memset (USB_Buff, '\0', sizeof(USB_Buff));  	// clear the usb buffer
 80094ae:	f44f 7280 	mov.w	r2, #256	; 0x100
 80094b2:	2100      	movs	r1, #0
 80094b4:	480f      	ldr	r0, [pc, #60]	; (80094f4 <CDC_Receive_HS+0x64>)
 80094b6:	f000 fcb7 	bl	8009e28 <memset>
  USB_rx_data_len = (uint8_t)*Len;				// Find length of data sent
 80094ba:	683b      	ldr	r3, [r7, #0]
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	b2da      	uxtb	r2, r3
 80094c0:	4b0d      	ldr	r3, [pc, #52]	; (80094f8 <CDC_Receive_HS+0x68>)
 80094c2:	701a      	strb	r2, [r3, #0]
  memcpy(USB_Buff, Buf, USB_rx_data_len);  // copy the data to the buffer
 80094c4:	4b0c      	ldr	r3, [pc, #48]	; (80094f8 <CDC_Receive_HS+0x68>)
 80094c6:	781b      	ldrb	r3, [r3, #0]
 80094c8:	461a      	mov	r2, r3
 80094ca:	6879      	ldr	r1, [r7, #4]
 80094cc:	4809      	ldr	r0, [pc, #36]	; (80094f4 <CDC_Receive_HS+0x64>)
 80094ce:	f000 fc9d 	bl	8009e0c <memcpy>
  memset(Buf, '\0', USB_rx_data_len);   // clear the Buf
 80094d2:	4b09      	ldr	r3, [pc, #36]	; (80094f8 <CDC_Receive_HS+0x68>)
 80094d4:	781b      	ldrb	r3, [r3, #0]
 80094d6:	461a      	mov	r2, r3
 80094d8:	2100      	movs	r1, #0
 80094da:	6878      	ldr	r0, [r7, #4]
 80094dc:	f000 fca4 	bl	8009e28 <memset>

  return (USBD_OK);
 80094e0:	2300      	movs	r3, #0
  /* USER CODE END 11 */
}
 80094e2:	4618      	mov	r0, r3
 80094e4:	3708      	adds	r7, #8
 80094e6:	46bd      	mov	sp, r7
 80094e8:	bd80      	pop	{r7, pc}
 80094ea:	bf00      	nop
 80094ec:	200005ac 	.word	0x200005ac
 80094f0:	2000056c 	.word	0x2000056c
 80094f4:	2000046c 	.word	0x2000046c
 80094f8:	2000056d 	.word	0x2000056d

080094fc <CDC_Transmit_HS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_HS(uint8_t* Buf, uint16_t Len)
{
 80094fc:	b580      	push	{r7, lr}
 80094fe:	b084      	sub	sp, #16
 8009500:	af00      	add	r7, sp, #0
 8009502:	6078      	str	r0, [r7, #4]
 8009504:	460b      	mov	r3, r1
 8009506:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8009508:	2300      	movs	r3, #0
 800950a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 12 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceHS.pClassData;
 800950c:	4b0d      	ldr	r3, [pc, #52]	; (8009544 <CDC_Transmit_HS+0x48>)
 800950e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009512:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8009514:	68bb      	ldr	r3, [r7, #8]
 8009516:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800951a:	2b00      	cmp	r3, #0
 800951c:	d001      	beq.n	8009522 <CDC_Transmit_HS+0x26>
    return USBD_BUSY;
 800951e:	2301      	movs	r3, #1
 8009520:	e00b      	b.n	800953a <CDC_Transmit_HS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, Buf, Len);
 8009522:	887b      	ldrh	r3, [r7, #2]
 8009524:	461a      	mov	r2, r3
 8009526:	6879      	ldr	r1, [r7, #4]
 8009528:	4806      	ldr	r0, [pc, #24]	; (8009544 <CDC_Transmit_HS+0x48>)
 800952a:	f7fe fb59 	bl	8007be0 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceHS);
 800952e:	4805      	ldr	r0, [pc, #20]	; (8009544 <CDC_Transmit_HS+0x48>)
 8009530:	f7fe fb96 	bl	8007c60 <USBD_CDC_TransmitPacket>
 8009534:	4603      	mov	r3, r0
 8009536:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 12 */
  return result;
 8009538:	7bfb      	ldrb	r3, [r7, #15]
}
 800953a:	4618      	mov	r0, r3
 800953c:	3710      	adds	r7, #16
 800953e:	46bd      	mov	sp, r7
 8009540:	bd80      	pop	{r7, pc}
 8009542:	bf00      	nop
 8009544:	200005ac 	.word	0x200005ac

08009548 <CDC_TransmitCplt_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_HS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8009548:	b480      	push	{r7}
 800954a:	b087      	sub	sp, #28
 800954c:	af00      	add	r7, sp, #0
 800954e:	60f8      	str	r0, [r7, #12]
 8009550:	60b9      	str	r1, [r7, #8]
 8009552:	4613      	mov	r3, r2
 8009554:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8009556:	2300      	movs	r3, #0
 8009558:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 14 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 14 */
  return result;
 800955a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800955e:	4618      	mov	r0, r3
 8009560:	371c      	adds	r7, #28
 8009562:	46bd      	mov	sp, r7
 8009564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009568:	4770      	bx	lr
	...

0800956c <USBD_HS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800956c:	b480      	push	{r7}
 800956e:	b083      	sub	sp, #12
 8009570:	af00      	add	r7, sp, #0
 8009572:	4603      	mov	r3, r0
 8009574:	6039      	str	r1, [r7, #0]
 8009576:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_HS_DeviceDesc);
 8009578:	683b      	ldr	r3, [r7, #0]
 800957a:	2212      	movs	r2, #18
 800957c:	801a      	strh	r2, [r3, #0]
  return USBD_HS_DeviceDesc;
 800957e:	4b03      	ldr	r3, [pc, #12]	; (800958c <USBD_HS_DeviceDescriptor+0x20>)
}
 8009580:	4618      	mov	r0, r3
 8009582:	370c      	adds	r7, #12
 8009584:	46bd      	mov	sp, r7
 8009586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800958a:	4770      	bx	lr
 800958c:	200000d0 	.word	0x200000d0

08009590 <USBD_HS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009590:	b480      	push	{r7}
 8009592:	b083      	sub	sp, #12
 8009594:	af00      	add	r7, sp, #0
 8009596:	4603      	mov	r3, r0
 8009598:	6039      	str	r1, [r7, #0]
 800959a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800959c:	683b      	ldr	r3, [r7, #0]
 800959e:	2204      	movs	r2, #4
 80095a0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80095a2:	4b03      	ldr	r3, [pc, #12]	; (80095b0 <USBD_HS_LangIDStrDescriptor+0x20>)
}
 80095a4:	4618      	mov	r0, r3
 80095a6:	370c      	adds	r7, #12
 80095a8:	46bd      	mov	sp, r7
 80095aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ae:	4770      	bx	lr
 80095b0:	200000e4 	.word	0x200000e4

080095b4 <USBD_HS_ProductStrDescriptor>:
  * @param  speed : current device speed
  * @param  length : pointer to data length variable
  * @retval pointer to descriptor buffer
  */
uint8_t * USBD_HS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80095b4:	b580      	push	{r7, lr}
 80095b6:	b082      	sub	sp, #8
 80095b8:	af00      	add	r7, sp, #0
 80095ba:	4603      	mov	r3, r0
 80095bc:	6039      	str	r1, [r7, #0]
 80095be:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80095c0:	79fb      	ldrb	r3, [r7, #7]
 80095c2:	2b00      	cmp	r3, #0
 80095c4:	d105      	bne.n	80095d2 <USBD_HS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 80095c6:	683a      	ldr	r2, [r7, #0]
 80095c8:	4907      	ldr	r1, [pc, #28]	; (80095e8 <USBD_HS_ProductStrDescriptor+0x34>)
 80095ca:	4808      	ldr	r0, [pc, #32]	; (80095ec <USBD_HS_ProductStrDescriptor+0x38>)
 80095cc:	f7ff fdd6 	bl	800917c <USBD_GetString>
 80095d0:	e004      	b.n	80095dc <USBD_HS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 80095d2:	683a      	ldr	r2, [r7, #0]
 80095d4:	4904      	ldr	r1, [pc, #16]	; (80095e8 <USBD_HS_ProductStrDescriptor+0x34>)
 80095d6:	4805      	ldr	r0, [pc, #20]	; (80095ec <USBD_HS_ProductStrDescriptor+0x38>)
 80095d8:	f7ff fdd0 	bl	800917c <USBD_GetString>
  }
  return USBD_StrDesc;
 80095dc:	4b02      	ldr	r3, [pc, #8]	; (80095e8 <USBD_HS_ProductStrDescriptor+0x34>)
}
 80095de:	4618      	mov	r0, r3
 80095e0:	3708      	adds	r7, #8
 80095e2:	46bd      	mov	sp, r7
 80095e4:	bd80      	pop	{r7, pc}
 80095e6:	bf00      	nop
 80095e8:	20001888 	.word	0x20001888
 80095ec:	0800a710 	.word	0x0800a710

080095f0 <USBD_HS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80095f0:	b580      	push	{r7, lr}
 80095f2:	b082      	sub	sp, #8
 80095f4:	af00      	add	r7, sp, #0
 80095f6:	4603      	mov	r3, r0
 80095f8:	6039      	str	r1, [r7, #0]
 80095fa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80095fc:	683a      	ldr	r2, [r7, #0]
 80095fe:	4904      	ldr	r1, [pc, #16]	; (8009610 <USBD_HS_ManufacturerStrDescriptor+0x20>)
 8009600:	4804      	ldr	r0, [pc, #16]	; (8009614 <USBD_HS_ManufacturerStrDescriptor+0x24>)
 8009602:	f7ff fdbb 	bl	800917c <USBD_GetString>
  return USBD_StrDesc;
 8009606:	4b02      	ldr	r3, [pc, #8]	; (8009610 <USBD_HS_ManufacturerStrDescriptor+0x20>)
}
 8009608:	4618      	mov	r0, r3
 800960a:	3708      	adds	r7, #8
 800960c:	46bd      	mov	sp, r7
 800960e:	bd80      	pop	{r7, pc}
 8009610:	20001888 	.word	0x20001888
 8009614:	0800a728 	.word	0x0800a728

08009618 <USBD_HS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009618:	b580      	push	{r7, lr}
 800961a:	b082      	sub	sp, #8
 800961c:	af00      	add	r7, sp, #0
 800961e:	4603      	mov	r3, r0
 8009620:	6039      	str	r1, [r7, #0]
 8009622:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8009624:	683b      	ldr	r3, [r7, #0]
 8009626:	221a      	movs	r2, #26
 8009628:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800962a:	f000 f843 	bl	80096b4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_HS_SerialStrDescriptor */

  /* USER CODE END USBD_HS_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 800962e:	4b02      	ldr	r3, [pc, #8]	; (8009638 <USBD_HS_SerialStrDescriptor+0x20>)
}
 8009630:	4618      	mov	r0, r3
 8009632:	3708      	adds	r7, #8
 8009634:	46bd      	mov	sp, r7
 8009636:	bd80      	pop	{r7, pc}
 8009638:	200000e8 	.word	0x200000e8

0800963c <USBD_HS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800963c:	b580      	push	{r7, lr}
 800963e:	b082      	sub	sp, #8
 8009640:	af00      	add	r7, sp, #0
 8009642:	4603      	mov	r3, r0
 8009644:	6039      	str	r1, [r7, #0]
 8009646:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8009648:	79fb      	ldrb	r3, [r7, #7]
 800964a:	2b00      	cmp	r3, #0
 800964c:	d105      	bne.n	800965a <USBD_HS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 800964e:	683a      	ldr	r2, [r7, #0]
 8009650:	4907      	ldr	r1, [pc, #28]	; (8009670 <USBD_HS_ConfigStrDescriptor+0x34>)
 8009652:	4808      	ldr	r0, [pc, #32]	; (8009674 <USBD_HS_ConfigStrDescriptor+0x38>)
 8009654:	f7ff fd92 	bl	800917c <USBD_GetString>
 8009658:	e004      	b.n	8009664 <USBD_HS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 800965a:	683a      	ldr	r2, [r7, #0]
 800965c:	4904      	ldr	r1, [pc, #16]	; (8009670 <USBD_HS_ConfigStrDescriptor+0x34>)
 800965e:	4805      	ldr	r0, [pc, #20]	; (8009674 <USBD_HS_ConfigStrDescriptor+0x38>)
 8009660:	f7ff fd8c 	bl	800917c <USBD_GetString>
  }
  return USBD_StrDesc;
 8009664:	4b02      	ldr	r3, [pc, #8]	; (8009670 <USBD_HS_ConfigStrDescriptor+0x34>)
}
 8009666:	4618      	mov	r0, r3
 8009668:	3708      	adds	r7, #8
 800966a:	46bd      	mov	sp, r7
 800966c:	bd80      	pop	{r7, pc}
 800966e:	bf00      	nop
 8009670:	20001888 	.word	0x20001888
 8009674:	0800a73c 	.word	0x0800a73c

08009678 <USBD_HS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009678:	b580      	push	{r7, lr}
 800967a:	b082      	sub	sp, #8
 800967c:	af00      	add	r7, sp, #0
 800967e:	4603      	mov	r3, r0
 8009680:	6039      	str	r1, [r7, #0]
 8009682:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009684:	79fb      	ldrb	r3, [r7, #7]
 8009686:	2b00      	cmp	r3, #0
 8009688:	d105      	bne.n	8009696 <USBD_HS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 800968a:	683a      	ldr	r2, [r7, #0]
 800968c:	4907      	ldr	r1, [pc, #28]	; (80096ac <USBD_HS_InterfaceStrDescriptor+0x34>)
 800968e:	4808      	ldr	r0, [pc, #32]	; (80096b0 <USBD_HS_InterfaceStrDescriptor+0x38>)
 8009690:	f7ff fd74 	bl	800917c <USBD_GetString>
 8009694:	e004      	b.n	80096a0 <USBD_HS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 8009696:	683a      	ldr	r2, [r7, #0]
 8009698:	4904      	ldr	r1, [pc, #16]	; (80096ac <USBD_HS_InterfaceStrDescriptor+0x34>)
 800969a:	4805      	ldr	r0, [pc, #20]	; (80096b0 <USBD_HS_InterfaceStrDescriptor+0x38>)
 800969c:	f7ff fd6e 	bl	800917c <USBD_GetString>
  }
  return USBD_StrDesc;
 80096a0:	4b02      	ldr	r3, [pc, #8]	; (80096ac <USBD_HS_InterfaceStrDescriptor+0x34>)
}
 80096a2:	4618      	mov	r0, r3
 80096a4:	3708      	adds	r7, #8
 80096a6:	46bd      	mov	sp, r7
 80096a8:	bd80      	pop	{r7, pc}
 80096aa:	bf00      	nop
 80096ac:	20001888 	.word	0x20001888
 80096b0:	0800a748 	.word	0x0800a748

080096b4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80096b4:	b580      	push	{r7, lr}
 80096b6:	b084      	sub	sp, #16
 80096b8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80096ba:	4b0f      	ldr	r3, [pc, #60]	; (80096f8 <Get_SerialNum+0x44>)
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80096c0:	4b0e      	ldr	r3, [pc, #56]	; (80096fc <Get_SerialNum+0x48>)
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80096c6:	4b0e      	ldr	r3, [pc, #56]	; (8009700 <Get_SerialNum+0x4c>)
 80096c8:	681b      	ldr	r3, [r3, #0]
 80096ca:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80096cc:	68fa      	ldr	r2, [r7, #12]
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	4413      	add	r3, r2
 80096d2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80096d4:	68fb      	ldr	r3, [r7, #12]
 80096d6:	2b00      	cmp	r3, #0
 80096d8:	d009      	beq.n	80096ee <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80096da:	2208      	movs	r2, #8
 80096dc:	4909      	ldr	r1, [pc, #36]	; (8009704 <Get_SerialNum+0x50>)
 80096de:	68f8      	ldr	r0, [r7, #12]
 80096e0:	f000 f814 	bl	800970c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80096e4:	2204      	movs	r2, #4
 80096e6:	4908      	ldr	r1, [pc, #32]	; (8009708 <Get_SerialNum+0x54>)
 80096e8:	68b8      	ldr	r0, [r7, #8]
 80096ea:	f000 f80f 	bl	800970c <IntToUnicode>
  }
}
 80096ee:	bf00      	nop
 80096f0:	3710      	adds	r7, #16
 80096f2:	46bd      	mov	sp, r7
 80096f4:	bd80      	pop	{r7, pc}
 80096f6:	bf00      	nop
 80096f8:	1fff7a10 	.word	0x1fff7a10
 80096fc:	1fff7a14 	.word	0x1fff7a14
 8009700:	1fff7a18 	.word	0x1fff7a18
 8009704:	200000ea 	.word	0x200000ea
 8009708:	200000fa 	.word	0x200000fa

0800970c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800970c:	b480      	push	{r7}
 800970e:	b087      	sub	sp, #28
 8009710:	af00      	add	r7, sp, #0
 8009712:	60f8      	str	r0, [r7, #12]
 8009714:	60b9      	str	r1, [r7, #8]
 8009716:	4613      	mov	r3, r2
 8009718:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800971a:	2300      	movs	r3, #0
 800971c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800971e:	2300      	movs	r3, #0
 8009720:	75fb      	strb	r3, [r7, #23]
 8009722:	e027      	b.n	8009774 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8009724:	68fb      	ldr	r3, [r7, #12]
 8009726:	0f1b      	lsrs	r3, r3, #28
 8009728:	2b09      	cmp	r3, #9
 800972a:	d80b      	bhi.n	8009744 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800972c:	68fb      	ldr	r3, [r7, #12]
 800972e:	0f1b      	lsrs	r3, r3, #28
 8009730:	b2da      	uxtb	r2, r3
 8009732:	7dfb      	ldrb	r3, [r7, #23]
 8009734:	005b      	lsls	r3, r3, #1
 8009736:	4619      	mov	r1, r3
 8009738:	68bb      	ldr	r3, [r7, #8]
 800973a:	440b      	add	r3, r1
 800973c:	3230      	adds	r2, #48	; 0x30
 800973e:	b2d2      	uxtb	r2, r2
 8009740:	701a      	strb	r2, [r3, #0]
 8009742:	e00a      	b.n	800975a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009744:	68fb      	ldr	r3, [r7, #12]
 8009746:	0f1b      	lsrs	r3, r3, #28
 8009748:	b2da      	uxtb	r2, r3
 800974a:	7dfb      	ldrb	r3, [r7, #23]
 800974c:	005b      	lsls	r3, r3, #1
 800974e:	4619      	mov	r1, r3
 8009750:	68bb      	ldr	r3, [r7, #8]
 8009752:	440b      	add	r3, r1
 8009754:	3237      	adds	r2, #55	; 0x37
 8009756:	b2d2      	uxtb	r2, r2
 8009758:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800975a:	68fb      	ldr	r3, [r7, #12]
 800975c:	011b      	lsls	r3, r3, #4
 800975e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009760:	7dfb      	ldrb	r3, [r7, #23]
 8009762:	005b      	lsls	r3, r3, #1
 8009764:	3301      	adds	r3, #1
 8009766:	68ba      	ldr	r2, [r7, #8]
 8009768:	4413      	add	r3, r2
 800976a:	2200      	movs	r2, #0
 800976c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800976e:	7dfb      	ldrb	r3, [r7, #23]
 8009770:	3301      	adds	r3, #1
 8009772:	75fb      	strb	r3, [r7, #23]
 8009774:	7dfa      	ldrb	r2, [r7, #23]
 8009776:	79fb      	ldrb	r3, [r7, #7]
 8009778:	429a      	cmp	r2, r3
 800977a:	d3d3      	bcc.n	8009724 <IntToUnicode+0x18>
  }
}
 800977c:	bf00      	nop
 800977e:	bf00      	nop
 8009780:	371c      	adds	r7, #28
 8009782:	46bd      	mov	sp, r7
 8009784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009788:	4770      	bx	lr
	...

0800978c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800978c:	b580      	push	{r7, lr}
 800978e:	b08a      	sub	sp, #40	; 0x28
 8009790:	af00      	add	r7, sp, #0
 8009792:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009794:	f107 0314 	add.w	r3, r7, #20
 8009798:	2200      	movs	r2, #0
 800979a:	601a      	str	r2, [r3, #0]
 800979c:	605a      	str	r2, [r3, #4]
 800979e:	609a      	str	r2, [r3, #8]
 80097a0:	60da      	str	r2, [r3, #12]
 80097a2:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_HS)
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	681b      	ldr	r3, [r3, #0]
 80097a8:	4a1d      	ldr	r2, [pc, #116]	; (8009820 <HAL_PCD_MspInit+0x94>)
 80097aa:	4293      	cmp	r3, r2
 80097ac:	d134      	bne.n	8009818 <HAL_PCD_MspInit+0x8c>
  {
  /* USER CODE BEGIN USB_OTG_HS_MspInit 0 */

  /* USER CODE END USB_OTG_HS_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80097ae:	2300      	movs	r3, #0
 80097b0:	613b      	str	r3, [r7, #16]
 80097b2:	4b1c      	ldr	r3, [pc, #112]	; (8009824 <HAL_PCD_MspInit+0x98>)
 80097b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80097b6:	4a1b      	ldr	r2, [pc, #108]	; (8009824 <HAL_PCD_MspInit+0x98>)
 80097b8:	f043 0302 	orr.w	r3, r3, #2
 80097bc:	6313      	str	r3, [r2, #48]	; 0x30
 80097be:	4b19      	ldr	r3, [pc, #100]	; (8009824 <HAL_PCD_MspInit+0x98>)
 80097c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80097c2:	f003 0302 	and.w	r3, r3, #2
 80097c6:	613b      	str	r3, [r7, #16]
 80097c8:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_HS GPIO Configuration
    PB14     ------> USB_OTG_HS_DM
    PB15     ------> USB_OTG_HS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80097ca:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80097ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80097d0:	2302      	movs	r3, #2
 80097d2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80097d4:	2300      	movs	r3, #0
 80097d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80097d8:	2303      	movs	r3, #3
 80097da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 80097dc:	230c      	movs	r3, #12
 80097de:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80097e0:	f107 0314 	add.w	r3, r7, #20
 80097e4:	4619      	mov	r1, r3
 80097e6:	4810      	ldr	r0, [pc, #64]	; (8009828 <HAL_PCD_MspInit+0x9c>)
 80097e8:	f7f8 fa1e 	bl	8001c28 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 80097ec:	2300      	movs	r3, #0
 80097ee:	60fb      	str	r3, [r7, #12]
 80097f0:	4b0c      	ldr	r3, [pc, #48]	; (8009824 <HAL_PCD_MspInit+0x98>)
 80097f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80097f4:	4a0b      	ldr	r2, [pc, #44]	; (8009824 <HAL_PCD_MspInit+0x98>)
 80097f6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80097fa:	6313      	str	r3, [r2, #48]	; 0x30
 80097fc:	4b09      	ldr	r3, [pc, #36]	; (8009824 <HAL_PCD_MspInit+0x98>)
 80097fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009800:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009804:	60fb      	str	r3, [r7, #12]
 8009806:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 0, 0);
 8009808:	2200      	movs	r2, #0
 800980a:	2100      	movs	r1, #0
 800980c:	204d      	movs	r0, #77	; 0x4d
 800980e:	f7f8 f942 	bl	8001a96 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 8009812:	204d      	movs	r0, #77	; 0x4d
 8009814:	f7f8 f95b 	bl	8001ace <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 8009818:	bf00      	nop
 800981a:	3728      	adds	r7, #40	; 0x28
 800981c:	46bd      	mov	sp, r7
 800981e:	bd80      	pop	{r7, pc}
 8009820:	40040000 	.word	0x40040000
 8009824:	40023800 	.word	0x40023800
 8009828:	40020400 	.word	0x40020400

0800982c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800982c:	b580      	push	{r7, lr}
 800982e:	b082      	sub	sp, #8
 8009830:	af00      	add	r7, sp, #0
 8009832:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8009840:	4619      	mov	r1, r3
 8009842:	4610      	mov	r0, r2
 8009844:	f7fe fb3b 	bl	8007ebe <USBD_LL_SetupStage>
}
 8009848:	bf00      	nop
 800984a:	3708      	adds	r7, #8
 800984c:	46bd      	mov	sp, r7
 800984e:	bd80      	pop	{r7, pc}

08009850 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009850:	b580      	push	{r7, lr}
 8009852:	b082      	sub	sp, #8
 8009854:	af00      	add	r7, sp, #0
 8009856:	6078      	str	r0, [r7, #4]
 8009858:	460b      	mov	r3, r1
 800985a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8009862:	78fa      	ldrb	r2, [r7, #3]
 8009864:	6879      	ldr	r1, [r7, #4]
 8009866:	4613      	mov	r3, r2
 8009868:	00db      	lsls	r3, r3, #3
 800986a:	4413      	add	r3, r2
 800986c:	009b      	lsls	r3, r3, #2
 800986e:	440b      	add	r3, r1
 8009870:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8009874:	681a      	ldr	r2, [r3, #0]
 8009876:	78fb      	ldrb	r3, [r7, #3]
 8009878:	4619      	mov	r1, r3
 800987a:	f7fe fb75 	bl	8007f68 <USBD_LL_DataOutStage>
}
 800987e:	bf00      	nop
 8009880:	3708      	adds	r7, #8
 8009882:	46bd      	mov	sp, r7
 8009884:	bd80      	pop	{r7, pc}

08009886 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009886:	b580      	push	{r7, lr}
 8009888:	b082      	sub	sp, #8
 800988a:	af00      	add	r7, sp, #0
 800988c:	6078      	str	r0, [r7, #4]
 800988e:	460b      	mov	r3, r1
 8009890:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8009898:	78fa      	ldrb	r2, [r7, #3]
 800989a:	6879      	ldr	r1, [r7, #4]
 800989c:	4613      	mov	r3, r2
 800989e:	00db      	lsls	r3, r3, #3
 80098a0:	4413      	add	r3, r2
 80098a2:	009b      	lsls	r3, r3, #2
 80098a4:	440b      	add	r3, r1
 80098a6:	334c      	adds	r3, #76	; 0x4c
 80098a8:	681a      	ldr	r2, [r3, #0]
 80098aa:	78fb      	ldrb	r3, [r7, #3]
 80098ac:	4619      	mov	r1, r3
 80098ae:	f7fe fc0e 	bl	80080ce <USBD_LL_DataInStage>
}
 80098b2:	bf00      	nop
 80098b4:	3708      	adds	r7, #8
 80098b6:	46bd      	mov	sp, r7
 80098b8:	bd80      	pop	{r7, pc}

080098ba <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80098ba:	b580      	push	{r7, lr}
 80098bc:	b082      	sub	sp, #8
 80098be:	af00      	add	r7, sp, #0
 80098c0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80098c8:	4618      	mov	r0, r3
 80098ca:	f7fe fd42 	bl	8008352 <USBD_LL_SOF>
}
 80098ce:	bf00      	nop
 80098d0:	3708      	adds	r7, #8
 80098d2:	46bd      	mov	sp, r7
 80098d4:	bd80      	pop	{r7, pc}

080098d6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80098d6:	b580      	push	{r7, lr}
 80098d8:	b084      	sub	sp, #16
 80098da:	af00      	add	r7, sp, #0
 80098dc:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80098de:	2301      	movs	r3, #1
 80098e0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	68db      	ldr	r3, [r3, #12]
 80098e6:	2b00      	cmp	r3, #0
 80098e8:	d102      	bne.n	80098f0 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 80098ea:	2300      	movs	r3, #0
 80098ec:	73fb      	strb	r3, [r7, #15]
 80098ee:	e008      	b.n	8009902 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	68db      	ldr	r3, [r3, #12]
 80098f4:	2b02      	cmp	r3, #2
 80098f6:	d102      	bne.n	80098fe <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 80098f8:	2301      	movs	r3, #1
 80098fa:	73fb      	strb	r3, [r7, #15]
 80098fc:	e001      	b.n	8009902 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 80098fe:	f7f7 fcd1 	bl	80012a4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009908:	7bfa      	ldrb	r2, [r7, #15]
 800990a:	4611      	mov	r1, r2
 800990c:	4618      	mov	r0, r3
 800990e:	f7fe fce2 	bl	80082d6 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009918:	4618      	mov	r0, r3
 800991a:	f7fe fc8a 	bl	8008232 <USBD_LL_Reset>
}
 800991e:	bf00      	nop
 8009920:	3710      	adds	r7, #16
 8009922:	46bd      	mov	sp, r7
 8009924:	bd80      	pop	{r7, pc}
	...

08009928 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009928:	b580      	push	{r7, lr}
 800992a:	b082      	sub	sp, #8
 800992c:	af00      	add	r7, sp, #0
 800992e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009936:	4618      	mov	r0, r3
 8009938:	f7fe fcdd 	bl	80082f6 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	681b      	ldr	r3, [r3, #0]
 8009940:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	687a      	ldr	r2, [r7, #4]
 8009948:	6812      	ldr	r2, [r2, #0]
 800994a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800994e:	f043 0301 	orr.w	r3, r3, #1
 8009952:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	6a1b      	ldr	r3, [r3, #32]
 8009958:	2b00      	cmp	r3, #0
 800995a:	d005      	beq.n	8009968 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800995c:	4b04      	ldr	r3, [pc, #16]	; (8009970 <HAL_PCD_SuspendCallback+0x48>)
 800995e:	691b      	ldr	r3, [r3, #16]
 8009960:	4a03      	ldr	r2, [pc, #12]	; (8009970 <HAL_PCD_SuspendCallback+0x48>)
 8009962:	f043 0306 	orr.w	r3, r3, #6
 8009966:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8009968:	bf00      	nop
 800996a:	3708      	adds	r7, #8
 800996c:	46bd      	mov	sp, r7
 800996e:	bd80      	pop	{r7, pc}
 8009970:	e000ed00 	.word	0xe000ed00

08009974 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009974:	b580      	push	{r7, lr}
 8009976:	b082      	sub	sp, #8
 8009978:	af00      	add	r7, sp, #0
 800997a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009982:	4618      	mov	r0, r3
 8009984:	f7fe fccd 	bl	8008322 <USBD_LL_Resume>
}
 8009988:	bf00      	nop
 800998a:	3708      	adds	r7, #8
 800998c:	46bd      	mov	sp, r7
 800998e:	bd80      	pop	{r7, pc}

08009990 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009990:	b580      	push	{r7, lr}
 8009992:	b082      	sub	sp, #8
 8009994:	af00      	add	r7, sp, #0
 8009996:	6078      	str	r0, [r7, #4]
 8009998:	460b      	mov	r3, r1
 800999a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80099a2:	78fa      	ldrb	r2, [r7, #3]
 80099a4:	4611      	mov	r1, r2
 80099a6:	4618      	mov	r0, r3
 80099a8:	f7fe fd25 	bl	80083f6 <USBD_LL_IsoOUTIncomplete>
}
 80099ac:	bf00      	nop
 80099ae:	3708      	adds	r7, #8
 80099b0:	46bd      	mov	sp, r7
 80099b2:	bd80      	pop	{r7, pc}

080099b4 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80099b4:	b580      	push	{r7, lr}
 80099b6:	b082      	sub	sp, #8
 80099b8:	af00      	add	r7, sp, #0
 80099ba:	6078      	str	r0, [r7, #4]
 80099bc:	460b      	mov	r3, r1
 80099be:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80099c6:	78fa      	ldrb	r2, [r7, #3]
 80099c8:	4611      	mov	r1, r2
 80099ca:	4618      	mov	r0, r3
 80099cc:	f7fe fce1 	bl	8008392 <USBD_LL_IsoINIncomplete>
}
 80099d0:	bf00      	nop
 80099d2:	3708      	adds	r7, #8
 80099d4:	46bd      	mov	sp, r7
 80099d6:	bd80      	pop	{r7, pc}

080099d8 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80099d8:	b580      	push	{r7, lr}
 80099da:	b082      	sub	sp, #8
 80099dc:	af00      	add	r7, sp, #0
 80099de:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80099e6:	4618      	mov	r0, r3
 80099e8:	f7fe fd37 	bl	800845a <USBD_LL_DevConnected>
}
 80099ec:	bf00      	nop
 80099ee:	3708      	adds	r7, #8
 80099f0:	46bd      	mov	sp, r7
 80099f2:	bd80      	pop	{r7, pc}

080099f4 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80099f4:	b580      	push	{r7, lr}
 80099f6:	b082      	sub	sp, #8
 80099f8:	af00      	add	r7, sp, #0
 80099fa:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009a02:	4618      	mov	r0, r3
 8009a04:	f7fe fd34 	bl	8008470 <USBD_LL_DevDisconnected>
}
 8009a08:	bf00      	nop
 8009a0a:	3708      	adds	r7, #8
 8009a0c:	46bd      	mov	sp, r7
 8009a0e:	bd80      	pop	{r7, pc}

08009a10 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009a10:	b580      	push	{r7, lr}
 8009a12:	b082      	sub	sp, #8
 8009a14:	af00      	add	r7, sp, #0
 8009a16:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_HS) {
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	781b      	ldrb	r3, [r3, #0]
 8009a1c:	2b01      	cmp	r3, #1
 8009a1e:	d140      	bne.n	8009aa2 <USBD_LL_Init+0x92>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_HS.pData = pdev;
 8009a20:	4a22      	ldr	r2, [pc, #136]	; (8009aac <USBD_LL_Init+0x9c>)
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_HS;
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	4a20      	ldr	r2, [pc, #128]	; (8009aac <USBD_LL_Init+0x9c>)
 8009a2c:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 8009a30:	4b1e      	ldr	r3, [pc, #120]	; (8009aac <USBD_LL_Init+0x9c>)
 8009a32:	4a1f      	ldr	r2, [pc, #124]	; (8009ab0 <USBD_LL_Init+0xa0>)
 8009a34:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_HS.Init.dev_endpoints = 6;
 8009a36:	4b1d      	ldr	r3, [pc, #116]	; (8009aac <USBD_LL_Init+0x9c>)
 8009a38:	2206      	movs	r2, #6
 8009a3a:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_FULL;
 8009a3c:	4b1b      	ldr	r3, [pc, #108]	; (8009aac <USBD_LL_Init+0x9c>)
 8009a3e:	2202      	movs	r2, #2
 8009a40:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 8009a42:	4b1a      	ldr	r3, [pc, #104]	; (8009aac <USBD_LL_Init+0x9c>)
 8009a44:	2200      	movs	r2, #0
 8009a46:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 8009a48:	4b18      	ldr	r3, [pc, #96]	; (8009aac <USBD_LL_Init+0x9c>)
 8009a4a:	2202      	movs	r2, #2
 8009a4c:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 8009a4e:	4b17      	ldr	r3, [pc, #92]	; (8009aac <USBD_LL_Init+0x9c>)
 8009a50:	2200      	movs	r2, #0
 8009a52:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 8009a54:	4b15      	ldr	r3, [pc, #84]	; (8009aac <USBD_LL_Init+0x9c>)
 8009a56:	2200      	movs	r2, #0
 8009a58:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 8009a5a:	4b14      	ldr	r3, [pc, #80]	; (8009aac <USBD_LL_Init+0x9c>)
 8009a5c:	2200      	movs	r2, #0
 8009a5e:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 8009a60:	4b12      	ldr	r3, [pc, #72]	; (8009aac <USBD_LL_Init+0x9c>)
 8009a62:	2200      	movs	r2, #0
 8009a64:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 8009a66:	4b11      	ldr	r3, [pc, #68]	; (8009aac <USBD_LL_Init+0x9c>)
 8009a68:	2200      	movs	r2, #0
 8009a6a:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 8009a6c:	4b0f      	ldr	r3, [pc, #60]	; (8009aac <USBD_LL_Init+0x9c>)
 8009a6e:	2200      	movs	r2, #0
 8009a70:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 8009a72:	480e      	ldr	r0, [pc, #56]	; (8009aac <USBD_LL_Init+0x9c>)
 8009a74:	f7f8 faa6 	bl	8001fc4 <HAL_PCD_Init>
 8009a78:	4603      	mov	r3, r0
 8009a7a:	2b00      	cmp	r3, #0
 8009a7c:	d001      	beq.n	8009a82 <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 8009a7e:	f7f7 fc11 	bl	80012a4 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_HS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_HS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_HS, 0x200);
 8009a82:	f44f 7100 	mov.w	r1, #512	; 0x200
 8009a86:	4809      	ldr	r0, [pc, #36]	; (8009aac <USBD_LL_Init+0x9c>)
 8009a88:	f7f9 fcfd 	bl	8003486 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 0, 0x80);
 8009a8c:	2280      	movs	r2, #128	; 0x80
 8009a8e:	2100      	movs	r1, #0
 8009a90:	4806      	ldr	r0, [pc, #24]	; (8009aac <USBD_LL_Init+0x9c>)
 8009a92:	f7f9 fcb1 	bl	80033f8 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 1, 0x174);
 8009a96:	f44f 72ba 	mov.w	r2, #372	; 0x174
 8009a9a:	2101      	movs	r1, #1
 8009a9c:	4803      	ldr	r0, [pc, #12]	; (8009aac <USBD_LL_Init+0x9c>)
 8009a9e:	f7f9 fcab 	bl	80033f8 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8009aa2:	2300      	movs	r3, #0
}
 8009aa4:	4618      	mov	r0, r3
 8009aa6:	3708      	adds	r7, #8
 8009aa8:	46bd      	mov	sp, r7
 8009aaa:	bd80      	pop	{r7, pc}
 8009aac:	20001a88 	.word	0x20001a88
 8009ab0:	40040000 	.word	0x40040000

08009ab4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009ab4:	b580      	push	{r7, lr}
 8009ab6:	b084      	sub	sp, #16
 8009ab8:	af00      	add	r7, sp, #0
 8009aba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009abc:	2300      	movs	r3, #0
 8009abe:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009ac0:	2300      	movs	r3, #0
 8009ac2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009aca:	4618      	mov	r0, r3
 8009acc:	f7f8 fb97 	bl	80021fe <HAL_PCD_Start>
 8009ad0:	4603      	mov	r3, r0
 8009ad2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009ad4:	7bfb      	ldrb	r3, [r7, #15]
 8009ad6:	4618      	mov	r0, r3
 8009ad8:	f000 f942 	bl	8009d60 <USBD_Get_USB_Status>
 8009adc:	4603      	mov	r3, r0
 8009ade:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009ae0:	7bbb      	ldrb	r3, [r7, #14]
}
 8009ae2:	4618      	mov	r0, r3
 8009ae4:	3710      	adds	r7, #16
 8009ae6:	46bd      	mov	sp, r7
 8009ae8:	bd80      	pop	{r7, pc}

08009aea <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8009aea:	b580      	push	{r7, lr}
 8009aec:	b084      	sub	sp, #16
 8009aee:	af00      	add	r7, sp, #0
 8009af0:	6078      	str	r0, [r7, #4]
 8009af2:	4608      	mov	r0, r1
 8009af4:	4611      	mov	r1, r2
 8009af6:	461a      	mov	r2, r3
 8009af8:	4603      	mov	r3, r0
 8009afa:	70fb      	strb	r3, [r7, #3]
 8009afc:	460b      	mov	r3, r1
 8009afe:	70bb      	strb	r3, [r7, #2]
 8009b00:	4613      	mov	r3, r2
 8009b02:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009b04:	2300      	movs	r3, #0
 8009b06:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009b08:	2300      	movs	r3, #0
 8009b0a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8009b12:	78bb      	ldrb	r3, [r7, #2]
 8009b14:	883a      	ldrh	r2, [r7, #0]
 8009b16:	78f9      	ldrb	r1, [r7, #3]
 8009b18:	f7f9 f868 	bl	8002bec <HAL_PCD_EP_Open>
 8009b1c:	4603      	mov	r3, r0
 8009b1e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009b20:	7bfb      	ldrb	r3, [r7, #15]
 8009b22:	4618      	mov	r0, r3
 8009b24:	f000 f91c 	bl	8009d60 <USBD_Get_USB_Status>
 8009b28:	4603      	mov	r3, r0
 8009b2a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009b2c:	7bbb      	ldrb	r3, [r7, #14]
}
 8009b2e:	4618      	mov	r0, r3
 8009b30:	3710      	adds	r7, #16
 8009b32:	46bd      	mov	sp, r7
 8009b34:	bd80      	pop	{r7, pc}

08009b36 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009b36:	b580      	push	{r7, lr}
 8009b38:	b084      	sub	sp, #16
 8009b3a:	af00      	add	r7, sp, #0
 8009b3c:	6078      	str	r0, [r7, #4]
 8009b3e:	460b      	mov	r3, r1
 8009b40:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009b42:	2300      	movs	r3, #0
 8009b44:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009b46:	2300      	movs	r3, #0
 8009b48:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009b50:	78fa      	ldrb	r2, [r7, #3]
 8009b52:	4611      	mov	r1, r2
 8009b54:	4618      	mov	r0, r3
 8009b56:	f7f9 f8b1 	bl	8002cbc <HAL_PCD_EP_Close>
 8009b5a:	4603      	mov	r3, r0
 8009b5c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009b5e:	7bfb      	ldrb	r3, [r7, #15]
 8009b60:	4618      	mov	r0, r3
 8009b62:	f000 f8fd 	bl	8009d60 <USBD_Get_USB_Status>
 8009b66:	4603      	mov	r3, r0
 8009b68:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009b6a:	7bbb      	ldrb	r3, [r7, #14]
}
 8009b6c:	4618      	mov	r0, r3
 8009b6e:	3710      	adds	r7, #16
 8009b70:	46bd      	mov	sp, r7
 8009b72:	bd80      	pop	{r7, pc}

08009b74 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009b74:	b580      	push	{r7, lr}
 8009b76:	b084      	sub	sp, #16
 8009b78:	af00      	add	r7, sp, #0
 8009b7a:	6078      	str	r0, [r7, #4]
 8009b7c:	460b      	mov	r3, r1
 8009b7e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009b80:	2300      	movs	r3, #0
 8009b82:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009b84:	2300      	movs	r3, #0
 8009b86:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009b8e:	78fa      	ldrb	r2, [r7, #3]
 8009b90:	4611      	mov	r1, r2
 8009b92:	4618      	mov	r0, r3
 8009b94:	f7f9 f989 	bl	8002eaa <HAL_PCD_EP_SetStall>
 8009b98:	4603      	mov	r3, r0
 8009b9a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009b9c:	7bfb      	ldrb	r3, [r7, #15]
 8009b9e:	4618      	mov	r0, r3
 8009ba0:	f000 f8de 	bl	8009d60 <USBD_Get_USB_Status>
 8009ba4:	4603      	mov	r3, r0
 8009ba6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009ba8:	7bbb      	ldrb	r3, [r7, #14]
}
 8009baa:	4618      	mov	r0, r3
 8009bac:	3710      	adds	r7, #16
 8009bae:	46bd      	mov	sp, r7
 8009bb0:	bd80      	pop	{r7, pc}

08009bb2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009bb2:	b580      	push	{r7, lr}
 8009bb4:	b084      	sub	sp, #16
 8009bb6:	af00      	add	r7, sp, #0
 8009bb8:	6078      	str	r0, [r7, #4]
 8009bba:	460b      	mov	r3, r1
 8009bbc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009bbe:	2300      	movs	r3, #0
 8009bc0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009bc2:	2300      	movs	r3, #0
 8009bc4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009bcc:	78fa      	ldrb	r2, [r7, #3]
 8009bce:	4611      	mov	r1, r2
 8009bd0:	4618      	mov	r0, r3
 8009bd2:	f7f9 f9ce 	bl	8002f72 <HAL_PCD_EP_ClrStall>
 8009bd6:	4603      	mov	r3, r0
 8009bd8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009bda:	7bfb      	ldrb	r3, [r7, #15]
 8009bdc:	4618      	mov	r0, r3
 8009bde:	f000 f8bf 	bl	8009d60 <USBD_Get_USB_Status>
 8009be2:	4603      	mov	r3, r0
 8009be4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009be6:	7bbb      	ldrb	r3, [r7, #14]
}
 8009be8:	4618      	mov	r0, r3
 8009bea:	3710      	adds	r7, #16
 8009bec:	46bd      	mov	sp, r7
 8009bee:	bd80      	pop	{r7, pc}

08009bf0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009bf0:	b480      	push	{r7}
 8009bf2:	b085      	sub	sp, #20
 8009bf4:	af00      	add	r7, sp, #0
 8009bf6:	6078      	str	r0, [r7, #4]
 8009bf8:	460b      	mov	r3, r1
 8009bfa:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009c02:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8009c04:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009c08:	2b00      	cmp	r3, #0
 8009c0a:	da0b      	bge.n	8009c24 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009c0c:	78fb      	ldrb	r3, [r7, #3]
 8009c0e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009c12:	68f9      	ldr	r1, [r7, #12]
 8009c14:	4613      	mov	r3, r2
 8009c16:	00db      	lsls	r3, r3, #3
 8009c18:	4413      	add	r3, r2
 8009c1a:	009b      	lsls	r3, r3, #2
 8009c1c:	440b      	add	r3, r1
 8009c1e:	333e      	adds	r3, #62	; 0x3e
 8009c20:	781b      	ldrb	r3, [r3, #0]
 8009c22:	e00b      	b.n	8009c3c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8009c24:	78fb      	ldrb	r3, [r7, #3]
 8009c26:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009c2a:	68f9      	ldr	r1, [r7, #12]
 8009c2c:	4613      	mov	r3, r2
 8009c2e:	00db      	lsls	r3, r3, #3
 8009c30:	4413      	add	r3, r2
 8009c32:	009b      	lsls	r3, r3, #2
 8009c34:	440b      	add	r3, r1
 8009c36:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8009c3a:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009c3c:	4618      	mov	r0, r3
 8009c3e:	3714      	adds	r7, #20
 8009c40:	46bd      	mov	sp, r7
 8009c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c46:	4770      	bx	lr

08009c48 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8009c48:	b580      	push	{r7, lr}
 8009c4a:	b084      	sub	sp, #16
 8009c4c:	af00      	add	r7, sp, #0
 8009c4e:	6078      	str	r0, [r7, #4]
 8009c50:	460b      	mov	r3, r1
 8009c52:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009c54:	2300      	movs	r3, #0
 8009c56:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009c58:	2300      	movs	r3, #0
 8009c5a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009c62:	78fa      	ldrb	r2, [r7, #3]
 8009c64:	4611      	mov	r1, r2
 8009c66:	4618      	mov	r0, r3
 8009c68:	f7f8 ff9b 	bl	8002ba2 <HAL_PCD_SetAddress>
 8009c6c:	4603      	mov	r3, r0
 8009c6e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009c70:	7bfb      	ldrb	r3, [r7, #15]
 8009c72:	4618      	mov	r0, r3
 8009c74:	f000 f874 	bl	8009d60 <USBD_Get_USB_Status>
 8009c78:	4603      	mov	r3, r0
 8009c7a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009c7c:	7bbb      	ldrb	r3, [r7, #14]
}
 8009c7e:	4618      	mov	r0, r3
 8009c80:	3710      	adds	r7, #16
 8009c82:	46bd      	mov	sp, r7
 8009c84:	bd80      	pop	{r7, pc}

08009c86 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009c86:	b580      	push	{r7, lr}
 8009c88:	b086      	sub	sp, #24
 8009c8a:	af00      	add	r7, sp, #0
 8009c8c:	60f8      	str	r0, [r7, #12]
 8009c8e:	607a      	str	r2, [r7, #4]
 8009c90:	603b      	str	r3, [r7, #0]
 8009c92:	460b      	mov	r3, r1
 8009c94:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009c96:	2300      	movs	r3, #0
 8009c98:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009c9a:	2300      	movs	r3, #0
 8009c9c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009c9e:	68fb      	ldr	r3, [r7, #12]
 8009ca0:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8009ca4:	7af9      	ldrb	r1, [r7, #11]
 8009ca6:	683b      	ldr	r3, [r7, #0]
 8009ca8:	687a      	ldr	r2, [r7, #4]
 8009caa:	f7f9 f8b4 	bl	8002e16 <HAL_PCD_EP_Transmit>
 8009cae:	4603      	mov	r3, r0
 8009cb0:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009cb2:	7dfb      	ldrb	r3, [r7, #23]
 8009cb4:	4618      	mov	r0, r3
 8009cb6:	f000 f853 	bl	8009d60 <USBD_Get_USB_Status>
 8009cba:	4603      	mov	r3, r0
 8009cbc:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009cbe:	7dbb      	ldrb	r3, [r7, #22]
}
 8009cc0:	4618      	mov	r0, r3
 8009cc2:	3718      	adds	r7, #24
 8009cc4:	46bd      	mov	sp, r7
 8009cc6:	bd80      	pop	{r7, pc}

08009cc8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009cc8:	b580      	push	{r7, lr}
 8009cca:	b086      	sub	sp, #24
 8009ccc:	af00      	add	r7, sp, #0
 8009cce:	60f8      	str	r0, [r7, #12]
 8009cd0:	607a      	str	r2, [r7, #4]
 8009cd2:	603b      	str	r3, [r7, #0]
 8009cd4:	460b      	mov	r3, r1
 8009cd6:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009cd8:	2300      	movs	r3, #0
 8009cda:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009cdc:	2300      	movs	r3, #0
 8009cde:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009ce0:	68fb      	ldr	r3, [r7, #12]
 8009ce2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8009ce6:	7af9      	ldrb	r1, [r7, #11]
 8009ce8:	683b      	ldr	r3, [r7, #0]
 8009cea:	687a      	ldr	r2, [r7, #4]
 8009cec:	f7f9 f830 	bl	8002d50 <HAL_PCD_EP_Receive>
 8009cf0:	4603      	mov	r3, r0
 8009cf2:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009cf4:	7dfb      	ldrb	r3, [r7, #23]
 8009cf6:	4618      	mov	r0, r3
 8009cf8:	f000 f832 	bl	8009d60 <USBD_Get_USB_Status>
 8009cfc:	4603      	mov	r3, r0
 8009cfe:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009d00:	7dbb      	ldrb	r3, [r7, #22]
}
 8009d02:	4618      	mov	r0, r3
 8009d04:	3718      	adds	r7, #24
 8009d06:	46bd      	mov	sp, r7
 8009d08:	bd80      	pop	{r7, pc}

08009d0a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009d0a:	b580      	push	{r7, lr}
 8009d0c:	b082      	sub	sp, #8
 8009d0e:	af00      	add	r7, sp, #0
 8009d10:	6078      	str	r0, [r7, #4]
 8009d12:	460b      	mov	r3, r1
 8009d14:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009d1c:	78fa      	ldrb	r2, [r7, #3]
 8009d1e:	4611      	mov	r1, r2
 8009d20:	4618      	mov	r0, r3
 8009d22:	f7f9 f860 	bl	8002de6 <HAL_PCD_EP_GetRxCount>
 8009d26:	4603      	mov	r3, r0
}
 8009d28:	4618      	mov	r0, r3
 8009d2a:	3708      	adds	r7, #8
 8009d2c:	46bd      	mov	sp, r7
 8009d2e:	bd80      	pop	{r7, pc}

08009d30 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8009d30:	b480      	push	{r7}
 8009d32:	b083      	sub	sp, #12
 8009d34:	af00      	add	r7, sp, #0
 8009d36:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8009d38:	4b03      	ldr	r3, [pc, #12]	; (8009d48 <USBD_static_malloc+0x18>)
}
 8009d3a:	4618      	mov	r0, r3
 8009d3c:	370c      	adds	r7, #12
 8009d3e:	46bd      	mov	sp, r7
 8009d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d44:	4770      	bx	lr
 8009d46:	bf00      	nop
 8009d48:	20001f94 	.word	0x20001f94

08009d4c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8009d4c:	b480      	push	{r7}
 8009d4e:	b083      	sub	sp, #12
 8009d50:	af00      	add	r7, sp, #0
 8009d52:	6078      	str	r0, [r7, #4]

}
 8009d54:	bf00      	nop
 8009d56:	370c      	adds	r7, #12
 8009d58:	46bd      	mov	sp, r7
 8009d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d5e:	4770      	bx	lr

08009d60 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009d60:	b480      	push	{r7}
 8009d62:	b085      	sub	sp, #20
 8009d64:	af00      	add	r7, sp, #0
 8009d66:	4603      	mov	r3, r0
 8009d68:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009d6a:	2300      	movs	r3, #0
 8009d6c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009d6e:	79fb      	ldrb	r3, [r7, #7]
 8009d70:	2b03      	cmp	r3, #3
 8009d72:	d817      	bhi.n	8009da4 <USBD_Get_USB_Status+0x44>
 8009d74:	a201      	add	r2, pc, #4	; (adr r2, 8009d7c <USBD_Get_USB_Status+0x1c>)
 8009d76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d7a:	bf00      	nop
 8009d7c:	08009d8d 	.word	0x08009d8d
 8009d80:	08009d93 	.word	0x08009d93
 8009d84:	08009d99 	.word	0x08009d99
 8009d88:	08009d9f 	.word	0x08009d9f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009d8c:	2300      	movs	r3, #0
 8009d8e:	73fb      	strb	r3, [r7, #15]
    break;
 8009d90:	e00b      	b.n	8009daa <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009d92:	2303      	movs	r3, #3
 8009d94:	73fb      	strb	r3, [r7, #15]
    break;
 8009d96:	e008      	b.n	8009daa <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009d98:	2301      	movs	r3, #1
 8009d9a:	73fb      	strb	r3, [r7, #15]
    break;
 8009d9c:	e005      	b.n	8009daa <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009d9e:	2303      	movs	r3, #3
 8009da0:	73fb      	strb	r3, [r7, #15]
    break;
 8009da2:	e002      	b.n	8009daa <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009da4:	2303      	movs	r3, #3
 8009da6:	73fb      	strb	r3, [r7, #15]
    break;
 8009da8:	bf00      	nop
  }
  return usb_status;
 8009daa:	7bfb      	ldrb	r3, [r7, #15]
}
 8009dac:	4618      	mov	r0, r3
 8009dae:	3714      	adds	r7, #20
 8009db0:	46bd      	mov	sp, r7
 8009db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009db6:	4770      	bx	lr

08009db8 <__errno>:
 8009db8:	4b01      	ldr	r3, [pc, #4]	; (8009dc0 <__errno+0x8>)
 8009dba:	6818      	ldr	r0, [r3, #0]
 8009dbc:	4770      	bx	lr
 8009dbe:	bf00      	nop
 8009dc0:	20000104 	.word	0x20000104

08009dc4 <__libc_init_array>:
 8009dc4:	b570      	push	{r4, r5, r6, lr}
 8009dc6:	4d0d      	ldr	r5, [pc, #52]	; (8009dfc <__libc_init_array+0x38>)
 8009dc8:	4c0d      	ldr	r4, [pc, #52]	; (8009e00 <__libc_init_array+0x3c>)
 8009dca:	1b64      	subs	r4, r4, r5
 8009dcc:	10a4      	asrs	r4, r4, #2
 8009dce:	2600      	movs	r6, #0
 8009dd0:	42a6      	cmp	r6, r4
 8009dd2:	d109      	bne.n	8009de8 <__libc_init_array+0x24>
 8009dd4:	4d0b      	ldr	r5, [pc, #44]	; (8009e04 <__libc_init_array+0x40>)
 8009dd6:	4c0c      	ldr	r4, [pc, #48]	; (8009e08 <__libc_init_array+0x44>)
 8009dd8:	f000 fc74 	bl	800a6c4 <_init>
 8009ddc:	1b64      	subs	r4, r4, r5
 8009dde:	10a4      	asrs	r4, r4, #2
 8009de0:	2600      	movs	r6, #0
 8009de2:	42a6      	cmp	r6, r4
 8009de4:	d105      	bne.n	8009df2 <__libc_init_array+0x2e>
 8009de6:	bd70      	pop	{r4, r5, r6, pc}
 8009de8:	f855 3b04 	ldr.w	r3, [r5], #4
 8009dec:	4798      	blx	r3
 8009dee:	3601      	adds	r6, #1
 8009df0:	e7ee      	b.n	8009dd0 <__libc_init_array+0xc>
 8009df2:	f855 3b04 	ldr.w	r3, [r5], #4
 8009df6:	4798      	blx	r3
 8009df8:	3601      	adds	r6, #1
 8009dfa:	e7f2      	b.n	8009de2 <__libc_init_array+0x1e>
 8009dfc:	0800a7dc 	.word	0x0800a7dc
 8009e00:	0800a7dc 	.word	0x0800a7dc
 8009e04:	0800a7dc 	.word	0x0800a7dc
 8009e08:	0800a7e0 	.word	0x0800a7e0

08009e0c <memcpy>:
 8009e0c:	440a      	add	r2, r1
 8009e0e:	4291      	cmp	r1, r2
 8009e10:	f100 33ff 	add.w	r3, r0, #4294967295
 8009e14:	d100      	bne.n	8009e18 <memcpy+0xc>
 8009e16:	4770      	bx	lr
 8009e18:	b510      	push	{r4, lr}
 8009e1a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009e1e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009e22:	4291      	cmp	r1, r2
 8009e24:	d1f9      	bne.n	8009e1a <memcpy+0xe>
 8009e26:	bd10      	pop	{r4, pc}

08009e28 <memset>:
 8009e28:	4402      	add	r2, r0
 8009e2a:	4603      	mov	r3, r0
 8009e2c:	4293      	cmp	r3, r2
 8009e2e:	d100      	bne.n	8009e32 <memset+0xa>
 8009e30:	4770      	bx	lr
 8009e32:	f803 1b01 	strb.w	r1, [r3], #1
 8009e36:	e7f9      	b.n	8009e2c <memset+0x4>

08009e38 <setvbuf>:
 8009e38:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009e3c:	461d      	mov	r5, r3
 8009e3e:	4b5d      	ldr	r3, [pc, #372]	; (8009fb4 <setvbuf+0x17c>)
 8009e40:	681f      	ldr	r7, [r3, #0]
 8009e42:	4604      	mov	r4, r0
 8009e44:	460e      	mov	r6, r1
 8009e46:	4690      	mov	r8, r2
 8009e48:	b127      	cbz	r7, 8009e54 <setvbuf+0x1c>
 8009e4a:	69bb      	ldr	r3, [r7, #24]
 8009e4c:	b913      	cbnz	r3, 8009e54 <setvbuf+0x1c>
 8009e4e:	4638      	mov	r0, r7
 8009e50:	f000 f9d2 	bl	800a1f8 <__sinit>
 8009e54:	4b58      	ldr	r3, [pc, #352]	; (8009fb8 <setvbuf+0x180>)
 8009e56:	429c      	cmp	r4, r3
 8009e58:	d167      	bne.n	8009f2a <setvbuf+0xf2>
 8009e5a:	687c      	ldr	r4, [r7, #4]
 8009e5c:	f1b8 0f02 	cmp.w	r8, #2
 8009e60:	d006      	beq.n	8009e70 <setvbuf+0x38>
 8009e62:	f1b8 0f01 	cmp.w	r8, #1
 8009e66:	f200 809f 	bhi.w	8009fa8 <setvbuf+0x170>
 8009e6a:	2d00      	cmp	r5, #0
 8009e6c:	f2c0 809c 	blt.w	8009fa8 <setvbuf+0x170>
 8009e70:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009e72:	07db      	lsls	r3, r3, #31
 8009e74:	d405      	bmi.n	8009e82 <setvbuf+0x4a>
 8009e76:	89a3      	ldrh	r3, [r4, #12]
 8009e78:	0598      	lsls	r0, r3, #22
 8009e7a:	d402      	bmi.n	8009e82 <setvbuf+0x4a>
 8009e7c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009e7e:	f000 fa59 	bl	800a334 <__retarget_lock_acquire_recursive>
 8009e82:	4621      	mov	r1, r4
 8009e84:	4638      	mov	r0, r7
 8009e86:	f000 f923 	bl	800a0d0 <_fflush_r>
 8009e8a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009e8c:	b141      	cbz	r1, 8009ea0 <setvbuf+0x68>
 8009e8e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009e92:	4299      	cmp	r1, r3
 8009e94:	d002      	beq.n	8009e9c <setvbuf+0x64>
 8009e96:	4638      	mov	r0, r7
 8009e98:	f000 fa7c 	bl	800a394 <_free_r>
 8009e9c:	2300      	movs	r3, #0
 8009e9e:	6363      	str	r3, [r4, #52]	; 0x34
 8009ea0:	2300      	movs	r3, #0
 8009ea2:	61a3      	str	r3, [r4, #24]
 8009ea4:	6063      	str	r3, [r4, #4]
 8009ea6:	89a3      	ldrh	r3, [r4, #12]
 8009ea8:	0619      	lsls	r1, r3, #24
 8009eaa:	d503      	bpl.n	8009eb4 <setvbuf+0x7c>
 8009eac:	6921      	ldr	r1, [r4, #16]
 8009eae:	4638      	mov	r0, r7
 8009eb0:	f000 fa70 	bl	800a394 <_free_r>
 8009eb4:	89a3      	ldrh	r3, [r4, #12]
 8009eb6:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 8009eba:	f023 0303 	bic.w	r3, r3, #3
 8009ebe:	f1b8 0f02 	cmp.w	r8, #2
 8009ec2:	81a3      	strh	r3, [r4, #12]
 8009ec4:	d06c      	beq.n	8009fa0 <setvbuf+0x168>
 8009ec6:	ab01      	add	r3, sp, #4
 8009ec8:	466a      	mov	r2, sp
 8009eca:	4621      	mov	r1, r4
 8009ecc:	4638      	mov	r0, r7
 8009ece:	f000 fa33 	bl	800a338 <__swhatbuf_r>
 8009ed2:	89a3      	ldrh	r3, [r4, #12]
 8009ed4:	4318      	orrs	r0, r3
 8009ed6:	81a0      	strh	r0, [r4, #12]
 8009ed8:	2d00      	cmp	r5, #0
 8009eda:	d130      	bne.n	8009f3e <setvbuf+0x106>
 8009edc:	9d00      	ldr	r5, [sp, #0]
 8009ede:	4628      	mov	r0, r5
 8009ee0:	f000 fa50 	bl	800a384 <malloc>
 8009ee4:	4606      	mov	r6, r0
 8009ee6:	2800      	cmp	r0, #0
 8009ee8:	d155      	bne.n	8009f96 <setvbuf+0x15e>
 8009eea:	f8dd 9000 	ldr.w	r9, [sp]
 8009eee:	45a9      	cmp	r9, r5
 8009ef0:	d14a      	bne.n	8009f88 <setvbuf+0x150>
 8009ef2:	f04f 35ff 	mov.w	r5, #4294967295
 8009ef6:	2200      	movs	r2, #0
 8009ef8:	60a2      	str	r2, [r4, #8]
 8009efa:	f104 0247 	add.w	r2, r4, #71	; 0x47
 8009efe:	6022      	str	r2, [r4, #0]
 8009f00:	6122      	str	r2, [r4, #16]
 8009f02:	2201      	movs	r2, #1
 8009f04:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009f08:	6162      	str	r2, [r4, #20]
 8009f0a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009f0c:	f043 0302 	orr.w	r3, r3, #2
 8009f10:	07d2      	lsls	r2, r2, #31
 8009f12:	81a3      	strh	r3, [r4, #12]
 8009f14:	d405      	bmi.n	8009f22 <setvbuf+0xea>
 8009f16:	f413 7f00 	tst.w	r3, #512	; 0x200
 8009f1a:	d102      	bne.n	8009f22 <setvbuf+0xea>
 8009f1c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009f1e:	f000 fa0a 	bl	800a336 <__retarget_lock_release_recursive>
 8009f22:	4628      	mov	r0, r5
 8009f24:	b003      	add	sp, #12
 8009f26:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009f2a:	4b24      	ldr	r3, [pc, #144]	; (8009fbc <setvbuf+0x184>)
 8009f2c:	429c      	cmp	r4, r3
 8009f2e:	d101      	bne.n	8009f34 <setvbuf+0xfc>
 8009f30:	68bc      	ldr	r4, [r7, #8]
 8009f32:	e793      	b.n	8009e5c <setvbuf+0x24>
 8009f34:	4b22      	ldr	r3, [pc, #136]	; (8009fc0 <setvbuf+0x188>)
 8009f36:	429c      	cmp	r4, r3
 8009f38:	bf08      	it	eq
 8009f3a:	68fc      	ldreq	r4, [r7, #12]
 8009f3c:	e78e      	b.n	8009e5c <setvbuf+0x24>
 8009f3e:	2e00      	cmp	r6, #0
 8009f40:	d0cd      	beq.n	8009ede <setvbuf+0xa6>
 8009f42:	69bb      	ldr	r3, [r7, #24]
 8009f44:	b913      	cbnz	r3, 8009f4c <setvbuf+0x114>
 8009f46:	4638      	mov	r0, r7
 8009f48:	f000 f956 	bl	800a1f8 <__sinit>
 8009f4c:	f1b8 0f01 	cmp.w	r8, #1
 8009f50:	bf08      	it	eq
 8009f52:	89a3      	ldrheq	r3, [r4, #12]
 8009f54:	6026      	str	r6, [r4, #0]
 8009f56:	bf04      	itt	eq
 8009f58:	f043 0301 	orreq.w	r3, r3, #1
 8009f5c:	81a3      	strheq	r3, [r4, #12]
 8009f5e:	89a2      	ldrh	r2, [r4, #12]
 8009f60:	f012 0308 	ands.w	r3, r2, #8
 8009f64:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8009f68:	d01c      	beq.n	8009fa4 <setvbuf+0x16c>
 8009f6a:	07d3      	lsls	r3, r2, #31
 8009f6c:	bf41      	itttt	mi
 8009f6e:	2300      	movmi	r3, #0
 8009f70:	426d      	negmi	r5, r5
 8009f72:	60a3      	strmi	r3, [r4, #8]
 8009f74:	61a5      	strmi	r5, [r4, #24]
 8009f76:	bf58      	it	pl
 8009f78:	60a5      	strpl	r5, [r4, #8]
 8009f7a:	6e65      	ldr	r5, [r4, #100]	; 0x64
 8009f7c:	f015 0501 	ands.w	r5, r5, #1
 8009f80:	d115      	bne.n	8009fae <setvbuf+0x176>
 8009f82:	f412 7f00 	tst.w	r2, #512	; 0x200
 8009f86:	e7c8      	b.n	8009f1a <setvbuf+0xe2>
 8009f88:	4648      	mov	r0, r9
 8009f8a:	f000 f9fb 	bl	800a384 <malloc>
 8009f8e:	4606      	mov	r6, r0
 8009f90:	2800      	cmp	r0, #0
 8009f92:	d0ae      	beq.n	8009ef2 <setvbuf+0xba>
 8009f94:	464d      	mov	r5, r9
 8009f96:	89a3      	ldrh	r3, [r4, #12]
 8009f98:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009f9c:	81a3      	strh	r3, [r4, #12]
 8009f9e:	e7d0      	b.n	8009f42 <setvbuf+0x10a>
 8009fa0:	2500      	movs	r5, #0
 8009fa2:	e7a8      	b.n	8009ef6 <setvbuf+0xbe>
 8009fa4:	60a3      	str	r3, [r4, #8]
 8009fa6:	e7e8      	b.n	8009f7a <setvbuf+0x142>
 8009fa8:	f04f 35ff 	mov.w	r5, #4294967295
 8009fac:	e7b9      	b.n	8009f22 <setvbuf+0xea>
 8009fae:	2500      	movs	r5, #0
 8009fb0:	e7b7      	b.n	8009f22 <setvbuf+0xea>
 8009fb2:	bf00      	nop
 8009fb4:	20000104 	.word	0x20000104
 8009fb8:	0800a794 	.word	0x0800a794
 8009fbc:	0800a7b4 	.word	0x0800a7b4
 8009fc0:	0800a774 	.word	0x0800a774

08009fc4 <__sflush_r>:
 8009fc4:	898a      	ldrh	r2, [r1, #12]
 8009fc6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009fca:	4605      	mov	r5, r0
 8009fcc:	0710      	lsls	r0, r2, #28
 8009fce:	460c      	mov	r4, r1
 8009fd0:	d458      	bmi.n	800a084 <__sflush_r+0xc0>
 8009fd2:	684b      	ldr	r3, [r1, #4]
 8009fd4:	2b00      	cmp	r3, #0
 8009fd6:	dc05      	bgt.n	8009fe4 <__sflush_r+0x20>
 8009fd8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009fda:	2b00      	cmp	r3, #0
 8009fdc:	dc02      	bgt.n	8009fe4 <__sflush_r+0x20>
 8009fde:	2000      	movs	r0, #0
 8009fe0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009fe4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009fe6:	2e00      	cmp	r6, #0
 8009fe8:	d0f9      	beq.n	8009fde <__sflush_r+0x1a>
 8009fea:	2300      	movs	r3, #0
 8009fec:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009ff0:	682f      	ldr	r7, [r5, #0]
 8009ff2:	602b      	str	r3, [r5, #0]
 8009ff4:	d032      	beq.n	800a05c <__sflush_r+0x98>
 8009ff6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009ff8:	89a3      	ldrh	r3, [r4, #12]
 8009ffa:	075a      	lsls	r2, r3, #29
 8009ffc:	d505      	bpl.n	800a00a <__sflush_r+0x46>
 8009ffe:	6863      	ldr	r3, [r4, #4]
 800a000:	1ac0      	subs	r0, r0, r3
 800a002:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a004:	b10b      	cbz	r3, 800a00a <__sflush_r+0x46>
 800a006:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a008:	1ac0      	subs	r0, r0, r3
 800a00a:	2300      	movs	r3, #0
 800a00c:	4602      	mov	r2, r0
 800a00e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a010:	6a21      	ldr	r1, [r4, #32]
 800a012:	4628      	mov	r0, r5
 800a014:	47b0      	blx	r6
 800a016:	1c43      	adds	r3, r0, #1
 800a018:	89a3      	ldrh	r3, [r4, #12]
 800a01a:	d106      	bne.n	800a02a <__sflush_r+0x66>
 800a01c:	6829      	ldr	r1, [r5, #0]
 800a01e:	291d      	cmp	r1, #29
 800a020:	d82c      	bhi.n	800a07c <__sflush_r+0xb8>
 800a022:	4a2a      	ldr	r2, [pc, #168]	; (800a0cc <__sflush_r+0x108>)
 800a024:	40ca      	lsrs	r2, r1
 800a026:	07d6      	lsls	r6, r2, #31
 800a028:	d528      	bpl.n	800a07c <__sflush_r+0xb8>
 800a02a:	2200      	movs	r2, #0
 800a02c:	6062      	str	r2, [r4, #4]
 800a02e:	04d9      	lsls	r1, r3, #19
 800a030:	6922      	ldr	r2, [r4, #16]
 800a032:	6022      	str	r2, [r4, #0]
 800a034:	d504      	bpl.n	800a040 <__sflush_r+0x7c>
 800a036:	1c42      	adds	r2, r0, #1
 800a038:	d101      	bne.n	800a03e <__sflush_r+0x7a>
 800a03a:	682b      	ldr	r3, [r5, #0]
 800a03c:	b903      	cbnz	r3, 800a040 <__sflush_r+0x7c>
 800a03e:	6560      	str	r0, [r4, #84]	; 0x54
 800a040:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a042:	602f      	str	r7, [r5, #0]
 800a044:	2900      	cmp	r1, #0
 800a046:	d0ca      	beq.n	8009fde <__sflush_r+0x1a>
 800a048:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a04c:	4299      	cmp	r1, r3
 800a04e:	d002      	beq.n	800a056 <__sflush_r+0x92>
 800a050:	4628      	mov	r0, r5
 800a052:	f000 f99f 	bl	800a394 <_free_r>
 800a056:	2000      	movs	r0, #0
 800a058:	6360      	str	r0, [r4, #52]	; 0x34
 800a05a:	e7c1      	b.n	8009fe0 <__sflush_r+0x1c>
 800a05c:	6a21      	ldr	r1, [r4, #32]
 800a05e:	2301      	movs	r3, #1
 800a060:	4628      	mov	r0, r5
 800a062:	47b0      	blx	r6
 800a064:	1c41      	adds	r1, r0, #1
 800a066:	d1c7      	bne.n	8009ff8 <__sflush_r+0x34>
 800a068:	682b      	ldr	r3, [r5, #0]
 800a06a:	2b00      	cmp	r3, #0
 800a06c:	d0c4      	beq.n	8009ff8 <__sflush_r+0x34>
 800a06e:	2b1d      	cmp	r3, #29
 800a070:	d001      	beq.n	800a076 <__sflush_r+0xb2>
 800a072:	2b16      	cmp	r3, #22
 800a074:	d101      	bne.n	800a07a <__sflush_r+0xb6>
 800a076:	602f      	str	r7, [r5, #0]
 800a078:	e7b1      	b.n	8009fde <__sflush_r+0x1a>
 800a07a:	89a3      	ldrh	r3, [r4, #12]
 800a07c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a080:	81a3      	strh	r3, [r4, #12]
 800a082:	e7ad      	b.n	8009fe0 <__sflush_r+0x1c>
 800a084:	690f      	ldr	r7, [r1, #16]
 800a086:	2f00      	cmp	r7, #0
 800a088:	d0a9      	beq.n	8009fde <__sflush_r+0x1a>
 800a08a:	0793      	lsls	r3, r2, #30
 800a08c:	680e      	ldr	r6, [r1, #0]
 800a08e:	bf08      	it	eq
 800a090:	694b      	ldreq	r3, [r1, #20]
 800a092:	600f      	str	r7, [r1, #0]
 800a094:	bf18      	it	ne
 800a096:	2300      	movne	r3, #0
 800a098:	eba6 0807 	sub.w	r8, r6, r7
 800a09c:	608b      	str	r3, [r1, #8]
 800a09e:	f1b8 0f00 	cmp.w	r8, #0
 800a0a2:	dd9c      	ble.n	8009fde <__sflush_r+0x1a>
 800a0a4:	6a21      	ldr	r1, [r4, #32]
 800a0a6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a0a8:	4643      	mov	r3, r8
 800a0aa:	463a      	mov	r2, r7
 800a0ac:	4628      	mov	r0, r5
 800a0ae:	47b0      	blx	r6
 800a0b0:	2800      	cmp	r0, #0
 800a0b2:	dc06      	bgt.n	800a0c2 <__sflush_r+0xfe>
 800a0b4:	89a3      	ldrh	r3, [r4, #12]
 800a0b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a0ba:	81a3      	strh	r3, [r4, #12]
 800a0bc:	f04f 30ff 	mov.w	r0, #4294967295
 800a0c0:	e78e      	b.n	8009fe0 <__sflush_r+0x1c>
 800a0c2:	4407      	add	r7, r0
 800a0c4:	eba8 0800 	sub.w	r8, r8, r0
 800a0c8:	e7e9      	b.n	800a09e <__sflush_r+0xda>
 800a0ca:	bf00      	nop
 800a0cc:	20400001 	.word	0x20400001

0800a0d0 <_fflush_r>:
 800a0d0:	b538      	push	{r3, r4, r5, lr}
 800a0d2:	690b      	ldr	r3, [r1, #16]
 800a0d4:	4605      	mov	r5, r0
 800a0d6:	460c      	mov	r4, r1
 800a0d8:	b913      	cbnz	r3, 800a0e0 <_fflush_r+0x10>
 800a0da:	2500      	movs	r5, #0
 800a0dc:	4628      	mov	r0, r5
 800a0de:	bd38      	pop	{r3, r4, r5, pc}
 800a0e0:	b118      	cbz	r0, 800a0ea <_fflush_r+0x1a>
 800a0e2:	6983      	ldr	r3, [r0, #24]
 800a0e4:	b90b      	cbnz	r3, 800a0ea <_fflush_r+0x1a>
 800a0e6:	f000 f887 	bl	800a1f8 <__sinit>
 800a0ea:	4b14      	ldr	r3, [pc, #80]	; (800a13c <_fflush_r+0x6c>)
 800a0ec:	429c      	cmp	r4, r3
 800a0ee:	d11b      	bne.n	800a128 <_fflush_r+0x58>
 800a0f0:	686c      	ldr	r4, [r5, #4]
 800a0f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a0f6:	2b00      	cmp	r3, #0
 800a0f8:	d0ef      	beq.n	800a0da <_fflush_r+0xa>
 800a0fa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a0fc:	07d0      	lsls	r0, r2, #31
 800a0fe:	d404      	bmi.n	800a10a <_fflush_r+0x3a>
 800a100:	0599      	lsls	r1, r3, #22
 800a102:	d402      	bmi.n	800a10a <_fflush_r+0x3a>
 800a104:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a106:	f000 f915 	bl	800a334 <__retarget_lock_acquire_recursive>
 800a10a:	4628      	mov	r0, r5
 800a10c:	4621      	mov	r1, r4
 800a10e:	f7ff ff59 	bl	8009fc4 <__sflush_r>
 800a112:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a114:	07da      	lsls	r2, r3, #31
 800a116:	4605      	mov	r5, r0
 800a118:	d4e0      	bmi.n	800a0dc <_fflush_r+0xc>
 800a11a:	89a3      	ldrh	r3, [r4, #12]
 800a11c:	059b      	lsls	r3, r3, #22
 800a11e:	d4dd      	bmi.n	800a0dc <_fflush_r+0xc>
 800a120:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a122:	f000 f908 	bl	800a336 <__retarget_lock_release_recursive>
 800a126:	e7d9      	b.n	800a0dc <_fflush_r+0xc>
 800a128:	4b05      	ldr	r3, [pc, #20]	; (800a140 <_fflush_r+0x70>)
 800a12a:	429c      	cmp	r4, r3
 800a12c:	d101      	bne.n	800a132 <_fflush_r+0x62>
 800a12e:	68ac      	ldr	r4, [r5, #8]
 800a130:	e7df      	b.n	800a0f2 <_fflush_r+0x22>
 800a132:	4b04      	ldr	r3, [pc, #16]	; (800a144 <_fflush_r+0x74>)
 800a134:	429c      	cmp	r4, r3
 800a136:	bf08      	it	eq
 800a138:	68ec      	ldreq	r4, [r5, #12]
 800a13a:	e7da      	b.n	800a0f2 <_fflush_r+0x22>
 800a13c:	0800a794 	.word	0x0800a794
 800a140:	0800a7b4 	.word	0x0800a7b4
 800a144:	0800a774 	.word	0x0800a774

0800a148 <std>:
 800a148:	2300      	movs	r3, #0
 800a14a:	b510      	push	{r4, lr}
 800a14c:	4604      	mov	r4, r0
 800a14e:	e9c0 3300 	strd	r3, r3, [r0]
 800a152:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a156:	6083      	str	r3, [r0, #8]
 800a158:	8181      	strh	r1, [r0, #12]
 800a15a:	6643      	str	r3, [r0, #100]	; 0x64
 800a15c:	81c2      	strh	r2, [r0, #14]
 800a15e:	6183      	str	r3, [r0, #24]
 800a160:	4619      	mov	r1, r3
 800a162:	2208      	movs	r2, #8
 800a164:	305c      	adds	r0, #92	; 0x5c
 800a166:	f7ff fe5f 	bl	8009e28 <memset>
 800a16a:	4b05      	ldr	r3, [pc, #20]	; (800a180 <std+0x38>)
 800a16c:	6263      	str	r3, [r4, #36]	; 0x24
 800a16e:	4b05      	ldr	r3, [pc, #20]	; (800a184 <std+0x3c>)
 800a170:	62a3      	str	r3, [r4, #40]	; 0x28
 800a172:	4b05      	ldr	r3, [pc, #20]	; (800a188 <std+0x40>)
 800a174:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a176:	4b05      	ldr	r3, [pc, #20]	; (800a18c <std+0x44>)
 800a178:	6224      	str	r4, [r4, #32]
 800a17a:	6323      	str	r3, [r4, #48]	; 0x30
 800a17c:	bd10      	pop	{r4, pc}
 800a17e:	bf00      	nop
 800a180:	0800a575 	.word	0x0800a575
 800a184:	0800a597 	.word	0x0800a597
 800a188:	0800a5cf 	.word	0x0800a5cf
 800a18c:	0800a5f3 	.word	0x0800a5f3

0800a190 <_cleanup_r>:
 800a190:	4901      	ldr	r1, [pc, #4]	; (800a198 <_cleanup_r+0x8>)
 800a192:	f000 b8af 	b.w	800a2f4 <_fwalk_reent>
 800a196:	bf00      	nop
 800a198:	0800a0d1 	.word	0x0800a0d1

0800a19c <__sfmoreglue>:
 800a19c:	b570      	push	{r4, r5, r6, lr}
 800a19e:	2268      	movs	r2, #104	; 0x68
 800a1a0:	1e4d      	subs	r5, r1, #1
 800a1a2:	4355      	muls	r5, r2
 800a1a4:	460e      	mov	r6, r1
 800a1a6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800a1aa:	f000 f95f 	bl	800a46c <_malloc_r>
 800a1ae:	4604      	mov	r4, r0
 800a1b0:	b140      	cbz	r0, 800a1c4 <__sfmoreglue+0x28>
 800a1b2:	2100      	movs	r1, #0
 800a1b4:	e9c0 1600 	strd	r1, r6, [r0]
 800a1b8:	300c      	adds	r0, #12
 800a1ba:	60a0      	str	r0, [r4, #8]
 800a1bc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800a1c0:	f7ff fe32 	bl	8009e28 <memset>
 800a1c4:	4620      	mov	r0, r4
 800a1c6:	bd70      	pop	{r4, r5, r6, pc}

0800a1c8 <__sfp_lock_acquire>:
 800a1c8:	4801      	ldr	r0, [pc, #4]	; (800a1d0 <__sfp_lock_acquire+0x8>)
 800a1ca:	f000 b8b3 	b.w	800a334 <__retarget_lock_acquire_recursive>
 800a1ce:	bf00      	nop
 800a1d0:	200021b5 	.word	0x200021b5

0800a1d4 <__sfp_lock_release>:
 800a1d4:	4801      	ldr	r0, [pc, #4]	; (800a1dc <__sfp_lock_release+0x8>)
 800a1d6:	f000 b8ae 	b.w	800a336 <__retarget_lock_release_recursive>
 800a1da:	bf00      	nop
 800a1dc:	200021b5 	.word	0x200021b5

0800a1e0 <__sinit_lock_acquire>:
 800a1e0:	4801      	ldr	r0, [pc, #4]	; (800a1e8 <__sinit_lock_acquire+0x8>)
 800a1e2:	f000 b8a7 	b.w	800a334 <__retarget_lock_acquire_recursive>
 800a1e6:	bf00      	nop
 800a1e8:	200021b6 	.word	0x200021b6

0800a1ec <__sinit_lock_release>:
 800a1ec:	4801      	ldr	r0, [pc, #4]	; (800a1f4 <__sinit_lock_release+0x8>)
 800a1ee:	f000 b8a2 	b.w	800a336 <__retarget_lock_release_recursive>
 800a1f2:	bf00      	nop
 800a1f4:	200021b6 	.word	0x200021b6

0800a1f8 <__sinit>:
 800a1f8:	b510      	push	{r4, lr}
 800a1fa:	4604      	mov	r4, r0
 800a1fc:	f7ff fff0 	bl	800a1e0 <__sinit_lock_acquire>
 800a200:	69a3      	ldr	r3, [r4, #24]
 800a202:	b11b      	cbz	r3, 800a20c <__sinit+0x14>
 800a204:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a208:	f7ff bff0 	b.w	800a1ec <__sinit_lock_release>
 800a20c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800a210:	6523      	str	r3, [r4, #80]	; 0x50
 800a212:	4b13      	ldr	r3, [pc, #76]	; (800a260 <__sinit+0x68>)
 800a214:	4a13      	ldr	r2, [pc, #76]	; (800a264 <__sinit+0x6c>)
 800a216:	681b      	ldr	r3, [r3, #0]
 800a218:	62a2      	str	r2, [r4, #40]	; 0x28
 800a21a:	42a3      	cmp	r3, r4
 800a21c:	bf04      	itt	eq
 800a21e:	2301      	moveq	r3, #1
 800a220:	61a3      	streq	r3, [r4, #24]
 800a222:	4620      	mov	r0, r4
 800a224:	f000 f820 	bl	800a268 <__sfp>
 800a228:	6060      	str	r0, [r4, #4]
 800a22a:	4620      	mov	r0, r4
 800a22c:	f000 f81c 	bl	800a268 <__sfp>
 800a230:	60a0      	str	r0, [r4, #8]
 800a232:	4620      	mov	r0, r4
 800a234:	f000 f818 	bl	800a268 <__sfp>
 800a238:	2200      	movs	r2, #0
 800a23a:	60e0      	str	r0, [r4, #12]
 800a23c:	2104      	movs	r1, #4
 800a23e:	6860      	ldr	r0, [r4, #4]
 800a240:	f7ff ff82 	bl	800a148 <std>
 800a244:	68a0      	ldr	r0, [r4, #8]
 800a246:	2201      	movs	r2, #1
 800a248:	2109      	movs	r1, #9
 800a24a:	f7ff ff7d 	bl	800a148 <std>
 800a24e:	68e0      	ldr	r0, [r4, #12]
 800a250:	2202      	movs	r2, #2
 800a252:	2112      	movs	r1, #18
 800a254:	f7ff ff78 	bl	800a148 <std>
 800a258:	2301      	movs	r3, #1
 800a25a:	61a3      	str	r3, [r4, #24]
 800a25c:	e7d2      	b.n	800a204 <__sinit+0xc>
 800a25e:	bf00      	nop
 800a260:	0800a770 	.word	0x0800a770
 800a264:	0800a191 	.word	0x0800a191

0800a268 <__sfp>:
 800a268:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a26a:	4607      	mov	r7, r0
 800a26c:	f7ff ffac 	bl	800a1c8 <__sfp_lock_acquire>
 800a270:	4b1e      	ldr	r3, [pc, #120]	; (800a2ec <__sfp+0x84>)
 800a272:	681e      	ldr	r6, [r3, #0]
 800a274:	69b3      	ldr	r3, [r6, #24]
 800a276:	b913      	cbnz	r3, 800a27e <__sfp+0x16>
 800a278:	4630      	mov	r0, r6
 800a27a:	f7ff ffbd 	bl	800a1f8 <__sinit>
 800a27e:	3648      	adds	r6, #72	; 0x48
 800a280:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800a284:	3b01      	subs	r3, #1
 800a286:	d503      	bpl.n	800a290 <__sfp+0x28>
 800a288:	6833      	ldr	r3, [r6, #0]
 800a28a:	b30b      	cbz	r3, 800a2d0 <__sfp+0x68>
 800a28c:	6836      	ldr	r6, [r6, #0]
 800a28e:	e7f7      	b.n	800a280 <__sfp+0x18>
 800a290:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800a294:	b9d5      	cbnz	r5, 800a2cc <__sfp+0x64>
 800a296:	4b16      	ldr	r3, [pc, #88]	; (800a2f0 <__sfp+0x88>)
 800a298:	60e3      	str	r3, [r4, #12]
 800a29a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a29e:	6665      	str	r5, [r4, #100]	; 0x64
 800a2a0:	f000 f847 	bl	800a332 <__retarget_lock_init_recursive>
 800a2a4:	f7ff ff96 	bl	800a1d4 <__sfp_lock_release>
 800a2a8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800a2ac:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800a2b0:	6025      	str	r5, [r4, #0]
 800a2b2:	61a5      	str	r5, [r4, #24]
 800a2b4:	2208      	movs	r2, #8
 800a2b6:	4629      	mov	r1, r5
 800a2b8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a2bc:	f7ff fdb4 	bl	8009e28 <memset>
 800a2c0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a2c4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a2c8:	4620      	mov	r0, r4
 800a2ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a2cc:	3468      	adds	r4, #104	; 0x68
 800a2ce:	e7d9      	b.n	800a284 <__sfp+0x1c>
 800a2d0:	2104      	movs	r1, #4
 800a2d2:	4638      	mov	r0, r7
 800a2d4:	f7ff ff62 	bl	800a19c <__sfmoreglue>
 800a2d8:	4604      	mov	r4, r0
 800a2da:	6030      	str	r0, [r6, #0]
 800a2dc:	2800      	cmp	r0, #0
 800a2de:	d1d5      	bne.n	800a28c <__sfp+0x24>
 800a2e0:	f7ff ff78 	bl	800a1d4 <__sfp_lock_release>
 800a2e4:	230c      	movs	r3, #12
 800a2e6:	603b      	str	r3, [r7, #0]
 800a2e8:	e7ee      	b.n	800a2c8 <__sfp+0x60>
 800a2ea:	bf00      	nop
 800a2ec:	0800a770 	.word	0x0800a770
 800a2f0:	ffff0001 	.word	0xffff0001

0800a2f4 <_fwalk_reent>:
 800a2f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a2f8:	4606      	mov	r6, r0
 800a2fa:	4688      	mov	r8, r1
 800a2fc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a300:	2700      	movs	r7, #0
 800a302:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a306:	f1b9 0901 	subs.w	r9, r9, #1
 800a30a:	d505      	bpl.n	800a318 <_fwalk_reent+0x24>
 800a30c:	6824      	ldr	r4, [r4, #0]
 800a30e:	2c00      	cmp	r4, #0
 800a310:	d1f7      	bne.n	800a302 <_fwalk_reent+0xe>
 800a312:	4638      	mov	r0, r7
 800a314:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a318:	89ab      	ldrh	r3, [r5, #12]
 800a31a:	2b01      	cmp	r3, #1
 800a31c:	d907      	bls.n	800a32e <_fwalk_reent+0x3a>
 800a31e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a322:	3301      	adds	r3, #1
 800a324:	d003      	beq.n	800a32e <_fwalk_reent+0x3a>
 800a326:	4629      	mov	r1, r5
 800a328:	4630      	mov	r0, r6
 800a32a:	47c0      	blx	r8
 800a32c:	4307      	orrs	r7, r0
 800a32e:	3568      	adds	r5, #104	; 0x68
 800a330:	e7e9      	b.n	800a306 <_fwalk_reent+0x12>

0800a332 <__retarget_lock_init_recursive>:
 800a332:	4770      	bx	lr

0800a334 <__retarget_lock_acquire_recursive>:
 800a334:	4770      	bx	lr

0800a336 <__retarget_lock_release_recursive>:
 800a336:	4770      	bx	lr

0800a338 <__swhatbuf_r>:
 800a338:	b570      	push	{r4, r5, r6, lr}
 800a33a:	460e      	mov	r6, r1
 800a33c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a340:	2900      	cmp	r1, #0
 800a342:	b096      	sub	sp, #88	; 0x58
 800a344:	4614      	mov	r4, r2
 800a346:	461d      	mov	r5, r3
 800a348:	da08      	bge.n	800a35c <__swhatbuf_r+0x24>
 800a34a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800a34e:	2200      	movs	r2, #0
 800a350:	602a      	str	r2, [r5, #0]
 800a352:	061a      	lsls	r2, r3, #24
 800a354:	d410      	bmi.n	800a378 <__swhatbuf_r+0x40>
 800a356:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a35a:	e00e      	b.n	800a37a <__swhatbuf_r+0x42>
 800a35c:	466a      	mov	r2, sp
 800a35e:	f000 f96f 	bl	800a640 <_fstat_r>
 800a362:	2800      	cmp	r0, #0
 800a364:	dbf1      	blt.n	800a34a <__swhatbuf_r+0x12>
 800a366:	9a01      	ldr	r2, [sp, #4]
 800a368:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a36c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a370:	425a      	negs	r2, r3
 800a372:	415a      	adcs	r2, r3
 800a374:	602a      	str	r2, [r5, #0]
 800a376:	e7ee      	b.n	800a356 <__swhatbuf_r+0x1e>
 800a378:	2340      	movs	r3, #64	; 0x40
 800a37a:	2000      	movs	r0, #0
 800a37c:	6023      	str	r3, [r4, #0]
 800a37e:	b016      	add	sp, #88	; 0x58
 800a380:	bd70      	pop	{r4, r5, r6, pc}
	...

0800a384 <malloc>:
 800a384:	4b02      	ldr	r3, [pc, #8]	; (800a390 <malloc+0xc>)
 800a386:	4601      	mov	r1, r0
 800a388:	6818      	ldr	r0, [r3, #0]
 800a38a:	f000 b86f 	b.w	800a46c <_malloc_r>
 800a38e:	bf00      	nop
 800a390:	20000104 	.word	0x20000104

0800a394 <_free_r>:
 800a394:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a396:	2900      	cmp	r1, #0
 800a398:	d044      	beq.n	800a424 <_free_r+0x90>
 800a39a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a39e:	9001      	str	r0, [sp, #4]
 800a3a0:	2b00      	cmp	r3, #0
 800a3a2:	f1a1 0404 	sub.w	r4, r1, #4
 800a3a6:	bfb8      	it	lt
 800a3a8:	18e4      	addlt	r4, r4, r3
 800a3aa:	f000 f96d 	bl	800a688 <__malloc_lock>
 800a3ae:	4a1e      	ldr	r2, [pc, #120]	; (800a428 <_free_r+0x94>)
 800a3b0:	9801      	ldr	r0, [sp, #4]
 800a3b2:	6813      	ldr	r3, [r2, #0]
 800a3b4:	b933      	cbnz	r3, 800a3c4 <_free_r+0x30>
 800a3b6:	6063      	str	r3, [r4, #4]
 800a3b8:	6014      	str	r4, [r2, #0]
 800a3ba:	b003      	add	sp, #12
 800a3bc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a3c0:	f000 b968 	b.w	800a694 <__malloc_unlock>
 800a3c4:	42a3      	cmp	r3, r4
 800a3c6:	d908      	bls.n	800a3da <_free_r+0x46>
 800a3c8:	6825      	ldr	r5, [r4, #0]
 800a3ca:	1961      	adds	r1, r4, r5
 800a3cc:	428b      	cmp	r3, r1
 800a3ce:	bf01      	itttt	eq
 800a3d0:	6819      	ldreq	r1, [r3, #0]
 800a3d2:	685b      	ldreq	r3, [r3, #4]
 800a3d4:	1949      	addeq	r1, r1, r5
 800a3d6:	6021      	streq	r1, [r4, #0]
 800a3d8:	e7ed      	b.n	800a3b6 <_free_r+0x22>
 800a3da:	461a      	mov	r2, r3
 800a3dc:	685b      	ldr	r3, [r3, #4]
 800a3de:	b10b      	cbz	r3, 800a3e4 <_free_r+0x50>
 800a3e0:	42a3      	cmp	r3, r4
 800a3e2:	d9fa      	bls.n	800a3da <_free_r+0x46>
 800a3e4:	6811      	ldr	r1, [r2, #0]
 800a3e6:	1855      	adds	r5, r2, r1
 800a3e8:	42a5      	cmp	r5, r4
 800a3ea:	d10b      	bne.n	800a404 <_free_r+0x70>
 800a3ec:	6824      	ldr	r4, [r4, #0]
 800a3ee:	4421      	add	r1, r4
 800a3f0:	1854      	adds	r4, r2, r1
 800a3f2:	42a3      	cmp	r3, r4
 800a3f4:	6011      	str	r1, [r2, #0]
 800a3f6:	d1e0      	bne.n	800a3ba <_free_r+0x26>
 800a3f8:	681c      	ldr	r4, [r3, #0]
 800a3fa:	685b      	ldr	r3, [r3, #4]
 800a3fc:	6053      	str	r3, [r2, #4]
 800a3fe:	4421      	add	r1, r4
 800a400:	6011      	str	r1, [r2, #0]
 800a402:	e7da      	b.n	800a3ba <_free_r+0x26>
 800a404:	d902      	bls.n	800a40c <_free_r+0x78>
 800a406:	230c      	movs	r3, #12
 800a408:	6003      	str	r3, [r0, #0]
 800a40a:	e7d6      	b.n	800a3ba <_free_r+0x26>
 800a40c:	6825      	ldr	r5, [r4, #0]
 800a40e:	1961      	adds	r1, r4, r5
 800a410:	428b      	cmp	r3, r1
 800a412:	bf04      	itt	eq
 800a414:	6819      	ldreq	r1, [r3, #0]
 800a416:	685b      	ldreq	r3, [r3, #4]
 800a418:	6063      	str	r3, [r4, #4]
 800a41a:	bf04      	itt	eq
 800a41c:	1949      	addeq	r1, r1, r5
 800a41e:	6021      	streq	r1, [r4, #0]
 800a420:	6054      	str	r4, [r2, #4]
 800a422:	e7ca      	b.n	800a3ba <_free_r+0x26>
 800a424:	b003      	add	sp, #12
 800a426:	bd30      	pop	{r4, r5, pc}
 800a428:	200021b8 	.word	0x200021b8

0800a42c <sbrk_aligned>:
 800a42c:	b570      	push	{r4, r5, r6, lr}
 800a42e:	4e0e      	ldr	r6, [pc, #56]	; (800a468 <sbrk_aligned+0x3c>)
 800a430:	460c      	mov	r4, r1
 800a432:	6831      	ldr	r1, [r6, #0]
 800a434:	4605      	mov	r5, r0
 800a436:	b911      	cbnz	r1, 800a43e <sbrk_aligned+0x12>
 800a438:	f000 f88c 	bl	800a554 <_sbrk_r>
 800a43c:	6030      	str	r0, [r6, #0]
 800a43e:	4621      	mov	r1, r4
 800a440:	4628      	mov	r0, r5
 800a442:	f000 f887 	bl	800a554 <_sbrk_r>
 800a446:	1c43      	adds	r3, r0, #1
 800a448:	d00a      	beq.n	800a460 <sbrk_aligned+0x34>
 800a44a:	1cc4      	adds	r4, r0, #3
 800a44c:	f024 0403 	bic.w	r4, r4, #3
 800a450:	42a0      	cmp	r0, r4
 800a452:	d007      	beq.n	800a464 <sbrk_aligned+0x38>
 800a454:	1a21      	subs	r1, r4, r0
 800a456:	4628      	mov	r0, r5
 800a458:	f000 f87c 	bl	800a554 <_sbrk_r>
 800a45c:	3001      	adds	r0, #1
 800a45e:	d101      	bne.n	800a464 <sbrk_aligned+0x38>
 800a460:	f04f 34ff 	mov.w	r4, #4294967295
 800a464:	4620      	mov	r0, r4
 800a466:	bd70      	pop	{r4, r5, r6, pc}
 800a468:	200021bc 	.word	0x200021bc

0800a46c <_malloc_r>:
 800a46c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a470:	1ccd      	adds	r5, r1, #3
 800a472:	f025 0503 	bic.w	r5, r5, #3
 800a476:	3508      	adds	r5, #8
 800a478:	2d0c      	cmp	r5, #12
 800a47a:	bf38      	it	cc
 800a47c:	250c      	movcc	r5, #12
 800a47e:	2d00      	cmp	r5, #0
 800a480:	4607      	mov	r7, r0
 800a482:	db01      	blt.n	800a488 <_malloc_r+0x1c>
 800a484:	42a9      	cmp	r1, r5
 800a486:	d905      	bls.n	800a494 <_malloc_r+0x28>
 800a488:	230c      	movs	r3, #12
 800a48a:	603b      	str	r3, [r7, #0]
 800a48c:	2600      	movs	r6, #0
 800a48e:	4630      	mov	r0, r6
 800a490:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a494:	4e2e      	ldr	r6, [pc, #184]	; (800a550 <_malloc_r+0xe4>)
 800a496:	f000 f8f7 	bl	800a688 <__malloc_lock>
 800a49a:	6833      	ldr	r3, [r6, #0]
 800a49c:	461c      	mov	r4, r3
 800a49e:	bb34      	cbnz	r4, 800a4ee <_malloc_r+0x82>
 800a4a0:	4629      	mov	r1, r5
 800a4a2:	4638      	mov	r0, r7
 800a4a4:	f7ff ffc2 	bl	800a42c <sbrk_aligned>
 800a4a8:	1c43      	adds	r3, r0, #1
 800a4aa:	4604      	mov	r4, r0
 800a4ac:	d14d      	bne.n	800a54a <_malloc_r+0xde>
 800a4ae:	6834      	ldr	r4, [r6, #0]
 800a4b0:	4626      	mov	r6, r4
 800a4b2:	2e00      	cmp	r6, #0
 800a4b4:	d140      	bne.n	800a538 <_malloc_r+0xcc>
 800a4b6:	6823      	ldr	r3, [r4, #0]
 800a4b8:	4631      	mov	r1, r6
 800a4ba:	4638      	mov	r0, r7
 800a4bc:	eb04 0803 	add.w	r8, r4, r3
 800a4c0:	f000 f848 	bl	800a554 <_sbrk_r>
 800a4c4:	4580      	cmp	r8, r0
 800a4c6:	d13a      	bne.n	800a53e <_malloc_r+0xd2>
 800a4c8:	6821      	ldr	r1, [r4, #0]
 800a4ca:	3503      	adds	r5, #3
 800a4cc:	1a6d      	subs	r5, r5, r1
 800a4ce:	f025 0503 	bic.w	r5, r5, #3
 800a4d2:	3508      	adds	r5, #8
 800a4d4:	2d0c      	cmp	r5, #12
 800a4d6:	bf38      	it	cc
 800a4d8:	250c      	movcc	r5, #12
 800a4da:	4629      	mov	r1, r5
 800a4dc:	4638      	mov	r0, r7
 800a4de:	f7ff ffa5 	bl	800a42c <sbrk_aligned>
 800a4e2:	3001      	adds	r0, #1
 800a4e4:	d02b      	beq.n	800a53e <_malloc_r+0xd2>
 800a4e6:	6823      	ldr	r3, [r4, #0]
 800a4e8:	442b      	add	r3, r5
 800a4ea:	6023      	str	r3, [r4, #0]
 800a4ec:	e00e      	b.n	800a50c <_malloc_r+0xa0>
 800a4ee:	6822      	ldr	r2, [r4, #0]
 800a4f0:	1b52      	subs	r2, r2, r5
 800a4f2:	d41e      	bmi.n	800a532 <_malloc_r+0xc6>
 800a4f4:	2a0b      	cmp	r2, #11
 800a4f6:	d916      	bls.n	800a526 <_malloc_r+0xba>
 800a4f8:	1961      	adds	r1, r4, r5
 800a4fa:	42a3      	cmp	r3, r4
 800a4fc:	6025      	str	r5, [r4, #0]
 800a4fe:	bf18      	it	ne
 800a500:	6059      	strne	r1, [r3, #4]
 800a502:	6863      	ldr	r3, [r4, #4]
 800a504:	bf08      	it	eq
 800a506:	6031      	streq	r1, [r6, #0]
 800a508:	5162      	str	r2, [r4, r5]
 800a50a:	604b      	str	r3, [r1, #4]
 800a50c:	4638      	mov	r0, r7
 800a50e:	f104 060b 	add.w	r6, r4, #11
 800a512:	f000 f8bf 	bl	800a694 <__malloc_unlock>
 800a516:	f026 0607 	bic.w	r6, r6, #7
 800a51a:	1d23      	adds	r3, r4, #4
 800a51c:	1af2      	subs	r2, r6, r3
 800a51e:	d0b6      	beq.n	800a48e <_malloc_r+0x22>
 800a520:	1b9b      	subs	r3, r3, r6
 800a522:	50a3      	str	r3, [r4, r2]
 800a524:	e7b3      	b.n	800a48e <_malloc_r+0x22>
 800a526:	6862      	ldr	r2, [r4, #4]
 800a528:	42a3      	cmp	r3, r4
 800a52a:	bf0c      	ite	eq
 800a52c:	6032      	streq	r2, [r6, #0]
 800a52e:	605a      	strne	r2, [r3, #4]
 800a530:	e7ec      	b.n	800a50c <_malloc_r+0xa0>
 800a532:	4623      	mov	r3, r4
 800a534:	6864      	ldr	r4, [r4, #4]
 800a536:	e7b2      	b.n	800a49e <_malloc_r+0x32>
 800a538:	4634      	mov	r4, r6
 800a53a:	6876      	ldr	r6, [r6, #4]
 800a53c:	e7b9      	b.n	800a4b2 <_malloc_r+0x46>
 800a53e:	230c      	movs	r3, #12
 800a540:	603b      	str	r3, [r7, #0]
 800a542:	4638      	mov	r0, r7
 800a544:	f000 f8a6 	bl	800a694 <__malloc_unlock>
 800a548:	e7a1      	b.n	800a48e <_malloc_r+0x22>
 800a54a:	6025      	str	r5, [r4, #0]
 800a54c:	e7de      	b.n	800a50c <_malloc_r+0xa0>
 800a54e:	bf00      	nop
 800a550:	200021b8 	.word	0x200021b8

0800a554 <_sbrk_r>:
 800a554:	b538      	push	{r3, r4, r5, lr}
 800a556:	4d06      	ldr	r5, [pc, #24]	; (800a570 <_sbrk_r+0x1c>)
 800a558:	2300      	movs	r3, #0
 800a55a:	4604      	mov	r4, r0
 800a55c:	4608      	mov	r0, r1
 800a55e:	602b      	str	r3, [r5, #0]
 800a560:	f7f7 f8b6 	bl	80016d0 <_sbrk>
 800a564:	1c43      	adds	r3, r0, #1
 800a566:	d102      	bne.n	800a56e <_sbrk_r+0x1a>
 800a568:	682b      	ldr	r3, [r5, #0]
 800a56a:	b103      	cbz	r3, 800a56e <_sbrk_r+0x1a>
 800a56c:	6023      	str	r3, [r4, #0]
 800a56e:	bd38      	pop	{r3, r4, r5, pc}
 800a570:	200021c0 	.word	0x200021c0

0800a574 <__sread>:
 800a574:	b510      	push	{r4, lr}
 800a576:	460c      	mov	r4, r1
 800a578:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a57c:	f000 f890 	bl	800a6a0 <_read_r>
 800a580:	2800      	cmp	r0, #0
 800a582:	bfab      	itete	ge
 800a584:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a586:	89a3      	ldrhlt	r3, [r4, #12]
 800a588:	181b      	addge	r3, r3, r0
 800a58a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a58e:	bfac      	ite	ge
 800a590:	6563      	strge	r3, [r4, #84]	; 0x54
 800a592:	81a3      	strhlt	r3, [r4, #12]
 800a594:	bd10      	pop	{r4, pc}

0800a596 <__swrite>:
 800a596:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a59a:	461f      	mov	r7, r3
 800a59c:	898b      	ldrh	r3, [r1, #12]
 800a59e:	05db      	lsls	r3, r3, #23
 800a5a0:	4605      	mov	r5, r0
 800a5a2:	460c      	mov	r4, r1
 800a5a4:	4616      	mov	r6, r2
 800a5a6:	d505      	bpl.n	800a5b4 <__swrite+0x1e>
 800a5a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a5ac:	2302      	movs	r3, #2
 800a5ae:	2200      	movs	r2, #0
 800a5b0:	f000 f858 	bl	800a664 <_lseek_r>
 800a5b4:	89a3      	ldrh	r3, [r4, #12]
 800a5b6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a5ba:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a5be:	81a3      	strh	r3, [r4, #12]
 800a5c0:	4632      	mov	r2, r6
 800a5c2:	463b      	mov	r3, r7
 800a5c4:	4628      	mov	r0, r5
 800a5c6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a5ca:	f000 b817 	b.w	800a5fc <_write_r>

0800a5ce <__sseek>:
 800a5ce:	b510      	push	{r4, lr}
 800a5d0:	460c      	mov	r4, r1
 800a5d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a5d6:	f000 f845 	bl	800a664 <_lseek_r>
 800a5da:	1c43      	adds	r3, r0, #1
 800a5dc:	89a3      	ldrh	r3, [r4, #12]
 800a5de:	bf15      	itete	ne
 800a5e0:	6560      	strne	r0, [r4, #84]	; 0x54
 800a5e2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a5e6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a5ea:	81a3      	strheq	r3, [r4, #12]
 800a5ec:	bf18      	it	ne
 800a5ee:	81a3      	strhne	r3, [r4, #12]
 800a5f0:	bd10      	pop	{r4, pc}

0800a5f2 <__sclose>:
 800a5f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a5f6:	f000 b813 	b.w	800a620 <_close_r>
	...

0800a5fc <_write_r>:
 800a5fc:	b538      	push	{r3, r4, r5, lr}
 800a5fe:	4d07      	ldr	r5, [pc, #28]	; (800a61c <_write_r+0x20>)
 800a600:	4604      	mov	r4, r0
 800a602:	4608      	mov	r0, r1
 800a604:	4611      	mov	r1, r2
 800a606:	2200      	movs	r2, #0
 800a608:	602a      	str	r2, [r5, #0]
 800a60a:	461a      	mov	r2, r3
 800a60c:	f7f6 fe68 	bl	80012e0 <_write>
 800a610:	1c43      	adds	r3, r0, #1
 800a612:	d102      	bne.n	800a61a <_write_r+0x1e>
 800a614:	682b      	ldr	r3, [r5, #0]
 800a616:	b103      	cbz	r3, 800a61a <_write_r+0x1e>
 800a618:	6023      	str	r3, [r4, #0]
 800a61a:	bd38      	pop	{r3, r4, r5, pc}
 800a61c:	200021c0 	.word	0x200021c0

0800a620 <_close_r>:
 800a620:	b538      	push	{r3, r4, r5, lr}
 800a622:	4d06      	ldr	r5, [pc, #24]	; (800a63c <_close_r+0x1c>)
 800a624:	2300      	movs	r3, #0
 800a626:	4604      	mov	r4, r0
 800a628:	4608      	mov	r0, r1
 800a62a:	602b      	str	r3, [r5, #0]
 800a62c:	f7f6 fe84 	bl	8001338 <_close>
 800a630:	1c43      	adds	r3, r0, #1
 800a632:	d102      	bne.n	800a63a <_close_r+0x1a>
 800a634:	682b      	ldr	r3, [r5, #0]
 800a636:	b103      	cbz	r3, 800a63a <_close_r+0x1a>
 800a638:	6023      	str	r3, [r4, #0]
 800a63a:	bd38      	pop	{r3, r4, r5, pc}
 800a63c:	200021c0 	.word	0x200021c0

0800a640 <_fstat_r>:
 800a640:	b538      	push	{r3, r4, r5, lr}
 800a642:	4d07      	ldr	r5, [pc, #28]	; (800a660 <_fstat_r+0x20>)
 800a644:	2300      	movs	r3, #0
 800a646:	4604      	mov	r4, r0
 800a648:	4608      	mov	r0, r1
 800a64a:	4611      	mov	r1, r2
 800a64c:	602b      	str	r3, [r5, #0]
 800a64e:	f7f6 fec3 	bl	80013d8 <_fstat>
 800a652:	1c43      	adds	r3, r0, #1
 800a654:	d102      	bne.n	800a65c <_fstat_r+0x1c>
 800a656:	682b      	ldr	r3, [r5, #0]
 800a658:	b103      	cbz	r3, 800a65c <_fstat_r+0x1c>
 800a65a:	6023      	str	r3, [r4, #0]
 800a65c:	bd38      	pop	{r3, r4, r5, pc}
 800a65e:	bf00      	nop
 800a660:	200021c0 	.word	0x200021c0

0800a664 <_lseek_r>:
 800a664:	b538      	push	{r3, r4, r5, lr}
 800a666:	4d07      	ldr	r5, [pc, #28]	; (800a684 <_lseek_r+0x20>)
 800a668:	4604      	mov	r4, r0
 800a66a:	4608      	mov	r0, r1
 800a66c:	4611      	mov	r1, r2
 800a66e:	2200      	movs	r2, #0
 800a670:	602a      	str	r2, [r5, #0]
 800a672:	461a      	mov	r2, r3
 800a674:	f7f6 fe77 	bl	8001366 <_lseek>
 800a678:	1c43      	adds	r3, r0, #1
 800a67a:	d102      	bne.n	800a682 <_lseek_r+0x1e>
 800a67c:	682b      	ldr	r3, [r5, #0]
 800a67e:	b103      	cbz	r3, 800a682 <_lseek_r+0x1e>
 800a680:	6023      	str	r3, [r4, #0]
 800a682:	bd38      	pop	{r3, r4, r5, pc}
 800a684:	200021c0 	.word	0x200021c0

0800a688 <__malloc_lock>:
 800a688:	4801      	ldr	r0, [pc, #4]	; (800a690 <__malloc_lock+0x8>)
 800a68a:	f7ff be53 	b.w	800a334 <__retarget_lock_acquire_recursive>
 800a68e:	bf00      	nop
 800a690:	200021b4 	.word	0x200021b4

0800a694 <__malloc_unlock>:
 800a694:	4801      	ldr	r0, [pc, #4]	; (800a69c <__malloc_unlock+0x8>)
 800a696:	f7ff be4e 	b.w	800a336 <__retarget_lock_release_recursive>
 800a69a:	bf00      	nop
 800a69c:	200021b4 	.word	0x200021b4

0800a6a0 <_read_r>:
 800a6a0:	b538      	push	{r3, r4, r5, lr}
 800a6a2:	4d07      	ldr	r5, [pc, #28]	; (800a6c0 <_read_r+0x20>)
 800a6a4:	4604      	mov	r4, r0
 800a6a6:	4608      	mov	r0, r1
 800a6a8:	4611      	mov	r1, r2
 800a6aa:	2200      	movs	r2, #0
 800a6ac:	602a      	str	r2, [r5, #0]
 800a6ae:	461a      	mov	r2, r3
 800a6b0:	f7f6 fe6a 	bl	8001388 <_read>
 800a6b4:	1c43      	adds	r3, r0, #1
 800a6b6:	d102      	bne.n	800a6be <_read_r+0x1e>
 800a6b8:	682b      	ldr	r3, [r5, #0]
 800a6ba:	b103      	cbz	r3, 800a6be <_read_r+0x1e>
 800a6bc:	6023      	str	r3, [r4, #0]
 800a6be:	bd38      	pop	{r3, r4, r5, pc}
 800a6c0:	200021c0 	.word	0x200021c0

0800a6c4 <_init>:
 800a6c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a6c6:	bf00      	nop
 800a6c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a6ca:	bc08      	pop	{r3}
 800a6cc:	469e      	mov	lr, r3
 800a6ce:	4770      	bx	lr

0800a6d0 <_fini>:
 800a6d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a6d2:	bf00      	nop
 800a6d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a6d6:	bc08      	pop	{r3}
 800a6d8:	469e      	mov	lr, r3
 800a6da:	4770      	bx	lr
