
RFM95_Transparent_Serial.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bbf4  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e4  0800bd7c  0800bd7c  0001bd7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800be60  0800be60  00020170  2**0
                  CONTENTS
  4 .ARM          00000008  0800be60  0800be60  0001be60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800be68  0800be68  00020170  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800be68  0800be68  0001be68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800be6c  0800be6c  0001be6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000170  20000000  0800be70  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020170  2**0
                  CONTENTS
 10 .bss          000022e4  20000170  20000170  00020170  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20002454  20002454  00020170  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020170  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001c159  00000000  00000000  000201a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003d34  00000000  00000000  0003c2f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000016a0  00000000  00000000  00040030  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001518  00000000  00000000  000416d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023ee4  00000000  00000000  00042be8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001ba5e  00000000  00000000  00066acc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c869d  00000000  00000000  0008252a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0014abc7  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006564  00000000  00000000  0014ac18  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000170 	.word	0x20000170
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800bd64 	.word	0x0800bd64

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000174 	.word	0x20000174
 80001c4:	0800bd64 	.word	0x0800bd64

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b974 	b.w	80004c8 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468e      	mov	lr, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14d      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000206:	428a      	cmp	r2, r1
 8000208:	4694      	mov	ip, r2
 800020a:	d969      	bls.n	80002e0 <__udivmoddi4+0xe8>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b152      	cbz	r2, 8000228 <__udivmoddi4+0x30>
 8000212:	fa01 f302 	lsl.w	r3, r1, r2
 8000216:	f1c2 0120 	rsb	r1, r2, #32
 800021a:	fa20 f101 	lsr.w	r1, r0, r1
 800021e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000222:	ea41 0e03 	orr.w	lr, r1, r3
 8000226:	4094      	lsls	r4, r2
 8000228:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800022c:	0c21      	lsrs	r1, r4, #16
 800022e:	fbbe f6f8 	udiv	r6, lr, r8
 8000232:	fa1f f78c 	uxth.w	r7, ip
 8000236:	fb08 e316 	mls	r3, r8, r6, lr
 800023a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800023e:	fb06 f107 	mul.w	r1, r6, r7
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f106 30ff 	add.w	r0, r6, #4294967295
 800024e:	f080 811f 	bcs.w	8000490 <__udivmoddi4+0x298>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 811c 	bls.w	8000490 <__udivmoddi4+0x298>
 8000258:	3e02      	subs	r6, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0f8 	udiv	r0, r3, r8
 8000264:	fb08 3310 	mls	r3, r8, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 f707 	mul.w	r7, r0, r7
 8000270:	42a7      	cmp	r7, r4
 8000272:	d90a      	bls.n	800028a <__udivmoddi4+0x92>
 8000274:	eb1c 0404 	adds.w	r4, ip, r4
 8000278:	f100 33ff 	add.w	r3, r0, #4294967295
 800027c:	f080 810a 	bcs.w	8000494 <__udivmoddi4+0x29c>
 8000280:	42a7      	cmp	r7, r4
 8000282:	f240 8107 	bls.w	8000494 <__udivmoddi4+0x29c>
 8000286:	4464      	add	r4, ip
 8000288:	3802      	subs	r0, #2
 800028a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800028e:	1be4      	subs	r4, r4, r7
 8000290:	2600      	movs	r6, #0
 8000292:	b11d      	cbz	r5, 800029c <__udivmoddi4+0xa4>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c5 4300 	strd	r4, r3, [r5]
 800029c:	4631      	mov	r1, r6
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d909      	bls.n	80002ba <__udivmoddi4+0xc2>
 80002a6:	2d00      	cmp	r5, #0
 80002a8:	f000 80ef 	beq.w	800048a <__udivmoddi4+0x292>
 80002ac:	2600      	movs	r6, #0
 80002ae:	e9c5 0100 	strd	r0, r1, [r5]
 80002b2:	4630      	mov	r0, r6
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	fab3 f683 	clz	r6, r3
 80002be:	2e00      	cmp	r6, #0
 80002c0:	d14a      	bne.n	8000358 <__udivmoddi4+0x160>
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xd4>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 80f9 	bhi.w	80004be <__udivmoddi4+0x2c6>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb61 0303 	sbc.w	r3, r1, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	469e      	mov	lr, r3
 80002d6:	2d00      	cmp	r5, #0
 80002d8:	d0e0      	beq.n	800029c <__udivmoddi4+0xa4>
 80002da:	e9c5 4e00 	strd	r4, lr, [r5]
 80002de:	e7dd      	b.n	800029c <__udivmoddi4+0xa4>
 80002e0:	b902      	cbnz	r2, 80002e4 <__udivmoddi4+0xec>
 80002e2:	deff      	udf	#255	; 0xff
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	2a00      	cmp	r2, #0
 80002ea:	f040 8092 	bne.w	8000412 <__udivmoddi4+0x21a>
 80002ee:	eba1 010c 	sub.w	r1, r1, ip
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2601      	movs	r6, #1
 80002fc:	0c20      	lsrs	r0, r4, #16
 80002fe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000302:	fb07 1113 	mls	r1, r7, r3, r1
 8000306:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800030a:	fb0e f003 	mul.w	r0, lr, r3
 800030e:	4288      	cmp	r0, r1
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x12c>
 8000312:	eb1c 0101 	adds.w	r1, ip, r1
 8000316:	f103 38ff 	add.w	r8, r3, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x12a>
 800031c:	4288      	cmp	r0, r1
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2c0>
 8000322:	4643      	mov	r3, r8
 8000324:	1a09      	subs	r1, r1, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb1 f0f7 	udiv	r0, r1, r7
 800032c:	fb07 1110 	mls	r1, r7, r0, r1
 8000330:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x156>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 31ff 	add.w	r1, r0, #4294967295
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x154>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 800034c:	4608      	mov	r0, r1
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000356:	e79c      	b.n	8000292 <__udivmoddi4+0x9a>
 8000358:	f1c6 0720 	rsb	r7, r6, #32
 800035c:	40b3      	lsls	r3, r6
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa20 f407 	lsr.w	r4, r0, r7
 800036a:	fa01 f306 	lsl.w	r3, r1, r6
 800036e:	431c      	orrs	r4, r3
 8000370:	40f9      	lsrs	r1, r7
 8000372:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000376:	fa00 f306 	lsl.w	r3, r0, r6
 800037a:	fbb1 f8f9 	udiv	r8, r1, r9
 800037e:	0c20      	lsrs	r0, r4, #16
 8000380:	fa1f fe8c 	uxth.w	lr, ip
 8000384:	fb09 1118 	mls	r1, r9, r8, r1
 8000388:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800038c:	fb08 f00e 	mul.w	r0, r8, lr
 8000390:	4288      	cmp	r0, r1
 8000392:	fa02 f206 	lsl.w	r2, r2, r6
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b8>
 8000398:	eb1c 0101 	adds.w	r1, ip, r1
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2bc>
 80003a4:	4288      	cmp	r0, r1
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2bc>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4461      	add	r1, ip
 80003b0:	1a09      	subs	r1, r1, r0
 80003b2:	b2a4      	uxth	r4, r4
 80003b4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003b8:	fb09 1110 	mls	r1, r9, r0, r1
 80003bc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c4:	458e      	cmp	lr, r1
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1e2>
 80003c8:	eb1c 0101 	adds.w	r1, ip, r1
 80003cc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2b4>
 80003d2:	458e      	cmp	lr, r1
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2b4>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4461      	add	r1, ip
 80003da:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003de:	fba0 9402 	umull	r9, r4, r0, r2
 80003e2:	eba1 010e 	sub.w	r1, r1, lr
 80003e6:	42a1      	cmp	r1, r4
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46a6      	mov	lr, r4
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x2a4>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x2a0>
 80003f0:	b15d      	cbz	r5, 800040a <__udivmoddi4+0x212>
 80003f2:	ebb3 0208 	subs.w	r2, r3, r8
 80003f6:	eb61 010e 	sbc.w	r1, r1, lr
 80003fa:	fa01 f707 	lsl.w	r7, r1, r7
 80003fe:	fa22 f306 	lsr.w	r3, r2, r6
 8000402:	40f1      	lsrs	r1, r6
 8000404:	431f      	orrs	r7, r3
 8000406:	e9c5 7100 	strd	r7, r1, [r5]
 800040a:	2600      	movs	r6, #0
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	f1c2 0320 	rsb	r3, r2, #32
 8000416:	40d8      	lsrs	r0, r3
 8000418:	fa0c fc02 	lsl.w	ip, ip, r2
 800041c:	fa21 f303 	lsr.w	r3, r1, r3
 8000420:	4091      	lsls	r1, r2
 8000422:	4301      	orrs	r1, r0
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000430:	fb07 3610 	mls	r6, r7, r0, r3
 8000434:	0c0b      	lsrs	r3, r1, #16
 8000436:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800043a:	fb00 f60e 	mul.w	r6, r0, lr
 800043e:	429e      	cmp	r6, r3
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x260>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 38ff 	add.w	r8, r0, #4294967295
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b8>
 8000450:	429e      	cmp	r6, r3
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b8>
 8000454:	3802      	subs	r0, #2
 8000456:	4463      	add	r3, ip
 8000458:	1b9b      	subs	r3, r3, r6
 800045a:	b289      	uxth	r1, r1
 800045c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000460:	fb07 3316 	mls	r3, r7, r6, r3
 8000464:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000468:	fb06 f30e 	mul.w	r3, r6, lr
 800046c:	428b      	cmp	r3, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x28a>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f106 38ff 	add.w	r8, r6, #4294967295
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 800047a:	428b      	cmp	r3, r1
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800047e:	3e02      	subs	r6, #2
 8000480:	4461      	add	r1, ip
 8000482:	1ac9      	subs	r1, r1, r3
 8000484:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0x104>
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e705      	b.n	800029c <__udivmoddi4+0xa4>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e3      	b.n	800025c <__udivmoddi4+0x64>
 8000494:	4618      	mov	r0, r3
 8000496:	e6f8      	b.n	800028a <__udivmoddi4+0x92>
 8000498:	454b      	cmp	r3, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f8>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f8>
 80004a8:	4646      	mov	r6, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x28a>
 80004ac:	4620      	mov	r0, r4
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1e2>
 80004b0:	4640      	mov	r0, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x260>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b8>
 80004b8:	3b02      	subs	r3, #2
 80004ba:	4461      	add	r1, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x12c>
 80004be:	4630      	mov	r0, r6
 80004c0:	e709      	b.n	80002d6 <__udivmoddi4+0xde>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x156>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <newLoRa>:
										  |    spreading factor = 7				       |
											|           bandwidth = 125 KHz        |
											| 		    coding rate = 4/5            |
											----------------------------------------
\* ----------------------------------------------------------------------------- */
LoRa newLoRa(){
 80004cc:	b4b0      	push	{r4, r5, r7}
 80004ce:	b08f      	sub	sp, #60	; 0x3c
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	6078      	str	r0, [r7, #4]
	LoRa new_LoRa;

	new_LoRa.frequency             = 433       ;
 80004d4:	f240 13b1 	movw	r3, #433	; 0x1b1
 80004d8:	62fb      	str	r3, [r7, #44]	; 0x2c
	new_LoRa.spredingFactor        = SF_7      ;
 80004da:	2307      	movs	r3, #7
 80004dc:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
	new_LoRa.bandWidth			   = BW_125KHz ;
 80004e0:	2307      	movs	r3, #7
 80004e2:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
	new_LoRa.crcRate               = CR_4_5    ;
 80004e6:	2301      	movs	r3, #1
 80004e8:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	new_LoRa.power				   = POWER_20db;
 80004ec:	23ff      	movs	r3, #255	; 0xff
 80004ee:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	new_LoRa.overCurrentProtection = 100       ;
 80004f2:	2364      	movs	r3, #100	; 0x64
 80004f4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	new_LoRa.preamble			   = 8         ;
 80004f8:	2308      	movs	r3, #8
 80004fa:	86bb      	strh	r3, [r7, #52]	; 0x34

	return new_LoRa;
 80004fc:	687b      	ldr	r3, [r7, #4]
 80004fe:	461d      	mov	r5, r3
 8000500:	f107 040c 	add.w	r4, r7, #12
 8000504:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000506:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000508:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800050a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800050c:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8000510:	e885 0007 	stmia.w	r5, {r0, r1, r2}
}
 8000514:	6878      	ldr	r0, [r7, #4]
 8000516:	373c      	adds	r7, #60	; 0x3c
 8000518:	46bd      	mov	sp, r7
 800051a:	bcb0      	pop	{r4, r5, r7}
 800051c:	4770      	bx	lr

0800051e <LoRa_reset>:
		description : reset module
		arguments   :
			LoRa* LoRa --> LoRa object handler
		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_reset(LoRa* _LoRa){
 800051e:	b580      	push	{r7, lr}
 8000520:	b082      	sub	sp, #8
 8000522:	af00      	add	r7, sp, #0
 8000524:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(_LoRa->reset_port, _LoRa->reset_pin, GPIO_PIN_RESET);
 8000526:	687b      	ldr	r3, [r7, #4]
 8000528:	6898      	ldr	r0, [r3, #8]
 800052a:	687b      	ldr	r3, [r7, #4]
 800052c:	899b      	ldrh	r3, [r3, #12]
 800052e:	2200      	movs	r2, #0
 8000530:	4619      	mov	r1, r3
 8000532:	f002 fa4b 	bl	80029cc <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000536:	2001      	movs	r0, #1
 8000538:	f001 fb74 	bl	8001c24 <HAL_Delay>
	HAL_GPIO_WritePin(_LoRa->reset_port, _LoRa->reset_pin, GPIO_PIN_SET);
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	6898      	ldr	r0, [r3, #8]
 8000540:	687b      	ldr	r3, [r7, #4]
 8000542:	899b      	ldrh	r3, [r3, #12]
 8000544:	2201      	movs	r2, #1
 8000546:	4619      	mov	r1, r3
 8000548:	f002 fa40 	bl	80029cc <HAL_GPIO_WritePin>
	HAL_Delay(100);
 800054c:	2064      	movs	r0, #100	; 0x64
 800054e:	f001 fb69 	bl	8001c24 <HAL_Delay>
}
 8000552:	bf00      	nop
 8000554:	3708      	adds	r7, #8
 8000556:	46bd      	mov	sp, r7
 8000558:	bd80      	pop	{r7, pc}

0800055a <LoRa_gotoMode>:
		arguments   :
			LoRa* LoRa    --> LoRa object handler
			mode	        --> select from defined modes
		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_gotoMode(LoRa* _LoRa, int mode){
 800055a:	b580      	push	{r7, lr}
 800055c:	b084      	sub	sp, #16
 800055e:	af00      	add	r7, sp, #0
 8000560:	6078      	str	r0, [r7, #4]
 8000562:	6039      	str	r1, [r7, #0]
	uint8_t    read;
	uint8_t    data;

	read = LoRa_read(_LoRa, RegOpMode);
 8000564:	2101      	movs	r1, #1
 8000566:	6878      	ldr	r0, [r7, #4]
 8000568:	f000 f99f 	bl	80008aa <LoRa_read>
 800056c:	4603      	mov	r3, r0
 800056e:	73bb      	strb	r3, [r7, #14]
	data = read;
 8000570:	7bbb      	ldrb	r3, [r7, #14]
 8000572:	73fb      	strb	r3, [r7, #15]

	if(mode == SLEEP_MODE){
 8000574:	683b      	ldr	r3, [r7, #0]
 8000576:	2b00      	cmp	r3, #0
 8000578:	d107      	bne.n	800058a <LoRa_gotoMode+0x30>
		data = (read & 0xF8) | 0x00;
 800057a:	7bbb      	ldrb	r3, [r7, #14]
 800057c:	f023 0307 	bic.w	r3, r3, #7
 8000580:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = SLEEP_MODE;
 8000582:	687b      	ldr	r3, [r7, #4]
 8000584:	2200      	movs	r2, #0
 8000586:	61da      	str	r2, [r3, #28]
 8000588:	e03e      	b.n	8000608 <LoRa_gotoMode+0xae>
	}else if (mode == STNBY_MODE){
 800058a:	683b      	ldr	r3, [r7, #0]
 800058c:	2b01      	cmp	r3, #1
 800058e:	d10c      	bne.n	80005aa <LoRa_gotoMode+0x50>
		data = (read & 0xF8) | 0x01;
 8000590:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000594:	f023 0307 	bic.w	r3, r3, #7
 8000598:	b25b      	sxtb	r3, r3
 800059a:	f043 0301 	orr.w	r3, r3, #1
 800059e:	b25b      	sxtb	r3, r3
 80005a0:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = STNBY_MODE;
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	2201      	movs	r2, #1
 80005a6:	61da      	str	r2, [r3, #28]
 80005a8:	e02e      	b.n	8000608 <LoRa_gotoMode+0xae>
	}else if (mode == TRANSMIT_MODE){
 80005aa:	683b      	ldr	r3, [r7, #0]
 80005ac:	2b03      	cmp	r3, #3
 80005ae:	d10c      	bne.n	80005ca <LoRa_gotoMode+0x70>
		data = (read & 0xF8) | 0x03;
 80005b0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80005b4:	f023 0307 	bic.w	r3, r3, #7
 80005b8:	b25b      	sxtb	r3, r3
 80005ba:	f043 0303 	orr.w	r3, r3, #3
 80005be:	b25b      	sxtb	r3, r3
 80005c0:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = TRANSMIT_MODE;
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	2203      	movs	r2, #3
 80005c6:	61da      	str	r2, [r3, #28]
 80005c8:	e01e      	b.n	8000608 <LoRa_gotoMode+0xae>
	}else if (mode == RXCONTIN_MODE){
 80005ca:	683b      	ldr	r3, [r7, #0]
 80005cc:	2b05      	cmp	r3, #5
 80005ce:	d10c      	bne.n	80005ea <LoRa_gotoMode+0x90>
		data = (read & 0xF8) | 0x05;
 80005d0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80005d4:	f023 0307 	bic.w	r3, r3, #7
 80005d8:	b25b      	sxtb	r3, r3
 80005da:	f043 0305 	orr.w	r3, r3, #5
 80005de:	b25b      	sxtb	r3, r3
 80005e0:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = RXCONTIN_MODE;
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	2205      	movs	r2, #5
 80005e6:	61da      	str	r2, [r3, #28]
 80005e8:	e00e      	b.n	8000608 <LoRa_gotoMode+0xae>
	}else if (mode == RXSINGLE_MODE){
 80005ea:	683b      	ldr	r3, [r7, #0]
 80005ec:	2b06      	cmp	r3, #6
 80005ee:	d10b      	bne.n	8000608 <LoRa_gotoMode+0xae>
		data = (read & 0xF8) | 0x06;
 80005f0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80005f4:	f023 0307 	bic.w	r3, r3, #7
 80005f8:	b25b      	sxtb	r3, r3
 80005fa:	f043 0306 	orr.w	r3, r3, #6
 80005fe:	b25b      	sxtb	r3, r3
 8000600:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = RXSINGLE_MODE;
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	2206      	movs	r2, #6
 8000606:	61da      	str	r2, [r3, #28]
	}

	LoRa_write(_LoRa, RegOpMode, data);
 8000608:	7bfb      	ldrb	r3, [r7, #15]
 800060a:	461a      	mov	r2, r3
 800060c:	2101      	movs	r1, #1
 800060e:	6878      	ldr	r0, [r7, #4]
 8000610:	f000 f965 	bl	80008de <LoRa_write>
	//HAL_Delay(10);
}
 8000614:	bf00      	nop
 8000616:	3710      	adds	r7, #16
 8000618:	46bd      	mov	sp, r7
 800061a:	bd80      	pop	{r7, pc}

0800061c <LoRa_readReg>:
														you want to send
			uint8_t* output		--> pointer to the beginning of output array
			uint16_t w_length	--> detemines number of bytes that you want to read
		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_readReg(LoRa* _LoRa, uint8_t* address, uint16_t r_length, uint8_t* output, uint16_t w_length){
 800061c:	b580      	push	{r7, lr}
 800061e:	b084      	sub	sp, #16
 8000620:	af00      	add	r7, sp, #0
 8000622:	60f8      	str	r0, [r7, #12]
 8000624:	60b9      	str	r1, [r7, #8]
 8000626:	603b      	str	r3, [r7, #0]
 8000628:	4613      	mov	r3, r2
 800062a:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_RESET);
 800062c:	68fb      	ldr	r3, [r7, #12]
 800062e:	6818      	ldr	r0, [r3, #0]
 8000630:	68fb      	ldr	r3, [r7, #12]
 8000632:	889b      	ldrh	r3, [r3, #4]
 8000634:	2200      	movs	r2, #0
 8000636:	4619      	mov	r1, r3
 8000638:	f002 f9c8 	bl	80029cc <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(_LoRa->hSPIx, address, r_length, TRANSMIT_TIMEOUT);
 800063c:	68fb      	ldr	r3, [r7, #12]
 800063e:	6998      	ldr	r0, [r3, #24]
 8000640:	88fa      	ldrh	r2, [r7, #6]
 8000642:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000646:	68b9      	ldr	r1, [r7, #8]
 8000648:	f004 f951 	bl	80048ee <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 800064c:	bf00      	nop
 800064e:	68fb      	ldr	r3, [r7, #12]
 8000650:	699b      	ldr	r3, [r3, #24]
 8000652:	4618      	mov	r0, r3
 8000654:	f004 fd3a 	bl	80050cc <HAL_SPI_GetState>
 8000658:	4603      	mov	r3, r0
 800065a:	2b01      	cmp	r3, #1
 800065c:	d1f7      	bne.n	800064e <LoRa_readReg+0x32>
		;
	HAL_SPI_Receive(_LoRa->hSPIx, output, w_length, RECEIVE_TIMEOUT);
 800065e:	68fb      	ldr	r3, [r7, #12]
 8000660:	6998      	ldr	r0, [r3, #24]
 8000662:	8b3a      	ldrh	r2, [r7, #24]
 8000664:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000668:	6839      	ldr	r1, [r7, #0]
 800066a:	f004 fa7c 	bl	8004b66 <HAL_SPI_Receive>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 800066e:	bf00      	nop
 8000670:	68fb      	ldr	r3, [r7, #12]
 8000672:	699b      	ldr	r3, [r3, #24]
 8000674:	4618      	mov	r0, r3
 8000676:	f004 fd29 	bl	80050cc <HAL_SPI_GetState>
 800067a:	4603      	mov	r3, r0
 800067c:	2b01      	cmp	r3, #1
 800067e:	d1f7      	bne.n	8000670 <LoRa_readReg+0x54>
		;
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_SET);
 8000680:	68fb      	ldr	r3, [r7, #12]
 8000682:	6818      	ldr	r0, [r3, #0]
 8000684:	68fb      	ldr	r3, [r7, #12]
 8000686:	889b      	ldrh	r3, [r3, #4]
 8000688:	2201      	movs	r2, #1
 800068a:	4619      	mov	r1, r3
 800068c:	f002 f99e 	bl	80029cc <HAL_GPIO_WritePin>
}
 8000690:	bf00      	nop
 8000692:	3710      	adds	r7, #16
 8000694:	46bd      	mov	sp, r7
 8000696:	bd80      	pop	{r7, pc}

08000698 <LoRa_writeReg>:
														you want to send
			uint8_t* output		--> pointer to the beginning of values array
			uint16_t w_length	--> detemines number of bytes that you want to send
		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_writeReg(LoRa* _LoRa, uint8_t* address, uint16_t r_length, uint8_t* values, uint16_t w_length){
 8000698:	b580      	push	{r7, lr}
 800069a:	b084      	sub	sp, #16
 800069c:	af00      	add	r7, sp, #0
 800069e:	60f8      	str	r0, [r7, #12]
 80006a0:	60b9      	str	r1, [r7, #8]
 80006a2:	603b      	str	r3, [r7, #0]
 80006a4:	4613      	mov	r3, r2
 80006a6:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_RESET);
 80006a8:	68fb      	ldr	r3, [r7, #12]
 80006aa:	6818      	ldr	r0, [r3, #0]
 80006ac:	68fb      	ldr	r3, [r7, #12]
 80006ae:	889b      	ldrh	r3, [r3, #4]
 80006b0:	2200      	movs	r2, #0
 80006b2:	4619      	mov	r1, r3
 80006b4:	f002 f98a 	bl	80029cc <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(_LoRa->hSPIx, address, r_length, TRANSMIT_TIMEOUT);
 80006b8:	68fb      	ldr	r3, [r7, #12]
 80006ba:	6998      	ldr	r0, [r3, #24]
 80006bc:	88fa      	ldrh	r2, [r7, #6]
 80006be:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80006c2:	68b9      	ldr	r1, [r7, #8]
 80006c4:	f004 f913 	bl	80048ee <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 80006c8:	bf00      	nop
 80006ca:	68fb      	ldr	r3, [r7, #12]
 80006cc:	699b      	ldr	r3, [r3, #24]
 80006ce:	4618      	mov	r0, r3
 80006d0:	f004 fcfc 	bl	80050cc <HAL_SPI_GetState>
 80006d4:	4603      	mov	r3, r0
 80006d6:	2b01      	cmp	r3, #1
 80006d8:	d1f7      	bne.n	80006ca <LoRa_writeReg+0x32>
		;
	HAL_SPI_Transmit(_LoRa->hSPIx, values, w_length, TRANSMIT_TIMEOUT);
 80006da:	68fb      	ldr	r3, [r7, #12]
 80006dc:	6998      	ldr	r0, [r3, #24]
 80006de:	8b3a      	ldrh	r2, [r7, #24]
 80006e0:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80006e4:	6839      	ldr	r1, [r7, #0]
 80006e6:	f004 f902 	bl	80048ee <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 80006ea:	bf00      	nop
 80006ec:	68fb      	ldr	r3, [r7, #12]
 80006ee:	699b      	ldr	r3, [r3, #24]
 80006f0:	4618      	mov	r0, r3
 80006f2:	f004 fceb 	bl	80050cc <HAL_SPI_GetState>
 80006f6:	4603      	mov	r3, r0
 80006f8:	2b01      	cmp	r3, #1
 80006fa:	d1f7      	bne.n	80006ec <LoRa_writeReg+0x54>
		;
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_SET);
 80006fc:	68fb      	ldr	r3, [r7, #12]
 80006fe:	6818      	ldr	r0, [r3, #0]
 8000700:	68fb      	ldr	r3, [r7, #12]
 8000702:	889b      	ldrh	r3, [r3, #4]
 8000704:	2201      	movs	r2, #1
 8000706:	4619      	mov	r1, r3
 8000708:	f002 f960 	bl	80029cc <HAL_GPIO_WritePin>
}
 800070c:	bf00      	nop
 800070e:	3710      	adds	r7, #16
 8000710:	46bd      	mov	sp, r7
 8000712:	bd80      	pop	{r7, pc}

08000714 <LoRa_setFrequency>:
		arguments   :
			LoRa* LoRa        --> LoRa object handler
			int   freq        --> desired frequency in MHz unit, e.g 434
		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setFrequency(LoRa* _LoRa, int freq){
 8000714:	b580      	push	{r7, lr}
 8000716:	b084      	sub	sp, #16
 8000718:	af00      	add	r7, sp, #0
 800071a:	6078      	str	r0, [r7, #4]
 800071c:	6039      	str	r1, [r7, #0]
	uint8_t  data;
	uint32_t F;
	F = (freq * 524288)>>5;
 800071e:	683b      	ldr	r3, [r7, #0]
 8000720:	04db      	lsls	r3, r3, #19
 8000722:	115b      	asrs	r3, r3, #5
 8000724:	60fb      	str	r3, [r7, #12]

	// write Msb:
	data = F >> 16;
 8000726:	68fb      	ldr	r3, [r7, #12]
 8000728:	0c1b      	lsrs	r3, r3, #16
 800072a:	72fb      	strb	r3, [r7, #11]
	LoRa_write(_LoRa, RegFrMsb, data);
 800072c:	7afb      	ldrb	r3, [r7, #11]
 800072e:	461a      	mov	r2, r3
 8000730:	2106      	movs	r1, #6
 8000732:	6878      	ldr	r0, [r7, #4]
 8000734:	f000 f8d3 	bl	80008de <LoRa_write>
	HAL_Delay(5);
 8000738:	2005      	movs	r0, #5
 800073a:	f001 fa73 	bl	8001c24 <HAL_Delay>

	// write Mid:
	data = F >> 8;
 800073e:	68fb      	ldr	r3, [r7, #12]
 8000740:	0a1b      	lsrs	r3, r3, #8
 8000742:	72fb      	strb	r3, [r7, #11]
	LoRa_write(_LoRa, RegFrMid, data);
 8000744:	7afb      	ldrb	r3, [r7, #11]
 8000746:	461a      	mov	r2, r3
 8000748:	2107      	movs	r1, #7
 800074a:	6878      	ldr	r0, [r7, #4]
 800074c:	f000 f8c7 	bl	80008de <LoRa_write>
	HAL_Delay(5);
 8000750:	2005      	movs	r0, #5
 8000752:	f001 fa67 	bl	8001c24 <HAL_Delay>

	// write Lsb:
	data = F >> 0;
 8000756:	68fb      	ldr	r3, [r7, #12]
 8000758:	72fb      	strb	r3, [r7, #11]
	LoRa_write(_LoRa, RegFrLsb, data);
 800075a:	7afb      	ldrb	r3, [r7, #11]
 800075c:	461a      	mov	r2, r3
 800075e:	2108      	movs	r1, #8
 8000760:	6878      	ldr	r0, [r7, #4]
 8000762:	f000 f8bc 	bl	80008de <LoRa_write>
	HAL_Delay(5);
 8000766:	2005      	movs	r0, #5
 8000768:	f001 fa5c 	bl	8001c24 <HAL_Delay>
}
 800076c:	bf00      	nop
 800076e:	3710      	adds	r7, #16
 8000770:	46bd      	mov	sp, r7
 8000772:	bd80      	pop	{r7, pc}

08000774 <LoRa_setSpreadingFactor>:
		arguments   :
			LoRa* LoRa        --> LoRa object handler
			int   SP          --> desired spreading factor e.g 7
		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setSpreadingFactor(LoRa* _LoRa, int SF){
 8000774:	b580      	push	{r7, lr}
 8000776:	b084      	sub	sp, #16
 8000778:	af00      	add	r7, sp, #0
 800077a:	6078      	str	r0, [r7, #4]
 800077c:	6039      	str	r1, [r7, #0]
	uint8_t	data;
	uint8_t	read;

	if(SF>12)
 800077e:	683b      	ldr	r3, [r7, #0]
 8000780:	2b0c      	cmp	r3, #12
 8000782:	dd01      	ble.n	8000788 <LoRa_setSpreadingFactor+0x14>
		SF = 12;
 8000784:	230c      	movs	r3, #12
 8000786:	603b      	str	r3, [r7, #0]
	if(SF<7)
 8000788:	683b      	ldr	r3, [r7, #0]
 800078a:	2b06      	cmp	r3, #6
 800078c:	dc01      	bgt.n	8000792 <LoRa_setSpreadingFactor+0x1e>
		SF = 7;
 800078e:	2307      	movs	r3, #7
 8000790:	603b      	str	r3, [r7, #0]

	read = LoRa_read(_LoRa, RegModemConfig2);
 8000792:	211e      	movs	r1, #30
 8000794:	6878      	ldr	r0, [r7, #4]
 8000796:	f000 f888 	bl	80008aa <LoRa_read>
 800079a:	4603      	mov	r3, r0
 800079c:	73fb      	strb	r3, [r7, #15]
	HAL_Delay(10);
 800079e:	200a      	movs	r0, #10
 80007a0:	f001 fa40 	bl	8001c24 <HAL_Delay>

	data = (SF << 4) + (read & 0x0F);
 80007a4:	683b      	ldr	r3, [r7, #0]
 80007a6:	b2db      	uxtb	r3, r3
 80007a8:	011b      	lsls	r3, r3, #4
 80007aa:	b2da      	uxtb	r2, r3
 80007ac:	7bfb      	ldrb	r3, [r7, #15]
 80007ae:	f003 030f 	and.w	r3, r3, #15
 80007b2:	b2db      	uxtb	r3, r3
 80007b4:	4413      	add	r3, r2
 80007b6:	73bb      	strb	r3, [r7, #14]
	LoRa_write(_LoRa, RegModemConfig2, data);
 80007b8:	7bbb      	ldrb	r3, [r7, #14]
 80007ba:	461a      	mov	r2, r3
 80007bc:	211e      	movs	r1, #30
 80007be:	6878      	ldr	r0, [r7, #4]
 80007c0:	f000 f88d 	bl	80008de <LoRa_write>
	HAL_Delay(10);
 80007c4:	200a      	movs	r0, #10
 80007c6:	f001 fa2d 	bl	8001c24 <HAL_Delay>
}
 80007ca:	bf00      	nop
 80007cc:	3710      	adds	r7, #16
 80007ce:	46bd      	mov	sp, r7
 80007d0:	bd80      	pop	{r7, pc}

080007d2 <LoRa_setPower>:
		arguments   :
			LoRa* LoRa        --> LoRa object handler
			int   power       --> desired power e.g POWER_17db
		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setPower(LoRa* _LoRa, uint8_t power){
 80007d2:	b580      	push	{r7, lr}
 80007d4:	b082      	sub	sp, #8
 80007d6:	af00      	add	r7, sp, #0
 80007d8:	6078      	str	r0, [r7, #4]
 80007da:	460b      	mov	r3, r1
 80007dc:	70fb      	strb	r3, [r7, #3]
	LoRa_write(_LoRa, RegPaConfig, power);
 80007de:	78fb      	ldrb	r3, [r7, #3]
 80007e0:	461a      	mov	r2, r3
 80007e2:	2109      	movs	r1, #9
 80007e4:	6878      	ldr	r0, [r7, #4]
 80007e6:	f000 f87a 	bl	80008de <LoRa_write>
	HAL_Delay(10);
 80007ea:	200a      	movs	r0, #10
 80007ec:	f001 fa1a 	bl	8001c24 <HAL_Delay>
}
 80007f0:	bf00      	nop
 80007f2:	3708      	adds	r7, #8
 80007f4:	46bd      	mov	sp, r7
 80007f6:	bd80      	pop	{r7, pc}

080007f8 <LoRa_setOCP>:
		arguments   :
			LoRa* LoRa        --> LoRa object handler
			int   current     --> desired max currnet in mA, e.g 120
		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setOCP(LoRa* _LoRa, uint8_t current){
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b084      	sub	sp, #16
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	6078      	str	r0, [r7, #4]
 8000800:	460b      	mov	r3, r1
 8000802:	70fb      	strb	r3, [r7, #3]
	uint8_t	OcpTrim = 0;
 8000804:	2300      	movs	r3, #0
 8000806:	73fb      	strb	r3, [r7, #15]

	if(current<45)
 8000808:	78fb      	ldrb	r3, [r7, #3]
 800080a:	2b2c      	cmp	r3, #44	; 0x2c
 800080c:	d801      	bhi.n	8000812 <LoRa_setOCP+0x1a>
		current = 45;
 800080e:	232d      	movs	r3, #45	; 0x2d
 8000810:	70fb      	strb	r3, [r7, #3]
	if(current>240)
 8000812:	78fb      	ldrb	r3, [r7, #3]
 8000814:	2bf0      	cmp	r3, #240	; 0xf0
 8000816:	d901      	bls.n	800081c <LoRa_setOCP+0x24>
		current = 240;
 8000818:	23f0      	movs	r3, #240	; 0xf0
 800081a:	70fb      	strb	r3, [r7, #3]

	if(current <= 120)
 800081c:	78fb      	ldrb	r3, [r7, #3]
 800081e:	2b78      	cmp	r3, #120	; 0x78
 8000820:	d809      	bhi.n	8000836 <LoRa_setOCP+0x3e>
		OcpTrim = (current - 45)/5;
 8000822:	78fb      	ldrb	r3, [r7, #3]
 8000824:	3b2d      	subs	r3, #45	; 0x2d
 8000826:	4a12      	ldr	r2, [pc, #72]	; (8000870 <LoRa_setOCP+0x78>)
 8000828:	fb82 1203 	smull	r1, r2, r2, r3
 800082c:	1052      	asrs	r2, r2, #1
 800082e:	17db      	asrs	r3, r3, #31
 8000830:	1ad3      	subs	r3, r2, r3
 8000832:	73fb      	strb	r3, [r7, #15]
 8000834:	e00b      	b.n	800084e <LoRa_setOCP+0x56>
	else if(current <= 240)
 8000836:	78fb      	ldrb	r3, [r7, #3]
 8000838:	2bf0      	cmp	r3, #240	; 0xf0
 800083a:	d808      	bhi.n	800084e <LoRa_setOCP+0x56>
		OcpTrim = (current + 30)/10;
 800083c:	78fb      	ldrb	r3, [r7, #3]
 800083e:	331e      	adds	r3, #30
 8000840:	4a0b      	ldr	r2, [pc, #44]	; (8000870 <LoRa_setOCP+0x78>)
 8000842:	fb82 1203 	smull	r1, r2, r2, r3
 8000846:	1092      	asrs	r2, r2, #2
 8000848:	17db      	asrs	r3, r3, #31
 800084a:	1ad3      	subs	r3, r2, r3
 800084c:	73fb      	strb	r3, [r7, #15]

	OcpTrim = OcpTrim + (1 << 5);
 800084e:	7bfb      	ldrb	r3, [r7, #15]
 8000850:	3320      	adds	r3, #32
 8000852:	73fb      	strb	r3, [r7, #15]
	LoRa_write(_LoRa, RegOcp, OcpTrim);
 8000854:	7bfb      	ldrb	r3, [r7, #15]
 8000856:	461a      	mov	r2, r3
 8000858:	210b      	movs	r1, #11
 800085a:	6878      	ldr	r0, [r7, #4]
 800085c:	f000 f83f 	bl	80008de <LoRa_write>
	HAL_Delay(10);
 8000860:	200a      	movs	r0, #10
 8000862:	f001 f9df 	bl	8001c24 <HAL_Delay>
}
 8000866:	bf00      	nop
 8000868:	3710      	adds	r7, #16
 800086a:	46bd      	mov	sp, r7
 800086c:	bd80      	pop	{r7, pc}
 800086e:	bf00      	nop
 8000870:	66666667 	.word	0x66666667

08000874 <LoRa_setTOMsb_setCRCon>:
		description : set timeout msb to 0xFF + set CRC enable.
		arguments   :
			LoRa* LoRa        --> LoRa object handler
		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setTOMsb_setCRCon(LoRa* _LoRa){
 8000874:	b580      	push	{r7, lr}
 8000876:	b084      	sub	sp, #16
 8000878:	af00      	add	r7, sp, #0
 800087a:	6078      	str	r0, [r7, #4]
	uint8_t read, data;

	read = LoRa_read(_LoRa, RegModemConfig2);
 800087c:	211e      	movs	r1, #30
 800087e:	6878      	ldr	r0, [r7, #4]
 8000880:	f000 f813 	bl	80008aa <LoRa_read>
 8000884:	4603      	mov	r3, r0
 8000886:	73fb      	strb	r3, [r7, #15]

	data = read | 0x07;
 8000888:	7bfb      	ldrb	r3, [r7, #15]
 800088a:	f043 0307 	orr.w	r3, r3, #7
 800088e:	73bb      	strb	r3, [r7, #14]
	LoRa_write(_LoRa, RegModemConfig2, data);\
 8000890:	7bbb      	ldrb	r3, [r7, #14]
 8000892:	461a      	mov	r2, r3
 8000894:	211e      	movs	r1, #30
 8000896:	6878      	ldr	r0, [r7, #4]
 8000898:	f000 f821 	bl	80008de <LoRa_write>
	HAL_Delay(10);
 800089c:	200a      	movs	r0, #10
 800089e:	f001 f9c1 	bl	8001c24 <HAL_Delay>
}
 80008a2:	bf00      	nop
 80008a4:	3710      	adds	r7, #16
 80008a6:	46bd      	mov	sp, r7
 80008a8:	bd80      	pop	{r7, pc}

080008aa <LoRa_read>:
		arguments   :
			LoRa*   LoRa        --> LoRa object handler
			uint8_t address     -->	address of the register e.g 0x1D
		returns     : register value
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_read(LoRa* _LoRa, uint8_t address){
 80008aa:	b580      	push	{r7, lr}
 80008ac:	b086      	sub	sp, #24
 80008ae:	af02      	add	r7, sp, #8
 80008b0:	6078      	str	r0, [r7, #4]
 80008b2:	460b      	mov	r3, r1
 80008b4:	70fb      	strb	r3, [r7, #3]
	uint8_t read_data;
	uint8_t data_addr;

	data_addr = address & 0x7F;
 80008b6:	78fb      	ldrb	r3, [r7, #3]
 80008b8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80008bc:	b2db      	uxtb	r3, r3
 80008be:	73bb      	strb	r3, [r7, #14]
	LoRa_readReg(_LoRa, &data_addr, 1, &read_data, 1);
 80008c0:	f107 030f 	add.w	r3, r7, #15
 80008c4:	f107 010e 	add.w	r1, r7, #14
 80008c8:	2201      	movs	r2, #1
 80008ca:	9200      	str	r2, [sp, #0]
 80008cc:	2201      	movs	r2, #1
 80008ce:	6878      	ldr	r0, [r7, #4]
 80008d0:	f7ff fea4 	bl	800061c <LoRa_readReg>
	//HAL_Delay(5);

	return read_data;
 80008d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80008d6:	4618      	mov	r0, r3
 80008d8:	3710      	adds	r7, #16
 80008da:	46bd      	mov	sp, r7
 80008dc:	bd80      	pop	{r7, pc}

080008de <LoRa_write>:
			LoRa*   LoRa        --> LoRa object handler
			uint8_t address     -->	address of the register e.g 0x1D
			uint8_t value       --> value that you want to write
		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_write(LoRa* _LoRa, uint8_t address, uint8_t value){
 80008de:	b580      	push	{r7, lr}
 80008e0:	b086      	sub	sp, #24
 80008e2:	af02      	add	r7, sp, #8
 80008e4:	6078      	str	r0, [r7, #4]
 80008e6:	460b      	mov	r3, r1
 80008e8:	70fb      	strb	r3, [r7, #3]
 80008ea:	4613      	mov	r3, r2
 80008ec:	70bb      	strb	r3, [r7, #2]
	uint8_t data;
	uint8_t addr;

	addr = address | 0x80;
 80008ee:	78fb      	ldrb	r3, [r7, #3]
 80008f0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80008f4:	b2db      	uxtb	r3, r3
 80008f6:	73bb      	strb	r3, [r7, #14]
	data = value;
 80008f8:	78bb      	ldrb	r3, [r7, #2]
 80008fa:	73fb      	strb	r3, [r7, #15]
	LoRa_writeReg(_LoRa, &addr, 1, &data, 1);
 80008fc:	f107 030f 	add.w	r3, r7, #15
 8000900:	f107 010e 	add.w	r1, r7, #14
 8000904:	2201      	movs	r2, #1
 8000906:	9200      	str	r2, [sp, #0]
 8000908:	2201      	movs	r2, #1
 800090a:	6878      	ldr	r0, [r7, #4]
 800090c:	f7ff fec4 	bl	8000698 <LoRa_writeReg>
	//HAL_Delay(5);
}
 8000910:	bf00      	nop
 8000912:	3710      	adds	r7, #16
 8000914:	46bd      	mov	sp, r7
 8000916:	bd80      	pop	{r7, pc}

08000918 <LoRa_BurstWrite>:
			LoRa*   LoRa        --> LoRa object handler
			uint8_t address     -->	address of the register e.g 0x1D
			uint8_t *value      --> address of values that you want to write
		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_BurstWrite(LoRa* _LoRa, uint8_t address, uint8_t *value, uint8_t length){
 8000918:	b580      	push	{r7, lr}
 800091a:	b086      	sub	sp, #24
 800091c:	af00      	add	r7, sp, #0
 800091e:	60f8      	str	r0, [r7, #12]
 8000920:	607a      	str	r2, [r7, #4]
 8000922:	461a      	mov	r2, r3
 8000924:	460b      	mov	r3, r1
 8000926:	72fb      	strb	r3, [r7, #11]
 8000928:	4613      	mov	r3, r2
 800092a:	72bb      	strb	r3, [r7, #10]
	uint8_t addr;
	addr = address | 0x80;
 800092c:	7afb      	ldrb	r3, [r7, #11]
 800092e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000932:	b2db      	uxtb	r3, r3
 8000934:	75fb      	strb	r3, [r7, #23]

	//NSS = 1
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_RESET);
 8000936:	68fb      	ldr	r3, [r7, #12]
 8000938:	6818      	ldr	r0, [r3, #0]
 800093a:	68fb      	ldr	r3, [r7, #12]
 800093c:	889b      	ldrh	r3, [r3, #4]
 800093e:	2200      	movs	r2, #0
 8000940:	4619      	mov	r1, r3
 8000942:	f002 f843 	bl	80029cc <HAL_GPIO_WritePin>
	//say module thai I want to write in RegFiFo
	HAL_SPI_Transmit(_LoRa->hSPIx, &addr, 1, TRANSMIT_TIMEOUT);
 8000946:	68fb      	ldr	r3, [r7, #12]
 8000948:	6998      	ldr	r0, [r3, #24]
 800094a:	f107 0117 	add.w	r1, r7, #23
 800094e:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000952:	2201      	movs	r2, #1
 8000954:	f003 ffcb 	bl	80048ee <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8000958:	bf00      	nop
 800095a:	68fb      	ldr	r3, [r7, #12]
 800095c:	699b      	ldr	r3, [r3, #24]
 800095e:	4618      	mov	r0, r3
 8000960:	f004 fbb4 	bl	80050cc <HAL_SPI_GetState>
 8000964:	4603      	mov	r3, r0
 8000966:	2b01      	cmp	r3, #1
 8000968:	d1f7      	bne.n	800095a <LoRa_BurstWrite+0x42>
		;
	//Write data in FiFo
	HAL_SPI_Transmit(_LoRa->hSPIx, value, length, TRANSMIT_TIMEOUT);
 800096a:	68fb      	ldr	r3, [r7, #12]
 800096c:	6998      	ldr	r0, [r3, #24]
 800096e:	7abb      	ldrb	r3, [r7, #10]
 8000970:	b29a      	uxth	r2, r3
 8000972:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000976:	6879      	ldr	r1, [r7, #4]
 8000978:	f003 ffb9 	bl	80048ee <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 800097c:	bf00      	nop
 800097e:	68fb      	ldr	r3, [r7, #12]
 8000980:	699b      	ldr	r3, [r3, #24]
 8000982:	4618      	mov	r0, r3
 8000984:	f004 fba2 	bl	80050cc <HAL_SPI_GetState>
 8000988:	4603      	mov	r3, r0
 800098a:	2b01      	cmp	r3, #1
 800098c:	d1f7      	bne.n	800097e <LoRa_BurstWrite+0x66>
		;
	//NSS = 0
	//HAL_Delay(5);
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_SET);
 800098e:	68fb      	ldr	r3, [r7, #12]
 8000990:	6818      	ldr	r0, [r3, #0]
 8000992:	68fb      	ldr	r3, [r7, #12]
 8000994:	889b      	ldrh	r3, [r3, #4]
 8000996:	2201      	movs	r2, #1
 8000998:	4619      	mov	r1, r3
 800099a:	f002 f817 	bl	80029cc <HAL_GPIO_WritePin>
}
 800099e:	bf00      	nop
 80009a0:	3718      	adds	r7, #24
 80009a2:	46bd      	mov	sp, r7
 80009a4:	bd80      	pop	{r7, pc}

080009a6 <LoRa_isvalid>:
		description : check the LoRa instruct values
		arguments   :
			LoRa* LoRa --> LoRa object handler
		returns     : returns 1 if all of the values were given, otherwise returns 0
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_isvalid(LoRa* _LoRa){
 80009a6:	b480      	push	{r7}
 80009a8:	b083      	sub	sp, #12
 80009aa:	af00      	add	r7, sp, #0
 80009ac:	6078      	str	r0, [r7, #4]

	return 1;
 80009ae:	2301      	movs	r3, #1
}
 80009b0:	4618      	mov	r0, r3
 80009b2:	370c      	adds	r7, #12
 80009b4:	46bd      	mov	sp, r7
 80009b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ba:	4770      	bx	lr

080009bc <LoRa_transmit>:
			uint8_t  data			--> A pointer to the data you wanna send
			uint8_t	 length   --> Size of your data in Bytes
			uint16_t timeOut	--> Timeout in milliseconds
		returns     : 1 in case of success, 0 in case of timeout
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_transmit(LoRa* _LoRa, uint8_t* data, uint8_t length, uint16_t timeout){
 80009bc:	b580      	push	{r7, lr}
 80009be:	b086      	sub	sp, #24
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	60f8      	str	r0, [r7, #12]
 80009c4:	60b9      	str	r1, [r7, #8]
 80009c6:	4611      	mov	r1, r2
 80009c8:	461a      	mov	r2, r3
 80009ca:	460b      	mov	r3, r1
 80009cc:	71fb      	strb	r3, [r7, #7]
 80009ce:	4613      	mov	r3, r2
 80009d0:	80bb      	strh	r3, [r7, #4]
	uint8_t read;

	int mode = _LoRa->current_mode;
 80009d2:	68fb      	ldr	r3, [r7, #12]
 80009d4:	69db      	ldr	r3, [r3, #28]
 80009d6:	617b      	str	r3, [r7, #20]
	LoRa_gotoMode(_LoRa, STNBY_MODE);
 80009d8:	2101      	movs	r1, #1
 80009da:	68f8      	ldr	r0, [r7, #12]
 80009dc:	f7ff fdbd 	bl	800055a <LoRa_gotoMode>
	read = LoRa_read(_LoRa, RegFiFoTxBaseAddr);
 80009e0:	210e      	movs	r1, #14
 80009e2:	68f8      	ldr	r0, [r7, #12]
 80009e4:	f7ff ff61 	bl	80008aa <LoRa_read>
 80009e8:	4603      	mov	r3, r0
 80009ea:	74fb      	strb	r3, [r7, #19]
	LoRa_write(_LoRa, RegFiFoAddPtr, read);
 80009ec:	7cfb      	ldrb	r3, [r7, #19]
 80009ee:	461a      	mov	r2, r3
 80009f0:	210d      	movs	r1, #13
 80009f2:	68f8      	ldr	r0, [r7, #12]
 80009f4:	f7ff ff73 	bl	80008de <LoRa_write>
	LoRa_write(_LoRa, RegPayloadLength, length);
 80009f8:	79fb      	ldrb	r3, [r7, #7]
 80009fa:	461a      	mov	r2, r3
 80009fc:	2122      	movs	r1, #34	; 0x22
 80009fe:	68f8      	ldr	r0, [r7, #12]
 8000a00:	f7ff ff6d 	bl	80008de <LoRa_write>
	LoRa_BurstWrite(_LoRa, RegFiFo, data, length);
 8000a04:	79fb      	ldrb	r3, [r7, #7]
 8000a06:	68ba      	ldr	r2, [r7, #8]
 8000a08:	2100      	movs	r1, #0
 8000a0a:	68f8      	ldr	r0, [r7, #12]
 8000a0c:	f7ff ff84 	bl	8000918 <LoRa_BurstWrite>
	LoRa_gotoMode(_LoRa, TRANSMIT_MODE);
 8000a10:	2103      	movs	r1, #3
 8000a12:	68f8      	ldr	r0, [r7, #12]
 8000a14:	f7ff fda1 	bl	800055a <LoRa_gotoMode>
	while(1){
		read = LoRa_read(_LoRa, RegIrqFlags);
 8000a18:	2112      	movs	r1, #18
 8000a1a:	68f8      	ldr	r0, [r7, #12]
 8000a1c:	f7ff ff45 	bl	80008aa <LoRa_read>
 8000a20:	4603      	mov	r3, r0
 8000a22:	74fb      	strb	r3, [r7, #19]
		if((read & 0x08)!=0){
 8000a24:	7cfb      	ldrb	r3, [r7, #19]
 8000a26:	f003 0308 	and.w	r3, r3, #8
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d00a      	beq.n	8000a44 <LoRa_transmit+0x88>
			LoRa_write(_LoRa, RegIrqFlags, 0xFF);
 8000a2e:	22ff      	movs	r2, #255	; 0xff
 8000a30:	2112      	movs	r1, #18
 8000a32:	68f8      	ldr	r0, [r7, #12]
 8000a34:	f7ff ff53 	bl	80008de <LoRa_write>
			LoRa_gotoMode(_LoRa, mode);
 8000a38:	6979      	ldr	r1, [r7, #20]
 8000a3a:	68f8      	ldr	r0, [r7, #12]
 8000a3c:	f7ff fd8d 	bl	800055a <LoRa_gotoMode>
			return 1;
 8000a40:	2301      	movs	r3, #1
 8000a42:	e00f      	b.n	8000a64 <LoRa_transmit+0xa8>
		}
		else{
			if(--timeout==0){
 8000a44:	88bb      	ldrh	r3, [r7, #4]
 8000a46:	3b01      	subs	r3, #1
 8000a48:	80bb      	strh	r3, [r7, #4]
 8000a4a:	88bb      	ldrh	r3, [r7, #4]
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d105      	bne.n	8000a5c <LoRa_transmit+0xa0>
				LoRa_gotoMode(_LoRa, mode);
 8000a50:	6979      	ldr	r1, [r7, #20]
 8000a52:	68f8      	ldr	r0, [r7, #12]
 8000a54:	f7ff fd81 	bl	800055a <LoRa_gotoMode>
				return 0;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	e003      	b.n	8000a64 <LoRa_transmit+0xa8>
			}
		}
		HAL_Delay(1);
 8000a5c:	2001      	movs	r0, #1
 8000a5e:	f001 f8e1 	bl	8001c24 <HAL_Delay>
		read = LoRa_read(_LoRa, RegIrqFlags);
 8000a62:	e7d9      	b.n	8000a18 <LoRa_transmit+0x5c>
	}

}
 8000a64:	4618      	mov	r0, r3
 8000a66:	3718      	adds	r7, #24
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	bd80      	pop	{r7, pc}

08000a6c <LoRa_startReceiving>:
		description : Start receiving continuously
		arguments   :
			LoRa*    LoRa     --> LoRa object handler
		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_startReceiving(LoRa* _LoRa){
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b082      	sub	sp, #8
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	6078      	str	r0, [r7, #4]
	LoRa_gotoMode(_LoRa, RXCONTIN_MODE);
 8000a74:	2105      	movs	r1, #5
 8000a76:	6878      	ldr	r0, [r7, #4]
 8000a78:	f7ff fd6f 	bl	800055a <LoRa_gotoMode>
}
 8000a7c:	bf00      	nop
 8000a7e:	3708      	adds	r7, #8
 8000a80:	46bd      	mov	sp, r7
 8000a82:	bd80      	pop	{r7, pc}

08000a84 <LoRa_receive>:
			LoRa*    LoRa     --> LoRa object handler
			uint8_t  data			--> A pointer to the array that you want to write bytes in it
			uint8_t	 length   --> Determines how many bytes you want to read
		returns     : The number of bytes received
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_receive(LoRa* _LoRa, uint8_t* data, uint8_t length){
 8000a84:	b590      	push	{r4, r7, lr}
 8000a86:	b089      	sub	sp, #36	; 0x24
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	60f8      	str	r0, [r7, #12]
 8000a8c:	60b9      	str	r1, [r7, #8]
 8000a8e:	4613      	mov	r3, r2
 8000a90:	71fb      	strb	r3, [r7, #7]
	uint8_t read;
	uint8_t number_of_bytes;
	uint8_t min = 0;
 8000a92:	2300      	movs	r3, #0
 8000a94:	77fb      	strb	r3, [r7, #31]

	for(int i=0; i<length; i++)
 8000a96:	2300      	movs	r3, #0
 8000a98:	61bb      	str	r3, [r7, #24]
 8000a9a:	e007      	b.n	8000aac <LoRa_receive+0x28>
		data[i]=0;
 8000a9c:	69bb      	ldr	r3, [r7, #24]
 8000a9e:	68ba      	ldr	r2, [r7, #8]
 8000aa0:	4413      	add	r3, r2
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	701a      	strb	r2, [r3, #0]
	for(int i=0; i<length; i++)
 8000aa6:	69bb      	ldr	r3, [r7, #24]
 8000aa8:	3301      	adds	r3, #1
 8000aaa:	61bb      	str	r3, [r7, #24]
 8000aac:	79fb      	ldrb	r3, [r7, #7]
 8000aae:	69ba      	ldr	r2, [r7, #24]
 8000ab0:	429a      	cmp	r2, r3
 8000ab2:	dbf3      	blt.n	8000a9c <LoRa_receive+0x18>

	LoRa_gotoMode(_LoRa, STNBY_MODE);
 8000ab4:	2101      	movs	r1, #1
 8000ab6:	68f8      	ldr	r0, [r7, #12]
 8000ab8:	f7ff fd4f 	bl	800055a <LoRa_gotoMode>
	read = LoRa_read(_LoRa, RegIrqFlags);
 8000abc:	2112      	movs	r1, #18
 8000abe:	68f8      	ldr	r0, [r7, #12]
 8000ac0:	f7ff fef3 	bl	80008aa <LoRa_read>
 8000ac4:	4603      	mov	r3, r0
 8000ac6:	74fb      	strb	r3, [r7, #19]
	if((read & 0x40) != 0){
 8000ac8:	7cfb      	ldrb	r3, [r7, #19]
 8000aca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d02f      	beq.n	8000b32 <LoRa_receive+0xae>
		LoRa_write(_LoRa, RegIrqFlags, 0xFF);
 8000ad2:	22ff      	movs	r2, #255	; 0xff
 8000ad4:	2112      	movs	r1, #18
 8000ad6:	68f8      	ldr	r0, [r7, #12]
 8000ad8:	f7ff ff01 	bl	80008de <LoRa_write>
		number_of_bytes = LoRa_read(_LoRa, RegRxNbBytes);
 8000adc:	2113      	movs	r1, #19
 8000ade:	68f8      	ldr	r0, [r7, #12]
 8000ae0:	f7ff fee3 	bl	80008aa <LoRa_read>
 8000ae4:	4603      	mov	r3, r0
 8000ae6:	74bb      	strb	r3, [r7, #18]
		read = LoRa_read(_LoRa, RegFiFoRxCurrentAddr);
 8000ae8:	2110      	movs	r1, #16
 8000aea:	68f8      	ldr	r0, [r7, #12]
 8000aec:	f7ff fedd 	bl	80008aa <LoRa_read>
 8000af0:	4603      	mov	r3, r0
 8000af2:	74fb      	strb	r3, [r7, #19]
		LoRa_write(_LoRa, RegFiFoAddPtr, read);
 8000af4:	7cfb      	ldrb	r3, [r7, #19]
 8000af6:	461a      	mov	r2, r3
 8000af8:	210d      	movs	r1, #13
 8000afa:	68f8      	ldr	r0, [r7, #12]
 8000afc:	f7ff feef 	bl	80008de <LoRa_write>
		min = length >= number_of_bytes ? number_of_bytes : length;
 8000b00:	7cba      	ldrb	r2, [r7, #18]
 8000b02:	79fb      	ldrb	r3, [r7, #7]
 8000b04:	4293      	cmp	r3, r2
 8000b06:	bf28      	it	cs
 8000b08:	4613      	movcs	r3, r2
 8000b0a:	77fb      	strb	r3, [r7, #31]
		for(int i=0; i<min; i++)
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	617b      	str	r3, [r7, #20]
 8000b10:	e00b      	b.n	8000b2a <LoRa_receive+0xa6>
			data[i] = LoRa_read(_LoRa, RegFiFo);
 8000b12:	697b      	ldr	r3, [r7, #20]
 8000b14:	68ba      	ldr	r2, [r7, #8]
 8000b16:	18d4      	adds	r4, r2, r3
 8000b18:	2100      	movs	r1, #0
 8000b1a:	68f8      	ldr	r0, [r7, #12]
 8000b1c:	f7ff fec5 	bl	80008aa <LoRa_read>
 8000b20:	4603      	mov	r3, r0
 8000b22:	7023      	strb	r3, [r4, #0]
		for(int i=0; i<min; i++)
 8000b24:	697b      	ldr	r3, [r7, #20]
 8000b26:	3301      	adds	r3, #1
 8000b28:	617b      	str	r3, [r7, #20]
 8000b2a:	7ffb      	ldrb	r3, [r7, #31]
 8000b2c:	697a      	ldr	r2, [r7, #20]
 8000b2e:	429a      	cmp	r2, r3
 8000b30:	dbef      	blt.n	8000b12 <LoRa_receive+0x8e>
	}
	LoRa_gotoMode(_LoRa, RXCONTIN_MODE);
 8000b32:	2105      	movs	r1, #5
 8000b34:	68f8      	ldr	r0, [r7, #12]
 8000b36:	f7ff fd10 	bl	800055a <LoRa_gotoMode>
    return min;
 8000b3a:	7ffb      	ldrb	r3, [r7, #31]
}
 8000b3c:	4618      	mov	r0, r3
 8000b3e:	3724      	adds	r7, #36	; 0x24
 8000b40:	46bd      	mov	sp, r7
 8000b42:	bd90      	pop	{r4, r7, pc}

08000b44 <LoRa_init>:
		description : initialize and set the right setting according to LoRa sruct vars
		arguments   :
			LoRa* LoRa        --> LoRa object handler
		returns     : Nothing
\* ----------------------------------------------------------------------------- */
uint16_t LoRa_init(LoRa* _LoRa){
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b084      	sub	sp, #16
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	6078      	str	r0, [r7, #4]
	uint8_t    data;
	uint8_t    read;

	if(LoRa_isvalid(_LoRa)){
 8000b4c:	6878      	ldr	r0, [r7, #4]
 8000b4e:	f7ff ff2a 	bl	80009a6 <LoRa_isvalid>
 8000b52:	4603      	mov	r3, r0
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	f000 8093 	beq.w	8000c80 <LoRa_init+0x13c>
		// goto sleep mode:
			LoRa_gotoMode(_LoRa, SLEEP_MODE);
 8000b5a:	2100      	movs	r1, #0
 8000b5c:	6878      	ldr	r0, [r7, #4]
 8000b5e:	f7ff fcfc 	bl	800055a <LoRa_gotoMode>
			HAL_Delay(10);
 8000b62:	200a      	movs	r0, #10
 8000b64:	f001 f85e 	bl	8001c24 <HAL_Delay>

		// turn on lora mode:
			read = LoRa_read(_LoRa, RegOpMode);
 8000b68:	2101      	movs	r1, #1
 8000b6a:	6878      	ldr	r0, [r7, #4]
 8000b6c:	f7ff fe9d 	bl	80008aa <LoRa_read>
 8000b70:	4603      	mov	r3, r0
 8000b72:	73fb      	strb	r3, [r7, #15]
			HAL_Delay(10);
 8000b74:	200a      	movs	r0, #10
 8000b76:	f001 f855 	bl	8001c24 <HAL_Delay>
			data = read | 0x80;
 8000b7a:	7bfb      	ldrb	r3, [r7, #15]
 8000b7c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000b80:	73bb      	strb	r3, [r7, #14]
			LoRa_write(_LoRa, RegOpMode, data);
 8000b82:	7bbb      	ldrb	r3, [r7, #14]
 8000b84:	461a      	mov	r2, r3
 8000b86:	2101      	movs	r1, #1
 8000b88:	6878      	ldr	r0, [r7, #4]
 8000b8a:	f7ff fea8 	bl	80008de <LoRa_write>
			HAL_Delay(100);
 8000b8e:	2064      	movs	r0, #100	; 0x64
 8000b90:	f001 f848 	bl	8001c24 <HAL_Delay>

		// set frequency:
			LoRa_setFrequency(_LoRa, _LoRa->frequency);
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	6a1b      	ldr	r3, [r3, #32]
 8000b98:	4619      	mov	r1, r3
 8000b9a:	6878      	ldr	r0, [r7, #4]
 8000b9c:	f7ff fdba 	bl	8000714 <LoRa_setFrequency>

		// set output power gain:
			LoRa_setPower(_LoRa, _LoRa->power);
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8000ba6:	4619      	mov	r1, r3
 8000ba8:	6878      	ldr	r0, [r7, #4]
 8000baa:	f7ff fe12 	bl	80007d2 <LoRa_setPower>

		// set over current protection:
			LoRa_setOCP(_LoRa, _LoRa->overCurrentProtection);
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8000bb4:	4619      	mov	r1, r3
 8000bb6:	6878      	ldr	r0, [r7, #4]
 8000bb8:	f7ff fe1e 	bl	80007f8 <LoRa_setOCP>

		// set LNA gain:
			LoRa_write(_LoRa, RegLna, 0x23);
 8000bbc:	2223      	movs	r2, #35	; 0x23
 8000bbe:	210c      	movs	r1, #12
 8000bc0:	6878      	ldr	r0, [r7, #4]
 8000bc2:	f7ff fe8c 	bl	80008de <LoRa_write>

		// set spreading factor, CRC on, and Timeout Msb:
			LoRa_setTOMsb_setCRCon(_LoRa);
 8000bc6:	6878      	ldr	r0, [r7, #4]
 8000bc8:	f7ff fe54 	bl	8000874 <LoRa_setTOMsb_setCRCon>
			LoRa_setSpreadingFactor(_LoRa, _LoRa->spredingFactor);
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000bd2:	4619      	mov	r1, r3
 8000bd4:	6878      	ldr	r0, [r7, #4]
 8000bd6:	f7ff fdcd 	bl	8000774 <LoRa_setSpreadingFactor>

		// set Timeout Lsb:
			LoRa_write(_LoRa, RegSymbTimeoutL, 0xFF);
 8000bda:	22ff      	movs	r2, #255	; 0xff
 8000bdc:	211f      	movs	r1, #31
 8000bde:	6878      	ldr	r0, [r7, #4]
 8000be0:	f7ff fe7d 	bl	80008de <LoRa_write>

		// set bandwidth, coding rate and expilicit mode:
			// 8 bit RegModemConfig --> | X | X | X | X | X | X | X | X |
			//       bits represent --> |   bandwidth   |     CR    |I/E|
			data = 0;
 8000be4:	2300      	movs	r3, #0
 8000be6:	73bb      	strb	r3, [r7, #14]
			data = (_LoRa->bandWidth << 4) + (_LoRa->crcRate << 1);
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000bee:	011b      	lsls	r3, r3, #4
 8000bf0:	b2da      	uxtb	r2, r3
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8000bf8:	005b      	lsls	r3, r3, #1
 8000bfa:	b2db      	uxtb	r3, r3
 8000bfc:	4413      	add	r3, r2
 8000bfe:	73bb      	strb	r3, [r7, #14]
			LoRa_write(_LoRa, RegModemConfig1, data);
 8000c00:	7bbb      	ldrb	r3, [r7, #14]
 8000c02:	461a      	mov	r2, r3
 8000c04:	211d      	movs	r1, #29
 8000c06:	6878      	ldr	r0, [r7, #4]
 8000c08:	f7ff fe69 	bl	80008de <LoRa_write>

		// set preamble:
			LoRa_write(_LoRa, RegPreambleMsb, _LoRa->preamble >> 8);
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000c10:	0a1b      	lsrs	r3, r3, #8
 8000c12:	b29b      	uxth	r3, r3
 8000c14:	b2db      	uxtb	r3, r3
 8000c16:	461a      	mov	r2, r3
 8000c18:	2120      	movs	r1, #32
 8000c1a:	6878      	ldr	r0, [r7, #4]
 8000c1c:	f7ff fe5f 	bl	80008de <LoRa_write>
			LoRa_write(_LoRa, RegPreambleLsb, _LoRa->preamble >> 0);
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000c24:	b2db      	uxtb	r3, r3
 8000c26:	461a      	mov	r2, r3
 8000c28:	2121      	movs	r1, #33	; 0x21
 8000c2a:	6878      	ldr	r0, [r7, #4]
 8000c2c:	f7ff fe57 	bl	80008de <LoRa_write>

		// DIO mapping:   --> DIO: RxDone
			read = LoRa_read(_LoRa, RegDioMapping1);
 8000c30:	2140      	movs	r1, #64	; 0x40
 8000c32:	6878      	ldr	r0, [r7, #4]
 8000c34:	f7ff fe39 	bl	80008aa <LoRa_read>
 8000c38:	4603      	mov	r3, r0
 8000c3a:	73fb      	strb	r3, [r7, #15]
			data = read | 0x3F;
 8000c3c:	7bfb      	ldrb	r3, [r7, #15]
 8000c3e:	f043 033f 	orr.w	r3, r3, #63	; 0x3f
 8000c42:	73bb      	strb	r3, [r7, #14]
			LoRa_write(_LoRa, RegDioMapping1, data);
 8000c44:	7bbb      	ldrb	r3, [r7, #14]
 8000c46:	461a      	mov	r2, r3
 8000c48:	2140      	movs	r1, #64	; 0x40
 8000c4a:	6878      	ldr	r0, [r7, #4]
 8000c4c:	f7ff fe47 	bl	80008de <LoRa_write>

		// goto standby mode:
			LoRa_gotoMode(_LoRa, STNBY_MODE);
 8000c50:	2101      	movs	r1, #1
 8000c52:	6878      	ldr	r0, [r7, #4]
 8000c54:	f7ff fc81 	bl	800055a <LoRa_gotoMode>
			_LoRa->current_mode = STNBY_MODE;
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	2201      	movs	r2, #1
 8000c5c:	61da      	str	r2, [r3, #28]
			HAL_Delay(10);
 8000c5e:	200a      	movs	r0, #10
 8000c60:	f000 ffe0 	bl	8001c24 <HAL_Delay>

			read = LoRa_read(_LoRa, RegVersion);
 8000c64:	2142      	movs	r1, #66	; 0x42
 8000c66:	6878      	ldr	r0, [r7, #4]
 8000c68:	f7ff fe1f 	bl	80008aa <LoRa_read>
 8000c6c:	4603      	mov	r3, r0
 8000c6e:	73fb      	strb	r3, [r7, #15]
			if(read == 0x12)
 8000c70:	7bfb      	ldrb	r3, [r7, #15]
 8000c72:	2b12      	cmp	r3, #18
 8000c74:	d101      	bne.n	8000c7a <LoRa_init+0x136>
				return LORA_OK;
 8000c76:	23c8      	movs	r3, #200	; 0xc8
 8000c78:	e004      	b.n	8000c84 <LoRa_init+0x140>
			else
				return LORA_NOT_FOUND;
 8000c7a:	f44f 73ca 	mov.w	r3, #404	; 0x194
 8000c7e:	e001      	b.n	8000c84 <LoRa_init+0x140>
	}
	else {
		return LORA_UNAVAILABLE;
 8000c80:	f240 13f7 	movw	r3, #503	; 0x1f7
	}
}
 8000c84:	4618      	mov	r0, r3
 8000c86:	3710      	adds	r7, #16
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	bd80      	pop	{r7, pc}

08000c8c <LoRa_received_bytes>:
		description : check number of bytes available in FIFO RX buffer
		arguments   :
			LoRa* LoRa        --> LoRa object handler
		returns     : 8 bit integer, number of bytes available to read from FIFO RX buffer
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_received_bytes(LoRa* _LoRa) {
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b082      	sub	sp, #8
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]
	return LoRa_read(_LoRa, RegRxNbBytes);
 8000c94:	2113      	movs	r1, #19
 8000c96:	6878      	ldr	r0, [r7, #4]
 8000c98:	f7ff fe07 	bl	80008aa <LoRa_read>
 8000c9c:	4603      	mov	r3, r0
}
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	3708      	adds	r7, #8
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bd80      	pop	{r7, pc}
	...

08000ca8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ca8:	b5b0      	push	{r4, r5, r7, lr}
 8000caa:	f5ad 7d0e 	sub.w	sp, sp, #568	; 0x238
 8000cae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  RetargetInit(USB_UART);
 8000cb0:	4b80      	ldr	r3, [pc, #512]	; (8000eb4 <main+0x20c>)
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	f000 fc5d 	bl	8001574 <RetargetInit>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000cba:	f000 ff41 	bl	8001b40 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000cbe:	f000 f99b 	bl	8000ff8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */
  //***************************** DMA MUST INIT BEFORE UART ***********************
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000cc2:	f000 fafb 	bl	80012bc <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000cc6:	f000 fa85 	bl	80011d4 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000cca:	f000 faad 	bl	8001228 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 8000cce:	f000 f9fd 	bl	80010cc <MX_SPI1_Init>
  MX_DMA_Init();
 8000cd2:	f000 fad3 	bl	800127c <MX_DMA_Init>
  MX_TIM2_Init();
 8000cd6:	f000 fa2f 	bl	8001138 <MX_TIM2_Init>
  MX_USB_DEVICE_Init();
 8000cda:	f009 fe67 	bl	800a9ac <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */

  // Polling timer init
  HAL_TIM_Base_Start_IT(Poll_Timer);
 8000cde:	4b76      	ldr	r3, [pc, #472]	; (8000eb8 <main+0x210>)
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	f004 fb80 	bl	80053e8 <HAL_TIM_Base_Start_IT>
  // UART interrupt init
  HAL_UART_Receive_DMA (USB_UART, UART_Buff, sizeof(UART_Buff));
 8000ce8:	4b72      	ldr	r3, [pc, #456]	; (8000eb4 <main+0x20c>)
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8000cf0:	4972      	ldr	r1, [pc, #456]	; (8000ebc <main+0x214>)
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	f005 f92b 	bl	8005f4e <HAL_UART_Receive_DMA>

  // LoRa Class definitions
  LoRaClass = newLoRa();
 8000cf8:	4c71      	ldr	r4, [pc, #452]	; (8000ec0 <main+0x218>)
 8000cfa:	463b      	mov	r3, r7
 8000cfc:	4618      	mov	r0, r3
 8000cfe:	f7ff fbe5 	bl	80004cc <newLoRa>
 8000d02:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8000d06:	f5a3 730e 	sub.w	r3, r3, #568	; 0x238
 8000d0a:	461d      	mov	r5, r3
 8000d0c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d0e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d10:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d12:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d14:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000d18:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  LoRaClass.hSPIx                 = RF_SPI;
 8000d1c:	4b69      	ldr	r3, [pc, #420]	; (8000ec4 <main+0x21c>)
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	4a67      	ldr	r2, [pc, #412]	; (8000ec0 <main+0x218>)
 8000d22:	6193      	str	r3, [r2, #24]
  LoRaClass.CS_port               = RF_SPI_NSS_GPIO_Port;
 8000d24:	4b66      	ldr	r3, [pc, #408]	; (8000ec0 <main+0x218>)
 8000d26:	4a68      	ldr	r2, [pc, #416]	; (8000ec8 <main+0x220>)
 8000d28:	601a      	str	r2, [r3, #0]
  LoRaClass.CS_pin                = RF_SPI_NSS_Pin;
 8000d2a:	4b65      	ldr	r3, [pc, #404]	; (8000ec0 <main+0x218>)
 8000d2c:	2210      	movs	r2, #16
 8000d2e:	809a      	strh	r2, [r3, #4]
  LoRaClass.reset_port            = RESET_RF_GPIO_Port;
 8000d30:	4b63      	ldr	r3, [pc, #396]	; (8000ec0 <main+0x218>)
 8000d32:	4a66      	ldr	r2, [pc, #408]	; (8000ecc <main+0x224>)
 8000d34:	609a      	str	r2, [r3, #8]
  LoRaClass.reset_pin             = RESET_RF_Pin;
 8000d36:	4b62      	ldr	r3, [pc, #392]	; (8000ec0 <main+0x218>)
 8000d38:	2201      	movs	r2, #1
 8000d3a:	819a      	strh	r2, [r3, #12]
  LoRaClass.DIO0_port			  = IO0_RF_GPIO_Port;
 8000d3c:	4b60      	ldr	r3, [pc, #384]	; (8000ec0 <main+0x218>)
 8000d3e:	4a63      	ldr	r2, [pc, #396]	; (8000ecc <main+0x224>)
 8000d40:	611a      	str	r2, [r3, #16]
  LoRaClass.DIO0_pin			  = IO0_RF_Pin;
 8000d42:	4b5f      	ldr	r3, [pc, #380]	; (8000ec0 <main+0x218>)
 8000d44:	2202      	movs	r2, #2
 8000d46:	829a      	strh	r2, [r3, #20]

  LoRaClass.frequency             = 915;
 8000d48:	4b5d      	ldr	r3, [pc, #372]	; (8000ec0 <main+0x218>)
 8000d4a:	f240 3293 	movw	r2, #915	; 0x393
 8000d4e:	621a      	str	r2, [r3, #32]
  LoRaClass.spredingFactor        = SF_7;						// default = SF_7
 8000d50:	4b5b      	ldr	r3, [pc, #364]	; (8000ec0 <main+0x218>)
 8000d52:	2207      	movs	r2, #7
 8000d54:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  LoRaClass.bandWidth			  = BW_125KHz;				  	// default = BW_125KHz
 8000d58:	4b59      	ldr	r3, [pc, #356]	; (8000ec0 <main+0x218>)
 8000d5a:	2207      	movs	r2, #7
 8000d5c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  LoRaClass.crcRate				  = CR_4_5;						// default = CR_4_5
 8000d60:	4b57      	ldr	r3, [pc, #348]	; (8000ec0 <main+0x218>)
 8000d62:	2201      	movs	r2, #1
 8000d64:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  LoRaClass.power			      = POWER_20db;					// default = 20db
 8000d68:	4b55      	ldr	r3, [pc, #340]	; (8000ec0 <main+0x218>)
 8000d6a:	22ff      	movs	r2, #255	; 0xff
 8000d6c:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  LoRaClass.overCurrentProtection = 120; 						// default = 100 mA
 8000d70:	4b53      	ldr	r3, [pc, #332]	; (8000ec0 <main+0x218>)
 8000d72:	2278      	movs	r2, #120	; 0x78
 8000d74:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  LoRaClass.preamble			  = 10;		  					// default = 8;
 8000d78:	4b51      	ldr	r3, [pc, #324]	; (8000ec0 <main+0x218>)
 8000d7a:	220a      	movs	r2, #10
 8000d7c:	851a      	strh	r2, [r3, #40]	; 0x28

  HAL_GPIO_WritePin(RF_SPI_NSS_GPIO_Port, RF_SPI_NSS_Pin, GPIO_PIN_SET);
 8000d7e:	2201      	movs	r2, #1
 8000d80:	2110      	movs	r1, #16
 8000d82:	4851      	ldr	r0, [pc, #324]	; (8000ec8 <main+0x220>)
 8000d84:	f001 fe22 	bl	80029cc <HAL_GPIO_WritePin>

  LoRa_reset(&LoRaClass);
 8000d88:	484d      	ldr	r0, [pc, #308]	; (8000ec0 <main+0x218>)
 8000d8a:	f7ff fbc8 	bl	800051e <LoRa_reset>
  uint32_t result = LoRa_init(&LoRaClass);
 8000d8e:	484c      	ldr	r0, [pc, #304]	; (8000ec0 <main+0x218>)
 8000d90:	f7ff fed8 	bl	8000b44 <LoRa_init>
 8000d94:	4603      	mov	r3, r0
 8000d96:	f8c7 3234 	str.w	r3, [r7, #564]	; 0x234

  if(result == LORA_NOT_FOUND) {
 8000d9a:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 8000d9e:	f5b3 7fca 	cmp.w	r3, #404	; 0x194
 8000da2:	d103      	bne.n	8000dac <main+0x104>
	  Blocking_LED_Blink(1);
 8000da4:	2001      	movs	r0, #1
 8000da6:	f000 fbbd 	bl	8001524 <Blocking_LED_Blink>
 8000daa:	e008      	b.n	8000dbe <main+0x116>
  }
  else if(result == LORA_UNAVAILABLE) {
 8000dac:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 8000db0:	f240 12f7 	movw	r2, #503	; 0x1f7
 8000db4:	4293      	cmp	r3, r2
 8000db6:	d102      	bne.n	8000dbe <main+0x116>
	  Blocking_LED_Blink(1);
 8000db8:	2001      	movs	r0, #1
 8000dba:	f000 fbb3 	bl	8001524 <Blocking_LED_Blink>
  }

  // START CONTINUOUS RECEIVING -----------------------------------
  LoRa_startReceiving(&LoRaClass);
 8000dbe:	4840      	ldr	r0, [pc, #256]	; (8000ec0 <main+0x218>)
 8000dc0:	f7ff fe54 	bl	8000a6c <LoRa_startReceiving>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  if(RF_available_bytes) {
 8000dc4:	4b42      	ldr	r3, [pc, #264]	; (8000ed0 <main+0x228>)
 8000dc6:	781b      	ldrb	r3, [r3, #0]
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	f000 80a6 	beq.w	8000f1a <main+0x272>
		  // Bytes in RF RX buffer to read
		  // Read bytes into buffer
		  LoRa_receive(&LoRaClass, RF_RX_Buff, RF_available_bytes);
 8000dce:	4b40      	ldr	r3, [pc, #256]	; (8000ed0 <main+0x228>)
 8000dd0:	781b      	ldrb	r3, [r3, #0]
 8000dd2:	461a      	mov	r2, r3
 8000dd4:	493f      	ldr	r1, [pc, #252]	; (8000ed4 <main+0x22c>)
 8000dd6:	483a      	ldr	r0, [pc, #232]	; (8000ec0 <main+0x218>)
 8000dd8:	f7ff fe54 	bl	8000a84 <LoRa_receive>
		  // Buffer to contain data to be transmitted over UART and USB
		  uint8_t serialBuff[MAX_SERIAL_PACKET_SIZE(MAX_RF_PACKET_SIZE)];

		  // Check packet identifier
#ifdef MASTER_DEVICE
		  if(!memcmp(RF_RX_Buff, (uint8_t*)"SRSP", HEADER_STRING_SIZE)) {
 8000ddc:	2204      	movs	r2, #4
 8000dde:	493e      	ldr	r1, [pc, #248]	; (8000ed8 <main+0x230>)
 8000de0:	483c      	ldr	r0, [pc, #240]	; (8000ed4 <main+0x22c>)
 8000de2:	f00a fb53 	bl	800b48c <memcmp>
 8000de6:	4603      	mov	r3, r0
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	f040 8096 	bne.w	8000f1a <main+0x272>
			  HAL_GPIO_WritePin(INDICATOR_LED_GPIO_Port, INDICATOR_LED_Pin, GPIO_PIN_SET);
 8000dee:	2201      	movs	r2, #1
 8000df0:	2104      	movs	r1, #4
 8000df2:	483a      	ldr	r0, [pc, #232]	; (8000edc <main+0x234>)
 8000df4:	f001 fdea 	bl	80029cc <HAL_GPIO_WritePin>
			  // Header byte is packet type 2 (Slave response)
			  uint16_t data_len = (uint16_t)(RF_RX_Buff[HEADER_STRING_SIZE]<<8 | RF_RX_Buff[HEADER_STRING_SIZE+1]);
 8000df8:	4b36      	ldr	r3, [pc, #216]	; (8000ed4 <main+0x22c>)
 8000dfa:	791b      	ldrb	r3, [r3, #4]
 8000dfc:	021b      	lsls	r3, r3, #8
 8000dfe:	b21a      	sxth	r2, r3
 8000e00:	4b34      	ldr	r3, [pc, #208]	; (8000ed4 <main+0x22c>)
 8000e02:	795b      	ldrb	r3, [r3, #5]
 8000e04:	b21b      	sxth	r3, r3
 8000e06:	4313      	orrs	r3, r2
 8000e08:	b21b      	sxth	r3, r3
 8000e0a:	f8a7 3232 	strh.w	r3, [r7, #562]	; 0x232

			  if(data_len > MAX_DATA_SIZE(MAX_RF_PACKET_SIZE, HEADER_STRING_SIZE)) {
 8000e0e:	f8b7 3232 	ldrh.w	r3, [r7, #562]	; 0x232
 8000e12:	2bfa      	cmp	r3, #250	; 0xfa
 8000e14:	d966      	bls.n	8000ee4 <main+0x23c>
				  RF_available_bytes = 0;
 8000e16:	4b2e      	ldr	r3, [pc, #184]	; (8000ed0 <main+0x228>)
 8000e18:	2200      	movs	r2, #0
 8000e1a:	701a      	strb	r2, [r3, #0]
				  // Data spans over two packets
				  // Put all available bytes into serialBuff
				  memcpy(serialBuff,  &RF_RX_Buff[PREAMBLE_SIZE(HEADER_STRING_SIZE)], MAX_DATA_SIZE(MAX_RF_PACKET_SIZE, HEADER_STRING_SIZE));
 8000e1c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000e20:	22fa      	movs	r2, #250	; 0xfa
 8000e22:	492f      	ldr	r1, [pc, #188]	; (8000ee0 <main+0x238>)
 8000e24:	4618      	mov	r0, r3
 8000e26:	f00a fb41 	bl	800b4ac <memcpy>
				  memset(RF_RX_Buff, '\0', sizeof(RF_RX_Buff));
 8000e2a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000e2e:	2100      	movs	r1, #0
 8000e30:	4828      	ldr	r0, [pc, #160]	; (8000ed4 <main+0x22c>)
 8000e32:	f00a fb49 	bl	800b4c8 <memset>
				  // Wait for next packet
				  while(memcmp(RF_RX_Buff, (uint8_t*)"SRSP", HEADER_STRING_SIZE) != 0) {
 8000e36:	e007      	b.n	8000e48 <main+0x1a0>
					  LoRa_receive(&LoRaClass, RF_RX_Buff, data_len - MAX_RF_PACKET_SIZE);
 8000e38:	f8b7 3232 	ldrh.w	r3, [r7, #562]	; 0x232
 8000e3c:	b2db      	uxtb	r3, r3
 8000e3e:	461a      	mov	r2, r3
 8000e40:	4924      	ldr	r1, [pc, #144]	; (8000ed4 <main+0x22c>)
 8000e42:	481f      	ldr	r0, [pc, #124]	; (8000ec0 <main+0x218>)
 8000e44:	f7ff fe1e 	bl	8000a84 <LoRa_receive>
				  while(memcmp(RF_RX_Buff, (uint8_t*)"SRSP", HEADER_STRING_SIZE) != 0) {
 8000e48:	2204      	movs	r2, #4
 8000e4a:	4923      	ldr	r1, [pc, #140]	; (8000ed8 <main+0x230>)
 8000e4c:	4821      	ldr	r0, [pc, #132]	; (8000ed4 <main+0x22c>)
 8000e4e:	f00a fb1d 	bl	800b48c <memcmp>
 8000e52:	4603      	mov	r3, r0
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d1ef      	bne.n	8000e38 <main+0x190>
				  }
				  data_len = (uint16_t)(RF_RX_Buff[HEADER_STRING_SIZE]<<8 | RF_RX_Buff[HEADER_STRING_SIZE+1]);
 8000e58:	4b1e      	ldr	r3, [pc, #120]	; (8000ed4 <main+0x22c>)
 8000e5a:	791b      	ldrb	r3, [r3, #4]
 8000e5c:	021b      	lsls	r3, r3, #8
 8000e5e:	b21a      	sxth	r2, r3
 8000e60:	4b1c      	ldr	r3, [pc, #112]	; (8000ed4 <main+0x22c>)
 8000e62:	795b      	ldrb	r3, [r3, #5]
 8000e64:	b21b      	sxth	r3, r3
 8000e66:	4313      	orrs	r3, r2
 8000e68:	b21b      	sxth	r3, r3
 8000e6a:	f8a7 3232 	strh.w	r3, [r7, #562]	; 0x232
				  // Add new data to end of previous packet
				  memcpy(&serialBuff[MAX_DATA_SIZE(MAX_RF_PACKET_SIZE, HEADER_STRING_SIZE)], &RF_RX_Buff[PREAMBLE_SIZE(HEADER_STRING_SIZE)], data_len);
 8000e6e:	f8b7 2232 	ldrh.w	r2, [r7, #562]	; 0x232
 8000e72:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000e76:	33fa      	adds	r3, #250	; 0xfa
 8000e78:	4919      	ldr	r1, [pc, #100]	; (8000ee0 <main+0x238>)
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	f00a fb16 	bl	800b4ac <memcpy>
				  // Transmit concatenated buffer over USB and UART
				  CDC_Transmit_HS(serialBuff, MAX_DATA_SIZE(MAX_RF_PACKET_SIZE, HEADER_STRING_SIZE) + data_len);
 8000e80:	f8b7 3232 	ldrh.w	r3, [r7, #562]	; 0x232
 8000e84:	f103 02fa 	add.w	r2, r3, #250	; 0xfa
 8000e88:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000e8c:	4611      	mov	r1, r2
 8000e8e:	4618      	mov	r0, r3
 8000e90:	f009 fe74 	bl	800ab7c <CDC_Transmit_HS>
				  HAL_UART_Transmit(USB_UART, serialBuff, MAX_DATA_SIZE(MAX_RF_PACKET_SIZE, HEADER_STRING_SIZE) + data_len, 1000);
 8000e94:	4b07      	ldr	r3, [pc, #28]	; (8000eb4 <main+0x20c>)
 8000e96:	6818      	ldr	r0, [r3, #0]
 8000e98:	f8b7 3232 	ldrh.w	r3, [r7, #562]	; 0x232
 8000e9c:	33fa      	adds	r3, #250	; 0xfa
 8000e9e:	b29a      	uxth	r2, r3
 8000ea0:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8000ea4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ea8:	f004 ff1d 	bl	8005ce6 <HAL_UART_Transmit>
				  RF_available_bytes = 0;
 8000eac:	4b08      	ldr	r3, [pc, #32]	; (8000ed0 <main+0x228>)
 8000eae:	2200      	movs	r2, #0
 8000eb0:	701a      	strb	r2, [r3, #0]
 8000eb2:	e02d      	b.n	8000f10 <main+0x268>
 8000eb4:	20000000 	.word	0x20000000
 8000eb8:	20000008 	.word	0x20000008
 8000ebc:	20000418 	.word	0x20000418
 8000ec0:	20000800 	.word	0x20000800
 8000ec4:	20000004 	.word	0x20000004
 8000ec8:	40020000 	.word	0x40020000
 8000ecc:	40020400 	.word	0x40020400
 8000ed0:	20000314 	.word	0x20000314
 8000ed4:	20000318 	.word	0x20000318
 8000ed8:	0800bd7c 	.word	0x0800bd7c
 8000edc:	40020c00 	.word	0x40020c00
 8000ee0:	2000031e 	.word	0x2000031e
			  }
			  else {
				  // Data is all contained within one packet
				  // Transmit bytes from RF_RX_Buff over UART not including packet identifier or data length field
				  HAL_UART_Transmit(USB_UART, &RF_RX_Buff[PREAMBLE_SIZE(HEADER_STRING_SIZE)], RF_available_bytes-PREAMBLE_SIZE(HEADER_STRING_SIZE), 1000);
 8000ee4:	4b37      	ldr	r3, [pc, #220]	; (8000fc4 <main+0x31c>)
 8000ee6:	6818      	ldr	r0, [r3, #0]
 8000ee8:	4b37      	ldr	r3, [pc, #220]	; (8000fc8 <main+0x320>)
 8000eea:	781b      	ldrb	r3, [r3, #0]
 8000eec:	b29b      	uxth	r3, r3
 8000eee:	3b06      	subs	r3, #6
 8000ef0:	b29a      	uxth	r2, r3
 8000ef2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ef6:	4935      	ldr	r1, [pc, #212]	; (8000fcc <main+0x324>)
 8000ef8:	f004 fef5 	bl	8005ce6 <HAL_UART_Transmit>
				  // Transmit bytes from RF_RX Buff over USB not including packet identifier
				  CDC_Transmit_HS(&RF_RX_Buff[PREAMBLE_SIZE(HEADER_STRING_SIZE)], RF_available_bytes-PREAMBLE_SIZE(HEADER_STRING_SIZE));
 8000efc:	4b32      	ldr	r3, [pc, #200]	; (8000fc8 <main+0x320>)
 8000efe:	781b      	ldrb	r3, [r3, #0]
 8000f00:	3b06      	subs	r3, #6
 8000f02:	4619      	mov	r1, r3
 8000f04:	4831      	ldr	r0, [pc, #196]	; (8000fcc <main+0x324>)
 8000f06:	f009 fe39 	bl	800ab7c <CDC_Transmit_HS>
				  RF_available_bytes = 0;
 8000f0a:	4b2f      	ldr	r3, [pc, #188]	; (8000fc8 <main+0x320>)
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	701a      	strb	r2, [r3, #0]
			  }
			  HAL_GPIO_WritePin(INDICATOR_LED_GPIO_Port, INDICATOR_LED_Pin, GPIO_PIN_RESET);
 8000f10:	2200      	movs	r2, #0
 8000f12:	2104      	movs	r1, #4
 8000f14:	482e      	ldr	r0, [pc, #184]	; (8000fd0 <main+0x328>)
 8000f16:	f001 fd59 	bl	80029cc <HAL_GPIO_WritePin>
		  else RF_available_bytes = 0;
#endif
	  }

#ifdef MASTER_DEVICE
	  if (POLL_READY) {
 8000f1a:	4b2e      	ldr	r3, [pc, #184]	; (8000fd4 <main+0x32c>)
 8000f1c:	781b      	ldrb	r3, [r3, #0]
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d04b      	beq.n	8000fba <main+0x312>
		  if(UART_READY) {
 8000f22:	4b2d      	ldr	r3, [pc, #180]	; (8000fd8 <main+0x330>)
 8000f24:	781b      	ldrb	r3, [r3, #0]
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d02d      	beq.n	8000f86 <main+0x2de>
			  UART_READY = false;
 8000f2a:	4b2b      	ldr	r3, [pc, #172]	; (8000fd8 <main+0x330>)
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	701a      	strb	r2, [r3, #0]
			  uint8_t sendBuff[MAX_RF_PACKET_SIZE];
			  // Add packet identifier
			  memcpy(&sendBuff, (uint8_t*)"MREQ", sizeof("MREQ"));
 8000f30:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000f34:	2205      	movs	r2, #5
 8000f36:	4929      	ldr	r1, [pc, #164]	; (8000fdc <main+0x334>)
 8000f38:	4618      	mov	r0, r3
 8000f3a:	f00a fab7 	bl	800b4ac <memcpy>
			  // Add data length field
			  memcpy(&sendBuff[sizeof("MREQ")], &UART_PACKET_SIZE, sizeof(uint16_t));
 8000f3e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000f42:	3305      	adds	r3, #5
 8000f44:	2202      	movs	r2, #2
 8000f46:	4926      	ldr	r1, [pc, #152]	; (8000fe0 <main+0x338>)
 8000f48:	4618      	mov	r0, r3
 8000f4a:	f00a faaf 	bl	800b4ac <memcpy>
			  // Add data to sendBuff
			  memcpy(&sendBuff[PREAMBLE_SIZE(HEADER_STRING_SIZE)], &RF_transmit_buffer, UART_PACKET_SIZE);
 8000f4e:	4b24      	ldr	r3, [pc, #144]	; (8000fe0 <main+0x338>)
 8000f50:	781b      	ldrb	r3, [r3, #0]
 8000f52:	461a      	mov	r2, r3
 8000f54:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000f58:	3306      	adds	r3, #6
 8000f5a:	4922      	ldr	r1, [pc, #136]	; (8000fe4 <main+0x33c>)
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	f00a faa5 	bl	800b4ac <memcpy>
			  // Transmit USB buffer over RF
			  if (!LoRa_transmit(&LoRaClass, sendBuff, RF_transmit_buff_offset+PREAMBLE_SIZE(HEADER_STRING_SIZE), 1000)) {
 8000f62:	4b21      	ldr	r3, [pc, #132]	; (8000fe8 <main+0x340>)
 8000f64:	881b      	ldrh	r3, [r3, #0]
 8000f66:	b2db      	uxtb	r3, r3
 8000f68:	3306      	adds	r3, #6
 8000f6a:	b2da      	uxtb	r2, r3
 8000f6c:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8000f70:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f74:	481d      	ldr	r0, [pc, #116]	; (8000fec <main+0x344>)
 8000f76:	f7ff fd21 	bl	80009bc <LoRa_transmit>
						  // Print error msg
			  }
			  RF_transmit_buff_offset = 0;
 8000f7a:	4b1b      	ldr	r3, [pc, #108]	; (8000fe8 <main+0x340>)
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	801a      	strh	r2, [r3, #0]
			  LoRa_startReceiving(&LoRaClass);
 8000f80:	481a      	ldr	r0, [pc, #104]	; (8000fec <main+0x344>)
 8000f82:	f7ff fd73 	bl	8000a6c <LoRa_startReceiving>
		  }
		  if(!UART_READY && !USB_rx_data_len) {
 8000f86:	4b14      	ldr	r3, [pc, #80]	; (8000fd8 <main+0x330>)
 8000f88:	781b      	ldrb	r3, [r3, #0]
 8000f8a:	f083 0301 	eor.w	r3, r3, #1
 8000f8e:	b2db      	uxtb	r3, r3
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d012      	beq.n	8000fba <main+0x312>
 8000f94:	4b16      	ldr	r3, [pc, #88]	; (8000ff0 <main+0x348>)
 8000f96:	781b      	ldrb	r3, [r3, #0]
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d10e      	bne.n	8000fba <main+0x312>
			  uint8_t sendBuff[MAX_RF_PACKET_SIZE];
			  // Send empty data packet
			  // Add packet identifier
			  memcpy(&sendBuff, (uint8_t*)"MREQ\0\0", sizeof("MREQ\0\0"));
 8000f9c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000fa0:	2207      	movs	r2, #7
 8000fa2:	4914      	ldr	r1, [pc, #80]	; (8000ff4 <main+0x34c>)
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	f00a fa81 	bl	800b4ac <memcpy>
			  if (!LoRa_transmit(&LoRaClass, sendBuff, PREAMBLE_SIZE(HEADER_STRING_SIZE), 1000)) {
 8000faa:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8000fae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fb2:	2206      	movs	r2, #6
 8000fb4:	480d      	ldr	r0, [pc, #52]	; (8000fec <main+0x344>)
 8000fb6:	f7ff fd01 	bl	80009bc <LoRa_transmit>
				  // Print error msg
			  }
		  }
	  }
	  POLL_READY = false;
 8000fba:	4b06      	ldr	r3, [pc, #24]	; (8000fd4 <main+0x32c>)
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	701a      	strb	r2, [r3, #0]
	  if(RF_available_bytes) {
 8000fc0:	e700      	b.n	8000dc4 <main+0x11c>
 8000fc2:	bf00      	nop
 8000fc4:	20000000 	.word	0x20000000
 8000fc8:	20000314 	.word	0x20000314
 8000fcc:	2000031e 	.word	0x2000031e
 8000fd0:	40020c00 	.word	0x40020c00
 8000fd4:	200007fb 	.word	0x200007fb
 8000fd8:	200007fa 	.word	0x200007fa
 8000fdc:	0800bd84 	.word	0x0800bd84
 8000fe0:	2000000c 	.word	0x2000000c
 8000fe4:	200005f8 	.word	0x200005f8
 8000fe8:	200007f8 	.word	0x200007f8
 8000fec:	20000800 	.word	0x20000800
 8000ff0:	200007fc 	.word	0x200007fc
 8000ff4:	0800bd8c 	.word	0x0800bd8c

08000ff8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b094      	sub	sp, #80	; 0x50
 8000ffc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ffe:	f107 0320 	add.w	r3, r7, #32
 8001002:	2230      	movs	r2, #48	; 0x30
 8001004:	2100      	movs	r1, #0
 8001006:	4618      	mov	r0, r3
 8001008:	f00a fa5e 	bl	800b4c8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800100c:	f107 030c 	add.w	r3, r7, #12
 8001010:	2200      	movs	r2, #0
 8001012:	601a      	str	r2, [r3, #0]
 8001014:	605a      	str	r2, [r3, #4]
 8001016:	609a      	str	r2, [r3, #8]
 8001018:	60da      	str	r2, [r3, #12]
 800101a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800101c:	2300      	movs	r3, #0
 800101e:	60bb      	str	r3, [r7, #8]
 8001020:	4b28      	ldr	r3, [pc, #160]	; (80010c4 <SystemClock_Config+0xcc>)
 8001022:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001024:	4a27      	ldr	r2, [pc, #156]	; (80010c4 <SystemClock_Config+0xcc>)
 8001026:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800102a:	6413      	str	r3, [r2, #64]	; 0x40
 800102c:	4b25      	ldr	r3, [pc, #148]	; (80010c4 <SystemClock_Config+0xcc>)
 800102e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001030:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001034:	60bb      	str	r3, [r7, #8]
 8001036:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001038:	2300      	movs	r3, #0
 800103a:	607b      	str	r3, [r7, #4]
 800103c:	4b22      	ldr	r3, [pc, #136]	; (80010c8 <SystemClock_Config+0xd0>)
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	4a21      	ldr	r2, [pc, #132]	; (80010c8 <SystemClock_Config+0xd0>)
 8001042:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001046:	6013      	str	r3, [r2, #0]
 8001048:	4b1f      	ldr	r3, [pc, #124]	; (80010c8 <SystemClock_Config+0xd0>)
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001050:	607b      	str	r3, [r7, #4]
 8001052:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001054:	2301      	movs	r3, #1
 8001056:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001058:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800105c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800105e:	2302      	movs	r3, #2
 8001060:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001062:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001066:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 12;
 8001068:	230c      	movs	r3, #12
 800106a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800106c:	23a8      	movs	r3, #168	; 0xa8
 800106e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001070:	2302      	movs	r3, #2
 8001072:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001074:	2307      	movs	r3, #7
 8001076:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001078:	f107 0320 	add.w	r3, r7, #32
 800107c:	4618      	mov	r0, r3
 800107e:	f002 ff55 	bl	8003f2c <HAL_RCC_OscConfig>
 8001082:	4603      	mov	r3, r0
 8001084:	2b00      	cmp	r3, #0
 8001086:	d001      	beq.n	800108c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001088:	f000 fa6e 	bl	8001568 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800108c:	230f      	movs	r3, #15
 800108e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001090:	2302      	movs	r3, #2
 8001092:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001094:	2300      	movs	r3, #0
 8001096:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001098:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800109c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800109e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010a2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80010a4:	f107 030c 	add.w	r3, r7, #12
 80010a8:	2105      	movs	r1, #5
 80010aa:	4618      	mov	r0, r3
 80010ac:	f003 f9b6 	bl	800441c <HAL_RCC_ClockConfig>
 80010b0:	4603      	mov	r3, r0
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d001      	beq.n	80010ba <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80010b6:	f000 fa57 	bl	8001568 <Error_Handler>
  }
}
 80010ba:	bf00      	nop
 80010bc:	3750      	adds	r7, #80	; 0x50
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}
 80010c2:	bf00      	nop
 80010c4:	40023800 	.word	0x40023800
 80010c8:	40007000 	.word	0x40007000

080010cc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80010d0:	4b17      	ldr	r3, [pc, #92]	; (8001130 <MX_SPI1_Init+0x64>)
 80010d2:	4a18      	ldr	r2, [pc, #96]	; (8001134 <MX_SPI1_Init+0x68>)
 80010d4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80010d6:	4b16      	ldr	r3, [pc, #88]	; (8001130 <MX_SPI1_Init+0x64>)
 80010d8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80010dc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80010de:	4b14      	ldr	r3, [pc, #80]	; (8001130 <MX_SPI1_Init+0x64>)
 80010e0:	2200      	movs	r2, #0
 80010e2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80010e4:	4b12      	ldr	r3, [pc, #72]	; (8001130 <MX_SPI1_Init+0x64>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80010ea:	4b11      	ldr	r3, [pc, #68]	; (8001130 <MX_SPI1_Init+0x64>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80010f0:	4b0f      	ldr	r3, [pc, #60]	; (8001130 <MX_SPI1_Init+0x64>)
 80010f2:	2200      	movs	r2, #0
 80010f4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80010f6:	4b0e      	ldr	r3, [pc, #56]	; (8001130 <MX_SPI1_Init+0x64>)
 80010f8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80010fc:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 80010fe:	4b0c      	ldr	r3, [pc, #48]	; (8001130 <MX_SPI1_Init+0x64>)
 8001100:	2230      	movs	r2, #48	; 0x30
 8001102:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001104:	4b0a      	ldr	r3, [pc, #40]	; (8001130 <MX_SPI1_Init+0x64>)
 8001106:	2200      	movs	r2, #0
 8001108:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800110a:	4b09      	ldr	r3, [pc, #36]	; (8001130 <MX_SPI1_Init+0x64>)
 800110c:	2200      	movs	r2, #0
 800110e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001110:	4b07      	ldr	r3, [pc, #28]	; (8001130 <MX_SPI1_Init+0x64>)
 8001112:	2200      	movs	r2, #0
 8001114:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001116:	4b06      	ldr	r3, [pc, #24]	; (8001130 <MX_SPI1_Init+0x64>)
 8001118:	220a      	movs	r2, #10
 800111a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800111c:	4804      	ldr	r0, [pc, #16]	; (8001130 <MX_SPI1_Init+0x64>)
 800111e:	f003 fb5d 	bl	80047dc <HAL_SPI_Init>
 8001122:	4603      	mov	r3, r0
 8001124:	2b00      	cmp	r3, #0
 8001126:	d001      	beq.n	800112c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001128:	f000 fa1e 	bl	8001568 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800112c:	bf00      	nop
 800112e:	bd80      	pop	{r7, pc}
 8001130:	2000018c 	.word	0x2000018c
 8001134:	40013000 	.word	0x40013000

08001138 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b086      	sub	sp, #24
 800113c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800113e:	f107 0308 	add.w	r3, r7, #8
 8001142:	2200      	movs	r2, #0
 8001144:	601a      	str	r2, [r3, #0]
 8001146:	605a      	str	r2, [r3, #4]
 8001148:	609a      	str	r2, [r3, #8]
 800114a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800114c:	463b      	mov	r3, r7
 800114e:	2200      	movs	r2, #0
 8001150:	601a      	str	r2, [r3, #0]
 8001152:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001154:	4b1e      	ldr	r3, [pc, #120]	; (80011d0 <MX_TIM2_Init+0x98>)
 8001156:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800115a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 2500;
 800115c:	4b1c      	ldr	r3, [pc, #112]	; (80011d0 <MX_TIM2_Init+0x98>)
 800115e:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8001162:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001164:	4b1a      	ldr	r3, [pc, #104]	; (80011d0 <MX_TIM2_Init+0x98>)
 8001166:	2200      	movs	r2, #0
 8001168:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 16800;
 800116a:	4b19      	ldr	r3, [pc, #100]	; (80011d0 <MX_TIM2_Init+0x98>)
 800116c:	f244 12a0 	movw	r2, #16800	; 0x41a0
 8001170:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001172:	4b17      	ldr	r3, [pc, #92]	; (80011d0 <MX_TIM2_Init+0x98>)
 8001174:	2200      	movs	r2, #0
 8001176:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001178:	4b15      	ldr	r3, [pc, #84]	; (80011d0 <MX_TIM2_Init+0x98>)
 800117a:	2280      	movs	r2, #128	; 0x80
 800117c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800117e:	4814      	ldr	r0, [pc, #80]	; (80011d0 <MX_TIM2_Init+0x98>)
 8001180:	f004 f8e2 	bl	8005348 <HAL_TIM_Base_Init>
 8001184:	4603      	mov	r3, r0
 8001186:	2b00      	cmp	r3, #0
 8001188:	d001      	beq.n	800118e <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800118a:	f000 f9ed 	bl	8001568 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800118e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001192:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001194:	f107 0308 	add.w	r3, r7, #8
 8001198:	4619      	mov	r1, r3
 800119a:	480d      	ldr	r0, [pc, #52]	; (80011d0 <MX_TIM2_Init+0x98>)
 800119c:	f004 fa9c 	bl	80056d8 <HAL_TIM_ConfigClockSource>
 80011a0:	4603      	mov	r3, r0
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d001      	beq.n	80011aa <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80011a6:	f000 f9df 	bl	8001568 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011aa:	2300      	movs	r3, #0
 80011ac:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011ae:	2300      	movs	r3, #0
 80011b0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80011b2:	463b      	mov	r3, r7
 80011b4:	4619      	mov	r1, r3
 80011b6:	4806      	ldr	r0, [pc, #24]	; (80011d0 <MX_TIM2_Init+0x98>)
 80011b8:	f004 fcb8 	bl	8005b2c <HAL_TIMEx_MasterConfigSynchronization>
 80011bc:	4603      	mov	r3, r0
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d001      	beq.n	80011c6 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80011c2:	f000 f9d1 	bl	8001568 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80011c6:	bf00      	nop
 80011c8:	3718      	adds	r7, #24
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bd80      	pop	{r7, pc}
 80011ce:	bf00      	nop
 80011d0:	200001e4 	.word	0x200001e4

080011d4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80011d8:	4b11      	ldr	r3, [pc, #68]	; (8001220 <MX_USART1_UART_Init+0x4c>)
 80011da:	4a12      	ldr	r2, [pc, #72]	; (8001224 <MX_USART1_UART_Init+0x50>)
 80011dc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 57600;
 80011de:	4b10      	ldr	r3, [pc, #64]	; (8001220 <MX_USART1_UART_Init+0x4c>)
 80011e0:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 80011e4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80011e6:	4b0e      	ldr	r3, [pc, #56]	; (8001220 <MX_USART1_UART_Init+0x4c>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80011ec:	4b0c      	ldr	r3, [pc, #48]	; (8001220 <MX_USART1_UART_Init+0x4c>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80011f2:	4b0b      	ldr	r3, [pc, #44]	; (8001220 <MX_USART1_UART_Init+0x4c>)
 80011f4:	2200      	movs	r2, #0
 80011f6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80011f8:	4b09      	ldr	r3, [pc, #36]	; (8001220 <MX_USART1_UART_Init+0x4c>)
 80011fa:	220c      	movs	r2, #12
 80011fc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011fe:	4b08      	ldr	r3, [pc, #32]	; (8001220 <MX_USART1_UART_Init+0x4c>)
 8001200:	2200      	movs	r2, #0
 8001202:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001204:	4b06      	ldr	r3, [pc, #24]	; (8001220 <MX_USART1_UART_Init+0x4c>)
 8001206:	2200      	movs	r2, #0
 8001208:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800120a:	4805      	ldr	r0, [pc, #20]	; (8001220 <MX_USART1_UART_Init+0x4c>)
 800120c:	f004 fd1e 	bl	8005c4c <HAL_UART_Init>
 8001210:	4603      	mov	r3, r0
 8001212:	2b00      	cmp	r3, #0
 8001214:	d001      	beq.n	800121a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001216:	f000 f9a7 	bl	8001568 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800121a:	bf00      	nop
 800121c:	bd80      	pop	{r7, pc}
 800121e:	bf00      	nop
 8001220:	2000022c 	.word	0x2000022c
 8001224:	40011000 	.word	0x40011000

08001228 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800122c:	4b11      	ldr	r3, [pc, #68]	; (8001274 <MX_USART2_UART_Init+0x4c>)
 800122e:	4a12      	ldr	r2, [pc, #72]	; (8001278 <MX_USART2_UART_Init+0x50>)
 8001230:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 57600;
 8001232:	4b10      	ldr	r3, [pc, #64]	; (8001274 <MX_USART2_UART_Init+0x4c>)
 8001234:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 8001238:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800123a:	4b0e      	ldr	r3, [pc, #56]	; (8001274 <MX_USART2_UART_Init+0x4c>)
 800123c:	2200      	movs	r2, #0
 800123e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001240:	4b0c      	ldr	r3, [pc, #48]	; (8001274 <MX_USART2_UART_Init+0x4c>)
 8001242:	2200      	movs	r2, #0
 8001244:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001246:	4b0b      	ldr	r3, [pc, #44]	; (8001274 <MX_USART2_UART_Init+0x4c>)
 8001248:	2200      	movs	r2, #0
 800124a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800124c:	4b09      	ldr	r3, [pc, #36]	; (8001274 <MX_USART2_UART_Init+0x4c>)
 800124e:	220c      	movs	r2, #12
 8001250:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 8001252:	4b08      	ldr	r3, [pc, #32]	; (8001274 <MX_USART2_UART_Init+0x4c>)
 8001254:	f44f 7240 	mov.w	r2, #768	; 0x300
 8001258:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800125a:	4b06      	ldr	r3, [pc, #24]	; (8001274 <MX_USART2_UART_Init+0x4c>)
 800125c:	2200      	movs	r2, #0
 800125e:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001260:	4804      	ldr	r0, [pc, #16]	; (8001274 <MX_USART2_UART_Init+0x4c>)
 8001262:	f004 fcf3 	bl	8005c4c <HAL_UART_Init>
 8001266:	4603      	mov	r3, r0
 8001268:	2b00      	cmp	r3, #0
 800126a:	d001      	beq.n	8001270 <MX_USART2_UART_Init+0x48>
  {
    Error_Handler();
 800126c:	f000 f97c 	bl	8001568 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001270:	bf00      	nop
 8001272:	bd80      	pop	{r7, pc}
 8001274:	20000270 	.word	0x20000270
 8001278:	40004400 	.word	0x40004400

0800127c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b082      	sub	sp, #8
 8001280:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001282:	2300      	movs	r3, #0
 8001284:	607b      	str	r3, [r7, #4]
 8001286:	4b0c      	ldr	r3, [pc, #48]	; (80012b8 <MX_DMA_Init+0x3c>)
 8001288:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800128a:	4a0b      	ldr	r2, [pc, #44]	; (80012b8 <MX_DMA_Init+0x3c>)
 800128c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001290:	6313      	str	r3, [r2, #48]	; 0x30
 8001292:	4b09      	ldr	r3, [pc, #36]	; (80012b8 <MX_DMA_Init+0x3c>)
 8001294:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001296:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800129a:	607b      	str	r3, [r7, #4]
 800129c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 800129e:	2200      	movs	r2, #0
 80012a0:	2100      	movs	r1, #0
 80012a2:	203a      	movs	r0, #58	; 0x3a
 80012a4:	f000 fdbd 	bl	8001e22 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 80012a8:	203a      	movs	r0, #58	; 0x3a
 80012aa:	f000 fdd6 	bl	8001e5a <HAL_NVIC_EnableIRQ>

}
 80012ae:	bf00      	nop
 80012b0:	3708      	adds	r7, #8
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bd80      	pop	{r7, pc}
 80012b6:	bf00      	nop
 80012b8:	40023800 	.word	0x40023800

080012bc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b08a      	sub	sp, #40	; 0x28
 80012c0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012c2:	f107 0314 	add.w	r3, r7, #20
 80012c6:	2200      	movs	r2, #0
 80012c8:	601a      	str	r2, [r3, #0]
 80012ca:	605a      	str	r2, [r3, #4]
 80012cc:	609a      	str	r2, [r3, #8]
 80012ce:	60da      	str	r2, [r3, #12]
 80012d0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012d2:	2300      	movs	r3, #0
 80012d4:	613b      	str	r3, [r7, #16]
 80012d6:	4b56      	ldr	r3, [pc, #344]	; (8001430 <MX_GPIO_Init+0x174>)
 80012d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012da:	4a55      	ldr	r2, [pc, #340]	; (8001430 <MX_GPIO_Init+0x174>)
 80012dc:	f043 0304 	orr.w	r3, r3, #4
 80012e0:	6313      	str	r3, [r2, #48]	; 0x30
 80012e2:	4b53      	ldr	r3, [pc, #332]	; (8001430 <MX_GPIO_Init+0x174>)
 80012e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012e6:	f003 0304 	and.w	r3, r3, #4
 80012ea:	613b      	str	r3, [r7, #16]
 80012ec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80012ee:	2300      	movs	r3, #0
 80012f0:	60fb      	str	r3, [r7, #12]
 80012f2:	4b4f      	ldr	r3, [pc, #316]	; (8001430 <MX_GPIO_Init+0x174>)
 80012f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012f6:	4a4e      	ldr	r2, [pc, #312]	; (8001430 <MX_GPIO_Init+0x174>)
 80012f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80012fc:	6313      	str	r3, [r2, #48]	; 0x30
 80012fe:	4b4c      	ldr	r3, [pc, #304]	; (8001430 <MX_GPIO_Init+0x174>)
 8001300:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001302:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001306:	60fb      	str	r3, [r7, #12]
 8001308:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800130a:	2300      	movs	r3, #0
 800130c:	60bb      	str	r3, [r7, #8]
 800130e:	4b48      	ldr	r3, [pc, #288]	; (8001430 <MX_GPIO_Init+0x174>)
 8001310:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001312:	4a47      	ldr	r2, [pc, #284]	; (8001430 <MX_GPIO_Init+0x174>)
 8001314:	f043 0301 	orr.w	r3, r3, #1
 8001318:	6313      	str	r3, [r2, #48]	; 0x30
 800131a:	4b45      	ldr	r3, [pc, #276]	; (8001430 <MX_GPIO_Init+0x174>)
 800131c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800131e:	f003 0301 	and.w	r3, r3, #1
 8001322:	60bb      	str	r3, [r7, #8]
 8001324:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001326:	2300      	movs	r3, #0
 8001328:	607b      	str	r3, [r7, #4]
 800132a:	4b41      	ldr	r3, [pc, #260]	; (8001430 <MX_GPIO_Init+0x174>)
 800132c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800132e:	4a40      	ldr	r2, [pc, #256]	; (8001430 <MX_GPIO_Init+0x174>)
 8001330:	f043 0302 	orr.w	r3, r3, #2
 8001334:	6313      	str	r3, [r2, #48]	; 0x30
 8001336:	4b3e      	ldr	r3, [pc, #248]	; (8001430 <MX_GPIO_Init+0x174>)
 8001338:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800133a:	f003 0302 	and.w	r3, r3, #2
 800133e:	607b      	str	r3, [r7, #4]
 8001340:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001342:	2300      	movs	r3, #0
 8001344:	603b      	str	r3, [r7, #0]
 8001346:	4b3a      	ldr	r3, [pc, #232]	; (8001430 <MX_GPIO_Init+0x174>)
 8001348:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800134a:	4a39      	ldr	r2, [pc, #228]	; (8001430 <MX_GPIO_Init+0x174>)
 800134c:	f043 0308 	orr.w	r3, r3, #8
 8001350:	6313      	str	r3, [r2, #48]	; 0x30
 8001352:	4b37      	ldr	r3, [pc, #220]	; (8001430 <MX_GPIO_Init+0x174>)
 8001354:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001356:	f003 0308 	and.w	r3, r3, #8
 800135a:	603b      	str	r3, [r7, #0]
 800135c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RF_SPI_NSS_GPIO_Port, RF_SPI_NSS_Pin, GPIO_PIN_RESET);
 800135e:	2200      	movs	r2, #0
 8001360:	2110      	movs	r1, #16
 8001362:	4834      	ldr	r0, [pc, #208]	; (8001434 <MX_GPIO_Init+0x178>)
 8001364:	f001 fb32 	bl	80029cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RESET_RF_GPIO_Port, RESET_RF_Pin, GPIO_PIN_RESET);
 8001368:	2200      	movs	r2, #0
 800136a:	2101      	movs	r1, #1
 800136c:	4832      	ldr	r0, [pc, #200]	; (8001438 <MX_GPIO_Init+0x17c>)
 800136e:	f001 fb2d 	bl	80029cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(INDICATOR_LED_GPIO_Port, INDICATOR_LED_Pin, GPIO_PIN_RESET);
 8001372:	2200      	movs	r2, #0
 8001374:	2104      	movs	r1, #4
 8001376:	4831      	ldr	r0, [pc, #196]	; (800143c <MX_GPIO_Init+0x180>)
 8001378:	f001 fb28 	bl	80029cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : RF_SPI_NSS_Pin */
  GPIO_InitStruct.Pin = RF_SPI_NSS_Pin;
 800137c:	2310      	movs	r3, #16
 800137e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001380:	2301      	movs	r3, #1
 8001382:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001384:	2300      	movs	r3, #0
 8001386:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001388:	2300      	movs	r3, #0
 800138a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(RF_SPI_NSS_GPIO_Port, &GPIO_InitStruct);
 800138c:	f107 0314 	add.w	r3, r7, #20
 8001390:	4619      	mov	r1, r3
 8001392:	4828      	ldr	r0, [pc, #160]	; (8001434 <MX_GPIO_Init+0x178>)
 8001394:	f001 f97e 	bl	8002694 <HAL_GPIO_Init>

  /*Configure GPIO pin : RESET_RF_Pin */
  GPIO_InitStruct.Pin = RESET_RF_Pin;
 8001398:	2301      	movs	r3, #1
 800139a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800139c:	2301      	movs	r3, #1
 800139e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a0:	2300      	movs	r3, #0
 80013a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013a4:	2300      	movs	r3, #0
 80013a6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(RESET_RF_GPIO_Port, &GPIO_InitStruct);
 80013a8:	f107 0314 	add.w	r3, r7, #20
 80013ac:	4619      	mov	r1, r3
 80013ae:	4822      	ldr	r0, [pc, #136]	; (8001438 <MX_GPIO_Init+0x17c>)
 80013b0:	f001 f970 	bl	8002694 <HAL_GPIO_Init>

  /*Configure GPIO pins : IO0_RF_Pin IO1_RF_Pin IO2_RF_Pin IO3_RF_Pin
                           IO4_RF_Pin */
  GPIO_InitStruct.Pin = IO0_RF_Pin|IO1_RF_Pin|IO2_RF_Pin|IO3_RF_Pin
 80013b4:	f643 4302 	movw	r3, #15362	; 0x3c02
 80013b8:	617b      	str	r3, [r7, #20]
                          |IO4_RF_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80013ba:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80013be:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013c0:	2300      	movs	r3, #0
 80013c2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013c4:	f107 0314 	add.w	r3, r7, #20
 80013c8:	4619      	mov	r1, r3
 80013ca:	481b      	ldr	r0, [pc, #108]	; (8001438 <MX_GPIO_Init+0x17c>)
 80013cc:	f001 f962 	bl	8002694 <HAL_GPIO_Init>

  /*Configure GPIO pin : IO5_RF_Pin */
  GPIO_InitStruct.Pin = IO5_RF_Pin;
 80013d0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80013d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80013d6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80013da:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013dc:	2300      	movs	r3, #0
 80013de:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(IO5_RF_GPIO_Port, &GPIO_InitStruct);
 80013e0:	f107 0314 	add.w	r3, r7, #20
 80013e4:	4619      	mov	r1, r3
 80013e6:	4813      	ldr	r0, [pc, #76]	; (8001434 <MX_GPIO_Init+0x178>)
 80013e8:	f001 f954 	bl	8002694 <HAL_GPIO_Init>

  /*Configure GPIO pin : INDICATOR_LED_Pin */
  GPIO_InitStruct.Pin = INDICATOR_LED_Pin;
 80013ec:	2304      	movs	r3, #4
 80013ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013f0:	2301      	movs	r3, #1
 80013f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013f4:	2300      	movs	r3, #0
 80013f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013f8:	2300      	movs	r3, #0
 80013fa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(INDICATOR_LED_GPIO_Port, &GPIO_InitStruct);
 80013fc:	f107 0314 	add.w	r3, r7, #20
 8001400:	4619      	mov	r1, r3
 8001402:	480e      	ldr	r0, [pc, #56]	; (800143c <MX_GPIO_Init+0x180>)
 8001404:	f001 f946 	bl	8002694 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8001408:	2200      	movs	r2, #0
 800140a:	2100      	movs	r1, #0
 800140c:	2007      	movs	r0, #7
 800140e:	f000 fd08 	bl	8001e22 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8001412:	2007      	movs	r0, #7
 8001414:	f000 fd21 	bl	8001e5a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001418:	2200      	movs	r2, #0
 800141a:	2100      	movs	r1, #0
 800141c:	2028      	movs	r0, #40	; 0x28
 800141e:	f000 fd00 	bl	8001e22 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001422:	2028      	movs	r0, #40	; 0x28
 8001424:	f000 fd19 	bl	8001e5a <HAL_NVIC_EnableIRQ>

}
 8001428:	bf00      	nop
 800142a:	3728      	adds	r7, #40	; 0x28
 800142c:	46bd      	mov	sp, r7
 800142e:	bd80      	pop	{r7, pc}
 8001430:	40023800 	.word	0x40023800
 8001434:	40020000 	.word	0x40020000
 8001438:	40020400 	.word	0x40020400
 800143c:	40020c00 	.word	0x40020c00

08001440 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8001440:	b580      	push	{r7, lr}
 8001442:	b082      	sub	sp, #8
 8001444:	af00      	add	r7, sp, #0
 8001446:	4603      	mov	r3, r0
 8001448:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == LoRaClass.DIO0_pin){
 800144a:	4b08      	ldr	r3, [pc, #32]	; (800146c <HAL_GPIO_EXTI_Callback+0x2c>)
 800144c:	8a9b      	ldrh	r3, [r3, #20]
 800144e:	88fa      	ldrh	r2, [r7, #6]
 8001450:	429a      	cmp	r2, r3
 8001452:	d106      	bne.n	8001462 <HAL_GPIO_EXTI_Callback+0x22>
		RF_available_bytes = LoRa_received_bytes(&LoRaClass);
 8001454:	4805      	ldr	r0, [pc, #20]	; (800146c <HAL_GPIO_EXTI_Callback+0x2c>)
 8001456:	f7ff fc19 	bl	8000c8c <LoRa_received_bytes>
 800145a:	4603      	mov	r3, r0
 800145c:	461a      	mov	r2, r3
 800145e:	4b04      	ldr	r3, [pc, #16]	; (8001470 <HAL_GPIO_EXTI_Callback+0x30>)
 8001460:	701a      	strb	r2, [r3, #0]
	}
}
 8001462:	bf00      	nop
 8001464:	3708      	adds	r7, #8
 8001466:	46bd      	mov	sp, r7
 8001468:	bd80      	pop	{r7, pc}
 800146a:	bf00      	nop
 800146c:	20000800 	.word	0x20000800
 8001470:	20000314 	.word	0x20000314

08001474 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b082      	sub	sp, #8
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_DMA (USB_UART, UART_Buff, sizeof(UART_Buff));
 800147c:	4b0c      	ldr	r3, [pc, #48]	; (80014b0 <HAL_UART_RxCpltCallback+0x3c>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8001484:	490b      	ldr	r1, [pc, #44]	; (80014b4 <HAL_UART_RxCpltCallback+0x40>)
 8001486:	4618      	mov	r0, r3
 8001488:	f004 fd61 	bl	8005f4e <HAL_UART_Receive_DMA>
	UART_READY = true;
 800148c:	4b0a      	ldr	r3, [pc, #40]	; (80014b8 <HAL_UART_RxCpltCallback+0x44>)
 800148e:	2201      	movs	r2, #1
 8001490:	701a      	strb	r2, [r3, #0]
	// Add second half of data to sendBuff
	memcpy(RF_transmit_buffer, &UART_Buff[UART_PACKET_SIZE], UART_PACKET_SIZE);
 8001492:	4b0a      	ldr	r3, [pc, #40]	; (80014bc <HAL_UART_RxCpltCallback+0x48>)
 8001494:	781b      	ldrb	r3, [r3, #0]
 8001496:	461a      	mov	r2, r3
 8001498:	4b06      	ldr	r3, [pc, #24]	; (80014b4 <HAL_UART_RxCpltCallback+0x40>)
 800149a:	4413      	add	r3, r2
 800149c:	4a07      	ldr	r2, [pc, #28]	; (80014bc <HAL_UART_RxCpltCallback+0x48>)
 800149e:	7812      	ldrb	r2, [r2, #0]
 80014a0:	4619      	mov	r1, r3
 80014a2:	4807      	ldr	r0, [pc, #28]	; (80014c0 <HAL_UART_RxCpltCallback+0x4c>)
 80014a4:	f00a f802 	bl	800b4ac <memcpy>
}
 80014a8:	bf00      	nop
 80014aa:	3708      	adds	r7, #8
 80014ac:	46bd      	mov	sp, r7
 80014ae:	bd80      	pop	{r7, pc}
 80014b0:	20000000 	.word	0x20000000
 80014b4:	20000418 	.word	0x20000418
 80014b8:	200007fa 	.word	0x200007fa
 80014bc:	2000000c 	.word	0x2000000c
 80014c0:	200005f8 	.word	0x200005f8

080014c4 <HAL_UART_RxHalfCpltCallback>:

void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart) {
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b082      	sub	sp, #8
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
	UART_READY = true;
 80014cc:	4b06      	ldr	r3, [pc, #24]	; (80014e8 <HAL_UART_RxHalfCpltCallback+0x24>)
 80014ce:	2201      	movs	r2, #1
 80014d0:	701a      	strb	r2, [r3, #0]
	// Add first half of data to sendBuff
	memcpy(RF_transmit_buffer, &UART_Buff, UART_PACKET_SIZE);
 80014d2:	4b06      	ldr	r3, [pc, #24]	; (80014ec <HAL_UART_RxHalfCpltCallback+0x28>)
 80014d4:	781b      	ldrb	r3, [r3, #0]
 80014d6:	461a      	mov	r2, r3
 80014d8:	4905      	ldr	r1, [pc, #20]	; (80014f0 <HAL_UART_RxHalfCpltCallback+0x2c>)
 80014da:	4806      	ldr	r0, [pc, #24]	; (80014f4 <HAL_UART_RxHalfCpltCallback+0x30>)
 80014dc:	f009 ffe6 	bl	800b4ac <memcpy>
}
 80014e0:	bf00      	nop
 80014e2:	3708      	adds	r7, #8
 80014e4:	46bd      	mov	sp, r7
 80014e6:	bd80      	pop	{r7, pc}
 80014e8:	200007fa 	.word	0x200007fa
 80014ec:	2000000c 	.word	0x2000000c
 80014f0:	20000418 	.word	0x20000418
 80014f4:	200005f8 	.word	0x200005f8

080014f8 <HAL_TIM_PeriodElapsedCallback>:


#ifdef MASTER_DEVICE
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 80014f8:	b480      	push	{r7}
 80014fa:	b083      	sub	sp, #12
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
    if(htim == Poll_Timer) {
 8001500:	4b06      	ldr	r3, [pc, #24]	; (800151c <HAL_TIM_PeriodElapsedCallback+0x24>)
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	687a      	ldr	r2, [r7, #4]
 8001506:	429a      	cmp	r2, r3
 8001508:	d102      	bne.n	8001510 <HAL_TIM_PeriodElapsedCallback+0x18>
    	// Poll slave device
    	POLL_READY = true;
 800150a:	4b05      	ldr	r3, [pc, #20]	; (8001520 <HAL_TIM_PeriodElapsedCallback+0x28>)
 800150c:	2201      	movs	r2, #1
 800150e:	701a      	strb	r2, [r3, #0]
    }
}
 8001510:	bf00      	nop
 8001512:	370c      	adds	r7, #12
 8001514:	46bd      	mov	sp, r7
 8001516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151a:	4770      	bx	lr
 800151c:	20000008 	.word	0x20000008
 8001520:	200007fb 	.word	0x200007fb

08001524 <Blocking_LED_Blink>:
#endif

void Blocking_LED_Blink(uint8_t freq) {
 8001524:	b580      	push	{r7, lr}
 8001526:	b082      	sub	sp, #8
 8001528:	af00      	add	r7, sp, #0
 800152a:	4603      	mov	r3, r0
 800152c:	71fb      	strb	r3, [r7, #7]
	while(1) {
		HAL_GPIO_WritePin(INDICATOR_LED_GPIO_Port, INDICATOR_LED_Pin, GPIO_PIN_SET);
 800152e:	2201      	movs	r2, #1
 8001530:	2104      	movs	r1, #4
 8001532:	480c      	ldr	r0, [pc, #48]	; (8001564 <Blocking_LED_Blink+0x40>)
 8001534:	f001 fa4a 	bl	80029cc <HAL_GPIO_WritePin>
		HAL_Delay(1000/freq);
 8001538:	79fb      	ldrb	r3, [r7, #7]
 800153a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800153e:	fb92 f3f3 	sdiv	r3, r2, r3
 8001542:	4618      	mov	r0, r3
 8001544:	f000 fb6e 	bl	8001c24 <HAL_Delay>
		HAL_GPIO_WritePin(INDICATOR_LED_GPIO_Port, INDICATOR_LED_Pin, GPIO_PIN_RESET);
 8001548:	2200      	movs	r2, #0
 800154a:	2104      	movs	r1, #4
 800154c:	4805      	ldr	r0, [pc, #20]	; (8001564 <Blocking_LED_Blink+0x40>)
 800154e:	f001 fa3d 	bl	80029cc <HAL_GPIO_WritePin>
		HAL_Delay(1000/freq);
 8001552:	79fb      	ldrb	r3, [r7, #7]
 8001554:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001558:	fb92 f3f3 	sdiv	r3, r2, r3
 800155c:	4618      	mov	r0, r3
 800155e:	f000 fb61 	bl	8001c24 <HAL_Delay>
		HAL_GPIO_WritePin(INDICATOR_LED_GPIO_Port, INDICATOR_LED_Pin, GPIO_PIN_SET);
 8001562:	e7e4      	b.n	800152e <Blocking_LED_Blink+0xa>
 8001564:	40020c00 	.word	0x40020c00

08001568 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001568:	b480      	push	{r7}
 800156a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800156c:	b672      	cpsid	i
}
 800156e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001570:	e7fe      	b.n	8001570 <Error_Handler+0x8>
	...

08001574 <RetargetInit>:
#define STDOUT_FILENO 1
#define STDERR_FILENO 2

UART_HandleTypeDef *gHuart;

void RetargetInit(UART_HandleTypeDef *huart) {
 8001574:	b580      	push	{r7, lr}
 8001576:	b082      	sub	sp, #8
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
  gHuart = huart;
 800157c:	4a07      	ldr	r2, [pc, #28]	; (800159c <RetargetInit+0x28>)
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	6013      	str	r3, [r2, #0]

  /* Disable I/O buffering for STDOUT stream, so that
   * chars are sent out as soon as they are printed. */
  setvbuf(stdout, NULL, _IONBF, 0);
 8001582:	4b07      	ldr	r3, [pc, #28]	; (80015a0 <RetargetInit+0x2c>)
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	6898      	ldr	r0, [r3, #8]
 8001588:	2300      	movs	r3, #0
 800158a:	2202      	movs	r2, #2
 800158c:	2100      	movs	r1, #0
 800158e:	f009 ffa3 	bl	800b4d8 <setvbuf>
}
 8001592:	bf00      	nop
 8001594:	3708      	adds	r7, #8
 8001596:	46bd      	mov	sp, r7
 8001598:	bd80      	pop	{r7, pc}
 800159a:	bf00      	nop
 800159c:	2000082c 	.word	0x2000082c
 80015a0:	2000010c 	.word	0x2000010c

080015a4 <_write>:

  errno = EBADF;
  return 0;
}

int _write(int fd, char* ptr, int len) {
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b086      	sub	sp, #24
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	60f8      	str	r0, [r7, #12]
 80015ac:	60b9      	str	r1, [r7, #8]
 80015ae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDOUT_FILENO || fd == STDERR_FILENO) {
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	2b01      	cmp	r3, #1
 80015b4:	d002      	beq.n	80015bc <_write+0x18>
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	2b02      	cmp	r3, #2
 80015ba:	d111      	bne.n	80015e0 <_write+0x3c>
    hstatus = HAL_UART_Transmit(gHuart, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 80015bc:	4b0e      	ldr	r3, [pc, #56]	; (80015f8 <_write+0x54>)
 80015be:	6818      	ldr	r0, [r3, #0]
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	b29a      	uxth	r2, r3
 80015c4:	f04f 33ff 	mov.w	r3, #4294967295
 80015c8:	68b9      	ldr	r1, [r7, #8]
 80015ca:	f004 fb8c 	bl	8005ce6 <HAL_UART_Transmit>
 80015ce:	4603      	mov	r3, r0
 80015d0:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 80015d2:	7dfb      	ldrb	r3, [r7, #23]
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d101      	bne.n	80015dc <_write+0x38>
      return len;
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	e008      	b.n	80015ee <_write+0x4a>
    else
      return EIO;
 80015dc:	2305      	movs	r3, #5
 80015de:	e006      	b.n	80015ee <_write+0x4a>
  }
  errno = EBADF;
 80015e0:	f009 ff2a 	bl	800b438 <__errno>
 80015e4:	4603      	mov	r3, r0
 80015e6:	2209      	movs	r2, #9
 80015e8:	601a      	str	r2, [r3, #0]
  return -1;
 80015ea:	f04f 33ff 	mov.w	r3, #4294967295
}
 80015ee:	4618      	mov	r0, r3
 80015f0:	3718      	adds	r7, #24
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bd80      	pop	{r7, pc}
 80015f6:	bf00      	nop
 80015f8:	2000082c 	.word	0x2000082c

080015fc <_close>:

int _close(int fd) {
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b082      	sub	sp, #8
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	2b00      	cmp	r3, #0
 8001608:	db04      	blt.n	8001614 <_close+0x18>
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	2b02      	cmp	r3, #2
 800160e:	dc01      	bgt.n	8001614 <_close+0x18>
    return 0;
 8001610:	2300      	movs	r3, #0
 8001612:	e006      	b.n	8001622 <_close+0x26>

  errno = EBADF;
 8001614:	f009 ff10 	bl	800b438 <__errno>
 8001618:	4603      	mov	r3, r0
 800161a:	2209      	movs	r2, #9
 800161c:	601a      	str	r2, [r3, #0]
  return -1;
 800161e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001622:	4618      	mov	r0, r3
 8001624:	3708      	adds	r7, #8
 8001626:	46bd      	mov	sp, r7
 8001628:	bd80      	pop	{r7, pc}

0800162a <_lseek>:

int _lseek(int fd, int ptr, int dir) {
 800162a:	b580      	push	{r7, lr}
 800162c:	b084      	sub	sp, #16
 800162e:	af00      	add	r7, sp, #0
 8001630:	60f8      	str	r0, [r7, #12]
 8001632:	60b9      	str	r1, [r7, #8]
 8001634:	607a      	str	r2, [r7, #4]
  (void) fd;
  (void) ptr;
  (void) dir;

  errno = EBADF;
 8001636:	f009 feff 	bl	800b438 <__errno>
 800163a:	4603      	mov	r3, r0
 800163c:	2209      	movs	r2, #9
 800163e:	601a      	str	r2, [r3, #0]
  return -1;
 8001640:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001644:	4618      	mov	r0, r3
 8001646:	3710      	adds	r7, #16
 8001648:	46bd      	mov	sp, r7
 800164a:	bd80      	pop	{r7, pc}

0800164c <_read>:

int _read(int fd, char* ptr, int len) {
 800164c:	b580      	push	{r7, lr}
 800164e:	b086      	sub	sp, #24
 8001650:	af00      	add	r7, sp, #0
 8001652:	60f8      	str	r0, [r7, #12]
 8001654:	60b9      	str	r1, [r7, #8]
 8001656:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDIN_FILENO) {
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	2b00      	cmp	r3, #0
 800165c:	d110      	bne.n	8001680 <_read+0x34>
    hstatus = HAL_UART_Receive(gHuart, (uint8_t *) ptr, 1, HAL_MAX_DELAY);
 800165e:	4b0e      	ldr	r3, [pc, #56]	; (8001698 <_read+0x4c>)
 8001660:	6818      	ldr	r0, [r3, #0]
 8001662:	f04f 33ff 	mov.w	r3, #4294967295
 8001666:	2201      	movs	r2, #1
 8001668:	68b9      	ldr	r1, [r7, #8]
 800166a:	f004 fbce 	bl	8005e0a <HAL_UART_Receive>
 800166e:	4603      	mov	r3, r0
 8001670:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 8001672:	7dfb      	ldrb	r3, [r7, #23]
 8001674:	2b00      	cmp	r3, #0
 8001676:	d101      	bne.n	800167c <_read+0x30>
      return 1;
 8001678:	2301      	movs	r3, #1
 800167a:	e008      	b.n	800168e <_read+0x42>
    else
      return EIO;
 800167c:	2305      	movs	r3, #5
 800167e:	e006      	b.n	800168e <_read+0x42>
  }
  errno = EBADF;
 8001680:	f009 feda 	bl	800b438 <__errno>
 8001684:	4603      	mov	r3, r0
 8001686:	2209      	movs	r2, #9
 8001688:	601a      	str	r2, [r3, #0]
  return -1;
 800168a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800168e:	4618      	mov	r0, r3
 8001690:	3718      	adds	r7, #24
 8001692:	46bd      	mov	sp, r7
 8001694:	bd80      	pop	{r7, pc}
 8001696:	bf00      	nop
 8001698:	2000082c 	.word	0x2000082c

0800169c <_fstat>:

int _fstat(int fd, struct stat* st) {
 800169c:	b580      	push	{r7, lr}
 800169e:	b082      	sub	sp, #8
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
 80016a4:	6039      	str	r1, [r7, #0]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO) {
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	db08      	blt.n	80016be <_fstat+0x22>
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	2b02      	cmp	r3, #2
 80016b0:	dc05      	bgt.n	80016be <_fstat+0x22>
    st->st_mode = S_IFCHR;
 80016b2:	683b      	ldr	r3, [r7, #0]
 80016b4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80016b8:	605a      	str	r2, [r3, #4]
    return 0;
 80016ba:	2300      	movs	r3, #0
 80016bc:	e005      	b.n	80016ca <_fstat+0x2e>
  }

  errno = EBADF;
 80016be:	f009 febb 	bl	800b438 <__errno>
 80016c2:	4603      	mov	r3, r0
 80016c4:	2209      	movs	r2, #9
 80016c6:	601a      	str	r2, [r3, #0]
  return 0;
 80016c8:	2300      	movs	r3, #0
}
 80016ca:	4618      	mov	r0, r3
 80016cc:	3708      	adds	r7, #8
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bd80      	pop	{r7, pc}
	...

080016d4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016d4:	b480      	push	{r7}
 80016d6:	b083      	sub	sp, #12
 80016d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016da:	2300      	movs	r3, #0
 80016dc:	607b      	str	r3, [r7, #4]
 80016de:	4b10      	ldr	r3, [pc, #64]	; (8001720 <HAL_MspInit+0x4c>)
 80016e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016e2:	4a0f      	ldr	r2, [pc, #60]	; (8001720 <HAL_MspInit+0x4c>)
 80016e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016e8:	6453      	str	r3, [r2, #68]	; 0x44
 80016ea:	4b0d      	ldr	r3, [pc, #52]	; (8001720 <HAL_MspInit+0x4c>)
 80016ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80016f2:	607b      	str	r3, [r7, #4]
 80016f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80016f6:	2300      	movs	r3, #0
 80016f8:	603b      	str	r3, [r7, #0]
 80016fa:	4b09      	ldr	r3, [pc, #36]	; (8001720 <HAL_MspInit+0x4c>)
 80016fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016fe:	4a08      	ldr	r2, [pc, #32]	; (8001720 <HAL_MspInit+0x4c>)
 8001700:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001704:	6413      	str	r3, [r2, #64]	; 0x40
 8001706:	4b06      	ldr	r3, [pc, #24]	; (8001720 <HAL_MspInit+0x4c>)
 8001708:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800170a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800170e:	603b      	str	r3, [r7, #0]
 8001710:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001712:	bf00      	nop
 8001714:	370c      	adds	r7, #12
 8001716:	46bd      	mov	sp, r7
 8001718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171c:	4770      	bx	lr
 800171e:	bf00      	nop
 8001720:	40023800 	.word	0x40023800

08001724 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b08a      	sub	sp, #40	; 0x28
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800172c:	f107 0314 	add.w	r3, r7, #20
 8001730:	2200      	movs	r2, #0
 8001732:	601a      	str	r2, [r3, #0]
 8001734:	605a      	str	r2, [r3, #4]
 8001736:	609a      	str	r2, [r3, #8]
 8001738:	60da      	str	r2, [r3, #12]
 800173a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	4a19      	ldr	r2, [pc, #100]	; (80017a8 <HAL_SPI_MspInit+0x84>)
 8001742:	4293      	cmp	r3, r2
 8001744:	d12b      	bne.n	800179e <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001746:	2300      	movs	r3, #0
 8001748:	613b      	str	r3, [r7, #16]
 800174a:	4b18      	ldr	r3, [pc, #96]	; (80017ac <HAL_SPI_MspInit+0x88>)
 800174c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800174e:	4a17      	ldr	r2, [pc, #92]	; (80017ac <HAL_SPI_MspInit+0x88>)
 8001750:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001754:	6453      	str	r3, [r2, #68]	; 0x44
 8001756:	4b15      	ldr	r3, [pc, #84]	; (80017ac <HAL_SPI_MspInit+0x88>)
 8001758:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800175a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800175e:	613b      	str	r3, [r7, #16]
 8001760:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001762:	2300      	movs	r3, #0
 8001764:	60fb      	str	r3, [r7, #12]
 8001766:	4b11      	ldr	r3, [pc, #68]	; (80017ac <HAL_SPI_MspInit+0x88>)
 8001768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800176a:	4a10      	ldr	r2, [pc, #64]	; (80017ac <HAL_SPI_MspInit+0x88>)
 800176c:	f043 0301 	orr.w	r3, r3, #1
 8001770:	6313      	str	r3, [r2, #48]	; 0x30
 8001772:	4b0e      	ldr	r3, [pc, #56]	; (80017ac <HAL_SPI_MspInit+0x88>)
 8001774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001776:	f003 0301 	and.w	r3, r3, #1
 800177a:	60fb      	str	r3, [r7, #12]
 800177c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800177e:	23e0      	movs	r3, #224	; 0xe0
 8001780:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001782:	2302      	movs	r3, #2
 8001784:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001786:	2300      	movs	r3, #0
 8001788:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800178a:	2303      	movs	r3, #3
 800178c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800178e:	2305      	movs	r3, #5
 8001790:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001792:	f107 0314 	add.w	r3, r7, #20
 8001796:	4619      	mov	r1, r3
 8001798:	4805      	ldr	r0, [pc, #20]	; (80017b0 <HAL_SPI_MspInit+0x8c>)
 800179a:	f000 ff7b 	bl	8002694 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800179e:	bf00      	nop
 80017a0:	3728      	adds	r7, #40	; 0x28
 80017a2:	46bd      	mov	sp, r7
 80017a4:	bd80      	pop	{r7, pc}
 80017a6:	bf00      	nop
 80017a8:	40013000 	.word	0x40013000
 80017ac:	40023800 	.word	0x40023800
 80017b0:	40020000 	.word	0x40020000

080017b4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b084      	sub	sp, #16
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80017c4:	d115      	bne.n	80017f2 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80017c6:	2300      	movs	r3, #0
 80017c8:	60fb      	str	r3, [r7, #12]
 80017ca:	4b0c      	ldr	r3, [pc, #48]	; (80017fc <HAL_TIM_Base_MspInit+0x48>)
 80017cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ce:	4a0b      	ldr	r2, [pc, #44]	; (80017fc <HAL_TIM_Base_MspInit+0x48>)
 80017d0:	f043 0301 	orr.w	r3, r3, #1
 80017d4:	6413      	str	r3, [r2, #64]	; 0x40
 80017d6:	4b09      	ldr	r3, [pc, #36]	; (80017fc <HAL_TIM_Base_MspInit+0x48>)
 80017d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017da:	f003 0301 	and.w	r3, r3, #1
 80017de:	60fb      	str	r3, [r7, #12]
 80017e0:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 2, 0);
 80017e2:	2200      	movs	r2, #0
 80017e4:	2102      	movs	r1, #2
 80017e6:	201c      	movs	r0, #28
 80017e8:	f000 fb1b 	bl	8001e22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80017ec:	201c      	movs	r0, #28
 80017ee:	f000 fb34 	bl	8001e5a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80017f2:	bf00      	nop
 80017f4:	3710      	adds	r7, #16
 80017f6:	46bd      	mov	sp, r7
 80017f8:	bd80      	pop	{r7, pc}
 80017fa:	bf00      	nop
 80017fc:	40023800 	.word	0x40023800

08001800 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	b08c      	sub	sp, #48	; 0x30
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001808:	f107 031c 	add.w	r3, r7, #28
 800180c:	2200      	movs	r2, #0
 800180e:	601a      	str	r2, [r3, #0]
 8001810:	605a      	str	r2, [r3, #4]
 8001812:	609a      	str	r2, [r3, #8]
 8001814:	60da      	str	r2, [r3, #12]
 8001816:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	4a52      	ldr	r2, [pc, #328]	; (8001968 <HAL_UART_MspInit+0x168>)
 800181e:	4293      	cmp	r3, r2
 8001820:	d164      	bne.n	80018ec <HAL_UART_MspInit+0xec>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001822:	2300      	movs	r3, #0
 8001824:	61bb      	str	r3, [r7, #24]
 8001826:	4b51      	ldr	r3, [pc, #324]	; (800196c <HAL_UART_MspInit+0x16c>)
 8001828:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800182a:	4a50      	ldr	r2, [pc, #320]	; (800196c <HAL_UART_MspInit+0x16c>)
 800182c:	f043 0310 	orr.w	r3, r3, #16
 8001830:	6453      	str	r3, [r2, #68]	; 0x44
 8001832:	4b4e      	ldr	r3, [pc, #312]	; (800196c <HAL_UART_MspInit+0x16c>)
 8001834:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001836:	f003 0310 	and.w	r3, r3, #16
 800183a:	61bb      	str	r3, [r7, #24]
 800183c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800183e:	2300      	movs	r3, #0
 8001840:	617b      	str	r3, [r7, #20]
 8001842:	4b4a      	ldr	r3, [pc, #296]	; (800196c <HAL_UART_MspInit+0x16c>)
 8001844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001846:	4a49      	ldr	r2, [pc, #292]	; (800196c <HAL_UART_MspInit+0x16c>)
 8001848:	f043 0301 	orr.w	r3, r3, #1
 800184c:	6313      	str	r3, [r2, #48]	; 0x30
 800184e:	4b47      	ldr	r3, [pc, #284]	; (800196c <HAL_UART_MspInit+0x16c>)
 8001850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001852:	f003 0301 	and.w	r3, r3, #1
 8001856:	617b      	str	r3, [r7, #20]
 8001858:	697b      	ldr	r3, [r7, #20]
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    PA11     ------> USART1_CTS
    PA12     ------> USART1_RTS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 800185a:	f44f 53f0 	mov.w	r3, #7680	; 0x1e00
 800185e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001860:	2302      	movs	r3, #2
 8001862:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001864:	2300      	movs	r3, #0
 8001866:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001868:	2303      	movs	r3, #3
 800186a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800186c:	2307      	movs	r3, #7
 800186e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001870:	f107 031c 	add.w	r3, r7, #28
 8001874:	4619      	mov	r1, r3
 8001876:	483e      	ldr	r0, [pc, #248]	; (8001970 <HAL_UART_MspInit+0x170>)
 8001878:	f000 ff0c 	bl	8002694 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 800187c:	4b3d      	ldr	r3, [pc, #244]	; (8001974 <HAL_UART_MspInit+0x174>)
 800187e:	4a3e      	ldr	r2, [pc, #248]	; (8001978 <HAL_UART_MspInit+0x178>)
 8001880:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8001882:	4b3c      	ldr	r3, [pc, #240]	; (8001974 <HAL_UART_MspInit+0x174>)
 8001884:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001888:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800188a:	4b3a      	ldr	r3, [pc, #232]	; (8001974 <HAL_UART_MspInit+0x174>)
 800188c:	2200      	movs	r2, #0
 800188e:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001890:	4b38      	ldr	r3, [pc, #224]	; (8001974 <HAL_UART_MspInit+0x174>)
 8001892:	2200      	movs	r2, #0
 8001894:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001896:	4b37      	ldr	r3, [pc, #220]	; (8001974 <HAL_UART_MspInit+0x174>)
 8001898:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800189c:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800189e:	4b35      	ldr	r3, [pc, #212]	; (8001974 <HAL_UART_MspInit+0x174>)
 80018a0:	2200      	movs	r2, #0
 80018a2:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80018a4:	4b33      	ldr	r3, [pc, #204]	; (8001974 <HAL_UART_MspInit+0x174>)
 80018a6:	2200      	movs	r2, #0
 80018a8:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 80018aa:	4b32      	ldr	r3, [pc, #200]	; (8001974 <HAL_UART_MspInit+0x174>)
 80018ac:	2200      	movs	r2, #0
 80018ae:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80018b0:	4b30      	ldr	r3, [pc, #192]	; (8001974 <HAL_UART_MspInit+0x174>)
 80018b2:	2200      	movs	r2, #0
 80018b4:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80018b6:	4b2f      	ldr	r3, [pc, #188]	; (8001974 <HAL_UART_MspInit+0x174>)
 80018b8:	2204      	movs	r2, #4
 80018ba:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_usart1_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_HALFFULL;
 80018bc:	4b2d      	ldr	r3, [pc, #180]	; (8001974 <HAL_UART_MspInit+0x174>)
 80018be:	2201      	movs	r2, #1
 80018c0:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_usart1_rx.Init.MemBurst = DMA_MBURST_SINGLE;
 80018c2:	4b2c      	ldr	r3, [pc, #176]	; (8001974 <HAL_UART_MspInit+0x174>)
 80018c4:	2200      	movs	r2, #0
 80018c6:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_usart1_rx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 80018c8:	4b2a      	ldr	r3, [pc, #168]	; (8001974 <HAL_UART_MspInit+0x174>)
 80018ca:	2200      	movs	r2, #0
 80018cc:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80018ce:	4829      	ldr	r0, [pc, #164]	; (8001974 <HAL_UART_MspInit+0x174>)
 80018d0:	f000 fade 	bl	8001e90 <HAL_DMA_Init>
 80018d4:	4603      	mov	r3, r0
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d001      	beq.n	80018de <HAL_UART_MspInit+0xde>
    {
      Error_Handler();
 80018da:	f7ff fe45 	bl	8001568 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	4a24      	ldr	r2, [pc, #144]	; (8001974 <HAL_UART_MspInit+0x174>)
 80018e2:	639a      	str	r2, [r3, #56]	; 0x38
 80018e4:	4a23      	ldr	r2, [pc, #140]	; (8001974 <HAL_UART_MspInit+0x174>)
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80018ea:	e038      	b.n	800195e <HAL_UART_MspInit+0x15e>
  else if(huart->Instance==USART2)
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	4a22      	ldr	r2, [pc, #136]	; (800197c <HAL_UART_MspInit+0x17c>)
 80018f2:	4293      	cmp	r3, r2
 80018f4:	d133      	bne.n	800195e <HAL_UART_MspInit+0x15e>
    __HAL_RCC_USART2_CLK_ENABLE();
 80018f6:	2300      	movs	r3, #0
 80018f8:	613b      	str	r3, [r7, #16]
 80018fa:	4b1c      	ldr	r3, [pc, #112]	; (800196c <HAL_UART_MspInit+0x16c>)
 80018fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018fe:	4a1b      	ldr	r2, [pc, #108]	; (800196c <HAL_UART_MspInit+0x16c>)
 8001900:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001904:	6413      	str	r3, [r2, #64]	; 0x40
 8001906:	4b19      	ldr	r3, [pc, #100]	; (800196c <HAL_UART_MspInit+0x16c>)
 8001908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800190a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800190e:	613b      	str	r3, [r7, #16]
 8001910:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001912:	2300      	movs	r3, #0
 8001914:	60fb      	str	r3, [r7, #12]
 8001916:	4b15      	ldr	r3, [pc, #84]	; (800196c <HAL_UART_MspInit+0x16c>)
 8001918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800191a:	4a14      	ldr	r2, [pc, #80]	; (800196c <HAL_UART_MspInit+0x16c>)
 800191c:	f043 0301 	orr.w	r3, r3, #1
 8001920:	6313      	str	r3, [r2, #48]	; 0x30
 8001922:	4b12      	ldr	r3, [pc, #72]	; (800196c <HAL_UART_MspInit+0x16c>)
 8001924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001926:	f003 0301 	and.w	r3, r3, #1
 800192a:	60fb      	str	r3, [r7, #12]
 800192c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 800192e:	230f      	movs	r3, #15
 8001930:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001932:	2302      	movs	r3, #2
 8001934:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001936:	2300      	movs	r3, #0
 8001938:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800193a:	2303      	movs	r3, #3
 800193c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800193e:	2307      	movs	r3, #7
 8001940:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001942:	f107 031c 	add.w	r3, r7, #28
 8001946:	4619      	mov	r1, r3
 8001948:	4809      	ldr	r0, [pc, #36]	; (8001970 <HAL_UART_MspInit+0x170>)
 800194a:	f000 fea3 	bl	8002694 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 1, 0);
 800194e:	2200      	movs	r2, #0
 8001950:	2101      	movs	r1, #1
 8001952:	2026      	movs	r0, #38	; 0x26
 8001954:	f000 fa65 	bl	8001e22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001958:	2026      	movs	r0, #38	; 0x26
 800195a:	f000 fa7e 	bl	8001e5a <HAL_NVIC_EnableIRQ>
}
 800195e:	bf00      	nop
 8001960:	3730      	adds	r7, #48	; 0x30
 8001962:	46bd      	mov	sp, r7
 8001964:	bd80      	pop	{r7, pc}
 8001966:	bf00      	nop
 8001968:	40011000 	.word	0x40011000
 800196c:	40023800 	.word	0x40023800
 8001970:	40020000 	.word	0x40020000
 8001974:	200002b4 	.word	0x200002b4
 8001978:	40026440 	.word	0x40026440
 800197c:	40004400 	.word	0x40004400

08001980 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001980:	b480      	push	{r7}
 8001982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001984:	e7fe      	b.n	8001984 <NMI_Handler+0x4>

08001986 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001986:	b480      	push	{r7}
 8001988:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800198a:	e7fe      	b.n	800198a <HardFault_Handler+0x4>

0800198c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800198c:	b480      	push	{r7}
 800198e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001990:	e7fe      	b.n	8001990 <MemManage_Handler+0x4>

08001992 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001992:	b480      	push	{r7}
 8001994:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001996:	e7fe      	b.n	8001996 <BusFault_Handler+0x4>

08001998 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001998:	b480      	push	{r7}
 800199a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800199c:	e7fe      	b.n	800199c <UsageFault_Handler+0x4>

0800199e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800199e:	b480      	push	{r7}
 80019a0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80019a2:	bf00      	nop
 80019a4:	46bd      	mov	sp, r7
 80019a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019aa:	4770      	bx	lr

080019ac <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80019ac:	b480      	push	{r7}
 80019ae:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80019b0:	bf00      	nop
 80019b2:	46bd      	mov	sp, r7
 80019b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b8:	4770      	bx	lr

080019ba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80019ba:	b480      	push	{r7}
 80019bc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80019be:	bf00      	nop
 80019c0:	46bd      	mov	sp, r7
 80019c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c6:	4770      	bx	lr

080019c8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80019cc:	f000 f90a 	bl	8001be4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80019d0:	bf00      	nop
 80019d2:	bd80      	pop	{r7, pc}

080019d4 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(IO0_RF_Pin);
 80019d8:	2002      	movs	r0, #2
 80019da:	f001 f811 	bl	8002a00 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 80019de:	bf00      	nop
 80019e0:	bd80      	pop	{r7, pc}
	...

080019e4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80019e8:	4802      	ldr	r0, [pc, #8]	; (80019f4 <TIM2_IRQHandler+0x10>)
 80019ea:	f003 fd6d 	bl	80054c8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80019ee:	bf00      	nop
 80019f0:	bd80      	pop	{r7, pc}
 80019f2:	bf00      	nop
 80019f4:	200001e4 	.word	0x200001e4

080019f8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80019fc:	4802      	ldr	r0, [pc, #8]	; (8001a08 <USART2_IRQHandler+0x10>)
 80019fe:	f004 fad7 	bl	8005fb0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001a02:	bf00      	nop
 8001a04:	bd80      	pop	{r7, pc}
 8001a06:	bf00      	nop
 8001a08:	20000270 	.word	0x20000270

08001a0c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(IO1_RF_Pin);
 8001a10:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001a14:	f000 fff4 	bl	8002a00 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(IO2_RF_Pin);
 8001a18:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8001a1c:	f000 fff0 	bl	8002a00 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(IO3_RF_Pin);
 8001a20:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001a24:	f000 ffec 	bl	8002a00 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(IO4_RF_Pin);
 8001a28:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001a2c:	f000 ffe8 	bl	8002a00 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001a30:	bf00      	nop
 8001a32:	bd80      	pop	{r7, pc}

08001a34 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001a38:	4802      	ldr	r0, [pc, #8]	; (8001a44 <DMA2_Stream2_IRQHandler+0x10>)
 8001a3a:	f000 fbc1 	bl	80021c0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8001a3e:	bf00      	nop
 8001a40:	bd80      	pop	{r7, pc}
 8001a42:	bf00      	nop
 8001a44:	200002b4 	.word	0x200002b4

08001a48 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
 8001a4c:	4802      	ldr	r0, [pc, #8]	; (8001a58 <OTG_HS_IRQHandler+0x10>)
 8001a4e:	f001 f93f 	bl	8002cd0 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 8001a52:	bf00      	nop
 8001a54:	bd80      	pop	{r7, pc}
 8001a56:	bf00      	nop
 8001a58:	20001d18 	.word	0x20001d18

08001a5c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b086      	sub	sp, #24
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a64:	4a14      	ldr	r2, [pc, #80]	; (8001ab8 <_sbrk+0x5c>)
 8001a66:	4b15      	ldr	r3, [pc, #84]	; (8001abc <_sbrk+0x60>)
 8001a68:	1ad3      	subs	r3, r2, r3
 8001a6a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a6c:	697b      	ldr	r3, [r7, #20]
 8001a6e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a70:	4b13      	ldr	r3, [pc, #76]	; (8001ac0 <_sbrk+0x64>)
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d102      	bne.n	8001a7e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a78:	4b11      	ldr	r3, [pc, #68]	; (8001ac0 <_sbrk+0x64>)
 8001a7a:	4a12      	ldr	r2, [pc, #72]	; (8001ac4 <_sbrk+0x68>)
 8001a7c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a7e:	4b10      	ldr	r3, [pc, #64]	; (8001ac0 <_sbrk+0x64>)
 8001a80:	681a      	ldr	r2, [r3, #0]
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	4413      	add	r3, r2
 8001a86:	693a      	ldr	r2, [r7, #16]
 8001a88:	429a      	cmp	r2, r3
 8001a8a:	d207      	bcs.n	8001a9c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a8c:	f009 fcd4 	bl	800b438 <__errno>
 8001a90:	4603      	mov	r3, r0
 8001a92:	220c      	movs	r2, #12
 8001a94:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a96:	f04f 33ff 	mov.w	r3, #4294967295
 8001a9a:	e009      	b.n	8001ab0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a9c:	4b08      	ldr	r3, [pc, #32]	; (8001ac0 <_sbrk+0x64>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001aa2:	4b07      	ldr	r3, [pc, #28]	; (8001ac0 <_sbrk+0x64>)
 8001aa4:	681a      	ldr	r2, [r3, #0]
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	4413      	add	r3, r2
 8001aaa:	4a05      	ldr	r2, [pc, #20]	; (8001ac0 <_sbrk+0x64>)
 8001aac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001aae:	68fb      	ldr	r3, [r7, #12]
}
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	3718      	adds	r7, #24
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	bd80      	pop	{r7, pc}
 8001ab8:	20020000 	.word	0x20020000
 8001abc:	00000400 	.word	0x00000400
 8001ac0:	20000830 	.word	0x20000830
 8001ac4:	20002458 	.word	0x20002458

08001ac8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001acc:	4b06      	ldr	r3, [pc, #24]	; (8001ae8 <SystemInit+0x20>)
 8001ace:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ad2:	4a05      	ldr	r2, [pc, #20]	; (8001ae8 <SystemInit+0x20>)
 8001ad4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001ad8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001adc:	bf00      	nop
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae4:	4770      	bx	lr
 8001ae6:	bf00      	nop
 8001ae8:	e000ed00 	.word	0xe000ed00

08001aec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001aec:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001b24 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001af0:	480d      	ldr	r0, [pc, #52]	; (8001b28 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001af2:	490e      	ldr	r1, [pc, #56]	; (8001b2c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001af4:	4a0e      	ldr	r2, [pc, #56]	; (8001b30 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001af6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001af8:	e002      	b.n	8001b00 <LoopCopyDataInit>

08001afa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001afa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001afc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001afe:	3304      	adds	r3, #4

08001b00 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b00:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b02:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b04:	d3f9      	bcc.n	8001afa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b06:	4a0b      	ldr	r2, [pc, #44]	; (8001b34 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001b08:	4c0b      	ldr	r4, [pc, #44]	; (8001b38 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001b0a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b0c:	e001      	b.n	8001b12 <LoopFillZerobss>

08001b0e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b0e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b10:	3204      	adds	r2, #4

08001b12 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b12:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b14:	d3fb      	bcc.n	8001b0e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001b16:	f7ff ffd7 	bl	8001ac8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001b1a:	f009 fc93 	bl	800b444 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001b1e:	f7ff f8c3 	bl	8000ca8 <main>
  bx  lr    
 8001b22:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001b24:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001b28:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b2c:	20000170 	.word	0x20000170
  ldr r2, =_sidata
 8001b30:	0800be70 	.word	0x0800be70
  ldr r2, =_sbss
 8001b34:	20000170 	.word	0x20000170
  ldr r4, =_ebss
 8001b38:	20002454 	.word	0x20002454

08001b3c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001b3c:	e7fe      	b.n	8001b3c <ADC_IRQHandler>
	...

08001b40 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001b44:	4b0e      	ldr	r3, [pc, #56]	; (8001b80 <HAL_Init+0x40>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	4a0d      	ldr	r2, [pc, #52]	; (8001b80 <HAL_Init+0x40>)
 8001b4a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b4e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001b50:	4b0b      	ldr	r3, [pc, #44]	; (8001b80 <HAL_Init+0x40>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	4a0a      	ldr	r2, [pc, #40]	; (8001b80 <HAL_Init+0x40>)
 8001b56:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001b5a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b5c:	4b08      	ldr	r3, [pc, #32]	; (8001b80 <HAL_Init+0x40>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	4a07      	ldr	r2, [pc, #28]	; (8001b80 <HAL_Init+0x40>)
 8001b62:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b66:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b68:	2003      	movs	r0, #3
 8001b6a:	f000 f94f 	bl	8001e0c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b6e:	200f      	movs	r0, #15
 8001b70:	f000 f808 	bl	8001b84 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b74:	f7ff fdae 	bl	80016d4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b78:	2300      	movs	r3, #0
}
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	bd80      	pop	{r7, pc}
 8001b7e:	bf00      	nop
 8001b80:	40023c00 	.word	0x40023c00

08001b84 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b082      	sub	sp, #8
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001b8c:	4b12      	ldr	r3, [pc, #72]	; (8001bd8 <HAL_InitTick+0x54>)
 8001b8e:	681a      	ldr	r2, [r3, #0]
 8001b90:	4b12      	ldr	r3, [pc, #72]	; (8001bdc <HAL_InitTick+0x58>)
 8001b92:	781b      	ldrb	r3, [r3, #0]
 8001b94:	4619      	mov	r1, r3
 8001b96:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b9a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	f000 f967 	bl	8001e76 <HAL_SYSTICK_Config>
 8001ba8:	4603      	mov	r3, r0
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d001      	beq.n	8001bb2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001bae:	2301      	movs	r3, #1
 8001bb0:	e00e      	b.n	8001bd0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	2b0f      	cmp	r3, #15
 8001bb6:	d80a      	bhi.n	8001bce <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001bb8:	2200      	movs	r2, #0
 8001bba:	6879      	ldr	r1, [r7, #4]
 8001bbc:	f04f 30ff 	mov.w	r0, #4294967295
 8001bc0:	f000 f92f 	bl	8001e22 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001bc4:	4a06      	ldr	r2, [pc, #24]	; (8001be0 <HAL_InitTick+0x5c>)
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001bca:	2300      	movs	r3, #0
 8001bcc:	e000      	b.n	8001bd0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001bce:	2301      	movs	r3, #1
}
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	3708      	adds	r7, #8
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	bd80      	pop	{r7, pc}
 8001bd8:	20000010 	.word	0x20000010
 8001bdc:	20000018 	.word	0x20000018
 8001be0:	20000014 	.word	0x20000014

08001be4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001be4:	b480      	push	{r7}
 8001be6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001be8:	4b06      	ldr	r3, [pc, #24]	; (8001c04 <HAL_IncTick+0x20>)
 8001bea:	781b      	ldrb	r3, [r3, #0]
 8001bec:	461a      	mov	r2, r3
 8001bee:	4b06      	ldr	r3, [pc, #24]	; (8001c08 <HAL_IncTick+0x24>)
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	4413      	add	r3, r2
 8001bf4:	4a04      	ldr	r2, [pc, #16]	; (8001c08 <HAL_IncTick+0x24>)
 8001bf6:	6013      	str	r3, [r2, #0]
}
 8001bf8:	bf00      	nop
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c00:	4770      	bx	lr
 8001c02:	bf00      	nop
 8001c04:	20000018 	.word	0x20000018
 8001c08:	20000834 	.word	0x20000834

08001c0c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	af00      	add	r7, sp, #0
  return uwTick;
 8001c10:	4b03      	ldr	r3, [pc, #12]	; (8001c20 <HAL_GetTick+0x14>)
 8001c12:	681b      	ldr	r3, [r3, #0]
}
 8001c14:	4618      	mov	r0, r3
 8001c16:	46bd      	mov	sp, r7
 8001c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1c:	4770      	bx	lr
 8001c1e:	bf00      	nop
 8001c20:	20000834 	.word	0x20000834

08001c24 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b084      	sub	sp, #16
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c2c:	f7ff ffee 	bl	8001c0c <HAL_GetTick>
 8001c30:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c3c:	d005      	beq.n	8001c4a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c3e:	4b0a      	ldr	r3, [pc, #40]	; (8001c68 <HAL_Delay+0x44>)
 8001c40:	781b      	ldrb	r3, [r3, #0]
 8001c42:	461a      	mov	r2, r3
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	4413      	add	r3, r2
 8001c48:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001c4a:	bf00      	nop
 8001c4c:	f7ff ffde 	bl	8001c0c <HAL_GetTick>
 8001c50:	4602      	mov	r2, r0
 8001c52:	68bb      	ldr	r3, [r7, #8]
 8001c54:	1ad3      	subs	r3, r2, r3
 8001c56:	68fa      	ldr	r2, [r7, #12]
 8001c58:	429a      	cmp	r2, r3
 8001c5a:	d8f7      	bhi.n	8001c4c <HAL_Delay+0x28>
  {
  }
}
 8001c5c:	bf00      	nop
 8001c5e:	bf00      	nop
 8001c60:	3710      	adds	r7, #16
 8001c62:	46bd      	mov	sp, r7
 8001c64:	bd80      	pop	{r7, pc}
 8001c66:	bf00      	nop
 8001c68:	20000018 	.word	0x20000018

08001c6c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	b085      	sub	sp, #20
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	f003 0307 	and.w	r3, r3, #7
 8001c7a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c7c:	4b0c      	ldr	r3, [pc, #48]	; (8001cb0 <__NVIC_SetPriorityGrouping+0x44>)
 8001c7e:	68db      	ldr	r3, [r3, #12]
 8001c80:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c82:	68ba      	ldr	r2, [r7, #8]
 8001c84:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c88:	4013      	ands	r3, r2
 8001c8a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c90:	68bb      	ldr	r3, [r7, #8]
 8001c92:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c94:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001c98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c9c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c9e:	4a04      	ldr	r2, [pc, #16]	; (8001cb0 <__NVIC_SetPriorityGrouping+0x44>)
 8001ca0:	68bb      	ldr	r3, [r7, #8]
 8001ca2:	60d3      	str	r3, [r2, #12]
}
 8001ca4:	bf00      	nop
 8001ca6:	3714      	adds	r7, #20
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cae:	4770      	bx	lr
 8001cb0:	e000ed00 	.word	0xe000ed00

08001cb4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001cb8:	4b04      	ldr	r3, [pc, #16]	; (8001ccc <__NVIC_GetPriorityGrouping+0x18>)
 8001cba:	68db      	ldr	r3, [r3, #12]
 8001cbc:	0a1b      	lsrs	r3, r3, #8
 8001cbe:	f003 0307 	and.w	r3, r3, #7
}
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cca:	4770      	bx	lr
 8001ccc:	e000ed00 	.word	0xe000ed00

08001cd0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cd0:	b480      	push	{r7}
 8001cd2:	b083      	sub	sp, #12
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	db0b      	blt.n	8001cfa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ce2:	79fb      	ldrb	r3, [r7, #7]
 8001ce4:	f003 021f 	and.w	r2, r3, #31
 8001ce8:	4907      	ldr	r1, [pc, #28]	; (8001d08 <__NVIC_EnableIRQ+0x38>)
 8001cea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cee:	095b      	lsrs	r3, r3, #5
 8001cf0:	2001      	movs	r0, #1
 8001cf2:	fa00 f202 	lsl.w	r2, r0, r2
 8001cf6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001cfa:	bf00      	nop
 8001cfc:	370c      	adds	r7, #12
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d04:	4770      	bx	lr
 8001d06:	bf00      	nop
 8001d08:	e000e100 	.word	0xe000e100

08001d0c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d0c:	b480      	push	{r7}
 8001d0e:	b083      	sub	sp, #12
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	4603      	mov	r3, r0
 8001d14:	6039      	str	r1, [r7, #0]
 8001d16:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	db0a      	blt.n	8001d36 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d20:	683b      	ldr	r3, [r7, #0]
 8001d22:	b2da      	uxtb	r2, r3
 8001d24:	490c      	ldr	r1, [pc, #48]	; (8001d58 <__NVIC_SetPriority+0x4c>)
 8001d26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d2a:	0112      	lsls	r2, r2, #4
 8001d2c:	b2d2      	uxtb	r2, r2
 8001d2e:	440b      	add	r3, r1
 8001d30:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d34:	e00a      	b.n	8001d4c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d36:	683b      	ldr	r3, [r7, #0]
 8001d38:	b2da      	uxtb	r2, r3
 8001d3a:	4908      	ldr	r1, [pc, #32]	; (8001d5c <__NVIC_SetPriority+0x50>)
 8001d3c:	79fb      	ldrb	r3, [r7, #7]
 8001d3e:	f003 030f 	and.w	r3, r3, #15
 8001d42:	3b04      	subs	r3, #4
 8001d44:	0112      	lsls	r2, r2, #4
 8001d46:	b2d2      	uxtb	r2, r2
 8001d48:	440b      	add	r3, r1
 8001d4a:	761a      	strb	r2, [r3, #24]
}
 8001d4c:	bf00      	nop
 8001d4e:	370c      	adds	r7, #12
 8001d50:	46bd      	mov	sp, r7
 8001d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d56:	4770      	bx	lr
 8001d58:	e000e100 	.word	0xe000e100
 8001d5c:	e000ed00 	.word	0xe000ed00

08001d60 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d60:	b480      	push	{r7}
 8001d62:	b089      	sub	sp, #36	; 0x24
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	60f8      	str	r0, [r7, #12]
 8001d68:	60b9      	str	r1, [r7, #8]
 8001d6a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	f003 0307 	and.w	r3, r3, #7
 8001d72:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d74:	69fb      	ldr	r3, [r7, #28]
 8001d76:	f1c3 0307 	rsb	r3, r3, #7
 8001d7a:	2b04      	cmp	r3, #4
 8001d7c:	bf28      	it	cs
 8001d7e:	2304      	movcs	r3, #4
 8001d80:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d82:	69fb      	ldr	r3, [r7, #28]
 8001d84:	3304      	adds	r3, #4
 8001d86:	2b06      	cmp	r3, #6
 8001d88:	d902      	bls.n	8001d90 <NVIC_EncodePriority+0x30>
 8001d8a:	69fb      	ldr	r3, [r7, #28]
 8001d8c:	3b03      	subs	r3, #3
 8001d8e:	e000      	b.n	8001d92 <NVIC_EncodePriority+0x32>
 8001d90:	2300      	movs	r3, #0
 8001d92:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d94:	f04f 32ff 	mov.w	r2, #4294967295
 8001d98:	69bb      	ldr	r3, [r7, #24]
 8001d9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d9e:	43da      	mvns	r2, r3
 8001da0:	68bb      	ldr	r3, [r7, #8]
 8001da2:	401a      	ands	r2, r3
 8001da4:	697b      	ldr	r3, [r7, #20]
 8001da6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001da8:	f04f 31ff 	mov.w	r1, #4294967295
 8001dac:	697b      	ldr	r3, [r7, #20]
 8001dae:	fa01 f303 	lsl.w	r3, r1, r3
 8001db2:	43d9      	mvns	r1, r3
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001db8:	4313      	orrs	r3, r2
         );
}
 8001dba:	4618      	mov	r0, r3
 8001dbc:	3724      	adds	r7, #36	; 0x24
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc4:	4770      	bx	lr
	...

08001dc8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b082      	sub	sp, #8
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	3b01      	subs	r3, #1
 8001dd4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001dd8:	d301      	bcc.n	8001dde <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001dda:	2301      	movs	r3, #1
 8001ddc:	e00f      	b.n	8001dfe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001dde:	4a0a      	ldr	r2, [pc, #40]	; (8001e08 <SysTick_Config+0x40>)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	3b01      	subs	r3, #1
 8001de4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001de6:	210f      	movs	r1, #15
 8001de8:	f04f 30ff 	mov.w	r0, #4294967295
 8001dec:	f7ff ff8e 	bl	8001d0c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001df0:	4b05      	ldr	r3, [pc, #20]	; (8001e08 <SysTick_Config+0x40>)
 8001df2:	2200      	movs	r2, #0
 8001df4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001df6:	4b04      	ldr	r3, [pc, #16]	; (8001e08 <SysTick_Config+0x40>)
 8001df8:	2207      	movs	r2, #7
 8001dfa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001dfc:	2300      	movs	r3, #0
}
 8001dfe:	4618      	mov	r0, r3
 8001e00:	3708      	adds	r7, #8
 8001e02:	46bd      	mov	sp, r7
 8001e04:	bd80      	pop	{r7, pc}
 8001e06:	bf00      	nop
 8001e08:	e000e010 	.word	0xe000e010

08001e0c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b082      	sub	sp, #8
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e14:	6878      	ldr	r0, [r7, #4]
 8001e16:	f7ff ff29 	bl	8001c6c <__NVIC_SetPriorityGrouping>
}
 8001e1a:	bf00      	nop
 8001e1c:	3708      	adds	r7, #8
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	bd80      	pop	{r7, pc}

08001e22 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e22:	b580      	push	{r7, lr}
 8001e24:	b086      	sub	sp, #24
 8001e26:	af00      	add	r7, sp, #0
 8001e28:	4603      	mov	r3, r0
 8001e2a:	60b9      	str	r1, [r7, #8]
 8001e2c:	607a      	str	r2, [r7, #4]
 8001e2e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001e30:	2300      	movs	r3, #0
 8001e32:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e34:	f7ff ff3e 	bl	8001cb4 <__NVIC_GetPriorityGrouping>
 8001e38:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e3a:	687a      	ldr	r2, [r7, #4]
 8001e3c:	68b9      	ldr	r1, [r7, #8]
 8001e3e:	6978      	ldr	r0, [r7, #20]
 8001e40:	f7ff ff8e 	bl	8001d60 <NVIC_EncodePriority>
 8001e44:	4602      	mov	r2, r0
 8001e46:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e4a:	4611      	mov	r1, r2
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	f7ff ff5d 	bl	8001d0c <__NVIC_SetPriority>
}
 8001e52:	bf00      	nop
 8001e54:	3718      	adds	r7, #24
 8001e56:	46bd      	mov	sp, r7
 8001e58:	bd80      	pop	{r7, pc}

08001e5a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e5a:	b580      	push	{r7, lr}
 8001e5c:	b082      	sub	sp, #8
 8001e5e:	af00      	add	r7, sp, #0
 8001e60:	4603      	mov	r3, r0
 8001e62:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e68:	4618      	mov	r0, r3
 8001e6a:	f7ff ff31 	bl	8001cd0 <__NVIC_EnableIRQ>
}
 8001e6e:	bf00      	nop
 8001e70:	3708      	adds	r7, #8
 8001e72:	46bd      	mov	sp, r7
 8001e74:	bd80      	pop	{r7, pc}

08001e76 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e76:	b580      	push	{r7, lr}
 8001e78:	b082      	sub	sp, #8
 8001e7a:	af00      	add	r7, sp, #0
 8001e7c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e7e:	6878      	ldr	r0, [r7, #4]
 8001e80:	f7ff ffa2 	bl	8001dc8 <SysTick_Config>
 8001e84:	4603      	mov	r3, r0
}
 8001e86:	4618      	mov	r0, r3
 8001e88:	3708      	adds	r7, #8
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	bd80      	pop	{r7, pc}
	...

08001e90 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b086      	sub	sp, #24
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001e98:	2300      	movs	r3, #0
 8001e9a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001e9c:	f7ff feb6 	bl	8001c0c <HAL_GetTick>
 8001ea0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d101      	bne.n	8001eac <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001ea8:	2301      	movs	r3, #1
 8001eaa:	e099      	b.n	8001fe0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	2202      	movs	r2, #2
 8001eb0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	681a      	ldr	r2, [r3, #0]
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f022 0201 	bic.w	r2, r2, #1
 8001eca:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001ecc:	e00f      	b.n	8001eee <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001ece:	f7ff fe9d 	bl	8001c0c <HAL_GetTick>
 8001ed2:	4602      	mov	r2, r0
 8001ed4:	693b      	ldr	r3, [r7, #16]
 8001ed6:	1ad3      	subs	r3, r2, r3
 8001ed8:	2b05      	cmp	r3, #5
 8001eda:	d908      	bls.n	8001eee <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	2220      	movs	r2, #32
 8001ee0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	2203      	movs	r2, #3
 8001ee6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001eea:	2303      	movs	r3, #3
 8001eec:	e078      	b.n	8001fe0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f003 0301 	and.w	r3, r3, #1
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d1e8      	bne.n	8001ece <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001f04:	697a      	ldr	r2, [r7, #20]
 8001f06:	4b38      	ldr	r3, [pc, #224]	; (8001fe8 <HAL_DMA_Init+0x158>)
 8001f08:	4013      	ands	r3, r2
 8001f0a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	685a      	ldr	r2, [r3, #4]
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	689b      	ldr	r3, [r3, #8]
 8001f14:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001f1a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	691b      	ldr	r3, [r3, #16]
 8001f20:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f26:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	699b      	ldr	r3, [r3, #24]
 8001f2c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f32:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	6a1b      	ldr	r3, [r3, #32]
 8001f38:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001f3a:	697a      	ldr	r2, [r7, #20]
 8001f3c:	4313      	orrs	r3, r2
 8001f3e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f44:	2b04      	cmp	r3, #4
 8001f46:	d107      	bne.n	8001f58 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f50:	4313      	orrs	r3, r2
 8001f52:	697a      	ldr	r2, [r7, #20]
 8001f54:	4313      	orrs	r3, r2
 8001f56:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	697a      	ldr	r2, [r7, #20]
 8001f5e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	695b      	ldr	r3, [r3, #20]
 8001f66:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001f68:	697b      	ldr	r3, [r7, #20]
 8001f6a:	f023 0307 	bic.w	r3, r3, #7
 8001f6e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f74:	697a      	ldr	r2, [r7, #20]
 8001f76:	4313      	orrs	r3, r2
 8001f78:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f7e:	2b04      	cmp	r3, #4
 8001f80:	d117      	bne.n	8001fb2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f86:	697a      	ldr	r2, [r7, #20]
 8001f88:	4313      	orrs	r3, r2
 8001f8a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d00e      	beq.n	8001fb2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001f94:	6878      	ldr	r0, [r7, #4]
 8001f96:	f000 fb01 	bl	800259c <DMA_CheckFifoParam>
 8001f9a:	4603      	mov	r3, r0
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d008      	beq.n	8001fb2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	2240      	movs	r2, #64	; 0x40
 8001fa4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	2201      	movs	r2, #1
 8001faa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001fae:	2301      	movs	r3, #1
 8001fb0:	e016      	b.n	8001fe0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	697a      	ldr	r2, [r7, #20]
 8001fb8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001fba:	6878      	ldr	r0, [r7, #4]
 8001fbc:	f000 fab8 	bl	8002530 <DMA_CalcBaseAndBitshift>
 8001fc0:	4603      	mov	r3, r0
 8001fc2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fc8:	223f      	movs	r2, #63	; 0x3f
 8001fca:	409a      	lsls	r2, r3
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	2201      	movs	r2, #1
 8001fda:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001fde:	2300      	movs	r3, #0
}
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	3718      	adds	r7, #24
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	bd80      	pop	{r7, pc}
 8001fe8:	f010803f 	.word	0xf010803f

08001fec <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b086      	sub	sp, #24
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	60f8      	str	r0, [r7, #12]
 8001ff4:	60b9      	str	r1, [r7, #8]
 8001ff6:	607a      	str	r2, [r7, #4]
 8001ff8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002002:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800200a:	2b01      	cmp	r3, #1
 800200c:	d101      	bne.n	8002012 <HAL_DMA_Start_IT+0x26>
 800200e:	2302      	movs	r3, #2
 8002010:	e040      	b.n	8002094 <HAL_DMA_Start_IT+0xa8>
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	2201      	movs	r2, #1
 8002016:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002020:	b2db      	uxtb	r3, r3
 8002022:	2b01      	cmp	r3, #1
 8002024:	d12f      	bne.n	8002086 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	2202      	movs	r2, #2
 800202a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	2200      	movs	r2, #0
 8002032:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002034:	683b      	ldr	r3, [r7, #0]
 8002036:	687a      	ldr	r2, [r7, #4]
 8002038:	68b9      	ldr	r1, [r7, #8]
 800203a:	68f8      	ldr	r0, [r7, #12]
 800203c:	f000 fa4a 	bl	80024d4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002044:	223f      	movs	r2, #63	; 0x3f
 8002046:	409a      	lsls	r2, r3
 8002048:	693b      	ldr	r3, [r7, #16]
 800204a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	681a      	ldr	r2, [r3, #0]
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f042 0216 	orr.w	r2, r2, #22
 800205a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002060:	2b00      	cmp	r3, #0
 8002062:	d007      	beq.n	8002074 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	681a      	ldr	r2, [r3, #0]
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f042 0208 	orr.w	r2, r2, #8
 8002072:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	681a      	ldr	r2, [r3, #0]
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f042 0201 	orr.w	r2, r2, #1
 8002082:	601a      	str	r2, [r3, #0]
 8002084:	e005      	b.n	8002092 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	2200      	movs	r2, #0
 800208a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800208e:	2302      	movs	r3, #2
 8002090:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002092:	7dfb      	ldrb	r3, [r7, #23]
}
 8002094:	4618      	mov	r0, r3
 8002096:	3718      	adds	r7, #24
 8002098:	46bd      	mov	sp, r7
 800209a:	bd80      	pop	{r7, pc}

0800209c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	b084      	sub	sp, #16
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020a8:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80020aa:	f7ff fdaf 	bl	8001c0c <HAL_GetTick>
 80020ae:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80020b6:	b2db      	uxtb	r3, r3
 80020b8:	2b02      	cmp	r3, #2
 80020ba:	d008      	beq.n	80020ce <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	2280      	movs	r2, #128	; 0x80
 80020c0:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	2200      	movs	r2, #0
 80020c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80020ca:	2301      	movs	r3, #1
 80020cc:	e052      	b.n	8002174 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	681a      	ldr	r2, [r3, #0]
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f022 0216 	bic.w	r2, r2, #22
 80020dc:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	695a      	ldr	r2, [r3, #20]
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80020ec:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d103      	bne.n	80020fe <HAL_DMA_Abort+0x62>
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d007      	beq.n	800210e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	681a      	ldr	r2, [r3, #0]
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f022 0208 	bic.w	r2, r2, #8
 800210c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	681a      	ldr	r2, [r3, #0]
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f022 0201 	bic.w	r2, r2, #1
 800211c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800211e:	e013      	b.n	8002148 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002120:	f7ff fd74 	bl	8001c0c <HAL_GetTick>
 8002124:	4602      	mov	r2, r0
 8002126:	68bb      	ldr	r3, [r7, #8]
 8002128:	1ad3      	subs	r3, r2, r3
 800212a:	2b05      	cmp	r3, #5
 800212c:	d90c      	bls.n	8002148 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	2220      	movs	r2, #32
 8002132:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	2203      	movs	r2, #3
 8002138:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	2200      	movs	r2, #0
 8002140:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002144:	2303      	movs	r3, #3
 8002146:	e015      	b.n	8002174 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f003 0301 	and.w	r3, r3, #1
 8002152:	2b00      	cmp	r3, #0
 8002154:	d1e4      	bne.n	8002120 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800215a:	223f      	movs	r2, #63	; 0x3f
 800215c:	409a      	lsls	r2, r3
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	2201      	movs	r2, #1
 8002166:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	2200      	movs	r2, #0
 800216e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002172:	2300      	movs	r3, #0
}
 8002174:	4618      	mov	r0, r3
 8002176:	3710      	adds	r7, #16
 8002178:	46bd      	mov	sp, r7
 800217a:	bd80      	pop	{r7, pc}

0800217c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800217c:	b480      	push	{r7}
 800217e:	b083      	sub	sp, #12
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800218a:	b2db      	uxtb	r3, r3
 800218c:	2b02      	cmp	r3, #2
 800218e:	d004      	beq.n	800219a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	2280      	movs	r2, #128	; 0x80
 8002194:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002196:	2301      	movs	r3, #1
 8002198:	e00c      	b.n	80021b4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	2205      	movs	r2, #5
 800219e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	681a      	ldr	r2, [r3, #0]
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f022 0201 	bic.w	r2, r2, #1
 80021b0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80021b2:	2300      	movs	r3, #0
}
 80021b4:	4618      	mov	r0, r3
 80021b6:	370c      	adds	r7, #12
 80021b8:	46bd      	mov	sp, r7
 80021ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021be:	4770      	bx	lr

080021c0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b086      	sub	sp, #24
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80021c8:	2300      	movs	r3, #0
 80021ca:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80021cc:	4b8e      	ldr	r3, [pc, #568]	; (8002408 <HAL_DMA_IRQHandler+0x248>)
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	4a8e      	ldr	r2, [pc, #568]	; (800240c <HAL_DMA_IRQHandler+0x24c>)
 80021d2:	fba2 2303 	umull	r2, r3, r2, r3
 80021d6:	0a9b      	lsrs	r3, r3, #10
 80021d8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021de:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80021e0:	693b      	ldr	r3, [r7, #16]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021ea:	2208      	movs	r2, #8
 80021ec:	409a      	lsls	r2, r3
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	4013      	ands	r3, r2
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d01a      	beq.n	800222c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f003 0304 	and.w	r3, r3, #4
 8002200:	2b00      	cmp	r3, #0
 8002202:	d013      	beq.n	800222c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	681a      	ldr	r2, [r3, #0]
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f022 0204 	bic.w	r2, r2, #4
 8002212:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002218:	2208      	movs	r2, #8
 800221a:	409a      	lsls	r2, r3
 800221c:	693b      	ldr	r3, [r7, #16]
 800221e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002224:	f043 0201 	orr.w	r2, r3, #1
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002230:	2201      	movs	r2, #1
 8002232:	409a      	lsls	r2, r3
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	4013      	ands	r3, r2
 8002238:	2b00      	cmp	r3, #0
 800223a:	d012      	beq.n	8002262 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	695b      	ldr	r3, [r3, #20]
 8002242:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002246:	2b00      	cmp	r3, #0
 8002248:	d00b      	beq.n	8002262 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800224e:	2201      	movs	r2, #1
 8002250:	409a      	lsls	r2, r3
 8002252:	693b      	ldr	r3, [r7, #16]
 8002254:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800225a:	f043 0202 	orr.w	r2, r3, #2
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002266:	2204      	movs	r2, #4
 8002268:	409a      	lsls	r2, r3
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	4013      	ands	r3, r2
 800226e:	2b00      	cmp	r3, #0
 8002270:	d012      	beq.n	8002298 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f003 0302 	and.w	r3, r3, #2
 800227c:	2b00      	cmp	r3, #0
 800227e:	d00b      	beq.n	8002298 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002284:	2204      	movs	r2, #4
 8002286:	409a      	lsls	r2, r3
 8002288:	693b      	ldr	r3, [r7, #16]
 800228a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002290:	f043 0204 	orr.w	r2, r3, #4
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800229c:	2210      	movs	r2, #16
 800229e:	409a      	lsls	r2, r3
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	4013      	ands	r3, r2
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d043      	beq.n	8002330 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f003 0308 	and.w	r3, r3, #8
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d03c      	beq.n	8002330 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022ba:	2210      	movs	r2, #16
 80022bc:	409a      	lsls	r2, r3
 80022be:	693b      	ldr	r3, [r7, #16]
 80022c0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d018      	beq.n	8002302 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d108      	bne.n	80022f0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d024      	beq.n	8002330 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ea:	6878      	ldr	r0, [r7, #4]
 80022ec:	4798      	blx	r3
 80022ee:	e01f      	b.n	8002330 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d01b      	beq.n	8002330 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80022fc:	6878      	ldr	r0, [r7, #4]
 80022fe:	4798      	blx	r3
 8002300:	e016      	b.n	8002330 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800230c:	2b00      	cmp	r3, #0
 800230e:	d107      	bne.n	8002320 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	681a      	ldr	r2, [r3, #0]
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f022 0208 	bic.w	r2, r2, #8
 800231e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002324:	2b00      	cmp	r3, #0
 8002326:	d003      	beq.n	8002330 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800232c:	6878      	ldr	r0, [r7, #4]
 800232e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002334:	2220      	movs	r2, #32
 8002336:	409a      	lsls	r2, r3
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	4013      	ands	r3, r2
 800233c:	2b00      	cmp	r3, #0
 800233e:	f000 808f 	beq.w	8002460 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f003 0310 	and.w	r3, r3, #16
 800234c:	2b00      	cmp	r3, #0
 800234e:	f000 8087 	beq.w	8002460 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002356:	2220      	movs	r2, #32
 8002358:	409a      	lsls	r2, r3
 800235a:	693b      	ldr	r3, [r7, #16]
 800235c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002364:	b2db      	uxtb	r3, r3
 8002366:	2b05      	cmp	r3, #5
 8002368:	d136      	bne.n	80023d8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	681a      	ldr	r2, [r3, #0]
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f022 0216 	bic.w	r2, r2, #22
 8002378:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	695a      	ldr	r2, [r3, #20]
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002388:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800238e:	2b00      	cmp	r3, #0
 8002390:	d103      	bne.n	800239a <HAL_DMA_IRQHandler+0x1da>
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002396:	2b00      	cmp	r3, #0
 8002398:	d007      	beq.n	80023aa <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	681a      	ldr	r2, [r3, #0]
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f022 0208 	bic.w	r2, r2, #8
 80023a8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023ae:	223f      	movs	r2, #63	; 0x3f
 80023b0:	409a      	lsls	r2, r3
 80023b2:	693b      	ldr	r3, [r7, #16]
 80023b4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	2201      	movs	r2, #1
 80023ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	2200      	movs	r2, #0
 80023c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d07e      	beq.n	80024cc <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80023d2:	6878      	ldr	r0, [r7, #4]
 80023d4:	4798      	blx	r3
        }
        return;
 80023d6:	e079      	b.n	80024cc <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d01d      	beq.n	8002422 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d10d      	bne.n	8002410 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d031      	beq.n	8002460 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002400:	6878      	ldr	r0, [r7, #4]
 8002402:	4798      	blx	r3
 8002404:	e02c      	b.n	8002460 <HAL_DMA_IRQHandler+0x2a0>
 8002406:	bf00      	nop
 8002408:	20000010 	.word	0x20000010
 800240c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002414:	2b00      	cmp	r3, #0
 8002416:	d023      	beq.n	8002460 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800241c:	6878      	ldr	r0, [r7, #4]
 800241e:	4798      	blx	r3
 8002420:	e01e      	b.n	8002460 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800242c:	2b00      	cmp	r3, #0
 800242e:	d10f      	bne.n	8002450 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	681a      	ldr	r2, [r3, #0]
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f022 0210 	bic.w	r2, r2, #16
 800243e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	2201      	movs	r2, #1
 8002444:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	2200      	movs	r2, #0
 800244c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002454:	2b00      	cmp	r3, #0
 8002456:	d003      	beq.n	8002460 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800245c:	6878      	ldr	r0, [r7, #4]
 800245e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002464:	2b00      	cmp	r3, #0
 8002466:	d032      	beq.n	80024ce <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800246c:	f003 0301 	and.w	r3, r3, #1
 8002470:	2b00      	cmp	r3, #0
 8002472:	d022      	beq.n	80024ba <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	2205      	movs	r2, #5
 8002478:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	681a      	ldr	r2, [r3, #0]
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f022 0201 	bic.w	r2, r2, #1
 800248a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800248c:	68bb      	ldr	r3, [r7, #8]
 800248e:	3301      	adds	r3, #1
 8002490:	60bb      	str	r3, [r7, #8]
 8002492:	697a      	ldr	r2, [r7, #20]
 8002494:	429a      	cmp	r2, r3
 8002496:	d307      	bcc.n	80024a8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f003 0301 	and.w	r3, r3, #1
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d1f2      	bne.n	800248c <HAL_DMA_IRQHandler+0x2cc>
 80024a6:	e000      	b.n	80024aa <HAL_DMA_IRQHandler+0x2ea>
          break;
 80024a8:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	2201      	movs	r2, #1
 80024ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	2200      	movs	r2, #0
 80024b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d005      	beq.n	80024ce <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024c6:	6878      	ldr	r0, [r7, #4]
 80024c8:	4798      	blx	r3
 80024ca:	e000      	b.n	80024ce <HAL_DMA_IRQHandler+0x30e>
        return;
 80024cc:	bf00      	nop
    }
  }
}
 80024ce:	3718      	adds	r7, #24
 80024d0:	46bd      	mov	sp, r7
 80024d2:	bd80      	pop	{r7, pc}

080024d4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80024d4:	b480      	push	{r7}
 80024d6:	b085      	sub	sp, #20
 80024d8:	af00      	add	r7, sp, #0
 80024da:	60f8      	str	r0, [r7, #12]
 80024dc:	60b9      	str	r1, [r7, #8]
 80024de:	607a      	str	r2, [r7, #4]
 80024e0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	681a      	ldr	r2, [r3, #0]
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80024f0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	683a      	ldr	r2, [r7, #0]
 80024f8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	689b      	ldr	r3, [r3, #8]
 80024fe:	2b40      	cmp	r3, #64	; 0x40
 8002500:	d108      	bne.n	8002514 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	687a      	ldr	r2, [r7, #4]
 8002508:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	68ba      	ldr	r2, [r7, #8]
 8002510:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002512:	e007      	b.n	8002524 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	68ba      	ldr	r2, [r7, #8]
 800251a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	687a      	ldr	r2, [r7, #4]
 8002522:	60da      	str	r2, [r3, #12]
}
 8002524:	bf00      	nop
 8002526:	3714      	adds	r7, #20
 8002528:	46bd      	mov	sp, r7
 800252a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252e:	4770      	bx	lr

08002530 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002530:	b480      	push	{r7}
 8002532:	b085      	sub	sp, #20
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	b2db      	uxtb	r3, r3
 800253e:	3b10      	subs	r3, #16
 8002540:	4a14      	ldr	r2, [pc, #80]	; (8002594 <DMA_CalcBaseAndBitshift+0x64>)
 8002542:	fba2 2303 	umull	r2, r3, r2, r3
 8002546:	091b      	lsrs	r3, r3, #4
 8002548:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800254a:	4a13      	ldr	r2, [pc, #76]	; (8002598 <DMA_CalcBaseAndBitshift+0x68>)
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	4413      	add	r3, r2
 8002550:	781b      	ldrb	r3, [r3, #0]
 8002552:	461a      	mov	r2, r3
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	2b03      	cmp	r3, #3
 800255c:	d909      	bls.n	8002572 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002566:	f023 0303 	bic.w	r3, r3, #3
 800256a:	1d1a      	adds	r2, r3, #4
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	659a      	str	r2, [r3, #88]	; 0x58
 8002570:	e007      	b.n	8002582 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800257a:	f023 0303 	bic.w	r3, r3, #3
 800257e:	687a      	ldr	r2, [r7, #4]
 8002580:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002586:	4618      	mov	r0, r3
 8002588:	3714      	adds	r7, #20
 800258a:	46bd      	mov	sp, r7
 800258c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002590:	4770      	bx	lr
 8002592:	bf00      	nop
 8002594:	aaaaaaab 	.word	0xaaaaaaab
 8002598:	0800bdf4 	.word	0x0800bdf4

0800259c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800259c:	b480      	push	{r7}
 800259e:	b085      	sub	sp, #20
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80025a4:	2300      	movs	r3, #0
 80025a6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025ac:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	699b      	ldr	r3, [r3, #24]
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d11f      	bne.n	80025f6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80025b6:	68bb      	ldr	r3, [r7, #8]
 80025b8:	2b03      	cmp	r3, #3
 80025ba:	d856      	bhi.n	800266a <DMA_CheckFifoParam+0xce>
 80025bc:	a201      	add	r2, pc, #4	; (adr r2, 80025c4 <DMA_CheckFifoParam+0x28>)
 80025be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025c2:	bf00      	nop
 80025c4:	080025d5 	.word	0x080025d5
 80025c8:	080025e7 	.word	0x080025e7
 80025cc:	080025d5 	.word	0x080025d5
 80025d0:	0800266b 	.word	0x0800266b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025d8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d046      	beq.n	800266e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80025e0:	2301      	movs	r3, #1
 80025e2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80025e4:	e043      	b.n	800266e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025ea:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80025ee:	d140      	bne.n	8002672 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80025f0:	2301      	movs	r3, #1
 80025f2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80025f4:	e03d      	b.n	8002672 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	699b      	ldr	r3, [r3, #24]
 80025fa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80025fe:	d121      	bne.n	8002644 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002600:	68bb      	ldr	r3, [r7, #8]
 8002602:	2b03      	cmp	r3, #3
 8002604:	d837      	bhi.n	8002676 <DMA_CheckFifoParam+0xda>
 8002606:	a201      	add	r2, pc, #4	; (adr r2, 800260c <DMA_CheckFifoParam+0x70>)
 8002608:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800260c:	0800261d 	.word	0x0800261d
 8002610:	08002623 	.word	0x08002623
 8002614:	0800261d 	.word	0x0800261d
 8002618:	08002635 	.word	0x08002635
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800261c:	2301      	movs	r3, #1
 800261e:	73fb      	strb	r3, [r7, #15]
      break;
 8002620:	e030      	b.n	8002684 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002626:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800262a:	2b00      	cmp	r3, #0
 800262c:	d025      	beq.n	800267a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800262e:	2301      	movs	r3, #1
 8002630:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002632:	e022      	b.n	800267a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002638:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800263c:	d11f      	bne.n	800267e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800263e:	2301      	movs	r3, #1
 8002640:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002642:	e01c      	b.n	800267e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002644:	68bb      	ldr	r3, [r7, #8]
 8002646:	2b02      	cmp	r3, #2
 8002648:	d903      	bls.n	8002652 <DMA_CheckFifoParam+0xb6>
 800264a:	68bb      	ldr	r3, [r7, #8]
 800264c:	2b03      	cmp	r3, #3
 800264e:	d003      	beq.n	8002658 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002650:	e018      	b.n	8002684 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002652:	2301      	movs	r3, #1
 8002654:	73fb      	strb	r3, [r7, #15]
      break;
 8002656:	e015      	b.n	8002684 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800265c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002660:	2b00      	cmp	r3, #0
 8002662:	d00e      	beq.n	8002682 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002664:	2301      	movs	r3, #1
 8002666:	73fb      	strb	r3, [r7, #15]
      break;
 8002668:	e00b      	b.n	8002682 <DMA_CheckFifoParam+0xe6>
      break;
 800266a:	bf00      	nop
 800266c:	e00a      	b.n	8002684 <DMA_CheckFifoParam+0xe8>
      break;
 800266e:	bf00      	nop
 8002670:	e008      	b.n	8002684 <DMA_CheckFifoParam+0xe8>
      break;
 8002672:	bf00      	nop
 8002674:	e006      	b.n	8002684 <DMA_CheckFifoParam+0xe8>
      break;
 8002676:	bf00      	nop
 8002678:	e004      	b.n	8002684 <DMA_CheckFifoParam+0xe8>
      break;
 800267a:	bf00      	nop
 800267c:	e002      	b.n	8002684 <DMA_CheckFifoParam+0xe8>
      break;   
 800267e:	bf00      	nop
 8002680:	e000      	b.n	8002684 <DMA_CheckFifoParam+0xe8>
      break;
 8002682:	bf00      	nop
    }
  } 
  
  return status; 
 8002684:	7bfb      	ldrb	r3, [r7, #15]
}
 8002686:	4618      	mov	r0, r3
 8002688:	3714      	adds	r7, #20
 800268a:	46bd      	mov	sp, r7
 800268c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002690:	4770      	bx	lr
 8002692:	bf00      	nop

08002694 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002694:	b480      	push	{r7}
 8002696:	b089      	sub	sp, #36	; 0x24
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]
 800269c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800269e:	2300      	movs	r3, #0
 80026a0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80026a2:	2300      	movs	r3, #0
 80026a4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80026a6:	2300      	movs	r3, #0
 80026a8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80026aa:	2300      	movs	r3, #0
 80026ac:	61fb      	str	r3, [r7, #28]
 80026ae:	e16b      	b.n	8002988 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80026b0:	2201      	movs	r2, #1
 80026b2:	69fb      	ldr	r3, [r7, #28]
 80026b4:	fa02 f303 	lsl.w	r3, r2, r3
 80026b8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80026ba:	683b      	ldr	r3, [r7, #0]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	697a      	ldr	r2, [r7, #20]
 80026c0:	4013      	ands	r3, r2
 80026c2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80026c4:	693a      	ldr	r2, [r7, #16]
 80026c6:	697b      	ldr	r3, [r7, #20]
 80026c8:	429a      	cmp	r2, r3
 80026ca:	f040 815a 	bne.w	8002982 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80026ce:	683b      	ldr	r3, [r7, #0]
 80026d0:	685b      	ldr	r3, [r3, #4]
 80026d2:	f003 0303 	and.w	r3, r3, #3
 80026d6:	2b01      	cmp	r3, #1
 80026d8:	d005      	beq.n	80026e6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80026da:	683b      	ldr	r3, [r7, #0]
 80026dc:	685b      	ldr	r3, [r3, #4]
 80026de:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80026e2:	2b02      	cmp	r3, #2
 80026e4:	d130      	bne.n	8002748 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	689b      	ldr	r3, [r3, #8]
 80026ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80026ec:	69fb      	ldr	r3, [r7, #28]
 80026ee:	005b      	lsls	r3, r3, #1
 80026f0:	2203      	movs	r2, #3
 80026f2:	fa02 f303 	lsl.w	r3, r2, r3
 80026f6:	43db      	mvns	r3, r3
 80026f8:	69ba      	ldr	r2, [r7, #24]
 80026fa:	4013      	ands	r3, r2
 80026fc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80026fe:	683b      	ldr	r3, [r7, #0]
 8002700:	68da      	ldr	r2, [r3, #12]
 8002702:	69fb      	ldr	r3, [r7, #28]
 8002704:	005b      	lsls	r3, r3, #1
 8002706:	fa02 f303 	lsl.w	r3, r2, r3
 800270a:	69ba      	ldr	r2, [r7, #24]
 800270c:	4313      	orrs	r3, r2
 800270e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	69ba      	ldr	r2, [r7, #24]
 8002714:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	685b      	ldr	r3, [r3, #4]
 800271a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800271c:	2201      	movs	r2, #1
 800271e:	69fb      	ldr	r3, [r7, #28]
 8002720:	fa02 f303 	lsl.w	r3, r2, r3
 8002724:	43db      	mvns	r3, r3
 8002726:	69ba      	ldr	r2, [r7, #24]
 8002728:	4013      	ands	r3, r2
 800272a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800272c:	683b      	ldr	r3, [r7, #0]
 800272e:	685b      	ldr	r3, [r3, #4]
 8002730:	091b      	lsrs	r3, r3, #4
 8002732:	f003 0201 	and.w	r2, r3, #1
 8002736:	69fb      	ldr	r3, [r7, #28]
 8002738:	fa02 f303 	lsl.w	r3, r2, r3
 800273c:	69ba      	ldr	r2, [r7, #24]
 800273e:	4313      	orrs	r3, r2
 8002740:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	69ba      	ldr	r2, [r7, #24]
 8002746:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002748:	683b      	ldr	r3, [r7, #0]
 800274a:	685b      	ldr	r3, [r3, #4]
 800274c:	f003 0303 	and.w	r3, r3, #3
 8002750:	2b03      	cmp	r3, #3
 8002752:	d017      	beq.n	8002784 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	68db      	ldr	r3, [r3, #12]
 8002758:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800275a:	69fb      	ldr	r3, [r7, #28]
 800275c:	005b      	lsls	r3, r3, #1
 800275e:	2203      	movs	r2, #3
 8002760:	fa02 f303 	lsl.w	r3, r2, r3
 8002764:	43db      	mvns	r3, r3
 8002766:	69ba      	ldr	r2, [r7, #24]
 8002768:	4013      	ands	r3, r2
 800276a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	689a      	ldr	r2, [r3, #8]
 8002770:	69fb      	ldr	r3, [r7, #28]
 8002772:	005b      	lsls	r3, r3, #1
 8002774:	fa02 f303 	lsl.w	r3, r2, r3
 8002778:	69ba      	ldr	r2, [r7, #24]
 800277a:	4313      	orrs	r3, r2
 800277c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	69ba      	ldr	r2, [r7, #24]
 8002782:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002784:	683b      	ldr	r3, [r7, #0]
 8002786:	685b      	ldr	r3, [r3, #4]
 8002788:	f003 0303 	and.w	r3, r3, #3
 800278c:	2b02      	cmp	r3, #2
 800278e:	d123      	bne.n	80027d8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002790:	69fb      	ldr	r3, [r7, #28]
 8002792:	08da      	lsrs	r2, r3, #3
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	3208      	adds	r2, #8
 8002798:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800279c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800279e:	69fb      	ldr	r3, [r7, #28]
 80027a0:	f003 0307 	and.w	r3, r3, #7
 80027a4:	009b      	lsls	r3, r3, #2
 80027a6:	220f      	movs	r2, #15
 80027a8:	fa02 f303 	lsl.w	r3, r2, r3
 80027ac:	43db      	mvns	r3, r3
 80027ae:	69ba      	ldr	r2, [r7, #24]
 80027b0:	4013      	ands	r3, r2
 80027b2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80027b4:	683b      	ldr	r3, [r7, #0]
 80027b6:	691a      	ldr	r2, [r3, #16]
 80027b8:	69fb      	ldr	r3, [r7, #28]
 80027ba:	f003 0307 	and.w	r3, r3, #7
 80027be:	009b      	lsls	r3, r3, #2
 80027c0:	fa02 f303 	lsl.w	r3, r2, r3
 80027c4:	69ba      	ldr	r2, [r7, #24]
 80027c6:	4313      	orrs	r3, r2
 80027c8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80027ca:	69fb      	ldr	r3, [r7, #28]
 80027cc:	08da      	lsrs	r2, r3, #3
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	3208      	adds	r2, #8
 80027d2:	69b9      	ldr	r1, [r7, #24]
 80027d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80027de:	69fb      	ldr	r3, [r7, #28]
 80027e0:	005b      	lsls	r3, r3, #1
 80027e2:	2203      	movs	r2, #3
 80027e4:	fa02 f303 	lsl.w	r3, r2, r3
 80027e8:	43db      	mvns	r3, r3
 80027ea:	69ba      	ldr	r2, [r7, #24]
 80027ec:	4013      	ands	r3, r2
 80027ee:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80027f0:	683b      	ldr	r3, [r7, #0]
 80027f2:	685b      	ldr	r3, [r3, #4]
 80027f4:	f003 0203 	and.w	r2, r3, #3
 80027f8:	69fb      	ldr	r3, [r7, #28]
 80027fa:	005b      	lsls	r3, r3, #1
 80027fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002800:	69ba      	ldr	r2, [r7, #24]
 8002802:	4313      	orrs	r3, r2
 8002804:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	69ba      	ldr	r2, [r7, #24]
 800280a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800280c:	683b      	ldr	r3, [r7, #0]
 800280e:	685b      	ldr	r3, [r3, #4]
 8002810:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002814:	2b00      	cmp	r3, #0
 8002816:	f000 80b4 	beq.w	8002982 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800281a:	2300      	movs	r3, #0
 800281c:	60fb      	str	r3, [r7, #12]
 800281e:	4b60      	ldr	r3, [pc, #384]	; (80029a0 <HAL_GPIO_Init+0x30c>)
 8002820:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002822:	4a5f      	ldr	r2, [pc, #380]	; (80029a0 <HAL_GPIO_Init+0x30c>)
 8002824:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002828:	6453      	str	r3, [r2, #68]	; 0x44
 800282a:	4b5d      	ldr	r3, [pc, #372]	; (80029a0 <HAL_GPIO_Init+0x30c>)
 800282c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800282e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002832:	60fb      	str	r3, [r7, #12]
 8002834:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002836:	4a5b      	ldr	r2, [pc, #364]	; (80029a4 <HAL_GPIO_Init+0x310>)
 8002838:	69fb      	ldr	r3, [r7, #28]
 800283a:	089b      	lsrs	r3, r3, #2
 800283c:	3302      	adds	r3, #2
 800283e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002842:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002844:	69fb      	ldr	r3, [r7, #28]
 8002846:	f003 0303 	and.w	r3, r3, #3
 800284a:	009b      	lsls	r3, r3, #2
 800284c:	220f      	movs	r2, #15
 800284e:	fa02 f303 	lsl.w	r3, r2, r3
 8002852:	43db      	mvns	r3, r3
 8002854:	69ba      	ldr	r2, [r7, #24]
 8002856:	4013      	ands	r3, r2
 8002858:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	4a52      	ldr	r2, [pc, #328]	; (80029a8 <HAL_GPIO_Init+0x314>)
 800285e:	4293      	cmp	r3, r2
 8002860:	d02b      	beq.n	80028ba <HAL_GPIO_Init+0x226>
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	4a51      	ldr	r2, [pc, #324]	; (80029ac <HAL_GPIO_Init+0x318>)
 8002866:	4293      	cmp	r3, r2
 8002868:	d025      	beq.n	80028b6 <HAL_GPIO_Init+0x222>
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	4a50      	ldr	r2, [pc, #320]	; (80029b0 <HAL_GPIO_Init+0x31c>)
 800286e:	4293      	cmp	r3, r2
 8002870:	d01f      	beq.n	80028b2 <HAL_GPIO_Init+0x21e>
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	4a4f      	ldr	r2, [pc, #316]	; (80029b4 <HAL_GPIO_Init+0x320>)
 8002876:	4293      	cmp	r3, r2
 8002878:	d019      	beq.n	80028ae <HAL_GPIO_Init+0x21a>
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	4a4e      	ldr	r2, [pc, #312]	; (80029b8 <HAL_GPIO_Init+0x324>)
 800287e:	4293      	cmp	r3, r2
 8002880:	d013      	beq.n	80028aa <HAL_GPIO_Init+0x216>
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	4a4d      	ldr	r2, [pc, #308]	; (80029bc <HAL_GPIO_Init+0x328>)
 8002886:	4293      	cmp	r3, r2
 8002888:	d00d      	beq.n	80028a6 <HAL_GPIO_Init+0x212>
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	4a4c      	ldr	r2, [pc, #304]	; (80029c0 <HAL_GPIO_Init+0x32c>)
 800288e:	4293      	cmp	r3, r2
 8002890:	d007      	beq.n	80028a2 <HAL_GPIO_Init+0x20e>
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	4a4b      	ldr	r2, [pc, #300]	; (80029c4 <HAL_GPIO_Init+0x330>)
 8002896:	4293      	cmp	r3, r2
 8002898:	d101      	bne.n	800289e <HAL_GPIO_Init+0x20a>
 800289a:	2307      	movs	r3, #7
 800289c:	e00e      	b.n	80028bc <HAL_GPIO_Init+0x228>
 800289e:	2308      	movs	r3, #8
 80028a0:	e00c      	b.n	80028bc <HAL_GPIO_Init+0x228>
 80028a2:	2306      	movs	r3, #6
 80028a4:	e00a      	b.n	80028bc <HAL_GPIO_Init+0x228>
 80028a6:	2305      	movs	r3, #5
 80028a8:	e008      	b.n	80028bc <HAL_GPIO_Init+0x228>
 80028aa:	2304      	movs	r3, #4
 80028ac:	e006      	b.n	80028bc <HAL_GPIO_Init+0x228>
 80028ae:	2303      	movs	r3, #3
 80028b0:	e004      	b.n	80028bc <HAL_GPIO_Init+0x228>
 80028b2:	2302      	movs	r3, #2
 80028b4:	e002      	b.n	80028bc <HAL_GPIO_Init+0x228>
 80028b6:	2301      	movs	r3, #1
 80028b8:	e000      	b.n	80028bc <HAL_GPIO_Init+0x228>
 80028ba:	2300      	movs	r3, #0
 80028bc:	69fa      	ldr	r2, [r7, #28]
 80028be:	f002 0203 	and.w	r2, r2, #3
 80028c2:	0092      	lsls	r2, r2, #2
 80028c4:	4093      	lsls	r3, r2
 80028c6:	69ba      	ldr	r2, [r7, #24]
 80028c8:	4313      	orrs	r3, r2
 80028ca:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80028cc:	4935      	ldr	r1, [pc, #212]	; (80029a4 <HAL_GPIO_Init+0x310>)
 80028ce:	69fb      	ldr	r3, [r7, #28]
 80028d0:	089b      	lsrs	r3, r3, #2
 80028d2:	3302      	adds	r3, #2
 80028d4:	69ba      	ldr	r2, [r7, #24]
 80028d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80028da:	4b3b      	ldr	r3, [pc, #236]	; (80029c8 <HAL_GPIO_Init+0x334>)
 80028dc:	689b      	ldr	r3, [r3, #8]
 80028de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028e0:	693b      	ldr	r3, [r7, #16]
 80028e2:	43db      	mvns	r3, r3
 80028e4:	69ba      	ldr	r2, [r7, #24]
 80028e6:	4013      	ands	r3, r2
 80028e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80028ea:	683b      	ldr	r3, [r7, #0]
 80028ec:	685b      	ldr	r3, [r3, #4]
 80028ee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d003      	beq.n	80028fe <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80028f6:	69ba      	ldr	r2, [r7, #24]
 80028f8:	693b      	ldr	r3, [r7, #16]
 80028fa:	4313      	orrs	r3, r2
 80028fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80028fe:	4a32      	ldr	r2, [pc, #200]	; (80029c8 <HAL_GPIO_Init+0x334>)
 8002900:	69bb      	ldr	r3, [r7, #24]
 8002902:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002904:	4b30      	ldr	r3, [pc, #192]	; (80029c8 <HAL_GPIO_Init+0x334>)
 8002906:	68db      	ldr	r3, [r3, #12]
 8002908:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800290a:	693b      	ldr	r3, [r7, #16]
 800290c:	43db      	mvns	r3, r3
 800290e:	69ba      	ldr	r2, [r7, #24]
 8002910:	4013      	ands	r3, r2
 8002912:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	685b      	ldr	r3, [r3, #4]
 8002918:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800291c:	2b00      	cmp	r3, #0
 800291e:	d003      	beq.n	8002928 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002920:	69ba      	ldr	r2, [r7, #24]
 8002922:	693b      	ldr	r3, [r7, #16]
 8002924:	4313      	orrs	r3, r2
 8002926:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002928:	4a27      	ldr	r2, [pc, #156]	; (80029c8 <HAL_GPIO_Init+0x334>)
 800292a:	69bb      	ldr	r3, [r7, #24]
 800292c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800292e:	4b26      	ldr	r3, [pc, #152]	; (80029c8 <HAL_GPIO_Init+0x334>)
 8002930:	685b      	ldr	r3, [r3, #4]
 8002932:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002934:	693b      	ldr	r3, [r7, #16]
 8002936:	43db      	mvns	r3, r3
 8002938:	69ba      	ldr	r2, [r7, #24]
 800293a:	4013      	ands	r3, r2
 800293c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800293e:	683b      	ldr	r3, [r7, #0]
 8002940:	685b      	ldr	r3, [r3, #4]
 8002942:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002946:	2b00      	cmp	r3, #0
 8002948:	d003      	beq.n	8002952 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800294a:	69ba      	ldr	r2, [r7, #24]
 800294c:	693b      	ldr	r3, [r7, #16]
 800294e:	4313      	orrs	r3, r2
 8002950:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002952:	4a1d      	ldr	r2, [pc, #116]	; (80029c8 <HAL_GPIO_Init+0x334>)
 8002954:	69bb      	ldr	r3, [r7, #24]
 8002956:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002958:	4b1b      	ldr	r3, [pc, #108]	; (80029c8 <HAL_GPIO_Init+0x334>)
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800295e:	693b      	ldr	r3, [r7, #16]
 8002960:	43db      	mvns	r3, r3
 8002962:	69ba      	ldr	r2, [r7, #24]
 8002964:	4013      	ands	r3, r2
 8002966:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002968:	683b      	ldr	r3, [r7, #0]
 800296a:	685b      	ldr	r3, [r3, #4]
 800296c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002970:	2b00      	cmp	r3, #0
 8002972:	d003      	beq.n	800297c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002974:	69ba      	ldr	r2, [r7, #24]
 8002976:	693b      	ldr	r3, [r7, #16]
 8002978:	4313      	orrs	r3, r2
 800297a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800297c:	4a12      	ldr	r2, [pc, #72]	; (80029c8 <HAL_GPIO_Init+0x334>)
 800297e:	69bb      	ldr	r3, [r7, #24]
 8002980:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002982:	69fb      	ldr	r3, [r7, #28]
 8002984:	3301      	adds	r3, #1
 8002986:	61fb      	str	r3, [r7, #28]
 8002988:	69fb      	ldr	r3, [r7, #28]
 800298a:	2b0f      	cmp	r3, #15
 800298c:	f67f ae90 	bls.w	80026b0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002990:	bf00      	nop
 8002992:	bf00      	nop
 8002994:	3724      	adds	r7, #36	; 0x24
 8002996:	46bd      	mov	sp, r7
 8002998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299c:	4770      	bx	lr
 800299e:	bf00      	nop
 80029a0:	40023800 	.word	0x40023800
 80029a4:	40013800 	.word	0x40013800
 80029a8:	40020000 	.word	0x40020000
 80029ac:	40020400 	.word	0x40020400
 80029b0:	40020800 	.word	0x40020800
 80029b4:	40020c00 	.word	0x40020c00
 80029b8:	40021000 	.word	0x40021000
 80029bc:	40021400 	.word	0x40021400
 80029c0:	40021800 	.word	0x40021800
 80029c4:	40021c00 	.word	0x40021c00
 80029c8:	40013c00 	.word	0x40013c00

080029cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80029cc:	b480      	push	{r7}
 80029ce:	b083      	sub	sp, #12
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]
 80029d4:	460b      	mov	r3, r1
 80029d6:	807b      	strh	r3, [r7, #2]
 80029d8:	4613      	mov	r3, r2
 80029da:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80029dc:	787b      	ldrb	r3, [r7, #1]
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d003      	beq.n	80029ea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80029e2:	887a      	ldrh	r2, [r7, #2]
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80029e8:	e003      	b.n	80029f2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80029ea:	887b      	ldrh	r3, [r7, #2]
 80029ec:	041a      	lsls	r2, r3, #16
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	619a      	str	r2, [r3, #24]
}
 80029f2:	bf00      	nop
 80029f4:	370c      	adds	r7, #12
 80029f6:	46bd      	mov	sp, r7
 80029f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fc:	4770      	bx	lr
	...

08002a00 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002a00:	b580      	push	{r7, lr}
 8002a02:	b082      	sub	sp, #8
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	4603      	mov	r3, r0
 8002a08:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002a0a:	4b08      	ldr	r3, [pc, #32]	; (8002a2c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002a0c:	695a      	ldr	r2, [r3, #20]
 8002a0e:	88fb      	ldrh	r3, [r7, #6]
 8002a10:	4013      	ands	r3, r2
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d006      	beq.n	8002a24 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002a16:	4a05      	ldr	r2, [pc, #20]	; (8002a2c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002a18:	88fb      	ldrh	r3, [r7, #6]
 8002a1a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002a1c:	88fb      	ldrh	r3, [r7, #6]
 8002a1e:	4618      	mov	r0, r3
 8002a20:	f7fe fd0e 	bl	8001440 <HAL_GPIO_EXTI_Callback>
  }
}
 8002a24:	bf00      	nop
 8002a26:	3708      	adds	r7, #8
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	bd80      	pop	{r7, pc}
 8002a2c:	40013c00 	.word	0x40013c00

08002a30 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002a30:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002a32:	b08f      	sub	sp, #60	; 0x3c
 8002a34:	af0a      	add	r7, sp, #40	; 0x28
 8002a36:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d101      	bne.n	8002a42 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002a3e:	2301      	movs	r3, #1
 8002a40:	e10f      	b.n	8002c62 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8002a4e:	b2db      	uxtb	r3, r3
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d106      	bne.n	8002a62 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	2200      	movs	r2, #0
 8002a58:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002a5c:	6878      	ldr	r0, [r7, #4]
 8002a5e:	f008 f9d5 	bl	800ae0c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	2203      	movs	r2, #3
 8002a66:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002a6a:	68bb      	ldr	r3, [r7, #8]
 8002a6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d102      	bne.n	8002a7c <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	2200      	movs	r2, #0
 8002a7a:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	4618      	mov	r0, r3
 8002a82:	f004 fc92 	bl	80073aa <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	603b      	str	r3, [r7, #0]
 8002a8c:	687e      	ldr	r6, [r7, #4]
 8002a8e:	466d      	mov	r5, sp
 8002a90:	f106 0410 	add.w	r4, r6, #16
 8002a94:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002a96:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002a98:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002a9a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002a9c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002aa0:	e885 0003 	stmia.w	r5, {r0, r1}
 8002aa4:	1d33      	adds	r3, r6, #4
 8002aa6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002aa8:	6838      	ldr	r0, [r7, #0]
 8002aaa:	f004 fb69 	bl	8007180 <USB_CoreInit>
 8002aae:	4603      	mov	r3, r0
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d005      	beq.n	8002ac0 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	2202      	movs	r2, #2
 8002ab8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002abc:	2301      	movs	r3, #1
 8002abe:	e0d0      	b.n	8002c62 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	2100      	movs	r1, #0
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	f004 fc80 	bl	80073cc <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002acc:	2300      	movs	r3, #0
 8002ace:	73fb      	strb	r3, [r7, #15]
 8002ad0:	e04a      	b.n	8002b68 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002ad2:	7bfa      	ldrb	r2, [r7, #15]
 8002ad4:	6879      	ldr	r1, [r7, #4]
 8002ad6:	4613      	mov	r3, r2
 8002ad8:	00db      	lsls	r3, r3, #3
 8002ada:	4413      	add	r3, r2
 8002adc:	009b      	lsls	r3, r3, #2
 8002ade:	440b      	add	r3, r1
 8002ae0:	333d      	adds	r3, #61	; 0x3d
 8002ae2:	2201      	movs	r2, #1
 8002ae4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002ae6:	7bfa      	ldrb	r2, [r7, #15]
 8002ae8:	6879      	ldr	r1, [r7, #4]
 8002aea:	4613      	mov	r3, r2
 8002aec:	00db      	lsls	r3, r3, #3
 8002aee:	4413      	add	r3, r2
 8002af0:	009b      	lsls	r3, r3, #2
 8002af2:	440b      	add	r3, r1
 8002af4:	333c      	adds	r3, #60	; 0x3c
 8002af6:	7bfa      	ldrb	r2, [r7, #15]
 8002af8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002afa:	7bfa      	ldrb	r2, [r7, #15]
 8002afc:	7bfb      	ldrb	r3, [r7, #15]
 8002afe:	b298      	uxth	r0, r3
 8002b00:	6879      	ldr	r1, [r7, #4]
 8002b02:	4613      	mov	r3, r2
 8002b04:	00db      	lsls	r3, r3, #3
 8002b06:	4413      	add	r3, r2
 8002b08:	009b      	lsls	r3, r3, #2
 8002b0a:	440b      	add	r3, r1
 8002b0c:	3344      	adds	r3, #68	; 0x44
 8002b0e:	4602      	mov	r2, r0
 8002b10:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002b12:	7bfa      	ldrb	r2, [r7, #15]
 8002b14:	6879      	ldr	r1, [r7, #4]
 8002b16:	4613      	mov	r3, r2
 8002b18:	00db      	lsls	r3, r3, #3
 8002b1a:	4413      	add	r3, r2
 8002b1c:	009b      	lsls	r3, r3, #2
 8002b1e:	440b      	add	r3, r1
 8002b20:	3340      	adds	r3, #64	; 0x40
 8002b22:	2200      	movs	r2, #0
 8002b24:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002b26:	7bfa      	ldrb	r2, [r7, #15]
 8002b28:	6879      	ldr	r1, [r7, #4]
 8002b2a:	4613      	mov	r3, r2
 8002b2c:	00db      	lsls	r3, r3, #3
 8002b2e:	4413      	add	r3, r2
 8002b30:	009b      	lsls	r3, r3, #2
 8002b32:	440b      	add	r3, r1
 8002b34:	3348      	adds	r3, #72	; 0x48
 8002b36:	2200      	movs	r2, #0
 8002b38:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002b3a:	7bfa      	ldrb	r2, [r7, #15]
 8002b3c:	6879      	ldr	r1, [r7, #4]
 8002b3e:	4613      	mov	r3, r2
 8002b40:	00db      	lsls	r3, r3, #3
 8002b42:	4413      	add	r3, r2
 8002b44:	009b      	lsls	r3, r3, #2
 8002b46:	440b      	add	r3, r1
 8002b48:	334c      	adds	r3, #76	; 0x4c
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002b4e:	7bfa      	ldrb	r2, [r7, #15]
 8002b50:	6879      	ldr	r1, [r7, #4]
 8002b52:	4613      	mov	r3, r2
 8002b54:	00db      	lsls	r3, r3, #3
 8002b56:	4413      	add	r3, r2
 8002b58:	009b      	lsls	r3, r3, #2
 8002b5a:	440b      	add	r3, r1
 8002b5c:	3354      	adds	r3, #84	; 0x54
 8002b5e:	2200      	movs	r2, #0
 8002b60:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b62:	7bfb      	ldrb	r3, [r7, #15]
 8002b64:	3301      	adds	r3, #1
 8002b66:	73fb      	strb	r3, [r7, #15]
 8002b68:	7bfa      	ldrb	r2, [r7, #15]
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	685b      	ldr	r3, [r3, #4]
 8002b6e:	429a      	cmp	r2, r3
 8002b70:	d3af      	bcc.n	8002ad2 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b72:	2300      	movs	r3, #0
 8002b74:	73fb      	strb	r3, [r7, #15]
 8002b76:	e044      	b.n	8002c02 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002b78:	7bfa      	ldrb	r2, [r7, #15]
 8002b7a:	6879      	ldr	r1, [r7, #4]
 8002b7c:	4613      	mov	r3, r2
 8002b7e:	00db      	lsls	r3, r3, #3
 8002b80:	4413      	add	r3, r2
 8002b82:	009b      	lsls	r3, r3, #2
 8002b84:	440b      	add	r3, r1
 8002b86:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002b8e:	7bfa      	ldrb	r2, [r7, #15]
 8002b90:	6879      	ldr	r1, [r7, #4]
 8002b92:	4613      	mov	r3, r2
 8002b94:	00db      	lsls	r3, r3, #3
 8002b96:	4413      	add	r3, r2
 8002b98:	009b      	lsls	r3, r3, #2
 8002b9a:	440b      	add	r3, r1
 8002b9c:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8002ba0:	7bfa      	ldrb	r2, [r7, #15]
 8002ba2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002ba4:	7bfa      	ldrb	r2, [r7, #15]
 8002ba6:	6879      	ldr	r1, [r7, #4]
 8002ba8:	4613      	mov	r3, r2
 8002baa:	00db      	lsls	r3, r3, #3
 8002bac:	4413      	add	r3, r2
 8002bae:	009b      	lsls	r3, r3, #2
 8002bb0:	440b      	add	r3, r1
 8002bb2:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002bb6:	2200      	movs	r2, #0
 8002bb8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002bba:	7bfa      	ldrb	r2, [r7, #15]
 8002bbc:	6879      	ldr	r1, [r7, #4]
 8002bbe:	4613      	mov	r3, r2
 8002bc0:	00db      	lsls	r3, r3, #3
 8002bc2:	4413      	add	r3, r2
 8002bc4:	009b      	lsls	r3, r3, #2
 8002bc6:	440b      	add	r3, r1
 8002bc8:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8002bcc:	2200      	movs	r2, #0
 8002bce:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002bd0:	7bfa      	ldrb	r2, [r7, #15]
 8002bd2:	6879      	ldr	r1, [r7, #4]
 8002bd4:	4613      	mov	r3, r2
 8002bd6:	00db      	lsls	r3, r3, #3
 8002bd8:	4413      	add	r3, r2
 8002bda:	009b      	lsls	r3, r3, #2
 8002bdc:	440b      	add	r3, r1
 8002bde:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8002be2:	2200      	movs	r2, #0
 8002be4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002be6:	7bfa      	ldrb	r2, [r7, #15]
 8002be8:	6879      	ldr	r1, [r7, #4]
 8002bea:	4613      	mov	r3, r2
 8002bec:	00db      	lsls	r3, r3, #3
 8002bee:	4413      	add	r3, r2
 8002bf0:	009b      	lsls	r3, r3, #2
 8002bf2:	440b      	add	r3, r1
 8002bf4:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002bfc:	7bfb      	ldrb	r3, [r7, #15]
 8002bfe:	3301      	adds	r3, #1
 8002c00:	73fb      	strb	r3, [r7, #15]
 8002c02:	7bfa      	ldrb	r2, [r7, #15]
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	685b      	ldr	r3, [r3, #4]
 8002c08:	429a      	cmp	r2, r3
 8002c0a:	d3b5      	bcc.n	8002b78 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	603b      	str	r3, [r7, #0]
 8002c12:	687e      	ldr	r6, [r7, #4]
 8002c14:	466d      	mov	r5, sp
 8002c16:	f106 0410 	add.w	r4, r6, #16
 8002c1a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002c1c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002c1e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002c20:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002c22:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002c26:	e885 0003 	stmia.w	r5, {r0, r1}
 8002c2a:	1d33      	adds	r3, r6, #4
 8002c2c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002c2e:	6838      	ldr	r0, [r7, #0]
 8002c30:	f004 fc18 	bl	8007464 <USB_DevInit>
 8002c34:	4603      	mov	r3, r0
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d005      	beq.n	8002c46 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	2202      	movs	r2, #2
 8002c3e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002c42:	2301      	movs	r3, #1
 8002c44:	e00d      	b.n	8002c62 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	2200      	movs	r2, #0
 8002c4a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	2201      	movs	r2, #1
 8002c52:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	f005 fd67 	bl	800872e <USB_DevDisconnect>

  return HAL_OK;
 8002c60:	2300      	movs	r3, #0
}
 8002c62:	4618      	mov	r0, r3
 8002c64:	3714      	adds	r7, #20
 8002c66:	46bd      	mov	sp, r7
 8002c68:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002c6a <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002c6a:	b580      	push	{r7, lr}
 8002c6c:	b084      	sub	sp, #16
 8002c6e:	af00      	add	r7, sp, #0
 8002c70:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002c7e:	2b01      	cmp	r3, #1
 8002c80:	d101      	bne.n	8002c86 <HAL_PCD_Start+0x1c>
 8002c82:	2302      	movs	r3, #2
 8002c84:	e020      	b.n	8002cc8 <HAL_PCD_Start+0x5e>
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	2201      	movs	r2, #1
 8002c8a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c92:	2b01      	cmp	r3, #1
 8002c94:	d109      	bne.n	8002caa <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002c9a:	2b01      	cmp	r3, #1
 8002c9c:	d005      	beq.n	8002caa <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ca2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	4618      	mov	r0, r3
 8002cb0:	f004 fb6a 	bl	8007388 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	4618      	mov	r0, r3
 8002cba:	f005 fd17 	bl	80086ec <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002cc6:	2300      	movs	r3, #0
}
 8002cc8:	4618      	mov	r0, r3
 8002cca:	3710      	adds	r7, #16
 8002ccc:	46bd      	mov	sp, r7
 8002cce:	bd80      	pop	{r7, pc}

08002cd0 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002cd0:	b590      	push	{r4, r7, lr}
 8002cd2:	b08d      	sub	sp, #52	; 0x34
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002cde:	6a3b      	ldr	r3, [r7, #32]
 8002ce0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	4618      	mov	r0, r3
 8002ce8:	f005 fdd5 	bl	8008896 <USB_GetMode>
 8002cec:	4603      	mov	r3, r0
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	f040 848a 	bne.w	8003608 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	f005 fd39 	bl	8008770 <USB_ReadInterrupts>
 8002cfe:	4603      	mov	r3, r0
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	f000 8480 	beq.w	8003606 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8002d06:	69fb      	ldr	r3, [r7, #28]
 8002d08:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d0c:	689b      	ldr	r3, [r3, #8]
 8002d0e:	0a1b      	lsrs	r3, r3, #8
 8002d10:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	4618      	mov	r0, r3
 8002d20:	f005 fd26 	bl	8008770 <USB_ReadInterrupts>
 8002d24:	4603      	mov	r3, r0
 8002d26:	f003 0302 	and.w	r3, r3, #2
 8002d2a:	2b02      	cmp	r3, #2
 8002d2c:	d107      	bne.n	8002d3e <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	695a      	ldr	r2, [r3, #20]
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f002 0202 	and.w	r2, r2, #2
 8002d3c:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	4618      	mov	r0, r3
 8002d44:	f005 fd14 	bl	8008770 <USB_ReadInterrupts>
 8002d48:	4603      	mov	r3, r0
 8002d4a:	f003 0310 	and.w	r3, r3, #16
 8002d4e:	2b10      	cmp	r3, #16
 8002d50:	d161      	bne.n	8002e16 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	699a      	ldr	r2, [r3, #24]
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f022 0210 	bic.w	r2, r2, #16
 8002d60:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8002d62:	6a3b      	ldr	r3, [r7, #32]
 8002d64:	6a1b      	ldr	r3, [r3, #32]
 8002d66:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8002d68:	69bb      	ldr	r3, [r7, #24]
 8002d6a:	f003 020f 	and.w	r2, r3, #15
 8002d6e:	4613      	mov	r3, r2
 8002d70:	00db      	lsls	r3, r3, #3
 8002d72:	4413      	add	r3, r2
 8002d74:	009b      	lsls	r3, r3, #2
 8002d76:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002d7a:	687a      	ldr	r2, [r7, #4]
 8002d7c:	4413      	add	r3, r2
 8002d7e:	3304      	adds	r3, #4
 8002d80:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002d82:	69bb      	ldr	r3, [r7, #24]
 8002d84:	0c5b      	lsrs	r3, r3, #17
 8002d86:	f003 030f 	and.w	r3, r3, #15
 8002d8a:	2b02      	cmp	r3, #2
 8002d8c:	d124      	bne.n	8002dd8 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002d8e:	69ba      	ldr	r2, [r7, #24]
 8002d90:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8002d94:	4013      	ands	r3, r2
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d035      	beq.n	8002e06 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002d9a:	697b      	ldr	r3, [r7, #20]
 8002d9c:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002d9e:	69bb      	ldr	r3, [r7, #24]
 8002da0:	091b      	lsrs	r3, r3, #4
 8002da2:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002da4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002da8:	b29b      	uxth	r3, r3
 8002daa:	461a      	mov	r2, r3
 8002dac:	6a38      	ldr	r0, [r7, #32]
 8002dae:	f005 fb4b 	bl	8008448 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002db2:	697b      	ldr	r3, [r7, #20]
 8002db4:	691a      	ldr	r2, [r3, #16]
 8002db6:	69bb      	ldr	r3, [r7, #24]
 8002db8:	091b      	lsrs	r3, r3, #4
 8002dba:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002dbe:	441a      	add	r2, r3
 8002dc0:	697b      	ldr	r3, [r7, #20]
 8002dc2:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002dc4:	697b      	ldr	r3, [r7, #20]
 8002dc6:	6a1a      	ldr	r2, [r3, #32]
 8002dc8:	69bb      	ldr	r3, [r7, #24]
 8002dca:	091b      	lsrs	r3, r3, #4
 8002dcc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002dd0:	441a      	add	r2, r3
 8002dd2:	697b      	ldr	r3, [r7, #20]
 8002dd4:	621a      	str	r2, [r3, #32]
 8002dd6:	e016      	b.n	8002e06 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8002dd8:	69bb      	ldr	r3, [r7, #24]
 8002dda:	0c5b      	lsrs	r3, r3, #17
 8002ddc:	f003 030f 	and.w	r3, r3, #15
 8002de0:	2b06      	cmp	r3, #6
 8002de2:	d110      	bne.n	8002e06 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002dea:	2208      	movs	r2, #8
 8002dec:	4619      	mov	r1, r3
 8002dee:	6a38      	ldr	r0, [r7, #32]
 8002df0:	f005 fb2a 	bl	8008448 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002df4:	697b      	ldr	r3, [r7, #20]
 8002df6:	6a1a      	ldr	r2, [r3, #32]
 8002df8:	69bb      	ldr	r3, [r7, #24]
 8002dfa:	091b      	lsrs	r3, r3, #4
 8002dfc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002e00:	441a      	add	r2, r3
 8002e02:	697b      	ldr	r3, [r7, #20]
 8002e04:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	699a      	ldr	r2, [r3, #24]
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f042 0210 	orr.w	r2, r2, #16
 8002e14:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	f005 fca8 	bl	8008770 <USB_ReadInterrupts>
 8002e20:	4603      	mov	r3, r0
 8002e22:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002e26:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002e2a:	f040 80a7 	bne.w	8002f7c <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8002e2e:	2300      	movs	r3, #0
 8002e30:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	4618      	mov	r0, r3
 8002e38:	f005 fcad 	bl	8008796 <USB_ReadDevAllOutEpInterrupt>
 8002e3c:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8002e3e:	e099      	b.n	8002f74 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002e40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e42:	f003 0301 	and.w	r3, r3, #1
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	f000 808e 	beq.w	8002f68 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e52:	b2d2      	uxtb	r2, r2
 8002e54:	4611      	mov	r1, r2
 8002e56:	4618      	mov	r0, r3
 8002e58:	f005 fcd1 	bl	80087fe <USB_ReadDevOutEPInterrupt>
 8002e5c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002e5e:	693b      	ldr	r3, [r7, #16]
 8002e60:	f003 0301 	and.w	r3, r3, #1
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d00c      	beq.n	8002e82 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002e68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e6a:	015a      	lsls	r2, r3, #5
 8002e6c:	69fb      	ldr	r3, [r7, #28]
 8002e6e:	4413      	add	r3, r2
 8002e70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e74:	461a      	mov	r2, r3
 8002e76:	2301      	movs	r3, #1
 8002e78:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002e7a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002e7c:	6878      	ldr	r0, [r7, #4]
 8002e7e:	f000 fec3 	bl	8003c08 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002e82:	693b      	ldr	r3, [r7, #16]
 8002e84:	f003 0308 	and.w	r3, r3, #8
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d00c      	beq.n	8002ea6 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002e8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e8e:	015a      	lsls	r2, r3, #5
 8002e90:	69fb      	ldr	r3, [r7, #28]
 8002e92:	4413      	add	r3, r2
 8002e94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e98:	461a      	mov	r2, r3
 8002e9a:	2308      	movs	r3, #8
 8002e9c:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002e9e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002ea0:	6878      	ldr	r0, [r7, #4]
 8002ea2:	f000 ff99 	bl	8003dd8 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002ea6:	693b      	ldr	r3, [r7, #16]
 8002ea8:	f003 0310 	and.w	r3, r3, #16
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d008      	beq.n	8002ec2 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002eb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eb2:	015a      	lsls	r2, r3, #5
 8002eb4:	69fb      	ldr	r3, [r7, #28]
 8002eb6:	4413      	add	r3, r2
 8002eb8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ebc:	461a      	mov	r2, r3
 8002ebe:	2310      	movs	r3, #16
 8002ec0:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8002ec2:	693b      	ldr	r3, [r7, #16]
 8002ec4:	f003 0302 	and.w	r3, r3, #2
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d030      	beq.n	8002f2e <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8002ecc:	6a3b      	ldr	r3, [r7, #32]
 8002ece:	695b      	ldr	r3, [r3, #20]
 8002ed0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ed4:	2b80      	cmp	r3, #128	; 0x80
 8002ed6:	d109      	bne.n	8002eec <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8002ed8:	69fb      	ldr	r3, [r7, #28]
 8002eda:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002ede:	685b      	ldr	r3, [r3, #4]
 8002ee0:	69fa      	ldr	r2, [r7, #28]
 8002ee2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002ee6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002eea:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8002eec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002eee:	4613      	mov	r3, r2
 8002ef0:	00db      	lsls	r3, r3, #3
 8002ef2:	4413      	add	r3, r2
 8002ef4:	009b      	lsls	r3, r3, #2
 8002ef6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002efa:	687a      	ldr	r2, [r7, #4]
 8002efc:	4413      	add	r3, r2
 8002efe:	3304      	adds	r3, #4
 8002f00:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002f02:	697b      	ldr	r3, [r7, #20]
 8002f04:	78db      	ldrb	r3, [r3, #3]
 8002f06:	2b01      	cmp	r3, #1
 8002f08:	d108      	bne.n	8002f1c <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8002f0a:	697b      	ldr	r3, [r7, #20]
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002f10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f12:	b2db      	uxtb	r3, r3
 8002f14:	4619      	mov	r1, r3
 8002f16:	6878      	ldr	r0, [r7, #4]
 8002f18:	f008 f87a 	bl	800b010 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8002f1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f1e:	015a      	lsls	r2, r3, #5
 8002f20:	69fb      	ldr	r3, [r7, #28]
 8002f22:	4413      	add	r3, r2
 8002f24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f28:	461a      	mov	r2, r3
 8002f2a:	2302      	movs	r3, #2
 8002f2c:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002f2e:	693b      	ldr	r3, [r7, #16]
 8002f30:	f003 0320 	and.w	r3, r3, #32
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d008      	beq.n	8002f4a <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002f38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f3a:	015a      	lsls	r2, r3, #5
 8002f3c:	69fb      	ldr	r3, [r7, #28]
 8002f3e:	4413      	add	r3, r2
 8002f40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f44:	461a      	mov	r2, r3
 8002f46:	2320      	movs	r3, #32
 8002f48:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002f4a:	693b      	ldr	r3, [r7, #16]
 8002f4c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d009      	beq.n	8002f68 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002f54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f56:	015a      	lsls	r2, r3, #5
 8002f58:	69fb      	ldr	r3, [r7, #28]
 8002f5a:	4413      	add	r3, r2
 8002f5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f60:	461a      	mov	r2, r3
 8002f62:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002f66:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002f68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f6a:	3301      	adds	r3, #1
 8002f6c:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002f6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f70:	085b      	lsrs	r3, r3, #1
 8002f72:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002f74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	f47f af62 	bne.w	8002e40 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	4618      	mov	r0, r3
 8002f82:	f005 fbf5 	bl	8008770 <USB_ReadInterrupts>
 8002f86:	4603      	mov	r3, r0
 8002f88:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002f8c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002f90:	f040 80db 	bne.w	800314a <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	4618      	mov	r0, r3
 8002f9a:	f005 fc16 	bl	80087ca <USB_ReadDevAllInEpInterrupt>
 8002f9e:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8002fa0:	2300      	movs	r3, #0
 8002fa2:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8002fa4:	e0cd      	b.n	8003142 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002fa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fa8:	f003 0301 	and.w	r3, r3, #1
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	f000 80c2 	beq.w	8003136 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002fb8:	b2d2      	uxtb	r2, r2
 8002fba:	4611      	mov	r1, r2
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	f005 fc3c 	bl	800883a <USB_ReadDevInEPInterrupt>
 8002fc2:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002fc4:	693b      	ldr	r3, [r7, #16]
 8002fc6:	f003 0301 	and.w	r3, r3, #1
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d057      	beq.n	800307e <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002fce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fd0:	f003 030f 	and.w	r3, r3, #15
 8002fd4:	2201      	movs	r2, #1
 8002fd6:	fa02 f303 	lsl.w	r3, r2, r3
 8002fda:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002fdc:	69fb      	ldr	r3, [r7, #28]
 8002fde:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002fe2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	43db      	mvns	r3, r3
 8002fe8:	69f9      	ldr	r1, [r7, #28]
 8002fea:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002fee:	4013      	ands	r3, r2
 8002ff0:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002ff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ff4:	015a      	lsls	r2, r3, #5
 8002ff6:	69fb      	ldr	r3, [r7, #28]
 8002ff8:	4413      	add	r3, r2
 8002ffa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002ffe:	461a      	mov	r2, r3
 8003000:	2301      	movs	r3, #1
 8003002:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	691b      	ldr	r3, [r3, #16]
 8003008:	2b01      	cmp	r3, #1
 800300a:	d132      	bne.n	8003072 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800300c:	6879      	ldr	r1, [r7, #4]
 800300e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003010:	4613      	mov	r3, r2
 8003012:	00db      	lsls	r3, r3, #3
 8003014:	4413      	add	r3, r2
 8003016:	009b      	lsls	r3, r3, #2
 8003018:	440b      	add	r3, r1
 800301a:	334c      	adds	r3, #76	; 0x4c
 800301c:	6819      	ldr	r1, [r3, #0]
 800301e:	6878      	ldr	r0, [r7, #4]
 8003020:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003022:	4613      	mov	r3, r2
 8003024:	00db      	lsls	r3, r3, #3
 8003026:	4413      	add	r3, r2
 8003028:	009b      	lsls	r3, r3, #2
 800302a:	4403      	add	r3, r0
 800302c:	3348      	adds	r3, #72	; 0x48
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	4419      	add	r1, r3
 8003032:	6878      	ldr	r0, [r7, #4]
 8003034:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003036:	4613      	mov	r3, r2
 8003038:	00db      	lsls	r3, r3, #3
 800303a:	4413      	add	r3, r2
 800303c:	009b      	lsls	r3, r3, #2
 800303e:	4403      	add	r3, r0
 8003040:	334c      	adds	r3, #76	; 0x4c
 8003042:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8003044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003046:	2b00      	cmp	r3, #0
 8003048:	d113      	bne.n	8003072 <HAL_PCD_IRQHandler+0x3a2>
 800304a:	6879      	ldr	r1, [r7, #4]
 800304c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800304e:	4613      	mov	r3, r2
 8003050:	00db      	lsls	r3, r3, #3
 8003052:	4413      	add	r3, r2
 8003054:	009b      	lsls	r3, r3, #2
 8003056:	440b      	add	r3, r1
 8003058:	3354      	adds	r3, #84	; 0x54
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	2b00      	cmp	r3, #0
 800305e:	d108      	bne.n	8003072 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	6818      	ldr	r0, [r3, #0]
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800306a:	461a      	mov	r2, r3
 800306c:	2101      	movs	r1, #1
 800306e:	f005 fc43 	bl	80088f8 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003074:	b2db      	uxtb	r3, r3
 8003076:	4619      	mov	r1, r3
 8003078:	6878      	ldr	r0, [r7, #4]
 800307a:	f007 ff44 	bl	800af06 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800307e:	693b      	ldr	r3, [r7, #16]
 8003080:	f003 0308 	and.w	r3, r3, #8
 8003084:	2b00      	cmp	r3, #0
 8003086:	d008      	beq.n	800309a <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800308a:	015a      	lsls	r2, r3, #5
 800308c:	69fb      	ldr	r3, [r7, #28]
 800308e:	4413      	add	r3, r2
 8003090:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003094:	461a      	mov	r2, r3
 8003096:	2308      	movs	r3, #8
 8003098:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800309a:	693b      	ldr	r3, [r7, #16]
 800309c:	f003 0310 	and.w	r3, r3, #16
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d008      	beq.n	80030b6 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80030a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030a6:	015a      	lsls	r2, r3, #5
 80030a8:	69fb      	ldr	r3, [r7, #28]
 80030aa:	4413      	add	r3, r2
 80030ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80030b0:	461a      	mov	r2, r3
 80030b2:	2310      	movs	r3, #16
 80030b4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80030b6:	693b      	ldr	r3, [r7, #16]
 80030b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d008      	beq.n	80030d2 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80030c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030c2:	015a      	lsls	r2, r3, #5
 80030c4:	69fb      	ldr	r3, [r7, #28]
 80030c6:	4413      	add	r3, r2
 80030c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80030cc:	461a      	mov	r2, r3
 80030ce:	2340      	movs	r3, #64	; 0x40
 80030d0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80030d2:	693b      	ldr	r3, [r7, #16]
 80030d4:	f003 0302 	and.w	r3, r3, #2
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d023      	beq.n	8003124 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80030dc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80030de:	6a38      	ldr	r0, [r7, #32]
 80030e0:	f004 fb24 	bl	800772c <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80030e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030e6:	4613      	mov	r3, r2
 80030e8:	00db      	lsls	r3, r3, #3
 80030ea:	4413      	add	r3, r2
 80030ec:	009b      	lsls	r3, r3, #2
 80030ee:	3338      	adds	r3, #56	; 0x38
 80030f0:	687a      	ldr	r2, [r7, #4]
 80030f2:	4413      	add	r3, r2
 80030f4:	3304      	adds	r3, #4
 80030f6:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80030f8:	697b      	ldr	r3, [r7, #20]
 80030fa:	78db      	ldrb	r3, [r3, #3]
 80030fc:	2b01      	cmp	r3, #1
 80030fe:	d108      	bne.n	8003112 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8003100:	697b      	ldr	r3, [r7, #20]
 8003102:	2200      	movs	r2, #0
 8003104:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003106:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003108:	b2db      	uxtb	r3, r3
 800310a:	4619      	mov	r1, r3
 800310c:	6878      	ldr	r0, [r7, #4]
 800310e:	f007 ff91 	bl	800b034 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003114:	015a      	lsls	r2, r3, #5
 8003116:	69fb      	ldr	r3, [r7, #28]
 8003118:	4413      	add	r3, r2
 800311a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800311e:	461a      	mov	r2, r3
 8003120:	2302      	movs	r3, #2
 8003122:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003124:	693b      	ldr	r3, [r7, #16]
 8003126:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800312a:	2b00      	cmp	r3, #0
 800312c:	d003      	beq.n	8003136 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800312e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003130:	6878      	ldr	r0, [r7, #4]
 8003132:	f000 fcdb 	bl	8003aec <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003138:	3301      	adds	r3, #1
 800313a:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800313c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800313e:	085b      	lsrs	r3, r3, #1
 8003140:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003142:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003144:	2b00      	cmp	r3, #0
 8003146:	f47f af2e 	bne.w	8002fa6 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	4618      	mov	r0, r3
 8003150:	f005 fb0e 	bl	8008770 <USB_ReadInterrupts>
 8003154:	4603      	mov	r3, r0
 8003156:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800315a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800315e:	d122      	bne.n	80031a6 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003160:	69fb      	ldr	r3, [r7, #28]
 8003162:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003166:	685b      	ldr	r3, [r3, #4]
 8003168:	69fa      	ldr	r2, [r7, #28]
 800316a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800316e:	f023 0301 	bic.w	r3, r3, #1
 8003172:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 800317a:	2b01      	cmp	r3, #1
 800317c:	d108      	bne.n	8003190 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	2200      	movs	r2, #0
 8003182:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003186:	2100      	movs	r1, #0
 8003188:	6878      	ldr	r0, [r7, #4]
 800318a:	f000 fec3 	bl	8003f14 <HAL_PCDEx_LPM_Callback>
 800318e:	e002      	b.n	8003196 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003190:	6878      	ldr	r0, [r7, #4]
 8003192:	f007 ff2f 	bl	800aff4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	695a      	ldr	r2, [r3, #20]
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80031a4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	4618      	mov	r0, r3
 80031ac:	f005 fae0 	bl	8008770 <USB_ReadInterrupts>
 80031b0:	4603      	mov	r3, r0
 80031b2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80031b6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80031ba:	d112      	bne.n	80031e2 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80031bc:	69fb      	ldr	r3, [r7, #28]
 80031be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80031c2:	689b      	ldr	r3, [r3, #8]
 80031c4:	f003 0301 	and.w	r3, r3, #1
 80031c8:	2b01      	cmp	r3, #1
 80031ca:	d102      	bne.n	80031d2 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80031cc:	6878      	ldr	r0, [r7, #4]
 80031ce:	f007 feeb 	bl	800afa8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	695a      	ldr	r2, [r3, #20]
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80031e0:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	4618      	mov	r0, r3
 80031e8:	f005 fac2 	bl	8008770 <USB_ReadInterrupts>
 80031ec:	4603      	mov	r3, r0
 80031ee:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80031f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80031f6:	f040 80b7 	bne.w	8003368 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80031fa:	69fb      	ldr	r3, [r7, #28]
 80031fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003200:	685b      	ldr	r3, [r3, #4]
 8003202:	69fa      	ldr	r2, [r7, #28]
 8003204:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003208:	f023 0301 	bic.w	r3, r3, #1
 800320c:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	2110      	movs	r1, #16
 8003214:	4618      	mov	r0, r3
 8003216:	f004 fa89 	bl	800772c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800321a:	2300      	movs	r3, #0
 800321c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800321e:	e046      	b.n	80032ae <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003220:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003222:	015a      	lsls	r2, r3, #5
 8003224:	69fb      	ldr	r3, [r7, #28]
 8003226:	4413      	add	r3, r2
 8003228:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800322c:	461a      	mov	r2, r3
 800322e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003232:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003234:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003236:	015a      	lsls	r2, r3, #5
 8003238:	69fb      	ldr	r3, [r7, #28]
 800323a:	4413      	add	r3, r2
 800323c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003244:	0151      	lsls	r1, r2, #5
 8003246:	69fa      	ldr	r2, [r7, #28]
 8003248:	440a      	add	r2, r1
 800324a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800324e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003252:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003254:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003256:	015a      	lsls	r2, r3, #5
 8003258:	69fb      	ldr	r3, [r7, #28]
 800325a:	4413      	add	r3, r2
 800325c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003260:	461a      	mov	r2, r3
 8003262:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003266:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003268:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800326a:	015a      	lsls	r2, r3, #5
 800326c:	69fb      	ldr	r3, [r7, #28]
 800326e:	4413      	add	r3, r2
 8003270:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003278:	0151      	lsls	r1, r2, #5
 800327a:	69fa      	ldr	r2, [r7, #28]
 800327c:	440a      	add	r2, r1
 800327e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003282:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003286:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003288:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800328a:	015a      	lsls	r2, r3, #5
 800328c:	69fb      	ldr	r3, [r7, #28]
 800328e:	4413      	add	r3, r2
 8003290:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003298:	0151      	lsls	r1, r2, #5
 800329a:	69fa      	ldr	r2, [r7, #28]
 800329c:	440a      	add	r2, r1
 800329e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80032a2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80032a6:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80032a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032aa:	3301      	adds	r3, #1
 80032ac:	62fb      	str	r3, [r7, #44]	; 0x2c
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	685b      	ldr	r3, [r3, #4]
 80032b2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80032b4:	429a      	cmp	r2, r3
 80032b6:	d3b3      	bcc.n	8003220 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80032b8:	69fb      	ldr	r3, [r7, #28]
 80032ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80032be:	69db      	ldr	r3, [r3, #28]
 80032c0:	69fa      	ldr	r2, [r7, #28]
 80032c2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80032c6:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80032ca:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d016      	beq.n	8003302 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80032d4:	69fb      	ldr	r3, [r7, #28]
 80032d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80032da:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80032de:	69fa      	ldr	r2, [r7, #28]
 80032e0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80032e4:	f043 030b 	orr.w	r3, r3, #11
 80032e8:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80032ec:	69fb      	ldr	r3, [r7, #28]
 80032ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80032f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032f4:	69fa      	ldr	r2, [r7, #28]
 80032f6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80032fa:	f043 030b 	orr.w	r3, r3, #11
 80032fe:	6453      	str	r3, [r2, #68]	; 0x44
 8003300:	e015      	b.n	800332e <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003302:	69fb      	ldr	r3, [r7, #28]
 8003304:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003308:	695b      	ldr	r3, [r3, #20]
 800330a:	69fa      	ldr	r2, [r7, #28]
 800330c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003310:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003314:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8003318:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800331a:	69fb      	ldr	r3, [r7, #28]
 800331c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003320:	691b      	ldr	r3, [r3, #16]
 8003322:	69fa      	ldr	r2, [r7, #28]
 8003324:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003328:	f043 030b 	orr.w	r3, r3, #11
 800332c:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800332e:	69fb      	ldr	r3, [r7, #28]
 8003330:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	69fa      	ldr	r2, [r7, #28]
 8003338:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800333c:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8003340:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	6818      	ldr	r0, [r3, #0]
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	691b      	ldr	r3, [r3, #16]
 800334a:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003352:	461a      	mov	r2, r3
 8003354:	f005 fad0 	bl	80088f8 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	695a      	ldr	r2, [r3, #20]
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8003366:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	4618      	mov	r0, r3
 800336e:	f005 f9ff 	bl	8008770 <USB_ReadInterrupts>
 8003372:	4603      	mov	r3, r0
 8003374:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003378:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800337c:	d124      	bne.n	80033c8 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	4618      	mov	r0, r3
 8003384:	f005 fa95 	bl	80088b2 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	4618      	mov	r0, r3
 800338e:	f004 fa4a 	bl	8007826 <USB_GetDevSpeed>
 8003392:	4603      	mov	r3, r0
 8003394:	461a      	mov	r2, r3
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681c      	ldr	r4, [r3, #0]
 800339e:	f001 f9e9 	bl	8004774 <HAL_RCC_GetHCLKFreq>
 80033a2:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80033a8:	b2db      	uxtb	r3, r3
 80033aa:	461a      	mov	r2, r3
 80033ac:	4620      	mov	r0, r4
 80033ae:	f003 ff49 	bl	8007244 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80033b2:	6878      	ldr	r0, [r7, #4]
 80033b4:	f007 fdcf 	bl	800af56 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	695a      	ldr	r2, [r3, #20]
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80033c6:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	4618      	mov	r0, r3
 80033ce:	f005 f9cf 	bl	8008770 <USB_ReadInterrupts>
 80033d2:	4603      	mov	r3, r0
 80033d4:	f003 0308 	and.w	r3, r3, #8
 80033d8:	2b08      	cmp	r3, #8
 80033da:	d10a      	bne.n	80033f2 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80033dc:	6878      	ldr	r0, [r7, #4]
 80033de:	f007 fdac 	bl	800af3a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	695a      	ldr	r2, [r3, #20]
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f002 0208 	and.w	r2, r2, #8
 80033f0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	4618      	mov	r0, r3
 80033f8:	f005 f9ba 	bl	8008770 <USB_ReadInterrupts>
 80033fc:	4603      	mov	r3, r0
 80033fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003402:	2b80      	cmp	r3, #128	; 0x80
 8003404:	d122      	bne.n	800344c <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8003406:	6a3b      	ldr	r3, [r7, #32]
 8003408:	699b      	ldr	r3, [r3, #24]
 800340a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800340e:	6a3b      	ldr	r3, [r7, #32]
 8003410:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003412:	2301      	movs	r3, #1
 8003414:	627b      	str	r3, [r7, #36]	; 0x24
 8003416:	e014      	b.n	8003442 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8003418:	6879      	ldr	r1, [r7, #4]
 800341a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800341c:	4613      	mov	r3, r2
 800341e:	00db      	lsls	r3, r3, #3
 8003420:	4413      	add	r3, r2
 8003422:	009b      	lsls	r3, r3, #2
 8003424:	440b      	add	r3, r1
 8003426:	f203 237f 	addw	r3, r3, #639	; 0x27f
 800342a:	781b      	ldrb	r3, [r3, #0]
 800342c:	2b01      	cmp	r3, #1
 800342e:	d105      	bne.n	800343c <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8003430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003432:	b2db      	uxtb	r3, r3
 8003434:	4619      	mov	r1, r3
 8003436:	6878      	ldr	r0, [r7, #4]
 8003438:	f000 fb27 	bl	8003a8a <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800343c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800343e:	3301      	adds	r3, #1
 8003440:	627b      	str	r3, [r7, #36]	; 0x24
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	685b      	ldr	r3, [r3, #4]
 8003446:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003448:	429a      	cmp	r2, r3
 800344a:	d3e5      	bcc.n	8003418 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	4618      	mov	r0, r3
 8003452:	f005 f98d 	bl	8008770 <USB_ReadInterrupts>
 8003456:	4603      	mov	r3, r0
 8003458:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800345c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003460:	d13b      	bne.n	80034da <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003462:	2301      	movs	r3, #1
 8003464:	627b      	str	r3, [r7, #36]	; 0x24
 8003466:	e02b      	b.n	80034c0 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8003468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800346a:	015a      	lsls	r2, r3, #5
 800346c:	69fb      	ldr	r3, [r7, #28]
 800346e:	4413      	add	r3, r2
 8003470:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003478:	6879      	ldr	r1, [r7, #4]
 800347a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800347c:	4613      	mov	r3, r2
 800347e:	00db      	lsls	r3, r3, #3
 8003480:	4413      	add	r3, r2
 8003482:	009b      	lsls	r3, r3, #2
 8003484:	440b      	add	r3, r1
 8003486:	3340      	adds	r3, #64	; 0x40
 8003488:	781b      	ldrb	r3, [r3, #0]
 800348a:	2b01      	cmp	r3, #1
 800348c:	d115      	bne.n	80034ba <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 800348e:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003490:	2b00      	cmp	r3, #0
 8003492:	da12      	bge.n	80034ba <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8003494:	6879      	ldr	r1, [r7, #4]
 8003496:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003498:	4613      	mov	r3, r2
 800349a:	00db      	lsls	r3, r3, #3
 800349c:	4413      	add	r3, r2
 800349e:	009b      	lsls	r3, r3, #2
 80034a0:	440b      	add	r3, r1
 80034a2:	333f      	adds	r3, #63	; 0x3f
 80034a4:	2201      	movs	r2, #1
 80034a6:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80034a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034aa:	b2db      	uxtb	r3, r3
 80034ac:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80034b0:	b2db      	uxtb	r3, r3
 80034b2:	4619      	mov	r1, r3
 80034b4:	6878      	ldr	r0, [r7, #4]
 80034b6:	f000 fae8 	bl	8003a8a <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80034ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034bc:	3301      	adds	r3, #1
 80034be:	627b      	str	r3, [r7, #36]	; 0x24
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	685b      	ldr	r3, [r3, #4]
 80034c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034c6:	429a      	cmp	r2, r3
 80034c8:	d3ce      	bcc.n	8003468 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	695a      	ldr	r2, [r3, #20]
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80034d8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	4618      	mov	r0, r3
 80034e0:	f005 f946 	bl	8008770 <USB_ReadInterrupts>
 80034e4:	4603      	mov	r3, r0
 80034e6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80034ea:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80034ee:	d155      	bne.n	800359c <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80034f0:	2301      	movs	r3, #1
 80034f2:	627b      	str	r3, [r7, #36]	; 0x24
 80034f4:	e045      	b.n	8003582 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80034f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034f8:	015a      	lsls	r2, r3, #5
 80034fa:	69fb      	ldr	r3, [r7, #28]
 80034fc:	4413      	add	r3, r2
 80034fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003506:	6879      	ldr	r1, [r7, #4]
 8003508:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800350a:	4613      	mov	r3, r2
 800350c:	00db      	lsls	r3, r3, #3
 800350e:	4413      	add	r3, r2
 8003510:	009b      	lsls	r3, r3, #2
 8003512:	440b      	add	r3, r1
 8003514:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003518:	781b      	ldrb	r3, [r3, #0]
 800351a:	2b01      	cmp	r3, #1
 800351c:	d12e      	bne.n	800357c <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800351e:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003520:	2b00      	cmp	r3, #0
 8003522:	da2b      	bge.n	800357c <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8003524:	69bb      	ldr	r3, [r7, #24]
 8003526:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8003530:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003534:	429a      	cmp	r2, r3
 8003536:	d121      	bne.n	800357c <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8003538:	6879      	ldr	r1, [r7, #4]
 800353a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800353c:	4613      	mov	r3, r2
 800353e:	00db      	lsls	r3, r3, #3
 8003540:	4413      	add	r3, r2
 8003542:	009b      	lsls	r3, r3, #2
 8003544:	440b      	add	r3, r1
 8003546:	f203 237f 	addw	r3, r3, #639	; 0x27f
 800354a:	2201      	movs	r2, #1
 800354c:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 800354e:	6a3b      	ldr	r3, [r7, #32]
 8003550:	699b      	ldr	r3, [r3, #24]
 8003552:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8003556:	6a3b      	ldr	r3, [r7, #32]
 8003558:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 800355a:	6a3b      	ldr	r3, [r7, #32]
 800355c:	695b      	ldr	r3, [r3, #20]
 800355e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003562:	2b00      	cmp	r3, #0
 8003564:	d10a      	bne.n	800357c <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8003566:	69fb      	ldr	r3, [r7, #28]
 8003568:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800356c:	685b      	ldr	r3, [r3, #4]
 800356e:	69fa      	ldr	r2, [r7, #28]
 8003570:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003574:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003578:	6053      	str	r3, [r2, #4]
            break;
 800357a:	e007      	b.n	800358c <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800357c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800357e:	3301      	adds	r3, #1
 8003580:	627b      	str	r3, [r7, #36]	; 0x24
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	685b      	ldr	r3, [r3, #4]
 8003586:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003588:	429a      	cmp	r2, r3
 800358a:	d3b4      	bcc.n	80034f6 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	695a      	ldr	r2, [r3, #20]
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800359a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	4618      	mov	r0, r3
 80035a2:	f005 f8e5 	bl	8008770 <USB_ReadInterrupts>
 80035a6:	4603      	mov	r3, r0
 80035a8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80035ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035b0:	d10a      	bne.n	80035c8 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80035b2:	6878      	ldr	r0, [r7, #4]
 80035b4:	f007 fd50 	bl	800b058 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	695a      	ldr	r2, [r3, #20]
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80035c6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	4618      	mov	r0, r3
 80035ce:	f005 f8cf 	bl	8008770 <USB_ReadInterrupts>
 80035d2:	4603      	mov	r3, r0
 80035d4:	f003 0304 	and.w	r3, r3, #4
 80035d8:	2b04      	cmp	r3, #4
 80035da:	d115      	bne.n	8003608 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	685b      	ldr	r3, [r3, #4]
 80035e2:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80035e4:	69bb      	ldr	r3, [r7, #24]
 80035e6:	f003 0304 	and.w	r3, r3, #4
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d002      	beq.n	80035f4 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80035ee:	6878      	ldr	r0, [r7, #4]
 80035f0:	f007 fd40 	bl	800b074 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	6859      	ldr	r1, [r3, #4]
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	69ba      	ldr	r2, [r7, #24]
 8003600:	430a      	orrs	r2, r1
 8003602:	605a      	str	r2, [r3, #4]
 8003604:	e000      	b.n	8003608 <HAL_PCD_IRQHandler+0x938>
      return;
 8003606:	bf00      	nop
    }
  }
}
 8003608:	3734      	adds	r7, #52	; 0x34
 800360a:	46bd      	mov	sp, r7
 800360c:	bd90      	pop	{r4, r7, pc}

0800360e <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800360e:	b580      	push	{r7, lr}
 8003610:	b082      	sub	sp, #8
 8003612:	af00      	add	r7, sp, #0
 8003614:	6078      	str	r0, [r7, #4]
 8003616:	460b      	mov	r3, r1
 8003618:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003620:	2b01      	cmp	r3, #1
 8003622:	d101      	bne.n	8003628 <HAL_PCD_SetAddress+0x1a>
 8003624:	2302      	movs	r3, #2
 8003626:	e013      	b.n	8003650 <HAL_PCD_SetAddress+0x42>
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	2201      	movs	r2, #1
 800362c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	78fa      	ldrb	r2, [r7, #3]
 8003634:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	78fa      	ldrb	r2, [r7, #3]
 800363e:	4611      	mov	r1, r2
 8003640:	4618      	mov	r0, r3
 8003642:	f005 f82d 	bl	80086a0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	2200      	movs	r2, #0
 800364a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800364e:	2300      	movs	r3, #0
}
 8003650:	4618      	mov	r0, r3
 8003652:	3708      	adds	r7, #8
 8003654:	46bd      	mov	sp, r7
 8003656:	bd80      	pop	{r7, pc}

08003658 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003658:	b580      	push	{r7, lr}
 800365a:	b084      	sub	sp, #16
 800365c:	af00      	add	r7, sp, #0
 800365e:	6078      	str	r0, [r7, #4]
 8003660:	4608      	mov	r0, r1
 8003662:	4611      	mov	r1, r2
 8003664:	461a      	mov	r2, r3
 8003666:	4603      	mov	r3, r0
 8003668:	70fb      	strb	r3, [r7, #3]
 800366a:	460b      	mov	r3, r1
 800366c:	803b      	strh	r3, [r7, #0]
 800366e:	4613      	mov	r3, r2
 8003670:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003672:	2300      	movs	r3, #0
 8003674:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003676:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800367a:	2b00      	cmp	r3, #0
 800367c:	da0f      	bge.n	800369e <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800367e:	78fb      	ldrb	r3, [r7, #3]
 8003680:	f003 020f 	and.w	r2, r3, #15
 8003684:	4613      	mov	r3, r2
 8003686:	00db      	lsls	r3, r3, #3
 8003688:	4413      	add	r3, r2
 800368a:	009b      	lsls	r3, r3, #2
 800368c:	3338      	adds	r3, #56	; 0x38
 800368e:	687a      	ldr	r2, [r7, #4]
 8003690:	4413      	add	r3, r2
 8003692:	3304      	adds	r3, #4
 8003694:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	2201      	movs	r2, #1
 800369a:	705a      	strb	r2, [r3, #1]
 800369c:	e00f      	b.n	80036be <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800369e:	78fb      	ldrb	r3, [r7, #3]
 80036a0:	f003 020f 	and.w	r2, r3, #15
 80036a4:	4613      	mov	r3, r2
 80036a6:	00db      	lsls	r3, r3, #3
 80036a8:	4413      	add	r3, r2
 80036aa:	009b      	lsls	r3, r3, #2
 80036ac:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80036b0:	687a      	ldr	r2, [r7, #4]
 80036b2:	4413      	add	r3, r2
 80036b4:	3304      	adds	r3, #4
 80036b6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	2200      	movs	r2, #0
 80036bc:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80036be:	78fb      	ldrb	r3, [r7, #3]
 80036c0:	f003 030f 	and.w	r3, r3, #15
 80036c4:	b2da      	uxtb	r2, r3
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80036ca:	883a      	ldrh	r2, [r7, #0]
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	78ba      	ldrb	r2, [r7, #2]
 80036d4:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	785b      	ldrb	r3, [r3, #1]
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d004      	beq.n	80036e8 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	781b      	ldrb	r3, [r3, #0]
 80036e2:	b29a      	uxth	r2, r3
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80036e8:	78bb      	ldrb	r3, [r7, #2]
 80036ea:	2b02      	cmp	r3, #2
 80036ec:	d102      	bne.n	80036f4 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	2200      	movs	r2, #0
 80036f2:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80036fa:	2b01      	cmp	r3, #1
 80036fc:	d101      	bne.n	8003702 <HAL_PCD_EP_Open+0xaa>
 80036fe:	2302      	movs	r3, #2
 8003700:	e00e      	b.n	8003720 <HAL_PCD_EP_Open+0xc8>
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	2201      	movs	r2, #1
 8003706:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	68f9      	ldr	r1, [r7, #12]
 8003710:	4618      	mov	r0, r3
 8003712:	f004 f8ad 	bl	8007870 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	2200      	movs	r2, #0
 800371a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 800371e:	7afb      	ldrb	r3, [r7, #11]
}
 8003720:	4618      	mov	r0, r3
 8003722:	3710      	adds	r7, #16
 8003724:	46bd      	mov	sp, r7
 8003726:	bd80      	pop	{r7, pc}

08003728 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003728:	b580      	push	{r7, lr}
 800372a:	b084      	sub	sp, #16
 800372c:	af00      	add	r7, sp, #0
 800372e:	6078      	str	r0, [r7, #4]
 8003730:	460b      	mov	r3, r1
 8003732:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003734:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003738:	2b00      	cmp	r3, #0
 800373a:	da0f      	bge.n	800375c <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800373c:	78fb      	ldrb	r3, [r7, #3]
 800373e:	f003 020f 	and.w	r2, r3, #15
 8003742:	4613      	mov	r3, r2
 8003744:	00db      	lsls	r3, r3, #3
 8003746:	4413      	add	r3, r2
 8003748:	009b      	lsls	r3, r3, #2
 800374a:	3338      	adds	r3, #56	; 0x38
 800374c:	687a      	ldr	r2, [r7, #4]
 800374e:	4413      	add	r3, r2
 8003750:	3304      	adds	r3, #4
 8003752:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	2201      	movs	r2, #1
 8003758:	705a      	strb	r2, [r3, #1]
 800375a:	e00f      	b.n	800377c <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800375c:	78fb      	ldrb	r3, [r7, #3]
 800375e:	f003 020f 	and.w	r2, r3, #15
 8003762:	4613      	mov	r3, r2
 8003764:	00db      	lsls	r3, r3, #3
 8003766:	4413      	add	r3, r2
 8003768:	009b      	lsls	r3, r3, #2
 800376a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800376e:	687a      	ldr	r2, [r7, #4]
 8003770:	4413      	add	r3, r2
 8003772:	3304      	adds	r3, #4
 8003774:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	2200      	movs	r2, #0
 800377a:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800377c:	78fb      	ldrb	r3, [r7, #3]
 800377e:	f003 030f 	and.w	r3, r3, #15
 8003782:	b2da      	uxtb	r2, r3
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800378e:	2b01      	cmp	r3, #1
 8003790:	d101      	bne.n	8003796 <HAL_PCD_EP_Close+0x6e>
 8003792:	2302      	movs	r3, #2
 8003794:	e00e      	b.n	80037b4 <HAL_PCD_EP_Close+0x8c>
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	2201      	movs	r2, #1
 800379a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	68f9      	ldr	r1, [r7, #12]
 80037a4:	4618      	mov	r0, r3
 80037a6:	f004 f8eb 	bl	8007980 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	2200      	movs	r2, #0
 80037ae:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 80037b2:	2300      	movs	r3, #0
}
 80037b4:	4618      	mov	r0, r3
 80037b6:	3710      	adds	r7, #16
 80037b8:	46bd      	mov	sp, r7
 80037ba:	bd80      	pop	{r7, pc}

080037bc <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80037bc:	b580      	push	{r7, lr}
 80037be:	b086      	sub	sp, #24
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	60f8      	str	r0, [r7, #12]
 80037c4:	607a      	str	r2, [r7, #4]
 80037c6:	603b      	str	r3, [r7, #0]
 80037c8:	460b      	mov	r3, r1
 80037ca:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80037cc:	7afb      	ldrb	r3, [r7, #11]
 80037ce:	f003 020f 	and.w	r2, r3, #15
 80037d2:	4613      	mov	r3, r2
 80037d4:	00db      	lsls	r3, r3, #3
 80037d6:	4413      	add	r3, r2
 80037d8:	009b      	lsls	r3, r3, #2
 80037da:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80037de:	68fa      	ldr	r2, [r7, #12]
 80037e0:	4413      	add	r3, r2
 80037e2:	3304      	adds	r3, #4
 80037e4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80037e6:	697b      	ldr	r3, [r7, #20]
 80037e8:	687a      	ldr	r2, [r7, #4]
 80037ea:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80037ec:	697b      	ldr	r3, [r7, #20]
 80037ee:	683a      	ldr	r2, [r7, #0]
 80037f0:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80037f2:	697b      	ldr	r3, [r7, #20]
 80037f4:	2200      	movs	r2, #0
 80037f6:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 80037f8:	697b      	ldr	r3, [r7, #20]
 80037fa:	2200      	movs	r2, #0
 80037fc:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80037fe:	7afb      	ldrb	r3, [r7, #11]
 8003800:	f003 030f 	and.w	r3, r3, #15
 8003804:	b2da      	uxtb	r2, r3
 8003806:	697b      	ldr	r3, [r7, #20]
 8003808:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	691b      	ldr	r3, [r3, #16]
 800380e:	2b01      	cmp	r3, #1
 8003810:	d102      	bne.n	8003818 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003812:	687a      	ldr	r2, [r7, #4]
 8003814:	697b      	ldr	r3, [r7, #20]
 8003816:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003818:	7afb      	ldrb	r3, [r7, #11]
 800381a:	f003 030f 	and.w	r3, r3, #15
 800381e:	2b00      	cmp	r3, #0
 8003820:	d109      	bne.n	8003836 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	6818      	ldr	r0, [r3, #0]
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	691b      	ldr	r3, [r3, #16]
 800382a:	b2db      	uxtb	r3, r3
 800382c:	461a      	mov	r2, r3
 800382e:	6979      	ldr	r1, [r7, #20]
 8003830:	f004 fbca 	bl	8007fc8 <USB_EP0StartXfer>
 8003834:	e008      	b.n	8003848 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	6818      	ldr	r0, [r3, #0]
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	691b      	ldr	r3, [r3, #16]
 800383e:	b2db      	uxtb	r3, r3
 8003840:	461a      	mov	r2, r3
 8003842:	6979      	ldr	r1, [r7, #20]
 8003844:	f004 f978 	bl	8007b38 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003848:	2300      	movs	r3, #0
}
 800384a:	4618      	mov	r0, r3
 800384c:	3718      	adds	r7, #24
 800384e:	46bd      	mov	sp, r7
 8003850:	bd80      	pop	{r7, pc}

08003852 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003852:	b480      	push	{r7}
 8003854:	b083      	sub	sp, #12
 8003856:	af00      	add	r7, sp, #0
 8003858:	6078      	str	r0, [r7, #4]
 800385a:	460b      	mov	r3, r1
 800385c:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800385e:	78fb      	ldrb	r3, [r7, #3]
 8003860:	f003 020f 	and.w	r2, r3, #15
 8003864:	6879      	ldr	r1, [r7, #4]
 8003866:	4613      	mov	r3, r2
 8003868:	00db      	lsls	r3, r3, #3
 800386a:	4413      	add	r3, r2
 800386c:	009b      	lsls	r3, r3, #2
 800386e:	440b      	add	r3, r1
 8003870:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8003874:	681b      	ldr	r3, [r3, #0]
}
 8003876:	4618      	mov	r0, r3
 8003878:	370c      	adds	r7, #12
 800387a:	46bd      	mov	sp, r7
 800387c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003880:	4770      	bx	lr

08003882 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003882:	b580      	push	{r7, lr}
 8003884:	b086      	sub	sp, #24
 8003886:	af00      	add	r7, sp, #0
 8003888:	60f8      	str	r0, [r7, #12]
 800388a:	607a      	str	r2, [r7, #4]
 800388c:	603b      	str	r3, [r7, #0]
 800388e:	460b      	mov	r3, r1
 8003890:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003892:	7afb      	ldrb	r3, [r7, #11]
 8003894:	f003 020f 	and.w	r2, r3, #15
 8003898:	4613      	mov	r3, r2
 800389a:	00db      	lsls	r3, r3, #3
 800389c:	4413      	add	r3, r2
 800389e:	009b      	lsls	r3, r3, #2
 80038a0:	3338      	adds	r3, #56	; 0x38
 80038a2:	68fa      	ldr	r2, [r7, #12]
 80038a4:	4413      	add	r3, r2
 80038a6:	3304      	adds	r3, #4
 80038a8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80038aa:	697b      	ldr	r3, [r7, #20]
 80038ac:	687a      	ldr	r2, [r7, #4]
 80038ae:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80038b0:	697b      	ldr	r3, [r7, #20]
 80038b2:	683a      	ldr	r2, [r7, #0]
 80038b4:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80038b6:	697b      	ldr	r3, [r7, #20]
 80038b8:	2200      	movs	r2, #0
 80038ba:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 80038bc:	697b      	ldr	r3, [r7, #20]
 80038be:	2201      	movs	r2, #1
 80038c0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80038c2:	7afb      	ldrb	r3, [r7, #11]
 80038c4:	f003 030f 	and.w	r3, r3, #15
 80038c8:	b2da      	uxtb	r2, r3
 80038ca:	697b      	ldr	r3, [r7, #20]
 80038cc:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	691b      	ldr	r3, [r3, #16]
 80038d2:	2b01      	cmp	r3, #1
 80038d4:	d102      	bne.n	80038dc <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80038d6:	687a      	ldr	r2, [r7, #4]
 80038d8:	697b      	ldr	r3, [r7, #20]
 80038da:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80038dc:	7afb      	ldrb	r3, [r7, #11]
 80038de:	f003 030f 	and.w	r3, r3, #15
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d109      	bne.n	80038fa <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	6818      	ldr	r0, [r3, #0]
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	691b      	ldr	r3, [r3, #16]
 80038ee:	b2db      	uxtb	r3, r3
 80038f0:	461a      	mov	r2, r3
 80038f2:	6979      	ldr	r1, [r7, #20]
 80038f4:	f004 fb68 	bl	8007fc8 <USB_EP0StartXfer>
 80038f8:	e008      	b.n	800390c <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	6818      	ldr	r0, [r3, #0]
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	691b      	ldr	r3, [r3, #16]
 8003902:	b2db      	uxtb	r3, r3
 8003904:	461a      	mov	r2, r3
 8003906:	6979      	ldr	r1, [r7, #20]
 8003908:	f004 f916 	bl	8007b38 <USB_EPStartXfer>
  }

  return HAL_OK;
 800390c:	2300      	movs	r3, #0
}
 800390e:	4618      	mov	r0, r3
 8003910:	3718      	adds	r7, #24
 8003912:	46bd      	mov	sp, r7
 8003914:	bd80      	pop	{r7, pc}

08003916 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003916:	b580      	push	{r7, lr}
 8003918:	b084      	sub	sp, #16
 800391a:	af00      	add	r7, sp, #0
 800391c:	6078      	str	r0, [r7, #4]
 800391e:	460b      	mov	r3, r1
 8003920:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003922:	78fb      	ldrb	r3, [r7, #3]
 8003924:	f003 020f 	and.w	r2, r3, #15
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	685b      	ldr	r3, [r3, #4]
 800392c:	429a      	cmp	r2, r3
 800392e:	d901      	bls.n	8003934 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003930:	2301      	movs	r3, #1
 8003932:	e050      	b.n	80039d6 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003934:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003938:	2b00      	cmp	r3, #0
 800393a:	da0f      	bge.n	800395c <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800393c:	78fb      	ldrb	r3, [r7, #3]
 800393e:	f003 020f 	and.w	r2, r3, #15
 8003942:	4613      	mov	r3, r2
 8003944:	00db      	lsls	r3, r3, #3
 8003946:	4413      	add	r3, r2
 8003948:	009b      	lsls	r3, r3, #2
 800394a:	3338      	adds	r3, #56	; 0x38
 800394c:	687a      	ldr	r2, [r7, #4]
 800394e:	4413      	add	r3, r2
 8003950:	3304      	adds	r3, #4
 8003952:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	2201      	movs	r2, #1
 8003958:	705a      	strb	r2, [r3, #1]
 800395a:	e00d      	b.n	8003978 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800395c:	78fa      	ldrb	r2, [r7, #3]
 800395e:	4613      	mov	r3, r2
 8003960:	00db      	lsls	r3, r3, #3
 8003962:	4413      	add	r3, r2
 8003964:	009b      	lsls	r3, r3, #2
 8003966:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800396a:	687a      	ldr	r2, [r7, #4]
 800396c:	4413      	add	r3, r2
 800396e:	3304      	adds	r3, #4
 8003970:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	2200      	movs	r2, #0
 8003976:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	2201      	movs	r2, #1
 800397c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800397e:	78fb      	ldrb	r3, [r7, #3]
 8003980:	f003 030f 	and.w	r3, r3, #15
 8003984:	b2da      	uxtb	r2, r3
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003990:	2b01      	cmp	r3, #1
 8003992:	d101      	bne.n	8003998 <HAL_PCD_EP_SetStall+0x82>
 8003994:	2302      	movs	r3, #2
 8003996:	e01e      	b.n	80039d6 <HAL_PCD_EP_SetStall+0xc0>
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2201      	movs	r2, #1
 800399c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	68f9      	ldr	r1, [r7, #12]
 80039a6:	4618      	mov	r0, r3
 80039a8:	f004 fda6 	bl	80084f8 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80039ac:	78fb      	ldrb	r3, [r7, #3]
 80039ae:	f003 030f 	and.w	r3, r3, #15
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d10a      	bne.n	80039cc <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	6818      	ldr	r0, [r3, #0]
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	691b      	ldr	r3, [r3, #16]
 80039be:	b2d9      	uxtb	r1, r3
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80039c6:	461a      	mov	r2, r3
 80039c8:	f004 ff96 	bl	80088f8 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	2200      	movs	r2, #0
 80039d0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80039d4:	2300      	movs	r3, #0
}
 80039d6:	4618      	mov	r0, r3
 80039d8:	3710      	adds	r7, #16
 80039da:	46bd      	mov	sp, r7
 80039dc:	bd80      	pop	{r7, pc}

080039de <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80039de:	b580      	push	{r7, lr}
 80039e0:	b084      	sub	sp, #16
 80039e2:	af00      	add	r7, sp, #0
 80039e4:	6078      	str	r0, [r7, #4]
 80039e6:	460b      	mov	r3, r1
 80039e8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80039ea:	78fb      	ldrb	r3, [r7, #3]
 80039ec:	f003 020f 	and.w	r2, r3, #15
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	685b      	ldr	r3, [r3, #4]
 80039f4:	429a      	cmp	r2, r3
 80039f6:	d901      	bls.n	80039fc <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80039f8:	2301      	movs	r3, #1
 80039fa:	e042      	b.n	8003a82 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80039fc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	da0f      	bge.n	8003a24 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003a04:	78fb      	ldrb	r3, [r7, #3]
 8003a06:	f003 020f 	and.w	r2, r3, #15
 8003a0a:	4613      	mov	r3, r2
 8003a0c:	00db      	lsls	r3, r3, #3
 8003a0e:	4413      	add	r3, r2
 8003a10:	009b      	lsls	r3, r3, #2
 8003a12:	3338      	adds	r3, #56	; 0x38
 8003a14:	687a      	ldr	r2, [r7, #4]
 8003a16:	4413      	add	r3, r2
 8003a18:	3304      	adds	r3, #4
 8003a1a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	2201      	movs	r2, #1
 8003a20:	705a      	strb	r2, [r3, #1]
 8003a22:	e00f      	b.n	8003a44 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003a24:	78fb      	ldrb	r3, [r7, #3]
 8003a26:	f003 020f 	and.w	r2, r3, #15
 8003a2a:	4613      	mov	r3, r2
 8003a2c:	00db      	lsls	r3, r3, #3
 8003a2e:	4413      	add	r3, r2
 8003a30:	009b      	lsls	r3, r3, #2
 8003a32:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003a36:	687a      	ldr	r2, [r7, #4]
 8003a38:	4413      	add	r3, r2
 8003a3a:	3304      	adds	r3, #4
 8003a3c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	2200      	movs	r2, #0
 8003a42:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	2200      	movs	r2, #0
 8003a48:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003a4a:	78fb      	ldrb	r3, [r7, #3]
 8003a4c:	f003 030f 	and.w	r3, r3, #15
 8003a50:	b2da      	uxtb	r2, r3
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003a5c:	2b01      	cmp	r3, #1
 8003a5e:	d101      	bne.n	8003a64 <HAL_PCD_EP_ClrStall+0x86>
 8003a60:	2302      	movs	r3, #2
 8003a62:	e00e      	b.n	8003a82 <HAL_PCD_EP_ClrStall+0xa4>
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	2201      	movs	r2, #1
 8003a68:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	68f9      	ldr	r1, [r7, #12]
 8003a72:	4618      	mov	r0, r3
 8003a74:	f004 fdae 	bl	80085d4 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	2200      	movs	r2, #0
 8003a7c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003a80:	2300      	movs	r3, #0
}
 8003a82:	4618      	mov	r0, r3
 8003a84:	3710      	adds	r7, #16
 8003a86:	46bd      	mov	sp, r7
 8003a88:	bd80      	pop	{r7, pc}

08003a8a <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003a8a:	b580      	push	{r7, lr}
 8003a8c:	b084      	sub	sp, #16
 8003a8e:	af00      	add	r7, sp, #0
 8003a90:	6078      	str	r0, [r7, #4]
 8003a92:	460b      	mov	r3, r1
 8003a94:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8003a96:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	da0c      	bge.n	8003ab8 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003a9e:	78fb      	ldrb	r3, [r7, #3]
 8003aa0:	f003 020f 	and.w	r2, r3, #15
 8003aa4:	4613      	mov	r3, r2
 8003aa6:	00db      	lsls	r3, r3, #3
 8003aa8:	4413      	add	r3, r2
 8003aaa:	009b      	lsls	r3, r3, #2
 8003aac:	3338      	adds	r3, #56	; 0x38
 8003aae:	687a      	ldr	r2, [r7, #4]
 8003ab0:	4413      	add	r3, r2
 8003ab2:	3304      	adds	r3, #4
 8003ab4:	60fb      	str	r3, [r7, #12]
 8003ab6:	e00c      	b.n	8003ad2 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003ab8:	78fb      	ldrb	r3, [r7, #3]
 8003aba:	f003 020f 	and.w	r2, r3, #15
 8003abe:	4613      	mov	r3, r2
 8003ac0:	00db      	lsls	r3, r3, #3
 8003ac2:	4413      	add	r3, r2
 8003ac4:	009b      	lsls	r3, r3, #2
 8003ac6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003aca:	687a      	ldr	r2, [r7, #4]
 8003acc:	4413      	add	r3, r2
 8003ace:	3304      	adds	r3, #4
 8003ad0:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	68f9      	ldr	r1, [r7, #12]
 8003ad8:	4618      	mov	r0, r3
 8003ada:	f004 fbcd 	bl	8008278 <USB_EPStopXfer>
 8003ade:	4603      	mov	r3, r0
 8003ae0:	72fb      	strb	r3, [r7, #11]

  return ret;
 8003ae2:	7afb      	ldrb	r3, [r7, #11]
}
 8003ae4:	4618      	mov	r0, r3
 8003ae6:	3710      	adds	r7, #16
 8003ae8:	46bd      	mov	sp, r7
 8003aea:	bd80      	pop	{r7, pc}

08003aec <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003aec:	b580      	push	{r7, lr}
 8003aee:	b08a      	sub	sp, #40	; 0x28
 8003af0:	af02      	add	r7, sp, #8
 8003af2:	6078      	str	r0, [r7, #4]
 8003af4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003afc:	697b      	ldr	r3, [r7, #20]
 8003afe:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003b00:	683a      	ldr	r2, [r7, #0]
 8003b02:	4613      	mov	r3, r2
 8003b04:	00db      	lsls	r3, r3, #3
 8003b06:	4413      	add	r3, r2
 8003b08:	009b      	lsls	r3, r3, #2
 8003b0a:	3338      	adds	r3, #56	; 0x38
 8003b0c:	687a      	ldr	r2, [r7, #4]
 8003b0e:	4413      	add	r3, r2
 8003b10:	3304      	adds	r3, #4
 8003b12:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	6a1a      	ldr	r2, [r3, #32]
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	699b      	ldr	r3, [r3, #24]
 8003b1c:	429a      	cmp	r2, r3
 8003b1e:	d901      	bls.n	8003b24 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003b20:	2301      	movs	r3, #1
 8003b22:	e06c      	b.n	8003bfe <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	699a      	ldr	r2, [r3, #24]
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	6a1b      	ldr	r3, [r3, #32]
 8003b2c:	1ad3      	subs	r3, r2, r3
 8003b2e:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	68db      	ldr	r3, [r3, #12]
 8003b34:	69fa      	ldr	r2, [r7, #28]
 8003b36:	429a      	cmp	r2, r3
 8003b38:	d902      	bls.n	8003b40 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	68db      	ldr	r3, [r3, #12]
 8003b3e:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003b40:	69fb      	ldr	r3, [r7, #28]
 8003b42:	3303      	adds	r3, #3
 8003b44:	089b      	lsrs	r3, r3, #2
 8003b46:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003b48:	e02b      	b.n	8003ba2 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	699a      	ldr	r2, [r3, #24]
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	6a1b      	ldr	r3, [r3, #32]
 8003b52:	1ad3      	subs	r3, r2, r3
 8003b54:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	68db      	ldr	r3, [r3, #12]
 8003b5a:	69fa      	ldr	r2, [r7, #28]
 8003b5c:	429a      	cmp	r2, r3
 8003b5e:	d902      	bls.n	8003b66 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	68db      	ldr	r3, [r3, #12]
 8003b64:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003b66:	69fb      	ldr	r3, [r7, #28]
 8003b68:	3303      	adds	r3, #3
 8003b6a:	089b      	lsrs	r3, r3, #2
 8003b6c:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	6919      	ldr	r1, [r3, #16]
 8003b72:	683b      	ldr	r3, [r7, #0]
 8003b74:	b2da      	uxtb	r2, r3
 8003b76:	69fb      	ldr	r3, [r7, #28]
 8003b78:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003b7e:	b2db      	uxtb	r3, r3
 8003b80:	9300      	str	r3, [sp, #0]
 8003b82:	4603      	mov	r3, r0
 8003b84:	6978      	ldr	r0, [r7, #20]
 8003b86:	f004 fc21 	bl	80083cc <USB_WritePacket>

    ep->xfer_buff  += len;
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	691a      	ldr	r2, [r3, #16]
 8003b8e:	69fb      	ldr	r3, [r7, #28]
 8003b90:	441a      	add	r2, r3
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	6a1a      	ldr	r2, [r3, #32]
 8003b9a:	69fb      	ldr	r3, [r7, #28]
 8003b9c:	441a      	add	r2, r3
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003ba2:	683b      	ldr	r3, [r7, #0]
 8003ba4:	015a      	lsls	r2, r3, #5
 8003ba6:	693b      	ldr	r3, [r7, #16]
 8003ba8:	4413      	add	r3, r2
 8003baa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003bae:	699b      	ldr	r3, [r3, #24]
 8003bb0:	b29b      	uxth	r3, r3
 8003bb2:	69ba      	ldr	r2, [r7, #24]
 8003bb4:	429a      	cmp	r2, r3
 8003bb6:	d809      	bhi.n	8003bcc <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	6a1a      	ldr	r2, [r3, #32]
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003bc0:	429a      	cmp	r2, r3
 8003bc2:	d203      	bcs.n	8003bcc <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	699b      	ldr	r3, [r3, #24]
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d1be      	bne.n	8003b4a <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	699a      	ldr	r2, [r3, #24]
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	6a1b      	ldr	r3, [r3, #32]
 8003bd4:	429a      	cmp	r2, r3
 8003bd6:	d811      	bhi.n	8003bfc <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003bd8:	683b      	ldr	r3, [r7, #0]
 8003bda:	f003 030f 	and.w	r3, r3, #15
 8003bde:	2201      	movs	r2, #1
 8003be0:	fa02 f303 	lsl.w	r3, r2, r3
 8003be4:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003be6:	693b      	ldr	r3, [r7, #16]
 8003be8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003bec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003bee:	68bb      	ldr	r3, [r7, #8]
 8003bf0:	43db      	mvns	r3, r3
 8003bf2:	6939      	ldr	r1, [r7, #16]
 8003bf4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003bf8:	4013      	ands	r3, r2
 8003bfa:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8003bfc:	2300      	movs	r3, #0
}
 8003bfe:	4618      	mov	r0, r3
 8003c00:	3720      	adds	r7, #32
 8003c02:	46bd      	mov	sp, r7
 8003c04:	bd80      	pop	{r7, pc}
	...

08003c08 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003c08:	b580      	push	{r7, lr}
 8003c0a:	b088      	sub	sp, #32
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	6078      	str	r0, [r7, #4]
 8003c10:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c18:	69fb      	ldr	r3, [r7, #28]
 8003c1a:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003c1c:	69fb      	ldr	r3, [r7, #28]
 8003c1e:	333c      	adds	r3, #60	; 0x3c
 8003c20:	3304      	adds	r3, #4
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003c26:	683b      	ldr	r3, [r7, #0]
 8003c28:	015a      	lsls	r2, r3, #5
 8003c2a:	69bb      	ldr	r3, [r7, #24]
 8003c2c:	4413      	add	r3, r2
 8003c2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c32:	689b      	ldr	r3, [r3, #8]
 8003c34:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	691b      	ldr	r3, [r3, #16]
 8003c3a:	2b01      	cmp	r3, #1
 8003c3c:	d17b      	bne.n	8003d36 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003c3e:	693b      	ldr	r3, [r7, #16]
 8003c40:	f003 0308 	and.w	r3, r3, #8
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d015      	beq.n	8003c74 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003c48:	697b      	ldr	r3, [r7, #20]
 8003c4a:	4a61      	ldr	r2, [pc, #388]	; (8003dd0 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003c4c:	4293      	cmp	r3, r2
 8003c4e:	f240 80b9 	bls.w	8003dc4 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003c52:	693b      	ldr	r3, [r7, #16]
 8003c54:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	f000 80b3 	beq.w	8003dc4 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003c5e:	683b      	ldr	r3, [r7, #0]
 8003c60:	015a      	lsls	r2, r3, #5
 8003c62:	69bb      	ldr	r3, [r7, #24]
 8003c64:	4413      	add	r3, r2
 8003c66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c6a:	461a      	mov	r2, r3
 8003c6c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003c70:	6093      	str	r3, [r2, #8]
 8003c72:	e0a7      	b.n	8003dc4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003c74:	693b      	ldr	r3, [r7, #16]
 8003c76:	f003 0320 	and.w	r3, r3, #32
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d009      	beq.n	8003c92 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003c7e:	683b      	ldr	r3, [r7, #0]
 8003c80:	015a      	lsls	r2, r3, #5
 8003c82:	69bb      	ldr	r3, [r7, #24]
 8003c84:	4413      	add	r3, r2
 8003c86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c8a:	461a      	mov	r2, r3
 8003c8c:	2320      	movs	r3, #32
 8003c8e:	6093      	str	r3, [r2, #8]
 8003c90:	e098      	b.n	8003dc4 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003c92:	693b      	ldr	r3, [r7, #16]
 8003c94:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	f040 8093 	bne.w	8003dc4 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003c9e:	697b      	ldr	r3, [r7, #20]
 8003ca0:	4a4b      	ldr	r2, [pc, #300]	; (8003dd0 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003ca2:	4293      	cmp	r3, r2
 8003ca4:	d90f      	bls.n	8003cc6 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003ca6:	693b      	ldr	r3, [r7, #16]
 8003ca8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d00a      	beq.n	8003cc6 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003cb0:	683b      	ldr	r3, [r7, #0]
 8003cb2:	015a      	lsls	r2, r3, #5
 8003cb4:	69bb      	ldr	r3, [r7, #24]
 8003cb6:	4413      	add	r3, r2
 8003cb8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003cbc:	461a      	mov	r2, r3
 8003cbe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003cc2:	6093      	str	r3, [r2, #8]
 8003cc4:	e07e      	b.n	8003dc4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8003cc6:	683a      	ldr	r2, [r7, #0]
 8003cc8:	4613      	mov	r3, r2
 8003cca:	00db      	lsls	r3, r3, #3
 8003ccc:	4413      	add	r3, r2
 8003cce:	009b      	lsls	r3, r3, #2
 8003cd0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003cd4:	687a      	ldr	r2, [r7, #4]
 8003cd6:	4413      	add	r3, r2
 8003cd8:	3304      	adds	r3, #4
 8003cda:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	69da      	ldr	r2, [r3, #28]
 8003ce0:	683b      	ldr	r3, [r7, #0]
 8003ce2:	0159      	lsls	r1, r3, #5
 8003ce4:	69bb      	ldr	r3, [r7, #24]
 8003ce6:	440b      	add	r3, r1
 8003ce8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003cec:	691b      	ldr	r3, [r3, #16]
 8003cee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003cf2:	1ad2      	subs	r2, r2, r3
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8003cf8:	683b      	ldr	r3, [r7, #0]
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d114      	bne.n	8003d28 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	699b      	ldr	r3, [r3, #24]
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d109      	bne.n	8003d1a <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	6818      	ldr	r0, [r3, #0]
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003d10:	461a      	mov	r2, r3
 8003d12:	2101      	movs	r1, #1
 8003d14:	f004 fdf0 	bl	80088f8 <USB_EP0_OutStart>
 8003d18:	e006      	b.n	8003d28 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	691a      	ldr	r2, [r3, #16]
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	6a1b      	ldr	r3, [r3, #32]
 8003d22:	441a      	add	r2, r3
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003d28:	683b      	ldr	r3, [r7, #0]
 8003d2a:	b2db      	uxtb	r3, r3
 8003d2c:	4619      	mov	r1, r3
 8003d2e:	6878      	ldr	r0, [r7, #4]
 8003d30:	f007 f8ce 	bl	800aed0 <HAL_PCD_DataOutStageCallback>
 8003d34:	e046      	b.n	8003dc4 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003d36:	697b      	ldr	r3, [r7, #20]
 8003d38:	4a26      	ldr	r2, [pc, #152]	; (8003dd4 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8003d3a:	4293      	cmp	r3, r2
 8003d3c:	d124      	bne.n	8003d88 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003d3e:	693b      	ldr	r3, [r7, #16]
 8003d40:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d00a      	beq.n	8003d5e <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003d48:	683b      	ldr	r3, [r7, #0]
 8003d4a:	015a      	lsls	r2, r3, #5
 8003d4c:	69bb      	ldr	r3, [r7, #24]
 8003d4e:	4413      	add	r3, r2
 8003d50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d54:	461a      	mov	r2, r3
 8003d56:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003d5a:	6093      	str	r3, [r2, #8]
 8003d5c:	e032      	b.n	8003dc4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003d5e:	693b      	ldr	r3, [r7, #16]
 8003d60:	f003 0320 	and.w	r3, r3, #32
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d008      	beq.n	8003d7a <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003d68:	683b      	ldr	r3, [r7, #0]
 8003d6a:	015a      	lsls	r2, r3, #5
 8003d6c:	69bb      	ldr	r3, [r7, #24]
 8003d6e:	4413      	add	r3, r2
 8003d70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d74:	461a      	mov	r2, r3
 8003d76:	2320      	movs	r3, #32
 8003d78:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003d7a:	683b      	ldr	r3, [r7, #0]
 8003d7c:	b2db      	uxtb	r3, r3
 8003d7e:	4619      	mov	r1, r3
 8003d80:	6878      	ldr	r0, [r7, #4]
 8003d82:	f007 f8a5 	bl	800aed0 <HAL_PCD_DataOutStageCallback>
 8003d86:	e01d      	b.n	8003dc4 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003d88:	683b      	ldr	r3, [r7, #0]
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d114      	bne.n	8003db8 <PCD_EP_OutXfrComplete_int+0x1b0>
 8003d8e:	6879      	ldr	r1, [r7, #4]
 8003d90:	683a      	ldr	r2, [r7, #0]
 8003d92:	4613      	mov	r3, r2
 8003d94:	00db      	lsls	r3, r3, #3
 8003d96:	4413      	add	r3, r2
 8003d98:	009b      	lsls	r3, r3, #2
 8003d9a:	440b      	add	r3, r1
 8003d9c:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d108      	bne.n	8003db8 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	6818      	ldr	r0, [r3, #0]
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003db0:	461a      	mov	r2, r3
 8003db2:	2100      	movs	r1, #0
 8003db4:	f004 fda0 	bl	80088f8 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003db8:	683b      	ldr	r3, [r7, #0]
 8003dba:	b2db      	uxtb	r3, r3
 8003dbc:	4619      	mov	r1, r3
 8003dbe:	6878      	ldr	r0, [r7, #4]
 8003dc0:	f007 f886 	bl	800aed0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003dc4:	2300      	movs	r3, #0
}
 8003dc6:	4618      	mov	r0, r3
 8003dc8:	3720      	adds	r7, #32
 8003dca:	46bd      	mov	sp, r7
 8003dcc:	bd80      	pop	{r7, pc}
 8003dce:	bf00      	nop
 8003dd0:	4f54300a 	.word	0x4f54300a
 8003dd4:	4f54310a 	.word	0x4f54310a

08003dd8 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003dd8:	b580      	push	{r7, lr}
 8003dda:	b086      	sub	sp, #24
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	6078      	str	r0, [r7, #4]
 8003de0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003de8:	697b      	ldr	r3, [r7, #20]
 8003dea:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003dec:	697b      	ldr	r3, [r7, #20]
 8003dee:	333c      	adds	r3, #60	; 0x3c
 8003df0:	3304      	adds	r3, #4
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003df6:	683b      	ldr	r3, [r7, #0]
 8003df8:	015a      	lsls	r2, r3, #5
 8003dfa:	693b      	ldr	r3, [r7, #16]
 8003dfc:	4413      	add	r3, r2
 8003dfe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e02:	689b      	ldr	r3, [r3, #8]
 8003e04:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	4a15      	ldr	r2, [pc, #84]	; (8003e60 <PCD_EP_OutSetupPacket_int+0x88>)
 8003e0a:	4293      	cmp	r3, r2
 8003e0c:	d90e      	bls.n	8003e2c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003e0e:	68bb      	ldr	r3, [r7, #8]
 8003e10:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d009      	beq.n	8003e2c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003e18:	683b      	ldr	r3, [r7, #0]
 8003e1a:	015a      	lsls	r2, r3, #5
 8003e1c:	693b      	ldr	r3, [r7, #16]
 8003e1e:	4413      	add	r3, r2
 8003e20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e24:	461a      	mov	r2, r3
 8003e26:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003e2a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003e2c:	6878      	ldr	r0, [r7, #4]
 8003e2e:	f007 f83d 	bl	800aeac <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	4a0a      	ldr	r2, [pc, #40]	; (8003e60 <PCD_EP_OutSetupPacket_int+0x88>)
 8003e36:	4293      	cmp	r3, r2
 8003e38:	d90c      	bls.n	8003e54 <PCD_EP_OutSetupPacket_int+0x7c>
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	691b      	ldr	r3, [r3, #16]
 8003e3e:	2b01      	cmp	r3, #1
 8003e40:	d108      	bne.n	8003e54 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	6818      	ldr	r0, [r3, #0]
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003e4c:	461a      	mov	r2, r3
 8003e4e:	2101      	movs	r1, #1
 8003e50:	f004 fd52 	bl	80088f8 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003e54:	2300      	movs	r3, #0
}
 8003e56:	4618      	mov	r0, r3
 8003e58:	3718      	adds	r7, #24
 8003e5a:	46bd      	mov	sp, r7
 8003e5c:	bd80      	pop	{r7, pc}
 8003e5e:	bf00      	nop
 8003e60:	4f54300a 	.word	0x4f54300a

08003e64 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003e64:	b480      	push	{r7}
 8003e66:	b085      	sub	sp, #20
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	6078      	str	r0, [r7, #4]
 8003e6c:	460b      	mov	r3, r1
 8003e6e:	70fb      	strb	r3, [r7, #3]
 8003e70:	4613      	mov	r3, r2
 8003e72:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e7a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003e7c:	78fb      	ldrb	r3, [r7, #3]
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d107      	bne.n	8003e92 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003e82:	883b      	ldrh	r3, [r7, #0]
 8003e84:	0419      	lsls	r1, r3, #16
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	68ba      	ldr	r2, [r7, #8]
 8003e8c:	430a      	orrs	r2, r1
 8003e8e:	629a      	str	r2, [r3, #40]	; 0x28
 8003e90:	e028      	b.n	8003ee4 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e98:	0c1b      	lsrs	r3, r3, #16
 8003e9a:	68ba      	ldr	r2, [r7, #8]
 8003e9c:	4413      	add	r3, r2
 8003e9e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003ea0:	2300      	movs	r3, #0
 8003ea2:	73fb      	strb	r3, [r7, #15]
 8003ea4:	e00d      	b.n	8003ec2 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681a      	ldr	r2, [r3, #0]
 8003eaa:	7bfb      	ldrb	r3, [r7, #15]
 8003eac:	3340      	adds	r3, #64	; 0x40
 8003eae:	009b      	lsls	r3, r3, #2
 8003eb0:	4413      	add	r3, r2
 8003eb2:	685b      	ldr	r3, [r3, #4]
 8003eb4:	0c1b      	lsrs	r3, r3, #16
 8003eb6:	68ba      	ldr	r2, [r7, #8]
 8003eb8:	4413      	add	r3, r2
 8003eba:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003ebc:	7bfb      	ldrb	r3, [r7, #15]
 8003ebe:	3301      	adds	r3, #1
 8003ec0:	73fb      	strb	r3, [r7, #15]
 8003ec2:	7bfa      	ldrb	r2, [r7, #15]
 8003ec4:	78fb      	ldrb	r3, [r7, #3]
 8003ec6:	3b01      	subs	r3, #1
 8003ec8:	429a      	cmp	r2, r3
 8003eca:	d3ec      	bcc.n	8003ea6 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003ecc:	883b      	ldrh	r3, [r7, #0]
 8003ece:	0418      	lsls	r0, r3, #16
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	6819      	ldr	r1, [r3, #0]
 8003ed4:	78fb      	ldrb	r3, [r7, #3]
 8003ed6:	3b01      	subs	r3, #1
 8003ed8:	68ba      	ldr	r2, [r7, #8]
 8003eda:	4302      	orrs	r2, r0
 8003edc:	3340      	adds	r3, #64	; 0x40
 8003ede:	009b      	lsls	r3, r3, #2
 8003ee0:	440b      	add	r3, r1
 8003ee2:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003ee4:	2300      	movs	r3, #0
}
 8003ee6:	4618      	mov	r0, r3
 8003ee8:	3714      	adds	r7, #20
 8003eea:	46bd      	mov	sp, r7
 8003eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef0:	4770      	bx	lr

08003ef2 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003ef2:	b480      	push	{r7}
 8003ef4:	b083      	sub	sp, #12
 8003ef6:	af00      	add	r7, sp, #0
 8003ef8:	6078      	str	r0, [r7, #4]
 8003efa:	460b      	mov	r3, r1
 8003efc:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	887a      	ldrh	r2, [r7, #2]
 8003f04:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003f06:	2300      	movs	r3, #0
}
 8003f08:	4618      	mov	r0, r3
 8003f0a:	370c      	adds	r7, #12
 8003f0c:	46bd      	mov	sp, r7
 8003f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f12:	4770      	bx	lr

08003f14 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003f14:	b480      	push	{r7}
 8003f16:	b083      	sub	sp, #12
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	6078      	str	r0, [r7, #4]
 8003f1c:	460b      	mov	r3, r1
 8003f1e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003f20:	bf00      	nop
 8003f22:	370c      	adds	r7, #12
 8003f24:	46bd      	mov	sp, r7
 8003f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f2a:	4770      	bx	lr

08003f2c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003f2c:	b580      	push	{r7, lr}
 8003f2e:	b086      	sub	sp, #24
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d101      	bne.n	8003f3e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003f3a:	2301      	movs	r3, #1
 8003f3c:	e267      	b.n	800440e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f003 0301 	and.w	r3, r3, #1
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d075      	beq.n	8004036 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003f4a:	4b88      	ldr	r3, [pc, #544]	; (800416c <HAL_RCC_OscConfig+0x240>)
 8003f4c:	689b      	ldr	r3, [r3, #8]
 8003f4e:	f003 030c 	and.w	r3, r3, #12
 8003f52:	2b04      	cmp	r3, #4
 8003f54:	d00c      	beq.n	8003f70 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003f56:	4b85      	ldr	r3, [pc, #532]	; (800416c <HAL_RCC_OscConfig+0x240>)
 8003f58:	689b      	ldr	r3, [r3, #8]
 8003f5a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003f5e:	2b08      	cmp	r3, #8
 8003f60:	d112      	bne.n	8003f88 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003f62:	4b82      	ldr	r3, [pc, #520]	; (800416c <HAL_RCC_OscConfig+0x240>)
 8003f64:	685b      	ldr	r3, [r3, #4]
 8003f66:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f6a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003f6e:	d10b      	bne.n	8003f88 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f70:	4b7e      	ldr	r3, [pc, #504]	; (800416c <HAL_RCC_OscConfig+0x240>)
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d05b      	beq.n	8004034 <HAL_RCC_OscConfig+0x108>
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	685b      	ldr	r3, [r3, #4]
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d157      	bne.n	8004034 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003f84:	2301      	movs	r3, #1
 8003f86:	e242      	b.n	800440e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	685b      	ldr	r3, [r3, #4]
 8003f8c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f90:	d106      	bne.n	8003fa0 <HAL_RCC_OscConfig+0x74>
 8003f92:	4b76      	ldr	r3, [pc, #472]	; (800416c <HAL_RCC_OscConfig+0x240>)
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	4a75      	ldr	r2, [pc, #468]	; (800416c <HAL_RCC_OscConfig+0x240>)
 8003f98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f9c:	6013      	str	r3, [r2, #0]
 8003f9e:	e01d      	b.n	8003fdc <HAL_RCC_OscConfig+0xb0>
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	685b      	ldr	r3, [r3, #4]
 8003fa4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003fa8:	d10c      	bne.n	8003fc4 <HAL_RCC_OscConfig+0x98>
 8003faa:	4b70      	ldr	r3, [pc, #448]	; (800416c <HAL_RCC_OscConfig+0x240>)
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	4a6f      	ldr	r2, [pc, #444]	; (800416c <HAL_RCC_OscConfig+0x240>)
 8003fb0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003fb4:	6013      	str	r3, [r2, #0]
 8003fb6:	4b6d      	ldr	r3, [pc, #436]	; (800416c <HAL_RCC_OscConfig+0x240>)
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	4a6c      	ldr	r2, [pc, #432]	; (800416c <HAL_RCC_OscConfig+0x240>)
 8003fbc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003fc0:	6013      	str	r3, [r2, #0]
 8003fc2:	e00b      	b.n	8003fdc <HAL_RCC_OscConfig+0xb0>
 8003fc4:	4b69      	ldr	r3, [pc, #420]	; (800416c <HAL_RCC_OscConfig+0x240>)
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	4a68      	ldr	r2, [pc, #416]	; (800416c <HAL_RCC_OscConfig+0x240>)
 8003fca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003fce:	6013      	str	r3, [r2, #0]
 8003fd0:	4b66      	ldr	r3, [pc, #408]	; (800416c <HAL_RCC_OscConfig+0x240>)
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	4a65      	ldr	r2, [pc, #404]	; (800416c <HAL_RCC_OscConfig+0x240>)
 8003fd6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003fda:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	685b      	ldr	r3, [r3, #4]
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d013      	beq.n	800400c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fe4:	f7fd fe12 	bl	8001c0c <HAL_GetTick>
 8003fe8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003fea:	e008      	b.n	8003ffe <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003fec:	f7fd fe0e 	bl	8001c0c <HAL_GetTick>
 8003ff0:	4602      	mov	r2, r0
 8003ff2:	693b      	ldr	r3, [r7, #16]
 8003ff4:	1ad3      	subs	r3, r2, r3
 8003ff6:	2b64      	cmp	r3, #100	; 0x64
 8003ff8:	d901      	bls.n	8003ffe <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003ffa:	2303      	movs	r3, #3
 8003ffc:	e207      	b.n	800440e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ffe:	4b5b      	ldr	r3, [pc, #364]	; (800416c <HAL_RCC_OscConfig+0x240>)
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004006:	2b00      	cmp	r3, #0
 8004008:	d0f0      	beq.n	8003fec <HAL_RCC_OscConfig+0xc0>
 800400a:	e014      	b.n	8004036 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800400c:	f7fd fdfe 	bl	8001c0c <HAL_GetTick>
 8004010:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004012:	e008      	b.n	8004026 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004014:	f7fd fdfa 	bl	8001c0c <HAL_GetTick>
 8004018:	4602      	mov	r2, r0
 800401a:	693b      	ldr	r3, [r7, #16]
 800401c:	1ad3      	subs	r3, r2, r3
 800401e:	2b64      	cmp	r3, #100	; 0x64
 8004020:	d901      	bls.n	8004026 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004022:	2303      	movs	r3, #3
 8004024:	e1f3      	b.n	800440e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004026:	4b51      	ldr	r3, [pc, #324]	; (800416c <HAL_RCC_OscConfig+0x240>)
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800402e:	2b00      	cmp	r3, #0
 8004030:	d1f0      	bne.n	8004014 <HAL_RCC_OscConfig+0xe8>
 8004032:	e000      	b.n	8004036 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004034:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f003 0302 	and.w	r3, r3, #2
 800403e:	2b00      	cmp	r3, #0
 8004040:	d063      	beq.n	800410a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004042:	4b4a      	ldr	r3, [pc, #296]	; (800416c <HAL_RCC_OscConfig+0x240>)
 8004044:	689b      	ldr	r3, [r3, #8]
 8004046:	f003 030c 	and.w	r3, r3, #12
 800404a:	2b00      	cmp	r3, #0
 800404c:	d00b      	beq.n	8004066 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800404e:	4b47      	ldr	r3, [pc, #284]	; (800416c <HAL_RCC_OscConfig+0x240>)
 8004050:	689b      	ldr	r3, [r3, #8]
 8004052:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004056:	2b08      	cmp	r3, #8
 8004058:	d11c      	bne.n	8004094 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800405a:	4b44      	ldr	r3, [pc, #272]	; (800416c <HAL_RCC_OscConfig+0x240>)
 800405c:	685b      	ldr	r3, [r3, #4]
 800405e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004062:	2b00      	cmp	r3, #0
 8004064:	d116      	bne.n	8004094 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004066:	4b41      	ldr	r3, [pc, #260]	; (800416c <HAL_RCC_OscConfig+0x240>)
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f003 0302 	and.w	r3, r3, #2
 800406e:	2b00      	cmp	r3, #0
 8004070:	d005      	beq.n	800407e <HAL_RCC_OscConfig+0x152>
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	68db      	ldr	r3, [r3, #12]
 8004076:	2b01      	cmp	r3, #1
 8004078:	d001      	beq.n	800407e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800407a:	2301      	movs	r3, #1
 800407c:	e1c7      	b.n	800440e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800407e:	4b3b      	ldr	r3, [pc, #236]	; (800416c <HAL_RCC_OscConfig+0x240>)
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	691b      	ldr	r3, [r3, #16]
 800408a:	00db      	lsls	r3, r3, #3
 800408c:	4937      	ldr	r1, [pc, #220]	; (800416c <HAL_RCC_OscConfig+0x240>)
 800408e:	4313      	orrs	r3, r2
 8004090:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004092:	e03a      	b.n	800410a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	68db      	ldr	r3, [r3, #12]
 8004098:	2b00      	cmp	r3, #0
 800409a:	d020      	beq.n	80040de <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800409c:	4b34      	ldr	r3, [pc, #208]	; (8004170 <HAL_RCC_OscConfig+0x244>)
 800409e:	2201      	movs	r2, #1
 80040a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040a2:	f7fd fdb3 	bl	8001c0c <HAL_GetTick>
 80040a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80040a8:	e008      	b.n	80040bc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80040aa:	f7fd fdaf 	bl	8001c0c <HAL_GetTick>
 80040ae:	4602      	mov	r2, r0
 80040b0:	693b      	ldr	r3, [r7, #16]
 80040b2:	1ad3      	subs	r3, r2, r3
 80040b4:	2b02      	cmp	r3, #2
 80040b6:	d901      	bls.n	80040bc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80040b8:	2303      	movs	r3, #3
 80040ba:	e1a8      	b.n	800440e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80040bc:	4b2b      	ldr	r3, [pc, #172]	; (800416c <HAL_RCC_OscConfig+0x240>)
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f003 0302 	and.w	r3, r3, #2
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d0f0      	beq.n	80040aa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80040c8:	4b28      	ldr	r3, [pc, #160]	; (800416c <HAL_RCC_OscConfig+0x240>)
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	691b      	ldr	r3, [r3, #16]
 80040d4:	00db      	lsls	r3, r3, #3
 80040d6:	4925      	ldr	r1, [pc, #148]	; (800416c <HAL_RCC_OscConfig+0x240>)
 80040d8:	4313      	orrs	r3, r2
 80040da:	600b      	str	r3, [r1, #0]
 80040dc:	e015      	b.n	800410a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80040de:	4b24      	ldr	r3, [pc, #144]	; (8004170 <HAL_RCC_OscConfig+0x244>)
 80040e0:	2200      	movs	r2, #0
 80040e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040e4:	f7fd fd92 	bl	8001c0c <HAL_GetTick>
 80040e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80040ea:	e008      	b.n	80040fe <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80040ec:	f7fd fd8e 	bl	8001c0c <HAL_GetTick>
 80040f0:	4602      	mov	r2, r0
 80040f2:	693b      	ldr	r3, [r7, #16]
 80040f4:	1ad3      	subs	r3, r2, r3
 80040f6:	2b02      	cmp	r3, #2
 80040f8:	d901      	bls.n	80040fe <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80040fa:	2303      	movs	r3, #3
 80040fc:	e187      	b.n	800440e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80040fe:	4b1b      	ldr	r3, [pc, #108]	; (800416c <HAL_RCC_OscConfig+0x240>)
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	f003 0302 	and.w	r3, r3, #2
 8004106:	2b00      	cmp	r3, #0
 8004108:	d1f0      	bne.n	80040ec <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f003 0308 	and.w	r3, r3, #8
 8004112:	2b00      	cmp	r3, #0
 8004114:	d036      	beq.n	8004184 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	695b      	ldr	r3, [r3, #20]
 800411a:	2b00      	cmp	r3, #0
 800411c:	d016      	beq.n	800414c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800411e:	4b15      	ldr	r3, [pc, #84]	; (8004174 <HAL_RCC_OscConfig+0x248>)
 8004120:	2201      	movs	r2, #1
 8004122:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004124:	f7fd fd72 	bl	8001c0c <HAL_GetTick>
 8004128:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800412a:	e008      	b.n	800413e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800412c:	f7fd fd6e 	bl	8001c0c <HAL_GetTick>
 8004130:	4602      	mov	r2, r0
 8004132:	693b      	ldr	r3, [r7, #16]
 8004134:	1ad3      	subs	r3, r2, r3
 8004136:	2b02      	cmp	r3, #2
 8004138:	d901      	bls.n	800413e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800413a:	2303      	movs	r3, #3
 800413c:	e167      	b.n	800440e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800413e:	4b0b      	ldr	r3, [pc, #44]	; (800416c <HAL_RCC_OscConfig+0x240>)
 8004140:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004142:	f003 0302 	and.w	r3, r3, #2
 8004146:	2b00      	cmp	r3, #0
 8004148:	d0f0      	beq.n	800412c <HAL_RCC_OscConfig+0x200>
 800414a:	e01b      	b.n	8004184 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800414c:	4b09      	ldr	r3, [pc, #36]	; (8004174 <HAL_RCC_OscConfig+0x248>)
 800414e:	2200      	movs	r2, #0
 8004150:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004152:	f7fd fd5b 	bl	8001c0c <HAL_GetTick>
 8004156:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004158:	e00e      	b.n	8004178 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800415a:	f7fd fd57 	bl	8001c0c <HAL_GetTick>
 800415e:	4602      	mov	r2, r0
 8004160:	693b      	ldr	r3, [r7, #16]
 8004162:	1ad3      	subs	r3, r2, r3
 8004164:	2b02      	cmp	r3, #2
 8004166:	d907      	bls.n	8004178 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004168:	2303      	movs	r3, #3
 800416a:	e150      	b.n	800440e <HAL_RCC_OscConfig+0x4e2>
 800416c:	40023800 	.word	0x40023800
 8004170:	42470000 	.word	0x42470000
 8004174:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004178:	4b88      	ldr	r3, [pc, #544]	; (800439c <HAL_RCC_OscConfig+0x470>)
 800417a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800417c:	f003 0302 	and.w	r3, r3, #2
 8004180:	2b00      	cmp	r3, #0
 8004182:	d1ea      	bne.n	800415a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f003 0304 	and.w	r3, r3, #4
 800418c:	2b00      	cmp	r3, #0
 800418e:	f000 8097 	beq.w	80042c0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004192:	2300      	movs	r3, #0
 8004194:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004196:	4b81      	ldr	r3, [pc, #516]	; (800439c <HAL_RCC_OscConfig+0x470>)
 8004198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800419a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d10f      	bne.n	80041c2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80041a2:	2300      	movs	r3, #0
 80041a4:	60bb      	str	r3, [r7, #8]
 80041a6:	4b7d      	ldr	r3, [pc, #500]	; (800439c <HAL_RCC_OscConfig+0x470>)
 80041a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041aa:	4a7c      	ldr	r2, [pc, #496]	; (800439c <HAL_RCC_OscConfig+0x470>)
 80041ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80041b0:	6413      	str	r3, [r2, #64]	; 0x40
 80041b2:	4b7a      	ldr	r3, [pc, #488]	; (800439c <HAL_RCC_OscConfig+0x470>)
 80041b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041ba:	60bb      	str	r3, [r7, #8]
 80041bc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80041be:	2301      	movs	r3, #1
 80041c0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041c2:	4b77      	ldr	r3, [pc, #476]	; (80043a0 <HAL_RCC_OscConfig+0x474>)
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d118      	bne.n	8004200 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80041ce:	4b74      	ldr	r3, [pc, #464]	; (80043a0 <HAL_RCC_OscConfig+0x474>)
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	4a73      	ldr	r2, [pc, #460]	; (80043a0 <HAL_RCC_OscConfig+0x474>)
 80041d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80041d8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80041da:	f7fd fd17 	bl	8001c0c <HAL_GetTick>
 80041de:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041e0:	e008      	b.n	80041f4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80041e2:	f7fd fd13 	bl	8001c0c <HAL_GetTick>
 80041e6:	4602      	mov	r2, r0
 80041e8:	693b      	ldr	r3, [r7, #16]
 80041ea:	1ad3      	subs	r3, r2, r3
 80041ec:	2b02      	cmp	r3, #2
 80041ee:	d901      	bls.n	80041f4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80041f0:	2303      	movs	r3, #3
 80041f2:	e10c      	b.n	800440e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041f4:	4b6a      	ldr	r3, [pc, #424]	; (80043a0 <HAL_RCC_OscConfig+0x474>)
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d0f0      	beq.n	80041e2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	689b      	ldr	r3, [r3, #8]
 8004204:	2b01      	cmp	r3, #1
 8004206:	d106      	bne.n	8004216 <HAL_RCC_OscConfig+0x2ea>
 8004208:	4b64      	ldr	r3, [pc, #400]	; (800439c <HAL_RCC_OscConfig+0x470>)
 800420a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800420c:	4a63      	ldr	r2, [pc, #396]	; (800439c <HAL_RCC_OscConfig+0x470>)
 800420e:	f043 0301 	orr.w	r3, r3, #1
 8004212:	6713      	str	r3, [r2, #112]	; 0x70
 8004214:	e01c      	b.n	8004250 <HAL_RCC_OscConfig+0x324>
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	689b      	ldr	r3, [r3, #8]
 800421a:	2b05      	cmp	r3, #5
 800421c:	d10c      	bne.n	8004238 <HAL_RCC_OscConfig+0x30c>
 800421e:	4b5f      	ldr	r3, [pc, #380]	; (800439c <HAL_RCC_OscConfig+0x470>)
 8004220:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004222:	4a5e      	ldr	r2, [pc, #376]	; (800439c <HAL_RCC_OscConfig+0x470>)
 8004224:	f043 0304 	orr.w	r3, r3, #4
 8004228:	6713      	str	r3, [r2, #112]	; 0x70
 800422a:	4b5c      	ldr	r3, [pc, #368]	; (800439c <HAL_RCC_OscConfig+0x470>)
 800422c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800422e:	4a5b      	ldr	r2, [pc, #364]	; (800439c <HAL_RCC_OscConfig+0x470>)
 8004230:	f043 0301 	orr.w	r3, r3, #1
 8004234:	6713      	str	r3, [r2, #112]	; 0x70
 8004236:	e00b      	b.n	8004250 <HAL_RCC_OscConfig+0x324>
 8004238:	4b58      	ldr	r3, [pc, #352]	; (800439c <HAL_RCC_OscConfig+0x470>)
 800423a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800423c:	4a57      	ldr	r2, [pc, #348]	; (800439c <HAL_RCC_OscConfig+0x470>)
 800423e:	f023 0301 	bic.w	r3, r3, #1
 8004242:	6713      	str	r3, [r2, #112]	; 0x70
 8004244:	4b55      	ldr	r3, [pc, #340]	; (800439c <HAL_RCC_OscConfig+0x470>)
 8004246:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004248:	4a54      	ldr	r2, [pc, #336]	; (800439c <HAL_RCC_OscConfig+0x470>)
 800424a:	f023 0304 	bic.w	r3, r3, #4
 800424e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	689b      	ldr	r3, [r3, #8]
 8004254:	2b00      	cmp	r3, #0
 8004256:	d015      	beq.n	8004284 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004258:	f7fd fcd8 	bl	8001c0c <HAL_GetTick>
 800425c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800425e:	e00a      	b.n	8004276 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004260:	f7fd fcd4 	bl	8001c0c <HAL_GetTick>
 8004264:	4602      	mov	r2, r0
 8004266:	693b      	ldr	r3, [r7, #16]
 8004268:	1ad3      	subs	r3, r2, r3
 800426a:	f241 3288 	movw	r2, #5000	; 0x1388
 800426e:	4293      	cmp	r3, r2
 8004270:	d901      	bls.n	8004276 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004272:	2303      	movs	r3, #3
 8004274:	e0cb      	b.n	800440e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004276:	4b49      	ldr	r3, [pc, #292]	; (800439c <HAL_RCC_OscConfig+0x470>)
 8004278:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800427a:	f003 0302 	and.w	r3, r3, #2
 800427e:	2b00      	cmp	r3, #0
 8004280:	d0ee      	beq.n	8004260 <HAL_RCC_OscConfig+0x334>
 8004282:	e014      	b.n	80042ae <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004284:	f7fd fcc2 	bl	8001c0c <HAL_GetTick>
 8004288:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800428a:	e00a      	b.n	80042a2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800428c:	f7fd fcbe 	bl	8001c0c <HAL_GetTick>
 8004290:	4602      	mov	r2, r0
 8004292:	693b      	ldr	r3, [r7, #16]
 8004294:	1ad3      	subs	r3, r2, r3
 8004296:	f241 3288 	movw	r2, #5000	; 0x1388
 800429a:	4293      	cmp	r3, r2
 800429c:	d901      	bls.n	80042a2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800429e:	2303      	movs	r3, #3
 80042a0:	e0b5      	b.n	800440e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80042a2:	4b3e      	ldr	r3, [pc, #248]	; (800439c <HAL_RCC_OscConfig+0x470>)
 80042a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042a6:	f003 0302 	and.w	r3, r3, #2
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d1ee      	bne.n	800428c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80042ae:	7dfb      	ldrb	r3, [r7, #23]
 80042b0:	2b01      	cmp	r3, #1
 80042b2:	d105      	bne.n	80042c0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80042b4:	4b39      	ldr	r3, [pc, #228]	; (800439c <HAL_RCC_OscConfig+0x470>)
 80042b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042b8:	4a38      	ldr	r2, [pc, #224]	; (800439c <HAL_RCC_OscConfig+0x470>)
 80042ba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80042be:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	699b      	ldr	r3, [r3, #24]
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	f000 80a1 	beq.w	800440c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80042ca:	4b34      	ldr	r3, [pc, #208]	; (800439c <HAL_RCC_OscConfig+0x470>)
 80042cc:	689b      	ldr	r3, [r3, #8]
 80042ce:	f003 030c 	and.w	r3, r3, #12
 80042d2:	2b08      	cmp	r3, #8
 80042d4:	d05c      	beq.n	8004390 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	699b      	ldr	r3, [r3, #24]
 80042da:	2b02      	cmp	r3, #2
 80042dc:	d141      	bne.n	8004362 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80042de:	4b31      	ldr	r3, [pc, #196]	; (80043a4 <HAL_RCC_OscConfig+0x478>)
 80042e0:	2200      	movs	r2, #0
 80042e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042e4:	f7fd fc92 	bl	8001c0c <HAL_GetTick>
 80042e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80042ea:	e008      	b.n	80042fe <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80042ec:	f7fd fc8e 	bl	8001c0c <HAL_GetTick>
 80042f0:	4602      	mov	r2, r0
 80042f2:	693b      	ldr	r3, [r7, #16]
 80042f4:	1ad3      	subs	r3, r2, r3
 80042f6:	2b02      	cmp	r3, #2
 80042f8:	d901      	bls.n	80042fe <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80042fa:	2303      	movs	r3, #3
 80042fc:	e087      	b.n	800440e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80042fe:	4b27      	ldr	r3, [pc, #156]	; (800439c <HAL_RCC_OscConfig+0x470>)
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004306:	2b00      	cmp	r3, #0
 8004308:	d1f0      	bne.n	80042ec <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	69da      	ldr	r2, [r3, #28]
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	6a1b      	ldr	r3, [r3, #32]
 8004312:	431a      	orrs	r2, r3
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004318:	019b      	lsls	r3, r3, #6
 800431a:	431a      	orrs	r2, r3
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004320:	085b      	lsrs	r3, r3, #1
 8004322:	3b01      	subs	r3, #1
 8004324:	041b      	lsls	r3, r3, #16
 8004326:	431a      	orrs	r2, r3
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800432c:	061b      	lsls	r3, r3, #24
 800432e:	491b      	ldr	r1, [pc, #108]	; (800439c <HAL_RCC_OscConfig+0x470>)
 8004330:	4313      	orrs	r3, r2
 8004332:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004334:	4b1b      	ldr	r3, [pc, #108]	; (80043a4 <HAL_RCC_OscConfig+0x478>)
 8004336:	2201      	movs	r2, #1
 8004338:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800433a:	f7fd fc67 	bl	8001c0c <HAL_GetTick>
 800433e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004340:	e008      	b.n	8004354 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004342:	f7fd fc63 	bl	8001c0c <HAL_GetTick>
 8004346:	4602      	mov	r2, r0
 8004348:	693b      	ldr	r3, [r7, #16]
 800434a:	1ad3      	subs	r3, r2, r3
 800434c:	2b02      	cmp	r3, #2
 800434e:	d901      	bls.n	8004354 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004350:	2303      	movs	r3, #3
 8004352:	e05c      	b.n	800440e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004354:	4b11      	ldr	r3, [pc, #68]	; (800439c <HAL_RCC_OscConfig+0x470>)
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800435c:	2b00      	cmp	r3, #0
 800435e:	d0f0      	beq.n	8004342 <HAL_RCC_OscConfig+0x416>
 8004360:	e054      	b.n	800440c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004362:	4b10      	ldr	r3, [pc, #64]	; (80043a4 <HAL_RCC_OscConfig+0x478>)
 8004364:	2200      	movs	r2, #0
 8004366:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004368:	f7fd fc50 	bl	8001c0c <HAL_GetTick>
 800436c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800436e:	e008      	b.n	8004382 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004370:	f7fd fc4c 	bl	8001c0c <HAL_GetTick>
 8004374:	4602      	mov	r2, r0
 8004376:	693b      	ldr	r3, [r7, #16]
 8004378:	1ad3      	subs	r3, r2, r3
 800437a:	2b02      	cmp	r3, #2
 800437c:	d901      	bls.n	8004382 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800437e:	2303      	movs	r3, #3
 8004380:	e045      	b.n	800440e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004382:	4b06      	ldr	r3, [pc, #24]	; (800439c <HAL_RCC_OscConfig+0x470>)
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800438a:	2b00      	cmp	r3, #0
 800438c:	d1f0      	bne.n	8004370 <HAL_RCC_OscConfig+0x444>
 800438e:	e03d      	b.n	800440c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	699b      	ldr	r3, [r3, #24]
 8004394:	2b01      	cmp	r3, #1
 8004396:	d107      	bne.n	80043a8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004398:	2301      	movs	r3, #1
 800439a:	e038      	b.n	800440e <HAL_RCC_OscConfig+0x4e2>
 800439c:	40023800 	.word	0x40023800
 80043a0:	40007000 	.word	0x40007000
 80043a4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80043a8:	4b1b      	ldr	r3, [pc, #108]	; (8004418 <HAL_RCC_OscConfig+0x4ec>)
 80043aa:	685b      	ldr	r3, [r3, #4]
 80043ac:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	699b      	ldr	r3, [r3, #24]
 80043b2:	2b01      	cmp	r3, #1
 80043b4:	d028      	beq.n	8004408 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80043c0:	429a      	cmp	r2, r3
 80043c2:	d121      	bne.n	8004408 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80043ce:	429a      	cmp	r2, r3
 80043d0:	d11a      	bne.n	8004408 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80043d2:	68fa      	ldr	r2, [r7, #12]
 80043d4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80043d8:	4013      	ands	r3, r2
 80043da:	687a      	ldr	r2, [r7, #4]
 80043dc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80043de:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80043e0:	4293      	cmp	r3, r2
 80043e2:	d111      	bne.n	8004408 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043ee:	085b      	lsrs	r3, r3, #1
 80043f0:	3b01      	subs	r3, #1
 80043f2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80043f4:	429a      	cmp	r2, r3
 80043f6:	d107      	bne.n	8004408 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004402:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004404:	429a      	cmp	r2, r3
 8004406:	d001      	beq.n	800440c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004408:	2301      	movs	r3, #1
 800440a:	e000      	b.n	800440e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800440c:	2300      	movs	r3, #0
}
 800440e:	4618      	mov	r0, r3
 8004410:	3718      	adds	r7, #24
 8004412:	46bd      	mov	sp, r7
 8004414:	bd80      	pop	{r7, pc}
 8004416:	bf00      	nop
 8004418:	40023800 	.word	0x40023800

0800441c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800441c:	b580      	push	{r7, lr}
 800441e:	b084      	sub	sp, #16
 8004420:	af00      	add	r7, sp, #0
 8004422:	6078      	str	r0, [r7, #4]
 8004424:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	2b00      	cmp	r3, #0
 800442a:	d101      	bne.n	8004430 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800442c:	2301      	movs	r3, #1
 800442e:	e0cc      	b.n	80045ca <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004430:	4b68      	ldr	r3, [pc, #416]	; (80045d4 <HAL_RCC_ClockConfig+0x1b8>)
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f003 0307 	and.w	r3, r3, #7
 8004438:	683a      	ldr	r2, [r7, #0]
 800443a:	429a      	cmp	r2, r3
 800443c:	d90c      	bls.n	8004458 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800443e:	4b65      	ldr	r3, [pc, #404]	; (80045d4 <HAL_RCC_ClockConfig+0x1b8>)
 8004440:	683a      	ldr	r2, [r7, #0]
 8004442:	b2d2      	uxtb	r2, r2
 8004444:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004446:	4b63      	ldr	r3, [pc, #396]	; (80045d4 <HAL_RCC_ClockConfig+0x1b8>)
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f003 0307 	and.w	r3, r3, #7
 800444e:	683a      	ldr	r2, [r7, #0]
 8004450:	429a      	cmp	r2, r3
 8004452:	d001      	beq.n	8004458 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004454:	2301      	movs	r3, #1
 8004456:	e0b8      	b.n	80045ca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	f003 0302 	and.w	r3, r3, #2
 8004460:	2b00      	cmp	r3, #0
 8004462:	d020      	beq.n	80044a6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	f003 0304 	and.w	r3, r3, #4
 800446c:	2b00      	cmp	r3, #0
 800446e:	d005      	beq.n	800447c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004470:	4b59      	ldr	r3, [pc, #356]	; (80045d8 <HAL_RCC_ClockConfig+0x1bc>)
 8004472:	689b      	ldr	r3, [r3, #8]
 8004474:	4a58      	ldr	r2, [pc, #352]	; (80045d8 <HAL_RCC_ClockConfig+0x1bc>)
 8004476:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800447a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f003 0308 	and.w	r3, r3, #8
 8004484:	2b00      	cmp	r3, #0
 8004486:	d005      	beq.n	8004494 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004488:	4b53      	ldr	r3, [pc, #332]	; (80045d8 <HAL_RCC_ClockConfig+0x1bc>)
 800448a:	689b      	ldr	r3, [r3, #8]
 800448c:	4a52      	ldr	r2, [pc, #328]	; (80045d8 <HAL_RCC_ClockConfig+0x1bc>)
 800448e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004492:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004494:	4b50      	ldr	r3, [pc, #320]	; (80045d8 <HAL_RCC_ClockConfig+0x1bc>)
 8004496:	689b      	ldr	r3, [r3, #8]
 8004498:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	689b      	ldr	r3, [r3, #8]
 80044a0:	494d      	ldr	r1, [pc, #308]	; (80045d8 <HAL_RCC_ClockConfig+0x1bc>)
 80044a2:	4313      	orrs	r3, r2
 80044a4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	f003 0301 	and.w	r3, r3, #1
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d044      	beq.n	800453c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	685b      	ldr	r3, [r3, #4]
 80044b6:	2b01      	cmp	r3, #1
 80044b8:	d107      	bne.n	80044ca <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80044ba:	4b47      	ldr	r3, [pc, #284]	; (80045d8 <HAL_RCC_ClockConfig+0x1bc>)
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d119      	bne.n	80044fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80044c6:	2301      	movs	r3, #1
 80044c8:	e07f      	b.n	80045ca <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	685b      	ldr	r3, [r3, #4]
 80044ce:	2b02      	cmp	r3, #2
 80044d0:	d003      	beq.n	80044da <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80044d6:	2b03      	cmp	r3, #3
 80044d8:	d107      	bne.n	80044ea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80044da:	4b3f      	ldr	r3, [pc, #252]	; (80045d8 <HAL_RCC_ClockConfig+0x1bc>)
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d109      	bne.n	80044fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80044e6:	2301      	movs	r3, #1
 80044e8:	e06f      	b.n	80045ca <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80044ea:	4b3b      	ldr	r3, [pc, #236]	; (80045d8 <HAL_RCC_ClockConfig+0x1bc>)
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f003 0302 	and.w	r3, r3, #2
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d101      	bne.n	80044fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80044f6:	2301      	movs	r3, #1
 80044f8:	e067      	b.n	80045ca <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80044fa:	4b37      	ldr	r3, [pc, #220]	; (80045d8 <HAL_RCC_ClockConfig+0x1bc>)
 80044fc:	689b      	ldr	r3, [r3, #8]
 80044fe:	f023 0203 	bic.w	r2, r3, #3
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	685b      	ldr	r3, [r3, #4]
 8004506:	4934      	ldr	r1, [pc, #208]	; (80045d8 <HAL_RCC_ClockConfig+0x1bc>)
 8004508:	4313      	orrs	r3, r2
 800450a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800450c:	f7fd fb7e 	bl	8001c0c <HAL_GetTick>
 8004510:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004512:	e00a      	b.n	800452a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004514:	f7fd fb7a 	bl	8001c0c <HAL_GetTick>
 8004518:	4602      	mov	r2, r0
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	1ad3      	subs	r3, r2, r3
 800451e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004522:	4293      	cmp	r3, r2
 8004524:	d901      	bls.n	800452a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004526:	2303      	movs	r3, #3
 8004528:	e04f      	b.n	80045ca <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800452a:	4b2b      	ldr	r3, [pc, #172]	; (80045d8 <HAL_RCC_ClockConfig+0x1bc>)
 800452c:	689b      	ldr	r3, [r3, #8]
 800452e:	f003 020c 	and.w	r2, r3, #12
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	685b      	ldr	r3, [r3, #4]
 8004536:	009b      	lsls	r3, r3, #2
 8004538:	429a      	cmp	r2, r3
 800453a:	d1eb      	bne.n	8004514 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800453c:	4b25      	ldr	r3, [pc, #148]	; (80045d4 <HAL_RCC_ClockConfig+0x1b8>)
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	f003 0307 	and.w	r3, r3, #7
 8004544:	683a      	ldr	r2, [r7, #0]
 8004546:	429a      	cmp	r2, r3
 8004548:	d20c      	bcs.n	8004564 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800454a:	4b22      	ldr	r3, [pc, #136]	; (80045d4 <HAL_RCC_ClockConfig+0x1b8>)
 800454c:	683a      	ldr	r2, [r7, #0]
 800454e:	b2d2      	uxtb	r2, r2
 8004550:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004552:	4b20      	ldr	r3, [pc, #128]	; (80045d4 <HAL_RCC_ClockConfig+0x1b8>)
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	f003 0307 	and.w	r3, r3, #7
 800455a:	683a      	ldr	r2, [r7, #0]
 800455c:	429a      	cmp	r2, r3
 800455e:	d001      	beq.n	8004564 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004560:	2301      	movs	r3, #1
 8004562:	e032      	b.n	80045ca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	f003 0304 	and.w	r3, r3, #4
 800456c:	2b00      	cmp	r3, #0
 800456e:	d008      	beq.n	8004582 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004570:	4b19      	ldr	r3, [pc, #100]	; (80045d8 <HAL_RCC_ClockConfig+0x1bc>)
 8004572:	689b      	ldr	r3, [r3, #8]
 8004574:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	68db      	ldr	r3, [r3, #12]
 800457c:	4916      	ldr	r1, [pc, #88]	; (80045d8 <HAL_RCC_ClockConfig+0x1bc>)
 800457e:	4313      	orrs	r3, r2
 8004580:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f003 0308 	and.w	r3, r3, #8
 800458a:	2b00      	cmp	r3, #0
 800458c:	d009      	beq.n	80045a2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800458e:	4b12      	ldr	r3, [pc, #72]	; (80045d8 <HAL_RCC_ClockConfig+0x1bc>)
 8004590:	689b      	ldr	r3, [r3, #8]
 8004592:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	691b      	ldr	r3, [r3, #16]
 800459a:	00db      	lsls	r3, r3, #3
 800459c:	490e      	ldr	r1, [pc, #56]	; (80045d8 <HAL_RCC_ClockConfig+0x1bc>)
 800459e:	4313      	orrs	r3, r2
 80045a0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80045a2:	f000 f821 	bl	80045e8 <HAL_RCC_GetSysClockFreq>
 80045a6:	4602      	mov	r2, r0
 80045a8:	4b0b      	ldr	r3, [pc, #44]	; (80045d8 <HAL_RCC_ClockConfig+0x1bc>)
 80045aa:	689b      	ldr	r3, [r3, #8]
 80045ac:	091b      	lsrs	r3, r3, #4
 80045ae:	f003 030f 	and.w	r3, r3, #15
 80045b2:	490a      	ldr	r1, [pc, #40]	; (80045dc <HAL_RCC_ClockConfig+0x1c0>)
 80045b4:	5ccb      	ldrb	r3, [r1, r3]
 80045b6:	fa22 f303 	lsr.w	r3, r2, r3
 80045ba:	4a09      	ldr	r2, [pc, #36]	; (80045e0 <HAL_RCC_ClockConfig+0x1c4>)
 80045bc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80045be:	4b09      	ldr	r3, [pc, #36]	; (80045e4 <HAL_RCC_ClockConfig+0x1c8>)
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	4618      	mov	r0, r3
 80045c4:	f7fd fade 	bl	8001b84 <HAL_InitTick>

  return HAL_OK;
 80045c8:	2300      	movs	r3, #0
}
 80045ca:	4618      	mov	r0, r3
 80045cc:	3710      	adds	r7, #16
 80045ce:	46bd      	mov	sp, r7
 80045d0:	bd80      	pop	{r7, pc}
 80045d2:	bf00      	nop
 80045d4:	40023c00 	.word	0x40023c00
 80045d8:	40023800 	.word	0x40023800
 80045dc:	0800bddc 	.word	0x0800bddc
 80045e0:	20000010 	.word	0x20000010
 80045e4:	20000014 	.word	0x20000014

080045e8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80045e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80045ec:	b090      	sub	sp, #64	; 0x40
 80045ee:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80045f0:	2300      	movs	r3, #0
 80045f2:	637b      	str	r3, [r7, #52]	; 0x34
 80045f4:	2300      	movs	r3, #0
 80045f6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80045f8:	2300      	movs	r3, #0
 80045fa:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80045fc:	2300      	movs	r3, #0
 80045fe:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004600:	4b59      	ldr	r3, [pc, #356]	; (8004768 <HAL_RCC_GetSysClockFreq+0x180>)
 8004602:	689b      	ldr	r3, [r3, #8]
 8004604:	f003 030c 	and.w	r3, r3, #12
 8004608:	2b08      	cmp	r3, #8
 800460a:	d00d      	beq.n	8004628 <HAL_RCC_GetSysClockFreq+0x40>
 800460c:	2b08      	cmp	r3, #8
 800460e:	f200 80a1 	bhi.w	8004754 <HAL_RCC_GetSysClockFreq+0x16c>
 8004612:	2b00      	cmp	r3, #0
 8004614:	d002      	beq.n	800461c <HAL_RCC_GetSysClockFreq+0x34>
 8004616:	2b04      	cmp	r3, #4
 8004618:	d003      	beq.n	8004622 <HAL_RCC_GetSysClockFreq+0x3a>
 800461a:	e09b      	b.n	8004754 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800461c:	4b53      	ldr	r3, [pc, #332]	; (800476c <HAL_RCC_GetSysClockFreq+0x184>)
 800461e:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8004620:	e09b      	b.n	800475a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004622:	4b53      	ldr	r3, [pc, #332]	; (8004770 <HAL_RCC_GetSysClockFreq+0x188>)
 8004624:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004626:	e098      	b.n	800475a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004628:	4b4f      	ldr	r3, [pc, #316]	; (8004768 <HAL_RCC_GetSysClockFreq+0x180>)
 800462a:	685b      	ldr	r3, [r3, #4]
 800462c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004630:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004632:	4b4d      	ldr	r3, [pc, #308]	; (8004768 <HAL_RCC_GetSysClockFreq+0x180>)
 8004634:	685b      	ldr	r3, [r3, #4]
 8004636:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800463a:	2b00      	cmp	r3, #0
 800463c:	d028      	beq.n	8004690 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800463e:	4b4a      	ldr	r3, [pc, #296]	; (8004768 <HAL_RCC_GetSysClockFreq+0x180>)
 8004640:	685b      	ldr	r3, [r3, #4]
 8004642:	099b      	lsrs	r3, r3, #6
 8004644:	2200      	movs	r2, #0
 8004646:	623b      	str	r3, [r7, #32]
 8004648:	627a      	str	r2, [r7, #36]	; 0x24
 800464a:	6a3b      	ldr	r3, [r7, #32]
 800464c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004650:	2100      	movs	r1, #0
 8004652:	4b47      	ldr	r3, [pc, #284]	; (8004770 <HAL_RCC_GetSysClockFreq+0x188>)
 8004654:	fb03 f201 	mul.w	r2, r3, r1
 8004658:	2300      	movs	r3, #0
 800465a:	fb00 f303 	mul.w	r3, r0, r3
 800465e:	4413      	add	r3, r2
 8004660:	4a43      	ldr	r2, [pc, #268]	; (8004770 <HAL_RCC_GetSysClockFreq+0x188>)
 8004662:	fba0 1202 	umull	r1, r2, r0, r2
 8004666:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004668:	460a      	mov	r2, r1
 800466a:	62ba      	str	r2, [r7, #40]	; 0x28
 800466c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800466e:	4413      	add	r3, r2
 8004670:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004672:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004674:	2200      	movs	r2, #0
 8004676:	61bb      	str	r3, [r7, #24]
 8004678:	61fa      	str	r2, [r7, #28]
 800467a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800467e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8004682:	f7fb fda1 	bl	80001c8 <__aeabi_uldivmod>
 8004686:	4602      	mov	r2, r0
 8004688:	460b      	mov	r3, r1
 800468a:	4613      	mov	r3, r2
 800468c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800468e:	e053      	b.n	8004738 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004690:	4b35      	ldr	r3, [pc, #212]	; (8004768 <HAL_RCC_GetSysClockFreq+0x180>)
 8004692:	685b      	ldr	r3, [r3, #4]
 8004694:	099b      	lsrs	r3, r3, #6
 8004696:	2200      	movs	r2, #0
 8004698:	613b      	str	r3, [r7, #16]
 800469a:	617a      	str	r2, [r7, #20]
 800469c:	693b      	ldr	r3, [r7, #16]
 800469e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80046a2:	f04f 0b00 	mov.w	fp, #0
 80046a6:	4652      	mov	r2, sl
 80046a8:	465b      	mov	r3, fp
 80046aa:	f04f 0000 	mov.w	r0, #0
 80046ae:	f04f 0100 	mov.w	r1, #0
 80046b2:	0159      	lsls	r1, r3, #5
 80046b4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80046b8:	0150      	lsls	r0, r2, #5
 80046ba:	4602      	mov	r2, r0
 80046bc:	460b      	mov	r3, r1
 80046be:	ebb2 080a 	subs.w	r8, r2, sl
 80046c2:	eb63 090b 	sbc.w	r9, r3, fp
 80046c6:	f04f 0200 	mov.w	r2, #0
 80046ca:	f04f 0300 	mov.w	r3, #0
 80046ce:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80046d2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80046d6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80046da:	ebb2 0408 	subs.w	r4, r2, r8
 80046de:	eb63 0509 	sbc.w	r5, r3, r9
 80046e2:	f04f 0200 	mov.w	r2, #0
 80046e6:	f04f 0300 	mov.w	r3, #0
 80046ea:	00eb      	lsls	r3, r5, #3
 80046ec:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80046f0:	00e2      	lsls	r2, r4, #3
 80046f2:	4614      	mov	r4, r2
 80046f4:	461d      	mov	r5, r3
 80046f6:	eb14 030a 	adds.w	r3, r4, sl
 80046fa:	603b      	str	r3, [r7, #0]
 80046fc:	eb45 030b 	adc.w	r3, r5, fp
 8004700:	607b      	str	r3, [r7, #4]
 8004702:	f04f 0200 	mov.w	r2, #0
 8004706:	f04f 0300 	mov.w	r3, #0
 800470a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800470e:	4629      	mov	r1, r5
 8004710:	028b      	lsls	r3, r1, #10
 8004712:	4621      	mov	r1, r4
 8004714:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004718:	4621      	mov	r1, r4
 800471a:	028a      	lsls	r2, r1, #10
 800471c:	4610      	mov	r0, r2
 800471e:	4619      	mov	r1, r3
 8004720:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004722:	2200      	movs	r2, #0
 8004724:	60bb      	str	r3, [r7, #8]
 8004726:	60fa      	str	r2, [r7, #12]
 8004728:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800472c:	f7fb fd4c 	bl	80001c8 <__aeabi_uldivmod>
 8004730:	4602      	mov	r2, r0
 8004732:	460b      	mov	r3, r1
 8004734:	4613      	mov	r3, r2
 8004736:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004738:	4b0b      	ldr	r3, [pc, #44]	; (8004768 <HAL_RCC_GetSysClockFreq+0x180>)
 800473a:	685b      	ldr	r3, [r3, #4]
 800473c:	0c1b      	lsrs	r3, r3, #16
 800473e:	f003 0303 	and.w	r3, r3, #3
 8004742:	3301      	adds	r3, #1
 8004744:	005b      	lsls	r3, r3, #1
 8004746:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8004748:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800474a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800474c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004750:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004752:	e002      	b.n	800475a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004754:	4b05      	ldr	r3, [pc, #20]	; (800476c <HAL_RCC_GetSysClockFreq+0x184>)
 8004756:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004758:	bf00      	nop
    }
  }
  return sysclockfreq;
 800475a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 800475c:	4618      	mov	r0, r3
 800475e:	3740      	adds	r7, #64	; 0x40
 8004760:	46bd      	mov	sp, r7
 8004762:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004766:	bf00      	nop
 8004768:	40023800 	.word	0x40023800
 800476c:	00f42400 	.word	0x00f42400
 8004770:	016e3600 	.word	0x016e3600

08004774 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004774:	b480      	push	{r7}
 8004776:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004778:	4b03      	ldr	r3, [pc, #12]	; (8004788 <HAL_RCC_GetHCLKFreq+0x14>)
 800477a:	681b      	ldr	r3, [r3, #0]
}
 800477c:	4618      	mov	r0, r3
 800477e:	46bd      	mov	sp, r7
 8004780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004784:	4770      	bx	lr
 8004786:	bf00      	nop
 8004788:	20000010 	.word	0x20000010

0800478c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800478c:	b580      	push	{r7, lr}
 800478e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004790:	f7ff fff0 	bl	8004774 <HAL_RCC_GetHCLKFreq>
 8004794:	4602      	mov	r2, r0
 8004796:	4b05      	ldr	r3, [pc, #20]	; (80047ac <HAL_RCC_GetPCLK1Freq+0x20>)
 8004798:	689b      	ldr	r3, [r3, #8]
 800479a:	0a9b      	lsrs	r3, r3, #10
 800479c:	f003 0307 	and.w	r3, r3, #7
 80047a0:	4903      	ldr	r1, [pc, #12]	; (80047b0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80047a2:	5ccb      	ldrb	r3, [r1, r3]
 80047a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80047a8:	4618      	mov	r0, r3
 80047aa:	bd80      	pop	{r7, pc}
 80047ac:	40023800 	.word	0x40023800
 80047b0:	0800bdec 	.word	0x0800bdec

080047b4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80047b4:	b580      	push	{r7, lr}
 80047b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80047b8:	f7ff ffdc 	bl	8004774 <HAL_RCC_GetHCLKFreq>
 80047bc:	4602      	mov	r2, r0
 80047be:	4b05      	ldr	r3, [pc, #20]	; (80047d4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80047c0:	689b      	ldr	r3, [r3, #8]
 80047c2:	0b5b      	lsrs	r3, r3, #13
 80047c4:	f003 0307 	and.w	r3, r3, #7
 80047c8:	4903      	ldr	r1, [pc, #12]	; (80047d8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80047ca:	5ccb      	ldrb	r3, [r1, r3]
 80047cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80047d0:	4618      	mov	r0, r3
 80047d2:	bd80      	pop	{r7, pc}
 80047d4:	40023800 	.word	0x40023800
 80047d8:	0800bdec 	.word	0x0800bdec

080047dc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80047dc:	b580      	push	{r7, lr}
 80047de:	b082      	sub	sp, #8
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d101      	bne.n	80047ee <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80047ea:	2301      	movs	r3, #1
 80047ec:	e07b      	b.n	80048e6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d108      	bne.n	8004808 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	685b      	ldr	r3, [r3, #4]
 80047fa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80047fe:	d009      	beq.n	8004814 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	2200      	movs	r2, #0
 8004804:	61da      	str	r2, [r3, #28]
 8004806:	e005      	b.n	8004814 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	2200      	movs	r2, #0
 800480c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	2200      	movs	r2, #0
 8004812:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	2200      	movs	r2, #0
 8004818:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004820:	b2db      	uxtb	r3, r3
 8004822:	2b00      	cmp	r3, #0
 8004824:	d106      	bne.n	8004834 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	2200      	movs	r2, #0
 800482a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800482e:	6878      	ldr	r0, [r7, #4]
 8004830:	f7fc ff78 	bl	8001724 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	2202      	movs	r2, #2
 8004838:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	681a      	ldr	r2, [r3, #0]
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800484a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	685b      	ldr	r3, [r3, #4]
 8004850:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	689b      	ldr	r3, [r3, #8]
 8004858:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800485c:	431a      	orrs	r2, r3
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	68db      	ldr	r3, [r3, #12]
 8004862:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004866:	431a      	orrs	r2, r3
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	691b      	ldr	r3, [r3, #16]
 800486c:	f003 0302 	and.w	r3, r3, #2
 8004870:	431a      	orrs	r2, r3
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	695b      	ldr	r3, [r3, #20]
 8004876:	f003 0301 	and.w	r3, r3, #1
 800487a:	431a      	orrs	r2, r3
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	699b      	ldr	r3, [r3, #24]
 8004880:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004884:	431a      	orrs	r2, r3
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	69db      	ldr	r3, [r3, #28]
 800488a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800488e:	431a      	orrs	r2, r3
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	6a1b      	ldr	r3, [r3, #32]
 8004894:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004898:	ea42 0103 	orr.w	r1, r2, r3
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048a0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	430a      	orrs	r2, r1
 80048aa:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	699b      	ldr	r3, [r3, #24]
 80048b0:	0c1b      	lsrs	r3, r3, #16
 80048b2:	f003 0104 	and.w	r1, r3, #4
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048ba:	f003 0210 	and.w	r2, r3, #16
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	430a      	orrs	r2, r1
 80048c4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	69da      	ldr	r2, [r3, #28]
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80048d4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	2200      	movs	r2, #0
 80048da:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	2201      	movs	r2, #1
 80048e0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80048e4:	2300      	movs	r3, #0
}
 80048e6:	4618      	mov	r0, r3
 80048e8:	3708      	adds	r7, #8
 80048ea:	46bd      	mov	sp, r7
 80048ec:	bd80      	pop	{r7, pc}

080048ee <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80048ee:	b580      	push	{r7, lr}
 80048f0:	b088      	sub	sp, #32
 80048f2:	af00      	add	r7, sp, #0
 80048f4:	60f8      	str	r0, [r7, #12]
 80048f6:	60b9      	str	r1, [r7, #8]
 80048f8:	603b      	str	r3, [r7, #0]
 80048fa:	4613      	mov	r3, r2
 80048fc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80048fe:	2300      	movs	r3, #0
 8004900:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004908:	2b01      	cmp	r3, #1
 800490a:	d101      	bne.n	8004910 <HAL_SPI_Transmit+0x22>
 800490c:	2302      	movs	r3, #2
 800490e:	e126      	b.n	8004b5e <HAL_SPI_Transmit+0x270>
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	2201      	movs	r2, #1
 8004914:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004918:	f7fd f978 	bl	8001c0c <HAL_GetTick>
 800491c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800491e:	88fb      	ldrh	r3, [r7, #6]
 8004920:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004928:	b2db      	uxtb	r3, r3
 800492a:	2b01      	cmp	r3, #1
 800492c:	d002      	beq.n	8004934 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800492e:	2302      	movs	r3, #2
 8004930:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004932:	e10b      	b.n	8004b4c <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8004934:	68bb      	ldr	r3, [r7, #8]
 8004936:	2b00      	cmp	r3, #0
 8004938:	d002      	beq.n	8004940 <HAL_SPI_Transmit+0x52>
 800493a:	88fb      	ldrh	r3, [r7, #6]
 800493c:	2b00      	cmp	r3, #0
 800493e:	d102      	bne.n	8004946 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004940:	2301      	movs	r3, #1
 8004942:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004944:	e102      	b.n	8004b4c <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	2203      	movs	r2, #3
 800494a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	2200      	movs	r2, #0
 8004952:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	68ba      	ldr	r2, [r7, #8]
 8004958:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	88fa      	ldrh	r2, [r7, #6]
 800495e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	88fa      	ldrh	r2, [r7, #6]
 8004964:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	2200      	movs	r2, #0
 800496a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	2200      	movs	r2, #0
 8004970:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	2200      	movs	r2, #0
 8004976:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	2200      	movs	r2, #0
 800497c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	2200      	movs	r2, #0
 8004982:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	689b      	ldr	r3, [r3, #8]
 8004988:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800498c:	d10f      	bne.n	80049ae <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	681a      	ldr	r2, [r3, #0]
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800499c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	681a      	ldr	r2, [r3, #0]
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80049ac:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049b8:	2b40      	cmp	r3, #64	; 0x40
 80049ba:	d007      	beq.n	80049cc <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	681a      	ldr	r2, [r3, #0]
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80049ca:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	68db      	ldr	r3, [r3, #12]
 80049d0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80049d4:	d14b      	bne.n	8004a6e <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	685b      	ldr	r3, [r3, #4]
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d002      	beq.n	80049e4 <HAL_SPI_Transmit+0xf6>
 80049de:	8afb      	ldrh	r3, [r7, #22]
 80049e0:	2b01      	cmp	r3, #1
 80049e2:	d13e      	bne.n	8004a62 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049e8:	881a      	ldrh	r2, [r3, #0]
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049f4:	1c9a      	adds	r2, r3, #2
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80049fe:	b29b      	uxth	r3, r3
 8004a00:	3b01      	subs	r3, #1
 8004a02:	b29a      	uxth	r2, r3
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004a08:	e02b      	b.n	8004a62 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	689b      	ldr	r3, [r3, #8]
 8004a10:	f003 0302 	and.w	r3, r3, #2
 8004a14:	2b02      	cmp	r3, #2
 8004a16:	d112      	bne.n	8004a3e <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a1c:	881a      	ldrh	r2, [r3, #0]
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a28:	1c9a      	adds	r2, r3, #2
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004a32:	b29b      	uxth	r3, r3
 8004a34:	3b01      	subs	r3, #1
 8004a36:	b29a      	uxth	r2, r3
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	86da      	strh	r2, [r3, #54]	; 0x36
 8004a3c:	e011      	b.n	8004a62 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004a3e:	f7fd f8e5 	bl	8001c0c <HAL_GetTick>
 8004a42:	4602      	mov	r2, r0
 8004a44:	69bb      	ldr	r3, [r7, #24]
 8004a46:	1ad3      	subs	r3, r2, r3
 8004a48:	683a      	ldr	r2, [r7, #0]
 8004a4a:	429a      	cmp	r2, r3
 8004a4c:	d803      	bhi.n	8004a56 <HAL_SPI_Transmit+0x168>
 8004a4e:	683b      	ldr	r3, [r7, #0]
 8004a50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a54:	d102      	bne.n	8004a5c <HAL_SPI_Transmit+0x16e>
 8004a56:	683b      	ldr	r3, [r7, #0]
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d102      	bne.n	8004a62 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8004a5c:	2303      	movs	r3, #3
 8004a5e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004a60:	e074      	b.n	8004b4c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004a66:	b29b      	uxth	r3, r3
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d1ce      	bne.n	8004a0a <HAL_SPI_Transmit+0x11c>
 8004a6c:	e04c      	b.n	8004b08 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	685b      	ldr	r3, [r3, #4]
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d002      	beq.n	8004a7c <HAL_SPI_Transmit+0x18e>
 8004a76:	8afb      	ldrh	r3, [r7, #22]
 8004a78:	2b01      	cmp	r3, #1
 8004a7a:	d140      	bne.n	8004afe <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	330c      	adds	r3, #12
 8004a86:	7812      	ldrb	r2, [r2, #0]
 8004a88:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a8e:	1c5a      	adds	r2, r3, #1
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004a98:	b29b      	uxth	r3, r3
 8004a9a:	3b01      	subs	r3, #1
 8004a9c:	b29a      	uxth	r2, r3
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004aa2:	e02c      	b.n	8004afe <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	689b      	ldr	r3, [r3, #8]
 8004aaa:	f003 0302 	and.w	r3, r3, #2
 8004aae:	2b02      	cmp	r3, #2
 8004ab0:	d113      	bne.n	8004ada <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	330c      	adds	r3, #12
 8004abc:	7812      	ldrb	r2, [r2, #0]
 8004abe:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ac4:	1c5a      	adds	r2, r3, #1
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004ace:	b29b      	uxth	r3, r3
 8004ad0:	3b01      	subs	r3, #1
 8004ad2:	b29a      	uxth	r2, r3
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	86da      	strh	r2, [r3, #54]	; 0x36
 8004ad8:	e011      	b.n	8004afe <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004ada:	f7fd f897 	bl	8001c0c <HAL_GetTick>
 8004ade:	4602      	mov	r2, r0
 8004ae0:	69bb      	ldr	r3, [r7, #24]
 8004ae2:	1ad3      	subs	r3, r2, r3
 8004ae4:	683a      	ldr	r2, [r7, #0]
 8004ae6:	429a      	cmp	r2, r3
 8004ae8:	d803      	bhi.n	8004af2 <HAL_SPI_Transmit+0x204>
 8004aea:	683b      	ldr	r3, [r7, #0]
 8004aec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004af0:	d102      	bne.n	8004af8 <HAL_SPI_Transmit+0x20a>
 8004af2:	683b      	ldr	r3, [r7, #0]
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d102      	bne.n	8004afe <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8004af8:	2303      	movs	r3, #3
 8004afa:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004afc:	e026      	b.n	8004b4c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004b02:	b29b      	uxth	r3, r3
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d1cd      	bne.n	8004aa4 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004b08:	69ba      	ldr	r2, [r7, #24]
 8004b0a:	6839      	ldr	r1, [r7, #0]
 8004b0c:	68f8      	ldr	r0, [r7, #12]
 8004b0e:	f000 fbd9 	bl	80052c4 <SPI_EndRxTxTransaction>
 8004b12:	4603      	mov	r3, r0
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d002      	beq.n	8004b1e <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	2220      	movs	r2, #32
 8004b1c:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	689b      	ldr	r3, [r3, #8]
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d10a      	bne.n	8004b3c <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004b26:	2300      	movs	r3, #0
 8004b28:	613b      	str	r3, [r7, #16]
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	68db      	ldr	r3, [r3, #12]
 8004b30:	613b      	str	r3, [r7, #16]
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	689b      	ldr	r3, [r3, #8]
 8004b38:	613b      	str	r3, [r7, #16]
 8004b3a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d002      	beq.n	8004b4a <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8004b44:	2301      	movs	r3, #1
 8004b46:	77fb      	strb	r3, [r7, #31]
 8004b48:	e000      	b.n	8004b4c <HAL_SPI_Transmit+0x25e>
  }

error:
 8004b4a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	2201      	movs	r2, #1
 8004b50:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	2200      	movs	r2, #0
 8004b58:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004b5c:	7ffb      	ldrb	r3, [r7, #31]
}
 8004b5e:	4618      	mov	r0, r3
 8004b60:	3720      	adds	r7, #32
 8004b62:	46bd      	mov	sp, r7
 8004b64:	bd80      	pop	{r7, pc}

08004b66 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004b66:	b580      	push	{r7, lr}
 8004b68:	b088      	sub	sp, #32
 8004b6a:	af02      	add	r7, sp, #8
 8004b6c:	60f8      	str	r0, [r7, #12]
 8004b6e:	60b9      	str	r1, [r7, #8]
 8004b70:	603b      	str	r3, [r7, #0]
 8004b72:	4613      	mov	r3, r2
 8004b74:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004b76:	2300      	movs	r3, #0
 8004b78:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	685b      	ldr	r3, [r3, #4]
 8004b7e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004b82:	d112      	bne.n	8004baa <HAL_SPI_Receive+0x44>
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	689b      	ldr	r3, [r3, #8]
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d10e      	bne.n	8004baa <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	2204      	movs	r2, #4
 8004b90:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004b94:	88fa      	ldrh	r2, [r7, #6]
 8004b96:	683b      	ldr	r3, [r7, #0]
 8004b98:	9300      	str	r3, [sp, #0]
 8004b9a:	4613      	mov	r3, r2
 8004b9c:	68ba      	ldr	r2, [r7, #8]
 8004b9e:	68b9      	ldr	r1, [r7, #8]
 8004ba0:	68f8      	ldr	r0, [r7, #12]
 8004ba2:	f000 f8f1 	bl	8004d88 <HAL_SPI_TransmitReceive>
 8004ba6:	4603      	mov	r3, r0
 8004ba8:	e0ea      	b.n	8004d80 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004bb0:	2b01      	cmp	r3, #1
 8004bb2:	d101      	bne.n	8004bb8 <HAL_SPI_Receive+0x52>
 8004bb4:	2302      	movs	r3, #2
 8004bb6:	e0e3      	b.n	8004d80 <HAL_SPI_Receive+0x21a>
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	2201      	movs	r2, #1
 8004bbc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004bc0:	f7fd f824 	bl	8001c0c <HAL_GetTick>
 8004bc4:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004bcc:	b2db      	uxtb	r3, r3
 8004bce:	2b01      	cmp	r3, #1
 8004bd0:	d002      	beq.n	8004bd8 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8004bd2:	2302      	movs	r3, #2
 8004bd4:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004bd6:	e0ca      	b.n	8004d6e <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8004bd8:	68bb      	ldr	r3, [r7, #8]
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d002      	beq.n	8004be4 <HAL_SPI_Receive+0x7e>
 8004bde:	88fb      	ldrh	r3, [r7, #6]
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d102      	bne.n	8004bea <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8004be4:	2301      	movs	r3, #1
 8004be6:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004be8:	e0c1      	b.n	8004d6e <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	2204      	movs	r2, #4
 8004bee:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	2200      	movs	r2, #0
 8004bf6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	68ba      	ldr	r2, [r7, #8]
 8004bfc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	88fa      	ldrh	r2, [r7, #6]
 8004c02:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	88fa      	ldrh	r2, [r7, #6]
 8004c08:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	2200      	movs	r2, #0
 8004c0e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	2200      	movs	r2, #0
 8004c14:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	2200      	movs	r2, #0
 8004c1a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	2200      	movs	r2, #0
 8004c20:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	2200      	movs	r2, #0
 8004c26:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	689b      	ldr	r3, [r3, #8]
 8004c2c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004c30:	d10f      	bne.n	8004c52 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	681a      	ldr	r2, [r3, #0]
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004c40:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	681a      	ldr	r2, [r3, #0]
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004c50:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c5c:	2b40      	cmp	r3, #64	; 0x40
 8004c5e:	d007      	beq.n	8004c70 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	681a      	ldr	r2, [r3, #0]
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004c6e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	68db      	ldr	r3, [r3, #12]
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d162      	bne.n	8004d3e <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004c78:	e02e      	b.n	8004cd8 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	689b      	ldr	r3, [r3, #8]
 8004c80:	f003 0301 	and.w	r3, r3, #1
 8004c84:	2b01      	cmp	r3, #1
 8004c86:	d115      	bne.n	8004cb4 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	f103 020c 	add.w	r2, r3, #12
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c94:	7812      	ldrb	r2, [r2, #0]
 8004c96:	b2d2      	uxtb	r2, r2
 8004c98:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c9e:	1c5a      	adds	r2, r3, #1
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ca8:	b29b      	uxth	r3, r3
 8004caa:	3b01      	subs	r3, #1
 8004cac:	b29a      	uxth	r2, r3
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004cb2:	e011      	b.n	8004cd8 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004cb4:	f7fc ffaa 	bl	8001c0c <HAL_GetTick>
 8004cb8:	4602      	mov	r2, r0
 8004cba:	693b      	ldr	r3, [r7, #16]
 8004cbc:	1ad3      	subs	r3, r2, r3
 8004cbe:	683a      	ldr	r2, [r7, #0]
 8004cc0:	429a      	cmp	r2, r3
 8004cc2:	d803      	bhi.n	8004ccc <HAL_SPI_Receive+0x166>
 8004cc4:	683b      	ldr	r3, [r7, #0]
 8004cc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cca:	d102      	bne.n	8004cd2 <HAL_SPI_Receive+0x16c>
 8004ccc:	683b      	ldr	r3, [r7, #0]
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d102      	bne.n	8004cd8 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8004cd2:	2303      	movs	r3, #3
 8004cd4:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004cd6:	e04a      	b.n	8004d6e <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004cdc:	b29b      	uxth	r3, r3
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d1cb      	bne.n	8004c7a <HAL_SPI_Receive+0x114>
 8004ce2:	e031      	b.n	8004d48 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	689b      	ldr	r3, [r3, #8]
 8004cea:	f003 0301 	and.w	r3, r3, #1
 8004cee:	2b01      	cmp	r3, #1
 8004cf0:	d113      	bne.n	8004d1a <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	68da      	ldr	r2, [r3, #12]
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cfc:	b292      	uxth	r2, r2
 8004cfe:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d04:	1c9a      	adds	r2, r3, #2
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d0e:	b29b      	uxth	r3, r3
 8004d10:	3b01      	subs	r3, #1
 8004d12:	b29a      	uxth	r2, r3
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004d18:	e011      	b.n	8004d3e <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004d1a:	f7fc ff77 	bl	8001c0c <HAL_GetTick>
 8004d1e:	4602      	mov	r2, r0
 8004d20:	693b      	ldr	r3, [r7, #16]
 8004d22:	1ad3      	subs	r3, r2, r3
 8004d24:	683a      	ldr	r2, [r7, #0]
 8004d26:	429a      	cmp	r2, r3
 8004d28:	d803      	bhi.n	8004d32 <HAL_SPI_Receive+0x1cc>
 8004d2a:	683b      	ldr	r3, [r7, #0]
 8004d2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d30:	d102      	bne.n	8004d38 <HAL_SPI_Receive+0x1d2>
 8004d32:	683b      	ldr	r3, [r7, #0]
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d102      	bne.n	8004d3e <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8004d38:	2303      	movs	r3, #3
 8004d3a:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004d3c:	e017      	b.n	8004d6e <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d42:	b29b      	uxth	r3, r3
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d1cd      	bne.n	8004ce4 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004d48:	693a      	ldr	r2, [r7, #16]
 8004d4a:	6839      	ldr	r1, [r7, #0]
 8004d4c:	68f8      	ldr	r0, [r7, #12]
 8004d4e:	f000 fa53 	bl	80051f8 <SPI_EndRxTransaction>
 8004d52:	4603      	mov	r3, r0
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d002      	beq.n	8004d5e <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	2220      	movs	r2, #32
 8004d5c:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d002      	beq.n	8004d6c <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8004d66:	2301      	movs	r3, #1
 8004d68:	75fb      	strb	r3, [r7, #23]
 8004d6a:	e000      	b.n	8004d6e <HAL_SPI_Receive+0x208>
  }

error :
 8004d6c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	2201      	movs	r2, #1
 8004d72:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	2200      	movs	r2, #0
 8004d7a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004d7e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004d80:	4618      	mov	r0, r3
 8004d82:	3718      	adds	r7, #24
 8004d84:	46bd      	mov	sp, r7
 8004d86:	bd80      	pop	{r7, pc}

08004d88 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004d88:	b580      	push	{r7, lr}
 8004d8a:	b08c      	sub	sp, #48	; 0x30
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	60f8      	str	r0, [r7, #12]
 8004d90:	60b9      	str	r1, [r7, #8]
 8004d92:	607a      	str	r2, [r7, #4]
 8004d94:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004d96:	2301      	movs	r3, #1
 8004d98:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004d9a:	2300      	movs	r3, #0
 8004d9c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004da6:	2b01      	cmp	r3, #1
 8004da8:	d101      	bne.n	8004dae <HAL_SPI_TransmitReceive+0x26>
 8004daa:	2302      	movs	r3, #2
 8004dac:	e18a      	b.n	80050c4 <HAL_SPI_TransmitReceive+0x33c>
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	2201      	movs	r2, #1
 8004db2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004db6:	f7fc ff29 	bl	8001c0c <HAL_GetTick>
 8004dba:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004dc2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	685b      	ldr	r3, [r3, #4]
 8004dca:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8004dcc:	887b      	ldrh	r3, [r7, #2]
 8004dce:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004dd0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004dd4:	2b01      	cmp	r3, #1
 8004dd6:	d00f      	beq.n	8004df8 <HAL_SPI_TransmitReceive+0x70>
 8004dd8:	69fb      	ldr	r3, [r7, #28]
 8004dda:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004dde:	d107      	bne.n	8004df0 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	689b      	ldr	r3, [r3, #8]
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d103      	bne.n	8004df0 <HAL_SPI_TransmitReceive+0x68>
 8004de8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004dec:	2b04      	cmp	r3, #4
 8004dee:	d003      	beq.n	8004df8 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8004df0:	2302      	movs	r3, #2
 8004df2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004df6:	e15b      	b.n	80050b0 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004df8:	68bb      	ldr	r3, [r7, #8]
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d005      	beq.n	8004e0a <HAL_SPI_TransmitReceive+0x82>
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d002      	beq.n	8004e0a <HAL_SPI_TransmitReceive+0x82>
 8004e04:	887b      	ldrh	r3, [r7, #2]
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d103      	bne.n	8004e12 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8004e0a:	2301      	movs	r3, #1
 8004e0c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004e10:	e14e      	b.n	80050b0 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004e18:	b2db      	uxtb	r3, r3
 8004e1a:	2b04      	cmp	r3, #4
 8004e1c:	d003      	beq.n	8004e26 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	2205      	movs	r2, #5
 8004e22:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	2200      	movs	r2, #0
 8004e2a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	687a      	ldr	r2, [r7, #4]
 8004e30:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	887a      	ldrh	r2, [r7, #2]
 8004e36:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	887a      	ldrh	r2, [r7, #2]
 8004e3c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	68ba      	ldr	r2, [r7, #8]
 8004e42:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	887a      	ldrh	r2, [r7, #2]
 8004e48:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	887a      	ldrh	r2, [r7, #2]
 8004e4e:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	2200      	movs	r2, #0
 8004e54:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	2200      	movs	r2, #0
 8004e5a:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e66:	2b40      	cmp	r3, #64	; 0x40
 8004e68:	d007      	beq.n	8004e7a <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	681a      	ldr	r2, [r3, #0]
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004e78:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	68db      	ldr	r3, [r3, #12]
 8004e7e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004e82:	d178      	bne.n	8004f76 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	685b      	ldr	r3, [r3, #4]
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d002      	beq.n	8004e92 <HAL_SPI_TransmitReceive+0x10a>
 8004e8c:	8b7b      	ldrh	r3, [r7, #26]
 8004e8e:	2b01      	cmp	r3, #1
 8004e90:	d166      	bne.n	8004f60 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e96:	881a      	ldrh	r2, [r3, #0]
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ea2:	1c9a      	adds	r2, r3, #2
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004eac:	b29b      	uxth	r3, r3
 8004eae:	3b01      	subs	r3, #1
 8004eb0:	b29a      	uxth	r2, r3
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004eb6:	e053      	b.n	8004f60 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	689b      	ldr	r3, [r3, #8]
 8004ebe:	f003 0302 	and.w	r3, r3, #2
 8004ec2:	2b02      	cmp	r3, #2
 8004ec4:	d11b      	bne.n	8004efe <HAL_SPI_TransmitReceive+0x176>
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004eca:	b29b      	uxth	r3, r3
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d016      	beq.n	8004efe <HAL_SPI_TransmitReceive+0x176>
 8004ed0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ed2:	2b01      	cmp	r3, #1
 8004ed4:	d113      	bne.n	8004efe <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004eda:	881a      	ldrh	r2, [r3, #0]
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ee6:	1c9a      	adds	r2, r3, #2
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004ef0:	b29b      	uxth	r3, r3
 8004ef2:	3b01      	subs	r3, #1
 8004ef4:	b29a      	uxth	r2, r3
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004efa:	2300      	movs	r3, #0
 8004efc:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	689b      	ldr	r3, [r3, #8]
 8004f04:	f003 0301 	and.w	r3, r3, #1
 8004f08:	2b01      	cmp	r3, #1
 8004f0a:	d119      	bne.n	8004f40 <HAL_SPI_TransmitReceive+0x1b8>
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f10:	b29b      	uxth	r3, r3
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d014      	beq.n	8004f40 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	68da      	ldr	r2, [r3, #12]
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f20:	b292      	uxth	r2, r2
 8004f22:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f28:	1c9a      	adds	r2, r3, #2
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f32:	b29b      	uxth	r3, r3
 8004f34:	3b01      	subs	r3, #1
 8004f36:	b29a      	uxth	r2, r3
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004f3c:	2301      	movs	r3, #1
 8004f3e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004f40:	f7fc fe64 	bl	8001c0c <HAL_GetTick>
 8004f44:	4602      	mov	r2, r0
 8004f46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f48:	1ad3      	subs	r3, r2, r3
 8004f4a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004f4c:	429a      	cmp	r2, r3
 8004f4e:	d807      	bhi.n	8004f60 <HAL_SPI_TransmitReceive+0x1d8>
 8004f50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f56:	d003      	beq.n	8004f60 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8004f58:	2303      	movs	r3, #3
 8004f5a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004f5e:	e0a7      	b.n	80050b0 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004f64:	b29b      	uxth	r3, r3
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d1a6      	bne.n	8004eb8 <HAL_SPI_TransmitReceive+0x130>
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f6e:	b29b      	uxth	r3, r3
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d1a1      	bne.n	8004eb8 <HAL_SPI_TransmitReceive+0x130>
 8004f74:	e07c      	b.n	8005070 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	685b      	ldr	r3, [r3, #4]
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d002      	beq.n	8004f84 <HAL_SPI_TransmitReceive+0x1fc>
 8004f7e:	8b7b      	ldrh	r3, [r7, #26]
 8004f80:	2b01      	cmp	r3, #1
 8004f82:	d16b      	bne.n	800505c <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	330c      	adds	r3, #12
 8004f8e:	7812      	ldrb	r2, [r2, #0]
 8004f90:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f96:	1c5a      	adds	r2, r3, #1
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004fa0:	b29b      	uxth	r3, r3
 8004fa2:	3b01      	subs	r3, #1
 8004fa4:	b29a      	uxth	r2, r3
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004faa:	e057      	b.n	800505c <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	689b      	ldr	r3, [r3, #8]
 8004fb2:	f003 0302 	and.w	r3, r3, #2
 8004fb6:	2b02      	cmp	r3, #2
 8004fb8:	d11c      	bne.n	8004ff4 <HAL_SPI_TransmitReceive+0x26c>
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004fbe:	b29b      	uxth	r3, r3
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d017      	beq.n	8004ff4 <HAL_SPI_TransmitReceive+0x26c>
 8004fc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fc6:	2b01      	cmp	r3, #1
 8004fc8:	d114      	bne.n	8004ff4 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	330c      	adds	r3, #12
 8004fd4:	7812      	ldrb	r2, [r2, #0]
 8004fd6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fdc:	1c5a      	adds	r2, r3, #1
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004fe6:	b29b      	uxth	r3, r3
 8004fe8:	3b01      	subs	r3, #1
 8004fea:	b29a      	uxth	r2, r3
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004ff0:	2300      	movs	r3, #0
 8004ff2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	689b      	ldr	r3, [r3, #8]
 8004ffa:	f003 0301 	and.w	r3, r3, #1
 8004ffe:	2b01      	cmp	r3, #1
 8005000:	d119      	bne.n	8005036 <HAL_SPI_TransmitReceive+0x2ae>
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005006:	b29b      	uxth	r3, r3
 8005008:	2b00      	cmp	r3, #0
 800500a:	d014      	beq.n	8005036 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	68da      	ldr	r2, [r3, #12]
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005016:	b2d2      	uxtb	r2, r2
 8005018:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800501e:	1c5a      	adds	r2, r3, #1
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005028:	b29b      	uxth	r3, r3
 800502a:	3b01      	subs	r3, #1
 800502c:	b29a      	uxth	r2, r3
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005032:	2301      	movs	r3, #1
 8005034:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005036:	f7fc fde9 	bl	8001c0c <HAL_GetTick>
 800503a:	4602      	mov	r2, r0
 800503c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800503e:	1ad3      	subs	r3, r2, r3
 8005040:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005042:	429a      	cmp	r2, r3
 8005044:	d803      	bhi.n	800504e <HAL_SPI_TransmitReceive+0x2c6>
 8005046:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005048:	f1b3 3fff 	cmp.w	r3, #4294967295
 800504c:	d102      	bne.n	8005054 <HAL_SPI_TransmitReceive+0x2cc>
 800504e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005050:	2b00      	cmp	r3, #0
 8005052:	d103      	bne.n	800505c <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8005054:	2303      	movs	r3, #3
 8005056:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800505a:	e029      	b.n	80050b0 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005060:	b29b      	uxth	r3, r3
 8005062:	2b00      	cmp	r3, #0
 8005064:	d1a2      	bne.n	8004fac <HAL_SPI_TransmitReceive+0x224>
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800506a:	b29b      	uxth	r3, r3
 800506c:	2b00      	cmp	r3, #0
 800506e:	d19d      	bne.n	8004fac <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005070:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005072:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005074:	68f8      	ldr	r0, [r7, #12]
 8005076:	f000 f925 	bl	80052c4 <SPI_EndRxTxTransaction>
 800507a:	4603      	mov	r3, r0
 800507c:	2b00      	cmp	r3, #0
 800507e:	d006      	beq.n	800508e <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8005080:	2301      	movs	r3, #1
 8005082:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	2220      	movs	r2, #32
 800508a:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800508c:	e010      	b.n	80050b0 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	689b      	ldr	r3, [r3, #8]
 8005092:	2b00      	cmp	r3, #0
 8005094:	d10b      	bne.n	80050ae <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005096:	2300      	movs	r3, #0
 8005098:	617b      	str	r3, [r7, #20]
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	68db      	ldr	r3, [r3, #12]
 80050a0:	617b      	str	r3, [r7, #20]
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	689b      	ldr	r3, [r3, #8]
 80050a8:	617b      	str	r3, [r7, #20]
 80050aa:	697b      	ldr	r3, [r7, #20]
 80050ac:	e000      	b.n	80050b0 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80050ae:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	2201      	movs	r2, #1
 80050b4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	2200      	movs	r2, #0
 80050bc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80050c0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80050c4:	4618      	mov	r0, r3
 80050c6:	3730      	adds	r7, #48	; 0x30
 80050c8:	46bd      	mov	sp, r7
 80050ca:	bd80      	pop	{r7, pc}

080050cc <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 80050cc:	b480      	push	{r7}
 80050ce:	b083      	sub	sp, #12
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80050da:	b2db      	uxtb	r3, r3
}
 80050dc:	4618      	mov	r0, r3
 80050de:	370c      	adds	r7, #12
 80050e0:	46bd      	mov	sp, r7
 80050e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e6:	4770      	bx	lr

080050e8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80050e8:	b580      	push	{r7, lr}
 80050ea:	b088      	sub	sp, #32
 80050ec:	af00      	add	r7, sp, #0
 80050ee:	60f8      	str	r0, [r7, #12]
 80050f0:	60b9      	str	r1, [r7, #8]
 80050f2:	603b      	str	r3, [r7, #0]
 80050f4:	4613      	mov	r3, r2
 80050f6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80050f8:	f7fc fd88 	bl	8001c0c <HAL_GetTick>
 80050fc:	4602      	mov	r2, r0
 80050fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005100:	1a9b      	subs	r3, r3, r2
 8005102:	683a      	ldr	r2, [r7, #0]
 8005104:	4413      	add	r3, r2
 8005106:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005108:	f7fc fd80 	bl	8001c0c <HAL_GetTick>
 800510c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800510e:	4b39      	ldr	r3, [pc, #228]	; (80051f4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	015b      	lsls	r3, r3, #5
 8005114:	0d1b      	lsrs	r3, r3, #20
 8005116:	69fa      	ldr	r2, [r7, #28]
 8005118:	fb02 f303 	mul.w	r3, r2, r3
 800511c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800511e:	e054      	b.n	80051ca <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005120:	683b      	ldr	r3, [r7, #0]
 8005122:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005126:	d050      	beq.n	80051ca <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005128:	f7fc fd70 	bl	8001c0c <HAL_GetTick>
 800512c:	4602      	mov	r2, r0
 800512e:	69bb      	ldr	r3, [r7, #24]
 8005130:	1ad3      	subs	r3, r2, r3
 8005132:	69fa      	ldr	r2, [r7, #28]
 8005134:	429a      	cmp	r2, r3
 8005136:	d902      	bls.n	800513e <SPI_WaitFlagStateUntilTimeout+0x56>
 8005138:	69fb      	ldr	r3, [r7, #28]
 800513a:	2b00      	cmp	r3, #0
 800513c:	d13d      	bne.n	80051ba <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	685a      	ldr	r2, [r3, #4]
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800514c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	685b      	ldr	r3, [r3, #4]
 8005152:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005156:	d111      	bne.n	800517c <SPI_WaitFlagStateUntilTimeout+0x94>
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	689b      	ldr	r3, [r3, #8]
 800515c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005160:	d004      	beq.n	800516c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	689b      	ldr	r3, [r3, #8]
 8005166:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800516a:	d107      	bne.n	800517c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	681a      	ldr	r2, [r3, #0]
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800517a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005180:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005184:	d10f      	bne.n	80051a6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	681a      	ldr	r2, [r3, #0]
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005194:	601a      	str	r2, [r3, #0]
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	681a      	ldr	r2, [r3, #0]
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80051a4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	2201      	movs	r2, #1
 80051aa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	2200      	movs	r2, #0
 80051b2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80051b6:	2303      	movs	r3, #3
 80051b8:	e017      	b.n	80051ea <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80051ba:	697b      	ldr	r3, [r7, #20]
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d101      	bne.n	80051c4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80051c0:	2300      	movs	r3, #0
 80051c2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80051c4:	697b      	ldr	r3, [r7, #20]
 80051c6:	3b01      	subs	r3, #1
 80051c8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	689a      	ldr	r2, [r3, #8]
 80051d0:	68bb      	ldr	r3, [r7, #8]
 80051d2:	4013      	ands	r3, r2
 80051d4:	68ba      	ldr	r2, [r7, #8]
 80051d6:	429a      	cmp	r2, r3
 80051d8:	bf0c      	ite	eq
 80051da:	2301      	moveq	r3, #1
 80051dc:	2300      	movne	r3, #0
 80051de:	b2db      	uxtb	r3, r3
 80051e0:	461a      	mov	r2, r3
 80051e2:	79fb      	ldrb	r3, [r7, #7]
 80051e4:	429a      	cmp	r2, r3
 80051e6:	d19b      	bne.n	8005120 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80051e8:	2300      	movs	r3, #0
}
 80051ea:	4618      	mov	r0, r3
 80051ec:	3720      	adds	r7, #32
 80051ee:	46bd      	mov	sp, r7
 80051f0:	bd80      	pop	{r7, pc}
 80051f2:	bf00      	nop
 80051f4:	20000010 	.word	0x20000010

080051f8 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80051f8:	b580      	push	{r7, lr}
 80051fa:	b086      	sub	sp, #24
 80051fc:	af02      	add	r7, sp, #8
 80051fe:	60f8      	str	r0, [r7, #12]
 8005200:	60b9      	str	r1, [r7, #8]
 8005202:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	685b      	ldr	r3, [r3, #4]
 8005208:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800520c:	d111      	bne.n	8005232 <SPI_EndRxTransaction+0x3a>
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	689b      	ldr	r3, [r3, #8]
 8005212:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005216:	d004      	beq.n	8005222 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	689b      	ldr	r3, [r3, #8]
 800521c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005220:	d107      	bne.n	8005232 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	681a      	ldr	r2, [r3, #0]
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005230:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	685b      	ldr	r3, [r3, #4]
 8005236:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800523a:	d12a      	bne.n	8005292 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	689b      	ldr	r3, [r3, #8]
 8005240:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005244:	d012      	beq.n	800526c <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	9300      	str	r3, [sp, #0]
 800524a:	68bb      	ldr	r3, [r7, #8]
 800524c:	2200      	movs	r2, #0
 800524e:	2180      	movs	r1, #128	; 0x80
 8005250:	68f8      	ldr	r0, [r7, #12]
 8005252:	f7ff ff49 	bl	80050e8 <SPI_WaitFlagStateUntilTimeout>
 8005256:	4603      	mov	r3, r0
 8005258:	2b00      	cmp	r3, #0
 800525a:	d02d      	beq.n	80052b8 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005260:	f043 0220 	orr.w	r2, r3, #32
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8005268:	2303      	movs	r3, #3
 800526a:	e026      	b.n	80052ba <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	9300      	str	r3, [sp, #0]
 8005270:	68bb      	ldr	r3, [r7, #8]
 8005272:	2200      	movs	r2, #0
 8005274:	2101      	movs	r1, #1
 8005276:	68f8      	ldr	r0, [r7, #12]
 8005278:	f7ff ff36 	bl	80050e8 <SPI_WaitFlagStateUntilTimeout>
 800527c:	4603      	mov	r3, r0
 800527e:	2b00      	cmp	r3, #0
 8005280:	d01a      	beq.n	80052b8 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005286:	f043 0220 	orr.w	r2, r3, #32
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800528e:	2303      	movs	r3, #3
 8005290:	e013      	b.n	80052ba <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	9300      	str	r3, [sp, #0]
 8005296:	68bb      	ldr	r3, [r7, #8]
 8005298:	2200      	movs	r2, #0
 800529a:	2101      	movs	r1, #1
 800529c:	68f8      	ldr	r0, [r7, #12]
 800529e:	f7ff ff23 	bl	80050e8 <SPI_WaitFlagStateUntilTimeout>
 80052a2:	4603      	mov	r3, r0
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d007      	beq.n	80052b8 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052ac:	f043 0220 	orr.w	r2, r3, #32
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80052b4:	2303      	movs	r3, #3
 80052b6:	e000      	b.n	80052ba <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80052b8:	2300      	movs	r3, #0
}
 80052ba:	4618      	mov	r0, r3
 80052bc:	3710      	adds	r7, #16
 80052be:	46bd      	mov	sp, r7
 80052c0:	bd80      	pop	{r7, pc}
	...

080052c4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80052c4:	b580      	push	{r7, lr}
 80052c6:	b088      	sub	sp, #32
 80052c8:	af02      	add	r7, sp, #8
 80052ca:	60f8      	str	r0, [r7, #12]
 80052cc:	60b9      	str	r1, [r7, #8]
 80052ce:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80052d0:	4b1b      	ldr	r3, [pc, #108]	; (8005340 <SPI_EndRxTxTransaction+0x7c>)
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	4a1b      	ldr	r2, [pc, #108]	; (8005344 <SPI_EndRxTxTransaction+0x80>)
 80052d6:	fba2 2303 	umull	r2, r3, r2, r3
 80052da:	0d5b      	lsrs	r3, r3, #21
 80052dc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80052e0:	fb02 f303 	mul.w	r3, r2, r3
 80052e4:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	685b      	ldr	r3, [r3, #4]
 80052ea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80052ee:	d112      	bne.n	8005316 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	9300      	str	r3, [sp, #0]
 80052f4:	68bb      	ldr	r3, [r7, #8]
 80052f6:	2200      	movs	r2, #0
 80052f8:	2180      	movs	r1, #128	; 0x80
 80052fa:	68f8      	ldr	r0, [r7, #12]
 80052fc:	f7ff fef4 	bl	80050e8 <SPI_WaitFlagStateUntilTimeout>
 8005300:	4603      	mov	r3, r0
 8005302:	2b00      	cmp	r3, #0
 8005304:	d016      	beq.n	8005334 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800530a:	f043 0220 	orr.w	r2, r3, #32
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005312:	2303      	movs	r3, #3
 8005314:	e00f      	b.n	8005336 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005316:	697b      	ldr	r3, [r7, #20]
 8005318:	2b00      	cmp	r3, #0
 800531a:	d00a      	beq.n	8005332 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800531c:	697b      	ldr	r3, [r7, #20]
 800531e:	3b01      	subs	r3, #1
 8005320:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	689b      	ldr	r3, [r3, #8]
 8005328:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800532c:	2b80      	cmp	r3, #128	; 0x80
 800532e:	d0f2      	beq.n	8005316 <SPI_EndRxTxTransaction+0x52>
 8005330:	e000      	b.n	8005334 <SPI_EndRxTxTransaction+0x70>
        break;
 8005332:	bf00      	nop
  }

  return HAL_OK;
 8005334:	2300      	movs	r3, #0
}
 8005336:	4618      	mov	r0, r3
 8005338:	3718      	adds	r7, #24
 800533a:	46bd      	mov	sp, r7
 800533c:	bd80      	pop	{r7, pc}
 800533e:	bf00      	nop
 8005340:	20000010 	.word	0x20000010
 8005344:	165e9f81 	.word	0x165e9f81

08005348 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005348:	b580      	push	{r7, lr}
 800534a:	b082      	sub	sp, #8
 800534c:	af00      	add	r7, sp, #0
 800534e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	2b00      	cmp	r3, #0
 8005354:	d101      	bne.n	800535a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005356:	2301      	movs	r3, #1
 8005358:	e041      	b.n	80053de <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005360:	b2db      	uxtb	r3, r3
 8005362:	2b00      	cmp	r3, #0
 8005364:	d106      	bne.n	8005374 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	2200      	movs	r2, #0
 800536a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800536e:	6878      	ldr	r0, [r7, #4]
 8005370:	f7fc fa20 	bl	80017b4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	2202      	movs	r2, #2
 8005378:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681a      	ldr	r2, [r3, #0]
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	3304      	adds	r3, #4
 8005384:	4619      	mov	r1, r3
 8005386:	4610      	mov	r0, r2
 8005388:	f000 fa96 	bl	80058b8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	2201      	movs	r2, #1
 8005390:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	2201      	movs	r2, #1
 8005398:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	2201      	movs	r2, #1
 80053a0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	2201      	movs	r2, #1
 80053a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	2201      	movs	r2, #1
 80053b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	2201      	movs	r2, #1
 80053b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	2201      	movs	r2, #1
 80053c0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	2201      	movs	r2, #1
 80053c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	2201      	movs	r2, #1
 80053d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	2201      	movs	r2, #1
 80053d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80053dc:	2300      	movs	r3, #0
}
 80053de:	4618      	mov	r0, r3
 80053e0:	3708      	adds	r7, #8
 80053e2:	46bd      	mov	sp, r7
 80053e4:	bd80      	pop	{r7, pc}
	...

080053e8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80053e8:	b480      	push	{r7}
 80053ea:	b085      	sub	sp, #20
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80053f6:	b2db      	uxtb	r3, r3
 80053f8:	2b01      	cmp	r3, #1
 80053fa:	d001      	beq.n	8005400 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80053fc:	2301      	movs	r3, #1
 80053fe:	e04e      	b.n	800549e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	2202      	movs	r2, #2
 8005404:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	68da      	ldr	r2, [r3, #12]
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	f042 0201 	orr.w	r2, r2, #1
 8005416:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	4a23      	ldr	r2, [pc, #140]	; (80054ac <HAL_TIM_Base_Start_IT+0xc4>)
 800541e:	4293      	cmp	r3, r2
 8005420:	d022      	beq.n	8005468 <HAL_TIM_Base_Start_IT+0x80>
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800542a:	d01d      	beq.n	8005468 <HAL_TIM_Base_Start_IT+0x80>
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	4a1f      	ldr	r2, [pc, #124]	; (80054b0 <HAL_TIM_Base_Start_IT+0xc8>)
 8005432:	4293      	cmp	r3, r2
 8005434:	d018      	beq.n	8005468 <HAL_TIM_Base_Start_IT+0x80>
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	4a1e      	ldr	r2, [pc, #120]	; (80054b4 <HAL_TIM_Base_Start_IT+0xcc>)
 800543c:	4293      	cmp	r3, r2
 800543e:	d013      	beq.n	8005468 <HAL_TIM_Base_Start_IT+0x80>
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	4a1c      	ldr	r2, [pc, #112]	; (80054b8 <HAL_TIM_Base_Start_IT+0xd0>)
 8005446:	4293      	cmp	r3, r2
 8005448:	d00e      	beq.n	8005468 <HAL_TIM_Base_Start_IT+0x80>
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	4a1b      	ldr	r2, [pc, #108]	; (80054bc <HAL_TIM_Base_Start_IT+0xd4>)
 8005450:	4293      	cmp	r3, r2
 8005452:	d009      	beq.n	8005468 <HAL_TIM_Base_Start_IT+0x80>
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	4a19      	ldr	r2, [pc, #100]	; (80054c0 <HAL_TIM_Base_Start_IT+0xd8>)
 800545a:	4293      	cmp	r3, r2
 800545c:	d004      	beq.n	8005468 <HAL_TIM_Base_Start_IT+0x80>
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	4a18      	ldr	r2, [pc, #96]	; (80054c4 <HAL_TIM_Base_Start_IT+0xdc>)
 8005464:	4293      	cmp	r3, r2
 8005466:	d111      	bne.n	800548c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	689b      	ldr	r3, [r3, #8]
 800546e:	f003 0307 	and.w	r3, r3, #7
 8005472:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	2b06      	cmp	r3, #6
 8005478:	d010      	beq.n	800549c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	681a      	ldr	r2, [r3, #0]
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	f042 0201 	orr.w	r2, r2, #1
 8005488:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800548a:	e007      	b.n	800549c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	681a      	ldr	r2, [r3, #0]
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	f042 0201 	orr.w	r2, r2, #1
 800549a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800549c:	2300      	movs	r3, #0
}
 800549e:	4618      	mov	r0, r3
 80054a0:	3714      	adds	r7, #20
 80054a2:	46bd      	mov	sp, r7
 80054a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a8:	4770      	bx	lr
 80054aa:	bf00      	nop
 80054ac:	40010000 	.word	0x40010000
 80054b0:	40000400 	.word	0x40000400
 80054b4:	40000800 	.word	0x40000800
 80054b8:	40000c00 	.word	0x40000c00
 80054bc:	40010400 	.word	0x40010400
 80054c0:	40014000 	.word	0x40014000
 80054c4:	40001800 	.word	0x40001800

080054c8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80054c8:	b580      	push	{r7, lr}
 80054ca:	b082      	sub	sp, #8
 80054cc:	af00      	add	r7, sp, #0
 80054ce:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	691b      	ldr	r3, [r3, #16]
 80054d6:	f003 0302 	and.w	r3, r3, #2
 80054da:	2b02      	cmp	r3, #2
 80054dc:	d122      	bne.n	8005524 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	68db      	ldr	r3, [r3, #12]
 80054e4:	f003 0302 	and.w	r3, r3, #2
 80054e8:	2b02      	cmp	r3, #2
 80054ea:	d11b      	bne.n	8005524 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	f06f 0202 	mvn.w	r2, #2
 80054f4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	2201      	movs	r2, #1
 80054fa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	699b      	ldr	r3, [r3, #24]
 8005502:	f003 0303 	and.w	r3, r3, #3
 8005506:	2b00      	cmp	r3, #0
 8005508:	d003      	beq.n	8005512 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800550a:	6878      	ldr	r0, [r7, #4]
 800550c:	f000 f9b5 	bl	800587a <HAL_TIM_IC_CaptureCallback>
 8005510:	e005      	b.n	800551e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005512:	6878      	ldr	r0, [r7, #4]
 8005514:	f000 f9a7 	bl	8005866 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005518:	6878      	ldr	r0, [r7, #4]
 800551a:	f000 f9b8 	bl	800588e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	2200      	movs	r2, #0
 8005522:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	691b      	ldr	r3, [r3, #16]
 800552a:	f003 0304 	and.w	r3, r3, #4
 800552e:	2b04      	cmp	r3, #4
 8005530:	d122      	bne.n	8005578 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	68db      	ldr	r3, [r3, #12]
 8005538:	f003 0304 	and.w	r3, r3, #4
 800553c:	2b04      	cmp	r3, #4
 800553e:	d11b      	bne.n	8005578 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	f06f 0204 	mvn.w	r2, #4
 8005548:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	2202      	movs	r2, #2
 800554e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	699b      	ldr	r3, [r3, #24]
 8005556:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800555a:	2b00      	cmp	r3, #0
 800555c:	d003      	beq.n	8005566 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800555e:	6878      	ldr	r0, [r7, #4]
 8005560:	f000 f98b 	bl	800587a <HAL_TIM_IC_CaptureCallback>
 8005564:	e005      	b.n	8005572 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005566:	6878      	ldr	r0, [r7, #4]
 8005568:	f000 f97d 	bl	8005866 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800556c:	6878      	ldr	r0, [r7, #4]
 800556e:	f000 f98e 	bl	800588e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	2200      	movs	r2, #0
 8005576:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	691b      	ldr	r3, [r3, #16]
 800557e:	f003 0308 	and.w	r3, r3, #8
 8005582:	2b08      	cmp	r3, #8
 8005584:	d122      	bne.n	80055cc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	68db      	ldr	r3, [r3, #12]
 800558c:	f003 0308 	and.w	r3, r3, #8
 8005590:	2b08      	cmp	r3, #8
 8005592:	d11b      	bne.n	80055cc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	f06f 0208 	mvn.w	r2, #8
 800559c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	2204      	movs	r2, #4
 80055a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	69db      	ldr	r3, [r3, #28]
 80055aa:	f003 0303 	and.w	r3, r3, #3
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d003      	beq.n	80055ba <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80055b2:	6878      	ldr	r0, [r7, #4]
 80055b4:	f000 f961 	bl	800587a <HAL_TIM_IC_CaptureCallback>
 80055b8:	e005      	b.n	80055c6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80055ba:	6878      	ldr	r0, [r7, #4]
 80055bc:	f000 f953 	bl	8005866 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80055c0:	6878      	ldr	r0, [r7, #4]
 80055c2:	f000 f964 	bl	800588e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	2200      	movs	r2, #0
 80055ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	691b      	ldr	r3, [r3, #16]
 80055d2:	f003 0310 	and.w	r3, r3, #16
 80055d6:	2b10      	cmp	r3, #16
 80055d8:	d122      	bne.n	8005620 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	68db      	ldr	r3, [r3, #12]
 80055e0:	f003 0310 	and.w	r3, r3, #16
 80055e4:	2b10      	cmp	r3, #16
 80055e6:	d11b      	bne.n	8005620 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	f06f 0210 	mvn.w	r2, #16
 80055f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	2208      	movs	r2, #8
 80055f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	69db      	ldr	r3, [r3, #28]
 80055fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005602:	2b00      	cmp	r3, #0
 8005604:	d003      	beq.n	800560e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005606:	6878      	ldr	r0, [r7, #4]
 8005608:	f000 f937 	bl	800587a <HAL_TIM_IC_CaptureCallback>
 800560c:	e005      	b.n	800561a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800560e:	6878      	ldr	r0, [r7, #4]
 8005610:	f000 f929 	bl	8005866 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005614:	6878      	ldr	r0, [r7, #4]
 8005616:	f000 f93a 	bl	800588e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	2200      	movs	r2, #0
 800561e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	691b      	ldr	r3, [r3, #16]
 8005626:	f003 0301 	and.w	r3, r3, #1
 800562a:	2b01      	cmp	r3, #1
 800562c:	d10e      	bne.n	800564c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	68db      	ldr	r3, [r3, #12]
 8005634:	f003 0301 	and.w	r3, r3, #1
 8005638:	2b01      	cmp	r3, #1
 800563a:	d107      	bne.n	800564c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	f06f 0201 	mvn.w	r2, #1
 8005644:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005646:	6878      	ldr	r0, [r7, #4]
 8005648:	f7fb ff56 	bl	80014f8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	691b      	ldr	r3, [r3, #16]
 8005652:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005656:	2b80      	cmp	r3, #128	; 0x80
 8005658:	d10e      	bne.n	8005678 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	68db      	ldr	r3, [r3, #12]
 8005660:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005664:	2b80      	cmp	r3, #128	; 0x80
 8005666:	d107      	bne.n	8005678 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005670:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005672:	6878      	ldr	r0, [r7, #4]
 8005674:	f000 fae0 	bl	8005c38 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	691b      	ldr	r3, [r3, #16]
 800567e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005682:	2b40      	cmp	r3, #64	; 0x40
 8005684:	d10e      	bne.n	80056a4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	68db      	ldr	r3, [r3, #12]
 800568c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005690:	2b40      	cmp	r3, #64	; 0x40
 8005692:	d107      	bne.n	80056a4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800569c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800569e:	6878      	ldr	r0, [r7, #4]
 80056a0:	f000 f8ff 	bl	80058a2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	691b      	ldr	r3, [r3, #16]
 80056aa:	f003 0320 	and.w	r3, r3, #32
 80056ae:	2b20      	cmp	r3, #32
 80056b0:	d10e      	bne.n	80056d0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	68db      	ldr	r3, [r3, #12]
 80056b8:	f003 0320 	and.w	r3, r3, #32
 80056bc:	2b20      	cmp	r3, #32
 80056be:	d107      	bne.n	80056d0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	f06f 0220 	mvn.w	r2, #32
 80056c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80056ca:	6878      	ldr	r0, [r7, #4]
 80056cc:	f000 faaa 	bl	8005c24 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80056d0:	bf00      	nop
 80056d2:	3708      	adds	r7, #8
 80056d4:	46bd      	mov	sp, r7
 80056d6:	bd80      	pop	{r7, pc}

080056d8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80056d8:	b580      	push	{r7, lr}
 80056da:	b084      	sub	sp, #16
 80056dc:	af00      	add	r7, sp, #0
 80056de:	6078      	str	r0, [r7, #4]
 80056e0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80056e2:	2300      	movs	r3, #0
 80056e4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80056ec:	2b01      	cmp	r3, #1
 80056ee:	d101      	bne.n	80056f4 <HAL_TIM_ConfigClockSource+0x1c>
 80056f0:	2302      	movs	r3, #2
 80056f2:	e0b4      	b.n	800585e <HAL_TIM_ConfigClockSource+0x186>
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	2201      	movs	r2, #1
 80056f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	2202      	movs	r2, #2
 8005700:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	689b      	ldr	r3, [r3, #8]
 800570a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800570c:	68bb      	ldr	r3, [r7, #8]
 800570e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005712:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005714:	68bb      	ldr	r3, [r7, #8]
 8005716:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800571a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	68ba      	ldr	r2, [r7, #8]
 8005722:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005724:	683b      	ldr	r3, [r7, #0]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800572c:	d03e      	beq.n	80057ac <HAL_TIM_ConfigClockSource+0xd4>
 800572e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005732:	f200 8087 	bhi.w	8005844 <HAL_TIM_ConfigClockSource+0x16c>
 8005736:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800573a:	f000 8086 	beq.w	800584a <HAL_TIM_ConfigClockSource+0x172>
 800573e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005742:	d87f      	bhi.n	8005844 <HAL_TIM_ConfigClockSource+0x16c>
 8005744:	2b70      	cmp	r3, #112	; 0x70
 8005746:	d01a      	beq.n	800577e <HAL_TIM_ConfigClockSource+0xa6>
 8005748:	2b70      	cmp	r3, #112	; 0x70
 800574a:	d87b      	bhi.n	8005844 <HAL_TIM_ConfigClockSource+0x16c>
 800574c:	2b60      	cmp	r3, #96	; 0x60
 800574e:	d050      	beq.n	80057f2 <HAL_TIM_ConfigClockSource+0x11a>
 8005750:	2b60      	cmp	r3, #96	; 0x60
 8005752:	d877      	bhi.n	8005844 <HAL_TIM_ConfigClockSource+0x16c>
 8005754:	2b50      	cmp	r3, #80	; 0x50
 8005756:	d03c      	beq.n	80057d2 <HAL_TIM_ConfigClockSource+0xfa>
 8005758:	2b50      	cmp	r3, #80	; 0x50
 800575a:	d873      	bhi.n	8005844 <HAL_TIM_ConfigClockSource+0x16c>
 800575c:	2b40      	cmp	r3, #64	; 0x40
 800575e:	d058      	beq.n	8005812 <HAL_TIM_ConfigClockSource+0x13a>
 8005760:	2b40      	cmp	r3, #64	; 0x40
 8005762:	d86f      	bhi.n	8005844 <HAL_TIM_ConfigClockSource+0x16c>
 8005764:	2b30      	cmp	r3, #48	; 0x30
 8005766:	d064      	beq.n	8005832 <HAL_TIM_ConfigClockSource+0x15a>
 8005768:	2b30      	cmp	r3, #48	; 0x30
 800576a:	d86b      	bhi.n	8005844 <HAL_TIM_ConfigClockSource+0x16c>
 800576c:	2b20      	cmp	r3, #32
 800576e:	d060      	beq.n	8005832 <HAL_TIM_ConfigClockSource+0x15a>
 8005770:	2b20      	cmp	r3, #32
 8005772:	d867      	bhi.n	8005844 <HAL_TIM_ConfigClockSource+0x16c>
 8005774:	2b00      	cmp	r3, #0
 8005776:	d05c      	beq.n	8005832 <HAL_TIM_ConfigClockSource+0x15a>
 8005778:	2b10      	cmp	r3, #16
 800577a:	d05a      	beq.n	8005832 <HAL_TIM_ConfigClockSource+0x15a>
 800577c:	e062      	b.n	8005844 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	6818      	ldr	r0, [r3, #0]
 8005782:	683b      	ldr	r3, [r7, #0]
 8005784:	6899      	ldr	r1, [r3, #8]
 8005786:	683b      	ldr	r3, [r7, #0]
 8005788:	685a      	ldr	r2, [r3, #4]
 800578a:	683b      	ldr	r3, [r7, #0]
 800578c:	68db      	ldr	r3, [r3, #12]
 800578e:	f000 f9ad 	bl	8005aec <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	689b      	ldr	r3, [r3, #8]
 8005798:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800579a:	68bb      	ldr	r3, [r7, #8]
 800579c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80057a0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	68ba      	ldr	r2, [r7, #8]
 80057a8:	609a      	str	r2, [r3, #8]
      break;
 80057aa:	e04f      	b.n	800584c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	6818      	ldr	r0, [r3, #0]
 80057b0:	683b      	ldr	r3, [r7, #0]
 80057b2:	6899      	ldr	r1, [r3, #8]
 80057b4:	683b      	ldr	r3, [r7, #0]
 80057b6:	685a      	ldr	r2, [r3, #4]
 80057b8:	683b      	ldr	r3, [r7, #0]
 80057ba:	68db      	ldr	r3, [r3, #12]
 80057bc:	f000 f996 	bl	8005aec <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	689a      	ldr	r2, [r3, #8]
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80057ce:	609a      	str	r2, [r3, #8]
      break;
 80057d0:	e03c      	b.n	800584c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	6818      	ldr	r0, [r3, #0]
 80057d6:	683b      	ldr	r3, [r7, #0]
 80057d8:	6859      	ldr	r1, [r3, #4]
 80057da:	683b      	ldr	r3, [r7, #0]
 80057dc:	68db      	ldr	r3, [r3, #12]
 80057de:	461a      	mov	r2, r3
 80057e0:	f000 f90a 	bl	80059f8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	2150      	movs	r1, #80	; 0x50
 80057ea:	4618      	mov	r0, r3
 80057ec:	f000 f963 	bl	8005ab6 <TIM_ITRx_SetConfig>
      break;
 80057f0:	e02c      	b.n	800584c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	6818      	ldr	r0, [r3, #0]
 80057f6:	683b      	ldr	r3, [r7, #0]
 80057f8:	6859      	ldr	r1, [r3, #4]
 80057fa:	683b      	ldr	r3, [r7, #0]
 80057fc:	68db      	ldr	r3, [r3, #12]
 80057fe:	461a      	mov	r2, r3
 8005800:	f000 f929 	bl	8005a56 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	2160      	movs	r1, #96	; 0x60
 800580a:	4618      	mov	r0, r3
 800580c:	f000 f953 	bl	8005ab6 <TIM_ITRx_SetConfig>
      break;
 8005810:	e01c      	b.n	800584c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	6818      	ldr	r0, [r3, #0]
 8005816:	683b      	ldr	r3, [r7, #0]
 8005818:	6859      	ldr	r1, [r3, #4]
 800581a:	683b      	ldr	r3, [r7, #0]
 800581c:	68db      	ldr	r3, [r3, #12]
 800581e:	461a      	mov	r2, r3
 8005820:	f000 f8ea 	bl	80059f8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	2140      	movs	r1, #64	; 0x40
 800582a:	4618      	mov	r0, r3
 800582c:	f000 f943 	bl	8005ab6 <TIM_ITRx_SetConfig>
      break;
 8005830:	e00c      	b.n	800584c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681a      	ldr	r2, [r3, #0]
 8005836:	683b      	ldr	r3, [r7, #0]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	4619      	mov	r1, r3
 800583c:	4610      	mov	r0, r2
 800583e:	f000 f93a 	bl	8005ab6 <TIM_ITRx_SetConfig>
      break;
 8005842:	e003      	b.n	800584c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005844:	2301      	movs	r3, #1
 8005846:	73fb      	strb	r3, [r7, #15]
      break;
 8005848:	e000      	b.n	800584c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800584a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	2201      	movs	r2, #1
 8005850:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	2200      	movs	r2, #0
 8005858:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800585c:	7bfb      	ldrb	r3, [r7, #15]
}
 800585e:	4618      	mov	r0, r3
 8005860:	3710      	adds	r7, #16
 8005862:	46bd      	mov	sp, r7
 8005864:	bd80      	pop	{r7, pc}

08005866 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005866:	b480      	push	{r7}
 8005868:	b083      	sub	sp, #12
 800586a:	af00      	add	r7, sp, #0
 800586c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800586e:	bf00      	nop
 8005870:	370c      	adds	r7, #12
 8005872:	46bd      	mov	sp, r7
 8005874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005878:	4770      	bx	lr

0800587a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800587a:	b480      	push	{r7}
 800587c:	b083      	sub	sp, #12
 800587e:	af00      	add	r7, sp, #0
 8005880:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005882:	bf00      	nop
 8005884:	370c      	adds	r7, #12
 8005886:	46bd      	mov	sp, r7
 8005888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800588c:	4770      	bx	lr

0800588e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800588e:	b480      	push	{r7}
 8005890:	b083      	sub	sp, #12
 8005892:	af00      	add	r7, sp, #0
 8005894:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005896:	bf00      	nop
 8005898:	370c      	adds	r7, #12
 800589a:	46bd      	mov	sp, r7
 800589c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a0:	4770      	bx	lr

080058a2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80058a2:	b480      	push	{r7}
 80058a4:	b083      	sub	sp, #12
 80058a6:	af00      	add	r7, sp, #0
 80058a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80058aa:	bf00      	nop
 80058ac:	370c      	adds	r7, #12
 80058ae:	46bd      	mov	sp, r7
 80058b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b4:	4770      	bx	lr
	...

080058b8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80058b8:	b480      	push	{r7}
 80058ba:	b085      	sub	sp, #20
 80058bc:	af00      	add	r7, sp, #0
 80058be:	6078      	str	r0, [r7, #4]
 80058c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	4a40      	ldr	r2, [pc, #256]	; (80059cc <TIM_Base_SetConfig+0x114>)
 80058cc:	4293      	cmp	r3, r2
 80058ce:	d013      	beq.n	80058f8 <TIM_Base_SetConfig+0x40>
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80058d6:	d00f      	beq.n	80058f8 <TIM_Base_SetConfig+0x40>
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	4a3d      	ldr	r2, [pc, #244]	; (80059d0 <TIM_Base_SetConfig+0x118>)
 80058dc:	4293      	cmp	r3, r2
 80058de:	d00b      	beq.n	80058f8 <TIM_Base_SetConfig+0x40>
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	4a3c      	ldr	r2, [pc, #240]	; (80059d4 <TIM_Base_SetConfig+0x11c>)
 80058e4:	4293      	cmp	r3, r2
 80058e6:	d007      	beq.n	80058f8 <TIM_Base_SetConfig+0x40>
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	4a3b      	ldr	r2, [pc, #236]	; (80059d8 <TIM_Base_SetConfig+0x120>)
 80058ec:	4293      	cmp	r3, r2
 80058ee:	d003      	beq.n	80058f8 <TIM_Base_SetConfig+0x40>
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	4a3a      	ldr	r2, [pc, #232]	; (80059dc <TIM_Base_SetConfig+0x124>)
 80058f4:	4293      	cmp	r3, r2
 80058f6:	d108      	bne.n	800590a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058fe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005900:	683b      	ldr	r3, [r7, #0]
 8005902:	685b      	ldr	r3, [r3, #4]
 8005904:	68fa      	ldr	r2, [r7, #12]
 8005906:	4313      	orrs	r3, r2
 8005908:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	4a2f      	ldr	r2, [pc, #188]	; (80059cc <TIM_Base_SetConfig+0x114>)
 800590e:	4293      	cmp	r3, r2
 8005910:	d02b      	beq.n	800596a <TIM_Base_SetConfig+0xb2>
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005918:	d027      	beq.n	800596a <TIM_Base_SetConfig+0xb2>
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	4a2c      	ldr	r2, [pc, #176]	; (80059d0 <TIM_Base_SetConfig+0x118>)
 800591e:	4293      	cmp	r3, r2
 8005920:	d023      	beq.n	800596a <TIM_Base_SetConfig+0xb2>
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	4a2b      	ldr	r2, [pc, #172]	; (80059d4 <TIM_Base_SetConfig+0x11c>)
 8005926:	4293      	cmp	r3, r2
 8005928:	d01f      	beq.n	800596a <TIM_Base_SetConfig+0xb2>
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	4a2a      	ldr	r2, [pc, #168]	; (80059d8 <TIM_Base_SetConfig+0x120>)
 800592e:	4293      	cmp	r3, r2
 8005930:	d01b      	beq.n	800596a <TIM_Base_SetConfig+0xb2>
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	4a29      	ldr	r2, [pc, #164]	; (80059dc <TIM_Base_SetConfig+0x124>)
 8005936:	4293      	cmp	r3, r2
 8005938:	d017      	beq.n	800596a <TIM_Base_SetConfig+0xb2>
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	4a28      	ldr	r2, [pc, #160]	; (80059e0 <TIM_Base_SetConfig+0x128>)
 800593e:	4293      	cmp	r3, r2
 8005940:	d013      	beq.n	800596a <TIM_Base_SetConfig+0xb2>
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	4a27      	ldr	r2, [pc, #156]	; (80059e4 <TIM_Base_SetConfig+0x12c>)
 8005946:	4293      	cmp	r3, r2
 8005948:	d00f      	beq.n	800596a <TIM_Base_SetConfig+0xb2>
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	4a26      	ldr	r2, [pc, #152]	; (80059e8 <TIM_Base_SetConfig+0x130>)
 800594e:	4293      	cmp	r3, r2
 8005950:	d00b      	beq.n	800596a <TIM_Base_SetConfig+0xb2>
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	4a25      	ldr	r2, [pc, #148]	; (80059ec <TIM_Base_SetConfig+0x134>)
 8005956:	4293      	cmp	r3, r2
 8005958:	d007      	beq.n	800596a <TIM_Base_SetConfig+0xb2>
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	4a24      	ldr	r2, [pc, #144]	; (80059f0 <TIM_Base_SetConfig+0x138>)
 800595e:	4293      	cmp	r3, r2
 8005960:	d003      	beq.n	800596a <TIM_Base_SetConfig+0xb2>
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	4a23      	ldr	r2, [pc, #140]	; (80059f4 <TIM_Base_SetConfig+0x13c>)
 8005966:	4293      	cmp	r3, r2
 8005968:	d108      	bne.n	800597c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005970:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005972:	683b      	ldr	r3, [r7, #0]
 8005974:	68db      	ldr	r3, [r3, #12]
 8005976:	68fa      	ldr	r2, [r7, #12]
 8005978:	4313      	orrs	r3, r2
 800597a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005982:	683b      	ldr	r3, [r7, #0]
 8005984:	695b      	ldr	r3, [r3, #20]
 8005986:	4313      	orrs	r3, r2
 8005988:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	68fa      	ldr	r2, [r7, #12]
 800598e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005990:	683b      	ldr	r3, [r7, #0]
 8005992:	689a      	ldr	r2, [r3, #8]
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005998:	683b      	ldr	r3, [r7, #0]
 800599a:	681a      	ldr	r2, [r3, #0]
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	4a0a      	ldr	r2, [pc, #40]	; (80059cc <TIM_Base_SetConfig+0x114>)
 80059a4:	4293      	cmp	r3, r2
 80059a6:	d003      	beq.n	80059b0 <TIM_Base_SetConfig+0xf8>
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	4a0c      	ldr	r2, [pc, #48]	; (80059dc <TIM_Base_SetConfig+0x124>)
 80059ac:	4293      	cmp	r3, r2
 80059ae:	d103      	bne.n	80059b8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80059b0:	683b      	ldr	r3, [r7, #0]
 80059b2:	691a      	ldr	r2, [r3, #16]
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	2201      	movs	r2, #1
 80059bc:	615a      	str	r2, [r3, #20]
}
 80059be:	bf00      	nop
 80059c0:	3714      	adds	r7, #20
 80059c2:	46bd      	mov	sp, r7
 80059c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c8:	4770      	bx	lr
 80059ca:	bf00      	nop
 80059cc:	40010000 	.word	0x40010000
 80059d0:	40000400 	.word	0x40000400
 80059d4:	40000800 	.word	0x40000800
 80059d8:	40000c00 	.word	0x40000c00
 80059dc:	40010400 	.word	0x40010400
 80059e0:	40014000 	.word	0x40014000
 80059e4:	40014400 	.word	0x40014400
 80059e8:	40014800 	.word	0x40014800
 80059ec:	40001800 	.word	0x40001800
 80059f0:	40001c00 	.word	0x40001c00
 80059f4:	40002000 	.word	0x40002000

080059f8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80059f8:	b480      	push	{r7}
 80059fa:	b087      	sub	sp, #28
 80059fc:	af00      	add	r7, sp, #0
 80059fe:	60f8      	str	r0, [r7, #12]
 8005a00:	60b9      	str	r1, [r7, #8]
 8005a02:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	6a1b      	ldr	r3, [r3, #32]
 8005a08:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	6a1b      	ldr	r3, [r3, #32]
 8005a0e:	f023 0201 	bic.w	r2, r3, #1
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	699b      	ldr	r3, [r3, #24]
 8005a1a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005a1c:	693b      	ldr	r3, [r7, #16]
 8005a1e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005a22:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	011b      	lsls	r3, r3, #4
 8005a28:	693a      	ldr	r2, [r7, #16]
 8005a2a:	4313      	orrs	r3, r2
 8005a2c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005a2e:	697b      	ldr	r3, [r7, #20]
 8005a30:	f023 030a 	bic.w	r3, r3, #10
 8005a34:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005a36:	697a      	ldr	r2, [r7, #20]
 8005a38:	68bb      	ldr	r3, [r7, #8]
 8005a3a:	4313      	orrs	r3, r2
 8005a3c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	693a      	ldr	r2, [r7, #16]
 8005a42:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	697a      	ldr	r2, [r7, #20]
 8005a48:	621a      	str	r2, [r3, #32]
}
 8005a4a:	bf00      	nop
 8005a4c:	371c      	adds	r7, #28
 8005a4e:	46bd      	mov	sp, r7
 8005a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a54:	4770      	bx	lr

08005a56 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005a56:	b480      	push	{r7}
 8005a58:	b087      	sub	sp, #28
 8005a5a:	af00      	add	r7, sp, #0
 8005a5c:	60f8      	str	r0, [r7, #12]
 8005a5e:	60b9      	str	r1, [r7, #8]
 8005a60:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	6a1b      	ldr	r3, [r3, #32]
 8005a66:	f023 0210 	bic.w	r2, r3, #16
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	699b      	ldr	r3, [r3, #24]
 8005a72:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	6a1b      	ldr	r3, [r3, #32]
 8005a78:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005a7a:	697b      	ldr	r3, [r7, #20]
 8005a7c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005a80:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	031b      	lsls	r3, r3, #12
 8005a86:	697a      	ldr	r2, [r7, #20]
 8005a88:	4313      	orrs	r3, r2
 8005a8a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005a8c:	693b      	ldr	r3, [r7, #16]
 8005a8e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005a92:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005a94:	68bb      	ldr	r3, [r7, #8]
 8005a96:	011b      	lsls	r3, r3, #4
 8005a98:	693a      	ldr	r2, [r7, #16]
 8005a9a:	4313      	orrs	r3, r2
 8005a9c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	697a      	ldr	r2, [r7, #20]
 8005aa2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	693a      	ldr	r2, [r7, #16]
 8005aa8:	621a      	str	r2, [r3, #32]
}
 8005aaa:	bf00      	nop
 8005aac:	371c      	adds	r7, #28
 8005aae:	46bd      	mov	sp, r7
 8005ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab4:	4770      	bx	lr

08005ab6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005ab6:	b480      	push	{r7}
 8005ab8:	b085      	sub	sp, #20
 8005aba:	af00      	add	r7, sp, #0
 8005abc:	6078      	str	r0, [r7, #4]
 8005abe:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	689b      	ldr	r3, [r3, #8]
 8005ac4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005acc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005ace:	683a      	ldr	r2, [r7, #0]
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	4313      	orrs	r3, r2
 8005ad4:	f043 0307 	orr.w	r3, r3, #7
 8005ad8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	68fa      	ldr	r2, [r7, #12]
 8005ade:	609a      	str	r2, [r3, #8]
}
 8005ae0:	bf00      	nop
 8005ae2:	3714      	adds	r7, #20
 8005ae4:	46bd      	mov	sp, r7
 8005ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aea:	4770      	bx	lr

08005aec <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005aec:	b480      	push	{r7}
 8005aee:	b087      	sub	sp, #28
 8005af0:	af00      	add	r7, sp, #0
 8005af2:	60f8      	str	r0, [r7, #12]
 8005af4:	60b9      	str	r1, [r7, #8]
 8005af6:	607a      	str	r2, [r7, #4]
 8005af8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	689b      	ldr	r3, [r3, #8]
 8005afe:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005b00:	697b      	ldr	r3, [r7, #20]
 8005b02:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005b06:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005b08:	683b      	ldr	r3, [r7, #0]
 8005b0a:	021a      	lsls	r2, r3, #8
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	431a      	orrs	r2, r3
 8005b10:	68bb      	ldr	r3, [r7, #8]
 8005b12:	4313      	orrs	r3, r2
 8005b14:	697a      	ldr	r2, [r7, #20]
 8005b16:	4313      	orrs	r3, r2
 8005b18:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	697a      	ldr	r2, [r7, #20]
 8005b1e:	609a      	str	r2, [r3, #8]
}
 8005b20:	bf00      	nop
 8005b22:	371c      	adds	r7, #28
 8005b24:	46bd      	mov	sp, r7
 8005b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b2a:	4770      	bx	lr

08005b2c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005b2c:	b480      	push	{r7}
 8005b2e:	b085      	sub	sp, #20
 8005b30:	af00      	add	r7, sp, #0
 8005b32:	6078      	str	r0, [r7, #4]
 8005b34:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005b3c:	2b01      	cmp	r3, #1
 8005b3e:	d101      	bne.n	8005b44 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005b40:	2302      	movs	r3, #2
 8005b42:	e05a      	b.n	8005bfa <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	2201      	movs	r2, #1
 8005b48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	2202      	movs	r2, #2
 8005b50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	685b      	ldr	r3, [r3, #4]
 8005b5a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	689b      	ldr	r3, [r3, #8]
 8005b62:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b6a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005b6c:	683b      	ldr	r3, [r7, #0]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	68fa      	ldr	r2, [r7, #12]
 8005b72:	4313      	orrs	r3, r2
 8005b74:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	68fa      	ldr	r2, [r7, #12]
 8005b7c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	4a21      	ldr	r2, [pc, #132]	; (8005c08 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005b84:	4293      	cmp	r3, r2
 8005b86:	d022      	beq.n	8005bce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b90:	d01d      	beq.n	8005bce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	4a1d      	ldr	r2, [pc, #116]	; (8005c0c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005b98:	4293      	cmp	r3, r2
 8005b9a:	d018      	beq.n	8005bce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	4a1b      	ldr	r2, [pc, #108]	; (8005c10 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005ba2:	4293      	cmp	r3, r2
 8005ba4:	d013      	beq.n	8005bce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	4a1a      	ldr	r2, [pc, #104]	; (8005c14 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005bac:	4293      	cmp	r3, r2
 8005bae:	d00e      	beq.n	8005bce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	4a18      	ldr	r2, [pc, #96]	; (8005c18 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005bb6:	4293      	cmp	r3, r2
 8005bb8:	d009      	beq.n	8005bce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	4a17      	ldr	r2, [pc, #92]	; (8005c1c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005bc0:	4293      	cmp	r3, r2
 8005bc2:	d004      	beq.n	8005bce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	4a15      	ldr	r2, [pc, #84]	; (8005c20 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005bca:	4293      	cmp	r3, r2
 8005bcc:	d10c      	bne.n	8005be8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005bce:	68bb      	ldr	r3, [r7, #8]
 8005bd0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005bd4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005bd6:	683b      	ldr	r3, [r7, #0]
 8005bd8:	685b      	ldr	r3, [r3, #4]
 8005bda:	68ba      	ldr	r2, [r7, #8]
 8005bdc:	4313      	orrs	r3, r2
 8005bde:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	68ba      	ldr	r2, [r7, #8]
 8005be6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	2201      	movs	r2, #1
 8005bec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	2200      	movs	r2, #0
 8005bf4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005bf8:	2300      	movs	r3, #0
}
 8005bfa:	4618      	mov	r0, r3
 8005bfc:	3714      	adds	r7, #20
 8005bfe:	46bd      	mov	sp, r7
 8005c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c04:	4770      	bx	lr
 8005c06:	bf00      	nop
 8005c08:	40010000 	.word	0x40010000
 8005c0c:	40000400 	.word	0x40000400
 8005c10:	40000800 	.word	0x40000800
 8005c14:	40000c00 	.word	0x40000c00
 8005c18:	40010400 	.word	0x40010400
 8005c1c:	40014000 	.word	0x40014000
 8005c20:	40001800 	.word	0x40001800

08005c24 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005c24:	b480      	push	{r7}
 8005c26:	b083      	sub	sp, #12
 8005c28:	af00      	add	r7, sp, #0
 8005c2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005c2c:	bf00      	nop
 8005c2e:	370c      	adds	r7, #12
 8005c30:	46bd      	mov	sp, r7
 8005c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c36:	4770      	bx	lr

08005c38 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005c38:	b480      	push	{r7}
 8005c3a:	b083      	sub	sp, #12
 8005c3c:	af00      	add	r7, sp, #0
 8005c3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005c40:	bf00      	nop
 8005c42:	370c      	adds	r7, #12
 8005c44:	46bd      	mov	sp, r7
 8005c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c4a:	4770      	bx	lr

08005c4c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005c4c:	b580      	push	{r7, lr}
 8005c4e:	b082      	sub	sp, #8
 8005c50:	af00      	add	r7, sp, #0
 8005c52:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d101      	bne.n	8005c5e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005c5a:	2301      	movs	r3, #1
 8005c5c:	e03f      	b.n	8005cde <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c64:	b2db      	uxtb	r3, r3
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d106      	bne.n	8005c78 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	2200      	movs	r2, #0
 8005c6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005c72:	6878      	ldr	r0, [r7, #4]
 8005c74:	f7fb fdc4 	bl	8001800 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	2224      	movs	r2, #36	; 0x24
 8005c7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	68da      	ldr	r2, [r3, #12]
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005c8e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005c90:	6878      	ldr	r0, [r7, #4]
 8005c92:	f001 f801 	bl	8006c98 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	691a      	ldr	r2, [r3, #16]
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005ca4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	695a      	ldr	r2, [r3, #20]
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005cb4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	68da      	ldr	r2, [r3, #12]
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005cc4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	2200      	movs	r2, #0
 8005cca:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	2220      	movs	r2, #32
 8005cd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	2220      	movs	r2, #32
 8005cd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005cdc:	2300      	movs	r3, #0
}
 8005cde:	4618      	mov	r0, r3
 8005ce0:	3708      	adds	r7, #8
 8005ce2:	46bd      	mov	sp, r7
 8005ce4:	bd80      	pop	{r7, pc}

08005ce6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005ce6:	b580      	push	{r7, lr}
 8005ce8:	b08a      	sub	sp, #40	; 0x28
 8005cea:	af02      	add	r7, sp, #8
 8005cec:	60f8      	str	r0, [r7, #12]
 8005cee:	60b9      	str	r1, [r7, #8]
 8005cf0:	603b      	str	r3, [r7, #0]
 8005cf2:	4613      	mov	r3, r2
 8005cf4:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005cf6:	2300      	movs	r3, #0
 8005cf8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d00:	b2db      	uxtb	r3, r3
 8005d02:	2b20      	cmp	r3, #32
 8005d04:	d17c      	bne.n	8005e00 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005d06:	68bb      	ldr	r3, [r7, #8]
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d002      	beq.n	8005d12 <HAL_UART_Transmit+0x2c>
 8005d0c:	88fb      	ldrh	r3, [r7, #6]
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d101      	bne.n	8005d16 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005d12:	2301      	movs	r3, #1
 8005d14:	e075      	b.n	8005e02 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005d1c:	2b01      	cmp	r3, #1
 8005d1e:	d101      	bne.n	8005d24 <HAL_UART_Transmit+0x3e>
 8005d20:	2302      	movs	r3, #2
 8005d22:	e06e      	b.n	8005e02 <HAL_UART_Transmit+0x11c>
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	2201      	movs	r2, #1
 8005d28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	2200      	movs	r2, #0
 8005d30:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	2221      	movs	r2, #33	; 0x21
 8005d36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005d3a:	f7fb ff67 	bl	8001c0c <HAL_GetTick>
 8005d3e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	88fa      	ldrh	r2, [r7, #6]
 8005d44:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	88fa      	ldrh	r2, [r7, #6]
 8005d4a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	689b      	ldr	r3, [r3, #8]
 8005d50:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d54:	d108      	bne.n	8005d68 <HAL_UART_Transmit+0x82>
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	691b      	ldr	r3, [r3, #16]
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d104      	bne.n	8005d68 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8005d5e:	2300      	movs	r3, #0
 8005d60:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005d62:	68bb      	ldr	r3, [r7, #8]
 8005d64:	61bb      	str	r3, [r7, #24]
 8005d66:	e003      	b.n	8005d70 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005d68:	68bb      	ldr	r3, [r7, #8]
 8005d6a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005d6c:	2300      	movs	r3, #0
 8005d6e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	2200      	movs	r2, #0
 8005d74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8005d78:	e02a      	b.n	8005dd0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005d7a:	683b      	ldr	r3, [r7, #0]
 8005d7c:	9300      	str	r3, [sp, #0]
 8005d7e:	697b      	ldr	r3, [r7, #20]
 8005d80:	2200      	movs	r2, #0
 8005d82:	2180      	movs	r1, #128	; 0x80
 8005d84:	68f8      	ldr	r0, [r7, #12]
 8005d86:	f000 fcb9 	bl	80066fc <UART_WaitOnFlagUntilTimeout>
 8005d8a:	4603      	mov	r3, r0
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d001      	beq.n	8005d94 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005d90:	2303      	movs	r3, #3
 8005d92:	e036      	b.n	8005e02 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005d94:	69fb      	ldr	r3, [r7, #28]
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d10b      	bne.n	8005db2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005d9a:	69bb      	ldr	r3, [r7, #24]
 8005d9c:	881b      	ldrh	r3, [r3, #0]
 8005d9e:	461a      	mov	r2, r3
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005da8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005daa:	69bb      	ldr	r3, [r7, #24]
 8005dac:	3302      	adds	r3, #2
 8005dae:	61bb      	str	r3, [r7, #24]
 8005db0:	e007      	b.n	8005dc2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005db2:	69fb      	ldr	r3, [r7, #28]
 8005db4:	781a      	ldrb	r2, [r3, #0]
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005dbc:	69fb      	ldr	r3, [r7, #28]
 8005dbe:	3301      	adds	r3, #1
 8005dc0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005dc6:	b29b      	uxth	r3, r3
 8005dc8:	3b01      	subs	r3, #1
 8005dca:	b29a      	uxth	r2, r3
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005dd4:	b29b      	uxth	r3, r3
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d1cf      	bne.n	8005d7a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005dda:	683b      	ldr	r3, [r7, #0]
 8005ddc:	9300      	str	r3, [sp, #0]
 8005dde:	697b      	ldr	r3, [r7, #20]
 8005de0:	2200      	movs	r2, #0
 8005de2:	2140      	movs	r1, #64	; 0x40
 8005de4:	68f8      	ldr	r0, [r7, #12]
 8005de6:	f000 fc89 	bl	80066fc <UART_WaitOnFlagUntilTimeout>
 8005dea:	4603      	mov	r3, r0
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d001      	beq.n	8005df4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005df0:	2303      	movs	r3, #3
 8005df2:	e006      	b.n	8005e02 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	2220      	movs	r2, #32
 8005df8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005dfc:	2300      	movs	r3, #0
 8005dfe:	e000      	b.n	8005e02 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005e00:	2302      	movs	r3, #2
  }
}
 8005e02:	4618      	mov	r0, r3
 8005e04:	3720      	adds	r7, #32
 8005e06:	46bd      	mov	sp, r7
 8005e08:	bd80      	pop	{r7, pc}

08005e0a <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005e0a:	b580      	push	{r7, lr}
 8005e0c:	b08a      	sub	sp, #40	; 0x28
 8005e0e:	af02      	add	r7, sp, #8
 8005e10:	60f8      	str	r0, [r7, #12]
 8005e12:	60b9      	str	r1, [r7, #8]
 8005e14:	603b      	str	r3, [r7, #0]
 8005e16:	4613      	mov	r3, r2
 8005e18:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005e1a:	2300      	movs	r3, #0
 8005e1c:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005e24:	b2db      	uxtb	r3, r3
 8005e26:	2b20      	cmp	r3, #32
 8005e28:	f040 808c 	bne.w	8005f44 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005e2c:	68bb      	ldr	r3, [r7, #8]
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d002      	beq.n	8005e38 <HAL_UART_Receive+0x2e>
 8005e32:	88fb      	ldrh	r3, [r7, #6]
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d101      	bne.n	8005e3c <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8005e38:	2301      	movs	r3, #1
 8005e3a:	e084      	b.n	8005f46 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005e42:	2b01      	cmp	r3, #1
 8005e44:	d101      	bne.n	8005e4a <HAL_UART_Receive+0x40>
 8005e46:	2302      	movs	r3, #2
 8005e48:	e07d      	b.n	8005f46 <HAL_UART_Receive+0x13c>
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	2201      	movs	r2, #1
 8005e4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	2200      	movs	r2, #0
 8005e56:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	2222      	movs	r2, #34	; 0x22
 8005e5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	2200      	movs	r2, #0
 8005e64:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005e66:	f7fb fed1 	bl	8001c0c <HAL_GetTick>
 8005e6a:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	88fa      	ldrh	r2, [r7, #6]
 8005e70:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	88fa      	ldrh	r2, [r7, #6]
 8005e76:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	689b      	ldr	r3, [r3, #8]
 8005e7c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e80:	d108      	bne.n	8005e94 <HAL_UART_Receive+0x8a>
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	691b      	ldr	r3, [r3, #16]
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d104      	bne.n	8005e94 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8005e8a:	2300      	movs	r3, #0
 8005e8c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005e8e:	68bb      	ldr	r3, [r7, #8]
 8005e90:	61bb      	str	r3, [r7, #24]
 8005e92:	e003      	b.n	8005e9c <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8005e94:	68bb      	ldr	r3, [r7, #8]
 8005e96:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005e98:	2300      	movs	r3, #0
 8005e9a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	2200      	movs	r2, #0
 8005ea0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8005ea4:	e043      	b.n	8005f2e <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8005ea6:	683b      	ldr	r3, [r7, #0]
 8005ea8:	9300      	str	r3, [sp, #0]
 8005eaa:	697b      	ldr	r3, [r7, #20]
 8005eac:	2200      	movs	r2, #0
 8005eae:	2120      	movs	r1, #32
 8005eb0:	68f8      	ldr	r0, [r7, #12]
 8005eb2:	f000 fc23 	bl	80066fc <UART_WaitOnFlagUntilTimeout>
 8005eb6:	4603      	mov	r3, r0
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d001      	beq.n	8005ec0 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8005ebc:	2303      	movs	r3, #3
 8005ebe:	e042      	b.n	8005f46 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8005ec0:	69fb      	ldr	r3, [r7, #28]
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d10c      	bne.n	8005ee0 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	685b      	ldr	r3, [r3, #4]
 8005ecc:	b29b      	uxth	r3, r3
 8005ece:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ed2:	b29a      	uxth	r2, r3
 8005ed4:	69bb      	ldr	r3, [r7, #24]
 8005ed6:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8005ed8:	69bb      	ldr	r3, [r7, #24]
 8005eda:	3302      	adds	r3, #2
 8005edc:	61bb      	str	r3, [r7, #24]
 8005ede:	e01f      	b.n	8005f20 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	689b      	ldr	r3, [r3, #8]
 8005ee4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ee8:	d007      	beq.n	8005efa <HAL_UART_Receive+0xf0>
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	689b      	ldr	r3, [r3, #8]
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d10a      	bne.n	8005f08 <HAL_UART_Receive+0xfe>
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	691b      	ldr	r3, [r3, #16]
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d106      	bne.n	8005f08 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	685b      	ldr	r3, [r3, #4]
 8005f00:	b2da      	uxtb	r2, r3
 8005f02:	69fb      	ldr	r3, [r7, #28]
 8005f04:	701a      	strb	r2, [r3, #0]
 8005f06:	e008      	b.n	8005f1a <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	685b      	ldr	r3, [r3, #4]
 8005f0e:	b2db      	uxtb	r3, r3
 8005f10:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005f14:	b2da      	uxtb	r2, r3
 8005f16:	69fb      	ldr	r3, [r7, #28]
 8005f18:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8005f1a:	69fb      	ldr	r3, [r7, #28]
 8005f1c:	3301      	adds	r3, #1
 8005f1e:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005f24:	b29b      	uxth	r3, r3
 8005f26:	3b01      	subs	r3, #1
 8005f28:	b29a      	uxth	r2, r3
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005f32:	b29b      	uxth	r3, r3
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d1b6      	bne.n	8005ea6 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	2220      	movs	r2, #32
 8005f3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8005f40:	2300      	movs	r3, #0
 8005f42:	e000      	b.n	8005f46 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8005f44:	2302      	movs	r3, #2
  }
}
 8005f46:	4618      	mov	r0, r3
 8005f48:	3720      	adds	r7, #32
 8005f4a:	46bd      	mov	sp, r7
 8005f4c:	bd80      	pop	{r7, pc}

08005f4e <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005f4e:	b580      	push	{r7, lr}
 8005f50:	b084      	sub	sp, #16
 8005f52:	af00      	add	r7, sp, #0
 8005f54:	60f8      	str	r0, [r7, #12]
 8005f56:	60b9      	str	r1, [r7, #8]
 8005f58:	4613      	mov	r3, r2
 8005f5a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005f62:	b2db      	uxtb	r3, r3
 8005f64:	2b20      	cmp	r3, #32
 8005f66:	d11d      	bne.n	8005fa4 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8005f68:	68bb      	ldr	r3, [r7, #8]
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d002      	beq.n	8005f74 <HAL_UART_Receive_DMA+0x26>
 8005f6e:	88fb      	ldrh	r3, [r7, #6]
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d101      	bne.n	8005f78 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8005f74:	2301      	movs	r3, #1
 8005f76:	e016      	b.n	8005fa6 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005f7e:	2b01      	cmp	r3, #1
 8005f80:	d101      	bne.n	8005f86 <HAL_UART_Receive_DMA+0x38>
 8005f82:	2302      	movs	r3, #2
 8005f84:	e00f      	b.n	8005fa6 <HAL_UART_Receive_DMA+0x58>
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	2201      	movs	r2, #1
 8005f8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	2200      	movs	r2, #0
 8005f92:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8005f94:	88fb      	ldrh	r3, [r7, #6]
 8005f96:	461a      	mov	r2, r3
 8005f98:	68b9      	ldr	r1, [r7, #8]
 8005f9a:	68f8      	ldr	r0, [r7, #12]
 8005f9c:	f000 fc1c 	bl	80067d8 <UART_Start_Receive_DMA>
 8005fa0:	4603      	mov	r3, r0
 8005fa2:	e000      	b.n	8005fa6 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8005fa4:	2302      	movs	r3, #2
  }
}
 8005fa6:	4618      	mov	r0, r3
 8005fa8:	3710      	adds	r7, #16
 8005faa:	46bd      	mov	sp, r7
 8005fac:	bd80      	pop	{r7, pc}
	...

08005fb0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005fb0:	b580      	push	{r7, lr}
 8005fb2:	b0ba      	sub	sp, #232	; 0xe8
 8005fb4:	af00      	add	r7, sp, #0
 8005fb6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	68db      	ldr	r3, [r3, #12]
 8005fc8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	695b      	ldr	r3, [r3, #20]
 8005fd2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8005fd6:	2300      	movs	r3, #0
 8005fd8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8005fdc:	2300      	movs	r3, #0
 8005fde:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005fe2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005fe6:	f003 030f 	and.w	r3, r3, #15
 8005fea:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8005fee:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d10f      	bne.n	8006016 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005ff6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005ffa:	f003 0320 	and.w	r3, r3, #32
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d009      	beq.n	8006016 <HAL_UART_IRQHandler+0x66>
 8006002:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006006:	f003 0320 	and.w	r3, r3, #32
 800600a:	2b00      	cmp	r3, #0
 800600c:	d003      	beq.n	8006016 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800600e:	6878      	ldr	r0, [r7, #4]
 8006010:	f000 fd87 	bl	8006b22 <UART_Receive_IT>
      return;
 8006014:	e256      	b.n	80064c4 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8006016:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800601a:	2b00      	cmp	r3, #0
 800601c:	f000 80de 	beq.w	80061dc <HAL_UART_IRQHandler+0x22c>
 8006020:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006024:	f003 0301 	and.w	r3, r3, #1
 8006028:	2b00      	cmp	r3, #0
 800602a:	d106      	bne.n	800603a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800602c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006030:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006034:	2b00      	cmp	r3, #0
 8006036:	f000 80d1 	beq.w	80061dc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800603a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800603e:	f003 0301 	and.w	r3, r3, #1
 8006042:	2b00      	cmp	r3, #0
 8006044:	d00b      	beq.n	800605e <HAL_UART_IRQHandler+0xae>
 8006046:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800604a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800604e:	2b00      	cmp	r3, #0
 8006050:	d005      	beq.n	800605e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006056:	f043 0201 	orr.w	r2, r3, #1
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800605e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006062:	f003 0304 	and.w	r3, r3, #4
 8006066:	2b00      	cmp	r3, #0
 8006068:	d00b      	beq.n	8006082 <HAL_UART_IRQHandler+0xd2>
 800606a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800606e:	f003 0301 	and.w	r3, r3, #1
 8006072:	2b00      	cmp	r3, #0
 8006074:	d005      	beq.n	8006082 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800607a:	f043 0202 	orr.w	r2, r3, #2
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006082:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006086:	f003 0302 	and.w	r3, r3, #2
 800608a:	2b00      	cmp	r3, #0
 800608c:	d00b      	beq.n	80060a6 <HAL_UART_IRQHandler+0xf6>
 800608e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006092:	f003 0301 	and.w	r3, r3, #1
 8006096:	2b00      	cmp	r3, #0
 8006098:	d005      	beq.n	80060a6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800609e:	f043 0204 	orr.w	r2, r3, #4
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80060a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80060aa:	f003 0308 	and.w	r3, r3, #8
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d011      	beq.n	80060d6 <HAL_UART_IRQHandler+0x126>
 80060b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80060b6:	f003 0320 	and.w	r3, r3, #32
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d105      	bne.n	80060ca <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80060be:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80060c2:	f003 0301 	and.w	r3, r3, #1
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d005      	beq.n	80060d6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060ce:	f043 0208 	orr.w	r2, r3, #8
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060da:	2b00      	cmp	r3, #0
 80060dc:	f000 81ed 	beq.w	80064ba <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80060e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80060e4:	f003 0320 	and.w	r3, r3, #32
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d008      	beq.n	80060fe <HAL_UART_IRQHandler+0x14e>
 80060ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80060f0:	f003 0320 	and.w	r3, r3, #32
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d002      	beq.n	80060fe <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80060f8:	6878      	ldr	r0, [r7, #4]
 80060fa:	f000 fd12 	bl	8006b22 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	695b      	ldr	r3, [r3, #20]
 8006104:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006108:	2b40      	cmp	r3, #64	; 0x40
 800610a:	bf0c      	ite	eq
 800610c:	2301      	moveq	r3, #1
 800610e:	2300      	movne	r3, #0
 8006110:	b2db      	uxtb	r3, r3
 8006112:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800611a:	f003 0308 	and.w	r3, r3, #8
 800611e:	2b00      	cmp	r3, #0
 8006120:	d103      	bne.n	800612a <HAL_UART_IRQHandler+0x17a>
 8006122:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006126:	2b00      	cmp	r3, #0
 8006128:	d04f      	beq.n	80061ca <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800612a:	6878      	ldr	r0, [r7, #4]
 800612c:	f000 fc1a 	bl	8006964 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	695b      	ldr	r3, [r3, #20]
 8006136:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800613a:	2b40      	cmp	r3, #64	; 0x40
 800613c:	d141      	bne.n	80061c2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	3314      	adds	r3, #20
 8006144:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006148:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800614c:	e853 3f00 	ldrex	r3, [r3]
 8006150:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006154:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006158:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800615c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	3314      	adds	r3, #20
 8006166:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800616a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800616e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006172:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006176:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800617a:	e841 2300 	strex	r3, r2, [r1]
 800617e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006182:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006186:	2b00      	cmp	r3, #0
 8006188:	d1d9      	bne.n	800613e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800618e:	2b00      	cmp	r3, #0
 8006190:	d013      	beq.n	80061ba <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006196:	4a7d      	ldr	r2, [pc, #500]	; (800638c <HAL_UART_IRQHandler+0x3dc>)
 8006198:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800619e:	4618      	mov	r0, r3
 80061a0:	f7fb ffec 	bl	800217c <HAL_DMA_Abort_IT>
 80061a4:	4603      	mov	r3, r0
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d016      	beq.n	80061d8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80061b0:	687a      	ldr	r2, [r7, #4]
 80061b2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80061b4:	4610      	mov	r0, r2
 80061b6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80061b8:	e00e      	b.n	80061d8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80061ba:	6878      	ldr	r0, [r7, #4]
 80061bc:	f000 f990 	bl	80064e0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80061c0:	e00a      	b.n	80061d8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80061c2:	6878      	ldr	r0, [r7, #4]
 80061c4:	f000 f98c 	bl	80064e0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80061c8:	e006      	b.n	80061d8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80061ca:	6878      	ldr	r0, [r7, #4]
 80061cc:	f000 f988 	bl	80064e0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	2200      	movs	r2, #0
 80061d4:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80061d6:	e170      	b.n	80064ba <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80061d8:	bf00      	nop
    return;
 80061da:	e16e      	b.n	80064ba <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061e0:	2b01      	cmp	r3, #1
 80061e2:	f040 814a 	bne.w	800647a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80061e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80061ea:	f003 0310 	and.w	r3, r3, #16
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	f000 8143 	beq.w	800647a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80061f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80061f8:	f003 0310 	and.w	r3, r3, #16
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	f000 813c 	beq.w	800647a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006202:	2300      	movs	r3, #0
 8006204:	60bb      	str	r3, [r7, #8]
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	60bb      	str	r3, [r7, #8]
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	685b      	ldr	r3, [r3, #4]
 8006214:	60bb      	str	r3, [r7, #8]
 8006216:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	695b      	ldr	r3, [r3, #20]
 800621e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006222:	2b40      	cmp	r3, #64	; 0x40
 8006224:	f040 80b4 	bne.w	8006390 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	685b      	ldr	r3, [r3, #4]
 8006230:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006234:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006238:	2b00      	cmp	r3, #0
 800623a:	f000 8140 	beq.w	80064be <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006242:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006246:	429a      	cmp	r2, r3
 8006248:	f080 8139 	bcs.w	80064be <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006252:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006258:	69db      	ldr	r3, [r3, #28]
 800625a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800625e:	f000 8088 	beq.w	8006372 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	330c      	adds	r3, #12
 8006268:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800626c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006270:	e853 3f00 	ldrex	r3, [r3]
 8006274:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006278:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800627c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006280:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	330c      	adds	r3, #12
 800628a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800628e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006292:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006296:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800629a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800629e:	e841 2300 	strex	r3, r2, [r1]
 80062a2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80062a6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d1d9      	bne.n	8006262 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	3314      	adds	r3, #20
 80062b4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062b6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80062b8:	e853 3f00 	ldrex	r3, [r3]
 80062bc:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80062be:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80062c0:	f023 0301 	bic.w	r3, r3, #1
 80062c4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	3314      	adds	r3, #20
 80062ce:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80062d2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80062d6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062d8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80062da:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80062de:	e841 2300 	strex	r3, r2, [r1]
 80062e2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80062e4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d1e1      	bne.n	80062ae <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	3314      	adds	r3, #20
 80062f0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062f2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80062f4:	e853 3f00 	ldrex	r3, [r3]
 80062f8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80062fa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80062fc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006300:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	3314      	adds	r3, #20
 800630a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800630e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006310:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006312:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006314:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006316:	e841 2300 	strex	r3, r2, [r1]
 800631a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800631c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800631e:	2b00      	cmp	r3, #0
 8006320:	d1e3      	bne.n	80062ea <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	2220      	movs	r2, #32
 8006326:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	2200      	movs	r2, #0
 800632e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	330c      	adds	r3, #12
 8006336:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006338:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800633a:	e853 3f00 	ldrex	r3, [r3]
 800633e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006340:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006342:	f023 0310 	bic.w	r3, r3, #16
 8006346:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	330c      	adds	r3, #12
 8006350:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8006354:	65ba      	str	r2, [r7, #88]	; 0x58
 8006356:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006358:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800635a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800635c:	e841 2300 	strex	r3, r2, [r1]
 8006360:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006362:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006364:	2b00      	cmp	r3, #0
 8006366:	d1e3      	bne.n	8006330 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800636c:	4618      	mov	r0, r3
 800636e:	f7fb fe95 	bl	800209c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800637a:	b29b      	uxth	r3, r3
 800637c:	1ad3      	subs	r3, r2, r3
 800637e:	b29b      	uxth	r3, r3
 8006380:	4619      	mov	r1, r3
 8006382:	6878      	ldr	r0, [r7, #4]
 8006384:	f000 f8b6 	bl	80064f4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006388:	e099      	b.n	80064be <HAL_UART_IRQHandler+0x50e>
 800638a:	bf00      	nop
 800638c:	08006a2b 	.word	0x08006a2b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006398:	b29b      	uxth	r3, r3
 800639a:	1ad3      	subs	r3, r2, r3
 800639c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80063a4:	b29b      	uxth	r3, r3
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	f000 808b 	beq.w	80064c2 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80063ac:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	f000 8086 	beq.w	80064c2 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	330c      	adds	r3, #12
 80063bc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063c0:	e853 3f00 	ldrex	r3, [r3]
 80063c4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80063c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80063c8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80063cc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	330c      	adds	r3, #12
 80063d6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80063da:	647a      	str	r2, [r7, #68]	; 0x44
 80063dc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063de:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80063e0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80063e2:	e841 2300 	strex	r3, r2, [r1]
 80063e6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80063e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d1e3      	bne.n	80063b6 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	3314      	adds	r3, #20
 80063f4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063f8:	e853 3f00 	ldrex	r3, [r3]
 80063fc:	623b      	str	r3, [r7, #32]
   return(result);
 80063fe:	6a3b      	ldr	r3, [r7, #32]
 8006400:	f023 0301 	bic.w	r3, r3, #1
 8006404:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	3314      	adds	r3, #20
 800640e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006412:	633a      	str	r2, [r7, #48]	; 0x30
 8006414:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006416:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006418:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800641a:	e841 2300 	strex	r3, r2, [r1]
 800641e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006420:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006422:	2b00      	cmp	r3, #0
 8006424:	d1e3      	bne.n	80063ee <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	2220      	movs	r2, #32
 800642a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	2200      	movs	r2, #0
 8006432:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	330c      	adds	r3, #12
 800643a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800643c:	693b      	ldr	r3, [r7, #16]
 800643e:	e853 3f00 	ldrex	r3, [r3]
 8006442:	60fb      	str	r3, [r7, #12]
   return(result);
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	f023 0310 	bic.w	r3, r3, #16
 800644a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	330c      	adds	r3, #12
 8006454:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8006458:	61fa      	str	r2, [r7, #28]
 800645a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800645c:	69b9      	ldr	r1, [r7, #24]
 800645e:	69fa      	ldr	r2, [r7, #28]
 8006460:	e841 2300 	strex	r3, r2, [r1]
 8006464:	617b      	str	r3, [r7, #20]
   return(result);
 8006466:	697b      	ldr	r3, [r7, #20]
 8006468:	2b00      	cmp	r3, #0
 800646a:	d1e3      	bne.n	8006434 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800646c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006470:	4619      	mov	r1, r3
 8006472:	6878      	ldr	r0, [r7, #4]
 8006474:	f000 f83e 	bl	80064f4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006478:	e023      	b.n	80064c2 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800647a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800647e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006482:	2b00      	cmp	r3, #0
 8006484:	d009      	beq.n	800649a <HAL_UART_IRQHandler+0x4ea>
 8006486:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800648a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800648e:	2b00      	cmp	r3, #0
 8006490:	d003      	beq.n	800649a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8006492:	6878      	ldr	r0, [r7, #4]
 8006494:	f000 fadd 	bl	8006a52 <UART_Transmit_IT>
    return;
 8006498:	e014      	b.n	80064c4 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800649a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800649e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d00e      	beq.n	80064c4 <HAL_UART_IRQHandler+0x514>
 80064a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80064aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d008      	beq.n	80064c4 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80064b2:	6878      	ldr	r0, [r7, #4]
 80064b4:	f000 fb1d 	bl	8006af2 <UART_EndTransmit_IT>
    return;
 80064b8:	e004      	b.n	80064c4 <HAL_UART_IRQHandler+0x514>
    return;
 80064ba:	bf00      	nop
 80064bc:	e002      	b.n	80064c4 <HAL_UART_IRQHandler+0x514>
      return;
 80064be:	bf00      	nop
 80064c0:	e000      	b.n	80064c4 <HAL_UART_IRQHandler+0x514>
      return;
 80064c2:	bf00      	nop
  }
}
 80064c4:	37e8      	adds	r7, #232	; 0xe8
 80064c6:	46bd      	mov	sp, r7
 80064c8:	bd80      	pop	{r7, pc}
 80064ca:	bf00      	nop

080064cc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80064cc:	b480      	push	{r7}
 80064ce:	b083      	sub	sp, #12
 80064d0:	af00      	add	r7, sp, #0
 80064d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80064d4:	bf00      	nop
 80064d6:	370c      	adds	r7, #12
 80064d8:	46bd      	mov	sp, r7
 80064da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064de:	4770      	bx	lr

080064e0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80064e0:	b480      	push	{r7}
 80064e2:	b083      	sub	sp, #12
 80064e4:	af00      	add	r7, sp, #0
 80064e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80064e8:	bf00      	nop
 80064ea:	370c      	adds	r7, #12
 80064ec:	46bd      	mov	sp, r7
 80064ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f2:	4770      	bx	lr

080064f4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80064f4:	b480      	push	{r7}
 80064f6:	b083      	sub	sp, #12
 80064f8:	af00      	add	r7, sp, #0
 80064fa:	6078      	str	r0, [r7, #4]
 80064fc:	460b      	mov	r3, r1
 80064fe:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006500:	bf00      	nop
 8006502:	370c      	adds	r7, #12
 8006504:	46bd      	mov	sp, r7
 8006506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800650a:	4770      	bx	lr

0800650c <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800650c:	b580      	push	{r7, lr}
 800650e:	b09c      	sub	sp, #112	; 0x70
 8006510:	af00      	add	r7, sp, #0
 8006512:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006518:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006524:	2b00      	cmp	r3, #0
 8006526:	d172      	bne.n	800660e <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8006528:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800652a:	2200      	movs	r2, #0
 800652c:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800652e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	330c      	adds	r3, #12
 8006534:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006536:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006538:	e853 3f00 	ldrex	r3, [r3]
 800653c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800653e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006540:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006544:	66bb      	str	r3, [r7, #104]	; 0x68
 8006546:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	330c      	adds	r3, #12
 800654c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800654e:	65ba      	str	r2, [r7, #88]	; 0x58
 8006550:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006552:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006554:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006556:	e841 2300 	strex	r3, r2, [r1]
 800655a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800655c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800655e:	2b00      	cmp	r3, #0
 8006560:	d1e5      	bne.n	800652e <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006562:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	3314      	adds	r3, #20
 8006568:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800656a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800656c:	e853 3f00 	ldrex	r3, [r3]
 8006570:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006572:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006574:	f023 0301 	bic.w	r3, r3, #1
 8006578:	667b      	str	r3, [r7, #100]	; 0x64
 800657a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	3314      	adds	r3, #20
 8006580:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8006582:	647a      	str	r2, [r7, #68]	; 0x44
 8006584:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006586:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006588:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800658a:	e841 2300 	strex	r3, r2, [r1]
 800658e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006590:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006592:	2b00      	cmp	r3, #0
 8006594:	d1e5      	bne.n	8006562 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006596:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	3314      	adds	r3, #20
 800659c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800659e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065a0:	e853 3f00 	ldrex	r3, [r3]
 80065a4:	623b      	str	r3, [r7, #32]
   return(result);
 80065a6:	6a3b      	ldr	r3, [r7, #32]
 80065a8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80065ac:	663b      	str	r3, [r7, #96]	; 0x60
 80065ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	3314      	adds	r3, #20
 80065b4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80065b6:	633a      	str	r2, [r7, #48]	; 0x30
 80065b8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065ba:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80065bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80065be:	e841 2300 	strex	r3, r2, [r1]
 80065c2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80065c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d1e5      	bne.n	8006596 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80065ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80065cc:	2220      	movs	r2, #32
 80065ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80065d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80065d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065d6:	2b01      	cmp	r3, #1
 80065d8:	d119      	bne.n	800660e <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80065da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	330c      	adds	r3, #12
 80065e0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065e2:	693b      	ldr	r3, [r7, #16]
 80065e4:	e853 3f00 	ldrex	r3, [r3]
 80065e8:	60fb      	str	r3, [r7, #12]
   return(result);
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	f023 0310 	bic.w	r3, r3, #16
 80065f0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80065f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	330c      	adds	r3, #12
 80065f8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80065fa:	61fa      	str	r2, [r7, #28]
 80065fc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065fe:	69b9      	ldr	r1, [r7, #24]
 8006600:	69fa      	ldr	r2, [r7, #28]
 8006602:	e841 2300 	strex	r3, r2, [r1]
 8006606:	617b      	str	r3, [r7, #20]
   return(result);
 8006608:	697b      	ldr	r3, [r7, #20]
 800660a:	2b00      	cmp	r3, #0
 800660c:	d1e5      	bne.n	80065da <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800660e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006612:	2b01      	cmp	r3, #1
 8006614:	d106      	bne.n	8006624 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006616:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006618:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800661a:	4619      	mov	r1, r3
 800661c:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800661e:	f7ff ff69 	bl	80064f4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006622:	e002      	b.n	800662a <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8006624:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8006626:	f7fa ff25 	bl	8001474 <HAL_UART_RxCpltCallback>
}
 800662a:	bf00      	nop
 800662c:	3770      	adds	r7, #112	; 0x70
 800662e:	46bd      	mov	sp, r7
 8006630:	bd80      	pop	{r7, pc}

08006632 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006632:	b580      	push	{r7, lr}
 8006634:	b084      	sub	sp, #16
 8006636:	af00      	add	r7, sp, #0
 8006638:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800663e:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006644:	2b01      	cmp	r3, #1
 8006646:	d108      	bne.n	800665a <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800664c:	085b      	lsrs	r3, r3, #1
 800664e:	b29b      	uxth	r3, r3
 8006650:	4619      	mov	r1, r3
 8006652:	68f8      	ldr	r0, [r7, #12]
 8006654:	f7ff ff4e 	bl	80064f4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006658:	e002      	b.n	8006660 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 800665a:	68f8      	ldr	r0, [r7, #12]
 800665c:	f7fa ff32 	bl	80014c4 <HAL_UART_RxHalfCpltCallback>
}
 8006660:	bf00      	nop
 8006662:	3710      	adds	r7, #16
 8006664:	46bd      	mov	sp, r7
 8006666:	bd80      	pop	{r7, pc}

08006668 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8006668:	b580      	push	{r7, lr}
 800666a:	b084      	sub	sp, #16
 800666c:	af00      	add	r7, sp, #0
 800666e:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8006670:	2300      	movs	r3, #0
 8006672:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006678:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800667a:	68bb      	ldr	r3, [r7, #8]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	695b      	ldr	r3, [r3, #20]
 8006680:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006684:	2b80      	cmp	r3, #128	; 0x80
 8006686:	bf0c      	ite	eq
 8006688:	2301      	moveq	r3, #1
 800668a:	2300      	movne	r3, #0
 800668c:	b2db      	uxtb	r3, r3
 800668e:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8006690:	68bb      	ldr	r3, [r7, #8]
 8006692:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006696:	b2db      	uxtb	r3, r3
 8006698:	2b21      	cmp	r3, #33	; 0x21
 800669a:	d108      	bne.n	80066ae <UART_DMAError+0x46>
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d005      	beq.n	80066ae <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80066a2:	68bb      	ldr	r3, [r7, #8]
 80066a4:	2200      	movs	r2, #0
 80066a6:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80066a8:	68b8      	ldr	r0, [r7, #8]
 80066aa:	f000 f933 	bl	8006914 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80066ae:	68bb      	ldr	r3, [r7, #8]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	695b      	ldr	r3, [r3, #20]
 80066b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066b8:	2b40      	cmp	r3, #64	; 0x40
 80066ba:	bf0c      	ite	eq
 80066bc:	2301      	moveq	r3, #1
 80066be:	2300      	movne	r3, #0
 80066c0:	b2db      	uxtb	r3, r3
 80066c2:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80066c4:	68bb      	ldr	r3, [r7, #8]
 80066c6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80066ca:	b2db      	uxtb	r3, r3
 80066cc:	2b22      	cmp	r3, #34	; 0x22
 80066ce:	d108      	bne.n	80066e2 <UART_DMAError+0x7a>
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d005      	beq.n	80066e2 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80066d6:	68bb      	ldr	r3, [r7, #8]
 80066d8:	2200      	movs	r2, #0
 80066da:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80066dc:	68b8      	ldr	r0, [r7, #8]
 80066de:	f000 f941 	bl	8006964 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80066e2:	68bb      	ldr	r3, [r7, #8]
 80066e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066e6:	f043 0210 	orr.w	r2, r3, #16
 80066ea:	68bb      	ldr	r3, [r7, #8]
 80066ec:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80066ee:	68b8      	ldr	r0, [r7, #8]
 80066f0:	f7ff fef6 	bl	80064e0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80066f4:	bf00      	nop
 80066f6:	3710      	adds	r7, #16
 80066f8:	46bd      	mov	sp, r7
 80066fa:	bd80      	pop	{r7, pc}

080066fc <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80066fc:	b580      	push	{r7, lr}
 80066fe:	b090      	sub	sp, #64	; 0x40
 8006700:	af00      	add	r7, sp, #0
 8006702:	60f8      	str	r0, [r7, #12]
 8006704:	60b9      	str	r1, [r7, #8]
 8006706:	603b      	str	r3, [r7, #0]
 8006708:	4613      	mov	r3, r2
 800670a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800670c:	e050      	b.n	80067b0 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800670e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006710:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006714:	d04c      	beq.n	80067b0 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006716:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006718:	2b00      	cmp	r3, #0
 800671a:	d007      	beq.n	800672c <UART_WaitOnFlagUntilTimeout+0x30>
 800671c:	f7fb fa76 	bl	8001c0c <HAL_GetTick>
 8006720:	4602      	mov	r2, r0
 8006722:	683b      	ldr	r3, [r7, #0]
 8006724:	1ad3      	subs	r3, r2, r3
 8006726:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006728:	429a      	cmp	r2, r3
 800672a:	d241      	bcs.n	80067b0 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	330c      	adds	r3, #12
 8006732:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006734:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006736:	e853 3f00 	ldrex	r3, [r3]
 800673a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800673c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800673e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006742:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	330c      	adds	r3, #12
 800674a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800674c:	637a      	str	r2, [r7, #52]	; 0x34
 800674e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006750:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006752:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006754:	e841 2300 	strex	r3, r2, [r1]
 8006758:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800675a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800675c:	2b00      	cmp	r3, #0
 800675e:	d1e5      	bne.n	800672c <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	3314      	adds	r3, #20
 8006766:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006768:	697b      	ldr	r3, [r7, #20]
 800676a:	e853 3f00 	ldrex	r3, [r3]
 800676e:	613b      	str	r3, [r7, #16]
   return(result);
 8006770:	693b      	ldr	r3, [r7, #16]
 8006772:	f023 0301 	bic.w	r3, r3, #1
 8006776:	63bb      	str	r3, [r7, #56]	; 0x38
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	3314      	adds	r3, #20
 800677e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006780:	623a      	str	r2, [r7, #32]
 8006782:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006784:	69f9      	ldr	r1, [r7, #28]
 8006786:	6a3a      	ldr	r2, [r7, #32]
 8006788:	e841 2300 	strex	r3, r2, [r1]
 800678c:	61bb      	str	r3, [r7, #24]
   return(result);
 800678e:	69bb      	ldr	r3, [r7, #24]
 8006790:	2b00      	cmp	r3, #0
 8006792:	d1e5      	bne.n	8006760 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	2220      	movs	r2, #32
 8006798:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	2220      	movs	r2, #32
 80067a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	2200      	movs	r2, #0
 80067a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80067ac:	2303      	movs	r3, #3
 80067ae:	e00f      	b.n	80067d0 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	681a      	ldr	r2, [r3, #0]
 80067b6:	68bb      	ldr	r3, [r7, #8]
 80067b8:	4013      	ands	r3, r2
 80067ba:	68ba      	ldr	r2, [r7, #8]
 80067bc:	429a      	cmp	r2, r3
 80067be:	bf0c      	ite	eq
 80067c0:	2301      	moveq	r3, #1
 80067c2:	2300      	movne	r3, #0
 80067c4:	b2db      	uxtb	r3, r3
 80067c6:	461a      	mov	r2, r3
 80067c8:	79fb      	ldrb	r3, [r7, #7]
 80067ca:	429a      	cmp	r2, r3
 80067cc:	d09f      	beq.n	800670e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80067ce:	2300      	movs	r3, #0
}
 80067d0:	4618      	mov	r0, r3
 80067d2:	3740      	adds	r7, #64	; 0x40
 80067d4:	46bd      	mov	sp, r7
 80067d6:	bd80      	pop	{r7, pc}

080067d8 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80067d8:	b580      	push	{r7, lr}
 80067da:	b098      	sub	sp, #96	; 0x60
 80067dc:	af00      	add	r7, sp, #0
 80067de:	60f8      	str	r0, [r7, #12]
 80067e0:	60b9      	str	r1, [r7, #8]
 80067e2:	4613      	mov	r3, r2
 80067e4:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 80067e6:	68ba      	ldr	r2, [r7, #8]
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	88fa      	ldrh	r2, [r7, #6]
 80067f0:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	2200      	movs	r2, #0
 80067f6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	2222      	movs	r2, #34	; 0x22
 80067fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006804:	4a40      	ldr	r2, [pc, #256]	; (8006908 <UART_Start_Receive_DMA+0x130>)
 8006806:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800680c:	4a3f      	ldr	r2, [pc, #252]	; (800690c <UART_Start_Receive_DMA+0x134>)
 800680e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006814:	4a3e      	ldr	r2, [pc, #248]	; (8006910 <UART_Start_Receive_DMA+0x138>)
 8006816:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800681c:	2200      	movs	r2, #0
 800681e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8006820:	f107 0308 	add.w	r3, r7, #8
 8006824:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	3304      	adds	r3, #4
 8006830:	4619      	mov	r1, r3
 8006832:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006834:	681a      	ldr	r2, [r3, #0]
 8006836:	88fb      	ldrh	r3, [r7, #6]
 8006838:	f7fb fbd8 	bl	8001fec <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800683c:	2300      	movs	r3, #0
 800683e:	613b      	str	r3, [r7, #16]
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	613b      	str	r3, [r7, #16]
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	685b      	ldr	r3, [r3, #4]
 800684e:	613b      	str	r3, [r7, #16]
 8006850:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	2200      	movs	r2, #0
 8006856:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	691b      	ldr	r3, [r3, #16]
 800685e:	2b00      	cmp	r3, #0
 8006860:	d019      	beq.n	8006896 <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	330c      	adds	r3, #12
 8006868:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800686a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800686c:	e853 3f00 	ldrex	r3, [r3]
 8006870:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006872:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006874:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006878:	65bb      	str	r3, [r7, #88]	; 0x58
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	330c      	adds	r3, #12
 8006880:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006882:	64fa      	str	r2, [r7, #76]	; 0x4c
 8006884:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006886:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8006888:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800688a:	e841 2300 	strex	r3, r2, [r1]
 800688e:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8006890:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006892:	2b00      	cmp	r3, #0
 8006894:	d1e5      	bne.n	8006862 <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	3314      	adds	r3, #20
 800689c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800689e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068a0:	e853 3f00 	ldrex	r3, [r3]
 80068a4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80068a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068a8:	f043 0301 	orr.w	r3, r3, #1
 80068ac:	657b      	str	r3, [r7, #84]	; 0x54
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	3314      	adds	r3, #20
 80068b4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80068b6:	63ba      	str	r2, [r7, #56]	; 0x38
 80068b8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068ba:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80068bc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80068be:	e841 2300 	strex	r3, r2, [r1]
 80068c2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80068c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d1e5      	bne.n	8006896 <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	3314      	adds	r3, #20
 80068d0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068d2:	69bb      	ldr	r3, [r7, #24]
 80068d4:	e853 3f00 	ldrex	r3, [r3]
 80068d8:	617b      	str	r3, [r7, #20]
   return(result);
 80068da:	697b      	ldr	r3, [r7, #20]
 80068dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80068e0:	653b      	str	r3, [r7, #80]	; 0x50
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	3314      	adds	r3, #20
 80068e8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80068ea:	627a      	str	r2, [r7, #36]	; 0x24
 80068ec:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068ee:	6a39      	ldr	r1, [r7, #32]
 80068f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80068f2:	e841 2300 	strex	r3, r2, [r1]
 80068f6:	61fb      	str	r3, [r7, #28]
   return(result);
 80068f8:	69fb      	ldr	r3, [r7, #28]
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d1e5      	bne.n	80068ca <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 80068fe:	2300      	movs	r3, #0
}
 8006900:	4618      	mov	r0, r3
 8006902:	3760      	adds	r7, #96	; 0x60
 8006904:	46bd      	mov	sp, r7
 8006906:	bd80      	pop	{r7, pc}
 8006908:	0800650d 	.word	0x0800650d
 800690c:	08006633 	.word	0x08006633
 8006910:	08006669 	.word	0x08006669

08006914 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8006914:	b480      	push	{r7}
 8006916:	b089      	sub	sp, #36	; 0x24
 8006918:	af00      	add	r7, sp, #0
 800691a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	330c      	adds	r3, #12
 8006922:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	e853 3f00 	ldrex	r3, [r3]
 800692a:	60bb      	str	r3, [r7, #8]
   return(result);
 800692c:	68bb      	ldr	r3, [r7, #8]
 800692e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8006932:	61fb      	str	r3, [r7, #28]
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	330c      	adds	r3, #12
 800693a:	69fa      	ldr	r2, [r7, #28]
 800693c:	61ba      	str	r2, [r7, #24]
 800693e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006940:	6979      	ldr	r1, [r7, #20]
 8006942:	69ba      	ldr	r2, [r7, #24]
 8006944:	e841 2300 	strex	r3, r2, [r1]
 8006948:	613b      	str	r3, [r7, #16]
   return(result);
 800694a:	693b      	ldr	r3, [r7, #16]
 800694c:	2b00      	cmp	r3, #0
 800694e:	d1e5      	bne.n	800691c <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	2220      	movs	r2, #32
 8006954:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8006958:	bf00      	nop
 800695a:	3724      	adds	r7, #36	; 0x24
 800695c:	46bd      	mov	sp, r7
 800695e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006962:	4770      	bx	lr

08006964 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006964:	b480      	push	{r7}
 8006966:	b095      	sub	sp, #84	; 0x54
 8006968:	af00      	add	r7, sp, #0
 800696a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	330c      	adds	r3, #12
 8006972:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006974:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006976:	e853 3f00 	ldrex	r3, [r3]
 800697a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800697c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800697e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006982:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	330c      	adds	r3, #12
 800698a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800698c:	643a      	str	r2, [r7, #64]	; 0x40
 800698e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006990:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006992:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006994:	e841 2300 	strex	r3, r2, [r1]
 8006998:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800699a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800699c:	2b00      	cmp	r3, #0
 800699e:	d1e5      	bne.n	800696c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	3314      	adds	r3, #20
 80069a6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069a8:	6a3b      	ldr	r3, [r7, #32]
 80069aa:	e853 3f00 	ldrex	r3, [r3]
 80069ae:	61fb      	str	r3, [r7, #28]
   return(result);
 80069b0:	69fb      	ldr	r3, [r7, #28]
 80069b2:	f023 0301 	bic.w	r3, r3, #1
 80069b6:	64bb      	str	r3, [r7, #72]	; 0x48
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	3314      	adds	r3, #20
 80069be:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80069c0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80069c2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069c4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80069c6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80069c8:	e841 2300 	strex	r3, r2, [r1]
 80069cc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80069ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d1e5      	bne.n	80069a0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069d8:	2b01      	cmp	r3, #1
 80069da:	d119      	bne.n	8006a10 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	330c      	adds	r3, #12
 80069e2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	e853 3f00 	ldrex	r3, [r3]
 80069ea:	60bb      	str	r3, [r7, #8]
   return(result);
 80069ec:	68bb      	ldr	r3, [r7, #8]
 80069ee:	f023 0310 	bic.w	r3, r3, #16
 80069f2:	647b      	str	r3, [r7, #68]	; 0x44
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	330c      	adds	r3, #12
 80069fa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80069fc:	61ba      	str	r2, [r7, #24]
 80069fe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a00:	6979      	ldr	r1, [r7, #20]
 8006a02:	69ba      	ldr	r2, [r7, #24]
 8006a04:	e841 2300 	strex	r3, r2, [r1]
 8006a08:	613b      	str	r3, [r7, #16]
   return(result);
 8006a0a:	693b      	ldr	r3, [r7, #16]
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d1e5      	bne.n	80069dc <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	2220      	movs	r2, #32
 8006a14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	2200      	movs	r2, #0
 8006a1c:	631a      	str	r2, [r3, #48]	; 0x30
}
 8006a1e:	bf00      	nop
 8006a20:	3754      	adds	r7, #84	; 0x54
 8006a22:	46bd      	mov	sp, r7
 8006a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a28:	4770      	bx	lr

08006a2a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006a2a:	b580      	push	{r7, lr}
 8006a2c:	b084      	sub	sp, #16
 8006a2e:	af00      	add	r7, sp, #0
 8006a30:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a36:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	2200      	movs	r2, #0
 8006a3c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	2200      	movs	r2, #0
 8006a42:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006a44:	68f8      	ldr	r0, [r7, #12]
 8006a46:	f7ff fd4b 	bl	80064e0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006a4a:	bf00      	nop
 8006a4c:	3710      	adds	r7, #16
 8006a4e:	46bd      	mov	sp, r7
 8006a50:	bd80      	pop	{r7, pc}

08006a52 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006a52:	b480      	push	{r7}
 8006a54:	b085      	sub	sp, #20
 8006a56:	af00      	add	r7, sp, #0
 8006a58:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006a60:	b2db      	uxtb	r3, r3
 8006a62:	2b21      	cmp	r3, #33	; 0x21
 8006a64:	d13e      	bne.n	8006ae4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	689b      	ldr	r3, [r3, #8]
 8006a6a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a6e:	d114      	bne.n	8006a9a <UART_Transmit_IT+0x48>
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	691b      	ldr	r3, [r3, #16]
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d110      	bne.n	8006a9a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	6a1b      	ldr	r3, [r3, #32]
 8006a7c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	881b      	ldrh	r3, [r3, #0]
 8006a82:	461a      	mov	r2, r3
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006a8c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	6a1b      	ldr	r3, [r3, #32]
 8006a92:	1c9a      	adds	r2, r3, #2
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	621a      	str	r2, [r3, #32]
 8006a98:	e008      	b.n	8006aac <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	6a1b      	ldr	r3, [r3, #32]
 8006a9e:	1c59      	adds	r1, r3, #1
 8006aa0:	687a      	ldr	r2, [r7, #4]
 8006aa2:	6211      	str	r1, [r2, #32]
 8006aa4:	781a      	ldrb	r2, [r3, #0]
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006ab0:	b29b      	uxth	r3, r3
 8006ab2:	3b01      	subs	r3, #1
 8006ab4:	b29b      	uxth	r3, r3
 8006ab6:	687a      	ldr	r2, [r7, #4]
 8006ab8:	4619      	mov	r1, r3
 8006aba:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d10f      	bne.n	8006ae0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	68da      	ldr	r2, [r3, #12]
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006ace:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	68da      	ldr	r2, [r3, #12]
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006ade:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006ae0:	2300      	movs	r3, #0
 8006ae2:	e000      	b.n	8006ae6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006ae4:	2302      	movs	r3, #2
  }
}
 8006ae6:	4618      	mov	r0, r3
 8006ae8:	3714      	adds	r7, #20
 8006aea:	46bd      	mov	sp, r7
 8006aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af0:	4770      	bx	lr

08006af2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006af2:	b580      	push	{r7, lr}
 8006af4:	b082      	sub	sp, #8
 8006af6:	af00      	add	r7, sp, #0
 8006af8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	68da      	ldr	r2, [r3, #12]
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006b08:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	2220      	movs	r2, #32
 8006b0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006b12:	6878      	ldr	r0, [r7, #4]
 8006b14:	f7ff fcda 	bl	80064cc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006b18:	2300      	movs	r3, #0
}
 8006b1a:	4618      	mov	r0, r3
 8006b1c:	3708      	adds	r7, #8
 8006b1e:	46bd      	mov	sp, r7
 8006b20:	bd80      	pop	{r7, pc}

08006b22 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006b22:	b580      	push	{r7, lr}
 8006b24:	b08c      	sub	sp, #48	; 0x30
 8006b26:	af00      	add	r7, sp, #0
 8006b28:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006b30:	b2db      	uxtb	r3, r3
 8006b32:	2b22      	cmp	r3, #34	; 0x22
 8006b34:	f040 80ab 	bne.w	8006c8e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	689b      	ldr	r3, [r3, #8]
 8006b3c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006b40:	d117      	bne.n	8006b72 <UART_Receive_IT+0x50>
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	691b      	ldr	r3, [r3, #16]
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d113      	bne.n	8006b72 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006b4a:	2300      	movs	r3, #0
 8006b4c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b52:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	685b      	ldr	r3, [r3, #4]
 8006b5a:	b29b      	uxth	r3, r3
 8006b5c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b60:	b29a      	uxth	r2, r3
 8006b62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b64:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b6a:	1c9a      	adds	r2, r3, #2
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	629a      	str	r2, [r3, #40]	; 0x28
 8006b70:	e026      	b.n	8006bc0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b76:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8006b78:	2300      	movs	r3, #0
 8006b7a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	689b      	ldr	r3, [r3, #8]
 8006b80:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006b84:	d007      	beq.n	8006b96 <UART_Receive_IT+0x74>
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	689b      	ldr	r3, [r3, #8]
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d10a      	bne.n	8006ba4 <UART_Receive_IT+0x82>
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	691b      	ldr	r3, [r3, #16]
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d106      	bne.n	8006ba4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	685b      	ldr	r3, [r3, #4]
 8006b9c:	b2da      	uxtb	r2, r3
 8006b9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ba0:	701a      	strb	r2, [r3, #0]
 8006ba2:	e008      	b.n	8006bb6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	685b      	ldr	r3, [r3, #4]
 8006baa:	b2db      	uxtb	r3, r3
 8006bac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006bb0:	b2da      	uxtb	r2, r3
 8006bb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bb4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bba:	1c5a      	adds	r2, r3, #1
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006bc4:	b29b      	uxth	r3, r3
 8006bc6:	3b01      	subs	r3, #1
 8006bc8:	b29b      	uxth	r3, r3
 8006bca:	687a      	ldr	r2, [r7, #4]
 8006bcc:	4619      	mov	r1, r3
 8006bce:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d15a      	bne.n	8006c8a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	68da      	ldr	r2, [r3, #12]
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	f022 0220 	bic.w	r2, r2, #32
 8006be2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	68da      	ldr	r2, [r3, #12]
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006bf2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	695a      	ldr	r2, [r3, #20]
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	f022 0201 	bic.w	r2, r2, #1
 8006c02:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	2220      	movs	r2, #32
 8006c08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c10:	2b01      	cmp	r3, #1
 8006c12:	d135      	bne.n	8006c80 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	2200      	movs	r2, #0
 8006c18:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	330c      	adds	r3, #12
 8006c20:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c22:	697b      	ldr	r3, [r7, #20]
 8006c24:	e853 3f00 	ldrex	r3, [r3]
 8006c28:	613b      	str	r3, [r7, #16]
   return(result);
 8006c2a:	693b      	ldr	r3, [r7, #16]
 8006c2c:	f023 0310 	bic.w	r3, r3, #16
 8006c30:	627b      	str	r3, [r7, #36]	; 0x24
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	330c      	adds	r3, #12
 8006c38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006c3a:	623a      	str	r2, [r7, #32]
 8006c3c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c3e:	69f9      	ldr	r1, [r7, #28]
 8006c40:	6a3a      	ldr	r2, [r7, #32]
 8006c42:	e841 2300 	strex	r3, r2, [r1]
 8006c46:	61bb      	str	r3, [r7, #24]
   return(result);
 8006c48:	69bb      	ldr	r3, [r7, #24]
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d1e5      	bne.n	8006c1a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	f003 0310 	and.w	r3, r3, #16
 8006c58:	2b10      	cmp	r3, #16
 8006c5a:	d10a      	bne.n	8006c72 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006c5c:	2300      	movs	r3, #0
 8006c5e:	60fb      	str	r3, [r7, #12]
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	60fb      	str	r3, [r7, #12]
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	685b      	ldr	r3, [r3, #4]
 8006c6e:	60fb      	str	r3, [r7, #12]
 8006c70:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006c76:	4619      	mov	r1, r3
 8006c78:	6878      	ldr	r0, [r7, #4]
 8006c7a:	f7ff fc3b 	bl	80064f4 <HAL_UARTEx_RxEventCallback>
 8006c7e:	e002      	b.n	8006c86 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006c80:	6878      	ldr	r0, [r7, #4]
 8006c82:	f7fa fbf7 	bl	8001474 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006c86:	2300      	movs	r3, #0
 8006c88:	e002      	b.n	8006c90 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8006c8a:	2300      	movs	r3, #0
 8006c8c:	e000      	b.n	8006c90 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8006c8e:	2302      	movs	r3, #2
  }
}
 8006c90:	4618      	mov	r0, r3
 8006c92:	3730      	adds	r7, #48	; 0x30
 8006c94:	46bd      	mov	sp, r7
 8006c96:	bd80      	pop	{r7, pc}

08006c98 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006c98:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006c9c:	b0c0      	sub	sp, #256	; 0x100
 8006c9e:	af00      	add	r7, sp, #0
 8006ca0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006ca4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	691b      	ldr	r3, [r3, #16]
 8006cac:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006cb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006cb4:	68d9      	ldr	r1, [r3, #12]
 8006cb6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006cba:	681a      	ldr	r2, [r3, #0]
 8006cbc:	ea40 0301 	orr.w	r3, r0, r1
 8006cc0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006cc2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006cc6:	689a      	ldr	r2, [r3, #8]
 8006cc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ccc:	691b      	ldr	r3, [r3, #16]
 8006cce:	431a      	orrs	r2, r3
 8006cd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006cd4:	695b      	ldr	r3, [r3, #20]
 8006cd6:	431a      	orrs	r2, r3
 8006cd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006cdc:	69db      	ldr	r3, [r3, #28]
 8006cde:	4313      	orrs	r3, r2
 8006ce0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006ce4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	68db      	ldr	r3, [r3, #12]
 8006cec:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006cf0:	f021 010c 	bic.w	r1, r1, #12
 8006cf4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006cf8:	681a      	ldr	r2, [r3, #0]
 8006cfa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006cfe:	430b      	orrs	r3, r1
 8006d00:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006d02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	695b      	ldr	r3, [r3, #20]
 8006d0a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006d0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d12:	6999      	ldr	r1, [r3, #24]
 8006d14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d18:	681a      	ldr	r2, [r3, #0]
 8006d1a:	ea40 0301 	orr.w	r3, r0, r1
 8006d1e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006d20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d24:	681a      	ldr	r2, [r3, #0]
 8006d26:	4b8f      	ldr	r3, [pc, #572]	; (8006f64 <UART_SetConfig+0x2cc>)
 8006d28:	429a      	cmp	r2, r3
 8006d2a:	d005      	beq.n	8006d38 <UART_SetConfig+0xa0>
 8006d2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d30:	681a      	ldr	r2, [r3, #0]
 8006d32:	4b8d      	ldr	r3, [pc, #564]	; (8006f68 <UART_SetConfig+0x2d0>)
 8006d34:	429a      	cmp	r2, r3
 8006d36:	d104      	bne.n	8006d42 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006d38:	f7fd fd3c 	bl	80047b4 <HAL_RCC_GetPCLK2Freq>
 8006d3c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8006d40:	e003      	b.n	8006d4a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006d42:	f7fd fd23 	bl	800478c <HAL_RCC_GetPCLK1Freq>
 8006d46:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006d4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d4e:	69db      	ldr	r3, [r3, #28]
 8006d50:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006d54:	f040 810c 	bne.w	8006f70 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006d58:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006d5c:	2200      	movs	r2, #0
 8006d5e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006d62:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8006d66:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8006d6a:	4622      	mov	r2, r4
 8006d6c:	462b      	mov	r3, r5
 8006d6e:	1891      	adds	r1, r2, r2
 8006d70:	65b9      	str	r1, [r7, #88]	; 0x58
 8006d72:	415b      	adcs	r3, r3
 8006d74:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006d76:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8006d7a:	4621      	mov	r1, r4
 8006d7c:	eb12 0801 	adds.w	r8, r2, r1
 8006d80:	4629      	mov	r1, r5
 8006d82:	eb43 0901 	adc.w	r9, r3, r1
 8006d86:	f04f 0200 	mov.w	r2, #0
 8006d8a:	f04f 0300 	mov.w	r3, #0
 8006d8e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006d92:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006d96:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006d9a:	4690      	mov	r8, r2
 8006d9c:	4699      	mov	r9, r3
 8006d9e:	4623      	mov	r3, r4
 8006da0:	eb18 0303 	adds.w	r3, r8, r3
 8006da4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006da8:	462b      	mov	r3, r5
 8006daa:	eb49 0303 	adc.w	r3, r9, r3
 8006dae:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006db2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006db6:	685b      	ldr	r3, [r3, #4]
 8006db8:	2200      	movs	r2, #0
 8006dba:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006dbe:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8006dc2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8006dc6:	460b      	mov	r3, r1
 8006dc8:	18db      	adds	r3, r3, r3
 8006dca:	653b      	str	r3, [r7, #80]	; 0x50
 8006dcc:	4613      	mov	r3, r2
 8006dce:	eb42 0303 	adc.w	r3, r2, r3
 8006dd2:	657b      	str	r3, [r7, #84]	; 0x54
 8006dd4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006dd8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8006ddc:	f7f9 f9f4 	bl	80001c8 <__aeabi_uldivmod>
 8006de0:	4602      	mov	r2, r0
 8006de2:	460b      	mov	r3, r1
 8006de4:	4b61      	ldr	r3, [pc, #388]	; (8006f6c <UART_SetConfig+0x2d4>)
 8006de6:	fba3 2302 	umull	r2, r3, r3, r2
 8006dea:	095b      	lsrs	r3, r3, #5
 8006dec:	011c      	lsls	r4, r3, #4
 8006dee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006df2:	2200      	movs	r2, #0
 8006df4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006df8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8006dfc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8006e00:	4642      	mov	r2, r8
 8006e02:	464b      	mov	r3, r9
 8006e04:	1891      	adds	r1, r2, r2
 8006e06:	64b9      	str	r1, [r7, #72]	; 0x48
 8006e08:	415b      	adcs	r3, r3
 8006e0a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006e0c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006e10:	4641      	mov	r1, r8
 8006e12:	eb12 0a01 	adds.w	sl, r2, r1
 8006e16:	4649      	mov	r1, r9
 8006e18:	eb43 0b01 	adc.w	fp, r3, r1
 8006e1c:	f04f 0200 	mov.w	r2, #0
 8006e20:	f04f 0300 	mov.w	r3, #0
 8006e24:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006e28:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006e2c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006e30:	4692      	mov	sl, r2
 8006e32:	469b      	mov	fp, r3
 8006e34:	4643      	mov	r3, r8
 8006e36:	eb1a 0303 	adds.w	r3, sl, r3
 8006e3a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006e3e:	464b      	mov	r3, r9
 8006e40:	eb4b 0303 	adc.w	r3, fp, r3
 8006e44:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006e48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e4c:	685b      	ldr	r3, [r3, #4]
 8006e4e:	2200      	movs	r2, #0
 8006e50:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006e54:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8006e58:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006e5c:	460b      	mov	r3, r1
 8006e5e:	18db      	adds	r3, r3, r3
 8006e60:	643b      	str	r3, [r7, #64]	; 0x40
 8006e62:	4613      	mov	r3, r2
 8006e64:	eb42 0303 	adc.w	r3, r2, r3
 8006e68:	647b      	str	r3, [r7, #68]	; 0x44
 8006e6a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006e6e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8006e72:	f7f9 f9a9 	bl	80001c8 <__aeabi_uldivmod>
 8006e76:	4602      	mov	r2, r0
 8006e78:	460b      	mov	r3, r1
 8006e7a:	4611      	mov	r1, r2
 8006e7c:	4b3b      	ldr	r3, [pc, #236]	; (8006f6c <UART_SetConfig+0x2d4>)
 8006e7e:	fba3 2301 	umull	r2, r3, r3, r1
 8006e82:	095b      	lsrs	r3, r3, #5
 8006e84:	2264      	movs	r2, #100	; 0x64
 8006e86:	fb02 f303 	mul.w	r3, r2, r3
 8006e8a:	1acb      	subs	r3, r1, r3
 8006e8c:	00db      	lsls	r3, r3, #3
 8006e8e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8006e92:	4b36      	ldr	r3, [pc, #216]	; (8006f6c <UART_SetConfig+0x2d4>)
 8006e94:	fba3 2302 	umull	r2, r3, r3, r2
 8006e98:	095b      	lsrs	r3, r3, #5
 8006e9a:	005b      	lsls	r3, r3, #1
 8006e9c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006ea0:	441c      	add	r4, r3
 8006ea2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006ea6:	2200      	movs	r2, #0
 8006ea8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006eac:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8006eb0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8006eb4:	4642      	mov	r2, r8
 8006eb6:	464b      	mov	r3, r9
 8006eb8:	1891      	adds	r1, r2, r2
 8006eba:	63b9      	str	r1, [r7, #56]	; 0x38
 8006ebc:	415b      	adcs	r3, r3
 8006ebe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006ec0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006ec4:	4641      	mov	r1, r8
 8006ec6:	1851      	adds	r1, r2, r1
 8006ec8:	6339      	str	r1, [r7, #48]	; 0x30
 8006eca:	4649      	mov	r1, r9
 8006ecc:	414b      	adcs	r3, r1
 8006ece:	637b      	str	r3, [r7, #52]	; 0x34
 8006ed0:	f04f 0200 	mov.w	r2, #0
 8006ed4:	f04f 0300 	mov.w	r3, #0
 8006ed8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8006edc:	4659      	mov	r1, fp
 8006ede:	00cb      	lsls	r3, r1, #3
 8006ee0:	4651      	mov	r1, sl
 8006ee2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006ee6:	4651      	mov	r1, sl
 8006ee8:	00ca      	lsls	r2, r1, #3
 8006eea:	4610      	mov	r0, r2
 8006eec:	4619      	mov	r1, r3
 8006eee:	4603      	mov	r3, r0
 8006ef0:	4642      	mov	r2, r8
 8006ef2:	189b      	adds	r3, r3, r2
 8006ef4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006ef8:	464b      	mov	r3, r9
 8006efa:	460a      	mov	r2, r1
 8006efc:	eb42 0303 	adc.w	r3, r2, r3
 8006f00:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006f04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006f08:	685b      	ldr	r3, [r3, #4]
 8006f0a:	2200      	movs	r2, #0
 8006f0c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006f10:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006f14:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006f18:	460b      	mov	r3, r1
 8006f1a:	18db      	adds	r3, r3, r3
 8006f1c:	62bb      	str	r3, [r7, #40]	; 0x28
 8006f1e:	4613      	mov	r3, r2
 8006f20:	eb42 0303 	adc.w	r3, r2, r3
 8006f24:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006f26:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006f2a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8006f2e:	f7f9 f94b 	bl	80001c8 <__aeabi_uldivmod>
 8006f32:	4602      	mov	r2, r0
 8006f34:	460b      	mov	r3, r1
 8006f36:	4b0d      	ldr	r3, [pc, #52]	; (8006f6c <UART_SetConfig+0x2d4>)
 8006f38:	fba3 1302 	umull	r1, r3, r3, r2
 8006f3c:	095b      	lsrs	r3, r3, #5
 8006f3e:	2164      	movs	r1, #100	; 0x64
 8006f40:	fb01 f303 	mul.w	r3, r1, r3
 8006f44:	1ad3      	subs	r3, r2, r3
 8006f46:	00db      	lsls	r3, r3, #3
 8006f48:	3332      	adds	r3, #50	; 0x32
 8006f4a:	4a08      	ldr	r2, [pc, #32]	; (8006f6c <UART_SetConfig+0x2d4>)
 8006f4c:	fba2 2303 	umull	r2, r3, r2, r3
 8006f50:	095b      	lsrs	r3, r3, #5
 8006f52:	f003 0207 	and.w	r2, r3, #7
 8006f56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	4422      	add	r2, r4
 8006f5e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006f60:	e105      	b.n	800716e <UART_SetConfig+0x4d6>
 8006f62:	bf00      	nop
 8006f64:	40011000 	.word	0x40011000
 8006f68:	40011400 	.word	0x40011400
 8006f6c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006f70:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006f74:	2200      	movs	r2, #0
 8006f76:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006f7a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8006f7e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8006f82:	4642      	mov	r2, r8
 8006f84:	464b      	mov	r3, r9
 8006f86:	1891      	adds	r1, r2, r2
 8006f88:	6239      	str	r1, [r7, #32]
 8006f8a:	415b      	adcs	r3, r3
 8006f8c:	627b      	str	r3, [r7, #36]	; 0x24
 8006f8e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006f92:	4641      	mov	r1, r8
 8006f94:	1854      	adds	r4, r2, r1
 8006f96:	4649      	mov	r1, r9
 8006f98:	eb43 0501 	adc.w	r5, r3, r1
 8006f9c:	f04f 0200 	mov.w	r2, #0
 8006fa0:	f04f 0300 	mov.w	r3, #0
 8006fa4:	00eb      	lsls	r3, r5, #3
 8006fa6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006faa:	00e2      	lsls	r2, r4, #3
 8006fac:	4614      	mov	r4, r2
 8006fae:	461d      	mov	r5, r3
 8006fb0:	4643      	mov	r3, r8
 8006fb2:	18e3      	adds	r3, r4, r3
 8006fb4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006fb8:	464b      	mov	r3, r9
 8006fba:	eb45 0303 	adc.w	r3, r5, r3
 8006fbe:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006fc2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006fc6:	685b      	ldr	r3, [r3, #4]
 8006fc8:	2200      	movs	r2, #0
 8006fca:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006fce:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006fd2:	f04f 0200 	mov.w	r2, #0
 8006fd6:	f04f 0300 	mov.w	r3, #0
 8006fda:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8006fde:	4629      	mov	r1, r5
 8006fe0:	008b      	lsls	r3, r1, #2
 8006fe2:	4621      	mov	r1, r4
 8006fe4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006fe8:	4621      	mov	r1, r4
 8006fea:	008a      	lsls	r2, r1, #2
 8006fec:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006ff0:	f7f9 f8ea 	bl	80001c8 <__aeabi_uldivmod>
 8006ff4:	4602      	mov	r2, r0
 8006ff6:	460b      	mov	r3, r1
 8006ff8:	4b60      	ldr	r3, [pc, #384]	; (800717c <UART_SetConfig+0x4e4>)
 8006ffa:	fba3 2302 	umull	r2, r3, r3, r2
 8006ffe:	095b      	lsrs	r3, r3, #5
 8007000:	011c      	lsls	r4, r3, #4
 8007002:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007006:	2200      	movs	r2, #0
 8007008:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800700c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8007010:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8007014:	4642      	mov	r2, r8
 8007016:	464b      	mov	r3, r9
 8007018:	1891      	adds	r1, r2, r2
 800701a:	61b9      	str	r1, [r7, #24]
 800701c:	415b      	adcs	r3, r3
 800701e:	61fb      	str	r3, [r7, #28]
 8007020:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007024:	4641      	mov	r1, r8
 8007026:	1851      	adds	r1, r2, r1
 8007028:	6139      	str	r1, [r7, #16]
 800702a:	4649      	mov	r1, r9
 800702c:	414b      	adcs	r3, r1
 800702e:	617b      	str	r3, [r7, #20]
 8007030:	f04f 0200 	mov.w	r2, #0
 8007034:	f04f 0300 	mov.w	r3, #0
 8007038:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800703c:	4659      	mov	r1, fp
 800703e:	00cb      	lsls	r3, r1, #3
 8007040:	4651      	mov	r1, sl
 8007042:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007046:	4651      	mov	r1, sl
 8007048:	00ca      	lsls	r2, r1, #3
 800704a:	4610      	mov	r0, r2
 800704c:	4619      	mov	r1, r3
 800704e:	4603      	mov	r3, r0
 8007050:	4642      	mov	r2, r8
 8007052:	189b      	adds	r3, r3, r2
 8007054:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007058:	464b      	mov	r3, r9
 800705a:	460a      	mov	r2, r1
 800705c:	eb42 0303 	adc.w	r3, r2, r3
 8007060:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007064:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007068:	685b      	ldr	r3, [r3, #4]
 800706a:	2200      	movs	r2, #0
 800706c:	67bb      	str	r3, [r7, #120]	; 0x78
 800706e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8007070:	f04f 0200 	mov.w	r2, #0
 8007074:	f04f 0300 	mov.w	r3, #0
 8007078:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800707c:	4649      	mov	r1, r9
 800707e:	008b      	lsls	r3, r1, #2
 8007080:	4641      	mov	r1, r8
 8007082:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007086:	4641      	mov	r1, r8
 8007088:	008a      	lsls	r2, r1, #2
 800708a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800708e:	f7f9 f89b 	bl	80001c8 <__aeabi_uldivmod>
 8007092:	4602      	mov	r2, r0
 8007094:	460b      	mov	r3, r1
 8007096:	4b39      	ldr	r3, [pc, #228]	; (800717c <UART_SetConfig+0x4e4>)
 8007098:	fba3 1302 	umull	r1, r3, r3, r2
 800709c:	095b      	lsrs	r3, r3, #5
 800709e:	2164      	movs	r1, #100	; 0x64
 80070a0:	fb01 f303 	mul.w	r3, r1, r3
 80070a4:	1ad3      	subs	r3, r2, r3
 80070a6:	011b      	lsls	r3, r3, #4
 80070a8:	3332      	adds	r3, #50	; 0x32
 80070aa:	4a34      	ldr	r2, [pc, #208]	; (800717c <UART_SetConfig+0x4e4>)
 80070ac:	fba2 2303 	umull	r2, r3, r2, r3
 80070b0:	095b      	lsrs	r3, r3, #5
 80070b2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80070b6:	441c      	add	r4, r3
 80070b8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80070bc:	2200      	movs	r2, #0
 80070be:	673b      	str	r3, [r7, #112]	; 0x70
 80070c0:	677a      	str	r2, [r7, #116]	; 0x74
 80070c2:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80070c6:	4642      	mov	r2, r8
 80070c8:	464b      	mov	r3, r9
 80070ca:	1891      	adds	r1, r2, r2
 80070cc:	60b9      	str	r1, [r7, #8]
 80070ce:	415b      	adcs	r3, r3
 80070d0:	60fb      	str	r3, [r7, #12]
 80070d2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80070d6:	4641      	mov	r1, r8
 80070d8:	1851      	adds	r1, r2, r1
 80070da:	6039      	str	r1, [r7, #0]
 80070dc:	4649      	mov	r1, r9
 80070de:	414b      	adcs	r3, r1
 80070e0:	607b      	str	r3, [r7, #4]
 80070e2:	f04f 0200 	mov.w	r2, #0
 80070e6:	f04f 0300 	mov.w	r3, #0
 80070ea:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80070ee:	4659      	mov	r1, fp
 80070f0:	00cb      	lsls	r3, r1, #3
 80070f2:	4651      	mov	r1, sl
 80070f4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80070f8:	4651      	mov	r1, sl
 80070fa:	00ca      	lsls	r2, r1, #3
 80070fc:	4610      	mov	r0, r2
 80070fe:	4619      	mov	r1, r3
 8007100:	4603      	mov	r3, r0
 8007102:	4642      	mov	r2, r8
 8007104:	189b      	adds	r3, r3, r2
 8007106:	66bb      	str	r3, [r7, #104]	; 0x68
 8007108:	464b      	mov	r3, r9
 800710a:	460a      	mov	r2, r1
 800710c:	eb42 0303 	adc.w	r3, r2, r3
 8007110:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007112:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007116:	685b      	ldr	r3, [r3, #4]
 8007118:	2200      	movs	r2, #0
 800711a:	663b      	str	r3, [r7, #96]	; 0x60
 800711c:	667a      	str	r2, [r7, #100]	; 0x64
 800711e:	f04f 0200 	mov.w	r2, #0
 8007122:	f04f 0300 	mov.w	r3, #0
 8007126:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800712a:	4649      	mov	r1, r9
 800712c:	008b      	lsls	r3, r1, #2
 800712e:	4641      	mov	r1, r8
 8007130:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007134:	4641      	mov	r1, r8
 8007136:	008a      	lsls	r2, r1, #2
 8007138:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800713c:	f7f9 f844 	bl	80001c8 <__aeabi_uldivmod>
 8007140:	4602      	mov	r2, r0
 8007142:	460b      	mov	r3, r1
 8007144:	4b0d      	ldr	r3, [pc, #52]	; (800717c <UART_SetConfig+0x4e4>)
 8007146:	fba3 1302 	umull	r1, r3, r3, r2
 800714a:	095b      	lsrs	r3, r3, #5
 800714c:	2164      	movs	r1, #100	; 0x64
 800714e:	fb01 f303 	mul.w	r3, r1, r3
 8007152:	1ad3      	subs	r3, r2, r3
 8007154:	011b      	lsls	r3, r3, #4
 8007156:	3332      	adds	r3, #50	; 0x32
 8007158:	4a08      	ldr	r2, [pc, #32]	; (800717c <UART_SetConfig+0x4e4>)
 800715a:	fba2 2303 	umull	r2, r3, r2, r3
 800715e:	095b      	lsrs	r3, r3, #5
 8007160:	f003 020f 	and.w	r2, r3, #15
 8007164:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	4422      	add	r2, r4
 800716c:	609a      	str	r2, [r3, #8]
}
 800716e:	bf00      	nop
 8007170:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8007174:	46bd      	mov	sp, r7
 8007176:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800717a:	bf00      	nop
 800717c:	51eb851f 	.word	0x51eb851f

08007180 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007180:	b084      	sub	sp, #16
 8007182:	b580      	push	{r7, lr}
 8007184:	b084      	sub	sp, #16
 8007186:	af00      	add	r7, sp, #0
 8007188:	6078      	str	r0, [r7, #4]
 800718a:	f107 001c 	add.w	r0, r7, #28
 800718e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007192:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007194:	2b01      	cmp	r3, #1
 8007196:	d122      	bne.n	80071de <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800719c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	68db      	ldr	r3, [r3, #12]
 80071a8:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80071ac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80071b0:	687a      	ldr	r2, [r7, #4]
 80071b2:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	68db      	ldr	r3, [r3, #12]
 80071b8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80071c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80071c2:	2b01      	cmp	r3, #1
 80071c4:	d105      	bne.n	80071d2 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	68db      	ldr	r3, [r3, #12]
 80071ca:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80071d2:	6878      	ldr	r0, [r7, #4]
 80071d4:	f001 fbee 	bl	80089b4 <USB_CoreReset>
 80071d8:	4603      	mov	r3, r0
 80071da:	73fb      	strb	r3, [r7, #15]
 80071dc:	e01a      	b.n	8007214 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	68db      	ldr	r3, [r3, #12]
 80071e2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80071ea:	6878      	ldr	r0, [r7, #4]
 80071ec:	f001 fbe2 	bl	80089b4 <USB_CoreReset>
 80071f0:	4603      	mov	r3, r0
 80071f2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80071f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d106      	bne.n	8007208 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071fe:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	639a      	str	r2, [r3, #56]	; 0x38
 8007206:	e005      	b.n	8007214 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800720c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8007214:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007216:	2b01      	cmp	r3, #1
 8007218:	d10b      	bne.n	8007232 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	689b      	ldr	r3, [r3, #8]
 800721e:	f043 0206 	orr.w	r2, r3, #6
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	689b      	ldr	r3, [r3, #8]
 800722a:	f043 0220 	orr.w	r2, r3, #32
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8007232:	7bfb      	ldrb	r3, [r7, #15]
}
 8007234:	4618      	mov	r0, r3
 8007236:	3710      	adds	r7, #16
 8007238:	46bd      	mov	sp, r7
 800723a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800723e:	b004      	add	sp, #16
 8007240:	4770      	bx	lr
	...

08007244 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8007244:	b480      	push	{r7}
 8007246:	b087      	sub	sp, #28
 8007248:	af00      	add	r7, sp, #0
 800724a:	60f8      	str	r0, [r7, #12]
 800724c:	60b9      	str	r1, [r7, #8]
 800724e:	4613      	mov	r3, r2
 8007250:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8007252:	79fb      	ldrb	r3, [r7, #7]
 8007254:	2b02      	cmp	r3, #2
 8007256:	d165      	bne.n	8007324 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8007258:	68bb      	ldr	r3, [r7, #8]
 800725a:	4a41      	ldr	r2, [pc, #260]	; (8007360 <USB_SetTurnaroundTime+0x11c>)
 800725c:	4293      	cmp	r3, r2
 800725e:	d906      	bls.n	800726e <USB_SetTurnaroundTime+0x2a>
 8007260:	68bb      	ldr	r3, [r7, #8]
 8007262:	4a40      	ldr	r2, [pc, #256]	; (8007364 <USB_SetTurnaroundTime+0x120>)
 8007264:	4293      	cmp	r3, r2
 8007266:	d202      	bcs.n	800726e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8007268:	230f      	movs	r3, #15
 800726a:	617b      	str	r3, [r7, #20]
 800726c:	e062      	b.n	8007334 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800726e:	68bb      	ldr	r3, [r7, #8]
 8007270:	4a3c      	ldr	r2, [pc, #240]	; (8007364 <USB_SetTurnaroundTime+0x120>)
 8007272:	4293      	cmp	r3, r2
 8007274:	d306      	bcc.n	8007284 <USB_SetTurnaroundTime+0x40>
 8007276:	68bb      	ldr	r3, [r7, #8]
 8007278:	4a3b      	ldr	r2, [pc, #236]	; (8007368 <USB_SetTurnaroundTime+0x124>)
 800727a:	4293      	cmp	r3, r2
 800727c:	d202      	bcs.n	8007284 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800727e:	230e      	movs	r3, #14
 8007280:	617b      	str	r3, [r7, #20]
 8007282:	e057      	b.n	8007334 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8007284:	68bb      	ldr	r3, [r7, #8]
 8007286:	4a38      	ldr	r2, [pc, #224]	; (8007368 <USB_SetTurnaroundTime+0x124>)
 8007288:	4293      	cmp	r3, r2
 800728a:	d306      	bcc.n	800729a <USB_SetTurnaroundTime+0x56>
 800728c:	68bb      	ldr	r3, [r7, #8]
 800728e:	4a37      	ldr	r2, [pc, #220]	; (800736c <USB_SetTurnaroundTime+0x128>)
 8007290:	4293      	cmp	r3, r2
 8007292:	d202      	bcs.n	800729a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8007294:	230d      	movs	r3, #13
 8007296:	617b      	str	r3, [r7, #20]
 8007298:	e04c      	b.n	8007334 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800729a:	68bb      	ldr	r3, [r7, #8]
 800729c:	4a33      	ldr	r2, [pc, #204]	; (800736c <USB_SetTurnaroundTime+0x128>)
 800729e:	4293      	cmp	r3, r2
 80072a0:	d306      	bcc.n	80072b0 <USB_SetTurnaroundTime+0x6c>
 80072a2:	68bb      	ldr	r3, [r7, #8]
 80072a4:	4a32      	ldr	r2, [pc, #200]	; (8007370 <USB_SetTurnaroundTime+0x12c>)
 80072a6:	4293      	cmp	r3, r2
 80072a8:	d802      	bhi.n	80072b0 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80072aa:	230c      	movs	r3, #12
 80072ac:	617b      	str	r3, [r7, #20]
 80072ae:	e041      	b.n	8007334 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80072b0:	68bb      	ldr	r3, [r7, #8]
 80072b2:	4a2f      	ldr	r2, [pc, #188]	; (8007370 <USB_SetTurnaroundTime+0x12c>)
 80072b4:	4293      	cmp	r3, r2
 80072b6:	d906      	bls.n	80072c6 <USB_SetTurnaroundTime+0x82>
 80072b8:	68bb      	ldr	r3, [r7, #8]
 80072ba:	4a2e      	ldr	r2, [pc, #184]	; (8007374 <USB_SetTurnaroundTime+0x130>)
 80072bc:	4293      	cmp	r3, r2
 80072be:	d802      	bhi.n	80072c6 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80072c0:	230b      	movs	r3, #11
 80072c2:	617b      	str	r3, [r7, #20]
 80072c4:	e036      	b.n	8007334 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80072c6:	68bb      	ldr	r3, [r7, #8]
 80072c8:	4a2a      	ldr	r2, [pc, #168]	; (8007374 <USB_SetTurnaroundTime+0x130>)
 80072ca:	4293      	cmp	r3, r2
 80072cc:	d906      	bls.n	80072dc <USB_SetTurnaroundTime+0x98>
 80072ce:	68bb      	ldr	r3, [r7, #8]
 80072d0:	4a29      	ldr	r2, [pc, #164]	; (8007378 <USB_SetTurnaroundTime+0x134>)
 80072d2:	4293      	cmp	r3, r2
 80072d4:	d802      	bhi.n	80072dc <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80072d6:	230a      	movs	r3, #10
 80072d8:	617b      	str	r3, [r7, #20]
 80072da:	e02b      	b.n	8007334 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80072dc:	68bb      	ldr	r3, [r7, #8]
 80072de:	4a26      	ldr	r2, [pc, #152]	; (8007378 <USB_SetTurnaroundTime+0x134>)
 80072e0:	4293      	cmp	r3, r2
 80072e2:	d906      	bls.n	80072f2 <USB_SetTurnaroundTime+0xae>
 80072e4:	68bb      	ldr	r3, [r7, #8]
 80072e6:	4a25      	ldr	r2, [pc, #148]	; (800737c <USB_SetTurnaroundTime+0x138>)
 80072e8:	4293      	cmp	r3, r2
 80072ea:	d202      	bcs.n	80072f2 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80072ec:	2309      	movs	r3, #9
 80072ee:	617b      	str	r3, [r7, #20]
 80072f0:	e020      	b.n	8007334 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80072f2:	68bb      	ldr	r3, [r7, #8]
 80072f4:	4a21      	ldr	r2, [pc, #132]	; (800737c <USB_SetTurnaroundTime+0x138>)
 80072f6:	4293      	cmp	r3, r2
 80072f8:	d306      	bcc.n	8007308 <USB_SetTurnaroundTime+0xc4>
 80072fa:	68bb      	ldr	r3, [r7, #8]
 80072fc:	4a20      	ldr	r2, [pc, #128]	; (8007380 <USB_SetTurnaroundTime+0x13c>)
 80072fe:	4293      	cmp	r3, r2
 8007300:	d802      	bhi.n	8007308 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8007302:	2308      	movs	r3, #8
 8007304:	617b      	str	r3, [r7, #20]
 8007306:	e015      	b.n	8007334 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8007308:	68bb      	ldr	r3, [r7, #8]
 800730a:	4a1d      	ldr	r2, [pc, #116]	; (8007380 <USB_SetTurnaroundTime+0x13c>)
 800730c:	4293      	cmp	r3, r2
 800730e:	d906      	bls.n	800731e <USB_SetTurnaroundTime+0xda>
 8007310:	68bb      	ldr	r3, [r7, #8]
 8007312:	4a1c      	ldr	r2, [pc, #112]	; (8007384 <USB_SetTurnaroundTime+0x140>)
 8007314:	4293      	cmp	r3, r2
 8007316:	d202      	bcs.n	800731e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8007318:	2307      	movs	r3, #7
 800731a:	617b      	str	r3, [r7, #20]
 800731c:	e00a      	b.n	8007334 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800731e:	2306      	movs	r3, #6
 8007320:	617b      	str	r3, [r7, #20]
 8007322:	e007      	b.n	8007334 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8007324:	79fb      	ldrb	r3, [r7, #7]
 8007326:	2b00      	cmp	r3, #0
 8007328:	d102      	bne.n	8007330 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800732a:	2309      	movs	r3, #9
 800732c:	617b      	str	r3, [r7, #20]
 800732e:	e001      	b.n	8007334 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8007330:	2309      	movs	r3, #9
 8007332:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	68db      	ldr	r3, [r3, #12]
 8007338:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	68da      	ldr	r2, [r3, #12]
 8007344:	697b      	ldr	r3, [r7, #20]
 8007346:	029b      	lsls	r3, r3, #10
 8007348:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800734c:	431a      	orrs	r2, r3
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8007352:	2300      	movs	r3, #0
}
 8007354:	4618      	mov	r0, r3
 8007356:	371c      	adds	r7, #28
 8007358:	46bd      	mov	sp, r7
 800735a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800735e:	4770      	bx	lr
 8007360:	00d8acbf 	.word	0x00d8acbf
 8007364:	00e4e1c0 	.word	0x00e4e1c0
 8007368:	00f42400 	.word	0x00f42400
 800736c:	01067380 	.word	0x01067380
 8007370:	011a499f 	.word	0x011a499f
 8007374:	01312cff 	.word	0x01312cff
 8007378:	014ca43f 	.word	0x014ca43f
 800737c:	016e3600 	.word	0x016e3600
 8007380:	01a6ab1f 	.word	0x01a6ab1f
 8007384:	01e84800 	.word	0x01e84800

08007388 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007388:	b480      	push	{r7}
 800738a:	b083      	sub	sp, #12
 800738c:	af00      	add	r7, sp, #0
 800738e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	689b      	ldr	r3, [r3, #8]
 8007394:	f043 0201 	orr.w	r2, r3, #1
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800739c:	2300      	movs	r3, #0
}
 800739e:	4618      	mov	r0, r3
 80073a0:	370c      	adds	r7, #12
 80073a2:	46bd      	mov	sp, r7
 80073a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073a8:	4770      	bx	lr

080073aa <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80073aa:	b480      	push	{r7}
 80073ac:	b083      	sub	sp, #12
 80073ae:	af00      	add	r7, sp, #0
 80073b0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	689b      	ldr	r3, [r3, #8]
 80073b6:	f023 0201 	bic.w	r2, r3, #1
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80073be:	2300      	movs	r3, #0
}
 80073c0:	4618      	mov	r0, r3
 80073c2:	370c      	adds	r7, #12
 80073c4:	46bd      	mov	sp, r7
 80073c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ca:	4770      	bx	lr

080073cc <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80073cc:	b580      	push	{r7, lr}
 80073ce:	b084      	sub	sp, #16
 80073d0:	af00      	add	r7, sp, #0
 80073d2:	6078      	str	r0, [r7, #4]
 80073d4:	460b      	mov	r3, r1
 80073d6:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80073d8:	2300      	movs	r3, #0
 80073da:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	68db      	ldr	r3, [r3, #12]
 80073e0:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80073e8:	78fb      	ldrb	r3, [r7, #3]
 80073ea:	2b01      	cmp	r3, #1
 80073ec:	d115      	bne.n	800741a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	68db      	ldr	r3, [r3, #12]
 80073f2:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80073fa:	2001      	movs	r0, #1
 80073fc:	f7fa fc12 	bl	8001c24 <HAL_Delay>
      ms++;
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	3301      	adds	r3, #1
 8007404:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8007406:	6878      	ldr	r0, [r7, #4]
 8007408:	f001 fa45 	bl	8008896 <USB_GetMode>
 800740c:	4603      	mov	r3, r0
 800740e:	2b01      	cmp	r3, #1
 8007410:	d01e      	beq.n	8007450 <USB_SetCurrentMode+0x84>
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	2b31      	cmp	r3, #49	; 0x31
 8007416:	d9f0      	bls.n	80073fa <USB_SetCurrentMode+0x2e>
 8007418:	e01a      	b.n	8007450 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800741a:	78fb      	ldrb	r3, [r7, #3]
 800741c:	2b00      	cmp	r3, #0
 800741e:	d115      	bne.n	800744c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	68db      	ldr	r3, [r3, #12]
 8007424:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800742c:	2001      	movs	r0, #1
 800742e:	f7fa fbf9 	bl	8001c24 <HAL_Delay>
      ms++;
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	3301      	adds	r3, #1
 8007436:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8007438:	6878      	ldr	r0, [r7, #4]
 800743a:	f001 fa2c 	bl	8008896 <USB_GetMode>
 800743e:	4603      	mov	r3, r0
 8007440:	2b00      	cmp	r3, #0
 8007442:	d005      	beq.n	8007450 <USB_SetCurrentMode+0x84>
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	2b31      	cmp	r3, #49	; 0x31
 8007448:	d9f0      	bls.n	800742c <USB_SetCurrentMode+0x60>
 800744a:	e001      	b.n	8007450 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800744c:	2301      	movs	r3, #1
 800744e:	e005      	b.n	800745c <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	2b32      	cmp	r3, #50	; 0x32
 8007454:	d101      	bne.n	800745a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8007456:	2301      	movs	r3, #1
 8007458:	e000      	b.n	800745c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800745a:	2300      	movs	r3, #0
}
 800745c:	4618      	mov	r0, r3
 800745e:	3710      	adds	r7, #16
 8007460:	46bd      	mov	sp, r7
 8007462:	bd80      	pop	{r7, pc}

08007464 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007464:	b084      	sub	sp, #16
 8007466:	b580      	push	{r7, lr}
 8007468:	b086      	sub	sp, #24
 800746a:	af00      	add	r7, sp, #0
 800746c:	6078      	str	r0, [r7, #4]
 800746e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8007472:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8007476:	2300      	movs	r3, #0
 8007478:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800747e:	2300      	movs	r3, #0
 8007480:	613b      	str	r3, [r7, #16]
 8007482:	e009      	b.n	8007498 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8007484:	687a      	ldr	r2, [r7, #4]
 8007486:	693b      	ldr	r3, [r7, #16]
 8007488:	3340      	adds	r3, #64	; 0x40
 800748a:	009b      	lsls	r3, r3, #2
 800748c:	4413      	add	r3, r2
 800748e:	2200      	movs	r2, #0
 8007490:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8007492:	693b      	ldr	r3, [r7, #16]
 8007494:	3301      	adds	r3, #1
 8007496:	613b      	str	r3, [r7, #16]
 8007498:	693b      	ldr	r3, [r7, #16]
 800749a:	2b0e      	cmp	r3, #14
 800749c:	d9f2      	bls.n	8007484 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800749e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d11c      	bne.n	80074de <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80074aa:	685b      	ldr	r3, [r3, #4]
 80074ac:	68fa      	ldr	r2, [r7, #12]
 80074ae:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80074b2:	f043 0302 	orr.w	r3, r3, #2
 80074b6:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074bc:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074c8:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074d4:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	639a      	str	r2, [r3, #56]	; 0x38
 80074dc:	e00b      	b.n	80074f6 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074e2:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074ee:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80074fc:	461a      	mov	r2, r3
 80074fe:	2300      	movs	r3, #0
 8007500:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007508:	4619      	mov	r1, r3
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007510:	461a      	mov	r2, r3
 8007512:	680b      	ldr	r3, [r1, #0]
 8007514:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007516:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007518:	2b01      	cmp	r3, #1
 800751a:	d10c      	bne.n	8007536 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800751c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800751e:	2b00      	cmp	r3, #0
 8007520:	d104      	bne.n	800752c <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8007522:	2100      	movs	r1, #0
 8007524:	6878      	ldr	r0, [r7, #4]
 8007526:	f000 f965 	bl	80077f4 <USB_SetDevSpeed>
 800752a:	e008      	b.n	800753e <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800752c:	2101      	movs	r1, #1
 800752e:	6878      	ldr	r0, [r7, #4]
 8007530:	f000 f960 	bl	80077f4 <USB_SetDevSpeed>
 8007534:	e003      	b.n	800753e <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8007536:	2103      	movs	r1, #3
 8007538:	6878      	ldr	r0, [r7, #4]
 800753a:	f000 f95b 	bl	80077f4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800753e:	2110      	movs	r1, #16
 8007540:	6878      	ldr	r0, [r7, #4]
 8007542:	f000 f8f3 	bl	800772c <USB_FlushTxFifo>
 8007546:	4603      	mov	r3, r0
 8007548:	2b00      	cmp	r3, #0
 800754a:	d001      	beq.n	8007550 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 800754c:	2301      	movs	r3, #1
 800754e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007550:	6878      	ldr	r0, [r7, #4]
 8007552:	f000 f91f 	bl	8007794 <USB_FlushRxFifo>
 8007556:	4603      	mov	r3, r0
 8007558:	2b00      	cmp	r3, #0
 800755a:	d001      	beq.n	8007560 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 800755c:	2301      	movs	r3, #1
 800755e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007566:	461a      	mov	r2, r3
 8007568:	2300      	movs	r3, #0
 800756a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007572:	461a      	mov	r2, r3
 8007574:	2300      	movs	r3, #0
 8007576:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800757e:	461a      	mov	r2, r3
 8007580:	2300      	movs	r3, #0
 8007582:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007584:	2300      	movs	r3, #0
 8007586:	613b      	str	r3, [r7, #16]
 8007588:	e043      	b.n	8007612 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800758a:	693b      	ldr	r3, [r7, #16]
 800758c:	015a      	lsls	r2, r3, #5
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	4413      	add	r3, r2
 8007592:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800759c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80075a0:	d118      	bne.n	80075d4 <USB_DevInit+0x170>
    {
      if (i == 0U)
 80075a2:	693b      	ldr	r3, [r7, #16]
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d10a      	bne.n	80075be <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80075a8:	693b      	ldr	r3, [r7, #16]
 80075aa:	015a      	lsls	r2, r3, #5
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	4413      	add	r3, r2
 80075b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80075b4:	461a      	mov	r2, r3
 80075b6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80075ba:	6013      	str	r3, [r2, #0]
 80075bc:	e013      	b.n	80075e6 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80075be:	693b      	ldr	r3, [r7, #16]
 80075c0:	015a      	lsls	r2, r3, #5
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	4413      	add	r3, r2
 80075c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80075ca:	461a      	mov	r2, r3
 80075cc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80075d0:	6013      	str	r3, [r2, #0]
 80075d2:	e008      	b.n	80075e6 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80075d4:	693b      	ldr	r3, [r7, #16]
 80075d6:	015a      	lsls	r2, r3, #5
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	4413      	add	r3, r2
 80075dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80075e0:	461a      	mov	r2, r3
 80075e2:	2300      	movs	r3, #0
 80075e4:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80075e6:	693b      	ldr	r3, [r7, #16]
 80075e8:	015a      	lsls	r2, r3, #5
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	4413      	add	r3, r2
 80075ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80075f2:	461a      	mov	r2, r3
 80075f4:	2300      	movs	r3, #0
 80075f6:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80075f8:	693b      	ldr	r3, [r7, #16]
 80075fa:	015a      	lsls	r2, r3, #5
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	4413      	add	r3, r2
 8007600:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007604:	461a      	mov	r2, r3
 8007606:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800760a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800760c:	693b      	ldr	r3, [r7, #16]
 800760e:	3301      	adds	r3, #1
 8007610:	613b      	str	r3, [r7, #16]
 8007612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007614:	693a      	ldr	r2, [r7, #16]
 8007616:	429a      	cmp	r2, r3
 8007618:	d3b7      	bcc.n	800758a <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800761a:	2300      	movs	r3, #0
 800761c:	613b      	str	r3, [r7, #16]
 800761e:	e043      	b.n	80076a8 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007620:	693b      	ldr	r3, [r7, #16]
 8007622:	015a      	lsls	r2, r3, #5
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	4413      	add	r3, r2
 8007628:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007632:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007636:	d118      	bne.n	800766a <USB_DevInit+0x206>
    {
      if (i == 0U)
 8007638:	693b      	ldr	r3, [r7, #16]
 800763a:	2b00      	cmp	r3, #0
 800763c:	d10a      	bne.n	8007654 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800763e:	693b      	ldr	r3, [r7, #16]
 8007640:	015a      	lsls	r2, r3, #5
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	4413      	add	r3, r2
 8007646:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800764a:	461a      	mov	r2, r3
 800764c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007650:	6013      	str	r3, [r2, #0]
 8007652:	e013      	b.n	800767c <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8007654:	693b      	ldr	r3, [r7, #16]
 8007656:	015a      	lsls	r2, r3, #5
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	4413      	add	r3, r2
 800765c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007660:	461a      	mov	r2, r3
 8007662:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007666:	6013      	str	r3, [r2, #0]
 8007668:	e008      	b.n	800767c <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800766a:	693b      	ldr	r3, [r7, #16]
 800766c:	015a      	lsls	r2, r3, #5
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	4413      	add	r3, r2
 8007672:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007676:	461a      	mov	r2, r3
 8007678:	2300      	movs	r3, #0
 800767a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800767c:	693b      	ldr	r3, [r7, #16]
 800767e:	015a      	lsls	r2, r3, #5
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	4413      	add	r3, r2
 8007684:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007688:	461a      	mov	r2, r3
 800768a:	2300      	movs	r3, #0
 800768c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800768e:	693b      	ldr	r3, [r7, #16]
 8007690:	015a      	lsls	r2, r3, #5
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	4413      	add	r3, r2
 8007696:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800769a:	461a      	mov	r2, r3
 800769c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80076a0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80076a2:	693b      	ldr	r3, [r7, #16]
 80076a4:	3301      	adds	r3, #1
 80076a6:	613b      	str	r3, [r7, #16]
 80076a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076aa:	693a      	ldr	r2, [r7, #16]
 80076ac:	429a      	cmp	r2, r3
 80076ae:	d3b7      	bcc.n	8007620 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80076b6:	691b      	ldr	r3, [r3, #16]
 80076b8:	68fa      	ldr	r2, [r7, #12]
 80076ba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80076be:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80076c2:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	2200      	movs	r2, #0
 80076c8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80076d0:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80076d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d105      	bne.n	80076e4 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	699b      	ldr	r3, [r3, #24]
 80076dc:	f043 0210 	orr.w	r2, r3, #16
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	699a      	ldr	r2, [r3, #24]
 80076e8:	4b0f      	ldr	r3, [pc, #60]	; (8007728 <USB_DevInit+0x2c4>)
 80076ea:	4313      	orrs	r3, r2
 80076ec:	687a      	ldr	r2, [r7, #4]
 80076ee:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80076f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d005      	beq.n	8007702 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	699b      	ldr	r3, [r3, #24]
 80076fa:	f043 0208 	orr.w	r2, r3, #8
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8007702:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007704:	2b01      	cmp	r3, #1
 8007706:	d107      	bne.n	8007718 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	699b      	ldr	r3, [r3, #24]
 800770c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007710:	f043 0304 	orr.w	r3, r3, #4
 8007714:	687a      	ldr	r2, [r7, #4]
 8007716:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8007718:	7dfb      	ldrb	r3, [r7, #23]
}
 800771a:	4618      	mov	r0, r3
 800771c:	3718      	adds	r7, #24
 800771e:	46bd      	mov	sp, r7
 8007720:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007724:	b004      	add	sp, #16
 8007726:	4770      	bx	lr
 8007728:	803c3800 	.word	0x803c3800

0800772c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800772c:	b480      	push	{r7}
 800772e:	b085      	sub	sp, #20
 8007730:	af00      	add	r7, sp, #0
 8007732:	6078      	str	r0, [r7, #4]
 8007734:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007736:	2300      	movs	r3, #0
 8007738:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	3301      	adds	r3, #1
 800773e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	4a13      	ldr	r2, [pc, #76]	; (8007790 <USB_FlushTxFifo+0x64>)
 8007744:	4293      	cmp	r3, r2
 8007746:	d901      	bls.n	800774c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8007748:	2303      	movs	r3, #3
 800774a:	e01b      	b.n	8007784 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	691b      	ldr	r3, [r3, #16]
 8007750:	2b00      	cmp	r3, #0
 8007752:	daf2      	bge.n	800773a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8007754:	2300      	movs	r3, #0
 8007756:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007758:	683b      	ldr	r3, [r7, #0]
 800775a:	019b      	lsls	r3, r3, #6
 800775c:	f043 0220 	orr.w	r2, r3, #32
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	3301      	adds	r3, #1
 8007768:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	4a08      	ldr	r2, [pc, #32]	; (8007790 <USB_FlushTxFifo+0x64>)
 800776e:	4293      	cmp	r3, r2
 8007770:	d901      	bls.n	8007776 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8007772:	2303      	movs	r3, #3
 8007774:	e006      	b.n	8007784 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	691b      	ldr	r3, [r3, #16]
 800777a:	f003 0320 	and.w	r3, r3, #32
 800777e:	2b20      	cmp	r3, #32
 8007780:	d0f0      	beq.n	8007764 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8007782:	2300      	movs	r3, #0
}
 8007784:	4618      	mov	r0, r3
 8007786:	3714      	adds	r7, #20
 8007788:	46bd      	mov	sp, r7
 800778a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800778e:	4770      	bx	lr
 8007790:	00030d40 	.word	0x00030d40

08007794 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007794:	b480      	push	{r7}
 8007796:	b085      	sub	sp, #20
 8007798:	af00      	add	r7, sp, #0
 800779a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800779c:	2300      	movs	r3, #0
 800779e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	3301      	adds	r3, #1
 80077a4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	4a11      	ldr	r2, [pc, #68]	; (80077f0 <USB_FlushRxFifo+0x5c>)
 80077aa:	4293      	cmp	r3, r2
 80077ac:	d901      	bls.n	80077b2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80077ae:	2303      	movs	r3, #3
 80077b0:	e018      	b.n	80077e4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	691b      	ldr	r3, [r3, #16]
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	daf2      	bge.n	80077a0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80077ba:	2300      	movs	r3, #0
 80077bc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	2210      	movs	r2, #16
 80077c2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	3301      	adds	r3, #1
 80077c8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	4a08      	ldr	r2, [pc, #32]	; (80077f0 <USB_FlushRxFifo+0x5c>)
 80077ce:	4293      	cmp	r3, r2
 80077d0:	d901      	bls.n	80077d6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80077d2:	2303      	movs	r3, #3
 80077d4:	e006      	b.n	80077e4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	691b      	ldr	r3, [r3, #16]
 80077da:	f003 0310 	and.w	r3, r3, #16
 80077de:	2b10      	cmp	r3, #16
 80077e0:	d0f0      	beq.n	80077c4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80077e2:	2300      	movs	r3, #0
}
 80077e4:	4618      	mov	r0, r3
 80077e6:	3714      	adds	r7, #20
 80077e8:	46bd      	mov	sp, r7
 80077ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ee:	4770      	bx	lr
 80077f0:	00030d40 	.word	0x00030d40

080077f4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80077f4:	b480      	push	{r7}
 80077f6:	b085      	sub	sp, #20
 80077f8:	af00      	add	r7, sp, #0
 80077fa:	6078      	str	r0, [r7, #4]
 80077fc:	460b      	mov	r3, r1
 80077fe:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800780a:	681a      	ldr	r2, [r3, #0]
 800780c:	78fb      	ldrb	r3, [r7, #3]
 800780e:	68f9      	ldr	r1, [r7, #12]
 8007810:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007814:	4313      	orrs	r3, r2
 8007816:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007818:	2300      	movs	r3, #0
}
 800781a:	4618      	mov	r0, r3
 800781c:	3714      	adds	r7, #20
 800781e:	46bd      	mov	sp, r7
 8007820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007824:	4770      	bx	lr

08007826 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8007826:	b480      	push	{r7}
 8007828:	b087      	sub	sp, #28
 800782a:	af00      	add	r7, sp, #0
 800782c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8007832:	693b      	ldr	r3, [r7, #16]
 8007834:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007838:	689b      	ldr	r3, [r3, #8]
 800783a:	f003 0306 	and.w	r3, r3, #6
 800783e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	2b00      	cmp	r3, #0
 8007844:	d102      	bne.n	800784c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8007846:	2300      	movs	r3, #0
 8007848:	75fb      	strb	r3, [r7, #23]
 800784a:	e00a      	b.n	8007862 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	2b02      	cmp	r3, #2
 8007850:	d002      	beq.n	8007858 <USB_GetDevSpeed+0x32>
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	2b06      	cmp	r3, #6
 8007856:	d102      	bne.n	800785e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8007858:	2302      	movs	r3, #2
 800785a:	75fb      	strb	r3, [r7, #23]
 800785c:	e001      	b.n	8007862 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800785e:	230f      	movs	r3, #15
 8007860:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8007862:	7dfb      	ldrb	r3, [r7, #23]
}
 8007864:	4618      	mov	r0, r3
 8007866:	371c      	adds	r7, #28
 8007868:	46bd      	mov	sp, r7
 800786a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800786e:	4770      	bx	lr

08007870 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007870:	b480      	push	{r7}
 8007872:	b085      	sub	sp, #20
 8007874:	af00      	add	r7, sp, #0
 8007876:	6078      	str	r0, [r7, #4]
 8007878:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800787e:	683b      	ldr	r3, [r7, #0]
 8007880:	781b      	ldrb	r3, [r3, #0]
 8007882:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007884:	683b      	ldr	r3, [r7, #0]
 8007886:	785b      	ldrb	r3, [r3, #1]
 8007888:	2b01      	cmp	r3, #1
 800788a:	d13a      	bne.n	8007902 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007892:	69da      	ldr	r2, [r3, #28]
 8007894:	683b      	ldr	r3, [r7, #0]
 8007896:	781b      	ldrb	r3, [r3, #0]
 8007898:	f003 030f 	and.w	r3, r3, #15
 800789c:	2101      	movs	r1, #1
 800789e:	fa01 f303 	lsl.w	r3, r1, r3
 80078a2:	b29b      	uxth	r3, r3
 80078a4:	68f9      	ldr	r1, [r7, #12]
 80078a6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80078aa:	4313      	orrs	r3, r2
 80078ac:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80078ae:	68bb      	ldr	r3, [r7, #8]
 80078b0:	015a      	lsls	r2, r3, #5
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	4413      	add	r3, r2
 80078b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d155      	bne.n	8007970 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80078c4:	68bb      	ldr	r3, [r7, #8]
 80078c6:	015a      	lsls	r2, r3, #5
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	4413      	add	r3, r2
 80078cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80078d0:	681a      	ldr	r2, [r3, #0]
 80078d2:	683b      	ldr	r3, [r7, #0]
 80078d4:	68db      	ldr	r3, [r3, #12]
 80078d6:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80078da:	683b      	ldr	r3, [r7, #0]
 80078dc:	791b      	ldrb	r3, [r3, #4]
 80078de:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80078e0:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80078e2:	68bb      	ldr	r3, [r7, #8]
 80078e4:	059b      	lsls	r3, r3, #22
 80078e6:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80078e8:	4313      	orrs	r3, r2
 80078ea:	68ba      	ldr	r2, [r7, #8]
 80078ec:	0151      	lsls	r1, r2, #5
 80078ee:	68fa      	ldr	r2, [r7, #12]
 80078f0:	440a      	add	r2, r1
 80078f2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80078f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80078fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80078fe:	6013      	str	r3, [r2, #0]
 8007900:	e036      	b.n	8007970 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007908:	69da      	ldr	r2, [r3, #28]
 800790a:	683b      	ldr	r3, [r7, #0]
 800790c:	781b      	ldrb	r3, [r3, #0]
 800790e:	f003 030f 	and.w	r3, r3, #15
 8007912:	2101      	movs	r1, #1
 8007914:	fa01 f303 	lsl.w	r3, r1, r3
 8007918:	041b      	lsls	r3, r3, #16
 800791a:	68f9      	ldr	r1, [r7, #12]
 800791c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007920:	4313      	orrs	r3, r2
 8007922:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8007924:	68bb      	ldr	r3, [r7, #8]
 8007926:	015a      	lsls	r2, r3, #5
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	4413      	add	r3, r2
 800792c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007936:	2b00      	cmp	r3, #0
 8007938:	d11a      	bne.n	8007970 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800793a:	68bb      	ldr	r3, [r7, #8]
 800793c:	015a      	lsls	r2, r3, #5
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	4413      	add	r3, r2
 8007942:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007946:	681a      	ldr	r2, [r3, #0]
 8007948:	683b      	ldr	r3, [r7, #0]
 800794a:	68db      	ldr	r3, [r3, #12]
 800794c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8007950:	683b      	ldr	r3, [r7, #0]
 8007952:	791b      	ldrb	r3, [r3, #4]
 8007954:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8007956:	430b      	orrs	r3, r1
 8007958:	4313      	orrs	r3, r2
 800795a:	68ba      	ldr	r2, [r7, #8]
 800795c:	0151      	lsls	r1, r2, #5
 800795e:	68fa      	ldr	r2, [r7, #12]
 8007960:	440a      	add	r2, r1
 8007962:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007966:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800796a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800796e:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8007970:	2300      	movs	r3, #0
}
 8007972:	4618      	mov	r0, r3
 8007974:	3714      	adds	r7, #20
 8007976:	46bd      	mov	sp, r7
 8007978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800797c:	4770      	bx	lr
	...

08007980 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007980:	b480      	push	{r7}
 8007982:	b085      	sub	sp, #20
 8007984:	af00      	add	r7, sp, #0
 8007986:	6078      	str	r0, [r7, #4]
 8007988:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800798e:	683b      	ldr	r3, [r7, #0]
 8007990:	781b      	ldrb	r3, [r3, #0]
 8007992:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8007994:	683b      	ldr	r3, [r7, #0]
 8007996:	785b      	ldrb	r3, [r3, #1]
 8007998:	2b01      	cmp	r3, #1
 800799a:	d161      	bne.n	8007a60 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800799c:	68bb      	ldr	r3, [r7, #8]
 800799e:	015a      	lsls	r2, r3, #5
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	4413      	add	r3, r2
 80079a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80079ae:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80079b2:	d11f      	bne.n	80079f4 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80079b4:	68bb      	ldr	r3, [r7, #8]
 80079b6:	015a      	lsls	r2, r3, #5
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	4413      	add	r3, r2
 80079bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	68ba      	ldr	r2, [r7, #8]
 80079c4:	0151      	lsls	r1, r2, #5
 80079c6:	68fa      	ldr	r2, [r7, #12]
 80079c8:	440a      	add	r2, r1
 80079ca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80079ce:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80079d2:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80079d4:	68bb      	ldr	r3, [r7, #8]
 80079d6:	015a      	lsls	r2, r3, #5
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	4413      	add	r3, r2
 80079dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	68ba      	ldr	r2, [r7, #8]
 80079e4:	0151      	lsls	r1, r2, #5
 80079e6:	68fa      	ldr	r2, [r7, #12]
 80079e8:	440a      	add	r2, r1
 80079ea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80079ee:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80079f2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80079fa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80079fc:	683b      	ldr	r3, [r7, #0]
 80079fe:	781b      	ldrb	r3, [r3, #0]
 8007a00:	f003 030f 	and.w	r3, r3, #15
 8007a04:	2101      	movs	r1, #1
 8007a06:	fa01 f303 	lsl.w	r3, r1, r3
 8007a0a:	b29b      	uxth	r3, r3
 8007a0c:	43db      	mvns	r3, r3
 8007a0e:	68f9      	ldr	r1, [r7, #12]
 8007a10:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007a14:	4013      	ands	r3, r2
 8007a16:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007a1e:	69da      	ldr	r2, [r3, #28]
 8007a20:	683b      	ldr	r3, [r7, #0]
 8007a22:	781b      	ldrb	r3, [r3, #0]
 8007a24:	f003 030f 	and.w	r3, r3, #15
 8007a28:	2101      	movs	r1, #1
 8007a2a:	fa01 f303 	lsl.w	r3, r1, r3
 8007a2e:	b29b      	uxth	r3, r3
 8007a30:	43db      	mvns	r3, r3
 8007a32:	68f9      	ldr	r1, [r7, #12]
 8007a34:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007a38:	4013      	ands	r3, r2
 8007a3a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8007a3c:	68bb      	ldr	r3, [r7, #8]
 8007a3e:	015a      	lsls	r2, r3, #5
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	4413      	add	r3, r2
 8007a44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a48:	681a      	ldr	r2, [r3, #0]
 8007a4a:	68bb      	ldr	r3, [r7, #8]
 8007a4c:	0159      	lsls	r1, r3, #5
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	440b      	add	r3, r1
 8007a52:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a56:	4619      	mov	r1, r3
 8007a58:	4b35      	ldr	r3, [pc, #212]	; (8007b30 <USB_DeactivateEndpoint+0x1b0>)
 8007a5a:	4013      	ands	r3, r2
 8007a5c:	600b      	str	r3, [r1, #0]
 8007a5e:	e060      	b.n	8007b22 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007a60:	68bb      	ldr	r3, [r7, #8]
 8007a62:	015a      	lsls	r2, r3, #5
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	4413      	add	r3, r2
 8007a68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007a72:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007a76:	d11f      	bne.n	8007ab8 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8007a78:	68bb      	ldr	r3, [r7, #8]
 8007a7a:	015a      	lsls	r2, r3, #5
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	4413      	add	r3, r2
 8007a80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	68ba      	ldr	r2, [r7, #8]
 8007a88:	0151      	lsls	r1, r2, #5
 8007a8a:	68fa      	ldr	r2, [r7, #12]
 8007a8c:	440a      	add	r2, r1
 8007a8e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007a92:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007a96:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8007a98:	68bb      	ldr	r3, [r7, #8]
 8007a9a:	015a      	lsls	r2, r3, #5
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	4413      	add	r3, r2
 8007aa0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	68ba      	ldr	r2, [r7, #8]
 8007aa8:	0151      	lsls	r1, r2, #5
 8007aaa:	68fa      	ldr	r2, [r7, #12]
 8007aac:	440a      	add	r2, r1
 8007aae:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007ab2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007ab6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007abe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007ac0:	683b      	ldr	r3, [r7, #0]
 8007ac2:	781b      	ldrb	r3, [r3, #0]
 8007ac4:	f003 030f 	and.w	r3, r3, #15
 8007ac8:	2101      	movs	r1, #1
 8007aca:	fa01 f303 	lsl.w	r3, r1, r3
 8007ace:	041b      	lsls	r3, r3, #16
 8007ad0:	43db      	mvns	r3, r3
 8007ad2:	68f9      	ldr	r1, [r7, #12]
 8007ad4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007ad8:	4013      	ands	r3, r2
 8007ada:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007ae2:	69da      	ldr	r2, [r3, #28]
 8007ae4:	683b      	ldr	r3, [r7, #0]
 8007ae6:	781b      	ldrb	r3, [r3, #0]
 8007ae8:	f003 030f 	and.w	r3, r3, #15
 8007aec:	2101      	movs	r1, #1
 8007aee:	fa01 f303 	lsl.w	r3, r1, r3
 8007af2:	041b      	lsls	r3, r3, #16
 8007af4:	43db      	mvns	r3, r3
 8007af6:	68f9      	ldr	r1, [r7, #12]
 8007af8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007afc:	4013      	ands	r3, r2
 8007afe:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8007b00:	68bb      	ldr	r3, [r7, #8]
 8007b02:	015a      	lsls	r2, r3, #5
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	4413      	add	r3, r2
 8007b08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b0c:	681a      	ldr	r2, [r3, #0]
 8007b0e:	68bb      	ldr	r3, [r7, #8]
 8007b10:	0159      	lsls	r1, r3, #5
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	440b      	add	r3, r1
 8007b16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b1a:	4619      	mov	r1, r3
 8007b1c:	4b05      	ldr	r3, [pc, #20]	; (8007b34 <USB_DeactivateEndpoint+0x1b4>)
 8007b1e:	4013      	ands	r3, r2
 8007b20:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8007b22:	2300      	movs	r3, #0
}
 8007b24:	4618      	mov	r0, r3
 8007b26:	3714      	adds	r7, #20
 8007b28:	46bd      	mov	sp, r7
 8007b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b2e:	4770      	bx	lr
 8007b30:	ec337800 	.word	0xec337800
 8007b34:	eff37800 	.word	0xeff37800

08007b38 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8007b38:	b580      	push	{r7, lr}
 8007b3a:	b08a      	sub	sp, #40	; 0x28
 8007b3c:	af02      	add	r7, sp, #8
 8007b3e:	60f8      	str	r0, [r7, #12]
 8007b40:	60b9      	str	r1, [r7, #8]
 8007b42:	4613      	mov	r3, r2
 8007b44:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8007b4a:	68bb      	ldr	r3, [r7, #8]
 8007b4c:	781b      	ldrb	r3, [r3, #0]
 8007b4e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007b50:	68bb      	ldr	r3, [r7, #8]
 8007b52:	785b      	ldrb	r3, [r3, #1]
 8007b54:	2b01      	cmp	r3, #1
 8007b56:	f040 815c 	bne.w	8007e12 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8007b5a:	68bb      	ldr	r3, [r7, #8]
 8007b5c:	699b      	ldr	r3, [r3, #24]
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d132      	bne.n	8007bc8 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007b62:	69bb      	ldr	r3, [r7, #24]
 8007b64:	015a      	lsls	r2, r3, #5
 8007b66:	69fb      	ldr	r3, [r7, #28]
 8007b68:	4413      	add	r3, r2
 8007b6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b6e:	691b      	ldr	r3, [r3, #16]
 8007b70:	69ba      	ldr	r2, [r7, #24]
 8007b72:	0151      	lsls	r1, r2, #5
 8007b74:	69fa      	ldr	r2, [r7, #28]
 8007b76:	440a      	add	r2, r1
 8007b78:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007b7c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007b80:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007b84:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007b86:	69bb      	ldr	r3, [r7, #24]
 8007b88:	015a      	lsls	r2, r3, #5
 8007b8a:	69fb      	ldr	r3, [r7, #28]
 8007b8c:	4413      	add	r3, r2
 8007b8e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b92:	691b      	ldr	r3, [r3, #16]
 8007b94:	69ba      	ldr	r2, [r7, #24]
 8007b96:	0151      	lsls	r1, r2, #5
 8007b98:	69fa      	ldr	r2, [r7, #28]
 8007b9a:	440a      	add	r2, r1
 8007b9c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007ba0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007ba4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007ba6:	69bb      	ldr	r3, [r7, #24]
 8007ba8:	015a      	lsls	r2, r3, #5
 8007baa:	69fb      	ldr	r3, [r7, #28]
 8007bac:	4413      	add	r3, r2
 8007bae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007bb2:	691b      	ldr	r3, [r3, #16]
 8007bb4:	69ba      	ldr	r2, [r7, #24]
 8007bb6:	0151      	lsls	r1, r2, #5
 8007bb8:	69fa      	ldr	r2, [r7, #28]
 8007bba:	440a      	add	r2, r1
 8007bbc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007bc0:	0cdb      	lsrs	r3, r3, #19
 8007bc2:	04db      	lsls	r3, r3, #19
 8007bc4:	6113      	str	r3, [r2, #16]
 8007bc6:	e074      	b.n	8007cb2 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007bc8:	69bb      	ldr	r3, [r7, #24]
 8007bca:	015a      	lsls	r2, r3, #5
 8007bcc:	69fb      	ldr	r3, [r7, #28]
 8007bce:	4413      	add	r3, r2
 8007bd0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007bd4:	691b      	ldr	r3, [r3, #16]
 8007bd6:	69ba      	ldr	r2, [r7, #24]
 8007bd8:	0151      	lsls	r1, r2, #5
 8007bda:	69fa      	ldr	r2, [r7, #28]
 8007bdc:	440a      	add	r2, r1
 8007bde:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007be2:	0cdb      	lsrs	r3, r3, #19
 8007be4:	04db      	lsls	r3, r3, #19
 8007be6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007be8:	69bb      	ldr	r3, [r7, #24]
 8007bea:	015a      	lsls	r2, r3, #5
 8007bec:	69fb      	ldr	r3, [r7, #28]
 8007bee:	4413      	add	r3, r2
 8007bf0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007bf4:	691b      	ldr	r3, [r3, #16]
 8007bf6:	69ba      	ldr	r2, [r7, #24]
 8007bf8:	0151      	lsls	r1, r2, #5
 8007bfa:	69fa      	ldr	r2, [r7, #28]
 8007bfc:	440a      	add	r2, r1
 8007bfe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007c02:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007c06:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007c0a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8007c0c:	69bb      	ldr	r3, [r7, #24]
 8007c0e:	015a      	lsls	r2, r3, #5
 8007c10:	69fb      	ldr	r3, [r7, #28]
 8007c12:	4413      	add	r3, r2
 8007c14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c18:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8007c1a:	68bb      	ldr	r3, [r7, #8]
 8007c1c:	6999      	ldr	r1, [r3, #24]
 8007c1e:	68bb      	ldr	r3, [r7, #8]
 8007c20:	68db      	ldr	r3, [r3, #12]
 8007c22:	440b      	add	r3, r1
 8007c24:	1e59      	subs	r1, r3, #1
 8007c26:	68bb      	ldr	r3, [r7, #8]
 8007c28:	68db      	ldr	r3, [r3, #12]
 8007c2a:	fbb1 f3f3 	udiv	r3, r1, r3
 8007c2e:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8007c30:	4b9d      	ldr	r3, [pc, #628]	; (8007ea8 <USB_EPStartXfer+0x370>)
 8007c32:	400b      	ands	r3, r1
 8007c34:	69b9      	ldr	r1, [r7, #24]
 8007c36:	0148      	lsls	r0, r1, #5
 8007c38:	69f9      	ldr	r1, [r7, #28]
 8007c3a:	4401      	add	r1, r0
 8007c3c:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8007c40:	4313      	orrs	r3, r2
 8007c42:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8007c44:	69bb      	ldr	r3, [r7, #24]
 8007c46:	015a      	lsls	r2, r3, #5
 8007c48:	69fb      	ldr	r3, [r7, #28]
 8007c4a:	4413      	add	r3, r2
 8007c4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c50:	691a      	ldr	r2, [r3, #16]
 8007c52:	68bb      	ldr	r3, [r7, #8]
 8007c54:	699b      	ldr	r3, [r3, #24]
 8007c56:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007c5a:	69b9      	ldr	r1, [r7, #24]
 8007c5c:	0148      	lsls	r0, r1, #5
 8007c5e:	69f9      	ldr	r1, [r7, #28]
 8007c60:	4401      	add	r1, r0
 8007c62:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8007c66:	4313      	orrs	r3, r2
 8007c68:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8007c6a:	68bb      	ldr	r3, [r7, #8]
 8007c6c:	791b      	ldrb	r3, [r3, #4]
 8007c6e:	2b01      	cmp	r3, #1
 8007c70:	d11f      	bne.n	8007cb2 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8007c72:	69bb      	ldr	r3, [r7, #24]
 8007c74:	015a      	lsls	r2, r3, #5
 8007c76:	69fb      	ldr	r3, [r7, #28]
 8007c78:	4413      	add	r3, r2
 8007c7a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c7e:	691b      	ldr	r3, [r3, #16]
 8007c80:	69ba      	ldr	r2, [r7, #24]
 8007c82:	0151      	lsls	r1, r2, #5
 8007c84:	69fa      	ldr	r2, [r7, #28]
 8007c86:	440a      	add	r2, r1
 8007c88:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007c8c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8007c90:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8007c92:	69bb      	ldr	r3, [r7, #24]
 8007c94:	015a      	lsls	r2, r3, #5
 8007c96:	69fb      	ldr	r3, [r7, #28]
 8007c98:	4413      	add	r3, r2
 8007c9a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c9e:	691b      	ldr	r3, [r3, #16]
 8007ca0:	69ba      	ldr	r2, [r7, #24]
 8007ca2:	0151      	lsls	r1, r2, #5
 8007ca4:	69fa      	ldr	r2, [r7, #28]
 8007ca6:	440a      	add	r2, r1
 8007ca8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007cac:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007cb0:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8007cb2:	79fb      	ldrb	r3, [r7, #7]
 8007cb4:	2b01      	cmp	r3, #1
 8007cb6:	d14b      	bne.n	8007d50 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8007cb8:	68bb      	ldr	r3, [r7, #8]
 8007cba:	695b      	ldr	r3, [r3, #20]
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d009      	beq.n	8007cd4 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8007cc0:	69bb      	ldr	r3, [r7, #24]
 8007cc2:	015a      	lsls	r2, r3, #5
 8007cc4:	69fb      	ldr	r3, [r7, #28]
 8007cc6:	4413      	add	r3, r2
 8007cc8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ccc:	461a      	mov	r2, r3
 8007cce:	68bb      	ldr	r3, [r7, #8]
 8007cd0:	695b      	ldr	r3, [r3, #20]
 8007cd2:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8007cd4:	68bb      	ldr	r3, [r7, #8]
 8007cd6:	791b      	ldrb	r3, [r3, #4]
 8007cd8:	2b01      	cmp	r3, #1
 8007cda:	d128      	bne.n	8007d2e <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007cdc:	69fb      	ldr	r3, [r7, #28]
 8007cde:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007ce2:	689b      	ldr	r3, [r3, #8]
 8007ce4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d110      	bne.n	8007d0e <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007cec:	69bb      	ldr	r3, [r7, #24]
 8007cee:	015a      	lsls	r2, r3, #5
 8007cf0:	69fb      	ldr	r3, [r7, #28]
 8007cf2:	4413      	add	r3, r2
 8007cf4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	69ba      	ldr	r2, [r7, #24]
 8007cfc:	0151      	lsls	r1, r2, #5
 8007cfe:	69fa      	ldr	r2, [r7, #28]
 8007d00:	440a      	add	r2, r1
 8007d02:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007d06:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007d0a:	6013      	str	r3, [r2, #0]
 8007d0c:	e00f      	b.n	8007d2e <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8007d0e:	69bb      	ldr	r3, [r7, #24]
 8007d10:	015a      	lsls	r2, r3, #5
 8007d12:	69fb      	ldr	r3, [r7, #28]
 8007d14:	4413      	add	r3, r2
 8007d16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	69ba      	ldr	r2, [r7, #24]
 8007d1e:	0151      	lsls	r1, r2, #5
 8007d20:	69fa      	ldr	r2, [r7, #28]
 8007d22:	440a      	add	r2, r1
 8007d24:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007d28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007d2c:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007d2e:	69bb      	ldr	r3, [r7, #24]
 8007d30:	015a      	lsls	r2, r3, #5
 8007d32:	69fb      	ldr	r3, [r7, #28]
 8007d34:	4413      	add	r3, r2
 8007d36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	69ba      	ldr	r2, [r7, #24]
 8007d3e:	0151      	lsls	r1, r2, #5
 8007d40:	69fa      	ldr	r2, [r7, #28]
 8007d42:	440a      	add	r2, r1
 8007d44:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007d48:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007d4c:	6013      	str	r3, [r2, #0]
 8007d4e:	e133      	b.n	8007fb8 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007d50:	69bb      	ldr	r3, [r7, #24]
 8007d52:	015a      	lsls	r2, r3, #5
 8007d54:	69fb      	ldr	r3, [r7, #28]
 8007d56:	4413      	add	r3, r2
 8007d58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	69ba      	ldr	r2, [r7, #24]
 8007d60:	0151      	lsls	r1, r2, #5
 8007d62:	69fa      	ldr	r2, [r7, #28]
 8007d64:	440a      	add	r2, r1
 8007d66:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007d6a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007d6e:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007d70:	68bb      	ldr	r3, [r7, #8]
 8007d72:	791b      	ldrb	r3, [r3, #4]
 8007d74:	2b01      	cmp	r3, #1
 8007d76:	d015      	beq.n	8007da4 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8007d78:	68bb      	ldr	r3, [r7, #8]
 8007d7a:	699b      	ldr	r3, [r3, #24]
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	f000 811b 	beq.w	8007fb8 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8007d82:	69fb      	ldr	r3, [r7, #28]
 8007d84:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007d88:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007d8a:	68bb      	ldr	r3, [r7, #8]
 8007d8c:	781b      	ldrb	r3, [r3, #0]
 8007d8e:	f003 030f 	and.w	r3, r3, #15
 8007d92:	2101      	movs	r1, #1
 8007d94:	fa01 f303 	lsl.w	r3, r1, r3
 8007d98:	69f9      	ldr	r1, [r7, #28]
 8007d9a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007d9e:	4313      	orrs	r3, r2
 8007da0:	634b      	str	r3, [r1, #52]	; 0x34
 8007da2:	e109      	b.n	8007fb8 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007da4:	69fb      	ldr	r3, [r7, #28]
 8007da6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007daa:	689b      	ldr	r3, [r3, #8]
 8007dac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d110      	bne.n	8007dd6 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007db4:	69bb      	ldr	r3, [r7, #24]
 8007db6:	015a      	lsls	r2, r3, #5
 8007db8:	69fb      	ldr	r3, [r7, #28]
 8007dba:	4413      	add	r3, r2
 8007dbc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	69ba      	ldr	r2, [r7, #24]
 8007dc4:	0151      	lsls	r1, r2, #5
 8007dc6:	69fa      	ldr	r2, [r7, #28]
 8007dc8:	440a      	add	r2, r1
 8007dca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007dce:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007dd2:	6013      	str	r3, [r2, #0]
 8007dd4:	e00f      	b.n	8007df6 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8007dd6:	69bb      	ldr	r3, [r7, #24]
 8007dd8:	015a      	lsls	r2, r3, #5
 8007dda:	69fb      	ldr	r3, [r7, #28]
 8007ddc:	4413      	add	r3, r2
 8007dde:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	69ba      	ldr	r2, [r7, #24]
 8007de6:	0151      	lsls	r1, r2, #5
 8007de8:	69fa      	ldr	r2, [r7, #28]
 8007dea:	440a      	add	r2, r1
 8007dec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007df0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007df4:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8007df6:	68bb      	ldr	r3, [r7, #8]
 8007df8:	6919      	ldr	r1, [r3, #16]
 8007dfa:	68bb      	ldr	r3, [r7, #8]
 8007dfc:	781a      	ldrb	r2, [r3, #0]
 8007dfe:	68bb      	ldr	r3, [r7, #8]
 8007e00:	699b      	ldr	r3, [r3, #24]
 8007e02:	b298      	uxth	r0, r3
 8007e04:	79fb      	ldrb	r3, [r7, #7]
 8007e06:	9300      	str	r3, [sp, #0]
 8007e08:	4603      	mov	r3, r0
 8007e0a:	68f8      	ldr	r0, [r7, #12]
 8007e0c:	f000 fade 	bl	80083cc <USB_WritePacket>
 8007e10:	e0d2      	b.n	8007fb8 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8007e12:	69bb      	ldr	r3, [r7, #24]
 8007e14:	015a      	lsls	r2, r3, #5
 8007e16:	69fb      	ldr	r3, [r7, #28]
 8007e18:	4413      	add	r3, r2
 8007e1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e1e:	691b      	ldr	r3, [r3, #16]
 8007e20:	69ba      	ldr	r2, [r7, #24]
 8007e22:	0151      	lsls	r1, r2, #5
 8007e24:	69fa      	ldr	r2, [r7, #28]
 8007e26:	440a      	add	r2, r1
 8007e28:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007e2c:	0cdb      	lsrs	r3, r3, #19
 8007e2e:	04db      	lsls	r3, r3, #19
 8007e30:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8007e32:	69bb      	ldr	r3, [r7, #24]
 8007e34:	015a      	lsls	r2, r3, #5
 8007e36:	69fb      	ldr	r3, [r7, #28]
 8007e38:	4413      	add	r3, r2
 8007e3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e3e:	691b      	ldr	r3, [r3, #16]
 8007e40:	69ba      	ldr	r2, [r7, #24]
 8007e42:	0151      	lsls	r1, r2, #5
 8007e44:	69fa      	ldr	r2, [r7, #28]
 8007e46:	440a      	add	r2, r1
 8007e48:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007e4c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007e50:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007e54:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8007e56:	68bb      	ldr	r3, [r7, #8]
 8007e58:	699b      	ldr	r3, [r3, #24]
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d126      	bne.n	8007eac <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8007e5e:	69bb      	ldr	r3, [r7, #24]
 8007e60:	015a      	lsls	r2, r3, #5
 8007e62:	69fb      	ldr	r3, [r7, #28]
 8007e64:	4413      	add	r3, r2
 8007e66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e6a:	691a      	ldr	r2, [r3, #16]
 8007e6c:	68bb      	ldr	r3, [r7, #8]
 8007e6e:	68db      	ldr	r3, [r3, #12]
 8007e70:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007e74:	69b9      	ldr	r1, [r7, #24]
 8007e76:	0148      	lsls	r0, r1, #5
 8007e78:	69f9      	ldr	r1, [r7, #28]
 8007e7a:	4401      	add	r1, r0
 8007e7c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007e80:	4313      	orrs	r3, r2
 8007e82:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007e84:	69bb      	ldr	r3, [r7, #24]
 8007e86:	015a      	lsls	r2, r3, #5
 8007e88:	69fb      	ldr	r3, [r7, #28]
 8007e8a:	4413      	add	r3, r2
 8007e8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e90:	691b      	ldr	r3, [r3, #16]
 8007e92:	69ba      	ldr	r2, [r7, #24]
 8007e94:	0151      	lsls	r1, r2, #5
 8007e96:	69fa      	ldr	r2, [r7, #28]
 8007e98:	440a      	add	r2, r1
 8007e9a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007e9e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007ea2:	6113      	str	r3, [r2, #16]
 8007ea4:	e03a      	b.n	8007f1c <USB_EPStartXfer+0x3e4>
 8007ea6:	bf00      	nop
 8007ea8:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8007eac:	68bb      	ldr	r3, [r7, #8]
 8007eae:	699a      	ldr	r2, [r3, #24]
 8007eb0:	68bb      	ldr	r3, [r7, #8]
 8007eb2:	68db      	ldr	r3, [r3, #12]
 8007eb4:	4413      	add	r3, r2
 8007eb6:	1e5a      	subs	r2, r3, #1
 8007eb8:	68bb      	ldr	r3, [r7, #8]
 8007eba:	68db      	ldr	r3, [r3, #12]
 8007ebc:	fbb2 f3f3 	udiv	r3, r2, r3
 8007ec0:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8007ec2:	68bb      	ldr	r3, [r7, #8]
 8007ec4:	68db      	ldr	r3, [r3, #12]
 8007ec6:	8afa      	ldrh	r2, [r7, #22]
 8007ec8:	fb03 f202 	mul.w	r2, r3, r2
 8007ecc:	68bb      	ldr	r3, [r7, #8]
 8007ece:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8007ed0:	69bb      	ldr	r3, [r7, #24]
 8007ed2:	015a      	lsls	r2, r3, #5
 8007ed4:	69fb      	ldr	r3, [r7, #28]
 8007ed6:	4413      	add	r3, r2
 8007ed8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007edc:	691a      	ldr	r2, [r3, #16]
 8007ede:	8afb      	ldrh	r3, [r7, #22]
 8007ee0:	04d9      	lsls	r1, r3, #19
 8007ee2:	4b38      	ldr	r3, [pc, #224]	; (8007fc4 <USB_EPStartXfer+0x48c>)
 8007ee4:	400b      	ands	r3, r1
 8007ee6:	69b9      	ldr	r1, [r7, #24]
 8007ee8:	0148      	lsls	r0, r1, #5
 8007eea:	69f9      	ldr	r1, [r7, #28]
 8007eec:	4401      	add	r1, r0
 8007eee:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007ef2:	4313      	orrs	r3, r2
 8007ef4:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8007ef6:	69bb      	ldr	r3, [r7, #24]
 8007ef8:	015a      	lsls	r2, r3, #5
 8007efa:	69fb      	ldr	r3, [r7, #28]
 8007efc:	4413      	add	r3, r2
 8007efe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f02:	691a      	ldr	r2, [r3, #16]
 8007f04:	68bb      	ldr	r3, [r7, #8]
 8007f06:	69db      	ldr	r3, [r3, #28]
 8007f08:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007f0c:	69b9      	ldr	r1, [r7, #24]
 8007f0e:	0148      	lsls	r0, r1, #5
 8007f10:	69f9      	ldr	r1, [r7, #28]
 8007f12:	4401      	add	r1, r0
 8007f14:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007f18:	4313      	orrs	r3, r2
 8007f1a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8007f1c:	79fb      	ldrb	r3, [r7, #7]
 8007f1e:	2b01      	cmp	r3, #1
 8007f20:	d10d      	bne.n	8007f3e <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8007f22:	68bb      	ldr	r3, [r7, #8]
 8007f24:	691b      	ldr	r3, [r3, #16]
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d009      	beq.n	8007f3e <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8007f2a:	68bb      	ldr	r3, [r7, #8]
 8007f2c:	6919      	ldr	r1, [r3, #16]
 8007f2e:	69bb      	ldr	r3, [r7, #24]
 8007f30:	015a      	lsls	r2, r3, #5
 8007f32:	69fb      	ldr	r3, [r7, #28]
 8007f34:	4413      	add	r3, r2
 8007f36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f3a:	460a      	mov	r2, r1
 8007f3c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8007f3e:	68bb      	ldr	r3, [r7, #8]
 8007f40:	791b      	ldrb	r3, [r3, #4]
 8007f42:	2b01      	cmp	r3, #1
 8007f44:	d128      	bne.n	8007f98 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007f46:	69fb      	ldr	r3, [r7, #28]
 8007f48:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007f4c:	689b      	ldr	r3, [r3, #8]
 8007f4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d110      	bne.n	8007f78 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8007f56:	69bb      	ldr	r3, [r7, #24]
 8007f58:	015a      	lsls	r2, r3, #5
 8007f5a:	69fb      	ldr	r3, [r7, #28]
 8007f5c:	4413      	add	r3, r2
 8007f5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	69ba      	ldr	r2, [r7, #24]
 8007f66:	0151      	lsls	r1, r2, #5
 8007f68:	69fa      	ldr	r2, [r7, #28]
 8007f6a:	440a      	add	r2, r1
 8007f6c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007f70:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007f74:	6013      	str	r3, [r2, #0]
 8007f76:	e00f      	b.n	8007f98 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8007f78:	69bb      	ldr	r3, [r7, #24]
 8007f7a:	015a      	lsls	r2, r3, #5
 8007f7c:	69fb      	ldr	r3, [r7, #28]
 8007f7e:	4413      	add	r3, r2
 8007f80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	69ba      	ldr	r2, [r7, #24]
 8007f88:	0151      	lsls	r1, r2, #5
 8007f8a:	69fa      	ldr	r2, [r7, #28]
 8007f8c:	440a      	add	r2, r1
 8007f8e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007f92:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007f96:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8007f98:	69bb      	ldr	r3, [r7, #24]
 8007f9a:	015a      	lsls	r2, r3, #5
 8007f9c:	69fb      	ldr	r3, [r7, #28]
 8007f9e:	4413      	add	r3, r2
 8007fa0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	69ba      	ldr	r2, [r7, #24]
 8007fa8:	0151      	lsls	r1, r2, #5
 8007faa:	69fa      	ldr	r2, [r7, #28]
 8007fac:	440a      	add	r2, r1
 8007fae:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007fb2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007fb6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007fb8:	2300      	movs	r3, #0
}
 8007fba:	4618      	mov	r0, r3
 8007fbc:	3720      	adds	r7, #32
 8007fbe:	46bd      	mov	sp, r7
 8007fc0:	bd80      	pop	{r7, pc}
 8007fc2:	bf00      	nop
 8007fc4:	1ff80000 	.word	0x1ff80000

08007fc8 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8007fc8:	b480      	push	{r7}
 8007fca:	b087      	sub	sp, #28
 8007fcc:	af00      	add	r7, sp, #0
 8007fce:	60f8      	str	r0, [r7, #12]
 8007fd0:	60b9      	str	r1, [r7, #8]
 8007fd2:	4613      	mov	r3, r2
 8007fd4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8007fda:	68bb      	ldr	r3, [r7, #8]
 8007fdc:	781b      	ldrb	r3, [r3, #0]
 8007fde:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007fe0:	68bb      	ldr	r3, [r7, #8]
 8007fe2:	785b      	ldrb	r3, [r3, #1]
 8007fe4:	2b01      	cmp	r3, #1
 8007fe6:	f040 80ce 	bne.w	8008186 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8007fea:	68bb      	ldr	r3, [r7, #8]
 8007fec:	699b      	ldr	r3, [r3, #24]
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d132      	bne.n	8008058 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007ff2:	693b      	ldr	r3, [r7, #16]
 8007ff4:	015a      	lsls	r2, r3, #5
 8007ff6:	697b      	ldr	r3, [r7, #20]
 8007ff8:	4413      	add	r3, r2
 8007ffa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ffe:	691b      	ldr	r3, [r3, #16]
 8008000:	693a      	ldr	r2, [r7, #16]
 8008002:	0151      	lsls	r1, r2, #5
 8008004:	697a      	ldr	r2, [r7, #20]
 8008006:	440a      	add	r2, r1
 8008008:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800800c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008010:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008014:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008016:	693b      	ldr	r3, [r7, #16]
 8008018:	015a      	lsls	r2, r3, #5
 800801a:	697b      	ldr	r3, [r7, #20]
 800801c:	4413      	add	r3, r2
 800801e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008022:	691b      	ldr	r3, [r3, #16]
 8008024:	693a      	ldr	r2, [r7, #16]
 8008026:	0151      	lsls	r1, r2, #5
 8008028:	697a      	ldr	r2, [r7, #20]
 800802a:	440a      	add	r2, r1
 800802c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008030:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008034:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008036:	693b      	ldr	r3, [r7, #16]
 8008038:	015a      	lsls	r2, r3, #5
 800803a:	697b      	ldr	r3, [r7, #20]
 800803c:	4413      	add	r3, r2
 800803e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008042:	691b      	ldr	r3, [r3, #16]
 8008044:	693a      	ldr	r2, [r7, #16]
 8008046:	0151      	lsls	r1, r2, #5
 8008048:	697a      	ldr	r2, [r7, #20]
 800804a:	440a      	add	r2, r1
 800804c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008050:	0cdb      	lsrs	r3, r3, #19
 8008052:	04db      	lsls	r3, r3, #19
 8008054:	6113      	str	r3, [r2, #16]
 8008056:	e04e      	b.n	80080f6 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008058:	693b      	ldr	r3, [r7, #16]
 800805a:	015a      	lsls	r2, r3, #5
 800805c:	697b      	ldr	r3, [r7, #20]
 800805e:	4413      	add	r3, r2
 8008060:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008064:	691b      	ldr	r3, [r3, #16]
 8008066:	693a      	ldr	r2, [r7, #16]
 8008068:	0151      	lsls	r1, r2, #5
 800806a:	697a      	ldr	r2, [r7, #20]
 800806c:	440a      	add	r2, r1
 800806e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008072:	0cdb      	lsrs	r3, r3, #19
 8008074:	04db      	lsls	r3, r3, #19
 8008076:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008078:	693b      	ldr	r3, [r7, #16]
 800807a:	015a      	lsls	r2, r3, #5
 800807c:	697b      	ldr	r3, [r7, #20]
 800807e:	4413      	add	r3, r2
 8008080:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008084:	691b      	ldr	r3, [r3, #16]
 8008086:	693a      	ldr	r2, [r7, #16]
 8008088:	0151      	lsls	r1, r2, #5
 800808a:	697a      	ldr	r2, [r7, #20]
 800808c:	440a      	add	r2, r1
 800808e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008092:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008096:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800809a:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800809c:	68bb      	ldr	r3, [r7, #8]
 800809e:	699a      	ldr	r2, [r3, #24]
 80080a0:	68bb      	ldr	r3, [r7, #8]
 80080a2:	68db      	ldr	r3, [r3, #12]
 80080a4:	429a      	cmp	r2, r3
 80080a6:	d903      	bls.n	80080b0 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 80080a8:	68bb      	ldr	r3, [r7, #8]
 80080aa:	68da      	ldr	r2, [r3, #12]
 80080ac:	68bb      	ldr	r3, [r7, #8]
 80080ae:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80080b0:	693b      	ldr	r3, [r7, #16]
 80080b2:	015a      	lsls	r2, r3, #5
 80080b4:	697b      	ldr	r3, [r7, #20]
 80080b6:	4413      	add	r3, r2
 80080b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80080bc:	691b      	ldr	r3, [r3, #16]
 80080be:	693a      	ldr	r2, [r7, #16]
 80080c0:	0151      	lsls	r1, r2, #5
 80080c2:	697a      	ldr	r2, [r7, #20]
 80080c4:	440a      	add	r2, r1
 80080c6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80080ca:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80080ce:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80080d0:	693b      	ldr	r3, [r7, #16]
 80080d2:	015a      	lsls	r2, r3, #5
 80080d4:	697b      	ldr	r3, [r7, #20]
 80080d6:	4413      	add	r3, r2
 80080d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80080dc:	691a      	ldr	r2, [r3, #16]
 80080de:	68bb      	ldr	r3, [r7, #8]
 80080e0:	699b      	ldr	r3, [r3, #24]
 80080e2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80080e6:	6939      	ldr	r1, [r7, #16]
 80080e8:	0148      	lsls	r0, r1, #5
 80080ea:	6979      	ldr	r1, [r7, #20]
 80080ec:	4401      	add	r1, r0
 80080ee:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80080f2:	4313      	orrs	r3, r2
 80080f4:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80080f6:	79fb      	ldrb	r3, [r7, #7]
 80080f8:	2b01      	cmp	r3, #1
 80080fa:	d11e      	bne.n	800813a <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80080fc:	68bb      	ldr	r3, [r7, #8]
 80080fe:	695b      	ldr	r3, [r3, #20]
 8008100:	2b00      	cmp	r3, #0
 8008102:	d009      	beq.n	8008118 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8008104:	693b      	ldr	r3, [r7, #16]
 8008106:	015a      	lsls	r2, r3, #5
 8008108:	697b      	ldr	r3, [r7, #20]
 800810a:	4413      	add	r3, r2
 800810c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008110:	461a      	mov	r2, r3
 8008112:	68bb      	ldr	r3, [r7, #8]
 8008114:	695b      	ldr	r3, [r3, #20]
 8008116:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008118:	693b      	ldr	r3, [r7, #16]
 800811a:	015a      	lsls	r2, r3, #5
 800811c:	697b      	ldr	r3, [r7, #20]
 800811e:	4413      	add	r3, r2
 8008120:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	693a      	ldr	r2, [r7, #16]
 8008128:	0151      	lsls	r1, r2, #5
 800812a:	697a      	ldr	r2, [r7, #20]
 800812c:	440a      	add	r2, r1
 800812e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008132:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008136:	6013      	str	r3, [r2, #0]
 8008138:	e097      	b.n	800826a <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800813a:	693b      	ldr	r3, [r7, #16]
 800813c:	015a      	lsls	r2, r3, #5
 800813e:	697b      	ldr	r3, [r7, #20]
 8008140:	4413      	add	r3, r2
 8008142:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	693a      	ldr	r2, [r7, #16]
 800814a:	0151      	lsls	r1, r2, #5
 800814c:	697a      	ldr	r2, [r7, #20]
 800814e:	440a      	add	r2, r1
 8008150:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008154:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008158:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800815a:	68bb      	ldr	r3, [r7, #8]
 800815c:	699b      	ldr	r3, [r3, #24]
 800815e:	2b00      	cmp	r3, #0
 8008160:	f000 8083 	beq.w	800826a <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8008164:	697b      	ldr	r3, [r7, #20]
 8008166:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800816a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800816c:	68bb      	ldr	r3, [r7, #8]
 800816e:	781b      	ldrb	r3, [r3, #0]
 8008170:	f003 030f 	and.w	r3, r3, #15
 8008174:	2101      	movs	r1, #1
 8008176:	fa01 f303 	lsl.w	r3, r1, r3
 800817a:	6979      	ldr	r1, [r7, #20]
 800817c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008180:	4313      	orrs	r3, r2
 8008182:	634b      	str	r3, [r1, #52]	; 0x34
 8008184:	e071      	b.n	800826a <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8008186:	693b      	ldr	r3, [r7, #16]
 8008188:	015a      	lsls	r2, r3, #5
 800818a:	697b      	ldr	r3, [r7, #20]
 800818c:	4413      	add	r3, r2
 800818e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008192:	691b      	ldr	r3, [r3, #16]
 8008194:	693a      	ldr	r2, [r7, #16]
 8008196:	0151      	lsls	r1, r2, #5
 8008198:	697a      	ldr	r2, [r7, #20]
 800819a:	440a      	add	r2, r1
 800819c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80081a0:	0cdb      	lsrs	r3, r3, #19
 80081a2:	04db      	lsls	r3, r3, #19
 80081a4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80081a6:	693b      	ldr	r3, [r7, #16]
 80081a8:	015a      	lsls	r2, r3, #5
 80081aa:	697b      	ldr	r3, [r7, #20]
 80081ac:	4413      	add	r3, r2
 80081ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80081b2:	691b      	ldr	r3, [r3, #16]
 80081b4:	693a      	ldr	r2, [r7, #16]
 80081b6:	0151      	lsls	r1, r2, #5
 80081b8:	697a      	ldr	r2, [r7, #20]
 80081ba:	440a      	add	r2, r1
 80081bc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80081c0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80081c4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80081c8:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 80081ca:	68bb      	ldr	r3, [r7, #8]
 80081cc:	699b      	ldr	r3, [r3, #24]
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d003      	beq.n	80081da <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 80081d2:	68bb      	ldr	r3, [r7, #8]
 80081d4:	68da      	ldr	r2, [r3, #12]
 80081d6:	68bb      	ldr	r3, [r7, #8]
 80081d8:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 80081da:	68bb      	ldr	r3, [r7, #8]
 80081dc:	68da      	ldr	r2, [r3, #12]
 80081de:	68bb      	ldr	r3, [r7, #8]
 80081e0:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80081e2:	693b      	ldr	r3, [r7, #16]
 80081e4:	015a      	lsls	r2, r3, #5
 80081e6:	697b      	ldr	r3, [r7, #20]
 80081e8:	4413      	add	r3, r2
 80081ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80081ee:	691b      	ldr	r3, [r3, #16]
 80081f0:	693a      	ldr	r2, [r7, #16]
 80081f2:	0151      	lsls	r1, r2, #5
 80081f4:	697a      	ldr	r2, [r7, #20]
 80081f6:	440a      	add	r2, r1
 80081f8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80081fc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008200:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8008202:	693b      	ldr	r3, [r7, #16]
 8008204:	015a      	lsls	r2, r3, #5
 8008206:	697b      	ldr	r3, [r7, #20]
 8008208:	4413      	add	r3, r2
 800820a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800820e:	691a      	ldr	r2, [r3, #16]
 8008210:	68bb      	ldr	r3, [r7, #8]
 8008212:	69db      	ldr	r3, [r3, #28]
 8008214:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008218:	6939      	ldr	r1, [r7, #16]
 800821a:	0148      	lsls	r0, r1, #5
 800821c:	6979      	ldr	r1, [r7, #20]
 800821e:	4401      	add	r1, r0
 8008220:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008224:	4313      	orrs	r3, r2
 8008226:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8008228:	79fb      	ldrb	r3, [r7, #7]
 800822a:	2b01      	cmp	r3, #1
 800822c:	d10d      	bne.n	800824a <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800822e:	68bb      	ldr	r3, [r7, #8]
 8008230:	691b      	ldr	r3, [r3, #16]
 8008232:	2b00      	cmp	r3, #0
 8008234:	d009      	beq.n	800824a <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8008236:	68bb      	ldr	r3, [r7, #8]
 8008238:	6919      	ldr	r1, [r3, #16]
 800823a:	693b      	ldr	r3, [r7, #16]
 800823c:	015a      	lsls	r2, r3, #5
 800823e:	697b      	ldr	r3, [r7, #20]
 8008240:	4413      	add	r3, r2
 8008242:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008246:	460a      	mov	r2, r1
 8008248:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800824a:	693b      	ldr	r3, [r7, #16]
 800824c:	015a      	lsls	r2, r3, #5
 800824e:	697b      	ldr	r3, [r7, #20]
 8008250:	4413      	add	r3, r2
 8008252:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	693a      	ldr	r2, [r7, #16]
 800825a:	0151      	lsls	r1, r2, #5
 800825c:	697a      	ldr	r2, [r7, #20]
 800825e:	440a      	add	r2, r1
 8008260:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008264:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008268:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800826a:	2300      	movs	r3, #0
}
 800826c:	4618      	mov	r0, r3
 800826e:	371c      	adds	r7, #28
 8008270:	46bd      	mov	sp, r7
 8008272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008276:	4770      	bx	lr

08008278 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008278:	b480      	push	{r7}
 800827a:	b087      	sub	sp, #28
 800827c:	af00      	add	r7, sp, #0
 800827e:	6078      	str	r0, [r7, #4]
 8008280:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8008282:	2300      	movs	r3, #0
 8008284:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8008286:	2300      	movs	r3, #0
 8008288:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800828e:	683b      	ldr	r3, [r7, #0]
 8008290:	785b      	ldrb	r3, [r3, #1]
 8008292:	2b01      	cmp	r3, #1
 8008294:	d14a      	bne.n	800832c <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008296:	683b      	ldr	r3, [r7, #0]
 8008298:	781b      	ldrb	r3, [r3, #0]
 800829a:	015a      	lsls	r2, r3, #5
 800829c:	693b      	ldr	r3, [r7, #16]
 800829e:	4413      	add	r3, r2
 80082a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80082aa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80082ae:	f040 8086 	bne.w	80083be <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80082b2:	683b      	ldr	r3, [r7, #0]
 80082b4:	781b      	ldrb	r3, [r3, #0]
 80082b6:	015a      	lsls	r2, r3, #5
 80082b8:	693b      	ldr	r3, [r7, #16]
 80082ba:	4413      	add	r3, r2
 80082bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	683a      	ldr	r2, [r7, #0]
 80082c4:	7812      	ldrb	r2, [r2, #0]
 80082c6:	0151      	lsls	r1, r2, #5
 80082c8:	693a      	ldr	r2, [r7, #16]
 80082ca:	440a      	add	r2, r1
 80082cc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80082d0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80082d4:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80082d6:	683b      	ldr	r3, [r7, #0]
 80082d8:	781b      	ldrb	r3, [r3, #0]
 80082da:	015a      	lsls	r2, r3, #5
 80082dc:	693b      	ldr	r3, [r7, #16]
 80082de:	4413      	add	r3, r2
 80082e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	683a      	ldr	r2, [r7, #0]
 80082e8:	7812      	ldrb	r2, [r2, #0]
 80082ea:	0151      	lsls	r1, r2, #5
 80082ec:	693a      	ldr	r2, [r7, #16]
 80082ee:	440a      	add	r2, r1
 80082f0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80082f4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80082f8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	3301      	adds	r3, #1
 80082fe:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	f242 7210 	movw	r2, #10000	; 0x2710
 8008306:	4293      	cmp	r3, r2
 8008308:	d902      	bls.n	8008310 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800830a:	2301      	movs	r3, #1
 800830c:	75fb      	strb	r3, [r7, #23]
          break;
 800830e:	e056      	b.n	80083be <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8008310:	683b      	ldr	r3, [r7, #0]
 8008312:	781b      	ldrb	r3, [r3, #0]
 8008314:	015a      	lsls	r2, r3, #5
 8008316:	693b      	ldr	r3, [r7, #16]
 8008318:	4413      	add	r3, r2
 800831a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008324:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008328:	d0e7      	beq.n	80082fa <USB_EPStopXfer+0x82>
 800832a:	e048      	b.n	80083be <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800832c:	683b      	ldr	r3, [r7, #0]
 800832e:	781b      	ldrb	r3, [r3, #0]
 8008330:	015a      	lsls	r2, r3, #5
 8008332:	693b      	ldr	r3, [r7, #16]
 8008334:	4413      	add	r3, r2
 8008336:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008340:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008344:	d13b      	bne.n	80083be <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8008346:	683b      	ldr	r3, [r7, #0]
 8008348:	781b      	ldrb	r3, [r3, #0]
 800834a:	015a      	lsls	r2, r3, #5
 800834c:	693b      	ldr	r3, [r7, #16]
 800834e:	4413      	add	r3, r2
 8008350:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	683a      	ldr	r2, [r7, #0]
 8008358:	7812      	ldrb	r2, [r2, #0]
 800835a:	0151      	lsls	r1, r2, #5
 800835c:	693a      	ldr	r2, [r7, #16]
 800835e:	440a      	add	r2, r1
 8008360:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008364:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008368:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800836a:	683b      	ldr	r3, [r7, #0]
 800836c:	781b      	ldrb	r3, [r3, #0]
 800836e:	015a      	lsls	r2, r3, #5
 8008370:	693b      	ldr	r3, [r7, #16]
 8008372:	4413      	add	r3, r2
 8008374:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	683a      	ldr	r2, [r7, #0]
 800837c:	7812      	ldrb	r2, [r2, #0]
 800837e:	0151      	lsls	r1, r2, #5
 8008380:	693a      	ldr	r2, [r7, #16]
 8008382:	440a      	add	r2, r1
 8008384:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008388:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800838c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	3301      	adds	r3, #1
 8008392:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	f242 7210 	movw	r2, #10000	; 0x2710
 800839a:	4293      	cmp	r3, r2
 800839c:	d902      	bls.n	80083a4 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800839e:	2301      	movs	r3, #1
 80083a0:	75fb      	strb	r3, [r7, #23]
          break;
 80083a2:	e00c      	b.n	80083be <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80083a4:	683b      	ldr	r3, [r7, #0]
 80083a6:	781b      	ldrb	r3, [r3, #0]
 80083a8:	015a      	lsls	r2, r3, #5
 80083aa:	693b      	ldr	r3, [r7, #16]
 80083ac:	4413      	add	r3, r2
 80083ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80083b8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80083bc:	d0e7      	beq.n	800838e <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80083be:	7dfb      	ldrb	r3, [r7, #23]
}
 80083c0:	4618      	mov	r0, r3
 80083c2:	371c      	adds	r7, #28
 80083c4:	46bd      	mov	sp, r7
 80083c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ca:	4770      	bx	lr

080083cc <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80083cc:	b480      	push	{r7}
 80083ce:	b089      	sub	sp, #36	; 0x24
 80083d0:	af00      	add	r7, sp, #0
 80083d2:	60f8      	str	r0, [r7, #12]
 80083d4:	60b9      	str	r1, [r7, #8]
 80083d6:	4611      	mov	r1, r2
 80083d8:	461a      	mov	r2, r3
 80083da:	460b      	mov	r3, r1
 80083dc:	71fb      	strb	r3, [r7, #7]
 80083de:	4613      	mov	r3, r2
 80083e0:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80083e6:	68bb      	ldr	r3, [r7, #8]
 80083e8:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80083ea:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d123      	bne.n	800843a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80083f2:	88bb      	ldrh	r3, [r7, #4]
 80083f4:	3303      	adds	r3, #3
 80083f6:	089b      	lsrs	r3, r3, #2
 80083f8:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80083fa:	2300      	movs	r3, #0
 80083fc:	61bb      	str	r3, [r7, #24]
 80083fe:	e018      	b.n	8008432 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8008400:	79fb      	ldrb	r3, [r7, #7]
 8008402:	031a      	lsls	r2, r3, #12
 8008404:	697b      	ldr	r3, [r7, #20]
 8008406:	4413      	add	r3, r2
 8008408:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800840c:	461a      	mov	r2, r3
 800840e:	69fb      	ldr	r3, [r7, #28]
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	6013      	str	r3, [r2, #0]
      pSrc++;
 8008414:	69fb      	ldr	r3, [r7, #28]
 8008416:	3301      	adds	r3, #1
 8008418:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800841a:	69fb      	ldr	r3, [r7, #28]
 800841c:	3301      	adds	r3, #1
 800841e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008420:	69fb      	ldr	r3, [r7, #28]
 8008422:	3301      	adds	r3, #1
 8008424:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008426:	69fb      	ldr	r3, [r7, #28]
 8008428:	3301      	adds	r3, #1
 800842a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800842c:	69bb      	ldr	r3, [r7, #24]
 800842e:	3301      	adds	r3, #1
 8008430:	61bb      	str	r3, [r7, #24]
 8008432:	69ba      	ldr	r2, [r7, #24]
 8008434:	693b      	ldr	r3, [r7, #16]
 8008436:	429a      	cmp	r2, r3
 8008438:	d3e2      	bcc.n	8008400 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800843a:	2300      	movs	r3, #0
}
 800843c:	4618      	mov	r0, r3
 800843e:	3724      	adds	r7, #36	; 0x24
 8008440:	46bd      	mov	sp, r7
 8008442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008446:	4770      	bx	lr

08008448 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8008448:	b480      	push	{r7}
 800844a:	b08b      	sub	sp, #44	; 0x2c
 800844c:	af00      	add	r7, sp, #0
 800844e:	60f8      	str	r0, [r7, #12]
 8008450:	60b9      	str	r1, [r7, #8]
 8008452:	4613      	mov	r3, r2
 8008454:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008456:	68fb      	ldr	r3, [r7, #12]
 8008458:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800845a:	68bb      	ldr	r3, [r7, #8]
 800845c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800845e:	88fb      	ldrh	r3, [r7, #6]
 8008460:	089b      	lsrs	r3, r3, #2
 8008462:	b29b      	uxth	r3, r3
 8008464:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8008466:	88fb      	ldrh	r3, [r7, #6]
 8008468:	f003 0303 	and.w	r3, r3, #3
 800846c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800846e:	2300      	movs	r3, #0
 8008470:	623b      	str	r3, [r7, #32]
 8008472:	e014      	b.n	800849e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8008474:	69bb      	ldr	r3, [r7, #24]
 8008476:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800847a:	681a      	ldr	r2, [r3, #0]
 800847c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800847e:	601a      	str	r2, [r3, #0]
    pDest++;
 8008480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008482:	3301      	adds	r3, #1
 8008484:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8008486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008488:	3301      	adds	r3, #1
 800848a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800848c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800848e:	3301      	adds	r3, #1
 8008490:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8008492:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008494:	3301      	adds	r3, #1
 8008496:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8008498:	6a3b      	ldr	r3, [r7, #32]
 800849a:	3301      	adds	r3, #1
 800849c:	623b      	str	r3, [r7, #32]
 800849e:	6a3a      	ldr	r2, [r7, #32]
 80084a0:	697b      	ldr	r3, [r7, #20]
 80084a2:	429a      	cmp	r2, r3
 80084a4:	d3e6      	bcc.n	8008474 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80084a6:	8bfb      	ldrh	r3, [r7, #30]
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d01e      	beq.n	80084ea <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80084ac:	2300      	movs	r3, #0
 80084ae:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80084b0:	69bb      	ldr	r3, [r7, #24]
 80084b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80084b6:	461a      	mov	r2, r3
 80084b8:	f107 0310 	add.w	r3, r7, #16
 80084bc:	6812      	ldr	r2, [r2, #0]
 80084be:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80084c0:	693a      	ldr	r2, [r7, #16]
 80084c2:	6a3b      	ldr	r3, [r7, #32]
 80084c4:	b2db      	uxtb	r3, r3
 80084c6:	00db      	lsls	r3, r3, #3
 80084c8:	fa22 f303 	lsr.w	r3, r2, r3
 80084cc:	b2da      	uxtb	r2, r3
 80084ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084d0:	701a      	strb	r2, [r3, #0]
      i++;
 80084d2:	6a3b      	ldr	r3, [r7, #32]
 80084d4:	3301      	adds	r3, #1
 80084d6:	623b      	str	r3, [r7, #32]
      pDest++;
 80084d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084da:	3301      	adds	r3, #1
 80084dc:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80084de:	8bfb      	ldrh	r3, [r7, #30]
 80084e0:	3b01      	subs	r3, #1
 80084e2:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80084e4:	8bfb      	ldrh	r3, [r7, #30]
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	d1ea      	bne.n	80084c0 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80084ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80084ec:	4618      	mov	r0, r3
 80084ee:	372c      	adds	r7, #44	; 0x2c
 80084f0:	46bd      	mov	sp, r7
 80084f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084f6:	4770      	bx	lr

080084f8 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80084f8:	b480      	push	{r7}
 80084fa:	b085      	sub	sp, #20
 80084fc:	af00      	add	r7, sp, #0
 80084fe:	6078      	str	r0, [r7, #4]
 8008500:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008506:	683b      	ldr	r3, [r7, #0]
 8008508:	781b      	ldrb	r3, [r3, #0]
 800850a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800850c:	683b      	ldr	r3, [r7, #0]
 800850e:	785b      	ldrb	r3, [r3, #1]
 8008510:	2b01      	cmp	r3, #1
 8008512:	d12c      	bne.n	800856e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8008514:	68bb      	ldr	r3, [r7, #8]
 8008516:	015a      	lsls	r2, r3, #5
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	4413      	add	r3, r2
 800851c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	2b00      	cmp	r3, #0
 8008524:	db12      	blt.n	800854c <USB_EPSetStall+0x54>
 8008526:	68bb      	ldr	r3, [r7, #8]
 8008528:	2b00      	cmp	r3, #0
 800852a:	d00f      	beq.n	800854c <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800852c:	68bb      	ldr	r3, [r7, #8]
 800852e:	015a      	lsls	r2, r3, #5
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	4413      	add	r3, r2
 8008534:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	68ba      	ldr	r2, [r7, #8]
 800853c:	0151      	lsls	r1, r2, #5
 800853e:	68fa      	ldr	r2, [r7, #12]
 8008540:	440a      	add	r2, r1
 8008542:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008546:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800854a:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800854c:	68bb      	ldr	r3, [r7, #8]
 800854e:	015a      	lsls	r2, r3, #5
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	4413      	add	r3, r2
 8008554:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	68ba      	ldr	r2, [r7, #8]
 800855c:	0151      	lsls	r1, r2, #5
 800855e:	68fa      	ldr	r2, [r7, #12]
 8008560:	440a      	add	r2, r1
 8008562:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008566:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800856a:	6013      	str	r3, [r2, #0]
 800856c:	e02b      	b.n	80085c6 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800856e:	68bb      	ldr	r3, [r7, #8]
 8008570:	015a      	lsls	r2, r3, #5
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	4413      	add	r3, r2
 8008576:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	2b00      	cmp	r3, #0
 800857e:	db12      	blt.n	80085a6 <USB_EPSetStall+0xae>
 8008580:	68bb      	ldr	r3, [r7, #8]
 8008582:	2b00      	cmp	r3, #0
 8008584:	d00f      	beq.n	80085a6 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8008586:	68bb      	ldr	r3, [r7, #8]
 8008588:	015a      	lsls	r2, r3, #5
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	4413      	add	r3, r2
 800858e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	68ba      	ldr	r2, [r7, #8]
 8008596:	0151      	lsls	r1, r2, #5
 8008598:	68fa      	ldr	r2, [r7, #12]
 800859a:	440a      	add	r2, r1
 800859c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80085a0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80085a4:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80085a6:	68bb      	ldr	r3, [r7, #8]
 80085a8:	015a      	lsls	r2, r3, #5
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	4413      	add	r3, r2
 80085ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	68ba      	ldr	r2, [r7, #8]
 80085b6:	0151      	lsls	r1, r2, #5
 80085b8:	68fa      	ldr	r2, [r7, #12]
 80085ba:	440a      	add	r2, r1
 80085bc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80085c0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80085c4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80085c6:	2300      	movs	r3, #0
}
 80085c8:	4618      	mov	r0, r3
 80085ca:	3714      	adds	r7, #20
 80085cc:	46bd      	mov	sp, r7
 80085ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085d2:	4770      	bx	lr

080085d4 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80085d4:	b480      	push	{r7}
 80085d6:	b085      	sub	sp, #20
 80085d8:	af00      	add	r7, sp, #0
 80085da:	6078      	str	r0, [r7, #4]
 80085dc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80085e2:	683b      	ldr	r3, [r7, #0]
 80085e4:	781b      	ldrb	r3, [r3, #0]
 80085e6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80085e8:	683b      	ldr	r3, [r7, #0]
 80085ea:	785b      	ldrb	r3, [r3, #1]
 80085ec:	2b01      	cmp	r3, #1
 80085ee:	d128      	bne.n	8008642 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80085f0:	68bb      	ldr	r3, [r7, #8]
 80085f2:	015a      	lsls	r2, r3, #5
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	4413      	add	r3, r2
 80085f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	68ba      	ldr	r2, [r7, #8]
 8008600:	0151      	lsls	r1, r2, #5
 8008602:	68fa      	ldr	r2, [r7, #12]
 8008604:	440a      	add	r2, r1
 8008606:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800860a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800860e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8008610:	683b      	ldr	r3, [r7, #0]
 8008612:	791b      	ldrb	r3, [r3, #4]
 8008614:	2b03      	cmp	r3, #3
 8008616:	d003      	beq.n	8008620 <USB_EPClearStall+0x4c>
 8008618:	683b      	ldr	r3, [r7, #0]
 800861a:	791b      	ldrb	r3, [r3, #4]
 800861c:	2b02      	cmp	r3, #2
 800861e:	d138      	bne.n	8008692 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8008620:	68bb      	ldr	r3, [r7, #8]
 8008622:	015a      	lsls	r2, r3, #5
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	4413      	add	r3, r2
 8008628:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	68ba      	ldr	r2, [r7, #8]
 8008630:	0151      	lsls	r1, r2, #5
 8008632:	68fa      	ldr	r2, [r7, #12]
 8008634:	440a      	add	r2, r1
 8008636:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800863a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800863e:	6013      	str	r3, [r2, #0]
 8008640:	e027      	b.n	8008692 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8008642:	68bb      	ldr	r3, [r7, #8]
 8008644:	015a      	lsls	r2, r3, #5
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	4413      	add	r3, r2
 800864a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	68ba      	ldr	r2, [r7, #8]
 8008652:	0151      	lsls	r1, r2, #5
 8008654:	68fa      	ldr	r2, [r7, #12]
 8008656:	440a      	add	r2, r1
 8008658:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800865c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008660:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8008662:	683b      	ldr	r3, [r7, #0]
 8008664:	791b      	ldrb	r3, [r3, #4]
 8008666:	2b03      	cmp	r3, #3
 8008668:	d003      	beq.n	8008672 <USB_EPClearStall+0x9e>
 800866a:	683b      	ldr	r3, [r7, #0]
 800866c:	791b      	ldrb	r3, [r3, #4]
 800866e:	2b02      	cmp	r3, #2
 8008670:	d10f      	bne.n	8008692 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8008672:	68bb      	ldr	r3, [r7, #8]
 8008674:	015a      	lsls	r2, r3, #5
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	4413      	add	r3, r2
 800867a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	68ba      	ldr	r2, [r7, #8]
 8008682:	0151      	lsls	r1, r2, #5
 8008684:	68fa      	ldr	r2, [r7, #12]
 8008686:	440a      	add	r2, r1
 8008688:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800868c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008690:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8008692:	2300      	movs	r3, #0
}
 8008694:	4618      	mov	r0, r3
 8008696:	3714      	adds	r7, #20
 8008698:	46bd      	mov	sp, r7
 800869a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800869e:	4770      	bx	lr

080086a0 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80086a0:	b480      	push	{r7}
 80086a2:	b085      	sub	sp, #20
 80086a4:	af00      	add	r7, sp, #0
 80086a6:	6078      	str	r0, [r7, #4]
 80086a8:	460b      	mov	r3, r1
 80086aa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	68fa      	ldr	r2, [r7, #12]
 80086ba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80086be:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80086c2:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80086ca:	681a      	ldr	r2, [r3, #0]
 80086cc:	78fb      	ldrb	r3, [r7, #3]
 80086ce:	011b      	lsls	r3, r3, #4
 80086d0:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80086d4:	68f9      	ldr	r1, [r7, #12]
 80086d6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80086da:	4313      	orrs	r3, r2
 80086dc:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80086de:	2300      	movs	r3, #0
}
 80086e0:	4618      	mov	r0, r3
 80086e2:	3714      	adds	r7, #20
 80086e4:	46bd      	mov	sp, r7
 80086e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ea:	4770      	bx	lr

080086ec <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 80086ec:	b480      	push	{r7}
 80086ee:	b085      	sub	sp, #20
 80086f0:	af00      	add	r7, sp, #0
 80086f2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	68fa      	ldr	r2, [r7, #12]
 8008702:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008706:	f023 0303 	bic.w	r3, r3, #3
 800870a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008712:	685b      	ldr	r3, [r3, #4]
 8008714:	68fa      	ldr	r2, [r7, #12]
 8008716:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800871a:	f023 0302 	bic.w	r3, r3, #2
 800871e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008720:	2300      	movs	r3, #0
}
 8008722:	4618      	mov	r0, r3
 8008724:	3714      	adds	r7, #20
 8008726:	46bd      	mov	sp, r7
 8008728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800872c:	4770      	bx	lr

0800872e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800872e:	b480      	push	{r7}
 8008730:	b085      	sub	sp, #20
 8008732:	af00      	add	r7, sp, #0
 8008734:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800873a:	68fb      	ldr	r3, [r7, #12]
 800873c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	68fa      	ldr	r2, [r7, #12]
 8008744:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008748:	f023 0303 	bic.w	r3, r3, #3
 800874c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008754:	685b      	ldr	r3, [r3, #4]
 8008756:	68fa      	ldr	r2, [r7, #12]
 8008758:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800875c:	f043 0302 	orr.w	r3, r3, #2
 8008760:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008762:	2300      	movs	r3, #0
}
 8008764:	4618      	mov	r0, r3
 8008766:	3714      	adds	r7, #20
 8008768:	46bd      	mov	sp, r7
 800876a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800876e:	4770      	bx	lr

08008770 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8008770:	b480      	push	{r7}
 8008772:	b085      	sub	sp, #20
 8008774:	af00      	add	r7, sp, #0
 8008776:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	695b      	ldr	r3, [r3, #20]
 800877c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	699b      	ldr	r3, [r3, #24]
 8008782:	68fa      	ldr	r2, [r7, #12]
 8008784:	4013      	ands	r3, r2
 8008786:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8008788:	68fb      	ldr	r3, [r7, #12]
}
 800878a:	4618      	mov	r0, r3
 800878c:	3714      	adds	r7, #20
 800878e:	46bd      	mov	sp, r7
 8008790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008794:	4770      	bx	lr

08008796 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8008796:	b480      	push	{r7}
 8008798:	b085      	sub	sp, #20
 800879a:	af00      	add	r7, sp, #0
 800879c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80087a2:	68fb      	ldr	r3, [r7, #12]
 80087a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80087a8:	699b      	ldr	r3, [r3, #24]
 80087aa:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80087b2:	69db      	ldr	r3, [r3, #28]
 80087b4:	68ba      	ldr	r2, [r7, #8]
 80087b6:	4013      	ands	r3, r2
 80087b8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80087ba:	68bb      	ldr	r3, [r7, #8]
 80087bc:	0c1b      	lsrs	r3, r3, #16
}
 80087be:	4618      	mov	r0, r3
 80087c0:	3714      	adds	r7, #20
 80087c2:	46bd      	mov	sp, r7
 80087c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087c8:	4770      	bx	lr

080087ca <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80087ca:	b480      	push	{r7}
 80087cc:	b085      	sub	sp, #20
 80087ce:	af00      	add	r7, sp, #0
 80087d0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80087dc:	699b      	ldr	r3, [r3, #24]
 80087de:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80087e6:	69db      	ldr	r3, [r3, #28]
 80087e8:	68ba      	ldr	r2, [r7, #8]
 80087ea:	4013      	ands	r3, r2
 80087ec:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80087ee:	68bb      	ldr	r3, [r7, #8]
 80087f0:	b29b      	uxth	r3, r3
}
 80087f2:	4618      	mov	r0, r3
 80087f4:	3714      	adds	r7, #20
 80087f6:	46bd      	mov	sp, r7
 80087f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087fc:	4770      	bx	lr

080087fe <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80087fe:	b480      	push	{r7}
 8008800:	b085      	sub	sp, #20
 8008802:	af00      	add	r7, sp, #0
 8008804:	6078      	str	r0, [r7, #4]
 8008806:	460b      	mov	r3, r1
 8008808:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800880e:	78fb      	ldrb	r3, [r7, #3]
 8008810:	015a      	lsls	r2, r3, #5
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	4413      	add	r3, r2
 8008816:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800881a:	689b      	ldr	r3, [r3, #8]
 800881c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008824:	695b      	ldr	r3, [r3, #20]
 8008826:	68ba      	ldr	r2, [r7, #8]
 8008828:	4013      	ands	r3, r2
 800882a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800882c:	68bb      	ldr	r3, [r7, #8]
}
 800882e:	4618      	mov	r0, r3
 8008830:	3714      	adds	r7, #20
 8008832:	46bd      	mov	sp, r7
 8008834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008838:	4770      	bx	lr

0800883a <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800883a:	b480      	push	{r7}
 800883c:	b087      	sub	sp, #28
 800883e:	af00      	add	r7, sp, #0
 8008840:	6078      	str	r0, [r7, #4]
 8008842:	460b      	mov	r3, r1
 8008844:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800884a:	697b      	ldr	r3, [r7, #20]
 800884c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008850:	691b      	ldr	r3, [r3, #16]
 8008852:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8008854:	697b      	ldr	r3, [r7, #20]
 8008856:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800885a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800885c:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800885e:	78fb      	ldrb	r3, [r7, #3]
 8008860:	f003 030f 	and.w	r3, r3, #15
 8008864:	68fa      	ldr	r2, [r7, #12]
 8008866:	fa22 f303 	lsr.w	r3, r2, r3
 800886a:	01db      	lsls	r3, r3, #7
 800886c:	b2db      	uxtb	r3, r3
 800886e:	693a      	ldr	r2, [r7, #16]
 8008870:	4313      	orrs	r3, r2
 8008872:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8008874:	78fb      	ldrb	r3, [r7, #3]
 8008876:	015a      	lsls	r2, r3, #5
 8008878:	697b      	ldr	r3, [r7, #20]
 800887a:	4413      	add	r3, r2
 800887c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008880:	689b      	ldr	r3, [r3, #8]
 8008882:	693a      	ldr	r2, [r7, #16]
 8008884:	4013      	ands	r3, r2
 8008886:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008888:	68bb      	ldr	r3, [r7, #8]
}
 800888a:	4618      	mov	r0, r3
 800888c:	371c      	adds	r7, #28
 800888e:	46bd      	mov	sp, r7
 8008890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008894:	4770      	bx	lr

08008896 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8008896:	b480      	push	{r7}
 8008898:	b083      	sub	sp, #12
 800889a:	af00      	add	r7, sp, #0
 800889c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	695b      	ldr	r3, [r3, #20]
 80088a2:	f003 0301 	and.w	r3, r3, #1
}
 80088a6:	4618      	mov	r0, r3
 80088a8:	370c      	adds	r7, #12
 80088aa:	46bd      	mov	sp, r7
 80088ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088b0:	4770      	bx	lr

080088b2 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80088b2:	b480      	push	{r7}
 80088b4:	b085      	sub	sp, #20
 80088b6:	af00      	add	r7, sp, #0
 80088b8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	68fa      	ldr	r2, [r7, #12]
 80088c8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80088cc:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80088d0:	f023 0307 	bic.w	r3, r3, #7
 80088d4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80088d6:	68fb      	ldr	r3, [r7, #12]
 80088d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80088dc:	685b      	ldr	r3, [r3, #4]
 80088de:	68fa      	ldr	r2, [r7, #12]
 80088e0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80088e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80088e8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80088ea:	2300      	movs	r3, #0
}
 80088ec:	4618      	mov	r0, r3
 80088ee:	3714      	adds	r7, #20
 80088f0:	46bd      	mov	sp, r7
 80088f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088f6:	4770      	bx	lr

080088f8 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80088f8:	b480      	push	{r7}
 80088fa:	b087      	sub	sp, #28
 80088fc:	af00      	add	r7, sp, #0
 80088fe:	60f8      	str	r0, [r7, #12]
 8008900:	460b      	mov	r3, r1
 8008902:	607a      	str	r2, [r7, #4]
 8008904:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008906:	68fb      	ldr	r3, [r7, #12]
 8008908:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	333c      	adds	r3, #60	; 0x3c
 800890e:	3304      	adds	r3, #4
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8008914:	693b      	ldr	r3, [r7, #16]
 8008916:	4a26      	ldr	r2, [pc, #152]	; (80089b0 <USB_EP0_OutStart+0xb8>)
 8008918:	4293      	cmp	r3, r2
 800891a:	d90a      	bls.n	8008932 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800891c:	697b      	ldr	r3, [r7, #20]
 800891e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008928:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800892c:	d101      	bne.n	8008932 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800892e:	2300      	movs	r3, #0
 8008930:	e037      	b.n	80089a2 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8008932:	697b      	ldr	r3, [r7, #20]
 8008934:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008938:	461a      	mov	r2, r3
 800893a:	2300      	movs	r3, #0
 800893c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800893e:	697b      	ldr	r3, [r7, #20]
 8008940:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008944:	691b      	ldr	r3, [r3, #16]
 8008946:	697a      	ldr	r2, [r7, #20]
 8008948:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800894c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008950:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8008952:	697b      	ldr	r3, [r7, #20]
 8008954:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008958:	691b      	ldr	r3, [r3, #16]
 800895a:	697a      	ldr	r2, [r7, #20]
 800895c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008960:	f043 0318 	orr.w	r3, r3, #24
 8008964:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8008966:	697b      	ldr	r3, [r7, #20]
 8008968:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800896c:	691b      	ldr	r3, [r3, #16]
 800896e:	697a      	ldr	r2, [r7, #20]
 8008970:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008974:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8008978:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800897a:	7afb      	ldrb	r3, [r7, #11]
 800897c:	2b01      	cmp	r3, #1
 800897e:	d10f      	bne.n	80089a0 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8008980:	697b      	ldr	r3, [r7, #20]
 8008982:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008986:	461a      	mov	r2, r3
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800898c:	697b      	ldr	r3, [r7, #20]
 800898e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	697a      	ldr	r2, [r7, #20]
 8008996:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800899a:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800899e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80089a0:	2300      	movs	r3, #0
}
 80089a2:	4618      	mov	r0, r3
 80089a4:	371c      	adds	r7, #28
 80089a6:	46bd      	mov	sp, r7
 80089a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ac:	4770      	bx	lr
 80089ae:	bf00      	nop
 80089b0:	4f54300a 	.word	0x4f54300a

080089b4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80089b4:	b480      	push	{r7}
 80089b6:	b085      	sub	sp, #20
 80089b8:	af00      	add	r7, sp, #0
 80089ba:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80089bc:	2300      	movs	r3, #0
 80089be:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80089c0:	68fb      	ldr	r3, [r7, #12]
 80089c2:	3301      	adds	r3, #1
 80089c4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80089c6:	68fb      	ldr	r3, [r7, #12]
 80089c8:	4a13      	ldr	r2, [pc, #76]	; (8008a18 <USB_CoreReset+0x64>)
 80089ca:	4293      	cmp	r3, r2
 80089cc:	d901      	bls.n	80089d2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80089ce:	2303      	movs	r3, #3
 80089d0:	e01b      	b.n	8008a0a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	691b      	ldr	r3, [r3, #16]
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	daf2      	bge.n	80089c0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80089da:	2300      	movs	r3, #0
 80089dc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	691b      	ldr	r3, [r3, #16]
 80089e2:	f043 0201 	orr.w	r2, r3, #1
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	3301      	adds	r3, #1
 80089ee:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80089f0:	68fb      	ldr	r3, [r7, #12]
 80089f2:	4a09      	ldr	r2, [pc, #36]	; (8008a18 <USB_CoreReset+0x64>)
 80089f4:	4293      	cmp	r3, r2
 80089f6:	d901      	bls.n	80089fc <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80089f8:	2303      	movs	r3, #3
 80089fa:	e006      	b.n	8008a0a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	691b      	ldr	r3, [r3, #16]
 8008a00:	f003 0301 	and.w	r3, r3, #1
 8008a04:	2b01      	cmp	r3, #1
 8008a06:	d0f0      	beq.n	80089ea <USB_CoreReset+0x36>

  return HAL_OK;
 8008a08:	2300      	movs	r3, #0
}
 8008a0a:	4618      	mov	r0, r3
 8008a0c:	3714      	adds	r7, #20
 8008a0e:	46bd      	mov	sp, r7
 8008a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a14:	4770      	bx	lr
 8008a16:	bf00      	nop
 8008a18:	00030d40 	.word	0x00030d40

08008a1c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008a1c:	b580      	push	{r7, lr}
 8008a1e:	b084      	sub	sp, #16
 8008a20:	af00      	add	r7, sp, #0
 8008a22:	6078      	str	r0, [r7, #4]
 8008a24:	460b      	mov	r3, r1
 8008a26:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8008a28:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8008a2c:	f002 fcc0 	bl	800b3b0 <USBD_static_malloc>
 8008a30:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	d109      	bne.n	8008a4c <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	32b0      	adds	r2, #176	; 0xb0
 8008a42:	2100      	movs	r1, #0
 8008a44:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8008a48:	2302      	movs	r3, #2
 8008a4a:	e0d4      	b.n	8008bf6 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8008a4c:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8008a50:	2100      	movs	r1, #0
 8008a52:	68f8      	ldr	r0, [r7, #12]
 8008a54:	f002 fd38 	bl	800b4c8 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	32b0      	adds	r2, #176	; 0xb0
 8008a62:	68f9      	ldr	r1, [r7, #12]
 8008a64:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	32b0      	adds	r2, #176	; 0xb0
 8008a72:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	7c1b      	ldrb	r3, [r3, #16]
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	d138      	bne.n	8008af6 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8008a84:	4b5e      	ldr	r3, [pc, #376]	; (8008c00 <USBD_CDC_Init+0x1e4>)
 8008a86:	7819      	ldrb	r1, [r3, #0]
 8008a88:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008a8c:	2202      	movs	r2, #2
 8008a8e:	6878      	ldr	r0, [r7, #4]
 8008a90:	f002 fb6b 	bl	800b16a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8008a94:	4b5a      	ldr	r3, [pc, #360]	; (8008c00 <USBD_CDC_Init+0x1e4>)
 8008a96:	781b      	ldrb	r3, [r3, #0]
 8008a98:	f003 020f 	and.w	r2, r3, #15
 8008a9c:	6879      	ldr	r1, [r7, #4]
 8008a9e:	4613      	mov	r3, r2
 8008aa0:	009b      	lsls	r3, r3, #2
 8008aa2:	4413      	add	r3, r2
 8008aa4:	009b      	lsls	r3, r3, #2
 8008aa6:	440b      	add	r3, r1
 8008aa8:	3324      	adds	r3, #36	; 0x24
 8008aaa:	2201      	movs	r2, #1
 8008aac:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8008aae:	4b55      	ldr	r3, [pc, #340]	; (8008c04 <USBD_CDC_Init+0x1e8>)
 8008ab0:	7819      	ldrb	r1, [r3, #0]
 8008ab2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008ab6:	2202      	movs	r2, #2
 8008ab8:	6878      	ldr	r0, [r7, #4]
 8008aba:	f002 fb56 	bl	800b16a <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8008abe:	4b51      	ldr	r3, [pc, #324]	; (8008c04 <USBD_CDC_Init+0x1e8>)
 8008ac0:	781b      	ldrb	r3, [r3, #0]
 8008ac2:	f003 020f 	and.w	r2, r3, #15
 8008ac6:	6879      	ldr	r1, [r7, #4]
 8008ac8:	4613      	mov	r3, r2
 8008aca:	009b      	lsls	r3, r3, #2
 8008acc:	4413      	add	r3, r2
 8008ace:	009b      	lsls	r3, r3, #2
 8008ad0:	440b      	add	r3, r1
 8008ad2:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008ad6:	2201      	movs	r2, #1
 8008ad8:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8008ada:	4b4b      	ldr	r3, [pc, #300]	; (8008c08 <USBD_CDC_Init+0x1ec>)
 8008adc:	781b      	ldrb	r3, [r3, #0]
 8008ade:	f003 020f 	and.w	r2, r3, #15
 8008ae2:	6879      	ldr	r1, [r7, #4]
 8008ae4:	4613      	mov	r3, r2
 8008ae6:	009b      	lsls	r3, r3, #2
 8008ae8:	4413      	add	r3, r2
 8008aea:	009b      	lsls	r3, r3, #2
 8008aec:	440b      	add	r3, r1
 8008aee:	3326      	adds	r3, #38	; 0x26
 8008af0:	2210      	movs	r2, #16
 8008af2:	801a      	strh	r2, [r3, #0]
 8008af4:	e035      	b.n	8008b62 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8008af6:	4b42      	ldr	r3, [pc, #264]	; (8008c00 <USBD_CDC_Init+0x1e4>)
 8008af8:	7819      	ldrb	r1, [r3, #0]
 8008afa:	2340      	movs	r3, #64	; 0x40
 8008afc:	2202      	movs	r2, #2
 8008afe:	6878      	ldr	r0, [r7, #4]
 8008b00:	f002 fb33 	bl	800b16a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8008b04:	4b3e      	ldr	r3, [pc, #248]	; (8008c00 <USBD_CDC_Init+0x1e4>)
 8008b06:	781b      	ldrb	r3, [r3, #0]
 8008b08:	f003 020f 	and.w	r2, r3, #15
 8008b0c:	6879      	ldr	r1, [r7, #4]
 8008b0e:	4613      	mov	r3, r2
 8008b10:	009b      	lsls	r3, r3, #2
 8008b12:	4413      	add	r3, r2
 8008b14:	009b      	lsls	r3, r3, #2
 8008b16:	440b      	add	r3, r1
 8008b18:	3324      	adds	r3, #36	; 0x24
 8008b1a:	2201      	movs	r2, #1
 8008b1c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8008b1e:	4b39      	ldr	r3, [pc, #228]	; (8008c04 <USBD_CDC_Init+0x1e8>)
 8008b20:	7819      	ldrb	r1, [r3, #0]
 8008b22:	2340      	movs	r3, #64	; 0x40
 8008b24:	2202      	movs	r2, #2
 8008b26:	6878      	ldr	r0, [r7, #4]
 8008b28:	f002 fb1f 	bl	800b16a <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8008b2c:	4b35      	ldr	r3, [pc, #212]	; (8008c04 <USBD_CDC_Init+0x1e8>)
 8008b2e:	781b      	ldrb	r3, [r3, #0]
 8008b30:	f003 020f 	and.w	r2, r3, #15
 8008b34:	6879      	ldr	r1, [r7, #4]
 8008b36:	4613      	mov	r3, r2
 8008b38:	009b      	lsls	r3, r3, #2
 8008b3a:	4413      	add	r3, r2
 8008b3c:	009b      	lsls	r3, r3, #2
 8008b3e:	440b      	add	r3, r1
 8008b40:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008b44:	2201      	movs	r2, #1
 8008b46:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8008b48:	4b2f      	ldr	r3, [pc, #188]	; (8008c08 <USBD_CDC_Init+0x1ec>)
 8008b4a:	781b      	ldrb	r3, [r3, #0]
 8008b4c:	f003 020f 	and.w	r2, r3, #15
 8008b50:	6879      	ldr	r1, [r7, #4]
 8008b52:	4613      	mov	r3, r2
 8008b54:	009b      	lsls	r3, r3, #2
 8008b56:	4413      	add	r3, r2
 8008b58:	009b      	lsls	r3, r3, #2
 8008b5a:	440b      	add	r3, r1
 8008b5c:	3326      	adds	r3, #38	; 0x26
 8008b5e:	2210      	movs	r2, #16
 8008b60:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8008b62:	4b29      	ldr	r3, [pc, #164]	; (8008c08 <USBD_CDC_Init+0x1ec>)
 8008b64:	7819      	ldrb	r1, [r3, #0]
 8008b66:	2308      	movs	r3, #8
 8008b68:	2203      	movs	r2, #3
 8008b6a:	6878      	ldr	r0, [r7, #4]
 8008b6c:	f002 fafd 	bl	800b16a <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8008b70:	4b25      	ldr	r3, [pc, #148]	; (8008c08 <USBD_CDC_Init+0x1ec>)
 8008b72:	781b      	ldrb	r3, [r3, #0]
 8008b74:	f003 020f 	and.w	r2, r3, #15
 8008b78:	6879      	ldr	r1, [r7, #4]
 8008b7a:	4613      	mov	r3, r2
 8008b7c:	009b      	lsls	r3, r3, #2
 8008b7e:	4413      	add	r3, r2
 8008b80:	009b      	lsls	r3, r3, #2
 8008b82:	440b      	add	r3, r1
 8008b84:	3324      	adds	r3, #36	; 0x24
 8008b86:	2201      	movs	r2, #1
 8008b88:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8008b8a:	68fb      	ldr	r3, [r7, #12]
 8008b8c:	2200      	movs	r2, #0
 8008b8e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008b98:	687a      	ldr	r2, [r7, #4]
 8008b9a:	33b0      	adds	r3, #176	; 0xb0
 8008b9c:	009b      	lsls	r3, r3, #2
 8008b9e:	4413      	add	r3, r2
 8008ba0:	685b      	ldr	r3, [r3, #4]
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8008ba6:	68fb      	ldr	r3, [r7, #12]
 8008ba8:	2200      	movs	r2, #0
 8008baa:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8008bae:	68fb      	ldr	r3, [r7, #12]
 8008bb0:	2200      	movs	r2, #0
 8008bb2:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8008bb6:	68fb      	ldr	r3, [r7, #12]
 8008bb8:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	d101      	bne.n	8008bc4 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8008bc0:	2302      	movs	r3, #2
 8008bc2:	e018      	b.n	8008bf6 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	7c1b      	ldrb	r3, [r3, #16]
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	d10a      	bne.n	8008be2 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008bcc:	4b0d      	ldr	r3, [pc, #52]	; (8008c04 <USBD_CDC_Init+0x1e8>)
 8008bce:	7819      	ldrb	r1, [r3, #0]
 8008bd0:	68fb      	ldr	r3, [r7, #12]
 8008bd2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008bd6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008bda:	6878      	ldr	r0, [r7, #4]
 8008bdc:	f002 fbb4 	bl	800b348 <USBD_LL_PrepareReceive>
 8008be0:	e008      	b.n	8008bf4 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008be2:	4b08      	ldr	r3, [pc, #32]	; (8008c04 <USBD_CDC_Init+0x1e8>)
 8008be4:	7819      	ldrb	r1, [r3, #0]
 8008be6:	68fb      	ldr	r3, [r7, #12]
 8008be8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008bec:	2340      	movs	r3, #64	; 0x40
 8008bee:	6878      	ldr	r0, [r7, #4]
 8008bf0:	f002 fbaa 	bl	800b348 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8008bf4:	2300      	movs	r3, #0
}
 8008bf6:	4618      	mov	r0, r3
 8008bf8:	3710      	adds	r7, #16
 8008bfa:	46bd      	mov	sp, r7
 8008bfc:	bd80      	pop	{r7, pc}
 8008bfe:	bf00      	nop
 8008c00:	200000a3 	.word	0x200000a3
 8008c04:	200000a4 	.word	0x200000a4
 8008c08:	200000a5 	.word	0x200000a5

08008c0c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008c0c:	b580      	push	{r7, lr}
 8008c0e:	b082      	sub	sp, #8
 8008c10:	af00      	add	r7, sp, #0
 8008c12:	6078      	str	r0, [r7, #4]
 8008c14:	460b      	mov	r3, r1
 8008c16:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8008c18:	4b3a      	ldr	r3, [pc, #232]	; (8008d04 <USBD_CDC_DeInit+0xf8>)
 8008c1a:	781b      	ldrb	r3, [r3, #0]
 8008c1c:	4619      	mov	r1, r3
 8008c1e:	6878      	ldr	r0, [r7, #4]
 8008c20:	f002 fac9 	bl	800b1b6 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8008c24:	4b37      	ldr	r3, [pc, #220]	; (8008d04 <USBD_CDC_DeInit+0xf8>)
 8008c26:	781b      	ldrb	r3, [r3, #0]
 8008c28:	f003 020f 	and.w	r2, r3, #15
 8008c2c:	6879      	ldr	r1, [r7, #4]
 8008c2e:	4613      	mov	r3, r2
 8008c30:	009b      	lsls	r3, r3, #2
 8008c32:	4413      	add	r3, r2
 8008c34:	009b      	lsls	r3, r3, #2
 8008c36:	440b      	add	r3, r1
 8008c38:	3324      	adds	r3, #36	; 0x24
 8008c3a:	2200      	movs	r2, #0
 8008c3c:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8008c3e:	4b32      	ldr	r3, [pc, #200]	; (8008d08 <USBD_CDC_DeInit+0xfc>)
 8008c40:	781b      	ldrb	r3, [r3, #0]
 8008c42:	4619      	mov	r1, r3
 8008c44:	6878      	ldr	r0, [r7, #4]
 8008c46:	f002 fab6 	bl	800b1b6 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8008c4a:	4b2f      	ldr	r3, [pc, #188]	; (8008d08 <USBD_CDC_DeInit+0xfc>)
 8008c4c:	781b      	ldrb	r3, [r3, #0]
 8008c4e:	f003 020f 	and.w	r2, r3, #15
 8008c52:	6879      	ldr	r1, [r7, #4]
 8008c54:	4613      	mov	r3, r2
 8008c56:	009b      	lsls	r3, r3, #2
 8008c58:	4413      	add	r3, r2
 8008c5a:	009b      	lsls	r3, r3, #2
 8008c5c:	440b      	add	r3, r1
 8008c5e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008c62:	2200      	movs	r2, #0
 8008c64:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8008c66:	4b29      	ldr	r3, [pc, #164]	; (8008d0c <USBD_CDC_DeInit+0x100>)
 8008c68:	781b      	ldrb	r3, [r3, #0]
 8008c6a:	4619      	mov	r1, r3
 8008c6c:	6878      	ldr	r0, [r7, #4]
 8008c6e:	f002 faa2 	bl	800b1b6 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8008c72:	4b26      	ldr	r3, [pc, #152]	; (8008d0c <USBD_CDC_DeInit+0x100>)
 8008c74:	781b      	ldrb	r3, [r3, #0]
 8008c76:	f003 020f 	and.w	r2, r3, #15
 8008c7a:	6879      	ldr	r1, [r7, #4]
 8008c7c:	4613      	mov	r3, r2
 8008c7e:	009b      	lsls	r3, r3, #2
 8008c80:	4413      	add	r3, r2
 8008c82:	009b      	lsls	r3, r3, #2
 8008c84:	440b      	add	r3, r1
 8008c86:	3324      	adds	r3, #36	; 0x24
 8008c88:	2200      	movs	r2, #0
 8008c8a:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8008c8c:	4b1f      	ldr	r3, [pc, #124]	; (8008d0c <USBD_CDC_DeInit+0x100>)
 8008c8e:	781b      	ldrb	r3, [r3, #0]
 8008c90:	f003 020f 	and.w	r2, r3, #15
 8008c94:	6879      	ldr	r1, [r7, #4]
 8008c96:	4613      	mov	r3, r2
 8008c98:	009b      	lsls	r3, r3, #2
 8008c9a:	4413      	add	r3, r2
 8008c9c:	009b      	lsls	r3, r3, #2
 8008c9e:	440b      	add	r3, r1
 8008ca0:	3326      	adds	r3, #38	; 0x26
 8008ca2:	2200      	movs	r2, #0
 8008ca4:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	32b0      	adds	r2, #176	; 0xb0
 8008cb0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	d01f      	beq.n	8008cf8 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008cbe:	687a      	ldr	r2, [r7, #4]
 8008cc0:	33b0      	adds	r3, #176	; 0xb0
 8008cc2:	009b      	lsls	r3, r3, #2
 8008cc4:	4413      	add	r3, r2
 8008cc6:	685b      	ldr	r3, [r3, #4]
 8008cc8:	685b      	ldr	r3, [r3, #4]
 8008cca:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	32b0      	adds	r2, #176	; 0xb0
 8008cd6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008cda:	4618      	mov	r0, r3
 8008cdc:	f002 fb76 	bl	800b3cc <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	32b0      	adds	r2, #176	; 0xb0
 8008cea:	2100      	movs	r1, #0
 8008cec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	2200      	movs	r2, #0
 8008cf4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8008cf8:	2300      	movs	r3, #0
}
 8008cfa:	4618      	mov	r0, r3
 8008cfc:	3708      	adds	r7, #8
 8008cfe:	46bd      	mov	sp, r7
 8008d00:	bd80      	pop	{r7, pc}
 8008d02:	bf00      	nop
 8008d04:	200000a3 	.word	0x200000a3
 8008d08:	200000a4 	.word	0x200000a4
 8008d0c:	200000a5 	.word	0x200000a5

08008d10 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8008d10:	b580      	push	{r7, lr}
 8008d12:	b086      	sub	sp, #24
 8008d14:	af00      	add	r7, sp, #0
 8008d16:	6078      	str	r0, [r7, #4]
 8008d18:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	32b0      	adds	r2, #176	; 0xb0
 8008d24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008d28:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8008d2a:	2300      	movs	r3, #0
 8008d2c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8008d2e:	2300      	movs	r3, #0
 8008d30:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8008d32:	2300      	movs	r3, #0
 8008d34:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8008d36:	693b      	ldr	r3, [r7, #16]
 8008d38:	2b00      	cmp	r3, #0
 8008d3a:	d101      	bne.n	8008d40 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8008d3c:	2303      	movs	r3, #3
 8008d3e:	e0bf      	b.n	8008ec0 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008d40:	683b      	ldr	r3, [r7, #0]
 8008d42:	781b      	ldrb	r3, [r3, #0]
 8008d44:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	d050      	beq.n	8008dee <USBD_CDC_Setup+0xde>
 8008d4c:	2b20      	cmp	r3, #32
 8008d4e:	f040 80af 	bne.w	8008eb0 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8008d52:	683b      	ldr	r3, [r7, #0]
 8008d54:	88db      	ldrh	r3, [r3, #6]
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	d03a      	beq.n	8008dd0 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8008d5a:	683b      	ldr	r3, [r7, #0]
 8008d5c:	781b      	ldrb	r3, [r3, #0]
 8008d5e:	b25b      	sxtb	r3, r3
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	da1b      	bge.n	8008d9c <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008d6a:	687a      	ldr	r2, [r7, #4]
 8008d6c:	33b0      	adds	r3, #176	; 0xb0
 8008d6e:	009b      	lsls	r3, r3, #2
 8008d70:	4413      	add	r3, r2
 8008d72:	685b      	ldr	r3, [r3, #4]
 8008d74:	689b      	ldr	r3, [r3, #8]
 8008d76:	683a      	ldr	r2, [r7, #0]
 8008d78:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8008d7a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8008d7c:	683a      	ldr	r2, [r7, #0]
 8008d7e:	88d2      	ldrh	r2, [r2, #6]
 8008d80:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8008d82:	683b      	ldr	r3, [r7, #0]
 8008d84:	88db      	ldrh	r3, [r3, #6]
 8008d86:	2b07      	cmp	r3, #7
 8008d88:	bf28      	it	cs
 8008d8a:	2307      	movcs	r3, #7
 8008d8c:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8008d8e:	693b      	ldr	r3, [r7, #16]
 8008d90:	89fa      	ldrh	r2, [r7, #14]
 8008d92:	4619      	mov	r1, r3
 8008d94:	6878      	ldr	r0, [r7, #4]
 8008d96:	f001 fd89 	bl	800a8ac <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8008d9a:	e090      	b.n	8008ebe <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8008d9c:	683b      	ldr	r3, [r7, #0]
 8008d9e:	785a      	ldrb	r2, [r3, #1]
 8008da0:	693b      	ldr	r3, [r7, #16]
 8008da2:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8008da6:	683b      	ldr	r3, [r7, #0]
 8008da8:	88db      	ldrh	r3, [r3, #6]
 8008daa:	2b3f      	cmp	r3, #63	; 0x3f
 8008dac:	d803      	bhi.n	8008db6 <USBD_CDC_Setup+0xa6>
 8008dae:	683b      	ldr	r3, [r7, #0]
 8008db0:	88db      	ldrh	r3, [r3, #6]
 8008db2:	b2da      	uxtb	r2, r3
 8008db4:	e000      	b.n	8008db8 <USBD_CDC_Setup+0xa8>
 8008db6:	2240      	movs	r2, #64	; 0x40
 8008db8:	693b      	ldr	r3, [r7, #16]
 8008dba:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8008dbe:	6939      	ldr	r1, [r7, #16]
 8008dc0:	693b      	ldr	r3, [r7, #16]
 8008dc2:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8008dc6:	461a      	mov	r2, r3
 8008dc8:	6878      	ldr	r0, [r7, #4]
 8008dca:	f001 fd9b 	bl	800a904 <USBD_CtlPrepareRx>
      break;
 8008dce:	e076      	b.n	8008ebe <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008dd6:	687a      	ldr	r2, [r7, #4]
 8008dd8:	33b0      	adds	r3, #176	; 0xb0
 8008dda:	009b      	lsls	r3, r3, #2
 8008ddc:	4413      	add	r3, r2
 8008dde:	685b      	ldr	r3, [r3, #4]
 8008de0:	689b      	ldr	r3, [r3, #8]
 8008de2:	683a      	ldr	r2, [r7, #0]
 8008de4:	7850      	ldrb	r0, [r2, #1]
 8008de6:	2200      	movs	r2, #0
 8008de8:	6839      	ldr	r1, [r7, #0]
 8008dea:	4798      	blx	r3
      break;
 8008dec:	e067      	b.n	8008ebe <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008dee:	683b      	ldr	r3, [r7, #0]
 8008df0:	785b      	ldrb	r3, [r3, #1]
 8008df2:	2b0b      	cmp	r3, #11
 8008df4:	d851      	bhi.n	8008e9a <USBD_CDC_Setup+0x18a>
 8008df6:	a201      	add	r2, pc, #4	; (adr r2, 8008dfc <USBD_CDC_Setup+0xec>)
 8008df8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008dfc:	08008e2d 	.word	0x08008e2d
 8008e00:	08008ea9 	.word	0x08008ea9
 8008e04:	08008e9b 	.word	0x08008e9b
 8008e08:	08008e9b 	.word	0x08008e9b
 8008e0c:	08008e9b 	.word	0x08008e9b
 8008e10:	08008e9b 	.word	0x08008e9b
 8008e14:	08008e9b 	.word	0x08008e9b
 8008e18:	08008e9b 	.word	0x08008e9b
 8008e1c:	08008e9b 	.word	0x08008e9b
 8008e20:	08008e9b 	.word	0x08008e9b
 8008e24:	08008e57 	.word	0x08008e57
 8008e28:	08008e81 	.word	0x08008e81
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008e32:	b2db      	uxtb	r3, r3
 8008e34:	2b03      	cmp	r3, #3
 8008e36:	d107      	bne.n	8008e48 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8008e38:	f107 030a 	add.w	r3, r7, #10
 8008e3c:	2202      	movs	r2, #2
 8008e3e:	4619      	mov	r1, r3
 8008e40:	6878      	ldr	r0, [r7, #4]
 8008e42:	f001 fd33 	bl	800a8ac <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008e46:	e032      	b.n	8008eae <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8008e48:	6839      	ldr	r1, [r7, #0]
 8008e4a:	6878      	ldr	r0, [r7, #4]
 8008e4c:	f001 fcbd 	bl	800a7ca <USBD_CtlError>
            ret = USBD_FAIL;
 8008e50:	2303      	movs	r3, #3
 8008e52:	75fb      	strb	r3, [r7, #23]
          break;
 8008e54:	e02b      	b.n	8008eae <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008e5c:	b2db      	uxtb	r3, r3
 8008e5e:	2b03      	cmp	r3, #3
 8008e60:	d107      	bne.n	8008e72 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8008e62:	f107 030d 	add.w	r3, r7, #13
 8008e66:	2201      	movs	r2, #1
 8008e68:	4619      	mov	r1, r3
 8008e6a:	6878      	ldr	r0, [r7, #4]
 8008e6c:	f001 fd1e 	bl	800a8ac <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008e70:	e01d      	b.n	8008eae <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8008e72:	6839      	ldr	r1, [r7, #0]
 8008e74:	6878      	ldr	r0, [r7, #4]
 8008e76:	f001 fca8 	bl	800a7ca <USBD_CtlError>
            ret = USBD_FAIL;
 8008e7a:	2303      	movs	r3, #3
 8008e7c:	75fb      	strb	r3, [r7, #23]
          break;
 8008e7e:	e016      	b.n	8008eae <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008e86:	b2db      	uxtb	r3, r3
 8008e88:	2b03      	cmp	r3, #3
 8008e8a:	d00f      	beq.n	8008eac <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8008e8c:	6839      	ldr	r1, [r7, #0]
 8008e8e:	6878      	ldr	r0, [r7, #4]
 8008e90:	f001 fc9b 	bl	800a7ca <USBD_CtlError>
            ret = USBD_FAIL;
 8008e94:	2303      	movs	r3, #3
 8008e96:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8008e98:	e008      	b.n	8008eac <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8008e9a:	6839      	ldr	r1, [r7, #0]
 8008e9c:	6878      	ldr	r0, [r7, #4]
 8008e9e:	f001 fc94 	bl	800a7ca <USBD_CtlError>
          ret = USBD_FAIL;
 8008ea2:	2303      	movs	r3, #3
 8008ea4:	75fb      	strb	r3, [r7, #23]
          break;
 8008ea6:	e002      	b.n	8008eae <USBD_CDC_Setup+0x19e>
          break;
 8008ea8:	bf00      	nop
 8008eaa:	e008      	b.n	8008ebe <USBD_CDC_Setup+0x1ae>
          break;
 8008eac:	bf00      	nop
      }
      break;
 8008eae:	e006      	b.n	8008ebe <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8008eb0:	6839      	ldr	r1, [r7, #0]
 8008eb2:	6878      	ldr	r0, [r7, #4]
 8008eb4:	f001 fc89 	bl	800a7ca <USBD_CtlError>
      ret = USBD_FAIL;
 8008eb8:	2303      	movs	r3, #3
 8008eba:	75fb      	strb	r3, [r7, #23]
      break;
 8008ebc:	bf00      	nop
  }

  return (uint8_t)ret;
 8008ebe:	7dfb      	ldrb	r3, [r7, #23]
}
 8008ec0:	4618      	mov	r0, r3
 8008ec2:	3718      	adds	r7, #24
 8008ec4:	46bd      	mov	sp, r7
 8008ec6:	bd80      	pop	{r7, pc}

08008ec8 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008ec8:	b580      	push	{r7, lr}
 8008eca:	b084      	sub	sp, #16
 8008ecc:	af00      	add	r7, sp, #0
 8008ece:	6078      	str	r0, [r7, #4]
 8008ed0:	460b      	mov	r3, r1
 8008ed2:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008eda:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	32b0      	adds	r2, #176	; 0xb0
 8008ee6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008eea:	2b00      	cmp	r3, #0
 8008eec:	d101      	bne.n	8008ef2 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8008eee:	2303      	movs	r3, #3
 8008ef0:	e065      	b.n	8008fbe <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	32b0      	adds	r2, #176	; 0xb0
 8008efc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008f00:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8008f02:	78fb      	ldrb	r3, [r7, #3]
 8008f04:	f003 020f 	and.w	r2, r3, #15
 8008f08:	6879      	ldr	r1, [r7, #4]
 8008f0a:	4613      	mov	r3, r2
 8008f0c:	009b      	lsls	r3, r3, #2
 8008f0e:	4413      	add	r3, r2
 8008f10:	009b      	lsls	r3, r3, #2
 8008f12:	440b      	add	r3, r1
 8008f14:	3318      	adds	r3, #24
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	d02f      	beq.n	8008f7c <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8008f1c:	78fb      	ldrb	r3, [r7, #3]
 8008f1e:	f003 020f 	and.w	r2, r3, #15
 8008f22:	6879      	ldr	r1, [r7, #4]
 8008f24:	4613      	mov	r3, r2
 8008f26:	009b      	lsls	r3, r3, #2
 8008f28:	4413      	add	r3, r2
 8008f2a:	009b      	lsls	r3, r3, #2
 8008f2c:	440b      	add	r3, r1
 8008f2e:	3318      	adds	r3, #24
 8008f30:	681a      	ldr	r2, [r3, #0]
 8008f32:	78fb      	ldrb	r3, [r7, #3]
 8008f34:	f003 010f 	and.w	r1, r3, #15
 8008f38:	68f8      	ldr	r0, [r7, #12]
 8008f3a:	460b      	mov	r3, r1
 8008f3c:	00db      	lsls	r3, r3, #3
 8008f3e:	440b      	add	r3, r1
 8008f40:	009b      	lsls	r3, r3, #2
 8008f42:	4403      	add	r3, r0
 8008f44:	3348      	adds	r3, #72	; 0x48
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	fbb2 f1f3 	udiv	r1, r2, r3
 8008f4c:	fb01 f303 	mul.w	r3, r1, r3
 8008f50:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	d112      	bne.n	8008f7c <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8008f56:	78fb      	ldrb	r3, [r7, #3]
 8008f58:	f003 020f 	and.w	r2, r3, #15
 8008f5c:	6879      	ldr	r1, [r7, #4]
 8008f5e:	4613      	mov	r3, r2
 8008f60:	009b      	lsls	r3, r3, #2
 8008f62:	4413      	add	r3, r2
 8008f64:	009b      	lsls	r3, r3, #2
 8008f66:	440b      	add	r3, r1
 8008f68:	3318      	adds	r3, #24
 8008f6a:	2200      	movs	r2, #0
 8008f6c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8008f6e:	78f9      	ldrb	r1, [r7, #3]
 8008f70:	2300      	movs	r3, #0
 8008f72:	2200      	movs	r2, #0
 8008f74:	6878      	ldr	r0, [r7, #4]
 8008f76:	f002 f9c6 	bl	800b306 <USBD_LL_Transmit>
 8008f7a:	e01f      	b.n	8008fbc <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8008f7c:	68bb      	ldr	r3, [r7, #8]
 8008f7e:	2200      	movs	r2, #0
 8008f80:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008f8a:	687a      	ldr	r2, [r7, #4]
 8008f8c:	33b0      	adds	r3, #176	; 0xb0
 8008f8e:	009b      	lsls	r3, r3, #2
 8008f90:	4413      	add	r3, r2
 8008f92:	685b      	ldr	r3, [r3, #4]
 8008f94:	691b      	ldr	r3, [r3, #16]
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	d010      	beq.n	8008fbc <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008fa0:	687a      	ldr	r2, [r7, #4]
 8008fa2:	33b0      	adds	r3, #176	; 0xb0
 8008fa4:	009b      	lsls	r3, r3, #2
 8008fa6:	4413      	add	r3, r2
 8008fa8:	685b      	ldr	r3, [r3, #4]
 8008faa:	691b      	ldr	r3, [r3, #16]
 8008fac:	68ba      	ldr	r2, [r7, #8]
 8008fae:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8008fb2:	68ba      	ldr	r2, [r7, #8]
 8008fb4:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8008fb8:	78fa      	ldrb	r2, [r7, #3]
 8008fba:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8008fbc:	2300      	movs	r3, #0
}
 8008fbe:	4618      	mov	r0, r3
 8008fc0:	3710      	adds	r7, #16
 8008fc2:	46bd      	mov	sp, r7
 8008fc4:	bd80      	pop	{r7, pc}

08008fc6 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008fc6:	b580      	push	{r7, lr}
 8008fc8:	b084      	sub	sp, #16
 8008fca:	af00      	add	r7, sp, #0
 8008fcc:	6078      	str	r0, [r7, #4]
 8008fce:	460b      	mov	r3, r1
 8008fd0:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	32b0      	adds	r2, #176	; 0xb0
 8008fdc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008fe0:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	32b0      	adds	r2, #176	; 0xb0
 8008fec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ff0:	2b00      	cmp	r3, #0
 8008ff2:	d101      	bne.n	8008ff8 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8008ff4:	2303      	movs	r3, #3
 8008ff6:	e01a      	b.n	800902e <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8008ff8:	78fb      	ldrb	r3, [r7, #3]
 8008ffa:	4619      	mov	r1, r3
 8008ffc:	6878      	ldr	r0, [r7, #4]
 8008ffe:	f002 f9c4 	bl	800b38a <USBD_LL_GetRxDataSize>
 8009002:	4602      	mov	r2, r0
 8009004:	68fb      	ldr	r3, [r7, #12]
 8009006:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009010:	687a      	ldr	r2, [r7, #4]
 8009012:	33b0      	adds	r3, #176	; 0xb0
 8009014:	009b      	lsls	r3, r3, #2
 8009016:	4413      	add	r3, r2
 8009018:	685b      	ldr	r3, [r3, #4]
 800901a:	68db      	ldr	r3, [r3, #12]
 800901c:	68fa      	ldr	r2, [r7, #12]
 800901e:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8009022:	68fa      	ldr	r2, [r7, #12]
 8009024:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8009028:	4611      	mov	r1, r2
 800902a:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800902c:	2300      	movs	r3, #0
}
 800902e:	4618      	mov	r0, r3
 8009030:	3710      	adds	r7, #16
 8009032:	46bd      	mov	sp, r7
 8009034:	bd80      	pop	{r7, pc}

08009036 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8009036:	b580      	push	{r7, lr}
 8009038:	b084      	sub	sp, #16
 800903a:	af00      	add	r7, sp, #0
 800903c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	32b0      	adds	r2, #176	; 0xb0
 8009048:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800904c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	2b00      	cmp	r3, #0
 8009052:	d101      	bne.n	8009058 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8009054:	2303      	movs	r3, #3
 8009056:	e025      	b.n	80090a4 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800905e:	687a      	ldr	r2, [r7, #4]
 8009060:	33b0      	adds	r3, #176	; 0xb0
 8009062:	009b      	lsls	r3, r3, #2
 8009064:	4413      	add	r3, r2
 8009066:	685b      	ldr	r3, [r3, #4]
 8009068:	2b00      	cmp	r3, #0
 800906a:	d01a      	beq.n	80090a2 <USBD_CDC_EP0_RxReady+0x6c>
 800906c:	68fb      	ldr	r3, [r7, #12]
 800906e:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8009072:	2bff      	cmp	r3, #255	; 0xff
 8009074:	d015      	beq.n	80090a2 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800907c:	687a      	ldr	r2, [r7, #4]
 800907e:	33b0      	adds	r3, #176	; 0xb0
 8009080:	009b      	lsls	r3, r3, #2
 8009082:	4413      	add	r3, r2
 8009084:	685b      	ldr	r3, [r3, #4]
 8009086:	689b      	ldr	r3, [r3, #8]
 8009088:	68fa      	ldr	r2, [r7, #12]
 800908a:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 800908e:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8009090:	68fa      	ldr	r2, [r7, #12]
 8009092:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8009096:	b292      	uxth	r2, r2
 8009098:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800909a:	68fb      	ldr	r3, [r7, #12]
 800909c:	22ff      	movs	r2, #255	; 0xff
 800909e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 80090a2:	2300      	movs	r3, #0
}
 80090a4:	4618      	mov	r0, r3
 80090a6:	3710      	adds	r7, #16
 80090a8:	46bd      	mov	sp, r7
 80090aa:	bd80      	pop	{r7, pc}

080090ac <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80090ac:	b580      	push	{r7, lr}
 80090ae:	b086      	sub	sp, #24
 80090b0:	af00      	add	r7, sp, #0
 80090b2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80090b4:	2182      	movs	r1, #130	; 0x82
 80090b6:	4818      	ldr	r0, [pc, #96]	; (8009118 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80090b8:	f000 fd4f 	bl	8009b5a <USBD_GetEpDesc>
 80090bc:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80090be:	2101      	movs	r1, #1
 80090c0:	4815      	ldr	r0, [pc, #84]	; (8009118 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80090c2:	f000 fd4a 	bl	8009b5a <USBD_GetEpDesc>
 80090c6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80090c8:	2181      	movs	r1, #129	; 0x81
 80090ca:	4813      	ldr	r0, [pc, #76]	; (8009118 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80090cc:	f000 fd45 	bl	8009b5a <USBD_GetEpDesc>
 80090d0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80090d2:	697b      	ldr	r3, [r7, #20]
 80090d4:	2b00      	cmp	r3, #0
 80090d6:	d002      	beq.n	80090de <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80090d8:	697b      	ldr	r3, [r7, #20]
 80090da:	2210      	movs	r2, #16
 80090dc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80090de:	693b      	ldr	r3, [r7, #16]
 80090e0:	2b00      	cmp	r3, #0
 80090e2:	d006      	beq.n	80090f2 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80090e4:	693b      	ldr	r3, [r7, #16]
 80090e6:	2200      	movs	r2, #0
 80090e8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80090ec:	711a      	strb	r2, [r3, #4]
 80090ee:	2200      	movs	r2, #0
 80090f0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80090f2:	68fb      	ldr	r3, [r7, #12]
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	d006      	beq.n	8009106 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80090f8:	68fb      	ldr	r3, [r7, #12]
 80090fa:	2200      	movs	r2, #0
 80090fc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009100:	711a      	strb	r2, [r3, #4]
 8009102:	2200      	movs	r2, #0
 8009104:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	2243      	movs	r2, #67	; 0x43
 800910a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800910c:	4b02      	ldr	r3, [pc, #8]	; (8009118 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800910e:	4618      	mov	r0, r3
 8009110:	3718      	adds	r7, #24
 8009112:	46bd      	mov	sp, r7
 8009114:	bd80      	pop	{r7, pc}
 8009116:	bf00      	nop
 8009118:	20000060 	.word	0x20000060

0800911c <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800911c:	b580      	push	{r7, lr}
 800911e:	b086      	sub	sp, #24
 8009120:	af00      	add	r7, sp, #0
 8009122:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8009124:	2182      	movs	r1, #130	; 0x82
 8009126:	4818      	ldr	r0, [pc, #96]	; (8009188 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8009128:	f000 fd17 	bl	8009b5a <USBD_GetEpDesc>
 800912c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800912e:	2101      	movs	r1, #1
 8009130:	4815      	ldr	r0, [pc, #84]	; (8009188 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8009132:	f000 fd12 	bl	8009b5a <USBD_GetEpDesc>
 8009136:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8009138:	2181      	movs	r1, #129	; 0x81
 800913a:	4813      	ldr	r0, [pc, #76]	; (8009188 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800913c:	f000 fd0d 	bl	8009b5a <USBD_GetEpDesc>
 8009140:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8009142:	697b      	ldr	r3, [r7, #20]
 8009144:	2b00      	cmp	r3, #0
 8009146:	d002      	beq.n	800914e <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8009148:	697b      	ldr	r3, [r7, #20]
 800914a:	2210      	movs	r2, #16
 800914c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800914e:	693b      	ldr	r3, [r7, #16]
 8009150:	2b00      	cmp	r3, #0
 8009152:	d006      	beq.n	8009162 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8009154:	693b      	ldr	r3, [r7, #16]
 8009156:	2200      	movs	r2, #0
 8009158:	711a      	strb	r2, [r3, #4]
 800915a:	2200      	movs	r2, #0
 800915c:	f042 0202 	orr.w	r2, r2, #2
 8009160:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8009162:	68fb      	ldr	r3, [r7, #12]
 8009164:	2b00      	cmp	r3, #0
 8009166:	d006      	beq.n	8009176 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8009168:	68fb      	ldr	r3, [r7, #12]
 800916a:	2200      	movs	r2, #0
 800916c:	711a      	strb	r2, [r3, #4]
 800916e:	2200      	movs	r2, #0
 8009170:	f042 0202 	orr.w	r2, r2, #2
 8009174:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	2243      	movs	r2, #67	; 0x43
 800917a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800917c:	4b02      	ldr	r3, [pc, #8]	; (8009188 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800917e:	4618      	mov	r0, r3
 8009180:	3718      	adds	r7, #24
 8009182:	46bd      	mov	sp, r7
 8009184:	bd80      	pop	{r7, pc}
 8009186:	bf00      	nop
 8009188:	20000060 	.word	0x20000060

0800918c <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800918c:	b580      	push	{r7, lr}
 800918e:	b086      	sub	sp, #24
 8009190:	af00      	add	r7, sp, #0
 8009192:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8009194:	2182      	movs	r1, #130	; 0x82
 8009196:	4818      	ldr	r0, [pc, #96]	; (80091f8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8009198:	f000 fcdf 	bl	8009b5a <USBD_GetEpDesc>
 800919c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800919e:	2101      	movs	r1, #1
 80091a0:	4815      	ldr	r0, [pc, #84]	; (80091f8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80091a2:	f000 fcda 	bl	8009b5a <USBD_GetEpDesc>
 80091a6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80091a8:	2181      	movs	r1, #129	; 0x81
 80091aa:	4813      	ldr	r0, [pc, #76]	; (80091f8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80091ac:	f000 fcd5 	bl	8009b5a <USBD_GetEpDesc>
 80091b0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80091b2:	697b      	ldr	r3, [r7, #20]
 80091b4:	2b00      	cmp	r3, #0
 80091b6:	d002      	beq.n	80091be <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80091b8:	697b      	ldr	r3, [r7, #20]
 80091ba:	2210      	movs	r2, #16
 80091bc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80091be:	693b      	ldr	r3, [r7, #16]
 80091c0:	2b00      	cmp	r3, #0
 80091c2:	d006      	beq.n	80091d2 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80091c4:	693b      	ldr	r3, [r7, #16]
 80091c6:	2200      	movs	r2, #0
 80091c8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80091cc:	711a      	strb	r2, [r3, #4]
 80091ce:	2200      	movs	r2, #0
 80091d0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80091d2:	68fb      	ldr	r3, [r7, #12]
 80091d4:	2b00      	cmp	r3, #0
 80091d6:	d006      	beq.n	80091e6 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80091d8:	68fb      	ldr	r3, [r7, #12]
 80091da:	2200      	movs	r2, #0
 80091dc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80091e0:	711a      	strb	r2, [r3, #4]
 80091e2:	2200      	movs	r2, #0
 80091e4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	2243      	movs	r2, #67	; 0x43
 80091ea:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80091ec:	4b02      	ldr	r3, [pc, #8]	; (80091f8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 80091ee:	4618      	mov	r0, r3
 80091f0:	3718      	adds	r7, #24
 80091f2:	46bd      	mov	sp, r7
 80091f4:	bd80      	pop	{r7, pc}
 80091f6:	bf00      	nop
 80091f8:	20000060 	.word	0x20000060

080091fc <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80091fc:	b480      	push	{r7}
 80091fe:	b083      	sub	sp, #12
 8009200:	af00      	add	r7, sp, #0
 8009202:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	220a      	movs	r2, #10
 8009208:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800920a:	4b03      	ldr	r3, [pc, #12]	; (8009218 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800920c:	4618      	mov	r0, r3
 800920e:	370c      	adds	r7, #12
 8009210:	46bd      	mov	sp, r7
 8009212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009216:	4770      	bx	lr
 8009218:	2000001c 	.word	0x2000001c

0800921c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800921c:	b480      	push	{r7}
 800921e:	b083      	sub	sp, #12
 8009220:	af00      	add	r7, sp, #0
 8009222:	6078      	str	r0, [r7, #4]
 8009224:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8009226:	683b      	ldr	r3, [r7, #0]
 8009228:	2b00      	cmp	r3, #0
 800922a:	d101      	bne.n	8009230 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800922c:	2303      	movs	r3, #3
 800922e:	e009      	b.n	8009244 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009236:	687a      	ldr	r2, [r7, #4]
 8009238:	33b0      	adds	r3, #176	; 0xb0
 800923a:	009b      	lsls	r3, r3, #2
 800923c:	4413      	add	r3, r2
 800923e:	683a      	ldr	r2, [r7, #0]
 8009240:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8009242:	2300      	movs	r3, #0
}
 8009244:	4618      	mov	r0, r3
 8009246:	370c      	adds	r7, #12
 8009248:	46bd      	mov	sp, r7
 800924a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800924e:	4770      	bx	lr

08009250 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8009250:	b480      	push	{r7}
 8009252:	b087      	sub	sp, #28
 8009254:	af00      	add	r7, sp, #0
 8009256:	60f8      	str	r0, [r7, #12]
 8009258:	60b9      	str	r1, [r7, #8]
 800925a:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800925c:	68fb      	ldr	r3, [r7, #12]
 800925e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009262:	68fb      	ldr	r3, [r7, #12]
 8009264:	32b0      	adds	r2, #176	; 0xb0
 8009266:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800926a:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800926c:	697b      	ldr	r3, [r7, #20]
 800926e:	2b00      	cmp	r3, #0
 8009270:	d101      	bne.n	8009276 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8009272:	2303      	movs	r3, #3
 8009274:	e008      	b.n	8009288 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8009276:	697b      	ldr	r3, [r7, #20]
 8009278:	68ba      	ldr	r2, [r7, #8]
 800927a:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800927e:	697b      	ldr	r3, [r7, #20]
 8009280:	687a      	ldr	r2, [r7, #4]
 8009282:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8009286:	2300      	movs	r3, #0
}
 8009288:	4618      	mov	r0, r3
 800928a:	371c      	adds	r7, #28
 800928c:	46bd      	mov	sp, r7
 800928e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009292:	4770      	bx	lr

08009294 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8009294:	b480      	push	{r7}
 8009296:	b085      	sub	sp, #20
 8009298:	af00      	add	r7, sp, #0
 800929a:	6078      	str	r0, [r7, #4]
 800929c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	32b0      	adds	r2, #176	; 0xb0
 80092a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80092ac:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80092ae:	68fb      	ldr	r3, [r7, #12]
 80092b0:	2b00      	cmp	r3, #0
 80092b2:	d101      	bne.n	80092b8 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 80092b4:	2303      	movs	r3, #3
 80092b6:	e004      	b.n	80092c2 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 80092b8:	68fb      	ldr	r3, [r7, #12]
 80092ba:	683a      	ldr	r2, [r7, #0]
 80092bc:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 80092c0:	2300      	movs	r3, #0
}
 80092c2:	4618      	mov	r0, r3
 80092c4:	3714      	adds	r7, #20
 80092c6:	46bd      	mov	sp, r7
 80092c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092cc:	4770      	bx	lr
	...

080092d0 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80092d0:	b580      	push	{r7, lr}
 80092d2:	b084      	sub	sp, #16
 80092d4:	af00      	add	r7, sp, #0
 80092d6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	32b0      	adds	r2, #176	; 0xb0
 80092e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80092e6:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 80092e8:	2301      	movs	r3, #1
 80092ea:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	32b0      	adds	r2, #176	; 0xb0
 80092f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80092fa:	2b00      	cmp	r3, #0
 80092fc:	d101      	bne.n	8009302 <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 80092fe:	2303      	movs	r3, #3
 8009300:	e025      	b.n	800934e <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 8009302:	68bb      	ldr	r3, [r7, #8]
 8009304:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8009308:	2b00      	cmp	r3, #0
 800930a:	d11f      	bne.n	800934c <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800930c:	68bb      	ldr	r3, [r7, #8]
 800930e:	2201      	movs	r2, #1
 8009310:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8009314:	4b10      	ldr	r3, [pc, #64]	; (8009358 <USBD_CDC_TransmitPacket+0x88>)
 8009316:	781b      	ldrb	r3, [r3, #0]
 8009318:	f003 020f 	and.w	r2, r3, #15
 800931c:	68bb      	ldr	r3, [r7, #8]
 800931e:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 8009322:	6878      	ldr	r0, [r7, #4]
 8009324:	4613      	mov	r3, r2
 8009326:	009b      	lsls	r3, r3, #2
 8009328:	4413      	add	r3, r2
 800932a:	009b      	lsls	r3, r3, #2
 800932c:	4403      	add	r3, r0
 800932e:	3318      	adds	r3, #24
 8009330:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8009332:	4b09      	ldr	r3, [pc, #36]	; (8009358 <USBD_CDC_TransmitPacket+0x88>)
 8009334:	7819      	ldrb	r1, [r3, #0]
 8009336:	68bb      	ldr	r3, [r7, #8]
 8009338:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800933c:	68bb      	ldr	r3, [r7, #8]
 800933e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8009342:	6878      	ldr	r0, [r7, #4]
 8009344:	f001 ffdf 	bl	800b306 <USBD_LL_Transmit>

    ret = USBD_OK;
 8009348:	2300      	movs	r3, #0
 800934a:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800934c:	7bfb      	ldrb	r3, [r7, #15]
}
 800934e:	4618      	mov	r0, r3
 8009350:	3710      	adds	r7, #16
 8009352:	46bd      	mov	sp, r7
 8009354:	bd80      	pop	{r7, pc}
 8009356:	bf00      	nop
 8009358:	200000a3 	.word	0x200000a3

0800935c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800935c:	b580      	push	{r7, lr}
 800935e:	b084      	sub	sp, #16
 8009360:	af00      	add	r7, sp, #0
 8009362:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	32b0      	adds	r2, #176	; 0xb0
 800936e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009372:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	32b0      	adds	r2, #176	; 0xb0
 800937e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009382:	2b00      	cmp	r3, #0
 8009384:	d101      	bne.n	800938a <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8009386:	2303      	movs	r3, #3
 8009388:	e018      	b.n	80093bc <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	7c1b      	ldrb	r3, [r3, #16]
 800938e:	2b00      	cmp	r3, #0
 8009390:	d10a      	bne.n	80093a8 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009392:	4b0c      	ldr	r3, [pc, #48]	; (80093c4 <USBD_CDC_ReceivePacket+0x68>)
 8009394:	7819      	ldrb	r1, [r3, #0]
 8009396:	68fb      	ldr	r3, [r7, #12]
 8009398:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800939c:	f44f 7300 	mov.w	r3, #512	; 0x200
 80093a0:	6878      	ldr	r0, [r7, #4]
 80093a2:	f001 ffd1 	bl	800b348 <USBD_LL_PrepareReceive>
 80093a6:	e008      	b.n	80093ba <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80093a8:	4b06      	ldr	r3, [pc, #24]	; (80093c4 <USBD_CDC_ReceivePacket+0x68>)
 80093aa:	7819      	ldrb	r1, [r3, #0]
 80093ac:	68fb      	ldr	r3, [r7, #12]
 80093ae:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80093b2:	2340      	movs	r3, #64	; 0x40
 80093b4:	6878      	ldr	r0, [r7, #4]
 80093b6:	f001 ffc7 	bl	800b348 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80093ba:	2300      	movs	r3, #0
}
 80093bc:	4618      	mov	r0, r3
 80093be:	3710      	adds	r7, #16
 80093c0:	46bd      	mov	sp, r7
 80093c2:	bd80      	pop	{r7, pc}
 80093c4:	200000a4 	.word	0x200000a4

080093c8 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80093c8:	b580      	push	{r7, lr}
 80093ca:	b086      	sub	sp, #24
 80093cc:	af00      	add	r7, sp, #0
 80093ce:	60f8      	str	r0, [r7, #12]
 80093d0:	60b9      	str	r1, [r7, #8]
 80093d2:	4613      	mov	r3, r2
 80093d4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80093d6:	68fb      	ldr	r3, [r7, #12]
 80093d8:	2b00      	cmp	r3, #0
 80093da:	d101      	bne.n	80093e0 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80093dc:	2303      	movs	r3, #3
 80093de:	e01f      	b.n	8009420 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 80093e0:	68fb      	ldr	r3, [r7, #12]
 80093e2:	2200      	movs	r2, #0
 80093e4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 80093e8:	68fb      	ldr	r3, [r7, #12]
 80093ea:	2200      	movs	r2, #0
 80093ec:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 80093f0:	68fb      	ldr	r3, [r7, #12]
 80093f2:	2200      	movs	r2, #0
 80093f4:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80093f8:	68bb      	ldr	r3, [r7, #8]
 80093fa:	2b00      	cmp	r3, #0
 80093fc:	d003      	beq.n	8009406 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80093fe:	68fb      	ldr	r3, [r7, #12]
 8009400:	68ba      	ldr	r2, [r7, #8]
 8009402:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009406:	68fb      	ldr	r3, [r7, #12]
 8009408:	2201      	movs	r2, #1
 800940a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800940e:	68fb      	ldr	r3, [r7, #12]
 8009410:	79fa      	ldrb	r2, [r7, #7]
 8009412:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8009414:	68f8      	ldr	r0, [r7, #12]
 8009416:	f001 fe3b 	bl	800b090 <USBD_LL_Init>
 800941a:	4603      	mov	r3, r0
 800941c:	75fb      	strb	r3, [r7, #23]

  return ret;
 800941e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009420:	4618      	mov	r0, r3
 8009422:	3718      	adds	r7, #24
 8009424:	46bd      	mov	sp, r7
 8009426:	bd80      	pop	{r7, pc}

08009428 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8009428:	b580      	push	{r7, lr}
 800942a:	b084      	sub	sp, #16
 800942c:	af00      	add	r7, sp, #0
 800942e:	6078      	str	r0, [r7, #4]
 8009430:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009432:	2300      	movs	r3, #0
 8009434:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8009436:	683b      	ldr	r3, [r7, #0]
 8009438:	2b00      	cmp	r3, #0
 800943a:	d101      	bne.n	8009440 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800943c:	2303      	movs	r3, #3
 800943e:	e025      	b.n	800948c <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	683a      	ldr	r2, [r7, #0]
 8009444:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	32ae      	adds	r2, #174	; 0xae
 8009452:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009456:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009458:	2b00      	cmp	r3, #0
 800945a:	d00f      	beq.n	800947c <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	32ae      	adds	r2, #174	; 0xae
 8009466:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800946a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800946c:	f107 020e 	add.w	r2, r7, #14
 8009470:	4610      	mov	r0, r2
 8009472:	4798      	blx	r3
 8009474:	4602      	mov	r2, r0
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8009482:	1c5a      	adds	r2, r3, #1
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800948a:	2300      	movs	r3, #0
}
 800948c:	4618      	mov	r0, r3
 800948e:	3710      	adds	r7, #16
 8009490:	46bd      	mov	sp, r7
 8009492:	bd80      	pop	{r7, pc}

08009494 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8009494:	b580      	push	{r7, lr}
 8009496:	b082      	sub	sp, #8
 8009498:	af00      	add	r7, sp, #0
 800949a:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800949c:	6878      	ldr	r0, [r7, #4]
 800949e:	f001 fe49 	bl	800b134 <USBD_LL_Start>
 80094a2:	4603      	mov	r3, r0
}
 80094a4:	4618      	mov	r0, r3
 80094a6:	3708      	adds	r7, #8
 80094a8:	46bd      	mov	sp, r7
 80094aa:	bd80      	pop	{r7, pc}

080094ac <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 80094ac:	b480      	push	{r7}
 80094ae:	b083      	sub	sp, #12
 80094b0:	af00      	add	r7, sp, #0
 80094b2:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80094b4:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 80094b6:	4618      	mov	r0, r3
 80094b8:	370c      	adds	r7, #12
 80094ba:	46bd      	mov	sp, r7
 80094bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094c0:	4770      	bx	lr

080094c2 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80094c2:	b580      	push	{r7, lr}
 80094c4:	b084      	sub	sp, #16
 80094c6:	af00      	add	r7, sp, #0
 80094c8:	6078      	str	r0, [r7, #4]
 80094ca:	460b      	mov	r3, r1
 80094cc:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80094ce:	2300      	movs	r3, #0
 80094d0:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80094d8:	2b00      	cmp	r3, #0
 80094da:	d009      	beq.n	80094f0 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	78fa      	ldrb	r2, [r7, #3]
 80094e6:	4611      	mov	r1, r2
 80094e8:	6878      	ldr	r0, [r7, #4]
 80094ea:	4798      	blx	r3
 80094ec:	4603      	mov	r3, r0
 80094ee:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80094f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80094f2:	4618      	mov	r0, r3
 80094f4:	3710      	adds	r7, #16
 80094f6:	46bd      	mov	sp, r7
 80094f8:	bd80      	pop	{r7, pc}

080094fa <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80094fa:	b580      	push	{r7, lr}
 80094fc:	b084      	sub	sp, #16
 80094fe:	af00      	add	r7, sp, #0
 8009500:	6078      	str	r0, [r7, #4]
 8009502:	460b      	mov	r3, r1
 8009504:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8009506:	2300      	movs	r3, #0
 8009508:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009510:	685b      	ldr	r3, [r3, #4]
 8009512:	78fa      	ldrb	r2, [r7, #3]
 8009514:	4611      	mov	r1, r2
 8009516:	6878      	ldr	r0, [r7, #4]
 8009518:	4798      	blx	r3
 800951a:	4603      	mov	r3, r0
 800951c:	2b00      	cmp	r3, #0
 800951e:	d001      	beq.n	8009524 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8009520:	2303      	movs	r3, #3
 8009522:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8009524:	7bfb      	ldrb	r3, [r7, #15]
}
 8009526:	4618      	mov	r0, r3
 8009528:	3710      	adds	r7, #16
 800952a:	46bd      	mov	sp, r7
 800952c:	bd80      	pop	{r7, pc}

0800952e <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800952e:	b580      	push	{r7, lr}
 8009530:	b084      	sub	sp, #16
 8009532:	af00      	add	r7, sp, #0
 8009534:	6078      	str	r0, [r7, #4]
 8009536:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800953e:	6839      	ldr	r1, [r7, #0]
 8009540:	4618      	mov	r0, r3
 8009542:	f001 f908 	bl	800a756 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	2201      	movs	r2, #1
 800954a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8009554:	461a      	mov	r2, r3
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8009562:	f003 031f 	and.w	r3, r3, #31
 8009566:	2b02      	cmp	r3, #2
 8009568:	d01a      	beq.n	80095a0 <USBD_LL_SetupStage+0x72>
 800956a:	2b02      	cmp	r3, #2
 800956c:	d822      	bhi.n	80095b4 <USBD_LL_SetupStage+0x86>
 800956e:	2b00      	cmp	r3, #0
 8009570:	d002      	beq.n	8009578 <USBD_LL_SetupStage+0x4a>
 8009572:	2b01      	cmp	r3, #1
 8009574:	d00a      	beq.n	800958c <USBD_LL_SetupStage+0x5e>
 8009576:	e01d      	b.n	80095b4 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800957e:	4619      	mov	r1, r3
 8009580:	6878      	ldr	r0, [r7, #4]
 8009582:	f000 fb5f 	bl	8009c44 <USBD_StdDevReq>
 8009586:	4603      	mov	r3, r0
 8009588:	73fb      	strb	r3, [r7, #15]
      break;
 800958a:	e020      	b.n	80095ce <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009592:	4619      	mov	r1, r3
 8009594:	6878      	ldr	r0, [r7, #4]
 8009596:	f000 fbc7 	bl	8009d28 <USBD_StdItfReq>
 800959a:	4603      	mov	r3, r0
 800959c:	73fb      	strb	r3, [r7, #15]
      break;
 800959e:	e016      	b.n	80095ce <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80095a6:	4619      	mov	r1, r3
 80095a8:	6878      	ldr	r0, [r7, #4]
 80095aa:	f000 fc29 	bl	8009e00 <USBD_StdEPReq>
 80095ae:	4603      	mov	r3, r0
 80095b0:	73fb      	strb	r3, [r7, #15]
      break;
 80095b2:	e00c      	b.n	80095ce <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80095ba:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80095be:	b2db      	uxtb	r3, r3
 80095c0:	4619      	mov	r1, r3
 80095c2:	6878      	ldr	r0, [r7, #4]
 80095c4:	f001 fe16 	bl	800b1f4 <USBD_LL_StallEP>
 80095c8:	4603      	mov	r3, r0
 80095ca:	73fb      	strb	r3, [r7, #15]
      break;
 80095cc:	bf00      	nop
  }

  return ret;
 80095ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80095d0:	4618      	mov	r0, r3
 80095d2:	3710      	adds	r7, #16
 80095d4:	46bd      	mov	sp, r7
 80095d6:	bd80      	pop	{r7, pc}

080095d8 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80095d8:	b580      	push	{r7, lr}
 80095da:	b086      	sub	sp, #24
 80095dc:	af00      	add	r7, sp, #0
 80095de:	60f8      	str	r0, [r7, #12]
 80095e0:	460b      	mov	r3, r1
 80095e2:	607a      	str	r2, [r7, #4]
 80095e4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 80095e6:	2300      	movs	r3, #0
 80095e8:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 80095ea:	7afb      	ldrb	r3, [r7, #11]
 80095ec:	2b00      	cmp	r3, #0
 80095ee:	d16e      	bne.n	80096ce <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 80095f0:	68fb      	ldr	r3, [r7, #12]
 80095f2:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80095f6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80095f8:	68fb      	ldr	r3, [r7, #12]
 80095fa:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80095fe:	2b03      	cmp	r3, #3
 8009600:	f040 8098 	bne.w	8009734 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8009604:	693b      	ldr	r3, [r7, #16]
 8009606:	689a      	ldr	r2, [r3, #8]
 8009608:	693b      	ldr	r3, [r7, #16]
 800960a:	68db      	ldr	r3, [r3, #12]
 800960c:	429a      	cmp	r2, r3
 800960e:	d913      	bls.n	8009638 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8009610:	693b      	ldr	r3, [r7, #16]
 8009612:	689a      	ldr	r2, [r3, #8]
 8009614:	693b      	ldr	r3, [r7, #16]
 8009616:	68db      	ldr	r3, [r3, #12]
 8009618:	1ad2      	subs	r2, r2, r3
 800961a:	693b      	ldr	r3, [r7, #16]
 800961c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800961e:	693b      	ldr	r3, [r7, #16]
 8009620:	68da      	ldr	r2, [r3, #12]
 8009622:	693b      	ldr	r3, [r7, #16]
 8009624:	689b      	ldr	r3, [r3, #8]
 8009626:	4293      	cmp	r3, r2
 8009628:	bf28      	it	cs
 800962a:	4613      	movcs	r3, r2
 800962c:	461a      	mov	r2, r3
 800962e:	6879      	ldr	r1, [r7, #4]
 8009630:	68f8      	ldr	r0, [r7, #12]
 8009632:	f001 f984 	bl	800a93e <USBD_CtlContinueRx>
 8009636:	e07d      	b.n	8009734 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8009638:	68fb      	ldr	r3, [r7, #12]
 800963a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800963e:	f003 031f 	and.w	r3, r3, #31
 8009642:	2b02      	cmp	r3, #2
 8009644:	d014      	beq.n	8009670 <USBD_LL_DataOutStage+0x98>
 8009646:	2b02      	cmp	r3, #2
 8009648:	d81d      	bhi.n	8009686 <USBD_LL_DataOutStage+0xae>
 800964a:	2b00      	cmp	r3, #0
 800964c:	d002      	beq.n	8009654 <USBD_LL_DataOutStage+0x7c>
 800964e:	2b01      	cmp	r3, #1
 8009650:	d003      	beq.n	800965a <USBD_LL_DataOutStage+0x82>
 8009652:	e018      	b.n	8009686 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8009654:	2300      	movs	r3, #0
 8009656:	75bb      	strb	r3, [r7, #22]
            break;
 8009658:	e018      	b.n	800968c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800965a:	68fb      	ldr	r3, [r7, #12]
 800965c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8009660:	b2db      	uxtb	r3, r3
 8009662:	4619      	mov	r1, r3
 8009664:	68f8      	ldr	r0, [r7, #12]
 8009666:	f000 fa5e 	bl	8009b26 <USBD_CoreFindIF>
 800966a:	4603      	mov	r3, r0
 800966c:	75bb      	strb	r3, [r7, #22]
            break;
 800966e:	e00d      	b.n	800968c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8009670:	68fb      	ldr	r3, [r7, #12]
 8009672:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8009676:	b2db      	uxtb	r3, r3
 8009678:	4619      	mov	r1, r3
 800967a:	68f8      	ldr	r0, [r7, #12]
 800967c:	f000 fa60 	bl	8009b40 <USBD_CoreFindEP>
 8009680:	4603      	mov	r3, r0
 8009682:	75bb      	strb	r3, [r7, #22]
            break;
 8009684:	e002      	b.n	800968c <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8009686:	2300      	movs	r3, #0
 8009688:	75bb      	strb	r3, [r7, #22]
            break;
 800968a:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800968c:	7dbb      	ldrb	r3, [r7, #22]
 800968e:	2b00      	cmp	r3, #0
 8009690:	d119      	bne.n	80096c6 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009692:	68fb      	ldr	r3, [r7, #12]
 8009694:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009698:	b2db      	uxtb	r3, r3
 800969a:	2b03      	cmp	r3, #3
 800969c:	d113      	bne.n	80096c6 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800969e:	7dba      	ldrb	r2, [r7, #22]
 80096a0:	68fb      	ldr	r3, [r7, #12]
 80096a2:	32ae      	adds	r2, #174	; 0xae
 80096a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80096a8:	691b      	ldr	r3, [r3, #16]
 80096aa:	2b00      	cmp	r3, #0
 80096ac:	d00b      	beq.n	80096c6 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 80096ae:	7dba      	ldrb	r2, [r7, #22]
 80096b0:	68fb      	ldr	r3, [r7, #12]
 80096b2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 80096b6:	7dba      	ldrb	r2, [r7, #22]
 80096b8:	68fb      	ldr	r3, [r7, #12]
 80096ba:	32ae      	adds	r2, #174	; 0xae
 80096bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80096c0:	691b      	ldr	r3, [r3, #16]
 80096c2:	68f8      	ldr	r0, [r7, #12]
 80096c4:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80096c6:	68f8      	ldr	r0, [r7, #12]
 80096c8:	f001 f94a 	bl	800a960 <USBD_CtlSendStatus>
 80096cc:	e032      	b.n	8009734 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 80096ce:	7afb      	ldrb	r3, [r7, #11]
 80096d0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80096d4:	b2db      	uxtb	r3, r3
 80096d6:	4619      	mov	r1, r3
 80096d8:	68f8      	ldr	r0, [r7, #12]
 80096da:	f000 fa31 	bl	8009b40 <USBD_CoreFindEP>
 80096de:	4603      	mov	r3, r0
 80096e0:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80096e2:	7dbb      	ldrb	r3, [r7, #22]
 80096e4:	2bff      	cmp	r3, #255	; 0xff
 80096e6:	d025      	beq.n	8009734 <USBD_LL_DataOutStage+0x15c>
 80096e8:	7dbb      	ldrb	r3, [r7, #22]
 80096ea:	2b00      	cmp	r3, #0
 80096ec:	d122      	bne.n	8009734 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80096ee:	68fb      	ldr	r3, [r7, #12]
 80096f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80096f4:	b2db      	uxtb	r3, r3
 80096f6:	2b03      	cmp	r3, #3
 80096f8:	d117      	bne.n	800972a <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 80096fa:	7dba      	ldrb	r2, [r7, #22]
 80096fc:	68fb      	ldr	r3, [r7, #12]
 80096fe:	32ae      	adds	r2, #174	; 0xae
 8009700:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009704:	699b      	ldr	r3, [r3, #24]
 8009706:	2b00      	cmp	r3, #0
 8009708:	d00f      	beq.n	800972a <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800970a:	7dba      	ldrb	r2, [r7, #22]
 800970c:	68fb      	ldr	r3, [r7, #12]
 800970e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8009712:	7dba      	ldrb	r2, [r7, #22]
 8009714:	68fb      	ldr	r3, [r7, #12]
 8009716:	32ae      	adds	r2, #174	; 0xae
 8009718:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800971c:	699b      	ldr	r3, [r3, #24]
 800971e:	7afa      	ldrb	r2, [r7, #11]
 8009720:	4611      	mov	r1, r2
 8009722:	68f8      	ldr	r0, [r7, #12]
 8009724:	4798      	blx	r3
 8009726:	4603      	mov	r3, r0
 8009728:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800972a:	7dfb      	ldrb	r3, [r7, #23]
 800972c:	2b00      	cmp	r3, #0
 800972e:	d001      	beq.n	8009734 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8009730:	7dfb      	ldrb	r3, [r7, #23]
 8009732:	e000      	b.n	8009736 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8009734:	2300      	movs	r3, #0
}
 8009736:	4618      	mov	r0, r3
 8009738:	3718      	adds	r7, #24
 800973a:	46bd      	mov	sp, r7
 800973c:	bd80      	pop	{r7, pc}

0800973e <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800973e:	b580      	push	{r7, lr}
 8009740:	b086      	sub	sp, #24
 8009742:	af00      	add	r7, sp, #0
 8009744:	60f8      	str	r0, [r7, #12]
 8009746:	460b      	mov	r3, r1
 8009748:	607a      	str	r2, [r7, #4]
 800974a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800974c:	7afb      	ldrb	r3, [r7, #11]
 800974e:	2b00      	cmp	r3, #0
 8009750:	d16f      	bne.n	8009832 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8009752:	68fb      	ldr	r3, [r7, #12]
 8009754:	3314      	adds	r3, #20
 8009756:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8009758:	68fb      	ldr	r3, [r7, #12]
 800975a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800975e:	2b02      	cmp	r3, #2
 8009760:	d15a      	bne.n	8009818 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8009762:	693b      	ldr	r3, [r7, #16]
 8009764:	689a      	ldr	r2, [r3, #8]
 8009766:	693b      	ldr	r3, [r7, #16]
 8009768:	68db      	ldr	r3, [r3, #12]
 800976a:	429a      	cmp	r2, r3
 800976c:	d914      	bls.n	8009798 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800976e:	693b      	ldr	r3, [r7, #16]
 8009770:	689a      	ldr	r2, [r3, #8]
 8009772:	693b      	ldr	r3, [r7, #16]
 8009774:	68db      	ldr	r3, [r3, #12]
 8009776:	1ad2      	subs	r2, r2, r3
 8009778:	693b      	ldr	r3, [r7, #16]
 800977a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800977c:	693b      	ldr	r3, [r7, #16]
 800977e:	689b      	ldr	r3, [r3, #8]
 8009780:	461a      	mov	r2, r3
 8009782:	6879      	ldr	r1, [r7, #4]
 8009784:	68f8      	ldr	r0, [r7, #12]
 8009786:	f001 f8ac 	bl	800a8e2 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800978a:	2300      	movs	r3, #0
 800978c:	2200      	movs	r2, #0
 800978e:	2100      	movs	r1, #0
 8009790:	68f8      	ldr	r0, [r7, #12]
 8009792:	f001 fdd9 	bl	800b348 <USBD_LL_PrepareReceive>
 8009796:	e03f      	b.n	8009818 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8009798:	693b      	ldr	r3, [r7, #16]
 800979a:	68da      	ldr	r2, [r3, #12]
 800979c:	693b      	ldr	r3, [r7, #16]
 800979e:	689b      	ldr	r3, [r3, #8]
 80097a0:	429a      	cmp	r2, r3
 80097a2:	d11c      	bne.n	80097de <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80097a4:	693b      	ldr	r3, [r7, #16]
 80097a6:	685a      	ldr	r2, [r3, #4]
 80097a8:	693b      	ldr	r3, [r7, #16]
 80097aa:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80097ac:	429a      	cmp	r2, r3
 80097ae:	d316      	bcc.n	80097de <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80097b0:	693b      	ldr	r3, [r7, #16]
 80097b2:	685a      	ldr	r2, [r3, #4]
 80097b4:	68fb      	ldr	r3, [r7, #12]
 80097b6:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80097ba:	429a      	cmp	r2, r3
 80097bc:	d20f      	bcs.n	80097de <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80097be:	2200      	movs	r2, #0
 80097c0:	2100      	movs	r1, #0
 80097c2:	68f8      	ldr	r0, [r7, #12]
 80097c4:	f001 f88d 	bl	800a8e2 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80097c8:	68fb      	ldr	r3, [r7, #12]
 80097ca:	2200      	movs	r2, #0
 80097cc:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80097d0:	2300      	movs	r3, #0
 80097d2:	2200      	movs	r2, #0
 80097d4:	2100      	movs	r1, #0
 80097d6:	68f8      	ldr	r0, [r7, #12]
 80097d8:	f001 fdb6 	bl	800b348 <USBD_LL_PrepareReceive>
 80097dc:	e01c      	b.n	8009818 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80097de:	68fb      	ldr	r3, [r7, #12]
 80097e0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80097e4:	b2db      	uxtb	r3, r3
 80097e6:	2b03      	cmp	r3, #3
 80097e8:	d10f      	bne.n	800980a <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 80097ea:	68fb      	ldr	r3, [r7, #12]
 80097ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80097f0:	68db      	ldr	r3, [r3, #12]
 80097f2:	2b00      	cmp	r3, #0
 80097f4:	d009      	beq.n	800980a <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 80097f6:	68fb      	ldr	r3, [r7, #12]
 80097f8:	2200      	movs	r2, #0
 80097fa:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 80097fe:	68fb      	ldr	r3, [r7, #12]
 8009800:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009804:	68db      	ldr	r3, [r3, #12]
 8009806:	68f8      	ldr	r0, [r7, #12]
 8009808:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800980a:	2180      	movs	r1, #128	; 0x80
 800980c:	68f8      	ldr	r0, [r7, #12]
 800980e:	f001 fcf1 	bl	800b1f4 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8009812:	68f8      	ldr	r0, [r7, #12]
 8009814:	f001 f8b7 	bl	800a986 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8009818:	68fb      	ldr	r3, [r7, #12]
 800981a:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800981e:	2b00      	cmp	r3, #0
 8009820:	d03a      	beq.n	8009898 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8009822:	68f8      	ldr	r0, [r7, #12]
 8009824:	f7ff fe42 	bl	80094ac <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8009828:	68fb      	ldr	r3, [r7, #12]
 800982a:	2200      	movs	r2, #0
 800982c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8009830:	e032      	b.n	8009898 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8009832:	7afb      	ldrb	r3, [r7, #11]
 8009834:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8009838:	b2db      	uxtb	r3, r3
 800983a:	4619      	mov	r1, r3
 800983c:	68f8      	ldr	r0, [r7, #12]
 800983e:	f000 f97f 	bl	8009b40 <USBD_CoreFindEP>
 8009842:	4603      	mov	r3, r0
 8009844:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009846:	7dfb      	ldrb	r3, [r7, #23]
 8009848:	2bff      	cmp	r3, #255	; 0xff
 800984a:	d025      	beq.n	8009898 <USBD_LL_DataInStage+0x15a>
 800984c:	7dfb      	ldrb	r3, [r7, #23]
 800984e:	2b00      	cmp	r3, #0
 8009850:	d122      	bne.n	8009898 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009852:	68fb      	ldr	r3, [r7, #12]
 8009854:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009858:	b2db      	uxtb	r3, r3
 800985a:	2b03      	cmp	r3, #3
 800985c:	d11c      	bne.n	8009898 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800985e:	7dfa      	ldrb	r2, [r7, #23]
 8009860:	68fb      	ldr	r3, [r7, #12]
 8009862:	32ae      	adds	r2, #174	; 0xae
 8009864:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009868:	695b      	ldr	r3, [r3, #20]
 800986a:	2b00      	cmp	r3, #0
 800986c:	d014      	beq.n	8009898 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800986e:	7dfa      	ldrb	r2, [r7, #23]
 8009870:	68fb      	ldr	r3, [r7, #12]
 8009872:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8009876:	7dfa      	ldrb	r2, [r7, #23]
 8009878:	68fb      	ldr	r3, [r7, #12]
 800987a:	32ae      	adds	r2, #174	; 0xae
 800987c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009880:	695b      	ldr	r3, [r3, #20]
 8009882:	7afa      	ldrb	r2, [r7, #11]
 8009884:	4611      	mov	r1, r2
 8009886:	68f8      	ldr	r0, [r7, #12]
 8009888:	4798      	blx	r3
 800988a:	4603      	mov	r3, r0
 800988c:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800988e:	7dbb      	ldrb	r3, [r7, #22]
 8009890:	2b00      	cmp	r3, #0
 8009892:	d001      	beq.n	8009898 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8009894:	7dbb      	ldrb	r3, [r7, #22]
 8009896:	e000      	b.n	800989a <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8009898:	2300      	movs	r3, #0
}
 800989a:	4618      	mov	r0, r3
 800989c:	3718      	adds	r7, #24
 800989e:	46bd      	mov	sp, r7
 80098a0:	bd80      	pop	{r7, pc}

080098a2 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80098a2:	b580      	push	{r7, lr}
 80098a4:	b084      	sub	sp, #16
 80098a6:	af00      	add	r7, sp, #0
 80098a8:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 80098aa:	2300      	movs	r3, #0
 80098ac:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	2201      	movs	r2, #1
 80098b2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	2200      	movs	r2, #0
 80098ba:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	2200      	movs	r2, #0
 80098c2:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	2200      	movs	r2, #0
 80098c8:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	2200      	movs	r2, #0
 80098d0:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80098da:	2b00      	cmp	r3, #0
 80098dc:	d014      	beq.n	8009908 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80098e4:	685b      	ldr	r3, [r3, #4]
 80098e6:	2b00      	cmp	r3, #0
 80098e8:	d00e      	beq.n	8009908 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80098f0:	685b      	ldr	r3, [r3, #4]
 80098f2:	687a      	ldr	r2, [r7, #4]
 80098f4:	6852      	ldr	r2, [r2, #4]
 80098f6:	b2d2      	uxtb	r2, r2
 80098f8:	4611      	mov	r1, r2
 80098fa:	6878      	ldr	r0, [r7, #4]
 80098fc:	4798      	blx	r3
 80098fe:	4603      	mov	r3, r0
 8009900:	2b00      	cmp	r3, #0
 8009902:	d001      	beq.n	8009908 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8009904:	2303      	movs	r3, #3
 8009906:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009908:	2340      	movs	r3, #64	; 0x40
 800990a:	2200      	movs	r2, #0
 800990c:	2100      	movs	r1, #0
 800990e:	6878      	ldr	r0, [r7, #4]
 8009910:	f001 fc2b 	bl	800b16a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	2201      	movs	r2, #1
 8009918:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	2240      	movs	r2, #64	; 0x40
 8009920:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009924:	2340      	movs	r3, #64	; 0x40
 8009926:	2200      	movs	r2, #0
 8009928:	2180      	movs	r1, #128	; 0x80
 800992a:	6878      	ldr	r0, [r7, #4]
 800992c:	f001 fc1d 	bl	800b16a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	2201      	movs	r2, #1
 8009934:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	2240      	movs	r2, #64	; 0x40
 800993a:	621a      	str	r2, [r3, #32]

  return ret;
 800993c:	7bfb      	ldrb	r3, [r7, #15]
}
 800993e:	4618      	mov	r0, r3
 8009940:	3710      	adds	r7, #16
 8009942:	46bd      	mov	sp, r7
 8009944:	bd80      	pop	{r7, pc}

08009946 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8009946:	b480      	push	{r7}
 8009948:	b083      	sub	sp, #12
 800994a:	af00      	add	r7, sp, #0
 800994c:	6078      	str	r0, [r7, #4]
 800994e:	460b      	mov	r3, r1
 8009950:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	78fa      	ldrb	r2, [r7, #3]
 8009956:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8009958:	2300      	movs	r3, #0
}
 800995a:	4618      	mov	r0, r3
 800995c:	370c      	adds	r7, #12
 800995e:	46bd      	mov	sp, r7
 8009960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009964:	4770      	bx	lr

08009966 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8009966:	b480      	push	{r7}
 8009968:	b083      	sub	sp, #12
 800996a:	af00      	add	r7, sp, #0
 800996c:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009974:	b2da      	uxtb	r2, r3
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	2204      	movs	r2, #4
 8009980:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8009984:	2300      	movs	r3, #0
}
 8009986:	4618      	mov	r0, r3
 8009988:	370c      	adds	r7, #12
 800998a:	46bd      	mov	sp, r7
 800998c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009990:	4770      	bx	lr

08009992 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8009992:	b480      	push	{r7}
 8009994:	b083      	sub	sp, #12
 8009996:	af00      	add	r7, sp, #0
 8009998:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80099a0:	b2db      	uxtb	r3, r3
 80099a2:	2b04      	cmp	r3, #4
 80099a4:	d106      	bne.n	80099b4 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 80099ac:	b2da      	uxtb	r2, r3
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80099b4:	2300      	movs	r3, #0
}
 80099b6:	4618      	mov	r0, r3
 80099b8:	370c      	adds	r7, #12
 80099ba:	46bd      	mov	sp, r7
 80099bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099c0:	4770      	bx	lr

080099c2 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80099c2:	b580      	push	{r7, lr}
 80099c4:	b082      	sub	sp, #8
 80099c6:	af00      	add	r7, sp, #0
 80099c8:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80099d0:	b2db      	uxtb	r3, r3
 80099d2:	2b03      	cmp	r3, #3
 80099d4:	d110      	bne.n	80099f8 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80099dc:	2b00      	cmp	r3, #0
 80099de:	d00b      	beq.n	80099f8 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80099e6:	69db      	ldr	r3, [r3, #28]
 80099e8:	2b00      	cmp	r3, #0
 80099ea:	d005      	beq.n	80099f8 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80099f2:	69db      	ldr	r3, [r3, #28]
 80099f4:	6878      	ldr	r0, [r7, #4]
 80099f6:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 80099f8:	2300      	movs	r3, #0
}
 80099fa:	4618      	mov	r0, r3
 80099fc:	3708      	adds	r7, #8
 80099fe:	46bd      	mov	sp, r7
 8009a00:	bd80      	pop	{r7, pc}

08009a02 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8009a02:	b580      	push	{r7, lr}
 8009a04:	b082      	sub	sp, #8
 8009a06:	af00      	add	r7, sp, #0
 8009a08:	6078      	str	r0, [r7, #4]
 8009a0a:	460b      	mov	r3, r1
 8009a0c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	32ae      	adds	r2, #174	; 0xae
 8009a18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009a1c:	2b00      	cmp	r3, #0
 8009a1e:	d101      	bne.n	8009a24 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8009a20:	2303      	movs	r3, #3
 8009a22:	e01c      	b.n	8009a5e <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009a2a:	b2db      	uxtb	r3, r3
 8009a2c:	2b03      	cmp	r3, #3
 8009a2e:	d115      	bne.n	8009a5c <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	32ae      	adds	r2, #174	; 0xae
 8009a3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009a3e:	6a1b      	ldr	r3, [r3, #32]
 8009a40:	2b00      	cmp	r3, #0
 8009a42:	d00b      	beq.n	8009a5c <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	32ae      	adds	r2, #174	; 0xae
 8009a4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009a52:	6a1b      	ldr	r3, [r3, #32]
 8009a54:	78fa      	ldrb	r2, [r7, #3]
 8009a56:	4611      	mov	r1, r2
 8009a58:	6878      	ldr	r0, [r7, #4]
 8009a5a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009a5c:	2300      	movs	r3, #0
}
 8009a5e:	4618      	mov	r0, r3
 8009a60:	3708      	adds	r7, #8
 8009a62:	46bd      	mov	sp, r7
 8009a64:	bd80      	pop	{r7, pc}

08009a66 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8009a66:	b580      	push	{r7, lr}
 8009a68:	b082      	sub	sp, #8
 8009a6a:	af00      	add	r7, sp, #0
 8009a6c:	6078      	str	r0, [r7, #4]
 8009a6e:	460b      	mov	r3, r1
 8009a70:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	32ae      	adds	r2, #174	; 0xae
 8009a7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009a80:	2b00      	cmp	r3, #0
 8009a82:	d101      	bne.n	8009a88 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8009a84:	2303      	movs	r3, #3
 8009a86:	e01c      	b.n	8009ac2 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009a8e:	b2db      	uxtb	r3, r3
 8009a90:	2b03      	cmp	r3, #3
 8009a92:	d115      	bne.n	8009ac0 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	32ae      	adds	r2, #174	; 0xae
 8009a9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009aa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009aa4:	2b00      	cmp	r3, #0
 8009aa6:	d00b      	beq.n	8009ac0 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	32ae      	adds	r2, #174	; 0xae
 8009ab2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009ab6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ab8:	78fa      	ldrb	r2, [r7, #3]
 8009aba:	4611      	mov	r1, r2
 8009abc:	6878      	ldr	r0, [r7, #4]
 8009abe:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009ac0:	2300      	movs	r3, #0
}
 8009ac2:	4618      	mov	r0, r3
 8009ac4:	3708      	adds	r7, #8
 8009ac6:	46bd      	mov	sp, r7
 8009ac8:	bd80      	pop	{r7, pc}

08009aca <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8009aca:	b480      	push	{r7}
 8009acc:	b083      	sub	sp, #12
 8009ace:	af00      	add	r7, sp, #0
 8009ad0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009ad2:	2300      	movs	r3, #0
}
 8009ad4:	4618      	mov	r0, r3
 8009ad6:	370c      	adds	r7, #12
 8009ad8:	46bd      	mov	sp, r7
 8009ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ade:	4770      	bx	lr

08009ae0 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8009ae0:	b580      	push	{r7, lr}
 8009ae2:	b084      	sub	sp, #16
 8009ae4:	af00      	add	r7, sp, #0
 8009ae6:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8009ae8:	2300      	movs	r3, #0
 8009aea:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	2201      	movs	r2, #1
 8009af0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009afa:	2b00      	cmp	r3, #0
 8009afc:	d00e      	beq.n	8009b1c <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009b04:	685b      	ldr	r3, [r3, #4]
 8009b06:	687a      	ldr	r2, [r7, #4]
 8009b08:	6852      	ldr	r2, [r2, #4]
 8009b0a:	b2d2      	uxtb	r2, r2
 8009b0c:	4611      	mov	r1, r2
 8009b0e:	6878      	ldr	r0, [r7, #4]
 8009b10:	4798      	blx	r3
 8009b12:	4603      	mov	r3, r0
 8009b14:	2b00      	cmp	r3, #0
 8009b16:	d001      	beq.n	8009b1c <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8009b18:	2303      	movs	r3, #3
 8009b1a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8009b1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b1e:	4618      	mov	r0, r3
 8009b20:	3710      	adds	r7, #16
 8009b22:	46bd      	mov	sp, r7
 8009b24:	bd80      	pop	{r7, pc}

08009b26 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8009b26:	b480      	push	{r7}
 8009b28:	b083      	sub	sp, #12
 8009b2a:	af00      	add	r7, sp, #0
 8009b2c:	6078      	str	r0, [r7, #4]
 8009b2e:	460b      	mov	r3, r1
 8009b30:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8009b32:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8009b34:	4618      	mov	r0, r3
 8009b36:	370c      	adds	r7, #12
 8009b38:	46bd      	mov	sp, r7
 8009b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b3e:	4770      	bx	lr

08009b40 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8009b40:	b480      	push	{r7}
 8009b42:	b083      	sub	sp, #12
 8009b44:	af00      	add	r7, sp, #0
 8009b46:	6078      	str	r0, [r7, #4]
 8009b48:	460b      	mov	r3, r1
 8009b4a:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8009b4c:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8009b4e:	4618      	mov	r0, r3
 8009b50:	370c      	adds	r7, #12
 8009b52:	46bd      	mov	sp, r7
 8009b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b58:	4770      	bx	lr

08009b5a <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8009b5a:	b580      	push	{r7, lr}
 8009b5c:	b086      	sub	sp, #24
 8009b5e:	af00      	add	r7, sp, #0
 8009b60:	6078      	str	r0, [r7, #4]
 8009b62:	460b      	mov	r3, r1
 8009b64:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8009b6e:	2300      	movs	r3, #0
 8009b70:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8009b72:	68fb      	ldr	r3, [r7, #12]
 8009b74:	885b      	ldrh	r3, [r3, #2]
 8009b76:	b29a      	uxth	r2, r3
 8009b78:	68fb      	ldr	r3, [r7, #12]
 8009b7a:	781b      	ldrb	r3, [r3, #0]
 8009b7c:	b29b      	uxth	r3, r3
 8009b7e:	429a      	cmp	r2, r3
 8009b80:	d920      	bls.n	8009bc4 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8009b82:	68fb      	ldr	r3, [r7, #12]
 8009b84:	781b      	ldrb	r3, [r3, #0]
 8009b86:	b29b      	uxth	r3, r3
 8009b88:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8009b8a:	e013      	b.n	8009bb4 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8009b8c:	f107 030a 	add.w	r3, r7, #10
 8009b90:	4619      	mov	r1, r3
 8009b92:	6978      	ldr	r0, [r7, #20]
 8009b94:	f000 f81b 	bl	8009bce <USBD_GetNextDesc>
 8009b98:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8009b9a:	697b      	ldr	r3, [r7, #20]
 8009b9c:	785b      	ldrb	r3, [r3, #1]
 8009b9e:	2b05      	cmp	r3, #5
 8009ba0:	d108      	bne.n	8009bb4 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8009ba2:	697b      	ldr	r3, [r7, #20]
 8009ba4:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8009ba6:	693b      	ldr	r3, [r7, #16]
 8009ba8:	789b      	ldrb	r3, [r3, #2]
 8009baa:	78fa      	ldrb	r2, [r7, #3]
 8009bac:	429a      	cmp	r2, r3
 8009bae:	d008      	beq.n	8009bc2 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8009bb0:	2300      	movs	r3, #0
 8009bb2:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8009bb4:	68fb      	ldr	r3, [r7, #12]
 8009bb6:	885b      	ldrh	r3, [r3, #2]
 8009bb8:	b29a      	uxth	r2, r3
 8009bba:	897b      	ldrh	r3, [r7, #10]
 8009bbc:	429a      	cmp	r2, r3
 8009bbe:	d8e5      	bhi.n	8009b8c <USBD_GetEpDesc+0x32>
 8009bc0:	e000      	b.n	8009bc4 <USBD_GetEpDesc+0x6a>
          break;
 8009bc2:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8009bc4:	693b      	ldr	r3, [r7, #16]
}
 8009bc6:	4618      	mov	r0, r3
 8009bc8:	3718      	adds	r7, #24
 8009bca:	46bd      	mov	sp, r7
 8009bcc:	bd80      	pop	{r7, pc}

08009bce <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8009bce:	b480      	push	{r7}
 8009bd0:	b085      	sub	sp, #20
 8009bd2:	af00      	add	r7, sp, #0
 8009bd4:	6078      	str	r0, [r7, #4]
 8009bd6:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8009bdc:	683b      	ldr	r3, [r7, #0]
 8009bde:	881a      	ldrh	r2, [r3, #0]
 8009be0:	68fb      	ldr	r3, [r7, #12]
 8009be2:	781b      	ldrb	r3, [r3, #0]
 8009be4:	b29b      	uxth	r3, r3
 8009be6:	4413      	add	r3, r2
 8009be8:	b29a      	uxth	r2, r3
 8009bea:	683b      	ldr	r3, [r7, #0]
 8009bec:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8009bee:	68fb      	ldr	r3, [r7, #12]
 8009bf0:	781b      	ldrb	r3, [r3, #0]
 8009bf2:	461a      	mov	r2, r3
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	4413      	add	r3, r2
 8009bf8:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8009bfa:	68fb      	ldr	r3, [r7, #12]
}
 8009bfc:	4618      	mov	r0, r3
 8009bfe:	3714      	adds	r7, #20
 8009c00:	46bd      	mov	sp, r7
 8009c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c06:	4770      	bx	lr

08009c08 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8009c08:	b480      	push	{r7}
 8009c0a:	b087      	sub	sp, #28
 8009c0c:	af00      	add	r7, sp, #0
 8009c0e:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8009c14:	697b      	ldr	r3, [r7, #20]
 8009c16:	781b      	ldrb	r3, [r3, #0]
 8009c18:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8009c1a:	697b      	ldr	r3, [r7, #20]
 8009c1c:	3301      	adds	r3, #1
 8009c1e:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8009c20:	697b      	ldr	r3, [r7, #20]
 8009c22:	781b      	ldrb	r3, [r3, #0]
 8009c24:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8009c26:	8a3b      	ldrh	r3, [r7, #16]
 8009c28:	021b      	lsls	r3, r3, #8
 8009c2a:	b21a      	sxth	r2, r3
 8009c2c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8009c30:	4313      	orrs	r3, r2
 8009c32:	b21b      	sxth	r3, r3
 8009c34:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8009c36:	89fb      	ldrh	r3, [r7, #14]
}
 8009c38:	4618      	mov	r0, r3
 8009c3a:	371c      	adds	r7, #28
 8009c3c:	46bd      	mov	sp, r7
 8009c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c42:	4770      	bx	lr

08009c44 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009c44:	b580      	push	{r7, lr}
 8009c46:	b084      	sub	sp, #16
 8009c48:	af00      	add	r7, sp, #0
 8009c4a:	6078      	str	r0, [r7, #4]
 8009c4c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009c4e:	2300      	movs	r3, #0
 8009c50:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009c52:	683b      	ldr	r3, [r7, #0]
 8009c54:	781b      	ldrb	r3, [r3, #0]
 8009c56:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009c5a:	2b40      	cmp	r3, #64	; 0x40
 8009c5c:	d005      	beq.n	8009c6a <USBD_StdDevReq+0x26>
 8009c5e:	2b40      	cmp	r3, #64	; 0x40
 8009c60:	d857      	bhi.n	8009d12 <USBD_StdDevReq+0xce>
 8009c62:	2b00      	cmp	r3, #0
 8009c64:	d00f      	beq.n	8009c86 <USBD_StdDevReq+0x42>
 8009c66:	2b20      	cmp	r3, #32
 8009c68:	d153      	bne.n	8009d12 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	32ae      	adds	r2, #174	; 0xae
 8009c74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009c78:	689b      	ldr	r3, [r3, #8]
 8009c7a:	6839      	ldr	r1, [r7, #0]
 8009c7c:	6878      	ldr	r0, [r7, #4]
 8009c7e:	4798      	blx	r3
 8009c80:	4603      	mov	r3, r0
 8009c82:	73fb      	strb	r3, [r7, #15]
      break;
 8009c84:	e04a      	b.n	8009d1c <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009c86:	683b      	ldr	r3, [r7, #0]
 8009c88:	785b      	ldrb	r3, [r3, #1]
 8009c8a:	2b09      	cmp	r3, #9
 8009c8c:	d83b      	bhi.n	8009d06 <USBD_StdDevReq+0xc2>
 8009c8e:	a201      	add	r2, pc, #4	; (adr r2, 8009c94 <USBD_StdDevReq+0x50>)
 8009c90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c94:	08009ce9 	.word	0x08009ce9
 8009c98:	08009cfd 	.word	0x08009cfd
 8009c9c:	08009d07 	.word	0x08009d07
 8009ca0:	08009cf3 	.word	0x08009cf3
 8009ca4:	08009d07 	.word	0x08009d07
 8009ca8:	08009cc7 	.word	0x08009cc7
 8009cac:	08009cbd 	.word	0x08009cbd
 8009cb0:	08009d07 	.word	0x08009d07
 8009cb4:	08009cdf 	.word	0x08009cdf
 8009cb8:	08009cd1 	.word	0x08009cd1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8009cbc:	6839      	ldr	r1, [r7, #0]
 8009cbe:	6878      	ldr	r0, [r7, #4]
 8009cc0:	f000 fa3c 	bl	800a13c <USBD_GetDescriptor>
          break;
 8009cc4:	e024      	b.n	8009d10 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8009cc6:	6839      	ldr	r1, [r7, #0]
 8009cc8:	6878      	ldr	r0, [r7, #4]
 8009cca:	f000 fba1 	bl	800a410 <USBD_SetAddress>
          break;
 8009cce:	e01f      	b.n	8009d10 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8009cd0:	6839      	ldr	r1, [r7, #0]
 8009cd2:	6878      	ldr	r0, [r7, #4]
 8009cd4:	f000 fbe0 	bl	800a498 <USBD_SetConfig>
 8009cd8:	4603      	mov	r3, r0
 8009cda:	73fb      	strb	r3, [r7, #15]
          break;
 8009cdc:	e018      	b.n	8009d10 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8009cde:	6839      	ldr	r1, [r7, #0]
 8009ce0:	6878      	ldr	r0, [r7, #4]
 8009ce2:	f000 fc83 	bl	800a5ec <USBD_GetConfig>
          break;
 8009ce6:	e013      	b.n	8009d10 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8009ce8:	6839      	ldr	r1, [r7, #0]
 8009cea:	6878      	ldr	r0, [r7, #4]
 8009cec:	f000 fcb4 	bl	800a658 <USBD_GetStatus>
          break;
 8009cf0:	e00e      	b.n	8009d10 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8009cf2:	6839      	ldr	r1, [r7, #0]
 8009cf4:	6878      	ldr	r0, [r7, #4]
 8009cf6:	f000 fce3 	bl	800a6c0 <USBD_SetFeature>
          break;
 8009cfa:	e009      	b.n	8009d10 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8009cfc:	6839      	ldr	r1, [r7, #0]
 8009cfe:	6878      	ldr	r0, [r7, #4]
 8009d00:	f000 fd07 	bl	800a712 <USBD_ClrFeature>
          break;
 8009d04:	e004      	b.n	8009d10 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8009d06:	6839      	ldr	r1, [r7, #0]
 8009d08:	6878      	ldr	r0, [r7, #4]
 8009d0a:	f000 fd5e 	bl	800a7ca <USBD_CtlError>
          break;
 8009d0e:	bf00      	nop
      }
      break;
 8009d10:	e004      	b.n	8009d1c <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8009d12:	6839      	ldr	r1, [r7, #0]
 8009d14:	6878      	ldr	r0, [r7, #4]
 8009d16:	f000 fd58 	bl	800a7ca <USBD_CtlError>
      break;
 8009d1a:	bf00      	nop
  }

  return ret;
 8009d1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d1e:	4618      	mov	r0, r3
 8009d20:	3710      	adds	r7, #16
 8009d22:	46bd      	mov	sp, r7
 8009d24:	bd80      	pop	{r7, pc}
 8009d26:	bf00      	nop

08009d28 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009d28:	b580      	push	{r7, lr}
 8009d2a:	b084      	sub	sp, #16
 8009d2c:	af00      	add	r7, sp, #0
 8009d2e:	6078      	str	r0, [r7, #4]
 8009d30:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009d32:	2300      	movs	r3, #0
 8009d34:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009d36:	683b      	ldr	r3, [r7, #0]
 8009d38:	781b      	ldrb	r3, [r3, #0]
 8009d3a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009d3e:	2b40      	cmp	r3, #64	; 0x40
 8009d40:	d005      	beq.n	8009d4e <USBD_StdItfReq+0x26>
 8009d42:	2b40      	cmp	r3, #64	; 0x40
 8009d44:	d852      	bhi.n	8009dec <USBD_StdItfReq+0xc4>
 8009d46:	2b00      	cmp	r3, #0
 8009d48:	d001      	beq.n	8009d4e <USBD_StdItfReq+0x26>
 8009d4a:	2b20      	cmp	r3, #32
 8009d4c:	d14e      	bne.n	8009dec <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009d54:	b2db      	uxtb	r3, r3
 8009d56:	3b01      	subs	r3, #1
 8009d58:	2b02      	cmp	r3, #2
 8009d5a:	d840      	bhi.n	8009dde <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8009d5c:	683b      	ldr	r3, [r7, #0]
 8009d5e:	889b      	ldrh	r3, [r3, #4]
 8009d60:	b2db      	uxtb	r3, r3
 8009d62:	2b01      	cmp	r3, #1
 8009d64:	d836      	bhi.n	8009dd4 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8009d66:	683b      	ldr	r3, [r7, #0]
 8009d68:	889b      	ldrh	r3, [r3, #4]
 8009d6a:	b2db      	uxtb	r3, r3
 8009d6c:	4619      	mov	r1, r3
 8009d6e:	6878      	ldr	r0, [r7, #4]
 8009d70:	f7ff fed9 	bl	8009b26 <USBD_CoreFindIF>
 8009d74:	4603      	mov	r3, r0
 8009d76:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009d78:	7bbb      	ldrb	r3, [r7, #14]
 8009d7a:	2bff      	cmp	r3, #255	; 0xff
 8009d7c:	d01d      	beq.n	8009dba <USBD_StdItfReq+0x92>
 8009d7e:	7bbb      	ldrb	r3, [r7, #14]
 8009d80:	2b00      	cmp	r3, #0
 8009d82:	d11a      	bne.n	8009dba <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8009d84:	7bba      	ldrb	r2, [r7, #14]
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	32ae      	adds	r2, #174	; 0xae
 8009d8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009d8e:	689b      	ldr	r3, [r3, #8]
 8009d90:	2b00      	cmp	r3, #0
 8009d92:	d00f      	beq.n	8009db4 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8009d94:	7bba      	ldrb	r2, [r7, #14]
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8009d9c:	7bba      	ldrb	r2, [r7, #14]
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	32ae      	adds	r2, #174	; 0xae
 8009da2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009da6:	689b      	ldr	r3, [r3, #8]
 8009da8:	6839      	ldr	r1, [r7, #0]
 8009daa:	6878      	ldr	r0, [r7, #4]
 8009dac:	4798      	blx	r3
 8009dae:	4603      	mov	r3, r0
 8009db0:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8009db2:	e004      	b.n	8009dbe <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8009db4:	2303      	movs	r3, #3
 8009db6:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8009db8:	e001      	b.n	8009dbe <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8009dba:	2303      	movs	r3, #3
 8009dbc:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8009dbe:	683b      	ldr	r3, [r7, #0]
 8009dc0:	88db      	ldrh	r3, [r3, #6]
 8009dc2:	2b00      	cmp	r3, #0
 8009dc4:	d110      	bne.n	8009de8 <USBD_StdItfReq+0xc0>
 8009dc6:	7bfb      	ldrb	r3, [r7, #15]
 8009dc8:	2b00      	cmp	r3, #0
 8009dca:	d10d      	bne.n	8009de8 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8009dcc:	6878      	ldr	r0, [r7, #4]
 8009dce:	f000 fdc7 	bl	800a960 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8009dd2:	e009      	b.n	8009de8 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8009dd4:	6839      	ldr	r1, [r7, #0]
 8009dd6:	6878      	ldr	r0, [r7, #4]
 8009dd8:	f000 fcf7 	bl	800a7ca <USBD_CtlError>
          break;
 8009ddc:	e004      	b.n	8009de8 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8009dde:	6839      	ldr	r1, [r7, #0]
 8009de0:	6878      	ldr	r0, [r7, #4]
 8009de2:	f000 fcf2 	bl	800a7ca <USBD_CtlError>
          break;
 8009de6:	e000      	b.n	8009dea <USBD_StdItfReq+0xc2>
          break;
 8009de8:	bf00      	nop
      }
      break;
 8009dea:	e004      	b.n	8009df6 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8009dec:	6839      	ldr	r1, [r7, #0]
 8009dee:	6878      	ldr	r0, [r7, #4]
 8009df0:	f000 fceb 	bl	800a7ca <USBD_CtlError>
      break;
 8009df4:	bf00      	nop
  }

  return ret;
 8009df6:	7bfb      	ldrb	r3, [r7, #15]
}
 8009df8:	4618      	mov	r0, r3
 8009dfa:	3710      	adds	r7, #16
 8009dfc:	46bd      	mov	sp, r7
 8009dfe:	bd80      	pop	{r7, pc}

08009e00 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009e00:	b580      	push	{r7, lr}
 8009e02:	b084      	sub	sp, #16
 8009e04:	af00      	add	r7, sp, #0
 8009e06:	6078      	str	r0, [r7, #4]
 8009e08:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8009e0a:	2300      	movs	r3, #0
 8009e0c:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8009e0e:	683b      	ldr	r3, [r7, #0]
 8009e10:	889b      	ldrh	r3, [r3, #4]
 8009e12:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009e14:	683b      	ldr	r3, [r7, #0]
 8009e16:	781b      	ldrb	r3, [r3, #0]
 8009e18:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009e1c:	2b40      	cmp	r3, #64	; 0x40
 8009e1e:	d007      	beq.n	8009e30 <USBD_StdEPReq+0x30>
 8009e20:	2b40      	cmp	r3, #64	; 0x40
 8009e22:	f200 817f 	bhi.w	800a124 <USBD_StdEPReq+0x324>
 8009e26:	2b00      	cmp	r3, #0
 8009e28:	d02a      	beq.n	8009e80 <USBD_StdEPReq+0x80>
 8009e2a:	2b20      	cmp	r3, #32
 8009e2c:	f040 817a 	bne.w	800a124 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8009e30:	7bbb      	ldrb	r3, [r7, #14]
 8009e32:	4619      	mov	r1, r3
 8009e34:	6878      	ldr	r0, [r7, #4]
 8009e36:	f7ff fe83 	bl	8009b40 <USBD_CoreFindEP>
 8009e3a:	4603      	mov	r3, r0
 8009e3c:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009e3e:	7b7b      	ldrb	r3, [r7, #13]
 8009e40:	2bff      	cmp	r3, #255	; 0xff
 8009e42:	f000 8174 	beq.w	800a12e <USBD_StdEPReq+0x32e>
 8009e46:	7b7b      	ldrb	r3, [r7, #13]
 8009e48:	2b00      	cmp	r3, #0
 8009e4a:	f040 8170 	bne.w	800a12e <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8009e4e:	7b7a      	ldrb	r2, [r7, #13]
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8009e56:	7b7a      	ldrb	r2, [r7, #13]
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	32ae      	adds	r2, #174	; 0xae
 8009e5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009e60:	689b      	ldr	r3, [r3, #8]
 8009e62:	2b00      	cmp	r3, #0
 8009e64:	f000 8163 	beq.w	800a12e <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8009e68:	7b7a      	ldrb	r2, [r7, #13]
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	32ae      	adds	r2, #174	; 0xae
 8009e6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009e72:	689b      	ldr	r3, [r3, #8]
 8009e74:	6839      	ldr	r1, [r7, #0]
 8009e76:	6878      	ldr	r0, [r7, #4]
 8009e78:	4798      	blx	r3
 8009e7a:	4603      	mov	r3, r0
 8009e7c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8009e7e:	e156      	b.n	800a12e <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009e80:	683b      	ldr	r3, [r7, #0]
 8009e82:	785b      	ldrb	r3, [r3, #1]
 8009e84:	2b03      	cmp	r3, #3
 8009e86:	d008      	beq.n	8009e9a <USBD_StdEPReq+0x9a>
 8009e88:	2b03      	cmp	r3, #3
 8009e8a:	f300 8145 	bgt.w	800a118 <USBD_StdEPReq+0x318>
 8009e8e:	2b00      	cmp	r3, #0
 8009e90:	f000 809b 	beq.w	8009fca <USBD_StdEPReq+0x1ca>
 8009e94:	2b01      	cmp	r3, #1
 8009e96:	d03c      	beq.n	8009f12 <USBD_StdEPReq+0x112>
 8009e98:	e13e      	b.n	800a118 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009ea0:	b2db      	uxtb	r3, r3
 8009ea2:	2b02      	cmp	r3, #2
 8009ea4:	d002      	beq.n	8009eac <USBD_StdEPReq+0xac>
 8009ea6:	2b03      	cmp	r3, #3
 8009ea8:	d016      	beq.n	8009ed8 <USBD_StdEPReq+0xd8>
 8009eaa:	e02c      	b.n	8009f06 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009eac:	7bbb      	ldrb	r3, [r7, #14]
 8009eae:	2b00      	cmp	r3, #0
 8009eb0:	d00d      	beq.n	8009ece <USBD_StdEPReq+0xce>
 8009eb2:	7bbb      	ldrb	r3, [r7, #14]
 8009eb4:	2b80      	cmp	r3, #128	; 0x80
 8009eb6:	d00a      	beq.n	8009ece <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009eb8:	7bbb      	ldrb	r3, [r7, #14]
 8009eba:	4619      	mov	r1, r3
 8009ebc:	6878      	ldr	r0, [r7, #4]
 8009ebe:	f001 f999 	bl	800b1f4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8009ec2:	2180      	movs	r1, #128	; 0x80
 8009ec4:	6878      	ldr	r0, [r7, #4]
 8009ec6:	f001 f995 	bl	800b1f4 <USBD_LL_StallEP>
 8009eca:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009ecc:	e020      	b.n	8009f10 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8009ece:	6839      	ldr	r1, [r7, #0]
 8009ed0:	6878      	ldr	r0, [r7, #4]
 8009ed2:	f000 fc7a 	bl	800a7ca <USBD_CtlError>
              break;
 8009ed6:	e01b      	b.n	8009f10 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009ed8:	683b      	ldr	r3, [r7, #0]
 8009eda:	885b      	ldrh	r3, [r3, #2]
 8009edc:	2b00      	cmp	r3, #0
 8009ede:	d10e      	bne.n	8009efe <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8009ee0:	7bbb      	ldrb	r3, [r7, #14]
 8009ee2:	2b00      	cmp	r3, #0
 8009ee4:	d00b      	beq.n	8009efe <USBD_StdEPReq+0xfe>
 8009ee6:	7bbb      	ldrb	r3, [r7, #14]
 8009ee8:	2b80      	cmp	r3, #128	; 0x80
 8009eea:	d008      	beq.n	8009efe <USBD_StdEPReq+0xfe>
 8009eec:	683b      	ldr	r3, [r7, #0]
 8009eee:	88db      	ldrh	r3, [r3, #6]
 8009ef0:	2b00      	cmp	r3, #0
 8009ef2:	d104      	bne.n	8009efe <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8009ef4:	7bbb      	ldrb	r3, [r7, #14]
 8009ef6:	4619      	mov	r1, r3
 8009ef8:	6878      	ldr	r0, [r7, #4]
 8009efa:	f001 f97b 	bl	800b1f4 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8009efe:	6878      	ldr	r0, [r7, #4]
 8009f00:	f000 fd2e 	bl	800a960 <USBD_CtlSendStatus>

              break;
 8009f04:	e004      	b.n	8009f10 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8009f06:	6839      	ldr	r1, [r7, #0]
 8009f08:	6878      	ldr	r0, [r7, #4]
 8009f0a:	f000 fc5e 	bl	800a7ca <USBD_CtlError>
              break;
 8009f0e:	bf00      	nop
          }
          break;
 8009f10:	e107      	b.n	800a122 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009f18:	b2db      	uxtb	r3, r3
 8009f1a:	2b02      	cmp	r3, #2
 8009f1c:	d002      	beq.n	8009f24 <USBD_StdEPReq+0x124>
 8009f1e:	2b03      	cmp	r3, #3
 8009f20:	d016      	beq.n	8009f50 <USBD_StdEPReq+0x150>
 8009f22:	e04b      	b.n	8009fbc <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009f24:	7bbb      	ldrb	r3, [r7, #14]
 8009f26:	2b00      	cmp	r3, #0
 8009f28:	d00d      	beq.n	8009f46 <USBD_StdEPReq+0x146>
 8009f2a:	7bbb      	ldrb	r3, [r7, #14]
 8009f2c:	2b80      	cmp	r3, #128	; 0x80
 8009f2e:	d00a      	beq.n	8009f46 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009f30:	7bbb      	ldrb	r3, [r7, #14]
 8009f32:	4619      	mov	r1, r3
 8009f34:	6878      	ldr	r0, [r7, #4]
 8009f36:	f001 f95d 	bl	800b1f4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8009f3a:	2180      	movs	r1, #128	; 0x80
 8009f3c:	6878      	ldr	r0, [r7, #4]
 8009f3e:	f001 f959 	bl	800b1f4 <USBD_LL_StallEP>
 8009f42:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009f44:	e040      	b.n	8009fc8 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8009f46:	6839      	ldr	r1, [r7, #0]
 8009f48:	6878      	ldr	r0, [r7, #4]
 8009f4a:	f000 fc3e 	bl	800a7ca <USBD_CtlError>
              break;
 8009f4e:	e03b      	b.n	8009fc8 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009f50:	683b      	ldr	r3, [r7, #0]
 8009f52:	885b      	ldrh	r3, [r3, #2]
 8009f54:	2b00      	cmp	r3, #0
 8009f56:	d136      	bne.n	8009fc6 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8009f58:	7bbb      	ldrb	r3, [r7, #14]
 8009f5a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009f5e:	2b00      	cmp	r3, #0
 8009f60:	d004      	beq.n	8009f6c <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8009f62:	7bbb      	ldrb	r3, [r7, #14]
 8009f64:	4619      	mov	r1, r3
 8009f66:	6878      	ldr	r0, [r7, #4]
 8009f68:	f001 f963 	bl	800b232 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8009f6c:	6878      	ldr	r0, [r7, #4]
 8009f6e:	f000 fcf7 	bl	800a960 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8009f72:	7bbb      	ldrb	r3, [r7, #14]
 8009f74:	4619      	mov	r1, r3
 8009f76:	6878      	ldr	r0, [r7, #4]
 8009f78:	f7ff fde2 	bl	8009b40 <USBD_CoreFindEP>
 8009f7c:	4603      	mov	r3, r0
 8009f7e:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009f80:	7b7b      	ldrb	r3, [r7, #13]
 8009f82:	2bff      	cmp	r3, #255	; 0xff
 8009f84:	d01f      	beq.n	8009fc6 <USBD_StdEPReq+0x1c6>
 8009f86:	7b7b      	ldrb	r3, [r7, #13]
 8009f88:	2b00      	cmp	r3, #0
 8009f8a:	d11c      	bne.n	8009fc6 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8009f8c:	7b7a      	ldrb	r2, [r7, #13]
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8009f94:	7b7a      	ldrb	r2, [r7, #13]
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	32ae      	adds	r2, #174	; 0xae
 8009f9a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009f9e:	689b      	ldr	r3, [r3, #8]
 8009fa0:	2b00      	cmp	r3, #0
 8009fa2:	d010      	beq.n	8009fc6 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8009fa4:	7b7a      	ldrb	r2, [r7, #13]
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	32ae      	adds	r2, #174	; 0xae
 8009faa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009fae:	689b      	ldr	r3, [r3, #8]
 8009fb0:	6839      	ldr	r1, [r7, #0]
 8009fb2:	6878      	ldr	r0, [r7, #4]
 8009fb4:	4798      	blx	r3
 8009fb6:	4603      	mov	r3, r0
 8009fb8:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8009fba:	e004      	b.n	8009fc6 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8009fbc:	6839      	ldr	r1, [r7, #0]
 8009fbe:	6878      	ldr	r0, [r7, #4]
 8009fc0:	f000 fc03 	bl	800a7ca <USBD_CtlError>
              break;
 8009fc4:	e000      	b.n	8009fc8 <USBD_StdEPReq+0x1c8>
              break;
 8009fc6:	bf00      	nop
          }
          break;
 8009fc8:	e0ab      	b.n	800a122 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009fd0:	b2db      	uxtb	r3, r3
 8009fd2:	2b02      	cmp	r3, #2
 8009fd4:	d002      	beq.n	8009fdc <USBD_StdEPReq+0x1dc>
 8009fd6:	2b03      	cmp	r3, #3
 8009fd8:	d032      	beq.n	800a040 <USBD_StdEPReq+0x240>
 8009fda:	e097      	b.n	800a10c <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009fdc:	7bbb      	ldrb	r3, [r7, #14]
 8009fde:	2b00      	cmp	r3, #0
 8009fe0:	d007      	beq.n	8009ff2 <USBD_StdEPReq+0x1f2>
 8009fe2:	7bbb      	ldrb	r3, [r7, #14]
 8009fe4:	2b80      	cmp	r3, #128	; 0x80
 8009fe6:	d004      	beq.n	8009ff2 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8009fe8:	6839      	ldr	r1, [r7, #0]
 8009fea:	6878      	ldr	r0, [r7, #4]
 8009fec:	f000 fbed 	bl	800a7ca <USBD_CtlError>
                break;
 8009ff0:	e091      	b.n	800a116 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009ff2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009ff6:	2b00      	cmp	r3, #0
 8009ff8:	da0b      	bge.n	800a012 <USBD_StdEPReq+0x212>
 8009ffa:	7bbb      	ldrb	r3, [r7, #14]
 8009ffc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a000:	4613      	mov	r3, r2
 800a002:	009b      	lsls	r3, r3, #2
 800a004:	4413      	add	r3, r2
 800a006:	009b      	lsls	r3, r3, #2
 800a008:	3310      	adds	r3, #16
 800a00a:	687a      	ldr	r2, [r7, #4]
 800a00c:	4413      	add	r3, r2
 800a00e:	3304      	adds	r3, #4
 800a010:	e00b      	b.n	800a02a <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a012:	7bbb      	ldrb	r3, [r7, #14]
 800a014:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a018:	4613      	mov	r3, r2
 800a01a:	009b      	lsls	r3, r3, #2
 800a01c:	4413      	add	r3, r2
 800a01e:	009b      	lsls	r3, r3, #2
 800a020:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800a024:	687a      	ldr	r2, [r7, #4]
 800a026:	4413      	add	r3, r2
 800a028:	3304      	adds	r3, #4
 800a02a:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800a02c:	68bb      	ldr	r3, [r7, #8]
 800a02e:	2200      	movs	r2, #0
 800a030:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800a032:	68bb      	ldr	r3, [r7, #8]
 800a034:	2202      	movs	r2, #2
 800a036:	4619      	mov	r1, r3
 800a038:	6878      	ldr	r0, [r7, #4]
 800a03a:	f000 fc37 	bl	800a8ac <USBD_CtlSendData>
              break;
 800a03e:	e06a      	b.n	800a116 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800a040:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a044:	2b00      	cmp	r3, #0
 800a046:	da11      	bge.n	800a06c <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800a048:	7bbb      	ldrb	r3, [r7, #14]
 800a04a:	f003 020f 	and.w	r2, r3, #15
 800a04e:	6879      	ldr	r1, [r7, #4]
 800a050:	4613      	mov	r3, r2
 800a052:	009b      	lsls	r3, r3, #2
 800a054:	4413      	add	r3, r2
 800a056:	009b      	lsls	r3, r3, #2
 800a058:	440b      	add	r3, r1
 800a05a:	3324      	adds	r3, #36	; 0x24
 800a05c:	881b      	ldrh	r3, [r3, #0]
 800a05e:	2b00      	cmp	r3, #0
 800a060:	d117      	bne.n	800a092 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800a062:	6839      	ldr	r1, [r7, #0]
 800a064:	6878      	ldr	r0, [r7, #4]
 800a066:	f000 fbb0 	bl	800a7ca <USBD_CtlError>
                  break;
 800a06a:	e054      	b.n	800a116 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800a06c:	7bbb      	ldrb	r3, [r7, #14]
 800a06e:	f003 020f 	and.w	r2, r3, #15
 800a072:	6879      	ldr	r1, [r7, #4]
 800a074:	4613      	mov	r3, r2
 800a076:	009b      	lsls	r3, r3, #2
 800a078:	4413      	add	r3, r2
 800a07a:	009b      	lsls	r3, r3, #2
 800a07c:	440b      	add	r3, r1
 800a07e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800a082:	881b      	ldrh	r3, [r3, #0]
 800a084:	2b00      	cmp	r3, #0
 800a086:	d104      	bne.n	800a092 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800a088:	6839      	ldr	r1, [r7, #0]
 800a08a:	6878      	ldr	r0, [r7, #4]
 800a08c:	f000 fb9d 	bl	800a7ca <USBD_CtlError>
                  break;
 800a090:	e041      	b.n	800a116 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a092:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a096:	2b00      	cmp	r3, #0
 800a098:	da0b      	bge.n	800a0b2 <USBD_StdEPReq+0x2b2>
 800a09a:	7bbb      	ldrb	r3, [r7, #14]
 800a09c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a0a0:	4613      	mov	r3, r2
 800a0a2:	009b      	lsls	r3, r3, #2
 800a0a4:	4413      	add	r3, r2
 800a0a6:	009b      	lsls	r3, r3, #2
 800a0a8:	3310      	adds	r3, #16
 800a0aa:	687a      	ldr	r2, [r7, #4]
 800a0ac:	4413      	add	r3, r2
 800a0ae:	3304      	adds	r3, #4
 800a0b0:	e00b      	b.n	800a0ca <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a0b2:	7bbb      	ldrb	r3, [r7, #14]
 800a0b4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a0b8:	4613      	mov	r3, r2
 800a0ba:	009b      	lsls	r3, r3, #2
 800a0bc:	4413      	add	r3, r2
 800a0be:	009b      	lsls	r3, r3, #2
 800a0c0:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800a0c4:	687a      	ldr	r2, [r7, #4]
 800a0c6:	4413      	add	r3, r2
 800a0c8:	3304      	adds	r3, #4
 800a0ca:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800a0cc:	7bbb      	ldrb	r3, [r7, #14]
 800a0ce:	2b00      	cmp	r3, #0
 800a0d0:	d002      	beq.n	800a0d8 <USBD_StdEPReq+0x2d8>
 800a0d2:	7bbb      	ldrb	r3, [r7, #14]
 800a0d4:	2b80      	cmp	r3, #128	; 0x80
 800a0d6:	d103      	bne.n	800a0e0 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800a0d8:	68bb      	ldr	r3, [r7, #8]
 800a0da:	2200      	movs	r2, #0
 800a0dc:	601a      	str	r2, [r3, #0]
 800a0de:	e00e      	b.n	800a0fe <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800a0e0:	7bbb      	ldrb	r3, [r7, #14]
 800a0e2:	4619      	mov	r1, r3
 800a0e4:	6878      	ldr	r0, [r7, #4]
 800a0e6:	f001 f8c3 	bl	800b270 <USBD_LL_IsStallEP>
 800a0ea:	4603      	mov	r3, r0
 800a0ec:	2b00      	cmp	r3, #0
 800a0ee:	d003      	beq.n	800a0f8 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800a0f0:	68bb      	ldr	r3, [r7, #8]
 800a0f2:	2201      	movs	r2, #1
 800a0f4:	601a      	str	r2, [r3, #0]
 800a0f6:	e002      	b.n	800a0fe <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800a0f8:	68bb      	ldr	r3, [r7, #8]
 800a0fa:	2200      	movs	r2, #0
 800a0fc:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800a0fe:	68bb      	ldr	r3, [r7, #8]
 800a100:	2202      	movs	r2, #2
 800a102:	4619      	mov	r1, r3
 800a104:	6878      	ldr	r0, [r7, #4]
 800a106:	f000 fbd1 	bl	800a8ac <USBD_CtlSendData>
              break;
 800a10a:	e004      	b.n	800a116 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800a10c:	6839      	ldr	r1, [r7, #0]
 800a10e:	6878      	ldr	r0, [r7, #4]
 800a110:	f000 fb5b 	bl	800a7ca <USBD_CtlError>
              break;
 800a114:	bf00      	nop
          }
          break;
 800a116:	e004      	b.n	800a122 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800a118:	6839      	ldr	r1, [r7, #0]
 800a11a:	6878      	ldr	r0, [r7, #4]
 800a11c:	f000 fb55 	bl	800a7ca <USBD_CtlError>
          break;
 800a120:	bf00      	nop
      }
      break;
 800a122:	e005      	b.n	800a130 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800a124:	6839      	ldr	r1, [r7, #0]
 800a126:	6878      	ldr	r0, [r7, #4]
 800a128:	f000 fb4f 	bl	800a7ca <USBD_CtlError>
      break;
 800a12c:	e000      	b.n	800a130 <USBD_StdEPReq+0x330>
      break;
 800a12e:	bf00      	nop
  }

  return ret;
 800a130:	7bfb      	ldrb	r3, [r7, #15]
}
 800a132:	4618      	mov	r0, r3
 800a134:	3710      	adds	r7, #16
 800a136:	46bd      	mov	sp, r7
 800a138:	bd80      	pop	{r7, pc}
	...

0800a13c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a13c:	b580      	push	{r7, lr}
 800a13e:	b084      	sub	sp, #16
 800a140:	af00      	add	r7, sp, #0
 800a142:	6078      	str	r0, [r7, #4]
 800a144:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a146:	2300      	movs	r3, #0
 800a148:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800a14a:	2300      	movs	r3, #0
 800a14c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800a14e:	2300      	movs	r3, #0
 800a150:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800a152:	683b      	ldr	r3, [r7, #0]
 800a154:	885b      	ldrh	r3, [r3, #2]
 800a156:	0a1b      	lsrs	r3, r3, #8
 800a158:	b29b      	uxth	r3, r3
 800a15a:	3b01      	subs	r3, #1
 800a15c:	2b06      	cmp	r3, #6
 800a15e:	f200 8128 	bhi.w	800a3b2 <USBD_GetDescriptor+0x276>
 800a162:	a201      	add	r2, pc, #4	; (adr r2, 800a168 <USBD_GetDescriptor+0x2c>)
 800a164:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a168:	0800a185 	.word	0x0800a185
 800a16c:	0800a19d 	.word	0x0800a19d
 800a170:	0800a1dd 	.word	0x0800a1dd
 800a174:	0800a3b3 	.word	0x0800a3b3
 800a178:	0800a3b3 	.word	0x0800a3b3
 800a17c:	0800a353 	.word	0x0800a353
 800a180:	0800a37f 	.word	0x0800a37f
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a18a:	681b      	ldr	r3, [r3, #0]
 800a18c:	687a      	ldr	r2, [r7, #4]
 800a18e:	7c12      	ldrb	r2, [r2, #16]
 800a190:	f107 0108 	add.w	r1, r7, #8
 800a194:	4610      	mov	r0, r2
 800a196:	4798      	blx	r3
 800a198:	60f8      	str	r0, [r7, #12]
      break;
 800a19a:	e112      	b.n	800a3c2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	7c1b      	ldrb	r3, [r3, #16]
 800a1a0:	2b00      	cmp	r3, #0
 800a1a2:	d10d      	bne.n	800a1c0 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a1aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a1ac:	f107 0208 	add.w	r2, r7, #8
 800a1b0:	4610      	mov	r0, r2
 800a1b2:	4798      	blx	r3
 800a1b4:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a1b6:	68fb      	ldr	r3, [r7, #12]
 800a1b8:	3301      	adds	r3, #1
 800a1ba:	2202      	movs	r2, #2
 800a1bc:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800a1be:	e100      	b.n	800a3c2 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a1c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a1c8:	f107 0208 	add.w	r2, r7, #8
 800a1cc:	4610      	mov	r0, r2
 800a1ce:	4798      	blx	r3
 800a1d0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a1d2:	68fb      	ldr	r3, [r7, #12]
 800a1d4:	3301      	adds	r3, #1
 800a1d6:	2202      	movs	r2, #2
 800a1d8:	701a      	strb	r2, [r3, #0]
      break;
 800a1da:	e0f2      	b.n	800a3c2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800a1dc:	683b      	ldr	r3, [r7, #0]
 800a1de:	885b      	ldrh	r3, [r3, #2]
 800a1e0:	b2db      	uxtb	r3, r3
 800a1e2:	2b05      	cmp	r3, #5
 800a1e4:	f200 80ac 	bhi.w	800a340 <USBD_GetDescriptor+0x204>
 800a1e8:	a201      	add	r2, pc, #4	; (adr r2, 800a1f0 <USBD_GetDescriptor+0xb4>)
 800a1ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a1ee:	bf00      	nop
 800a1f0:	0800a209 	.word	0x0800a209
 800a1f4:	0800a23d 	.word	0x0800a23d
 800a1f8:	0800a271 	.word	0x0800a271
 800a1fc:	0800a2a5 	.word	0x0800a2a5
 800a200:	0800a2d9 	.word	0x0800a2d9
 800a204:	0800a30d 	.word	0x0800a30d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a20e:	685b      	ldr	r3, [r3, #4]
 800a210:	2b00      	cmp	r3, #0
 800a212:	d00b      	beq.n	800a22c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a21a:	685b      	ldr	r3, [r3, #4]
 800a21c:	687a      	ldr	r2, [r7, #4]
 800a21e:	7c12      	ldrb	r2, [r2, #16]
 800a220:	f107 0108 	add.w	r1, r7, #8
 800a224:	4610      	mov	r0, r2
 800a226:	4798      	blx	r3
 800a228:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a22a:	e091      	b.n	800a350 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a22c:	6839      	ldr	r1, [r7, #0]
 800a22e:	6878      	ldr	r0, [r7, #4]
 800a230:	f000 facb 	bl	800a7ca <USBD_CtlError>
            err++;
 800a234:	7afb      	ldrb	r3, [r7, #11]
 800a236:	3301      	adds	r3, #1
 800a238:	72fb      	strb	r3, [r7, #11]
          break;
 800a23a:	e089      	b.n	800a350 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a242:	689b      	ldr	r3, [r3, #8]
 800a244:	2b00      	cmp	r3, #0
 800a246:	d00b      	beq.n	800a260 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a24e:	689b      	ldr	r3, [r3, #8]
 800a250:	687a      	ldr	r2, [r7, #4]
 800a252:	7c12      	ldrb	r2, [r2, #16]
 800a254:	f107 0108 	add.w	r1, r7, #8
 800a258:	4610      	mov	r0, r2
 800a25a:	4798      	blx	r3
 800a25c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a25e:	e077      	b.n	800a350 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a260:	6839      	ldr	r1, [r7, #0]
 800a262:	6878      	ldr	r0, [r7, #4]
 800a264:	f000 fab1 	bl	800a7ca <USBD_CtlError>
            err++;
 800a268:	7afb      	ldrb	r3, [r7, #11]
 800a26a:	3301      	adds	r3, #1
 800a26c:	72fb      	strb	r3, [r7, #11]
          break;
 800a26e:	e06f      	b.n	800a350 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a276:	68db      	ldr	r3, [r3, #12]
 800a278:	2b00      	cmp	r3, #0
 800a27a:	d00b      	beq.n	800a294 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a282:	68db      	ldr	r3, [r3, #12]
 800a284:	687a      	ldr	r2, [r7, #4]
 800a286:	7c12      	ldrb	r2, [r2, #16]
 800a288:	f107 0108 	add.w	r1, r7, #8
 800a28c:	4610      	mov	r0, r2
 800a28e:	4798      	blx	r3
 800a290:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a292:	e05d      	b.n	800a350 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a294:	6839      	ldr	r1, [r7, #0]
 800a296:	6878      	ldr	r0, [r7, #4]
 800a298:	f000 fa97 	bl	800a7ca <USBD_CtlError>
            err++;
 800a29c:	7afb      	ldrb	r3, [r7, #11]
 800a29e:	3301      	adds	r3, #1
 800a2a0:	72fb      	strb	r3, [r7, #11]
          break;
 800a2a2:	e055      	b.n	800a350 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a2aa:	691b      	ldr	r3, [r3, #16]
 800a2ac:	2b00      	cmp	r3, #0
 800a2ae:	d00b      	beq.n	800a2c8 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a2b6:	691b      	ldr	r3, [r3, #16]
 800a2b8:	687a      	ldr	r2, [r7, #4]
 800a2ba:	7c12      	ldrb	r2, [r2, #16]
 800a2bc:	f107 0108 	add.w	r1, r7, #8
 800a2c0:	4610      	mov	r0, r2
 800a2c2:	4798      	blx	r3
 800a2c4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a2c6:	e043      	b.n	800a350 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a2c8:	6839      	ldr	r1, [r7, #0]
 800a2ca:	6878      	ldr	r0, [r7, #4]
 800a2cc:	f000 fa7d 	bl	800a7ca <USBD_CtlError>
            err++;
 800a2d0:	7afb      	ldrb	r3, [r7, #11]
 800a2d2:	3301      	adds	r3, #1
 800a2d4:	72fb      	strb	r3, [r7, #11]
          break;
 800a2d6:	e03b      	b.n	800a350 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a2de:	695b      	ldr	r3, [r3, #20]
 800a2e0:	2b00      	cmp	r3, #0
 800a2e2:	d00b      	beq.n	800a2fc <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a2ea:	695b      	ldr	r3, [r3, #20]
 800a2ec:	687a      	ldr	r2, [r7, #4]
 800a2ee:	7c12      	ldrb	r2, [r2, #16]
 800a2f0:	f107 0108 	add.w	r1, r7, #8
 800a2f4:	4610      	mov	r0, r2
 800a2f6:	4798      	blx	r3
 800a2f8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a2fa:	e029      	b.n	800a350 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a2fc:	6839      	ldr	r1, [r7, #0]
 800a2fe:	6878      	ldr	r0, [r7, #4]
 800a300:	f000 fa63 	bl	800a7ca <USBD_CtlError>
            err++;
 800a304:	7afb      	ldrb	r3, [r7, #11]
 800a306:	3301      	adds	r3, #1
 800a308:	72fb      	strb	r3, [r7, #11]
          break;
 800a30a:	e021      	b.n	800a350 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a312:	699b      	ldr	r3, [r3, #24]
 800a314:	2b00      	cmp	r3, #0
 800a316:	d00b      	beq.n	800a330 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a31e:	699b      	ldr	r3, [r3, #24]
 800a320:	687a      	ldr	r2, [r7, #4]
 800a322:	7c12      	ldrb	r2, [r2, #16]
 800a324:	f107 0108 	add.w	r1, r7, #8
 800a328:	4610      	mov	r0, r2
 800a32a:	4798      	blx	r3
 800a32c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a32e:	e00f      	b.n	800a350 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a330:	6839      	ldr	r1, [r7, #0]
 800a332:	6878      	ldr	r0, [r7, #4]
 800a334:	f000 fa49 	bl	800a7ca <USBD_CtlError>
            err++;
 800a338:	7afb      	ldrb	r3, [r7, #11]
 800a33a:	3301      	adds	r3, #1
 800a33c:	72fb      	strb	r3, [r7, #11]
          break;
 800a33e:	e007      	b.n	800a350 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800a340:	6839      	ldr	r1, [r7, #0]
 800a342:	6878      	ldr	r0, [r7, #4]
 800a344:	f000 fa41 	bl	800a7ca <USBD_CtlError>
          err++;
 800a348:	7afb      	ldrb	r3, [r7, #11]
 800a34a:	3301      	adds	r3, #1
 800a34c:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800a34e:	bf00      	nop
      }
      break;
 800a350:	e037      	b.n	800a3c2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	7c1b      	ldrb	r3, [r3, #16]
 800a356:	2b00      	cmp	r3, #0
 800a358:	d109      	bne.n	800a36e <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a360:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a362:	f107 0208 	add.w	r2, r7, #8
 800a366:	4610      	mov	r0, r2
 800a368:	4798      	blx	r3
 800a36a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a36c:	e029      	b.n	800a3c2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800a36e:	6839      	ldr	r1, [r7, #0]
 800a370:	6878      	ldr	r0, [r7, #4]
 800a372:	f000 fa2a 	bl	800a7ca <USBD_CtlError>
        err++;
 800a376:	7afb      	ldrb	r3, [r7, #11]
 800a378:	3301      	adds	r3, #1
 800a37a:	72fb      	strb	r3, [r7, #11]
      break;
 800a37c:	e021      	b.n	800a3c2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	7c1b      	ldrb	r3, [r3, #16]
 800a382:	2b00      	cmp	r3, #0
 800a384:	d10d      	bne.n	800a3a2 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a38c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a38e:	f107 0208 	add.w	r2, r7, #8
 800a392:	4610      	mov	r0, r2
 800a394:	4798      	blx	r3
 800a396:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800a398:	68fb      	ldr	r3, [r7, #12]
 800a39a:	3301      	adds	r3, #1
 800a39c:	2207      	movs	r2, #7
 800a39e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a3a0:	e00f      	b.n	800a3c2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800a3a2:	6839      	ldr	r1, [r7, #0]
 800a3a4:	6878      	ldr	r0, [r7, #4]
 800a3a6:	f000 fa10 	bl	800a7ca <USBD_CtlError>
        err++;
 800a3aa:	7afb      	ldrb	r3, [r7, #11]
 800a3ac:	3301      	adds	r3, #1
 800a3ae:	72fb      	strb	r3, [r7, #11]
      break;
 800a3b0:	e007      	b.n	800a3c2 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800a3b2:	6839      	ldr	r1, [r7, #0]
 800a3b4:	6878      	ldr	r0, [r7, #4]
 800a3b6:	f000 fa08 	bl	800a7ca <USBD_CtlError>
      err++;
 800a3ba:	7afb      	ldrb	r3, [r7, #11]
 800a3bc:	3301      	adds	r3, #1
 800a3be:	72fb      	strb	r3, [r7, #11]
      break;
 800a3c0:	bf00      	nop
  }

  if (err != 0U)
 800a3c2:	7afb      	ldrb	r3, [r7, #11]
 800a3c4:	2b00      	cmp	r3, #0
 800a3c6:	d11e      	bne.n	800a406 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800a3c8:	683b      	ldr	r3, [r7, #0]
 800a3ca:	88db      	ldrh	r3, [r3, #6]
 800a3cc:	2b00      	cmp	r3, #0
 800a3ce:	d016      	beq.n	800a3fe <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800a3d0:	893b      	ldrh	r3, [r7, #8]
 800a3d2:	2b00      	cmp	r3, #0
 800a3d4:	d00e      	beq.n	800a3f4 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800a3d6:	683b      	ldr	r3, [r7, #0]
 800a3d8:	88da      	ldrh	r2, [r3, #6]
 800a3da:	893b      	ldrh	r3, [r7, #8]
 800a3dc:	4293      	cmp	r3, r2
 800a3de:	bf28      	it	cs
 800a3e0:	4613      	movcs	r3, r2
 800a3e2:	b29b      	uxth	r3, r3
 800a3e4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800a3e6:	893b      	ldrh	r3, [r7, #8]
 800a3e8:	461a      	mov	r2, r3
 800a3ea:	68f9      	ldr	r1, [r7, #12]
 800a3ec:	6878      	ldr	r0, [r7, #4]
 800a3ee:	f000 fa5d 	bl	800a8ac <USBD_CtlSendData>
 800a3f2:	e009      	b.n	800a408 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800a3f4:	6839      	ldr	r1, [r7, #0]
 800a3f6:	6878      	ldr	r0, [r7, #4]
 800a3f8:	f000 f9e7 	bl	800a7ca <USBD_CtlError>
 800a3fc:	e004      	b.n	800a408 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800a3fe:	6878      	ldr	r0, [r7, #4]
 800a400:	f000 faae 	bl	800a960 <USBD_CtlSendStatus>
 800a404:	e000      	b.n	800a408 <USBD_GetDescriptor+0x2cc>
    return;
 800a406:	bf00      	nop
  }
}
 800a408:	3710      	adds	r7, #16
 800a40a:	46bd      	mov	sp, r7
 800a40c:	bd80      	pop	{r7, pc}
 800a40e:	bf00      	nop

0800a410 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a410:	b580      	push	{r7, lr}
 800a412:	b084      	sub	sp, #16
 800a414:	af00      	add	r7, sp, #0
 800a416:	6078      	str	r0, [r7, #4]
 800a418:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800a41a:	683b      	ldr	r3, [r7, #0]
 800a41c:	889b      	ldrh	r3, [r3, #4]
 800a41e:	2b00      	cmp	r3, #0
 800a420:	d131      	bne.n	800a486 <USBD_SetAddress+0x76>
 800a422:	683b      	ldr	r3, [r7, #0]
 800a424:	88db      	ldrh	r3, [r3, #6]
 800a426:	2b00      	cmp	r3, #0
 800a428:	d12d      	bne.n	800a486 <USBD_SetAddress+0x76>
 800a42a:	683b      	ldr	r3, [r7, #0]
 800a42c:	885b      	ldrh	r3, [r3, #2]
 800a42e:	2b7f      	cmp	r3, #127	; 0x7f
 800a430:	d829      	bhi.n	800a486 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800a432:	683b      	ldr	r3, [r7, #0]
 800a434:	885b      	ldrh	r3, [r3, #2]
 800a436:	b2db      	uxtb	r3, r3
 800a438:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a43c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a444:	b2db      	uxtb	r3, r3
 800a446:	2b03      	cmp	r3, #3
 800a448:	d104      	bne.n	800a454 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800a44a:	6839      	ldr	r1, [r7, #0]
 800a44c:	6878      	ldr	r0, [r7, #4]
 800a44e:	f000 f9bc 	bl	800a7ca <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a452:	e01d      	b.n	800a490 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	7bfa      	ldrb	r2, [r7, #15]
 800a458:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800a45c:	7bfb      	ldrb	r3, [r7, #15]
 800a45e:	4619      	mov	r1, r3
 800a460:	6878      	ldr	r0, [r7, #4]
 800a462:	f000 ff31 	bl	800b2c8 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800a466:	6878      	ldr	r0, [r7, #4]
 800a468:	f000 fa7a 	bl	800a960 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800a46c:	7bfb      	ldrb	r3, [r7, #15]
 800a46e:	2b00      	cmp	r3, #0
 800a470:	d004      	beq.n	800a47c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	2202      	movs	r2, #2
 800a476:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a47a:	e009      	b.n	800a490 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	2201      	movs	r2, #1
 800a480:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a484:	e004      	b.n	800a490 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800a486:	6839      	ldr	r1, [r7, #0]
 800a488:	6878      	ldr	r0, [r7, #4]
 800a48a:	f000 f99e 	bl	800a7ca <USBD_CtlError>
  }
}
 800a48e:	bf00      	nop
 800a490:	bf00      	nop
 800a492:	3710      	adds	r7, #16
 800a494:	46bd      	mov	sp, r7
 800a496:	bd80      	pop	{r7, pc}

0800a498 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a498:	b580      	push	{r7, lr}
 800a49a:	b084      	sub	sp, #16
 800a49c:	af00      	add	r7, sp, #0
 800a49e:	6078      	str	r0, [r7, #4]
 800a4a0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a4a2:	2300      	movs	r3, #0
 800a4a4:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800a4a6:	683b      	ldr	r3, [r7, #0]
 800a4a8:	885b      	ldrh	r3, [r3, #2]
 800a4aa:	b2da      	uxtb	r2, r3
 800a4ac:	4b4e      	ldr	r3, [pc, #312]	; (800a5e8 <USBD_SetConfig+0x150>)
 800a4ae:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800a4b0:	4b4d      	ldr	r3, [pc, #308]	; (800a5e8 <USBD_SetConfig+0x150>)
 800a4b2:	781b      	ldrb	r3, [r3, #0]
 800a4b4:	2b01      	cmp	r3, #1
 800a4b6:	d905      	bls.n	800a4c4 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800a4b8:	6839      	ldr	r1, [r7, #0]
 800a4ba:	6878      	ldr	r0, [r7, #4]
 800a4bc:	f000 f985 	bl	800a7ca <USBD_CtlError>
    return USBD_FAIL;
 800a4c0:	2303      	movs	r3, #3
 800a4c2:	e08c      	b.n	800a5de <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a4ca:	b2db      	uxtb	r3, r3
 800a4cc:	2b02      	cmp	r3, #2
 800a4ce:	d002      	beq.n	800a4d6 <USBD_SetConfig+0x3e>
 800a4d0:	2b03      	cmp	r3, #3
 800a4d2:	d029      	beq.n	800a528 <USBD_SetConfig+0x90>
 800a4d4:	e075      	b.n	800a5c2 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800a4d6:	4b44      	ldr	r3, [pc, #272]	; (800a5e8 <USBD_SetConfig+0x150>)
 800a4d8:	781b      	ldrb	r3, [r3, #0]
 800a4da:	2b00      	cmp	r3, #0
 800a4dc:	d020      	beq.n	800a520 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800a4de:	4b42      	ldr	r3, [pc, #264]	; (800a5e8 <USBD_SetConfig+0x150>)
 800a4e0:	781b      	ldrb	r3, [r3, #0]
 800a4e2:	461a      	mov	r2, r3
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800a4e8:	4b3f      	ldr	r3, [pc, #252]	; (800a5e8 <USBD_SetConfig+0x150>)
 800a4ea:	781b      	ldrb	r3, [r3, #0]
 800a4ec:	4619      	mov	r1, r3
 800a4ee:	6878      	ldr	r0, [r7, #4]
 800a4f0:	f7fe ffe7 	bl	80094c2 <USBD_SetClassConfig>
 800a4f4:	4603      	mov	r3, r0
 800a4f6:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800a4f8:	7bfb      	ldrb	r3, [r7, #15]
 800a4fa:	2b00      	cmp	r3, #0
 800a4fc:	d008      	beq.n	800a510 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800a4fe:	6839      	ldr	r1, [r7, #0]
 800a500:	6878      	ldr	r0, [r7, #4]
 800a502:	f000 f962 	bl	800a7ca <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	2202      	movs	r2, #2
 800a50a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800a50e:	e065      	b.n	800a5dc <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800a510:	6878      	ldr	r0, [r7, #4]
 800a512:	f000 fa25 	bl	800a960 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	2203      	movs	r2, #3
 800a51a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800a51e:	e05d      	b.n	800a5dc <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800a520:	6878      	ldr	r0, [r7, #4]
 800a522:	f000 fa1d 	bl	800a960 <USBD_CtlSendStatus>
      break;
 800a526:	e059      	b.n	800a5dc <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800a528:	4b2f      	ldr	r3, [pc, #188]	; (800a5e8 <USBD_SetConfig+0x150>)
 800a52a:	781b      	ldrb	r3, [r3, #0]
 800a52c:	2b00      	cmp	r3, #0
 800a52e:	d112      	bne.n	800a556 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	2202      	movs	r2, #2
 800a534:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800a538:	4b2b      	ldr	r3, [pc, #172]	; (800a5e8 <USBD_SetConfig+0x150>)
 800a53a:	781b      	ldrb	r3, [r3, #0]
 800a53c:	461a      	mov	r2, r3
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a542:	4b29      	ldr	r3, [pc, #164]	; (800a5e8 <USBD_SetConfig+0x150>)
 800a544:	781b      	ldrb	r3, [r3, #0]
 800a546:	4619      	mov	r1, r3
 800a548:	6878      	ldr	r0, [r7, #4]
 800a54a:	f7fe ffd6 	bl	80094fa <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800a54e:	6878      	ldr	r0, [r7, #4]
 800a550:	f000 fa06 	bl	800a960 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800a554:	e042      	b.n	800a5dc <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800a556:	4b24      	ldr	r3, [pc, #144]	; (800a5e8 <USBD_SetConfig+0x150>)
 800a558:	781b      	ldrb	r3, [r3, #0]
 800a55a:	461a      	mov	r2, r3
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	685b      	ldr	r3, [r3, #4]
 800a560:	429a      	cmp	r2, r3
 800a562:	d02a      	beq.n	800a5ba <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	685b      	ldr	r3, [r3, #4]
 800a568:	b2db      	uxtb	r3, r3
 800a56a:	4619      	mov	r1, r3
 800a56c:	6878      	ldr	r0, [r7, #4]
 800a56e:	f7fe ffc4 	bl	80094fa <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800a572:	4b1d      	ldr	r3, [pc, #116]	; (800a5e8 <USBD_SetConfig+0x150>)
 800a574:	781b      	ldrb	r3, [r3, #0]
 800a576:	461a      	mov	r2, r3
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800a57c:	4b1a      	ldr	r3, [pc, #104]	; (800a5e8 <USBD_SetConfig+0x150>)
 800a57e:	781b      	ldrb	r3, [r3, #0]
 800a580:	4619      	mov	r1, r3
 800a582:	6878      	ldr	r0, [r7, #4]
 800a584:	f7fe ff9d 	bl	80094c2 <USBD_SetClassConfig>
 800a588:	4603      	mov	r3, r0
 800a58a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800a58c:	7bfb      	ldrb	r3, [r7, #15]
 800a58e:	2b00      	cmp	r3, #0
 800a590:	d00f      	beq.n	800a5b2 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800a592:	6839      	ldr	r1, [r7, #0]
 800a594:	6878      	ldr	r0, [r7, #4]
 800a596:	f000 f918 	bl	800a7ca <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	685b      	ldr	r3, [r3, #4]
 800a59e:	b2db      	uxtb	r3, r3
 800a5a0:	4619      	mov	r1, r3
 800a5a2:	6878      	ldr	r0, [r7, #4]
 800a5a4:	f7fe ffa9 	bl	80094fa <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	2202      	movs	r2, #2
 800a5ac:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800a5b0:	e014      	b.n	800a5dc <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800a5b2:	6878      	ldr	r0, [r7, #4]
 800a5b4:	f000 f9d4 	bl	800a960 <USBD_CtlSendStatus>
      break;
 800a5b8:	e010      	b.n	800a5dc <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800a5ba:	6878      	ldr	r0, [r7, #4]
 800a5bc:	f000 f9d0 	bl	800a960 <USBD_CtlSendStatus>
      break;
 800a5c0:	e00c      	b.n	800a5dc <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800a5c2:	6839      	ldr	r1, [r7, #0]
 800a5c4:	6878      	ldr	r0, [r7, #4]
 800a5c6:	f000 f900 	bl	800a7ca <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a5ca:	4b07      	ldr	r3, [pc, #28]	; (800a5e8 <USBD_SetConfig+0x150>)
 800a5cc:	781b      	ldrb	r3, [r3, #0]
 800a5ce:	4619      	mov	r1, r3
 800a5d0:	6878      	ldr	r0, [r7, #4]
 800a5d2:	f7fe ff92 	bl	80094fa <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800a5d6:	2303      	movs	r3, #3
 800a5d8:	73fb      	strb	r3, [r7, #15]
      break;
 800a5da:	bf00      	nop
  }

  return ret;
 800a5dc:	7bfb      	ldrb	r3, [r7, #15]
}
 800a5de:	4618      	mov	r0, r3
 800a5e0:	3710      	adds	r7, #16
 800a5e2:	46bd      	mov	sp, r7
 800a5e4:	bd80      	pop	{r7, pc}
 800a5e6:	bf00      	nop
 800a5e8:	20000838 	.word	0x20000838

0800a5ec <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a5ec:	b580      	push	{r7, lr}
 800a5ee:	b082      	sub	sp, #8
 800a5f0:	af00      	add	r7, sp, #0
 800a5f2:	6078      	str	r0, [r7, #4]
 800a5f4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800a5f6:	683b      	ldr	r3, [r7, #0]
 800a5f8:	88db      	ldrh	r3, [r3, #6]
 800a5fa:	2b01      	cmp	r3, #1
 800a5fc:	d004      	beq.n	800a608 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800a5fe:	6839      	ldr	r1, [r7, #0]
 800a600:	6878      	ldr	r0, [r7, #4]
 800a602:	f000 f8e2 	bl	800a7ca <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800a606:	e023      	b.n	800a650 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a60e:	b2db      	uxtb	r3, r3
 800a610:	2b02      	cmp	r3, #2
 800a612:	dc02      	bgt.n	800a61a <USBD_GetConfig+0x2e>
 800a614:	2b00      	cmp	r3, #0
 800a616:	dc03      	bgt.n	800a620 <USBD_GetConfig+0x34>
 800a618:	e015      	b.n	800a646 <USBD_GetConfig+0x5a>
 800a61a:	2b03      	cmp	r3, #3
 800a61c:	d00b      	beq.n	800a636 <USBD_GetConfig+0x4a>
 800a61e:	e012      	b.n	800a646 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	2200      	movs	r2, #0
 800a624:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	3308      	adds	r3, #8
 800a62a:	2201      	movs	r2, #1
 800a62c:	4619      	mov	r1, r3
 800a62e:	6878      	ldr	r0, [r7, #4]
 800a630:	f000 f93c 	bl	800a8ac <USBD_CtlSendData>
        break;
 800a634:	e00c      	b.n	800a650 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	3304      	adds	r3, #4
 800a63a:	2201      	movs	r2, #1
 800a63c:	4619      	mov	r1, r3
 800a63e:	6878      	ldr	r0, [r7, #4]
 800a640:	f000 f934 	bl	800a8ac <USBD_CtlSendData>
        break;
 800a644:	e004      	b.n	800a650 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800a646:	6839      	ldr	r1, [r7, #0]
 800a648:	6878      	ldr	r0, [r7, #4]
 800a64a:	f000 f8be 	bl	800a7ca <USBD_CtlError>
        break;
 800a64e:	bf00      	nop
}
 800a650:	bf00      	nop
 800a652:	3708      	adds	r7, #8
 800a654:	46bd      	mov	sp, r7
 800a656:	bd80      	pop	{r7, pc}

0800a658 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a658:	b580      	push	{r7, lr}
 800a65a:	b082      	sub	sp, #8
 800a65c:	af00      	add	r7, sp, #0
 800a65e:	6078      	str	r0, [r7, #4]
 800a660:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a668:	b2db      	uxtb	r3, r3
 800a66a:	3b01      	subs	r3, #1
 800a66c:	2b02      	cmp	r3, #2
 800a66e:	d81e      	bhi.n	800a6ae <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800a670:	683b      	ldr	r3, [r7, #0]
 800a672:	88db      	ldrh	r3, [r3, #6]
 800a674:	2b02      	cmp	r3, #2
 800a676:	d004      	beq.n	800a682 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800a678:	6839      	ldr	r1, [r7, #0]
 800a67a:	6878      	ldr	r0, [r7, #4]
 800a67c:	f000 f8a5 	bl	800a7ca <USBD_CtlError>
        break;
 800a680:	e01a      	b.n	800a6b8 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	2201      	movs	r2, #1
 800a686:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800a68e:	2b00      	cmp	r3, #0
 800a690:	d005      	beq.n	800a69e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	68db      	ldr	r3, [r3, #12]
 800a696:	f043 0202 	orr.w	r2, r3, #2
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	330c      	adds	r3, #12
 800a6a2:	2202      	movs	r2, #2
 800a6a4:	4619      	mov	r1, r3
 800a6a6:	6878      	ldr	r0, [r7, #4]
 800a6a8:	f000 f900 	bl	800a8ac <USBD_CtlSendData>
      break;
 800a6ac:	e004      	b.n	800a6b8 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800a6ae:	6839      	ldr	r1, [r7, #0]
 800a6b0:	6878      	ldr	r0, [r7, #4]
 800a6b2:	f000 f88a 	bl	800a7ca <USBD_CtlError>
      break;
 800a6b6:	bf00      	nop
  }
}
 800a6b8:	bf00      	nop
 800a6ba:	3708      	adds	r7, #8
 800a6bc:	46bd      	mov	sp, r7
 800a6be:	bd80      	pop	{r7, pc}

0800a6c0 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a6c0:	b580      	push	{r7, lr}
 800a6c2:	b082      	sub	sp, #8
 800a6c4:	af00      	add	r7, sp, #0
 800a6c6:	6078      	str	r0, [r7, #4]
 800a6c8:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a6ca:	683b      	ldr	r3, [r7, #0]
 800a6cc:	885b      	ldrh	r3, [r3, #2]
 800a6ce:	2b01      	cmp	r3, #1
 800a6d0:	d107      	bne.n	800a6e2 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	2201      	movs	r2, #1
 800a6d6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800a6da:	6878      	ldr	r0, [r7, #4]
 800a6dc:	f000 f940 	bl	800a960 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800a6e0:	e013      	b.n	800a70a <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800a6e2:	683b      	ldr	r3, [r7, #0]
 800a6e4:	885b      	ldrh	r3, [r3, #2]
 800a6e6:	2b02      	cmp	r3, #2
 800a6e8:	d10b      	bne.n	800a702 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 800a6ea:	683b      	ldr	r3, [r7, #0]
 800a6ec:	889b      	ldrh	r3, [r3, #4]
 800a6ee:	0a1b      	lsrs	r3, r3, #8
 800a6f0:	b29b      	uxth	r3, r3
 800a6f2:	b2da      	uxtb	r2, r3
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800a6fa:	6878      	ldr	r0, [r7, #4]
 800a6fc:	f000 f930 	bl	800a960 <USBD_CtlSendStatus>
}
 800a700:	e003      	b.n	800a70a <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800a702:	6839      	ldr	r1, [r7, #0]
 800a704:	6878      	ldr	r0, [r7, #4]
 800a706:	f000 f860 	bl	800a7ca <USBD_CtlError>
}
 800a70a:	bf00      	nop
 800a70c:	3708      	adds	r7, #8
 800a70e:	46bd      	mov	sp, r7
 800a710:	bd80      	pop	{r7, pc}

0800a712 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a712:	b580      	push	{r7, lr}
 800a714:	b082      	sub	sp, #8
 800a716:	af00      	add	r7, sp, #0
 800a718:	6078      	str	r0, [r7, #4]
 800a71a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a722:	b2db      	uxtb	r3, r3
 800a724:	3b01      	subs	r3, #1
 800a726:	2b02      	cmp	r3, #2
 800a728:	d80b      	bhi.n	800a742 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a72a:	683b      	ldr	r3, [r7, #0]
 800a72c:	885b      	ldrh	r3, [r3, #2]
 800a72e:	2b01      	cmp	r3, #1
 800a730:	d10c      	bne.n	800a74c <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	2200      	movs	r2, #0
 800a736:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800a73a:	6878      	ldr	r0, [r7, #4]
 800a73c:	f000 f910 	bl	800a960 <USBD_CtlSendStatus>
      }
      break;
 800a740:	e004      	b.n	800a74c <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800a742:	6839      	ldr	r1, [r7, #0]
 800a744:	6878      	ldr	r0, [r7, #4]
 800a746:	f000 f840 	bl	800a7ca <USBD_CtlError>
      break;
 800a74a:	e000      	b.n	800a74e <USBD_ClrFeature+0x3c>
      break;
 800a74c:	bf00      	nop
  }
}
 800a74e:	bf00      	nop
 800a750:	3708      	adds	r7, #8
 800a752:	46bd      	mov	sp, r7
 800a754:	bd80      	pop	{r7, pc}

0800a756 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800a756:	b580      	push	{r7, lr}
 800a758:	b084      	sub	sp, #16
 800a75a:	af00      	add	r7, sp, #0
 800a75c:	6078      	str	r0, [r7, #4]
 800a75e:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800a760:	683b      	ldr	r3, [r7, #0]
 800a762:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800a764:	68fb      	ldr	r3, [r7, #12]
 800a766:	781a      	ldrb	r2, [r3, #0]
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800a76c:	68fb      	ldr	r3, [r7, #12]
 800a76e:	3301      	adds	r3, #1
 800a770:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800a772:	68fb      	ldr	r3, [r7, #12]
 800a774:	781a      	ldrb	r2, [r3, #0]
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800a77a:	68fb      	ldr	r3, [r7, #12]
 800a77c:	3301      	adds	r3, #1
 800a77e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800a780:	68f8      	ldr	r0, [r7, #12]
 800a782:	f7ff fa41 	bl	8009c08 <SWAPBYTE>
 800a786:	4603      	mov	r3, r0
 800a788:	461a      	mov	r2, r3
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800a78e:	68fb      	ldr	r3, [r7, #12]
 800a790:	3301      	adds	r3, #1
 800a792:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a794:	68fb      	ldr	r3, [r7, #12]
 800a796:	3301      	adds	r3, #1
 800a798:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800a79a:	68f8      	ldr	r0, [r7, #12]
 800a79c:	f7ff fa34 	bl	8009c08 <SWAPBYTE>
 800a7a0:	4603      	mov	r3, r0
 800a7a2:	461a      	mov	r2, r3
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800a7a8:	68fb      	ldr	r3, [r7, #12]
 800a7aa:	3301      	adds	r3, #1
 800a7ac:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a7ae:	68fb      	ldr	r3, [r7, #12]
 800a7b0:	3301      	adds	r3, #1
 800a7b2:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800a7b4:	68f8      	ldr	r0, [r7, #12]
 800a7b6:	f7ff fa27 	bl	8009c08 <SWAPBYTE>
 800a7ba:	4603      	mov	r3, r0
 800a7bc:	461a      	mov	r2, r3
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	80da      	strh	r2, [r3, #6]
}
 800a7c2:	bf00      	nop
 800a7c4:	3710      	adds	r7, #16
 800a7c6:	46bd      	mov	sp, r7
 800a7c8:	bd80      	pop	{r7, pc}

0800a7ca <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a7ca:	b580      	push	{r7, lr}
 800a7cc:	b082      	sub	sp, #8
 800a7ce:	af00      	add	r7, sp, #0
 800a7d0:	6078      	str	r0, [r7, #4]
 800a7d2:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800a7d4:	2180      	movs	r1, #128	; 0x80
 800a7d6:	6878      	ldr	r0, [r7, #4]
 800a7d8:	f000 fd0c 	bl	800b1f4 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800a7dc:	2100      	movs	r1, #0
 800a7de:	6878      	ldr	r0, [r7, #4]
 800a7e0:	f000 fd08 	bl	800b1f4 <USBD_LL_StallEP>
}
 800a7e4:	bf00      	nop
 800a7e6:	3708      	adds	r7, #8
 800a7e8:	46bd      	mov	sp, r7
 800a7ea:	bd80      	pop	{r7, pc}

0800a7ec <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800a7ec:	b580      	push	{r7, lr}
 800a7ee:	b086      	sub	sp, #24
 800a7f0:	af00      	add	r7, sp, #0
 800a7f2:	60f8      	str	r0, [r7, #12]
 800a7f4:	60b9      	str	r1, [r7, #8]
 800a7f6:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800a7f8:	2300      	movs	r3, #0
 800a7fa:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800a7fc:	68fb      	ldr	r3, [r7, #12]
 800a7fe:	2b00      	cmp	r3, #0
 800a800:	d036      	beq.n	800a870 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800a802:	68fb      	ldr	r3, [r7, #12]
 800a804:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800a806:	6938      	ldr	r0, [r7, #16]
 800a808:	f000 f836 	bl	800a878 <USBD_GetLen>
 800a80c:	4603      	mov	r3, r0
 800a80e:	3301      	adds	r3, #1
 800a810:	b29b      	uxth	r3, r3
 800a812:	005b      	lsls	r3, r3, #1
 800a814:	b29a      	uxth	r2, r3
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800a81a:	7dfb      	ldrb	r3, [r7, #23]
 800a81c:	68ba      	ldr	r2, [r7, #8]
 800a81e:	4413      	add	r3, r2
 800a820:	687a      	ldr	r2, [r7, #4]
 800a822:	7812      	ldrb	r2, [r2, #0]
 800a824:	701a      	strb	r2, [r3, #0]
  idx++;
 800a826:	7dfb      	ldrb	r3, [r7, #23]
 800a828:	3301      	adds	r3, #1
 800a82a:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800a82c:	7dfb      	ldrb	r3, [r7, #23]
 800a82e:	68ba      	ldr	r2, [r7, #8]
 800a830:	4413      	add	r3, r2
 800a832:	2203      	movs	r2, #3
 800a834:	701a      	strb	r2, [r3, #0]
  idx++;
 800a836:	7dfb      	ldrb	r3, [r7, #23]
 800a838:	3301      	adds	r3, #1
 800a83a:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800a83c:	e013      	b.n	800a866 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800a83e:	7dfb      	ldrb	r3, [r7, #23]
 800a840:	68ba      	ldr	r2, [r7, #8]
 800a842:	4413      	add	r3, r2
 800a844:	693a      	ldr	r2, [r7, #16]
 800a846:	7812      	ldrb	r2, [r2, #0]
 800a848:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800a84a:	693b      	ldr	r3, [r7, #16]
 800a84c:	3301      	adds	r3, #1
 800a84e:	613b      	str	r3, [r7, #16]
    idx++;
 800a850:	7dfb      	ldrb	r3, [r7, #23]
 800a852:	3301      	adds	r3, #1
 800a854:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800a856:	7dfb      	ldrb	r3, [r7, #23]
 800a858:	68ba      	ldr	r2, [r7, #8]
 800a85a:	4413      	add	r3, r2
 800a85c:	2200      	movs	r2, #0
 800a85e:	701a      	strb	r2, [r3, #0]
    idx++;
 800a860:	7dfb      	ldrb	r3, [r7, #23]
 800a862:	3301      	adds	r3, #1
 800a864:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800a866:	693b      	ldr	r3, [r7, #16]
 800a868:	781b      	ldrb	r3, [r3, #0]
 800a86a:	2b00      	cmp	r3, #0
 800a86c:	d1e7      	bne.n	800a83e <USBD_GetString+0x52>
 800a86e:	e000      	b.n	800a872 <USBD_GetString+0x86>
    return;
 800a870:	bf00      	nop
  }
}
 800a872:	3718      	adds	r7, #24
 800a874:	46bd      	mov	sp, r7
 800a876:	bd80      	pop	{r7, pc}

0800a878 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800a878:	b480      	push	{r7}
 800a87a:	b085      	sub	sp, #20
 800a87c:	af00      	add	r7, sp, #0
 800a87e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800a880:	2300      	movs	r3, #0
 800a882:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800a888:	e005      	b.n	800a896 <USBD_GetLen+0x1e>
  {
    len++;
 800a88a:	7bfb      	ldrb	r3, [r7, #15]
 800a88c:	3301      	adds	r3, #1
 800a88e:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800a890:	68bb      	ldr	r3, [r7, #8]
 800a892:	3301      	adds	r3, #1
 800a894:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800a896:	68bb      	ldr	r3, [r7, #8]
 800a898:	781b      	ldrb	r3, [r3, #0]
 800a89a:	2b00      	cmp	r3, #0
 800a89c:	d1f5      	bne.n	800a88a <USBD_GetLen+0x12>
  }

  return len;
 800a89e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a8a0:	4618      	mov	r0, r3
 800a8a2:	3714      	adds	r7, #20
 800a8a4:	46bd      	mov	sp, r7
 800a8a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8aa:	4770      	bx	lr

0800a8ac <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800a8ac:	b580      	push	{r7, lr}
 800a8ae:	b084      	sub	sp, #16
 800a8b0:	af00      	add	r7, sp, #0
 800a8b2:	60f8      	str	r0, [r7, #12]
 800a8b4:	60b9      	str	r1, [r7, #8]
 800a8b6:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800a8b8:	68fb      	ldr	r3, [r7, #12]
 800a8ba:	2202      	movs	r2, #2
 800a8bc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800a8c0:	68fb      	ldr	r3, [r7, #12]
 800a8c2:	687a      	ldr	r2, [r7, #4]
 800a8c4:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800a8c6:	68fb      	ldr	r3, [r7, #12]
 800a8c8:	687a      	ldr	r2, [r7, #4]
 800a8ca:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	68ba      	ldr	r2, [r7, #8]
 800a8d0:	2100      	movs	r1, #0
 800a8d2:	68f8      	ldr	r0, [r7, #12]
 800a8d4:	f000 fd17 	bl	800b306 <USBD_LL_Transmit>

  return USBD_OK;
 800a8d8:	2300      	movs	r3, #0
}
 800a8da:	4618      	mov	r0, r3
 800a8dc:	3710      	adds	r7, #16
 800a8de:	46bd      	mov	sp, r7
 800a8e0:	bd80      	pop	{r7, pc}

0800a8e2 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800a8e2:	b580      	push	{r7, lr}
 800a8e4:	b084      	sub	sp, #16
 800a8e6:	af00      	add	r7, sp, #0
 800a8e8:	60f8      	str	r0, [r7, #12]
 800a8ea:	60b9      	str	r1, [r7, #8]
 800a8ec:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	68ba      	ldr	r2, [r7, #8]
 800a8f2:	2100      	movs	r1, #0
 800a8f4:	68f8      	ldr	r0, [r7, #12]
 800a8f6:	f000 fd06 	bl	800b306 <USBD_LL_Transmit>

  return USBD_OK;
 800a8fa:	2300      	movs	r3, #0
}
 800a8fc:	4618      	mov	r0, r3
 800a8fe:	3710      	adds	r7, #16
 800a900:	46bd      	mov	sp, r7
 800a902:	bd80      	pop	{r7, pc}

0800a904 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800a904:	b580      	push	{r7, lr}
 800a906:	b084      	sub	sp, #16
 800a908:	af00      	add	r7, sp, #0
 800a90a:	60f8      	str	r0, [r7, #12]
 800a90c:	60b9      	str	r1, [r7, #8]
 800a90e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800a910:	68fb      	ldr	r3, [r7, #12]
 800a912:	2203      	movs	r2, #3
 800a914:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800a918:	68fb      	ldr	r3, [r7, #12]
 800a91a:	687a      	ldr	r2, [r7, #4]
 800a91c:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800a920:	68fb      	ldr	r3, [r7, #12]
 800a922:	687a      	ldr	r2, [r7, #4]
 800a924:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	68ba      	ldr	r2, [r7, #8]
 800a92c:	2100      	movs	r1, #0
 800a92e:	68f8      	ldr	r0, [r7, #12]
 800a930:	f000 fd0a 	bl	800b348 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a934:	2300      	movs	r3, #0
}
 800a936:	4618      	mov	r0, r3
 800a938:	3710      	adds	r7, #16
 800a93a:	46bd      	mov	sp, r7
 800a93c:	bd80      	pop	{r7, pc}

0800a93e <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800a93e:	b580      	push	{r7, lr}
 800a940:	b084      	sub	sp, #16
 800a942:	af00      	add	r7, sp, #0
 800a944:	60f8      	str	r0, [r7, #12]
 800a946:	60b9      	str	r1, [r7, #8]
 800a948:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	68ba      	ldr	r2, [r7, #8]
 800a94e:	2100      	movs	r1, #0
 800a950:	68f8      	ldr	r0, [r7, #12]
 800a952:	f000 fcf9 	bl	800b348 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a956:	2300      	movs	r3, #0
}
 800a958:	4618      	mov	r0, r3
 800a95a:	3710      	adds	r7, #16
 800a95c:	46bd      	mov	sp, r7
 800a95e:	bd80      	pop	{r7, pc}

0800a960 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800a960:	b580      	push	{r7, lr}
 800a962:	b082      	sub	sp, #8
 800a964:	af00      	add	r7, sp, #0
 800a966:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	2204      	movs	r2, #4
 800a96c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800a970:	2300      	movs	r3, #0
 800a972:	2200      	movs	r2, #0
 800a974:	2100      	movs	r1, #0
 800a976:	6878      	ldr	r0, [r7, #4]
 800a978:	f000 fcc5 	bl	800b306 <USBD_LL_Transmit>

  return USBD_OK;
 800a97c:	2300      	movs	r3, #0
}
 800a97e:	4618      	mov	r0, r3
 800a980:	3708      	adds	r7, #8
 800a982:	46bd      	mov	sp, r7
 800a984:	bd80      	pop	{r7, pc}

0800a986 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800a986:	b580      	push	{r7, lr}
 800a988:	b082      	sub	sp, #8
 800a98a:	af00      	add	r7, sp, #0
 800a98c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	2205      	movs	r2, #5
 800a992:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a996:	2300      	movs	r3, #0
 800a998:	2200      	movs	r2, #0
 800a99a:	2100      	movs	r1, #0
 800a99c:	6878      	ldr	r0, [r7, #4]
 800a99e:	f000 fcd3 	bl	800b348 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a9a2:	2300      	movs	r3, #0
}
 800a9a4:	4618      	mov	r0, r3
 800a9a6:	3708      	adds	r7, #8
 800a9a8:	46bd      	mov	sp, r7
 800a9aa:	bd80      	pop	{r7, pc}

0800a9ac <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800a9ac:	b580      	push	{r7, lr}
 800a9ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceHS, &HS_Desc, DEVICE_HS) != USBD_OK)
 800a9b0:	2201      	movs	r2, #1
 800a9b2:	4912      	ldr	r1, [pc, #72]	; (800a9fc <MX_USB_DEVICE_Init+0x50>)
 800a9b4:	4812      	ldr	r0, [pc, #72]	; (800aa00 <MX_USB_DEVICE_Init+0x54>)
 800a9b6:	f7fe fd07 	bl	80093c8 <USBD_Init>
 800a9ba:	4603      	mov	r3, r0
 800a9bc:	2b00      	cmp	r3, #0
 800a9be:	d001      	beq.n	800a9c4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800a9c0:	f7f6 fdd2 	bl	8001568 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceHS, &USBD_CDC) != USBD_OK)
 800a9c4:	490f      	ldr	r1, [pc, #60]	; (800aa04 <MX_USB_DEVICE_Init+0x58>)
 800a9c6:	480e      	ldr	r0, [pc, #56]	; (800aa00 <MX_USB_DEVICE_Init+0x54>)
 800a9c8:	f7fe fd2e 	bl	8009428 <USBD_RegisterClass>
 800a9cc:	4603      	mov	r3, r0
 800a9ce:	2b00      	cmp	r3, #0
 800a9d0:	d001      	beq.n	800a9d6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800a9d2:	f7f6 fdc9 	bl	8001568 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceHS, &USBD_Interface_fops_HS) != USBD_OK)
 800a9d6:	490c      	ldr	r1, [pc, #48]	; (800aa08 <MX_USB_DEVICE_Init+0x5c>)
 800a9d8:	4809      	ldr	r0, [pc, #36]	; (800aa00 <MX_USB_DEVICE_Init+0x54>)
 800a9da:	f7fe fc1f 	bl	800921c <USBD_CDC_RegisterInterface>
 800a9de:	4603      	mov	r3, r0
 800a9e0:	2b00      	cmp	r3, #0
 800a9e2:	d001      	beq.n	800a9e8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800a9e4:	f7f6 fdc0 	bl	8001568 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceHS) != USBD_OK)
 800a9e8:	4805      	ldr	r0, [pc, #20]	; (800aa00 <MX_USB_DEVICE_Init+0x54>)
 800a9ea:	f7fe fd53 	bl	8009494 <USBD_Start>
 800a9ee:	4603      	mov	r3, r0
 800a9f0:	2b00      	cmp	r3, #0
 800a9f2:	d001      	beq.n	800a9f8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800a9f4:	f7f6 fdb8 	bl	8001568 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800a9f8:	bf00      	nop
 800a9fa:	bd80      	pop	{r7, pc}
 800a9fc:	200000bc 	.word	0x200000bc
 800aa00:	2000083c 	.word	0x2000083c
 800aa04:	20000028 	.word	0x20000028
 800aa08:	200000a8 	.word	0x200000a8

0800aa0c <CDC_Init_HS>:
/**
  * @brief  Initializes the CDC media low layer over the USB HS IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_HS(void)
{
 800aa0c:	b580      	push	{r7, lr}
 800aa0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, UserTxBufferHS, 0);
 800aa10:	2200      	movs	r2, #0
 800aa12:	4905      	ldr	r1, [pc, #20]	; (800aa28 <CDC_Init_HS+0x1c>)
 800aa14:	4805      	ldr	r0, [pc, #20]	; (800aa2c <CDC_Init_HS+0x20>)
 800aa16:	f7fe fc1b 	bl	8009250 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, UserRxBufferHS);
 800aa1a:	4905      	ldr	r1, [pc, #20]	; (800aa30 <CDC_Init_HS+0x24>)
 800aa1c:	4803      	ldr	r0, [pc, #12]	; (800aa2c <CDC_Init_HS+0x20>)
 800aa1e:	f7fe fc39 	bl	8009294 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800aa22:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 800aa24:	4618      	mov	r0, r3
 800aa26:	bd80      	pop	{r7, pc}
 800aa28:	20001318 	.word	0x20001318
 800aa2c:	2000083c 	.word	0x2000083c
 800aa30:	20000b18 	.word	0x20000b18

0800aa34 <CDC_DeInit_HS>:
  * @brief  DeInitializes the CDC media low layer
  * @param  None
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_HS(void)
{
 800aa34:	b480      	push	{r7}
 800aa36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 9 */
  return (USBD_OK);
 800aa38:	2300      	movs	r3, #0
  /* USER CODE END 9 */
}
 800aa3a:	4618      	mov	r0, r3
 800aa3c:	46bd      	mov	sp, r7
 800aa3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa42:	4770      	bx	lr

0800aa44 <CDC_Control_HS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_HS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800aa44:	b480      	push	{r7}
 800aa46:	b083      	sub	sp, #12
 800aa48:	af00      	add	r7, sp, #0
 800aa4a:	4603      	mov	r3, r0
 800aa4c:	6039      	str	r1, [r7, #0]
 800aa4e:	71fb      	strb	r3, [r7, #7]
 800aa50:	4613      	mov	r3, r2
 800aa52:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 10 */
  switch(cmd)
 800aa54:	79fb      	ldrb	r3, [r7, #7]
 800aa56:	2b23      	cmp	r3, #35	; 0x23
 800aa58:	d84a      	bhi.n	800aaf0 <CDC_Control_HS+0xac>
 800aa5a:	a201      	add	r2, pc, #4	; (adr r2, 800aa60 <CDC_Control_HS+0x1c>)
 800aa5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa60:	0800aaf1 	.word	0x0800aaf1
 800aa64:	0800aaf1 	.word	0x0800aaf1
 800aa68:	0800aaf1 	.word	0x0800aaf1
 800aa6c:	0800aaf1 	.word	0x0800aaf1
 800aa70:	0800aaf1 	.word	0x0800aaf1
 800aa74:	0800aaf1 	.word	0x0800aaf1
 800aa78:	0800aaf1 	.word	0x0800aaf1
 800aa7c:	0800aaf1 	.word	0x0800aaf1
 800aa80:	0800aaf1 	.word	0x0800aaf1
 800aa84:	0800aaf1 	.word	0x0800aaf1
 800aa88:	0800aaf1 	.word	0x0800aaf1
 800aa8c:	0800aaf1 	.word	0x0800aaf1
 800aa90:	0800aaf1 	.word	0x0800aaf1
 800aa94:	0800aaf1 	.word	0x0800aaf1
 800aa98:	0800aaf1 	.word	0x0800aaf1
 800aa9c:	0800aaf1 	.word	0x0800aaf1
 800aaa0:	0800aaf1 	.word	0x0800aaf1
 800aaa4:	0800aaf1 	.word	0x0800aaf1
 800aaa8:	0800aaf1 	.word	0x0800aaf1
 800aaac:	0800aaf1 	.word	0x0800aaf1
 800aab0:	0800aaf1 	.word	0x0800aaf1
 800aab4:	0800aaf1 	.word	0x0800aaf1
 800aab8:	0800aaf1 	.word	0x0800aaf1
 800aabc:	0800aaf1 	.word	0x0800aaf1
 800aac0:	0800aaf1 	.word	0x0800aaf1
 800aac4:	0800aaf1 	.word	0x0800aaf1
 800aac8:	0800aaf1 	.word	0x0800aaf1
 800aacc:	0800aaf1 	.word	0x0800aaf1
 800aad0:	0800aaf1 	.word	0x0800aaf1
 800aad4:	0800aaf1 	.word	0x0800aaf1
 800aad8:	0800aaf1 	.word	0x0800aaf1
 800aadc:	0800aaf1 	.word	0x0800aaf1
 800aae0:	0800aaf1 	.word	0x0800aaf1
 800aae4:	0800aaf1 	.word	0x0800aaf1
 800aae8:	0800aaf1 	.word	0x0800aaf1
 800aaec:	0800aaf1 	.word	0x0800aaf1
  case CDC_SEND_BREAK:

    break;

  default:
    break;
 800aaf0:	bf00      	nop
  }

  return (USBD_OK);
 800aaf2:	2300      	movs	r3, #0
  /* USER CODE END 10 */
}
 800aaf4:	4618      	mov	r0, r3
 800aaf6:	370c      	adds	r7, #12
 800aaf8:	46bd      	mov	sp, r7
 800aafa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aafe:	4770      	bx	lr

0800ab00 <CDC_Receive_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAILL
  */
static int8_t CDC_Receive_HS(uint8_t* Buf, uint32_t *Len)
{
 800ab00:	b580      	push	{r7, lr}
 800ab02:	b082      	sub	sp, #8
 800ab04:	af00      	add	r7, sp, #0
 800ab06:	6078      	str	r0, [r7, #4]
 800ab08:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 11 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, &Buf[0]);
 800ab0a:	6879      	ldr	r1, [r7, #4]
 800ab0c:	4818      	ldr	r0, [pc, #96]	; (800ab70 <CDC_Receive_HS+0x70>)
 800ab0e:	f7fe fbc1 	bl	8009294 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceHS);
 800ab12:	4817      	ldr	r0, [pc, #92]	; (800ab70 <CDC_Receive_HS+0x70>)
 800ab14:	f7fe fc22 	bl	800935c <USBD_CDC_ReceivePacket>
  // Put usb data into usb buffer
  if((RF_transmit_buff_offset + *Len) > sizeof(RF_transmit_buffer)) RF_transmit_buff_offset = 0;
 800ab18:	4b16      	ldr	r3, [pc, #88]	; (800ab74 <CDC_Receive_HS+0x74>)
 800ab1a:	781b      	ldrb	r3, [r3, #0]
 800ab1c:	461a      	mov	r2, r3
 800ab1e:	683b      	ldr	r3, [r7, #0]
 800ab20:	681b      	ldr	r3, [r3, #0]
 800ab22:	4413      	add	r3, r2
 800ab24:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ab28:	d902      	bls.n	800ab30 <CDC_Receive_HS+0x30>
 800ab2a:	4b12      	ldr	r3, [pc, #72]	; (800ab74 <CDC_Receive_HS+0x74>)
 800ab2c:	2200      	movs	r2, #0
 800ab2e:	701a      	strb	r2, [r3, #0]
  memcpy(&RF_transmit_buffer[RF_transmit_buff_offset], Buf, *Len);  // copy the data to the RF_transmit_buffer
 800ab30:	4b10      	ldr	r3, [pc, #64]	; (800ab74 <CDC_Receive_HS+0x74>)
 800ab32:	781b      	ldrb	r3, [r3, #0]
 800ab34:	461a      	mov	r2, r3
 800ab36:	4b10      	ldr	r3, [pc, #64]	; (800ab78 <CDC_Receive_HS+0x78>)
 800ab38:	18d0      	adds	r0, r2, r3
 800ab3a:	683b      	ldr	r3, [r7, #0]
 800ab3c:	681b      	ldr	r3, [r3, #0]
 800ab3e:	461a      	mov	r2, r3
 800ab40:	6879      	ldr	r1, [r7, #4]
 800ab42:	f000 fcb3 	bl	800b4ac <memcpy>
  memset(Buf, '\0', *Len);   // clear the Buf
 800ab46:	683b      	ldr	r3, [r7, #0]
 800ab48:	681b      	ldr	r3, [r3, #0]
 800ab4a:	461a      	mov	r2, r3
 800ab4c:	2100      	movs	r1, #0
 800ab4e:	6878      	ldr	r0, [r7, #4]
 800ab50:	f000 fcba 	bl	800b4c8 <memset>
  RF_transmit_buff_offset += *Len;
 800ab54:	683b      	ldr	r3, [r7, #0]
 800ab56:	681b      	ldr	r3, [r3, #0]
 800ab58:	b2da      	uxtb	r2, r3
 800ab5a:	4b06      	ldr	r3, [pc, #24]	; (800ab74 <CDC_Receive_HS+0x74>)
 800ab5c:	781b      	ldrb	r3, [r3, #0]
 800ab5e:	4413      	add	r3, r2
 800ab60:	b2da      	uxtb	r2, r3
 800ab62:	4b04      	ldr	r3, [pc, #16]	; (800ab74 <CDC_Receive_HS+0x74>)
 800ab64:	701a      	strb	r2, [r3, #0]
  return (USBD_OK);
 800ab66:	2300      	movs	r3, #0
  /* USER CODE END 11 */
}
 800ab68:	4618      	mov	r0, r3
 800ab6a:	3708      	adds	r7, #8
 800ab6c:	46bd      	mov	sp, r7
 800ab6e:	bd80      	pop	{r7, pc}
 800ab70:	2000083c 	.word	0x2000083c
 800ab74:	200007f8 	.word	0x200007f8
 800ab78:	200005f8 	.word	0x200005f8

0800ab7c <CDC_Transmit_HS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_HS(uint8_t* Buf, uint16_t Len)
{
 800ab7c:	b580      	push	{r7, lr}
 800ab7e:	b084      	sub	sp, #16
 800ab80:	af00      	add	r7, sp, #0
 800ab82:	6078      	str	r0, [r7, #4]
 800ab84:	460b      	mov	r3, r1
 800ab86:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800ab88:	2300      	movs	r3, #0
 800ab8a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 12 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceHS.pClassData;
 800ab8c:	4b0d      	ldr	r3, [pc, #52]	; (800abc4 <CDC_Transmit_HS+0x48>)
 800ab8e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ab92:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800ab94:	68bb      	ldr	r3, [r7, #8]
 800ab96:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800ab9a:	2b00      	cmp	r3, #0
 800ab9c:	d001      	beq.n	800aba2 <CDC_Transmit_HS+0x26>
    return USBD_BUSY;
 800ab9e:	2301      	movs	r3, #1
 800aba0:	e00b      	b.n	800abba <CDC_Transmit_HS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, Buf, Len);
 800aba2:	887b      	ldrh	r3, [r7, #2]
 800aba4:	461a      	mov	r2, r3
 800aba6:	6879      	ldr	r1, [r7, #4]
 800aba8:	4806      	ldr	r0, [pc, #24]	; (800abc4 <CDC_Transmit_HS+0x48>)
 800abaa:	f7fe fb51 	bl	8009250 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceHS);
 800abae:	4805      	ldr	r0, [pc, #20]	; (800abc4 <CDC_Transmit_HS+0x48>)
 800abb0:	f7fe fb8e 	bl	80092d0 <USBD_CDC_TransmitPacket>
 800abb4:	4603      	mov	r3, r0
 800abb6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 12 */
  return result;
 800abb8:	7bfb      	ldrb	r3, [r7, #15]
}
 800abba:	4618      	mov	r0, r3
 800abbc:	3710      	adds	r7, #16
 800abbe:	46bd      	mov	sp, r7
 800abc0:	bd80      	pop	{r7, pc}
 800abc2:	bf00      	nop
 800abc4:	2000083c 	.word	0x2000083c

0800abc8 <CDC_TransmitCplt_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_HS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800abc8:	b480      	push	{r7}
 800abca:	b087      	sub	sp, #28
 800abcc:	af00      	add	r7, sp, #0
 800abce:	60f8      	str	r0, [r7, #12]
 800abd0:	60b9      	str	r1, [r7, #8]
 800abd2:	4613      	mov	r3, r2
 800abd4:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800abd6:	2300      	movs	r3, #0
 800abd8:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 14 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 14 */
  return result;
 800abda:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800abde:	4618      	mov	r0, r3
 800abe0:	371c      	adds	r7, #28
 800abe2:	46bd      	mov	sp, r7
 800abe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abe8:	4770      	bx	lr
	...

0800abec <USBD_HS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800abec:	b480      	push	{r7}
 800abee:	b083      	sub	sp, #12
 800abf0:	af00      	add	r7, sp, #0
 800abf2:	4603      	mov	r3, r0
 800abf4:	6039      	str	r1, [r7, #0]
 800abf6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_HS_DeviceDesc);
 800abf8:	683b      	ldr	r3, [r7, #0]
 800abfa:	2212      	movs	r2, #18
 800abfc:	801a      	strh	r2, [r3, #0]
  return USBD_HS_DeviceDesc;
 800abfe:	4b03      	ldr	r3, [pc, #12]	; (800ac0c <USBD_HS_DeviceDescriptor+0x20>)
}
 800ac00:	4618      	mov	r0, r3
 800ac02:	370c      	adds	r7, #12
 800ac04:	46bd      	mov	sp, r7
 800ac06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac0a:	4770      	bx	lr
 800ac0c:	200000d8 	.word	0x200000d8

0800ac10 <USBD_HS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ac10:	b480      	push	{r7}
 800ac12:	b083      	sub	sp, #12
 800ac14:	af00      	add	r7, sp, #0
 800ac16:	4603      	mov	r3, r0
 800ac18:	6039      	str	r1, [r7, #0]
 800ac1a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800ac1c:	683b      	ldr	r3, [r7, #0]
 800ac1e:	2204      	movs	r2, #4
 800ac20:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800ac22:	4b03      	ldr	r3, [pc, #12]	; (800ac30 <USBD_HS_LangIDStrDescriptor+0x20>)
}
 800ac24:	4618      	mov	r0, r3
 800ac26:	370c      	adds	r7, #12
 800ac28:	46bd      	mov	sp, r7
 800ac2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac2e:	4770      	bx	lr
 800ac30:	200000ec 	.word	0x200000ec

0800ac34 <USBD_HS_ProductStrDescriptor>:
  * @param  speed : current device speed
  * @param  length : pointer to data length variable
  * @retval pointer to descriptor buffer
  */
uint8_t * USBD_HS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ac34:	b580      	push	{r7, lr}
 800ac36:	b082      	sub	sp, #8
 800ac38:	af00      	add	r7, sp, #0
 800ac3a:	4603      	mov	r3, r0
 800ac3c:	6039      	str	r1, [r7, #0]
 800ac3e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800ac40:	79fb      	ldrb	r3, [r7, #7]
 800ac42:	2b00      	cmp	r3, #0
 800ac44:	d105      	bne.n	800ac52 <USBD_HS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 800ac46:	683a      	ldr	r2, [r7, #0]
 800ac48:	4907      	ldr	r1, [pc, #28]	; (800ac68 <USBD_HS_ProductStrDescriptor+0x34>)
 800ac4a:	4808      	ldr	r0, [pc, #32]	; (800ac6c <USBD_HS_ProductStrDescriptor+0x38>)
 800ac4c:	f7ff fdce 	bl	800a7ec <USBD_GetString>
 800ac50:	e004      	b.n	800ac5c <USBD_HS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 800ac52:	683a      	ldr	r2, [r7, #0]
 800ac54:	4904      	ldr	r1, [pc, #16]	; (800ac68 <USBD_HS_ProductStrDescriptor+0x34>)
 800ac56:	4805      	ldr	r0, [pc, #20]	; (800ac6c <USBD_HS_ProductStrDescriptor+0x38>)
 800ac58:	f7ff fdc8 	bl	800a7ec <USBD_GetString>
  }
  return USBD_StrDesc;
 800ac5c:	4b02      	ldr	r3, [pc, #8]	; (800ac68 <USBD_HS_ProductStrDescriptor+0x34>)
}
 800ac5e:	4618      	mov	r0, r3
 800ac60:	3708      	adds	r7, #8
 800ac62:	46bd      	mov	sp, r7
 800ac64:	bd80      	pop	{r7, pc}
 800ac66:	bf00      	nop
 800ac68:	20001b18 	.word	0x20001b18
 800ac6c:	0800bd94 	.word	0x0800bd94

0800ac70 <USBD_HS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ac70:	b580      	push	{r7, lr}
 800ac72:	b082      	sub	sp, #8
 800ac74:	af00      	add	r7, sp, #0
 800ac76:	4603      	mov	r3, r0
 800ac78:	6039      	str	r1, [r7, #0]
 800ac7a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800ac7c:	683a      	ldr	r2, [r7, #0]
 800ac7e:	4904      	ldr	r1, [pc, #16]	; (800ac90 <USBD_HS_ManufacturerStrDescriptor+0x20>)
 800ac80:	4804      	ldr	r0, [pc, #16]	; (800ac94 <USBD_HS_ManufacturerStrDescriptor+0x24>)
 800ac82:	f7ff fdb3 	bl	800a7ec <USBD_GetString>
  return USBD_StrDesc;
 800ac86:	4b02      	ldr	r3, [pc, #8]	; (800ac90 <USBD_HS_ManufacturerStrDescriptor+0x20>)
}
 800ac88:	4618      	mov	r0, r3
 800ac8a:	3708      	adds	r7, #8
 800ac8c:	46bd      	mov	sp, r7
 800ac8e:	bd80      	pop	{r7, pc}
 800ac90:	20001b18 	.word	0x20001b18
 800ac94:	0800bdac 	.word	0x0800bdac

0800ac98 <USBD_HS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ac98:	b580      	push	{r7, lr}
 800ac9a:	b082      	sub	sp, #8
 800ac9c:	af00      	add	r7, sp, #0
 800ac9e:	4603      	mov	r3, r0
 800aca0:	6039      	str	r1, [r7, #0]
 800aca2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800aca4:	683b      	ldr	r3, [r7, #0]
 800aca6:	221a      	movs	r2, #26
 800aca8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800acaa:	f000 f843 	bl	800ad34 <Get_SerialNum>
  /* USER CODE BEGIN USBD_HS_SerialStrDescriptor */

  /* USER CODE END USBD_HS_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 800acae:	4b02      	ldr	r3, [pc, #8]	; (800acb8 <USBD_HS_SerialStrDescriptor+0x20>)
}
 800acb0:	4618      	mov	r0, r3
 800acb2:	3708      	adds	r7, #8
 800acb4:	46bd      	mov	sp, r7
 800acb6:	bd80      	pop	{r7, pc}
 800acb8:	200000f0 	.word	0x200000f0

0800acbc <USBD_HS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800acbc:	b580      	push	{r7, lr}
 800acbe:	b082      	sub	sp, #8
 800acc0:	af00      	add	r7, sp, #0
 800acc2:	4603      	mov	r3, r0
 800acc4:	6039      	str	r1, [r7, #0]
 800acc6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800acc8:	79fb      	ldrb	r3, [r7, #7]
 800acca:	2b00      	cmp	r3, #0
 800accc:	d105      	bne.n	800acda <USBD_HS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 800acce:	683a      	ldr	r2, [r7, #0]
 800acd0:	4907      	ldr	r1, [pc, #28]	; (800acf0 <USBD_HS_ConfigStrDescriptor+0x34>)
 800acd2:	4808      	ldr	r0, [pc, #32]	; (800acf4 <USBD_HS_ConfigStrDescriptor+0x38>)
 800acd4:	f7ff fd8a 	bl	800a7ec <USBD_GetString>
 800acd8:	e004      	b.n	800ace4 <USBD_HS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 800acda:	683a      	ldr	r2, [r7, #0]
 800acdc:	4904      	ldr	r1, [pc, #16]	; (800acf0 <USBD_HS_ConfigStrDescriptor+0x34>)
 800acde:	4805      	ldr	r0, [pc, #20]	; (800acf4 <USBD_HS_ConfigStrDescriptor+0x38>)
 800ace0:	f7ff fd84 	bl	800a7ec <USBD_GetString>
  }
  return USBD_StrDesc;
 800ace4:	4b02      	ldr	r3, [pc, #8]	; (800acf0 <USBD_HS_ConfigStrDescriptor+0x34>)
}
 800ace6:	4618      	mov	r0, r3
 800ace8:	3708      	adds	r7, #8
 800acea:	46bd      	mov	sp, r7
 800acec:	bd80      	pop	{r7, pc}
 800acee:	bf00      	nop
 800acf0:	20001b18 	.word	0x20001b18
 800acf4:	0800bdc0 	.word	0x0800bdc0

0800acf8 <USBD_HS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800acf8:	b580      	push	{r7, lr}
 800acfa:	b082      	sub	sp, #8
 800acfc:	af00      	add	r7, sp, #0
 800acfe:	4603      	mov	r3, r0
 800ad00:	6039      	str	r1, [r7, #0]
 800ad02:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800ad04:	79fb      	ldrb	r3, [r7, #7]
 800ad06:	2b00      	cmp	r3, #0
 800ad08:	d105      	bne.n	800ad16 <USBD_HS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 800ad0a:	683a      	ldr	r2, [r7, #0]
 800ad0c:	4907      	ldr	r1, [pc, #28]	; (800ad2c <USBD_HS_InterfaceStrDescriptor+0x34>)
 800ad0e:	4808      	ldr	r0, [pc, #32]	; (800ad30 <USBD_HS_InterfaceStrDescriptor+0x38>)
 800ad10:	f7ff fd6c 	bl	800a7ec <USBD_GetString>
 800ad14:	e004      	b.n	800ad20 <USBD_HS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 800ad16:	683a      	ldr	r2, [r7, #0]
 800ad18:	4904      	ldr	r1, [pc, #16]	; (800ad2c <USBD_HS_InterfaceStrDescriptor+0x34>)
 800ad1a:	4805      	ldr	r0, [pc, #20]	; (800ad30 <USBD_HS_InterfaceStrDescriptor+0x38>)
 800ad1c:	f7ff fd66 	bl	800a7ec <USBD_GetString>
  }
  return USBD_StrDesc;
 800ad20:	4b02      	ldr	r3, [pc, #8]	; (800ad2c <USBD_HS_InterfaceStrDescriptor+0x34>)
}
 800ad22:	4618      	mov	r0, r3
 800ad24:	3708      	adds	r7, #8
 800ad26:	46bd      	mov	sp, r7
 800ad28:	bd80      	pop	{r7, pc}
 800ad2a:	bf00      	nop
 800ad2c:	20001b18 	.word	0x20001b18
 800ad30:	0800bdcc 	.word	0x0800bdcc

0800ad34 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800ad34:	b580      	push	{r7, lr}
 800ad36:	b084      	sub	sp, #16
 800ad38:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800ad3a:	4b0f      	ldr	r3, [pc, #60]	; (800ad78 <Get_SerialNum+0x44>)
 800ad3c:	681b      	ldr	r3, [r3, #0]
 800ad3e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800ad40:	4b0e      	ldr	r3, [pc, #56]	; (800ad7c <Get_SerialNum+0x48>)
 800ad42:	681b      	ldr	r3, [r3, #0]
 800ad44:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800ad46:	4b0e      	ldr	r3, [pc, #56]	; (800ad80 <Get_SerialNum+0x4c>)
 800ad48:	681b      	ldr	r3, [r3, #0]
 800ad4a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800ad4c:	68fa      	ldr	r2, [r7, #12]
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	4413      	add	r3, r2
 800ad52:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800ad54:	68fb      	ldr	r3, [r7, #12]
 800ad56:	2b00      	cmp	r3, #0
 800ad58:	d009      	beq.n	800ad6e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800ad5a:	2208      	movs	r2, #8
 800ad5c:	4909      	ldr	r1, [pc, #36]	; (800ad84 <Get_SerialNum+0x50>)
 800ad5e:	68f8      	ldr	r0, [r7, #12]
 800ad60:	f000 f814 	bl	800ad8c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800ad64:	2204      	movs	r2, #4
 800ad66:	4908      	ldr	r1, [pc, #32]	; (800ad88 <Get_SerialNum+0x54>)
 800ad68:	68b8      	ldr	r0, [r7, #8]
 800ad6a:	f000 f80f 	bl	800ad8c <IntToUnicode>
  }
}
 800ad6e:	bf00      	nop
 800ad70:	3710      	adds	r7, #16
 800ad72:	46bd      	mov	sp, r7
 800ad74:	bd80      	pop	{r7, pc}
 800ad76:	bf00      	nop
 800ad78:	1fff7a10 	.word	0x1fff7a10
 800ad7c:	1fff7a14 	.word	0x1fff7a14
 800ad80:	1fff7a18 	.word	0x1fff7a18
 800ad84:	200000f2 	.word	0x200000f2
 800ad88:	20000102 	.word	0x20000102

0800ad8c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800ad8c:	b480      	push	{r7}
 800ad8e:	b087      	sub	sp, #28
 800ad90:	af00      	add	r7, sp, #0
 800ad92:	60f8      	str	r0, [r7, #12]
 800ad94:	60b9      	str	r1, [r7, #8]
 800ad96:	4613      	mov	r3, r2
 800ad98:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800ad9a:	2300      	movs	r3, #0
 800ad9c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800ad9e:	2300      	movs	r3, #0
 800ada0:	75fb      	strb	r3, [r7, #23]
 800ada2:	e027      	b.n	800adf4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800ada4:	68fb      	ldr	r3, [r7, #12]
 800ada6:	0f1b      	lsrs	r3, r3, #28
 800ada8:	2b09      	cmp	r3, #9
 800adaa:	d80b      	bhi.n	800adc4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800adac:	68fb      	ldr	r3, [r7, #12]
 800adae:	0f1b      	lsrs	r3, r3, #28
 800adb0:	b2da      	uxtb	r2, r3
 800adb2:	7dfb      	ldrb	r3, [r7, #23]
 800adb4:	005b      	lsls	r3, r3, #1
 800adb6:	4619      	mov	r1, r3
 800adb8:	68bb      	ldr	r3, [r7, #8]
 800adba:	440b      	add	r3, r1
 800adbc:	3230      	adds	r2, #48	; 0x30
 800adbe:	b2d2      	uxtb	r2, r2
 800adc0:	701a      	strb	r2, [r3, #0]
 800adc2:	e00a      	b.n	800adda <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800adc4:	68fb      	ldr	r3, [r7, #12]
 800adc6:	0f1b      	lsrs	r3, r3, #28
 800adc8:	b2da      	uxtb	r2, r3
 800adca:	7dfb      	ldrb	r3, [r7, #23]
 800adcc:	005b      	lsls	r3, r3, #1
 800adce:	4619      	mov	r1, r3
 800add0:	68bb      	ldr	r3, [r7, #8]
 800add2:	440b      	add	r3, r1
 800add4:	3237      	adds	r2, #55	; 0x37
 800add6:	b2d2      	uxtb	r2, r2
 800add8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800adda:	68fb      	ldr	r3, [r7, #12]
 800addc:	011b      	lsls	r3, r3, #4
 800adde:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800ade0:	7dfb      	ldrb	r3, [r7, #23]
 800ade2:	005b      	lsls	r3, r3, #1
 800ade4:	3301      	adds	r3, #1
 800ade6:	68ba      	ldr	r2, [r7, #8]
 800ade8:	4413      	add	r3, r2
 800adea:	2200      	movs	r2, #0
 800adec:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800adee:	7dfb      	ldrb	r3, [r7, #23]
 800adf0:	3301      	adds	r3, #1
 800adf2:	75fb      	strb	r3, [r7, #23]
 800adf4:	7dfa      	ldrb	r2, [r7, #23]
 800adf6:	79fb      	ldrb	r3, [r7, #7]
 800adf8:	429a      	cmp	r2, r3
 800adfa:	d3d3      	bcc.n	800ada4 <IntToUnicode+0x18>
  }
}
 800adfc:	bf00      	nop
 800adfe:	bf00      	nop
 800ae00:	371c      	adds	r7, #28
 800ae02:	46bd      	mov	sp, r7
 800ae04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae08:	4770      	bx	lr
	...

0800ae0c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800ae0c:	b580      	push	{r7, lr}
 800ae0e:	b08a      	sub	sp, #40	; 0x28
 800ae10:	af00      	add	r7, sp, #0
 800ae12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ae14:	f107 0314 	add.w	r3, r7, #20
 800ae18:	2200      	movs	r2, #0
 800ae1a:	601a      	str	r2, [r3, #0]
 800ae1c:	605a      	str	r2, [r3, #4]
 800ae1e:	609a      	str	r2, [r3, #8]
 800ae20:	60da      	str	r2, [r3, #12]
 800ae22:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_HS)
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	681b      	ldr	r3, [r3, #0]
 800ae28:	4a1d      	ldr	r2, [pc, #116]	; (800aea0 <HAL_PCD_MspInit+0x94>)
 800ae2a:	4293      	cmp	r3, r2
 800ae2c:	d134      	bne.n	800ae98 <HAL_PCD_MspInit+0x8c>
  {
  /* USER CODE BEGIN USB_OTG_HS_MspInit 0 */

  /* USER CODE END USB_OTG_HS_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800ae2e:	2300      	movs	r3, #0
 800ae30:	613b      	str	r3, [r7, #16]
 800ae32:	4b1c      	ldr	r3, [pc, #112]	; (800aea4 <HAL_PCD_MspInit+0x98>)
 800ae34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ae36:	4a1b      	ldr	r2, [pc, #108]	; (800aea4 <HAL_PCD_MspInit+0x98>)
 800ae38:	f043 0302 	orr.w	r3, r3, #2
 800ae3c:	6313      	str	r3, [r2, #48]	; 0x30
 800ae3e:	4b19      	ldr	r3, [pc, #100]	; (800aea4 <HAL_PCD_MspInit+0x98>)
 800ae40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ae42:	f003 0302 	and.w	r3, r3, #2
 800ae46:	613b      	str	r3, [r7, #16]
 800ae48:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_HS GPIO Configuration
    PB14     ------> USB_OTG_HS_DM
    PB15     ------> USB_OTG_HS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 800ae4a:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800ae4e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ae50:	2302      	movs	r3, #2
 800ae52:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ae54:	2300      	movs	r3, #0
 800ae56:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ae58:	2303      	movs	r3, #3
 800ae5a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 800ae5c:	230c      	movs	r3, #12
 800ae5e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800ae60:	f107 0314 	add.w	r3, r7, #20
 800ae64:	4619      	mov	r1, r3
 800ae66:	4810      	ldr	r0, [pc, #64]	; (800aea8 <HAL_PCD_MspInit+0x9c>)
 800ae68:	f7f7 fc14 	bl	8002694 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 800ae6c:	2300      	movs	r3, #0
 800ae6e:	60fb      	str	r3, [r7, #12]
 800ae70:	4b0c      	ldr	r3, [pc, #48]	; (800aea4 <HAL_PCD_MspInit+0x98>)
 800ae72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ae74:	4a0b      	ldr	r2, [pc, #44]	; (800aea4 <HAL_PCD_MspInit+0x98>)
 800ae76:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800ae7a:	6313      	str	r3, [r2, #48]	; 0x30
 800ae7c:	4b09      	ldr	r3, [pc, #36]	; (800aea4 <HAL_PCD_MspInit+0x98>)
 800ae7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ae80:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ae84:	60fb      	str	r3, [r7, #12]
 800ae86:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 1, 0);
 800ae88:	2200      	movs	r2, #0
 800ae8a:	2101      	movs	r1, #1
 800ae8c:	204d      	movs	r0, #77	; 0x4d
 800ae8e:	f7f6 ffc8 	bl	8001e22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 800ae92:	204d      	movs	r0, #77	; 0x4d
 800ae94:	f7f6 ffe1 	bl	8001e5a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 800ae98:	bf00      	nop
 800ae9a:	3728      	adds	r7, #40	; 0x28
 800ae9c:	46bd      	mov	sp, r7
 800ae9e:	bd80      	pop	{r7, pc}
 800aea0:	40040000 	.word	0x40040000
 800aea4:	40023800 	.word	0x40023800
 800aea8:	40020400 	.word	0x40020400

0800aeac <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aeac:	b580      	push	{r7, lr}
 800aeae:	b082      	sub	sp, #8
 800aeb0:	af00      	add	r7, sp, #0
 800aeb2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800aec0:	4619      	mov	r1, r3
 800aec2:	4610      	mov	r0, r2
 800aec4:	f7fe fb33 	bl	800952e <USBD_LL_SetupStage>
}
 800aec8:	bf00      	nop
 800aeca:	3708      	adds	r7, #8
 800aecc:	46bd      	mov	sp, r7
 800aece:	bd80      	pop	{r7, pc}

0800aed0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aed0:	b580      	push	{r7, lr}
 800aed2:	b082      	sub	sp, #8
 800aed4:	af00      	add	r7, sp, #0
 800aed6:	6078      	str	r0, [r7, #4]
 800aed8:	460b      	mov	r3, r1
 800aeda:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800aee2:	78fa      	ldrb	r2, [r7, #3]
 800aee4:	6879      	ldr	r1, [r7, #4]
 800aee6:	4613      	mov	r3, r2
 800aee8:	00db      	lsls	r3, r3, #3
 800aeea:	4413      	add	r3, r2
 800aeec:	009b      	lsls	r3, r3, #2
 800aeee:	440b      	add	r3, r1
 800aef0:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800aef4:	681a      	ldr	r2, [r3, #0]
 800aef6:	78fb      	ldrb	r3, [r7, #3]
 800aef8:	4619      	mov	r1, r3
 800aefa:	f7fe fb6d 	bl	80095d8 <USBD_LL_DataOutStage>
}
 800aefe:	bf00      	nop
 800af00:	3708      	adds	r7, #8
 800af02:	46bd      	mov	sp, r7
 800af04:	bd80      	pop	{r7, pc}

0800af06 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800af06:	b580      	push	{r7, lr}
 800af08:	b082      	sub	sp, #8
 800af0a:	af00      	add	r7, sp, #0
 800af0c:	6078      	str	r0, [r7, #4]
 800af0e:	460b      	mov	r3, r1
 800af10:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800af18:	78fa      	ldrb	r2, [r7, #3]
 800af1a:	6879      	ldr	r1, [r7, #4]
 800af1c:	4613      	mov	r3, r2
 800af1e:	00db      	lsls	r3, r3, #3
 800af20:	4413      	add	r3, r2
 800af22:	009b      	lsls	r3, r3, #2
 800af24:	440b      	add	r3, r1
 800af26:	334c      	adds	r3, #76	; 0x4c
 800af28:	681a      	ldr	r2, [r3, #0]
 800af2a:	78fb      	ldrb	r3, [r7, #3]
 800af2c:	4619      	mov	r1, r3
 800af2e:	f7fe fc06 	bl	800973e <USBD_LL_DataInStage>
}
 800af32:	bf00      	nop
 800af34:	3708      	adds	r7, #8
 800af36:	46bd      	mov	sp, r7
 800af38:	bd80      	pop	{r7, pc}

0800af3a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800af3a:	b580      	push	{r7, lr}
 800af3c:	b082      	sub	sp, #8
 800af3e:	af00      	add	r7, sp, #0
 800af40:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800af48:	4618      	mov	r0, r3
 800af4a:	f7fe fd3a 	bl	80099c2 <USBD_LL_SOF>
}
 800af4e:	bf00      	nop
 800af50:	3708      	adds	r7, #8
 800af52:	46bd      	mov	sp, r7
 800af54:	bd80      	pop	{r7, pc}

0800af56 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800af56:	b580      	push	{r7, lr}
 800af58:	b084      	sub	sp, #16
 800af5a:	af00      	add	r7, sp, #0
 800af5c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800af5e:	2301      	movs	r3, #1
 800af60:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	68db      	ldr	r3, [r3, #12]
 800af66:	2b00      	cmp	r3, #0
 800af68:	d102      	bne.n	800af70 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800af6a:	2300      	movs	r3, #0
 800af6c:	73fb      	strb	r3, [r7, #15]
 800af6e:	e008      	b.n	800af82 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	68db      	ldr	r3, [r3, #12]
 800af74:	2b02      	cmp	r3, #2
 800af76:	d102      	bne.n	800af7e <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800af78:	2301      	movs	r3, #1
 800af7a:	73fb      	strb	r3, [r7, #15]
 800af7c:	e001      	b.n	800af82 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800af7e:	f7f6 faf3 	bl	8001568 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800af88:	7bfa      	ldrb	r2, [r7, #15]
 800af8a:	4611      	mov	r1, r2
 800af8c:	4618      	mov	r0, r3
 800af8e:	f7fe fcda 	bl	8009946 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800af98:	4618      	mov	r0, r3
 800af9a:	f7fe fc82 	bl	80098a2 <USBD_LL_Reset>
}
 800af9e:	bf00      	nop
 800afa0:	3710      	adds	r7, #16
 800afa2:	46bd      	mov	sp, r7
 800afa4:	bd80      	pop	{r7, pc}
	...

0800afa8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800afa8:	b580      	push	{r7, lr}
 800afaa:	b082      	sub	sp, #8
 800afac:	af00      	add	r7, sp, #0
 800afae:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800afb6:	4618      	mov	r0, r3
 800afb8:	f7fe fcd5 	bl	8009966 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	681b      	ldr	r3, [r3, #0]
 800afc0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800afc4:	681b      	ldr	r3, [r3, #0]
 800afc6:	687a      	ldr	r2, [r7, #4]
 800afc8:	6812      	ldr	r2, [r2, #0]
 800afca:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800afce:	f043 0301 	orr.w	r3, r3, #1
 800afd2:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	6a1b      	ldr	r3, [r3, #32]
 800afd8:	2b00      	cmp	r3, #0
 800afda:	d005      	beq.n	800afe8 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800afdc:	4b04      	ldr	r3, [pc, #16]	; (800aff0 <HAL_PCD_SuspendCallback+0x48>)
 800afde:	691b      	ldr	r3, [r3, #16]
 800afe0:	4a03      	ldr	r2, [pc, #12]	; (800aff0 <HAL_PCD_SuspendCallback+0x48>)
 800afe2:	f043 0306 	orr.w	r3, r3, #6
 800afe6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800afe8:	bf00      	nop
 800afea:	3708      	adds	r7, #8
 800afec:	46bd      	mov	sp, r7
 800afee:	bd80      	pop	{r7, pc}
 800aff0:	e000ed00 	.word	0xe000ed00

0800aff4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aff4:	b580      	push	{r7, lr}
 800aff6:	b082      	sub	sp, #8
 800aff8:	af00      	add	r7, sp, #0
 800affa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b002:	4618      	mov	r0, r3
 800b004:	f7fe fcc5 	bl	8009992 <USBD_LL_Resume>
}
 800b008:	bf00      	nop
 800b00a:	3708      	adds	r7, #8
 800b00c:	46bd      	mov	sp, r7
 800b00e:	bd80      	pop	{r7, pc}

0800b010 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b010:	b580      	push	{r7, lr}
 800b012:	b082      	sub	sp, #8
 800b014:	af00      	add	r7, sp, #0
 800b016:	6078      	str	r0, [r7, #4]
 800b018:	460b      	mov	r3, r1
 800b01a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b022:	78fa      	ldrb	r2, [r7, #3]
 800b024:	4611      	mov	r1, r2
 800b026:	4618      	mov	r0, r3
 800b028:	f7fe fd1d 	bl	8009a66 <USBD_LL_IsoOUTIncomplete>
}
 800b02c:	bf00      	nop
 800b02e:	3708      	adds	r7, #8
 800b030:	46bd      	mov	sp, r7
 800b032:	bd80      	pop	{r7, pc}

0800b034 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b034:	b580      	push	{r7, lr}
 800b036:	b082      	sub	sp, #8
 800b038:	af00      	add	r7, sp, #0
 800b03a:	6078      	str	r0, [r7, #4]
 800b03c:	460b      	mov	r3, r1
 800b03e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b046:	78fa      	ldrb	r2, [r7, #3]
 800b048:	4611      	mov	r1, r2
 800b04a:	4618      	mov	r0, r3
 800b04c:	f7fe fcd9 	bl	8009a02 <USBD_LL_IsoINIncomplete>
}
 800b050:	bf00      	nop
 800b052:	3708      	adds	r7, #8
 800b054:	46bd      	mov	sp, r7
 800b056:	bd80      	pop	{r7, pc}

0800b058 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b058:	b580      	push	{r7, lr}
 800b05a:	b082      	sub	sp, #8
 800b05c:	af00      	add	r7, sp, #0
 800b05e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b066:	4618      	mov	r0, r3
 800b068:	f7fe fd2f 	bl	8009aca <USBD_LL_DevConnected>
}
 800b06c:	bf00      	nop
 800b06e:	3708      	adds	r7, #8
 800b070:	46bd      	mov	sp, r7
 800b072:	bd80      	pop	{r7, pc}

0800b074 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b074:	b580      	push	{r7, lr}
 800b076:	b082      	sub	sp, #8
 800b078:	af00      	add	r7, sp, #0
 800b07a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b082:	4618      	mov	r0, r3
 800b084:	f7fe fd2c 	bl	8009ae0 <USBD_LL_DevDisconnected>
}
 800b088:	bf00      	nop
 800b08a:	3708      	adds	r7, #8
 800b08c:	46bd      	mov	sp, r7
 800b08e:	bd80      	pop	{r7, pc}

0800b090 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800b090:	b580      	push	{r7, lr}
 800b092:	b082      	sub	sp, #8
 800b094:	af00      	add	r7, sp, #0
 800b096:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_HS) {
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	781b      	ldrb	r3, [r3, #0]
 800b09c:	2b01      	cmp	r3, #1
 800b09e:	d140      	bne.n	800b122 <USBD_LL_Init+0x92>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_HS.pData = pdev;
 800b0a0:	4a22      	ldr	r2, [pc, #136]	; (800b12c <USBD_LL_Init+0x9c>)
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_HS;
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	4a20      	ldr	r2, [pc, #128]	; (800b12c <USBD_LL_Init+0x9c>)
 800b0ac:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 800b0b0:	4b1e      	ldr	r3, [pc, #120]	; (800b12c <USBD_LL_Init+0x9c>)
 800b0b2:	4a1f      	ldr	r2, [pc, #124]	; (800b130 <USBD_LL_Init+0xa0>)
 800b0b4:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_HS.Init.dev_endpoints = 6;
 800b0b6:	4b1d      	ldr	r3, [pc, #116]	; (800b12c <USBD_LL_Init+0x9c>)
 800b0b8:	2206      	movs	r2, #6
 800b0ba:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_FULL;
 800b0bc:	4b1b      	ldr	r3, [pc, #108]	; (800b12c <USBD_LL_Init+0x9c>)
 800b0be:	2202      	movs	r2, #2
 800b0c0:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 800b0c2:	4b1a      	ldr	r3, [pc, #104]	; (800b12c <USBD_LL_Init+0x9c>)
 800b0c4:	2200      	movs	r2, #0
 800b0c6:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 800b0c8:	4b18      	ldr	r3, [pc, #96]	; (800b12c <USBD_LL_Init+0x9c>)
 800b0ca:	2202      	movs	r2, #2
 800b0cc:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 800b0ce:	4b17      	ldr	r3, [pc, #92]	; (800b12c <USBD_LL_Init+0x9c>)
 800b0d0:	2200      	movs	r2, #0
 800b0d2:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 800b0d4:	4b15      	ldr	r3, [pc, #84]	; (800b12c <USBD_LL_Init+0x9c>)
 800b0d6:	2200      	movs	r2, #0
 800b0d8:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 800b0da:	4b14      	ldr	r3, [pc, #80]	; (800b12c <USBD_LL_Init+0x9c>)
 800b0dc:	2200      	movs	r2, #0
 800b0de:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 800b0e0:	4b12      	ldr	r3, [pc, #72]	; (800b12c <USBD_LL_Init+0x9c>)
 800b0e2:	2200      	movs	r2, #0
 800b0e4:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 800b0e6:	4b11      	ldr	r3, [pc, #68]	; (800b12c <USBD_LL_Init+0x9c>)
 800b0e8:	2200      	movs	r2, #0
 800b0ea:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 800b0ec:	4b0f      	ldr	r3, [pc, #60]	; (800b12c <USBD_LL_Init+0x9c>)
 800b0ee:	2200      	movs	r2, #0
 800b0f0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 800b0f2:	480e      	ldr	r0, [pc, #56]	; (800b12c <USBD_LL_Init+0x9c>)
 800b0f4:	f7f7 fc9c 	bl	8002a30 <HAL_PCD_Init>
 800b0f8:	4603      	mov	r3, r0
 800b0fa:	2b00      	cmp	r3, #0
 800b0fc:	d001      	beq.n	800b102 <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 800b0fe:	f7f6 fa33 	bl	8001568 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_HS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_HS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_HS, 0x200);
 800b102:	f44f 7100 	mov.w	r1, #512	; 0x200
 800b106:	4809      	ldr	r0, [pc, #36]	; (800b12c <USBD_LL_Init+0x9c>)
 800b108:	f7f8 fef3 	bl	8003ef2 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 0, 0x80);
 800b10c:	2280      	movs	r2, #128	; 0x80
 800b10e:	2100      	movs	r1, #0
 800b110:	4806      	ldr	r0, [pc, #24]	; (800b12c <USBD_LL_Init+0x9c>)
 800b112:	f7f8 fea7 	bl	8003e64 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 1, 0x174);
 800b116:	f44f 72ba 	mov.w	r2, #372	; 0x174
 800b11a:	2101      	movs	r1, #1
 800b11c:	4803      	ldr	r0, [pc, #12]	; (800b12c <USBD_LL_Init+0x9c>)
 800b11e:	f7f8 fea1 	bl	8003e64 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800b122:	2300      	movs	r3, #0
}
 800b124:	4618      	mov	r0, r3
 800b126:	3708      	adds	r7, #8
 800b128:	46bd      	mov	sp, r7
 800b12a:	bd80      	pop	{r7, pc}
 800b12c:	20001d18 	.word	0x20001d18
 800b130:	40040000 	.word	0x40040000

0800b134 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800b134:	b580      	push	{r7, lr}
 800b136:	b084      	sub	sp, #16
 800b138:	af00      	add	r7, sp, #0
 800b13a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b13c:	2300      	movs	r3, #0
 800b13e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b140:	2300      	movs	r3, #0
 800b142:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b14a:	4618      	mov	r0, r3
 800b14c:	f7f7 fd8d 	bl	8002c6a <HAL_PCD_Start>
 800b150:	4603      	mov	r3, r0
 800b152:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b154:	7bfb      	ldrb	r3, [r7, #15]
 800b156:	4618      	mov	r0, r3
 800b158:	f000 f942 	bl	800b3e0 <USBD_Get_USB_Status>
 800b15c:	4603      	mov	r3, r0
 800b15e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b160:	7bbb      	ldrb	r3, [r7, #14]
}
 800b162:	4618      	mov	r0, r3
 800b164:	3710      	adds	r7, #16
 800b166:	46bd      	mov	sp, r7
 800b168:	bd80      	pop	{r7, pc}

0800b16a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800b16a:	b580      	push	{r7, lr}
 800b16c:	b084      	sub	sp, #16
 800b16e:	af00      	add	r7, sp, #0
 800b170:	6078      	str	r0, [r7, #4]
 800b172:	4608      	mov	r0, r1
 800b174:	4611      	mov	r1, r2
 800b176:	461a      	mov	r2, r3
 800b178:	4603      	mov	r3, r0
 800b17a:	70fb      	strb	r3, [r7, #3]
 800b17c:	460b      	mov	r3, r1
 800b17e:	70bb      	strb	r3, [r7, #2]
 800b180:	4613      	mov	r3, r2
 800b182:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b184:	2300      	movs	r3, #0
 800b186:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b188:	2300      	movs	r3, #0
 800b18a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800b192:	78bb      	ldrb	r3, [r7, #2]
 800b194:	883a      	ldrh	r2, [r7, #0]
 800b196:	78f9      	ldrb	r1, [r7, #3]
 800b198:	f7f8 fa5e 	bl	8003658 <HAL_PCD_EP_Open>
 800b19c:	4603      	mov	r3, r0
 800b19e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b1a0:	7bfb      	ldrb	r3, [r7, #15]
 800b1a2:	4618      	mov	r0, r3
 800b1a4:	f000 f91c 	bl	800b3e0 <USBD_Get_USB_Status>
 800b1a8:	4603      	mov	r3, r0
 800b1aa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b1ac:	7bbb      	ldrb	r3, [r7, #14]
}
 800b1ae:	4618      	mov	r0, r3
 800b1b0:	3710      	adds	r7, #16
 800b1b2:	46bd      	mov	sp, r7
 800b1b4:	bd80      	pop	{r7, pc}

0800b1b6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b1b6:	b580      	push	{r7, lr}
 800b1b8:	b084      	sub	sp, #16
 800b1ba:	af00      	add	r7, sp, #0
 800b1bc:	6078      	str	r0, [r7, #4]
 800b1be:	460b      	mov	r3, r1
 800b1c0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b1c2:	2300      	movs	r3, #0
 800b1c4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b1c6:	2300      	movs	r3, #0
 800b1c8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b1d0:	78fa      	ldrb	r2, [r7, #3]
 800b1d2:	4611      	mov	r1, r2
 800b1d4:	4618      	mov	r0, r3
 800b1d6:	f7f8 faa7 	bl	8003728 <HAL_PCD_EP_Close>
 800b1da:	4603      	mov	r3, r0
 800b1dc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b1de:	7bfb      	ldrb	r3, [r7, #15]
 800b1e0:	4618      	mov	r0, r3
 800b1e2:	f000 f8fd 	bl	800b3e0 <USBD_Get_USB_Status>
 800b1e6:	4603      	mov	r3, r0
 800b1e8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b1ea:	7bbb      	ldrb	r3, [r7, #14]
}
 800b1ec:	4618      	mov	r0, r3
 800b1ee:	3710      	adds	r7, #16
 800b1f0:	46bd      	mov	sp, r7
 800b1f2:	bd80      	pop	{r7, pc}

0800b1f4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b1f4:	b580      	push	{r7, lr}
 800b1f6:	b084      	sub	sp, #16
 800b1f8:	af00      	add	r7, sp, #0
 800b1fa:	6078      	str	r0, [r7, #4]
 800b1fc:	460b      	mov	r3, r1
 800b1fe:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b200:	2300      	movs	r3, #0
 800b202:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b204:	2300      	movs	r3, #0
 800b206:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b20e:	78fa      	ldrb	r2, [r7, #3]
 800b210:	4611      	mov	r1, r2
 800b212:	4618      	mov	r0, r3
 800b214:	f7f8 fb7f 	bl	8003916 <HAL_PCD_EP_SetStall>
 800b218:	4603      	mov	r3, r0
 800b21a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b21c:	7bfb      	ldrb	r3, [r7, #15]
 800b21e:	4618      	mov	r0, r3
 800b220:	f000 f8de 	bl	800b3e0 <USBD_Get_USB_Status>
 800b224:	4603      	mov	r3, r0
 800b226:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b228:	7bbb      	ldrb	r3, [r7, #14]
}
 800b22a:	4618      	mov	r0, r3
 800b22c:	3710      	adds	r7, #16
 800b22e:	46bd      	mov	sp, r7
 800b230:	bd80      	pop	{r7, pc}

0800b232 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b232:	b580      	push	{r7, lr}
 800b234:	b084      	sub	sp, #16
 800b236:	af00      	add	r7, sp, #0
 800b238:	6078      	str	r0, [r7, #4]
 800b23a:	460b      	mov	r3, r1
 800b23c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b23e:	2300      	movs	r3, #0
 800b240:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b242:	2300      	movs	r3, #0
 800b244:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b24c:	78fa      	ldrb	r2, [r7, #3]
 800b24e:	4611      	mov	r1, r2
 800b250:	4618      	mov	r0, r3
 800b252:	f7f8 fbc4 	bl	80039de <HAL_PCD_EP_ClrStall>
 800b256:	4603      	mov	r3, r0
 800b258:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b25a:	7bfb      	ldrb	r3, [r7, #15]
 800b25c:	4618      	mov	r0, r3
 800b25e:	f000 f8bf 	bl	800b3e0 <USBD_Get_USB_Status>
 800b262:	4603      	mov	r3, r0
 800b264:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b266:	7bbb      	ldrb	r3, [r7, #14]
}
 800b268:	4618      	mov	r0, r3
 800b26a:	3710      	adds	r7, #16
 800b26c:	46bd      	mov	sp, r7
 800b26e:	bd80      	pop	{r7, pc}

0800b270 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b270:	b480      	push	{r7}
 800b272:	b085      	sub	sp, #20
 800b274:	af00      	add	r7, sp, #0
 800b276:	6078      	str	r0, [r7, #4]
 800b278:	460b      	mov	r3, r1
 800b27a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b282:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800b284:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b288:	2b00      	cmp	r3, #0
 800b28a:	da0b      	bge.n	800b2a4 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800b28c:	78fb      	ldrb	r3, [r7, #3]
 800b28e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b292:	68f9      	ldr	r1, [r7, #12]
 800b294:	4613      	mov	r3, r2
 800b296:	00db      	lsls	r3, r3, #3
 800b298:	4413      	add	r3, r2
 800b29a:	009b      	lsls	r3, r3, #2
 800b29c:	440b      	add	r3, r1
 800b29e:	333e      	adds	r3, #62	; 0x3e
 800b2a0:	781b      	ldrb	r3, [r3, #0]
 800b2a2:	e00b      	b.n	800b2bc <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800b2a4:	78fb      	ldrb	r3, [r7, #3]
 800b2a6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b2aa:	68f9      	ldr	r1, [r7, #12]
 800b2ac:	4613      	mov	r3, r2
 800b2ae:	00db      	lsls	r3, r3, #3
 800b2b0:	4413      	add	r3, r2
 800b2b2:	009b      	lsls	r3, r3, #2
 800b2b4:	440b      	add	r3, r1
 800b2b6:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800b2ba:	781b      	ldrb	r3, [r3, #0]
  }
}
 800b2bc:	4618      	mov	r0, r3
 800b2be:	3714      	adds	r7, #20
 800b2c0:	46bd      	mov	sp, r7
 800b2c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2c6:	4770      	bx	lr

0800b2c8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800b2c8:	b580      	push	{r7, lr}
 800b2ca:	b084      	sub	sp, #16
 800b2cc:	af00      	add	r7, sp, #0
 800b2ce:	6078      	str	r0, [r7, #4]
 800b2d0:	460b      	mov	r3, r1
 800b2d2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b2d4:	2300      	movs	r3, #0
 800b2d6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b2d8:	2300      	movs	r3, #0
 800b2da:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b2e2:	78fa      	ldrb	r2, [r7, #3]
 800b2e4:	4611      	mov	r1, r2
 800b2e6:	4618      	mov	r0, r3
 800b2e8:	f7f8 f991 	bl	800360e <HAL_PCD_SetAddress>
 800b2ec:	4603      	mov	r3, r0
 800b2ee:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b2f0:	7bfb      	ldrb	r3, [r7, #15]
 800b2f2:	4618      	mov	r0, r3
 800b2f4:	f000 f874 	bl	800b3e0 <USBD_Get_USB_Status>
 800b2f8:	4603      	mov	r3, r0
 800b2fa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b2fc:	7bbb      	ldrb	r3, [r7, #14]
}
 800b2fe:	4618      	mov	r0, r3
 800b300:	3710      	adds	r7, #16
 800b302:	46bd      	mov	sp, r7
 800b304:	bd80      	pop	{r7, pc}

0800b306 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800b306:	b580      	push	{r7, lr}
 800b308:	b086      	sub	sp, #24
 800b30a:	af00      	add	r7, sp, #0
 800b30c:	60f8      	str	r0, [r7, #12]
 800b30e:	607a      	str	r2, [r7, #4]
 800b310:	603b      	str	r3, [r7, #0]
 800b312:	460b      	mov	r3, r1
 800b314:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b316:	2300      	movs	r3, #0
 800b318:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b31a:	2300      	movs	r3, #0
 800b31c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800b31e:	68fb      	ldr	r3, [r7, #12]
 800b320:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800b324:	7af9      	ldrb	r1, [r7, #11]
 800b326:	683b      	ldr	r3, [r7, #0]
 800b328:	687a      	ldr	r2, [r7, #4]
 800b32a:	f7f8 faaa 	bl	8003882 <HAL_PCD_EP_Transmit>
 800b32e:	4603      	mov	r3, r0
 800b330:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b332:	7dfb      	ldrb	r3, [r7, #23]
 800b334:	4618      	mov	r0, r3
 800b336:	f000 f853 	bl	800b3e0 <USBD_Get_USB_Status>
 800b33a:	4603      	mov	r3, r0
 800b33c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800b33e:	7dbb      	ldrb	r3, [r7, #22]
}
 800b340:	4618      	mov	r0, r3
 800b342:	3718      	adds	r7, #24
 800b344:	46bd      	mov	sp, r7
 800b346:	bd80      	pop	{r7, pc}

0800b348 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800b348:	b580      	push	{r7, lr}
 800b34a:	b086      	sub	sp, #24
 800b34c:	af00      	add	r7, sp, #0
 800b34e:	60f8      	str	r0, [r7, #12]
 800b350:	607a      	str	r2, [r7, #4]
 800b352:	603b      	str	r3, [r7, #0]
 800b354:	460b      	mov	r3, r1
 800b356:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b358:	2300      	movs	r3, #0
 800b35a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b35c:	2300      	movs	r3, #0
 800b35e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800b360:	68fb      	ldr	r3, [r7, #12]
 800b362:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800b366:	7af9      	ldrb	r1, [r7, #11]
 800b368:	683b      	ldr	r3, [r7, #0]
 800b36a:	687a      	ldr	r2, [r7, #4]
 800b36c:	f7f8 fa26 	bl	80037bc <HAL_PCD_EP_Receive>
 800b370:	4603      	mov	r3, r0
 800b372:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b374:	7dfb      	ldrb	r3, [r7, #23]
 800b376:	4618      	mov	r0, r3
 800b378:	f000 f832 	bl	800b3e0 <USBD_Get_USB_Status>
 800b37c:	4603      	mov	r3, r0
 800b37e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800b380:	7dbb      	ldrb	r3, [r7, #22]
}
 800b382:	4618      	mov	r0, r3
 800b384:	3718      	adds	r7, #24
 800b386:	46bd      	mov	sp, r7
 800b388:	bd80      	pop	{r7, pc}

0800b38a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b38a:	b580      	push	{r7, lr}
 800b38c:	b082      	sub	sp, #8
 800b38e:	af00      	add	r7, sp, #0
 800b390:	6078      	str	r0, [r7, #4]
 800b392:	460b      	mov	r3, r1
 800b394:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800b396:	687b      	ldr	r3, [r7, #4]
 800b398:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b39c:	78fa      	ldrb	r2, [r7, #3]
 800b39e:	4611      	mov	r1, r2
 800b3a0:	4618      	mov	r0, r3
 800b3a2:	f7f8 fa56 	bl	8003852 <HAL_PCD_EP_GetRxCount>
 800b3a6:	4603      	mov	r3, r0
}
 800b3a8:	4618      	mov	r0, r3
 800b3aa:	3708      	adds	r7, #8
 800b3ac:	46bd      	mov	sp, r7
 800b3ae:	bd80      	pop	{r7, pc}

0800b3b0 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800b3b0:	b480      	push	{r7}
 800b3b2:	b083      	sub	sp, #12
 800b3b4:	af00      	add	r7, sp, #0
 800b3b6:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800b3b8:	4b03      	ldr	r3, [pc, #12]	; (800b3c8 <USBD_static_malloc+0x18>)
}
 800b3ba:	4618      	mov	r0, r3
 800b3bc:	370c      	adds	r7, #12
 800b3be:	46bd      	mov	sp, r7
 800b3c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3c4:	4770      	bx	lr
 800b3c6:	bf00      	nop
 800b3c8:	20002224 	.word	0x20002224

0800b3cc <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800b3cc:	b480      	push	{r7}
 800b3ce:	b083      	sub	sp, #12
 800b3d0:	af00      	add	r7, sp, #0
 800b3d2:	6078      	str	r0, [r7, #4]

}
 800b3d4:	bf00      	nop
 800b3d6:	370c      	adds	r7, #12
 800b3d8:	46bd      	mov	sp, r7
 800b3da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3de:	4770      	bx	lr

0800b3e0 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800b3e0:	b480      	push	{r7}
 800b3e2:	b085      	sub	sp, #20
 800b3e4:	af00      	add	r7, sp, #0
 800b3e6:	4603      	mov	r3, r0
 800b3e8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b3ea:	2300      	movs	r3, #0
 800b3ec:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800b3ee:	79fb      	ldrb	r3, [r7, #7]
 800b3f0:	2b03      	cmp	r3, #3
 800b3f2:	d817      	bhi.n	800b424 <USBD_Get_USB_Status+0x44>
 800b3f4:	a201      	add	r2, pc, #4	; (adr r2, 800b3fc <USBD_Get_USB_Status+0x1c>)
 800b3f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b3fa:	bf00      	nop
 800b3fc:	0800b40d 	.word	0x0800b40d
 800b400:	0800b413 	.word	0x0800b413
 800b404:	0800b419 	.word	0x0800b419
 800b408:	0800b41f 	.word	0x0800b41f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800b40c:	2300      	movs	r3, #0
 800b40e:	73fb      	strb	r3, [r7, #15]
    break;
 800b410:	e00b      	b.n	800b42a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800b412:	2303      	movs	r3, #3
 800b414:	73fb      	strb	r3, [r7, #15]
    break;
 800b416:	e008      	b.n	800b42a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800b418:	2301      	movs	r3, #1
 800b41a:	73fb      	strb	r3, [r7, #15]
    break;
 800b41c:	e005      	b.n	800b42a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800b41e:	2303      	movs	r3, #3
 800b420:	73fb      	strb	r3, [r7, #15]
    break;
 800b422:	e002      	b.n	800b42a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800b424:	2303      	movs	r3, #3
 800b426:	73fb      	strb	r3, [r7, #15]
    break;
 800b428:	bf00      	nop
  }
  return usb_status;
 800b42a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b42c:	4618      	mov	r0, r3
 800b42e:	3714      	adds	r7, #20
 800b430:	46bd      	mov	sp, r7
 800b432:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b436:	4770      	bx	lr

0800b438 <__errno>:
 800b438:	4b01      	ldr	r3, [pc, #4]	; (800b440 <__errno+0x8>)
 800b43a:	6818      	ldr	r0, [r3, #0]
 800b43c:	4770      	bx	lr
 800b43e:	bf00      	nop
 800b440:	2000010c 	.word	0x2000010c

0800b444 <__libc_init_array>:
 800b444:	b570      	push	{r4, r5, r6, lr}
 800b446:	4d0d      	ldr	r5, [pc, #52]	; (800b47c <__libc_init_array+0x38>)
 800b448:	4c0d      	ldr	r4, [pc, #52]	; (800b480 <__libc_init_array+0x3c>)
 800b44a:	1b64      	subs	r4, r4, r5
 800b44c:	10a4      	asrs	r4, r4, #2
 800b44e:	2600      	movs	r6, #0
 800b450:	42a6      	cmp	r6, r4
 800b452:	d109      	bne.n	800b468 <__libc_init_array+0x24>
 800b454:	4d0b      	ldr	r5, [pc, #44]	; (800b484 <__libc_init_array+0x40>)
 800b456:	4c0c      	ldr	r4, [pc, #48]	; (800b488 <__libc_init_array+0x44>)
 800b458:	f000 fc84 	bl	800bd64 <_init>
 800b45c:	1b64      	subs	r4, r4, r5
 800b45e:	10a4      	asrs	r4, r4, #2
 800b460:	2600      	movs	r6, #0
 800b462:	42a6      	cmp	r6, r4
 800b464:	d105      	bne.n	800b472 <__libc_init_array+0x2e>
 800b466:	bd70      	pop	{r4, r5, r6, pc}
 800b468:	f855 3b04 	ldr.w	r3, [r5], #4
 800b46c:	4798      	blx	r3
 800b46e:	3601      	adds	r6, #1
 800b470:	e7ee      	b.n	800b450 <__libc_init_array+0xc>
 800b472:	f855 3b04 	ldr.w	r3, [r5], #4
 800b476:	4798      	blx	r3
 800b478:	3601      	adds	r6, #1
 800b47a:	e7f2      	b.n	800b462 <__libc_init_array+0x1e>
 800b47c:	0800be68 	.word	0x0800be68
 800b480:	0800be68 	.word	0x0800be68
 800b484:	0800be68 	.word	0x0800be68
 800b488:	0800be6c 	.word	0x0800be6c

0800b48c <memcmp>:
 800b48c:	b510      	push	{r4, lr}
 800b48e:	3901      	subs	r1, #1
 800b490:	4402      	add	r2, r0
 800b492:	4290      	cmp	r0, r2
 800b494:	d101      	bne.n	800b49a <memcmp+0xe>
 800b496:	2000      	movs	r0, #0
 800b498:	e005      	b.n	800b4a6 <memcmp+0x1a>
 800b49a:	7803      	ldrb	r3, [r0, #0]
 800b49c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800b4a0:	42a3      	cmp	r3, r4
 800b4a2:	d001      	beq.n	800b4a8 <memcmp+0x1c>
 800b4a4:	1b18      	subs	r0, r3, r4
 800b4a6:	bd10      	pop	{r4, pc}
 800b4a8:	3001      	adds	r0, #1
 800b4aa:	e7f2      	b.n	800b492 <memcmp+0x6>

0800b4ac <memcpy>:
 800b4ac:	440a      	add	r2, r1
 800b4ae:	4291      	cmp	r1, r2
 800b4b0:	f100 33ff 	add.w	r3, r0, #4294967295
 800b4b4:	d100      	bne.n	800b4b8 <memcpy+0xc>
 800b4b6:	4770      	bx	lr
 800b4b8:	b510      	push	{r4, lr}
 800b4ba:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b4be:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b4c2:	4291      	cmp	r1, r2
 800b4c4:	d1f9      	bne.n	800b4ba <memcpy+0xe>
 800b4c6:	bd10      	pop	{r4, pc}

0800b4c8 <memset>:
 800b4c8:	4402      	add	r2, r0
 800b4ca:	4603      	mov	r3, r0
 800b4cc:	4293      	cmp	r3, r2
 800b4ce:	d100      	bne.n	800b4d2 <memset+0xa>
 800b4d0:	4770      	bx	lr
 800b4d2:	f803 1b01 	strb.w	r1, [r3], #1
 800b4d6:	e7f9      	b.n	800b4cc <memset+0x4>

0800b4d8 <setvbuf>:
 800b4d8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b4dc:	461d      	mov	r5, r3
 800b4de:	4b5d      	ldr	r3, [pc, #372]	; (800b654 <setvbuf+0x17c>)
 800b4e0:	681f      	ldr	r7, [r3, #0]
 800b4e2:	4604      	mov	r4, r0
 800b4e4:	460e      	mov	r6, r1
 800b4e6:	4690      	mov	r8, r2
 800b4e8:	b127      	cbz	r7, 800b4f4 <setvbuf+0x1c>
 800b4ea:	69bb      	ldr	r3, [r7, #24]
 800b4ec:	b913      	cbnz	r3, 800b4f4 <setvbuf+0x1c>
 800b4ee:	4638      	mov	r0, r7
 800b4f0:	f000 f9d2 	bl	800b898 <__sinit>
 800b4f4:	4b58      	ldr	r3, [pc, #352]	; (800b658 <setvbuf+0x180>)
 800b4f6:	429c      	cmp	r4, r3
 800b4f8:	d167      	bne.n	800b5ca <setvbuf+0xf2>
 800b4fa:	687c      	ldr	r4, [r7, #4]
 800b4fc:	f1b8 0f02 	cmp.w	r8, #2
 800b500:	d006      	beq.n	800b510 <setvbuf+0x38>
 800b502:	f1b8 0f01 	cmp.w	r8, #1
 800b506:	f200 809f 	bhi.w	800b648 <setvbuf+0x170>
 800b50a:	2d00      	cmp	r5, #0
 800b50c:	f2c0 809c 	blt.w	800b648 <setvbuf+0x170>
 800b510:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b512:	07db      	lsls	r3, r3, #31
 800b514:	d405      	bmi.n	800b522 <setvbuf+0x4a>
 800b516:	89a3      	ldrh	r3, [r4, #12]
 800b518:	0598      	lsls	r0, r3, #22
 800b51a:	d402      	bmi.n	800b522 <setvbuf+0x4a>
 800b51c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b51e:	f000 fa59 	bl	800b9d4 <__retarget_lock_acquire_recursive>
 800b522:	4621      	mov	r1, r4
 800b524:	4638      	mov	r0, r7
 800b526:	f000 f923 	bl	800b770 <_fflush_r>
 800b52a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b52c:	b141      	cbz	r1, 800b540 <setvbuf+0x68>
 800b52e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b532:	4299      	cmp	r1, r3
 800b534:	d002      	beq.n	800b53c <setvbuf+0x64>
 800b536:	4638      	mov	r0, r7
 800b538:	f000 fa7c 	bl	800ba34 <_free_r>
 800b53c:	2300      	movs	r3, #0
 800b53e:	6363      	str	r3, [r4, #52]	; 0x34
 800b540:	2300      	movs	r3, #0
 800b542:	61a3      	str	r3, [r4, #24]
 800b544:	6063      	str	r3, [r4, #4]
 800b546:	89a3      	ldrh	r3, [r4, #12]
 800b548:	0619      	lsls	r1, r3, #24
 800b54a:	d503      	bpl.n	800b554 <setvbuf+0x7c>
 800b54c:	6921      	ldr	r1, [r4, #16]
 800b54e:	4638      	mov	r0, r7
 800b550:	f000 fa70 	bl	800ba34 <_free_r>
 800b554:	89a3      	ldrh	r3, [r4, #12]
 800b556:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 800b55a:	f023 0303 	bic.w	r3, r3, #3
 800b55e:	f1b8 0f02 	cmp.w	r8, #2
 800b562:	81a3      	strh	r3, [r4, #12]
 800b564:	d06c      	beq.n	800b640 <setvbuf+0x168>
 800b566:	ab01      	add	r3, sp, #4
 800b568:	466a      	mov	r2, sp
 800b56a:	4621      	mov	r1, r4
 800b56c:	4638      	mov	r0, r7
 800b56e:	f000 fa33 	bl	800b9d8 <__swhatbuf_r>
 800b572:	89a3      	ldrh	r3, [r4, #12]
 800b574:	4318      	orrs	r0, r3
 800b576:	81a0      	strh	r0, [r4, #12]
 800b578:	2d00      	cmp	r5, #0
 800b57a:	d130      	bne.n	800b5de <setvbuf+0x106>
 800b57c:	9d00      	ldr	r5, [sp, #0]
 800b57e:	4628      	mov	r0, r5
 800b580:	f000 fa50 	bl	800ba24 <malloc>
 800b584:	4606      	mov	r6, r0
 800b586:	2800      	cmp	r0, #0
 800b588:	d155      	bne.n	800b636 <setvbuf+0x15e>
 800b58a:	f8dd 9000 	ldr.w	r9, [sp]
 800b58e:	45a9      	cmp	r9, r5
 800b590:	d14a      	bne.n	800b628 <setvbuf+0x150>
 800b592:	f04f 35ff 	mov.w	r5, #4294967295
 800b596:	2200      	movs	r2, #0
 800b598:	60a2      	str	r2, [r4, #8]
 800b59a:	f104 0247 	add.w	r2, r4, #71	; 0x47
 800b59e:	6022      	str	r2, [r4, #0]
 800b5a0:	6122      	str	r2, [r4, #16]
 800b5a2:	2201      	movs	r2, #1
 800b5a4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b5a8:	6162      	str	r2, [r4, #20]
 800b5aa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b5ac:	f043 0302 	orr.w	r3, r3, #2
 800b5b0:	07d2      	lsls	r2, r2, #31
 800b5b2:	81a3      	strh	r3, [r4, #12]
 800b5b4:	d405      	bmi.n	800b5c2 <setvbuf+0xea>
 800b5b6:	f413 7f00 	tst.w	r3, #512	; 0x200
 800b5ba:	d102      	bne.n	800b5c2 <setvbuf+0xea>
 800b5bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b5be:	f000 fa0a 	bl	800b9d6 <__retarget_lock_release_recursive>
 800b5c2:	4628      	mov	r0, r5
 800b5c4:	b003      	add	sp, #12
 800b5c6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b5ca:	4b24      	ldr	r3, [pc, #144]	; (800b65c <setvbuf+0x184>)
 800b5cc:	429c      	cmp	r4, r3
 800b5ce:	d101      	bne.n	800b5d4 <setvbuf+0xfc>
 800b5d0:	68bc      	ldr	r4, [r7, #8]
 800b5d2:	e793      	b.n	800b4fc <setvbuf+0x24>
 800b5d4:	4b22      	ldr	r3, [pc, #136]	; (800b660 <setvbuf+0x188>)
 800b5d6:	429c      	cmp	r4, r3
 800b5d8:	bf08      	it	eq
 800b5da:	68fc      	ldreq	r4, [r7, #12]
 800b5dc:	e78e      	b.n	800b4fc <setvbuf+0x24>
 800b5de:	2e00      	cmp	r6, #0
 800b5e0:	d0cd      	beq.n	800b57e <setvbuf+0xa6>
 800b5e2:	69bb      	ldr	r3, [r7, #24]
 800b5e4:	b913      	cbnz	r3, 800b5ec <setvbuf+0x114>
 800b5e6:	4638      	mov	r0, r7
 800b5e8:	f000 f956 	bl	800b898 <__sinit>
 800b5ec:	f1b8 0f01 	cmp.w	r8, #1
 800b5f0:	bf08      	it	eq
 800b5f2:	89a3      	ldrheq	r3, [r4, #12]
 800b5f4:	6026      	str	r6, [r4, #0]
 800b5f6:	bf04      	itt	eq
 800b5f8:	f043 0301 	orreq.w	r3, r3, #1
 800b5fc:	81a3      	strheq	r3, [r4, #12]
 800b5fe:	89a2      	ldrh	r2, [r4, #12]
 800b600:	f012 0308 	ands.w	r3, r2, #8
 800b604:	e9c4 6504 	strd	r6, r5, [r4, #16]
 800b608:	d01c      	beq.n	800b644 <setvbuf+0x16c>
 800b60a:	07d3      	lsls	r3, r2, #31
 800b60c:	bf41      	itttt	mi
 800b60e:	2300      	movmi	r3, #0
 800b610:	426d      	negmi	r5, r5
 800b612:	60a3      	strmi	r3, [r4, #8]
 800b614:	61a5      	strmi	r5, [r4, #24]
 800b616:	bf58      	it	pl
 800b618:	60a5      	strpl	r5, [r4, #8]
 800b61a:	6e65      	ldr	r5, [r4, #100]	; 0x64
 800b61c:	f015 0501 	ands.w	r5, r5, #1
 800b620:	d115      	bne.n	800b64e <setvbuf+0x176>
 800b622:	f412 7f00 	tst.w	r2, #512	; 0x200
 800b626:	e7c8      	b.n	800b5ba <setvbuf+0xe2>
 800b628:	4648      	mov	r0, r9
 800b62a:	f000 f9fb 	bl	800ba24 <malloc>
 800b62e:	4606      	mov	r6, r0
 800b630:	2800      	cmp	r0, #0
 800b632:	d0ae      	beq.n	800b592 <setvbuf+0xba>
 800b634:	464d      	mov	r5, r9
 800b636:	89a3      	ldrh	r3, [r4, #12]
 800b638:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b63c:	81a3      	strh	r3, [r4, #12]
 800b63e:	e7d0      	b.n	800b5e2 <setvbuf+0x10a>
 800b640:	2500      	movs	r5, #0
 800b642:	e7a8      	b.n	800b596 <setvbuf+0xbe>
 800b644:	60a3      	str	r3, [r4, #8]
 800b646:	e7e8      	b.n	800b61a <setvbuf+0x142>
 800b648:	f04f 35ff 	mov.w	r5, #4294967295
 800b64c:	e7b9      	b.n	800b5c2 <setvbuf+0xea>
 800b64e:	2500      	movs	r5, #0
 800b650:	e7b7      	b.n	800b5c2 <setvbuf+0xea>
 800b652:	bf00      	nop
 800b654:	2000010c 	.word	0x2000010c
 800b658:	0800be20 	.word	0x0800be20
 800b65c:	0800be40 	.word	0x0800be40
 800b660:	0800be00 	.word	0x0800be00

0800b664 <__sflush_r>:
 800b664:	898a      	ldrh	r2, [r1, #12]
 800b666:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b66a:	4605      	mov	r5, r0
 800b66c:	0710      	lsls	r0, r2, #28
 800b66e:	460c      	mov	r4, r1
 800b670:	d458      	bmi.n	800b724 <__sflush_r+0xc0>
 800b672:	684b      	ldr	r3, [r1, #4]
 800b674:	2b00      	cmp	r3, #0
 800b676:	dc05      	bgt.n	800b684 <__sflush_r+0x20>
 800b678:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b67a:	2b00      	cmp	r3, #0
 800b67c:	dc02      	bgt.n	800b684 <__sflush_r+0x20>
 800b67e:	2000      	movs	r0, #0
 800b680:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b684:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b686:	2e00      	cmp	r6, #0
 800b688:	d0f9      	beq.n	800b67e <__sflush_r+0x1a>
 800b68a:	2300      	movs	r3, #0
 800b68c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b690:	682f      	ldr	r7, [r5, #0]
 800b692:	602b      	str	r3, [r5, #0]
 800b694:	d032      	beq.n	800b6fc <__sflush_r+0x98>
 800b696:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b698:	89a3      	ldrh	r3, [r4, #12]
 800b69a:	075a      	lsls	r2, r3, #29
 800b69c:	d505      	bpl.n	800b6aa <__sflush_r+0x46>
 800b69e:	6863      	ldr	r3, [r4, #4]
 800b6a0:	1ac0      	subs	r0, r0, r3
 800b6a2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b6a4:	b10b      	cbz	r3, 800b6aa <__sflush_r+0x46>
 800b6a6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b6a8:	1ac0      	subs	r0, r0, r3
 800b6aa:	2300      	movs	r3, #0
 800b6ac:	4602      	mov	r2, r0
 800b6ae:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b6b0:	6a21      	ldr	r1, [r4, #32]
 800b6b2:	4628      	mov	r0, r5
 800b6b4:	47b0      	blx	r6
 800b6b6:	1c43      	adds	r3, r0, #1
 800b6b8:	89a3      	ldrh	r3, [r4, #12]
 800b6ba:	d106      	bne.n	800b6ca <__sflush_r+0x66>
 800b6bc:	6829      	ldr	r1, [r5, #0]
 800b6be:	291d      	cmp	r1, #29
 800b6c0:	d82c      	bhi.n	800b71c <__sflush_r+0xb8>
 800b6c2:	4a2a      	ldr	r2, [pc, #168]	; (800b76c <__sflush_r+0x108>)
 800b6c4:	40ca      	lsrs	r2, r1
 800b6c6:	07d6      	lsls	r6, r2, #31
 800b6c8:	d528      	bpl.n	800b71c <__sflush_r+0xb8>
 800b6ca:	2200      	movs	r2, #0
 800b6cc:	6062      	str	r2, [r4, #4]
 800b6ce:	04d9      	lsls	r1, r3, #19
 800b6d0:	6922      	ldr	r2, [r4, #16]
 800b6d2:	6022      	str	r2, [r4, #0]
 800b6d4:	d504      	bpl.n	800b6e0 <__sflush_r+0x7c>
 800b6d6:	1c42      	adds	r2, r0, #1
 800b6d8:	d101      	bne.n	800b6de <__sflush_r+0x7a>
 800b6da:	682b      	ldr	r3, [r5, #0]
 800b6dc:	b903      	cbnz	r3, 800b6e0 <__sflush_r+0x7c>
 800b6de:	6560      	str	r0, [r4, #84]	; 0x54
 800b6e0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b6e2:	602f      	str	r7, [r5, #0]
 800b6e4:	2900      	cmp	r1, #0
 800b6e6:	d0ca      	beq.n	800b67e <__sflush_r+0x1a>
 800b6e8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b6ec:	4299      	cmp	r1, r3
 800b6ee:	d002      	beq.n	800b6f6 <__sflush_r+0x92>
 800b6f0:	4628      	mov	r0, r5
 800b6f2:	f000 f99f 	bl	800ba34 <_free_r>
 800b6f6:	2000      	movs	r0, #0
 800b6f8:	6360      	str	r0, [r4, #52]	; 0x34
 800b6fa:	e7c1      	b.n	800b680 <__sflush_r+0x1c>
 800b6fc:	6a21      	ldr	r1, [r4, #32]
 800b6fe:	2301      	movs	r3, #1
 800b700:	4628      	mov	r0, r5
 800b702:	47b0      	blx	r6
 800b704:	1c41      	adds	r1, r0, #1
 800b706:	d1c7      	bne.n	800b698 <__sflush_r+0x34>
 800b708:	682b      	ldr	r3, [r5, #0]
 800b70a:	2b00      	cmp	r3, #0
 800b70c:	d0c4      	beq.n	800b698 <__sflush_r+0x34>
 800b70e:	2b1d      	cmp	r3, #29
 800b710:	d001      	beq.n	800b716 <__sflush_r+0xb2>
 800b712:	2b16      	cmp	r3, #22
 800b714:	d101      	bne.n	800b71a <__sflush_r+0xb6>
 800b716:	602f      	str	r7, [r5, #0]
 800b718:	e7b1      	b.n	800b67e <__sflush_r+0x1a>
 800b71a:	89a3      	ldrh	r3, [r4, #12]
 800b71c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b720:	81a3      	strh	r3, [r4, #12]
 800b722:	e7ad      	b.n	800b680 <__sflush_r+0x1c>
 800b724:	690f      	ldr	r7, [r1, #16]
 800b726:	2f00      	cmp	r7, #0
 800b728:	d0a9      	beq.n	800b67e <__sflush_r+0x1a>
 800b72a:	0793      	lsls	r3, r2, #30
 800b72c:	680e      	ldr	r6, [r1, #0]
 800b72e:	bf08      	it	eq
 800b730:	694b      	ldreq	r3, [r1, #20]
 800b732:	600f      	str	r7, [r1, #0]
 800b734:	bf18      	it	ne
 800b736:	2300      	movne	r3, #0
 800b738:	eba6 0807 	sub.w	r8, r6, r7
 800b73c:	608b      	str	r3, [r1, #8]
 800b73e:	f1b8 0f00 	cmp.w	r8, #0
 800b742:	dd9c      	ble.n	800b67e <__sflush_r+0x1a>
 800b744:	6a21      	ldr	r1, [r4, #32]
 800b746:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b748:	4643      	mov	r3, r8
 800b74a:	463a      	mov	r2, r7
 800b74c:	4628      	mov	r0, r5
 800b74e:	47b0      	blx	r6
 800b750:	2800      	cmp	r0, #0
 800b752:	dc06      	bgt.n	800b762 <__sflush_r+0xfe>
 800b754:	89a3      	ldrh	r3, [r4, #12]
 800b756:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b75a:	81a3      	strh	r3, [r4, #12]
 800b75c:	f04f 30ff 	mov.w	r0, #4294967295
 800b760:	e78e      	b.n	800b680 <__sflush_r+0x1c>
 800b762:	4407      	add	r7, r0
 800b764:	eba8 0800 	sub.w	r8, r8, r0
 800b768:	e7e9      	b.n	800b73e <__sflush_r+0xda>
 800b76a:	bf00      	nop
 800b76c:	20400001 	.word	0x20400001

0800b770 <_fflush_r>:
 800b770:	b538      	push	{r3, r4, r5, lr}
 800b772:	690b      	ldr	r3, [r1, #16]
 800b774:	4605      	mov	r5, r0
 800b776:	460c      	mov	r4, r1
 800b778:	b913      	cbnz	r3, 800b780 <_fflush_r+0x10>
 800b77a:	2500      	movs	r5, #0
 800b77c:	4628      	mov	r0, r5
 800b77e:	bd38      	pop	{r3, r4, r5, pc}
 800b780:	b118      	cbz	r0, 800b78a <_fflush_r+0x1a>
 800b782:	6983      	ldr	r3, [r0, #24]
 800b784:	b90b      	cbnz	r3, 800b78a <_fflush_r+0x1a>
 800b786:	f000 f887 	bl	800b898 <__sinit>
 800b78a:	4b14      	ldr	r3, [pc, #80]	; (800b7dc <_fflush_r+0x6c>)
 800b78c:	429c      	cmp	r4, r3
 800b78e:	d11b      	bne.n	800b7c8 <_fflush_r+0x58>
 800b790:	686c      	ldr	r4, [r5, #4]
 800b792:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b796:	2b00      	cmp	r3, #0
 800b798:	d0ef      	beq.n	800b77a <_fflush_r+0xa>
 800b79a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b79c:	07d0      	lsls	r0, r2, #31
 800b79e:	d404      	bmi.n	800b7aa <_fflush_r+0x3a>
 800b7a0:	0599      	lsls	r1, r3, #22
 800b7a2:	d402      	bmi.n	800b7aa <_fflush_r+0x3a>
 800b7a4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b7a6:	f000 f915 	bl	800b9d4 <__retarget_lock_acquire_recursive>
 800b7aa:	4628      	mov	r0, r5
 800b7ac:	4621      	mov	r1, r4
 800b7ae:	f7ff ff59 	bl	800b664 <__sflush_r>
 800b7b2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b7b4:	07da      	lsls	r2, r3, #31
 800b7b6:	4605      	mov	r5, r0
 800b7b8:	d4e0      	bmi.n	800b77c <_fflush_r+0xc>
 800b7ba:	89a3      	ldrh	r3, [r4, #12]
 800b7bc:	059b      	lsls	r3, r3, #22
 800b7be:	d4dd      	bmi.n	800b77c <_fflush_r+0xc>
 800b7c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b7c2:	f000 f908 	bl	800b9d6 <__retarget_lock_release_recursive>
 800b7c6:	e7d9      	b.n	800b77c <_fflush_r+0xc>
 800b7c8:	4b05      	ldr	r3, [pc, #20]	; (800b7e0 <_fflush_r+0x70>)
 800b7ca:	429c      	cmp	r4, r3
 800b7cc:	d101      	bne.n	800b7d2 <_fflush_r+0x62>
 800b7ce:	68ac      	ldr	r4, [r5, #8]
 800b7d0:	e7df      	b.n	800b792 <_fflush_r+0x22>
 800b7d2:	4b04      	ldr	r3, [pc, #16]	; (800b7e4 <_fflush_r+0x74>)
 800b7d4:	429c      	cmp	r4, r3
 800b7d6:	bf08      	it	eq
 800b7d8:	68ec      	ldreq	r4, [r5, #12]
 800b7da:	e7da      	b.n	800b792 <_fflush_r+0x22>
 800b7dc:	0800be20 	.word	0x0800be20
 800b7e0:	0800be40 	.word	0x0800be40
 800b7e4:	0800be00 	.word	0x0800be00

0800b7e8 <std>:
 800b7e8:	2300      	movs	r3, #0
 800b7ea:	b510      	push	{r4, lr}
 800b7ec:	4604      	mov	r4, r0
 800b7ee:	e9c0 3300 	strd	r3, r3, [r0]
 800b7f2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b7f6:	6083      	str	r3, [r0, #8]
 800b7f8:	8181      	strh	r1, [r0, #12]
 800b7fa:	6643      	str	r3, [r0, #100]	; 0x64
 800b7fc:	81c2      	strh	r2, [r0, #14]
 800b7fe:	6183      	str	r3, [r0, #24]
 800b800:	4619      	mov	r1, r3
 800b802:	2208      	movs	r2, #8
 800b804:	305c      	adds	r0, #92	; 0x5c
 800b806:	f7ff fe5f 	bl	800b4c8 <memset>
 800b80a:	4b05      	ldr	r3, [pc, #20]	; (800b820 <std+0x38>)
 800b80c:	6263      	str	r3, [r4, #36]	; 0x24
 800b80e:	4b05      	ldr	r3, [pc, #20]	; (800b824 <std+0x3c>)
 800b810:	62a3      	str	r3, [r4, #40]	; 0x28
 800b812:	4b05      	ldr	r3, [pc, #20]	; (800b828 <std+0x40>)
 800b814:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b816:	4b05      	ldr	r3, [pc, #20]	; (800b82c <std+0x44>)
 800b818:	6224      	str	r4, [r4, #32]
 800b81a:	6323      	str	r3, [r4, #48]	; 0x30
 800b81c:	bd10      	pop	{r4, pc}
 800b81e:	bf00      	nop
 800b820:	0800bc15 	.word	0x0800bc15
 800b824:	0800bc37 	.word	0x0800bc37
 800b828:	0800bc6f 	.word	0x0800bc6f
 800b82c:	0800bc93 	.word	0x0800bc93

0800b830 <_cleanup_r>:
 800b830:	4901      	ldr	r1, [pc, #4]	; (800b838 <_cleanup_r+0x8>)
 800b832:	f000 b8af 	b.w	800b994 <_fwalk_reent>
 800b836:	bf00      	nop
 800b838:	0800b771 	.word	0x0800b771

0800b83c <__sfmoreglue>:
 800b83c:	b570      	push	{r4, r5, r6, lr}
 800b83e:	2268      	movs	r2, #104	; 0x68
 800b840:	1e4d      	subs	r5, r1, #1
 800b842:	4355      	muls	r5, r2
 800b844:	460e      	mov	r6, r1
 800b846:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800b84a:	f000 f95f 	bl	800bb0c <_malloc_r>
 800b84e:	4604      	mov	r4, r0
 800b850:	b140      	cbz	r0, 800b864 <__sfmoreglue+0x28>
 800b852:	2100      	movs	r1, #0
 800b854:	e9c0 1600 	strd	r1, r6, [r0]
 800b858:	300c      	adds	r0, #12
 800b85a:	60a0      	str	r0, [r4, #8]
 800b85c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800b860:	f7ff fe32 	bl	800b4c8 <memset>
 800b864:	4620      	mov	r0, r4
 800b866:	bd70      	pop	{r4, r5, r6, pc}

0800b868 <__sfp_lock_acquire>:
 800b868:	4801      	ldr	r0, [pc, #4]	; (800b870 <__sfp_lock_acquire+0x8>)
 800b86a:	f000 b8b3 	b.w	800b9d4 <__retarget_lock_acquire_recursive>
 800b86e:	bf00      	nop
 800b870:	20002445 	.word	0x20002445

0800b874 <__sfp_lock_release>:
 800b874:	4801      	ldr	r0, [pc, #4]	; (800b87c <__sfp_lock_release+0x8>)
 800b876:	f000 b8ae 	b.w	800b9d6 <__retarget_lock_release_recursive>
 800b87a:	bf00      	nop
 800b87c:	20002445 	.word	0x20002445

0800b880 <__sinit_lock_acquire>:
 800b880:	4801      	ldr	r0, [pc, #4]	; (800b888 <__sinit_lock_acquire+0x8>)
 800b882:	f000 b8a7 	b.w	800b9d4 <__retarget_lock_acquire_recursive>
 800b886:	bf00      	nop
 800b888:	20002446 	.word	0x20002446

0800b88c <__sinit_lock_release>:
 800b88c:	4801      	ldr	r0, [pc, #4]	; (800b894 <__sinit_lock_release+0x8>)
 800b88e:	f000 b8a2 	b.w	800b9d6 <__retarget_lock_release_recursive>
 800b892:	bf00      	nop
 800b894:	20002446 	.word	0x20002446

0800b898 <__sinit>:
 800b898:	b510      	push	{r4, lr}
 800b89a:	4604      	mov	r4, r0
 800b89c:	f7ff fff0 	bl	800b880 <__sinit_lock_acquire>
 800b8a0:	69a3      	ldr	r3, [r4, #24]
 800b8a2:	b11b      	cbz	r3, 800b8ac <__sinit+0x14>
 800b8a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b8a8:	f7ff bff0 	b.w	800b88c <__sinit_lock_release>
 800b8ac:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800b8b0:	6523      	str	r3, [r4, #80]	; 0x50
 800b8b2:	4b13      	ldr	r3, [pc, #76]	; (800b900 <__sinit+0x68>)
 800b8b4:	4a13      	ldr	r2, [pc, #76]	; (800b904 <__sinit+0x6c>)
 800b8b6:	681b      	ldr	r3, [r3, #0]
 800b8b8:	62a2      	str	r2, [r4, #40]	; 0x28
 800b8ba:	42a3      	cmp	r3, r4
 800b8bc:	bf04      	itt	eq
 800b8be:	2301      	moveq	r3, #1
 800b8c0:	61a3      	streq	r3, [r4, #24]
 800b8c2:	4620      	mov	r0, r4
 800b8c4:	f000 f820 	bl	800b908 <__sfp>
 800b8c8:	6060      	str	r0, [r4, #4]
 800b8ca:	4620      	mov	r0, r4
 800b8cc:	f000 f81c 	bl	800b908 <__sfp>
 800b8d0:	60a0      	str	r0, [r4, #8]
 800b8d2:	4620      	mov	r0, r4
 800b8d4:	f000 f818 	bl	800b908 <__sfp>
 800b8d8:	2200      	movs	r2, #0
 800b8da:	60e0      	str	r0, [r4, #12]
 800b8dc:	2104      	movs	r1, #4
 800b8de:	6860      	ldr	r0, [r4, #4]
 800b8e0:	f7ff ff82 	bl	800b7e8 <std>
 800b8e4:	68a0      	ldr	r0, [r4, #8]
 800b8e6:	2201      	movs	r2, #1
 800b8e8:	2109      	movs	r1, #9
 800b8ea:	f7ff ff7d 	bl	800b7e8 <std>
 800b8ee:	68e0      	ldr	r0, [r4, #12]
 800b8f0:	2202      	movs	r2, #2
 800b8f2:	2112      	movs	r1, #18
 800b8f4:	f7ff ff78 	bl	800b7e8 <std>
 800b8f8:	2301      	movs	r3, #1
 800b8fa:	61a3      	str	r3, [r4, #24]
 800b8fc:	e7d2      	b.n	800b8a4 <__sinit+0xc>
 800b8fe:	bf00      	nop
 800b900:	0800bdfc 	.word	0x0800bdfc
 800b904:	0800b831 	.word	0x0800b831

0800b908 <__sfp>:
 800b908:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b90a:	4607      	mov	r7, r0
 800b90c:	f7ff ffac 	bl	800b868 <__sfp_lock_acquire>
 800b910:	4b1e      	ldr	r3, [pc, #120]	; (800b98c <__sfp+0x84>)
 800b912:	681e      	ldr	r6, [r3, #0]
 800b914:	69b3      	ldr	r3, [r6, #24]
 800b916:	b913      	cbnz	r3, 800b91e <__sfp+0x16>
 800b918:	4630      	mov	r0, r6
 800b91a:	f7ff ffbd 	bl	800b898 <__sinit>
 800b91e:	3648      	adds	r6, #72	; 0x48
 800b920:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800b924:	3b01      	subs	r3, #1
 800b926:	d503      	bpl.n	800b930 <__sfp+0x28>
 800b928:	6833      	ldr	r3, [r6, #0]
 800b92a:	b30b      	cbz	r3, 800b970 <__sfp+0x68>
 800b92c:	6836      	ldr	r6, [r6, #0]
 800b92e:	e7f7      	b.n	800b920 <__sfp+0x18>
 800b930:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800b934:	b9d5      	cbnz	r5, 800b96c <__sfp+0x64>
 800b936:	4b16      	ldr	r3, [pc, #88]	; (800b990 <__sfp+0x88>)
 800b938:	60e3      	str	r3, [r4, #12]
 800b93a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b93e:	6665      	str	r5, [r4, #100]	; 0x64
 800b940:	f000 f847 	bl	800b9d2 <__retarget_lock_init_recursive>
 800b944:	f7ff ff96 	bl	800b874 <__sfp_lock_release>
 800b948:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800b94c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800b950:	6025      	str	r5, [r4, #0]
 800b952:	61a5      	str	r5, [r4, #24]
 800b954:	2208      	movs	r2, #8
 800b956:	4629      	mov	r1, r5
 800b958:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800b95c:	f7ff fdb4 	bl	800b4c8 <memset>
 800b960:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800b964:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800b968:	4620      	mov	r0, r4
 800b96a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b96c:	3468      	adds	r4, #104	; 0x68
 800b96e:	e7d9      	b.n	800b924 <__sfp+0x1c>
 800b970:	2104      	movs	r1, #4
 800b972:	4638      	mov	r0, r7
 800b974:	f7ff ff62 	bl	800b83c <__sfmoreglue>
 800b978:	4604      	mov	r4, r0
 800b97a:	6030      	str	r0, [r6, #0]
 800b97c:	2800      	cmp	r0, #0
 800b97e:	d1d5      	bne.n	800b92c <__sfp+0x24>
 800b980:	f7ff ff78 	bl	800b874 <__sfp_lock_release>
 800b984:	230c      	movs	r3, #12
 800b986:	603b      	str	r3, [r7, #0]
 800b988:	e7ee      	b.n	800b968 <__sfp+0x60>
 800b98a:	bf00      	nop
 800b98c:	0800bdfc 	.word	0x0800bdfc
 800b990:	ffff0001 	.word	0xffff0001

0800b994 <_fwalk_reent>:
 800b994:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b998:	4606      	mov	r6, r0
 800b99a:	4688      	mov	r8, r1
 800b99c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800b9a0:	2700      	movs	r7, #0
 800b9a2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b9a6:	f1b9 0901 	subs.w	r9, r9, #1
 800b9aa:	d505      	bpl.n	800b9b8 <_fwalk_reent+0x24>
 800b9ac:	6824      	ldr	r4, [r4, #0]
 800b9ae:	2c00      	cmp	r4, #0
 800b9b0:	d1f7      	bne.n	800b9a2 <_fwalk_reent+0xe>
 800b9b2:	4638      	mov	r0, r7
 800b9b4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b9b8:	89ab      	ldrh	r3, [r5, #12]
 800b9ba:	2b01      	cmp	r3, #1
 800b9bc:	d907      	bls.n	800b9ce <_fwalk_reent+0x3a>
 800b9be:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b9c2:	3301      	adds	r3, #1
 800b9c4:	d003      	beq.n	800b9ce <_fwalk_reent+0x3a>
 800b9c6:	4629      	mov	r1, r5
 800b9c8:	4630      	mov	r0, r6
 800b9ca:	47c0      	blx	r8
 800b9cc:	4307      	orrs	r7, r0
 800b9ce:	3568      	adds	r5, #104	; 0x68
 800b9d0:	e7e9      	b.n	800b9a6 <_fwalk_reent+0x12>

0800b9d2 <__retarget_lock_init_recursive>:
 800b9d2:	4770      	bx	lr

0800b9d4 <__retarget_lock_acquire_recursive>:
 800b9d4:	4770      	bx	lr

0800b9d6 <__retarget_lock_release_recursive>:
 800b9d6:	4770      	bx	lr

0800b9d8 <__swhatbuf_r>:
 800b9d8:	b570      	push	{r4, r5, r6, lr}
 800b9da:	460e      	mov	r6, r1
 800b9dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b9e0:	2900      	cmp	r1, #0
 800b9e2:	b096      	sub	sp, #88	; 0x58
 800b9e4:	4614      	mov	r4, r2
 800b9e6:	461d      	mov	r5, r3
 800b9e8:	da08      	bge.n	800b9fc <__swhatbuf_r+0x24>
 800b9ea:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800b9ee:	2200      	movs	r2, #0
 800b9f0:	602a      	str	r2, [r5, #0]
 800b9f2:	061a      	lsls	r2, r3, #24
 800b9f4:	d410      	bmi.n	800ba18 <__swhatbuf_r+0x40>
 800b9f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b9fa:	e00e      	b.n	800ba1a <__swhatbuf_r+0x42>
 800b9fc:	466a      	mov	r2, sp
 800b9fe:	f000 f96f 	bl	800bce0 <_fstat_r>
 800ba02:	2800      	cmp	r0, #0
 800ba04:	dbf1      	blt.n	800b9ea <__swhatbuf_r+0x12>
 800ba06:	9a01      	ldr	r2, [sp, #4]
 800ba08:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800ba0c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800ba10:	425a      	negs	r2, r3
 800ba12:	415a      	adcs	r2, r3
 800ba14:	602a      	str	r2, [r5, #0]
 800ba16:	e7ee      	b.n	800b9f6 <__swhatbuf_r+0x1e>
 800ba18:	2340      	movs	r3, #64	; 0x40
 800ba1a:	2000      	movs	r0, #0
 800ba1c:	6023      	str	r3, [r4, #0]
 800ba1e:	b016      	add	sp, #88	; 0x58
 800ba20:	bd70      	pop	{r4, r5, r6, pc}
	...

0800ba24 <malloc>:
 800ba24:	4b02      	ldr	r3, [pc, #8]	; (800ba30 <malloc+0xc>)
 800ba26:	4601      	mov	r1, r0
 800ba28:	6818      	ldr	r0, [r3, #0]
 800ba2a:	f000 b86f 	b.w	800bb0c <_malloc_r>
 800ba2e:	bf00      	nop
 800ba30:	2000010c 	.word	0x2000010c

0800ba34 <_free_r>:
 800ba34:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ba36:	2900      	cmp	r1, #0
 800ba38:	d044      	beq.n	800bac4 <_free_r+0x90>
 800ba3a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ba3e:	9001      	str	r0, [sp, #4]
 800ba40:	2b00      	cmp	r3, #0
 800ba42:	f1a1 0404 	sub.w	r4, r1, #4
 800ba46:	bfb8      	it	lt
 800ba48:	18e4      	addlt	r4, r4, r3
 800ba4a:	f000 f96d 	bl	800bd28 <__malloc_lock>
 800ba4e:	4a1e      	ldr	r2, [pc, #120]	; (800bac8 <_free_r+0x94>)
 800ba50:	9801      	ldr	r0, [sp, #4]
 800ba52:	6813      	ldr	r3, [r2, #0]
 800ba54:	b933      	cbnz	r3, 800ba64 <_free_r+0x30>
 800ba56:	6063      	str	r3, [r4, #4]
 800ba58:	6014      	str	r4, [r2, #0]
 800ba5a:	b003      	add	sp, #12
 800ba5c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ba60:	f000 b968 	b.w	800bd34 <__malloc_unlock>
 800ba64:	42a3      	cmp	r3, r4
 800ba66:	d908      	bls.n	800ba7a <_free_r+0x46>
 800ba68:	6825      	ldr	r5, [r4, #0]
 800ba6a:	1961      	adds	r1, r4, r5
 800ba6c:	428b      	cmp	r3, r1
 800ba6e:	bf01      	itttt	eq
 800ba70:	6819      	ldreq	r1, [r3, #0]
 800ba72:	685b      	ldreq	r3, [r3, #4]
 800ba74:	1949      	addeq	r1, r1, r5
 800ba76:	6021      	streq	r1, [r4, #0]
 800ba78:	e7ed      	b.n	800ba56 <_free_r+0x22>
 800ba7a:	461a      	mov	r2, r3
 800ba7c:	685b      	ldr	r3, [r3, #4]
 800ba7e:	b10b      	cbz	r3, 800ba84 <_free_r+0x50>
 800ba80:	42a3      	cmp	r3, r4
 800ba82:	d9fa      	bls.n	800ba7a <_free_r+0x46>
 800ba84:	6811      	ldr	r1, [r2, #0]
 800ba86:	1855      	adds	r5, r2, r1
 800ba88:	42a5      	cmp	r5, r4
 800ba8a:	d10b      	bne.n	800baa4 <_free_r+0x70>
 800ba8c:	6824      	ldr	r4, [r4, #0]
 800ba8e:	4421      	add	r1, r4
 800ba90:	1854      	adds	r4, r2, r1
 800ba92:	42a3      	cmp	r3, r4
 800ba94:	6011      	str	r1, [r2, #0]
 800ba96:	d1e0      	bne.n	800ba5a <_free_r+0x26>
 800ba98:	681c      	ldr	r4, [r3, #0]
 800ba9a:	685b      	ldr	r3, [r3, #4]
 800ba9c:	6053      	str	r3, [r2, #4]
 800ba9e:	4421      	add	r1, r4
 800baa0:	6011      	str	r1, [r2, #0]
 800baa2:	e7da      	b.n	800ba5a <_free_r+0x26>
 800baa4:	d902      	bls.n	800baac <_free_r+0x78>
 800baa6:	230c      	movs	r3, #12
 800baa8:	6003      	str	r3, [r0, #0]
 800baaa:	e7d6      	b.n	800ba5a <_free_r+0x26>
 800baac:	6825      	ldr	r5, [r4, #0]
 800baae:	1961      	adds	r1, r4, r5
 800bab0:	428b      	cmp	r3, r1
 800bab2:	bf04      	itt	eq
 800bab4:	6819      	ldreq	r1, [r3, #0]
 800bab6:	685b      	ldreq	r3, [r3, #4]
 800bab8:	6063      	str	r3, [r4, #4]
 800baba:	bf04      	itt	eq
 800babc:	1949      	addeq	r1, r1, r5
 800babe:	6021      	streq	r1, [r4, #0]
 800bac0:	6054      	str	r4, [r2, #4]
 800bac2:	e7ca      	b.n	800ba5a <_free_r+0x26>
 800bac4:	b003      	add	sp, #12
 800bac6:	bd30      	pop	{r4, r5, pc}
 800bac8:	20002448 	.word	0x20002448

0800bacc <sbrk_aligned>:
 800bacc:	b570      	push	{r4, r5, r6, lr}
 800bace:	4e0e      	ldr	r6, [pc, #56]	; (800bb08 <sbrk_aligned+0x3c>)
 800bad0:	460c      	mov	r4, r1
 800bad2:	6831      	ldr	r1, [r6, #0]
 800bad4:	4605      	mov	r5, r0
 800bad6:	b911      	cbnz	r1, 800bade <sbrk_aligned+0x12>
 800bad8:	f000 f88c 	bl	800bbf4 <_sbrk_r>
 800badc:	6030      	str	r0, [r6, #0]
 800bade:	4621      	mov	r1, r4
 800bae0:	4628      	mov	r0, r5
 800bae2:	f000 f887 	bl	800bbf4 <_sbrk_r>
 800bae6:	1c43      	adds	r3, r0, #1
 800bae8:	d00a      	beq.n	800bb00 <sbrk_aligned+0x34>
 800baea:	1cc4      	adds	r4, r0, #3
 800baec:	f024 0403 	bic.w	r4, r4, #3
 800baf0:	42a0      	cmp	r0, r4
 800baf2:	d007      	beq.n	800bb04 <sbrk_aligned+0x38>
 800baf4:	1a21      	subs	r1, r4, r0
 800baf6:	4628      	mov	r0, r5
 800baf8:	f000 f87c 	bl	800bbf4 <_sbrk_r>
 800bafc:	3001      	adds	r0, #1
 800bafe:	d101      	bne.n	800bb04 <sbrk_aligned+0x38>
 800bb00:	f04f 34ff 	mov.w	r4, #4294967295
 800bb04:	4620      	mov	r0, r4
 800bb06:	bd70      	pop	{r4, r5, r6, pc}
 800bb08:	2000244c 	.word	0x2000244c

0800bb0c <_malloc_r>:
 800bb0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bb10:	1ccd      	adds	r5, r1, #3
 800bb12:	f025 0503 	bic.w	r5, r5, #3
 800bb16:	3508      	adds	r5, #8
 800bb18:	2d0c      	cmp	r5, #12
 800bb1a:	bf38      	it	cc
 800bb1c:	250c      	movcc	r5, #12
 800bb1e:	2d00      	cmp	r5, #0
 800bb20:	4607      	mov	r7, r0
 800bb22:	db01      	blt.n	800bb28 <_malloc_r+0x1c>
 800bb24:	42a9      	cmp	r1, r5
 800bb26:	d905      	bls.n	800bb34 <_malloc_r+0x28>
 800bb28:	230c      	movs	r3, #12
 800bb2a:	603b      	str	r3, [r7, #0]
 800bb2c:	2600      	movs	r6, #0
 800bb2e:	4630      	mov	r0, r6
 800bb30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bb34:	4e2e      	ldr	r6, [pc, #184]	; (800bbf0 <_malloc_r+0xe4>)
 800bb36:	f000 f8f7 	bl	800bd28 <__malloc_lock>
 800bb3a:	6833      	ldr	r3, [r6, #0]
 800bb3c:	461c      	mov	r4, r3
 800bb3e:	bb34      	cbnz	r4, 800bb8e <_malloc_r+0x82>
 800bb40:	4629      	mov	r1, r5
 800bb42:	4638      	mov	r0, r7
 800bb44:	f7ff ffc2 	bl	800bacc <sbrk_aligned>
 800bb48:	1c43      	adds	r3, r0, #1
 800bb4a:	4604      	mov	r4, r0
 800bb4c:	d14d      	bne.n	800bbea <_malloc_r+0xde>
 800bb4e:	6834      	ldr	r4, [r6, #0]
 800bb50:	4626      	mov	r6, r4
 800bb52:	2e00      	cmp	r6, #0
 800bb54:	d140      	bne.n	800bbd8 <_malloc_r+0xcc>
 800bb56:	6823      	ldr	r3, [r4, #0]
 800bb58:	4631      	mov	r1, r6
 800bb5a:	4638      	mov	r0, r7
 800bb5c:	eb04 0803 	add.w	r8, r4, r3
 800bb60:	f000 f848 	bl	800bbf4 <_sbrk_r>
 800bb64:	4580      	cmp	r8, r0
 800bb66:	d13a      	bne.n	800bbde <_malloc_r+0xd2>
 800bb68:	6821      	ldr	r1, [r4, #0]
 800bb6a:	3503      	adds	r5, #3
 800bb6c:	1a6d      	subs	r5, r5, r1
 800bb6e:	f025 0503 	bic.w	r5, r5, #3
 800bb72:	3508      	adds	r5, #8
 800bb74:	2d0c      	cmp	r5, #12
 800bb76:	bf38      	it	cc
 800bb78:	250c      	movcc	r5, #12
 800bb7a:	4629      	mov	r1, r5
 800bb7c:	4638      	mov	r0, r7
 800bb7e:	f7ff ffa5 	bl	800bacc <sbrk_aligned>
 800bb82:	3001      	adds	r0, #1
 800bb84:	d02b      	beq.n	800bbde <_malloc_r+0xd2>
 800bb86:	6823      	ldr	r3, [r4, #0]
 800bb88:	442b      	add	r3, r5
 800bb8a:	6023      	str	r3, [r4, #0]
 800bb8c:	e00e      	b.n	800bbac <_malloc_r+0xa0>
 800bb8e:	6822      	ldr	r2, [r4, #0]
 800bb90:	1b52      	subs	r2, r2, r5
 800bb92:	d41e      	bmi.n	800bbd2 <_malloc_r+0xc6>
 800bb94:	2a0b      	cmp	r2, #11
 800bb96:	d916      	bls.n	800bbc6 <_malloc_r+0xba>
 800bb98:	1961      	adds	r1, r4, r5
 800bb9a:	42a3      	cmp	r3, r4
 800bb9c:	6025      	str	r5, [r4, #0]
 800bb9e:	bf18      	it	ne
 800bba0:	6059      	strne	r1, [r3, #4]
 800bba2:	6863      	ldr	r3, [r4, #4]
 800bba4:	bf08      	it	eq
 800bba6:	6031      	streq	r1, [r6, #0]
 800bba8:	5162      	str	r2, [r4, r5]
 800bbaa:	604b      	str	r3, [r1, #4]
 800bbac:	4638      	mov	r0, r7
 800bbae:	f104 060b 	add.w	r6, r4, #11
 800bbb2:	f000 f8bf 	bl	800bd34 <__malloc_unlock>
 800bbb6:	f026 0607 	bic.w	r6, r6, #7
 800bbba:	1d23      	adds	r3, r4, #4
 800bbbc:	1af2      	subs	r2, r6, r3
 800bbbe:	d0b6      	beq.n	800bb2e <_malloc_r+0x22>
 800bbc0:	1b9b      	subs	r3, r3, r6
 800bbc2:	50a3      	str	r3, [r4, r2]
 800bbc4:	e7b3      	b.n	800bb2e <_malloc_r+0x22>
 800bbc6:	6862      	ldr	r2, [r4, #4]
 800bbc8:	42a3      	cmp	r3, r4
 800bbca:	bf0c      	ite	eq
 800bbcc:	6032      	streq	r2, [r6, #0]
 800bbce:	605a      	strne	r2, [r3, #4]
 800bbd0:	e7ec      	b.n	800bbac <_malloc_r+0xa0>
 800bbd2:	4623      	mov	r3, r4
 800bbd4:	6864      	ldr	r4, [r4, #4]
 800bbd6:	e7b2      	b.n	800bb3e <_malloc_r+0x32>
 800bbd8:	4634      	mov	r4, r6
 800bbda:	6876      	ldr	r6, [r6, #4]
 800bbdc:	e7b9      	b.n	800bb52 <_malloc_r+0x46>
 800bbde:	230c      	movs	r3, #12
 800bbe0:	603b      	str	r3, [r7, #0]
 800bbe2:	4638      	mov	r0, r7
 800bbe4:	f000 f8a6 	bl	800bd34 <__malloc_unlock>
 800bbe8:	e7a1      	b.n	800bb2e <_malloc_r+0x22>
 800bbea:	6025      	str	r5, [r4, #0]
 800bbec:	e7de      	b.n	800bbac <_malloc_r+0xa0>
 800bbee:	bf00      	nop
 800bbf0:	20002448 	.word	0x20002448

0800bbf4 <_sbrk_r>:
 800bbf4:	b538      	push	{r3, r4, r5, lr}
 800bbf6:	4d06      	ldr	r5, [pc, #24]	; (800bc10 <_sbrk_r+0x1c>)
 800bbf8:	2300      	movs	r3, #0
 800bbfa:	4604      	mov	r4, r0
 800bbfc:	4608      	mov	r0, r1
 800bbfe:	602b      	str	r3, [r5, #0]
 800bc00:	f7f5 ff2c 	bl	8001a5c <_sbrk>
 800bc04:	1c43      	adds	r3, r0, #1
 800bc06:	d102      	bne.n	800bc0e <_sbrk_r+0x1a>
 800bc08:	682b      	ldr	r3, [r5, #0]
 800bc0a:	b103      	cbz	r3, 800bc0e <_sbrk_r+0x1a>
 800bc0c:	6023      	str	r3, [r4, #0]
 800bc0e:	bd38      	pop	{r3, r4, r5, pc}
 800bc10:	20002450 	.word	0x20002450

0800bc14 <__sread>:
 800bc14:	b510      	push	{r4, lr}
 800bc16:	460c      	mov	r4, r1
 800bc18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bc1c:	f000 f890 	bl	800bd40 <_read_r>
 800bc20:	2800      	cmp	r0, #0
 800bc22:	bfab      	itete	ge
 800bc24:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800bc26:	89a3      	ldrhlt	r3, [r4, #12]
 800bc28:	181b      	addge	r3, r3, r0
 800bc2a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800bc2e:	bfac      	ite	ge
 800bc30:	6563      	strge	r3, [r4, #84]	; 0x54
 800bc32:	81a3      	strhlt	r3, [r4, #12]
 800bc34:	bd10      	pop	{r4, pc}

0800bc36 <__swrite>:
 800bc36:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bc3a:	461f      	mov	r7, r3
 800bc3c:	898b      	ldrh	r3, [r1, #12]
 800bc3e:	05db      	lsls	r3, r3, #23
 800bc40:	4605      	mov	r5, r0
 800bc42:	460c      	mov	r4, r1
 800bc44:	4616      	mov	r6, r2
 800bc46:	d505      	bpl.n	800bc54 <__swrite+0x1e>
 800bc48:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bc4c:	2302      	movs	r3, #2
 800bc4e:	2200      	movs	r2, #0
 800bc50:	f000 f858 	bl	800bd04 <_lseek_r>
 800bc54:	89a3      	ldrh	r3, [r4, #12]
 800bc56:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bc5a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800bc5e:	81a3      	strh	r3, [r4, #12]
 800bc60:	4632      	mov	r2, r6
 800bc62:	463b      	mov	r3, r7
 800bc64:	4628      	mov	r0, r5
 800bc66:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bc6a:	f000 b817 	b.w	800bc9c <_write_r>

0800bc6e <__sseek>:
 800bc6e:	b510      	push	{r4, lr}
 800bc70:	460c      	mov	r4, r1
 800bc72:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bc76:	f000 f845 	bl	800bd04 <_lseek_r>
 800bc7a:	1c43      	adds	r3, r0, #1
 800bc7c:	89a3      	ldrh	r3, [r4, #12]
 800bc7e:	bf15      	itete	ne
 800bc80:	6560      	strne	r0, [r4, #84]	; 0x54
 800bc82:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800bc86:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800bc8a:	81a3      	strheq	r3, [r4, #12]
 800bc8c:	bf18      	it	ne
 800bc8e:	81a3      	strhne	r3, [r4, #12]
 800bc90:	bd10      	pop	{r4, pc}

0800bc92 <__sclose>:
 800bc92:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bc96:	f000 b813 	b.w	800bcc0 <_close_r>
	...

0800bc9c <_write_r>:
 800bc9c:	b538      	push	{r3, r4, r5, lr}
 800bc9e:	4d07      	ldr	r5, [pc, #28]	; (800bcbc <_write_r+0x20>)
 800bca0:	4604      	mov	r4, r0
 800bca2:	4608      	mov	r0, r1
 800bca4:	4611      	mov	r1, r2
 800bca6:	2200      	movs	r2, #0
 800bca8:	602a      	str	r2, [r5, #0]
 800bcaa:	461a      	mov	r2, r3
 800bcac:	f7f5 fc7a 	bl	80015a4 <_write>
 800bcb0:	1c43      	adds	r3, r0, #1
 800bcb2:	d102      	bne.n	800bcba <_write_r+0x1e>
 800bcb4:	682b      	ldr	r3, [r5, #0]
 800bcb6:	b103      	cbz	r3, 800bcba <_write_r+0x1e>
 800bcb8:	6023      	str	r3, [r4, #0]
 800bcba:	bd38      	pop	{r3, r4, r5, pc}
 800bcbc:	20002450 	.word	0x20002450

0800bcc0 <_close_r>:
 800bcc0:	b538      	push	{r3, r4, r5, lr}
 800bcc2:	4d06      	ldr	r5, [pc, #24]	; (800bcdc <_close_r+0x1c>)
 800bcc4:	2300      	movs	r3, #0
 800bcc6:	4604      	mov	r4, r0
 800bcc8:	4608      	mov	r0, r1
 800bcca:	602b      	str	r3, [r5, #0]
 800bccc:	f7f5 fc96 	bl	80015fc <_close>
 800bcd0:	1c43      	adds	r3, r0, #1
 800bcd2:	d102      	bne.n	800bcda <_close_r+0x1a>
 800bcd4:	682b      	ldr	r3, [r5, #0]
 800bcd6:	b103      	cbz	r3, 800bcda <_close_r+0x1a>
 800bcd8:	6023      	str	r3, [r4, #0]
 800bcda:	bd38      	pop	{r3, r4, r5, pc}
 800bcdc:	20002450 	.word	0x20002450

0800bce0 <_fstat_r>:
 800bce0:	b538      	push	{r3, r4, r5, lr}
 800bce2:	4d07      	ldr	r5, [pc, #28]	; (800bd00 <_fstat_r+0x20>)
 800bce4:	2300      	movs	r3, #0
 800bce6:	4604      	mov	r4, r0
 800bce8:	4608      	mov	r0, r1
 800bcea:	4611      	mov	r1, r2
 800bcec:	602b      	str	r3, [r5, #0]
 800bcee:	f7f5 fcd5 	bl	800169c <_fstat>
 800bcf2:	1c43      	adds	r3, r0, #1
 800bcf4:	d102      	bne.n	800bcfc <_fstat_r+0x1c>
 800bcf6:	682b      	ldr	r3, [r5, #0]
 800bcf8:	b103      	cbz	r3, 800bcfc <_fstat_r+0x1c>
 800bcfa:	6023      	str	r3, [r4, #0]
 800bcfc:	bd38      	pop	{r3, r4, r5, pc}
 800bcfe:	bf00      	nop
 800bd00:	20002450 	.word	0x20002450

0800bd04 <_lseek_r>:
 800bd04:	b538      	push	{r3, r4, r5, lr}
 800bd06:	4d07      	ldr	r5, [pc, #28]	; (800bd24 <_lseek_r+0x20>)
 800bd08:	4604      	mov	r4, r0
 800bd0a:	4608      	mov	r0, r1
 800bd0c:	4611      	mov	r1, r2
 800bd0e:	2200      	movs	r2, #0
 800bd10:	602a      	str	r2, [r5, #0]
 800bd12:	461a      	mov	r2, r3
 800bd14:	f7f5 fc89 	bl	800162a <_lseek>
 800bd18:	1c43      	adds	r3, r0, #1
 800bd1a:	d102      	bne.n	800bd22 <_lseek_r+0x1e>
 800bd1c:	682b      	ldr	r3, [r5, #0]
 800bd1e:	b103      	cbz	r3, 800bd22 <_lseek_r+0x1e>
 800bd20:	6023      	str	r3, [r4, #0]
 800bd22:	bd38      	pop	{r3, r4, r5, pc}
 800bd24:	20002450 	.word	0x20002450

0800bd28 <__malloc_lock>:
 800bd28:	4801      	ldr	r0, [pc, #4]	; (800bd30 <__malloc_lock+0x8>)
 800bd2a:	f7ff be53 	b.w	800b9d4 <__retarget_lock_acquire_recursive>
 800bd2e:	bf00      	nop
 800bd30:	20002444 	.word	0x20002444

0800bd34 <__malloc_unlock>:
 800bd34:	4801      	ldr	r0, [pc, #4]	; (800bd3c <__malloc_unlock+0x8>)
 800bd36:	f7ff be4e 	b.w	800b9d6 <__retarget_lock_release_recursive>
 800bd3a:	bf00      	nop
 800bd3c:	20002444 	.word	0x20002444

0800bd40 <_read_r>:
 800bd40:	b538      	push	{r3, r4, r5, lr}
 800bd42:	4d07      	ldr	r5, [pc, #28]	; (800bd60 <_read_r+0x20>)
 800bd44:	4604      	mov	r4, r0
 800bd46:	4608      	mov	r0, r1
 800bd48:	4611      	mov	r1, r2
 800bd4a:	2200      	movs	r2, #0
 800bd4c:	602a      	str	r2, [r5, #0]
 800bd4e:	461a      	mov	r2, r3
 800bd50:	f7f5 fc7c 	bl	800164c <_read>
 800bd54:	1c43      	adds	r3, r0, #1
 800bd56:	d102      	bne.n	800bd5e <_read_r+0x1e>
 800bd58:	682b      	ldr	r3, [r5, #0]
 800bd5a:	b103      	cbz	r3, 800bd5e <_read_r+0x1e>
 800bd5c:	6023      	str	r3, [r4, #0]
 800bd5e:	bd38      	pop	{r3, r4, r5, pc}
 800bd60:	20002450 	.word	0x20002450

0800bd64 <_init>:
 800bd64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bd66:	bf00      	nop
 800bd68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bd6a:	bc08      	pop	{r3}
 800bd6c:	469e      	mov	lr, r3
 800bd6e:	4770      	bx	lr

0800bd70 <_fini>:
 800bd70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bd72:	bf00      	nop
 800bd74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bd76:	bc08      	pop	{r3}
 800bd78:	469e      	mov	lr, r3
 800bd7a:	4770      	bx	lr
