
RFM95_Transparent_Serial.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c738  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000100  0800c8c0  0800c8c0  0001c8c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c9c0  0800c9c0  00020170  2**0
                  CONTENTS
  4 .ARM          00000008  0800c9c0  0800c9c0  0001c9c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c9c8  0800c9c8  00020170  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c9c8  0800c9c8  0001c9c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c9cc  0800c9cc  0001c9cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000170  20000000  0800c9d0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020170  2**0
                  CONTENTS
 10 .bss          000022e4  20000170  20000170  00020170  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20002454  20002454  00020170  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020170  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001c2cd  00000000  00000000  000201a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003d51  00000000  00000000  0003c46d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000016c8  00000000  00000000  000401c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001540  00000000  00000000  00041888  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023f68  00000000  00000000  00042dc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001bb7b  00000000  00000000  00066d30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c88a2  00000000  00000000  000828ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0014b14d  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000067e4  00000000  00000000  0014b1a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000170 	.word	0x20000170
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800c8a8 	.word	0x0800c8a8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000174 	.word	0x20000174
 80001c4:	0800c8a8 	.word	0x0800c8a8

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__aeabi_d2uiz>:
 8000964:	004a      	lsls	r2, r1, #1
 8000966:	d211      	bcs.n	800098c <__aeabi_d2uiz+0x28>
 8000968:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 800096c:	d211      	bcs.n	8000992 <__aeabi_d2uiz+0x2e>
 800096e:	d50d      	bpl.n	800098c <__aeabi_d2uiz+0x28>
 8000970:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000974:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000978:	d40e      	bmi.n	8000998 <__aeabi_d2uiz+0x34>
 800097a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800097e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000982:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000986:	fa23 f002 	lsr.w	r0, r3, r2
 800098a:	4770      	bx	lr
 800098c:	f04f 0000 	mov.w	r0, #0
 8000990:	4770      	bx	lr
 8000992:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000996:	d102      	bne.n	800099e <__aeabi_d2uiz+0x3a>
 8000998:	f04f 30ff 	mov.w	r0, #4294967295
 800099c:	4770      	bx	lr
 800099e:	f04f 0000 	mov.w	r0, #0
 80009a2:	4770      	bx	lr

080009a4 <__aeabi_uldivmod>:
 80009a4:	b953      	cbnz	r3, 80009bc <__aeabi_uldivmod+0x18>
 80009a6:	b94a      	cbnz	r2, 80009bc <__aeabi_uldivmod+0x18>
 80009a8:	2900      	cmp	r1, #0
 80009aa:	bf08      	it	eq
 80009ac:	2800      	cmpeq	r0, #0
 80009ae:	bf1c      	itt	ne
 80009b0:	f04f 31ff 	movne.w	r1, #4294967295
 80009b4:	f04f 30ff 	movne.w	r0, #4294967295
 80009b8:	f000 b974 	b.w	8000ca4 <__aeabi_idiv0>
 80009bc:	f1ad 0c08 	sub.w	ip, sp, #8
 80009c0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80009c4:	f000 f806 	bl	80009d4 <__udivmoddi4>
 80009c8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80009cc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80009d0:	b004      	add	sp, #16
 80009d2:	4770      	bx	lr

080009d4 <__udivmoddi4>:
 80009d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80009d8:	9d08      	ldr	r5, [sp, #32]
 80009da:	4604      	mov	r4, r0
 80009dc:	468e      	mov	lr, r1
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d14d      	bne.n	8000a7e <__udivmoddi4+0xaa>
 80009e2:	428a      	cmp	r2, r1
 80009e4:	4694      	mov	ip, r2
 80009e6:	d969      	bls.n	8000abc <__udivmoddi4+0xe8>
 80009e8:	fab2 f282 	clz	r2, r2
 80009ec:	b152      	cbz	r2, 8000a04 <__udivmoddi4+0x30>
 80009ee:	fa01 f302 	lsl.w	r3, r1, r2
 80009f2:	f1c2 0120 	rsb	r1, r2, #32
 80009f6:	fa20 f101 	lsr.w	r1, r0, r1
 80009fa:	fa0c fc02 	lsl.w	ip, ip, r2
 80009fe:	ea41 0e03 	orr.w	lr, r1, r3
 8000a02:	4094      	lsls	r4, r2
 8000a04:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000a08:	0c21      	lsrs	r1, r4, #16
 8000a0a:	fbbe f6f8 	udiv	r6, lr, r8
 8000a0e:	fa1f f78c 	uxth.w	r7, ip
 8000a12:	fb08 e316 	mls	r3, r8, r6, lr
 8000a16:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000a1a:	fb06 f107 	mul.w	r1, r6, r7
 8000a1e:	4299      	cmp	r1, r3
 8000a20:	d90a      	bls.n	8000a38 <__udivmoddi4+0x64>
 8000a22:	eb1c 0303 	adds.w	r3, ip, r3
 8000a26:	f106 30ff 	add.w	r0, r6, #4294967295
 8000a2a:	f080 811f 	bcs.w	8000c6c <__udivmoddi4+0x298>
 8000a2e:	4299      	cmp	r1, r3
 8000a30:	f240 811c 	bls.w	8000c6c <__udivmoddi4+0x298>
 8000a34:	3e02      	subs	r6, #2
 8000a36:	4463      	add	r3, ip
 8000a38:	1a5b      	subs	r3, r3, r1
 8000a3a:	b2a4      	uxth	r4, r4
 8000a3c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000a40:	fb08 3310 	mls	r3, r8, r0, r3
 8000a44:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000a48:	fb00 f707 	mul.w	r7, r0, r7
 8000a4c:	42a7      	cmp	r7, r4
 8000a4e:	d90a      	bls.n	8000a66 <__udivmoddi4+0x92>
 8000a50:	eb1c 0404 	adds.w	r4, ip, r4
 8000a54:	f100 33ff 	add.w	r3, r0, #4294967295
 8000a58:	f080 810a 	bcs.w	8000c70 <__udivmoddi4+0x29c>
 8000a5c:	42a7      	cmp	r7, r4
 8000a5e:	f240 8107 	bls.w	8000c70 <__udivmoddi4+0x29c>
 8000a62:	4464      	add	r4, ip
 8000a64:	3802      	subs	r0, #2
 8000a66:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000a6a:	1be4      	subs	r4, r4, r7
 8000a6c:	2600      	movs	r6, #0
 8000a6e:	b11d      	cbz	r5, 8000a78 <__udivmoddi4+0xa4>
 8000a70:	40d4      	lsrs	r4, r2
 8000a72:	2300      	movs	r3, #0
 8000a74:	e9c5 4300 	strd	r4, r3, [r5]
 8000a78:	4631      	mov	r1, r6
 8000a7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a7e:	428b      	cmp	r3, r1
 8000a80:	d909      	bls.n	8000a96 <__udivmoddi4+0xc2>
 8000a82:	2d00      	cmp	r5, #0
 8000a84:	f000 80ef 	beq.w	8000c66 <__udivmoddi4+0x292>
 8000a88:	2600      	movs	r6, #0
 8000a8a:	e9c5 0100 	strd	r0, r1, [r5]
 8000a8e:	4630      	mov	r0, r6
 8000a90:	4631      	mov	r1, r6
 8000a92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a96:	fab3 f683 	clz	r6, r3
 8000a9a:	2e00      	cmp	r6, #0
 8000a9c:	d14a      	bne.n	8000b34 <__udivmoddi4+0x160>
 8000a9e:	428b      	cmp	r3, r1
 8000aa0:	d302      	bcc.n	8000aa8 <__udivmoddi4+0xd4>
 8000aa2:	4282      	cmp	r2, r0
 8000aa4:	f200 80f9 	bhi.w	8000c9a <__udivmoddi4+0x2c6>
 8000aa8:	1a84      	subs	r4, r0, r2
 8000aaa:	eb61 0303 	sbc.w	r3, r1, r3
 8000aae:	2001      	movs	r0, #1
 8000ab0:	469e      	mov	lr, r3
 8000ab2:	2d00      	cmp	r5, #0
 8000ab4:	d0e0      	beq.n	8000a78 <__udivmoddi4+0xa4>
 8000ab6:	e9c5 4e00 	strd	r4, lr, [r5]
 8000aba:	e7dd      	b.n	8000a78 <__udivmoddi4+0xa4>
 8000abc:	b902      	cbnz	r2, 8000ac0 <__udivmoddi4+0xec>
 8000abe:	deff      	udf	#255	; 0xff
 8000ac0:	fab2 f282 	clz	r2, r2
 8000ac4:	2a00      	cmp	r2, #0
 8000ac6:	f040 8092 	bne.w	8000bee <__udivmoddi4+0x21a>
 8000aca:	eba1 010c 	sub.w	r1, r1, ip
 8000ace:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ad2:	fa1f fe8c 	uxth.w	lr, ip
 8000ad6:	2601      	movs	r6, #1
 8000ad8:	0c20      	lsrs	r0, r4, #16
 8000ada:	fbb1 f3f7 	udiv	r3, r1, r7
 8000ade:	fb07 1113 	mls	r1, r7, r3, r1
 8000ae2:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ae6:	fb0e f003 	mul.w	r0, lr, r3
 8000aea:	4288      	cmp	r0, r1
 8000aec:	d908      	bls.n	8000b00 <__udivmoddi4+0x12c>
 8000aee:	eb1c 0101 	adds.w	r1, ip, r1
 8000af2:	f103 38ff 	add.w	r8, r3, #4294967295
 8000af6:	d202      	bcs.n	8000afe <__udivmoddi4+0x12a>
 8000af8:	4288      	cmp	r0, r1
 8000afa:	f200 80cb 	bhi.w	8000c94 <__udivmoddi4+0x2c0>
 8000afe:	4643      	mov	r3, r8
 8000b00:	1a09      	subs	r1, r1, r0
 8000b02:	b2a4      	uxth	r4, r4
 8000b04:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b08:	fb07 1110 	mls	r1, r7, r0, r1
 8000b0c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000b10:	fb0e fe00 	mul.w	lr, lr, r0
 8000b14:	45a6      	cmp	lr, r4
 8000b16:	d908      	bls.n	8000b2a <__udivmoddi4+0x156>
 8000b18:	eb1c 0404 	adds.w	r4, ip, r4
 8000b1c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000b20:	d202      	bcs.n	8000b28 <__udivmoddi4+0x154>
 8000b22:	45a6      	cmp	lr, r4
 8000b24:	f200 80bb 	bhi.w	8000c9e <__udivmoddi4+0x2ca>
 8000b28:	4608      	mov	r0, r1
 8000b2a:	eba4 040e 	sub.w	r4, r4, lr
 8000b2e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000b32:	e79c      	b.n	8000a6e <__udivmoddi4+0x9a>
 8000b34:	f1c6 0720 	rsb	r7, r6, #32
 8000b38:	40b3      	lsls	r3, r6
 8000b3a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000b3e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000b42:	fa20 f407 	lsr.w	r4, r0, r7
 8000b46:	fa01 f306 	lsl.w	r3, r1, r6
 8000b4a:	431c      	orrs	r4, r3
 8000b4c:	40f9      	lsrs	r1, r7
 8000b4e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000b52:	fa00 f306 	lsl.w	r3, r0, r6
 8000b56:	fbb1 f8f9 	udiv	r8, r1, r9
 8000b5a:	0c20      	lsrs	r0, r4, #16
 8000b5c:	fa1f fe8c 	uxth.w	lr, ip
 8000b60:	fb09 1118 	mls	r1, r9, r8, r1
 8000b64:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000b68:	fb08 f00e 	mul.w	r0, r8, lr
 8000b6c:	4288      	cmp	r0, r1
 8000b6e:	fa02 f206 	lsl.w	r2, r2, r6
 8000b72:	d90b      	bls.n	8000b8c <__udivmoddi4+0x1b8>
 8000b74:	eb1c 0101 	adds.w	r1, ip, r1
 8000b78:	f108 3aff 	add.w	sl, r8, #4294967295
 8000b7c:	f080 8088 	bcs.w	8000c90 <__udivmoddi4+0x2bc>
 8000b80:	4288      	cmp	r0, r1
 8000b82:	f240 8085 	bls.w	8000c90 <__udivmoddi4+0x2bc>
 8000b86:	f1a8 0802 	sub.w	r8, r8, #2
 8000b8a:	4461      	add	r1, ip
 8000b8c:	1a09      	subs	r1, r1, r0
 8000b8e:	b2a4      	uxth	r4, r4
 8000b90:	fbb1 f0f9 	udiv	r0, r1, r9
 8000b94:	fb09 1110 	mls	r1, r9, r0, r1
 8000b98:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000b9c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ba0:	458e      	cmp	lr, r1
 8000ba2:	d908      	bls.n	8000bb6 <__udivmoddi4+0x1e2>
 8000ba4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ba8:	f100 34ff 	add.w	r4, r0, #4294967295
 8000bac:	d26c      	bcs.n	8000c88 <__udivmoddi4+0x2b4>
 8000bae:	458e      	cmp	lr, r1
 8000bb0:	d96a      	bls.n	8000c88 <__udivmoddi4+0x2b4>
 8000bb2:	3802      	subs	r0, #2
 8000bb4:	4461      	add	r1, ip
 8000bb6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000bba:	fba0 9402 	umull	r9, r4, r0, r2
 8000bbe:	eba1 010e 	sub.w	r1, r1, lr
 8000bc2:	42a1      	cmp	r1, r4
 8000bc4:	46c8      	mov	r8, r9
 8000bc6:	46a6      	mov	lr, r4
 8000bc8:	d356      	bcc.n	8000c78 <__udivmoddi4+0x2a4>
 8000bca:	d053      	beq.n	8000c74 <__udivmoddi4+0x2a0>
 8000bcc:	b15d      	cbz	r5, 8000be6 <__udivmoddi4+0x212>
 8000bce:	ebb3 0208 	subs.w	r2, r3, r8
 8000bd2:	eb61 010e 	sbc.w	r1, r1, lr
 8000bd6:	fa01 f707 	lsl.w	r7, r1, r7
 8000bda:	fa22 f306 	lsr.w	r3, r2, r6
 8000bde:	40f1      	lsrs	r1, r6
 8000be0:	431f      	orrs	r7, r3
 8000be2:	e9c5 7100 	strd	r7, r1, [r5]
 8000be6:	2600      	movs	r6, #0
 8000be8:	4631      	mov	r1, r6
 8000bea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bee:	f1c2 0320 	rsb	r3, r2, #32
 8000bf2:	40d8      	lsrs	r0, r3
 8000bf4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000bf8:	fa21 f303 	lsr.w	r3, r1, r3
 8000bfc:	4091      	lsls	r1, r2
 8000bfe:	4301      	orrs	r1, r0
 8000c00:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c04:	fa1f fe8c 	uxth.w	lr, ip
 8000c08:	fbb3 f0f7 	udiv	r0, r3, r7
 8000c0c:	fb07 3610 	mls	r6, r7, r0, r3
 8000c10:	0c0b      	lsrs	r3, r1, #16
 8000c12:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000c16:	fb00 f60e 	mul.w	r6, r0, lr
 8000c1a:	429e      	cmp	r6, r3
 8000c1c:	fa04 f402 	lsl.w	r4, r4, r2
 8000c20:	d908      	bls.n	8000c34 <__udivmoddi4+0x260>
 8000c22:	eb1c 0303 	adds.w	r3, ip, r3
 8000c26:	f100 38ff 	add.w	r8, r0, #4294967295
 8000c2a:	d22f      	bcs.n	8000c8c <__udivmoddi4+0x2b8>
 8000c2c:	429e      	cmp	r6, r3
 8000c2e:	d92d      	bls.n	8000c8c <__udivmoddi4+0x2b8>
 8000c30:	3802      	subs	r0, #2
 8000c32:	4463      	add	r3, ip
 8000c34:	1b9b      	subs	r3, r3, r6
 8000c36:	b289      	uxth	r1, r1
 8000c38:	fbb3 f6f7 	udiv	r6, r3, r7
 8000c3c:	fb07 3316 	mls	r3, r7, r6, r3
 8000c40:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c44:	fb06 f30e 	mul.w	r3, r6, lr
 8000c48:	428b      	cmp	r3, r1
 8000c4a:	d908      	bls.n	8000c5e <__udivmoddi4+0x28a>
 8000c4c:	eb1c 0101 	adds.w	r1, ip, r1
 8000c50:	f106 38ff 	add.w	r8, r6, #4294967295
 8000c54:	d216      	bcs.n	8000c84 <__udivmoddi4+0x2b0>
 8000c56:	428b      	cmp	r3, r1
 8000c58:	d914      	bls.n	8000c84 <__udivmoddi4+0x2b0>
 8000c5a:	3e02      	subs	r6, #2
 8000c5c:	4461      	add	r1, ip
 8000c5e:	1ac9      	subs	r1, r1, r3
 8000c60:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000c64:	e738      	b.n	8000ad8 <__udivmoddi4+0x104>
 8000c66:	462e      	mov	r6, r5
 8000c68:	4628      	mov	r0, r5
 8000c6a:	e705      	b.n	8000a78 <__udivmoddi4+0xa4>
 8000c6c:	4606      	mov	r6, r0
 8000c6e:	e6e3      	b.n	8000a38 <__udivmoddi4+0x64>
 8000c70:	4618      	mov	r0, r3
 8000c72:	e6f8      	b.n	8000a66 <__udivmoddi4+0x92>
 8000c74:	454b      	cmp	r3, r9
 8000c76:	d2a9      	bcs.n	8000bcc <__udivmoddi4+0x1f8>
 8000c78:	ebb9 0802 	subs.w	r8, r9, r2
 8000c7c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000c80:	3801      	subs	r0, #1
 8000c82:	e7a3      	b.n	8000bcc <__udivmoddi4+0x1f8>
 8000c84:	4646      	mov	r6, r8
 8000c86:	e7ea      	b.n	8000c5e <__udivmoddi4+0x28a>
 8000c88:	4620      	mov	r0, r4
 8000c8a:	e794      	b.n	8000bb6 <__udivmoddi4+0x1e2>
 8000c8c:	4640      	mov	r0, r8
 8000c8e:	e7d1      	b.n	8000c34 <__udivmoddi4+0x260>
 8000c90:	46d0      	mov	r8, sl
 8000c92:	e77b      	b.n	8000b8c <__udivmoddi4+0x1b8>
 8000c94:	3b02      	subs	r3, #2
 8000c96:	4461      	add	r1, ip
 8000c98:	e732      	b.n	8000b00 <__udivmoddi4+0x12c>
 8000c9a:	4630      	mov	r0, r6
 8000c9c:	e709      	b.n	8000ab2 <__udivmoddi4+0xde>
 8000c9e:	4464      	add	r4, ip
 8000ca0:	3802      	subs	r0, #2
 8000ca2:	e742      	b.n	8000b2a <__udivmoddi4+0x156>

08000ca4 <__aeabi_idiv0>:
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <newLoRa>:
										  |    spreading factor = 7				       |
											|           bandwidth = 125 KHz        |
											| 		    coding rate = 4/5            |
											----------------------------------------
\* ----------------------------------------------------------------------------- */
LoRa newLoRa(){
 8000ca8:	b4b0      	push	{r4, r5, r7}
 8000caa:	b08f      	sub	sp, #60	; 0x3c
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
	LoRa new_LoRa;

	new_LoRa.frequency             = 433       ;
 8000cb0:	f240 13b1 	movw	r3, #433	; 0x1b1
 8000cb4:	62bb      	str	r3, [r7, #40]	; 0x28
	new_LoRa.spredingFactor        = SF_7      ;
 8000cb6:	2307      	movs	r3, #7
 8000cb8:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
	new_LoRa.bandWidth			   = BW_125KHz ;
 8000cbc:	2307      	movs	r3, #7
 8000cbe:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	new_LoRa.crcRate               = CR_4_5    ;
 8000cc2:	2301      	movs	r3, #1
 8000cc4:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	new_LoRa.power				   = POWER_20db;
 8000cc8:	23ff      	movs	r3, #255	; 0xff
 8000cca:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	new_LoRa.overCurrentProtection = 100       ;
 8000cce:	2364      	movs	r3, #100	; 0x64
 8000cd0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	new_LoRa.preamble			   = 8         ;
 8000cd4:	2308      	movs	r3, #8
 8000cd6:	863b      	strh	r3, [r7, #48]	; 0x30

	return new_LoRa;
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	461d      	mov	r5, r3
 8000cdc:	f107 0408 	add.w	r4, r7, #8
 8000ce0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000ce2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000ce4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000ce6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000ce8:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000cec:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
}
 8000cf0:	6878      	ldr	r0, [r7, #4]
 8000cf2:	373c      	adds	r7, #60	; 0x3c
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	bcb0      	pop	{r4, r5, r7}
 8000cf8:	4770      	bx	lr

08000cfa <LoRa_reset>:
		description : reset module
		arguments   :
			LoRa* LoRa --> LoRa object handler
		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_reset(LoRa* _LoRa){
 8000cfa:	b580      	push	{r7, lr}
 8000cfc:	b082      	sub	sp, #8
 8000cfe:	af00      	add	r7, sp, #0
 8000d00:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(_LoRa->reset_port, _LoRa->reset_pin, GPIO_PIN_RESET);
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	6898      	ldr	r0, [r3, #8]
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	899b      	ldrh	r3, [r3, #12]
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	4619      	mov	r1, r3
 8000d0e:	f002 faf5 	bl	80032fc <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000d12:	2001      	movs	r0, #1
 8000d14:	f001 fc1e 	bl	8002554 <HAL_Delay>
	HAL_GPIO_WritePin(_LoRa->reset_port, _LoRa->reset_pin, GPIO_PIN_SET);
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	6898      	ldr	r0, [r3, #8]
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	899b      	ldrh	r3, [r3, #12]
 8000d20:	2201      	movs	r2, #1
 8000d22:	4619      	mov	r1, r3
 8000d24:	f002 faea 	bl	80032fc <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8000d28:	2064      	movs	r0, #100	; 0x64
 8000d2a:	f001 fc13 	bl	8002554 <HAL_Delay>
}
 8000d2e:	bf00      	nop
 8000d30:	3708      	adds	r7, #8
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bd80      	pop	{r7, pc}

08000d36 <LoRa_gotoMode>:
		arguments   :
			LoRa* LoRa    --> LoRa object handler
			mode	        --> select from defined modes
		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_gotoMode(LoRa* _LoRa, int mode){
 8000d36:	b580      	push	{r7, lr}
 8000d38:	b084      	sub	sp, #16
 8000d3a:	af00      	add	r7, sp, #0
 8000d3c:	6078      	str	r0, [r7, #4]
 8000d3e:	6039      	str	r1, [r7, #0]
	uint8_t    read;
	uint8_t    data;

	read = LoRa_read(_LoRa, RegOpMode);
 8000d40:	2101      	movs	r1, #1
 8000d42:	6878      	ldr	r0, [r7, #4]
 8000d44:	f000 fa5a 	bl	80011fc <LoRa_read>
 8000d48:	4603      	mov	r3, r0
 8000d4a:	73bb      	strb	r3, [r7, #14]
	data = read;
 8000d4c:	7bbb      	ldrb	r3, [r7, #14]
 8000d4e:	73fb      	strb	r3, [r7, #15]

	if(mode == SLEEP_MODE){
 8000d50:	683b      	ldr	r3, [r7, #0]
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d107      	bne.n	8000d66 <LoRa_gotoMode+0x30>
		data = (read & 0xF8) | 0x00;
 8000d56:	7bbb      	ldrb	r3, [r7, #14]
 8000d58:	f023 0307 	bic.w	r3, r3, #7
 8000d5c:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = SLEEP_MODE;
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	2200      	movs	r2, #0
 8000d62:	61da      	str	r2, [r3, #28]
 8000d64:	e05e      	b.n	8000e24 <LoRa_gotoMode+0xee>
	}else if (mode == STNBY_MODE){
 8000d66:	683b      	ldr	r3, [r7, #0]
 8000d68:	2b01      	cmp	r3, #1
 8000d6a:	d10c      	bne.n	8000d86 <LoRa_gotoMode+0x50>
		data = (read & 0xF8) | 0x01;
 8000d6c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000d70:	f023 0307 	bic.w	r3, r3, #7
 8000d74:	b25b      	sxtb	r3, r3
 8000d76:	f043 0301 	orr.w	r3, r3, #1
 8000d7a:	b25b      	sxtb	r3, r3
 8000d7c:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = STNBY_MODE;
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	2201      	movs	r2, #1
 8000d82:	61da      	str	r2, [r3, #28]
 8000d84:	e04e      	b.n	8000e24 <LoRa_gotoMode+0xee>
	}else if (mode == FS_MODE_TX) {
 8000d86:	683b      	ldr	r3, [r7, #0]
 8000d88:	2b02      	cmp	r3, #2
 8000d8a:	d10c      	bne.n	8000da6 <LoRa_gotoMode+0x70>
		data = (read & 0xF8) | 0x02;
 8000d8c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000d90:	f023 0307 	bic.w	r3, r3, #7
 8000d94:	b25b      	sxtb	r3, r3
 8000d96:	f043 0302 	orr.w	r3, r3, #2
 8000d9a:	b25b      	sxtb	r3, r3
 8000d9c:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = FS_MODE_TX;
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	2202      	movs	r2, #2
 8000da2:	61da      	str	r2, [r3, #28]
 8000da4:	e03e      	b.n	8000e24 <LoRa_gotoMode+0xee>
	}else if (mode == TRANSMIT_MODE){
 8000da6:	683b      	ldr	r3, [r7, #0]
 8000da8:	2b03      	cmp	r3, #3
 8000daa:	d10c      	bne.n	8000dc6 <LoRa_gotoMode+0x90>
		data = (read & 0xF8) | 0x03;
 8000dac:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000db0:	f023 0307 	bic.w	r3, r3, #7
 8000db4:	b25b      	sxtb	r3, r3
 8000db6:	f043 0303 	orr.w	r3, r3, #3
 8000dba:	b25b      	sxtb	r3, r3
 8000dbc:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = TRANSMIT_MODE;
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	2203      	movs	r2, #3
 8000dc2:	61da      	str	r2, [r3, #28]
 8000dc4:	e02e      	b.n	8000e24 <LoRa_gotoMode+0xee>
	}else if (mode == FS_MODE_RX){
 8000dc6:	683b      	ldr	r3, [r7, #0]
 8000dc8:	2b04      	cmp	r3, #4
 8000dca:	d10c      	bne.n	8000de6 <LoRa_gotoMode+0xb0>
		data = (read & 0xF8) | 0x04;
 8000dcc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000dd0:	f023 0307 	bic.w	r3, r3, #7
 8000dd4:	b25b      	sxtb	r3, r3
 8000dd6:	f043 0304 	orr.w	r3, r3, #4
 8000dda:	b25b      	sxtb	r3, r3
 8000ddc:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = TRANSMIT_MODE;
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	2203      	movs	r2, #3
 8000de2:	61da      	str	r2, [r3, #28]
 8000de4:	e01e      	b.n	8000e24 <LoRa_gotoMode+0xee>
	}else if (mode == RXCONTIN_MODE){
 8000de6:	683b      	ldr	r3, [r7, #0]
 8000de8:	2b05      	cmp	r3, #5
 8000dea:	d10c      	bne.n	8000e06 <LoRa_gotoMode+0xd0>
		data = (read & 0xF8) | 0x05;
 8000dec:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000df0:	f023 0307 	bic.w	r3, r3, #7
 8000df4:	b25b      	sxtb	r3, r3
 8000df6:	f043 0305 	orr.w	r3, r3, #5
 8000dfa:	b25b      	sxtb	r3, r3
 8000dfc:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = RXCONTIN_MODE;
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	2205      	movs	r2, #5
 8000e02:	61da      	str	r2, [r3, #28]
 8000e04:	e00e      	b.n	8000e24 <LoRa_gotoMode+0xee>
	}else if (mode == RXSINGLE_MODE){
 8000e06:	683b      	ldr	r3, [r7, #0]
 8000e08:	2b06      	cmp	r3, #6
 8000e0a:	d10b      	bne.n	8000e24 <LoRa_gotoMode+0xee>
		data = (read & 0xF8) | 0x06;
 8000e0c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000e10:	f023 0307 	bic.w	r3, r3, #7
 8000e14:	b25b      	sxtb	r3, r3
 8000e16:	f043 0306 	orr.w	r3, r3, #6
 8000e1a:	b25b      	sxtb	r3, r3
 8000e1c:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = RXSINGLE_MODE;
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	2206      	movs	r2, #6
 8000e22:	61da      	str	r2, [r3, #28]
	}

	LoRa_write(_LoRa, RegOpMode, data);
 8000e24:	7bfb      	ldrb	r3, [r7, #15]
 8000e26:	461a      	mov	r2, r3
 8000e28:	2101      	movs	r1, #1
 8000e2a:	6878      	ldr	r0, [r7, #4]
 8000e2c:	f000 fa00 	bl	8001230 <LoRa_write>
	HAL_Delay(10);
 8000e30:	200a      	movs	r0, #10
 8000e32:	f001 fb8f 	bl	8002554 <HAL_Delay>
}
 8000e36:	bf00      	nop
 8000e38:	3710      	adds	r7, #16
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	bd80      	pop	{r7, pc}

08000e3e <LoRa_setModulation>:
		arguments   :
			LoRa* LoRa    --> LoRa object handler
			mode	        --> select from defined modes. 0->FSK, 1->OOK, 2->LoRa
		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setModulation(LoRa* _LoRa, int mode) {
 8000e3e:	b580      	push	{r7, lr}
 8000e40:	b084      	sub	sp, #16
 8000e42:	af00      	add	r7, sp, #0
 8000e44:	6078      	str	r0, [r7, #4]
 8000e46:	6039      	str	r1, [r7, #0]
	uint8_t read = LoRa_read(_LoRa, RegOpMode);
 8000e48:	2101      	movs	r1, #1
 8000e4a:	6878      	ldr	r0, [r7, #4]
 8000e4c:	f000 f9d6 	bl	80011fc <LoRa_read>
 8000e50:	4603      	mov	r3, r0
 8000e52:	73fb      	strb	r3, [r7, #15]
	uint8_t data = read;
 8000e54:	7bfb      	ldrb	r3, [r7, #15]
 8000e56:	73bb      	strb	r3, [r7, #14]
//	uint8_t prev_mode = _LoRa->current_mode;

	// Set modem to sleep mode
	LoRa_gotoMode(_LoRa, SLEEP_MODE);
 8000e58:	2100      	movs	r1, #0
 8000e5a:	6878      	ldr	r0, [r7, #4]
 8000e5c:	f7ff ff6b 	bl	8000d36 <LoRa_gotoMode>

	// Toggle first RegOpMode bit
	if(mode == 2) {	// LoRa
 8000e60:	683b      	ldr	r3, [r7, #0]
 8000e62:	2b02      	cmp	r3, #2
 8000e64:	d10d      	bne.n	8000e82 <LoRa_setModulation+0x44>
		LoRa_write(_LoRa, RegOpMode, (read & 0x7F) | 0x80);
 8000e66:	7bfb      	ldrb	r3, [r7, #15]
 8000e68:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000e6c:	b2db      	uxtb	r3, r3
 8000e6e:	461a      	mov	r2, r3
 8000e70:	2101      	movs	r1, #1
 8000e72:	6878      	ldr	r0, [r7, #4]
 8000e74:	f000 f9dc 	bl	8001230 <LoRa_write>
		_LoRa->modulationMode = LORA_MODULATION;
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	2202      	movs	r2, #2
 8000e7c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 8000e80:	e037      	b.n	8000ef2 <LoRa_setModulation+0xb4>
	}
	else if (mode == 1) {	// OOK
 8000e82:	683b      	ldr	r3, [r7, #0]
 8000e84:	2b01      	cmp	r3, #1
 8000e86:	d11b      	bne.n	8000ec0 <LoRa_setModulation+0x82>
		LoRa_write(_LoRa, RegOpMode, (read & 0x7F));
 8000e88:	7bfb      	ldrb	r3, [r7, #15]
 8000e8a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000e8e:	b2db      	uxtb	r3, r3
 8000e90:	461a      	mov	r2, r3
 8000e92:	2101      	movs	r1, #1
 8000e94:	6878      	ldr	r0, [r7, #4]
 8000e96:	f000 f9cb 	bl	8001230 <LoRa_write>
		LoRa_write(_LoRa, RegOpMode, (read & 0x60) | 0x20);
 8000e9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000ea2:	b25b      	sxtb	r3, r3
 8000ea4:	f043 0320 	orr.w	r3, r3, #32
 8000ea8:	b25b      	sxtb	r3, r3
 8000eaa:	b2db      	uxtb	r3, r3
 8000eac:	461a      	mov	r2, r3
 8000eae:	2101      	movs	r1, #1
 8000eb0:	6878      	ldr	r0, [r7, #4]
 8000eb2:	f000 f9bd 	bl	8001230 <LoRa_write>
		_LoRa->modulationMode = OOK_MODULATION;
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	2201      	movs	r2, #1
 8000eba:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 8000ebe:	e018      	b.n	8000ef2 <LoRa_setModulation+0xb4>
	}
	else if (mode == 0) {	// FSK
 8000ec0:	683b      	ldr	r3, [r7, #0]
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d115      	bne.n	8000ef2 <LoRa_setModulation+0xb4>
		LoRa_write(_LoRa, RegOpMode, (read & 0x7F));
 8000ec6:	7bfb      	ldrb	r3, [r7, #15]
 8000ec8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000ecc:	b2db      	uxtb	r3, r3
 8000ece:	461a      	mov	r2, r3
 8000ed0:	2101      	movs	r1, #1
 8000ed2:	6878      	ldr	r0, [r7, #4]
 8000ed4:	f000 f9ac 	bl	8001230 <LoRa_write>
		LoRa_write(_LoRa, RegOpMode, (read & 0x60));
 8000ed8:	7bfb      	ldrb	r3, [r7, #15]
 8000eda:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8000ede:	b2db      	uxtb	r3, r3
 8000ee0:	461a      	mov	r2, r3
 8000ee2:	2101      	movs	r1, #1
 8000ee4:	6878      	ldr	r0, [r7, #4]
 8000ee6:	f000 f9a3 	bl	8001230 <LoRa_write>
		_LoRa->modulationMode = FSK_MODULATION;
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	2200      	movs	r2, #0
 8000eee:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
	}

	HAL_Delay(10);
 8000ef2:	200a      	movs	r0, #10
 8000ef4:	f001 fb2e 	bl	8002554 <HAL_Delay>
//	LoRa_gotoMode(_LoRa, prev_mode);
}
 8000ef8:	bf00      	nop
 8000efa:	3710      	adds	r7, #16
 8000efc:	46bd      	mov	sp, r7
 8000efe:	bd80      	pop	{r7, pc}

08000f00 <LoRa_readReg>:
														you want to send
			uint8_t* output		--> pointer to the beginning of output array
			uint16_t w_length	--> detemines number of bytes that you want to read
		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_readReg(LoRa* _LoRa, uint8_t* address, uint16_t r_length, uint8_t* output, uint16_t w_length){
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b084      	sub	sp, #16
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	60f8      	str	r0, [r7, #12]
 8000f08:	60b9      	str	r1, [r7, #8]
 8000f0a:	603b      	str	r3, [r7, #0]
 8000f0c:	4613      	mov	r3, r2
 8000f0e:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_RESET);
 8000f10:	68fb      	ldr	r3, [r7, #12]
 8000f12:	6818      	ldr	r0, [r3, #0]
 8000f14:	68fb      	ldr	r3, [r7, #12]
 8000f16:	889b      	ldrh	r3, [r3, #4]
 8000f18:	2200      	movs	r2, #0
 8000f1a:	4619      	mov	r1, r3
 8000f1c:	f002 f9ee 	bl	80032fc <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(_LoRa->hSPIx, address, r_length, TRANSMIT_TIMEOUT);
 8000f20:	68fb      	ldr	r3, [r7, #12]
 8000f22:	6998      	ldr	r0, [r3, #24]
 8000f24:	88fa      	ldrh	r2, [r7, #6]
 8000f26:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000f2a:	68b9      	ldr	r1, [r7, #8]
 8000f2c:	f004 f977 	bl	800521e <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8000f30:	bf00      	nop
 8000f32:	68fb      	ldr	r3, [r7, #12]
 8000f34:	699b      	ldr	r3, [r3, #24]
 8000f36:	4618      	mov	r0, r3
 8000f38:	f004 fd60 	bl	80059fc <HAL_SPI_GetState>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	2b01      	cmp	r3, #1
 8000f40:	d1f7      	bne.n	8000f32 <LoRa_readReg+0x32>
		;
	HAL_SPI_Receive(_LoRa->hSPIx, output, w_length, RECEIVE_TIMEOUT);
 8000f42:	68fb      	ldr	r3, [r7, #12]
 8000f44:	6998      	ldr	r0, [r3, #24]
 8000f46:	8b3a      	ldrh	r2, [r7, #24]
 8000f48:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000f4c:	6839      	ldr	r1, [r7, #0]
 8000f4e:	f004 faa2 	bl	8005496 <HAL_SPI_Receive>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8000f52:	bf00      	nop
 8000f54:	68fb      	ldr	r3, [r7, #12]
 8000f56:	699b      	ldr	r3, [r3, #24]
 8000f58:	4618      	mov	r0, r3
 8000f5a:	f004 fd4f 	bl	80059fc <HAL_SPI_GetState>
 8000f5e:	4603      	mov	r3, r0
 8000f60:	2b01      	cmp	r3, #1
 8000f62:	d1f7      	bne.n	8000f54 <LoRa_readReg+0x54>
		;
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_SET);
 8000f64:	68fb      	ldr	r3, [r7, #12]
 8000f66:	6818      	ldr	r0, [r3, #0]
 8000f68:	68fb      	ldr	r3, [r7, #12]
 8000f6a:	889b      	ldrh	r3, [r3, #4]
 8000f6c:	2201      	movs	r2, #1
 8000f6e:	4619      	mov	r1, r3
 8000f70:	f002 f9c4 	bl	80032fc <HAL_GPIO_WritePin>
}
 8000f74:	bf00      	nop
 8000f76:	3710      	adds	r7, #16
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	bd80      	pop	{r7, pc}

08000f7c <LoRa_writeReg>:
														you want to send
			uint8_t* output		--> pointer to the beginning of values array
			uint16_t w_length	--> detemines number of bytes that you want to send
		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_writeReg(LoRa* _LoRa, uint8_t* address, uint16_t r_length, uint8_t* values, uint16_t w_length){
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b084      	sub	sp, #16
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	60f8      	str	r0, [r7, #12]
 8000f84:	60b9      	str	r1, [r7, #8]
 8000f86:	603b      	str	r3, [r7, #0]
 8000f88:	4613      	mov	r3, r2
 8000f8a:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_RESET);
 8000f8c:	68fb      	ldr	r3, [r7, #12]
 8000f8e:	6818      	ldr	r0, [r3, #0]
 8000f90:	68fb      	ldr	r3, [r7, #12]
 8000f92:	889b      	ldrh	r3, [r3, #4]
 8000f94:	2200      	movs	r2, #0
 8000f96:	4619      	mov	r1, r3
 8000f98:	f002 f9b0 	bl	80032fc <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(_LoRa->hSPIx, address, r_length, TRANSMIT_TIMEOUT);
 8000f9c:	68fb      	ldr	r3, [r7, #12]
 8000f9e:	6998      	ldr	r0, [r3, #24]
 8000fa0:	88fa      	ldrh	r2, [r7, #6]
 8000fa2:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000fa6:	68b9      	ldr	r1, [r7, #8]
 8000fa8:	f004 f939 	bl	800521e <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8000fac:	bf00      	nop
 8000fae:	68fb      	ldr	r3, [r7, #12]
 8000fb0:	699b      	ldr	r3, [r3, #24]
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	f004 fd22 	bl	80059fc <HAL_SPI_GetState>
 8000fb8:	4603      	mov	r3, r0
 8000fba:	2b01      	cmp	r3, #1
 8000fbc:	d1f7      	bne.n	8000fae <LoRa_writeReg+0x32>
		;
	HAL_SPI_Transmit(_LoRa->hSPIx, values, w_length, TRANSMIT_TIMEOUT);
 8000fbe:	68fb      	ldr	r3, [r7, #12]
 8000fc0:	6998      	ldr	r0, [r3, #24]
 8000fc2:	8b3a      	ldrh	r2, [r7, #24]
 8000fc4:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000fc8:	6839      	ldr	r1, [r7, #0]
 8000fca:	f004 f928 	bl	800521e <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 8000fce:	bf00      	nop
 8000fd0:	68fb      	ldr	r3, [r7, #12]
 8000fd2:	699b      	ldr	r3, [r3, #24]
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	f004 fd11 	bl	80059fc <HAL_SPI_GetState>
 8000fda:	4603      	mov	r3, r0
 8000fdc:	2b01      	cmp	r3, #1
 8000fde:	d1f7      	bne.n	8000fd0 <LoRa_writeReg+0x54>
		;
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_SET);
 8000fe0:	68fb      	ldr	r3, [r7, #12]
 8000fe2:	6818      	ldr	r0, [r3, #0]
 8000fe4:	68fb      	ldr	r3, [r7, #12]
 8000fe6:	889b      	ldrh	r3, [r3, #4]
 8000fe8:	2201      	movs	r2, #1
 8000fea:	4619      	mov	r1, r3
 8000fec:	f002 f986 	bl	80032fc <HAL_GPIO_WritePin>
}
 8000ff0:	bf00      	nop
 8000ff2:	3710      	adds	r7, #16
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	bd80      	pop	{r7, pc}

08000ff8 <LoRa_setFrequency>:
		arguments   :
			LoRa* LoRa        --> LoRa object handler
			int   freq        --> desired frequency in MHz unit, e.g 434
		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setFrequency(LoRa* _LoRa, int freq){
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b084      	sub	sp, #16
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
 8001000:	6039      	str	r1, [r7, #0]
	uint8_t  data;
	uint32_t F;
	F = (freq * 524288)>>5;
 8001002:	683b      	ldr	r3, [r7, #0]
 8001004:	04db      	lsls	r3, r3, #19
 8001006:	115b      	asrs	r3, r3, #5
 8001008:	60fb      	str	r3, [r7, #12]

	// write Msb:
	data = F >> 16;
 800100a:	68fb      	ldr	r3, [r7, #12]
 800100c:	0c1b      	lsrs	r3, r3, #16
 800100e:	72fb      	strb	r3, [r7, #11]
	LoRa_write(_LoRa, RegFrMsb, data);
 8001010:	7afb      	ldrb	r3, [r7, #11]
 8001012:	461a      	mov	r2, r3
 8001014:	2106      	movs	r1, #6
 8001016:	6878      	ldr	r0, [r7, #4]
 8001018:	f000 f90a 	bl	8001230 <LoRa_write>
	HAL_Delay(5);
 800101c:	2005      	movs	r0, #5
 800101e:	f001 fa99 	bl	8002554 <HAL_Delay>

	// write Mid:
	data = F >> 8;
 8001022:	68fb      	ldr	r3, [r7, #12]
 8001024:	0a1b      	lsrs	r3, r3, #8
 8001026:	72fb      	strb	r3, [r7, #11]
	LoRa_write(_LoRa, RegFrMid, data);
 8001028:	7afb      	ldrb	r3, [r7, #11]
 800102a:	461a      	mov	r2, r3
 800102c:	2107      	movs	r1, #7
 800102e:	6878      	ldr	r0, [r7, #4]
 8001030:	f000 f8fe 	bl	8001230 <LoRa_write>
	HAL_Delay(5);
 8001034:	2005      	movs	r0, #5
 8001036:	f001 fa8d 	bl	8002554 <HAL_Delay>

	// write Lsb:
	data = F >> 0;
 800103a:	68fb      	ldr	r3, [r7, #12]
 800103c:	72fb      	strb	r3, [r7, #11]
	LoRa_write(_LoRa, RegFrLsb, data);
 800103e:	7afb      	ldrb	r3, [r7, #11]
 8001040:	461a      	mov	r2, r3
 8001042:	2108      	movs	r1, #8
 8001044:	6878      	ldr	r0, [r7, #4]
 8001046:	f000 f8f3 	bl	8001230 <LoRa_write>
	HAL_Delay(5);
 800104a:	2005      	movs	r0, #5
 800104c:	f001 fa82 	bl	8002554 <HAL_Delay>
}
 8001050:	bf00      	nop
 8001052:	3710      	adds	r7, #16
 8001054:	46bd      	mov	sp, r7
 8001056:	bd80      	pop	{r7, pc}

08001058 <LoRa_setSpreadingFactor>:
		arguments   :
			LoRa* LoRa        --> LoRa object handler
			int   SP          --> desired spreading factor e.g 7
		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setSpreadingFactor(LoRa* _LoRa, int SF){
 8001058:	b580      	push	{r7, lr}
 800105a:	b084      	sub	sp, #16
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
 8001060:	6039      	str	r1, [r7, #0]
	uint8_t	data;
	uint8_t	read;

	if(SF>12)
 8001062:	683b      	ldr	r3, [r7, #0]
 8001064:	2b0c      	cmp	r3, #12
 8001066:	dd01      	ble.n	800106c <LoRa_setSpreadingFactor+0x14>
		SF = 12;
 8001068:	230c      	movs	r3, #12
 800106a:	603b      	str	r3, [r7, #0]
	if(SF<7)
 800106c:	683b      	ldr	r3, [r7, #0]
 800106e:	2b06      	cmp	r3, #6
 8001070:	dc01      	bgt.n	8001076 <LoRa_setSpreadingFactor+0x1e>
		SF = 7;
 8001072:	2307      	movs	r3, #7
 8001074:	603b      	str	r3, [r7, #0]

	read = LoRa_read(_LoRa, RegModemConfig2);
 8001076:	211e      	movs	r1, #30
 8001078:	6878      	ldr	r0, [r7, #4]
 800107a:	f000 f8bf 	bl	80011fc <LoRa_read>
 800107e:	4603      	mov	r3, r0
 8001080:	73fb      	strb	r3, [r7, #15]
	HAL_Delay(10);
 8001082:	200a      	movs	r0, #10
 8001084:	f001 fa66 	bl	8002554 <HAL_Delay>

	data = (SF << 4) + (read & 0x0F);
 8001088:	683b      	ldr	r3, [r7, #0]
 800108a:	b2db      	uxtb	r3, r3
 800108c:	011b      	lsls	r3, r3, #4
 800108e:	b2da      	uxtb	r2, r3
 8001090:	7bfb      	ldrb	r3, [r7, #15]
 8001092:	f003 030f 	and.w	r3, r3, #15
 8001096:	b2db      	uxtb	r3, r3
 8001098:	4413      	add	r3, r2
 800109a:	73bb      	strb	r3, [r7, #14]
	LoRa_write(_LoRa, RegModemConfig2, data);
 800109c:	7bbb      	ldrb	r3, [r7, #14]
 800109e:	461a      	mov	r2, r3
 80010a0:	211e      	movs	r1, #30
 80010a2:	6878      	ldr	r0, [r7, #4]
 80010a4:	f000 f8c4 	bl	8001230 <LoRa_write>
	HAL_Delay(10);
 80010a8:	200a      	movs	r0, #10
 80010aa:	f001 fa53 	bl	8002554 <HAL_Delay>
}
 80010ae:	bf00      	nop
 80010b0:	3710      	adds	r7, #16
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bd80      	pop	{r7, pc}

080010b6 <LoRa_setPower>:
		arguments   :
			LoRa* LoRa        --> LoRa object handler
			int   power       --> desired power e.g POWER_17db
		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setPower(LoRa* _LoRa, uint8_t power){
 80010b6:	b580      	push	{r7, lr}
 80010b8:	b082      	sub	sp, #8
 80010ba:	af00      	add	r7, sp, #0
 80010bc:	6078      	str	r0, [r7, #4]
 80010be:	460b      	mov	r3, r1
 80010c0:	70fb      	strb	r3, [r7, #3]
	LoRa_write(_LoRa, RegPaConfig, power);
 80010c2:	78fb      	ldrb	r3, [r7, #3]
 80010c4:	461a      	mov	r2, r3
 80010c6:	2109      	movs	r1, #9
 80010c8:	6878      	ldr	r0, [r7, #4]
 80010ca:	f000 f8b1 	bl	8001230 <LoRa_write>
	HAL_Delay(10);
 80010ce:	200a      	movs	r0, #10
 80010d0:	f001 fa40 	bl	8002554 <HAL_Delay>
}
 80010d4:	bf00      	nop
 80010d6:	3708      	adds	r7, #8
 80010d8:	46bd      	mov	sp, r7
 80010da:	bd80      	pop	{r7, pc}

080010dc <LoRa_setOCP>:
		arguments   :
			LoRa* LoRa        --> LoRa object handler
			int   current     --> desired max currnet in mA, e.g 120
		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setOCP(LoRa* _LoRa, uint8_t current){
 80010dc:	b580      	push	{r7, lr}
 80010de:	b084      	sub	sp, #16
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
 80010e4:	460b      	mov	r3, r1
 80010e6:	70fb      	strb	r3, [r7, #3]
	uint8_t	OcpTrim = 0;
 80010e8:	2300      	movs	r3, #0
 80010ea:	73fb      	strb	r3, [r7, #15]

	if(current<45)
 80010ec:	78fb      	ldrb	r3, [r7, #3]
 80010ee:	2b2c      	cmp	r3, #44	; 0x2c
 80010f0:	d801      	bhi.n	80010f6 <LoRa_setOCP+0x1a>
		current = 45;
 80010f2:	232d      	movs	r3, #45	; 0x2d
 80010f4:	70fb      	strb	r3, [r7, #3]
	if(current>240)
 80010f6:	78fb      	ldrb	r3, [r7, #3]
 80010f8:	2bf0      	cmp	r3, #240	; 0xf0
 80010fa:	d901      	bls.n	8001100 <LoRa_setOCP+0x24>
		current = 240;
 80010fc:	23f0      	movs	r3, #240	; 0xf0
 80010fe:	70fb      	strb	r3, [r7, #3]

	if(current <= 120)
 8001100:	78fb      	ldrb	r3, [r7, #3]
 8001102:	2b78      	cmp	r3, #120	; 0x78
 8001104:	d809      	bhi.n	800111a <LoRa_setOCP+0x3e>
		OcpTrim = (current - 45)/5;
 8001106:	78fb      	ldrb	r3, [r7, #3]
 8001108:	3b2d      	subs	r3, #45	; 0x2d
 800110a:	4a12      	ldr	r2, [pc, #72]	; (8001154 <LoRa_setOCP+0x78>)
 800110c:	fb82 1203 	smull	r1, r2, r2, r3
 8001110:	1052      	asrs	r2, r2, #1
 8001112:	17db      	asrs	r3, r3, #31
 8001114:	1ad3      	subs	r3, r2, r3
 8001116:	73fb      	strb	r3, [r7, #15]
 8001118:	e00b      	b.n	8001132 <LoRa_setOCP+0x56>
	else if(current <= 240)
 800111a:	78fb      	ldrb	r3, [r7, #3]
 800111c:	2bf0      	cmp	r3, #240	; 0xf0
 800111e:	d808      	bhi.n	8001132 <LoRa_setOCP+0x56>
		OcpTrim = (current + 30)/10;
 8001120:	78fb      	ldrb	r3, [r7, #3]
 8001122:	331e      	adds	r3, #30
 8001124:	4a0b      	ldr	r2, [pc, #44]	; (8001154 <LoRa_setOCP+0x78>)
 8001126:	fb82 1203 	smull	r1, r2, r2, r3
 800112a:	1092      	asrs	r2, r2, #2
 800112c:	17db      	asrs	r3, r3, #31
 800112e:	1ad3      	subs	r3, r2, r3
 8001130:	73fb      	strb	r3, [r7, #15]

	OcpTrim = OcpTrim + (1 << 5);
 8001132:	7bfb      	ldrb	r3, [r7, #15]
 8001134:	3320      	adds	r3, #32
 8001136:	73fb      	strb	r3, [r7, #15]
	LoRa_write(_LoRa, RegOcp, OcpTrim);
 8001138:	7bfb      	ldrb	r3, [r7, #15]
 800113a:	461a      	mov	r2, r3
 800113c:	210b      	movs	r1, #11
 800113e:	6878      	ldr	r0, [r7, #4]
 8001140:	f000 f876 	bl	8001230 <LoRa_write>
	HAL_Delay(10);
 8001144:	200a      	movs	r0, #10
 8001146:	f001 fa05 	bl	8002554 <HAL_Delay>
}
 800114a:	bf00      	nop
 800114c:	3710      	adds	r7, #16
 800114e:	46bd      	mov	sp, r7
 8001150:	bd80      	pop	{r7, pc}
 8001152:	bf00      	nop
 8001154:	66666667 	.word	0x66666667

08001158 <LoRa_setCRCon>:
		description : set timeout msb to 0xFF + set CRC enable.
		arguments   :
			LoRa* LoRa        --> LoRa object handler
		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setCRCon(LoRa* _LoRa) {
 8001158:	b580      	push	{r7, lr}
 800115a:	b084      	sub	sp, #16
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
	uint8_t read, data;
	if(_LoRa->modulationMode == LORA_MODULATION) {
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8001166:	2b02      	cmp	r3, #2
 8001168:	d110      	bne.n	800118c <LoRa_setCRCon+0x34>
		read = LoRa_read(_LoRa, RegModemConfig2);
 800116a:	211e      	movs	r1, #30
 800116c:	6878      	ldr	r0, [r7, #4]
 800116e:	f000 f845 	bl	80011fc <LoRa_read>
 8001172:	4603      	mov	r3, r0
 8001174:	73fb      	strb	r3, [r7, #15]
		data = (read & 0xFB) | 0x04;
 8001176:	7bfb      	ldrb	r3, [r7, #15]
 8001178:	f043 0304 	orr.w	r3, r3, #4
 800117c:	73bb      	strb	r3, [r7, #14]
		LoRa_write(_LoRa, RegModemConfig2, data);
 800117e:	7bbb      	ldrb	r3, [r7, #14]
 8001180:	461a      	mov	r2, r3
 8001182:	211e      	movs	r1, #30
 8001184:	6878      	ldr	r0, [r7, #4]
 8001186:	f000 f853 	bl	8001230 <LoRa_write>
	else {
		read = LoRa_read(_LoRa, RegPacketConfig1);
		data = (read & 0xEF) | 0x10;
		LoRa_write(_LoRa, RegModemConfig2, data);
	}
}
 800118a:	e00f      	b.n	80011ac <LoRa_setCRCon+0x54>
		read = LoRa_read(_LoRa, RegPacketConfig1);
 800118c:	2130      	movs	r1, #48	; 0x30
 800118e:	6878      	ldr	r0, [r7, #4]
 8001190:	f000 f834 	bl	80011fc <LoRa_read>
 8001194:	4603      	mov	r3, r0
 8001196:	73fb      	strb	r3, [r7, #15]
		data = (read & 0xEF) | 0x10;
 8001198:	7bfb      	ldrb	r3, [r7, #15]
 800119a:	f043 0310 	orr.w	r3, r3, #16
 800119e:	73bb      	strb	r3, [r7, #14]
		LoRa_write(_LoRa, RegModemConfig2, data);
 80011a0:	7bbb      	ldrb	r3, [r7, #14]
 80011a2:	461a      	mov	r2, r3
 80011a4:	211e      	movs	r1, #30
 80011a6:	6878      	ldr	r0, [r7, #4]
 80011a8:	f000 f842 	bl	8001230 <LoRa_write>
}
 80011ac:	bf00      	nop
 80011ae:	3710      	adds	r7, #16
 80011b0:	46bd      	mov	sp, r7
 80011b2:	bd80      	pop	{r7, pc}

080011b4 <LoRa_setTOMsb_setCRCon>:
		description : set timeout msb to 0xFF + set CRC enable.
		arguments   :
			LoRa* LoRa        --> LoRa object handler
		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setTOMsb_setCRCon(LoRa* _LoRa){
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b084      	sub	sp, #16
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
	uint8_t read, data;
	if(_LoRa->modulationMode == LORA_MODULATION) {
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80011c2:	2b02      	cmp	r3, #2
 80011c4:	d110      	bne.n	80011e8 <LoRa_setTOMsb_setCRCon+0x34>
		read = LoRa_read(_LoRa, RegModemConfig2);
 80011c6:	211e      	movs	r1, #30
 80011c8:	6878      	ldr	r0, [r7, #4]
 80011ca:	f000 f817 	bl	80011fc <LoRa_read>
 80011ce:	4603      	mov	r3, r0
 80011d0:	73fb      	strb	r3, [r7, #15]
		data = read | 0x07;
 80011d2:	7bfb      	ldrb	r3, [r7, #15]
 80011d4:	f043 0307 	orr.w	r3, r3, #7
 80011d8:	73bb      	strb	r3, [r7, #14]
		LoRa_write(_LoRa, RegModemConfig2, data);
 80011da:	7bbb      	ldrb	r3, [r7, #14]
 80011dc:	461a      	mov	r2, r3
 80011de:	211e      	movs	r1, #30
 80011e0:	6878      	ldr	r0, [r7, #4]
 80011e2:	f000 f825 	bl	8001230 <LoRa_write>
 80011e6:	e002      	b.n	80011ee <LoRa_setTOMsb_setCRCon+0x3a>
	}
	else {
		LoRa_setCRCon(_LoRa);
 80011e8:	6878      	ldr	r0, [r7, #4]
 80011ea:	f7ff ffb5 	bl	8001158 <LoRa_setCRCon>
	}

	HAL_Delay(10);
 80011ee:	200a      	movs	r0, #10
 80011f0:	f001 f9b0 	bl	8002554 <HAL_Delay>
}
 80011f4:	bf00      	nop
 80011f6:	3710      	adds	r7, #16
 80011f8:	46bd      	mov	sp, r7
 80011fa:	bd80      	pop	{r7, pc}

080011fc <LoRa_read>:
		arguments   :
			LoRa*   LoRa        --> LoRa object handler
			uint8_t address     -->	address of the register e.g 0x1D
		returns     : register value
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_read(LoRa* _LoRa, uint8_t address){
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b086      	sub	sp, #24
 8001200:	af02      	add	r7, sp, #8
 8001202:	6078      	str	r0, [r7, #4]
 8001204:	460b      	mov	r3, r1
 8001206:	70fb      	strb	r3, [r7, #3]
	uint8_t read_data;
	uint8_t data_addr;

	data_addr = address & 0x7F;
 8001208:	78fb      	ldrb	r3, [r7, #3]
 800120a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800120e:	b2db      	uxtb	r3, r3
 8001210:	73bb      	strb	r3, [r7, #14]
	LoRa_readReg(_LoRa, &data_addr, 1, &read_data, 1);
 8001212:	f107 030f 	add.w	r3, r7, #15
 8001216:	f107 010e 	add.w	r1, r7, #14
 800121a:	2201      	movs	r2, #1
 800121c:	9200      	str	r2, [sp, #0]
 800121e:	2201      	movs	r2, #1
 8001220:	6878      	ldr	r0, [r7, #4]
 8001222:	f7ff fe6d 	bl	8000f00 <LoRa_readReg>
	//HAL_Delay(5);

	return read_data;
 8001226:	7bfb      	ldrb	r3, [r7, #15]
}
 8001228:	4618      	mov	r0, r3
 800122a:	3710      	adds	r7, #16
 800122c:	46bd      	mov	sp, r7
 800122e:	bd80      	pop	{r7, pc}

08001230 <LoRa_write>:
			LoRa*   LoRa        --> LoRa object handler
			uint8_t address     -->	address of the register e.g 0x1D
			uint8_t value       --> value that you want to write
		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_write(LoRa* _LoRa, uint8_t address, uint8_t value){
 8001230:	b580      	push	{r7, lr}
 8001232:	b086      	sub	sp, #24
 8001234:	af02      	add	r7, sp, #8
 8001236:	6078      	str	r0, [r7, #4]
 8001238:	460b      	mov	r3, r1
 800123a:	70fb      	strb	r3, [r7, #3]
 800123c:	4613      	mov	r3, r2
 800123e:	70bb      	strb	r3, [r7, #2]
	uint8_t data;
	uint8_t addr;

	addr = address | 0x80;
 8001240:	78fb      	ldrb	r3, [r7, #3]
 8001242:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001246:	b2db      	uxtb	r3, r3
 8001248:	73bb      	strb	r3, [r7, #14]
	data = value;
 800124a:	78bb      	ldrb	r3, [r7, #2]
 800124c:	73fb      	strb	r3, [r7, #15]
	LoRa_writeReg(_LoRa, &addr, 1, &data, 1);
 800124e:	f107 030f 	add.w	r3, r7, #15
 8001252:	f107 010e 	add.w	r1, r7, #14
 8001256:	2201      	movs	r2, #1
 8001258:	9200      	str	r2, [sp, #0]
 800125a:	2201      	movs	r2, #1
 800125c:	6878      	ldr	r0, [r7, #4]
 800125e:	f7ff fe8d 	bl	8000f7c <LoRa_writeReg>
	//HAL_Delay(5);
}
 8001262:	bf00      	nop
 8001264:	3710      	adds	r7, #16
 8001266:	46bd      	mov	sp, r7
 8001268:	bd80      	pop	{r7, pc}

0800126a <LoRa_BurstWrite>:
			LoRa*   LoRa        --> LoRa object handler
			uint8_t address     -->	address of the register e.g 0x1D
			uint8_t *value      --> address of values that you want to write
		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_BurstWrite(LoRa* _LoRa, uint8_t address, uint8_t *value, uint8_t length){
 800126a:	b580      	push	{r7, lr}
 800126c:	b086      	sub	sp, #24
 800126e:	af00      	add	r7, sp, #0
 8001270:	60f8      	str	r0, [r7, #12]
 8001272:	607a      	str	r2, [r7, #4]
 8001274:	461a      	mov	r2, r3
 8001276:	460b      	mov	r3, r1
 8001278:	72fb      	strb	r3, [r7, #11]
 800127a:	4613      	mov	r3, r2
 800127c:	72bb      	strb	r3, [r7, #10]
	uint8_t addr;
	addr = address | 0x80;
 800127e:	7afb      	ldrb	r3, [r7, #11]
 8001280:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001284:	b2db      	uxtb	r3, r3
 8001286:	75fb      	strb	r3, [r7, #23]

	//NSS = 1
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_RESET);
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	6818      	ldr	r0, [r3, #0]
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	889b      	ldrh	r3, [r3, #4]
 8001290:	2200      	movs	r2, #0
 8001292:	4619      	mov	r1, r3
 8001294:	f002 f832 	bl	80032fc <HAL_GPIO_WritePin>
	//say module thai I want to write in RegFiFo
	HAL_SPI_Transmit(_LoRa->hSPIx, &addr, 1, TRANSMIT_TIMEOUT);
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	6998      	ldr	r0, [r3, #24]
 800129c:	f107 0117 	add.w	r1, r7, #23
 80012a0:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80012a4:	2201      	movs	r2, #1
 80012a6:	f003 ffba 	bl	800521e <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 80012aa:	bf00      	nop
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	699b      	ldr	r3, [r3, #24]
 80012b0:	4618      	mov	r0, r3
 80012b2:	f004 fba3 	bl	80059fc <HAL_SPI_GetState>
 80012b6:	4603      	mov	r3, r0
 80012b8:	2b01      	cmp	r3, #1
 80012ba:	d1f7      	bne.n	80012ac <LoRa_BurstWrite+0x42>
		;
	//Write data in FiFo
	HAL_SPI_Transmit(_LoRa->hSPIx, value, length, TRANSMIT_TIMEOUT);
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	6998      	ldr	r0, [r3, #24]
 80012c0:	7abb      	ldrb	r3, [r7, #10]
 80012c2:	b29a      	uxth	r2, r3
 80012c4:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80012c8:	6879      	ldr	r1, [r7, #4]
 80012ca:	f003 ffa8 	bl	800521e <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 80012ce:	bf00      	nop
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	699b      	ldr	r3, [r3, #24]
 80012d4:	4618      	mov	r0, r3
 80012d6:	f004 fb91 	bl	80059fc <HAL_SPI_GetState>
 80012da:	4603      	mov	r3, r0
 80012dc:	2b01      	cmp	r3, #1
 80012de:	d1f7      	bne.n	80012d0 <LoRa_BurstWrite+0x66>
		;
	//NSS = 0
	//HAL_Delay(5);
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_SET);
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	6818      	ldr	r0, [r3, #0]
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	889b      	ldrh	r3, [r3, #4]
 80012e8:	2201      	movs	r2, #1
 80012ea:	4619      	mov	r1, r3
 80012ec:	f002 f806 	bl	80032fc <HAL_GPIO_WritePin>
}
 80012f0:	bf00      	nop
 80012f2:	3718      	adds	r7, #24
 80012f4:	46bd      	mov	sp, r7
 80012f6:	bd80      	pop	{r7, pc}

080012f8 <LoRa_isvalid>:
		description : check the LoRa instruct values
		arguments   :
			LoRa* LoRa --> LoRa object handler
		returns     : returns 1 if all of the values were given, otherwise returns 0
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_isvalid(LoRa* _LoRa){
 80012f8:	b480      	push	{r7}
 80012fa:	b083      	sub	sp, #12
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]

	return 1;
 8001300:	2301      	movs	r3, #1
}
 8001302:	4618      	mov	r0, r3
 8001304:	370c      	adds	r7, #12
 8001306:	46bd      	mov	sp, r7
 8001308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130c:	4770      	bx	lr
	...

08001310 <LoRa_setBitrate>:
		arguments   :
			LoRa*    LoRa     --> LoRa object handler
			uint16_t  br	  --> Bit rate value in kbps
		returns     : 1 in case of success, 0 in case of timeout
\* ----------------------------------------------------------------------------- */
void LoRa_setBitrate(LoRa* _LoRa, uint16_t br) {
 8001310:	b580      	push	{r7, lr}
 8001312:	b084      	sub	sp, #16
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
 8001318:	460b      	mov	r3, r1
 800131a:	807b      	strh	r3, [r7, #2]
	if(_LoRa->modulationMode == LORA_MODULATION) return;
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8001322:	2b02      	cmp	r3, #2
 8001324:	d023      	beq.n	800136e <LoRa_setBitrate+0x5e>
	uint16_t bitRate = (RFM95_CRYSTAL_FREQ * 1000.0) / br;
 8001326:	887b      	ldrh	r3, [r7, #2]
 8001328:	4618      	mov	r0, r3
 800132a:	f7ff f89f 	bl	800046c <__aeabi_i2d>
 800132e:	4602      	mov	r2, r0
 8001330:	460b      	mov	r3, r1
 8001332:	f04f 0000 	mov.w	r0, #0
 8001336:	4910      	ldr	r1, [pc, #64]	; (8001378 <LoRa_setBitrate+0x68>)
 8001338:	f7ff fa2c 	bl	8000794 <__aeabi_ddiv>
 800133c:	4602      	mov	r2, r0
 800133e:	460b      	mov	r3, r1
 8001340:	4610      	mov	r0, r2
 8001342:	4619      	mov	r1, r3
 8001344:	f7ff fb0e 	bl	8000964 <__aeabi_d2uiz>
 8001348:	4603      	mov	r3, r0
 800134a:	81fb      	strh	r3, [r7, #14]
	LoRa_write(_LoRa, RegBitrateMsb, (bitRate & 0xFF00) >> 8);
 800134c:	89fb      	ldrh	r3, [r7, #14]
 800134e:	0a1b      	lsrs	r3, r3, #8
 8001350:	b29b      	uxth	r3, r3
 8001352:	b2db      	uxtb	r3, r3
 8001354:	461a      	mov	r2, r3
 8001356:	2102      	movs	r1, #2
 8001358:	6878      	ldr	r0, [r7, #4]
 800135a:	f7ff ff69 	bl	8001230 <LoRa_write>
	LoRa_write(_LoRa, RegBitrateLsb, bitRate & 0x00FF);
 800135e:	89fb      	ldrh	r3, [r7, #14]
 8001360:	b2db      	uxtb	r3, r3
 8001362:	461a      	mov	r2, r3
 8001364:	2103      	movs	r1, #3
 8001366:	6878      	ldr	r0, [r7, #4]
 8001368:	f7ff ff62 	bl	8001230 <LoRa_write>
 800136c:	e000      	b.n	8001370 <LoRa_setBitrate+0x60>
	if(_LoRa->modulationMode == LORA_MODULATION) return;
 800136e:	bf00      	nop
}
 8001370:	3710      	adds	r7, #16
 8001372:	46bd      	mov	sp, r7
 8001374:	bd80      	pop	{r7, pc}
 8001376:	bf00      	nop
 8001378:	40df4000 	.word	0x40df4000

0800137c <LoRa_transmit>:
			uint8_t  data			--> A pointer to the data you wanna send
			uint8_t	 length   --> Size of your data in Bytes
			uint16_t timeOut	--> Timeout in milliseconds
		returns     : 1 in case of success, 0 in case of timeout
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_transmit(LoRa* _LoRa, uint8_t* data, uint8_t length, uint16_t timeout){
 800137c:	b580      	push	{r7, lr}
 800137e:	b086      	sub	sp, #24
 8001380:	af00      	add	r7, sp, #0
 8001382:	60f8      	str	r0, [r7, #12]
 8001384:	60b9      	str	r1, [r7, #8]
 8001386:	4611      	mov	r1, r2
 8001388:	461a      	mov	r2, r3
 800138a:	460b      	mov	r3, r1
 800138c:	71fb      	strb	r3, [r7, #7]
 800138e:	4613      	mov	r3, r2
 8001390:	80bb      	strh	r3, [r7, #4]
	uint8_t read;

	int mode = _LoRa->current_mode;
 8001392:	68fb      	ldr	r3, [r7, #12]
 8001394:	69db      	ldr	r3, [r3, #28]
 8001396:	617b      	str	r3, [r7, #20]
	LoRa_gotoMode(_LoRa, STNBY_MODE);
 8001398:	2101      	movs	r1, #1
 800139a:	68f8      	ldr	r0, [r7, #12]
 800139c:	f7ff fccb 	bl	8000d36 <LoRa_gotoMode>
	read = LoRa_read(_LoRa, RegFiFoTxBaseAddr);
 80013a0:	210e      	movs	r1, #14
 80013a2:	68f8      	ldr	r0, [r7, #12]
 80013a4:	f7ff ff2a 	bl	80011fc <LoRa_read>
 80013a8:	4603      	mov	r3, r0
 80013aa:	74fb      	strb	r3, [r7, #19]
	LoRa_write(_LoRa, RegFiFoAddPtr, read);
 80013ac:	7cfb      	ldrb	r3, [r7, #19]
 80013ae:	461a      	mov	r2, r3
 80013b0:	210d      	movs	r1, #13
 80013b2:	68f8      	ldr	r0, [r7, #12]
 80013b4:	f7ff ff3c 	bl	8001230 <LoRa_write>
	LoRa_write(_LoRa, RegPayloadLength, length);
 80013b8:	79fb      	ldrb	r3, [r7, #7]
 80013ba:	461a      	mov	r2, r3
 80013bc:	2122      	movs	r1, #34	; 0x22
 80013be:	68f8      	ldr	r0, [r7, #12]
 80013c0:	f7ff ff36 	bl	8001230 <LoRa_write>
	LoRa_BurstWrite(_LoRa, RegFiFo, data, length);
 80013c4:	79fb      	ldrb	r3, [r7, #7]
 80013c6:	68ba      	ldr	r2, [r7, #8]
 80013c8:	2100      	movs	r1, #0
 80013ca:	68f8      	ldr	r0, [r7, #12]
 80013cc:	f7ff ff4d 	bl	800126a <LoRa_BurstWrite>
	LoRa_gotoMode(_LoRa, TRANSMIT_MODE);
 80013d0:	2103      	movs	r1, #3
 80013d2:	68f8      	ldr	r0, [r7, #12]
 80013d4:	f7ff fcaf 	bl	8000d36 <LoRa_gotoMode>
	while(1){
		read = LoRa_read(_LoRa, RegIrqFlags);
 80013d8:	2112      	movs	r1, #18
 80013da:	68f8      	ldr	r0, [r7, #12]
 80013dc:	f7ff ff0e 	bl	80011fc <LoRa_read>
 80013e0:	4603      	mov	r3, r0
 80013e2:	74fb      	strb	r3, [r7, #19]
		if((read & 0x08)!=0){
 80013e4:	7cfb      	ldrb	r3, [r7, #19]
 80013e6:	f003 0308 	and.w	r3, r3, #8
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d00a      	beq.n	8001404 <LoRa_transmit+0x88>
			LoRa_write(_LoRa, RegIrqFlags, 0xFF);
 80013ee:	22ff      	movs	r2, #255	; 0xff
 80013f0:	2112      	movs	r1, #18
 80013f2:	68f8      	ldr	r0, [r7, #12]
 80013f4:	f7ff ff1c 	bl	8001230 <LoRa_write>
			LoRa_gotoMode(_LoRa, mode);
 80013f8:	6979      	ldr	r1, [r7, #20]
 80013fa:	68f8      	ldr	r0, [r7, #12]
 80013fc:	f7ff fc9b 	bl	8000d36 <LoRa_gotoMode>
			return 1;
 8001400:	2301      	movs	r3, #1
 8001402:	e00f      	b.n	8001424 <LoRa_transmit+0xa8>
		}
		else{
			if(--timeout==0){
 8001404:	88bb      	ldrh	r3, [r7, #4]
 8001406:	3b01      	subs	r3, #1
 8001408:	80bb      	strh	r3, [r7, #4]
 800140a:	88bb      	ldrh	r3, [r7, #4]
 800140c:	2b00      	cmp	r3, #0
 800140e:	d105      	bne.n	800141c <LoRa_transmit+0xa0>
				LoRa_gotoMode(_LoRa, mode);
 8001410:	6979      	ldr	r1, [r7, #20]
 8001412:	68f8      	ldr	r0, [r7, #12]
 8001414:	f7ff fc8f 	bl	8000d36 <LoRa_gotoMode>
				return 0;
 8001418:	2300      	movs	r3, #0
 800141a:	e003      	b.n	8001424 <LoRa_transmit+0xa8>
			}
		}
		HAL_Delay(1);
 800141c:	2001      	movs	r0, #1
 800141e:	f001 f899 	bl	8002554 <HAL_Delay>
		read = LoRa_read(_LoRa, RegIrqFlags);
 8001422:	e7d9      	b.n	80013d8 <LoRa_transmit+0x5c>
	}

}
 8001424:	4618      	mov	r0, r3
 8001426:	3718      	adds	r7, #24
 8001428:	46bd      	mov	sp, r7
 800142a:	bd80      	pop	{r7, pc}

0800142c <LoRa_startReceiving>:
		description : Start receiving continuously
		arguments   :
			LoRa*    LoRa     --> LoRa object handler
		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_startReceiving(LoRa* _LoRa){
 800142c:	b580      	push	{r7, lr}
 800142e:	b082      	sub	sp, #8
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
	LoRa_gotoMode(_LoRa, RXCONTIN_MODE);
 8001434:	2105      	movs	r1, #5
 8001436:	6878      	ldr	r0, [r7, #4]
 8001438:	f7ff fc7d 	bl	8000d36 <LoRa_gotoMode>
}
 800143c:	bf00      	nop
 800143e:	3708      	adds	r7, #8
 8001440:	46bd      	mov	sp, r7
 8001442:	bd80      	pop	{r7, pc}

08001444 <LoRa_setFSKMode>:
		arguments   :
			LoRa*    LoRa     --> LoRa object handler
			uint8_t  mode     --> Data mode type
		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setFSKMode(LoRa* _LoRa, uint8_t mode){
 8001444:	b580      	push	{r7, lr}
 8001446:	b084      	sub	sp, #16
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
 800144c:	460b      	mov	r3, r1
 800144e:	70fb      	strb	r3, [r7, #3]
	uint8_t read, data;
	if(_LoRa->modulationMode == LORA_MODULATION) return;
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8001456:	2b02      	cmp	r3, #2
 8001458:	d01b      	beq.n	8001492 <LoRa_setFSKMode+0x4e>
	read = LoRa_read(_LoRa, RegPacketConfig2);
 800145a:	2131      	movs	r1, #49	; 0x31
 800145c:	6878      	ldr	r0, [r7, #4]
 800145e:	f7ff fecd 	bl	80011fc <LoRa_read>
 8001462:	4603      	mov	r3, r0
 8001464:	73bb      	strb	r3, [r7, #14]
	if(mode == CONTINUOUS_MODE) data = (read & 0xBF);
 8001466:	78fb      	ldrb	r3, [r7, #3]
 8001468:	2b00      	cmp	r3, #0
 800146a:	d104      	bne.n	8001476 <LoRa_setFSKMode+0x32>
 800146c:	7bbb      	ldrb	r3, [r7, #14]
 800146e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001472:	73fb      	strb	r3, [r7, #15]
 8001474:	e006      	b.n	8001484 <LoRa_setFSKMode+0x40>
	else if(mode == PACKET_MODE) data = (read & 0xBF) | 0x40;
 8001476:	78fb      	ldrb	r3, [r7, #3]
 8001478:	2b01      	cmp	r3, #1
 800147a:	d103      	bne.n	8001484 <LoRa_setFSKMode+0x40>
 800147c:	7bbb      	ldrb	r3, [r7, #14]
 800147e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001482:	73fb      	strb	r3, [r7, #15]
	LoRa_write(_LoRa, RegPacketConfig2, data);
 8001484:	7bfb      	ldrb	r3, [r7, #15]
 8001486:	461a      	mov	r2, r3
 8001488:	2131      	movs	r1, #49	; 0x31
 800148a:	6878      	ldr	r0, [r7, #4]
 800148c:	f7ff fed0 	bl	8001230 <LoRa_write>
 8001490:	e000      	b.n	8001494 <LoRa_setFSKMode+0x50>
	if(_LoRa->modulationMode == LORA_MODULATION) return;
 8001492:	bf00      	nop
}
 8001494:	3710      	adds	r7, #16
 8001496:	46bd      	mov	sp, r7
 8001498:	bd80      	pop	{r7, pc}

0800149a <LoRa_receive>:
			LoRa*    LoRa     --> LoRa object handler
			uint8_t  data			--> A pointer to the array that you want to write bytes in it
			uint8_t	 length   --> Determines how many bytes you want to read
		returns     : The number of bytes received
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_receive(LoRa* _LoRa, uint8_t* data, uint8_t length){
 800149a:	b590      	push	{r4, r7, lr}
 800149c:	b089      	sub	sp, #36	; 0x24
 800149e:	af00      	add	r7, sp, #0
 80014a0:	60f8      	str	r0, [r7, #12]
 80014a2:	60b9      	str	r1, [r7, #8]
 80014a4:	4613      	mov	r3, r2
 80014a6:	71fb      	strb	r3, [r7, #7]
	uint8_t read;
	uint8_t number_of_bytes;
	uint8_t min = 0;
 80014a8:	2300      	movs	r3, #0
 80014aa:	77fb      	strb	r3, [r7, #31]

	for(int i=0; i<length; i++)
 80014ac:	2300      	movs	r3, #0
 80014ae:	61bb      	str	r3, [r7, #24]
 80014b0:	e007      	b.n	80014c2 <LoRa_receive+0x28>
		data[i]=0;
 80014b2:	69bb      	ldr	r3, [r7, #24]
 80014b4:	68ba      	ldr	r2, [r7, #8]
 80014b6:	4413      	add	r3, r2
 80014b8:	2200      	movs	r2, #0
 80014ba:	701a      	strb	r2, [r3, #0]
	for(int i=0; i<length; i++)
 80014bc:	69bb      	ldr	r3, [r7, #24]
 80014be:	3301      	adds	r3, #1
 80014c0:	61bb      	str	r3, [r7, #24]
 80014c2:	79fb      	ldrb	r3, [r7, #7]
 80014c4:	69ba      	ldr	r2, [r7, #24]
 80014c6:	429a      	cmp	r2, r3
 80014c8:	dbf3      	blt.n	80014b2 <LoRa_receive+0x18>

	LoRa_gotoMode(_LoRa, STNBY_MODE);
 80014ca:	2101      	movs	r1, #1
 80014cc:	68f8      	ldr	r0, [r7, #12]
 80014ce:	f7ff fc32 	bl	8000d36 <LoRa_gotoMode>
	read = LoRa_read(_LoRa, RegIrqFlags);
 80014d2:	2112      	movs	r1, #18
 80014d4:	68f8      	ldr	r0, [r7, #12]
 80014d6:	f7ff fe91 	bl	80011fc <LoRa_read>
 80014da:	4603      	mov	r3, r0
 80014dc:	74fb      	strb	r3, [r7, #19]
	if((read & 0x40) != 0){
 80014de:	7cfb      	ldrb	r3, [r7, #19]
 80014e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d02f      	beq.n	8001548 <LoRa_receive+0xae>
		LoRa_write(_LoRa, RegIrqFlags, 0xFF);
 80014e8:	22ff      	movs	r2, #255	; 0xff
 80014ea:	2112      	movs	r1, #18
 80014ec:	68f8      	ldr	r0, [r7, #12]
 80014ee:	f7ff fe9f 	bl	8001230 <LoRa_write>
		number_of_bytes = LoRa_read(_LoRa, RegRxNbBytes);
 80014f2:	2113      	movs	r1, #19
 80014f4:	68f8      	ldr	r0, [r7, #12]
 80014f6:	f7ff fe81 	bl	80011fc <LoRa_read>
 80014fa:	4603      	mov	r3, r0
 80014fc:	74bb      	strb	r3, [r7, #18]
		read = LoRa_read(_LoRa, RegFiFoRxCurrentAddr);
 80014fe:	2110      	movs	r1, #16
 8001500:	68f8      	ldr	r0, [r7, #12]
 8001502:	f7ff fe7b 	bl	80011fc <LoRa_read>
 8001506:	4603      	mov	r3, r0
 8001508:	74fb      	strb	r3, [r7, #19]
		LoRa_write(_LoRa, RegFiFoAddPtr, read);
 800150a:	7cfb      	ldrb	r3, [r7, #19]
 800150c:	461a      	mov	r2, r3
 800150e:	210d      	movs	r1, #13
 8001510:	68f8      	ldr	r0, [r7, #12]
 8001512:	f7ff fe8d 	bl	8001230 <LoRa_write>
		min = length >= number_of_bytes ? number_of_bytes : length;
 8001516:	7cba      	ldrb	r2, [r7, #18]
 8001518:	79fb      	ldrb	r3, [r7, #7]
 800151a:	4293      	cmp	r3, r2
 800151c:	bf28      	it	cs
 800151e:	4613      	movcs	r3, r2
 8001520:	77fb      	strb	r3, [r7, #31]
		for(int i=0; i<min; i++)
 8001522:	2300      	movs	r3, #0
 8001524:	617b      	str	r3, [r7, #20]
 8001526:	e00b      	b.n	8001540 <LoRa_receive+0xa6>
			data[i] = LoRa_read(_LoRa, RegFiFo);
 8001528:	697b      	ldr	r3, [r7, #20]
 800152a:	68ba      	ldr	r2, [r7, #8]
 800152c:	18d4      	adds	r4, r2, r3
 800152e:	2100      	movs	r1, #0
 8001530:	68f8      	ldr	r0, [r7, #12]
 8001532:	f7ff fe63 	bl	80011fc <LoRa_read>
 8001536:	4603      	mov	r3, r0
 8001538:	7023      	strb	r3, [r4, #0]
		for(int i=0; i<min; i++)
 800153a:	697b      	ldr	r3, [r7, #20]
 800153c:	3301      	adds	r3, #1
 800153e:	617b      	str	r3, [r7, #20]
 8001540:	7ffb      	ldrb	r3, [r7, #31]
 8001542:	697a      	ldr	r2, [r7, #20]
 8001544:	429a      	cmp	r2, r3
 8001546:	dbef      	blt.n	8001528 <LoRa_receive+0x8e>
	}
	LoRa_gotoMode(_LoRa, RXCONTIN_MODE);
 8001548:	2105      	movs	r1, #5
 800154a:	68f8      	ldr	r0, [r7, #12]
 800154c:	f7ff fbf3 	bl	8000d36 <LoRa_gotoMode>
    return min;
 8001550:	7ffb      	ldrb	r3, [r7, #31]
}
 8001552:	4618      	mov	r0, r3
 8001554:	3724      	adds	r7, #36	; 0x24
 8001556:	46bd      	mov	sp, r7
 8001558:	bd90      	pop	{r4, r7, pc}

0800155a <LoRa_init>:
		description : initialize and set the right setting according to LoRa sruct vars
		arguments   :
			LoRa* LoRa        --> LoRa object handler
		returns     : Nothing
\* ----------------------------------------------------------------------------- */
uint16_t LoRa_init(LoRa* _LoRa){
 800155a:	b580      	push	{r7, lr}
 800155c:	b084      	sub	sp, #16
 800155e:	af00      	add	r7, sp, #0
 8001560:	6078      	str	r0, [r7, #4]
	uint8_t    data;
	uint8_t    read;

	// Check modulation mode
	read = LoRa_read(_LoRa, RegOpMode);
 8001562:	2101      	movs	r1, #1
 8001564:	6878      	ldr	r0, [r7, #4]
 8001566:	f7ff fe49 	bl	80011fc <LoRa_read>
 800156a:	4603      	mov	r3, r0
 800156c:	73fb      	strb	r3, [r7, #15]
	if((read & 0x80) == 0x80) _LoRa->modulationMode = LORA_MODULATION;
 800156e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001572:	2b00      	cmp	r3, #0
 8001574:	da04      	bge.n	8001580 <LoRa_init+0x26>
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	2202      	movs	r2, #2
 800157a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 800157e:	e012      	b.n	80015a6 <LoRa_init+0x4c>
	else {
		if((read & 0x60) == 0x00) _LoRa->modulationMode = FSK_MODULATION;
 8001580:	7bfb      	ldrb	r3, [r7, #15]
 8001582:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8001586:	2b00      	cmp	r3, #0
 8001588:	d104      	bne.n	8001594 <LoRa_init+0x3a>
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	2200      	movs	r2, #0
 800158e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 8001592:	e008      	b.n	80015a6 <LoRa_init+0x4c>
		else if((read & 0x60) == 0x20) _LoRa->modulationMode = OOK_MODULATION;
 8001594:	7bfb      	ldrb	r3, [r7, #15]
 8001596:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800159a:	2b20      	cmp	r3, #32
 800159c:	d103      	bne.n	80015a6 <LoRa_init+0x4c>
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	2201      	movs	r2, #1
 80015a2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
	}

	if(LoRa_isvalid(_LoRa)){
 80015a6:	6878      	ldr	r0, [r7, #4]
 80015a8:	f7ff fea6 	bl	80012f8 <LoRa_isvalid>
 80015ac:	4603      	mov	r3, r0
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	f000 80be 	beq.w	8001730 <LoRa_init+0x1d6>
		// goto sleep mode:
			LoRa_gotoMode(_LoRa, SLEEP_MODE);
 80015b4:	2100      	movs	r1, #0
 80015b6:	6878      	ldr	r0, [r7, #4]
 80015b8:	f7ff fbbd 	bl	8000d36 <LoRa_gotoMode>
			HAL_Delay(10);
 80015bc:	200a      	movs	r0, #10
 80015be:	f000 ffc9 	bl	8002554 <HAL_Delay>
			if( _LoRa->modulationMode == LORA_MODULATION) {
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80015c8:	2b02      	cmp	r3, #2
 80015ca:	d115      	bne.n	80015f8 <LoRa_init+0x9e>
				// turn on lora mode:
				read = LoRa_read(_LoRa, RegOpMode);
 80015cc:	2101      	movs	r1, #1
 80015ce:	6878      	ldr	r0, [r7, #4]
 80015d0:	f7ff fe14 	bl	80011fc <LoRa_read>
 80015d4:	4603      	mov	r3, r0
 80015d6:	73fb      	strb	r3, [r7, #15]
				HAL_Delay(10);
 80015d8:	200a      	movs	r0, #10
 80015da:	f000 ffbb 	bl	8002554 <HAL_Delay>
				data = read | 0x80;
 80015de:	7bfb      	ldrb	r3, [r7, #15]
 80015e0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80015e4:	73bb      	strb	r3, [r7, #14]
				LoRa_write(_LoRa, RegOpMode, data);
 80015e6:	7bbb      	ldrb	r3, [r7, #14]
 80015e8:	461a      	mov	r2, r3
 80015ea:	2101      	movs	r1, #1
 80015ec:	6878      	ldr	r0, [r7, #4]
 80015ee:	f7ff fe1f 	bl	8001230 <LoRa_write>
				HAL_Delay(100);
 80015f2:	2064      	movs	r0, #100	; 0x64
 80015f4:	f000 ffae 	bl	8002554 <HAL_Delay>
			}

		// set frequency:
			LoRa_setFrequency(_LoRa, _LoRa->frequency);
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	6a1b      	ldr	r3, [r3, #32]
 80015fc:	4619      	mov	r1, r3
 80015fe:	6878      	ldr	r0, [r7, #4]
 8001600:	f7ff fcfa 	bl	8000ff8 <LoRa_setFrequency>

		// set output power gain:
			LoRa_setPower(_LoRa, _LoRa->power);
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 800160a:	4619      	mov	r1, r3
 800160c:	6878      	ldr	r0, [r7, #4]
 800160e:	f7ff fd52 	bl	80010b6 <LoRa_setPower>

		// set over current protection:
			LoRa_setOCP(_LoRa, _LoRa->overCurrentProtection);
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8001618:	4619      	mov	r1, r3
 800161a:	6878      	ldr	r0, [r7, #4]
 800161c:	f7ff fd5e 	bl	80010dc <LoRa_setOCP>

		// set LNA gain:
			LoRa_write(_LoRa, RegLna, 0x23);
 8001620:	2223      	movs	r2, #35	; 0x23
 8001622:	210c      	movs	r1, #12
 8001624:	6878      	ldr	r0, [r7, #4]
 8001626:	f7ff fe03 	bl	8001230 <LoRa_write>

		// set spreading factor, CRC on, and Timeout Msb:
			LoRa_setTOMsb_setCRCon(_LoRa);
 800162a:	6878      	ldr	r0, [r7, #4]
 800162c:	f7ff fdc2 	bl	80011b4 <LoRa_setTOMsb_setCRCon>
			if(_LoRa->modulationMode == LORA_MODULATION) {
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8001636:	2b02      	cmp	r3, #2
 8001638:	d11f      	bne.n	800167a <LoRa_init+0x120>
				LoRa_setSpreadingFactor(_LoRa, _LoRa->spredingFactor);
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001640:	4619      	mov	r1, r3
 8001642:	6878      	ldr	r0, [r7, #4]
 8001644:	f7ff fd08 	bl	8001058 <LoRa_setSpreadingFactor>
				// set Timeout Lsb:
				LoRa_write(_LoRa, RegSymbTimeoutL, 0xFF);
 8001648:	22ff      	movs	r2, #255	; 0xff
 800164a:	211f      	movs	r1, #31
 800164c:	6878      	ldr	r0, [r7, #4]
 800164e:	f7ff fdef 	bl	8001230 <LoRa_write>
				// set bandwidth, coding rate and expilicit mode:
				// 8 bit RegModemConfig --> | X | X | X | X | X | X | X | X |
				//       bits represent --> |   bandwidth   |     CR    |I/E|
				data = 0;
 8001652:	2300      	movs	r3, #0
 8001654:	73bb      	strb	r3, [r7, #14]
				data = (_LoRa->bandWidth << 4) + (_LoRa->crcRate << 1);
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800165c:	011b      	lsls	r3, r3, #4
 800165e:	b2da      	uxtb	r2, r3
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8001666:	005b      	lsls	r3, r3, #1
 8001668:	b2db      	uxtb	r3, r3
 800166a:	4413      	add	r3, r2
 800166c:	73bb      	strb	r3, [r7, #14]
				LoRa_write(_LoRa, RegModemConfig1, data);
 800166e:	7bbb      	ldrb	r3, [r7, #14]
 8001670:	461a      	mov	r2, r3
 8001672:	211d      	movs	r1, #29
 8001674:	6878      	ldr	r0, [r7, #4]
 8001676:	f7ff fddb 	bl	8001230 <LoRa_write>
			}

		// set preamble:
			if(_LoRa->modulationMode == LORA_MODULATION) {
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8001680:	2b02      	cmp	r3, #2
 8001682:	d112      	bne.n	80016aa <LoRa_init+0x150>
				LoRa_write(_LoRa, RegPreambleMsb, _LoRa->preamble >> 8);
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001688:	0a1b      	lsrs	r3, r3, #8
 800168a:	b29b      	uxth	r3, r3
 800168c:	b2db      	uxtb	r3, r3
 800168e:	461a      	mov	r2, r3
 8001690:	2120      	movs	r1, #32
 8001692:	6878      	ldr	r0, [r7, #4]
 8001694:	f7ff fdcc 	bl	8001230 <LoRa_write>
				LoRa_write(_LoRa, RegPreambleLsb, _LoRa->preamble >> 0);
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800169c:	b2db      	uxtb	r3, r3
 800169e:	461a      	mov	r2, r3
 80016a0:	2121      	movs	r1, #33	; 0x21
 80016a2:	6878      	ldr	r0, [r7, #4]
 80016a4:	f7ff fdc4 	bl	8001230 <LoRa_write>
 80016a8:	e004      	b.n	80016b4 <LoRa_init+0x15a>
			}
			else {
				LoRa_write(_LoRa, RegPreambleDetect, 0xAA);		// Preamble detect ON, preable detect size 2 bytes, detector tolerance 0x0A (default)
 80016aa:	22aa      	movs	r2, #170	; 0xaa
 80016ac:	211f      	movs	r1, #31
 80016ae:	6878      	ldr	r0, [r7, #4]
 80016b0:	f7ff fdbe 	bl	8001230 <LoRa_write>
			}

		// DIO mapping:   --> DIO: RxDone
			if(_LoRa->modulationMode == LORA_MODULATION) {
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80016ba:	2b02      	cmp	r3, #2
 80016bc:	d110      	bne.n	80016e0 <LoRa_init+0x186>
				read = LoRa_read(_LoRa, RegDioMapping1);
 80016be:	2140      	movs	r1, #64	; 0x40
 80016c0:	6878      	ldr	r0, [r7, #4]
 80016c2:	f7ff fd9b 	bl	80011fc <LoRa_read>
 80016c6:	4603      	mov	r3, r0
 80016c8:	73fb      	strb	r3, [r7, #15]
				data = read | 0x3F;
 80016ca:	7bfb      	ldrb	r3, [r7, #15]
 80016cc:	f043 033f 	orr.w	r3, r3, #63	; 0x3f
 80016d0:	73bb      	strb	r3, [r7, #14]
				LoRa_write(_LoRa, RegDioMapping1, data);
 80016d2:	7bbb      	ldrb	r3, [r7, #14]
 80016d4:	461a      	mov	r2, r3
 80016d6:	2140      	movs	r1, #64	; 0x40
 80016d8:	6878      	ldr	r0, [r7, #4]
 80016da:	f7ff fda9 	bl	8001230 <LoRa_write>
 80016de:	e00f      	b.n	8001700 <LoRa_init+0x1a6>
			}
			else {
				// DIO2: RxDone
				read = LoRa_read(_LoRa, RegDioMapping1);
 80016e0:	2140      	movs	r1, #64	; 0x40
 80016e2:	6878      	ldr	r0, [r7, #4]
 80016e4:	f7ff fd8a 	bl	80011fc <LoRa_read>
 80016e8:	4603      	mov	r3, r0
 80016ea:	73fb      	strb	r3, [r7, #15]
				data = read | 0x3F;
 80016ec:	7bfb      	ldrb	r3, [r7, #15]
 80016ee:	f043 033f 	orr.w	r3, r3, #63	; 0x3f
 80016f2:	73bb      	strb	r3, [r7, #14]
				LoRa_write(_LoRa, RegDioMapping1, data);
 80016f4:	7bbb      	ldrb	r3, [r7, #14]
 80016f6:	461a      	mov	r2, r3
 80016f8:	2140      	movs	r1, #64	; 0x40
 80016fa:	6878      	ldr	r0, [r7, #4]
 80016fc:	f7ff fd98 	bl	8001230 <LoRa_write>
			}


		// goto standby mode:
			LoRa_gotoMode(_LoRa, STNBY_MODE);
 8001700:	2101      	movs	r1, #1
 8001702:	6878      	ldr	r0, [r7, #4]
 8001704:	f7ff fb17 	bl	8000d36 <LoRa_gotoMode>
			_LoRa->current_mode = STNBY_MODE;
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	2201      	movs	r2, #1
 800170c:	61da      	str	r2, [r3, #28]
			HAL_Delay(10);
 800170e:	200a      	movs	r0, #10
 8001710:	f000 ff20 	bl	8002554 <HAL_Delay>

			read = LoRa_read(_LoRa, RegVersion);
 8001714:	2142      	movs	r1, #66	; 0x42
 8001716:	6878      	ldr	r0, [r7, #4]
 8001718:	f7ff fd70 	bl	80011fc <LoRa_read>
 800171c:	4603      	mov	r3, r0
 800171e:	73fb      	strb	r3, [r7, #15]
			if(read == 0x12)
 8001720:	7bfb      	ldrb	r3, [r7, #15]
 8001722:	2b12      	cmp	r3, #18
 8001724:	d101      	bne.n	800172a <LoRa_init+0x1d0>
				return LORA_OK;
 8001726:	23c8      	movs	r3, #200	; 0xc8
 8001728:	e004      	b.n	8001734 <LoRa_init+0x1da>
			else
				return LORA_NOT_FOUND;
 800172a:	f44f 73ca 	mov.w	r3, #404	; 0x194
 800172e:	e001      	b.n	8001734 <LoRa_init+0x1da>
	}
	else {
		return LORA_UNAVAILABLE;
 8001730:	f240 13f7 	movw	r3, #503	; 0x1f7
	}
}
 8001734:	4618      	mov	r0, r3
 8001736:	3710      	adds	r7, #16
 8001738:	46bd      	mov	sp, r7
 800173a:	bd80      	pop	{r7, pc}

0800173c <LoRa_received_bytes>:
		description : check number of bytes available in FIFO RX buffer
		arguments   :
			LoRa* LoRa        --> LoRa object handler
		returns     : 8 bit integer, number of bytes available to read from FIFO RX buffer
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_received_bytes(LoRa* _LoRa) {
 800173c:	b580      	push	{r7, lr}
 800173e:	b082      	sub	sp, #8
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
	return LoRa_read(_LoRa, RegRxNbBytes);
 8001744:	2113      	movs	r1, #19
 8001746:	6878      	ldr	r0, [r7, #4]
 8001748:	f7ff fd58 	bl	80011fc <LoRa_read>
 800174c:	4603      	mov	r3, r0
}
 800174e:	4618      	mov	r0, r3
 8001750:	3708      	adds	r7, #8
 8001752:	46bd      	mov	sp, r7
 8001754:	bd80      	pop	{r7, pc}
	...

08001758 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001758:	b5b0      	push	{r4, r5, r7, lr}
 800175a:	f5ad 7d0e 	sub.w	sp, sp, #568	; 0x238
 800175e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  RetargetInit(USB_UART);
 8001760:	4b5b      	ldr	r3, [pc, #364]	; (80018d0 <main+0x178>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	4618      	mov	r0, r3
 8001766:	f000 fb87 	bl	8001e78 <RetargetInit>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800176a:	f000 fe81 	bl	8002470 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800176e:	f000 f8c5 	bl	80018fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */
  //***************************** DMA MUST INIT BEFORE UART ***********************
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001772:	f000 fa25 	bl	8001bc0 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8001776:	f000 f9af 	bl	8001ad8 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 800177a:	f000 f9d7 	bl	8001b2c <MX_USART2_UART_Init>
  MX_SPI1_Init();
 800177e:	f000 f927 	bl	80019d0 <MX_SPI1_Init>
  MX_DMA_Init();
 8001782:	f000 f9fd 	bl	8001b80 <MX_DMA_Init>
  MX_TIM2_Init();
 8001786:	f000 f959 	bl	8001a3c <MX_TIM2_Init>
  MX_USB_DEVICE_Init();
 800178a:	f009 fd61 	bl	800b250 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */

  // Polling timer init
  HAL_TIM_Base_Start_IT(Poll_Timer);
 800178e:	4b51      	ldr	r3, [pc, #324]	; (80018d4 <main+0x17c>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	4618      	mov	r0, r3
 8001794:	f004 fac0 	bl	8005d18 <HAL_TIM_Base_Start_IT>
  // UART interrupt init
  HAL_UART_Receive_DMA (USB_UART, UART_Buff, sizeof(UART_Buff));
 8001798:	4b4d      	ldr	r3, [pc, #308]	; (80018d0 <main+0x178>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80017a0:	494d      	ldr	r1, [pc, #308]	; (80018d8 <main+0x180>)
 80017a2:	4618      	mov	r0, r3
 80017a4:	f005 f86b 	bl	800687e <HAL_UART_Receive_DMA>

  // LoRa Class definitions
  LoRaClass = newLoRa();
 80017a8:	4c4c      	ldr	r4, [pc, #304]	; (80018dc <main+0x184>)
 80017aa:	463b      	mov	r3, r7
 80017ac:	4618      	mov	r0, r3
 80017ae:	f7ff fa7b 	bl	8000ca8 <newLoRa>
 80017b2:	f507 730e 	add.w	r3, r7, #568	; 0x238
 80017b6:	f5a3 730e 	sub.w	r3, r3, #568	; 0x238
 80017ba:	461d      	mov	r5, r3
 80017bc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80017be:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80017c0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80017c2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80017c4:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80017c8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  LoRaClass.hSPIx                 = RF_SPI;
 80017cc:	4b44      	ldr	r3, [pc, #272]	; (80018e0 <main+0x188>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	4a42      	ldr	r2, [pc, #264]	; (80018dc <main+0x184>)
 80017d2:	6193      	str	r3, [r2, #24]
  LoRaClass.CS_port               = RF_SPI_NSS_GPIO_Port;
 80017d4:	4b41      	ldr	r3, [pc, #260]	; (80018dc <main+0x184>)
 80017d6:	4a43      	ldr	r2, [pc, #268]	; (80018e4 <main+0x18c>)
 80017d8:	601a      	str	r2, [r3, #0]
  LoRaClass.CS_pin                = RF_SPI_NSS_Pin;
 80017da:	4b40      	ldr	r3, [pc, #256]	; (80018dc <main+0x184>)
 80017dc:	2210      	movs	r2, #16
 80017de:	809a      	strh	r2, [r3, #4]
  LoRaClass.reset_port            = RESET_RF_GPIO_Port;
 80017e0:	4b3e      	ldr	r3, [pc, #248]	; (80018dc <main+0x184>)
 80017e2:	4a41      	ldr	r2, [pc, #260]	; (80018e8 <main+0x190>)
 80017e4:	609a      	str	r2, [r3, #8]
  LoRaClass.reset_pin             = RESET_RF_Pin;
 80017e6:	4b3d      	ldr	r3, [pc, #244]	; (80018dc <main+0x184>)
 80017e8:	2201      	movs	r2, #1
 80017ea:	819a      	strh	r2, [r3, #12]
  LoRaClass.DIO0_port			  = IO0_RF_GPIO_Port;
 80017ec:	4b3b      	ldr	r3, [pc, #236]	; (80018dc <main+0x184>)
 80017ee:	4a3e      	ldr	r2, [pc, #248]	; (80018e8 <main+0x190>)
 80017f0:	611a      	str	r2, [r3, #16]
  LoRaClass.DIO0_pin			  = IO0_RF_Pin;
 80017f2:	4b3a      	ldr	r3, [pc, #232]	; (80018dc <main+0x184>)
 80017f4:	2202      	movs	r2, #2
 80017f6:	829a      	strh	r2, [r3, #20]

  LoRaClass.frequency             = 915;
 80017f8:	4b38      	ldr	r3, [pc, #224]	; (80018dc <main+0x184>)
 80017fa:	f240 3293 	movw	r2, #915	; 0x393
 80017fe:	621a      	str	r2, [r3, #32]
  LoRaClass.spredingFactor        = SF_7;						// default = SF_7
 8001800:	4b36      	ldr	r3, [pc, #216]	; (80018dc <main+0x184>)
 8001802:	2207      	movs	r2, #7
 8001804:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  LoRaClass.bandWidth			  = BW_125KHz;				  	// default = BW_125KHz
 8001808:	4b34      	ldr	r3, [pc, #208]	; (80018dc <main+0x184>)
 800180a:	2207      	movs	r2, #7
 800180c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  LoRaClass.crcRate				  = CR_4_5;						// default = CR_4_5
 8001810:	4b32      	ldr	r3, [pc, #200]	; (80018dc <main+0x184>)
 8001812:	2201      	movs	r2, #1
 8001814:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  LoRaClass.power			      = POWER_20db;					// default = 20db
 8001818:	4b30      	ldr	r3, [pc, #192]	; (80018dc <main+0x184>)
 800181a:	22ff      	movs	r2, #255	; 0xff
 800181c:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  LoRaClass.overCurrentProtection = 120; 						// default = 100 mA
 8001820:	4b2e      	ldr	r3, [pc, #184]	; (80018dc <main+0x184>)
 8001822:	2278      	movs	r2, #120	; 0x78
 8001824:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  LoRaClass.preamble			  = 10;		  					// default = 8;
 8001828:	4b2c      	ldr	r3, [pc, #176]	; (80018dc <main+0x184>)
 800182a:	220a      	movs	r2, #10
 800182c:	851a      	strh	r2, [r3, #40]	; 0x28
  LoRaClass.preamble			  = FSK_MODULATION;
 800182e:	4b2b      	ldr	r3, [pc, #172]	; (80018dc <main+0x184>)
 8001830:	2200      	movs	r2, #0
 8001832:	851a      	strh	r2, [r3, #40]	; 0x28

  HAL_GPIO_WritePin(RF_SPI_NSS_GPIO_Port, RF_SPI_NSS_Pin, GPIO_PIN_SET);
 8001834:	2201      	movs	r2, #1
 8001836:	2110      	movs	r1, #16
 8001838:	482a      	ldr	r0, [pc, #168]	; (80018e4 <main+0x18c>)
 800183a:	f001 fd5f 	bl	80032fc <HAL_GPIO_WritePin>

  LoRa_setModulation(&LoRaClass, FSK_MODULATION);
 800183e:	2100      	movs	r1, #0
 8001840:	4826      	ldr	r0, [pc, #152]	; (80018dc <main+0x184>)
 8001842:	f7ff fafc 	bl	8000e3e <LoRa_setModulation>
  LoRa_setFSKMode(&LoRaClass, PACKET_MODE);
 8001846:	2101      	movs	r1, #1
 8001848:	4824      	ldr	r0, [pc, #144]	; (80018dc <main+0x184>)
 800184a:	f7ff fdfb 	bl	8001444 <LoRa_setFSKMode>
  LoRa_setBitrate(&LoRaClass, 300);
 800184e:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8001852:	4822      	ldr	r0, [pc, #136]	; (80018dc <main+0x184>)
 8001854:	f7ff fd5c 	bl	8001310 <LoRa_setBitrate>

  LoRa_reset(&LoRaClass);
 8001858:	4820      	ldr	r0, [pc, #128]	; (80018dc <main+0x184>)
 800185a:	f7ff fa4e 	bl	8000cfa <LoRa_reset>
  uint32_t result = LoRa_init(&LoRaClass);
 800185e:	481f      	ldr	r0, [pc, #124]	; (80018dc <main+0x184>)
 8001860:	f7ff fe7b 	bl	800155a <LoRa_init>
 8001864:	4603      	mov	r3, r0
 8001866:	f8c7 3234 	str.w	r3, [r7, #564]	; 0x234

  if(result == LORA_NOT_FOUND) {
 800186a:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 800186e:	f5b3 7fca 	cmp.w	r3, #404	; 0x194
 8001872:	d103      	bne.n	800187c <main+0x124>
	  Blocking_LED_Blink(1);
 8001874:	2001      	movs	r0, #1
 8001876:	f000 fad7 	bl	8001e28 <Blocking_LED_Blink>
 800187a:	e008      	b.n	800188e <main+0x136>
  }
  else if(result == LORA_UNAVAILABLE) {
 800187c:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 8001880:	f240 12f7 	movw	r2, #503	; 0x1f7
 8001884:	4293      	cmp	r3, r2
 8001886:	d102      	bne.n	800188e <main+0x136>
	  Blocking_LED_Blink(1);
 8001888:	2001      	movs	r0, #1
 800188a:	f000 facd 	bl	8001e28 <Blocking_LED_Blink>
  }

  // START CONTINUOUS RECEIVING -----------------------------------
  LoRa_startReceiving(&LoRaClass);
 800188e:	4813      	ldr	r0, [pc, #76]	; (80018dc <main+0x184>)
 8001890:	f7ff fdcc 	bl	800142c <LoRa_startReceiving>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  while(1) {
		  if(LoRa_transmit(&LoRaClass, (uint8_t*)"Testing\r\n", (uint8_t)sizeof("Testing\r\n"), 1000)) {
 8001894:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001898:	220a      	movs	r2, #10
 800189a:	4914      	ldr	r1, [pc, #80]	; (80018ec <main+0x194>)
 800189c:	480f      	ldr	r0, [pc, #60]	; (80018dc <main+0x184>)
 800189e:	f7ff fd6d 	bl	800137c <LoRa_transmit>
 80018a2:	4603      	mov	r3, r0
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d002      	beq.n	80018ae <main+0x156>
			  printf("Transmit failed\r\n");
 80018a8:	4811      	ldr	r0, [pc, #68]	; (80018f0 <main+0x198>)
 80018aa:	f00a fa9f 	bl	800bdec <puts>
		  }
		  HAL_Delay(1000);
 80018ae:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80018b2:	f000 fe4f 	bl	8002554 <HAL_Delay>
		  if(LoRa_receive(&LoRaClass, RF_RX_Buff, sizeof("Testing\r\n"))) {
 80018b6:	220a      	movs	r2, #10
 80018b8:	490e      	ldr	r1, [pc, #56]	; (80018f4 <main+0x19c>)
 80018ba:	4808      	ldr	r0, [pc, #32]	; (80018dc <main+0x184>)
 80018bc:	f7ff fded 	bl	800149a <LoRa_receive>
 80018c0:	4603      	mov	r3, r0
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d0e6      	beq.n	8001894 <main+0x13c>
			  printf("Nothing received\r\n");
 80018c6:	480c      	ldr	r0, [pc, #48]	; (80018f8 <main+0x1a0>)
 80018c8:	f00a fa90 	bl	800bdec <puts>
		  if(LoRa_transmit(&LoRaClass, (uint8_t*)"Testing\r\n", (uint8_t)sizeof("Testing\r\n"), 1000)) {
 80018cc:	e7e2      	b.n	8001894 <main+0x13c>
 80018ce:	bf00      	nop
 80018d0:	20000000 	.word	0x20000000
 80018d4:	20000008 	.word	0x20000008
 80018d8:	20000418 	.word	0x20000418
 80018dc:	200007fc 	.word	0x200007fc
 80018e0:	20000004 	.word	0x20000004
 80018e4:	40020000 	.word	0x40020000
 80018e8:	40020400 	.word	0x40020400
 80018ec:	0800c8c0 	.word	0x0800c8c0
 80018f0:	0800c8cc 	.word	0x0800c8cc
 80018f4:	20000318 	.word	0x20000318
 80018f8:	0800c8e0 	.word	0x0800c8e0

080018fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b094      	sub	sp, #80	; 0x50
 8001900:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001902:	f107 0320 	add.w	r3, r7, #32
 8001906:	2230      	movs	r2, #48	; 0x30
 8001908:	2100      	movs	r1, #0
 800190a:	4618      	mov	r0, r3
 800190c:	f00a f9f8 	bl	800bd00 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001910:	f107 030c 	add.w	r3, r7, #12
 8001914:	2200      	movs	r2, #0
 8001916:	601a      	str	r2, [r3, #0]
 8001918:	605a      	str	r2, [r3, #4]
 800191a:	609a      	str	r2, [r3, #8]
 800191c:	60da      	str	r2, [r3, #12]
 800191e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001920:	2300      	movs	r3, #0
 8001922:	60bb      	str	r3, [r7, #8]
 8001924:	4b28      	ldr	r3, [pc, #160]	; (80019c8 <SystemClock_Config+0xcc>)
 8001926:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001928:	4a27      	ldr	r2, [pc, #156]	; (80019c8 <SystemClock_Config+0xcc>)
 800192a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800192e:	6413      	str	r3, [r2, #64]	; 0x40
 8001930:	4b25      	ldr	r3, [pc, #148]	; (80019c8 <SystemClock_Config+0xcc>)
 8001932:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001934:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001938:	60bb      	str	r3, [r7, #8]
 800193a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800193c:	2300      	movs	r3, #0
 800193e:	607b      	str	r3, [r7, #4]
 8001940:	4b22      	ldr	r3, [pc, #136]	; (80019cc <SystemClock_Config+0xd0>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	4a21      	ldr	r2, [pc, #132]	; (80019cc <SystemClock_Config+0xd0>)
 8001946:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800194a:	6013      	str	r3, [r2, #0]
 800194c:	4b1f      	ldr	r3, [pc, #124]	; (80019cc <SystemClock_Config+0xd0>)
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001954:	607b      	str	r3, [r7, #4]
 8001956:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001958:	2301      	movs	r3, #1
 800195a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800195c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001960:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001962:	2302      	movs	r3, #2
 8001964:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001966:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800196a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 12;
 800196c:	230c      	movs	r3, #12
 800196e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001970:	23a8      	movs	r3, #168	; 0xa8
 8001972:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001974:	2302      	movs	r3, #2
 8001976:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001978:	2307      	movs	r3, #7
 800197a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800197c:	f107 0320 	add.w	r3, r7, #32
 8001980:	4618      	mov	r0, r3
 8001982:	f002 ff6b 	bl	800485c <HAL_RCC_OscConfig>
 8001986:	4603      	mov	r3, r0
 8001988:	2b00      	cmp	r3, #0
 800198a:	d001      	beq.n	8001990 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800198c:	f000 fa6e 	bl	8001e6c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001990:	230f      	movs	r3, #15
 8001992:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001994:	2302      	movs	r3, #2
 8001996:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001998:	2300      	movs	r3, #0
 800199a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800199c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80019a0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80019a2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80019a6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80019a8:	f107 030c 	add.w	r3, r7, #12
 80019ac:	2105      	movs	r1, #5
 80019ae:	4618      	mov	r0, r3
 80019b0:	f003 f9cc 	bl	8004d4c <HAL_RCC_ClockConfig>
 80019b4:	4603      	mov	r3, r0
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d001      	beq.n	80019be <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80019ba:	f000 fa57 	bl	8001e6c <Error_Handler>
  }
}
 80019be:	bf00      	nop
 80019c0:	3750      	adds	r7, #80	; 0x50
 80019c2:	46bd      	mov	sp, r7
 80019c4:	bd80      	pop	{r7, pc}
 80019c6:	bf00      	nop
 80019c8:	40023800 	.word	0x40023800
 80019cc:	40007000 	.word	0x40007000

080019d0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80019d4:	4b17      	ldr	r3, [pc, #92]	; (8001a34 <MX_SPI1_Init+0x64>)
 80019d6:	4a18      	ldr	r2, [pc, #96]	; (8001a38 <MX_SPI1_Init+0x68>)
 80019d8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80019da:	4b16      	ldr	r3, [pc, #88]	; (8001a34 <MX_SPI1_Init+0x64>)
 80019dc:	f44f 7282 	mov.w	r2, #260	; 0x104
 80019e0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80019e2:	4b14      	ldr	r3, [pc, #80]	; (8001a34 <MX_SPI1_Init+0x64>)
 80019e4:	2200      	movs	r2, #0
 80019e6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80019e8:	4b12      	ldr	r3, [pc, #72]	; (8001a34 <MX_SPI1_Init+0x64>)
 80019ea:	2200      	movs	r2, #0
 80019ec:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80019ee:	4b11      	ldr	r3, [pc, #68]	; (8001a34 <MX_SPI1_Init+0x64>)
 80019f0:	2200      	movs	r2, #0
 80019f2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80019f4:	4b0f      	ldr	r3, [pc, #60]	; (8001a34 <MX_SPI1_Init+0x64>)
 80019f6:	2200      	movs	r2, #0
 80019f8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80019fa:	4b0e      	ldr	r3, [pc, #56]	; (8001a34 <MX_SPI1_Init+0x64>)
 80019fc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a00:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8001a02:	4b0c      	ldr	r3, [pc, #48]	; (8001a34 <MX_SPI1_Init+0x64>)
 8001a04:	2230      	movs	r2, #48	; 0x30
 8001a06:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001a08:	4b0a      	ldr	r3, [pc, #40]	; (8001a34 <MX_SPI1_Init+0x64>)
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001a0e:	4b09      	ldr	r3, [pc, #36]	; (8001a34 <MX_SPI1_Init+0x64>)
 8001a10:	2200      	movs	r2, #0
 8001a12:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001a14:	4b07      	ldr	r3, [pc, #28]	; (8001a34 <MX_SPI1_Init+0x64>)
 8001a16:	2200      	movs	r2, #0
 8001a18:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001a1a:	4b06      	ldr	r3, [pc, #24]	; (8001a34 <MX_SPI1_Init+0x64>)
 8001a1c:	220a      	movs	r2, #10
 8001a1e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001a20:	4804      	ldr	r0, [pc, #16]	; (8001a34 <MX_SPI1_Init+0x64>)
 8001a22:	f003 fb73 	bl	800510c <HAL_SPI_Init>
 8001a26:	4603      	mov	r3, r0
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d001      	beq.n	8001a30 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001a2c:	f000 fa1e 	bl	8001e6c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001a30:	bf00      	nop
 8001a32:	bd80      	pop	{r7, pc}
 8001a34:	2000018c 	.word	0x2000018c
 8001a38:	40013000 	.word	0x40013000

08001a3c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b086      	sub	sp, #24
 8001a40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a42:	f107 0308 	add.w	r3, r7, #8
 8001a46:	2200      	movs	r2, #0
 8001a48:	601a      	str	r2, [r3, #0]
 8001a4a:	605a      	str	r2, [r3, #4]
 8001a4c:	609a      	str	r2, [r3, #8]
 8001a4e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a50:	463b      	mov	r3, r7
 8001a52:	2200      	movs	r2, #0
 8001a54:	601a      	str	r2, [r3, #0]
 8001a56:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001a58:	4b1e      	ldr	r3, [pc, #120]	; (8001ad4 <MX_TIM2_Init+0x98>)
 8001a5a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001a5e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 2500;
 8001a60:	4b1c      	ldr	r3, [pc, #112]	; (8001ad4 <MX_TIM2_Init+0x98>)
 8001a62:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8001a66:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a68:	4b1a      	ldr	r3, [pc, #104]	; (8001ad4 <MX_TIM2_Init+0x98>)
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 16800;
 8001a6e:	4b19      	ldr	r3, [pc, #100]	; (8001ad4 <MX_TIM2_Init+0x98>)
 8001a70:	f244 12a0 	movw	r2, #16800	; 0x41a0
 8001a74:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a76:	4b17      	ldr	r3, [pc, #92]	; (8001ad4 <MX_TIM2_Init+0x98>)
 8001a78:	2200      	movs	r2, #0
 8001a7a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001a7c:	4b15      	ldr	r3, [pc, #84]	; (8001ad4 <MX_TIM2_Init+0x98>)
 8001a7e:	2280      	movs	r2, #128	; 0x80
 8001a80:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001a82:	4814      	ldr	r0, [pc, #80]	; (8001ad4 <MX_TIM2_Init+0x98>)
 8001a84:	f004 f8f8 	bl	8005c78 <HAL_TIM_Base_Init>
 8001a88:	4603      	mov	r3, r0
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d001      	beq.n	8001a92 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001a8e:	f000 f9ed 	bl	8001e6c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a92:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a96:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001a98:	f107 0308 	add.w	r3, r7, #8
 8001a9c:	4619      	mov	r1, r3
 8001a9e:	480d      	ldr	r0, [pc, #52]	; (8001ad4 <MX_TIM2_Init+0x98>)
 8001aa0:	f004 fab2 	bl	8006008 <HAL_TIM_ConfigClockSource>
 8001aa4:	4603      	mov	r3, r0
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d001      	beq.n	8001aae <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001aaa:	f000 f9df 	bl	8001e6c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001aae:	2300      	movs	r3, #0
 8001ab0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001ab6:	463b      	mov	r3, r7
 8001ab8:	4619      	mov	r1, r3
 8001aba:	4806      	ldr	r0, [pc, #24]	; (8001ad4 <MX_TIM2_Init+0x98>)
 8001abc:	f004 fcce 	bl	800645c <HAL_TIMEx_MasterConfigSynchronization>
 8001ac0:	4603      	mov	r3, r0
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d001      	beq.n	8001aca <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001ac6:	f000 f9d1 	bl	8001e6c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001aca:	bf00      	nop
 8001acc:	3718      	adds	r7, #24
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	bd80      	pop	{r7, pc}
 8001ad2:	bf00      	nop
 8001ad4:	200001e4 	.word	0x200001e4

08001ad8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001adc:	4b11      	ldr	r3, [pc, #68]	; (8001b24 <MX_USART1_UART_Init+0x4c>)
 8001ade:	4a12      	ldr	r2, [pc, #72]	; (8001b28 <MX_USART1_UART_Init+0x50>)
 8001ae0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 57600;
 8001ae2:	4b10      	ldr	r3, [pc, #64]	; (8001b24 <MX_USART1_UART_Init+0x4c>)
 8001ae4:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 8001ae8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001aea:	4b0e      	ldr	r3, [pc, #56]	; (8001b24 <MX_USART1_UART_Init+0x4c>)
 8001aec:	2200      	movs	r2, #0
 8001aee:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001af0:	4b0c      	ldr	r3, [pc, #48]	; (8001b24 <MX_USART1_UART_Init+0x4c>)
 8001af2:	2200      	movs	r2, #0
 8001af4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001af6:	4b0b      	ldr	r3, [pc, #44]	; (8001b24 <MX_USART1_UART_Init+0x4c>)
 8001af8:	2200      	movs	r2, #0
 8001afa:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001afc:	4b09      	ldr	r3, [pc, #36]	; (8001b24 <MX_USART1_UART_Init+0x4c>)
 8001afe:	220c      	movs	r2, #12
 8001b00:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b02:	4b08      	ldr	r3, [pc, #32]	; (8001b24 <MX_USART1_UART_Init+0x4c>)
 8001b04:	2200      	movs	r2, #0
 8001b06:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b08:	4b06      	ldr	r3, [pc, #24]	; (8001b24 <MX_USART1_UART_Init+0x4c>)
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001b0e:	4805      	ldr	r0, [pc, #20]	; (8001b24 <MX_USART1_UART_Init+0x4c>)
 8001b10:	f004 fd34 	bl	800657c <HAL_UART_Init>
 8001b14:	4603      	mov	r3, r0
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d001      	beq.n	8001b1e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001b1a:	f000 f9a7 	bl	8001e6c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001b1e:	bf00      	nop
 8001b20:	bd80      	pop	{r7, pc}
 8001b22:	bf00      	nop
 8001b24:	2000022c 	.word	0x2000022c
 8001b28:	40011000 	.word	0x40011000

08001b2c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001b30:	4b11      	ldr	r3, [pc, #68]	; (8001b78 <MX_USART2_UART_Init+0x4c>)
 8001b32:	4a12      	ldr	r2, [pc, #72]	; (8001b7c <MX_USART2_UART_Init+0x50>)
 8001b34:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 57600;
 8001b36:	4b10      	ldr	r3, [pc, #64]	; (8001b78 <MX_USART2_UART_Init+0x4c>)
 8001b38:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 8001b3c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001b3e:	4b0e      	ldr	r3, [pc, #56]	; (8001b78 <MX_USART2_UART_Init+0x4c>)
 8001b40:	2200      	movs	r2, #0
 8001b42:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001b44:	4b0c      	ldr	r3, [pc, #48]	; (8001b78 <MX_USART2_UART_Init+0x4c>)
 8001b46:	2200      	movs	r2, #0
 8001b48:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001b4a:	4b0b      	ldr	r3, [pc, #44]	; (8001b78 <MX_USART2_UART_Init+0x4c>)
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001b50:	4b09      	ldr	r3, [pc, #36]	; (8001b78 <MX_USART2_UART_Init+0x4c>)
 8001b52:	220c      	movs	r2, #12
 8001b54:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 8001b56:	4b08      	ldr	r3, [pc, #32]	; (8001b78 <MX_USART2_UART_Init+0x4c>)
 8001b58:	f44f 7240 	mov.w	r2, #768	; 0x300
 8001b5c:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b5e:	4b06      	ldr	r3, [pc, #24]	; (8001b78 <MX_USART2_UART_Init+0x4c>)
 8001b60:	2200      	movs	r2, #0
 8001b62:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001b64:	4804      	ldr	r0, [pc, #16]	; (8001b78 <MX_USART2_UART_Init+0x4c>)
 8001b66:	f004 fd09 	bl	800657c <HAL_UART_Init>
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d001      	beq.n	8001b74 <MX_USART2_UART_Init+0x48>
  {
    Error_Handler();
 8001b70:	f000 f97c 	bl	8001e6c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001b74:	bf00      	nop
 8001b76:	bd80      	pop	{r7, pc}
 8001b78:	20000270 	.word	0x20000270
 8001b7c:	40004400 	.word	0x40004400

08001b80 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b082      	sub	sp, #8
 8001b84:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001b86:	2300      	movs	r3, #0
 8001b88:	607b      	str	r3, [r7, #4]
 8001b8a:	4b0c      	ldr	r3, [pc, #48]	; (8001bbc <MX_DMA_Init+0x3c>)
 8001b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b8e:	4a0b      	ldr	r2, [pc, #44]	; (8001bbc <MX_DMA_Init+0x3c>)
 8001b90:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001b94:	6313      	str	r3, [r2, #48]	; 0x30
 8001b96:	4b09      	ldr	r3, [pc, #36]	; (8001bbc <MX_DMA_Init+0x3c>)
 8001b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b9a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b9e:	607b      	str	r3, [r7, #4]
 8001ba0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	2100      	movs	r1, #0
 8001ba6:	203a      	movs	r0, #58	; 0x3a
 8001ba8:	f000 fdd3 	bl	8002752 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8001bac:	203a      	movs	r0, #58	; 0x3a
 8001bae:	f000 fdec 	bl	800278a <HAL_NVIC_EnableIRQ>

}
 8001bb2:	bf00      	nop
 8001bb4:	3708      	adds	r7, #8
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	bd80      	pop	{r7, pc}
 8001bba:	bf00      	nop
 8001bbc:	40023800 	.word	0x40023800

08001bc0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b08a      	sub	sp, #40	; 0x28
 8001bc4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bc6:	f107 0314 	add.w	r3, r7, #20
 8001bca:	2200      	movs	r2, #0
 8001bcc:	601a      	str	r2, [r3, #0]
 8001bce:	605a      	str	r2, [r3, #4]
 8001bd0:	609a      	str	r2, [r3, #8]
 8001bd2:	60da      	str	r2, [r3, #12]
 8001bd4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	613b      	str	r3, [r7, #16]
 8001bda:	4b56      	ldr	r3, [pc, #344]	; (8001d34 <MX_GPIO_Init+0x174>)
 8001bdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bde:	4a55      	ldr	r2, [pc, #340]	; (8001d34 <MX_GPIO_Init+0x174>)
 8001be0:	f043 0304 	orr.w	r3, r3, #4
 8001be4:	6313      	str	r3, [r2, #48]	; 0x30
 8001be6:	4b53      	ldr	r3, [pc, #332]	; (8001d34 <MX_GPIO_Init+0x174>)
 8001be8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bea:	f003 0304 	and.w	r3, r3, #4
 8001bee:	613b      	str	r3, [r7, #16]
 8001bf0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	60fb      	str	r3, [r7, #12]
 8001bf6:	4b4f      	ldr	r3, [pc, #316]	; (8001d34 <MX_GPIO_Init+0x174>)
 8001bf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bfa:	4a4e      	ldr	r2, [pc, #312]	; (8001d34 <MX_GPIO_Init+0x174>)
 8001bfc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c00:	6313      	str	r3, [r2, #48]	; 0x30
 8001c02:	4b4c      	ldr	r3, [pc, #304]	; (8001d34 <MX_GPIO_Init+0x174>)
 8001c04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c0a:	60fb      	str	r3, [r7, #12]
 8001c0c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c0e:	2300      	movs	r3, #0
 8001c10:	60bb      	str	r3, [r7, #8]
 8001c12:	4b48      	ldr	r3, [pc, #288]	; (8001d34 <MX_GPIO_Init+0x174>)
 8001c14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c16:	4a47      	ldr	r2, [pc, #284]	; (8001d34 <MX_GPIO_Init+0x174>)
 8001c18:	f043 0301 	orr.w	r3, r3, #1
 8001c1c:	6313      	str	r3, [r2, #48]	; 0x30
 8001c1e:	4b45      	ldr	r3, [pc, #276]	; (8001d34 <MX_GPIO_Init+0x174>)
 8001c20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c22:	f003 0301 	and.w	r3, r3, #1
 8001c26:	60bb      	str	r3, [r7, #8]
 8001c28:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	607b      	str	r3, [r7, #4]
 8001c2e:	4b41      	ldr	r3, [pc, #260]	; (8001d34 <MX_GPIO_Init+0x174>)
 8001c30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c32:	4a40      	ldr	r2, [pc, #256]	; (8001d34 <MX_GPIO_Init+0x174>)
 8001c34:	f043 0302 	orr.w	r3, r3, #2
 8001c38:	6313      	str	r3, [r2, #48]	; 0x30
 8001c3a:	4b3e      	ldr	r3, [pc, #248]	; (8001d34 <MX_GPIO_Init+0x174>)
 8001c3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c3e:	f003 0302 	and.w	r3, r3, #2
 8001c42:	607b      	str	r3, [r7, #4]
 8001c44:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c46:	2300      	movs	r3, #0
 8001c48:	603b      	str	r3, [r7, #0]
 8001c4a:	4b3a      	ldr	r3, [pc, #232]	; (8001d34 <MX_GPIO_Init+0x174>)
 8001c4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c4e:	4a39      	ldr	r2, [pc, #228]	; (8001d34 <MX_GPIO_Init+0x174>)
 8001c50:	f043 0308 	orr.w	r3, r3, #8
 8001c54:	6313      	str	r3, [r2, #48]	; 0x30
 8001c56:	4b37      	ldr	r3, [pc, #220]	; (8001d34 <MX_GPIO_Init+0x174>)
 8001c58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c5a:	f003 0308 	and.w	r3, r3, #8
 8001c5e:	603b      	str	r3, [r7, #0]
 8001c60:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RF_SPI_NSS_GPIO_Port, RF_SPI_NSS_Pin, GPIO_PIN_RESET);
 8001c62:	2200      	movs	r2, #0
 8001c64:	2110      	movs	r1, #16
 8001c66:	4834      	ldr	r0, [pc, #208]	; (8001d38 <MX_GPIO_Init+0x178>)
 8001c68:	f001 fb48 	bl	80032fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RESET_RF_GPIO_Port, RESET_RF_Pin, GPIO_PIN_RESET);
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	2101      	movs	r1, #1
 8001c70:	4832      	ldr	r0, [pc, #200]	; (8001d3c <MX_GPIO_Init+0x17c>)
 8001c72:	f001 fb43 	bl	80032fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(INDICATOR_LED_GPIO_Port, INDICATOR_LED_Pin, GPIO_PIN_RESET);
 8001c76:	2200      	movs	r2, #0
 8001c78:	2104      	movs	r1, #4
 8001c7a:	4831      	ldr	r0, [pc, #196]	; (8001d40 <MX_GPIO_Init+0x180>)
 8001c7c:	f001 fb3e 	bl	80032fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : RF_SPI_NSS_Pin */
  GPIO_InitStruct.Pin = RF_SPI_NSS_Pin;
 8001c80:	2310      	movs	r3, #16
 8001c82:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c84:	2301      	movs	r3, #1
 8001c86:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c88:	2300      	movs	r3, #0
 8001c8a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(RF_SPI_NSS_GPIO_Port, &GPIO_InitStruct);
 8001c90:	f107 0314 	add.w	r3, r7, #20
 8001c94:	4619      	mov	r1, r3
 8001c96:	4828      	ldr	r0, [pc, #160]	; (8001d38 <MX_GPIO_Init+0x178>)
 8001c98:	f001 f994 	bl	8002fc4 <HAL_GPIO_Init>

  /*Configure GPIO pin : RESET_RF_Pin */
  GPIO_InitStruct.Pin = RESET_RF_Pin;
 8001c9c:	2301      	movs	r3, #1
 8001c9e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ca0:	2301      	movs	r3, #1
 8001ca2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ca8:	2300      	movs	r3, #0
 8001caa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(RESET_RF_GPIO_Port, &GPIO_InitStruct);
 8001cac:	f107 0314 	add.w	r3, r7, #20
 8001cb0:	4619      	mov	r1, r3
 8001cb2:	4822      	ldr	r0, [pc, #136]	; (8001d3c <MX_GPIO_Init+0x17c>)
 8001cb4:	f001 f986 	bl	8002fc4 <HAL_GPIO_Init>

  /*Configure GPIO pins : IO0_RF_Pin IO1_RF_Pin IO2_RF_Pin IO3_RF_Pin
                           IO4_RF_Pin */
  GPIO_InitStruct.Pin = IO0_RF_Pin|IO1_RF_Pin|IO2_RF_Pin|IO3_RF_Pin
 8001cb8:	f643 4302 	movw	r3, #15362	; 0x3c02
 8001cbc:	617b      	str	r3, [r7, #20]
                          |IO4_RF_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001cbe:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001cc2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cc8:	f107 0314 	add.w	r3, r7, #20
 8001ccc:	4619      	mov	r1, r3
 8001cce:	481b      	ldr	r0, [pc, #108]	; (8001d3c <MX_GPIO_Init+0x17c>)
 8001cd0:	f001 f978 	bl	8002fc4 <HAL_GPIO_Init>

  /*Configure GPIO pin : IO5_RF_Pin */
  GPIO_InitStruct.Pin = IO5_RF_Pin;
 8001cd4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001cd8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001cda:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001cde:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(IO5_RF_GPIO_Port, &GPIO_InitStruct);
 8001ce4:	f107 0314 	add.w	r3, r7, #20
 8001ce8:	4619      	mov	r1, r3
 8001cea:	4813      	ldr	r0, [pc, #76]	; (8001d38 <MX_GPIO_Init+0x178>)
 8001cec:	f001 f96a 	bl	8002fc4 <HAL_GPIO_Init>

  /*Configure GPIO pin : INDICATOR_LED_Pin */
  GPIO_InitStruct.Pin = INDICATOR_LED_Pin;
 8001cf0:	2304      	movs	r3, #4
 8001cf2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cf4:	2301      	movs	r3, #1
 8001cf6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(INDICATOR_LED_GPIO_Port, &GPIO_InitStruct);
 8001d00:	f107 0314 	add.w	r3, r7, #20
 8001d04:	4619      	mov	r1, r3
 8001d06:	480e      	ldr	r0, [pc, #56]	; (8001d40 <MX_GPIO_Init+0x180>)
 8001d08:	f001 f95c 	bl	8002fc4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	2100      	movs	r1, #0
 8001d10:	2007      	movs	r0, #7
 8001d12:	f000 fd1e 	bl	8002752 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8001d16:	2007      	movs	r0, #7
 8001d18:	f000 fd37 	bl	800278a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	2100      	movs	r1, #0
 8001d20:	2028      	movs	r0, #40	; 0x28
 8001d22:	f000 fd16 	bl	8002752 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001d26:	2028      	movs	r0, #40	; 0x28
 8001d28:	f000 fd2f 	bl	800278a <HAL_NVIC_EnableIRQ>

}
 8001d2c:	bf00      	nop
 8001d2e:	3728      	adds	r7, #40	; 0x28
 8001d30:	46bd      	mov	sp, r7
 8001d32:	bd80      	pop	{r7, pc}
 8001d34:	40023800 	.word	0x40023800
 8001d38:	40020000 	.word	0x40020000
 8001d3c:	40020400 	.word	0x40020400
 8001d40:	40020c00 	.word	0x40020c00

08001d44 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b082      	sub	sp, #8
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == LoRaClass.DIO0_pin){
 8001d4e:	4b08      	ldr	r3, [pc, #32]	; (8001d70 <HAL_GPIO_EXTI_Callback+0x2c>)
 8001d50:	8a9b      	ldrh	r3, [r3, #20]
 8001d52:	88fa      	ldrh	r2, [r7, #6]
 8001d54:	429a      	cmp	r2, r3
 8001d56:	d106      	bne.n	8001d66 <HAL_GPIO_EXTI_Callback+0x22>
		RF_available_bytes = LoRa_received_bytes(&LoRaClass);
 8001d58:	4805      	ldr	r0, [pc, #20]	; (8001d70 <HAL_GPIO_EXTI_Callback+0x2c>)
 8001d5a:	f7ff fcef 	bl	800173c <LoRa_received_bytes>
 8001d5e:	4603      	mov	r3, r0
 8001d60:	461a      	mov	r2, r3
 8001d62:	4b04      	ldr	r3, [pc, #16]	; (8001d74 <HAL_GPIO_EXTI_Callback+0x30>)
 8001d64:	701a      	strb	r2, [r3, #0]
	}
}
 8001d66:	bf00      	nop
 8001d68:	3708      	adds	r7, #8
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	bd80      	pop	{r7, pc}
 8001d6e:	bf00      	nop
 8001d70:	200007fc 	.word	0x200007fc
 8001d74:	20000314 	.word	0x20000314

08001d78 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b082      	sub	sp, #8
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_DMA (USB_UART, UART_Buff, sizeof(UART_Buff));
 8001d80:	4b0c      	ldr	r3, [pc, #48]	; (8001db4 <HAL_UART_RxCpltCallback+0x3c>)
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8001d88:	490b      	ldr	r1, [pc, #44]	; (8001db8 <HAL_UART_RxCpltCallback+0x40>)
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	f004 fd77 	bl	800687e <HAL_UART_Receive_DMA>
	UART_READY = true;
 8001d90:	4b0a      	ldr	r3, [pc, #40]	; (8001dbc <HAL_UART_RxCpltCallback+0x44>)
 8001d92:	2201      	movs	r2, #1
 8001d94:	701a      	strb	r2, [r3, #0]
	// Add second half of data to sendBuff
	memcpy(RF_transmit_buffer, &UART_Buff[UART_PACKET_SIZE], UART_PACKET_SIZE);
 8001d96:	4b0a      	ldr	r3, [pc, #40]	; (8001dc0 <HAL_UART_RxCpltCallback+0x48>)
 8001d98:	781b      	ldrb	r3, [r3, #0]
 8001d9a:	461a      	mov	r2, r3
 8001d9c:	4b06      	ldr	r3, [pc, #24]	; (8001db8 <HAL_UART_RxCpltCallback+0x40>)
 8001d9e:	4413      	add	r3, r2
 8001da0:	4a07      	ldr	r2, [pc, #28]	; (8001dc0 <HAL_UART_RxCpltCallback+0x48>)
 8001da2:	7812      	ldrb	r2, [r2, #0]
 8001da4:	4619      	mov	r1, r3
 8001da6:	4807      	ldr	r0, [pc, #28]	; (8001dc4 <HAL_UART_RxCpltCallback+0x4c>)
 8001da8:	f009 ff9c 	bl	800bce4 <memcpy>
}
 8001dac:	bf00      	nop
 8001dae:	3708      	adds	r7, #8
 8001db0:	46bd      	mov	sp, r7
 8001db2:	bd80      	pop	{r7, pc}
 8001db4:	20000000 	.word	0x20000000
 8001db8:	20000418 	.word	0x20000418
 8001dbc:	200007fa 	.word	0x200007fa
 8001dc0:	2000000c 	.word	0x2000000c
 8001dc4:	200005f8 	.word	0x200005f8

08001dc8 <HAL_UART_RxHalfCpltCallback>:

void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart) {
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b082      	sub	sp, #8
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
	UART_READY = true;
 8001dd0:	4b06      	ldr	r3, [pc, #24]	; (8001dec <HAL_UART_RxHalfCpltCallback+0x24>)
 8001dd2:	2201      	movs	r2, #1
 8001dd4:	701a      	strb	r2, [r3, #0]
	// Add first half of data to sendBuff
	memcpy(RF_transmit_buffer, &UART_Buff, UART_PACKET_SIZE);
 8001dd6:	4b06      	ldr	r3, [pc, #24]	; (8001df0 <HAL_UART_RxHalfCpltCallback+0x28>)
 8001dd8:	781b      	ldrb	r3, [r3, #0]
 8001dda:	461a      	mov	r2, r3
 8001ddc:	4905      	ldr	r1, [pc, #20]	; (8001df4 <HAL_UART_RxHalfCpltCallback+0x2c>)
 8001dde:	4806      	ldr	r0, [pc, #24]	; (8001df8 <HAL_UART_RxHalfCpltCallback+0x30>)
 8001de0:	f009 ff80 	bl	800bce4 <memcpy>
}
 8001de4:	bf00      	nop
 8001de6:	3708      	adds	r7, #8
 8001de8:	46bd      	mov	sp, r7
 8001dea:	bd80      	pop	{r7, pc}
 8001dec:	200007fa 	.word	0x200007fa
 8001df0:	2000000c 	.word	0x2000000c
 8001df4:	20000418 	.word	0x20000418
 8001df8:	200005f8 	.word	0x200005f8

08001dfc <HAL_TIM_PeriodElapsedCallback>:


#ifdef MASTER_DEVICE
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 8001dfc:	b480      	push	{r7}
 8001dfe:	b083      	sub	sp, #12
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
    if(htim == Poll_Timer) {
 8001e04:	4b06      	ldr	r3, [pc, #24]	; (8001e20 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	687a      	ldr	r2, [r7, #4]
 8001e0a:	429a      	cmp	r2, r3
 8001e0c:	d102      	bne.n	8001e14 <HAL_TIM_PeriodElapsedCallback+0x18>
    	// Poll slave device
    	POLL_READY = true;
 8001e0e:	4b05      	ldr	r3, [pc, #20]	; (8001e24 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8001e10:	2201      	movs	r2, #1
 8001e12:	701a      	strb	r2, [r3, #0]
    }
}
 8001e14:	bf00      	nop
 8001e16:	370c      	adds	r7, #12
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1e:	4770      	bx	lr
 8001e20:	20000008 	.word	0x20000008
 8001e24:	200007fb 	.word	0x200007fb

08001e28 <Blocking_LED_Blink>:
#endif

void Blocking_LED_Blink(uint8_t freq) {
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b082      	sub	sp, #8
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	4603      	mov	r3, r0
 8001e30:	71fb      	strb	r3, [r7, #7]
	while(1) {
		HAL_GPIO_WritePin(INDICATOR_LED_GPIO_Port, INDICATOR_LED_Pin, GPIO_PIN_SET);
 8001e32:	2201      	movs	r2, #1
 8001e34:	2104      	movs	r1, #4
 8001e36:	480c      	ldr	r0, [pc, #48]	; (8001e68 <Blocking_LED_Blink+0x40>)
 8001e38:	f001 fa60 	bl	80032fc <HAL_GPIO_WritePin>
		HAL_Delay(1000/freq);
 8001e3c:	79fb      	ldrb	r3, [r7, #7]
 8001e3e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001e42:	fb92 f3f3 	sdiv	r3, r2, r3
 8001e46:	4618      	mov	r0, r3
 8001e48:	f000 fb84 	bl	8002554 <HAL_Delay>
		HAL_GPIO_WritePin(INDICATOR_LED_GPIO_Port, INDICATOR_LED_Pin, GPIO_PIN_RESET);
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	2104      	movs	r1, #4
 8001e50:	4805      	ldr	r0, [pc, #20]	; (8001e68 <Blocking_LED_Blink+0x40>)
 8001e52:	f001 fa53 	bl	80032fc <HAL_GPIO_WritePin>
		HAL_Delay(1000/freq);
 8001e56:	79fb      	ldrb	r3, [r7, #7]
 8001e58:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001e5c:	fb92 f3f3 	sdiv	r3, r2, r3
 8001e60:	4618      	mov	r0, r3
 8001e62:	f000 fb77 	bl	8002554 <HAL_Delay>
		HAL_GPIO_WritePin(INDICATOR_LED_GPIO_Port, INDICATOR_LED_Pin, GPIO_PIN_SET);
 8001e66:	e7e4      	b.n	8001e32 <Blocking_LED_Blink+0xa>
 8001e68:	40020c00 	.word	0x40020c00

08001e6c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001e70:	b672      	cpsid	i
}
 8001e72:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001e74:	e7fe      	b.n	8001e74 <Error_Handler+0x8>
	...

08001e78 <RetargetInit>:
#define STDOUT_FILENO 1
#define STDERR_FILENO 2

UART_HandleTypeDef *gHuart;

void RetargetInit(UART_HandleTypeDef *huart) {
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b082      	sub	sp, #8
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
  gHuart = huart;
 8001e80:	4a07      	ldr	r2, [pc, #28]	; (8001ea0 <RetargetInit+0x28>)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	6013      	str	r3, [r2, #0]

  /* Disable I/O buffering for STDOUT stream, so that
   * chars are sent out as soon as they are printed. */
  setvbuf(stdout, NULL, _IONBF, 0);
 8001e86:	4b07      	ldr	r3, [pc, #28]	; (8001ea4 <RetargetInit+0x2c>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	6898      	ldr	r0, [r3, #8]
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	2202      	movs	r2, #2
 8001e90:	2100      	movs	r1, #0
 8001e92:	f009 ffb3 	bl	800bdfc <setvbuf>
}
 8001e96:	bf00      	nop
 8001e98:	3708      	adds	r7, #8
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	bd80      	pop	{r7, pc}
 8001e9e:	bf00      	nop
 8001ea0:	2000082c 	.word	0x2000082c
 8001ea4:	2000010c 	.word	0x2000010c

08001ea8 <_isatty>:

int _isatty(int fd) {
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b082      	sub	sp, #8
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	db04      	blt.n	8001ec0 <_isatty+0x18>
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	2b02      	cmp	r3, #2
 8001eba:	dc01      	bgt.n	8001ec0 <_isatty+0x18>
    return 1;
 8001ebc:	2301      	movs	r3, #1
 8001ebe:	e005      	b.n	8001ecc <_isatty+0x24>

  errno = EBADF;
 8001ec0:	f009 fee6 	bl	800bc90 <__errno>
 8001ec4:	4603      	mov	r3, r0
 8001ec6:	2209      	movs	r2, #9
 8001ec8:	601a      	str	r2, [r3, #0]
  return 0;
 8001eca:	2300      	movs	r3, #0
}
 8001ecc:	4618      	mov	r0, r3
 8001ece:	3708      	adds	r7, #8
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	bd80      	pop	{r7, pc}

08001ed4 <_write>:

int _write(int fd, char* ptr, int len) {
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b086      	sub	sp, #24
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	60f8      	str	r0, [r7, #12]
 8001edc:	60b9      	str	r1, [r7, #8]
 8001ede:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDOUT_FILENO || fd == STDERR_FILENO) {
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	2b01      	cmp	r3, #1
 8001ee4:	d002      	beq.n	8001eec <_write+0x18>
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	2b02      	cmp	r3, #2
 8001eea:	d111      	bne.n	8001f10 <_write+0x3c>
    hstatus = HAL_UART_Transmit(gHuart, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 8001eec:	4b0e      	ldr	r3, [pc, #56]	; (8001f28 <_write+0x54>)
 8001eee:	6818      	ldr	r0, [r3, #0]
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	b29a      	uxth	r2, r3
 8001ef4:	f04f 33ff 	mov.w	r3, #4294967295
 8001ef8:	68b9      	ldr	r1, [r7, #8]
 8001efa:	f004 fb8c 	bl	8006616 <HAL_UART_Transmit>
 8001efe:	4603      	mov	r3, r0
 8001f00:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 8001f02:	7dfb      	ldrb	r3, [r7, #23]
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d101      	bne.n	8001f0c <_write+0x38>
      return len;
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	e008      	b.n	8001f1e <_write+0x4a>
    else
      return EIO;
 8001f0c:	2305      	movs	r3, #5
 8001f0e:	e006      	b.n	8001f1e <_write+0x4a>
  }
  errno = EBADF;
 8001f10:	f009 febe 	bl	800bc90 <__errno>
 8001f14:	4603      	mov	r3, r0
 8001f16:	2209      	movs	r2, #9
 8001f18:	601a      	str	r2, [r3, #0]
  return -1;
 8001f1a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001f1e:	4618      	mov	r0, r3
 8001f20:	3718      	adds	r7, #24
 8001f22:	46bd      	mov	sp, r7
 8001f24:	bd80      	pop	{r7, pc}
 8001f26:	bf00      	nop
 8001f28:	2000082c 	.word	0x2000082c

08001f2c <_close>:

int _close(int fd) {
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b082      	sub	sp, #8
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	db04      	blt.n	8001f44 <_close+0x18>
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	2b02      	cmp	r3, #2
 8001f3e:	dc01      	bgt.n	8001f44 <_close+0x18>
    return 0;
 8001f40:	2300      	movs	r3, #0
 8001f42:	e006      	b.n	8001f52 <_close+0x26>

  errno = EBADF;
 8001f44:	f009 fea4 	bl	800bc90 <__errno>
 8001f48:	4603      	mov	r3, r0
 8001f4a:	2209      	movs	r2, #9
 8001f4c:	601a      	str	r2, [r3, #0]
  return -1;
 8001f4e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001f52:	4618      	mov	r0, r3
 8001f54:	3708      	adds	r7, #8
 8001f56:	46bd      	mov	sp, r7
 8001f58:	bd80      	pop	{r7, pc}

08001f5a <_lseek>:

int _lseek(int fd, int ptr, int dir) {
 8001f5a:	b580      	push	{r7, lr}
 8001f5c:	b084      	sub	sp, #16
 8001f5e:	af00      	add	r7, sp, #0
 8001f60:	60f8      	str	r0, [r7, #12]
 8001f62:	60b9      	str	r1, [r7, #8]
 8001f64:	607a      	str	r2, [r7, #4]
  (void) fd;
  (void) ptr;
  (void) dir;

  errno = EBADF;
 8001f66:	f009 fe93 	bl	800bc90 <__errno>
 8001f6a:	4603      	mov	r3, r0
 8001f6c:	2209      	movs	r2, #9
 8001f6e:	601a      	str	r2, [r3, #0]
  return -1;
 8001f70:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001f74:	4618      	mov	r0, r3
 8001f76:	3710      	adds	r7, #16
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	bd80      	pop	{r7, pc}

08001f7c <_read>:

int _read(int fd, char* ptr, int len) {
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b086      	sub	sp, #24
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	60f8      	str	r0, [r7, #12]
 8001f84:	60b9      	str	r1, [r7, #8]
 8001f86:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDIN_FILENO) {
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d110      	bne.n	8001fb0 <_read+0x34>
    hstatus = HAL_UART_Receive(gHuart, (uint8_t *) ptr, 1, HAL_MAX_DELAY);
 8001f8e:	4b0e      	ldr	r3, [pc, #56]	; (8001fc8 <_read+0x4c>)
 8001f90:	6818      	ldr	r0, [r3, #0]
 8001f92:	f04f 33ff 	mov.w	r3, #4294967295
 8001f96:	2201      	movs	r2, #1
 8001f98:	68b9      	ldr	r1, [r7, #8]
 8001f9a:	f004 fbce 	bl	800673a <HAL_UART_Receive>
 8001f9e:	4603      	mov	r3, r0
 8001fa0:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 8001fa2:	7dfb      	ldrb	r3, [r7, #23]
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d101      	bne.n	8001fac <_read+0x30>
      return 1;
 8001fa8:	2301      	movs	r3, #1
 8001faa:	e008      	b.n	8001fbe <_read+0x42>
    else
      return EIO;
 8001fac:	2305      	movs	r3, #5
 8001fae:	e006      	b.n	8001fbe <_read+0x42>
  }
  errno = EBADF;
 8001fb0:	f009 fe6e 	bl	800bc90 <__errno>
 8001fb4:	4603      	mov	r3, r0
 8001fb6:	2209      	movs	r2, #9
 8001fb8:	601a      	str	r2, [r3, #0]
  return -1;
 8001fba:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	3718      	adds	r7, #24
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	bd80      	pop	{r7, pc}
 8001fc6:	bf00      	nop
 8001fc8:	2000082c 	.word	0x2000082c

08001fcc <_fstat>:

int _fstat(int fd, struct stat* st) {
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b082      	sub	sp, #8
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
 8001fd4:	6039      	str	r1, [r7, #0]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO) {
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	db08      	blt.n	8001fee <_fstat+0x22>
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	2b02      	cmp	r3, #2
 8001fe0:	dc05      	bgt.n	8001fee <_fstat+0x22>
    st->st_mode = S_IFCHR;
 8001fe2:	683b      	ldr	r3, [r7, #0]
 8001fe4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001fe8:	605a      	str	r2, [r3, #4]
    return 0;
 8001fea:	2300      	movs	r3, #0
 8001fec:	e005      	b.n	8001ffa <_fstat+0x2e>
  }

  errno = EBADF;
 8001fee:	f009 fe4f 	bl	800bc90 <__errno>
 8001ff2:	4603      	mov	r3, r0
 8001ff4:	2209      	movs	r2, #9
 8001ff6:	601a      	str	r2, [r3, #0]
  return 0;
 8001ff8:	2300      	movs	r3, #0
}
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	3708      	adds	r7, #8
 8001ffe:	46bd      	mov	sp, r7
 8002000:	bd80      	pop	{r7, pc}
	...

08002004 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002004:	b480      	push	{r7}
 8002006:	b083      	sub	sp, #12
 8002008:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800200a:	2300      	movs	r3, #0
 800200c:	607b      	str	r3, [r7, #4]
 800200e:	4b10      	ldr	r3, [pc, #64]	; (8002050 <HAL_MspInit+0x4c>)
 8002010:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002012:	4a0f      	ldr	r2, [pc, #60]	; (8002050 <HAL_MspInit+0x4c>)
 8002014:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002018:	6453      	str	r3, [r2, #68]	; 0x44
 800201a:	4b0d      	ldr	r3, [pc, #52]	; (8002050 <HAL_MspInit+0x4c>)
 800201c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800201e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002022:	607b      	str	r3, [r7, #4]
 8002024:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002026:	2300      	movs	r3, #0
 8002028:	603b      	str	r3, [r7, #0]
 800202a:	4b09      	ldr	r3, [pc, #36]	; (8002050 <HAL_MspInit+0x4c>)
 800202c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800202e:	4a08      	ldr	r2, [pc, #32]	; (8002050 <HAL_MspInit+0x4c>)
 8002030:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002034:	6413      	str	r3, [r2, #64]	; 0x40
 8002036:	4b06      	ldr	r3, [pc, #24]	; (8002050 <HAL_MspInit+0x4c>)
 8002038:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800203a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800203e:	603b      	str	r3, [r7, #0]
 8002040:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002042:	bf00      	nop
 8002044:	370c      	adds	r7, #12
 8002046:	46bd      	mov	sp, r7
 8002048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204c:	4770      	bx	lr
 800204e:	bf00      	nop
 8002050:	40023800 	.word	0x40023800

08002054 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	b08a      	sub	sp, #40	; 0x28
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800205c:	f107 0314 	add.w	r3, r7, #20
 8002060:	2200      	movs	r2, #0
 8002062:	601a      	str	r2, [r3, #0]
 8002064:	605a      	str	r2, [r3, #4]
 8002066:	609a      	str	r2, [r3, #8]
 8002068:	60da      	str	r2, [r3, #12]
 800206a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	4a19      	ldr	r2, [pc, #100]	; (80020d8 <HAL_SPI_MspInit+0x84>)
 8002072:	4293      	cmp	r3, r2
 8002074:	d12b      	bne.n	80020ce <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002076:	2300      	movs	r3, #0
 8002078:	613b      	str	r3, [r7, #16]
 800207a:	4b18      	ldr	r3, [pc, #96]	; (80020dc <HAL_SPI_MspInit+0x88>)
 800207c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800207e:	4a17      	ldr	r2, [pc, #92]	; (80020dc <HAL_SPI_MspInit+0x88>)
 8002080:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002084:	6453      	str	r3, [r2, #68]	; 0x44
 8002086:	4b15      	ldr	r3, [pc, #84]	; (80020dc <HAL_SPI_MspInit+0x88>)
 8002088:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800208a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800208e:	613b      	str	r3, [r7, #16]
 8002090:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002092:	2300      	movs	r3, #0
 8002094:	60fb      	str	r3, [r7, #12]
 8002096:	4b11      	ldr	r3, [pc, #68]	; (80020dc <HAL_SPI_MspInit+0x88>)
 8002098:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800209a:	4a10      	ldr	r2, [pc, #64]	; (80020dc <HAL_SPI_MspInit+0x88>)
 800209c:	f043 0301 	orr.w	r3, r3, #1
 80020a0:	6313      	str	r3, [r2, #48]	; 0x30
 80020a2:	4b0e      	ldr	r3, [pc, #56]	; (80020dc <HAL_SPI_MspInit+0x88>)
 80020a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020a6:	f003 0301 	and.w	r3, r3, #1
 80020aa:	60fb      	str	r3, [r7, #12]
 80020ac:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80020ae:	23e0      	movs	r3, #224	; 0xe0
 80020b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020b2:	2302      	movs	r3, #2
 80020b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020b6:	2300      	movs	r3, #0
 80020b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020ba:	2303      	movs	r3, #3
 80020bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80020be:	2305      	movs	r3, #5
 80020c0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020c2:	f107 0314 	add.w	r3, r7, #20
 80020c6:	4619      	mov	r1, r3
 80020c8:	4805      	ldr	r0, [pc, #20]	; (80020e0 <HAL_SPI_MspInit+0x8c>)
 80020ca:	f000 ff7b 	bl	8002fc4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80020ce:	bf00      	nop
 80020d0:	3728      	adds	r7, #40	; 0x28
 80020d2:	46bd      	mov	sp, r7
 80020d4:	bd80      	pop	{r7, pc}
 80020d6:	bf00      	nop
 80020d8:	40013000 	.word	0x40013000
 80020dc:	40023800 	.word	0x40023800
 80020e0:	40020000 	.word	0x40020000

080020e4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b084      	sub	sp, #16
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80020f4:	d115      	bne.n	8002122 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80020f6:	2300      	movs	r3, #0
 80020f8:	60fb      	str	r3, [r7, #12]
 80020fa:	4b0c      	ldr	r3, [pc, #48]	; (800212c <HAL_TIM_Base_MspInit+0x48>)
 80020fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020fe:	4a0b      	ldr	r2, [pc, #44]	; (800212c <HAL_TIM_Base_MspInit+0x48>)
 8002100:	f043 0301 	orr.w	r3, r3, #1
 8002104:	6413      	str	r3, [r2, #64]	; 0x40
 8002106:	4b09      	ldr	r3, [pc, #36]	; (800212c <HAL_TIM_Base_MspInit+0x48>)
 8002108:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800210a:	f003 0301 	and.w	r3, r3, #1
 800210e:	60fb      	str	r3, [r7, #12]
 8002110:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 2, 0);
 8002112:	2200      	movs	r2, #0
 8002114:	2102      	movs	r1, #2
 8002116:	201c      	movs	r0, #28
 8002118:	f000 fb1b 	bl	8002752 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800211c:	201c      	movs	r0, #28
 800211e:	f000 fb34 	bl	800278a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002122:	bf00      	nop
 8002124:	3710      	adds	r7, #16
 8002126:	46bd      	mov	sp, r7
 8002128:	bd80      	pop	{r7, pc}
 800212a:	bf00      	nop
 800212c:	40023800 	.word	0x40023800

08002130 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	b08c      	sub	sp, #48	; 0x30
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002138:	f107 031c 	add.w	r3, r7, #28
 800213c:	2200      	movs	r2, #0
 800213e:	601a      	str	r2, [r3, #0]
 8002140:	605a      	str	r2, [r3, #4]
 8002142:	609a      	str	r2, [r3, #8]
 8002144:	60da      	str	r2, [r3, #12]
 8002146:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	4a52      	ldr	r2, [pc, #328]	; (8002298 <HAL_UART_MspInit+0x168>)
 800214e:	4293      	cmp	r3, r2
 8002150:	d164      	bne.n	800221c <HAL_UART_MspInit+0xec>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002152:	2300      	movs	r3, #0
 8002154:	61bb      	str	r3, [r7, #24]
 8002156:	4b51      	ldr	r3, [pc, #324]	; (800229c <HAL_UART_MspInit+0x16c>)
 8002158:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800215a:	4a50      	ldr	r2, [pc, #320]	; (800229c <HAL_UART_MspInit+0x16c>)
 800215c:	f043 0310 	orr.w	r3, r3, #16
 8002160:	6453      	str	r3, [r2, #68]	; 0x44
 8002162:	4b4e      	ldr	r3, [pc, #312]	; (800229c <HAL_UART_MspInit+0x16c>)
 8002164:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002166:	f003 0310 	and.w	r3, r3, #16
 800216a:	61bb      	str	r3, [r7, #24]
 800216c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800216e:	2300      	movs	r3, #0
 8002170:	617b      	str	r3, [r7, #20]
 8002172:	4b4a      	ldr	r3, [pc, #296]	; (800229c <HAL_UART_MspInit+0x16c>)
 8002174:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002176:	4a49      	ldr	r2, [pc, #292]	; (800229c <HAL_UART_MspInit+0x16c>)
 8002178:	f043 0301 	orr.w	r3, r3, #1
 800217c:	6313      	str	r3, [r2, #48]	; 0x30
 800217e:	4b47      	ldr	r3, [pc, #284]	; (800229c <HAL_UART_MspInit+0x16c>)
 8002180:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002182:	f003 0301 	and.w	r3, r3, #1
 8002186:	617b      	str	r3, [r7, #20]
 8002188:	697b      	ldr	r3, [r7, #20]
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    PA11     ------> USART1_CTS
    PA12     ------> USART1_RTS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 800218a:	f44f 53f0 	mov.w	r3, #7680	; 0x1e00
 800218e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002190:	2302      	movs	r3, #2
 8002192:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002194:	2300      	movs	r3, #0
 8002196:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002198:	2303      	movs	r3, #3
 800219a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800219c:	2307      	movs	r3, #7
 800219e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021a0:	f107 031c 	add.w	r3, r7, #28
 80021a4:	4619      	mov	r1, r3
 80021a6:	483e      	ldr	r0, [pc, #248]	; (80022a0 <HAL_UART_MspInit+0x170>)
 80021a8:	f000 ff0c 	bl	8002fc4 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 80021ac:	4b3d      	ldr	r3, [pc, #244]	; (80022a4 <HAL_UART_MspInit+0x174>)
 80021ae:	4a3e      	ldr	r2, [pc, #248]	; (80022a8 <HAL_UART_MspInit+0x178>)
 80021b0:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 80021b2:	4b3c      	ldr	r3, [pc, #240]	; (80022a4 <HAL_UART_MspInit+0x174>)
 80021b4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80021b8:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80021ba:	4b3a      	ldr	r3, [pc, #232]	; (80022a4 <HAL_UART_MspInit+0x174>)
 80021bc:	2200      	movs	r2, #0
 80021be:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80021c0:	4b38      	ldr	r3, [pc, #224]	; (80022a4 <HAL_UART_MspInit+0x174>)
 80021c2:	2200      	movs	r2, #0
 80021c4:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80021c6:	4b37      	ldr	r3, [pc, #220]	; (80022a4 <HAL_UART_MspInit+0x174>)
 80021c8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80021cc:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80021ce:	4b35      	ldr	r3, [pc, #212]	; (80022a4 <HAL_UART_MspInit+0x174>)
 80021d0:	2200      	movs	r2, #0
 80021d2:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80021d4:	4b33      	ldr	r3, [pc, #204]	; (80022a4 <HAL_UART_MspInit+0x174>)
 80021d6:	2200      	movs	r2, #0
 80021d8:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 80021da:	4b32      	ldr	r3, [pc, #200]	; (80022a4 <HAL_UART_MspInit+0x174>)
 80021dc:	2200      	movs	r2, #0
 80021de:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80021e0:	4b30      	ldr	r3, [pc, #192]	; (80022a4 <HAL_UART_MspInit+0x174>)
 80021e2:	2200      	movs	r2, #0
 80021e4:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80021e6:	4b2f      	ldr	r3, [pc, #188]	; (80022a4 <HAL_UART_MspInit+0x174>)
 80021e8:	2204      	movs	r2, #4
 80021ea:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_usart1_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_HALFFULL;
 80021ec:	4b2d      	ldr	r3, [pc, #180]	; (80022a4 <HAL_UART_MspInit+0x174>)
 80021ee:	2201      	movs	r2, #1
 80021f0:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_usart1_rx.Init.MemBurst = DMA_MBURST_SINGLE;
 80021f2:	4b2c      	ldr	r3, [pc, #176]	; (80022a4 <HAL_UART_MspInit+0x174>)
 80021f4:	2200      	movs	r2, #0
 80021f6:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_usart1_rx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 80021f8:	4b2a      	ldr	r3, [pc, #168]	; (80022a4 <HAL_UART_MspInit+0x174>)
 80021fa:	2200      	movs	r2, #0
 80021fc:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80021fe:	4829      	ldr	r0, [pc, #164]	; (80022a4 <HAL_UART_MspInit+0x174>)
 8002200:	f000 fade 	bl	80027c0 <HAL_DMA_Init>
 8002204:	4603      	mov	r3, r0
 8002206:	2b00      	cmp	r3, #0
 8002208:	d001      	beq.n	800220e <HAL_UART_MspInit+0xde>
    {
      Error_Handler();
 800220a:	f7ff fe2f 	bl	8001e6c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	4a24      	ldr	r2, [pc, #144]	; (80022a4 <HAL_UART_MspInit+0x174>)
 8002212:	639a      	str	r2, [r3, #56]	; 0x38
 8002214:	4a23      	ldr	r2, [pc, #140]	; (80022a4 <HAL_UART_MspInit+0x174>)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800221a:	e038      	b.n	800228e <HAL_UART_MspInit+0x15e>
  else if(huart->Instance==USART2)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	4a22      	ldr	r2, [pc, #136]	; (80022ac <HAL_UART_MspInit+0x17c>)
 8002222:	4293      	cmp	r3, r2
 8002224:	d133      	bne.n	800228e <HAL_UART_MspInit+0x15e>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002226:	2300      	movs	r3, #0
 8002228:	613b      	str	r3, [r7, #16]
 800222a:	4b1c      	ldr	r3, [pc, #112]	; (800229c <HAL_UART_MspInit+0x16c>)
 800222c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800222e:	4a1b      	ldr	r2, [pc, #108]	; (800229c <HAL_UART_MspInit+0x16c>)
 8002230:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002234:	6413      	str	r3, [r2, #64]	; 0x40
 8002236:	4b19      	ldr	r3, [pc, #100]	; (800229c <HAL_UART_MspInit+0x16c>)
 8002238:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800223a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800223e:	613b      	str	r3, [r7, #16]
 8002240:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002242:	2300      	movs	r3, #0
 8002244:	60fb      	str	r3, [r7, #12]
 8002246:	4b15      	ldr	r3, [pc, #84]	; (800229c <HAL_UART_MspInit+0x16c>)
 8002248:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800224a:	4a14      	ldr	r2, [pc, #80]	; (800229c <HAL_UART_MspInit+0x16c>)
 800224c:	f043 0301 	orr.w	r3, r3, #1
 8002250:	6313      	str	r3, [r2, #48]	; 0x30
 8002252:	4b12      	ldr	r3, [pc, #72]	; (800229c <HAL_UART_MspInit+0x16c>)
 8002254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002256:	f003 0301 	and.w	r3, r3, #1
 800225a:	60fb      	str	r3, [r7, #12]
 800225c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 800225e:	230f      	movs	r3, #15
 8002260:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002262:	2302      	movs	r3, #2
 8002264:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002266:	2300      	movs	r3, #0
 8002268:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800226a:	2303      	movs	r3, #3
 800226c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800226e:	2307      	movs	r3, #7
 8002270:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002272:	f107 031c 	add.w	r3, r7, #28
 8002276:	4619      	mov	r1, r3
 8002278:	4809      	ldr	r0, [pc, #36]	; (80022a0 <HAL_UART_MspInit+0x170>)
 800227a:	f000 fea3 	bl	8002fc4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 1, 0);
 800227e:	2200      	movs	r2, #0
 8002280:	2101      	movs	r1, #1
 8002282:	2026      	movs	r0, #38	; 0x26
 8002284:	f000 fa65 	bl	8002752 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002288:	2026      	movs	r0, #38	; 0x26
 800228a:	f000 fa7e 	bl	800278a <HAL_NVIC_EnableIRQ>
}
 800228e:	bf00      	nop
 8002290:	3730      	adds	r7, #48	; 0x30
 8002292:	46bd      	mov	sp, r7
 8002294:	bd80      	pop	{r7, pc}
 8002296:	bf00      	nop
 8002298:	40011000 	.word	0x40011000
 800229c:	40023800 	.word	0x40023800
 80022a0:	40020000 	.word	0x40020000
 80022a4:	200002b4 	.word	0x200002b4
 80022a8:	40026440 	.word	0x40026440
 80022ac:	40004400 	.word	0x40004400

080022b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80022b0:	b480      	push	{r7}
 80022b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80022b4:	e7fe      	b.n	80022b4 <NMI_Handler+0x4>

080022b6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80022b6:	b480      	push	{r7}
 80022b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80022ba:	e7fe      	b.n	80022ba <HardFault_Handler+0x4>

080022bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80022bc:	b480      	push	{r7}
 80022be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80022c0:	e7fe      	b.n	80022c0 <MemManage_Handler+0x4>

080022c2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80022c2:	b480      	push	{r7}
 80022c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80022c6:	e7fe      	b.n	80022c6 <BusFault_Handler+0x4>

080022c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80022c8:	b480      	push	{r7}
 80022ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80022cc:	e7fe      	b.n	80022cc <UsageFault_Handler+0x4>

080022ce <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80022ce:	b480      	push	{r7}
 80022d0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80022d2:	bf00      	nop
 80022d4:	46bd      	mov	sp, r7
 80022d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022da:	4770      	bx	lr

080022dc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80022dc:	b480      	push	{r7}
 80022de:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80022e0:	bf00      	nop
 80022e2:	46bd      	mov	sp, r7
 80022e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e8:	4770      	bx	lr

080022ea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80022ea:	b480      	push	{r7}
 80022ec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80022ee:	bf00      	nop
 80022f0:	46bd      	mov	sp, r7
 80022f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f6:	4770      	bx	lr

080022f8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80022fc:	f000 f90a 	bl	8002514 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002300:	bf00      	nop
 8002302:	bd80      	pop	{r7, pc}

08002304 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(IO0_RF_Pin);
 8002308:	2002      	movs	r0, #2
 800230a:	f001 f811 	bl	8003330 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 800230e:	bf00      	nop
 8002310:	bd80      	pop	{r7, pc}
	...

08002314 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002318:	4802      	ldr	r0, [pc, #8]	; (8002324 <TIM2_IRQHandler+0x10>)
 800231a:	f003 fd6d 	bl	8005df8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800231e:	bf00      	nop
 8002320:	bd80      	pop	{r7, pc}
 8002322:	bf00      	nop
 8002324:	200001e4 	.word	0x200001e4

08002328 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800232c:	4802      	ldr	r0, [pc, #8]	; (8002338 <USART2_IRQHandler+0x10>)
 800232e:	f004 fad7 	bl	80068e0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002332:	bf00      	nop
 8002334:	bd80      	pop	{r7, pc}
 8002336:	bf00      	nop
 8002338:	20000270 	.word	0x20000270

0800233c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(IO1_RF_Pin);
 8002340:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8002344:	f000 fff4 	bl	8003330 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(IO2_RF_Pin);
 8002348:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800234c:	f000 fff0 	bl	8003330 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(IO3_RF_Pin);
 8002350:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8002354:	f000 ffec 	bl	8003330 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(IO4_RF_Pin);
 8002358:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800235c:	f000 ffe8 	bl	8003330 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002360:	bf00      	nop
 8002362:	bd80      	pop	{r7, pc}

08002364 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8002368:	4802      	ldr	r0, [pc, #8]	; (8002374 <DMA2_Stream2_IRQHandler+0x10>)
 800236a:	f000 fbc1 	bl	8002af0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 800236e:	bf00      	nop
 8002370:	bd80      	pop	{r7, pc}
 8002372:	bf00      	nop
 8002374:	200002b4 	.word	0x200002b4

08002378 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
 800237c:	4802      	ldr	r0, [pc, #8]	; (8002388 <OTG_HS_IRQHandler+0x10>)
 800237e:	f001 f93f 	bl	8003600 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 8002382:	bf00      	nop
 8002384:	bd80      	pop	{r7, pc}
 8002386:	bf00      	nop
 8002388:	20001d18 	.word	0x20001d18

0800238c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	b086      	sub	sp, #24
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002394:	4a14      	ldr	r2, [pc, #80]	; (80023e8 <_sbrk+0x5c>)
 8002396:	4b15      	ldr	r3, [pc, #84]	; (80023ec <_sbrk+0x60>)
 8002398:	1ad3      	subs	r3, r2, r3
 800239a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800239c:	697b      	ldr	r3, [r7, #20]
 800239e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80023a0:	4b13      	ldr	r3, [pc, #76]	; (80023f0 <_sbrk+0x64>)
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d102      	bne.n	80023ae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80023a8:	4b11      	ldr	r3, [pc, #68]	; (80023f0 <_sbrk+0x64>)
 80023aa:	4a12      	ldr	r2, [pc, #72]	; (80023f4 <_sbrk+0x68>)
 80023ac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80023ae:	4b10      	ldr	r3, [pc, #64]	; (80023f0 <_sbrk+0x64>)
 80023b0:	681a      	ldr	r2, [r3, #0]
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	4413      	add	r3, r2
 80023b6:	693a      	ldr	r2, [r7, #16]
 80023b8:	429a      	cmp	r2, r3
 80023ba:	d207      	bcs.n	80023cc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80023bc:	f009 fc68 	bl	800bc90 <__errno>
 80023c0:	4603      	mov	r3, r0
 80023c2:	220c      	movs	r2, #12
 80023c4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80023c6:	f04f 33ff 	mov.w	r3, #4294967295
 80023ca:	e009      	b.n	80023e0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80023cc:	4b08      	ldr	r3, [pc, #32]	; (80023f0 <_sbrk+0x64>)
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80023d2:	4b07      	ldr	r3, [pc, #28]	; (80023f0 <_sbrk+0x64>)
 80023d4:	681a      	ldr	r2, [r3, #0]
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	4413      	add	r3, r2
 80023da:	4a05      	ldr	r2, [pc, #20]	; (80023f0 <_sbrk+0x64>)
 80023dc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80023de:	68fb      	ldr	r3, [r7, #12]
}
 80023e0:	4618      	mov	r0, r3
 80023e2:	3718      	adds	r7, #24
 80023e4:	46bd      	mov	sp, r7
 80023e6:	bd80      	pop	{r7, pc}
 80023e8:	20020000 	.word	0x20020000
 80023ec:	00000400 	.word	0x00000400
 80023f0:	20000830 	.word	0x20000830
 80023f4:	20002458 	.word	0x20002458

080023f8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80023f8:	b480      	push	{r7}
 80023fa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80023fc:	4b06      	ldr	r3, [pc, #24]	; (8002418 <SystemInit+0x20>)
 80023fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002402:	4a05      	ldr	r2, [pc, #20]	; (8002418 <SystemInit+0x20>)
 8002404:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002408:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800240c:	bf00      	nop
 800240e:	46bd      	mov	sp, r7
 8002410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002414:	4770      	bx	lr
 8002416:	bf00      	nop
 8002418:	e000ed00 	.word	0xe000ed00

0800241c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800241c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002454 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002420:	480d      	ldr	r0, [pc, #52]	; (8002458 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002422:	490e      	ldr	r1, [pc, #56]	; (800245c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002424:	4a0e      	ldr	r2, [pc, #56]	; (8002460 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002426:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002428:	e002      	b.n	8002430 <LoopCopyDataInit>

0800242a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800242a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800242c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800242e:	3304      	adds	r3, #4

08002430 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002430:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002432:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002434:	d3f9      	bcc.n	800242a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002436:	4a0b      	ldr	r2, [pc, #44]	; (8002464 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002438:	4c0b      	ldr	r4, [pc, #44]	; (8002468 <LoopFillZerobss+0x26>)
  movs r3, #0
 800243a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800243c:	e001      	b.n	8002442 <LoopFillZerobss>

0800243e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800243e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002440:	3204      	adds	r2, #4

08002442 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002442:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002444:	d3fb      	bcc.n	800243e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002446:	f7ff ffd7 	bl	80023f8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800244a:	f009 fc27 	bl	800bc9c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800244e:	f7ff f983 	bl	8001758 <main>
  bx  lr    
 8002452:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002454:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002458:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800245c:	20000170 	.word	0x20000170
  ldr r2, =_sidata
 8002460:	0800c9d0 	.word	0x0800c9d0
  ldr r2, =_sbss
 8002464:	20000170 	.word	0x20000170
  ldr r4, =_ebss
 8002468:	20002454 	.word	0x20002454

0800246c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800246c:	e7fe      	b.n	800246c <ADC_IRQHandler>
	...

08002470 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002474:	4b0e      	ldr	r3, [pc, #56]	; (80024b0 <HAL_Init+0x40>)
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	4a0d      	ldr	r2, [pc, #52]	; (80024b0 <HAL_Init+0x40>)
 800247a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800247e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002480:	4b0b      	ldr	r3, [pc, #44]	; (80024b0 <HAL_Init+0x40>)
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	4a0a      	ldr	r2, [pc, #40]	; (80024b0 <HAL_Init+0x40>)
 8002486:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800248a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800248c:	4b08      	ldr	r3, [pc, #32]	; (80024b0 <HAL_Init+0x40>)
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	4a07      	ldr	r2, [pc, #28]	; (80024b0 <HAL_Init+0x40>)
 8002492:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002496:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002498:	2003      	movs	r0, #3
 800249a:	f000 f94f 	bl	800273c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800249e:	200f      	movs	r0, #15
 80024a0:	f000 f808 	bl	80024b4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80024a4:	f7ff fdae 	bl	8002004 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80024a8:	2300      	movs	r3, #0
}
 80024aa:	4618      	mov	r0, r3
 80024ac:	bd80      	pop	{r7, pc}
 80024ae:	bf00      	nop
 80024b0:	40023c00 	.word	0x40023c00

080024b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b082      	sub	sp, #8
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80024bc:	4b12      	ldr	r3, [pc, #72]	; (8002508 <HAL_InitTick+0x54>)
 80024be:	681a      	ldr	r2, [r3, #0]
 80024c0:	4b12      	ldr	r3, [pc, #72]	; (800250c <HAL_InitTick+0x58>)
 80024c2:	781b      	ldrb	r3, [r3, #0]
 80024c4:	4619      	mov	r1, r3
 80024c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80024ca:	fbb3 f3f1 	udiv	r3, r3, r1
 80024ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80024d2:	4618      	mov	r0, r3
 80024d4:	f000 f967 	bl	80027a6 <HAL_SYSTICK_Config>
 80024d8:	4603      	mov	r3, r0
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d001      	beq.n	80024e2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80024de:	2301      	movs	r3, #1
 80024e0:	e00e      	b.n	8002500 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	2b0f      	cmp	r3, #15
 80024e6:	d80a      	bhi.n	80024fe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80024e8:	2200      	movs	r2, #0
 80024ea:	6879      	ldr	r1, [r7, #4]
 80024ec:	f04f 30ff 	mov.w	r0, #4294967295
 80024f0:	f000 f92f 	bl	8002752 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80024f4:	4a06      	ldr	r2, [pc, #24]	; (8002510 <HAL_InitTick+0x5c>)
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80024fa:	2300      	movs	r3, #0
 80024fc:	e000      	b.n	8002500 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80024fe:	2301      	movs	r3, #1
}
 8002500:	4618      	mov	r0, r3
 8002502:	3708      	adds	r7, #8
 8002504:	46bd      	mov	sp, r7
 8002506:	bd80      	pop	{r7, pc}
 8002508:	20000010 	.word	0x20000010
 800250c:	20000018 	.word	0x20000018
 8002510:	20000014 	.word	0x20000014

08002514 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002514:	b480      	push	{r7}
 8002516:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002518:	4b06      	ldr	r3, [pc, #24]	; (8002534 <HAL_IncTick+0x20>)
 800251a:	781b      	ldrb	r3, [r3, #0]
 800251c:	461a      	mov	r2, r3
 800251e:	4b06      	ldr	r3, [pc, #24]	; (8002538 <HAL_IncTick+0x24>)
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	4413      	add	r3, r2
 8002524:	4a04      	ldr	r2, [pc, #16]	; (8002538 <HAL_IncTick+0x24>)
 8002526:	6013      	str	r3, [r2, #0]
}
 8002528:	bf00      	nop
 800252a:	46bd      	mov	sp, r7
 800252c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002530:	4770      	bx	lr
 8002532:	bf00      	nop
 8002534:	20000018 	.word	0x20000018
 8002538:	20000834 	.word	0x20000834

0800253c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800253c:	b480      	push	{r7}
 800253e:	af00      	add	r7, sp, #0
  return uwTick;
 8002540:	4b03      	ldr	r3, [pc, #12]	; (8002550 <HAL_GetTick+0x14>)
 8002542:	681b      	ldr	r3, [r3, #0]
}
 8002544:	4618      	mov	r0, r3
 8002546:	46bd      	mov	sp, r7
 8002548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254c:	4770      	bx	lr
 800254e:	bf00      	nop
 8002550:	20000834 	.word	0x20000834

08002554 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002554:	b580      	push	{r7, lr}
 8002556:	b084      	sub	sp, #16
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800255c:	f7ff ffee 	bl	800253c <HAL_GetTick>
 8002560:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	f1b3 3fff 	cmp.w	r3, #4294967295
 800256c:	d005      	beq.n	800257a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800256e:	4b0a      	ldr	r3, [pc, #40]	; (8002598 <HAL_Delay+0x44>)
 8002570:	781b      	ldrb	r3, [r3, #0]
 8002572:	461a      	mov	r2, r3
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	4413      	add	r3, r2
 8002578:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800257a:	bf00      	nop
 800257c:	f7ff ffde 	bl	800253c <HAL_GetTick>
 8002580:	4602      	mov	r2, r0
 8002582:	68bb      	ldr	r3, [r7, #8]
 8002584:	1ad3      	subs	r3, r2, r3
 8002586:	68fa      	ldr	r2, [r7, #12]
 8002588:	429a      	cmp	r2, r3
 800258a:	d8f7      	bhi.n	800257c <HAL_Delay+0x28>
  {
  }
}
 800258c:	bf00      	nop
 800258e:	bf00      	nop
 8002590:	3710      	adds	r7, #16
 8002592:	46bd      	mov	sp, r7
 8002594:	bd80      	pop	{r7, pc}
 8002596:	bf00      	nop
 8002598:	20000018 	.word	0x20000018

0800259c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800259c:	b480      	push	{r7}
 800259e:	b085      	sub	sp, #20
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	f003 0307 	and.w	r3, r3, #7
 80025aa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80025ac:	4b0c      	ldr	r3, [pc, #48]	; (80025e0 <__NVIC_SetPriorityGrouping+0x44>)
 80025ae:	68db      	ldr	r3, [r3, #12]
 80025b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80025b2:	68ba      	ldr	r2, [r7, #8]
 80025b4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80025b8:	4013      	ands	r3, r2
 80025ba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80025c0:	68bb      	ldr	r3, [r7, #8]
 80025c2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80025c4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80025c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80025cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80025ce:	4a04      	ldr	r2, [pc, #16]	; (80025e0 <__NVIC_SetPriorityGrouping+0x44>)
 80025d0:	68bb      	ldr	r3, [r7, #8]
 80025d2:	60d3      	str	r3, [r2, #12]
}
 80025d4:	bf00      	nop
 80025d6:	3714      	adds	r7, #20
 80025d8:	46bd      	mov	sp, r7
 80025da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025de:	4770      	bx	lr
 80025e0:	e000ed00 	.word	0xe000ed00

080025e4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80025e4:	b480      	push	{r7}
 80025e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80025e8:	4b04      	ldr	r3, [pc, #16]	; (80025fc <__NVIC_GetPriorityGrouping+0x18>)
 80025ea:	68db      	ldr	r3, [r3, #12]
 80025ec:	0a1b      	lsrs	r3, r3, #8
 80025ee:	f003 0307 	and.w	r3, r3, #7
}
 80025f2:	4618      	mov	r0, r3
 80025f4:	46bd      	mov	sp, r7
 80025f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fa:	4770      	bx	lr
 80025fc:	e000ed00 	.word	0xe000ed00

08002600 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002600:	b480      	push	{r7}
 8002602:	b083      	sub	sp, #12
 8002604:	af00      	add	r7, sp, #0
 8002606:	4603      	mov	r3, r0
 8002608:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800260a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800260e:	2b00      	cmp	r3, #0
 8002610:	db0b      	blt.n	800262a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002612:	79fb      	ldrb	r3, [r7, #7]
 8002614:	f003 021f 	and.w	r2, r3, #31
 8002618:	4907      	ldr	r1, [pc, #28]	; (8002638 <__NVIC_EnableIRQ+0x38>)
 800261a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800261e:	095b      	lsrs	r3, r3, #5
 8002620:	2001      	movs	r0, #1
 8002622:	fa00 f202 	lsl.w	r2, r0, r2
 8002626:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800262a:	bf00      	nop
 800262c:	370c      	adds	r7, #12
 800262e:	46bd      	mov	sp, r7
 8002630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002634:	4770      	bx	lr
 8002636:	bf00      	nop
 8002638:	e000e100 	.word	0xe000e100

0800263c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800263c:	b480      	push	{r7}
 800263e:	b083      	sub	sp, #12
 8002640:	af00      	add	r7, sp, #0
 8002642:	4603      	mov	r3, r0
 8002644:	6039      	str	r1, [r7, #0]
 8002646:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002648:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800264c:	2b00      	cmp	r3, #0
 800264e:	db0a      	blt.n	8002666 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002650:	683b      	ldr	r3, [r7, #0]
 8002652:	b2da      	uxtb	r2, r3
 8002654:	490c      	ldr	r1, [pc, #48]	; (8002688 <__NVIC_SetPriority+0x4c>)
 8002656:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800265a:	0112      	lsls	r2, r2, #4
 800265c:	b2d2      	uxtb	r2, r2
 800265e:	440b      	add	r3, r1
 8002660:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002664:	e00a      	b.n	800267c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002666:	683b      	ldr	r3, [r7, #0]
 8002668:	b2da      	uxtb	r2, r3
 800266a:	4908      	ldr	r1, [pc, #32]	; (800268c <__NVIC_SetPriority+0x50>)
 800266c:	79fb      	ldrb	r3, [r7, #7]
 800266e:	f003 030f 	and.w	r3, r3, #15
 8002672:	3b04      	subs	r3, #4
 8002674:	0112      	lsls	r2, r2, #4
 8002676:	b2d2      	uxtb	r2, r2
 8002678:	440b      	add	r3, r1
 800267a:	761a      	strb	r2, [r3, #24]
}
 800267c:	bf00      	nop
 800267e:	370c      	adds	r7, #12
 8002680:	46bd      	mov	sp, r7
 8002682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002686:	4770      	bx	lr
 8002688:	e000e100 	.word	0xe000e100
 800268c:	e000ed00 	.word	0xe000ed00

08002690 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002690:	b480      	push	{r7}
 8002692:	b089      	sub	sp, #36	; 0x24
 8002694:	af00      	add	r7, sp, #0
 8002696:	60f8      	str	r0, [r7, #12]
 8002698:	60b9      	str	r1, [r7, #8]
 800269a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	f003 0307 	and.w	r3, r3, #7
 80026a2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80026a4:	69fb      	ldr	r3, [r7, #28]
 80026a6:	f1c3 0307 	rsb	r3, r3, #7
 80026aa:	2b04      	cmp	r3, #4
 80026ac:	bf28      	it	cs
 80026ae:	2304      	movcs	r3, #4
 80026b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80026b2:	69fb      	ldr	r3, [r7, #28]
 80026b4:	3304      	adds	r3, #4
 80026b6:	2b06      	cmp	r3, #6
 80026b8:	d902      	bls.n	80026c0 <NVIC_EncodePriority+0x30>
 80026ba:	69fb      	ldr	r3, [r7, #28]
 80026bc:	3b03      	subs	r3, #3
 80026be:	e000      	b.n	80026c2 <NVIC_EncodePriority+0x32>
 80026c0:	2300      	movs	r3, #0
 80026c2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026c4:	f04f 32ff 	mov.w	r2, #4294967295
 80026c8:	69bb      	ldr	r3, [r7, #24]
 80026ca:	fa02 f303 	lsl.w	r3, r2, r3
 80026ce:	43da      	mvns	r2, r3
 80026d0:	68bb      	ldr	r3, [r7, #8]
 80026d2:	401a      	ands	r2, r3
 80026d4:	697b      	ldr	r3, [r7, #20]
 80026d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80026d8:	f04f 31ff 	mov.w	r1, #4294967295
 80026dc:	697b      	ldr	r3, [r7, #20]
 80026de:	fa01 f303 	lsl.w	r3, r1, r3
 80026e2:	43d9      	mvns	r1, r3
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026e8:	4313      	orrs	r3, r2
         );
}
 80026ea:	4618      	mov	r0, r3
 80026ec:	3724      	adds	r7, #36	; 0x24
 80026ee:	46bd      	mov	sp, r7
 80026f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f4:	4770      	bx	lr
	...

080026f8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b082      	sub	sp, #8
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	3b01      	subs	r3, #1
 8002704:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002708:	d301      	bcc.n	800270e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800270a:	2301      	movs	r3, #1
 800270c:	e00f      	b.n	800272e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800270e:	4a0a      	ldr	r2, [pc, #40]	; (8002738 <SysTick_Config+0x40>)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	3b01      	subs	r3, #1
 8002714:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002716:	210f      	movs	r1, #15
 8002718:	f04f 30ff 	mov.w	r0, #4294967295
 800271c:	f7ff ff8e 	bl	800263c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002720:	4b05      	ldr	r3, [pc, #20]	; (8002738 <SysTick_Config+0x40>)
 8002722:	2200      	movs	r2, #0
 8002724:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002726:	4b04      	ldr	r3, [pc, #16]	; (8002738 <SysTick_Config+0x40>)
 8002728:	2207      	movs	r2, #7
 800272a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800272c:	2300      	movs	r3, #0
}
 800272e:	4618      	mov	r0, r3
 8002730:	3708      	adds	r7, #8
 8002732:	46bd      	mov	sp, r7
 8002734:	bd80      	pop	{r7, pc}
 8002736:	bf00      	nop
 8002738:	e000e010 	.word	0xe000e010

0800273c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800273c:	b580      	push	{r7, lr}
 800273e:	b082      	sub	sp, #8
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002744:	6878      	ldr	r0, [r7, #4]
 8002746:	f7ff ff29 	bl	800259c <__NVIC_SetPriorityGrouping>
}
 800274a:	bf00      	nop
 800274c:	3708      	adds	r7, #8
 800274e:	46bd      	mov	sp, r7
 8002750:	bd80      	pop	{r7, pc}

08002752 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002752:	b580      	push	{r7, lr}
 8002754:	b086      	sub	sp, #24
 8002756:	af00      	add	r7, sp, #0
 8002758:	4603      	mov	r3, r0
 800275a:	60b9      	str	r1, [r7, #8]
 800275c:	607a      	str	r2, [r7, #4]
 800275e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002760:	2300      	movs	r3, #0
 8002762:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002764:	f7ff ff3e 	bl	80025e4 <__NVIC_GetPriorityGrouping>
 8002768:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800276a:	687a      	ldr	r2, [r7, #4]
 800276c:	68b9      	ldr	r1, [r7, #8]
 800276e:	6978      	ldr	r0, [r7, #20]
 8002770:	f7ff ff8e 	bl	8002690 <NVIC_EncodePriority>
 8002774:	4602      	mov	r2, r0
 8002776:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800277a:	4611      	mov	r1, r2
 800277c:	4618      	mov	r0, r3
 800277e:	f7ff ff5d 	bl	800263c <__NVIC_SetPriority>
}
 8002782:	bf00      	nop
 8002784:	3718      	adds	r7, #24
 8002786:	46bd      	mov	sp, r7
 8002788:	bd80      	pop	{r7, pc}

0800278a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800278a:	b580      	push	{r7, lr}
 800278c:	b082      	sub	sp, #8
 800278e:	af00      	add	r7, sp, #0
 8002790:	4603      	mov	r3, r0
 8002792:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002794:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002798:	4618      	mov	r0, r3
 800279a:	f7ff ff31 	bl	8002600 <__NVIC_EnableIRQ>
}
 800279e:	bf00      	nop
 80027a0:	3708      	adds	r7, #8
 80027a2:	46bd      	mov	sp, r7
 80027a4:	bd80      	pop	{r7, pc}

080027a6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80027a6:	b580      	push	{r7, lr}
 80027a8:	b082      	sub	sp, #8
 80027aa:	af00      	add	r7, sp, #0
 80027ac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80027ae:	6878      	ldr	r0, [r7, #4]
 80027b0:	f7ff ffa2 	bl	80026f8 <SysTick_Config>
 80027b4:	4603      	mov	r3, r0
}
 80027b6:	4618      	mov	r0, r3
 80027b8:	3708      	adds	r7, #8
 80027ba:	46bd      	mov	sp, r7
 80027bc:	bd80      	pop	{r7, pc}
	...

080027c0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	b086      	sub	sp, #24
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80027c8:	2300      	movs	r3, #0
 80027ca:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80027cc:	f7ff feb6 	bl	800253c <HAL_GetTick>
 80027d0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d101      	bne.n	80027dc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80027d8:	2301      	movs	r3, #1
 80027da:	e099      	b.n	8002910 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	2202      	movs	r2, #2
 80027e0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	2200      	movs	r2, #0
 80027e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	681a      	ldr	r2, [r3, #0]
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f022 0201 	bic.w	r2, r2, #1
 80027fa:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80027fc:	e00f      	b.n	800281e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80027fe:	f7ff fe9d 	bl	800253c <HAL_GetTick>
 8002802:	4602      	mov	r2, r0
 8002804:	693b      	ldr	r3, [r7, #16]
 8002806:	1ad3      	subs	r3, r2, r3
 8002808:	2b05      	cmp	r3, #5
 800280a:	d908      	bls.n	800281e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	2220      	movs	r2, #32
 8002810:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	2203      	movs	r2, #3
 8002816:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800281a:	2303      	movs	r3, #3
 800281c:	e078      	b.n	8002910 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f003 0301 	and.w	r3, r3, #1
 8002828:	2b00      	cmp	r3, #0
 800282a:	d1e8      	bne.n	80027fe <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002834:	697a      	ldr	r2, [r7, #20]
 8002836:	4b38      	ldr	r3, [pc, #224]	; (8002918 <HAL_DMA_Init+0x158>)
 8002838:	4013      	ands	r3, r2
 800283a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	685a      	ldr	r2, [r3, #4]
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	689b      	ldr	r3, [r3, #8]
 8002844:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800284a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	691b      	ldr	r3, [r3, #16]
 8002850:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002856:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	699b      	ldr	r3, [r3, #24]
 800285c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002862:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	6a1b      	ldr	r3, [r3, #32]
 8002868:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800286a:	697a      	ldr	r2, [r7, #20]
 800286c:	4313      	orrs	r3, r2
 800286e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002874:	2b04      	cmp	r3, #4
 8002876:	d107      	bne.n	8002888 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002880:	4313      	orrs	r3, r2
 8002882:	697a      	ldr	r2, [r7, #20]
 8002884:	4313      	orrs	r3, r2
 8002886:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	697a      	ldr	r2, [r7, #20]
 800288e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	695b      	ldr	r3, [r3, #20]
 8002896:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002898:	697b      	ldr	r3, [r7, #20]
 800289a:	f023 0307 	bic.w	r3, r3, #7
 800289e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028a4:	697a      	ldr	r2, [r7, #20]
 80028a6:	4313      	orrs	r3, r2
 80028a8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028ae:	2b04      	cmp	r3, #4
 80028b0:	d117      	bne.n	80028e2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028b6:	697a      	ldr	r2, [r7, #20]
 80028b8:	4313      	orrs	r3, r2
 80028ba:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d00e      	beq.n	80028e2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80028c4:	6878      	ldr	r0, [r7, #4]
 80028c6:	f000 fb01 	bl	8002ecc <DMA_CheckFifoParam>
 80028ca:	4603      	mov	r3, r0
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d008      	beq.n	80028e2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	2240      	movs	r2, #64	; 0x40
 80028d4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	2201      	movs	r2, #1
 80028da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80028de:	2301      	movs	r3, #1
 80028e0:	e016      	b.n	8002910 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	697a      	ldr	r2, [r7, #20]
 80028e8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80028ea:	6878      	ldr	r0, [r7, #4]
 80028ec:	f000 fab8 	bl	8002e60 <DMA_CalcBaseAndBitshift>
 80028f0:	4603      	mov	r3, r0
 80028f2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028f8:	223f      	movs	r2, #63	; 0x3f
 80028fa:	409a      	lsls	r2, r3
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	2200      	movs	r2, #0
 8002904:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	2201      	movs	r2, #1
 800290a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800290e:	2300      	movs	r3, #0
}
 8002910:	4618      	mov	r0, r3
 8002912:	3718      	adds	r7, #24
 8002914:	46bd      	mov	sp, r7
 8002916:	bd80      	pop	{r7, pc}
 8002918:	f010803f 	.word	0xf010803f

0800291c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800291c:	b580      	push	{r7, lr}
 800291e:	b086      	sub	sp, #24
 8002920:	af00      	add	r7, sp, #0
 8002922:	60f8      	str	r0, [r7, #12]
 8002924:	60b9      	str	r1, [r7, #8]
 8002926:	607a      	str	r2, [r7, #4]
 8002928:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800292a:	2300      	movs	r3, #0
 800292c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002932:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800293a:	2b01      	cmp	r3, #1
 800293c:	d101      	bne.n	8002942 <HAL_DMA_Start_IT+0x26>
 800293e:	2302      	movs	r3, #2
 8002940:	e040      	b.n	80029c4 <HAL_DMA_Start_IT+0xa8>
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	2201      	movs	r2, #1
 8002946:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002950:	b2db      	uxtb	r3, r3
 8002952:	2b01      	cmp	r3, #1
 8002954:	d12f      	bne.n	80029b6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	2202      	movs	r2, #2
 800295a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	2200      	movs	r2, #0
 8002962:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002964:	683b      	ldr	r3, [r7, #0]
 8002966:	687a      	ldr	r2, [r7, #4]
 8002968:	68b9      	ldr	r1, [r7, #8]
 800296a:	68f8      	ldr	r0, [r7, #12]
 800296c:	f000 fa4a 	bl	8002e04 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002974:	223f      	movs	r2, #63	; 0x3f
 8002976:	409a      	lsls	r2, r3
 8002978:	693b      	ldr	r3, [r7, #16]
 800297a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	681a      	ldr	r2, [r3, #0]
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f042 0216 	orr.w	r2, r2, #22
 800298a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002990:	2b00      	cmp	r3, #0
 8002992:	d007      	beq.n	80029a4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	681a      	ldr	r2, [r3, #0]
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f042 0208 	orr.w	r2, r2, #8
 80029a2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	681a      	ldr	r2, [r3, #0]
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f042 0201 	orr.w	r2, r2, #1
 80029b2:	601a      	str	r2, [r3, #0]
 80029b4:	e005      	b.n	80029c2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	2200      	movs	r2, #0
 80029ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80029be:	2302      	movs	r3, #2
 80029c0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80029c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80029c4:	4618      	mov	r0, r3
 80029c6:	3718      	adds	r7, #24
 80029c8:	46bd      	mov	sp, r7
 80029ca:	bd80      	pop	{r7, pc}

080029cc <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	b084      	sub	sp, #16
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029d8:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80029da:	f7ff fdaf 	bl	800253c <HAL_GetTick>
 80029de:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80029e6:	b2db      	uxtb	r3, r3
 80029e8:	2b02      	cmp	r3, #2
 80029ea:	d008      	beq.n	80029fe <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	2280      	movs	r2, #128	; 0x80
 80029f0:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	2200      	movs	r2, #0
 80029f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80029fa:	2301      	movs	r3, #1
 80029fc:	e052      	b.n	8002aa4 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	681a      	ldr	r2, [r3, #0]
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f022 0216 	bic.w	r2, r2, #22
 8002a0c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	695a      	ldr	r2, [r3, #20]
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002a1c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d103      	bne.n	8002a2e <HAL_DMA_Abort+0x62>
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d007      	beq.n	8002a3e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	681a      	ldr	r2, [r3, #0]
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f022 0208 	bic.w	r2, r2, #8
 8002a3c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	681a      	ldr	r2, [r3, #0]
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f022 0201 	bic.w	r2, r2, #1
 8002a4c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002a4e:	e013      	b.n	8002a78 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002a50:	f7ff fd74 	bl	800253c <HAL_GetTick>
 8002a54:	4602      	mov	r2, r0
 8002a56:	68bb      	ldr	r3, [r7, #8]
 8002a58:	1ad3      	subs	r3, r2, r3
 8002a5a:	2b05      	cmp	r3, #5
 8002a5c:	d90c      	bls.n	8002a78 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	2220      	movs	r2, #32
 8002a62:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	2203      	movs	r2, #3
 8002a68:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	2200      	movs	r2, #0
 8002a70:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002a74:	2303      	movs	r3, #3
 8002a76:	e015      	b.n	8002aa4 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f003 0301 	and.w	r3, r3, #1
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d1e4      	bne.n	8002a50 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a8a:	223f      	movs	r2, #63	; 0x3f
 8002a8c:	409a      	lsls	r2, r3
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	2201      	movs	r2, #1
 8002a96:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002aa2:	2300      	movs	r3, #0
}
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	3710      	adds	r7, #16
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	bd80      	pop	{r7, pc}

08002aac <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002aac:	b480      	push	{r7}
 8002aae:	b083      	sub	sp, #12
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002aba:	b2db      	uxtb	r3, r3
 8002abc:	2b02      	cmp	r3, #2
 8002abe:	d004      	beq.n	8002aca <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	2280      	movs	r2, #128	; 0x80
 8002ac4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002ac6:	2301      	movs	r3, #1
 8002ac8:	e00c      	b.n	8002ae4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	2205      	movs	r2, #5
 8002ace:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	681a      	ldr	r2, [r3, #0]
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f022 0201 	bic.w	r2, r2, #1
 8002ae0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002ae2:	2300      	movs	r3, #0
}
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	370c      	adds	r7, #12
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aee:	4770      	bx	lr

08002af0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	b086      	sub	sp, #24
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002af8:	2300      	movs	r3, #0
 8002afa:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002afc:	4b8e      	ldr	r3, [pc, #568]	; (8002d38 <HAL_DMA_IRQHandler+0x248>)
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	4a8e      	ldr	r2, [pc, #568]	; (8002d3c <HAL_DMA_IRQHandler+0x24c>)
 8002b02:	fba2 2303 	umull	r2, r3, r2, r3
 8002b06:	0a9b      	lsrs	r3, r3, #10
 8002b08:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b0e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002b10:	693b      	ldr	r3, [r7, #16]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b1a:	2208      	movs	r2, #8
 8002b1c:	409a      	lsls	r2, r3
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	4013      	ands	r3, r2
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d01a      	beq.n	8002b5c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f003 0304 	and.w	r3, r3, #4
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d013      	beq.n	8002b5c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	681a      	ldr	r2, [r3, #0]
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f022 0204 	bic.w	r2, r2, #4
 8002b42:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b48:	2208      	movs	r2, #8
 8002b4a:	409a      	lsls	r2, r3
 8002b4c:	693b      	ldr	r3, [r7, #16]
 8002b4e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b54:	f043 0201 	orr.w	r2, r3, #1
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b60:	2201      	movs	r2, #1
 8002b62:	409a      	lsls	r2, r3
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	4013      	ands	r3, r2
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d012      	beq.n	8002b92 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	695b      	ldr	r3, [r3, #20]
 8002b72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d00b      	beq.n	8002b92 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b7e:	2201      	movs	r2, #1
 8002b80:	409a      	lsls	r2, r3
 8002b82:	693b      	ldr	r3, [r7, #16]
 8002b84:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b8a:	f043 0202 	orr.w	r2, r3, #2
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b96:	2204      	movs	r2, #4
 8002b98:	409a      	lsls	r2, r3
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	4013      	ands	r3, r2
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d012      	beq.n	8002bc8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f003 0302 	and.w	r3, r3, #2
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d00b      	beq.n	8002bc8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bb4:	2204      	movs	r2, #4
 8002bb6:	409a      	lsls	r2, r3
 8002bb8:	693b      	ldr	r3, [r7, #16]
 8002bba:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bc0:	f043 0204 	orr.w	r2, r3, #4
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bcc:	2210      	movs	r2, #16
 8002bce:	409a      	lsls	r2, r3
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	4013      	ands	r3, r2
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d043      	beq.n	8002c60 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f003 0308 	and.w	r3, r3, #8
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d03c      	beq.n	8002c60 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bea:	2210      	movs	r2, #16
 8002bec:	409a      	lsls	r2, r3
 8002bee:	693b      	ldr	r3, [r7, #16]
 8002bf0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d018      	beq.n	8002c32 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d108      	bne.n	8002c20 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d024      	beq.n	8002c60 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c1a:	6878      	ldr	r0, [r7, #4]
 8002c1c:	4798      	blx	r3
 8002c1e:	e01f      	b.n	8002c60 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d01b      	beq.n	8002c60 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c2c:	6878      	ldr	r0, [r7, #4]
 8002c2e:	4798      	blx	r3
 8002c30:	e016      	b.n	8002c60 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d107      	bne.n	8002c50 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	681a      	ldr	r2, [r3, #0]
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f022 0208 	bic.w	r2, r2, #8
 8002c4e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d003      	beq.n	8002c60 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c5c:	6878      	ldr	r0, [r7, #4]
 8002c5e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c64:	2220      	movs	r2, #32
 8002c66:	409a      	lsls	r2, r3
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	4013      	ands	r3, r2
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	f000 808f 	beq.w	8002d90 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f003 0310 	and.w	r3, r3, #16
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	f000 8087 	beq.w	8002d90 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c86:	2220      	movs	r2, #32
 8002c88:	409a      	lsls	r2, r3
 8002c8a:	693b      	ldr	r3, [r7, #16]
 8002c8c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002c94:	b2db      	uxtb	r3, r3
 8002c96:	2b05      	cmp	r3, #5
 8002c98:	d136      	bne.n	8002d08 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	681a      	ldr	r2, [r3, #0]
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f022 0216 	bic.w	r2, r2, #22
 8002ca8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	695a      	ldr	r2, [r3, #20]
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002cb8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d103      	bne.n	8002cca <HAL_DMA_IRQHandler+0x1da>
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d007      	beq.n	8002cda <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	681a      	ldr	r2, [r3, #0]
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f022 0208 	bic.w	r2, r2, #8
 8002cd8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cde:	223f      	movs	r2, #63	; 0x3f
 8002ce0:	409a      	lsls	r2, r3
 8002ce2:	693b      	ldr	r3, [r7, #16]
 8002ce4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	2201      	movs	r2, #1
 8002cea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d07e      	beq.n	8002dfc <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d02:	6878      	ldr	r0, [r7, #4]
 8002d04:	4798      	blx	r3
        }
        return;
 8002d06:	e079      	b.n	8002dfc <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d01d      	beq.n	8002d52 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d10d      	bne.n	8002d40 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d031      	beq.n	8002d90 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d30:	6878      	ldr	r0, [r7, #4]
 8002d32:	4798      	blx	r3
 8002d34:	e02c      	b.n	8002d90 <HAL_DMA_IRQHandler+0x2a0>
 8002d36:	bf00      	nop
 8002d38:	20000010 	.word	0x20000010
 8002d3c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d023      	beq.n	8002d90 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d4c:	6878      	ldr	r0, [r7, #4]
 8002d4e:	4798      	blx	r3
 8002d50:	e01e      	b.n	8002d90 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d10f      	bne.n	8002d80 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	681a      	ldr	r2, [r3, #0]
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f022 0210 	bic.w	r2, r2, #16
 8002d6e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2201      	movs	r2, #1
 8002d74:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d003      	beq.n	8002d90 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d8c:	6878      	ldr	r0, [r7, #4]
 8002d8e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d032      	beq.n	8002dfe <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d9c:	f003 0301 	and.w	r3, r3, #1
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d022      	beq.n	8002dea <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	2205      	movs	r2, #5
 8002da8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	681a      	ldr	r2, [r3, #0]
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f022 0201 	bic.w	r2, r2, #1
 8002dba:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002dbc:	68bb      	ldr	r3, [r7, #8]
 8002dbe:	3301      	adds	r3, #1
 8002dc0:	60bb      	str	r3, [r7, #8]
 8002dc2:	697a      	ldr	r2, [r7, #20]
 8002dc4:	429a      	cmp	r2, r3
 8002dc6:	d307      	bcc.n	8002dd8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f003 0301 	and.w	r3, r3, #1
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d1f2      	bne.n	8002dbc <HAL_DMA_IRQHandler+0x2cc>
 8002dd6:	e000      	b.n	8002dda <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002dd8:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	2201      	movs	r2, #1
 8002dde:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	2200      	movs	r2, #0
 8002de6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d005      	beq.n	8002dfe <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002df6:	6878      	ldr	r0, [r7, #4]
 8002df8:	4798      	blx	r3
 8002dfa:	e000      	b.n	8002dfe <HAL_DMA_IRQHandler+0x30e>
        return;
 8002dfc:	bf00      	nop
    }
  }
}
 8002dfe:	3718      	adds	r7, #24
 8002e00:	46bd      	mov	sp, r7
 8002e02:	bd80      	pop	{r7, pc}

08002e04 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002e04:	b480      	push	{r7}
 8002e06:	b085      	sub	sp, #20
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	60f8      	str	r0, [r7, #12]
 8002e0c:	60b9      	str	r1, [r7, #8]
 8002e0e:	607a      	str	r2, [r7, #4]
 8002e10:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	681a      	ldr	r2, [r3, #0]
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002e20:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	683a      	ldr	r2, [r7, #0]
 8002e28:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	689b      	ldr	r3, [r3, #8]
 8002e2e:	2b40      	cmp	r3, #64	; 0x40
 8002e30:	d108      	bne.n	8002e44 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	687a      	ldr	r2, [r7, #4]
 8002e38:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	68ba      	ldr	r2, [r7, #8]
 8002e40:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002e42:	e007      	b.n	8002e54 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	68ba      	ldr	r2, [r7, #8]
 8002e4a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	687a      	ldr	r2, [r7, #4]
 8002e52:	60da      	str	r2, [r3, #12]
}
 8002e54:	bf00      	nop
 8002e56:	3714      	adds	r7, #20
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5e:	4770      	bx	lr

08002e60 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002e60:	b480      	push	{r7}
 8002e62:	b085      	sub	sp, #20
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	b2db      	uxtb	r3, r3
 8002e6e:	3b10      	subs	r3, #16
 8002e70:	4a14      	ldr	r2, [pc, #80]	; (8002ec4 <DMA_CalcBaseAndBitshift+0x64>)
 8002e72:	fba2 2303 	umull	r2, r3, r2, r3
 8002e76:	091b      	lsrs	r3, r3, #4
 8002e78:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002e7a:	4a13      	ldr	r2, [pc, #76]	; (8002ec8 <DMA_CalcBaseAndBitshift+0x68>)
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	4413      	add	r3, r2
 8002e80:	781b      	ldrb	r3, [r3, #0]
 8002e82:	461a      	mov	r2, r3
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	2b03      	cmp	r3, #3
 8002e8c:	d909      	bls.n	8002ea2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002e96:	f023 0303 	bic.w	r3, r3, #3
 8002e9a:	1d1a      	adds	r2, r3, #4
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	659a      	str	r2, [r3, #88]	; 0x58
 8002ea0:	e007      	b.n	8002eb2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002eaa:	f023 0303 	bic.w	r3, r3, #3
 8002eae:	687a      	ldr	r2, [r7, #4]
 8002eb0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	3714      	adds	r7, #20
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec0:	4770      	bx	lr
 8002ec2:	bf00      	nop
 8002ec4:	aaaaaaab 	.word	0xaaaaaaab
 8002ec8:	0800c954 	.word	0x0800c954

08002ecc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002ecc:	b480      	push	{r7}
 8002ece:	b085      	sub	sp, #20
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002ed4:	2300      	movs	r3, #0
 8002ed6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002edc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	699b      	ldr	r3, [r3, #24]
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d11f      	bne.n	8002f26 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002ee6:	68bb      	ldr	r3, [r7, #8]
 8002ee8:	2b03      	cmp	r3, #3
 8002eea:	d856      	bhi.n	8002f9a <DMA_CheckFifoParam+0xce>
 8002eec:	a201      	add	r2, pc, #4	; (adr r2, 8002ef4 <DMA_CheckFifoParam+0x28>)
 8002eee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ef2:	bf00      	nop
 8002ef4:	08002f05 	.word	0x08002f05
 8002ef8:	08002f17 	.word	0x08002f17
 8002efc:	08002f05 	.word	0x08002f05
 8002f00:	08002f9b 	.word	0x08002f9b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f08:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d046      	beq.n	8002f9e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002f10:	2301      	movs	r3, #1
 8002f12:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002f14:	e043      	b.n	8002f9e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f1a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002f1e:	d140      	bne.n	8002fa2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002f20:	2301      	movs	r3, #1
 8002f22:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002f24:	e03d      	b.n	8002fa2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	699b      	ldr	r3, [r3, #24]
 8002f2a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002f2e:	d121      	bne.n	8002f74 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002f30:	68bb      	ldr	r3, [r7, #8]
 8002f32:	2b03      	cmp	r3, #3
 8002f34:	d837      	bhi.n	8002fa6 <DMA_CheckFifoParam+0xda>
 8002f36:	a201      	add	r2, pc, #4	; (adr r2, 8002f3c <DMA_CheckFifoParam+0x70>)
 8002f38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f3c:	08002f4d 	.word	0x08002f4d
 8002f40:	08002f53 	.word	0x08002f53
 8002f44:	08002f4d 	.word	0x08002f4d
 8002f48:	08002f65 	.word	0x08002f65
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002f4c:	2301      	movs	r3, #1
 8002f4e:	73fb      	strb	r3, [r7, #15]
      break;
 8002f50:	e030      	b.n	8002fb4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f56:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d025      	beq.n	8002faa <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002f5e:	2301      	movs	r3, #1
 8002f60:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002f62:	e022      	b.n	8002faa <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f68:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002f6c:	d11f      	bne.n	8002fae <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002f6e:	2301      	movs	r3, #1
 8002f70:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002f72:	e01c      	b.n	8002fae <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002f74:	68bb      	ldr	r3, [r7, #8]
 8002f76:	2b02      	cmp	r3, #2
 8002f78:	d903      	bls.n	8002f82 <DMA_CheckFifoParam+0xb6>
 8002f7a:	68bb      	ldr	r3, [r7, #8]
 8002f7c:	2b03      	cmp	r3, #3
 8002f7e:	d003      	beq.n	8002f88 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002f80:	e018      	b.n	8002fb4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002f82:	2301      	movs	r3, #1
 8002f84:	73fb      	strb	r3, [r7, #15]
      break;
 8002f86:	e015      	b.n	8002fb4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f8c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d00e      	beq.n	8002fb2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002f94:	2301      	movs	r3, #1
 8002f96:	73fb      	strb	r3, [r7, #15]
      break;
 8002f98:	e00b      	b.n	8002fb2 <DMA_CheckFifoParam+0xe6>
      break;
 8002f9a:	bf00      	nop
 8002f9c:	e00a      	b.n	8002fb4 <DMA_CheckFifoParam+0xe8>
      break;
 8002f9e:	bf00      	nop
 8002fa0:	e008      	b.n	8002fb4 <DMA_CheckFifoParam+0xe8>
      break;
 8002fa2:	bf00      	nop
 8002fa4:	e006      	b.n	8002fb4 <DMA_CheckFifoParam+0xe8>
      break;
 8002fa6:	bf00      	nop
 8002fa8:	e004      	b.n	8002fb4 <DMA_CheckFifoParam+0xe8>
      break;
 8002faa:	bf00      	nop
 8002fac:	e002      	b.n	8002fb4 <DMA_CheckFifoParam+0xe8>
      break;   
 8002fae:	bf00      	nop
 8002fb0:	e000      	b.n	8002fb4 <DMA_CheckFifoParam+0xe8>
      break;
 8002fb2:	bf00      	nop
    }
  } 
  
  return status; 
 8002fb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	3714      	adds	r7, #20
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc0:	4770      	bx	lr
 8002fc2:	bf00      	nop

08002fc4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002fc4:	b480      	push	{r7}
 8002fc6:	b089      	sub	sp, #36	; 0x24
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	6078      	str	r0, [r7, #4]
 8002fcc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002fce:	2300      	movs	r3, #0
 8002fd0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002fd2:	2300      	movs	r3, #0
 8002fd4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002fd6:	2300      	movs	r3, #0
 8002fd8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002fda:	2300      	movs	r3, #0
 8002fdc:	61fb      	str	r3, [r7, #28]
 8002fde:	e16b      	b.n	80032b8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002fe0:	2201      	movs	r2, #1
 8002fe2:	69fb      	ldr	r3, [r7, #28]
 8002fe4:	fa02 f303 	lsl.w	r3, r2, r3
 8002fe8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002fea:	683b      	ldr	r3, [r7, #0]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	697a      	ldr	r2, [r7, #20]
 8002ff0:	4013      	ands	r3, r2
 8002ff2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002ff4:	693a      	ldr	r2, [r7, #16]
 8002ff6:	697b      	ldr	r3, [r7, #20]
 8002ff8:	429a      	cmp	r2, r3
 8002ffa:	f040 815a 	bne.w	80032b2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002ffe:	683b      	ldr	r3, [r7, #0]
 8003000:	685b      	ldr	r3, [r3, #4]
 8003002:	f003 0303 	and.w	r3, r3, #3
 8003006:	2b01      	cmp	r3, #1
 8003008:	d005      	beq.n	8003016 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800300a:	683b      	ldr	r3, [r7, #0]
 800300c:	685b      	ldr	r3, [r3, #4]
 800300e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003012:	2b02      	cmp	r3, #2
 8003014:	d130      	bne.n	8003078 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	689b      	ldr	r3, [r3, #8]
 800301a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800301c:	69fb      	ldr	r3, [r7, #28]
 800301e:	005b      	lsls	r3, r3, #1
 8003020:	2203      	movs	r2, #3
 8003022:	fa02 f303 	lsl.w	r3, r2, r3
 8003026:	43db      	mvns	r3, r3
 8003028:	69ba      	ldr	r2, [r7, #24]
 800302a:	4013      	ands	r3, r2
 800302c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800302e:	683b      	ldr	r3, [r7, #0]
 8003030:	68da      	ldr	r2, [r3, #12]
 8003032:	69fb      	ldr	r3, [r7, #28]
 8003034:	005b      	lsls	r3, r3, #1
 8003036:	fa02 f303 	lsl.w	r3, r2, r3
 800303a:	69ba      	ldr	r2, [r7, #24]
 800303c:	4313      	orrs	r3, r2
 800303e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	69ba      	ldr	r2, [r7, #24]
 8003044:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	685b      	ldr	r3, [r3, #4]
 800304a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800304c:	2201      	movs	r2, #1
 800304e:	69fb      	ldr	r3, [r7, #28]
 8003050:	fa02 f303 	lsl.w	r3, r2, r3
 8003054:	43db      	mvns	r3, r3
 8003056:	69ba      	ldr	r2, [r7, #24]
 8003058:	4013      	ands	r3, r2
 800305a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800305c:	683b      	ldr	r3, [r7, #0]
 800305e:	685b      	ldr	r3, [r3, #4]
 8003060:	091b      	lsrs	r3, r3, #4
 8003062:	f003 0201 	and.w	r2, r3, #1
 8003066:	69fb      	ldr	r3, [r7, #28]
 8003068:	fa02 f303 	lsl.w	r3, r2, r3
 800306c:	69ba      	ldr	r2, [r7, #24]
 800306e:	4313      	orrs	r3, r2
 8003070:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	69ba      	ldr	r2, [r7, #24]
 8003076:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003078:	683b      	ldr	r3, [r7, #0]
 800307a:	685b      	ldr	r3, [r3, #4]
 800307c:	f003 0303 	and.w	r3, r3, #3
 8003080:	2b03      	cmp	r3, #3
 8003082:	d017      	beq.n	80030b4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	68db      	ldr	r3, [r3, #12]
 8003088:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800308a:	69fb      	ldr	r3, [r7, #28]
 800308c:	005b      	lsls	r3, r3, #1
 800308e:	2203      	movs	r2, #3
 8003090:	fa02 f303 	lsl.w	r3, r2, r3
 8003094:	43db      	mvns	r3, r3
 8003096:	69ba      	ldr	r2, [r7, #24]
 8003098:	4013      	ands	r3, r2
 800309a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800309c:	683b      	ldr	r3, [r7, #0]
 800309e:	689a      	ldr	r2, [r3, #8]
 80030a0:	69fb      	ldr	r3, [r7, #28]
 80030a2:	005b      	lsls	r3, r3, #1
 80030a4:	fa02 f303 	lsl.w	r3, r2, r3
 80030a8:	69ba      	ldr	r2, [r7, #24]
 80030aa:	4313      	orrs	r3, r2
 80030ac:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	69ba      	ldr	r2, [r7, #24]
 80030b2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80030b4:	683b      	ldr	r3, [r7, #0]
 80030b6:	685b      	ldr	r3, [r3, #4]
 80030b8:	f003 0303 	and.w	r3, r3, #3
 80030bc:	2b02      	cmp	r3, #2
 80030be:	d123      	bne.n	8003108 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80030c0:	69fb      	ldr	r3, [r7, #28]
 80030c2:	08da      	lsrs	r2, r3, #3
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	3208      	adds	r2, #8
 80030c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80030cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80030ce:	69fb      	ldr	r3, [r7, #28]
 80030d0:	f003 0307 	and.w	r3, r3, #7
 80030d4:	009b      	lsls	r3, r3, #2
 80030d6:	220f      	movs	r2, #15
 80030d8:	fa02 f303 	lsl.w	r3, r2, r3
 80030dc:	43db      	mvns	r3, r3
 80030de:	69ba      	ldr	r2, [r7, #24]
 80030e0:	4013      	ands	r3, r2
 80030e2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80030e4:	683b      	ldr	r3, [r7, #0]
 80030e6:	691a      	ldr	r2, [r3, #16]
 80030e8:	69fb      	ldr	r3, [r7, #28]
 80030ea:	f003 0307 	and.w	r3, r3, #7
 80030ee:	009b      	lsls	r3, r3, #2
 80030f0:	fa02 f303 	lsl.w	r3, r2, r3
 80030f4:	69ba      	ldr	r2, [r7, #24]
 80030f6:	4313      	orrs	r3, r2
 80030f8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80030fa:	69fb      	ldr	r3, [r7, #28]
 80030fc:	08da      	lsrs	r2, r3, #3
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	3208      	adds	r2, #8
 8003102:	69b9      	ldr	r1, [r7, #24]
 8003104:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800310e:	69fb      	ldr	r3, [r7, #28]
 8003110:	005b      	lsls	r3, r3, #1
 8003112:	2203      	movs	r2, #3
 8003114:	fa02 f303 	lsl.w	r3, r2, r3
 8003118:	43db      	mvns	r3, r3
 800311a:	69ba      	ldr	r2, [r7, #24]
 800311c:	4013      	ands	r3, r2
 800311e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003120:	683b      	ldr	r3, [r7, #0]
 8003122:	685b      	ldr	r3, [r3, #4]
 8003124:	f003 0203 	and.w	r2, r3, #3
 8003128:	69fb      	ldr	r3, [r7, #28]
 800312a:	005b      	lsls	r3, r3, #1
 800312c:	fa02 f303 	lsl.w	r3, r2, r3
 8003130:	69ba      	ldr	r2, [r7, #24]
 8003132:	4313      	orrs	r3, r2
 8003134:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	69ba      	ldr	r2, [r7, #24]
 800313a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800313c:	683b      	ldr	r3, [r7, #0]
 800313e:	685b      	ldr	r3, [r3, #4]
 8003140:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003144:	2b00      	cmp	r3, #0
 8003146:	f000 80b4 	beq.w	80032b2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800314a:	2300      	movs	r3, #0
 800314c:	60fb      	str	r3, [r7, #12]
 800314e:	4b60      	ldr	r3, [pc, #384]	; (80032d0 <HAL_GPIO_Init+0x30c>)
 8003150:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003152:	4a5f      	ldr	r2, [pc, #380]	; (80032d0 <HAL_GPIO_Init+0x30c>)
 8003154:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003158:	6453      	str	r3, [r2, #68]	; 0x44
 800315a:	4b5d      	ldr	r3, [pc, #372]	; (80032d0 <HAL_GPIO_Init+0x30c>)
 800315c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800315e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003162:	60fb      	str	r3, [r7, #12]
 8003164:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003166:	4a5b      	ldr	r2, [pc, #364]	; (80032d4 <HAL_GPIO_Init+0x310>)
 8003168:	69fb      	ldr	r3, [r7, #28]
 800316a:	089b      	lsrs	r3, r3, #2
 800316c:	3302      	adds	r3, #2
 800316e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003172:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003174:	69fb      	ldr	r3, [r7, #28]
 8003176:	f003 0303 	and.w	r3, r3, #3
 800317a:	009b      	lsls	r3, r3, #2
 800317c:	220f      	movs	r2, #15
 800317e:	fa02 f303 	lsl.w	r3, r2, r3
 8003182:	43db      	mvns	r3, r3
 8003184:	69ba      	ldr	r2, [r7, #24]
 8003186:	4013      	ands	r3, r2
 8003188:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	4a52      	ldr	r2, [pc, #328]	; (80032d8 <HAL_GPIO_Init+0x314>)
 800318e:	4293      	cmp	r3, r2
 8003190:	d02b      	beq.n	80031ea <HAL_GPIO_Init+0x226>
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	4a51      	ldr	r2, [pc, #324]	; (80032dc <HAL_GPIO_Init+0x318>)
 8003196:	4293      	cmp	r3, r2
 8003198:	d025      	beq.n	80031e6 <HAL_GPIO_Init+0x222>
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	4a50      	ldr	r2, [pc, #320]	; (80032e0 <HAL_GPIO_Init+0x31c>)
 800319e:	4293      	cmp	r3, r2
 80031a0:	d01f      	beq.n	80031e2 <HAL_GPIO_Init+0x21e>
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	4a4f      	ldr	r2, [pc, #316]	; (80032e4 <HAL_GPIO_Init+0x320>)
 80031a6:	4293      	cmp	r3, r2
 80031a8:	d019      	beq.n	80031de <HAL_GPIO_Init+0x21a>
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	4a4e      	ldr	r2, [pc, #312]	; (80032e8 <HAL_GPIO_Init+0x324>)
 80031ae:	4293      	cmp	r3, r2
 80031b0:	d013      	beq.n	80031da <HAL_GPIO_Init+0x216>
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	4a4d      	ldr	r2, [pc, #308]	; (80032ec <HAL_GPIO_Init+0x328>)
 80031b6:	4293      	cmp	r3, r2
 80031b8:	d00d      	beq.n	80031d6 <HAL_GPIO_Init+0x212>
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	4a4c      	ldr	r2, [pc, #304]	; (80032f0 <HAL_GPIO_Init+0x32c>)
 80031be:	4293      	cmp	r3, r2
 80031c0:	d007      	beq.n	80031d2 <HAL_GPIO_Init+0x20e>
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	4a4b      	ldr	r2, [pc, #300]	; (80032f4 <HAL_GPIO_Init+0x330>)
 80031c6:	4293      	cmp	r3, r2
 80031c8:	d101      	bne.n	80031ce <HAL_GPIO_Init+0x20a>
 80031ca:	2307      	movs	r3, #7
 80031cc:	e00e      	b.n	80031ec <HAL_GPIO_Init+0x228>
 80031ce:	2308      	movs	r3, #8
 80031d0:	e00c      	b.n	80031ec <HAL_GPIO_Init+0x228>
 80031d2:	2306      	movs	r3, #6
 80031d4:	e00a      	b.n	80031ec <HAL_GPIO_Init+0x228>
 80031d6:	2305      	movs	r3, #5
 80031d8:	e008      	b.n	80031ec <HAL_GPIO_Init+0x228>
 80031da:	2304      	movs	r3, #4
 80031dc:	e006      	b.n	80031ec <HAL_GPIO_Init+0x228>
 80031de:	2303      	movs	r3, #3
 80031e0:	e004      	b.n	80031ec <HAL_GPIO_Init+0x228>
 80031e2:	2302      	movs	r3, #2
 80031e4:	e002      	b.n	80031ec <HAL_GPIO_Init+0x228>
 80031e6:	2301      	movs	r3, #1
 80031e8:	e000      	b.n	80031ec <HAL_GPIO_Init+0x228>
 80031ea:	2300      	movs	r3, #0
 80031ec:	69fa      	ldr	r2, [r7, #28]
 80031ee:	f002 0203 	and.w	r2, r2, #3
 80031f2:	0092      	lsls	r2, r2, #2
 80031f4:	4093      	lsls	r3, r2
 80031f6:	69ba      	ldr	r2, [r7, #24]
 80031f8:	4313      	orrs	r3, r2
 80031fa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80031fc:	4935      	ldr	r1, [pc, #212]	; (80032d4 <HAL_GPIO_Init+0x310>)
 80031fe:	69fb      	ldr	r3, [r7, #28]
 8003200:	089b      	lsrs	r3, r3, #2
 8003202:	3302      	adds	r3, #2
 8003204:	69ba      	ldr	r2, [r7, #24]
 8003206:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800320a:	4b3b      	ldr	r3, [pc, #236]	; (80032f8 <HAL_GPIO_Init+0x334>)
 800320c:	689b      	ldr	r3, [r3, #8]
 800320e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003210:	693b      	ldr	r3, [r7, #16]
 8003212:	43db      	mvns	r3, r3
 8003214:	69ba      	ldr	r2, [r7, #24]
 8003216:	4013      	ands	r3, r2
 8003218:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800321a:	683b      	ldr	r3, [r7, #0]
 800321c:	685b      	ldr	r3, [r3, #4]
 800321e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003222:	2b00      	cmp	r3, #0
 8003224:	d003      	beq.n	800322e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003226:	69ba      	ldr	r2, [r7, #24]
 8003228:	693b      	ldr	r3, [r7, #16]
 800322a:	4313      	orrs	r3, r2
 800322c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800322e:	4a32      	ldr	r2, [pc, #200]	; (80032f8 <HAL_GPIO_Init+0x334>)
 8003230:	69bb      	ldr	r3, [r7, #24]
 8003232:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003234:	4b30      	ldr	r3, [pc, #192]	; (80032f8 <HAL_GPIO_Init+0x334>)
 8003236:	68db      	ldr	r3, [r3, #12]
 8003238:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800323a:	693b      	ldr	r3, [r7, #16]
 800323c:	43db      	mvns	r3, r3
 800323e:	69ba      	ldr	r2, [r7, #24]
 8003240:	4013      	ands	r3, r2
 8003242:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003244:	683b      	ldr	r3, [r7, #0]
 8003246:	685b      	ldr	r3, [r3, #4]
 8003248:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800324c:	2b00      	cmp	r3, #0
 800324e:	d003      	beq.n	8003258 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003250:	69ba      	ldr	r2, [r7, #24]
 8003252:	693b      	ldr	r3, [r7, #16]
 8003254:	4313      	orrs	r3, r2
 8003256:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003258:	4a27      	ldr	r2, [pc, #156]	; (80032f8 <HAL_GPIO_Init+0x334>)
 800325a:	69bb      	ldr	r3, [r7, #24]
 800325c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800325e:	4b26      	ldr	r3, [pc, #152]	; (80032f8 <HAL_GPIO_Init+0x334>)
 8003260:	685b      	ldr	r3, [r3, #4]
 8003262:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003264:	693b      	ldr	r3, [r7, #16]
 8003266:	43db      	mvns	r3, r3
 8003268:	69ba      	ldr	r2, [r7, #24]
 800326a:	4013      	ands	r3, r2
 800326c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800326e:	683b      	ldr	r3, [r7, #0]
 8003270:	685b      	ldr	r3, [r3, #4]
 8003272:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003276:	2b00      	cmp	r3, #0
 8003278:	d003      	beq.n	8003282 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800327a:	69ba      	ldr	r2, [r7, #24]
 800327c:	693b      	ldr	r3, [r7, #16]
 800327e:	4313      	orrs	r3, r2
 8003280:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003282:	4a1d      	ldr	r2, [pc, #116]	; (80032f8 <HAL_GPIO_Init+0x334>)
 8003284:	69bb      	ldr	r3, [r7, #24]
 8003286:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003288:	4b1b      	ldr	r3, [pc, #108]	; (80032f8 <HAL_GPIO_Init+0x334>)
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800328e:	693b      	ldr	r3, [r7, #16]
 8003290:	43db      	mvns	r3, r3
 8003292:	69ba      	ldr	r2, [r7, #24]
 8003294:	4013      	ands	r3, r2
 8003296:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003298:	683b      	ldr	r3, [r7, #0]
 800329a:	685b      	ldr	r3, [r3, #4]
 800329c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d003      	beq.n	80032ac <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80032a4:	69ba      	ldr	r2, [r7, #24]
 80032a6:	693b      	ldr	r3, [r7, #16]
 80032a8:	4313      	orrs	r3, r2
 80032aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80032ac:	4a12      	ldr	r2, [pc, #72]	; (80032f8 <HAL_GPIO_Init+0x334>)
 80032ae:	69bb      	ldr	r3, [r7, #24]
 80032b0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80032b2:	69fb      	ldr	r3, [r7, #28]
 80032b4:	3301      	adds	r3, #1
 80032b6:	61fb      	str	r3, [r7, #28]
 80032b8:	69fb      	ldr	r3, [r7, #28]
 80032ba:	2b0f      	cmp	r3, #15
 80032bc:	f67f ae90 	bls.w	8002fe0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80032c0:	bf00      	nop
 80032c2:	bf00      	nop
 80032c4:	3724      	adds	r7, #36	; 0x24
 80032c6:	46bd      	mov	sp, r7
 80032c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032cc:	4770      	bx	lr
 80032ce:	bf00      	nop
 80032d0:	40023800 	.word	0x40023800
 80032d4:	40013800 	.word	0x40013800
 80032d8:	40020000 	.word	0x40020000
 80032dc:	40020400 	.word	0x40020400
 80032e0:	40020800 	.word	0x40020800
 80032e4:	40020c00 	.word	0x40020c00
 80032e8:	40021000 	.word	0x40021000
 80032ec:	40021400 	.word	0x40021400
 80032f0:	40021800 	.word	0x40021800
 80032f4:	40021c00 	.word	0x40021c00
 80032f8:	40013c00 	.word	0x40013c00

080032fc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80032fc:	b480      	push	{r7}
 80032fe:	b083      	sub	sp, #12
 8003300:	af00      	add	r7, sp, #0
 8003302:	6078      	str	r0, [r7, #4]
 8003304:	460b      	mov	r3, r1
 8003306:	807b      	strh	r3, [r7, #2]
 8003308:	4613      	mov	r3, r2
 800330a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800330c:	787b      	ldrb	r3, [r7, #1]
 800330e:	2b00      	cmp	r3, #0
 8003310:	d003      	beq.n	800331a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003312:	887a      	ldrh	r2, [r7, #2]
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003318:	e003      	b.n	8003322 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800331a:	887b      	ldrh	r3, [r7, #2]
 800331c:	041a      	lsls	r2, r3, #16
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	619a      	str	r2, [r3, #24]
}
 8003322:	bf00      	nop
 8003324:	370c      	adds	r7, #12
 8003326:	46bd      	mov	sp, r7
 8003328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332c:	4770      	bx	lr
	...

08003330 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003330:	b580      	push	{r7, lr}
 8003332:	b082      	sub	sp, #8
 8003334:	af00      	add	r7, sp, #0
 8003336:	4603      	mov	r3, r0
 8003338:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800333a:	4b08      	ldr	r3, [pc, #32]	; (800335c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800333c:	695a      	ldr	r2, [r3, #20]
 800333e:	88fb      	ldrh	r3, [r7, #6]
 8003340:	4013      	ands	r3, r2
 8003342:	2b00      	cmp	r3, #0
 8003344:	d006      	beq.n	8003354 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003346:	4a05      	ldr	r2, [pc, #20]	; (800335c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003348:	88fb      	ldrh	r3, [r7, #6]
 800334a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800334c:	88fb      	ldrh	r3, [r7, #6]
 800334e:	4618      	mov	r0, r3
 8003350:	f7fe fcf8 	bl	8001d44 <HAL_GPIO_EXTI_Callback>
  }
}
 8003354:	bf00      	nop
 8003356:	3708      	adds	r7, #8
 8003358:	46bd      	mov	sp, r7
 800335a:	bd80      	pop	{r7, pc}
 800335c:	40013c00 	.word	0x40013c00

08003360 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003360:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003362:	b08f      	sub	sp, #60	; 0x3c
 8003364:	af0a      	add	r7, sp, #40	; 0x28
 8003366:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	2b00      	cmp	r3, #0
 800336c:	d101      	bne.n	8003372 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800336e:	2301      	movs	r3, #1
 8003370:	e10f      	b.n	8003592 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 800337e:	b2db      	uxtb	r3, r3
 8003380:	2b00      	cmp	r3, #0
 8003382:	d106      	bne.n	8003392 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	2200      	movs	r2, #0
 8003388:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800338c:	6878      	ldr	r0, [r7, #4]
 800338e:	f008 f969 	bl	800b664 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	2203      	movs	r2, #3
 8003396:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800339a:	68bb      	ldr	r3, [r7, #8]
 800339c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800339e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d102      	bne.n	80033ac <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	2200      	movs	r2, #0
 80033aa:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	4618      	mov	r0, r3
 80033b2:	f004 fc92 	bl	8007cda <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	603b      	str	r3, [r7, #0]
 80033bc:	687e      	ldr	r6, [r7, #4]
 80033be:	466d      	mov	r5, sp
 80033c0:	f106 0410 	add.w	r4, r6, #16
 80033c4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80033c6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80033c8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80033ca:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80033cc:	e894 0003 	ldmia.w	r4, {r0, r1}
 80033d0:	e885 0003 	stmia.w	r5, {r0, r1}
 80033d4:	1d33      	adds	r3, r6, #4
 80033d6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80033d8:	6838      	ldr	r0, [r7, #0]
 80033da:	f004 fb69 	bl	8007ab0 <USB_CoreInit>
 80033de:	4603      	mov	r3, r0
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d005      	beq.n	80033f0 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	2202      	movs	r2, #2
 80033e8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80033ec:	2301      	movs	r3, #1
 80033ee:	e0d0      	b.n	8003592 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	2100      	movs	r1, #0
 80033f6:	4618      	mov	r0, r3
 80033f8:	f004 fc80 	bl	8007cfc <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80033fc:	2300      	movs	r3, #0
 80033fe:	73fb      	strb	r3, [r7, #15]
 8003400:	e04a      	b.n	8003498 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003402:	7bfa      	ldrb	r2, [r7, #15]
 8003404:	6879      	ldr	r1, [r7, #4]
 8003406:	4613      	mov	r3, r2
 8003408:	00db      	lsls	r3, r3, #3
 800340a:	4413      	add	r3, r2
 800340c:	009b      	lsls	r3, r3, #2
 800340e:	440b      	add	r3, r1
 8003410:	333d      	adds	r3, #61	; 0x3d
 8003412:	2201      	movs	r2, #1
 8003414:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003416:	7bfa      	ldrb	r2, [r7, #15]
 8003418:	6879      	ldr	r1, [r7, #4]
 800341a:	4613      	mov	r3, r2
 800341c:	00db      	lsls	r3, r3, #3
 800341e:	4413      	add	r3, r2
 8003420:	009b      	lsls	r3, r3, #2
 8003422:	440b      	add	r3, r1
 8003424:	333c      	adds	r3, #60	; 0x3c
 8003426:	7bfa      	ldrb	r2, [r7, #15]
 8003428:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800342a:	7bfa      	ldrb	r2, [r7, #15]
 800342c:	7bfb      	ldrb	r3, [r7, #15]
 800342e:	b298      	uxth	r0, r3
 8003430:	6879      	ldr	r1, [r7, #4]
 8003432:	4613      	mov	r3, r2
 8003434:	00db      	lsls	r3, r3, #3
 8003436:	4413      	add	r3, r2
 8003438:	009b      	lsls	r3, r3, #2
 800343a:	440b      	add	r3, r1
 800343c:	3344      	adds	r3, #68	; 0x44
 800343e:	4602      	mov	r2, r0
 8003440:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003442:	7bfa      	ldrb	r2, [r7, #15]
 8003444:	6879      	ldr	r1, [r7, #4]
 8003446:	4613      	mov	r3, r2
 8003448:	00db      	lsls	r3, r3, #3
 800344a:	4413      	add	r3, r2
 800344c:	009b      	lsls	r3, r3, #2
 800344e:	440b      	add	r3, r1
 8003450:	3340      	adds	r3, #64	; 0x40
 8003452:	2200      	movs	r2, #0
 8003454:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003456:	7bfa      	ldrb	r2, [r7, #15]
 8003458:	6879      	ldr	r1, [r7, #4]
 800345a:	4613      	mov	r3, r2
 800345c:	00db      	lsls	r3, r3, #3
 800345e:	4413      	add	r3, r2
 8003460:	009b      	lsls	r3, r3, #2
 8003462:	440b      	add	r3, r1
 8003464:	3348      	adds	r3, #72	; 0x48
 8003466:	2200      	movs	r2, #0
 8003468:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800346a:	7bfa      	ldrb	r2, [r7, #15]
 800346c:	6879      	ldr	r1, [r7, #4]
 800346e:	4613      	mov	r3, r2
 8003470:	00db      	lsls	r3, r3, #3
 8003472:	4413      	add	r3, r2
 8003474:	009b      	lsls	r3, r3, #2
 8003476:	440b      	add	r3, r1
 8003478:	334c      	adds	r3, #76	; 0x4c
 800347a:	2200      	movs	r2, #0
 800347c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800347e:	7bfa      	ldrb	r2, [r7, #15]
 8003480:	6879      	ldr	r1, [r7, #4]
 8003482:	4613      	mov	r3, r2
 8003484:	00db      	lsls	r3, r3, #3
 8003486:	4413      	add	r3, r2
 8003488:	009b      	lsls	r3, r3, #2
 800348a:	440b      	add	r3, r1
 800348c:	3354      	adds	r3, #84	; 0x54
 800348e:	2200      	movs	r2, #0
 8003490:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003492:	7bfb      	ldrb	r3, [r7, #15]
 8003494:	3301      	adds	r3, #1
 8003496:	73fb      	strb	r3, [r7, #15]
 8003498:	7bfa      	ldrb	r2, [r7, #15]
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	685b      	ldr	r3, [r3, #4]
 800349e:	429a      	cmp	r2, r3
 80034a0:	d3af      	bcc.n	8003402 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80034a2:	2300      	movs	r3, #0
 80034a4:	73fb      	strb	r3, [r7, #15]
 80034a6:	e044      	b.n	8003532 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80034a8:	7bfa      	ldrb	r2, [r7, #15]
 80034aa:	6879      	ldr	r1, [r7, #4]
 80034ac:	4613      	mov	r3, r2
 80034ae:	00db      	lsls	r3, r3, #3
 80034b0:	4413      	add	r3, r2
 80034b2:	009b      	lsls	r3, r3, #2
 80034b4:	440b      	add	r3, r1
 80034b6:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80034ba:	2200      	movs	r2, #0
 80034bc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80034be:	7bfa      	ldrb	r2, [r7, #15]
 80034c0:	6879      	ldr	r1, [r7, #4]
 80034c2:	4613      	mov	r3, r2
 80034c4:	00db      	lsls	r3, r3, #3
 80034c6:	4413      	add	r3, r2
 80034c8:	009b      	lsls	r3, r3, #2
 80034ca:	440b      	add	r3, r1
 80034cc:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80034d0:	7bfa      	ldrb	r2, [r7, #15]
 80034d2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80034d4:	7bfa      	ldrb	r2, [r7, #15]
 80034d6:	6879      	ldr	r1, [r7, #4]
 80034d8:	4613      	mov	r3, r2
 80034da:	00db      	lsls	r3, r3, #3
 80034dc:	4413      	add	r3, r2
 80034de:	009b      	lsls	r3, r3, #2
 80034e0:	440b      	add	r3, r1
 80034e2:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80034e6:	2200      	movs	r2, #0
 80034e8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80034ea:	7bfa      	ldrb	r2, [r7, #15]
 80034ec:	6879      	ldr	r1, [r7, #4]
 80034ee:	4613      	mov	r3, r2
 80034f0:	00db      	lsls	r3, r3, #3
 80034f2:	4413      	add	r3, r2
 80034f4:	009b      	lsls	r3, r3, #2
 80034f6:	440b      	add	r3, r1
 80034f8:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80034fc:	2200      	movs	r2, #0
 80034fe:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003500:	7bfa      	ldrb	r2, [r7, #15]
 8003502:	6879      	ldr	r1, [r7, #4]
 8003504:	4613      	mov	r3, r2
 8003506:	00db      	lsls	r3, r3, #3
 8003508:	4413      	add	r3, r2
 800350a:	009b      	lsls	r3, r3, #2
 800350c:	440b      	add	r3, r1
 800350e:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8003512:	2200      	movs	r2, #0
 8003514:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003516:	7bfa      	ldrb	r2, [r7, #15]
 8003518:	6879      	ldr	r1, [r7, #4]
 800351a:	4613      	mov	r3, r2
 800351c:	00db      	lsls	r3, r3, #3
 800351e:	4413      	add	r3, r2
 8003520:	009b      	lsls	r3, r3, #2
 8003522:	440b      	add	r3, r1
 8003524:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8003528:	2200      	movs	r2, #0
 800352a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800352c:	7bfb      	ldrb	r3, [r7, #15]
 800352e:	3301      	adds	r3, #1
 8003530:	73fb      	strb	r3, [r7, #15]
 8003532:	7bfa      	ldrb	r2, [r7, #15]
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	685b      	ldr	r3, [r3, #4]
 8003538:	429a      	cmp	r2, r3
 800353a:	d3b5      	bcc.n	80034a8 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	603b      	str	r3, [r7, #0]
 8003542:	687e      	ldr	r6, [r7, #4]
 8003544:	466d      	mov	r5, sp
 8003546:	f106 0410 	add.w	r4, r6, #16
 800354a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800354c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800354e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003550:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003552:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003556:	e885 0003 	stmia.w	r5, {r0, r1}
 800355a:	1d33      	adds	r3, r6, #4
 800355c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800355e:	6838      	ldr	r0, [r7, #0]
 8003560:	f004 fc18 	bl	8007d94 <USB_DevInit>
 8003564:	4603      	mov	r3, r0
 8003566:	2b00      	cmp	r3, #0
 8003568:	d005      	beq.n	8003576 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	2202      	movs	r2, #2
 800356e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003572:	2301      	movs	r3, #1
 8003574:	e00d      	b.n	8003592 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	2200      	movs	r2, #0
 800357a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	2201      	movs	r2, #1
 8003582:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	4618      	mov	r0, r3
 800358c:	f005 fd67 	bl	800905e <USB_DevDisconnect>

  return HAL_OK;
 8003590:	2300      	movs	r3, #0
}
 8003592:	4618      	mov	r0, r3
 8003594:	3714      	adds	r7, #20
 8003596:	46bd      	mov	sp, r7
 8003598:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800359a <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800359a:	b580      	push	{r7, lr}
 800359c:	b084      	sub	sp, #16
 800359e:	af00      	add	r7, sp, #0
 80035a0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80035ae:	2b01      	cmp	r3, #1
 80035b0:	d101      	bne.n	80035b6 <HAL_PCD_Start+0x1c>
 80035b2:	2302      	movs	r3, #2
 80035b4:	e020      	b.n	80035f8 <HAL_PCD_Start+0x5e>
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	2201      	movs	r2, #1
 80035ba:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035c2:	2b01      	cmp	r3, #1
 80035c4:	d109      	bne.n	80035da <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80035ca:	2b01      	cmp	r3, #1
 80035cc:	d005      	beq.n	80035da <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035d2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	4618      	mov	r0, r3
 80035e0:	f004 fb6a 	bl	8007cb8 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	4618      	mov	r0, r3
 80035ea:	f005 fd17 	bl	800901c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	2200      	movs	r2, #0
 80035f2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80035f6:	2300      	movs	r3, #0
}
 80035f8:	4618      	mov	r0, r3
 80035fa:	3710      	adds	r7, #16
 80035fc:	46bd      	mov	sp, r7
 80035fe:	bd80      	pop	{r7, pc}

08003600 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003600:	b590      	push	{r4, r7, lr}
 8003602:	b08d      	sub	sp, #52	; 0x34
 8003604:	af00      	add	r7, sp, #0
 8003606:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800360e:	6a3b      	ldr	r3, [r7, #32]
 8003610:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	4618      	mov	r0, r3
 8003618:	f005 fdd5 	bl	80091c6 <USB_GetMode>
 800361c:	4603      	mov	r3, r0
 800361e:	2b00      	cmp	r3, #0
 8003620:	f040 848a 	bne.w	8003f38 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	4618      	mov	r0, r3
 800362a:	f005 fd39 	bl	80090a0 <USB_ReadInterrupts>
 800362e:	4603      	mov	r3, r0
 8003630:	2b00      	cmp	r3, #0
 8003632:	f000 8480 	beq.w	8003f36 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8003636:	69fb      	ldr	r3, [r7, #28]
 8003638:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800363c:	689b      	ldr	r3, [r3, #8]
 800363e:	0a1b      	lsrs	r3, r3, #8
 8003640:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	4618      	mov	r0, r3
 8003650:	f005 fd26 	bl	80090a0 <USB_ReadInterrupts>
 8003654:	4603      	mov	r3, r0
 8003656:	f003 0302 	and.w	r3, r3, #2
 800365a:	2b02      	cmp	r3, #2
 800365c:	d107      	bne.n	800366e <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	695a      	ldr	r2, [r3, #20]
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f002 0202 	and.w	r2, r2, #2
 800366c:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	4618      	mov	r0, r3
 8003674:	f005 fd14 	bl	80090a0 <USB_ReadInterrupts>
 8003678:	4603      	mov	r3, r0
 800367a:	f003 0310 	and.w	r3, r3, #16
 800367e:	2b10      	cmp	r3, #16
 8003680:	d161      	bne.n	8003746 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	699a      	ldr	r2, [r3, #24]
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f022 0210 	bic.w	r2, r2, #16
 8003690:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8003692:	6a3b      	ldr	r3, [r7, #32]
 8003694:	6a1b      	ldr	r3, [r3, #32]
 8003696:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8003698:	69bb      	ldr	r3, [r7, #24]
 800369a:	f003 020f 	and.w	r2, r3, #15
 800369e:	4613      	mov	r3, r2
 80036a0:	00db      	lsls	r3, r3, #3
 80036a2:	4413      	add	r3, r2
 80036a4:	009b      	lsls	r3, r3, #2
 80036a6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80036aa:	687a      	ldr	r2, [r7, #4]
 80036ac:	4413      	add	r3, r2
 80036ae:	3304      	adds	r3, #4
 80036b0:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80036b2:	69bb      	ldr	r3, [r7, #24]
 80036b4:	0c5b      	lsrs	r3, r3, #17
 80036b6:	f003 030f 	and.w	r3, r3, #15
 80036ba:	2b02      	cmp	r3, #2
 80036bc:	d124      	bne.n	8003708 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80036be:	69ba      	ldr	r2, [r7, #24]
 80036c0:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80036c4:	4013      	ands	r3, r2
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d035      	beq.n	8003736 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80036ca:	697b      	ldr	r3, [r7, #20]
 80036cc:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80036ce:	69bb      	ldr	r3, [r7, #24]
 80036d0:	091b      	lsrs	r3, r3, #4
 80036d2:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80036d4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80036d8:	b29b      	uxth	r3, r3
 80036da:	461a      	mov	r2, r3
 80036dc:	6a38      	ldr	r0, [r7, #32]
 80036de:	f005 fb4b 	bl	8008d78 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80036e2:	697b      	ldr	r3, [r7, #20]
 80036e4:	691a      	ldr	r2, [r3, #16]
 80036e6:	69bb      	ldr	r3, [r7, #24]
 80036e8:	091b      	lsrs	r3, r3, #4
 80036ea:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80036ee:	441a      	add	r2, r3
 80036f0:	697b      	ldr	r3, [r7, #20]
 80036f2:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80036f4:	697b      	ldr	r3, [r7, #20]
 80036f6:	6a1a      	ldr	r2, [r3, #32]
 80036f8:	69bb      	ldr	r3, [r7, #24]
 80036fa:	091b      	lsrs	r3, r3, #4
 80036fc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003700:	441a      	add	r2, r3
 8003702:	697b      	ldr	r3, [r7, #20]
 8003704:	621a      	str	r2, [r3, #32]
 8003706:	e016      	b.n	8003736 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8003708:	69bb      	ldr	r3, [r7, #24]
 800370a:	0c5b      	lsrs	r3, r3, #17
 800370c:	f003 030f 	and.w	r3, r3, #15
 8003710:	2b06      	cmp	r3, #6
 8003712:	d110      	bne.n	8003736 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800371a:	2208      	movs	r2, #8
 800371c:	4619      	mov	r1, r3
 800371e:	6a38      	ldr	r0, [r7, #32]
 8003720:	f005 fb2a 	bl	8008d78 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003724:	697b      	ldr	r3, [r7, #20]
 8003726:	6a1a      	ldr	r2, [r3, #32]
 8003728:	69bb      	ldr	r3, [r7, #24]
 800372a:	091b      	lsrs	r3, r3, #4
 800372c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003730:	441a      	add	r2, r3
 8003732:	697b      	ldr	r3, [r7, #20]
 8003734:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	699a      	ldr	r2, [r3, #24]
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f042 0210 	orr.w	r2, r2, #16
 8003744:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	4618      	mov	r0, r3
 800374c:	f005 fca8 	bl	80090a0 <USB_ReadInterrupts>
 8003750:	4603      	mov	r3, r0
 8003752:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003756:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800375a:	f040 80a7 	bne.w	80038ac <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800375e:	2300      	movs	r3, #0
 8003760:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	4618      	mov	r0, r3
 8003768:	f005 fcad 	bl	80090c6 <USB_ReadDevAllOutEpInterrupt>
 800376c:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800376e:	e099      	b.n	80038a4 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8003770:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003772:	f003 0301 	and.w	r3, r3, #1
 8003776:	2b00      	cmp	r3, #0
 8003778:	f000 808e 	beq.w	8003898 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003782:	b2d2      	uxtb	r2, r2
 8003784:	4611      	mov	r1, r2
 8003786:	4618      	mov	r0, r3
 8003788:	f005 fcd1 	bl	800912e <USB_ReadDevOutEPInterrupt>
 800378c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800378e:	693b      	ldr	r3, [r7, #16]
 8003790:	f003 0301 	and.w	r3, r3, #1
 8003794:	2b00      	cmp	r3, #0
 8003796:	d00c      	beq.n	80037b2 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8003798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800379a:	015a      	lsls	r2, r3, #5
 800379c:	69fb      	ldr	r3, [r7, #28]
 800379e:	4413      	add	r3, r2
 80037a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80037a4:	461a      	mov	r2, r3
 80037a6:	2301      	movs	r3, #1
 80037a8:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80037aa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80037ac:	6878      	ldr	r0, [r7, #4]
 80037ae:	f000 fec3 	bl	8004538 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80037b2:	693b      	ldr	r3, [r7, #16]
 80037b4:	f003 0308 	and.w	r3, r3, #8
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d00c      	beq.n	80037d6 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80037bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037be:	015a      	lsls	r2, r3, #5
 80037c0:	69fb      	ldr	r3, [r7, #28]
 80037c2:	4413      	add	r3, r2
 80037c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80037c8:	461a      	mov	r2, r3
 80037ca:	2308      	movs	r3, #8
 80037cc:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80037ce:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80037d0:	6878      	ldr	r0, [r7, #4]
 80037d2:	f000 ff99 	bl	8004708 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80037d6:	693b      	ldr	r3, [r7, #16]
 80037d8:	f003 0310 	and.w	r3, r3, #16
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d008      	beq.n	80037f2 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80037e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037e2:	015a      	lsls	r2, r3, #5
 80037e4:	69fb      	ldr	r3, [r7, #28]
 80037e6:	4413      	add	r3, r2
 80037e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80037ec:	461a      	mov	r2, r3
 80037ee:	2310      	movs	r3, #16
 80037f0:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80037f2:	693b      	ldr	r3, [r7, #16]
 80037f4:	f003 0302 	and.w	r3, r3, #2
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d030      	beq.n	800385e <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80037fc:	6a3b      	ldr	r3, [r7, #32]
 80037fe:	695b      	ldr	r3, [r3, #20]
 8003800:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003804:	2b80      	cmp	r3, #128	; 0x80
 8003806:	d109      	bne.n	800381c <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8003808:	69fb      	ldr	r3, [r7, #28]
 800380a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800380e:	685b      	ldr	r3, [r3, #4]
 8003810:	69fa      	ldr	r2, [r7, #28]
 8003812:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003816:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800381a:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800381c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800381e:	4613      	mov	r3, r2
 8003820:	00db      	lsls	r3, r3, #3
 8003822:	4413      	add	r3, r2
 8003824:	009b      	lsls	r3, r3, #2
 8003826:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800382a:	687a      	ldr	r2, [r7, #4]
 800382c:	4413      	add	r3, r2
 800382e:	3304      	adds	r3, #4
 8003830:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003832:	697b      	ldr	r3, [r7, #20]
 8003834:	78db      	ldrb	r3, [r3, #3]
 8003836:	2b01      	cmp	r3, #1
 8003838:	d108      	bne.n	800384c <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800383a:	697b      	ldr	r3, [r7, #20]
 800383c:	2200      	movs	r2, #0
 800383e:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8003840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003842:	b2db      	uxtb	r3, r3
 8003844:	4619      	mov	r1, r3
 8003846:	6878      	ldr	r0, [r7, #4]
 8003848:	f008 f80e 	bl	800b868 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800384c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800384e:	015a      	lsls	r2, r3, #5
 8003850:	69fb      	ldr	r3, [r7, #28]
 8003852:	4413      	add	r3, r2
 8003854:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003858:	461a      	mov	r2, r3
 800385a:	2302      	movs	r3, #2
 800385c:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800385e:	693b      	ldr	r3, [r7, #16]
 8003860:	f003 0320 	and.w	r3, r3, #32
 8003864:	2b00      	cmp	r3, #0
 8003866:	d008      	beq.n	800387a <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800386a:	015a      	lsls	r2, r3, #5
 800386c:	69fb      	ldr	r3, [r7, #28]
 800386e:	4413      	add	r3, r2
 8003870:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003874:	461a      	mov	r2, r3
 8003876:	2320      	movs	r3, #32
 8003878:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800387a:	693b      	ldr	r3, [r7, #16]
 800387c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003880:	2b00      	cmp	r3, #0
 8003882:	d009      	beq.n	8003898 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8003884:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003886:	015a      	lsls	r2, r3, #5
 8003888:	69fb      	ldr	r3, [r7, #28]
 800388a:	4413      	add	r3, r2
 800388c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003890:	461a      	mov	r2, r3
 8003892:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003896:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8003898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800389a:	3301      	adds	r3, #1
 800389c:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800389e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038a0:	085b      	lsrs	r3, r3, #1
 80038a2:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80038a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	f47f af62 	bne.w	8003770 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	4618      	mov	r0, r3
 80038b2:	f005 fbf5 	bl	80090a0 <USB_ReadInterrupts>
 80038b6:	4603      	mov	r3, r0
 80038b8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80038bc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80038c0:	f040 80db 	bne.w	8003a7a <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	4618      	mov	r0, r3
 80038ca:	f005 fc16 	bl	80090fa <USB_ReadDevAllInEpInterrupt>
 80038ce:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80038d0:	2300      	movs	r3, #0
 80038d2:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80038d4:	e0cd      	b.n	8003a72 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80038d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038d8:	f003 0301 	and.w	r3, r3, #1
 80038dc:	2b00      	cmp	r3, #0
 80038de:	f000 80c2 	beq.w	8003a66 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038e8:	b2d2      	uxtb	r2, r2
 80038ea:	4611      	mov	r1, r2
 80038ec:	4618      	mov	r0, r3
 80038ee:	f005 fc3c 	bl	800916a <USB_ReadDevInEPInterrupt>
 80038f2:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80038f4:	693b      	ldr	r3, [r7, #16]
 80038f6:	f003 0301 	and.w	r3, r3, #1
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d057      	beq.n	80039ae <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80038fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003900:	f003 030f 	and.w	r3, r3, #15
 8003904:	2201      	movs	r2, #1
 8003906:	fa02 f303 	lsl.w	r3, r2, r3
 800390a:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800390c:	69fb      	ldr	r3, [r7, #28]
 800390e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003912:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	43db      	mvns	r3, r3
 8003918:	69f9      	ldr	r1, [r7, #28]
 800391a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800391e:	4013      	ands	r3, r2
 8003920:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8003922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003924:	015a      	lsls	r2, r3, #5
 8003926:	69fb      	ldr	r3, [r7, #28]
 8003928:	4413      	add	r3, r2
 800392a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800392e:	461a      	mov	r2, r3
 8003930:	2301      	movs	r3, #1
 8003932:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	691b      	ldr	r3, [r3, #16]
 8003938:	2b01      	cmp	r3, #1
 800393a:	d132      	bne.n	80039a2 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800393c:	6879      	ldr	r1, [r7, #4]
 800393e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003940:	4613      	mov	r3, r2
 8003942:	00db      	lsls	r3, r3, #3
 8003944:	4413      	add	r3, r2
 8003946:	009b      	lsls	r3, r3, #2
 8003948:	440b      	add	r3, r1
 800394a:	334c      	adds	r3, #76	; 0x4c
 800394c:	6819      	ldr	r1, [r3, #0]
 800394e:	6878      	ldr	r0, [r7, #4]
 8003950:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003952:	4613      	mov	r3, r2
 8003954:	00db      	lsls	r3, r3, #3
 8003956:	4413      	add	r3, r2
 8003958:	009b      	lsls	r3, r3, #2
 800395a:	4403      	add	r3, r0
 800395c:	3348      	adds	r3, #72	; 0x48
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	4419      	add	r1, r3
 8003962:	6878      	ldr	r0, [r7, #4]
 8003964:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003966:	4613      	mov	r3, r2
 8003968:	00db      	lsls	r3, r3, #3
 800396a:	4413      	add	r3, r2
 800396c:	009b      	lsls	r3, r3, #2
 800396e:	4403      	add	r3, r0
 8003970:	334c      	adds	r3, #76	; 0x4c
 8003972:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8003974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003976:	2b00      	cmp	r3, #0
 8003978:	d113      	bne.n	80039a2 <HAL_PCD_IRQHandler+0x3a2>
 800397a:	6879      	ldr	r1, [r7, #4]
 800397c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800397e:	4613      	mov	r3, r2
 8003980:	00db      	lsls	r3, r3, #3
 8003982:	4413      	add	r3, r2
 8003984:	009b      	lsls	r3, r3, #2
 8003986:	440b      	add	r3, r1
 8003988:	3354      	adds	r3, #84	; 0x54
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	2b00      	cmp	r3, #0
 800398e:	d108      	bne.n	80039a2 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	6818      	ldr	r0, [r3, #0]
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800399a:	461a      	mov	r2, r3
 800399c:	2101      	movs	r1, #1
 800399e:	f005 fc43 	bl	8009228 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80039a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039a4:	b2db      	uxtb	r3, r3
 80039a6:	4619      	mov	r1, r3
 80039a8:	6878      	ldr	r0, [r7, #4]
 80039aa:	f007 fed8 	bl	800b75e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80039ae:	693b      	ldr	r3, [r7, #16]
 80039b0:	f003 0308 	and.w	r3, r3, #8
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d008      	beq.n	80039ca <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80039b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039ba:	015a      	lsls	r2, r3, #5
 80039bc:	69fb      	ldr	r3, [r7, #28]
 80039be:	4413      	add	r3, r2
 80039c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80039c4:	461a      	mov	r2, r3
 80039c6:	2308      	movs	r3, #8
 80039c8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80039ca:	693b      	ldr	r3, [r7, #16]
 80039cc:	f003 0310 	and.w	r3, r3, #16
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d008      	beq.n	80039e6 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80039d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039d6:	015a      	lsls	r2, r3, #5
 80039d8:	69fb      	ldr	r3, [r7, #28]
 80039da:	4413      	add	r3, r2
 80039dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80039e0:	461a      	mov	r2, r3
 80039e2:	2310      	movs	r3, #16
 80039e4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80039e6:	693b      	ldr	r3, [r7, #16]
 80039e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d008      	beq.n	8003a02 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80039f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039f2:	015a      	lsls	r2, r3, #5
 80039f4:	69fb      	ldr	r3, [r7, #28]
 80039f6:	4413      	add	r3, r2
 80039f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80039fc:	461a      	mov	r2, r3
 80039fe:	2340      	movs	r3, #64	; 0x40
 8003a00:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003a02:	693b      	ldr	r3, [r7, #16]
 8003a04:	f003 0302 	and.w	r3, r3, #2
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d023      	beq.n	8003a54 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8003a0c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003a0e:	6a38      	ldr	r0, [r7, #32]
 8003a10:	f004 fb24 	bl	800805c <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8003a14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a16:	4613      	mov	r3, r2
 8003a18:	00db      	lsls	r3, r3, #3
 8003a1a:	4413      	add	r3, r2
 8003a1c:	009b      	lsls	r3, r3, #2
 8003a1e:	3338      	adds	r3, #56	; 0x38
 8003a20:	687a      	ldr	r2, [r7, #4]
 8003a22:	4413      	add	r3, r2
 8003a24:	3304      	adds	r3, #4
 8003a26:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003a28:	697b      	ldr	r3, [r7, #20]
 8003a2a:	78db      	ldrb	r3, [r3, #3]
 8003a2c:	2b01      	cmp	r3, #1
 8003a2e:	d108      	bne.n	8003a42 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8003a30:	697b      	ldr	r3, [r7, #20]
 8003a32:	2200      	movs	r2, #0
 8003a34:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003a36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a38:	b2db      	uxtb	r3, r3
 8003a3a:	4619      	mov	r1, r3
 8003a3c:	6878      	ldr	r0, [r7, #4]
 8003a3e:	f007 ff25 	bl	800b88c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003a42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a44:	015a      	lsls	r2, r3, #5
 8003a46:	69fb      	ldr	r3, [r7, #28]
 8003a48:	4413      	add	r3, r2
 8003a4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a4e:	461a      	mov	r2, r3
 8003a50:	2302      	movs	r3, #2
 8003a52:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003a54:	693b      	ldr	r3, [r7, #16]
 8003a56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d003      	beq.n	8003a66 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003a5e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003a60:	6878      	ldr	r0, [r7, #4]
 8003a62:	f000 fcdb 	bl	800441c <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003a66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a68:	3301      	adds	r3, #1
 8003a6a:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003a6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a6e:	085b      	lsrs	r3, r3, #1
 8003a70:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003a72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	f47f af2e 	bne.w	80038d6 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	4618      	mov	r0, r3
 8003a80:	f005 fb0e 	bl	80090a0 <USB_ReadInterrupts>
 8003a84:	4603      	mov	r3, r0
 8003a86:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003a8a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003a8e:	d122      	bne.n	8003ad6 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003a90:	69fb      	ldr	r3, [r7, #28]
 8003a92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a96:	685b      	ldr	r3, [r3, #4]
 8003a98:	69fa      	ldr	r2, [r7, #28]
 8003a9a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003a9e:	f023 0301 	bic.w	r3, r3, #1
 8003aa2:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8003aaa:	2b01      	cmp	r3, #1
 8003aac:	d108      	bne.n	8003ac0 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	2200      	movs	r2, #0
 8003ab2:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003ab6:	2100      	movs	r1, #0
 8003ab8:	6878      	ldr	r0, [r7, #4]
 8003aba:	f000 fec3 	bl	8004844 <HAL_PCDEx_LPM_Callback>
 8003abe:	e002      	b.n	8003ac6 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003ac0:	6878      	ldr	r0, [r7, #4]
 8003ac2:	f007 fec3 	bl	800b84c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	695a      	ldr	r2, [r3, #20]
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8003ad4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	4618      	mov	r0, r3
 8003adc:	f005 fae0 	bl	80090a0 <USB_ReadInterrupts>
 8003ae0:	4603      	mov	r3, r0
 8003ae2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003ae6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003aea:	d112      	bne.n	8003b12 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003aec:	69fb      	ldr	r3, [r7, #28]
 8003aee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003af2:	689b      	ldr	r3, [r3, #8]
 8003af4:	f003 0301 	and.w	r3, r3, #1
 8003af8:	2b01      	cmp	r3, #1
 8003afa:	d102      	bne.n	8003b02 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003afc:	6878      	ldr	r0, [r7, #4]
 8003afe:	f007 fe7f 	bl	800b800 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	695a      	ldr	r2, [r3, #20]
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8003b10:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	4618      	mov	r0, r3
 8003b18:	f005 fac2 	bl	80090a0 <USB_ReadInterrupts>
 8003b1c:	4603      	mov	r3, r0
 8003b1e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003b22:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b26:	f040 80b7 	bne.w	8003c98 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003b2a:	69fb      	ldr	r3, [r7, #28]
 8003b2c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b30:	685b      	ldr	r3, [r3, #4]
 8003b32:	69fa      	ldr	r2, [r7, #28]
 8003b34:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003b38:	f023 0301 	bic.w	r3, r3, #1
 8003b3c:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	2110      	movs	r1, #16
 8003b44:	4618      	mov	r0, r3
 8003b46:	f004 fa89 	bl	800805c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003b4a:	2300      	movs	r3, #0
 8003b4c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003b4e:	e046      	b.n	8003bde <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003b50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b52:	015a      	lsls	r2, r3, #5
 8003b54:	69fb      	ldr	r3, [r7, #28]
 8003b56:	4413      	add	r3, r2
 8003b58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b5c:	461a      	mov	r2, r3
 8003b5e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003b62:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003b64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b66:	015a      	lsls	r2, r3, #5
 8003b68:	69fb      	ldr	r3, [r7, #28]
 8003b6a:	4413      	add	r3, r2
 8003b6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003b74:	0151      	lsls	r1, r2, #5
 8003b76:	69fa      	ldr	r2, [r7, #28]
 8003b78:	440a      	add	r2, r1
 8003b7a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003b7e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003b82:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003b84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b86:	015a      	lsls	r2, r3, #5
 8003b88:	69fb      	ldr	r3, [r7, #28]
 8003b8a:	4413      	add	r3, r2
 8003b8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b90:	461a      	mov	r2, r3
 8003b92:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003b96:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003b98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b9a:	015a      	lsls	r2, r3, #5
 8003b9c:	69fb      	ldr	r3, [r7, #28]
 8003b9e:	4413      	add	r3, r2
 8003ba0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003ba8:	0151      	lsls	r1, r2, #5
 8003baa:	69fa      	ldr	r2, [r7, #28]
 8003bac:	440a      	add	r2, r1
 8003bae:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003bb2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003bb6:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003bb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bba:	015a      	lsls	r2, r3, #5
 8003bbc:	69fb      	ldr	r3, [r7, #28]
 8003bbe:	4413      	add	r3, r2
 8003bc0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003bc8:	0151      	lsls	r1, r2, #5
 8003bca:	69fa      	ldr	r2, [r7, #28]
 8003bcc:	440a      	add	r2, r1
 8003bce:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003bd2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003bd6:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003bd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bda:	3301      	adds	r3, #1
 8003bdc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	685b      	ldr	r3, [r3, #4]
 8003be2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003be4:	429a      	cmp	r2, r3
 8003be6:	d3b3      	bcc.n	8003b50 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003be8:	69fb      	ldr	r3, [r7, #28]
 8003bea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003bee:	69db      	ldr	r3, [r3, #28]
 8003bf0:	69fa      	ldr	r2, [r7, #28]
 8003bf2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003bf6:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8003bfa:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d016      	beq.n	8003c32 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003c04:	69fb      	ldr	r3, [r7, #28]
 8003c06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c0a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003c0e:	69fa      	ldr	r2, [r7, #28]
 8003c10:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003c14:	f043 030b 	orr.w	r3, r3, #11
 8003c18:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003c1c:	69fb      	ldr	r3, [r7, #28]
 8003c1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c24:	69fa      	ldr	r2, [r7, #28]
 8003c26:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003c2a:	f043 030b 	orr.w	r3, r3, #11
 8003c2e:	6453      	str	r3, [r2, #68]	; 0x44
 8003c30:	e015      	b.n	8003c5e <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003c32:	69fb      	ldr	r3, [r7, #28]
 8003c34:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c38:	695b      	ldr	r3, [r3, #20]
 8003c3a:	69fa      	ldr	r2, [r7, #28]
 8003c3c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003c40:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003c44:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8003c48:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003c4a:	69fb      	ldr	r3, [r7, #28]
 8003c4c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c50:	691b      	ldr	r3, [r3, #16]
 8003c52:	69fa      	ldr	r2, [r7, #28]
 8003c54:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003c58:	f043 030b 	orr.w	r3, r3, #11
 8003c5c:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003c5e:	69fb      	ldr	r3, [r7, #28]
 8003c60:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	69fa      	ldr	r2, [r7, #28]
 8003c68:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003c6c:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8003c70:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	6818      	ldr	r0, [r3, #0]
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	691b      	ldr	r3, [r3, #16]
 8003c7a:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003c82:	461a      	mov	r2, r3
 8003c84:	f005 fad0 	bl	8009228 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	695a      	ldr	r2, [r3, #20]
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8003c96:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	4618      	mov	r0, r3
 8003c9e:	f005 f9ff 	bl	80090a0 <USB_ReadInterrupts>
 8003ca2:	4603      	mov	r3, r0
 8003ca4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003ca8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003cac:	d124      	bne.n	8003cf8 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	4618      	mov	r0, r3
 8003cb4:	f005 fa95 	bl	80091e2 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	4618      	mov	r0, r3
 8003cbe:	f004 fa4a 	bl	8008156 <USB_GetDevSpeed>
 8003cc2:	4603      	mov	r3, r0
 8003cc4:	461a      	mov	r2, r3
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681c      	ldr	r4, [r3, #0]
 8003cce:	f001 f9e9 	bl	80050a4 <HAL_RCC_GetHCLKFreq>
 8003cd2:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003cd8:	b2db      	uxtb	r3, r3
 8003cda:	461a      	mov	r2, r3
 8003cdc:	4620      	mov	r0, r4
 8003cde:	f003 ff49 	bl	8007b74 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003ce2:	6878      	ldr	r0, [r7, #4]
 8003ce4:	f007 fd63 	bl	800b7ae <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	695a      	ldr	r2, [r3, #20]
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8003cf6:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	4618      	mov	r0, r3
 8003cfe:	f005 f9cf 	bl	80090a0 <USB_ReadInterrupts>
 8003d02:	4603      	mov	r3, r0
 8003d04:	f003 0308 	and.w	r3, r3, #8
 8003d08:	2b08      	cmp	r3, #8
 8003d0a:	d10a      	bne.n	8003d22 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003d0c:	6878      	ldr	r0, [r7, #4]
 8003d0e:	f007 fd40 	bl	800b792 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	695a      	ldr	r2, [r3, #20]
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f002 0208 	and.w	r2, r2, #8
 8003d20:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	4618      	mov	r0, r3
 8003d28:	f005 f9ba 	bl	80090a0 <USB_ReadInterrupts>
 8003d2c:	4603      	mov	r3, r0
 8003d2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d32:	2b80      	cmp	r3, #128	; 0x80
 8003d34:	d122      	bne.n	8003d7c <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8003d36:	6a3b      	ldr	r3, [r7, #32]
 8003d38:	699b      	ldr	r3, [r3, #24]
 8003d3a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003d3e:	6a3b      	ldr	r3, [r7, #32]
 8003d40:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003d42:	2301      	movs	r3, #1
 8003d44:	627b      	str	r3, [r7, #36]	; 0x24
 8003d46:	e014      	b.n	8003d72 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8003d48:	6879      	ldr	r1, [r7, #4]
 8003d4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d4c:	4613      	mov	r3, r2
 8003d4e:	00db      	lsls	r3, r3, #3
 8003d50:	4413      	add	r3, r2
 8003d52:	009b      	lsls	r3, r3, #2
 8003d54:	440b      	add	r3, r1
 8003d56:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8003d5a:	781b      	ldrb	r3, [r3, #0]
 8003d5c:	2b01      	cmp	r3, #1
 8003d5e:	d105      	bne.n	8003d6c <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8003d60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d62:	b2db      	uxtb	r3, r3
 8003d64:	4619      	mov	r1, r3
 8003d66:	6878      	ldr	r0, [r7, #4]
 8003d68:	f000 fb27 	bl	80043ba <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003d6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d6e:	3301      	adds	r3, #1
 8003d70:	627b      	str	r3, [r7, #36]	; 0x24
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	685b      	ldr	r3, [r3, #4]
 8003d76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d78:	429a      	cmp	r2, r3
 8003d7a:	d3e5      	bcc.n	8003d48 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	4618      	mov	r0, r3
 8003d82:	f005 f98d 	bl	80090a0 <USB_ReadInterrupts>
 8003d86:	4603      	mov	r3, r0
 8003d88:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003d8c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003d90:	d13b      	bne.n	8003e0a <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003d92:	2301      	movs	r3, #1
 8003d94:	627b      	str	r3, [r7, #36]	; 0x24
 8003d96:	e02b      	b.n	8003df0 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8003d98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d9a:	015a      	lsls	r2, r3, #5
 8003d9c:	69fb      	ldr	r3, [r7, #28]
 8003d9e:	4413      	add	r3, r2
 8003da0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003da8:	6879      	ldr	r1, [r7, #4]
 8003daa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003dac:	4613      	mov	r3, r2
 8003dae:	00db      	lsls	r3, r3, #3
 8003db0:	4413      	add	r3, r2
 8003db2:	009b      	lsls	r3, r3, #2
 8003db4:	440b      	add	r3, r1
 8003db6:	3340      	adds	r3, #64	; 0x40
 8003db8:	781b      	ldrb	r3, [r3, #0]
 8003dba:	2b01      	cmp	r3, #1
 8003dbc:	d115      	bne.n	8003dea <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8003dbe:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	da12      	bge.n	8003dea <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8003dc4:	6879      	ldr	r1, [r7, #4]
 8003dc6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003dc8:	4613      	mov	r3, r2
 8003dca:	00db      	lsls	r3, r3, #3
 8003dcc:	4413      	add	r3, r2
 8003dce:	009b      	lsls	r3, r3, #2
 8003dd0:	440b      	add	r3, r1
 8003dd2:	333f      	adds	r3, #63	; 0x3f
 8003dd4:	2201      	movs	r2, #1
 8003dd6:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8003dd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dda:	b2db      	uxtb	r3, r3
 8003ddc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003de0:	b2db      	uxtb	r3, r3
 8003de2:	4619      	mov	r1, r3
 8003de4:	6878      	ldr	r0, [r7, #4]
 8003de6:	f000 fae8 	bl	80043ba <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dec:	3301      	adds	r3, #1
 8003dee:	627b      	str	r3, [r7, #36]	; 0x24
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	685b      	ldr	r3, [r3, #4]
 8003df4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003df6:	429a      	cmp	r2, r3
 8003df8:	d3ce      	bcc.n	8003d98 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	695a      	ldr	r2, [r3, #20]
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8003e08:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	4618      	mov	r0, r3
 8003e10:	f005 f946 	bl	80090a0 <USB_ReadInterrupts>
 8003e14:	4603      	mov	r3, r0
 8003e16:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003e1a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003e1e:	d155      	bne.n	8003ecc <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003e20:	2301      	movs	r3, #1
 8003e22:	627b      	str	r3, [r7, #36]	; 0x24
 8003e24:	e045      	b.n	8003eb2 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8003e26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e28:	015a      	lsls	r2, r3, #5
 8003e2a:	69fb      	ldr	r3, [r7, #28]
 8003e2c:	4413      	add	r3, r2
 8003e2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003e36:	6879      	ldr	r1, [r7, #4]
 8003e38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e3a:	4613      	mov	r3, r2
 8003e3c:	00db      	lsls	r3, r3, #3
 8003e3e:	4413      	add	r3, r2
 8003e40:	009b      	lsls	r3, r3, #2
 8003e42:	440b      	add	r3, r1
 8003e44:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003e48:	781b      	ldrb	r3, [r3, #0]
 8003e4a:	2b01      	cmp	r3, #1
 8003e4c:	d12e      	bne.n	8003eac <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003e4e:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	da2b      	bge.n	8003eac <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8003e54:	69bb      	ldr	r3, [r7, #24]
 8003e56:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8003e60:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003e64:	429a      	cmp	r2, r3
 8003e66:	d121      	bne.n	8003eac <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8003e68:	6879      	ldr	r1, [r7, #4]
 8003e6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e6c:	4613      	mov	r3, r2
 8003e6e:	00db      	lsls	r3, r3, #3
 8003e70:	4413      	add	r3, r2
 8003e72:	009b      	lsls	r3, r3, #2
 8003e74:	440b      	add	r3, r1
 8003e76:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8003e7a:	2201      	movs	r2, #1
 8003e7c:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8003e7e:	6a3b      	ldr	r3, [r7, #32]
 8003e80:	699b      	ldr	r3, [r3, #24]
 8003e82:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8003e86:	6a3b      	ldr	r3, [r7, #32]
 8003e88:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8003e8a:	6a3b      	ldr	r3, [r7, #32]
 8003e8c:	695b      	ldr	r3, [r3, #20]
 8003e8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d10a      	bne.n	8003eac <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8003e96:	69fb      	ldr	r3, [r7, #28]
 8003e98:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e9c:	685b      	ldr	r3, [r3, #4]
 8003e9e:	69fa      	ldr	r2, [r7, #28]
 8003ea0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003ea4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003ea8:	6053      	str	r3, [r2, #4]
            break;
 8003eaa:	e007      	b.n	8003ebc <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003eac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eae:	3301      	adds	r3, #1
 8003eb0:	627b      	str	r3, [r7, #36]	; 0x24
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	685b      	ldr	r3, [r3, #4]
 8003eb6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003eb8:	429a      	cmp	r2, r3
 8003eba:	d3b4      	bcc.n	8003e26 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	695a      	ldr	r2, [r3, #20]
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8003eca:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	4618      	mov	r0, r3
 8003ed2:	f005 f8e5 	bl	80090a0 <USB_ReadInterrupts>
 8003ed6:	4603      	mov	r3, r0
 8003ed8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003edc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ee0:	d10a      	bne.n	8003ef8 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003ee2:	6878      	ldr	r0, [r7, #4]
 8003ee4:	f007 fce4 	bl	800b8b0 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	695a      	ldr	r2, [r3, #20]
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003ef6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	4618      	mov	r0, r3
 8003efe:	f005 f8cf 	bl	80090a0 <USB_ReadInterrupts>
 8003f02:	4603      	mov	r3, r0
 8003f04:	f003 0304 	and.w	r3, r3, #4
 8003f08:	2b04      	cmp	r3, #4
 8003f0a:	d115      	bne.n	8003f38 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	685b      	ldr	r3, [r3, #4]
 8003f12:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003f14:	69bb      	ldr	r3, [r7, #24]
 8003f16:	f003 0304 	and.w	r3, r3, #4
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d002      	beq.n	8003f24 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003f1e:	6878      	ldr	r0, [r7, #4]
 8003f20:	f007 fcd4 	bl	800b8cc <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	6859      	ldr	r1, [r3, #4]
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	69ba      	ldr	r2, [r7, #24]
 8003f30:	430a      	orrs	r2, r1
 8003f32:	605a      	str	r2, [r3, #4]
 8003f34:	e000      	b.n	8003f38 <HAL_PCD_IRQHandler+0x938>
      return;
 8003f36:	bf00      	nop
    }
  }
}
 8003f38:	3734      	adds	r7, #52	; 0x34
 8003f3a:	46bd      	mov	sp, r7
 8003f3c:	bd90      	pop	{r4, r7, pc}

08003f3e <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003f3e:	b580      	push	{r7, lr}
 8003f40:	b082      	sub	sp, #8
 8003f42:	af00      	add	r7, sp, #0
 8003f44:	6078      	str	r0, [r7, #4]
 8003f46:	460b      	mov	r3, r1
 8003f48:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003f50:	2b01      	cmp	r3, #1
 8003f52:	d101      	bne.n	8003f58 <HAL_PCD_SetAddress+0x1a>
 8003f54:	2302      	movs	r3, #2
 8003f56:	e013      	b.n	8003f80 <HAL_PCD_SetAddress+0x42>
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	2201      	movs	r2, #1
 8003f5c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	78fa      	ldrb	r2, [r7, #3]
 8003f64:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	78fa      	ldrb	r2, [r7, #3]
 8003f6e:	4611      	mov	r1, r2
 8003f70:	4618      	mov	r0, r3
 8003f72:	f005 f82d 	bl	8008fd0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	2200      	movs	r2, #0
 8003f7a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003f7e:	2300      	movs	r3, #0
}
 8003f80:	4618      	mov	r0, r3
 8003f82:	3708      	adds	r7, #8
 8003f84:	46bd      	mov	sp, r7
 8003f86:	bd80      	pop	{r7, pc}

08003f88 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003f88:	b580      	push	{r7, lr}
 8003f8a:	b084      	sub	sp, #16
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	6078      	str	r0, [r7, #4]
 8003f90:	4608      	mov	r0, r1
 8003f92:	4611      	mov	r1, r2
 8003f94:	461a      	mov	r2, r3
 8003f96:	4603      	mov	r3, r0
 8003f98:	70fb      	strb	r3, [r7, #3]
 8003f9a:	460b      	mov	r3, r1
 8003f9c:	803b      	strh	r3, [r7, #0]
 8003f9e:	4613      	mov	r3, r2
 8003fa0:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003fa2:	2300      	movs	r3, #0
 8003fa4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003fa6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	da0f      	bge.n	8003fce <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003fae:	78fb      	ldrb	r3, [r7, #3]
 8003fb0:	f003 020f 	and.w	r2, r3, #15
 8003fb4:	4613      	mov	r3, r2
 8003fb6:	00db      	lsls	r3, r3, #3
 8003fb8:	4413      	add	r3, r2
 8003fba:	009b      	lsls	r3, r3, #2
 8003fbc:	3338      	adds	r3, #56	; 0x38
 8003fbe:	687a      	ldr	r2, [r7, #4]
 8003fc0:	4413      	add	r3, r2
 8003fc2:	3304      	adds	r3, #4
 8003fc4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	2201      	movs	r2, #1
 8003fca:	705a      	strb	r2, [r3, #1]
 8003fcc:	e00f      	b.n	8003fee <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003fce:	78fb      	ldrb	r3, [r7, #3]
 8003fd0:	f003 020f 	and.w	r2, r3, #15
 8003fd4:	4613      	mov	r3, r2
 8003fd6:	00db      	lsls	r3, r3, #3
 8003fd8:	4413      	add	r3, r2
 8003fda:	009b      	lsls	r3, r3, #2
 8003fdc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003fe0:	687a      	ldr	r2, [r7, #4]
 8003fe2:	4413      	add	r3, r2
 8003fe4:	3304      	adds	r3, #4
 8003fe6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	2200      	movs	r2, #0
 8003fec:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003fee:	78fb      	ldrb	r3, [r7, #3]
 8003ff0:	f003 030f 	and.w	r3, r3, #15
 8003ff4:	b2da      	uxtb	r2, r3
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003ffa:	883a      	ldrh	r2, [r7, #0]
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	78ba      	ldrb	r2, [r7, #2]
 8004004:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	785b      	ldrb	r3, [r3, #1]
 800400a:	2b00      	cmp	r3, #0
 800400c:	d004      	beq.n	8004018 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	781b      	ldrb	r3, [r3, #0]
 8004012:	b29a      	uxth	r2, r3
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8004018:	78bb      	ldrb	r3, [r7, #2]
 800401a:	2b02      	cmp	r3, #2
 800401c:	d102      	bne.n	8004024 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	2200      	movs	r2, #0
 8004022:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800402a:	2b01      	cmp	r3, #1
 800402c:	d101      	bne.n	8004032 <HAL_PCD_EP_Open+0xaa>
 800402e:	2302      	movs	r3, #2
 8004030:	e00e      	b.n	8004050 <HAL_PCD_EP_Open+0xc8>
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	2201      	movs	r2, #1
 8004036:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	68f9      	ldr	r1, [r7, #12]
 8004040:	4618      	mov	r0, r3
 8004042:	f004 f8ad 	bl	80081a0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	2200      	movs	r2, #0
 800404a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 800404e:	7afb      	ldrb	r3, [r7, #11]
}
 8004050:	4618      	mov	r0, r3
 8004052:	3710      	adds	r7, #16
 8004054:	46bd      	mov	sp, r7
 8004056:	bd80      	pop	{r7, pc}

08004058 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004058:	b580      	push	{r7, lr}
 800405a:	b084      	sub	sp, #16
 800405c:	af00      	add	r7, sp, #0
 800405e:	6078      	str	r0, [r7, #4]
 8004060:	460b      	mov	r3, r1
 8004062:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004064:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004068:	2b00      	cmp	r3, #0
 800406a:	da0f      	bge.n	800408c <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800406c:	78fb      	ldrb	r3, [r7, #3]
 800406e:	f003 020f 	and.w	r2, r3, #15
 8004072:	4613      	mov	r3, r2
 8004074:	00db      	lsls	r3, r3, #3
 8004076:	4413      	add	r3, r2
 8004078:	009b      	lsls	r3, r3, #2
 800407a:	3338      	adds	r3, #56	; 0x38
 800407c:	687a      	ldr	r2, [r7, #4]
 800407e:	4413      	add	r3, r2
 8004080:	3304      	adds	r3, #4
 8004082:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	2201      	movs	r2, #1
 8004088:	705a      	strb	r2, [r3, #1]
 800408a:	e00f      	b.n	80040ac <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800408c:	78fb      	ldrb	r3, [r7, #3]
 800408e:	f003 020f 	and.w	r2, r3, #15
 8004092:	4613      	mov	r3, r2
 8004094:	00db      	lsls	r3, r3, #3
 8004096:	4413      	add	r3, r2
 8004098:	009b      	lsls	r3, r3, #2
 800409a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800409e:	687a      	ldr	r2, [r7, #4]
 80040a0:	4413      	add	r3, r2
 80040a2:	3304      	adds	r3, #4
 80040a4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	2200      	movs	r2, #0
 80040aa:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80040ac:	78fb      	ldrb	r3, [r7, #3]
 80040ae:	f003 030f 	and.w	r3, r3, #15
 80040b2:	b2da      	uxtb	r2, r3
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80040be:	2b01      	cmp	r3, #1
 80040c0:	d101      	bne.n	80040c6 <HAL_PCD_EP_Close+0x6e>
 80040c2:	2302      	movs	r3, #2
 80040c4:	e00e      	b.n	80040e4 <HAL_PCD_EP_Close+0x8c>
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	2201      	movs	r2, #1
 80040ca:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	68f9      	ldr	r1, [r7, #12]
 80040d4:	4618      	mov	r0, r3
 80040d6:	f004 f8eb 	bl	80082b0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	2200      	movs	r2, #0
 80040de:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 80040e2:	2300      	movs	r3, #0
}
 80040e4:	4618      	mov	r0, r3
 80040e6:	3710      	adds	r7, #16
 80040e8:	46bd      	mov	sp, r7
 80040ea:	bd80      	pop	{r7, pc}

080040ec <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80040ec:	b580      	push	{r7, lr}
 80040ee:	b086      	sub	sp, #24
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	60f8      	str	r0, [r7, #12]
 80040f4:	607a      	str	r2, [r7, #4]
 80040f6:	603b      	str	r3, [r7, #0]
 80040f8:	460b      	mov	r3, r1
 80040fa:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80040fc:	7afb      	ldrb	r3, [r7, #11]
 80040fe:	f003 020f 	and.w	r2, r3, #15
 8004102:	4613      	mov	r3, r2
 8004104:	00db      	lsls	r3, r3, #3
 8004106:	4413      	add	r3, r2
 8004108:	009b      	lsls	r3, r3, #2
 800410a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800410e:	68fa      	ldr	r2, [r7, #12]
 8004110:	4413      	add	r3, r2
 8004112:	3304      	adds	r3, #4
 8004114:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004116:	697b      	ldr	r3, [r7, #20]
 8004118:	687a      	ldr	r2, [r7, #4]
 800411a:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 800411c:	697b      	ldr	r3, [r7, #20]
 800411e:	683a      	ldr	r2, [r7, #0]
 8004120:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8004122:	697b      	ldr	r3, [r7, #20]
 8004124:	2200      	movs	r2, #0
 8004126:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8004128:	697b      	ldr	r3, [r7, #20]
 800412a:	2200      	movs	r2, #0
 800412c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800412e:	7afb      	ldrb	r3, [r7, #11]
 8004130:	f003 030f 	and.w	r3, r3, #15
 8004134:	b2da      	uxtb	r2, r3
 8004136:	697b      	ldr	r3, [r7, #20]
 8004138:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	691b      	ldr	r3, [r3, #16]
 800413e:	2b01      	cmp	r3, #1
 8004140:	d102      	bne.n	8004148 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004142:	687a      	ldr	r2, [r7, #4]
 8004144:	697b      	ldr	r3, [r7, #20]
 8004146:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004148:	7afb      	ldrb	r3, [r7, #11]
 800414a:	f003 030f 	and.w	r3, r3, #15
 800414e:	2b00      	cmp	r3, #0
 8004150:	d109      	bne.n	8004166 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	6818      	ldr	r0, [r3, #0]
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	691b      	ldr	r3, [r3, #16]
 800415a:	b2db      	uxtb	r3, r3
 800415c:	461a      	mov	r2, r3
 800415e:	6979      	ldr	r1, [r7, #20]
 8004160:	f004 fbca 	bl	80088f8 <USB_EP0StartXfer>
 8004164:	e008      	b.n	8004178 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	6818      	ldr	r0, [r3, #0]
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	691b      	ldr	r3, [r3, #16]
 800416e:	b2db      	uxtb	r3, r3
 8004170:	461a      	mov	r2, r3
 8004172:	6979      	ldr	r1, [r7, #20]
 8004174:	f004 f978 	bl	8008468 <USB_EPStartXfer>
  }

  return HAL_OK;
 8004178:	2300      	movs	r3, #0
}
 800417a:	4618      	mov	r0, r3
 800417c:	3718      	adds	r7, #24
 800417e:	46bd      	mov	sp, r7
 8004180:	bd80      	pop	{r7, pc}

08004182 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004182:	b480      	push	{r7}
 8004184:	b083      	sub	sp, #12
 8004186:	af00      	add	r7, sp, #0
 8004188:	6078      	str	r0, [r7, #4]
 800418a:	460b      	mov	r3, r1
 800418c:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800418e:	78fb      	ldrb	r3, [r7, #3]
 8004190:	f003 020f 	and.w	r2, r3, #15
 8004194:	6879      	ldr	r1, [r7, #4]
 8004196:	4613      	mov	r3, r2
 8004198:	00db      	lsls	r3, r3, #3
 800419a:	4413      	add	r3, r2
 800419c:	009b      	lsls	r3, r3, #2
 800419e:	440b      	add	r3, r1
 80041a0:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 80041a4:	681b      	ldr	r3, [r3, #0]
}
 80041a6:	4618      	mov	r0, r3
 80041a8:	370c      	adds	r7, #12
 80041aa:	46bd      	mov	sp, r7
 80041ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b0:	4770      	bx	lr

080041b2 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80041b2:	b580      	push	{r7, lr}
 80041b4:	b086      	sub	sp, #24
 80041b6:	af00      	add	r7, sp, #0
 80041b8:	60f8      	str	r0, [r7, #12]
 80041ba:	607a      	str	r2, [r7, #4]
 80041bc:	603b      	str	r3, [r7, #0]
 80041be:	460b      	mov	r3, r1
 80041c0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80041c2:	7afb      	ldrb	r3, [r7, #11]
 80041c4:	f003 020f 	and.w	r2, r3, #15
 80041c8:	4613      	mov	r3, r2
 80041ca:	00db      	lsls	r3, r3, #3
 80041cc:	4413      	add	r3, r2
 80041ce:	009b      	lsls	r3, r3, #2
 80041d0:	3338      	adds	r3, #56	; 0x38
 80041d2:	68fa      	ldr	r2, [r7, #12]
 80041d4:	4413      	add	r3, r2
 80041d6:	3304      	adds	r3, #4
 80041d8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80041da:	697b      	ldr	r3, [r7, #20]
 80041dc:	687a      	ldr	r2, [r7, #4]
 80041de:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80041e0:	697b      	ldr	r3, [r7, #20]
 80041e2:	683a      	ldr	r2, [r7, #0]
 80041e4:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80041e6:	697b      	ldr	r3, [r7, #20]
 80041e8:	2200      	movs	r2, #0
 80041ea:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 80041ec:	697b      	ldr	r3, [r7, #20]
 80041ee:	2201      	movs	r2, #1
 80041f0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80041f2:	7afb      	ldrb	r3, [r7, #11]
 80041f4:	f003 030f 	and.w	r3, r3, #15
 80041f8:	b2da      	uxtb	r2, r3
 80041fa:	697b      	ldr	r3, [r7, #20]
 80041fc:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	691b      	ldr	r3, [r3, #16]
 8004202:	2b01      	cmp	r3, #1
 8004204:	d102      	bne.n	800420c <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004206:	687a      	ldr	r2, [r7, #4]
 8004208:	697b      	ldr	r3, [r7, #20]
 800420a:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800420c:	7afb      	ldrb	r3, [r7, #11]
 800420e:	f003 030f 	and.w	r3, r3, #15
 8004212:	2b00      	cmp	r3, #0
 8004214:	d109      	bne.n	800422a <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	6818      	ldr	r0, [r3, #0]
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	691b      	ldr	r3, [r3, #16]
 800421e:	b2db      	uxtb	r3, r3
 8004220:	461a      	mov	r2, r3
 8004222:	6979      	ldr	r1, [r7, #20]
 8004224:	f004 fb68 	bl	80088f8 <USB_EP0StartXfer>
 8004228:	e008      	b.n	800423c <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	6818      	ldr	r0, [r3, #0]
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	691b      	ldr	r3, [r3, #16]
 8004232:	b2db      	uxtb	r3, r3
 8004234:	461a      	mov	r2, r3
 8004236:	6979      	ldr	r1, [r7, #20]
 8004238:	f004 f916 	bl	8008468 <USB_EPStartXfer>
  }

  return HAL_OK;
 800423c:	2300      	movs	r3, #0
}
 800423e:	4618      	mov	r0, r3
 8004240:	3718      	adds	r7, #24
 8004242:	46bd      	mov	sp, r7
 8004244:	bd80      	pop	{r7, pc}

08004246 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004246:	b580      	push	{r7, lr}
 8004248:	b084      	sub	sp, #16
 800424a:	af00      	add	r7, sp, #0
 800424c:	6078      	str	r0, [r7, #4]
 800424e:	460b      	mov	r3, r1
 8004250:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004252:	78fb      	ldrb	r3, [r7, #3]
 8004254:	f003 020f 	and.w	r2, r3, #15
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	685b      	ldr	r3, [r3, #4]
 800425c:	429a      	cmp	r2, r3
 800425e:	d901      	bls.n	8004264 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8004260:	2301      	movs	r3, #1
 8004262:	e050      	b.n	8004306 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004264:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004268:	2b00      	cmp	r3, #0
 800426a:	da0f      	bge.n	800428c <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800426c:	78fb      	ldrb	r3, [r7, #3]
 800426e:	f003 020f 	and.w	r2, r3, #15
 8004272:	4613      	mov	r3, r2
 8004274:	00db      	lsls	r3, r3, #3
 8004276:	4413      	add	r3, r2
 8004278:	009b      	lsls	r3, r3, #2
 800427a:	3338      	adds	r3, #56	; 0x38
 800427c:	687a      	ldr	r2, [r7, #4]
 800427e:	4413      	add	r3, r2
 8004280:	3304      	adds	r3, #4
 8004282:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	2201      	movs	r2, #1
 8004288:	705a      	strb	r2, [r3, #1]
 800428a:	e00d      	b.n	80042a8 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800428c:	78fa      	ldrb	r2, [r7, #3]
 800428e:	4613      	mov	r3, r2
 8004290:	00db      	lsls	r3, r3, #3
 8004292:	4413      	add	r3, r2
 8004294:	009b      	lsls	r3, r3, #2
 8004296:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800429a:	687a      	ldr	r2, [r7, #4]
 800429c:	4413      	add	r3, r2
 800429e:	3304      	adds	r3, #4
 80042a0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	2200      	movs	r2, #0
 80042a6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	2201      	movs	r2, #1
 80042ac:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80042ae:	78fb      	ldrb	r3, [r7, #3]
 80042b0:	f003 030f 	and.w	r3, r3, #15
 80042b4:	b2da      	uxtb	r2, r3
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80042c0:	2b01      	cmp	r3, #1
 80042c2:	d101      	bne.n	80042c8 <HAL_PCD_EP_SetStall+0x82>
 80042c4:	2302      	movs	r3, #2
 80042c6:	e01e      	b.n	8004306 <HAL_PCD_EP_SetStall+0xc0>
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	2201      	movs	r2, #1
 80042cc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	68f9      	ldr	r1, [r7, #12]
 80042d6:	4618      	mov	r0, r3
 80042d8:	f004 fda6 	bl	8008e28 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80042dc:	78fb      	ldrb	r3, [r7, #3]
 80042de:	f003 030f 	and.w	r3, r3, #15
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d10a      	bne.n	80042fc <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	6818      	ldr	r0, [r3, #0]
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	691b      	ldr	r3, [r3, #16]
 80042ee:	b2d9      	uxtb	r1, r3
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80042f6:	461a      	mov	r2, r3
 80042f8:	f004 ff96 	bl	8009228 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	2200      	movs	r2, #0
 8004300:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8004304:	2300      	movs	r3, #0
}
 8004306:	4618      	mov	r0, r3
 8004308:	3710      	adds	r7, #16
 800430a:	46bd      	mov	sp, r7
 800430c:	bd80      	pop	{r7, pc}

0800430e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800430e:	b580      	push	{r7, lr}
 8004310:	b084      	sub	sp, #16
 8004312:	af00      	add	r7, sp, #0
 8004314:	6078      	str	r0, [r7, #4]
 8004316:	460b      	mov	r3, r1
 8004318:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800431a:	78fb      	ldrb	r3, [r7, #3]
 800431c:	f003 020f 	and.w	r2, r3, #15
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	685b      	ldr	r3, [r3, #4]
 8004324:	429a      	cmp	r2, r3
 8004326:	d901      	bls.n	800432c <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8004328:	2301      	movs	r3, #1
 800432a:	e042      	b.n	80043b2 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800432c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004330:	2b00      	cmp	r3, #0
 8004332:	da0f      	bge.n	8004354 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004334:	78fb      	ldrb	r3, [r7, #3]
 8004336:	f003 020f 	and.w	r2, r3, #15
 800433a:	4613      	mov	r3, r2
 800433c:	00db      	lsls	r3, r3, #3
 800433e:	4413      	add	r3, r2
 8004340:	009b      	lsls	r3, r3, #2
 8004342:	3338      	adds	r3, #56	; 0x38
 8004344:	687a      	ldr	r2, [r7, #4]
 8004346:	4413      	add	r3, r2
 8004348:	3304      	adds	r3, #4
 800434a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	2201      	movs	r2, #1
 8004350:	705a      	strb	r2, [r3, #1]
 8004352:	e00f      	b.n	8004374 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004354:	78fb      	ldrb	r3, [r7, #3]
 8004356:	f003 020f 	and.w	r2, r3, #15
 800435a:	4613      	mov	r3, r2
 800435c:	00db      	lsls	r3, r3, #3
 800435e:	4413      	add	r3, r2
 8004360:	009b      	lsls	r3, r3, #2
 8004362:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004366:	687a      	ldr	r2, [r7, #4]
 8004368:	4413      	add	r3, r2
 800436a:	3304      	adds	r3, #4
 800436c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	2200      	movs	r2, #0
 8004372:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	2200      	movs	r2, #0
 8004378:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800437a:	78fb      	ldrb	r3, [r7, #3]
 800437c:	f003 030f 	and.w	r3, r3, #15
 8004380:	b2da      	uxtb	r2, r3
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800438c:	2b01      	cmp	r3, #1
 800438e:	d101      	bne.n	8004394 <HAL_PCD_EP_ClrStall+0x86>
 8004390:	2302      	movs	r3, #2
 8004392:	e00e      	b.n	80043b2 <HAL_PCD_EP_ClrStall+0xa4>
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	2201      	movs	r2, #1
 8004398:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	68f9      	ldr	r1, [r7, #12]
 80043a2:	4618      	mov	r0, r3
 80043a4:	f004 fdae 	bl	8008f04 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	2200      	movs	r2, #0
 80043ac:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80043b0:	2300      	movs	r3, #0
}
 80043b2:	4618      	mov	r0, r3
 80043b4:	3710      	adds	r7, #16
 80043b6:	46bd      	mov	sp, r7
 80043b8:	bd80      	pop	{r7, pc}

080043ba <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80043ba:	b580      	push	{r7, lr}
 80043bc:	b084      	sub	sp, #16
 80043be:	af00      	add	r7, sp, #0
 80043c0:	6078      	str	r0, [r7, #4]
 80043c2:	460b      	mov	r3, r1
 80043c4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80043c6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	da0c      	bge.n	80043e8 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80043ce:	78fb      	ldrb	r3, [r7, #3]
 80043d0:	f003 020f 	and.w	r2, r3, #15
 80043d4:	4613      	mov	r3, r2
 80043d6:	00db      	lsls	r3, r3, #3
 80043d8:	4413      	add	r3, r2
 80043da:	009b      	lsls	r3, r3, #2
 80043dc:	3338      	adds	r3, #56	; 0x38
 80043de:	687a      	ldr	r2, [r7, #4]
 80043e0:	4413      	add	r3, r2
 80043e2:	3304      	adds	r3, #4
 80043e4:	60fb      	str	r3, [r7, #12]
 80043e6:	e00c      	b.n	8004402 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80043e8:	78fb      	ldrb	r3, [r7, #3]
 80043ea:	f003 020f 	and.w	r2, r3, #15
 80043ee:	4613      	mov	r3, r2
 80043f0:	00db      	lsls	r3, r3, #3
 80043f2:	4413      	add	r3, r2
 80043f4:	009b      	lsls	r3, r3, #2
 80043f6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80043fa:	687a      	ldr	r2, [r7, #4]
 80043fc:	4413      	add	r3, r2
 80043fe:	3304      	adds	r3, #4
 8004400:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	68f9      	ldr	r1, [r7, #12]
 8004408:	4618      	mov	r0, r3
 800440a:	f004 fbcd 	bl	8008ba8 <USB_EPStopXfer>
 800440e:	4603      	mov	r3, r0
 8004410:	72fb      	strb	r3, [r7, #11]

  return ret;
 8004412:	7afb      	ldrb	r3, [r7, #11]
}
 8004414:	4618      	mov	r0, r3
 8004416:	3710      	adds	r7, #16
 8004418:	46bd      	mov	sp, r7
 800441a:	bd80      	pop	{r7, pc}

0800441c <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800441c:	b580      	push	{r7, lr}
 800441e:	b08a      	sub	sp, #40	; 0x28
 8004420:	af02      	add	r7, sp, #8
 8004422:	6078      	str	r0, [r7, #4]
 8004424:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800442c:	697b      	ldr	r3, [r7, #20]
 800442e:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8004430:	683a      	ldr	r2, [r7, #0]
 8004432:	4613      	mov	r3, r2
 8004434:	00db      	lsls	r3, r3, #3
 8004436:	4413      	add	r3, r2
 8004438:	009b      	lsls	r3, r3, #2
 800443a:	3338      	adds	r3, #56	; 0x38
 800443c:	687a      	ldr	r2, [r7, #4]
 800443e:	4413      	add	r3, r2
 8004440:	3304      	adds	r3, #4
 8004442:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	6a1a      	ldr	r2, [r3, #32]
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	699b      	ldr	r3, [r3, #24]
 800444c:	429a      	cmp	r2, r3
 800444e:	d901      	bls.n	8004454 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8004450:	2301      	movs	r3, #1
 8004452:	e06c      	b.n	800452e <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	699a      	ldr	r2, [r3, #24]
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	6a1b      	ldr	r3, [r3, #32]
 800445c:	1ad3      	subs	r3, r2, r3
 800445e:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	68db      	ldr	r3, [r3, #12]
 8004464:	69fa      	ldr	r2, [r7, #28]
 8004466:	429a      	cmp	r2, r3
 8004468:	d902      	bls.n	8004470 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	68db      	ldr	r3, [r3, #12]
 800446e:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8004470:	69fb      	ldr	r3, [r7, #28]
 8004472:	3303      	adds	r3, #3
 8004474:	089b      	lsrs	r3, r3, #2
 8004476:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004478:	e02b      	b.n	80044d2 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	699a      	ldr	r2, [r3, #24]
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	6a1b      	ldr	r3, [r3, #32]
 8004482:	1ad3      	subs	r3, r2, r3
 8004484:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	68db      	ldr	r3, [r3, #12]
 800448a:	69fa      	ldr	r2, [r7, #28]
 800448c:	429a      	cmp	r2, r3
 800448e:	d902      	bls.n	8004496 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	68db      	ldr	r3, [r3, #12]
 8004494:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8004496:	69fb      	ldr	r3, [r7, #28]
 8004498:	3303      	adds	r3, #3
 800449a:	089b      	lsrs	r3, r3, #2
 800449c:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	6919      	ldr	r1, [r3, #16]
 80044a2:	683b      	ldr	r3, [r7, #0]
 80044a4:	b2da      	uxtb	r2, r3
 80044a6:	69fb      	ldr	r3, [r7, #28]
 80044a8:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80044ae:	b2db      	uxtb	r3, r3
 80044b0:	9300      	str	r3, [sp, #0]
 80044b2:	4603      	mov	r3, r0
 80044b4:	6978      	ldr	r0, [r7, #20]
 80044b6:	f004 fc21 	bl	8008cfc <USB_WritePacket>

    ep->xfer_buff  += len;
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	691a      	ldr	r2, [r3, #16]
 80044be:	69fb      	ldr	r3, [r7, #28]
 80044c0:	441a      	add	r2, r3
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	6a1a      	ldr	r2, [r3, #32]
 80044ca:	69fb      	ldr	r3, [r7, #28]
 80044cc:	441a      	add	r2, r3
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80044d2:	683b      	ldr	r3, [r7, #0]
 80044d4:	015a      	lsls	r2, r3, #5
 80044d6:	693b      	ldr	r3, [r7, #16]
 80044d8:	4413      	add	r3, r2
 80044da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80044de:	699b      	ldr	r3, [r3, #24]
 80044e0:	b29b      	uxth	r3, r3
 80044e2:	69ba      	ldr	r2, [r7, #24]
 80044e4:	429a      	cmp	r2, r3
 80044e6:	d809      	bhi.n	80044fc <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	6a1a      	ldr	r2, [r3, #32]
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80044f0:	429a      	cmp	r2, r3
 80044f2:	d203      	bcs.n	80044fc <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	699b      	ldr	r3, [r3, #24]
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d1be      	bne.n	800447a <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	699a      	ldr	r2, [r3, #24]
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	6a1b      	ldr	r3, [r3, #32]
 8004504:	429a      	cmp	r2, r3
 8004506:	d811      	bhi.n	800452c <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004508:	683b      	ldr	r3, [r7, #0]
 800450a:	f003 030f 	and.w	r3, r3, #15
 800450e:	2201      	movs	r2, #1
 8004510:	fa02 f303 	lsl.w	r3, r2, r3
 8004514:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004516:	693b      	ldr	r3, [r7, #16]
 8004518:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800451c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800451e:	68bb      	ldr	r3, [r7, #8]
 8004520:	43db      	mvns	r3, r3
 8004522:	6939      	ldr	r1, [r7, #16]
 8004524:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004528:	4013      	ands	r3, r2
 800452a:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800452c:	2300      	movs	r3, #0
}
 800452e:	4618      	mov	r0, r3
 8004530:	3720      	adds	r7, #32
 8004532:	46bd      	mov	sp, r7
 8004534:	bd80      	pop	{r7, pc}
	...

08004538 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004538:	b580      	push	{r7, lr}
 800453a:	b088      	sub	sp, #32
 800453c:	af00      	add	r7, sp, #0
 800453e:	6078      	str	r0, [r7, #4]
 8004540:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004548:	69fb      	ldr	r3, [r7, #28]
 800454a:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800454c:	69fb      	ldr	r3, [r7, #28]
 800454e:	333c      	adds	r3, #60	; 0x3c
 8004550:	3304      	adds	r3, #4
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004556:	683b      	ldr	r3, [r7, #0]
 8004558:	015a      	lsls	r2, r3, #5
 800455a:	69bb      	ldr	r3, [r7, #24]
 800455c:	4413      	add	r3, r2
 800455e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004562:	689b      	ldr	r3, [r3, #8]
 8004564:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	691b      	ldr	r3, [r3, #16]
 800456a:	2b01      	cmp	r3, #1
 800456c:	d17b      	bne.n	8004666 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800456e:	693b      	ldr	r3, [r7, #16]
 8004570:	f003 0308 	and.w	r3, r3, #8
 8004574:	2b00      	cmp	r3, #0
 8004576:	d015      	beq.n	80045a4 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004578:	697b      	ldr	r3, [r7, #20]
 800457a:	4a61      	ldr	r2, [pc, #388]	; (8004700 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800457c:	4293      	cmp	r3, r2
 800457e:	f240 80b9 	bls.w	80046f4 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004582:	693b      	ldr	r3, [r7, #16]
 8004584:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004588:	2b00      	cmp	r3, #0
 800458a:	f000 80b3 	beq.w	80046f4 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800458e:	683b      	ldr	r3, [r7, #0]
 8004590:	015a      	lsls	r2, r3, #5
 8004592:	69bb      	ldr	r3, [r7, #24]
 8004594:	4413      	add	r3, r2
 8004596:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800459a:	461a      	mov	r2, r3
 800459c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80045a0:	6093      	str	r3, [r2, #8]
 80045a2:	e0a7      	b.n	80046f4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80045a4:	693b      	ldr	r3, [r7, #16]
 80045a6:	f003 0320 	and.w	r3, r3, #32
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d009      	beq.n	80045c2 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80045ae:	683b      	ldr	r3, [r7, #0]
 80045b0:	015a      	lsls	r2, r3, #5
 80045b2:	69bb      	ldr	r3, [r7, #24]
 80045b4:	4413      	add	r3, r2
 80045b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045ba:	461a      	mov	r2, r3
 80045bc:	2320      	movs	r3, #32
 80045be:	6093      	str	r3, [r2, #8]
 80045c0:	e098      	b.n	80046f4 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80045c2:	693b      	ldr	r3, [r7, #16]
 80045c4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	f040 8093 	bne.w	80046f4 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80045ce:	697b      	ldr	r3, [r7, #20]
 80045d0:	4a4b      	ldr	r2, [pc, #300]	; (8004700 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80045d2:	4293      	cmp	r3, r2
 80045d4:	d90f      	bls.n	80045f6 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80045d6:	693b      	ldr	r3, [r7, #16]
 80045d8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d00a      	beq.n	80045f6 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80045e0:	683b      	ldr	r3, [r7, #0]
 80045e2:	015a      	lsls	r2, r3, #5
 80045e4:	69bb      	ldr	r3, [r7, #24]
 80045e6:	4413      	add	r3, r2
 80045e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045ec:	461a      	mov	r2, r3
 80045ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80045f2:	6093      	str	r3, [r2, #8]
 80045f4:	e07e      	b.n	80046f4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80045f6:	683a      	ldr	r2, [r7, #0]
 80045f8:	4613      	mov	r3, r2
 80045fa:	00db      	lsls	r3, r3, #3
 80045fc:	4413      	add	r3, r2
 80045fe:	009b      	lsls	r3, r3, #2
 8004600:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004604:	687a      	ldr	r2, [r7, #4]
 8004606:	4413      	add	r3, r2
 8004608:	3304      	adds	r3, #4
 800460a:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	69da      	ldr	r2, [r3, #28]
 8004610:	683b      	ldr	r3, [r7, #0]
 8004612:	0159      	lsls	r1, r3, #5
 8004614:	69bb      	ldr	r3, [r7, #24]
 8004616:	440b      	add	r3, r1
 8004618:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800461c:	691b      	ldr	r3, [r3, #16]
 800461e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004622:	1ad2      	subs	r2, r2, r3
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8004628:	683b      	ldr	r3, [r7, #0]
 800462a:	2b00      	cmp	r3, #0
 800462c:	d114      	bne.n	8004658 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	699b      	ldr	r3, [r3, #24]
 8004632:	2b00      	cmp	r3, #0
 8004634:	d109      	bne.n	800464a <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	6818      	ldr	r0, [r3, #0]
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004640:	461a      	mov	r2, r3
 8004642:	2101      	movs	r1, #1
 8004644:	f004 fdf0 	bl	8009228 <USB_EP0_OutStart>
 8004648:	e006      	b.n	8004658 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	691a      	ldr	r2, [r3, #16]
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	6a1b      	ldr	r3, [r3, #32]
 8004652:	441a      	add	r2, r3
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004658:	683b      	ldr	r3, [r7, #0]
 800465a:	b2db      	uxtb	r3, r3
 800465c:	4619      	mov	r1, r3
 800465e:	6878      	ldr	r0, [r7, #4]
 8004660:	f007 f862 	bl	800b728 <HAL_PCD_DataOutStageCallback>
 8004664:	e046      	b.n	80046f4 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8004666:	697b      	ldr	r3, [r7, #20]
 8004668:	4a26      	ldr	r2, [pc, #152]	; (8004704 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800466a:	4293      	cmp	r3, r2
 800466c:	d124      	bne.n	80046b8 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800466e:	693b      	ldr	r3, [r7, #16]
 8004670:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004674:	2b00      	cmp	r3, #0
 8004676:	d00a      	beq.n	800468e <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004678:	683b      	ldr	r3, [r7, #0]
 800467a:	015a      	lsls	r2, r3, #5
 800467c:	69bb      	ldr	r3, [r7, #24]
 800467e:	4413      	add	r3, r2
 8004680:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004684:	461a      	mov	r2, r3
 8004686:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800468a:	6093      	str	r3, [r2, #8]
 800468c:	e032      	b.n	80046f4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800468e:	693b      	ldr	r3, [r7, #16]
 8004690:	f003 0320 	and.w	r3, r3, #32
 8004694:	2b00      	cmp	r3, #0
 8004696:	d008      	beq.n	80046aa <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004698:	683b      	ldr	r3, [r7, #0]
 800469a:	015a      	lsls	r2, r3, #5
 800469c:	69bb      	ldr	r3, [r7, #24]
 800469e:	4413      	add	r3, r2
 80046a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046a4:	461a      	mov	r2, r3
 80046a6:	2320      	movs	r3, #32
 80046a8:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80046aa:	683b      	ldr	r3, [r7, #0]
 80046ac:	b2db      	uxtb	r3, r3
 80046ae:	4619      	mov	r1, r3
 80046b0:	6878      	ldr	r0, [r7, #4]
 80046b2:	f007 f839 	bl	800b728 <HAL_PCD_DataOutStageCallback>
 80046b6:	e01d      	b.n	80046f4 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80046b8:	683b      	ldr	r3, [r7, #0]
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d114      	bne.n	80046e8 <PCD_EP_OutXfrComplete_int+0x1b0>
 80046be:	6879      	ldr	r1, [r7, #4]
 80046c0:	683a      	ldr	r2, [r7, #0]
 80046c2:	4613      	mov	r3, r2
 80046c4:	00db      	lsls	r3, r3, #3
 80046c6:	4413      	add	r3, r2
 80046c8:	009b      	lsls	r3, r3, #2
 80046ca:	440b      	add	r3, r1
 80046cc:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d108      	bne.n	80046e8 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	6818      	ldr	r0, [r3, #0]
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80046e0:	461a      	mov	r2, r3
 80046e2:	2100      	movs	r1, #0
 80046e4:	f004 fda0 	bl	8009228 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80046e8:	683b      	ldr	r3, [r7, #0]
 80046ea:	b2db      	uxtb	r3, r3
 80046ec:	4619      	mov	r1, r3
 80046ee:	6878      	ldr	r0, [r7, #4]
 80046f0:	f007 f81a 	bl	800b728 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80046f4:	2300      	movs	r3, #0
}
 80046f6:	4618      	mov	r0, r3
 80046f8:	3720      	adds	r7, #32
 80046fa:	46bd      	mov	sp, r7
 80046fc:	bd80      	pop	{r7, pc}
 80046fe:	bf00      	nop
 8004700:	4f54300a 	.word	0x4f54300a
 8004704:	4f54310a 	.word	0x4f54310a

08004708 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004708:	b580      	push	{r7, lr}
 800470a:	b086      	sub	sp, #24
 800470c:	af00      	add	r7, sp, #0
 800470e:	6078      	str	r0, [r7, #4]
 8004710:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004718:	697b      	ldr	r3, [r7, #20]
 800471a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800471c:	697b      	ldr	r3, [r7, #20]
 800471e:	333c      	adds	r3, #60	; 0x3c
 8004720:	3304      	adds	r3, #4
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004726:	683b      	ldr	r3, [r7, #0]
 8004728:	015a      	lsls	r2, r3, #5
 800472a:	693b      	ldr	r3, [r7, #16]
 800472c:	4413      	add	r3, r2
 800472e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004732:	689b      	ldr	r3, [r3, #8]
 8004734:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	4a15      	ldr	r2, [pc, #84]	; (8004790 <PCD_EP_OutSetupPacket_int+0x88>)
 800473a:	4293      	cmp	r3, r2
 800473c:	d90e      	bls.n	800475c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800473e:	68bb      	ldr	r3, [r7, #8]
 8004740:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004744:	2b00      	cmp	r3, #0
 8004746:	d009      	beq.n	800475c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004748:	683b      	ldr	r3, [r7, #0]
 800474a:	015a      	lsls	r2, r3, #5
 800474c:	693b      	ldr	r3, [r7, #16]
 800474e:	4413      	add	r3, r2
 8004750:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004754:	461a      	mov	r2, r3
 8004756:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800475a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800475c:	6878      	ldr	r0, [r7, #4]
 800475e:	f006 ffd1 	bl	800b704 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	4a0a      	ldr	r2, [pc, #40]	; (8004790 <PCD_EP_OutSetupPacket_int+0x88>)
 8004766:	4293      	cmp	r3, r2
 8004768:	d90c      	bls.n	8004784 <PCD_EP_OutSetupPacket_int+0x7c>
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	691b      	ldr	r3, [r3, #16]
 800476e:	2b01      	cmp	r3, #1
 8004770:	d108      	bne.n	8004784 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	6818      	ldr	r0, [r3, #0]
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800477c:	461a      	mov	r2, r3
 800477e:	2101      	movs	r1, #1
 8004780:	f004 fd52 	bl	8009228 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8004784:	2300      	movs	r3, #0
}
 8004786:	4618      	mov	r0, r3
 8004788:	3718      	adds	r7, #24
 800478a:	46bd      	mov	sp, r7
 800478c:	bd80      	pop	{r7, pc}
 800478e:	bf00      	nop
 8004790:	4f54300a 	.word	0x4f54300a

08004794 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8004794:	b480      	push	{r7}
 8004796:	b085      	sub	sp, #20
 8004798:	af00      	add	r7, sp, #0
 800479a:	6078      	str	r0, [r7, #4]
 800479c:	460b      	mov	r3, r1
 800479e:	70fb      	strb	r3, [r7, #3]
 80047a0:	4613      	mov	r3, r2
 80047a2:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047aa:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80047ac:	78fb      	ldrb	r3, [r7, #3]
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d107      	bne.n	80047c2 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80047b2:	883b      	ldrh	r3, [r7, #0]
 80047b4:	0419      	lsls	r1, r3, #16
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	68ba      	ldr	r2, [r7, #8]
 80047bc:	430a      	orrs	r2, r1
 80047be:	629a      	str	r2, [r3, #40]	; 0x28
 80047c0:	e028      	b.n	8004814 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047c8:	0c1b      	lsrs	r3, r3, #16
 80047ca:	68ba      	ldr	r2, [r7, #8]
 80047cc:	4413      	add	r3, r2
 80047ce:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80047d0:	2300      	movs	r3, #0
 80047d2:	73fb      	strb	r3, [r7, #15]
 80047d4:	e00d      	b.n	80047f2 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681a      	ldr	r2, [r3, #0]
 80047da:	7bfb      	ldrb	r3, [r7, #15]
 80047dc:	3340      	adds	r3, #64	; 0x40
 80047de:	009b      	lsls	r3, r3, #2
 80047e0:	4413      	add	r3, r2
 80047e2:	685b      	ldr	r3, [r3, #4]
 80047e4:	0c1b      	lsrs	r3, r3, #16
 80047e6:	68ba      	ldr	r2, [r7, #8]
 80047e8:	4413      	add	r3, r2
 80047ea:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80047ec:	7bfb      	ldrb	r3, [r7, #15]
 80047ee:	3301      	adds	r3, #1
 80047f0:	73fb      	strb	r3, [r7, #15]
 80047f2:	7bfa      	ldrb	r2, [r7, #15]
 80047f4:	78fb      	ldrb	r3, [r7, #3]
 80047f6:	3b01      	subs	r3, #1
 80047f8:	429a      	cmp	r2, r3
 80047fa:	d3ec      	bcc.n	80047d6 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80047fc:	883b      	ldrh	r3, [r7, #0]
 80047fe:	0418      	lsls	r0, r3, #16
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	6819      	ldr	r1, [r3, #0]
 8004804:	78fb      	ldrb	r3, [r7, #3]
 8004806:	3b01      	subs	r3, #1
 8004808:	68ba      	ldr	r2, [r7, #8]
 800480a:	4302      	orrs	r2, r0
 800480c:	3340      	adds	r3, #64	; 0x40
 800480e:	009b      	lsls	r3, r3, #2
 8004810:	440b      	add	r3, r1
 8004812:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8004814:	2300      	movs	r3, #0
}
 8004816:	4618      	mov	r0, r3
 8004818:	3714      	adds	r7, #20
 800481a:	46bd      	mov	sp, r7
 800481c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004820:	4770      	bx	lr

08004822 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8004822:	b480      	push	{r7}
 8004824:	b083      	sub	sp, #12
 8004826:	af00      	add	r7, sp, #0
 8004828:	6078      	str	r0, [r7, #4]
 800482a:	460b      	mov	r3, r1
 800482c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	887a      	ldrh	r2, [r7, #2]
 8004834:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8004836:	2300      	movs	r3, #0
}
 8004838:	4618      	mov	r0, r3
 800483a:	370c      	adds	r7, #12
 800483c:	46bd      	mov	sp, r7
 800483e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004842:	4770      	bx	lr

08004844 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8004844:	b480      	push	{r7}
 8004846:	b083      	sub	sp, #12
 8004848:	af00      	add	r7, sp, #0
 800484a:	6078      	str	r0, [r7, #4]
 800484c:	460b      	mov	r3, r1
 800484e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8004850:	bf00      	nop
 8004852:	370c      	adds	r7, #12
 8004854:	46bd      	mov	sp, r7
 8004856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800485a:	4770      	bx	lr

0800485c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800485c:	b580      	push	{r7, lr}
 800485e:	b086      	sub	sp, #24
 8004860:	af00      	add	r7, sp, #0
 8004862:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	2b00      	cmp	r3, #0
 8004868:	d101      	bne.n	800486e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800486a:	2301      	movs	r3, #1
 800486c:	e267      	b.n	8004d3e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f003 0301 	and.w	r3, r3, #1
 8004876:	2b00      	cmp	r3, #0
 8004878:	d075      	beq.n	8004966 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800487a:	4b88      	ldr	r3, [pc, #544]	; (8004a9c <HAL_RCC_OscConfig+0x240>)
 800487c:	689b      	ldr	r3, [r3, #8]
 800487e:	f003 030c 	and.w	r3, r3, #12
 8004882:	2b04      	cmp	r3, #4
 8004884:	d00c      	beq.n	80048a0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004886:	4b85      	ldr	r3, [pc, #532]	; (8004a9c <HAL_RCC_OscConfig+0x240>)
 8004888:	689b      	ldr	r3, [r3, #8]
 800488a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800488e:	2b08      	cmp	r3, #8
 8004890:	d112      	bne.n	80048b8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004892:	4b82      	ldr	r3, [pc, #520]	; (8004a9c <HAL_RCC_OscConfig+0x240>)
 8004894:	685b      	ldr	r3, [r3, #4]
 8004896:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800489a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800489e:	d10b      	bne.n	80048b8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80048a0:	4b7e      	ldr	r3, [pc, #504]	; (8004a9c <HAL_RCC_OscConfig+0x240>)
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d05b      	beq.n	8004964 <HAL_RCC_OscConfig+0x108>
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	685b      	ldr	r3, [r3, #4]
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d157      	bne.n	8004964 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80048b4:	2301      	movs	r3, #1
 80048b6:	e242      	b.n	8004d3e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	685b      	ldr	r3, [r3, #4]
 80048bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80048c0:	d106      	bne.n	80048d0 <HAL_RCC_OscConfig+0x74>
 80048c2:	4b76      	ldr	r3, [pc, #472]	; (8004a9c <HAL_RCC_OscConfig+0x240>)
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	4a75      	ldr	r2, [pc, #468]	; (8004a9c <HAL_RCC_OscConfig+0x240>)
 80048c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80048cc:	6013      	str	r3, [r2, #0]
 80048ce:	e01d      	b.n	800490c <HAL_RCC_OscConfig+0xb0>
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	685b      	ldr	r3, [r3, #4]
 80048d4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80048d8:	d10c      	bne.n	80048f4 <HAL_RCC_OscConfig+0x98>
 80048da:	4b70      	ldr	r3, [pc, #448]	; (8004a9c <HAL_RCC_OscConfig+0x240>)
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	4a6f      	ldr	r2, [pc, #444]	; (8004a9c <HAL_RCC_OscConfig+0x240>)
 80048e0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80048e4:	6013      	str	r3, [r2, #0]
 80048e6:	4b6d      	ldr	r3, [pc, #436]	; (8004a9c <HAL_RCC_OscConfig+0x240>)
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	4a6c      	ldr	r2, [pc, #432]	; (8004a9c <HAL_RCC_OscConfig+0x240>)
 80048ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80048f0:	6013      	str	r3, [r2, #0]
 80048f2:	e00b      	b.n	800490c <HAL_RCC_OscConfig+0xb0>
 80048f4:	4b69      	ldr	r3, [pc, #420]	; (8004a9c <HAL_RCC_OscConfig+0x240>)
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	4a68      	ldr	r2, [pc, #416]	; (8004a9c <HAL_RCC_OscConfig+0x240>)
 80048fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80048fe:	6013      	str	r3, [r2, #0]
 8004900:	4b66      	ldr	r3, [pc, #408]	; (8004a9c <HAL_RCC_OscConfig+0x240>)
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	4a65      	ldr	r2, [pc, #404]	; (8004a9c <HAL_RCC_OscConfig+0x240>)
 8004906:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800490a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	685b      	ldr	r3, [r3, #4]
 8004910:	2b00      	cmp	r3, #0
 8004912:	d013      	beq.n	800493c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004914:	f7fd fe12 	bl	800253c <HAL_GetTick>
 8004918:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800491a:	e008      	b.n	800492e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800491c:	f7fd fe0e 	bl	800253c <HAL_GetTick>
 8004920:	4602      	mov	r2, r0
 8004922:	693b      	ldr	r3, [r7, #16]
 8004924:	1ad3      	subs	r3, r2, r3
 8004926:	2b64      	cmp	r3, #100	; 0x64
 8004928:	d901      	bls.n	800492e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800492a:	2303      	movs	r3, #3
 800492c:	e207      	b.n	8004d3e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800492e:	4b5b      	ldr	r3, [pc, #364]	; (8004a9c <HAL_RCC_OscConfig+0x240>)
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004936:	2b00      	cmp	r3, #0
 8004938:	d0f0      	beq.n	800491c <HAL_RCC_OscConfig+0xc0>
 800493a:	e014      	b.n	8004966 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800493c:	f7fd fdfe 	bl	800253c <HAL_GetTick>
 8004940:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004942:	e008      	b.n	8004956 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004944:	f7fd fdfa 	bl	800253c <HAL_GetTick>
 8004948:	4602      	mov	r2, r0
 800494a:	693b      	ldr	r3, [r7, #16]
 800494c:	1ad3      	subs	r3, r2, r3
 800494e:	2b64      	cmp	r3, #100	; 0x64
 8004950:	d901      	bls.n	8004956 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004952:	2303      	movs	r3, #3
 8004954:	e1f3      	b.n	8004d3e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004956:	4b51      	ldr	r3, [pc, #324]	; (8004a9c <HAL_RCC_OscConfig+0x240>)
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800495e:	2b00      	cmp	r3, #0
 8004960:	d1f0      	bne.n	8004944 <HAL_RCC_OscConfig+0xe8>
 8004962:	e000      	b.n	8004966 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004964:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	f003 0302 	and.w	r3, r3, #2
 800496e:	2b00      	cmp	r3, #0
 8004970:	d063      	beq.n	8004a3a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004972:	4b4a      	ldr	r3, [pc, #296]	; (8004a9c <HAL_RCC_OscConfig+0x240>)
 8004974:	689b      	ldr	r3, [r3, #8]
 8004976:	f003 030c 	and.w	r3, r3, #12
 800497a:	2b00      	cmp	r3, #0
 800497c:	d00b      	beq.n	8004996 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800497e:	4b47      	ldr	r3, [pc, #284]	; (8004a9c <HAL_RCC_OscConfig+0x240>)
 8004980:	689b      	ldr	r3, [r3, #8]
 8004982:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004986:	2b08      	cmp	r3, #8
 8004988:	d11c      	bne.n	80049c4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800498a:	4b44      	ldr	r3, [pc, #272]	; (8004a9c <HAL_RCC_OscConfig+0x240>)
 800498c:	685b      	ldr	r3, [r3, #4]
 800498e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004992:	2b00      	cmp	r3, #0
 8004994:	d116      	bne.n	80049c4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004996:	4b41      	ldr	r3, [pc, #260]	; (8004a9c <HAL_RCC_OscConfig+0x240>)
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f003 0302 	and.w	r3, r3, #2
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d005      	beq.n	80049ae <HAL_RCC_OscConfig+0x152>
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	68db      	ldr	r3, [r3, #12]
 80049a6:	2b01      	cmp	r3, #1
 80049a8:	d001      	beq.n	80049ae <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80049aa:	2301      	movs	r3, #1
 80049ac:	e1c7      	b.n	8004d3e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80049ae:	4b3b      	ldr	r3, [pc, #236]	; (8004a9c <HAL_RCC_OscConfig+0x240>)
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	691b      	ldr	r3, [r3, #16]
 80049ba:	00db      	lsls	r3, r3, #3
 80049bc:	4937      	ldr	r1, [pc, #220]	; (8004a9c <HAL_RCC_OscConfig+0x240>)
 80049be:	4313      	orrs	r3, r2
 80049c0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80049c2:	e03a      	b.n	8004a3a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	68db      	ldr	r3, [r3, #12]
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d020      	beq.n	8004a0e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80049cc:	4b34      	ldr	r3, [pc, #208]	; (8004aa0 <HAL_RCC_OscConfig+0x244>)
 80049ce:	2201      	movs	r2, #1
 80049d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049d2:	f7fd fdb3 	bl	800253c <HAL_GetTick>
 80049d6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80049d8:	e008      	b.n	80049ec <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80049da:	f7fd fdaf 	bl	800253c <HAL_GetTick>
 80049de:	4602      	mov	r2, r0
 80049e0:	693b      	ldr	r3, [r7, #16]
 80049e2:	1ad3      	subs	r3, r2, r3
 80049e4:	2b02      	cmp	r3, #2
 80049e6:	d901      	bls.n	80049ec <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80049e8:	2303      	movs	r3, #3
 80049ea:	e1a8      	b.n	8004d3e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80049ec:	4b2b      	ldr	r3, [pc, #172]	; (8004a9c <HAL_RCC_OscConfig+0x240>)
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	f003 0302 	and.w	r3, r3, #2
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d0f0      	beq.n	80049da <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80049f8:	4b28      	ldr	r3, [pc, #160]	; (8004a9c <HAL_RCC_OscConfig+0x240>)
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	691b      	ldr	r3, [r3, #16]
 8004a04:	00db      	lsls	r3, r3, #3
 8004a06:	4925      	ldr	r1, [pc, #148]	; (8004a9c <HAL_RCC_OscConfig+0x240>)
 8004a08:	4313      	orrs	r3, r2
 8004a0a:	600b      	str	r3, [r1, #0]
 8004a0c:	e015      	b.n	8004a3a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004a0e:	4b24      	ldr	r3, [pc, #144]	; (8004aa0 <HAL_RCC_OscConfig+0x244>)
 8004a10:	2200      	movs	r2, #0
 8004a12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a14:	f7fd fd92 	bl	800253c <HAL_GetTick>
 8004a18:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004a1a:	e008      	b.n	8004a2e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004a1c:	f7fd fd8e 	bl	800253c <HAL_GetTick>
 8004a20:	4602      	mov	r2, r0
 8004a22:	693b      	ldr	r3, [r7, #16]
 8004a24:	1ad3      	subs	r3, r2, r3
 8004a26:	2b02      	cmp	r3, #2
 8004a28:	d901      	bls.n	8004a2e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004a2a:	2303      	movs	r3, #3
 8004a2c:	e187      	b.n	8004d3e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004a2e:	4b1b      	ldr	r3, [pc, #108]	; (8004a9c <HAL_RCC_OscConfig+0x240>)
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	f003 0302 	and.w	r3, r3, #2
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d1f0      	bne.n	8004a1c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	f003 0308 	and.w	r3, r3, #8
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d036      	beq.n	8004ab4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	695b      	ldr	r3, [r3, #20]
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d016      	beq.n	8004a7c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004a4e:	4b15      	ldr	r3, [pc, #84]	; (8004aa4 <HAL_RCC_OscConfig+0x248>)
 8004a50:	2201      	movs	r2, #1
 8004a52:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a54:	f7fd fd72 	bl	800253c <HAL_GetTick>
 8004a58:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004a5a:	e008      	b.n	8004a6e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004a5c:	f7fd fd6e 	bl	800253c <HAL_GetTick>
 8004a60:	4602      	mov	r2, r0
 8004a62:	693b      	ldr	r3, [r7, #16]
 8004a64:	1ad3      	subs	r3, r2, r3
 8004a66:	2b02      	cmp	r3, #2
 8004a68:	d901      	bls.n	8004a6e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004a6a:	2303      	movs	r3, #3
 8004a6c:	e167      	b.n	8004d3e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004a6e:	4b0b      	ldr	r3, [pc, #44]	; (8004a9c <HAL_RCC_OscConfig+0x240>)
 8004a70:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a72:	f003 0302 	and.w	r3, r3, #2
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d0f0      	beq.n	8004a5c <HAL_RCC_OscConfig+0x200>
 8004a7a:	e01b      	b.n	8004ab4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004a7c:	4b09      	ldr	r3, [pc, #36]	; (8004aa4 <HAL_RCC_OscConfig+0x248>)
 8004a7e:	2200      	movs	r2, #0
 8004a80:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004a82:	f7fd fd5b 	bl	800253c <HAL_GetTick>
 8004a86:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004a88:	e00e      	b.n	8004aa8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004a8a:	f7fd fd57 	bl	800253c <HAL_GetTick>
 8004a8e:	4602      	mov	r2, r0
 8004a90:	693b      	ldr	r3, [r7, #16]
 8004a92:	1ad3      	subs	r3, r2, r3
 8004a94:	2b02      	cmp	r3, #2
 8004a96:	d907      	bls.n	8004aa8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004a98:	2303      	movs	r3, #3
 8004a9a:	e150      	b.n	8004d3e <HAL_RCC_OscConfig+0x4e2>
 8004a9c:	40023800 	.word	0x40023800
 8004aa0:	42470000 	.word	0x42470000
 8004aa4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004aa8:	4b88      	ldr	r3, [pc, #544]	; (8004ccc <HAL_RCC_OscConfig+0x470>)
 8004aaa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004aac:	f003 0302 	and.w	r3, r3, #2
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d1ea      	bne.n	8004a8a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	f003 0304 	and.w	r3, r3, #4
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	f000 8097 	beq.w	8004bf0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004ac2:	2300      	movs	r3, #0
 8004ac4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004ac6:	4b81      	ldr	r3, [pc, #516]	; (8004ccc <HAL_RCC_OscConfig+0x470>)
 8004ac8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d10f      	bne.n	8004af2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004ad2:	2300      	movs	r3, #0
 8004ad4:	60bb      	str	r3, [r7, #8]
 8004ad6:	4b7d      	ldr	r3, [pc, #500]	; (8004ccc <HAL_RCC_OscConfig+0x470>)
 8004ad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ada:	4a7c      	ldr	r2, [pc, #496]	; (8004ccc <HAL_RCC_OscConfig+0x470>)
 8004adc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ae0:	6413      	str	r3, [r2, #64]	; 0x40
 8004ae2:	4b7a      	ldr	r3, [pc, #488]	; (8004ccc <HAL_RCC_OscConfig+0x470>)
 8004ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ae6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004aea:	60bb      	str	r3, [r7, #8]
 8004aec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004aee:	2301      	movs	r3, #1
 8004af0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004af2:	4b77      	ldr	r3, [pc, #476]	; (8004cd0 <HAL_RCC_OscConfig+0x474>)
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d118      	bne.n	8004b30 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004afe:	4b74      	ldr	r3, [pc, #464]	; (8004cd0 <HAL_RCC_OscConfig+0x474>)
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	4a73      	ldr	r2, [pc, #460]	; (8004cd0 <HAL_RCC_OscConfig+0x474>)
 8004b04:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b08:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004b0a:	f7fd fd17 	bl	800253c <HAL_GetTick>
 8004b0e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b10:	e008      	b.n	8004b24 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004b12:	f7fd fd13 	bl	800253c <HAL_GetTick>
 8004b16:	4602      	mov	r2, r0
 8004b18:	693b      	ldr	r3, [r7, #16]
 8004b1a:	1ad3      	subs	r3, r2, r3
 8004b1c:	2b02      	cmp	r3, #2
 8004b1e:	d901      	bls.n	8004b24 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004b20:	2303      	movs	r3, #3
 8004b22:	e10c      	b.n	8004d3e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b24:	4b6a      	ldr	r3, [pc, #424]	; (8004cd0 <HAL_RCC_OscConfig+0x474>)
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d0f0      	beq.n	8004b12 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	689b      	ldr	r3, [r3, #8]
 8004b34:	2b01      	cmp	r3, #1
 8004b36:	d106      	bne.n	8004b46 <HAL_RCC_OscConfig+0x2ea>
 8004b38:	4b64      	ldr	r3, [pc, #400]	; (8004ccc <HAL_RCC_OscConfig+0x470>)
 8004b3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b3c:	4a63      	ldr	r2, [pc, #396]	; (8004ccc <HAL_RCC_OscConfig+0x470>)
 8004b3e:	f043 0301 	orr.w	r3, r3, #1
 8004b42:	6713      	str	r3, [r2, #112]	; 0x70
 8004b44:	e01c      	b.n	8004b80 <HAL_RCC_OscConfig+0x324>
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	689b      	ldr	r3, [r3, #8]
 8004b4a:	2b05      	cmp	r3, #5
 8004b4c:	d10c      	bne.n	8004b68 <HAL_RCC_OscConfig+0x30c>
 8004b4e:	4b5f      	ldr	r3, [pc, #380]	; (8004ccc <HAL_RCC_OscConfig+0x470>)
 8004b50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b52:	4a5e      	ldr	r2, [pc, #376]	; (8004ccc <HAL_RCC_OscConfig+0x470>)
 8004b54:	f043 0304 	orr.w	r3, r3, #4
 8004b58:	6713      	str	r3, [r2, #112]	; 0x70
 8004b5a:	4b5c      	ldr	r3, [pc, #368]	; (8004ccc <HAL_RCC_OscConfig+0x470>)
 8004b5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b5e:	4a5b      	ldr	r2, [pc, #364]	; (8004ccc <HAL_RCC_OscConfig+0x470>)
 8004b60:	f043 0301 	orr.w	r3, r3, #1
 8004b64:	6713      	str	r3, [r2, #112]	; 0x70
 8004b66:	e00b      	b.n	8004b80 <HAL_RCC_OscConfig+0x324>
 8004b68:	4b58      	ldr	r3, [pc, #352]	; (8004ccc <HAL_RCC_OscConfig+0x470>)
 8004b6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b6c:	4a57      	ldr	r2, [pc, #348]	; (8004ccc <HAL_RCC_OscConfig+0x470>)
 8004b6e:	f023 0301 	bic.w	r3, r3, #1
 8004b72:	6713      	str	r3, [r2, #112]	; 0x70
 8004b74:	4b55      	ldr	r3, [pc, #340]	; (8004ccc <HAL_RCC_OscConfig+0x470>)
 8004b76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b78:	4a54      	ldr	r2, [pc, #336]	; (8004ccc <HAL_RCC_OscConfig+0x470>)
 8004b7a:	f023 0304 	bic.w	r3, r3, #4
 8004b7e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	689b      	ldr	r3, [r3, #8]
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d015      	beq.n	8004bb4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b88:	f7fd fcd8 	bl	800253c <HAL_GetTick>
 8004b8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b8e:	e00a      	b.n	8004ba6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004b90:	f7fd fcd4 	bl	800253c <HAL_GetTick>
 8004b94:	4602      	mov	r2, r0
 8004b96:	693b      	ldr	r3, [r7, #16]
 8004b98:	1ad3      	subs	r3, r2, r3
 8004b9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b9e:	4293      	cmp	r3, r2
 8004ba0:	d901      	bls.n	8004ba6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004ba2:	2303      	movs	r3, #3
 8004ba4:	e0cb      	b.n	8004d3e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ba6:	4b49      	ldr	r3, [pc, #292]	; (8004ccc <HAL_RCC_OscConfig+0x470>)
 8004ba8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004baa:	f003 0302 	and.w	r3, r3, #2
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d0ee      	beq.n	8004b90 <HAL_RCC_OscConfig+0x334>
 8004bb2:	e014      	b.n	8004bde <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004bb4:	f7fd fcc2 	bl	800253c <HAL_GetTick>
 8004bb8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004bba:	e00a      	b.n	8004bd2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004bbc:	f7fd fcbe 	bl	800253c <HAL_GetTick>
 8004bc0:	4602      	mov	r2, r0
 8004bc2:	693b      	ldr	r3, [r7, #16]
 8004bc4:	1ad3      	subs	r3, r2, r3
 8004bc6:	f241 3288 	movw	r2, #5000	; 0x1388
 8004bca:	4293      	cmp	r3, r2
 8004bcc:	d901      	bls.n	8004bd2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004bce:	2303      	movs	r3, #3
 8004bd0:	e0b5      	b.n	8004d3e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004bd2:	4b3e      	ldr	r3, [pc, #248]	; (8004ccc <HAL_RCC_OscConfig+0x470>)
 8004bd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bd6:	f003 0302 	and.w	r3, r3, #2
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d1ee      	bne.n	8004bbc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004bde:	7dfb      	ldrb	r3, [r7, #23]
 8004be0:	2b01      	cmp	r3, #1
 8004be2:	d105      	bne.n	8004bf0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004be4:	4b39      	ldr	r3, [pc, #228]	; (8004ccc <HAL_RCC_OscConfig+0x470>)
 8004be6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004be8:	4a38      	ldr	r2, [pc, #224]	; (8004ccc <HAL_RCC_OscConfig+0x470>)
 8004bea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004bee:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	699b      	ldr	r3, [r3, #24]
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	f000 80a1 	beq.w	8004d3c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004bfa:	4b34      	ldr	r3, [pc, #208]	; (8004ccc <HAL_RCC_OscConfig+0x470>)
 8004bfc:	689b      	ldr	r3, [r3, #8]
 8004bfe:	f003 030c 	and.w	r3, r3, #12
 8004c02:	2b08      	cmp	r3, #8
 8004c04:	d05c      	beq.n	8004cc0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	699b      	ldr	r3, [r3, #24]
 8004c0a:	2b02      	cmp	r3, #2
 8004c0c:	d141      	bne.n	8004c92 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c0e:	4b31      	ldr	r3, [pc, #196]	; (8004cd4 <HAL_RCC_OscConfig+0x478>)
 8004c10:	2200      	movs	r2, #0
 8004c12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c14:	f7fd fc92 	bl	800253c <HAL_GetTick>
 8004c18:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c1a:	e008      	b.n	8004c2e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004c1c:	f7fd fc8e 	bl	800253c <HAL_GetTick>
 8004c20:	4602      	mov	r2, r0
 8004c22:	693b      	ldr	r3, [r7, #16]
 8004c24:	1ad3      	subs	r3, r2, r3
 8004c26:	2b02      	cmp	r3, #2
 8004c28:	d901      	bls.n	8004c2e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004c2a:	2303      	movs	r3, #3
 8004c2c:	e087      	b.n	8004d3e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c2e:	4b27      	ldr	r3, [pc, #156]	; (8004ccc <HAL_RCC_OscConfig+0x470>)
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d1f0      	bne.n	8004c1c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	69da      	ldr	r2, [r3, #28]
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	6a1b      	ldr	r3, [r3, #32]
 8004c42:	431a      	orrs	r2, r3
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c48:	019b      	lsls	r3, r3, #6
 8004c4a:	431a      	orrs	r2, r3
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c50:	085b      	lsrs	r3, r3, #1
 8004c52:	3b01      	subs	r3, #1
 8004c54:	041b      	lsls	r3, r3, #16
 8004c56:	431a      	orrs	r2, r3
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c5c:	061b      	lsls	r3, r3, #24
 8004c5e:	491b      	ldr	r1, [pc, #108]	; (8004ccc <HAL_RCC_OscConfig+0x470>)
 8004c60:	4313      	orrs	r3, r2
 8004c62:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004c64:	4b1b      	ldr	r3, [pc, #108]	; (8004cd4 <HAL_RCC_OscConfig+0x478>)
 8004c66:	2201      	movs	r2, #1
 8004c68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c6a:	f7fd fc67 	bl	800253c <HAL_GetTick>
 8004c6e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004c70:	e008      	b.n	8004c84 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004c72:	f7fd fc63 	bl	800253c <HAL_GetTick>
 8004c76:	4602      	mov	r2, r0
 8004c78:	693b      	ldr	r3, [r7, #16]
 8004c7a:	1ad3      	subs	r3, r2, r3
 8004c7c:	2b02      	cmp	r3, #2
 8004c7e:	d901      	bls.n	8004c84 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004c80:	2303      	movs	r3, #3
 8004c82:	e05c      	b.n	8004d3e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004c84:	4b11      	ldr	r3, [pc, #68]	; (8004ccc <HAL_RCC_OscConfig+0x470>)
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d0f0      	beq.n	8004c72 <HAL_RCC_OscConfig+0x416>
 8004c90:	e054      	b.n	8004d3c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c92:	4b10      	ldr	r3, [pc, #64]	; (8004cd4 <HAL_RCC_OscConfig+0x478>)
 8004c94:	2200      	movs	r2, #0
 8004c96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c98:	f7fd fc50 	bl	800253c <HAL_GetTick>
 8004c9c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c9e:	e008      	b.n	8004cb2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004ca0:	f7fd fc4c 	bl	800253c <HAL_GetTick>
 8004ca4:	4602      	mov	r2, r0
 8004ca6:	693b      	ldr	r3, [r7, #16]
 8004ca8:	1ad3      	subs	r3, r2, r3
 8004caa:	2b02      	cmp	r3, #2
 8004cac:	d901      	bls.n	8004cb2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004cae:	2303      	movs	r3, #3
 8004cb0:	e045      	b.n	8004d3e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004cb2:	4b06      	ldr	r3, [pc, #24]	; (8004ccc <HAL_RCC_OscConfig+0x470>)
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d1f0      	bne.n	8004ca0 <HAL_RCC_OscConfig+0x444>
 8004cbe:	e03d      	b.n	8004d3c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	699b      	ldr	r3, [r3, #24]
 8004cc4:	2b01      	cmp	r3, #1
 8004cc6:	d107      	bne.n	8004cd8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004cc8:	2301      	movs	r3, #1
 8004cca:	e038      	b.n	8004d3e <HAL_RCC_OscConfig+0x4e2>
 8004ccc:	40023800 	.word	0x40023800
 8004cd0:	40007000 	.word	0x40007000
 8004cd4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004cd8:	4b1b      	ldr	r3, [pc, #108]	; (8004d48 <HAL_RCC_OscConfig+0x4ec>)
 8004cda:	685b      	ldr	r3, [r3, #4]
 8004cdc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	699b      	ldr	r3, [r3, #24]
 8004ce2:	2b01      	cmp	r3, #1
 8004ce4:	d028      	beq.n	8004d38 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004cf0:	429a      	cmp	r2, r3
 8004cf2:	d121      	bne.n	8004d38 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004cfe:	429a      	cmp	r2, r3
 8004d00:	d11a      	bne.n	8004d38 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004d02:	68fa      	ldr	r2, [r7, #12]
 8004d04:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004d08:	4013      	ands	r3, r2
 8004d0a:	687a      	ldr	r2, [r7, #4]
 8004d0c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004d0e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004d10:	4293      	cmp	r3, r2
 8004d12:	d111      	bne.n	8004d38 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d1e:	085b      	lsrs	r3, r3, #1
 8004d20:	3b01      	subs	r3, #1
 8004d22:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004d24:	429a      	cmp	r2, r3
 8004d26:	d107      	bne.n	8004d38 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d32:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004d34:	429a      	cmp	r2, r3
 8004d36:	d001      	beq.n	8004d3c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004d38:	2301      	movs	r3, #1
 8004d3a:	e000      	b.n	8004d3e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004d3c:	2300      	movs	r3, #0
}
 8004d3e:	4618      	mov	r0, r3
 8004d40:	3718      	adds	r7, #24
 8004d42:	46bd      	mov	sp, r7
 8004d44:	bd80      	pop	{r7, pc}
 8004d46:	bf00      	nop
 8004d48:	40023800 	.word	0x40023800

08004d4c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004d4c:	b580      	push	{r7, lr}
 8004d4e:	b084      	sub	sp, #16
 8004d50:	af00      	add	r7, sp, #0
 8004d52:	6078      	str	r0, [r7, #4]
 8004d54:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d101      	bne.n	8004d60 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004d5c:	2301      	movs	r3, #1
 8004d5e:	e0cc      	b.n	8004efa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004d60:	4b68      	ldr	r3, [pc, #416]	; (8004f04 <HAL_RCC_ClockConfig+0x1b8>)
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	f003 0307 	and.w	r3, r3, #7
 8004d68:	683a      	ldr	r2, [r7, #0]
 8004d6a:	429a      	cmp	r2, r3
 8004d6c:	d90c      	bls.n	8004d88 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d6e:	4b65      	ldr	r3, [pc, #404]	; (8004f04 <HAL_RCC_ClockConfig+0x1b8>)
 8004d70:	683a      	ldr	r2, [r7, #0]
 8004d72:	b2d2      	uxtb	r2, r2
 8004d74:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d76:	4b63      	ldr	r3, [pc, #396]	; (8004f04 <HAL_RCC_ClockConfig+0x1b8>)
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	f003 0307 	and.w	r3, r3, #7
 8004d7e:	683a      	ldr	r2, [r7, #0]
 8004d80:	429a      	cmp	r2, r3
 8004d82:	d001      	beq.n	8004d88 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004d84:	2301      	movs	r3, #1
 8004d86:	e0b8      	b.n	8004efa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	f003 0302 	and.w	r3, r3, #2
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d020      	beq.n	8004dd6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	f003 0304 	and.w	r3, r3, #4
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d005      	beq.n	8004dac <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004da0:	4b59      	ldr	r3, [pc, #356]	; (8004f08 <HAL_RCC_ClockConfig+0x1bc>)
 8004da2:	689b      	ldr	r3, [r3, #8]
 8004da4:	4a58      	ldr	r2, [pc, #352]	; (8004f08 <HAL_RCC_ClockConfig+0x1bc>)
 8004da6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004daa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	f003 0308 	and.w	r3, r3, #8
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d005      	beq.n	8004dc4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004db8:	4b53      	ldr	r3, [pc, #332]	; (8004f08 <HAL_RCC_ClockConfig+0x1bc>)
 8004dba:	689b      	ldr	r3, [r3, #8]
 8004dbc:	4a52      	ldr	r2, [pc, #328]	; (8004f08 <HAL_RCC_ClockConfig+0x1bc>)
 8004dbe:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004dc2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004dc4:	4b50      	ldr	r3, [pc, #320]	; (8004f08 <HAL_RCC_ClockConfig+0x1bc>)
 8004dc6:	689b      	ldr	r3, [r3, #8]
 8004dc8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	689b      	ldr	r3, [r3, #8]
 8004dd0:	494d      	ldr	r1, [pc, #308]	; (8004f08 <HAL_RCC_ClockConfig+0x1bc>)
 8004dd2:	4313      	orrs	r3, r2
 8004dd4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	f003 0301 	and.w	r3, r3, #1
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d044      	beq.n	8004e6c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	685b      	ldr	r3, [r3, #4]
 8004de6:	2b01      	cmp	r3, #1
 8004de8:	d107      	bne.n	8004dfa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004dea:	4b47      	ldr	r3, [pc, #284]	; (8004f08 <HAL_RCC_ClockConfig+0x1bc>)
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d119      	bne.n	8004e2a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004df6:	2301      	movs	r3, #1
 8004df8:	e07f      	b.n	8004efa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	685b      	ldr	r3, [r3, #4]
 8004dfe:	2b02      	cmp	r3, #2
 8004e00:	d003      	beq.n	8004e0a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004e06:	2b03      	cmp	r3, #3
 8004e08:	d107      	bne.n	8004e1a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004e0a:	4b3f      	ldr	r3, [pc, #252]	; (8004f08 <HAL_RCC_ClockConfig+0x1bc>)
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d109      	bne.n	8004e2a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004e16:	2301      	movs	r3, #1
 8004e18:	e06f      	b.n	8004efa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e1a:	4b3b      	ldr	r3, [pc, #236]	; (8004f08 <HAL_RCC_ClockConfig+0x1bc>)
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	f003 0302 	and.w	r3, r3, #2
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d101      	bne.n	8004e2a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004e26:	2301      	movs	r3, #1
 8004e28:	e067      	b.n	8004efa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004e2a:	4b37      	ldr	r3, [pc, #220]	; (8004f08 <HAL_RCC_ClockConfig+0x1bc>)
 8004e2c:	689b      	ldr	r3, [r3, #8]
 8004e2e:	f023 0203 	bic.w	r2, r3, #3
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	685b      	ldr	r3, [r3, #4]
 8004e36:	4934      	ldr	r1, [pc, #208]	; (8004f08 <HAL_RCC_ClockConfig+0x1bc>)
 8004e38:	4313      	orrs	r3, r2
 8004e3a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004e3c:	f7fd fb7e 	bl	800253c <HAL_GetTick>
 8004e40:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e42:	e00a      	b.n	8004e5a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004e44:	f7fd fb7a 	bl	800253c <HAL_GetTick>
 8004e48:	4602      	mov	r2, r0
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	1ad3      	subs	r3, r2, r3
 8004e4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e52:	4293      	cmp	r3, r2
 8004e54:	d901      	bls.n	8004e5a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004e56:	2303      	movs	r3, #3
 8004e58:	e04f      	b.n	8004efa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e5a:	4b2b      	ldr	r3, [pc, #172]	; (8004f08 <HAL_RCC_ClockConfig+0x1bc>)
 8004e5c:	689b      	ldr	r3, [r3, #8]
 8004e5e:	f003 020c 	and.w	r2, r3, #12
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	685b      	ldr	r3, [r3, #4]
 8004e66:	009b      	lsls	r3, r3, #2
 8004e68:	429a      	cmp	r2, r3
 8004e6a:	d1eb      	bne.n	8004e44 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004e6c:	4b25      	ldr	r3, [pc, #148]	; (8004f04 <HAL_RCC_ClockConfig+0x1b8>)
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	f003 0307 	and.w	r3, r3, #7
 8004e74:	683a      	ldr	r2, [r7, #0]
 8004e76:	429a      	cmp	r2, r3
 8004e78:	d20c      	bcs.n	8004e94 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e7a:	4b22      	ldr	r3, [pc, #136]	; (8004f04 <HAL_RCC_ClockConfig+0x1b8>)
 8004e7c:	683a      	ldr	r2, [r7, #0]
 8004e7e:	b2d2      	uxtb	r2, r2
 8004e80:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e82:	4b20      	ldr	r3, [pc, #128]	; (8004f04 <HAL_RCC_ClockConfig+0x1b8>)
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	f003 0307 	and.w	r3, r3, #7
 8004e8a:	683a      	ldr	r2, [r7, #0]
 8004e8c:	429a      	cmp	r2, r3
 8004e8e:	d001      	beq.n	8004e94 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004e90:	2301      	movs	r3, #1
 8004e92:	e032      	b.n	8004efa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	f003 0304 	and.w	r3, r3, #4
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d008      	beq.n	8004eb2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004ea0:	4b19      	ldr	r3, [pc, #100]	; (8004f08 <HAL_RCC_ClockConfig+0x1bc>)
 8004ea2:	689b      	ldr	r3, [r3, #8]
 8004ea4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	68db      	ldr	r3, [r3, #12]
 8004eac:	4916      	ldr	r1, [pc, #88]	; (8004f08 <HAL_RCC_ClockConfig+0x1bc>)
 8004eae:	4313      	orrs	r3, r2
 8004eb0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	f003 0308 	and.w	r3, r3, #8
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d009      	beq.n	8004ed2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004ebe:	4b12      	ldr	r3, [pc, #72]	; (8004f08 <HAL_RCC_ClockConfig+0x1bc>)
 8004ec0:	689b      	ldr	r3, [r3, #8]
 8004ec2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	691b      	ldr	r3, [r3, #16]
 8004eca:	00db      	lsls	r3, r3, #3
 8004ecc:	490e      	ldr	r1, [pc, #56]	; (8004f08 <HAL_RCC_ClockConfig+0x1bc>)
 8004ece:	4313      	orrs	r3, r2
 8004ed0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004ed2:	f000 f821 	bl	8004f18 <HAL_RCC_GetSysClockFreq>
 8004ed6:	4602      	mov	r2, r0
 8004ed8:	4b0b      	ldr	r3, [pc, #44]	; (8004f08 <HAL_RCC_ClockConfig+0x1bc>)
 8004eda:	689b      	ldr	r3, [r3, #8]
 8004edc:	091b      	lsrs	r3, r3, #4
 8004ede:	f003 030f 	and.w	r3, r3, #15
 8004ee2:	490a      	ldr	r1, [pc, #40]	; (8004f0c <HAL_RCC_ClockConfig+0x1c0>)
 8004ee4:	5ccb      	ldrb	r3, [r1, r3]
 8004ee6:	fa22 f303 	lsr.w	r3, r2, r3
 8004eea:	4a09      	ldr	r2, [pc, #36]	; (8004f10 <HAL_RCC_ClockConfig+0x1c4>)
 8004eec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004eee:	4b09      	ldr	r3, [pc, #36]	; (8004f14 <HAL_RCC_ClockConfig+0x1c8>)
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	4618      	mov	r0, r3
 8004ef4:	f7fd fade 	bl	80024b4 <HAL_InitTick>

  return HAL_OK;
 8004ef8:	2300      	movs	r3, #0
}
 8004efa:	4618      	mov	r0, r3
 8004efc:	3710      	adds	r7, #16
 8004efe:	46bd      	mov	sp, r7
 8004f00:	bd80      	pop	{r7, pc}
 8004f02:	bf00      	nop
 8004f04:	40023c00 	.word	0x40023c00
 8004f08:	40023800 	.word	0x40023800
 8004f0c:	0800c93c 	.word	0x0800c93c
 8004f10:	20000010 	.word	0x20000010
 8004f14:	20000014 	.word	0x20000014

08004f18 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004f18:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004f1c:	b090      	sub	sp, #64	; 0x40
 8004f1e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004f20:	2300      	movs	r3, #0
 8004f22:	637b      	str	r3, [r7, #52]	; 0x34
 8004f24:	2300      	movs	r3, #0
 8004f26:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004f28:	2300      	movs	r3, #0
 8004f2a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8004f2c:	2300      	movs	r3, #0
 8004f2e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004f30:	4b59      	ldr	r3, [pc, #356]	; (8005098 <HAL_RCC_GetSysClockFreq+0x180>)
 8004f32:	689b      	ldr	r3, [r3, #8]
 8004f34:	f003 030c 	and.w	r3, r3, #12
 8004f38:	2b08      	cmp	r3, #8
 8004f3a:	d00d      	beq.n	8004f58 <HAL_RCC_GetSysClockFreq+0x40>
 8004f3c:	2b08      	cmp	r3, #8
 8004f3e:	f200 80a1 	bhi.w	8005084 <HAL_RCC_GetSysClockFreq+0x16c>
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d002      	beq.n	8004f4c <HAL_RCC_GetSysClockFreq+0x34>
 8004f46:	2b04      	cmp	r3, #4
 8004f48:	d003      	beq.n	8004f52 <HAL_RCC_GetSysClockFreq+0x3a>
 8004f4a:	e09b      	b.n	8005084 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004f4c:	4b53      	ldr	r3, [pc, #332]	; (800509c <HAL_RCC_GetSysClockFreq+0x184>)
 8004f4e:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8004f50:	e09b      	b.n	800508a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004f52:	4b53      	ldr	r3, [pc, #332]	; (80050a0 <HAL_RCC_GetSysClockFreq+0x188>)
 8004f54:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004f56:	e098      	b.n	800508a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004f58:	4b4f      	ldr	r3, [pc, #316]	; (8005098 <HAL_RCC_GetSysClockFreq+0x180>)
 8004f5a:	685b      	ldr	r3, [r3, #4]
 8004f5c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004f60:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004f62:	4b4d      	ldr	r3, [pc, #308]	; (8005098 <HAL_RCC_GetSysClockFreq+0x180>)
 8004f64:	685b      	ldr	r3, [r3, #4]
 8004f66:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d028      	beq.n	8004fc0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004f6e:	4b4a      	ldr	r3, [pc, #296]	; (8005098 <HAL_RCC_GetSysClockFreq+0x180>)
 8004f70:	685b      	ldr	r3, [r3, #4]
 8004f72:	099b      	lsrs	r3, r3, #6
 8004f74:	2200      	movs	r2, #0
 8004f76:	623b      	str	r3, [r7, #32]
 8004f78:	627a      	str	r2, [r7, #36]	; 0x24
 8004f7a:	6a3b      	ldr	r3, [r7, #32]
 8004f7c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004f80:	2100      	movs	r1, #0
 8004f82:	4b47      	ldr	r3, [pc, #284]	; (80050a0 <HAL_RCC_GetSysClockFreq+0x188>)
 8004f84:	fb03 f201 	mul.w	r2, r3, r1
 8004f88:	2300      	movs	r3, #0
 8004f8a:	fb00 f303 	mul.w	r3, r0, r3
 8004f8e:	4413      	add	r3, r2
 8004f90:	4a43      	ldr	r2, [pc, #268]	; (80050a0 <HAL_RCC_GetSysClockFreq+0x188>)
 8004f92:	fba0 1202 	umull	r1, r2, r0, r2
 8004f96:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004f98:	460a      	mov	r2, r1
 8004f9a:	62ba      	str	r2, [r7, #40]	; 0x28
 8004f9c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004f9e:	4413      	add	r3, r2
 8004fa0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004fa2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004fa4:	2200      	movs	r2, #0
 8004fa6:	61bb      	str	r3, [r7, #24]
 8004fa8:	61fa      	str	r2, [r7, #28]
 8004faa:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004fae:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8004fb2:	f7fb fcf7 	bl	80009a4 <__aeabi_uldivmod>
 8004fb6:	4602      	mov	r2, r0
 8004fb8:	460b      	mov	r3, r1
 8004fba:	4613      	mov	r3, r2
 8004fbc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004fbe:	e053      	b.n	8005068 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004fc0:	4b35      	ldr	r3, [pc, #212]	; (8005098 <HAL_RCC_GetSysClockFreq+0x180>)
 8004fc2:	685b      	ldr	r3, [r3, #4]
 8004fc4:	099b      	lsrs	r3, r3, #6
 8004fc6:	2200      	movs	r2, #0
 8004fc8:	613b      	str	r3, [r7, #16]
 8004fca:	617a      	str	r2, [r7, #20]
 8004fcc:	693b      	ldr	r3, [r7, #16]
 8004fce:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8004fd2:	f04f 0b00 	mov.w	fp, #0
 8004fd6:	4652      	mov	r2, sl
 8004fd8:	465b      	mov	r3, fp
 8004fda:	f04f 0000 	mov.w	r0, #0
 8004fde:	f04f 0100 	mov.w	r1, #0
 8004fe2:	0159      	lsls	r1, r3, #5
 8004fe4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004fe8:	0150      	lsls	r0, r2, #5
 8004fea:	4602      	mov	r2, r0
 8004fec:	460b      	mov	r3, r1
 8004fee:	ebb2 080a 	subs.w	r8, r2, sl
 8004ff2:	eb63 090b 	sbc.w	r9, r3, fp
 8004ff6:	f04f 0200 	mov.w	r2, #0
 8004ffa:	f04f 0300 	mov.w	r3, #0
 8004ffe:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8005002:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8005006:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800500a:	ebb2 0408 	subs.w	r4, r2, r8
 800500e:	eb63 0509 	sbc.w	r5, r3, r9
 8005012:	f04f 0200 	mov.w	r2, #0
 8005016:	f04f 0300 	mov.w	r3, #0
 800501a:	00eb      	lsls	r3, r5, #3
 800501c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005020:	00e2      	lsls	r2, r4, #3
 8005022:	4614      	mov	r4, r2
 8005024:	461d      	mov	r5, r3
 8005026:	eb14 030a 	adds.w	r3, r4, sl
 800502a:	603b      	str	r3, [r7, #0]
 800502c:	eb45 030b 	adc.w	r3, r5, fp
 8005030:	607b      	str	r3, [r7, #4]
 8005032:	f04f 0200 	mov.w	r2, #0
 8005036:	f04f 0300 	mov.w	r3, #0
 800503a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800503e:	4629      	mov	r1, r5
 8005040:	028b      	lsls	r3, r1, #10
 8005042:	4621      	mov	r1, r4
 8005044:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005048:	4621      	mov	r1, r4
 800504a:	028a      	lsls	r2, r1, #10
 800504c:	4610      	mov	r0, r2
 800504e:	4619      	mov	r1, r3
 8005050:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005052:	2200      	movs	r2, #0
 8005054:	60bb      	str	r3, [r7, #8]
 8005056:	60fa      	str	r2, [r7, #12]
 8005058:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800505c:	f7fb fca2 	bl	80009a4 <__aeabi_uldivmod>
 8005060:	4602      	mov	r2, r0
 8005062:	460b      	mov	r3, r1
 8005064:	4613      	mov	r3, r2
 8005066:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005068:	4b0b      	ldr	r3, [pc, #44]	; (8005098 <HAL_RCC_GetSysClockFreq+0x180>)
 800506a:	685b      	ldr	r3, [r3, #4]
 800506c:	0c1b      	lsrs	r3, r3, #16
 800506e:	f003 0303 	and.w	r3, r3, #3
 8005072:	3301      	adds	r3, #1
 8005074:	005b      	lsls	r3, r3, #1
 8005076:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8005078:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800507a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800507c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005080:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005082:	e002      	b.n	800508a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005084:	4b05      	ldr	r3, [pc, #20]	; (800509c <HAL_RCC_GetSysClockFreq+0x184>)
 8005086:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005088:	bf00      	nop
    }
  }
  return sysclockfreq;
 800508a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 800508c:	4618      	mov	r0, r3
 800508e:	3740      	adds	r7, #64	; 0x40
 8005090:	46bd      	mov	sp, r7
 8005092:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005096:	bf00      	nop
 8005098:	40023800 	.word	0x40023800
 800509c:	00f42400 	.word	0x00f42400
 80050a0:	016e3600 	.word	0x016e3600

080050a4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80050a4:	b480      	push	{r7}
 80050a6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80050a8:	4b03      	ldr	r3, [pc, #12]	; (80050b8 <HAL_RCC_GetHCLKFreq+0x14>)
 80050aa:	681b      	ldr	r3, [r3, #0]
}
 80050ac:	4618      	mov	r0, r3
 80050ae:	46bd      	mov	sp, r7
 80050b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b4:	4770      	bx	lr
 80050b6:	bf00      	nop
 80050b8:	20000010 	.word	0x20000010

080050bc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80050bc:	b580      	push	{r7, lr}
 80050be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80050c0:	f7ff fff0 	bl	80050a4 <HAL_RCC_GetHCLKFreq>
 80050c4:	4602      	mov	r2, r0
 80050c6:	4b05      	ldr	r3, [pc, #20]	; (80050dc <HAL_RCC_GetPCLK1Freq+0x20>)
 80050c8:	689b      	ldr	r3, [r3, #8]
 80050ca:	0a9b      	lsrs	r3, r3, #10
 80050cc:	f003 0307 	and.w	r3, r3, #7
 80050d0:	4903      	ldr	r1, [pc, #12]	; (80050e0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80050d2:	5ccb      	ldrb	r3, [r1, r3]
 80050d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80050d8:	4618      	mov	r0, r3
 80050da:	bd80      	pop	{r7, pc}
 80050dc:	40023800 	.word	0x40023800
 80050e0:	0800c94c 	.word	0x0800c94c

080050e4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80050e4:	b580      	push	{r7, lr}
 80050e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80050e8:	f7ff ffdc 	bl	80050a4 <HAL_RCC_GetHCLKFreq>
 80050ec:	4602      	mov	r2, r0
 80050ee:	4b05      	ldr	r3, [pc, #20]	; (8005104 <HAL_RCC_GetPCLK2Freq+0x20>)
 80050f0:	689b      	ldr	r3, [r3, #8]
 80050f2:	0b5b      	lsrs	r3, r3, #13
 80050f4:	f003 0307 	and.w	r3, r3, #7
 80050f8:	4903      	ldr	r1, [pc, #12]	; (8005108 <HAL_RCC_GetPCLK2Freq+0x24>)
 80050fa:	5ccb      	ldrb	r3, [r1, r3]
 80050fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005100:	4618      	mov	r0, r3
 8005102:	bd80      	pop	{r7, pc}
 8005104:	40023800 	.word	0x40023800
 8005108:	0800c94c 	.word	0x0800c94c

0800510c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800510c:	b580      	push	{r7, lr}
 800510e:	b082      	sub	sp, #8
 8005110:	af00      	add	r7, sp, #0
 8005112:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	2b00      	cmp	r3, #0
 8005118:	d101      	bne.n	800511e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800511a:	2301      	movs	r3, #1
 800511c:	e07b      	b.n	8005216 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005122:	2b00      	cmp	r3, #0
 8005124:	d108      	bne.n	8005138 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	685b      	ldr	r3, [r3, #4]
 800512a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800512e:	d009      	beq.n	8005144 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	2200      	movs	r2, #0
 8005134:	61da      	str	r2, [r3, #28]
 8005136:	e005      	b.n	8005144 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	2200      	movs	r2, #0
 800513c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	2200      	movs	r2, #0
 8005142:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	2200      	movs	r2, #0
 8005148:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005150:	b2db      	uxtb	r3, r3
 8005152:	2b00      	cmp	r3, #0
 8005154:	d106      	bne.n	8005164 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	2200      	movs	r2, #0
 800515a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800515e:	6878      	ldr	r0, [r7, #4]
 8005160:	f7fc ff78 	bl	8002054 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	2202      	movs	r2, #2
 8005168:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	681a      	ldr	r2, [r3, #0]
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800517a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	685b      	ldr	r3, [r3, #4]
 8005180:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	689b      	ldr	r3, [r3, #8]
 8005188:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800518c:	431a      	orrs	r2, r3
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	68db      	ldr	r3, [r3, #12]
 8005192:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005196:	431a      	orrs	r2, r3
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	691b      	ldr	r3, [r3, #16]
 800519c:	f003 0302 	and.w	r3, r3, #2
 80051a0:	431a      	orrs	r2, r3
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	695b      	ldr	r3, [r3, #20]
 80051a6:	f003 0301 	and.w	r3, r3, #1
 80051aa:	431a      	orrs	r2, r3
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	699b      	ldr	r3, [r3, #24]
 80051b0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80051b4:	431a      	orrs	r2, r3
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	69db      	ldr	r3, [r3, #28]
 80051ba:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80051be:	431a      	orrs	r2, r3
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	6a1b      	ldr	r3, [r3, #32]
 80051c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051c8:	ea42 0103 	orr.w	r1, r2, r3
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051d0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	430a      	orrs	r2, r1
 80051da:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	699b      	ldr	r3, [r3, #24]
 80051e0:	0c1b      	lsrs	r3, r3, #16
 80051e2:	f003 0104 	and.w	r1, r3, #4
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051ea:	f003 0210 	and.w	r2, r3, #16
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	430a      	orrs	r2, r1
 80051f4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	69da      	ldr	r2, [r3, #28]
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005204:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	2200      	movs	r2, #0
 800520a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	2201      	movs	r2, #1
 8005210:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005214:	2300      	movs	r3, #0
}
 8005216:	4618      	mov	r0, r3
 8005218:	3708      	adds	r7, #8
 800521a:	46bd      	mov	sp, r7
 800521c:	bd80      	pop	{r7, pc}

0800521e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800521e:	b580      	push	{r7, lr}
 8005220:	b088      	sub	sp, #32
 8005222:	af00      	add	r7, sp, #0
 8005224:	60f8      	str	r0, [r7, #12]
 8005226:	60b9      	str	r1, [r7, #8]
 8005228:	603b      	str	r3, [r7, #0]
 800522a:	4613      	mov	r3, r2
 800522c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800522e:	2300      	movs	r3, #0
 8005230:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005238:	2b01      	cmp	r3, #1
 800523a:	d101      	bne.n	8005240 <HAL_SPI_Transmit+0x22>
 800523c:	2302      	movs	r3, #2
 800523e:	e126      	b.n	800548e <HAL_SPI_Transmit+0x270>
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	2201      	movs	r2, #1
 8005244:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005248:	f7fd f978 	bl	800253c <HAL_GetTick>
 800524c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800524e:	88fb      	ldrh	r3, [r7, #6]
 8005250:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005258:	b2db      	uxtb	r3, r3
 800525a:	2b01      	cmp	r3, #1
 800525c:	d002      	beq.n	8005264 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800525e:	2302      	movs	r3, #2
 8005260:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005262:	e10b      	b.n	800547c <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8005264:	68bb      	ldr	r3, [r7, #8]
 8005266:	2b00      	cmp	r3, #0
 8005268:	d002      	beq.n	8005270 <HAL_SPI_Transmit+0x52>
 800526a:	88fb      	ldrh	r3, [r7, #6]
 800526c:	2b00      	cmp	r3, #0
 800526e:	d102      	bne.n	8005276 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005270:	2301      	movs	r3, #1
 8005272:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005274:	e102      	b.n	800547c <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	2203      	movs	r2, #3
 800527a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	2200      	movs	r2, #0
 8005282:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	68ba      	ldr	r2, [r7, #8]
 8005288:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	88fa      	ldrh	r2, [r7, #6]
 800528e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	88fa      	ldrh	r2, [r7, #6]
 8005294:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	2200      	movs	r2, #0
 800529a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	2200      	movs	r2, #0
 80052a0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	2200      	movs	r2, #0
 80052a6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	2200      	movs	r2, #0
 80052ac:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	2200      	movs	r2, #0
 80052b2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	689b      	ldr	r3, [r3, #8]
 80052b8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80052bc:	d10f      	bne.n	80052de <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	681a      	ldr	r2, [r3, #0]
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80052cc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	681a      	ldr	r2, [r3, #0]
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80052dc:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052e8:	2b40      	cmp	r3, #64	; 0x40
 80052ea:	d007      	beq.n	80052fc <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	681a      	ldr	r2, [r3, #0]
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80052fa:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	68db      	ldr	r3, [r3, #12]
 8005300:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005304:	d14b      	bne.n	800539e <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	685b      	ldr	r3, [r3, #4]
 800530a:	2b00      	cmp	r3, #0
 800530c:	d002      	beq.n	8005314 <HAL_SPI_Transmit+0xf6>
 800530e:	8afb      	ldrh	r3, [r7, #22]
 8005310:	2b01      	cmp	r3, #1
 8005312:	d13e      	bne.n	8005392 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005318:	881a      	ldrh	r2, [r3, #0]
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005324:	1c9a      	adds	r2, r3, #2
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800532e:	b29b      	uxth	r3, r3
 8005330:	3b01      	subs	r3, #1
 8005332:	b29a      	uxth	r2, r3
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005338:	e02b      	b.n	8005392 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	689b      	ldr	r3, [r3, #8]
 8005340:	f003 0302 	and.w	r3, r3, #2
 8005344:	2b02      	cmp	r3, #2
 8005346:	d112      	bne.n	800536e <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800534c:	881a      	ldrh	r2, [r3, #0]
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005358:	1c9a      	adds	r2, r3, #2
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005362:	b29b      	uxth	r3, r3
 8005364:	3b01      	subs	r3, #1
 8005366:	b29a      	uxth	r2, r3
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	86da      	strh	r2, [r3, #54]	; 0x36
 800536c:	e011      	b.n	8005392 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800536e:	f7fd f8e5 	bl	800253c <HAL_GetTick>
 8005372:	4602      	mov	r2, r0
 8005374:	69bb      	ldr	r3, [r7, #24]
 8005376:	1ad3      	subs	r3, r2, r3
 8005378:	683a      	ldr	r2, [r7, #0]
 800537a:	429a      	cmp	r2, r3
 800537c:	d803      	bhi.n	8005386 <HAL_SPI_Transmit+0x168>
 800537e:	683b      	ldr	r3, [r7, #0]
 8005380:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005384:	d102      	bne.n	800538c <HAL_SPI_Transmit+0x16e>
 8005386:	683b      	ldr	r3, [r7, #0]
 8005388:	2b00      	cmp	r3, #0
 800538a:	d102      	bne.n	8005392 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 800538c:	2303      	movs	r3, #3
 800538e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005390:	e074      	b.n	800547c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005396:	b29b      	uxth	r3, r3
 8005398:	2b00      	cmp	r3, #0
 800539a:	d1ce      	bne.n	800533a <HAL_SPI_Transmit+0x11c>
 800539c:	e04c      	b.n	8005438 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	685b      	ldr	r3, [r3, #4]
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d002      	beq.n	80053ac <HAL_SPI_Transmit+0x18e>
 80053a6:	8afb      	ldrh	r3, [r7, #22]
 80053a8:	2b01      	cmp	r3, #1
 80053aa:	d140      	bne.n	800542e <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	330c      	adds	r3, #12
 80053b6:	7812      	ldrb	r2, [r2, #0]
 80053b8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053be:	1c5a      	adds	r2, r3, #1
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80053c8:	b29b      	uxth	r3, r3
 80053ca:	3b01      	subs	r3, #1
 80053cc:	b29a      	uxth	r2, r3
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80053d2:	e02c      	b.n	800542e <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	689b      	ldr	r3, [r3, #8]
 80053da:	f003 0302 	and.w	r3, r3, #2
 80053de:	2b02      	cmp	r3, #2
 80053e0:	d113      	bne.n	800540a <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	330c      	adds	r3, #12
 80053ec:	7812      	ldrb	r2, [r2, #0]
 80053ee:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053f4:	1c5a      	adds	r2, r3, #1
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80053fe:	b29b      	uxth	r3, r3
 8005400:	3b01      	subs	r3, #1
 8005402:	b29a      	uxth	r2, r3
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	86da      	strh	r2, [r3, #54]	; 0x36
 8005408:	e011      	b.n	800542e <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800540a:	f7fd f897 	bl	800253c <HAL_GetTick>
 800540e:	4602      	mov	r2, r0
 8005410:	69bb      	ldr	r3, [r7, #24]
 8005412:	1ad3      	subs	r3, r2, r3
 8005414:	683a      	ldr	r2, [r7, #0]
 8005416:	429a      	cmp	r2, r3
 8005418:	d803      	bhi.n	8005422 <HAL_SPI_Transmit+0x204>
 800541a:	683b      	ldr	r3, [r7, #0]
 800541c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005420:	d102      	bne.n	8005428 <HAL_SPI_Transmit+0x20a>
 8005422:	683b      	ldr	r3, [r7, #0]
 8005424:	2b00      	cmp	r3, #0
 8005426:	d102      	bne.n	800542e <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8005428:	2303      	movs	r3, #3
 800542a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800542c:	e026      	b.n	800547c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005432:	b29b      	uxth	r3, r3
 8005434:	2b00      	cmp	r3, #0
 8005436:	d1cd      	bne.n	80053d4 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005438:	69ba      	ldr	r2, [r7, #24]
 800543a:	6839      	ldr	r1, [r7, #0]
 800543c:	68f8      	ldr	r0, [r7, #12]
 800543e:	f000 fbd9 	bl	8005bf4 <SPI_EndRxTxTransaction>
 8005442:	4603      	mov	r3, r0
 8005444:	2b00      	cmp	r3, #0
 8005446:	d002      	beq.n	800544e <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	2220      	movs	r2, #32
 800544c:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	689b      	ldr	r3, [r3, #8]
 8005452:	2b00      	cmp	r3, #0
 8005454:	d10a      	bne.n	800546c <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005456:	2300      	movs	r3, #0
 8005458:	613b      	str	r3, [r7, #16]
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	68db      	ldr	r3, [r3, #12]
 8005460:	613b      	str	r3, [r7, #16]
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	689b      	ldr	r3, [r3, #8]
 8005468:	613b      	str	r3, [r7, #16]
 800546a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005470:	2b00      	cmp	r3, #0
 8005472:	d002      	beq.n	800547a <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8005474:	2301      	movs	r3, #1
 8005476:	77fb      	strb	r3, [r7, #31]
 8005478:	e000      	b.n	800547c <HAL_SPI_Transmit+0x25e>
  }

error:
 800547a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	2201      	movs	r2, #1
 8005480:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	2200      	movs	r2, #0
 8005488:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800548c:	7ffb      	ldrb	r3, [r7, #31]
}
 800548e:	4618      	mov	r0, r3
 8005490:	3720      	adds	r7, #32
 8005492:	46bd      	mov	sp, r7
 8005494:	bd80      	pop	{r7, pc}

08005496 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005496:	b580      	push	{r7, lr}
 8005498:	b088      	sub	sp, #32
 800549a:	af02      	add	r7, sp, #8
 800549c:	60f8      	str	r0, [r7, #12]
 800549e:	60b9      	str	r1, [r7, #8]
 80054a0:	603b      	str	r3, [r7, #0]
 80054a2:	4613      	mov	r3, r2
 80054a4:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80054a6:	2300      	movs	r3, #0
 80054a8:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	685b      	ldr	r3, [r3, #4]
 80054ae:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80054b2:	d112      	bne.n	80054da <HAL_SPI_Receive+0x44>
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	689b      	ldr	r3, [r3, #8]
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d10e      	bne.n	80054da <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	2204      	movs	r2, #4
 80054c0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80054c4:	88fa      	ldrh	r2, [r7, #6]
 80054c6:	683b      	ldr	r3, [r7, #0]
 80054c8:	9300      	str	r3, [sp, #0]
 80054ca:	4613      	mov	r3, r2
 80054cc:	68ba      	ldr	r2, [r7, #8]
 80054ce:	68b9      	ldr	r1, [r7, #8]
 80054d0:	68f8      	ldr	r0, [r7, #12]
 80054d2:	f000 f8f1 	bl	80056b8 <HAL_SPI_TransmitReceive>
 80054d6:	4603      	mov	r3, r0
 80054d8:	e0ea      	b.n	80056b0 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80054e0:	2b01      	cmp	r3, #1
 80054e2:	d101      	bne.n	80054e8 <HAL_SPI_Receive+0x52>
 80054e4:	2302      	movs	r3, #2
 80054e6:	e0e3      	b.n	80056b0 <HAL_SPI_Receive+0x21a>
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	2201      	movs	r2, #1
 80054ec:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80054f0:	f7fd f824 	bl	800253c <HAL_GetTick>
 80054f4:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80054fc:	b2db      	uxtb	r3, r3
 80054fe:	2b01      	cmp	r3, #1
 8005500:	d002      	beq.n	8005508 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8005502:	2302      	movs	r3, #2
 8005504:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005506:	e0ca      	b.n	800569e <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8005508:	68bb      	ldr	r3, [r7, #8]
 800550a:	2b00      	cmp	r3, #0
 800550c:	d002      	beq.n	8005514 <HAL_SPI_Receive+0x7e>
 800550e:	88fb      	ldrh	r3, [r7, #6]
 8005510:	2b00      	cmp	r3, #0
 8005512:	d102      	bne.n	800551a <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8005514:	2301      	movs	r3, #1
 8005516:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005518:	e0c1      	b.n	800569e <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	2204      	movs	r2, #4
 800551e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	2200      	movs	r2, #0
 8005526:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	68ba      	ldr	r2, [r7, #8]
 800552c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	88fa      	ldrh	r2, [r7, #6]
 8005532:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	88fa      	ldrh	r2, [r7, #6]
 8005538:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	2200      	movs	r2, #0
 800553e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	2200      	movs	r2, #0
 8005544:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	2200      	movs	r2, #0
 800554a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	2200      	movs	r2, #0
 8005550:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	2200      	movs	r2, #0
 8005556:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	689b      	ldr	r3, [r3, #8]
 800555c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005560:	d10f      	bne.n	8005582 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	681a      	ldr	r2, [r3, #0]
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005570:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	681a      	ldr	r2, [r3, #0]
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005580:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800558c:	2b40      	cmp	r3, #64	; 0x40
 800558e:	d007      	beq.n	80055a0 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	681a      	ldr	r2, [r3, #0]
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800559e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	68db      	ldr	r3, [r3, #12]
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d162      	bne.n	800566e <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80055a8:	e02e      	b.n	8005608 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	689b      	ldr	r3, [r3, #8]
 80055b0:	f003 0301 	and.w	r3, r3, #1
 80055b4:	2b01      	cmp	r3, #1
 80055b6:	d115      	bne.n	80055e4 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	f103 020c 	add.w	r2, r3, #12
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055c4:	7812      	ldrb	r2, [r2, #0]
 80055c6:	b2d2      	uxtb	r2, r2
 80055c8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055ce:	1c5a      	adds	r2, r3, #1
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80055d8:	b29b      	uxth	r3, r3
 80055da:	3b01      	subs	r3, #1
 80055dc:	b29a      	uxth	r2, r3
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	87da      	strh	r2, [r3, #62]	; 0x3e
 80055e2:	e011      	b.n	8005608 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80055e4:	f7fc ffaa 	bl	800253c <HAL_GetTick>
 80055e8:	4602      	mov	r2, r0
 80055ea:	693b      	ldr	r3, [r7, #16]
 80055ec:	1ad3      	subs	r3, r2, r3
 80055ee:	683a      	ldr	r2, [r7, #0]
 80055f0:	429a      	cmp	r2, r3
 80055f2:	d803      	bhi.n	80055fc <HAL_SPI_Receive+0x166>
 80055f4:	683b      	ldr	r3, [r7, #0]
 80055f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055fa:	d102      	bne.n	8005602 <HAL_SPI_Receive+0x16c>
 80055fc:	683b      	ldr	r3, [r7, #0]
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d102      	bne.n	8005608 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8005602:	2303      	movs	r3, #3
 8005604:	75fb      	strb	r3, [r7, #23]
          goto error;
 8005606:	e04a      	b.n	800569e <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800560c:	b29b      	uxth	r3, r3
 800560e:	2b00      	cmp	r3, #0
 8005610:	d1cb      	bne.n	80055aa <HAL_SPI_Receive+0x114>
 8005612:	e031      	b.n	8005678 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	689b      	ldr	r3, [r3, #8]
 800561a:	f003 0301 	and.w	r3, r3, #1
 800561e:	2b01      	cmp	r3, #1
 8005620:	d113      	bne.n	800564a <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	68da      	ldr	r2, [r3, #12]
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800562c:	b292      	uxth	r2, r2
 800562e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005634:	1c9a      	adds	r2, r3, #2
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800563e:	b29b      	uxth	r3, r3
 8005640:	3b01      	subs	r3, #1
 8005642:	b29a      	uxth	r2, r3
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005648:	e011      	b.n	800566e <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800564a:	f7fc ff77 	bl	800253c <HAL_GetTick>
 800564e:	4602      	mov	r2, r0
 8005650:	693b      	ldr	r3, [r7, #16]
 8005652:	1ad3      	subs	r3, r2, r3
 8005654:	683a      	ldr	r2, [r7, #0]
 8005656:	429a      	cmp	r2, r3
 8005658:	d803      	bhi.n	8005662 <HAL_SPI_Receive+0x1cc>
 800565a:	683b      	ldr	r3, [r7, #0]
 800565c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005660:	d102      	bne.n	8005668 <HAL_SPI_Receive+0x1d2>
 8005662:	683b      	ldr	r3, [r7, #0]
 8005664:	2b00      	cmp	r3, #0
 8005666:	d102      	bne.n	800566e <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8005668:	2303      	movs	r3, #3
 800566a:	75fb      	strb	r3, [r7, #23]
          goto error;
 800566c:	e017      	b.n	800569e <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005672:	b29b      	uxth	r3, r3
 8005674:	2b00      	cmp	r3, #0
 8005676:	d1cd      	bne.n	8005614 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005678:	693a      	ldr	r2, [r7, #16]
 800567a:	6839      	ldr	r1, [r7, #0]
 800567c:	68f8      	ldr	r0, [r7, #12]
 800567e:	f000 fa53 	bl	8005b28 <SPI_EndRxTransaction>
 8005682:	4603      	mov	r3, r0
 8005684:	2b00      	cmp	r3, #0
 8005686:	d002      	beq.n	800568e <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	2220      	movs	r2, #32
 800568c:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005692:	2b00      	cmp	r3, #0
 8005694:	d002      	beq.n	800569c <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8005696:	2301      	movs	r3, #1
 8005698:	75fb      	strb	r3, [r7, #23]
 800569a:	e000      	b.n	800569e <HAL_SPI_Receive+0x208>
  }

error :
 800569c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	2201      	movs	r2, #1
 80056a2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	2200      	movs	r2, #0
 80056aa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80056ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80056b0:	4618      	mov	r0, r3
 80056b2:	3718      	adds	r7, #24
 80056b4:	46bd      	mov	sp, r7
 80056b6:	bd80      	pop	{r7, pc}

080056b8 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80056b8:	b580      	push	{r7, lr}
 80056ba:	b08c      	sub	sp, #48	; 0x30
 80056bc:	af00      	add	r7, sp, #0
 80056be:	60f8      	str	r0, [r7, #12]
 80056c0:	60b9      	str	r1, [r7, #8]
 80056c2:	607a      	str	r2, [r7, #4]
 80056c4:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80056c6:	2301      	movs	r3, #1
 80056c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80056ca:	2300      	movs	r3, #0
 80056cc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80056d6:	2b01      	cmp	r3, #1
 80056d8:	d101      	bne.n	80056de <HAL_SPI_TransmitReceive+0x26>
 80056da:	2302      	movs	r3, #2
 80056dc:	e18a      	b.n	80059f4 <HAL_SPI_TransmitReceive+0x33c>
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	2201      	movs	r2, #1
 80056e2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80056e6:	f7fc ff29 	bl	800253c <HAL_GetTick>
 80056ea:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80056f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	685b      	ldr	r3, [r3, #4]
 80056fa:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80056fc:	887b      	ldrh	r3, [r7, #2]
 80056fe:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005700:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005704:	2b01      	cmp	r3, #1
 8005706:	d00f      	beq.n	8005728 <HAL_SPI_TransmitReceive+0x70>
 8005708:	69fb      	ldr	r3, [r7, #28]
 800570a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800570e:	d107      	bne.n	8005720 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	689b      	ldr	r3, [r3, #8]
 8005714:	2b00      	cmp	r3, #0
 8005716:	d103      	bne.n	8005720 <HAL_SPI_TransmitReceive+0x68>
 8005718:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800571c:	2b04      	cmp	r3, #4
 800571e:	d003      	beq.n	8005728 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8005720:	2302      	movs	r3, #2
 8005722:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005726:	e15b      	b.n	80059e0 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005728:	68bb      	ldr	r3, [r7, #8]
 800572a:	2b00      	cmp	r3, #0
 800572c:	d005      	beq.n	800573a <HAL_SPI_TransmitReceive+0x82>
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	2b00      	cmp	r3, #0
 8005732:	d002      	beq.n	800573a <HAL_SPI_TransmitReceive+0x82>
 8005734:	887b      	ldrh	r3, [r7, #2]
 8005736:	2b00      	cmp	r3, #0
 8005738:	d103      	bne.n	8005742 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800573a:	2301      	movs	r3, #1
 800573c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005740:	e14e      	b.n	80059e0 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005748:	b2db      	uxtb	r3, r3
 800574a:	2b04      	cmp	r3, #4
 800574c:	d003      	beq.n	8005756 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	2205      	movs	r2, #5
 8005752:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	2200      	movs	r2, #0
 800575a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	687a      	ldr	r2, [r7, #4]
 8005760:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	887a      	ldrh	r2, [r7, #2]
 8005766:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	887a      	ldrh	r2, [r7, #2]
 800576c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	68ba      	ldr	r2, [r7, #8]
 8005772:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	887a      	ldrh	r2, [r7, #2]
 8005778:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	887a      	ldrh	r2, [r7, #2]
 800577e:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	2200      	movs	r2, #0
 8005784:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	2200      	movs	r2, #0
 800578a:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005796:	2b40      	cmp	r3, #64	; 0x40
 8005798:	d007      	beq.n	80057aa <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	681a      	ldr	r2, [r3, #0]
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80057a8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	68db      	ldr	r3, [r3, #12]
 80057ae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80057b2:	d178      	bne.n	80058a6 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	685b      	ldr	r3, [r3, #4]
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d002      	beq.n	80057c2 <HAL_SPI_TransmitReceive+0x10a>
 80057bc:	8b7b      	ldrh	r3, [r7, #26]
 80057be:	2b01      	cmp	r3, #1
 80057c0:	d166      	bne.n	8005890 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057c6:	881a      	ldrh	r2, [r3, #0]
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057d2:	1c9a      	adds	r2, r3, #2
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80057dc:	b29b      	uxth	r3, r3
 80057de:	3b01      	subs	r3, #1
 80057e0:	b29a      	uxth	r2, r3
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80057e6:	e053      	b.n	8005890 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	689b      	ldr	r3, [r3, #8]
 80057ee:	f003 0302 	and.w	r3, r3, #2
 80057f2:	2b02      	cmp	r3, #2
 80057f4:	d11b      	bne.n	800582e <HAL_SPI_TransmitReceive+0x176>
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80057fa:	b29b      	uxth	r3, r3
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d016      	beq.n	800582e <HAL_SPI_TransmitReceive+0x176>
 8005800:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005802:	2b01      	cmp	r3, #1
 8005804:	d113      	bne.n	800582e <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800580a:	881a      	ldrh	r2, [r3, #0]
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005816:	1c9a      	adds	r2, r3, #2
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005820:	b29b      	uxth	r3, r3
 8005822:	3b01      	subs	r3, #1
 8005824:	b29a      	uxth	r2, r3
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800582a:	2300      	movs	r3, #0
 800582c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	689b      	ldr	r3, [r3, #8]
 8005834:	f003 0301 	and.w	r3, r3, #1
 8005838:	2b01      	cmp	r3, #1
 800583a:	d119      	bne.n	8005870 <HAL_SPI_TransmitReceive+0x1b8>
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005840:	b29b      	uxth	r3, r3
 8005842:	2b00      	cmp	r3, #0
 8005844:	d014      	beq.n	8005870 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	68da      	ldr	r2, [r3, #12]
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005850:	b292      	uxth	r2, r2
 8005852:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005858:	1c9a      	adds	r2, r3, #2
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005862:	b29b      	uxth	r3, r3
 8005864:	3b01      	subs	r3, #1
 8005866:	b29a      	uxth	r2, r3
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800586c:	2301      	movs	r3, #1
 800586e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005870:	f7fc fe64 	bl	800253c <HAL_GetTick>
 8005874:	4602      	mov	r2, r0
 8005876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005878:	1ad3      	subs	r3, r2, r3
 800587a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800587c:	429a      	cmp	r2, r3
 800587e:	d807      	bhi.n	8005890 <HAL_SPI_TransmitReceive+0x1d8>
 8005880:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005882:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005886:	d003      	beq.n	8005890 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8005888:	2303      	movs	r3, #3
 800588a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800588e:	e0a7      	b.n	80059e0 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005894:	b29b      	uxth	r3, r3
 8005896:	2b00      	cmp	r3, #0
 8005898:	d1a6      	bne.n	80057e8 <HAL_SPI_TransmitReceive+0x130>
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800589e:	b29b      	uxth	r3, r3
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d1a1      	bne.n	80057e8 <HAL_SPI_TransmitReceive+0x130>
 80058a4:	e07c      	b.n	80059a0 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	685b      	ldr	r3, [r3, #4]
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d002      	beq.n	80058b4 <HAL_SPI_TransmitReceive+0x1fc>
 80058ae:	8b7b      	ldrh	r3, [r7, #26]
 80058b0:	2b01      	cmp	r3, #1
 80058b2:	d16b      	bne.n	800598c <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	330c      	adds	r3, #12
 80058be:	7812      	ldrb	r2, [r2, #0]
 80058c0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058c6:	1c5a      	adds	r2, r3, #1
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80058d0:	b29b      	uxth	r3, r3
 80058d2:	3b01      	subs	r3, #1
 80058d4:	b29a      	uxth	r2, r3
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80058da:	e057      	b.n	800598c <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	689b      	ldr	r3, [r3, #8]
 80058e2:	f003 0302 	and.w	r3, r3, #2
 80058e6:	2b02      	cmp	r3, #2
 80058e8:	d11c      	bne.n	8005924 <HAL_SPI_TransmitReceive+0x26c>
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80058ee:	b29b      	uxth	r3, r3
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d017      	beq.n	8005924 <HAL_SPI_TransmitReceive+0x26c>
 80058f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058f6:	2b01      	cmp	r3, #1
 80058f8:	d114      	bne.n	8005924 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	330c      	adds	r3, #12
 8005904:	7812      	ldrb	r2, [r2, #0]
 8005906:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800590c:	1c5a      	adds	r2, r3, #1
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005916:	b29b      	uxth	r3, r3
 8005918:	3b01      	subs	r3, #1
 800591a:	b29a      	uxth	r2, r3
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005920:	2300      	movs	r3, #0
 8005922:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	689b      	ldr	r3, [r3, #8]
 800592a:	f003 0301 	and.w	r3, r3, #1
 800592e:	2b01      	cmp	r3, #1
 8005930:	d119      	bne.n	8005966 <HAL_SPI_TransmitReceive+0x2ae>
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005936:	b29b      	uxth	r3, r3
 8005938:	2b00      	cmp	r3, #0
 800593a:	d014      	beq.n	8005966 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	68da      	ldr	r2, [r3, #12]
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005946:	b2d2      	uxtb	r2, r2
 8005948:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800594e:	1c5a      	adds	r2, r3, #1
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005958:	b29b      	uxth	r3, r3
 800595a:	3b01      	subs	r3, #1
 800595c:	b29a      	uxth	r2, r3
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005962:	2301      	movs	r3, #1
 8005964:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005966:	f7fc fde9 	bl	800253c <HAL_GetTick>
 800596a:	4602      	mov	r2, r0
 800596c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800596e:	1ad3      	subs	r3, r2, r3
 8005970:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005972:	429a      	cmp	r2, r3
 8005974:	d803      	bhi.n	800597e <HAL_SPI_TransmitReceive+0x2c6>
 8005976:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005978:	f1b3 3fff 	cmp.w	r3, #4294967295
 800597c:	d102      	bne.n	8005984 <HAL_SPI_TransmitReceive+0x2cc>
 800597e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005980:	2b00      	cmp	r3, #0
 8005982:	d103      	bne.n	800598c <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8005984:	2303      	movs	r3, #3
 8005986:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800598a:	e029      	b.n	80059e0 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005990:	b29b      	uxth	r3, r3
 8005992:	2b00      	cmp	r3, #0
 8005994:	d1a2      	bne.n	80058dc <HAL_SPI_TransmitReceive+0x224>
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800599a:	b29b      	uxth	r3, r3
 800599c:	2b00      	cmp	r3, #0
 800599e:	d19d      	bne.n	80058dc <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80059a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80059a2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80059a4:	68f8      	ldr	r0, [r7, #12]
 80059a6:	f000 f925 	bl	8005bf4 <SPI_EndRxTxTransaction>
 80059aa:	4603      	mov	r3, r0
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d006      	beq.n	80059be <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80059b0:	2301      	movs	r3, #1
 80059b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	2220      	movs	r2, #32
 80059ba:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80059bc:	e010      	b.n	80059e0 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	689b      	ldr	r3, [r3, #8]
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d10b      	bne.n	80059de <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80059c6:	2300      	movs	r3, #0
 80059c8:	617b      	str	r3, [r7, #20]
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	68db      	ldr	r3, [r3, #12]
 80059d0:	617b      	str	r3, [r7, #20]
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	689b      	ldr	r3, [r3, #8]
 80059d8:	617b      	str	r3, [r7, #20]
 80059da:	697b      	ldr	r3, [r7, #20]
 80059dc:	e000      	b.n	80059e0 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80059de:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	2201      	movs	r2, #1
 80059e4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	2200      	movs	r2, #0
 80059ec:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80059f0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80059f4:	4618      	mov	r0, r3
 80059f6:	3730      	adds	r7, #48	; 0x30
 80059f8:	46bd      	mov	sp, r7
 80059fa:	bd80      	pop	{r7, pc}

080059fc <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 80059fc:	b480      	push	{r7}
 80059fe:	b083      	sub	sp, #12
 8005a00:	af00      	add	r7, sp, #0
 8005a02:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005a0a:	b2db      	uxtb	r3, r3
}
 8005a0c:	4618      	mov	r0, r3
 8005a0e:	370c      	adds	r7, #12
 8005a10:	46bd      	mov	sp, r7
 8005a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a16:	4770      	bx	lr

08005a18 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005a18:	b580      	push	{r7, lr}
 8005a1a:	b088      	sub	sp, #32
 8005a1c:	af00      	add	r7, sp, #0
 8005a1e:	60f8      	str	r0, [r7, #12]
 8005a20:	60b9      	str	r1, [r7, #8]
 8005a22:	603b      	str	r3, [r7, #0]
 8005a24:	4613      	mov	r3, r2
 8005a26:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005a28:	f7fc fd88 	bl	800253c <HAL_GetTick>
 8005a2c:	4602      	mov	r2, r0
 8005a2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a30:	1a9b      	subs	r3, r3, r2
 8005a32:	683a      	ldr	r2, [r7, #0]
 8005a34:	4413      	add	r3, r2
 8005a36:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005a38:	f7fc fd80 	bl	800253c <HAL_GetTick>
 8005a3c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005a3e:	4b39      	ldr	r3, [pc, #228]	; (8005b24 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	015b      	lsls	r3, r3, #5
 8005a44:	0d1b      	lsrs	r3, r3, #20
 8005a46:	69fa      	ldr	r2, [r7, #28]
 8005a48:	fb02 f303 	mul.w	r3, r2, r3
 8005a4c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005a4e:	e054      	b.n	8005afa <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005a50:	683b      	ldr	r3, [r7, #0]
 8005a52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a56:	d050      	beq.n	8005afa <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005a58:	f7fc fd70 	bl	800253c <HAL_GetTick>
 8005a5c:	4602      	mov	r2, r0
 8005a5e:	69bb      	ldr	r3, [r7, #24]
 8005a60:	1ad3      	subs	r3, r2, r3
 8005a62:	69fa      	ldr	r2, [r7, #28]
 8005a64:	429a      	cmp	r2, r3
 8005a66:	d902      	bls.n	8005a6e <SPI_WaitFlagStateUntilTimeout+0x56>
 8005a68:	69fb      	ldr	r3, [r7, #28]
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d13d      	bne.n	8005aea <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	685a      	ldr	r2, [r3, #4]
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005a7c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	685b      	ldr	r3, [r3, #4]
 8005a82:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005a86:	d111      	bne.n	8005aac <SPI_WaitFlagStateUntilTimeout+0x94>
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	689b      	ldr	r3, [r3, #8]
 8005a8c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005a90:	d004      	beq.n	8005a9c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	689b      	ldr	r3, [r3, #8]
 8005a96:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005a9a:	d107      	bne.n	8005aac <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	681a      	ldr	r2, [r3, #0]
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005aaa:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ab0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005ab4:	d10f      	bne.n	8005ad6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	681a      	ldr	r2, [r3, #0]
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005ac4:	601a      	str	r2, [r3, #0]
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	681a      	ldr	r2, [r3, #0]
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005ad4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	2201      	movs	r2, #1
 8005ada:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	2200      	movs	r2, #0
 8005ae2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8005ae6:	2303      	movs	r3, #3
 8005ae8:	e017      	b.n	8005b1a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005aea:	697b      	ldr	r3, [r7, #20]
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d101      	bne.n	8005af4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005af0:	2300      	movs	r3, #0
 8005af2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005af4:	697b      	ldr	r3, [r7, #20]
 8005af6:	3b01      	subs	r3, #1
 8005af8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	689a      	ldr	r2, [r3, #8]
 8005b00:	68bb      	ldr	r3, [r7, #8]
 8005b02:	4013      	ands	r3, r2
 8005b04:	68ba      	ldr	r2, [r7, #8]
 8005b06:	429a      	cmp	r2, r3
 8005b08:	bf0c      	ite	eq
 8005b0a:	2301      	moveq	r3, #1
 8005b0c:	2300      	movne	r3, #0
 8005b0e:	b2db      	uxtb	r3, r3
 8005b10:	461a      	mov	r2, r3
 8005b12:	79fb      	ldrb	r3, [r7, #7]
 8005b14:	429a      	cmp	r2, r3
 8005b16:	d19b      	bne.n	8005a50 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005b18:	2300      	movs	r3, #0
}
 8005b1a:	4618      	mov	r0, r3
 8005b1c:	3720      	adds	r7, #32
 8005b1e:	46bd      	mov	sp, r7
 8005b20:	bd80      	pop	{r7, pc}
 8005b22:	bf00      	nop
 8005b24:	20000010 	.word	0x20000010

08005b28 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005b28:	b580      	push	{r7, lr}
 8005b2a:	b086      	sub	sp, #24
 8005b2c:	af02      	add	r7, sp, #8
 8005b2e:	60f8      	str	r0, [r7, #12]
 8005b30:	60b9      	str	r1, [r7, #8]
 8005b32:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	685b      	ldr	r3, [r3, #4]
 8005b38:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005b3c:	d111      	bne.n	8005b62 <SPI_EndRxTransaction+0x3a>
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	689b      	ldr	r3, [r3, #8]
 8005b42:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005b46:	d004      	beq.n	8005b52 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	689b      	ldr	r3, [r3, #8]
 8005b4c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005b50:	d107      	bne.n	8005b62 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	681a      	ldr	r2, [r3, #0]
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005b60:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	685b      	ldr	r3, [r3, #4]
 8005b66:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005b6a:	d12a      	bne.n	8005bc2 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	689b      	ldr	r3, [r3, #8]
 8005b70:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005b74:	d012      	beq.n	8005b9c <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	9300      	str	r3, [sp, #0]
 8005b7a:	68bb      	ldr	r3, [r7, #8]
 8005b7c:	2200      	movs	r2, #0
 8005b7e:	2180      	movs	r1, #128	; 0x80
 8005b80:	68f8      	ldr	r0, [r7, #12]
 8005b82:	f7ff ff49 	bl	8005a18 <SPI_WaitFlagStateUntilTimeout>
 8005b86:	4603      	mov	r3, r0
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d02d      	beq.n	8005be8 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b90:	f043 0220 	orr.w	r2, r3, #32
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8005b98:	2303      	movs	r3, #3
 8005b9a:	e026      	b.n	8005bea <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	9300      	str	r3, [sp, #0]
 8005ba0:	68bb      	ldr	r3, [r7, #8]
 8005ba2:	2200      	movs	r2, #0
 8005ba4:	2101      	movs	r1, #1
 8005ba6:	68f8      	ldr	r0, [r7, #12]
 8005ba8:	f7ff ff36 	bl	8005a18 <SPI_WaitFlagStateUntilTimeout>
 8005bac:	4603      	mov	r3, r0
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d01a      	beq.n	8005be8 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005bb6:	f043 0220 	orr.w	r2, r3, #32
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8005bbe:	2303      	movs	r3, #3
 8005bc0:	e013      	b.n	8005bea <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	9300      	str	r3, [sp, #0]
 8005bc6:	68bb      	ldr	r3, [r7, #8]
 8005bc8:	2200      	movs	r2, #0
 8005bca:	2101      	movs	r1, #1
 8005bcc:	68f8      	ldr	r0, [r7, #12]
 8005bce:	f7ff ff23 	bl	8005a18 <SPI_WaitFlagStateUntilTimeout>
 8005bd2:	4603      	mov	r3, r0
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d007      	beq.n	8005be8 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005bdc:	f043 0220 	orr.w	r2, r3, #32
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005be4:	2303      	movs	r3, #3
 8005be6:	e000      	b.n	8005bea <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8005be8:	2300      	movs	r3, #0
}
 8005bea:	4618      	mov	r0, r3
 8005bec:	3710      	adds	r7, #16
 8005bee:	46bd      	mov	sp, r7
 8005bf0:	bd80      	pop	{r7, pc}
	...

08005bf4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005bf4:	b580      	push	{r7, lr}
 8005bf6:	b088      	sub	sp, #32
 8005bf8:	af02      	add	r7, sp, #8
 8005bfa:	60f8      	str	r0, [r7, #12]
 8005bfc:	60b9      	str	r1, [r7, #8]
 8005bfe:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005c00:	4b1b      	ldr	r3, [pc, #108]	; (8005c70 <SPI_EndRxTxTransaction+0x7c>)
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	4a1b      	ldr	r2, [pc, #108]	; (8005c74 <SPI_EndRxTxTransaction+0x80>)
 8005c06:	fba2 2303 	umull	r2, r3, r2, r3
 8005c0a:	0d5b      	lsrs	r3, r3, #21
 8005c0c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005c10:	fb02 f303 	mul.w	r3, r2, r3
 8005c14:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	685b      	ldr	r3, [r3, #4]
 8005c1a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005c1e:	d112      	bne.n	8005c46 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	9300      	str	r3, [sp, #0]
 8005c24:	68bb      	ldr	r3, [r7, #8]
 8005c26:	2200      	movs	r2, #0
 8005c28:	2180      	movs	r1, #128	; 0x80
 8005c2a:	68f8      	ldr	r0, [r7, #12]
 8005c2c:	f7ff fef4 	bl	8005a18 <SPI_WaitFlagStateUntilTimeout>
 8005c30:	4603      	mov	r3, r0
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d016      	beq.n	8005c64 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c3a:	f043 0220 	orr.w	r2, r3, #32
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005c42:	2303      	movs	r3, #3
 8005c44:	e00f      	b.n	8005c66 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005c46:	697b      	ldr	r3, [r7, #20]
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d00a      	beq.n	8005c62 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8005c4c:	697b      	ldr	r3, [r7, #20]
 8005c4e:	3b01      	subs	r3, #1
 8005c50:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	689b      	ldr	r3, [r3, #8]
 8005c58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c5c:	2b80      	cmp	r3, #128	; 0x80
 8005c5e:	d0f2      	beq.n	8005c46 <SPI_EndRxTxTransaction+0x52>
 8005c60:	e000      	b.n	8005c64 <SPI_EndRxTxTransaction+0x70>
        break;
 8005c62:	bf00      	nop
  }

  return HAL_OK;
 8005c64:	2300      	movs	r3, #0
}
 8005c66:	4618      	mov	r0, r3
 8005c68:	3718      	adds	r7, #24
 8005c6a:	46bd      	mov	sp, r7
 8005c6c:	bd80      	pop	{r7, pc}
 8005c6e:	bf00      	nop
 8005c70:	20000010 	.word	0x20000010
 8005c74:	165e9f81 	.word	0x165e9f81

08005c78 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005c78:	b580      	push	{r7, lr}
 8005c7a:	b082      	sub	sp, #8
 8005c7c:	af00      	add	r7, sp, #0
 8005c7e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d101      	bne.n	8005c8a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005c86:	2301      	movs	r3, #1
 8005c88:	e041      	b.n	8005d0e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c90:	b2db      	uxtb	r3, r3
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d106      	bne.n	8005ca4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	2200      	movs	r2, #0
 8005c9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005c9e:	6878      	ldr	r0, [r7, #4]
 8005ca0:	f7fc fa20 	bl	80020e4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	2202      	movs	r2, #2
 8005ca8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681a      	ldr	r2, [r3, #0]
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	3304      	adds	r3, #4
 8005cb4:	4619      	mov	r1, r3
 8005cb6:	4610      	mov	r0, r2
 8005cb8:	f000 fa96 	bl	80061e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	2201      	movs	r2, #1
 8005cc0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	2201      	movs	r2, #1
 8005cc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	2201      	movs	r2, #1
 8005cd0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	2201      	movs	r2, #1
 8005cd8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	2201      	movs	r2, #1
 8005ce0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	2201      	movs	r2, #1
 8005ce8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	2201      	movs	r2, #1
 8005cf0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	2201      	movs	r2, #1
 8005cf8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	2201      	movs	r2, #1
 8005d00:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	2201      	movs	r2, #1
 8005d08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005d0c:	2300      	movs	r3, #0
}
 8005d0e:	4618      	mov	r0, r3
 8005d10:	3708      	adds	r7, #8
 8005d12:	46bd      	mov	sp, r7
 8005d14:	bd80      	pop	{r7, pc}
	...

08005d18 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005d18:	b480      	push	{r7}
 8005d1a:	b085      	sub	sp, #20
 8005d1c:	af00      	add	r7, sp, #0
 8005d1e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d26:	b2db      	uxtb	r3, r3
 8005d28:	2b01      	cmp	r3, #1
 8005d2a:	d001      	beq.n	8005d30 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005d2c:	2301      	movs	r3, #1
 8005d2e:	e04e      	b.n	8005dce <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	2202      	movs	r2, #2
 8005d34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	68da      	ldr	r2, [r3, #12]
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	f042 0201 	orr.w	r2, r2, #1
 8005d46:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	4a23      	ldr	r2, [pc, #140]	; (8005ddc <HAL_TIM_Base_Start_IT+0xc4>)
 8005d4e:	4293      	cmp	r3, r2
 8005d50:	d022      	beq.n	8005d98 <HAL_TIM_Base_Start_IT+0x80>
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d5a:	d01d      	beq.n	8005d98 <HAL_TIM_Base_Start_IT+0x80>
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	4a1f      	ldr	r2, [pc, #124]	; (8005de0 <HAL_TIM_Base_Start_IT+0xc8>)
 8005d62:	4293      	cmp	r3, r2
 8005d64:	d018      	beq.n	8005d98 <HAL_TIM_Base_Start_IT+0x80>
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	4a1e      	ldr	r2, [pc, #120]	; (8005de4 <HAL_TIM_Base_Start_IT+0xcc>)
 8005d6c:	4293      	cmp	r3, r2
 8005d6e:	d013      	beq.n	8005d98 <HAL_TIM_Base_Start_IT+0x80>
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	4a1c      	ldr	r2, [pc, #112]	; (8005de8 <HAL_TIM_Base_Start_IT+0xd0>)
 8005d76:	4293      	cmp	r3, r2
 8005d78:	d00e      	beq.n	8005d98 <HAL_TIM_Base_Start_IT+0x80>
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	4a1b      	ldr	r2, [pc, #108]	; (8005dec <HAL_TIM_Base_Start_IT+0xd4>)
 8005d80:	4293      	cmp	r3, r2
 8005d82:	d009      	beq.n	8005d98 <HAL_TIM_Base_Start_IT+0x80>
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	4a19      	ldr	r2, [pc, #100]	; (8005df0 <HAL_TIM_Base_Start_IT+0xd8>)
 8005d8a:	4293      	cmp	r3, r2
 8005d8c:	d004      	beq.n	8005d98 <HAL_TIM_Base_Start_IT+0x80>
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	4a18      	ldr	r2, [pc, #96]	; (8005df4 <HAL_TIM_Base_Start_IT+0xdc>)
 8005d94:	4293      	cmp	r3, r2
 8005d96:	d111      	bne.n	8005dbc <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	689b      	ldr	r3, [r3, #8]
 8005d9e:	f003 0307 	and.w	r3, r3, #7
 8005da2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	2b06      	cmp	r3, #6
 8005da8:	d010      	beq.n	8005dcc <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	681a      	ldr	r2, [r3, #0]
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	f042 0201 	orr.w	r2, r2, #1
 8005db8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005dba:	e007      	b.n	8005dcc <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	681a      	ldr	r2, [r3, #0]
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	f042 0201 	orr.w	r2, r2, #1
 8005dca:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005dcc:	2300      	movs	r3, #0
}
 8005dce:	4618      	mov	r0, r3
 8005dd0:	3714      	adds	r7, #20
 8005dd2:	46bd      	mov	sp, r7
 8005dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd8:	4770      	bx	lr
 8005dda:	bf00      	nop
 8005ddc:	40010000 	.word	0x40010000
 8005de0:	40000400 	.word	0x40000400
 8005de4:	40000800 	.word	0x40000800
 8005de8:	40000c00 	.word	0x40000c00
 8005dec:	40010400 	.word	0x40010400
 8005df0:	40014000 	.word	0x40014000
 8005df4:	40001800 	.word	0x40001800

08005df8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005df8:	b580      	push	{r7, lr}
 8005dfa:	b082      	sub	sp, #8
 8005dfc:	af00      	add	r7, sp, #0
 8005dfe:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	691b      	ldr	r3, [r3, #16]
 8005e06:	f003 0302 	and.w	r3, r3, #2
 8005e0a:	2b02      	cmp	r3, #2
 8005e0c:	d122      	bne.n	8005e54 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	68db      	ldr	r3, [r3, #12]
 8005e14:	f003 0302 	and.w	r3, r3, #2
 8005e18:	2b02      	cmp	r3, #2
 8005e1a:	d11b      	bne.n	8005e54 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	f06f 0202 	mvn.w	r2, #2
 8005e24:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	2201      	movs	r2, #1
 8005e2a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	699b      	ldr	r3, [r3, #24]
 8005e32:	f003 0303 	and.w	r3, r3, #3
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d003      	beq.n	8005e42 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005e3a:	6878      	ldr	r0, [r7, #4]
 8005e3c:	f000 f9b5 	bl	80061aa <HAL_TIM_IC_CaptureCallback>
 8005e40:	e005      	b.n	8005e4e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e42:	6878      	ldr	r0, [r7, #4]
 8005e44:	f000 f9a7 	bl	8006196 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e48:	6878      	ldr	r0, [r7, #4]
 8005e4a:	f000 f9b8 	bl	80061be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	2200      	movs	r2, #0
 8005e52:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	691b      	ldr	r3, [r3, #16]
 8005e5a:	f003 0304 	and.w	r3, r3, #4
 8005e5e:	2b04      	cmp	r3, #4
 8005e60:	d122      	bne.n	8005ea8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	68db      	ldr	r3, [r3, #12]
 8005e68:	f003 0304 	and.w	r3, r3, #4
 8005e6c:	2b04      	cmp	r3, #4
 8005e6e:	d11b      	bne.n	8005ea8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	f06f 0204 	mvn.w	r2, #4
 8005e78:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	2202      	movs	r2, #2
 8005e7e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	699b      	ldr	r3, [r3, #24]
 8005e86:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d003      	beq.n	8005e96 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005e8e:	6878      	ldr	r0, [r7, #4]
 8005e90:	f000 f98b 	bl	80061aa <HAL_TIM_IC_CaptureCallback>
 8005e94:	e005      	b.n	8005ea2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e96:	6878      	ldr	r0, [r7, #4]
 8005e98:	f000 f97d 	bl	8006196 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e9c:	6878      	ldr	r0, [r7, #4]
 8005e9e:	f000 f98e 	bl	80061be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	2200      	movs	r2, #0
 8005ea6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	691b      	ldr	r3, [r3, #16]
 8005eae:	f003 0308 	and.w	r3, r3, #8
 8005eb2:	2b08      	cmp	r3, #8
 8005eb4:	d122      	bne.n	8005efc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	68db      	ldr	r3, [r3, #12]
 8005ebc:	f003 0308 	and.w	r3, r3, #8
 8005ec0:	2b08      	cmp	r3, #8
 8005ec2:	d11b      	bne.n	8005efc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	f06f 0208 	mvn.w	r2, #8
 8005ecc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	2204      	movs	r2, #4
 8005ed2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	69db      	ldr	r3, [r3, #28]
 8005eda:	f003 0303 	and.w	r3, r3, #3
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d003      	beq.n	8005eea <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005ee2:	6878      	ldr	r0, [r7, #4]
 8005ee4:	f000 f961 	bl	80061aa <HAL_TIM_IC_CaptureCallback>
 8005ee8:	e005      	b.n	8005ef6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005eea:	6878      	ldr	r0, [r7, #4]
 8005eec:	f000 f953 	bl	8006196 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ef0:	6878      	ldr	r0, [r7, #4]
 8005ef2:	f000 f964 	bl	80061be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	2200      	movs	r2, #0
 8005efa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	691b      	ldr	r3, [r3, #16]
 8005f02:	f003 0310 	and.w	r3, r3, #16
 8005f06:	2b10      	cmp	r3, #16
 8005f08:	d122      	bne.n	8005f50 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	68db      	ldr	r3, [r3, #12]
 8005f10:	f003 0310 	and.w	r3, r3, #16
 8005f14:	2b10      	cmp	r3, #16
 8005f16:	d11b      	bne.n	8005f50 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	f06f 0210 	mvn.w	r2, #16
 8005f20:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	2208      	movs	r2, #8
 8005f26:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	69db      	ldr	r3, [r3, #28]
 8005f2e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d003      	beq.n	8005f3e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005f36:	6878      	ldr	r0, [r7, #4]
 8005f38:	f000 f937 	bl	80061aa <HAL_TIM_IC_CaptureCallback>
 8005f3c:	e005      	b.n	8005f4a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f3e:	6878      	ldr	r0, [r7, #4]
 8005f40:	f000 f929 	bl	8006196 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f44:	6878      	ldr	r0, [r7, #4]
 8005f46:	f000 f93a 	bl	80061be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	2200      	movs	r2, #0
 8005f4e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	691b      	ldr	r3, [r3, #16]
 8005f56:	f003 0301 	and.w	r3, r3, #1
 8005f5a:	2b01      	cmp	r3, #1
 8005f5c:	d10e      	bne.n	8005f7c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	68db      	ldr	r3, [r3, #12]
 8005f64:	f003 0301 	and.w	r3, r3, #1
 8005f68:	2b01      	cmp	r3, #1
 8005f6a:	d107      	bne.n	8005f7c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	f06f 0201 	mvn.w	r2, #1
 8005f74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005f76:	6878      	ldr	r0, [r7, #4]
 8005f78:	f7fb ff40 	bl	8001dfc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	691b      	ldr	r3, [r3, #16]
 8005f82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f86:	2b80      	cmp	r3, #128	; 0x80
 8005f88:	d10e      	bne.n	8005fa8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	68db      	ldr	r3, [r3, #12]
 8005f90:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f94:	2b80      	cmp	r3, #128	; 0x80
 8005f96:	d107      	bne.n	8005fa8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005fa0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005fa2:	6878      	ldr	r0, [r7, #4]
 8005fa4:	f000 fae0 	bl	8006568 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	691b      	ldr	r3, [r3, #16]
 8005fae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fb2:	2b40      	cmp	r3, #64	; 0x40
 8005fb4:	d10e      	bne.n	8005fd4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	68db      	ldr	r3, [r3, #12]
 8005fbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fc0:	2b40      	cmp	r3, #64	; 0x40
 8005fc2:	d107      	bne.n	8005fd4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005fcc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005fce:	6878      	ldr	r0, [r7, #4]
 8005fd0:	f000 f8ff 	bl	80061d2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	691b      	ldr	r3, [r3, #16]
 8005fda:	f003 0320 	and.w	r3, r3, #32
 8005fde:	2b20      	cmp	r3, #32
 8005fe0:	d10e      	bne.n	8006000 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	68db      	ldr	r3, [r3, #12]
 8005fe8:	f003 0320 	and.w	r3, r3, #32
 8005fec:	2b20      	cmp	r3, #32
 8005fee:	d107      	bne.n	8006000 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	f06f 0220 	mvn.w	r2, #32
 8005ff8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005ffa:	6878      	ldr	r0, [r7, #4]
 8005ffc:	f000 faaa 	bl	8006554 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006000:	bf00      	nop
 8006002:	3708      	adds	r7, #8
 8006004:	46bd      	mov	sp, r7
 8006006:	bd80      	pop	{r7, pc}

08006008 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006008:	b580      	push	{r7, lr}
 800600a:	b084      	sub	sp, #16
 800600c:	af00      	add	r7, sp, #0
 800600e:	6078      	str	r0, [r7, #4]
 8006010:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006012:	2300      	movs	r3, #0
 8006014:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800601c:	2b01      	cmp	r3, #1
 800601e:	d101      	bne.n	8006024 <HAL_TIM_ConfigClockSource+0x1c>
 8006020:	2302      	movs	r3, #2
 8006022:	e0b4      	b.n	800618e <HAL_TIM_ConfigClockSource+0x186>
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	2201      	movs	r2, #1
 8006028:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	2202      	movs	r2, #2
 8006030:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	689b      	ldr	r3, [r3, #8]
 800603a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800603c:	68bb      	ldr	r3, [r7, #8]
 800603e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006042:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006044:	68bb      	ldr	r3, [r7, #8]
 8006046:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800604a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	68ba      	ldr	r2, [r7, #8]
 8006052:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006054:	683b      	ldr	r3, [r7, #0]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800605c:	d03e      	beq.n	80060dc <HAL_TIM_ConfigClockSource+0xd4>
 800605e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006062:	f200 8087 	bhi.w	8006174 <HAL_TIM_ConfigClockSource+0x16c>
 8006066:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800606a:	f000 8086 	beq.w	800617a <HAL_TIM_ConfigClockSource+0x172>
 800606e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006072:	d87f      	bhi.n	8006174 <HAL_TIM_ConfigClockSource+0x16c>
 8006074:	2b70      	cmp	r3, #112	; 0x70
 8006076:	d01a      	beq.n	80060ae <HAL_TIM_ConfigClockSource+0xa6>
 8006078:	2b70      	cmp	r3, #112	; 0x70
 800607a:	d87b      	bhi.n	8006174 <HAL_TIM_ConfigClockSource+0x16c>
 800607c:	2b60      	cmp	r3, #96	; 0x60
 800607e:	d050      	beq.n	8006122 <HAL_TIM_ConfigClockSource+0x11a>
 8006080:	2b60      	cmp	r3, #96	; 0x60
 8006082:	d877      	bhi.n	8006174 <HAL_TIM_ConfigClockSource+0x16c>
 8006084:	2b50      	cmp	r3, #80	; 0x50
 8006086:	d03c      	beq.n	8006102 <HAL_TIM_ConfigClockSource+0xfa>
 8006088:	2b50      	cmp	r3, #80	; 0x50
 800608a:	d873      	bhi.n	8006174 <HAL_TIM_ConfigClockSource+0x16c>
 800608c:	2b40      	cmp	r3, #64	; 0x40
 800608e:	d058      	beq.n	8006142 <HAL_TIM_ConfigClockSource+0x13a>
 8006090:	2b40      	cmp	r3, #64	; 0x40
 8006092:	d86f      	bhi.n	8006174 <HAL_TIM_ConfigClockSource+0x16c>
 8006094:	2b30      	cmp	r3, #48	; 0x30
 8006096:	d064      	beq.n	8006162 <HAL_TIM_ConfigClockSource+0x15a>
 8006098:	2b30      	cmp	r3, #48	; 0x30
 800609a:	d86b      	bhi.n	8006174 <HAL_TIM_ConfigClockSource+0x16c>
 800609c:	2b20      	cmp	r3, #32
 800609e:	d060      	beq.n	8006162 <HAL_TIM_ConfigClockSource+0x15a>
 80060a0:	2b20      	cmp	r3, #32
 80060a2:	d867      	bhi.n	8006174 <HAL_TIM_ConfigClockSource+0x16c>
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d05c      	beq.n	8006162 <HAL_TIM_ConfigClockSource+0x15a>
 80060a8:	2b10      	cmp	r3, #16
 80060aa:	d05a      	beq.n	8006162 <HAL_TIM_ConfigClockSource+0x15a>
 80060ac:	e062      	b.n	8006174 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	6818      	ldr	r0, [r3, #0]
 80060b2:	683b      	ldr	r3, [r7, #0]
 80060b4:	6899      	ldr	r1, [r3, #8]
 80060b6:	683b      	ldr	r3, [r7, #0]
 80060b8:	685a      	ldr	r2, [r3, #4]
 80060ba:	683b      	ldr	r3, [r7, #0]
 80060bc:	68db      	ldr	r3, [r3, #12]
 80060be:	f000 f9ad 	bl	800641c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	689b      	ldr	r3, [r3, #8]
 80060c8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80060ca:	68bb      	ldr	r3, [r7, #8]
 80060cc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80060d0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	68ba      	ldr	r2, [r7, #8]
 80060d8:	609a      	str	r2, [r3, #8]
      break;
 80060da:	e04f      	b.n	800617c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	6818      	ldr	r0, [r3, #0]
 80060e0:	683b      	ldr	r3, [r7, #0]
 80060e2:	6899      	ldr	r1, [r3, #8]
 80060e4:	683b      	ldr	r3, [r7, #0]
 80060e6:	685a      	ldr	r2, [r3, #4]
 80060e8:	683b      	ldr	r3, [r7, #0]
 80060ea:	68db      	ldr	r3, [r3, #12]
 80060ec:	f000 f996 	bl	800641c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	689a      	ldr	r2, [r3, #8]
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80060fe:	609a      	str	r2, [r3, #8]
      break;
 8006100:	e03c      	b.n	800617c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	6818      	ldr	r0, [r3, #0]
 8006106:	683b      	ldr	r3, [r7, #0]
 8006108:	6859      	ldr	r1, [r3, #4]
 800610a:	683b      	ldr	r3, [r7, #0]
 800610c:	68db      	ldr	r3, [r3, #12]
 800610e:	461a      	mov	r2, r3
 8006110:	f000 f90a 	bl	8006328 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	2150      	movs	r1, #80	; 0x50
 800611a:	4618      	mov	r0, r3
 800611c:	f000 f963 	bl	80063e6 <TIM_ITRx_SetConfig>
      break;
 8006120:	e02c      	b.n	800617c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	6818      	ldr	r0, [r3, #0]
 8006126:	683b      	ldr	r3, [r7, #0]
 8006128:	6859      	ldr	r1, [r3, #4]
 800612a:	683b      	ldr	r3, [r7, #0]
 800612c:	68db      	ldr	r3, [r3, #12]
 800612e:	461a      	mov	r2, r3
 8006130:	f000 f929 	bl	8006386 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	2160      	movs	r1, #96	; 0x60
 800613a:	4618      	mov	r0, r3
 800613c:	f000 f953 	bl	80063e6 <TIM_ITRx_SetConfig>
      break;
 8006140:	e01c      	b.n	800617c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	6818      	ldr	r0, [r3, #0]
 8006146:	683b      	ldr	r3, [r7, #0]
 8006148:	6859      	ldr	r1, [r3, #4]
 800614a:	683b      	ldr	r3, [r7, #0]
 800614c:	68db      	ldr	r3, [r3, #12]
 800614e:	461a      	mov	r2, r3
 8006150:	f000 f8ea 	bl	8006328 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	2140      	movs	r1, #64	; 0x40
 800615a:	4618      	mov	r0, r3
 800615c:	f000 f943 	bl	80063e6 <TIM_ITRx_SetConfig>
      break;
 8006160:	e00c      	b.n	800617c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681a      	ldr	r2, [r3, #0]
 8006166:	683b      	ldr	r3, [r7, #0]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	4619      	mov	r1, r3
 800616c:	4610      	mov	r0, r2
 800616e:	f000 f93a 	bl	80063e6 <TIM_ITRx_SetConfig>
      break;
 8006172:	e003      	b.n	800617c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006174:	2301      	movs	r3, #1
 8006176:	73fb      	strb	r3, [r7, #15]
      break;
 8006178:	e000      	b.n	800617c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800617a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	2201      	movs	r2, #1
 8006180:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	2200      	movs	r2, #0
 8006188:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800618c:	7bfb      	ldrb	r3, [r7, #15]
}
 800618e:	4618      	mov	r0, r3
 8006190:	3710      	adds	r7, #16
 8006192:	46bd      	mov	sp, r7
 8006194:	bd80      	pop	{r7, pc}

08006196 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006196:	b480      	push	{r7}
 8006198:	b083      	sub	sp, #12
 800619a:	af00      	add	r7, sp, #0
 800619c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800619e:	bf00      	nop
 80061a0:	370c      	adds	r7, #12
 80061a2:	46bd      	mov	sp, r7
 80061a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a8:	4770      	bx	lr

080061aa <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80061aa:	b480      	push	{r7}
 80061ac:	b083      	sub	sp, #12
 80061ae:	af00      	add	r7, sp, #0
 80061b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80061b2:	bf00      	nop
 80061b4:	370c      	adds	r7, #12
 80061b6:	46bd      	mov	sp, r7
 80061b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061bc:	4770      	bx	lr

080061be <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80061be:	b480      	push	{r7}
 80061c0:	b083      	sub	sp, #12
 80061c2:	af00      	add	r7, sp, #0
 80061c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80061c6:	bf00      	nop
 80061c8:	370c      	adds	r7, #12
 80061ca:	46bd      	mov	sp, r7
 80061cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d0:	4770      	bx	lr

080061d2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80061d2:	b480      	push	{r7}
 80061d4:	b083      	sub	sp, #12
 80061d6:	af00      	add	r7, sp, #0
 80061d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80061da:	bf00      	nop
 80061dc:	370c      	adds	r7, #12
 80061de:	46bd      	mov	sp, r7
 80061e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e4:	4770      	bx	lr
	...

080061e8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80061e8:	b480      	push	{r7}
 80061ea:	b085      	sub	sp, #20
 80061ec:	af00      	add	r7, sp, #0
 80061ee:	6078      	str	r0, [r7, #4]
 80061f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	4a40      	ldr	r2, [pc, #256]	; (80062fc <TIM_Base_SetConfig+0x114>)
 80061fc:	4293      	cmp	r3, r2
 80061fe:	d013      	beq.n	8006228 <TIM_Base_SetConfig+0x40>
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006206:	d00f      	beq.n	8006228 <TIM_Base_SetConfig+0x40>
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	4a3d      	ldr	r2, [pc, #244]	; (8006300 <TIM_Base_SetConfig+0x118>)
 800620c:	4293      	cmp	r3, r2
 800620e:	d00b      	beq.n	8006228 <TIM_Base_SetConfig+0x40>
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	4a3c      	ldr	r2, [pc, #240]	; (8006304 <TIM_Base_SetConfig+0x11c>)
 8006214:	4293      	cmp	r3, r2
 8006216:	d007      	beq.n	8006228 <TIM_Base_SetConfig+0x40>
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	4a3b      	ldr	r2, [pc, #236]	; (8006308 <TIM_Base_SetConfig+0x120>)
 800621c:	4293      	cmp	r3, r2
 800621e:	d003      	beq.n	8006228 <TIM_Base_SetConfig+0x40>
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	4a3a      	ldr	r2, [pc, #232]	; (800630c <TIM_Base_SetConfig+0x124>)
 8006224:	4293      	cmp	r3, r2
 8006226:	d108      	bne.n	800623a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800622e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006230:	683b      	ldr	r3, [r7, #0]
 8006232:	685b      	ldr	r3, [r3, #4]
 8006234:	68fa      	ldr	r2, [r7, #12]
 8006236:	4313      	orrs	r3, r2
 8006238:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	4a2f      	ldr	r2, [pc, #188]	; (80062fc <TIM_Base_SetConfig+0x114>)
 800623e:	4293      	cmp	r3, r2
 8006240:	d02b      	beq.n	800629a <TIM_Base_SetConfig+0xb2>
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006248:	d027      	beq.n	800629a <TIM_Base_SetConfig+0xb2>
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	4a2c      	ldr	r2, [pc, #176]	; (8006300 <TIM_Base_SetConfig+0x118>)
 800624e:	4293      	cmp	r3, r2
 8006250:	d023      	beq.n	800629a <TIM_Base_SetConfig+0xb2>
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	4a2b      	ldr	r2, [pc, #172]	; (8006304 <TIM_Base_SetConfig+0x11c>)
 8006256:	4293      	cmp	r3, r2
 8006258:	d01f      	beq.n	800629a <TIM_Base_SetConfig+0xb2>
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	4a2a      	ldr	r2, [pc, #168]	; (8006308 <TIM_Base_SetConfig+0x120>)
 800625e:	4293      	cmp	r3, r2
 8006260:	d01b      	beq.n	800629a <TIM_Base_SetConfig+0xb2>
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	4a29      	ldr	r2, [pc, #164]	; (800630c <TIM_Base_SetConfig+0x124>)
 8006266:	4293      	cmp	r3, r2
 8006268:	d017      	beq.n	800629a <TIM_Base_SetConfig+0xb2>
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	4a28      	ldr	r2, [pc, #160]	; (8006310 <TIM_Base_SetConfig+0x128>)
 800626e:	4293      	cmp	r3, r2
 8006270:	d013      	beq.n	800629a <TIM_Base_SetConfig+0xb2>
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	4a27      	ldr	r2, [pc, #156]	; (8006314 <TIM_Base_SetConfig+0x12c>)
 8006276:	4293      	cmp	r3, r2
 8006278:	d00f      	beq.n	800629a <TIM_Base_SetConfig+0xb2>
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	4a26      	ldr	r2, [pc, #152]	; (8006318 <TIM_Base_SetConfig+0x130>)
 800627e:	4293      	cmp	r3, r2
 8006280:	d00b      	beq.n	800629a <TIM_Base_SetConfig+0xb2>
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	4a25      	ldr	r2, [pc, #148]	; (800631c <TIM_Base_SetConfig+0x134>)
 8006286:	4293      	cmp	r3, r2
 8006288:	d007      	beq.n	800629a <TIM_Base_SetConfig+0xb2>
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	4a24      	ldr	r2, [pc, #144]	; (8006320 <TIM_Base_SetConfig+0x138>)
 800628e:	4293      	cmp	r3, r2
 8006290:	d003      	beq.n	800629a <TIM_Base_SetConfig+0xb2>
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	4a23      	ldr	r2, [pc, #140]	; (8006324 <TIM_Base_SetConfig+0x13c>)
 8006296:	4293      	cmp	r3, r2
 8006298:	d108      	bne.n	80062ac <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80062a0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80062a2:	683b      	ldr	r3, [r7, #0]
 80062a4:	68db      	ldr	r3, [r3, #12]
 80062a6:	68fa      	ldr	r2, [r7, #12]
 80062a8:	4313      	orrs	r3, r2
 80062aa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80062b2:	683b      	ldr	r3, [r7, #0]
 80062b4:	695b      	ldr	r3, [r3, #20]
 80062b6:	4313      	orrs	r3, r2
 80062b8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	68fa      	ldr	r2, [r7, #12]
 80062be:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80062c0:	683b      	ldr	r3, [r7, #0]
 80062c2:	689a      	ldr	r2, [r3, #8]
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80062c8:	683b      	ldr	r3, [r7, #0]
 80062ca:	681a      	ldr	r2, [r3, #0]
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	4a0a      	ldr	r2, [pc, #40]	; (80062fc <TIM_Base_SetConfig+0x114>)
 80062d4:	4293      	cmp	r3, r2
 80062d6:	d003      	beq.n	80062e0 <TIM_Base_SetConfig+0xf8>
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	4a0c      	ldr	r2, [pc, #48]	; (800630c <TIM_Base_SetConfig+0x124>)
 80062dc:	4293      	cmp	r3, r2
 80062de:	d103      	bne.n	80062e8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80062e0:	683b      	ldr	r3, [r7, #0]
 80062e2:	691a      	ldr	r2, [r3, #16]
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	2201      	movs	r2, #1
 80062ec:	615a      	str	r2, [r3, #20]
}
 80062ee:	bf00      	nop
 80062f0:	3714      	adds	r7, #20
 80062f2:	46bd      	mov	sp, r7
 80062f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f8:	4770      	bx	lr
 80062fa:	bf00      	nop
 80062fc:	40010000 	.word	0x40010000
 8006300:	40000400 	.word	0x40000400
 8006304:	40000800 	.word	0x40000800
 8006308:	40000c00 	.word	0x40000c00
 800630c:	40010400 	.word	0x40010400
 8006310:	40014000 	.word	0x40014000
 8006314:	40014400 	.word	0x40014400
 8006318:	40014800 	.word	0x40014800
 800631c:	40001800 	.word	0x40001800
 8006320:	40001c00 	.word	0x40001c00
 8006324:	40002000 	.word	0x40002000

08006328 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006328:	b480      	push	{r7}
 800632a:	b087      	sub	sp, #28
 800632c:	af00      	add	r7, sp, #0
 800632e:	60f8      	str	r0, [r7, #12]
 8006330:	60b9      	str	r1, [r7, #8]
 8006332:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	6a1b      	ldr	r3, [r3, #32]
 8006338:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	6a1b      	ldr	r3, [r3, #32]
 800633e:	f023 0201 	bic.w	r2, r3, #1
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	699b      	ldr	r3, [r3, #24]
 800634a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800634c:	693b      	ldr	r3, [r7, #16]
 800634e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006352:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	011b      	lsls	r3, r3, #4
 8006358:	693a      	ldr	r2, [r7, #16]
 800635a:	4313      	orrs	r3, r2
 800635c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800635e:	697b      	ldr	r3, [r7, #20]
 8006360:	f023 030a 	bic.w	r3, r3, #10
 8006364:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006366:	697a      	ldr	r2, [r7, #20]
 8006368:	68bb      	ldr	r3, [r7, #8]
 800636a:	4313      	orrs	r3, r2
 800636c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	693a      	ldr	r2, [r7, #16]
 8006372:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	697a      	ldr	r2, [r7, #20]
 8006378:	621a      	str	r2, [r3, #32]
}
 800637a:	bf00      	nop
 800637c:	371c      	adds	r7, #28
 800637e:	46bd      	mov	sp, r7
 8006380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006384:	4770      	bx	lr

08006386 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006386:	b480      	push	{r7}
 8006388:	b087      	sub	sp, #28
 800638a:	af00      	add	r7, sp, #0
 800638c:	60f8      	str	r0, [r7, #12]
 800638e:	60b9      	str	r1, [r7, #8]
 8006390:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	6a1b      	ldr	r3, [r3, #32]
 8006396:	f023 0210 	bic.w	r2, r3, #16
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	699b      	ldr	r3, [r3, #24]
 80063a2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	6a1b      	ldr	r3, [r3, #32]
 80063a8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80063aa:	697b      	ldr	r3, [r7, #20]
 80063ac:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80063b0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	031b      	lsls	r3, r3, #12
 80063b6:	697a      	ldr	r2, [r7, #20]
 80063b8:	4313      	orrs	r3, r2
 80063ba:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80063bc:	693b      	ldr	r3, [r7, #16]
 80063be:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80063c2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80063c4:	68bb      	ldr	r3, [r7, #8]
 80063c6:	011b      	lsls	r3, r3, #4
 80063c8:	693a      	ldr	r2, [r7, #16]
 80063ca:	4313      	orrs	r3, r2
 80063cc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	697a      	ldr	r2, [r7, #20]
 80063d2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	693a      	ldr	r2, [r7, #16]
 80063d8:	621a      	str	r2, [r3, #32]
}
 80063da:	bf00      	nop
 80063dc:	371c      	adds	r7, #28
 80063de:	46bd      	mov	sp, r7
 80063e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e4:	4770      	bx	lr

080063e6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80063e6:	b480      	push	{r7}
 80063e8:	b085      	sub	sp, #20
 80063ea:	af00      	add	r7, sp, #0
 80063ec:	6078      	str	r0, [r7, #4]
 80063ee:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	689b      	ldr	r3, [r3, #8]
 80063f4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80063fc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80063fe:	683a      	ldr	r2, [r7, #0]
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	4313      	orrs	r3, r2
 8006404:	f043 0307 	orr.w	r3, r3, #7
 8006408:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	68fa      	ldr	r2, [r7, #12]
 800640e:	609a      	str	r2, [r3, #8]
}
 8006410:	bf00      	nop
 8006412:	3714      	adds	r7, #20
 8006414:	46bd      	mov	sp, r7
 8006416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800641a:	4770      	bx	lr

0800641c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800641c:	b480      	push	{r7}
 800641e:	b087      	sub	sp, #28
 8006420:	af00      	add	r7, sp, #0
 8006422:	60f8      	str	r0, [r7, #12]
 8006424:	60b9      	str	r1, [r7, #8]
 8006426:	607a      	str	r2, [r7, #4]
 8006428:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	689b      	ldr	r3, [r3, #8]
 800642e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006430:	697b      	ldr	r3, [r7, #20]
 8006432:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006436:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006438:	683b      	ldr	r3, [r7, #0]
 800643a:	021a      	lsls	r2, r3, #8
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	431a      	orrs	r2, r3
 8006440:	68bb      	ldr	r3, [r7, #8]
 8006442:	4313      	orrs	r3, r2
 8006444:	697a      	ldr	r2, [r7, #20]
 8006446:	4313      	orrs	r3, r2
 8006448:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	697a      	ldr	r2, [r7, #20]
 800644e:	609a      	str	r2, [r3, #8]
}
 8006450:	bf00      	nop
 8006452:	371c      	adds	r7, #28
 8006454:	46bd      	mov	sp, r7
 8006456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800645a:	4770      	bx	lr

0800645c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800645c:	b480      	push	{r7}
 800645e:	b085      	sub	sp, #20
 8006460:	af00      	add	r7, sp, #0
 8006462:	6078      	str	r0, [r7, #4]
 8006464:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800646c:	2b01      	cmp	r3, #1
 800646e:	d101      	bne.n	8006474 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006470:	2302      	movs	r3, #2
 8006472:	e05a      	b.n	800652a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	2201      	movs	r2, #1
 8006478:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	2202      	movs	r2, #2
 8006480:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	685b      	ldr	r3, [r3, #4]
 800648a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	689b      	ldr	r3, [r3, #8]
 8006492:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800649a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800649c:	683b      	ldr	r3, [r7, #0]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	68fa      	ldr	r2, [r7, #12]
 80064a2:	4313      	orrs	r3, r2
 80064a4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	68fa      	ldr	r2, [r7, #12]
 80064ac:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	4a21      	ldr	r2, [pc, #132]	; (8006538 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80064b4:	4293      	cmp	r3, r2
 80064b6:	d022      	beq.n	80064fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80064c0:	d01d      	beq.n	80064fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	4a1d      	ldr	r2, [pc, #116]	; (800653c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80064c8:	4293      	cmp	r3, r2
 80064ca:	d018      	beq.n	80064fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	4a1b      	ldr	r2, [pc, #108]	; (8006540 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80064d2:	4293      	cmp	r3, r2
 80064d4:	d013      	beq.n	80064fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	4a1a      	ldr	r2, [pc, #104]	; (8006544 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80064dc:	4293      	cmp	r3, r2
 80064de:	d00e      	beq.n	80064fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	4a18      	ldr	r2, [pc, #96]	; (8006548 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80064e6:	4293      	cmp	r3, r2
 80064e8:	d009      	beq.n	80064fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	4a17      	ldr	r2, [pc, #92]	; (800654c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80064f0:	4293      	cmp	r3, r2
 80064f2:	d004      	beq.n	80064fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	4a15      	ldr	r2, [pc, #84]	; (8006550 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80064fa:	4293      	cmp	r3, r2
 80064fc:	d10c      	bne.n	8006518 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80064fe:	68bb      	ldr	r3, [r7, #8]
 8006500:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006504:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006506:	683b      	ldr	r3, [r7, #0]
 8006508:	685b      	ldr	r3, [r3, #4]
 800650a:	68ba      	ldr	r2, [r7, #8]
 800650c:	4313      	orrs	r3, r2
 800650e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	68ba      	ldr	r2, [r7, #8]
 8006516:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	2201      	movs	r2, #1
 800651c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	2200      	movs	r2, #0
 8006524:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006528:	2300      	movs	r3, #0
}
 800652a:	4618      	mov	r0, r3
 800652c:	3714      	adds	r7, #20
 800652e:	46bd      	mov	sp, r7
 8006530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006534:	4770      	bx	lr
 8006536:	bf00      	nop
 8006538:	40010000 	.word	0x40010000
 800653c:	40000400 	.word	0x40000400
 8006540:	40000800 	.word	0x40000800
 8006544:	40000c00 	.word	0x40000c00
 8006548:	40010400 	.word	0x40010400
 800654c:	40014000 	.word	0x40014000
 8006550:	40001800 	.word	0x40001800

08006554 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006554:	b480      	push	{r7}
 8006556:	b083      	sub	sp, #12
 8006558:	af00      	add	r7, sp, #0
 800655a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800655c:	bf00      	nop
 800655e:	370c      	adds	r7, #12
 8006560:	46bd      	mov	sp, r7
 8006562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006566:	4770      	bx	lr

08006568 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006568:	b480      	push	{r7}
 800656a:	b083      	sub	sp, #12
 800656c:	af00      	add	r7, sp, #0
 800656e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006570:	bf00      	nop
 8006572:	370c      	adds	r7, #12
 8006574:	46bd      	mov	sp, r7
 8006576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800657a:	4770      	bx	lr

0800657c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800657c:	b580      	push	{r7, lr}
 800657e:	b082      	sub	sp, #8
 8006580:	af00      	add	r7, sp, #0
 8006582:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	2b00      	cmp	r3, #0
 8006588:	d101      	bne.n	800658e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800658a:	2301      	movs	r3, #1
 800658c:	e03f      	b.n	800660e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006594:	b2db      	uxtb	r3, r3
 8006596:	2b00      	cmp	r3, #0
 8006598:	d106      	bne.n	80065a8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	2200      	movs	r2, #0
 800659e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80065a2:	6878      	ldr	r0, [r7, #4]
 80065a4:	f7fb fdc4 	bl	8002130 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	2224      	movs	r2, #36	; 0x24
 80065ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	68da      	ldr	r2, [r3, #12]
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80065be:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80065c0:	6878      	ldr	r0, [r7, #4]
 80065c2:	f001 f801 	bl	80075c8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	691a      	ldr	r2, [r3, #16]
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80065d4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	695a      	ldr	r2, [r3, #20]
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80065e4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	68da      	ldr	r2, [r3, #12]
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80065f4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	2200      	movs	r2, #0
 80065fa:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	2220      	movs	r2, #32
 8006600:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	2220      	movs	r2, #32
 8006608:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800660c:	2300      	movs	r3, #0
}
 800660e:	4618      	mov	r0, r3
 8006610:	3708      	adds	r7, #8
 8006612:	46bd      	mov	sp, r7
 8006614:	bd80      	pop	{r7, pc}

08006616 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006616:	b580      	push	{r7, lr}
 8006618:	b08a      	sub	sp, #40	; 0x28
 800661a:	af02      	add	r7, sp, #8
 800661c:	60f8      	str	r0, [r7, #12]
 800661e:	60b9      	str	r1, [r7, #8]
 8006620:	603b      	str	r3, [r7, #0]
 8006622:	4613      	mov	r3, r2
 8006624:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006626:	2300      	movs	r3, #0
 8006628:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006630:	b2db      	uxtb	r3, r3
 8006632:	2b20      	cmp	r3, #32
 8006634:	d17c      	bne.n	8006730 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006636:	68bb      	ldr	r3, [r7, #8]
 8006638:	2b00      	cmp	r3, #0
 800663a:	d002      	beq.n	8006642 <HAL_UART_Transmit+0x2c>
 800663c:	88fb      	ldrh	r3, [r7, #6]
 800663e:	2b00      	cmp	r3, #0
 8006640:	d101      	bne.n	8006646 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006642:	2301      	movs	r3, #1
 8006644:	e075      	b.n	8006732 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800664c:	2b01      	cmp	r3, #1
 800664e:	d101      	bne.n	8006654 <HAL_UART_Transmit+0x3e>
 8006650:	2302      	movs	r3, #2
 8006652:	e06e      	b.n	8006732 <HAL_UART_Transmit+0x11c>
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	2201      	movs	r2, #1
 8006658:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	2200      	movs	r2, #0
 8006660:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	2221      	movs	r2, #33	; 0x21
 8006666:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800666a:	f7fb ff67 	bl	800253c <HAL_GetTick>
 800666e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	88fa      	ldrh	r2, [r7, #6]
 8006674:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	88fa      	ldrh	r2, [r7, #6]
 800667a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	689b      	ldr	r3, [r3, #8]
 8006680:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006684:	d108      	bne.n	8006698 <HAL_UART_Transmit+0x82>
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	691b      	ldr	r3, [r3, #16]
 800668a:	2b00      	cmp	r3, #0
 800668c:	d104      	bne.n	8006698 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800668e:	2300      	movs	r3, #0
 8006690:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006692:	68bb      	ldr	r3, [r7, #8]
 8006694:	61bb      	str	r3, [r7, #24]
 8006696:	e003      	b.n	80066a0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8006698:	68bb      	ldr	r3, [r7, #8]
 800669a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800669c:	2300      	movs	r3, #0
 800669e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	2200      	movs	r2, #0
 80066a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80066a8:	e02a      	b.n	8006700 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80066aa:	683b      	ldr	r3, [r7, #0]
 80066ac:	9300      	str	r3, [sp, #0]
 80066ae:	697b      	ldr	r3, [r7, #20]
 80066b0:	2200      	movs	r2, #0
 80066b2:	2180      	movs	r1, #128	; 0x80
 80066b4:	68f8      	ldr	r0, [r7, #12]
 80066b6:	f000 fcb9 	bl	800702c <UART_WaitOnFlagUntilTimeout>
 80066ba:	4603      	mov	r3, r0
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d001      	beq.n	80066c4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80066c0:	2303      	movs	r3, #3
 80066c2:	e036      	b.n	8006732 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80066c4:	69fb      	ldr	r3, [r7, #28]
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d10b      	bne.n	80066e2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80066ca:	69bb      	ldr	r3, [r7, #24]
 80066cc:	881b      	ldrh	r3, [r3, #0]
 80066ce:	461a      	mov	r2, r3
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80066d8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80066da:	69bb      	ldr	r3, [r7, #24]
 80066dc:	3302      	adds	r3, #2
 80066de:	61bb      	str	r3, [r7, #24]
 80066e0:	e007      	b.n	80066f2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80066e2:	69fb      	ldr	r3, [r7, #28]
 80066e4:	781a      	ldrb	r2, [r3, #0]
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80066ec:	69fb      	ldr	r3, [r7, #28]
 80066ee:	3301      	adds	r3, #1
 80066f0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80066f6:	b29b      	uxth	r3, r3
 80066f8:	3b01      	subs	r3, #1
 80066fa:	b29a      	uxth	r2, r3
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006704:	b29b      	uxth	r3, r3
 8006706:	2b00      	cmp	r3, #0
 8006708:	d1cf      	bne.n	80066aa <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800670a:	683b      	ldr	r3, [r7, #0]
 800670c:	9300      	str	r3, [sp, #0]
 800670e:	697b      	ldr	r3, [r7, #20]
 8006710:	2200      	movs	r2, #0
 8006712:	2140      	movs	r1, #64	; 0x40
 8006714:	68f8      	ldr	r0, [r7, #12]
 8006716:	f000 fc89 	bl	800702c <UART_WaitOnFlagUntilTimeout>
 800671a:	4603      	mov	r3, r0
 800671c:	2b00      	cmp	r3, #0
 800671e:	d001      	beq.n	8006724 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8006720:	2303      	movs	r3, #3
 8006722:	e006      	b.n	8006732 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	2220      	movs	r2, #32
 8006728:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800672c:	2300      	movs	r3, #0
 800672e:	e000      	b.n	8006732 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8006730:	2302      	movs	r3, #2
  }
}
 8006732:	4618      	mov	r0, r3
 8006734:	3720      	adds	r7, #32
 8006736:	46bd      	mov	sp, r7
 8006738:	bd80      	pop	{r7, pc}

0800673a <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800673a:	b580      	push	{r7, lr}
 800673c:	b08a      	sub	sp, #40	; 0x28
 800673e:	af02      	add	r7, sp, #8
 8006740:	60f8      	str	r0, [r7, #12]
 8006742:	60b9      	str	r1, [r7, #8]
 8006744:	603b      	str	r3, [r7, #0]
 8006746:	4613      	mov	r3, r2
 8006748:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800674a:	2300      	movs	r3, #0
 800674c:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006754:	b2db      	uxtb	r3, r3
 8006756:	2b20      	cmp	r3, #32
 8006758:	f040 808c 	bne.w	8006874 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 800675c:	68bb      	ldr	r3, [r7, #8]
 800675e:	2b00      	cmp	r3, #0
 8006760:	d002      	beq.n	8006768 <HAL_UART_Receive+0x2e>
 8006762:	88fb      	ldrh	r3, [r7, #6]
 8006764:	2b00      	cmp	r3, #0
 8006766:	d101      	bne.n	800676c <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8006768:	2301      	movs	r3, #1
 800676a:	e084      	b.n	8006876 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006772:	2b01      	cmp	r3, #1
 8006774:	d101      	bne.n	800677a <HAL_UART_Receive+0x40>
 8006776:	2302      	movs	r3, #2
 8006778:	e07d      	b.n	8006876 <HAL_UART_Receive+0x13c>
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	2201      	movs	r2, #1
 800677e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	2200      	movs	r2, #0
 8006786:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	2222      	movs	r2, #34	; 0x22
 800678c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	2200      	movs	r2, #0
 8006794:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006796:	f7fb fed1 	bl	800253c <HAL_GetTick>
 800679a:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	88fa      	ldrh	r2, [r7, #6]
 80067a0:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	88fa      	ldrh	r2, [r7, #6]
 80067a6:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	689b      	ldr	r3, [r3, #8]
 80067ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80067b0:	d108      	bne.n	80067c4 <HAL_UART_Receive+0x8a>
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	691b      	ldr	r3, [r3, #16]
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d104      	bne.n	80067c4 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 80067ba:	2300      	movs	r3, #0
 80067bc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80067be:	68bb      	ldr	r3, [r7, #8]
 80067c0:	61bb      	str	r3, [r7, #24]
 80067c2:	e003      	b.n	80067cc <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 80067c4:	68bb      	ldr	r3, [r7, #8]
 80067c6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80067c8:	2300      	movs	r3, #0
 80067ca:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	2200      	movs	r2, #0
 80067d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80067d4:	e043      	b.n	800685e <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80067d6:	683b      	ldr	r3, [r7, #0]
 80067d8:	9300      	str	r3, [sp, #0]
 80067da:	697b      	ldr	r3, [r7, #20]
 80067dc:	2200      	movs	r2, #0
 80067de:	2120      	movs	r1, #32
 80067e0:	68f8      	ldr	r0, [r7, #12]
 80067e2:	f000 fc23 	bl	800702c <UART_WaitOnFlagUntilTimeout>
 80067e6:	4603      	mov	r3, r0
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d001      	beq.n	80067f0 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 80067ec:	2303      	movs	r3, #3
 80067ee:	e042      	b.n	8006876 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 80067f0:	69fb      	ldr	r3, [r7, #28]
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d10c      	bne.n	8006810 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	685b      	ldr	r3, [r3, #4]
 80067fc:	b29b      	uxth	r3, r3
 80067fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006802:	b29a      	uxth	r2, r3
 8006804:	69bb      	ldr	r3, [r7, #24]
 8006806:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8006808:	69bb      	ldr	r3, [r7, #24]
 800680a:	3302      	adds	r3, #2
 800680c:	61bb      	str	r3, [r7, #24]
 800680e:	e01f      	b.n	8006850 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	689b      	ldr	r3, [r3, #8]
 8006814:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006818:	d007      	beq.n	800682a <HAL_UART_Receive+0xf0>
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	689b      	ldr	r3, [r3, #8]
 800681e:	2b00      	cmp	r3, #0
 8006820:	d10a      	bne.n	8006838 <HAL_UART_Receive+0xfe>
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	691b      	ldr	r3, [r3, #16]
 8006826:	2b00      	cmp	r3, #0
 8006828:	d106      	bne.n	8006838 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	685b      	ldr	r3, [r3, #4]
 8006830:	b2da      	uxtb	r2, r3
 8006832:	69fb      	ldr	r3, [r7, #28]
 8006834:	701a      	strb	r2, [r3, #0]
 8006836:	e008      	b.n	800684a <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	685b      	ldr	r3, [r3, #4]
 800683e:	b2db      	uxtb	r3, r3
 8006840:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006844:	b2da      	uxtb	r2, r3
 8006846:	69fb      	ldr	r3, [r7, #28]
 8006848:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 800684a:	69fb      	ldr	r3, [r7, #28]
 800684c:	3301      	adds	r3, #1
 800684e:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006854:	b29b      	uxth	r3, r3
 8006856:	3b01      	subs	r3, #1
 8006858:	b29a      	uxth	r2, r3
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006862:	b29b      	uxth	r3, r3
 8006864:	2b00      	cmp	r3, #0
 8006866:	d1b6      	bne.n	80067d6 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	2220      	movs	r2, #32
 800686c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8006870:	2300      	movs	r3, #0
 8006872:	e000      	b.n	8006876 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8006874:	2302      	movs	r3, #2
  }
}
 8006876:	4618      	mov	r0, r3
 8006878:	3720      	adds	r7, #32
 800687a:	46bd      	mov	sp, r7
 800687c:	bd80      	pop	{r7, pc}

0800687e <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800687e:	b580      	push	{r7, lr}
 8006880:	b084      	sub	sp, #16
 8006882:	af00      	add	r7, sp, #0
 8006884:	60f8      	str	r0, [r7, #12]
 8006886:	60b9      	str	r1, [r7, #8]
 8006888:	4613      	mov	r3, r2
 800688a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006892:	b2db      	uxtb	r3, r3
 8006894:	2b20      	cmp	r3, #32
 8006896:	d11d      	bne.n	80068d4 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8006898:	68bb      	ldr	r3, [r7, #8]
 800689a:	2b00      	cmp	r3, #0
 800689c:	d002      	beq.n	80068a4 <HAL_UART_Receive_DMA+0x26>
 800689e:	88fb      	ldrh	r3, [r7, #6]
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d101      	bne.n	80068a8 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 80068a4:	2301      	movs	r3, #1
 80068a6:	e016      	b.n	80068d6 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80068ae:	2b01      	cmp	r3, #1
 80068b0:	d101      	bne.n	80068b6 <HAL_UART_Receive_DMA+0x38>
 80068b2:	2302      	movs	r3, #2
 80068b4:	e00f      	b.n	80068d6 <HAL_UART_Receive_DMA+0x58>
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	2201      	movs	r2, #1
 80068ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	2200      	movs	r2, #0
 80068c2:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80068c4:	88fb      	ldrh	r3, [r7, #6]
 80068c6:	461a      	mov	r2, r3
 80068c8:	68b9      	ldr	r1, [r7, #8]
 80068ca:	68f8      	ldr	r0, [r7, #12]
 80068cc:	f000 fc1c 	bl	8007108 <UART_Start_Receive_DMA>
 80068d0:	4603      	mov	r3, r0
 80068d2:	e000      	b.n	80068d6 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 80068d4:	2302      	movs	r3, #2
  }
}
 80068d6:	4618      	mov	r0, r3
 80068d8:	3710      	adds	r7, #16
 80068da:	46bd      	mov	sp, r7
 80068dc:	bd80      	pop	{r7, pc}
	...

080068e0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80068e0:	b580      	push	{r7, lr}
 80068e2:	b0ba      	sub	sp, #232	; 0xe8
 80068e4:	af00      	add	r7, sp, #0
 80068e6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	68db      	ldr	r3, [r3, #12]
 80068f8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	695b      	ldr	r3, [r3, #20]
 8006902:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8006906:	2300      	movs	r3, #0
 8006908:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800690c:	2300      	movs	r3, #0
 800690e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006912:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006916:	f003 030f 	and.w	r3, r3, #15
 800691a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800691e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006922:	2b00      	cmp	r3, #0
 8006924:	d10f      	bne.n	8006946 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006926:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800692a:	f003 0320 	and.w	r3, r3, #32
 800692e:	2b00      	cmp	r3, #0
 8006930:	d009      	beq.n	8006946 <HAL_UART_IRQHandler+0x66>
 8006932:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006936:	f003 0320 	and.w	r3, r3, #32
 800693a:	2b00      	cmp	r3, #0
 800693c:	d003      	beq.n	8006946 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800693e:	6878      	ldr	r0, [r7, #4]
 8006940:	f000 fd87 	bl	8007452 <UART_Receive_IT>
      return;
 8006944:	e256      	b.n	8006df4 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8006946:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800694a:	2b00      	cmp	r3, #0
 800694c:	f000 80de 	beq.w	8006b0c <HAL_UART_IRQHandler+0x22c>
 8006950:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006954:	f003 0301 	and.w	r3, r3, #1
 8006958:	2b00      	cmp	r3, #0
 800695a:	d106      	bne.n	800696a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800695c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006960:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006964:	2b00      	cmp	r3, #0
 8006966:	f000 80d1 	beq.w	8006b0c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800696a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800696e:	f003 0301 	and.w	r3, r3, #1
 8006972:	2b00      	cmp	r3, #0
 8006974:	d00b      	beq.n	800698e <HAL_UART_IRQHandler+0xae>
 8006976:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800697a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800697e:	2b00      	cmp	r3, #0
 8006980:	d005      	beq.n	800698e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006986:	f043 0201 	orr.w	r2, r3, #1
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800698e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006992:	f003 0304 	and.w	r3, r3, #4
 8006996:	2b00      	cmp	r3, #0
 8006998:	d00b      	beq.n	80069b2 <HAL_UART_IRQHandler+0xd2>
 800699a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800699e:	f003 0301 	and.w	r3, r3, #1
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d005      	beq.n	80069b2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069aa:	f043 0202 	orr.w	r2, r3, #2
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80069b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80069b6:	f003 0302 	and.w	r3, r3, #2
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d00b      	beq.n	80069d6 <HAL_UART_IRQHandler+0xf6>
 80069be:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80069c2:	f003 0301 	and.w	r3, r3, #1
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d005      	beq.n	80069d6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069ce:	f043 0204 	orr.w	r2, r3, #4
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80069d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80069da:	f003 0308 	and.w	r3, r3, #8
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d011      	beq.n	8006a06 <HAL_UART_IRQHandler+0x126>
 80069e2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80069e6:	f003 0320 	and.w	r3, r3, #32
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d105      	bne.n	80069fa <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80069ee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80069f2:	f003 0301 	and.w	r3, r3, #1
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d005      	beq.n	8006a06 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069fe:	f043 0208 	orr.w	r2, r3, #8
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	f000 81ed 	beq.w	8006dea <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006a10:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a14:	f003 0320 	and.w	r3, r3, #32
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d008      	beq.n	8006a2e <HAL_UART_IRQHandler+0x14e>
 8006a1c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006a20:	f003 0320 	and.w	r3, r3, #32
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d002      	beq.n	8006a2e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006a28:	6878      	ldr	r0, [r7, #4]
 8006a2a:	f000 fd12 	bl	8007452 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	695b      	ldr	r3, [r3, #20]
 8006a34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a38:	2b40      	cmp	r3, #64	; 0x40
 8006a3a:	bf0c      	ite	eq
 8006a3c:	2301      	moveq	r3, #1
 8006a3e:	2300      	movne	r3, #0
 8006a40:	b2db      	uxtb	r3, r3
 8006a42:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a4a:	f003 0308 	and.w	r3, r3, #8
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d103      	bne.n	8006a5a <HAL_UART_IRQHandler+0x17a>
 8006a52:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d04f      	beq.n	8006afa <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006a5a:	6878      	ldr	r0, [r7, #4]
 8006a5c:	f000 fc1a 	bl	8007294 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	695b      	ldr	r3, [r3, #20]
 8006a66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a6a:	2b40      	cmp	r3, #64	; 0x40
 8006a6c:	d141      	bne.n	8006af2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	3314      	adds	r3, #20
 8006a74:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a78:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006a7c:	e853 3f00 	ldrex	r3, [r3]
 8006a80:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006a84:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006a88:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006a8c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	3314      	adds	r3, #20
 8006a96:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006a9a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006a9e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006aa2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006aa6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006aaa:	e841 2300 	strex	r3, r2, [r1]
 8006aae:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006ab2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d1d9      	bne.n	8006a6e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d013      	beq.n	8006aea <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ac6:	4a7d      	ldr	r2, [pc, #500]	; (8006cbc <HAL_UART_IRQHandler+0x3dc>)
 8006ac8:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ace:	4618      	mov	r0, r3
 8006ad0:	f7fb ffec 	bl	8002aac <HAL_DMA_Abort_IT>
 8006ad4:	4603      	mov	r3, r0
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d016      	beq.n	8006b08 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ade:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006ae0:	687a      	ldr	r2, [r7, #4]
 8006ae2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006ae4:	4610      	mov	r0, r2
 8006ae6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ae8:	e00e      	b.n	8006b08 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006aea:	6878      	ldr	r0, [r7, #4]
 8006aec:	f000 f990 	bl	8006e10 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006af0:	e00a      	b.n	8006b08 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006af2:	6878      	ldr	r0, [r7, #4]
 8006af4:	f000 f98c 	bl	8006e10 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006af8:	e006      	b.n	8006b08 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006afa:	6878      	ldr	r0, [r7, #4]
 8006afc:	f000 f988 	bl	8006e10 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	2200      	movs	r2, #0
 8006b04:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8006b06:	e170      	b.n	8006dea <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b08:	bf00      	nop
    return;
 8006b0a:	e16e      	b.n	8006dea <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b10:	2b01      	cmp	r3, #1
 8006b12:	f040 814a 	bne.w	8006daa <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006b16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b1a:	f003 0310 	and.w	r3, r3, #16
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	f000 8143 	beq.w	8006daa <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006b24:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006b28:	f003 0310 	and.w	r3, r3, #16
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	f000 813c 	beq.w	8006daa <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006b32:	2300      	movs	r3, #0
 8006b34:	60bb      	str	r3, [r7, #8]
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	60bb      	str	r3, [r7, #8]
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	685b      	ldr	r3, [r3, #4]
 8006b44:	60bb      	str	r3, [r7, #8]
 8006b46:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	695b      	ldr	r3, [r3, #20]
 8006b4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b52:	2b40      	cmp	r3, #64	; 0x40
 8006b54:	f040 80b4 	bne.w	8006cc0 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	685b      	ldr	r3, [r3, #4]
 8006b60:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006b64:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	f000 8140 	beq.w	8006dee <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006b72:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006b76:	429a      	cmp	r2, r3
 8006b78:	f080 8139 	bcs.w	8006dee <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006b82:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b88:	69db      	ldr	r3, [r3, #28]
 8006b8a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006b8e:	f000 8088 	beq.w	8006ca2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	330c      	adds	r3, #12
 8006b98:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b9c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006ba0:	e853 3f00 	ldrex	r3, [r3]
 8006ba4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006ba8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006bac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006bb0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	330c      	adds	r3, #12
 8006bba:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8006bbe:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006bc2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bc6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006bca:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006bce:	e841 2300 	strex	r3, r2, [r1]
 8006bd2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006bd6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d1d9      	bne.n	8006b92 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	3314      	adds	r3, #20
 8006be4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006be6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006be8:	e853 3f00 	ldrex	r3, [r3]
 8006bec:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006bee:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006bf0:	f023 0301 	bic.w	r3, r3, #1
 8006bf4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	3314      	adds	r3, #20
 8006bfe:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006c02:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006c06:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c08:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006c0a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006c0e:	e841 2300 	strex	r3, r2, [r1]
 8006c12:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006c14:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d1e1      	bne.n	8006bde <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	3314      	adds	r3, #20
 8006c20:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c22:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006c24:	e853 3f00 	ldrex	r3, [r3]
 8006c28:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006c2a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006c2c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006c30:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	3314      	adds	r3, #20
 8006c3a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006c3e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006c40:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c42:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006c44:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006c46:	e841 2300 	strex	r3, r2, [r1]
 8006c4a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006c4c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d1e3      	bne.n	8006c1a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	2220      	movs	r2, #32
 8006c56:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	2200      	movs	r2, #0
 8006c5e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	330c      	adds	r3, #12
 8006c66:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c68:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006c6a:	e853 3f00 	ldrex	r3, [r3]
 8006c6e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006c70:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006c72:	f023 0310 	bic.w	r3, r3, #16
 8006c76:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	330c      	adds	r3, #12
 8006c80:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8006c84:	65ba      	str	r2, [r7, #88]	; 0x58
 8006c86:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c88:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006c8a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006c8c:	e841 2300 	strex	r3, r2, [r1]
 8006c90:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006c92:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d1e3      	bne.n	8006c60 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c9c:	4618      	mov	r0, r3
 8006c9e:	f7fb fe95 	bl	80029cc <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006caa:	b29b      	uxth	r3, r3
 8006cac:	1ad3      	subs	r3, r2, r3
 8006cae:	b29b      	uxth	r3, r3
 8006cb0:	4619      	mov	r1, r3
 8006cb2:	6878      	ldr	r0, [r7, #4]
 8006cb4:	f000 f8b6 	bl	8006e24 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006cb8:	e099      	b.n	8006dee <HAL_UART_IRQHandler+0x50e>
 8006cba:	bf00      	nop
 8006cbc:	0800735b 	.word	0x0800735b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006cc8:	b29b      	uxth	r3, r3
 8006cca:	1ad3      	subs	r3, r2, r3
 8006ccc:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006cd4:	b29b      	uxth	r3, r3
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	f000 808b 	beq.w	8006df2 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8006cdc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	f000 8086 	beq.w	8006df2 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	330c      	adds	r3, #12
 8006cec:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cf0:	e853 3f00 	ldrex	r3, [r3]
 8006cf4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006cf6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006cf8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006cfc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	330c      	adds	r3, #12
 8006d06:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8006d0a:	647a      	str	r2, [r7, #68]	; 0x44
 8006d0c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d0e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006d10:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006d12:	e841 2300 	strex	r3, r2, [r1]
 8006d16:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006d18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d1e3      	bne.n	8006ce6 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	3314      	adds	r3, #20
 8006d24:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d28:	e853 3f00 	ldrex	r3, [r3]
 8006d2c:	623b      	str	r3, [r7, #32]
   return(result);
 8006d2e:	6a3b      	ldr	r3, [r7, #32]
 8006d30:	f023 0301 	bic.w	r3, r3, #1
 8006d34:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	3314      	adds	r3, #20
 8006d3e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006d42:	633a      	str	r2, [r7, #48]	; 0x30
 8006d44:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d46:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006d48:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006d4a:	e841 2300 	strex	r3, r2, [r1]
 8006d4e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006d50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d1e3      	bne.n	8006d1e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	2220      	movs	r2, #32
 8006d5a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	2200      	movs	r2, #0
 8006d62:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	330c      	adds	r3, #12
 8006d6a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d6c:	693b      	ldr	r3, [r7, #16]
 8006d6e:	e853 3f00 	ldrex	r3, [r3]
 8006d72:	60fb      	str	r3, [r7, #12]
   return(result);
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	f023 0310 	bic.w	r3, r3, #16
 8006d7a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	330c      	adds	r3, #12
 8006d84:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8006d88:	61fa      	str	r2, [r7, #28]
 8006d8a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d8c:	69b9      	ldr	r1, [r7, #24]
 8006d8e:	69fa      	ldr	r2, [r7, #28]
 8006d90:	e841 2300 	strex	r3, r2, [r1]
 8006d94:	617b      	str	r3, [r7, #20]
   return(result);
 8006d96:	697b      	ldr	r3, [r7, #20]
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d1e3      	bne.n	8006d64 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006d9c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006da0:	4619      	mov	r1, r3
 8006da2:	6878      	ldr	r0, [r7, #4]
 8006da4:	f000 f83e 	bl	8006e24 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006da8:	e023      	b.n	8006df2 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006daa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006dae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d009      	beq.n	8006dca <HAL_UART_IRQHandler+0x4ea>
 8006db6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006dba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d003      	beq.n	8006dca <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8006dc2:	6878      	ldr	r0, [r7, #4]
 8006dc4:	f000 fadd 	bl	8007382 <UART_Transmit_IT>
    return;
 8006dc8:	e014      	b.n	8006df4 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006dca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006dce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d00e      	beq.n	8006df4 <HAL_UART_IRQHandler+0x514>
 8006dd6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006dda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d008      	beq.n	8006df4 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8006de2:	6878      	ldr	r0, [r7, #4]
 8006de4:	f000 fb1d 	bl	8007422 <UART_EndTransmit_IT>
    return;
 8006de8:	e004      	b.n	8006df4 <HAL_UART_IRQHandler+0x514>
    return;
 8006dea:	bf00      	nop
 8006dec:	e002      	b.n	8006df4 <HAL_UART_IRQHandler+0x514>
      return;
 8006dee:	bf00      	nop
 8006df0:	e000      	b.n	8006df4 <HAL_UART_IRQHandler+0x514>
      return;
 8006df2:	bf00      	nop
  }
}
 8006df4:	37e8      	adds	r7, #232	; 0xe8
 8006df6:	46bd      	mov	sp, r7
 8006df8:	bd80      	pop	{r7, pc}
 8006dfa:	bf00      	nop

08006dfc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006dfc:	b480      	push	{r7}
 8006dfe:	b083      	sub	sp, #12
 8006e00:	af00      	add	r7, sp, #0
 8006e02:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006e04:	bf00      	nop
 8006e06:	370c      	adds	r7, #12
 8006e08:	46bd      	mov	sp, r7
 8006e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e0e:	4770      	bx	lr

08006e10 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006e10:	b480      	push	{r7}
 8006e12:	b083      	sub	sp, #12
 8006e14:	af00      	add	r7, sp, #0
 8006e16:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006e18:	bf00      	nop
 8006e1a:	370c      	adds	r7, #12
 8006e1c:	46bd      	mov	sp, r7
 8006e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e22:	4770      	bx	lr

08006e24 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006e24:	b480      	push	{r7}
 8006e26:	b083      	sub	sp, #12
 8006e28:	af00      	add	r7, sp, #0
 8006e2a:	6078      	str	r0, [r7, #4]
 8006e2c:	460b      	mov	r3, r1
 8006e2e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006e30:	bf00      	nop
 8006e32:	370c      	adds	r7, #12
 8006e34:	46bd      	mov	sp, r7
 8006e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e3a:	4770      	bx	lr

08006e3c <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006e3c:	b580      	push	{r7, lr}
 8006e3e:	b09c      	sub	sp, #112	; 0x70
 8006e40:	af00      	add	r7, sp, #0
 8006e42:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e48:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d172      	bne.n	8006f3e <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8006e58:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006e5a:	2200      	movs	r2, #0
 8006e5c:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006e5e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	330c      	adds	r3, #12
 8006e64:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e66:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006e68:	e853 3f00 	ldrex	r3, [r3]
 8006e6c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006e6e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006e70:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006e74:	66bb      	str	r3, [r7, #104]	; 0x68
 8006e76:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	330c      	adds	r3, #12
 8006e7c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006e7e:	65ba      	str	r2, [r7, #88]	; 0x58
 8006e80:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e82:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006e84:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006e86:	e841 2300 	strex	r3, r2, [r1]
 8006e8a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006e8c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d1e5      	bne.n	8006e5e <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e92:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	3314      	adds	r3, #20
 8006e98:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e9c:	e853 3f00 	ldrex	r3, [r3]
 8006ea0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006ea2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ea4:	f023 0301 	bic.w	r3, r3, #1
 8006ea8:	667b      	str	r3, [r7, #100]	; 0x64
 8006eaa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	3314      	adds	r3, #20
 8006eb0:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8006eb2:	647a      	str	r2, [r7, #68]	; 0x44
 8006eb4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006eb6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006eb8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006eba:	e841 2300 	strex	r3, r2, [r1]
 8006ebe:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006ec0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d1e5      	bne.n	8006e92 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006ec6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	3314      	adds	r3, #20
 8006ecc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ed0:	e853 3f00 	ldrex	r3, [r3]
 8006ed4:	623b      	str	r3, [r7, #32]
   return(result);
 8006ed6:	6a3b      	ldr	r3, [r7, #32]
 8006ed8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006edc:	663b      	str	r3, [r7, #96]	; 0x60
 8006ede:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	3314      	adds	r3, #20
 8006ee4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006ee6:	633a      	str	r2, [r7, #48]	; 0x30
 8006ee8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006eea:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006eec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006eee:	e841 2300 	strex	r3, r2, [r1]
 8006ef2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006ef4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d1e5      	bne.n	8006ec6 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006efa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006efc:	2220      	movs	r2, #32
 8006efe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006f02:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006f04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f06:	2b01      	cmp	r3, #1
 8006f08:	d119      	bne.n	8006f3e <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006f0a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	330c      	adds	r3, #12
 8006f10:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f12:	693b      	ldr	r3, [r7, #16]
 8006f14:	e853 3f00 	ldrex	r3, [r3]
 8006f18:	60fb      	str	r3, [r7, #12]
   return(result);
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	f023 0310 	bic.w	r3, r3, #16
 8006f20:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006f22:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	330c      	adds	r3, #12
 8006f28:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006f2a:	61fa      	str	r2, [r7, #28]
 8006f2c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f2e:	69b9      	ldr	r1, [r7, #24]
 8006f30:	69fa      	ldr	r2, [r7, #28]
 8006f32:	e841 2300 	strex	r3, r2, [r1]
 8006f36:	617b      	str	r3, [r7, #20]
   return(result);
 8006f38:	697b      	ldr	r3, [r7, #20]
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d1e5      	bne.n	8006f0a <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006f3e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006f40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f42:	2b01      	cmp	r3, #1
 8006f44:	d106      	bne.n	8006f54 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006f46:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006f48:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006f4a:	4619      	mov	r1, r3
 8006f4c:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8006f4e:	f7ff ff69 	bl	8006e24 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006f52:	e002      	b.n	8006f5a <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8006f54:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8006f56:	f7fa ff0f 	bl	8001d78 <HAL_UART_RxCpltCallback>
}
 8006f5a:	bf00      	nop
 8006f5c:	3770      	adds	r7, #112	; 0x70
 8006f5e:	46bd      	mov	sp, r7
 8006f60:	bd80      	pop	{r7, pc}

08006f62 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006f62:	b580      	push	{r7, lr}
 8006f64:	b084      	sub	sp, #16
 8006f66:	af00      	add	r7, sp, #0
 8006f68:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f6e:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f74:	2b01      	cmp	r3, #1
 8006f76:	d108      	bne.n	8006f8a <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006f7c:	085b      	lsrs	r3, r3, #1
 8006f7e:	b29b      	uxth	r3, r3
 8006f80:	4619      	mov	r1, r3
 8006f82:	68f8      	ldr	r0, [r7, #12]
 8006f84:	f7ff ff4e 	bl	8006e24 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006f88:	e002      	b.n	8006f90 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8006f8a:	68f8      	ldr	r0, [r7, #12]
 8006f8c:	f7fa ff1c 	bl	8001dc8 <HAL_UART_RxHalfCpltCallback>
}
 8006f90:	bf00      	nop
 8006f92:	3710      	adds	r7, #16
 8006f94:	46bd      	mov	sp, r7
 8006f96:	bd80      	pop	{r7, pc}

08006f98 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8006f98:	b580      	push	{r7, lr}
 8006f9a:	b084      	sub	sp, #16
 8006f9c:	af00      	add	r7, sp, #0
 8006f9e:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8006fa0:	2300      	movs	r3, #0
 8006fa2:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fa8:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8006faa:	68bb      	ldr	r3, [r7, #8]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	695b      	ldr	r3, [r3, #20]
 8006fb0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006fb4:	2b80      	cmp	r3, #128	; 0x80
 8006fb6:	bf0c      	ite	eq
 8006fb8:	2301      	moveq	r3, #1
 8006fba:	2300      	movne	r3, #0
 8006fbc:	b2db      	uxtb	r3, r3
 8006fbe:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8006fc0:	68bb      	ldr	r3, [r7, #8]
 8006fc2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006fc6:	b2db      	uxtb	r3, r3
 8006fc8:	2b21      	cmp	r3, #33	; 0x21
 8006fca:	d108      	bne.n	8006fde <UART_DMAError+0x46>
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d005      	beq.n	8006fde <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8006fd2:	68bb      	ldr	r3, [r7, #8]
 8006fd4:	2200      	movs	r2, #0
 8006fd6:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8006fd8:	68b8      	ldr	r0, [r7, #8]
 8006fda:	f000 f933 	bl	8007244 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006fde:	68bb      	ldr	r3, [r7, #8]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	695b      	ldr	r3, [r3, #20]
 8006fe4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006fe8:	2b40      	cmp	r3, #64	; 0x40
 8006fea:	bf0c      	ite	eq
 8006fec:	2301      	moveq	r3, #1
 8006fee:	2300      	movne	r3, #0
 8006ff0:	b2db      	uxtb	r3, r3
 8006ff2:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8006ff4:	68bb      	ldr	r3, [r7, #8]
 8006ff6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006ffa:	b2db      	uxtb	r3, r3
 8006ffc:	2b22      	cmp	r3, #34	; 0x22
 8006ffe:	d108      	bne.n	8007012 <UART_DMAError+0x7a>
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	2b00      	cmp	r3, #0
 8007004:	d005      	beq.n	8007012 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8007006:	68bb      	ldr	r3, [r7, #8]
 8007008:	2200      	movs	r2, #0
 800700a:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800700c:	68b8      	ldr	r0, [r7, #8]
 800700e:	f000 f941 	bl	8007294 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8007012:	68bb      	ldr	r3, [r7, #8]
 8007014:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007016:	f043 0210 	orr.w	r2, r3, #16
 800701a:	68bb      	ldr	r3, [r7, #8]
 800701c:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800701e:	68b8      	ldr	r0, [r7, #8]
 8007020:	f7ff fef6 	bl	8006e10 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007024:	bf00      	nop
 8007026:	3710      	adds	r7, #16
 8007028:	46bd      	mov	sp, r7
 800702a:	bd80      	pop	{r7, pc}

0800702c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800702c:	b580      	push	{r7, lr}
 800702e:	b090      	sub	sp, #64	; 0x40
 8007030:	af00      	add	r7, sp, #0
 8007032:	60f8      	str	r0, [r7, #12]
 8007034:	60b9      	str	r1, [r7, #8]
 8007036:	603b      	str	r3, [r7, #0]
 8007038:	4613      	mov	r3, r2
 800703a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800703c:	e050      	b.n	80070e0 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800703e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007040:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007044:	d04c      	beq.n	80070e0 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8007046:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007048:	2b00      	cmp	r3, #0
 800704a:	d007      	beq.n	800705c <UART_WaitOnFlagUntilTimeout+0x30>
 800704c:	f7fb fa76 	bl	800253c <HAL_GetTick>
 8007050:	4602      	mov	r2, r0
 8007052:	683b      	ldr	r3, [r7, #0]
 8007054:	1ad3      	subs	r3, r2, r3
 8007056:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007058:	429a      	cmp	r2, r3
 800705a:	d241      	bcs.n	80070e0 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	330c      	adds	r3, #12
 8007062:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007064:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007066:	e853 3f00 	ldrex	r3, [r3]
 800706a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800706c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800706e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007072:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	330c      	adds	r3, #12
 800707a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800707c:	637a      	str	r2, [r7, #52]	; 0x34
 800707e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007080:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007082:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007084:	e841 2300 	strex	r3, r2, [r1]
 8007088:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800708a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800708c:	2b00      	cmp	r3, #0
 800708e:	d1e5      	bne.n	800705c <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	3314      	adds	r3, #20
 8007096:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007098:	697b      	ldr	r3, [r7, #20]
 800709a:	e853 3f00 	ldrex	r3, [r3]
 800709e:	613b      	str	r3, [r7, #16]
   return(result);
 80070a0:	693b      	ldr	r3, [r7, #16]
 80070a2:	f023 0301 	bic.w	r3, r3, #1
 80070a6:	63bb      	str	r3, [r7, #56]	; 0x38
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	3314      	adds	r3, #20
 80070ae:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80070b0:	623a      	str	r2, [r7, #32]
 80070b2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070b4:	69f9      	ldr	r1, [r7, #28]
 80070b6:	6a3a      	ldr	r2, [r7, #32]
 80070b8:	e841 2300 	strex	r3, r2, [r1]
 80070bc:	61bb      	str	r3, [r7, #24]
   return(result);
 80070be:	69bb      	ldr	r3, [r7, #24]
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d1e5      	bne.n	8007090 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	2220      	movs	r2, #32
 80070c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	2220      	movs	r2, #32
 80070d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	2200      	movs	r2, #0
 80070d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80070dc:	2303      	movs	r3, #3
 80070de:	e00f      	b.n	8007100 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	681a      	ldr	r2, [r3, #0]
 80070e6:	68bb      	ldr	r3, [r7, #8]
 80070e8:	4013      	ands	r3, r2
 80070ea:	68ba      	ldr	r2, [r7, #8]
 80070ec:	429a      	cmp	r2, r3
 80070ee:	bf0c      	ite	eq
 80070f0:	2301      	moveq	r3, #1
 80070f2:	2300      	movne	r3, #0
 80070f4:	b2db      	uxtb	r3, r3
 80070f6:	461a      	mov	r2, r3
 80070f8:	79fb      	ldrb	r3, [r7, #7]
 80070fa:	429a      	cmp	r2, r3
 80070fc:	d09f      	beq.n	800703e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80070fe:	2300      	movs	r3, #0
}
 8007100:	4618      	mov	r0, r3
 8007102:	3740      	adds	r7, #64	; 0x40
 8007104:	46bd      	mov	sp, r7
 8007106:	bd80      	pop	{r7, pc}

08007108 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007108:	b580      	push	{r7, lr}
 800710a:	b098      	sub	sp, #96	; 0x60
 800710c:	af00      	add	r7, sp, #0
 800710e:	60f8      	str	r0, [r7, #12]
 8007110:	60b9      	str	r1, [r7, #8]
 8007112:	4613      	mov	r3, r2
 8007114:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8007116:	68ba      	ldr	r2, [r7, #8]
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	88fa      	ldrh	r2, [r7, #6]
 8007120:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	2200      	movs	r2, #0
 8007126:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	2222      	movs	r2, #34	; 0x22
 800712c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007134:	4a40      	ldr	r2, [pc, #256]	; (8007238 <UART_Start_Receive_DMA+0x130>)
 8007136:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800713c:	4a3f      	ldr	r2, [pc, #252]	; (800723c <UART_Start_Receive_DMA+0x134>)
 800713e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007144:	4a3e      	ldr	r2, [pc, #248]	; (8007240 <UART_Start_Receive_DMA+0x138>)
 8007146:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800714c:	2200      	movs	r2, #0
 800714e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8007150:	f107 0308 	add.w	r3, r7, #8
 8007154:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	3304      	adds	r3, #4
 8007160:	4619      	mov	r1, r3
 8007162:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007164:	681a      	ldr	r2, [r3, #0]
 8007166:	88fb      	ldrh	r3, [r7, #6]
 8007168:	f7fb fbd8 	bl	800291c <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800716c:	2300      	movs	r3, #0
 800716e:	613b      	str	r3, [r7, #16]
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	613b      	str	r3, [r7, #16]
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	685b      	ldr	r3, [r3, #4]
 800717e:	613b      	str	r3, [r7, #16]
 8007180:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	2200      	movs	r2, #0
 8007186:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	691b      	ldr	r3, [r3, #16]
 800718e:	2b00      	cmp	r3, #0
 8007190:	d019      	beq.n	80071c6 <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	330c      	adds	r3, #12
 8007198:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800719a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800719c:	e853 3f00 	ldrex	r3, [r3]
 80071a0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80071a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80071a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80071a8:	65bb      	str	r3, [r7, #88]	; 0x58
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	330c      	adds	r3, #12
 80071b0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80071b2:	64fa      	str	r2, [r7, #76]	; 0x4c
 80071b4:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071b6:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80071b8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80071ba:	e841 2300 	strex	r3, r2, [r1]
 80071be:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80071c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d1e5      	bne.n	8007192 <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	3314      	adds	r3, #20
 80071cc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071d0:	e853 3f00 	ldrex	r3, [r3]
 80071d4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80071d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071d8:	f043 0301 	orr.w	r3, r3, #1
 80071dc:	657b      	str	r3, [r7, #84]	; 0x54
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	3314      	adds	r3, #20
 80071e4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80071e6:	63ba      	str	r2, [r7, #56]	; 0x38
 80071e8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071ea:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80071ec:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80071ee:	e841 2300 	strex	r3, r2, [r1]
 80071f2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80071f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d1e5      	bne.n	80071c6 <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	3314      	adds	r3, #20
 8007200:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007202:	69bb      	ldr	r3, [r7, #24]
 8007204:	e853 3f00 	ldrex	r3, [r3]
 8007208:	617b      	str	r3, [r7, #20]
   return(result);
 800720a:	697b      	ldr	r3, [r7, #20]
 800720c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007210:	653b      	str	r3, [r7, #80]	; 0x50
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	3314      	adds	r3, #20
 8007218:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800721a:	627a      	str	r2, [r7, #36]	; 0x24
 800721c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800721e:	6a39      	ldr	r1, [r7, #32]
 8007220:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007222:	e841 2300 	strex	r3, r2, [r1]
 8007226:	61fb      	str	r3, [r7, #28]
   return(result);
 8007228:	69fb      	ldr	r3, [r7, #28]
 800722a:	2b00      	cmp	r3, #0
 800722c:	d1e5      	bne.n	80071fa <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 800722e:	2300      	movs	r3, #0
}
 8007230:	4618      	mov	r0, r3
 8007232:	3760      	adds	r7, #96	; 0x60
 8007234:	46bd      	mov	sp, r7
 8007236:	bd80      	pop	{r7, pc}
 8007238:	08006e3d 	.word	0x08006e3d
 800723c:	08006f63 	.word	0x08006f63
 8007240:	08006f99 	.word	0x08006f99

08007244 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8007244:	b480      	push	{r7}
 8007246:	b089      	sub	sp, #36	; 0x24
 8007248:	af00      	add	r7, sp, #0
 800724a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	330c      	adds	r3, #12
 8007252:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	e853 3f00 	ldrex	r3, [r3]
 800725a:	60bb      	str	r3, [r7, #8]
   return(result);
 800725c:	68bb      	ldr	r3, [r7, #8]
 800725e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8007262:	61fb      	str	r3, [r7, #28]
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	330c      	adds	r3, #12
 800726a:	69fa      	ldr	r2, [r7, #28]
 800726c:	61ba      	str	r2, [r7, #24]
 800726e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007270:	6979      	ldr	r1, [r7, #20]
 8007272:	69ba      	ldr	r2, [r7, #24]
 8007274:	e841 2300 	strex	r3, r2, [r1]
 8007278:	613b      	str	r3, [r7, #16]
   return(result);
 800727a:	693b      	ldr	r3, [r7, #16]
 800727c:	2b00      	cmp	r3, #0
 800727e:	d1e5      	bne.n	800724c <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	2220      	movs	r2, #32
 8007284:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8007288:	bf00      	nop
 800728a:	3724      	adds	r7, #36	; 0x24
 800728c:	46bd      	mov	sp, r7
 800728e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007292:	4770      	bx	lr

08007294 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007294:	b480      	push	{r7}
 8007296:	b095      	sub	sp, #84	; 0x54
 8007298:	af00      	add	r7, sp, #0
 800729a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	330c      	adds	r3, #12
 80072a2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80072a6:	e853 3f00 	ldrex	r3, [r3]
 80072aa:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80072ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072ae:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80072b2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	330c      	adds	r3, #12
 80072ba:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80072bc:	643a      	str	r2, [r7, #64]	; 0x40
 80072be:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072c0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80072c2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80072c4:	e841 2300 	strex	r3, r2, [r1]
 80072c8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80072ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d1e5      	bne.n	800729c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	3314      	adds	r3, #20
 80072d6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072d8:	6a3b      	ldr	r3, [r7, #32]
 80072da:	e853 3f00 	ldrex	r3, [r3]
 80072de:	61fb      	str	r3, [r7, #28]
   return(result);
 80072e0:	69fb      	ldr	r3, [r7, #28]
 80072e2:	f023 0301 	bic.w	r3, r3, #1
 80072e6:	64bb      	str	r3, [r7, #72]	; 0x48
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	3314      	adds	r3, #20
 80072ee:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80072f0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80072f2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072f4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80072f6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80072f8:	e841 2300 	strex	r3, r2, [r1]
 80072fc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80072fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007300:	2b00      	cmp	r3, #0
 8007302:	d1e5      	bne.n	80072d0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007308:	2b01      	cmp	r3, #1
 800730a:	d119      	bne.n	8007340 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	330c      	adds	r3, #12
 8007312:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	e853 3f00 	ldrex	r3, [r3]
 800731a:	60bb      	str	r3, [r7, #8]
   return(result);
 800731c:	68bb      	ldr	r3, [r7, #8]
 800731e:	f023 0310 	bic.w	r3, r3, #16
 8007322:	647b      	str	r3, [r7, #68]	; 0x44
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	330c      	adds	r3, #12
 800732a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800732c:	61ba      	str	r2, [r7, #24]
 800732e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007330:	6979      	ldr	r1, [r7, #20]
 8007332:	69ba      	ldr	r2, [r7, #24]
 8007334:	e841 2300 	strex	r3, r2, [r1]
 8007338:	613b      	str	r3, [r7, #16]
   return(result);
 800733a:	693b      	ldr	r3, [r7, #16]
 800733c:	2b00      	cmp	r3, #0
 800733e:	d1e5      	bne.n	800730c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	2220      	movs	r2, #32
 8007344:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	2200      	movs	r2, #0
 800734c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800734e:	bf00      	nop
 8007350:	3754      	adds	r7, #84	; 0x54
 8007352:	46bd      	mov	sp, r7
 8007354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007358:	4770      	bx	lr

0800735a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800735a:	b580      	push	{r7, lr}
 800735c:	b084      	sub	sp, #16
 800735e:	af00      	add	r7, sp, #0
 8007360:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007366:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	2200      	movs	r2, #0
 800736c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	2200      	movs	r2, #0
 8007372:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007374:	68f8      	ldr	r0, [r7, #12]
 8007376:	f7ff fd4b 	bl	8006e10 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800737a:	bf00      	nop
 800737c:	3710      	adds	r7, #16
 800737e:	46bd      	mov	sp, r7
 8007380:	bd80      	pop	{r7, pc}

08007382 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007382:	b480      	push	{r7}
 8007384:	b085      	sub	sp, #20
 8007386:	af00      	add	r7, sp, #0
 8007388:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007390:	b2db      	uxtb	r3, r3
 8007392:	2b21      	cmp	r3, #33	; 0x21
 8007394:	d13e      	bne.n	8007414 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	689b      	ldr	r3, [r3, #8]
 800739a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800739e:	d114      	bne.n	80073ca <UART_Transmit_IT+0x48>
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	691b      	ldr	r3, [r3, #16]
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d110      	bne.n	80073ca <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	6a1b      	ldr	r3, [r3, #32]
 80073ac:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	881b      	ldrh	r3, [r3, #0]
 80073b2:	461a      	mov	r2, r3
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80073bc:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	6a1b      	ldr	r3, [r3, #32]
 80073c2:	1c9a      	adds	r2, r3, #2
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	621a      	str	r2, [r3, #32]
 80073c8:	e008      	b.n	80073dc <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	6a1b      	ldr	r3, [r3, #32]
 80073ce:	1c59      	adds	r1, r3, #1
 80073d0:	687a      	ldr	r2, [r7, #4]
 80073d2:	6211      	str	r1, [r2, #32]
 80073d4:	781a      	ldrb	r2, [r3, #0]
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80073e0:	b29b      	uxth	r3, r3
 80073e2:	3b01      	subs	r3, #1
 80073e4:	b29b      	uxth	r3, r3
 80073e6:	687a      	ldr	r2, [r7, #4]
 80073e8:	4619      	mov	r1, r3
 80073ea:	84d1      	strh	r1, [r2, #38]	; 0x26
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d10f      	bne.n	8007410 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	68da      	ldr	r2, [r3, #12]
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80073fe:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	68da      	ldr	r2, [r3, #12]
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800740e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007410:	2300      	movs	r3, #0
 8007412:	e000      	b.n	8007416 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007414:	2302      	movs	r3, #2
  }
}
 8007416:	4618      	mov	r0, r3
 8007418:	3714      	adds	r7, #20
 800741a:	46bd      	mov	sp, r7
 800741c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007420:	4770      	bx	lr

08007422 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007422:	b580      	push	{r7, lr}
 8007424:	b082      	sub	sp, #8
 8007426:	af00      	add	r7, sp, #0
 8007428:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	68da      	ldr	r2, [r3, #12]
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007438:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	2220      	movs	r2, #32
 800743e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007442:	6878      	ldr	r0, [r7, #4]
 8007444:	f7ff fcda 	bl	8006dfc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007448:	2300      	movs	r3, #0
}
 800744a:	4618      	mov	r0, r3
 800744c:	3708      	adds	r7, #8
 800744e:	46bd      	mov	sp, r7
 8007450:	bd80      	pop	{r7, pc}

08007452 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007452:	b580      	push	{r7, lr}
 8007454:	b08c      	sub	sp, #48	; 0x30
 8007456:	af00      	add	r7, sp, #0
 8007458:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007460:	b2db      	uxtb	r3, r3
 8007462:	2b22      	cmp	r3, #34	; 0x22
 8007464:	f040 80ab 	bne.w	80075be <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	689b      	ldr	r3, [r3, #8]
 800746c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007470:	d117      	bne.n	80074a2 <UART_Receive_IT+0x50>
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	691b      	ldr	r3, [r3, #16]
 8007476:	2b00      	cmp	r3, #0
 8007478:	d113      	bne.n	80074a2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800747a:	2300      	movs	r3, #0
 800747c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007482:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	685b      	ldr	r3, [r3, #4]
 800748a:	b29b      	uxth	r3, r3
 800748c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007490:	b29a      	uxth	r2, r3
 8007492:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007494:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800749a:	1c9a      	adds	r2, r3, #2
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	629a      	str	r2, [r3, #40]	; 0x28
 80074a0:	e026      	b.n	80074f0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074a6:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80074a8:	2300      	movs	r3, #0
 80074aa:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	689b      	ldr	r3, [r3, #8]
 80074b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80074b4:	d007      	beq.n	80074c6 <UART_Receive_IT+0x74>
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	689b      	ldr	r3, [r3, #8]
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d10a      	bne.n	80074d4 <UART_Receive_IT+0x82>
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	691b      	ldr	r3, [r3, #16]
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d106      	bne.n	80074d4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	685b      	ldr	r3, [r3, #4]
 80074cc:	b2da      	uxtb	r2, r3
 80074ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074d0:	701a      	strb	r2, [r3, #0]
 80074d2:	e008      	b.n	80074e6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	685b      	ldr	r3, [r3, #4]
 80074da:	b2db      	uxtb	r3, r3
 80074dc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80074e0:	b2da      	uxtb	r2, r3
 80074e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074e4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074ea:	1c5a      	adds	r2, r3, #1
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80074f4:	b29b      	uxth	r3, r3
 80074f6:	3b01      	subs	r3, #1
 80074f8:	b29b      	uxth	r3, r3
 80074fa:	687a      	ldr	r2, [r7, #4]
 80074fc:	4619      	mov	r1, r3
 80074fe:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8007500:	2b00      	cmp	r3, #0
 8007502:	d15a      	bne.n	80075ba <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	68da      	ldr	r2, [r3, #12]
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	f022 0220 	bic.w	r2, r2, #32
 8007512:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	68da      	ldr	r2, [r3, #12]
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007522:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	695a      	ldr	r2, [r3, #20]
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	f022 0201 	bic.w	r2, r2, #1
 8007532:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	2220      	movs	r2, #32
 8007538:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007540:	2b01      	cmp	r3, #1
 8007542:	d135      	bne.n	80075b0 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	2200      	movs	r2, #0
 8007548:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	330c      	adds	r3, #12
 8007550:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007552:	697b      	ldr	r3, [r7, #20]
 8007554:	e853 3f00 	ldrex	r3, [r3]
 8007558:	613b      	str	r3, [r7, #16]
   return(result);
 800755a:	693b      	ldr	r3, [r7, #16]
 800755c:	f023 0310 	bic.w	r3, r3, #16
 8007560:	627b      	str	r3, [r7, #36]	; 0x24
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	330c      	adds	r3, #12
 8007568:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800756a:	623a      	str	r2, [r7, #32]
 800756c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800756e:	69f9      	ldr	r1, [r7, #28]
 8007570:	6a3a      	ldr	r2, [r7, #32]
 8007572:	e841 2300 	strex	r3, r2, [r1]
 8007576:	61bb      	str	r3, [r7, #24]
   return(result);
 8007578:	69bb      	ldr	r3, [r7, #24]
 800757a:	2b00      	cmp	r3, #0
 800757c:	d1e5      	bne.n	800754a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	f003 0310 	and.w	r3, r3, #16
 8007588:	2b10      	cmp	r3, #16
 800758a:	d10a      	bne.n	80075a2 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800758c:	2300      	movs	r3, #0
 800758e:	60fb      	str	r3, [r7, #12]
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	60fb      	str	r3, [r7, #12]
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	685b      	ldr	r3, [r3, #4]
 800759e:	60fb      	str	r3, [r7, #12]
 80075a0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80075a6:	4619      	mov	r1, r3
 80075a8:	6878      	ldr	r0, [r7, #4]
 80075aa:	f7ff fc3b 	bl	8006e24 <HAL_UARTEx_RxEventCallback>
 80075ae:	e002      	b.n	80075b6 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80075b0:	6878      	ldr	r0, [r7, #4]
 80075b2:	f7fa fbe1 	bl	8001d78 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80075b6:	2300      	movs	r3, #0
 80075b8:	e002      	b.n	80075c0 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80075ba:	2300      	movs	r3, #0
 80075bc:	e000      	b.n	80075c0 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80075be:	2302      	movs	r3, #2
  }
}
 80075c0:	4618      	mov	r0, r3
 80075c2:	3730      	adds	r7, #48	; 0x30
 80075c4:	46bd      	mov	sp, r7
 80075c6:	bd80      	pop	{r7, pc}

080075c8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80075c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80075cc:	b0c0      	sub	sp, #256	; 0x100
 80075ce:	af00      	add	r7, sp, #0
 80075d0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80075d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	691b      	ldr	r3, [r3, #16]
 80075dc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80075e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80075e4:	68d9      	ldr	r1, [r3, #12]
 80075e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80075ea:	681a      	ldr	r2, [r3, #0]
 80075ec:	ea40 0301 	orr.w	r3, r0, r1
 80075f0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80075f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80075f6:	689a      	ldr	r2, [r3, #8]
 80075f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80075fc:	691b      	ldr	r3, [r3, #16]
 80075fe:	431a      	orrs	r2, r3
 8007600:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007604:	695b      	ldr	r3, [r3, #20]
 8007606:	431a      	orrs	r2, r3
 8007608:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800760c:	69db      	ldr	r3, [r3, #28]
 800760e:	4313      	orrs	r3, r2
 8007610:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007614:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	68db      	ldr	r3, [r3, #12]
 800761c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8007620:	f021 010c 	bic.w	r1, r1, #12
 8007624:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007628:	681a      	ldr	r2, [r3, #0]
 800762a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800762e:	430b      	orrs	r3, r1
 8007630:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007632:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	695b      	ldr	r3, [r3, #20]
 800763a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800763e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007642:	6999      	ldr	r1, [r3, #24]
 8007644:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007648:	681a      	ldr	r2, [r3, #0]
 800764a:	ea40 0301 	orr.w	r3, r0, r1
 800764e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007650:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007654:	681a      	ldr	r2, [r3, #0]
 8007656:	4b8f      	ldr	r3, [pc, #572]	; (8007894 <UART_SetConfig+0x2cc>)
 8007658:	429a      	cmp	r2, r3
 800765a:	d005      	beq.n	8007668 <UART_SetConfig+0xa0>
 800765c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007660:	681a      	ldr	r2, [r3, #0]
 8007662:	4b8d      	ldr	r3, [pc, #564]	; (8007898 <UART_SetConfig+0x2d0>)
 8007664:	429a      	cmp	r2, r3
 8007666:	d104      	bne.n	8007672 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007668:	f7fd fd3c 	bl	80050e4 <HAL_RCC_GetPCLK2Freq>
 800766c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8007670:	e003      	b.n	800767a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007672:	f7fd fd23 	bl	80050bc <HAL_RCC_GetPCLK1Freq>
 8007676:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800767a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800767e:	69db      	ldr	r3, [r3, #28]
 8007680:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007684:	f040 810c 	bne.w	80078a0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007688:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800768c:	2200      	movs	r2, #0
 800768e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007692:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8007696:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800769a:	4622      	mov	r2, r4
 800769c:	462b      	mov	r3, r5
 800769e:	1891      	adds	r1, r2, r2
 80076a0:	65b9      	str	r1, [r7, #88]	; 0x58
 80076a2:	415b      	adcs	r3, r3
 80076a4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80076a6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80076aa:	4621      	mov	r1, r4
 80076ac:	eb12 0801 	adds.w	r8, r2, r1
 80076b0:	4629      	mov	r1, r5
 80076b2:	eb43 0901 	adc.w	r9, r3, r1
 80076b6:	f04f 0200 	mov.w	r2, #0
 80076ba:	f04f 0300 	mov.w	r3, #0
 80076be:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80076c2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80076c6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80076ca:	4690      	mov	r8, r2
 80076cc:	4699      	mov	r9, r3
 80076ce:	4623      	mov	r3, r4
 80076d0:	eb18 0303 	adds.w	r3, r8, r3
 80076d4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80076d8:	462b      	mov	r3, r5
 80076da:	eb49 0303 	adc.w	r3, r9, r3
 80076de:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80076e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80076e6:	685b      	ldr	r3, [r3, #4]
 80076e8:	2200      	movs	r2, #0
 80076ea:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80076ee:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80076f2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80076f6:	460b      	mov	r3, r1
 80076f8:	18db      	adds	r3, r3, r3
 80076fa:	653b      	str	r3, [r7, #80]	; 0x50
 80076fc:	4613      	mov	r3, r2
 80076fe:	eb42 0303 	adc.w	r3, r2, r3
 8007702:	657b      	str	r3, [r7, #84]	; 0x54
 8007704:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8007708:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800770c:	f7f9 f94a 	bl	80009a4 <__aeabi_uldivmod>
 8007710:	4602      	mov	r2, r0
 8007712:	460b      	mov	r3, r1
 8007714:	4b61      	ldr	r3, [pc, #388]	; (800789c <UART_SetConfig+0x2d4>)
 8007716:	fba3 2302 	umull	r2, r3, r3, r2
 800771a:	095b      	lsrs	r3, r3, #5
 800771c:	011c      	lsls	r4, r3, #4
 800771e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007722:	2200      	movs	r2, #0
 8007724:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007728:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800772c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8007730:	4642      	mov	r2, r8
 8007732:	464b      	mov	r3, r9
 8007734:	1891      	adds	r1, r2, r2
 8007736:	64b9      	str	r1, [r7, #72]	; 0x48
 8007738:	415b      	adcs	r3, r3
 800773a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800773c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8007740:	4641      	mov	r1, r8
 8007742:	eb12 0a01 	adds.w	sl, r2, r1
 8007746:	4649      	mov	r1, r9
 8007748:	eb43 0b01 	adc.w	fp, r3, r1
 800774c:	f04f 0200 	mov.w	r2, #0
 8007750:	f04f 0300 	mov.w	r3, #0
 8007754:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007758:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800775c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007760:	4692      	mov	sl, r2
 8007762:	469b      	mov	fp, r3
 8007764:	4643      	mov	r3, r8
 8007766:	eb1a 0303 	adds.w	r3, sl, r3
 800776a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800776e:	464b      	mov	r3, r9
 8007770:	eb4b 0303 	adc.w	r3, fp, r3
 8007774:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007778:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800777c:	685b      	ldr	r3, [r3, #4]
 800777e:	2200      	movs	r2, #0
 8007780:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007784:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8007788:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800778c:	460b      	mov	r3, r1
 800778e:	18db      	adds	r3, r3, r3
 8007790:	643b      	str	r3, [r7, #64]	; 0x40
 8007792:	4613      	mov	r3, r2
 8007794:	eb42 0303 	adc.w	r3, r2, r3
 8007798:	647b      	str	r3, [r7, #68]	; 0x44
 800779a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800779e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80077a2:	f7f9 f8ff 	bl	80009a4 <__aeabi_uldivmod>
 80077a6:	4602      	mov	r2, r0
 80077a8:	460b      	mov	r3, r1
 80077aa:	4611      	mov	r1, r2
 80077ac:	4b3b      	ldr	r3, [pc, #236]	; (800789c <UART_SetConfig+0x2d4>)
 80077ae:	fba3 2301 	umull	r2, r3, r3, r1
 80077b2:	095b      	lsrs	r3, r3, #5
 80077b4:	2264      	movs	r2, #100	; 0x64
 80077b6:	fb02 f303 	mul.w	r3, r2, r3
 80077ba:	1acb      	subs	r3, r1, r3
 80077bc:	00db      	lsls	r3, r3, #3
 80077be:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80077c2:	4b36      	ldr	r3, [pc, #216]	; (800789c <UART_SetConfig+0x2d4>)
 80077c4:	fba3 2302 	umull	r2, r3, r3, r2
 80077c8:	095b      	lsrs	r3, r3, #5
 80077ca:	005b      	lsls	r3, r3, #1
 80077cc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80077d0:	441c      	add	r4, r3
 80077d2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80077d6:	2200      	movs	r2, #0
 80077d8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80077dc:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80077e0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80077e4:	4642      	mov	r2, r8
 80077e6:	464b      	mov	r3, r9
 80077e8:	1891      	adds	r1, r2, r2
 80077ea:	63b9      	str	r1, [r7, #56]	; 0x38
 80077ec:	415b      	adcs	r3, r3
 80077ee:	63fb      	str	r3, [r7, #60]	; 0x3c
 80077f0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80077f4:	4641      	mov	r1, r8
 80077f6:	1851      	adds	r1, r2, r1
 80077f8:	6339      	str	r1, [r7, #48]	; 0x30
 80077fa:	4649      	mov	r1, r9
 80077fc:	414b      	adcs	r3, r1
 80077fe:	637b      	str	r3, [r7, #52]	; 0x34
 8007800:	f04f 0200 	mov.w	r2, #0
 8007804:	f04f 0300 	mov.w	r3, #0
 8007808:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800780c:	4659      	mov	r1, fp
 800780e:	00cb      	lsls	r3, r1, #3
 8007810:	4651      	mov	r1, sl
 8007812:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007816:	4651      	mov	r1, sl
 8007818:	00ca      	lsls	r2, r1, #3
 800781a:	4610      	mov	r0, r2
 800781c:	4619      	mov	r1, r3
 800781e:	4603      	mov	r3, r0
 8007820:	4642      	mov	r2, r8
 8007822:	189b      	adds	r3, r3, r2
 8007824:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007828:	464b      	mov	r3, r9
 800782a:	460a      	mov	r2, r1
 800782c:	eb42 0303 	adc.w	r3, r2, r3
 8007830:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007834:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007838:	685b      	ldr	r3, [r3, #4]
 800783a:	2200      	movs	r2, #0
 800783c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007840:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8007844:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8007848:	460b      	mov	r3, r1
 800784a:	18db      	adds	r3, r3, r3
 800784c:	62bb      	str	r3, [r7, #40]	; 0x28
 800784e:	4613      	mov	r3, r2
 8007850:	eb42 0303 	adc.w	r3, r2, r3
 8007854:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007856:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800785a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800785e:	f7f9 f8a1 	bl	80009a4 <__aeabi_uldivmod>
 8007862:	4602      	mov	r2, r0
 8007864:	460b      	mov	r3, r1
 8007866:	4b0d      	ldr	r3, [pc, #52]	; (800789c <UART_SetConfig+0x2d4>)
 8007868:	fba3 1302 	umull	r1, r3, r3, r2
 800786c:	095b      	lsrs	r3, r3, #5
 800786e:	2164      	movs	r1, #100	; 0x64
 8007870:	fb01 f303 	mul.w	r3, r1, r3
 8007874:	1ad3      	subs	r3, r2, r3
 8007876:	00db      	lsls	r3, r3, #3
 8007878:	3332      	adds	r3, #50	; 0x32
 800787a:	4a08      	ldr	r2, [pc, #32]	; (800789c <UART_SetConfig+0x2d4>)
 800787c:	fba2 2303 	umull	r2, r3, r2, r3
 8007880:	095b      	lsrs	r3, r3, #5
 8007882:	f003 0207 	and.w	r2, r3, #7
 8007886:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	4422      	add	r2, r4
 800788e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007890:	e105      	b.n	8007a9e <UART_SetConfig+0x4d6>
 8007892:	bf00      	nop
 8007894:	40011000 	.word	0x40011000
 8007898:	40011400 	.word	0x40011400
 800789c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80078a0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80078a4:	2200      	movs	r2, #0
 80078a6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80078aa:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80078ae:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80078b2:	4642      	mov	r2, r8
 80078b4:	464b      	mov	r3, r9
 80078b6:	1891      	adds	r1, r2, r2
 80078b8:	6239      	str	r1, [r7, #32]
 80078ba:	415b      	adcs	r3, r3
 80078bc:	627b      	str	r3, [r7, #36]	; 0x24
 80078be:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80078c2:	4641      	mov	r1, r8
 80078c4:	1854      	adds	r4, r2, r1
 80078c6:	4649      	mov	r1, r9
 80078c8:	eb43 0501 	adc.w	r5, r3, r1
 80078cc:	f04f 0200 	mov.w	r2, #0
 80078d0:	f04f 0300 	mov.w	r3, #0
 80078d4:	00eb      	lsls	r3, r5, #3
 80078d6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80078da:	00e2      	lsls	r2, r4, #3
 80078dc:	4614      	mov	r4, r2
 80078de:	461d      	mov	r5, r3
 80078e0:	4643      	mov	r3, r8
 80078e2:	18e3      	adds	r3, r4, r3
 80078e4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80078e8:	464b      	mov	r3, r9
 80078ea:	eb45 0303 	adc.w	r3, r5, r3
 80078ee:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80078f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80078f6:	685b      	ldr	r3, [r3, #4]
 80078f8:	2200      	movs	r2, #0
 80078fa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80078fe:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007902:	f04f 0200 	mov.w	r2, #0
 8007906:	f04f 0300 	mov.w	r3, #0
 800790a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800790e:	4629      	mov	r1, r5
 8007910:	008b      	lsls	r3, r1, #2
 8007912:	4621      	mov	r1, r4
 8007914:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007918:	4621      	mov	r1, r4
 800791a:	008a      	lsls	r2, r1, #2
 800791c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8007920:	f7f9 f840 	bl	80009a4 <__aeabi_uldivmod>
 8007924:	4602      	mov	r2, r0
 8007926:	460b      	mov	r3, r1
 8007928:	4b60      	ldr	r3, [pc, #384]	; (8007aac <UART_SetConfig+0x4e4>)
 800792a:	fba3 2302 	umull	r2, r3, r3, r2
 800792e:	095b      	lsrs	r3, r3, #5
 8007930:	011c      	lsls	r4, r3, #4
 8007932:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007936:	2200      	movs	r2, #0
 8007938:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800793c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8007940:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8007944:	4642      	mov	r2, r8
 8007946:	464b      	mov	r3, r9
 8007948:	1891      	adds	r1, r2, r2
 800794a:	61b9      	str	r1, [r7, #24]
 800794c:	415b      	adcs	r3, r3
 800794e:	61fb      	str	r3, [r7, #28]
 8007950:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007954:	4641      	mov	r1, r8
 8007956:	1851      	adds	r1, r2, r1
 8007958:	6139      	str	r1, [r7, #16]
 800795a:	4649      	mov	r1, r9
 800795c:	414b      	adcs	r3, r1
 800795e:	617b      	str	r3, [r7, #20]
 8007960:	f04f 0200 	mov.w	r2, #0
 8007964:	f04f 0300 	mov.w	r3, #0
 8007968:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800796c:	4659      	mov	r1, fp
 800796e:	00cb      	lsls	r3, r1, #3
 8007970:	4651      	mov	r1, sl
 8007972:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007976:	4651      	mov	r1, sl
 8007978:	00ca      	lsls	r2, r1, #3
 800797a:	4610      	mov	r0, r2
 800797c:	4619      	mov	r1, r3
 800797e:	4603      	mov	r3, r0
 8007980:	4642      	mov	r2, r8
 8007982:	189b      	adds	r3, r3, r2
 8007984:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007988:	464b      	mov	r3, r9
 800798a:	460a      	mov	r2, r1
 800798c:	eb42 0303 	adc.w	r3, r2, r3
 8007990:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007994:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007998:	685b      	ldr	r3, [r3, #4]
 800799a:	2200      	movs	r2, #0
 800799c:	67bb      	str	r3, [r7, #120]	; 0x78
 800799e:	67fa      	str	r2, [r7, #124]	; 0x7c
 80079a0:	f04f 0200 	mov.w	r2, #0
 80079a4:	f04f 0300 	mov.w	r3, #0
 80079a8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80079ac:	4649      	mov	r1, r9
 80079ae:	008b      	lsls	r3, r1, #2
 80079b0:	4641      	mov	r1, r8
 80079b2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80079b6:	4641      	mov	r1, r8
 80079b8:	008a      	lsls	r2, r1, #2
 80079ba:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80079be:	f7f8 fff1 	bl	80009a4 <__aeabi_uldivmod>
 80079c2:	4602      	mov	r2, r0
 80079c4:	460b      	mov	r3, r1
 80079c6:	4b39      	ldr	r3, [pc, #228]	; (8007aac <UART_SetConfig+0x4e4>)
 80079c8:	fba3 1302 	umull	r1, r3, r3, r2
 80079cc:	095b      	lsrs	r3, r3, #5
 80079ce:	2164      	movs	r1, #100	; 0x64
 80079d0:	fb01 f303 	mul.w	r3, r1, r3
 80079d4:	1ad3      	subs	r3, r2, r3
 80079d6:	011b      	lsls	r3, r3, #4
 80079d8:	3332      	adds	r3, #50	; 0x32
 80079da:	4a34      	ldr	r2, [pc, #208]	; (8007aac <UART_SetConfig+0x4e4>)
 80079dc:	fba2 2303 	umull	r2, r3, r2, r3
 80079e0:	095b      	lsrs	r3, r3, #5
 80079e2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80079e6:	441c      	add	r4, r3
 80079e8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80079ec:	2200      	movs	r2, #0
 80079ee:	673b      	str	r3, [r7, #112]	; 0x70
 80079f0:	677a      	str	r2, [r7, #116]	; 0x74
 80079f2:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80079f6:	4642      	mov	r2, r8
 80079f8:	464b      	mov	r3, r9
 80079fa:	1891      	adds	r1, r2, r2
 80079fc:	60b9      	str	r1, [r7, #8]
 80079fe:	415b      	adcs	r3, r3
 8007a00:	60fb      	str	r3, [r7, #12]
 8007a02:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007a06:	4641      	mov	r1, r8
 8007a08:	1851      	adds	r1, r2, r1
 8007a0a:	6039      	str	r1, [r7, #0]
 8007a0c:	4649      	mov	r1, r9
 8007a0e:	414b      	adcs	r3, r1
 8007a10:	607b      	str	r3, [r7, #4]
 8007a12:	f04f 0200 	mov.w	r2, #0
 8007a16:	f04f 0300 	mov.w	r3, #0
 8007a1a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007a1e:	4659      	mov	r1, fp
 8007a20:	00cb      	lsls	r3, r1, #3
 8007a22:	4651      	mov	r1, sl
 8007a24:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007a28:	4651      	mov	r1, sl
 8007a2a:	00ca      	lsls	r2, r1, #3
 8007a2c:	4610      	mov	r0, r2
 8007a2e:	4619      	mov	r1, r3
 8007a30:	4603      	mov	r3, r0
 8007a32:	4642      	mov	r2, r8
 8007a34:	189b      	adds	r3, r3, r2
 8007a36:	66bb      	str	r3, [r7, #104]	; 0x68
 8007a38:	464b      	mov	r3, r9
 8007a3a:	460a      	mov	r2, r1
 8007a3c:	eb42 0303 	adc.w	r3, r2, r3
 8007a40:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007a42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007a46:	685b      	ldr	r3, [r3, #4]
 8007a48:	2200      	movs	r2, #0
 8007a4a:	663b      	str	r3, [r7, #96]	; 0x60
 8007a4c:	667a      	str	r2, [r7, #100]	; 0x64
 8007a4e:	f04f 0200 	mov.w	r2, #0
 8007a52:	f04f 0300 	mov.w	r3, #0
 8007a56:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8007a5a:	4649      	mov	r1, r9
 8007a5c:	008b      	lsls	r3, r1, #2
 8007a5e:	4641      	mov	r1, r8
 8007a60:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007a64:	4641      	mov	r1, r8
 8007a66:	008a      	lsls	r2, r1, #2
 8007a68:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8007a6c:	f7f8 ff9a 	bl	80009a4 <__aeabi_uldivmod>
 8007a70:	4602      	mov	r2, r0
 8007a72:	460b      	mov	r3, r1
 8007a74:	4b0d      	ldr	r3, [pc, #52]	; (8007aac <UART_SetConfig+0x4e4>)
 8007a76:	fba3 1302 	umull	r1, r3, r3, r2
 8007a7a:	095b      	lsrs	r3, r3, #5
 8007a7c:	2164      	movs	r1, #100	; 0x64
 8007a7e:	fb01 f303 	mul.w	r3, r1, r3
 8007a82:	1ad3      	subs	r3, r2, r3
 8007a84:	011b      	lsls	r3, r3, #4
 8007a86:	3332      	adds	r3, #50	; 0x32
 8007a88:	4a08      	ldr	r2, [pc, #32]	; (8007aac <UART_SetConfig+0x4e4>)
 8007a8a:	fba2 2303 	umull	r2, r3, r2, r3
 8007a8e:	095b      	lsrs	r3, r3, #5
 8007a90:	f003 020f 	and.w	r2, r3, #15
 8007a94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	4422      	add	r2, r4
 8007a9c:	609a      	str	r2, [r3, #8]
}
 8007a9e:	bf00      	nop
 8007aa0:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8007aa4:	46bd      	mov	sp, r7
 8007aa6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007aaa:	bf00      	nop
 8007aac:	51eb851f 	.word	0x51eb851f

08007ab0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007ab0:	b084      	sub	sp, #16
 8007ab2:	b580      	push	{r7, lr}
 8007ab4:	b084      	sub	sp, #16
 8007ab6:	af00      	add	r7, sp, #0
 8007ab8:	6078      	str	r0, [r7, #4]
 8007aba:	f107 001c 	add.w	r0, r7, #28
 8007abe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007ac2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ac4:	2b01      	cmp	r3, #1
 8007ac6:	d122      	bne.n	8007b0e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007acc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	68db      	ldr	r3, [r3, #12]
 8007ad8:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8007adc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007ae0:	687a      	ldr	r2, [r7, #4]
 8007ae2:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	68db      	ldr	r3, [r3, #12]
 8007ae8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007af0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007af2:	2b01      	cmp	r3, #1
 8007af4:	d105      	bne.n	8007b02 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	68db      	ldr	r3, [r3, #12]
 8007afa:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007b02:	6878      	ldr	r0, [r7, #4]
 8007b04:	f001 fbee 	bl	80092e4 <USB_CoreReset>
 8007b08:	4603      	mov	r3, r0
 8007b0a:	73fb      	strb	r3, [r7, #15]
 8007b0c:	e01a      	b.n	8007b44 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	68db      	ldr	r3, [r3, #12]
 8007b12:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007b1a:	6878      	ldr	r0, [r7, #4]
 8007b1c:	f001 fbe2 	bl	80092e4 <USB_CoreReset>
 8007b20:	4603      	mov	r3, r0
 8007b22:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8007b24:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d106      	bne.n	8007b38 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b2e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	639a      	str	r2, [r3, #56]	; 0x38
 8007b36:	e005      	b.n	8007b44 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b3c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8007b44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b46:	2b01      	cmp	r3, #1
 8007b48:	d10b      	bne.n	8007b62 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	689b      	ldr	r3, [r3, #8]
 8007b4e:	f043 0206 	orr.w	r2, r3, #6
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	689b      	ldr	r3, [r3, #8]
 8007b5a:	f043 0220 	orr.w	r2, r3, #32
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8007b62:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b64:	4618      	mov	r0, r3
 8007b66:	3710      	adds	r7, #16
 8007b68:	46bd      	mov	sp, r7
 8007b6a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007b6e:	b004      	add	sp, #16
 8007b70:	4770      	bx	lr
	...

08007b74 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8007b74:	b480      	push	{r7}
 8007b76:	b087      	sub	sp, #28
 8007b78:	af00      	add	r7, sp, #0
 8007b7a:	60f8      	str	r0, [r7, #12]
 8007b7c:	60b9      	str	r1, [r7, #8]
 8007b7e:	4613      	mov	r3, r2
 8007b80:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8007b82:	79fb      	ldrb	r3, [r7, #7]
 8007b84:	2b02      	cmp	r3, #2
 8007b86:	d165      	bne.n	8007c54 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8007b88:	68bb      	ldr	r3, [r7, #8]
 8007b8a:	4a41      	ldr	r2, [pc, #260]	; (8007c90 <USB_SetTurnaroundTime+0x11c>)
 8007b8c:	4293      	cmp	r3, r2
 8007b8e:	d906      	bls.n	8007b9e <USB_SetTurnaroundTime+0x2a>
 8007b90:	68bb      	ldr	r3, [r7, #8]
 8007b92:	4a40      	ldr	r2, [pc, #256]	; (8007c94 <USB_SetTurnaroundTime+0x120>)
 8007b94:	4293      	cmp	r3, r2
 8007b96:	d202      	bcs.n	8007b9e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8007b98:	230f      	movs	r3, #15
 8007b9a:	617b      	str	r3, [r7, #20]
 8007b9c:	e062      	b.n	8007c64 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8007b9e:	68bb      	ldr	r3, [r7, #8]
 8007ba0:	4a3c      	ldr	r2, [pc, #240]	; (8007c94 <USB_SetTurnaroundTime+0x120>)
 8007ba2:	4293      	cmp	r3, r2
 8007ba4:	d306      	bcc.n	8007bb4 <USB_SetTurnaroundTime+0x40>
 8007ba6:	68bb      	ldr	r3, [r7, #8]
 8007ba8:	4a3b      	ldr	r2, [pc, #236]	; (8007c98 <USB_SetTurnaroundTime+0x124>)
 8007baa:	4293      	cmp	r3, r2
 8007bac:	d202      	bcs.n	8007bb4 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8007bae:	230e      	movs	r3, #14
 8007bb0:	617b      	str	r3, [r7, #20]
 8007bb2:	e057      	b.n	8007c64 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8007bb4:	68bb      	ldr	r3, [r7, #8]
 8007bb6:	4a38      	ldr	r2, [pc, #224]	; (8007c98 <USB_SetTurnaroundTime+0x124>)
 8007bb8:	4293      	cmp	r3, r2
 8007bba:	d306      	bcc.n	8007bca <USB_SetTurnaroundTime+0x56>
 8007bbc:	68bb      	ldr	r3, [r7, #8]
 8007bbe:	4a37      	ldr	r2, [pc, #220]	; (8007c9c <USB_SetTurnaroundTime+0x128>)
 8007bc0:	4293      	cmp	r3, r2
 8007bc2:	d202      	bcs.n	8007bca <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8007bc4:	230d      	movs	r3, #13
 8007bc6:	617b      	str	r3, [r7, #20]
 8007bc8:	e04c      	b.n	8007c64 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8007bca:	68bb      	ldr	r3, [r7, #8]
 8007bcc:	4a33      	ldr	r2, [pc, #204]	; (8007c9c <USB_SetTurnaroundTime+0x128>)
 8007bce:	4293      	cmp	r3, r2
 8007bd0:	d306      	bcc.n	8007be0 <USB_SetTurnaroundTime+0x6c>
 8007bd2:	68bb      	ldr	r3, [r7, #8]
 8007bd4:	4a32      	ldr	r2, [pc, #200]	; (8007ca0 <USB_SetTurnaroundTime+0x12c>)
 8007bd6:	4293      	cmp	r3, r2
 8007bd8:	d802      	bhi.n	8007be0 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8007bda:	230c      	movs	r3, #12
 8007bdc:	617b      	str	r3, [r7, #20]
 8007bde:	e041      	b.n	8007c64 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8007be0:	68bb      	ldr	r3, [r7, #8]
 8007be2:	4a2f      	ldr	r2, [pc, #188]	; (8007ca0 <USB_SetTurnaroundTime+0x12c>)
 8007be4:	4293      	cmp	r3, r2
 8007be6:	d906      	bls.n	8007bf6 <USB_SetTurnaroundTime+0x82>
 8007be8:	68bb      	ldr	r3, [r7, #8]
 8007bea:	4a2e      	ldr	r2, [pc, #184]	; (8007ca4 <USB_SetTurnaroundTime+0x130>)
 8007bec:	4293      	cmp	r3, r2
 8007bee:	d802      	bhi.n	8007bf6 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8007bf0:	230b      	movs	r3, #11
 8007bf2:	617b      	str	r3, [r7, #20]
 8007bf4:	e036      	b.n	8007c64 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8007bf6:	68bb      	ldr	r3, [r7, #8]
 8007bf8:	4a2a      	ldr	r2, [pc, #168]	; (8007ca4 <USB_SetTurnaroundTime+0x130>)
 8007bfa:	4293      	cmp	r3, r2
 8007bfc:	d906      	bls.n	8007c0c <USB_SetTurnaroundTime+0x98>
 8007bfe:	68bb      	ldr	r3, [r7, #8]
 8007c00:	4a29      	ldr	r2, [pc, #164]	; (8007ca8 <USB_SetTurnaroundTime+0x134>)
 8007c02:	4293      	cmp	r3, r2
 8007c04:	d802      	bhi.n	8007c0c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8007c06:	230a      	movs	r3, #10
 8007c08:	617b      	str	r3, [r7, #20]
 8007c0a:	e02b      	b.n	8007c64 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8007c0c:	68bb      	ldr	r3, [r7, #8]
 8007c0e:	4a26      	ldr	r2, [pc, #152]	; (8007ca8 <USB_SetTurnaroundTime+0x134>)
 8007c10:	4293      	cmp	r3, r2
 8007c12:	d906      	bls.n	8007c22 <USB_SetTurnaroundTime+0xae>
 8007c14:	68bb      	ldr	r3, [r7, #8]
 8007c16:	4a25      	ldr	r2, [pc, #148]	; (8007cac <USB_SetTurnaroundTime+0x138>)
 8007c18:	4293      	cmp	r3, r2
 8007c1a:	d202      	bcs.n	8007c22 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8007c1c:	2309      	movs	r3, #9
 8007c1e:	617b      	str	r3, [r7, #20]
 8007c20:	e020      	b.n	8007c64 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8007c22:	68bb      	ldr	r3, [r7, #8]
 8007c24:	4a21      	ldr	r2, [pc, #132]	; (8007cac <USB_SetTurnaroundTime+0x138>)
 8007c26:	4293      	cmp	r3, r2
 8007c28:	d306      	bcc.n	8007c38 <USB_SetTurnaroundTime+0xc4>
 8007c2a:	68bb      	ldr	r3, [r7, #8]
 8007c2c:	4a20      	ldr	r2, [pc, #128]	; (8007cb0 <USB_SetTurnaroundTime+0x13c>)
 8007c2e:	4293      	cmp	r3, r2
 8007c30:	d802      	bhi.n	8007c38 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8007c32:	2308      	movs	r3, #8
 8007c34:	617b      	str	r3, [r7, #20]
 8007c36:	e015      	b.n	8007c64 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8007c38:	68bb      	ldr	r3, [r7, #8]
 8007c3a:	4a1d      	ldr	r2, [pc, #116]	; (8007cb0 <USB_SetTurnaroundTime+0x13c>)
 8007c3c:	4293      	cmp	r3, r2
 8007c3e:	d906      	bls.n	8007c4e <USB_SetTurnaroundTime+0xda>
 8007c40:	68bb      	ldr	r3, [r7, #8]
 8007c42:	4a1c      	ldr	r2, [pc, #112]	; (8007cb4 <USB_SetTurnaroundTime+0x140>)
 8007c44:	4293      	cmp	r3, r2
 8007c46:	d202      	bcs.n	8007c4e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8007c48:	2307      	movs	r3, #7
 8007c4a:	617b      	str	r3, [r7, #20]
 8007c4c:	e00a      	b.n	8007c64 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8007c4e:	2306      	movs	r3, #6
 8007c50:	617b      	str	r3, [r7, #20]
 8007c52:	e007      	b.n	8007c64 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8007c54:	79fb      	ldrb	r3, [r7, #7]
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d102      	bne.n	8007c60 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8007c5a:	2309      	movs	r3, #9
 8007c5c:	617b      	str	r3, [r7, #20]
 8007c5e:	e001      	b.n	8007c64 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8007c60:	2309      	movs	r3, #9
 8007c62:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	68db      	ldr	r3, [r3, #12]
 8007c68:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	68da      	ldr	r2, [r3, #12]
 8007c74:	697b      	ldr	r3, [r7, #20]
 8007c76:	029b      	lsls	r3, r3, #10
 8007c78:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8007c7c:	431a      	orrs	r2, r3
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8007c82:	2300      	movs	r3, #0
}
 8007c84:	4618      	mov	r0, r3
 8007c86:	371c      	adds	r7, #28
 8007c88:	46bd      	mov	sp, r7
 8007c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c8e:	4770      	bx	lr
 8007c90:	00d8acbf 	.word	0x00d8acbf
 8007c94:	00e4e1c0 	.word	0x00e4e1c0
 8007c98:	00f42400 	.word	0x00f42400
 8007c9c:	01067380 	.word	0x01067380
 8007ca0:	011a499f 	.word	0x011a499f
 8007ca4:	01312cff 	.word	0x01312cff
 8007ca8:	014ca43f 	.word	0x014ca43f
 8007cac:	016e3600 	.word	0x016e3600
 8007cb0:	01a6ab1f 	.word	0x01a6ab1f
 8007cb4:	01e84800 	.word	0x01e84800

08007cb8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007cb8:	b480      	push	{r7}
 8007cba:	b083      	sub	sp, #12
 8007cbc:	af00      	add	r7, sp, #0
 8007cbe:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	689b      	ldr	r3, [r3, #8]
 8007cc4:	f043 0201 	orr.w	r2, r3, #1
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007ccc:	2300      	movs	r3, #0
}
 8007cce:	4618      	mov	r0, r3
 8007cd0:	370c      	adds	r7, #12
 8007cd2:	46bd      	mov	sp, r7
 8007cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cd8:	4770      	bx	lr

08007cda <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007cda:	b480      	push	{r7}
 8007cdc:	b083      	sub	sp, #12
 8007cde:	af00      	add	r7, sp, #0
 8007ce0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	689b      	ldr	r3, [r3, #8]
 8007ce6:	f023 0201 	bic.w	r2, r3, #1
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007cee:	2300      	movs	r3, #0
}
 8007cf0:	4618      	mov	r0, r3
 8007cf2:	370c      	adds	r7, #12
 8007cf4:	46bd      	mov	sp, r7
 8007cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cfa:	4770      	bx	lr

08007cfc <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007cfc:	b580      	push	{r7, lr}
 8007cfe:	b084      	sub	sp, #16
 8007d00:	af00      	add	r7, sp, #0
 8007d02:	6078      	str	r0, [r7, #4]
 8007d04:	460b      	mov	r3, r1
 8007d06:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8007d08:	2300      	movs	r3, #0
 8007d0a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	68db      	ldr	r3, [r3, #12]
 8007d10:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007d18:	78fb      	ldrb	r3, [r7, #3]
 8007d1a:	2b01      	cmp	r3, #1
 8007d1c:	d115      	bne.n	8007d4a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	68db      	ldr	r3, [r3, #12]
 8007d22:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007d2a:	2001      	movs	r0, #1
 8007d2c:	f7fa fc12 	bl	8002554 <HAL_Delay>
      ms++;
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	3301      	adds	r3, #1
 8007d34:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8007d36:	6878      	ldr	r0, [r7, #4]
 8007d38:	f001 fa45 	bl	80091c6 <USB_GetMode>
 8007d3c:	4603      	mov	r3, r0
 8007d3e:	2b01      	cmp	r3, #1
 8007d40:	d01e      	beq.n	8007d80 <USB_SetCurrentMode+0x84>
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	2b31      	cmp	r3, #49	; 0x31
 8007d46:	d9f0      	bls.n	8007d2a <USB_SetCurrentMode+0x2e>
 8007d48:	e01a      	b.n	8007d80 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8007d4a:	78fb      	ldrb	r3, [r7, #3]
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d115      	bne.n	8007d7c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	68db      	ldr	r3, [r3, #12]
 8007d54:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007d5c:	2001      	movs	r0, #1
 8007d5e:	f7fa fbf9 	bl	8002554 <HAL_Delay>
      ms++;
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	3301      	adds	r3, #1
 8007d66:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8007d68:	6878      	ldr	r0, [r7, #4]
 8007d6a:	f001 fa2c 	bl	80091c6 <USB_GetMode>
 8007d6e:	4603      	mov	r3, r0
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d005      	beq.n	8007d80 <USB_SetCurrentMode+0x84>
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	2b31      	cmp	r3, #49	; 0x31
 8007d78:	d9f0      	bls.n	8007d5c <USB_SetCurrentMode+0x60>
 8007d7a:	e001      	b.n	8007d80 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8007d7c:	2301      	movs	r3, #1
 8007d7e:	e005      	b.n	8007d8c <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	2b32      	cmp	r3, #50	; 0x32
 8007d84:	d101      	bne.n	8007d8a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8007d86:	2301      	movs	r3, #1
 8007d88:	e000      	b.n	8007d8c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8007d8a:	2300      	movs	r3, #0
}
 8007d8c:	4618      	mov	r0, r3
 8007d8e:	3710      	adds	r7, #16
 8007d90:	46bd      	mov	sp, r7
 8007d92:	bd80      	pop	{r7, pc}

08007d94 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007d94:	b084      	sub	sp, #16
 8007d96:	b580      	push	{r7, lr}
 8007d98:	b086      	sub	sp, #24
 8007d9a:	af00      	add	r7, sp, #0
 8007d9c:	6078      	str	r0, [r7, #4]
 8007d9e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8007da2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8007da6:	2300      	movs	r3, #0
 8007da8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8007dae:	2300      	movs	r3, #0
 8007db0:	613b      	str	r3, [r7, #16]
 8007db2:	e009      	b.n	8007dc8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8007db4:	687a      	ldr	r2, [r7, #4]
 8007db6:	693b      	ldr	r3, [r7, #16]
 8007db8:	3340      	adds	r3, #64	; 0x40
 8007dba:	009b      	lsls	r3, r3, #2
 8007dbc:	4413      	add	r3, r2
 8007dbe:	2200      	movs	r2, #0
 8007dc0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8007dc2:	693b      	ldr	r3, [r7, #16]
 8007dc4:	3301      	adds	r3, #1
 8007dc6:	613b      	str	r3, [r7, #16]
 8007dc8:	693b      	ldr	r3, [r7, #16]
 8007dca:	2b0e      	cmp	r3, #14
 8007dcc:	d9f2      	bls.n	8007db4 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8007dce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d11c      	bne.n	8007e0e <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007dda:	685b      	ldr	r3, [r3, #4]
 8007ddc:	68fa      	ldr	r2, [r7, #12]
 8007dde:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007de2:	f043 0302 	orr.w	r3, r3, #2
 8007de6:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007dec:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007df8:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e04:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	639a      	str	r2, [r3, #56]	; 0x38
 8007e0c:	e00b      	b.n	8007e26 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e12:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e1e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007e2c:	461a      	mov	r2, r3
 8007e2e:	2300      	movs	r3, #0
 8007e30:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007e38:	4619      	mov	r1, r3
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007e40:	461a      	mov	r2, r3
 8007e42:	680b      	ldr	r3, [r1, #0]
 8007e44:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007e46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e48:	2b01      	cmp	r3, #1
 8007e4a:	d10c      	bne.n	8007e66 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8007e4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d104      	bne.n	8007e5c <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8007e52:	2100      	movs	r1, #0
 8007e54:	6878      	ldr	r0, [r7, #4]
 8007e56:	f000 f965 	bl	8008124 <USB_SetDevSpeed>
 8007e5a:	e008      	b.n	8007e6e <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8007e5c:	2101      	movs	r1, #1
 8007e5e:	6878      	ldr	r0, [r7, #4]
 8007e60:	f000 f960 	bl	8008124 <USB_SetDevSpeed>
 8007e64:	e003      	b.n	8007e6e <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8007e66:	2103      	movs	r1, #3
 8007e68:	6878      	ldr	r0, [r7, #4]
 8007e6a:	f000 f95b 	bl	8008124 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007e6e:	2110      	movs	r1, #16
 8007e70:	6878      	ldr	r0, [r7, #4]
 8007e72:	f000 f8f3 	bl	800805c <USB_FlushTxFifo>
 8007e76:	4603      	mov	r3, r0
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d001      	beq.n	8007e80 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8007e7c:	2301      	movs	r3, #1
 8007e7e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007e80:	6878      	ldr	r0, [r7, #4]
 8007e82:	f000 f91f 	bl	80080c4 <USB_FlushRxFifo>
 8007e86:	4603      	mov	r3, r0
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	d001      	beq.n	8007e90 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8007e8c:	2301      	movs	r3, #1
 8007e8e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007e96:	461a      	mov	r2, r3
 8007e98:	2300      	movs	r3, #0
 8007e9a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007ea2:	461a      	mov	r2, r3
 8007ea4:	2300      	movs	r3, #0
 8007ea6:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007eae:	461a      	mov	r2, r3
 8007eb0:	2300      	movs	r3, #0
 8007eb2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007eb4:	2300      	movs	r3, #0
 8007eb6:	613b      	str	r3, [r7, #16]
 8007eb8:	e043      	b.n	8007f42 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007eba:	693b      	ldr	r3, [r7, #16]
 8007ebc:	015a      	lsls	r2, r3, #5
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	4413      	add	r3, r2
 8007ec2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007ecc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007ed0:	d118      	bne.n	8007f04 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8007ed2:	693b      	ldr	r3, [r7, #16]
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d10a      	bne.n	8007eee <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8007ed8:	693b      	ldr	r3, [r7, #16]
 8007eda:	015a      	lsls	r2, r3, #5
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	4413      	add	r3, r2
 8007ee0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ee4:	461a      	mov	r2, r3
 8007ee6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007eea:	6013      	str	r3, [r2, #0]
 8007eec:	e013      	b.n	8007f16 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8007eee:	693b      	ldr	r3, [r7, #16]
 8007ef0:	015a      	lsls	r2, r3, #5
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	4413      	add	r3, r2
 8007ef6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007efa:	461a      	mov	r2, r3
 8007efc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007f00:	6013      	str	r3, [r2, #0]
 8007f02:	e008      	b.n	8007f16 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8007f04:	693b      	ldr	r3, [r7, #16]
 8007f06:	015a      	lsls	r2, r3, #5
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	4413      	add	r3, r2
 8007f0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f10:	461a      	mov	r2, r3
 8007f12:	2300      	movs	r3, #0
 8007f14:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8007f16:	693b      	ldr	r3, [r7, #16]
 8007f18:	015a      	lsls	r2, r3, #5
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	4413      	add	r3, r2
 8007f1e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f22:	461a      	mov	r2, r3
 8007f24:	2300      	movs	r3, #0
 8007f26:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8007f28:	693b      	ldr	r3, [r7, #16]
 8007f2a:	015a      	lsls	r2, r3, #5
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	4413      	add	r3, r2
 8007f30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f34:	461a      	mov	r2, r3
 8007f36:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007f3a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007f3c:	693b      	ldr	r3, [r7, #16]
 8007f3e:	3301      	adds	r3, #1
 8007f40:	613b      	str	r3, [r7, #16]
 8007f42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f44:	693a      	ldr	r2, [r7, #16]
 8007f46:	429a      	cmp	r2, r3
 8007f48:	d3b7      	bcc.n	8007eba <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007f4a:	2300      	movs	r3, #0
 8007f4c:	613b      	str	r3, [r7, #16]
 8007f4e:	e043      	b.n	8007fd8 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007f50:	693b      	ldr	r3, [r7, #16]
 8007f52:	015a      	lsls	r2, r3, #5
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	4413      	add	r3, r2
 8007f58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007f62:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007f66:	d118      	bne.n	8007f9a <USB_DevInit+0x206>
    {
      if (i == 0U)
 8007f68:	693b      	ldr	r3, [r7, #16]
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d10a      	bne.n	8007f84 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8007f6e:	693b      	ldr	r3, [r7, #16]
 8007f70:	015a      	lsls	r2, r3, #5
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	4413      	add	r3, r2
 8007f76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f7a:	461a      	mov	r2, r3
 8007f7c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007f80:	6013      	str	r3, [r2, #0]
 8007f82:	e013      	b.n	8007fac <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8007f84:	693b      	ldr	r3, [r7, #16]
 8007f86:	015a      	lsls	r2, r3, #5
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	4413      	add	r3, r2
 8007f8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f90:	461a      	mov	r2, r3
 8007f92:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007f96:	6013      	str	r3, [r2, #0]
 8007f98:	e008      	b.n	8007fac <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8007f9a:	693b      	ldr	r3, [r7, #16]
 8007f9c:	015a      	lsls	r2, r3, #5
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	4413      	add	r3, r2
 8007fa2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007fa6:	461a      	mov	r2, r3
 8007fa8:	2300      	movs	r3, #0
 8007faa:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8007fac:	693b      	ldr	r3, [r7, #16]
 8007fae:	015a      	lsls	r2, r3, #5
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	4413      	add	r3, r2
 8007fb4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007fb8:	461a      	mov	r2, r3
 8007fba:	2300      	movs	r3, #0
 8007fbc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8007fbe:	693b      	ldr	r3, [r7, #16]
 8007fc0:	015a      	lsls	r2, r3, #5
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	4413      	add	r3, r2
 8007fc6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007fca:	461a      	mov	r2, r3
 8007fcc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007fd0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007fd2:	693b      	ldr	r3, [r7, #16]
 8007fd4:	3301      	adds	r3, #1
 8007fd6:	613b      	str	r3, [r7, #16]
 8007fd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fda:	693a      	ldr	r2, [r7, #16]
 8007fdc:	429a      	cmp	r2, r3
 8007fde:	d3b7      	bcc.n	8007f50 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007fe6:	691b      	ldr	r3, [r3, #16]
 8007fe8:	68fa      	ldr	r2, [r7, #12]
 8007fea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007fee:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007ff2:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	2200      	movs	r2, #0
 8007ff8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8008000:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8008002:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008004:	2b00      	cmp	r3, #0
 8008006:	d105      	bne.n	8008014 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	699b      	ldr	r3, [r3, #24]
 800800c:	f043 0210 	orr.w	r2, r3, #16
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	699a      	ldr	r2, [r3, #24]
 8008018:	4b0f      	ldr	r3, [pc, #60]	; (8008058 <USB_DevInit+0x2c4>)
 800801a:	4313      	orrs	r3, r2
 800801c:	687a      	ldr	r2, [r7, #4]
 800801e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8008020:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008022:	2b00      	cmp	r3, #0
 8008024:	d005      	beq.n	8008032 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	699b      	ldr	r3, [r3, #24]
 800802a:	f043 0208 	orr.w	r2, r3, #8
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8008032:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008034:	2b01      	cmp	r3, #1
 8008036:	d107      	bne.n	8008048 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	699b      	ldr	r3, [r3, #24]
 800803c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008040:	f043 0304 	orr.w	r3, r3, #4
 8008044:	687a      	ldr	r2, [r7, #4]
 8008046:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8008048:	7dfb      	ldrb	r3, [r7, #23]
}
 800804a:	4618      	mov	r0, r3
 800804c:	3718      	adds	r7, #24
 800804e:	46bd      	mov	sp, r7
 8008050:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008054:	b004      	add	sp, #16
 8008056:	4770      	bx	lr
 8008058:	803c3800 	.word	0x803c3800

0800805c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800805c:	b480      	push	{r7}
 800805e:	b085      	sub	sp, #20
 8008060:	af00      	add	r7, sp, #0
 8008062:	6078      	str	r0, [r7, #4]
 8008064:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8008066:	2300      	movs	r3, #0
 8008068:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	3301      	adds	r3, #1
 800806e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	4a13      	ldr	r2, [pc, #76]	; (80080c0 <USB_FlushTxFifo+0x64>)
 8008074:	4293      	cmp	r3, r2
 8008076:	d901      	bls.n	800807c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8008078:	2303      	movs	r3, #3
 800807a:	e01b      	b.n	80080b4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	691b      	ldr	r3, [r3, #16]
 8008080:	2b00      	cmp	r3, #0
 8008082:	daf2      	bge.n	800806a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8008084:	2300      	movs	r3, #0
 8008086:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8008088:	683b      	ldr	r3, [r7, #0]
 800808a:	019b      	lsls	r3, r3, #6
 800808c:	f043 0220 	orr.w	r2, r3, #32
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	3301      	adds	r3, #1
 8008098:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	4a08      	ldr	r2, [pc, #32]	; (80080c0 <USB_FlushTxFifo+0x64>)
 800809e:	4293      	cmp	r3, r2
 80080a0:	d901      	bls.n	80080a6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80080a2:	2303      	movs	r3, #3
 80080a4:	e006      	b.n	80080b4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	691b      	ldr	r3, [r3, #16]
 80080aa:	f003 0320 	and.w	r3, r3, #32
 80080ae:	2b20      	cmp	r3, #32
 80080b0:	d0f0      	beq.n	8008094 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80080b2:	2300      	movs	r3, #0
}
 80080b4:	4618      	mov	r0, r3
 80080b6:	3714      	adds	r7, #20
 80080b8:	46bd      	mov	sp, r7
 80080ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080be:	4770      	bx	lr
 80080c0:	00030d40 	.word	0x00030d40

080080c4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80080c4:	b480      	push	{r7}
 80080c6:	b085      	sub	sp, #20
 80080c8:	af00      	add	r7, sp, #0
 80080ca:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80080cc:	2300      	movs	r3, #0
 80080ce:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	3301      	adds	r3, #1
 80080d4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	4a11      	ldr	r2, [pc, #68]	; (8008120 <USB_FlushRxFifo+0x5c>)
 80080da:	4293      	cmp	r3, r2
 80080dc:	d901      	bls.n	80080e2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80080de:	2303      	movs	r3, #3
 80080e0:	e018      	b.n	8008114 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	691b      	ldr	r3, [r3, #16]
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	daf2      	bge.n	80080d0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80080ea:	2300      	movs	r3, #0
 80080ec:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	2210      	movs	r2, #16
 80080f2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	3301      	adds	r3, #1
 80080f8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	4a08      	ldr	r2, [pc, #32]	; (8008120 <USB_FlushRxFifo+0x5c>)
 80080fe:	4293      	cmp	r3, r2
 8008100:	d901      	bls.n	8008106 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8008102:	2303      	movs	r3, #3
 8008104:	e006      	b.n	8008114 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	691b      	ldr	r3, [r3, #16]
 800810a:	f003 0310 	and.w	r3, r3, #16
 800810e:	2b10      	cmp	r3, #16
 8008110:	d0f0      	beq.n	80080f4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8008112:	2300      	movs	r3, #0
}
 8008114:	4618      	mov	r0, r3
 8008116:	3714      	adds	r7, #20
 8008118:	46bd      	mov	sp, r7
 800811a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800811e:	4770      	bx	lr
 8008120:	00030d40 	.word	0x00030d40

08008124 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8008124:	b480      	push	{r7}
 8008126:	b085      	sub	sp, #20
 8008128:	af00      	add	r7, sp, #0
 800812a:	6078      	str	r0, [r7, #4]
 800812c:	460b      	mov	r3, r1
 800812e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800813a:	681a      	ldr	r2, [r3, #0]
 800813c:	78fb      	ldrb	r3, [r7, #3]
 800813e:	68f9      	ldr	r1, [r7, #12]
 8008140:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008144:	4313      	orrs	r3, r2
 8008146:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8008148:	2300      	movs	r3, #0
}
 800814a:	4618      	mov	r0, r3
 800814c:	3714      	adds	r7, #20
 800814e:	46bd      	mov	sp, r7
 8008150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008154:	4770      	bx	lr

08008156 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8008156:	b480      	push	{r7}
 8008158:	b087      	sub	sp, #28
 800815a:	af00      	add	r7, sp, #0
 800815c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8008162:	693b      	ldr	r3, [r7, #16]
 8008164:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008168:	689b      	ldr	r3, [r3, #8]
 800816a:	f003 0306 	and.w	r3, r3, #6
 800816e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	2b00      	cmp	r3, #0
 8008174:	d102      	bne.n	800817c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8008176:	2300      	movs	r3, #0
 8008178:	75fb      	strb	r3, [r7, #23]
 800817a:	e00a      	b.n	8008192 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	2b02      	cmp	r3, #2
 8008180:	d002      	beq.n	8008188 <USB_GetDevSpeed+0x32>
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	2b06      	cmp	r3, #6
 8008186:	d102      	bne.n	800818e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8008188:	2302      	movs	r3, #2
 800818a:	75fb      	strb	r3, [r7, #23]
 800818c:	e001      	b.n	8008192 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800818e:	230f      	movs	r3, #15
 8008190:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8008192:	7dfb      	ldrb	r3, [r7, #23]
}
 8008194:	4618      	mov	r0, r3
 8008196:	371c      	adds	r7, #28
 8008198:	46bd      	mov	sp, r7
 800819a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800819e:	4770      	bx	lr

080081a0 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80081a0:	b480      	push	{r7}
 80081a2:	b085      	sub	sp, #20
 80081a4:	af00      	add	r7, sp, #0
 80081a6:	6078      	str	r0, [r7, #4]
 80081a8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80081ae:	683b      	ldr	r3, [r7, #0]
 80081b0:	781b      	ldrb	r3, [r3, #0]
 80081b2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80081b4:	683b      	ldr	r3, [r7, #0]
 80081b6:	785b      	ldrb	r3, [r3, #1]
 80081b8:	2b01      	cmp	r3, #1
 80081ba:	d13a      	bne.n	8008232 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80081c2:	69da      	ldr	r2, [r3, #28]
 80081c4:	683b      	ldr	r3, [r7, #0]
 80081c6:	781b      	ldrb	r3, [r3, #0]
 80081c8:	f003 030f 	and.w	r3, r3, #15
 80081cc:	2101      	movs	r1, #1
 80081ce:	fa01 f303 	lsl.w	r3, r1, r3
 80081d2:	b29b      	uxth	r3, r3
 80081d4:	68f9      	ldr	r1, [r7, #12]
 80081d6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80081da:	4313      	orrs	r3, r2
 80081dc:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80081de:	68bb      	ldr	r3, [r7, #8]
 80081e0:	015a      	lsls	r2, r3, #5
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	4413      	add	r3, r2
 80081e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	d155      	bne.n	80082a0 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80081f4:	68bb      	ldr	r3, [r7, #8]
 80081f6:	015a      	lsls	r2, r3, #5
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	4413      	add	r3, r2
 80081fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008200:	681a      	ldr	r2, [r3, #0]
 8008202:	683b      	ldr	r3, [r7, #0]
 8008204:	68db      	ldr	r3, [r3, #12]
 8008206:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800820a:	683b      	ldr	r3, [r7, #0]
 800820c:	791b      	ldrb	r3, [r3, #4]
 800820e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008210:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8008212:	68bb      	ldr	r3, [r7, #8]
 8008214:	059b      	lsls	r3, r3, #22
 8008216:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008218:	4313      	orrs	r3, r2
 800821a:	68ba      	ldr	r2, [r7, #8]
 800821c:	0151      	lsls	r1, r2, #5
 800821e:	68fa      	ldr	r2, [r7, #12]
 8008220:	440a      	add	r2, r1
 8008222:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008226:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800822a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800822e:	6013      	str	r3, [r2, #0]
 8008230:	e036      	b.n	80082a0 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008238:	69da      	ldr	r2, [r3, #28]
 800823a:	683b      	ldr	r3, [r7, #0]
 800823c:	781b      	ldrb	r3, [r3, #0]
 800823e:	f003 030f 	and.w	r3, r3, #15
 8008242:	2101      	movs	r1, #1
 8008244:	fa01 f303 	lsl.w	r3, r1, r3
 8008248:	041b      	lsls	r3, r3, #16
 800824a:	68f9      	ldr	r1, [r7, #12]
 800824c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008250:	4313      	orrs	r3, r2
 8008252:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8008254:	68bb      	ldr	r3, [r7, #8]
 8008256:	015a      	lsls	r2, r3, #5
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	4413      	add	r3, r2
 800825c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008266:	2b00      	cmp	r3, #0
 8008268:	d11a      	bne.n	80082a0 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800826a:	68bb      	ldr	r3, [r7, #8]
 800826c:	015a      	lsls	r2, r3, #5
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	4413      	add	r3, r2
 8008272:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008276:	681a      	ldr	r2, [r3, #0]
 8008278:	683b      	ldr	r3, [r7, #0]
 800827a:	68db      	ldr	r3, [r3, #12]
 800827c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8008280:	683b      	ldr	r3, [r7, #0]
 8008282:	791b      	ldrb	r3, [r3, #4]
 8008284:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8008286:	430b      	orrs	r3, r1
 8008288:	4313      	orrs	r3, r2
 800828a:	68ba      	ldr	r2, [r7, #8]
 800828c:	0151      	lsls	r1, r2, #5
 800828e:	68fa      	ldr	r2, [r7, #12]
 8008290:	440a      	add	r2, r1
 8008292:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008296:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800829a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800829e:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80082a0:	2300      	movs	r3, #0
}
 80082a2:	4618      	mov	r0, r3
 80082a4:	3714      	adds	r7, #20
 80082a6:	46bd      	mov	sp, r7
 80082a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ac:	4770      	bx	lr
	...

080082b0 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80082b0:	b480      	push	{r7}
 80082b2:	b085      	sub	sp, #20
 80082b4:	af00      	add	r7, sp, #0
 80082b6:	6078      	str	r0, [r7, #4]
 80082b8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80082be:	683b      	ldr	r3, [r7, #0]
 80082c0:	781b      	ldrb	r3, [r3, #0]
 80082c2:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80082c4:	683b      	ldr	r3, [r7, #0]
 80082c6:	785b      	ldrb	r3, [r3, #1]
 80082c8:	2b01      	cmp	r3, #1
 80082ca:	d161      	bne.n	8008390 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80082cc:	68bb      	ldr	r3, [r7, #8]
 80082ce:	015a      	lsls	r2, r3, #5
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	4413      	add	r3, r2
 80082d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80082de:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80082e2:	d11f      	bne.n	8008324 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80082e4:	68bb      	ldr	r3, [r7, #8]
 80082e6:	015a      	lsls	r2, r3, #5
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	4413      	add	r3, r2
 80082ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	68ba      	ldr	r2, [r7, #8]
 80082f4:	0151      	lsls	r1, r2, #5
 80082f6:	68fa      	ldr	r2, [r7, #12]
 80082f8:	440a      	add	r2, r1
 80082fa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80082fe:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008302:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8008304:	68bb      	ldr	r3, [r7, #8]
 8008306:	015a      	lsls	r2, r3, #5
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	4413      	add	r3, r2
 800830c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	68ba      	ldr	r2, [r7, #8]
 8008314:	0151      	lsls	r1, r2, #5
 8008316:	68fa      	ldr	r2, [r7, #12]
 8008318:	440a      	add	r2, r1
 800831a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800831e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008322:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800832a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800832c:	683b      	ldr	r3, [r7, #0]
 800832e:	781b      	ldrb	r3, [r3, #0]
 8008330:	f003 030f 	and.w	r3, r3, #15
 8008334:	2101      	movs	r1, #1
 8008336:	fa01 f303 	lsl.w	r3, r1, r3
 800833a:	b29b      	uxth	r3, r3
 800833c:	43db      	mvns	r3, r3
 800833e:	68f9      	ldr	r1, [r7, #12]
 8008340:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008344:	4013      	ands	r3, r2
 8008346:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800834e:	69da      	ldr	r2, [r3, #28]
 8008350:	683b      	ldr	r3, [r7, #0]
 8008352:	781b      	ldrb	r3, [r3, #0]
 8008354:	f003 030f 	and.w	r3, r3, #15
 8008358:	2101      	movs	r1, #1
 800835a:	fa01 f303 	lsl.w	r3, r1, r3
 800835e:	b29b      	uxth	r3, r3
 8008360:	43db      	mvns	r3, r3
 8008362:	68f9      	ldr	r1, [r7, #12]
 8008364:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008368:	4013      	ands	r3, r2
 800836a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800836c:	68bb      	ldr	r3, [r7, #8]
 800836e:	015a      	lsls	r2, r3, #5
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	4413      	add	r3, r2
 8008374:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008378:	681a      	ldr	r2, [r3, #0]
 800837a:	68bb      	ldr	r3, [r7, #8]
 800837c:	0159      	lsls	r1, r3, #5
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	440b      	add	r3, r1
 8008382:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008386:	4619      	mov	r1, r3
 8008388:	4b35      	ldr	r3, [pc, #212]	; (8008460 <USB_DeactivateEndpoint+0x1b0>)
 800838a:	4013      	ands	r3, r2
 800838c:	600b      	str	r3, [r1, #0]
 800838e:	e060      	b.n	8008452 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008390:	68bb      	ldr	r3, [r7, #8]
 8008392:	015a      	lsls	r2, r3, #5
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	4413      	add	r3, r2
 8008398:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80083a2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80083a6:	d11f      	bne.n	80083e8 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80083a8:	68bb      	ldr	r3, [r7, #8]
 80083aa:	015a      	lsls	r2, r3, #5
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	4413      	add	r3, r2
 80083b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	68ba      	ldr	r2, [r7, #8]
 80083b8:	0151      	lsls	r1, r2, #5
 80083ba:	68fa      	ldr	r2, [r7, #12]
 80083bc:	440a      	add	r2, r1
 80083be:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80083c2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80083c6:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80083c8:	68bb      	ldr	r3, [r7, #8]
 80083ca:	015a      	lsls	r2, r3, #5
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	4413      	add	r3, r2
 80083d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	68ba      	ldr	r2, [r7, #8]
 80083d8:	0151      	lsls	r1, r2, #5
 80083da:	68fa      	ldr	r2, [r7, #12]
 80083dc:	440a      	add	r2, r1
 80083de:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80083e2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80083e6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80083ee:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80083f0:	683b      	ldr	r3, [r7, #0]
 80083f2:	781b      	ldrb	r3, [r3, #0]
 80083f4:	f003 030f 	and.w	r3, r3, #15
 80083f8:	2101      	movs	r1, #1
 80083fa:	fa01 f303 	lsl.w	r3, r1, r3
 80083fe:	041b      	lsls	r3, r3, #16
 8008400:	43db      	mvns	r3, r3
 8008402:	68f9      	ldr	r1, [r7, #12]
 8008404:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008408:	4013      	ands	r3, r2
 800840a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008412:	69da      	ldr	r2, [r3, #28]
 8008414:	683b      	ldr	r3, [r7, #0]
 8008416:	781b      	ldrb	r3, [r3, #0]
 8008418:	f003 030f 	and.w	r3, r3, #15
 800841c:	2101      	movs	r1, #1
 800841e:	fa01 f303 	lsl.w	r3, r1, r3
 8008422:	041b      	lsls	r3, r3, #16
 8008424:	43db      	mvns	r3, r3
 8008426:	68f9      	ldr	r1, [r7, #12]
 8008428:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800842c:	4013      	ands	r3, r2
 800842e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8008430:	68bb      	ldr	r3, [r7, #8]
 8008432:	015a      	lsls	r2, r3, #5
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	4413      	add	r3, r2
 8008438:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800843c:	681a      	ldr	r2, [r3, #0]
 800843e:	68bb      	ldr	r3, [r7, #8]
 8008440:	0159      	lsls	r1, r3, #5
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	440b      	add	r3, r1
 8008446:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800844a:	4619      	mov	r1, r3
 800844c:	4b05      	ldr	r3, [pc, #20]	; (8008464 <USB_DeactivateEndpoint+0x1b4>)
 800844e:	4013      	ands	r3, r2
 8008450:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8008452:	2300      	movs	r3, #0
}
 8008454:	4618      	mov	r0, r3
 8008456:	3714      	adds	r7, #20
 8008458:	46bd      	mov	sp, r7
 800845a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800845e:	4770      	bx	lr
 8008460:	ec337800 	.word	0xec337800
 8008464:	eff37800 	.word	0xeff37800

08008468 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8008468:	b580      	push	{r7, lr}
 800846a:	b08a      	sub	sp, #40	; 0x28
 800846c:	af02      	add	r7, sp, #8
 800846e:	60f8      	str	r0, [r7, #12]
 8008470:	60b9      	str	r1, [r7, #8]
 8008472:	4613      	mov	r3, r2
 8008474:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800847a:	68bb      	ldr	r3, [r7, #8]
 800847c:	781b      	ldrb	r3, [r3, #0]
 800847e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008480:	68bb      	ldr	r3, [r7, #8]
 8008482:	785b      	ldrb	r3, [r3, #1]
 8008484:	2b01      	cmp	r3, #1
 8008486:	f040 815c 	bne.w	8008742 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800848a:	68bb      	ldr	r3, [r7, #8]
 800848c:	699b      	ldr	r3, [r3, #24]
 800848e:	2b00      	cmp	r3, #0
 8008490:	d132      	bne.n	80084f8 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008492:	69bb      	ldr	r3, [r7, #24]
 8008494:	015a      	lsls	r2, r3, #5
 8008496:	69fb      	ldr	r3, [r7, #28]
 8008498:	4413      	add	r3, r2
 800849a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800849e:	691b      	ldr	r3, [r3, #16]
 80084a0:	69ba      	ldr	r2, [r7, #24]
 80084a2:	0151      	lsls	r1, r2, #5
 80084a4:	69fa      	ldr	r2, [r7, #28]
 80084a6:	440a      	add	r2, r1
 80084a8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80084ac:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80084b0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80084b4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80084b6:	69bb      	ldr	r3, [r7, #24]
 80084b8:	015a      	lsls	r2, r3, #5
 80084ba:	69fb      	ldr	r3, [r7, #28]
 80084bc:	4413      	add	r3, r2
 80084be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80084c2:	691b      	ldr	r3, [r3, #16]
 80084c4:	69ba      	ldr	r2, [r7, #24]
 80084c6:	0151      	lsls	r1, r2, #5
 80084c8:	69fa      	ldr	r2, [r7, #28]
 80084ca:	440a      	add	r2, r1
 80084cc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80084d0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80084d4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80084d6:	69bb      	ldr	r3, [r7, #24]
 80084d8:	015a      	lsls	r2, r3, #5
 80084da:	69fb      	ldr	r3, [r7, #28]
 80084dc:	4413      	add	r3, r2
 80084de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80084e2:	691b      	ldr	r3, [r3, #16]
 80084e4:	69ba      	ldr	r2, [r7, #24]
 80084e6:	0151      	lsls	r1, r2, #5
 80084e8:	69fa      	ldr	r2, [r7, #28]
 80084ea:	440a      	add	r2, r1
 80084ec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80084f0:	0cdb      	lsrs	r3, r3, #19
 80084f2:	04db      	lsls	r3, r3, #19
 80084f4:	6113      	str	r3, [r2, #16]
 80084f6:	e074      	b.n	80085e2 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80084f8:	69bb      	ldr	r3, [r7, #24]
 80084fa:	015a      	lsls	r2, r3, #5
 80084fc:	69fb      	ldr	r3, [r7, #28]
 80084fe:	4413      	add	r3, r2
 8008500:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008504:	691b      	ldr	r3, [r3, #16]
 8008506:	69ba      	ldr	r2, [r7, #24]
 8008508:	0151      	lsls	r1, r2, #5
 800850a:	69fa      	ldr	r2, [r7, #28]
 800850c:	440a      	add	r2, r1
 800850e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008512:	0cdb      	lsrs	r3, r3, #19
 8008514:	04db      	lsls	r3, r3, #19
 8008516:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008518:	69bb      	ldr	r3, [r7, #24]
 800851a:	015a      	lsls	r2, r3, #5
 800851c:	69fb      	ldr	r3, [r7, #28]
 800851e:	4413      	add	r3, r2
 8008520:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008524:	691b      	ldr	r3, [r3, #16]
 8008526:	69ba      	ldr	r2, [r7, #24]
 8008528:	0151      	lsls	r1, r2, #5
 800852a:	69fa      	ldr	r2, [r7, #28]
 800852c:	440a      	add	r2, r1
 800852e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008532:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008536:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800853a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800853c:	69bb      	ldr	r3, [r7, #24]
 800853e:	015a      	lsls	r2, r3, #5
 8008540:	69fb      	ldr	r3, [r7, #28]
 8008542:	4413      	add	r3, r2
 8008544:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008548:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800854a:	68bb      	ldr	r3, [r7, #8]
 800854c:	6999      	ldr	r1, [r3, #24]
 800854e:	68bb      	ldr	r3, [r7, #8]
 8008550:	68db      	ldr	r3, [r3, #12]
 8008552:	440b      	add	r3, r1
 8008554:	1e59      	subs	r1, r3, #1
 8008556:	68bb      	ldr	r3, [r7, #8]
 8008558:	68db      	ldr	r3, [r3, #12]
 800855a:	fbb1 f3f3 	udiv	r3, r1, r3
 800855e:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8008560:	4b9d      	ldr	r3, [pc, #628]	; (80087d8 <USB_EPStartXfer+0x370>)
 8008562:	400b      	ands	r3, r1
 8008564:	69b9      	ldr	r1, [r7, #24]
 8008566:	0148      	lsls	r0, r1, #5
 8008568:	69f9      	ldr	r1, [r7, #28]
 800856a:	4401      	add	r1, r0
 800856c:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8008570:	4313      	orrs	r3, r2
 8008572:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8008574:	69bb      	ldr	r3, [r7, #24]
 8008576:	015a      	lsls	r2, r3, #5
 8008578:	69fb      	ldr	r3, [r7, #28]
 800857a:	4413      	add	r3, r2
 800857c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008580:	691a      	ldr	r2, [r3, #16]
 8008582:	68bb      	ldr	r3, [r7, #8]
 8008584:	699b      	ldr	r3, [r3, #24]
 8008586:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800858a:	69b9      	ldr	r1, [r7, #24]
 800858c:	0148      	lsls	r0, r1, #5
 800858e:	69f9      	ldr	r1, [r7, #28]
 8008590:	4401      	add	r1, r0
 8008592:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8008596:	4313      	orrs	r3, r2
 8008598:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800859a:	68bb      	ldr	r3, [r7, #8]
 800859c:	791b      	ldrb	r3, [r3, #4]
 800859e:	2b01      	cmp	r3, #1
 80085a0:	d11f      	bne.n	80085e2 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80085a2:	69bb      	ldr	r3, [r7, #24]
 80085a4:	015a      	lsls	r2, r3, #5
 80085a6:	69fb      	ldr	r3, [r7, #28]
 80085a8:	4413      	add	r3, r2
 80085aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80085ae:	691b      	ldr	r3, [r3, #16]
 80085b0:	69ba      	ldr	r2, [r7, #24]
 80085b2:	0151      	lsls	r1, r2, #5
 80085b4:	69fa      	ldr	r2, [r7, #28]
 80085b6:	440a      	add	r2, r1
 80085b8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80085bc:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80085c0:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80085c2:	69bb      	ldr	r3, [r7, #24]
 80085c4:	015a      	lsls	r2, r3, #5
 80085c6:	69fb      	ldr	r3, [r7, #28]
 80085c8:	4413      	add	r3, r2
 80085ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80085ce:	691b      	ldr	r3, [r3, #16]
 80085d0:	69ba      	ldr	r2, [r7, #24]
 80085d2:	0151      	lsls	r1, r2, #5
 80085d4:	69fa      	ldr	r2, [r7, #28]
 80085d6:	440a      	add	r2, r1
 80085d8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80085dc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80085e0:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80085e2:	79fb      	ldrb	r3, [r7, #7]
 80085e4:	2b01      	cmp	r3, #1
 80085e6:	d14b      	bne.n	8008680 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80085e8:	68bb      	ldr	r3, [r7, #8]
 80085ea:	695b      	ldr	r3, [r3, #20]
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	d009      	beq.n	8008604 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80085f0:	69bb      	ldr	r3, [r7, #24]
 80085f2:	015a      	lsls	r2, r3, #5
 80085f4:	69fb      	ldr	r3, [r7, #28]
 80085f6:	4413      	add	r3, r2
 80085f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80085fc:	461a      	mov	r2, r3
 80085fe:	68bb      	ldr	r3, [r7, #8]
 8008600:	695b      	ldr	r3, [r3, #20]
 8008602:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8008604:	68bb      	ldr	r3, [r7, #8]
 8008606:	791b      	ldrb	r3, [r3, #4]
 8008608:	2b01      	cmp	r3, #1
 800860a:	d128      	bne.n	800865e <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800860c:	69fb      	ldr	r3, [r7, #28]
 800860e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008612:	689b      	ldr	r3, [r3, #8]
 8008614:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008618:	2b00      	cmp	r3, #0
 800861a:	d110      	bne.n	800863e <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800861c:	69bb      	ldr	r3, [r7, #24]
 800861e:	015a      	lsls	r2, r3, #5
 8008620:	69fb      	ldr	r3, [r7, #28]
 8008622:	4413      	add	r3, r2
 8008624:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	69ba      	ldr	r2, [r7, #24]
 800862c:	0151      	lsls	r1, r2, #5
 800862e:	69fa      	ldr	r2, [r7, #28]
 8008630:	440a      	add	r2, r1
 8008632:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008636:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800863a:	6013      	str	r3, [r2, #0]
 800863c:	e00f      	b.n	800865e <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800863e:	69bb      	ldr	r3, [r7, #24]
 8008640:	015a      	lsls	r2, r3, #5
 8008642:	69fb      	ldr	r3, [r7, #28]
 8008644:	4413      	add	r3, r2
 8008646:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	69ba      	ldr	r2, [r7, #24]
 800864e:	0151      	lsls	r1, r2, #5
 8008650:	69fa      	ldr	r2, [r7, #28]
 8008652:	440a      	add	r2, r1
 8008654:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008658:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800865c:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800865e:	69bb      	ldr	r3, [r7, #24]
 8008660:	015a      	lsls	r2, r3, #5
 8008662:	69fb      	ldr	r3, [r7, #28]
 8008664:	4413      	add	r3, r2
 8008666:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	69ba      	ldr	r2, [r7, #24]
 800866e:	0151      	lsls	r1, r2, #5
 8008670:	69fa      	ldr	r2, [r7, #28]
 8008672:	440a      	add	r2, r1
 8008674:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008678:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800867c:	6013      	str	r3, [r2, #0]
 800867e:	e133      	b.n	80088e8 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008680:	69bb      	ldr	r3, [r7, #24]
 8008682:	015a      	lsls	r2, r3, #5
 8008684:	69fb      	ldr	r3, [r7, #28]
 8008686:	4413      	add	r3, r2
 8008688:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	69ba      	ldr	r2, [r7, #24]
 8008690:	0151      	lsls	r1, r2, #5
 8008692:	69fa      	ldr	r2, [r7, #28]
 8008694:	440a      	add	r2, r1
 8008696:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800869a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800869e:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80086a0:	68bb      	ldr	r3, [r7, #8]
 80086a2:	791b      	ldrb	r3, [r3, #4]
 80086a4:	2b01      	cmp	r3, #1
 80086a6:	d015      	beq.n	80086d4 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80086a8:	68bb      	ldr	r3, [r7, #8]
 80086aa:	699b      	ldr	r3, [r3, #24]
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	f000 811b 	beq.w	80088e8 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80086b2:	69fb      	ldr	r3, [r7, #28]
 80086b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80086b8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80086ba:	68bb      	ldr	r3, [r7, #8]
 80086bc:	781b      	ldrb	r3, [r3, #0]
 80086be:	f003 030f 	and.w	r3, r3, #15
 80086c2:	2101      	movs	r1, #1
 80086c4:	fa01 f303 	lsl.w	r3, r1, r3
 80086c8:	69f9      	ldr	r1, [r7, #28]
 80086ca:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80086ce:	4313      	orrs	r3, r2
 80086d0:	634b      	str	r3, [r1, #52]	; 0x34
 80086d2:	e109      	b.n	80088e8 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80086d4:	69fb      	ldr	r3, [r7, #28]
 80086d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80086da:	689b      	ldr	r3, [r3, #8]
 80086dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	d110      	bne.n	8008706 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80086e4:	69bb      	ldr	r3, [r7, #24]
 80086e6:	015a      	lsls	r2, r3, #5
 80086e8:	69fb      	ldr	r3, [r7, #28]
 80086ea:	4413      	add	r3, r2
 80086ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	69ba      	ldr	r2, [r7, #24]
 80086f4:	0151      	lsls	r1, r2, #5
 80086f6:	69fa      	ldr	r2, [r7, #28]
 80086f8:	440a      	add	r2, r1
 80086fa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80086fe:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008702:	6013      	str	r3, [r2, #0]
 8008704:	e00f      	b.n	8008726 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8008706:	69bb      	ldr	r3, [r7, #24]
 8008708:	015a      	lsls	r2, r3, #5
 800870a:	69fb      	ldr	r3, [r7, #28]
 800870c:	4413      	add	r3, r2
 800870e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	69ba      	ldr	r2, [r7, #24]
 8008716:	0151      	lsls	r1, r2, #5
 8008718:	69fa      	ldr	r2, [r7, #28]
 800871a:	440a      	add	r2, r1
 800871c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008720:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008724:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8008726:	68bb      	ldr	r3, [r7, #8]
 8008728:	6919      	ldr	r1, [r3, #16]
 800872a:	68bb      	ldr	r3, [r7, #8]
 800872c:	781a      	ldrb	r2, [r3, #0]
 800872e:	68bb      	ldr	r3, [r7, #8]
 8008730:	699b      	ldr	r3, [r3, #24]
 8008732:	b298      	uxth	r0, r3
 8008734:	79fb      	ldrb	r3, [r7, #7]
 8008736:	9300      	str	r3, [sp, #0]
 8008738:	4603      	mov	r3, r0
 800873a:	68f8      	ldr	r0, [r7, #12]
 800873c:	f000 fade 	bl	8008cfc <USB_WritePacket>
 8008740:	e0d2      	b.n	80088e8 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8008742:	69bb      	ldr	r3, [r7, #24]
 8008744:	015a      	lsls	r2, r3, #5
 8008746:	69fb      	ldr	r3, [r7, #28]
 8008748:	4413      	add	r3, r2
 800874a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800874e:	691b      	ldr	r3, [r3, #16]
 8008750:	69ba      	ldr	r2, [r7, #24]
 8008752:	0151      	lsls	r1, r2, #5
 8008754:	69fa      	ldr	r2, [r7, #28]
 8008756:	440a      	add	r2, r1
 8008758:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800875c:	0cdb      	lsrs	r3, r3, #19
 800875e:	04db      	lsls	r3, r3, #19
 8008760:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8008762:	69bb      	ldr	r3, [r7, #24]
 8008764:	015a      	lsls	r2, r3, #5
 8008766:	69fb      	ldr	r3, [r7, #28]
 8008768:	4413      	add	r3, r2
 800876a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800876e:	691b      	ldr	r3, [r3, #16]
 8008770:	69ba      	ldr	r2, [r7, #24]
 8008772:	0151      	lsls	r1, r2, #5
 8008774:	69fa      	ldr	r2, [r7, #28]
 8008776:	440a      	add	r2, r1
 8008778:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800877c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008780:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008784:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8008786:	68bb      	ldr	r3, [r7, #8]
 8008788:	699b      	ldr	r3, [r3, #24]
 800878a:	2b00      	cmp	r3, #0
 800878c:	d126      	bne.n	80087dc <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800878e:	69bb      	ldr	r3, [r7, #24]
 8008790:	015a      	lsls	r2, r3, #5
 8008792:	69fb      	ldr	r3, [r7, #28]
 8008794:	4413      	add	r3, r2
 8008796:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800879a:	691a      	ldr	r2, [r3, #16]
 800879c:	68bb      	ldr	r3, [r7, #8]
 800879e:	68db      	ldr	r3, [r3, #12]
 80087a0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80087a4:	69b9      	ldr	r1, [r7, #24]
 80087a6:	0148      	lsls	r0, r1, #5
 80087a8:	69f9      	ldr	r1, [r7, #28]
 80087aa:	4401      	add	r1, r0
 80087ac:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80087b0:	4313      	orrs	r3, r2
 80087b2:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80087b4:	69bb      	ldr	r3, [r7, #24]
 80087b6:	015a      	lsls	r2, r3, #5
 80087b8:	69fb      	ldr	r3, [r7, #28]
 80087ba:	4413      	add	r3, r2
 80087bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80087c0:	691b      	ldr	r3, [r3, #16]
 80087c2:	69ba      	ldr	r2, [r7, #24]
 80087c4:	0151      	lsls	r1, r2, #5
 80087c6:	69fa      	ldr	r2, [r7, #28]
 80087c8:	440a      	add	r2, r1
 80087ca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80087ce:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80087d2:	6113      	str	r3, [r2, #16]
 80087d4:	e03a      	b.n	800884c <USB_EPStartXfer+0x3e4>
 80087d6:	bf00      	nop
 80087d8:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80087dc:	68bb      	ldr	r3, [r7, #8]
 80087de:	699a      	ldr	r2, [r3, #24]
 80087e0:	68bb      	ldr	r3, [r7, #8]
 80087e2:	68db      	ldr	r3, [r3, #12]
 80087e4:	4413      	add	r3, r2
 80087e6:	1e5a      	subs	r2, r3, #1
 80087e8:	68bb      	ldr	r3, [r7, #8]
 80087ea:	68db      	ldr	r3, [r3, #12]
 80087ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80087f0:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 80087f2:	68bb      	ldr	r3, [r7, #8]
 80087f4:	68db      	ldr	r3, [r3, #12]
 80087f6:	8afa      	ldrh	r2, [r7, #22]
 80087f8:	fb03 f202 	mul.w	r2, r3, r2
 80087fc:	68bb      	ldr	r3, [r7, #8]
 80087fe:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8008800:	69bb      	ldr	r3, [r7, #24]
 8008802:	015a      	lsls	r2, r3, #5
 8008804:	69fb      	ldr	r3, [r7, #28]
 8008806:	4413      	add	r3, r2
 8008808:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800880c:	691a      	ldr	r2, [r3, #16]
 800880e:	8afb      	ldrh	r3, [r7, #22]
 8008810:	04d9      	lsls	r1, r3, #19
 8008812:	4b38      	ldr	r3, [pc, #224]	; (80088f4 <USB_EPStartXfer+0x48c>)
 8008814:	400b      	ands	r3, r1
 8008816:	69b9      	ldr	r1, [r7, #24]
 8008818:	0148      	lsls	r0, r1, #5
 800881a:	69f9      	ldr	r1, [r7, #28]
 800881c:	4401      	add	r1, r0
 800881e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008822:	4313      	orrs	r3, r2
 8008824:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8008826:	69bb      	ldr	r3, [r7, #24]
 8008828:	015a      	lsls	r2, r3, #5
 800882a:	69fb      	ldr	r3, [r7, #28]
 800882c:	4413      	add	r3, r2
 800882e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008832:	691a      	ldr	r2, [r3, #16]
 8008834:	68bb      	ldr	r3, [r7, #8]
 8008836:	69db      	ldr	r3, [r3, #28]
 8008838:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800883c:	69b9      	ldr	r1, [r7, #24]
 800883e:	0148      	lsls	r0, r1, #5
 8008840:	69f9      	ldr	r1, [r7, #28]
 8008842:	4401      	add	r1, r0
 8008844:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008848:	4313      	orrs	r3, r2
 800884a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800884c:	79fb      	ldrb	r3, [r7, #7]
 800884e:	2b01      	cmp	r3, #1
 8008850:	d10d      	bne.n	800886e <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8008852:	68bb      	ldr	r3, [r7, #8]
 8008854:	691b      	ldr	r3, [r3, #16]
 8008856:	2b00      	cmp	r3, #0
 8008858:	d009      	beq.n	800886e <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800885a:	68bb      	ldr	r3, [r7, #8]
 800885c:	6919      	ldr	r1, [r3, #16]
 800885e:	69bb      	ldr	r3, [r7, #24]
 8008860:	015a      	lsls	r2, r3, #5
 8008862:	69fb      	ldr	r3, [r7, #28]
 8008864:	4413      	add	r3, r2
 8008866:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800886a:	460a      	mov	r2, r1
 800886c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800886e:	68bb      	ldr	r3, [r7, #8]
 8008870:	791b      	ldrb	r3, [r3, #4]
 8008872:	2b01      	cmp	r3, #1
 8008874:	d128      	bne.n	80088c8 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008876:	69fb      	ldr	r3, [r7, #28]
 8008878:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800887c:	689b      	ldr	r3, [r3, #8]
 800887e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008882:	2b00      	cmp	r3, #0
 8008884:	d110      	bne.n	80088a8 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8008886:	69bb      	ldr	r3, [r7, #24]
 8008888:	015a      	lsls	r2, r3, #5
 800888a:	69fb      	ldr	r3, [r7, #28]
 800888c:	4413      	add	r3, r2
 800888e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	69ba      	ldr	r2, [r7, #24]
 8008896:	0151      	lsls	r1, r2, #5
 8008898:	69fa      	ldr	r2, [r7, #28]
 800889a:	440a      	add	r2, r1
 800889c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80088a0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80088a4:	6013      	str	r3, [r2, #0]
 80088a6:	e00f      	b.n	80088c8 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80088a8:	69bb      	ldr	r3, [r7, #24]
 80088aa:	015a      	lsls	r2, r3, #5
 80088ac:	69fb      	ldr	r3, [r7, #28]
 80088ae:	4413      	add	r3, r2
 80088b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	69ba      	ldr	r2, [r7, #24]
 80088b8:	0151      	lsls	r1, r2, #5
 80088ba:	69fa      	ldr	r2, [r7, #28]
 80088bc:	440a      	add	r2, r1
 80088be:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80088c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80088c6:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80088c8:	69bb      	ldr	r3, [r7, #24]
 80088ca:	015a      	lsls	r2, r3, #5
 80088cc:	69fb      	ldr	r3, [r7, #28]
 80088ce:	4413      	add	r3, r2
 80088d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	69ba      	ldr	r2, [r7, #24]
 80088d8:	0151      	lsls	r1, r2, #5
 80088da:	69fa      	ldr	r2, [r7, #28]
 80088dc:	440a      	add	r2, r1
 80088de:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80088e2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80088e6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80088e8:	2300      	movs	r3, #0
}
 80088ea:	4618      	mov	r0, r3
 80088ec:	3720      	adds	r7, #32
 80088ee:	46bd      	mov	sp, r7
 80088f0:	bd80      	pop	{r7, pc}
 80088f2:	bf00      	nop
 80088f4:	1ff80000 	.word	0x1ff80000

080088f8 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80088f8:	b480      	push	{r7}
 80088fa:	b087      	sub	sp, #28
 80088fc:	af00      	add	r7, sp, #0
 80088fe:	60f8      	str	r0, [r7, #12]
 8008900:	60b9      	str	r1, [r7, #8]
 8008902:	4613      	mov	r3, r2
 8008904:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008906:	68fb      	ldr	r3, [r7, #12]
 8008908:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800890a:	68bb      	ldr	r3, [r7, #8]
 800890c:	781b      	ldrb	r3, [r3, #0]
 800890e:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008910:	68bb      	ldr	r3, [r7, #8]
 8008912:	785b      	ldrb	r3, [r3, #1]
 8008914:	2b01      	cmp	r3, #1
 8008916:	f040 80ce 	bne.w	8008ab6 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800891a:	68bb      	ldr	r3, [r7, #8]
 800891c:	699b      	ldr	r3, [r3, #24]
 800891e:	2b00      	cmp	r3, #0
 8008920:	d132      	bne.n	8008988 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008922:	693b      	ldr	r3, [r7, #16]
 8008924:	015a      	lsls	r2, r3, #5
 8008926:	697b      	ldr	r3, [r7, #20]
 8008928:	4413      	add	r3, r2
 800892a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800892e:	691b      	ldr	r3, [r3, #16]
 8008930:	693a      	ldr	r2, [r7, #16]
 8008932:	0151      	lsls	r1, r2, #5
 8008934:	697a      	ldr	r2, [r7, #20]
 8008936:	440a      	add	r2, r1
 8008938:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800893c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008940:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008944:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008946:	693b      	ldr	r3, [r7, #16]
 8008948:	015a      	lsls	r2, r3, #5
 800894a:	697b      	ldr	r3, [r7, #20]
 800894c:	4413      	add	r3, r2
 800894e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008952:	691b      	ldr	r3, [r3, #16]
 8008954:	693a      	ldr	r2, [r7, #16]
 8008956:	0151      	lsls	r1, r2, #5
 8008958:	697a      	ldr	r2, [r7, #20]
 800895a:	440a      	add	r2, r1
 800895c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008960:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008964:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008966:	693b      	ldr	r3, [r7, #16]
 8008968:	015a      	lsls	r2, r3, #5
 800896a:	697b      	ldr	r3, [r7, #20]
 800896c:	4413      	add	r3, r2
 800896e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008972:	691b      	ldr	r3, [r3, #16]
 8008974:	693a      	ldr	r2, [r7, #16]
 8008976:	0151      	lsls	r1, r2, #5
 8008978:	697a      	ldr	r2, [r7, #20]
 800897a:	440a      	add	r2, r1
 800897c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008980:	0cdb      	lsrs	r3, r3, #19
 8008982:	04db      	lsls	r3, r3, #19
 8008984:	6113      	str	r3, [r2, #16]
 8008986:	e04e      	b.n	8008a26 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008988:	693b      	ldr	r3, [r7, #16]
 800898a:	015a      	lsls	r2, r3, #5
 800898c:	697b      	ldr	r3, [r7, #20]
 800898e:	4413      	add	r3, r2
 8008990:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008994:	691b      	ldr	r3, [r3, #16]
 8008996:	693a      	ldr	r2, [r7, #16]
 8008998:	0151      	lsls	r1, r2, #5
 800899a:	697a      	ldr	r2, [r7, #20]
 800899c:	440a      	add	r2, r1
 800899e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80089a2:	0cdb      	lsrs	r3, r3, #19
 80089a4:	04db      	lsls	r3, r3, #19
 80089a6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80089a8:	693b      	ldr	r3, [r7, #16]
 80089aa:	015a      	lsls	r2, r3, #5
 80089ac:	697b      	ldr	r3, [r7, #20]
 80089ae:	4413      	add	r3, r2
 80089b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80089b4:	691b      	ldr	r3, [r3, #16]
 80089b6:	693a      	ldr	r2, [r7, #16]
 80089b8:	0151      	lsls	r1, r2, #5
 80089ba:	697a      	ldr	r2, [r7, #20]
 80089bc:	440a      	add	r2, r1
 80089be:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80089c2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80089c6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80089ca:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 80089cc:	68bb      	ldr	r3, [r7, #8]
 80089ce:	699a      	ldr	r2, [r3, #24]
 80089d0:	68bb      	ldr	r3, [r7, #8]
 80089d2:	68db      	ldr	r3, [r3, #12]
 80089d4:	429a      	cmp	r2, r3
 80089d6:	d903      	bls.n	80089e0 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 80089d8:	68bb      	ldr	r3, [r7, #8]
 80089da:	68da      	ldr	r2, [r3, #12]
 80089dc:	68bb      	ldr	r3, [r7, #8]
 80089de:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80089e0:	693b      	ldr	r3, [r7, #16]
 80089e2:	015a      	lsls	r2, r3, #5
 80089e4:	697b      	ldr	r3, [r7, #20]
 80089e6:	4413      	add	r3, r2
 80089e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80089ec:	691b      	ldr	r3, [r3, #16]
 80089ee:	693a      	ldr	r2, [r7, #16]
 80089f0:	0151      	lsls	r1, r2, #5
 80089f2:	697a      	ldr	r2, [r7, #20]
 80089f4:	440a      	add	r2, r1
 80089f6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80089fa:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80089fe:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8008a00:	693b      	ldr	r3, [r7, #16]
 8008a02:	015a      	lsls	r2, r3, #5
 8008a04:	697b      	ldr	r3, [r7, #20]
 8008a06:	4413      	add	r3, r2
 8008a08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a0c:	691a      	ldr	r2, [r3, #16]
 8008a0e:	68bb      	ldr	r3, [r7, #8]
 8008a10:	699b      	ldr	r3, [r3, #24]
 8008a12:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008a16:	6939      	ldr	r1, [r7, #16]
 8008a18:	0148      	lsls	r0, r1, #5
 8008a1a:	6979      	ldr	r1, [r7, #20]
 8008a1c:	4401      	add	r1, r0
 8008a1e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8008a22:	4313      	orrs	r3, r2
 8008a24:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8008a26:	79fb      	ldrb	r3, [r7, #7]
 8008a28:	2b01      	cmp	r3, #1
 8008a2a:	d11e      	bne.n	8008a6a <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8008a2c:	68bb      	ldr	r3, [r7, #8]
 8008a2e:	695b      	ldr	r3, [r3, #20]
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	d009      	beq.n	8008a48 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8008a34:	693b      	ldr	r3, [r7, #16]
 8008a36:	015a      	lsls	r2, r3, #5
 8008a38:	697b      	ldr	r3, [r7, #20]
 8008a3a:	4413      	add	r3, r2
 8008a3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a40:	461a      	mov	r2, r3
 8008a42:	68bb      	ldr	r3, [r7, #8]
 8008a44:	695b      	ldr	r3, [r3, #20]
 8008a46:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008a48:	693b      	ldr	r3, [r7, #16]
 8008a4a:	015a      	lsls	r2, r3, #5
 8008a4c:	697b      	ldr	r3, [r7, #20]
 8008a4e:	4413      	add	r3, r2
 8008a50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	693a      	ldr	r2, [r7, #16]
 8008a58:	0151      	lsls	r1, r2, #5
 8008a5a:	697a      	ldr	r2, [r7, #20]
 8008a5c:	440a      	add	r2, r1
 8008a5e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008a62:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008a66:	6013      	str	r3, [r2, #0]
 8008a68:	e097      	b.n	8008b9a <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008a6a:	693b      	ldr	r3, [r7, #16]
 8008a6c:	015a      	lsls	r2, r3, #5
 8008a6e:	697b      	ldr	r3, [r7, #20]
 8008a70:	4413      	add	r3, r2
 8008a72:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	693a      	ldr	r2, [r7, #16]
 8008a7a:	0151      	lsls	r1, r2, #5
 8008a7c:	697a      	ldr	r2, [r7, #20]
 8008a7e:	440a      	add	r2, r1
 8008a80:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008a84:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008a88:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8008a8a:	68bb      	ldr	r3, [r7, #8]
 8008a8c:	699b      	ldr	r3, [r3, #24]
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	f000 8083 	beq.w	8008b9a <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8008a94:	697b      	ldr	r3, [r7, #20]
 8008a96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008a9a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008a9c:	68bb      	ldr	r3, [r7, #8]
 8008a9e:	781b      	ldrb	r3, [r3, #0]
 8008aa0:	f003 030f 	and.w	r3, r3, #15
 8008aa4:	2101      	movs	r1, #1
 8008aa6:	fa01 f303 	lsl.w	r3, r1, r3
 8008aaa:	6979      	ldr	r1, [r7, #20]
 8008aac:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008ab0:	4313      	orrs	r3, r2
 8008ab2:	634b      	str	r3, [r1, #52]	; 0x34
 8008ab4:	e071      	b.n	8008b9a <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8008ab6:	693b      	ldr	r3, [r7, #16]
 8008ab8:	015a      	lsls	r2, r3, #5
 8008aba:	697b      	ldr	r3, [r7, #20]
 8008abc:	4413      	add	r3, r2
 8008abe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008ac2:	691b      	ldr	r3, [r3, #16]
 8008ac4:	693a      	ldr	r2, [r7, #16]
 8008ac6:	0151      	lsls	r1, r2, #5
 8008ac8:	697a      	ldr	r2, [r7, #20]
 8008aca:	440a      	add	r2, r1
 8008acc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008ad0:	0cdb      	lsrs	r3, r3, #19
 8008ad2:	04db      	lsls	r3, r3, #19
 8008ad4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8008ad6:	693b      	ldr	r3, [r7, #16]
 8008ad8:	015a      	lsls	r2, r3, #5
 8008ada:	697b      	ldr	r3, [r7, #20]
 8008adc:	4413      	add	r3, r2
 8008ade:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008ae2:	691b      	ldr	r3, [r3, #16]
 8008ae4:	693a      	ldr	r2, [r7, #16]
 8008ae6:	0151      	lsls	r1, r2, #5
 8008ae8:	697a      	ldr	r2, [r7, #20]
 8008aea:	440a      	add	r2, r1
 8008aec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008af0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008af4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008af8:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8008afa:	68bb      	ldr	r3, [r7, #8]
 8008afc:	699b      	ldr	r3, [r3, #24]
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	d003      	beq.n	8008b0a <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8008b02:	68bb      	ldr	r3, [r7, #8]
 8008b04:	68da      	ldr	r2, [r3, #12]
 8008b06:	68bb      	ldr	r3, [r7, #8]
 8008b08:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8008b0a:	68bb      	ldr	r3, [r7, #8]
 8008b0c:	68da      	ldr	r2, [r3, #12]
 8008b0e:	68bb      	ldr	r3, [r7, #8]
 8008b10:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008b12:	693b      	ldr	r3, [r7, #16]
 8008b14:	015a      	lsls	r2, r3, #5
 8008b16:	697b      	ldr	r3, [r7, #20]
 8008b18:	4413      	add	r3, r2
 8008b1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008b1e:	691b      	ldr	r3, [r3, #16]
 8008b20:	693a      	ldr	r2, [r7, #16]
 8008b22:	0151      	lsls	r1, r2, #5
 8008b24:	697a      	ldr	r2, [r7, #20]
 8008b26:	440a      	add	r2, r1
 8008b28:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008b2c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008b30:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8008b32:	693b      	ldr	r3, [r7, #16]
 8008b34:	015a      	lsls	r2, r3, #5
 8008b36:	697b      	ldr	r3, [r7, #20]
 8008b38:	4413      	add	r3, r2
 8008b3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008b3e:	691a      	ldr	r2, [r3, #16]
 8008b40:	68bb      	ldr	r3, [r7, #8]
 8008b42:	69db      	ldr	r3, [r3, #28]
 8008b44:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008b48:	6939      	ldr	r1, [r7, #16]
 8008b4a:	0148      	lsls	r0, r1, #5
 8008b4c:	6979      	ldr	r1, [r7, #20]
 8008b4e:	4401      	add	r1, r0
 8008b50:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008b54:	4313      	orrs	r3, r2
 8008b56:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8008b58:	79fb      	ldrb	r3, [r7, #7]
 8008b5a:	2b01      	cmp	r3, #1
 8008b5c:	d10d      	bne.n	8008b7a <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8008b5e:	68bb      	ldr	r3, [r7, #8]
 8008b60:	691b      	ldr	r3, [r3, #16]
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	d009      	beq.n	8008b7a <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8008b66:	68bb      	ldr	r3, [r7, #8]
 8008b68:	6919      	ldr	r1, [r3, #16]
 8008b6a:	693b      	ldr	r3, [r7, #16]
 8008b6c:	015a      	lsls	r2, r3, #5
 8008b6e:	697b      	ldr	r3, [r7, #20]
 8008b70:	4413      	add	r3, r2
 8008b72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008b76:	460a      	mov	r2, r1
 8008b78:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8008b7a:	693b      	ldr	r3, [r7, #16]
 8008b7c:	015a      	lsls	r2, r3, #5
 8008b7e:	697b      	ldr	r3, [r7, #20]
 8008b80:	4413      	add	r3, r2
 8008b82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	693a      	ldr	r2, [r7, #16]
 8008b8a:	0151      	lsls	r1, r2, #5
 8008b8c:	697a      	ldr	r2, [r7, #20]
 8008b8e:	440a      	add	r2, r1
 8008b90:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008b94:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008b98:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008b9a:	2300      	movs	r3, #0
}
 8008b9c:	4618      	mov	r0, r3
 8008b9e:	371c      	adds	r7, #28
 8008ba0:	46bd      	mov	sp, r7
 8008ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ba6:	4770      	bx	lr

08008ba8 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008ba8:	b480      	push	{r7}
 8008baa:	b087      	sub	sp, #28
 8008bac:	af00      	add	r7, sp, #0
 8008bae:	6078      	str	r0, [r7, #4]
 8008bb0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8008bb2:	2300      	movs	r3, #0
 8008bb4:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8008bb6:	2300      	movs	r3, #0
 8008bb8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008bbe:	683b      	ldr	r3, [r7, #0]
 8008bc0:	785b      	ldrb	r3, [r3, #1]
 8008bc2:	2b01      	cmp	r3, #1
 8008bc4:	d14a      	bne.n	8008c5c <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008bc6:	683b      	ldr	r3, [r7, #0]
 8008bc8:	781b      	ldrb	r3, [r3, #0]
 8008bca:	015a      	lsls	r2, r3, #5
 8008bcc:	693b      	ldr	r3, [r7, #16]
 8008bce:	4413      	add	r3, r2
 8008bd0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008bda:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008bde:	f040 8086 	bne.w	8008cee <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8008be2:	683b      	ldr	r3, [r7, #0]
 8008be4:	781b      	ldrb	r3, [r3, #0]
 8008be6:	015a      	lsls	r2, r3, #5
 8008be8:	693b      	ldr	r3, [r7, #16]
 8008bea:	4413      	add	r3, r2
 8008bec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	683a      	ldr	r2, [r7, #0]
 8008bf4:	7812      	ldrb	r2, [r2, #0]
 8008bf6:	0151      	lsls	r1, r2, #5
 8008bf8:	693a      	ldr	r2, [r7, #16]
 8008bfa:	440a      	add	r2, r1
 8008bfc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008c00:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008c04:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8008c06:	683b      	ldr	r3, [r7, #0]
 8008c08:	781b      	ldrb	r3, [r3, #0]
 8008c0a:	015a      	lsls	r2, r3, #5
 8008c0c:	693b      	ldr	r3, [r7, #16]
 8008c0e:	4413      	add	r3, r2
 8008c10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	683a      	ldr	r2, [r7, #0]
 8008c18:	7812      	ldrb	r2, [r2, #0]
 8008c1a:	0151      	lsls	r1, r2, #5
 8008c1c:	693a      	ldr	r2, [r7, #16]
 8008c1e:	440a      	add	r2, r1
 8008c20:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008c24:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008c28:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8008c2a:	68fb      	ldr	r3, [r7, #12]
 8008c2c:	3301      	adds	r3, #1
 8008c2e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	f242 7210 	movw	r2, #10000	; 0x2710
 8008c36:	4293      	cmp	r3, r2
 8008c38:	d902      	bls.n	8008c40 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8008c3a:	2301      	movs	r3, #1
 8008c3c:	75fb      	strb	r3, [r7, #23]
          break;
 8008c3e:	e056      	b.n	8008cee <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8008c40:	683b      	ldr	r3, [r7, #0]
 8008c42:	781b      	ldrb	r3, [r3, #0]
 8008c44:	015a      	lsls	r2, r3, #5
 8008c46:	693b      	ldr	r3, [r7, #16]
 8008c48:	4413      	add	r3, r2
 8008c4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008c54:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008c58:	d0e7      	beq.n	8008c2a <USB_EPStopXfer+0x82>
 8008c5a:	e048      	b.n	8008cee <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008c5c:	683b      	ldr	r3, [r7, #0]
 8008c5e:	781b      	ldrb	r3, [r3, #0]
 8008c60:	015a      	lsls	r2, r3, #5
 8008c62:	693b      	ldr	r3, [r7, #16]
 8008c64:	4413      	add	r3, r2
 8008c66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008c70:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008c74:	d13b      	bne.n	8008cee <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8008c76:	683b      	ldr	r3, [r7, #0]
 8008c78:	781b      	ldrb	r3, [r3, #0]
 8008c7a:	015a      	lsls	r2, r3, #5
 8008c7c:	693b      	ldr	r3, [r7, #16]
 8008c7e:	4413      	add	r3, r2
 8008c80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	683a      	ldr	r2, [r7, #0]
 8008c88:	7812      	ldrb	r2, [r2, #0]
 8008c8a:	0151      	lsls	r1, r2, #5
 8008c8c:	693a      	ldr	r2, [r7, #16]
 8008c8e:	440a      	add	r2, r1
 8008c90:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008c94:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008c98:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8008c9a:	683b      	ldr	r3, [r7, #0]
 8008c9c:	781b      	ldrb	r3, [r3, #0]
 8008c9e:	015a      	lsls	r2, r3, #5
 8008ca0:	693b      	ldr	r3, [r7, #16]
 8008ca2:	4413      	add	r3, r2
 8008ca4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	683a      	ldr	r2, [r7, #0]
 8008cac:	7812      	ldrb	r2, [r2, #0]
 8008cae:	0151      	lsls	r1, r2, #5
 8008cb0:	693a      	ldr	r2, [r7, #16]
 8008cb2:	440a      	add	r2, r1
 8008cb4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008cb8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008cbc:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8008cbe:	68fb      	ldr	r3, [r7, #12]
 8008cc0:	3301      	adds	r3, #1
 8008cc2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8008cc4:	68fb      	ldr	r3, [r7, #12]
 8008cc6:	f242 7210 	movw	r2, #10000	; 0x2710
 8008cca:	4293      	cmp	r3, r2
 8008ccc:	d902      	bls.n	8008cd4 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8008cce:	2301      	movs	r3, #1
 8008cd0:	75fb      	strb	r3, [r7, #23]
          break;
 8008cd2:	e00c      	b.n	8008cee <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8008cd4:	683b      	ldr	r3, [r7, #0]
 8008cd6:	781b      	ldrb	r3, [r3, #0]
 8008cd8:	015a      	lsls	r2, r3, #5
 8008cda:	693b      	ldr	r3, [r7, #16]
 8008cdc:	4413      	add	r3, r2
 8008cde:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008ce8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008cec:	d0e7      	beq.n	8008cbe <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8008cee:	7dfb      	ldrb	r3, [r7, #23]
}
 8008cf0:	4618      	mov	r0, r3
 8008cf2:	371c      	adds	r7, #28
 8008cf4:	46bd      	mov	sp, r7
 8008cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cfa:	4770      	bx	lr

08008cfc <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8008cfc:	b480      	push	{r7}
 8008cfe:	b089      	sub	sp, #36	; 0x24
 8008d00:	af00      	add	r7, sp, #0
 8008d02:	60f8      	str	r0, [r7, #12]
 8008d04:	60b9      	str	r1, [r7, #8]
 8008d06:	4611      	mov	r1, r2
 8008d08:	461a      	mov	r2, r3
 8008d0a:	460b      	mov	r3, r1
 8008d0c:	71fb      	strb	r3, [r7, #7]
 8008d0e:	4613      	mov	r3, r2
 8008d10:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008d12:	68fb      	ldr	r3, [r7, #12]
 8008d14:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8008d16:	68bb      	ldr	r3, [r7, #8]
 8008d18:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8008d1a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	d123      	bne.n	8008d6a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8008d22:	88bb      	ldrh	r3, [r7, #4]
 8008d24:	3303      	adds	r3, #3
 8008d26:	089b      	lsrs	r3, r3, #2
 8008d28:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8008d2a:	2300      	movs	r3, #0
 8008d2c:	61bb      	str	r3, [r7, #24]
 8008d2e:	e018      	b.n	8008d62 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8008d30:	79fb      	ldrb	r3, [r7, #7]
 8008d32:	031a      	lsls	r2, r3, #12
 8008d34:	697b      	ldr	r3, [r7, #20]
 8008d36:	4413      	add	r3, r2
 8008d38:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008d3c:	461a      	mov	r2, r3
 8008d3e:	69fb      	ldr	r3, [r7, #28]
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	6013      	str	r3, [r2, #0]
      pSrc++;
 8008d44:	69fb      	ldr	r3, [r7, #28]
 8008d46:	3301      	adds	r3, #1
 8008d48:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008d4a:	69fb      	ldr	r3, [r7, #28]
 8008d4c:	3301      	adds	r3, #1
 8008d4e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008d50:	69fb      	ldr	r3, [r7, #28]
 8008d52:	3301      	adds	r3, #1
 8008d54:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008d56:	69fb      	ldr	r3, [r7, #28]
 8008d58:	3301      	adds	r3, #1
 8008d5a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8008d5c:	69bb      	ldr	r3, [r7, #24]
 8008d5e:	3301      	adds	r3, #1
 8008d60:	61bb      	str	r3, [r7, #24]
 8008d62:	69ba      	ldr	r2, [r7, #24]
 8008d64:	693b      	ldr	r3, [r7, #16]
 8008d66:	429a      	cmp	r2, r3
 8008d68:	d3e2      	bcc.n	8008d30 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8008d6a:	2300      	movs	r3, #0
}
 8008d6c:	4618      	mov	r0, r3
 8008d6e:	3724      	adds	r7, #36	; 0x24
 8008d70:	46bd      	mov	sp, r7
 8008d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d76:	4770      	bx	lr

08008d78 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8008d78:	b480      	push	{r7}
 8008d7a:	b08b      	sub	sp, #44	; 0x2c
 8008d7c:	af00      	add	r7, sp, #0
 8008d7e:	60f8      	str	r0, [r7, #12]
 8008d80:	60b9      	str	r1, [r7, #8]
 8008d82:	4613      	mov	r3, r2
 8008d84:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8008d8a:	68bb      	ldr	r3, [r7, #8]
 8008d8c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8008d8e:	88fb      	ldrh	r3, [r7, #6]
 8008d90:	089b      	lsrs	r3, r3, #2
 8008d92:	b29b      	uxth	r3, r3
 8008d94:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8008d96:	88fb      	ldrh	r3, [r7, #6]
 8008d98:	f003 0303 	and.w	r3, r3, #3
 8008d9c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8008d9e:	2300      	movs	r3, #0
 8008da0:	623b      	str	r3, [r7, #32]
 8008da2:	e014      	b.n	8008dce <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8008da4:	69bb      	ldr	r3, [r7, #24]
 8008da6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008daa:	681a      	ldr	r2, [r3, #0]
 8008dac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dae:	601a      	str	r2, [r3, #0]
    pDest++;
 8008db0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008db2:	3301      	adds	r3, #1
 8008db4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8008db6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008db8:	3301      	adds	r3, #1
 8008dba:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8008dbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dbe:	3301      	adds	r3, #1
 8008dc0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8008dc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dc4:	3301      	adds	r3, #1
 8008dc6:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8008dc8:	6a3b      	ldr	r3, [r7, #32]
 8008dca:	3301      	adds	r3, #1
 8008dcc:	623b      	str	r3, [r7, #32]
 8008dce:	6a3a      	ldr	r2, [r7, #32]
 8008dd0:	697b      	ldr	r3, [r7, #20]
 8008dd2:	429a      	cmp	r2, r3
 8008dd4:	d3e6      	bcc.n	8008da4 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8008dd6:	8bfb      	ldrh	r3, [r7, #30]
 8008dd8:	2b00      	cmp	r3, #0
 8008dda:	d01e      	beq.n	8008e1a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8008ddc:	2300      	movs	r3, #0
 8008dde:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8008de0:	69bb      	ldr	r3, [r7, #24]
 8008de2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008de6:	461a      	mov	r2, r3
 8008de8:	f107 0310 	add.w	r3, r7, #16
 8008dec:	6812      	ldr	r2, [r2, #0]
 8008dee:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8008df0:	693a      	ldr	r2, [r7, #16]
 8008df2:	6a3b      	ldr	r3, [r7, #32]
 8008df4:	b2db      	uxtb	r3, r3
 8008df6:	00db      	lsls	r3, r3, #3
 8008df8:	fa22 f303 	lsr.w	r3, r2, r3
 8008dfc:	b2da      	uxtb	r2, r3
 8008dfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e00:	701a      	strb	r2, [r3, #0]
      i++;
 8008e02:	6a3b      	ldr	r3, [r7, #32]
 8008e04:	3301      	adds	r3, #1
 8008e06:	623b      	str	r3, [r7, #32]
      pDest++;
 8008e08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e0a:	3301      	adds	r3, #1
 8008e0c:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8008e0e:	8bfb      	ldrh	r3, [r7, #30]
 8008e10:	3b01      	subs	r3, #1
 8008e12:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8008e14:	8bfb      	ldrh	r3, [r7, #30]
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	d1ea      	bne.n	8008df0 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8008e1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008e1c:	4618      	mov	r0, r3
 8008e1e:	372c      	adds	r7, #44	; 0x2c
 8008e20:	46bd      	mov	sp, r7
 8008e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e26:	4770      	bx	lr

08008e28 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008e28:	b480      	push	{r7}
 8008e2a:	b085      	sub	sp, #20
 8008e2c:	af00      	add	r7, sp, #0
 8008e2e:	6078      	str	r0, [r7, #4]
 8008e30:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008e36:	683b      	ldr	r3, [r7, #0]
 8008e38:	781b      	ldrb	r3, [r3, #0]
 8008e3a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008e3c:	683b      	ldr	r3, [r7, #0]
 8008e3e:	785b      	ldrb	r3, [r3, #1]
 8008e40:	2b01      	cmp	r3, #1
 8008e42:	d12c      	bne.n	8008e9e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8008e44:	68bb      	ldr	r3, [r7, #8]
 8008e46:	015a      	lsls	r2, r3, #5
 8008e48:	68fb      	ldr	r3, [r7, #12]
 8008e4a:	4413      	add	r3, r2
 8008e4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	db12      	blt.n	8008e7c <USB_EPSetStall+0x54>
 8008e56:	68bb      	ldr	r3, [r7, #8]
 8008e58:	2b00      	cmp	r3, #0
 8008e5a:	d00f      	beq.n	8008e7c <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8008e5c:	68bb      	ldr	r3, [r7, #8]
 8008e5e:	015a      	lsls	r2, r3, #5
 8008e60:	68fb      	ldr	r3, [r7, #12]
 8008e62:	4413      	add	r3, r2
 8008e64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	68ba      	ldr	r2, [r7, #8]
 8008e6c:	0151      	lsls	r1, r2, #5
 8008e6e:	68fa      	ldr	r2, [r7, #12]
 8008e70:	440a      	add	r2, r1
 8008e72:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008e76:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008e7a:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8008e7c:	68bb      	ldr	r3, [r7, #8]
 8008e7e:	015a      	lsls	r2, r3, #5
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	4413      	add	r3, r2
 8008e84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	68ba      	ldr	r2, [r7, #8]
 8008e8c:	0151      	lsls	r1, r2, #5
 8008e8e:	68fa      	ldr	r2, [r7, #12]
 8008e90:	440a      	add	r2, r1
 8008e92:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008e96:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008e9a:	6013      	str	r3, [r2, #0]
 8008e9c:	e02b      	b.n	8008ef6 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8008e9e:	68bb      	ldr	r3, [r7, #8]
 8008ea0:	015a      	lsls	r2, r3, #5
 8008ea2:	68fb      	ldr	r3, [r7, #12]
 8008ea4:	4413      	add	r3, r2
 8008ea6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	db12      	blt.n	8008ed6 <USB_EPSetStall+0xae>
 8008eb0:	68bb      	ldr	r3, [r7, #8]
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	d00f      	beq.n	8008ed6 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8008eb6:	68bb      	ldr	r3, [r7, #8]
 8008eb8:	015a      	lsls	r2, r3, #5
 8008eba:	68fb      	ldr	r3, [r7, #12]
 8008ebc:	4413      	add	r3, r2
 8008ebe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	68ba      	ldr	r2, [r7, #8]
 8008ec6:	0151      	lsls	r1, r2, #5
 8008ec8:	68fa      	ldr	r2, [r7, #12]
 8008eca:	440a      	add	r2, r1
 8008ecc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008ed0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008ed4:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8008ed6:	68bb      	ldr	r3, [r7, #8]
 8008ed8:	015a      	lsls	r2, r3, #5
 8008eda:	68fb      	ldr	r3, [r7, #12]
 8008edc:	4413      	add	r3, r2
 8008ede:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	68ba      	ldr	r2, [r7, #8]
 8008ee6:	0151      	lsls	r1, r2, #5
 8008ee8:	68fa      	ldr	r2, [r7, #12]
 8008eea:	440a      	add	r2, r1
 8008eec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008ef0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008ef4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008ef6:	2300      	movs	r3, #0
}
 8008ef8:	4618      	mov	r0, r3
 8008efa:	3714      	adds	r7, #20
 8008efc:	46bd      	mov	sp, r7
 8008efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f02:	4770      	bx	lr

08008f04 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008f04:	b480      	push	{r7}
 8008f06:	b085      	sub	sp, #20
 8008f08:	af00      	add	r7, sp, #0
 8008f0a:	6078      	str	r0, [r7, #4]
 8008f0c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008f12:	683b      	ldr	r3, [r7, #0]
 8008f14:	781b      	ldrb	r3, [r3, #0]
 8008f16:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008f18:	683b      	ldr	r3, [r7, #0]
 8008f1a:	785b      	ldrb	r3, [r3, #1]
 8008f1c:	2b01      	cmp	r3, #1
 8008f1e:	d128      	bne.n	8008f72 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8008f20:	68bb      	ldr	r3, [r7, #8]
 8008f22:	015a      	lsls	r2, r3, #5
 8008f24:	68fb      	ldr	r3, [r7, #12]
 8008f26:	4413      	add	r3, r2
 8008f28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	68ba      	ldr	r2, [r7, #8]
 8008f30:	0151      	lsls	r1, r2, #5
 8008f32:	68fa      	ldr	r2, [r7, #12]
 8008f34:	440a      	add	r2, r1
 8008f36:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008f3a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008f3e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8008f40:	683b      	ldr	r3, [r7, #0]
 8008f42:	791b      	ldrb	r3, [r3, #4]
 8008f44:	2b03      	cmp	r3, #3
 8008f46:	d003      	beq.n	8008f50 <USB_EPClearStall+0x4c>
 8008f48:	683b      	ldr	r3, [r7, #0]
 8008f4a:	791b      	ldrb	r3, [r3, #4]
 8008f4c:	2b02      	cmp	r3, #2
 8008f4e:	d138      	bne.n	8008fc2 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8008f50:	68bb      	ldr	r3, [r7, #8]
 8008f52:	015a      	lsls	r2, r3, #5
 8008f54:	68fb      	ldr	r3, [r7, #12]
 8008f56:	4413      	add	r3, r2
 8008f58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	68ba      	ldr	r2, [r7, #8]
 8008f60:	0151      	lsls	r1, r2, #5
 8008f62:	68fa      	ldr	r2, [r7, #12]
 8008f64:	440a      	add	r2, r1
 8008f66:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008f6a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008f6e:	6013      	str	r3, [r2, #0]
 8008f70:	e027      	b.n	8008fc2 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8008f72:	68bb      	ldr	r3, [r7, #8]
 8008f74:	015a      	lsls	r2, r3, #5
 8008f76:	68fb      	ldr	r3, [r7, #12]
 8008f78:	4413      	add	r3, r2
 8008f7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	68ba      	ldr	r2, [r7, #8]
 8008f82:	0151      	lsls	r1, r2, #5
 8008f84:	68fa      	ldr	r2, [r7, #12]
 8008f86:	440a      	add	r2, r1
 8008f88:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008f8c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008f90:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8008f92:	683b      	ldr	r3, [r7, #0]
 8008f94:	791b      	ldrb	r3, [r3, #4]
 8008f96:	2b03      	cmp	r3, #3
 8008f98:	d003      	beq.n	8008fa2 <USB_EPClearStall+0x9e>
 8008f9a:	683b      	ldr	r3, [r7, #0]
 8008f9c:	791b      	ldrb	r3, [r3, #4]
 8008f9e:	2b02      	cmp	r3, #2
 8008fa0:	d10f      	bne.n	8008fc2 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8008fa2:	68bb      	ldr	r3, [r7, #8]
 8008fa4:	015a      	lsls	r2, r3, #5
 8008fa6:	68fb      	ldr	r3, [r7, #12]
 8008fa8:	4413      	add	r3, r2
 8008faa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	68ba      	ldr	r2, [r7, #8]
 8008fb2:	0151      	lsls	r1, r2, #5
 8008fb4:	68fa      	ldr	r2, [r7, #12]
 8008fb6:	440a      	add	r2, r1
 8008fb8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008fbc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008fc0:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8008fc2:	2300      	movs	r3, #0
}
 8008fc4:	4618      	mov	r0, r3
 8008fc6:	3714      	adds	r7, #20
 8008fc8:	46bd      	mov	sp, r7
 8008fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fce:	4770      	bx	lr

08008fd0 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8008fd0:	b480      	push	{r7}
 8008fd2:	b085      	sub	sp, #20
 8008fd4:	af00      	add	r7, sp, #0
 8008fd6:	6078      	str	r0, [r7, #4]
 8008fd8:	460b      	mov	r3, r1
 8008fda:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8008fe0:	68fb      	ldr	r3, [r7, #12]
 8008fe2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	68fa      	ldr	r2, [r7, #12]
 8008fea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008fee:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8008ff2:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8008ff4:	68fb      	ldr	r3, [r7, #12]
 8008ff6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008ffa:	681a      	ldr	r2, [r3, #0]
 8008ffc:	78fb      	ldrb	r3, [r7, #3]
 8008ffe:	011b      	lsls	r3, r3, #4
 8009000:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8009004:	68f9      	ldr	r1, [r7, #12]
 8009006:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800900a:	4313      	orrs	r3, r2
 800900c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800900e:	2300      	movs	r3, #0
}
 8009010:	4618      	mov	r0, r3
 8009012:	3714      	adds	r7, #20
 8009014:	46bd      	mov	sp, r7
 8009016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800901a:	4770      	bx	lr

0800901c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800901c:	b480      	push	{r7}
 800901e:	b085      	sub	sp, #20
 8009020:	af00      	add	r7, sp, #0
 8009022:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8009028:	68fb      	ldr	r3, [r7, #12]
 800902a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	68fa      	ldr	r2, [r7, #12]
 8009032:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009036:	f023 0303 	bic.w	r3, r3, #3
 800903a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800903c:	68fb      	ldr	r3, [r7, #12]
 800903e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009042:	685b      	ldr	r3, [r3, #4]
 8009044:	68fa      	ldr	r2, [r7, #12]
 8009046:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800904a:	f023 0302 	bic.w	r3, r3, #2
 800904e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009050:	2300      	movs	r3, #0
}
 8009052:	4618      	mov	r0, r3
 8009054:	3714      	adds	r7, #20
 8009056:	46bd      	mov	sp, r7
 8009058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800905c:	4770      	bx	lr

0800905e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800905e:	b480      	push	{r7}
 8009060:	b085      	sub	sp, #20
 8009062:	af00      	add	r7, sp, #0
 8009064:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800906a:	68fb      	ldr	r3, [r7, #12]
 800906c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	68fa      	ldr	r2, [r7, #12]
 8009074:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009078:	f023 0303 	bic.w	r3, r3, #3
 800907c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800907e:	68fb      	ldr	r3, [r7, #12]
 8009080:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009084:	685b      	ldr	r3, [r3, #4]
 8009086:	68fa      	ldr	r2, [r7, #12]
 8009088:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800908c:	f043 0302 	orr.w	r3, r3, #2
 8009090:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009092:	2300      	movs	r3, #0
}
 8009094:	4618      	mov	r0, r3
 8009096:	3714      	adds	r7, #20
 8009098:	46bd      	mov	sp, r7
 800909a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800909e:	4770      	bx	lr

080090a0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80090a0:	b480      	push	{r7}
 80090a2:	b085      	sub	sp, #20
 80090a4:	af00      	add	r7, sp, #0
 80090a6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	695b      	ldr	r3, [r3, #20]
 80090ac:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	699b      	ldr	r3, [r3, #24]
 80090b2:	68fa      	ldr	r2, [r7, #12]
 80090b4:	4013      	ands	r3, r2
 80090b6:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80090b8:	68fb      	ldr	r3, [r7, #12]
}
 80090ba:	4618      	mov	r0, r3
 80090bc:	3714      	adds	r7, #20
 80090be:	46bd      	mov	sp, r7
 80090c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090c4:	4770      	bx	lr

080090c6 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80090c6:	b480      	push	{r7}
 80090c8:	b085      	sub	sp, #20
 80090ca:	af00      	add	r7, sp, #0
 80090cc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80090d2:	68fb      	ldr	r3, [r7, #12]
 80090d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80090d8:	699b      	ldr	r3, [r3, #24]
 80090da:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80090e2:	69db      	ldr	r3, [r3, #28]
 80090e4:	68ba      	ldr	r2, [r7, #8]
 80090e6:	4013      	ands	r3, r2
 80090e8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80090ea:	68bb      	ldr	r3, [r7, #8]
 80090ec:	0c1b      	lsrs	r3, r3, #16
}
 80090ee:	4618      	mov	r0, r3
 80090f0:	3714      	adds	r7, #20
 80090f2:	46bd      	mov	sp, r7
 80090f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090f8:	4770      	bx	lr

080090fa <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80090fa:	b480      	push	{r7}
 80090fc:	b085      	sub	sp, #20
 80090fe:	af00      	add	r7, sp, #0
 8009100:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8009106:	68fb      	ldr	r3, [r7, #12]
 8009108:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800910c:	699b      	ldr	r3, [r3, #24]
 800910e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8009110:	68fb      	ldr	r3, [r7, #12]
 8009112:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009116:	69db      	ldr	r3, [r3, #28]
 8009118:	68ba      	ldr	r2, [r7, #8]
 800911a:	4013      	ands	r3, r2
 800911c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800911e:	68bb      	ldr	r3, [r7, #8]
 8009120:	b29b      	uxth	r3, r3
}
 8009122:	4618      	mov	r0, r3
 8009124:	3714      	adds	r7, #20
 8009126:	46bd      	mov	sp, r7
 8009128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800912c:	4770      	bx	lr

0800912e <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800912e:	b480      	push	{r7}
 8009130:	b085      	sub	sp, #20
 8009132:	af00      	add	r7, sp, #0
 8009134:	6078      	str	r0, [r7, #4]
 8009136:	460b      	mov	r3, r1
 8009138:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800913e:	78fb      	ldrb	r3, [r7, #3]
 8009140:	015a      	lsls	r2, r3, #5
 8009142:	68fb      	ldr	r3, [r7, #12]
 8009144:	4413      	add	r3, r2
 8009146:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800914a:	689b      	ldr	r3, [r3, #8]
 800914c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800914e:	68fb      	ldr	r3, [r7, #12]
 8009150:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009154:	695b      	ldr	r3, [r3, #20]
 8009156:	68ba      	ldr	r2, [r7, #8]
 8009158:	4013      	ands	r3, r2
 800915a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800915c:	68bb      	ldr	r3, [r7, #8]
}
 800915e:	4618      	mov	r0, r3
 8009160:	3714      	adds	r7, #20
 8009162:	46bd      	mov	sp, r7
 8009164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009168:	4770      	bx	lr

0800916a <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800916a:	b480      	push	{r7}
 800916c:	b087      	sub	sp, #28
 800916e:	af00      	add	r7, sp, #0
 8009170:	6078      	str	r0, [r7, #4]
 8009172:	460b      	mov	r3, r1
 8009174:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800917a:	697b      	ldr	r3, [r7, #20]
 800917c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009180:	691b      	ldr	r3, [r3, #16]
 8009182:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8009184:	697b      	ldr	r3, [r7, #20]
 8009186:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800918a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800918c:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800918e:	78fb      	ldrb	r3, [r7, #3]
 8009190:	f003 030f 	and.w	r3, r3, #15
 8009194:	68fa      	ldr	r2, [r7, #12]
 8009196:	fa22 f303 	lsr.w	r3, r2, r3
 800919a:	01db      	lsls	r3, r3, #7
 800919c:	b2db      	uxtb	r3, r3
 800919e:	693a      	ldr	r2, [r7, #16]
 80091a0:	4313      	orrs	r3, r2
 80091a2:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80091a4:	78fb      	ldrb	r3, [r7, #3]
 80091a6:	015a      	lsls	r2, r3, #5
 80091a8:	697b      	ldr	r3, [r7, #20]
 80091aa:	4413      	add	r3, r2
 80091ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80091b0:	689b      	ldr	r3, [r3, #8]
 80091b2:	693a      	ldr	r2, [r7, #16]
 80091b4:	4013      	ands	r3, r2
 80091b6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80091b8:	68bb      	ldr	r3, [r7, #8]
}
 80091ba:	4618      	mov	r0, r3
 80091bc:	371c      	adds	r7, #28
 80091be:	46bd      	mov	sp, r7
 80091c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091c4:	4770      	bx	lr

080091c6 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80091c6:	b480      	push	{r7}
 80091c8:	b083      	sub	sp, #12
 80091ca:	af00      	add	r7, sp, #0
 80091cc:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	695b      	ldr	r3, [r3, #20]
 80091d2:	f003 0301 	and.w	r3, r3, #1
}
 80091d6:	4618      	mov	r0, r3
 80091d8:	370c      	adds	r7, #12
 80091da:	46bd      	mov	sp, r7
 80091dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091e0:	4770      	bx	lr

080091e2 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80091e2:	b480      	push	{r7}
 80091e4:	b085      	sub	sp, #20
 80091e6:	af00      	add	r7, sp, #0
 80091e8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80091ee:	68fb      	ldr	r3, [r7, #12]
 80091f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	68fa      	ldr	r2, [r7, #12]
 80091f8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80091fc:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8009200:	f023 0307 	bic.w	r3, r3, #7
 8009204:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8009206:	68fb      	ldr	r3, [r7, #12]
 8009208:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800920c:	685b      	ldr	r3, [r3, #4]
 800920e:	68fa      	ldr	r2, [r7, #12]
 8009210:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009214:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009218:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800921a:	2300      	movs	r3, #0
}
 800921c:	4618      	mov	r0, r3
 800921e:	3714      	adds	r7, #20
 8009220:	46bd      	mov	sp, r7
 8009222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009226:	4770      	bx	lr

08009228 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8009228:	b480      	push	{r7}
 800922a:	b087      	sub	sp, #28
 800922c:	af00      	add	r7, sp, #0
 800922e:	60f8      	str	r0, [r7, #12]
 8009230:	460b      	mov	r3, r1
 8009232:	607a      	str	r2, [r7, #4]
 8009234:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009236:	68fb      	ldr	r3, [r7, #12]
 8009238:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800923a:	68fb      	ldr	r3, [r7, #12]
 800923c:	333c      	adds	r3, #60	; 0x3c
 800923e:	3304      	adds	r3, #4
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8009244:	693b      	ldr	r3, [r7, #16]
 8009246:	4a26      	ldr	r2, [pc, #152]	; (80092e0 <USB_EP0_OutStart+0xb8>)
 8009248:	4293      	cmp	r3, r2
 800924a:	d90a      	bls.n	8009262 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800924c:	697b      	ldr	r3, [r7, #20]
 800924e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009258:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800925c:	d101      	bne.n	8009262 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800925e:	2300      	movs	r3, #0
 8009260:	e037      	b.n	80092d2 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8009262:	697b      	ldr	r3, [r7, #20]
 8009264:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009268:	461a      	mov	r2, r3
 800926a:	2300      	movs	r3, #0
 800926c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800926e:	697b      	ldr	r3, [r7, #20]
 8009270:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009274:	691b      	ldr	r3, [r3, #16]
 8009276:	697a      	ldr	r2, [r7, #20]
 8009278:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800927c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009280:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8009282:	697b      	ldr	r3, [r7, #20]
 8009284:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009288:	691b      	ldr	r3, [r3, #16]
 800928a:	697a      	ldr	r2, [r7, #20]
 800928c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009290:	f043 0318 	orr.w	r3, r3, #24
 8009294:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8009296:	697b      	ldr	r3, [r7, #20]
 8009298:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800929c:	691b      	ldr	r3, [r3, #16]
 800929e:	697a      	ldr	r2, [r7, #20]
 80092a0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80092a4:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80092a8:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80092aa:	7afb      	ldrb	r3, [r7, #11]
 80092ac:	2b01      	cmp	r3, #1
 80092ae:	d10f      	bne.n	80092d0 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80092b0:	697b      	ldr	r3, [r7, #20]
 80092b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80092b6:	461a      	mov	r2, r3
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80092bc:	697b      	ldr	r3, [r7, #20]
 80092be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	697a      	ldr	r2, [r7, #20]
 80092c6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80092ca:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80092ce:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80092d0:	2300      	movs	r3, #0
}
 80092d2:	4618      	mov	r0, r3
 80092d4:	371c      	adds	r7, #28
 80092d6:	46bd      	mov	sp, r7
 80092d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092dc:	4770      	bx	lr
 80092de:	bf00      	nop
 80092e0:	4f54300a 	.word	0x4f54300a

080092e4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80092e4:	b480      	push	{r7}
 80092e6:	b085      	sub	sp, #20
 80092e8:	af00      	add	r7, sp, #0
 80092ea:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80092ec:	2300      	movs	r3, #0
 80092ee:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80092f0:	68fb      	ldr	r3, [r7, #12]
 80092f2:	3301      	adds	r3, #1
 80092f4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80092f6:	68fb      	ldr	r3, [r7, #12]
 80092f8:	4a13      	ldr	r2, [pc, #76]	; (8009348 <USB_CoreReset+0x64>)
 80092fa:	4293      	cmp	r3, r2
 80092fc:	d901      	bls.n	8009302 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80092fe:	2303      	movs	r3, #3
 8009300:	e01b      	b.n	800933a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	691b      	ldr	r3, [r3, #16]
 8009306:	2b00      	cmp	r3, #0
 8009308:	daf2      	bge.n	80092f0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800930a:	2300      	movs	r3, #0
 800930c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	691b      	ldr	r3, [r3, #16]
 8009312:	f043 0201 	orr.w	r2, r3, #1
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800931a:	68fb      	ldr	r3, [r7, #12]
 800931c:	3301      	adds	r3, #1
 800931e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009320:	68fb      	ldr	r3, [r7, #12]
 8009322:	4a09      	ldr	r2, [pc, #36]	; (8009348 <USB_CoreReset+0x64>)
 8009324:	4293      	cmp	r3, r2
 8009326:	d901      	bls.n	800932c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8009328:	2303      	movs	r3, #3
 800932a:	e006      	b.n	800933a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	691b      	ldr	r3, [r3, #16]
 8009330:	f003 0301 	and.w	r3, r3, #1
 8009334:	2b01      	cmp	r3, #1
 8009336:	d0f0      	beq.n	800931a <USB_CoreReset+0x36>

  return HAL_OK;
 8009338:	2300      	movs	r3, #0
}
 800933a:	4618      	mov	r0, r3
 800933c:	3714      	adds	r7, #20
 800933e:	46bd      	mov	sp, r7
 8009340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009344:	4770      	bx	lr
 8009346:	bf00      	nop
 8009348:	00030d40 	.word	0x00030d40

0800934c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800934c:	b580      	push	{r7, lr}
 800934e:	b084      	sub	sp, #16
 8009350:	af00      	add	r7, sp, #0
 8009352:	6078      	str	r0, [r7, #4]
 8009354:	460b      	mov	r3, r1
 8009356:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8009358:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800935c:	f002 fc54 	bl	800bc08 <USBD_static_malloc>
 8009360:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8009362:	68fb      	ldr	r3, [r7, #12]
 8009364:	2b00      	cmp	r3, #0
 8009366:	d109      	bne.n	800937c <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	32b0      	adds	r2, #176	; 0xb0
 8009372:	2100      	movs	r1, #0
 8009374:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8009378:	2302      	movs	r3, #2
 800937a:	e0d4      	b.n	8009526 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800937c:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8009380:	2100      	movs	r1, #0
 8009382:	68f8      	ldr	r0, [r7, #12]
 8009384:	f002 fcbc 	bl	800bd00 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	32b0      	adds	r2, #176	; 0xb0
 8009392:	68f9      	ldr	r1, [r7, #12]
 8009394:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	32b0      	adds	r2, #176	; 0xb0
 80093a2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	7c1b      	ldrb	r3, [r3, #16]
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	d138      	bne.n	8009426 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80093b4:	4b5e      	ldr	r3, [pc, #376]	; (8009530 <USBD_CDC_Init+0x1e4>)
 80093b6:	7819      	ldrb	r1, [r3, #0]
 80093b8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80093bc:	2202      	movs	r2, #2
 80093be:	6878      	ldr	r0, [r7, #4]
 80093c0:	f002 faff 	bl	800b9c2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80093c4:	4b5a      	ldr	r3, [pc, #360]	; (8009530 <USBD_CDC_Init+0x1e4>)
 80093c6:	781b      	ldrb	r3, [r3, #0]
 80093c8:	f003 020f 	and.w	r2, r3, #15
 80093cc:	6879      	ldr	r1, [r7, #4]
 80093ce:	4613      	mov	r3, r2
 80093d0:	009b      	lsls	r3, r3, #2
 80093d2:	4413      	add	r3, r2
 80093d4:	009b      	lsls	r3, r3, #2
 80093d6:	440b      	add	r3, r1
 80093d8:	3324      	adds	r3, #36	; 0x24
 80093da:	2201      	movs	r2, #1
 80093dc:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80093de:	4b55      	ldr	r3, [pc, #340]	; (8009534 <USBD_CDC_Init+0x1e8>)
 80093e0:	7819      	ldrb	r1, [r3, #0]
 80093e2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80093e6:	2202      	movs	r2, #2
 80093e8:	6878      	ldr	r0, [r7, #4]
 80093ea:	f002 faea 	bl	800b9c2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80093ee:	4b51      	ldr	r3, [pc, #324]	; (8009534 <USBD_CDC_Init+0x1e8>)
 80093f0:	781b      	ldrb	r3, [r3, #0]
 80093f2:	f003 020f 	and.w	r2, r3, #15
 80093f6:	6879      	ldr	r1, [r7, #4]
 80093f8:	4613      	mov	r3, r2
 80093fa:	009b      	lsls	r3, r3, #2
 80093fc:	4413      	add	r3, r2
 80093fe:	009b      	lsls	r3, r3, #2
 8009400:	440b      	add	r3, r1
 8009402:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8009406:	2201      	movs	r2, #1
 8009408:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800940a:	4b4b      	ldr	r3, [pc, #300]	; (8009538 <USBD_CDC_Init+0x1ec>)
 800940c:	781b      	ldrb	r3, [r3, #0]
 800940e:	f003 020f 	and.w	r2, r3, #15
 8009412:	6879      	ldr	r1, [r7, #4]
 8009414:	4613      	mov	r3, r2
 8009416:	009b      	lsls	r3, r3, #2
 8009418:	4413      	add	r3, r2
 800941a:	009b      	lsls	r3, r3, #2
 800941c:	440b      	add	r3, r1
 800941e:	3326      	adds	r3, #38	; 0x26
 8009420:	2210      	movs	r2, #16
 8009422:	801a      	strh	r2, [r3, #0]
 8009424:	e035      	b.n	8009492 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8009426:	4b42      	ldr	r3, [pc, #264]	; (8009530 <USBD_CDC_Init+0x1e4>)
 8009428:	7819      	ldrb	r1, [r3, #0]
 800942a:	2340      	movs	r3, #64	; 0x40
 800942c:	2202      	movs	r2, #2
 800942e:	6878      	ldr	r0, [r7, #4]
 8009430:	f002 fac7 	bl	800b9c2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8009434:	4b3e      	ldr	r3, [pc, #248]	; (8009530 <USBD_CDC_Init+0x1e4>)
 8009436:	781b      	ldrb	r3, [r3, #0]
 8009438:	f003 020f 	and.w	r2, r3, #15
 800943c:	6879      	ldr	r1, [r7, #4]
 800943e:	4613      	mov	r3, r2
 8009440:	009b      	lsls	r3, r3, #2
 8009442:	4413      	add	r3, r2
 8009444:	009b      	lsls	r3, r3, #2
 8009446:	440b      	add	r3, r1
 8009448:	3324      	adds	r3, #36	; 0x24
 800944a:	2201      	movs	r2, #1
 800944c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800944e:	4b39      	ldr	r3, [pc, #228]	; (8009534 <USBD_CDC_Init+0x1e8>)
 8009450:	7819      	ldrb	r1, [r3, #0]
 8009452:	2340      	movs	r3, #64	; 0x40
 8009454:	2202      	movs	r2, #2
 8009456:	6878      	ldr	r0, [r7, #4]
 8009458:	f002 fab3 	bl	800b9c2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800945c:	4b35      	ldr	r3, [pc, #212]	; (8009534 <USBD_CDC_Init+0x1e8>)
 800945e:	781b      	ldrb	r3, [r3, #0]
 8009460:	f003 020f 	and.w	r2, r3, #15
 8009464:	6879      	ldr	r1, [r7, #4]
 8009466:	4613      	mov	r3, r2
 8009468:	009b      	lsls	r3, r3, #2
 800946a:	4413      	add	r3, r2
 800946c:	009b      	lsls	r3, r3, #2
 800946e:	440b      	add	r3, r1
 8009470:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8009474:	2201      	movs	r2, #1
 8009476:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8009478:	4b2f      	ldr	r3, [pc, #188]	; (8009538 <USBD_CDC_Init+0x1ec>)
 800947a:	781b      	ldrb	r3, [r3, #0]
 800947c:	f003 020f 	and.w	r2, r3, #15
 8009480:	6879      	ldr	r1, [r7, #4]
 8009482:	4613      	mov	r3, r2
 8009484:	009b      	lsls	r3, r3, #2
 8009486:	4413      	add	r3, r2
 8009488:	009b      	lsls	r3, r3, #2
 800948a:	440b      	add	r3, r1
 800948c:	3326      	adds	r3, #38	; 0x26
 800948e:	2210      	movs	r2, #16
 8009490:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8009492:	4b29      	ldr	r3, [pc, #164]	; (8009538 <USBD_CDC_Init+0x1ec>)
 8009494:	7819      	ldrb	r1, [r3, #0]
 8009496:	2308      	movs	r3, #8
 8009498:	2203      	movs	r2, #3
 800949a:	6878      	ldr	r0, [r7, #4]
 800949c:	f002 fa91 	bl	800b9c2 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 80094a0:	4b25      	ldr	r3, [pc, #148]	; (8009538 <USBD_CDC_Init+0x1ec>)
 80094a2:	781b      	ldrb	r3, [r3, #0]
 80094a4:	f003 020f 	and.w	r2, r3, #15
 80094a8:	6879      	ldr	r1, [r7, #4]
 80094aa:	4613      	mov	r3, r2
 80094ac:	009b      	lsls	r3, r3, #2
 80094ae:	4413      	add	r3, r2
 80094b0:	009b      	lsls	r3, r3, #2
 80094b2:	440b      	add	r3, r1
 80094b4:	3324      	adds	r3, #36	; 0x24
 80094b6:	2201      	movs	r2, #1
 80094b8:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 80094ba:	68fb      	ldr	r3, [r7, #12]
 80094bc:	2200      	movs	r2, #0
 80094be:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80094c8:	687a      	ldr	r2, [r7, #4]
 80094ca:	33b0      	adds	r3, #176	; 0xb0
 80094cc:	009b      	lsls	r3, r3, #2
 80094ce:	4413      	add	r3, r2
 80094d0:	685b      	ldr	r3, [r3, #4]
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80094d6:	68fb      	ldr	r3, [r7, #12]
 80094d8:	2200      	movs	r2, #0
 80094da:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 80094de:	68fb      	ldr	r3, [r7, #12]
 80094e0:	2200      	movs	r2, #0
 80094e2:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 80094e6:	68fb      	ldr	r3, [r7, #12]
 80094e8:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80094ec:	2b00      	cmp	r3, #0
 80094ee:	d101      	bne.n	80094f4 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 80094f0:	2302      	movs	r3, #2
 80094f2:	e018      	b.n	8009526 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	7c1b      	ldrb	r3, [r3, #16]
 80094f8:	2b00      	cmp	r3, #0
 80094fa:	d10a      	bne.n	8009512 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80094fc:	4b0d      	ldr	r3, [pc, #52]	; (8009534 <USBD_CDC_Init+0x1e8>)
 80094fe:	7819      	ldrb	r1, [r3, #0]
 8009500:	68fb      	ldr	r3, [r7, #12]
 8009502:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009506:	f44f 7300 	mov.w	r3, #512	; 0x200
 800950a:	6878      	ldr	r0, [r7, #4]
 800950c:	f002 fb48 	bl	800bba0 <USBD_LL_PrepareReceive>
 8009510:	e008      	b.n	8009524 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009512:	4b08      	ldr	r3, [pc, #32]	; (8009534 <USBD_CDC_Init+0x1e8>)
 8009514:	7819      	ldrb	r1, [r3, #0]
 8009516:	68fb      	ldr	r3, [r7, #12]
 8009518:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800951c:	2340      	movs	r3, #64	; 0x40
 800951e:	6878      	ldr	r0, [r7, #4]
 8009520:	f002 fb3e 	bl	800bba0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8009524:	2300      	movs	r3, #0
}
 8009526:	4618      	mov	r0, r3
 8009528:	3710      	adds	r7, #16
 800952a:	46bd      	mov	sp, r7
 800952c:	bd80      	pop	{r7, pc}
 800952e:	bf00      	nop
 8009530:	200000a3 	.word	0x200000a3
 8009534:	200000a4 	.word	0x200000a4
 8009538:	200000a5 	.word	0x200000a5

0800953c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800953c:	b580      	push	{r7, lr}
 800953e:	b082      	sub	sp, #8
 8009540:	af00      	add	r7, sp, #0
 8009542:	6078      	str	r0, [r7, #4]
 8009544:	460b      	mov	r3, r1
 8009546:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8009548:	4b3a      	ldr	r3, [pc, #232]	; (8009634 <USBD_CDC_DeInit+0xf8>)
 800954a:	781b      	ldrb	r3, [r3, #0]
 800954c:	4619      	mov	r1, r3
 800954e:	6878      	ldr	r0, [r7, #4]
 8009550:	f002 fa5d 	bl	800ba0e <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8009554:	4b37      	ldr	r3, [pc, #220]	; (8009634 <USBD_CDC_DeInit+0xf8>)
 8009556:	781b      	ldrb	r3, [r3, #0]
 8009558:	f003 020f 	and.w	r2, r3, #15
 800955c:	6879      	ldr	r1, [r7, #4]
 800955e:	4613      	mov	r3, r2
 8009560:	009b      	lsls	r3, r3, #2
 8009562:	4413      	add	r3, r2
 8009564:	009b      	lsls	r3, r3, #2
 8009566:	440b      	add	r3, r1
 8009568:	3324      	adds	r3, #36	; 0x24
 800956a:	2200      	movs	r2, #0
 800956c:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800956e:	4b32      	ldr	r3, [pc, #200]	; (8009638 <USBD_CDC_DeInit+0xfc>)
 8009570:	781b      	ldrb	r3, [r3, #0]
 8009572:	4619      	mov	r1, r3
 8009574:	6878      	ldr	r0, [r7, #4]
 8009576:	f002 fa4a 	bl	800ba0e <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800957a:	4b2f      	ldr	r3, [pc, #188]	; (8009638 <USBD_CDC_DeInit+0xfc>)
 800957c:	781b      	ldrb	r3, [r3, #0]
 800957e:	f003 020f 	and.w	r2, r3, #15
 8009582:	6879      	ldr	r1, [r7, #4]
 8009584:	4613      	mov	r3, r2
 8009586:	009b      	lsls	r3, r3, #2
 8009588:	4413      	add	r3, r2
 800958a:	009b      	lsls	r3, r3, #2
 800958c:	440b      	add	r3, r1
 800958e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8009592:	2200      	movs	r2, #0
 8009594:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8009596:	4b29      	ldr	r3, [pc, #164]	; (800963c <USBD_CDC_DeInit+0x100>)
 8009598:	781b      	ldrb	r3, [r3, #0]
 800959a:	4619      	mov	r1, r3
 800959c:	6878      	ldr	r0, [r7, #4]
 800959e:	f002 fa36 	bl	800ba0e <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 80095a2:	4b26      	ldr	r3, [pc, #152]	; (800963c <USBD_CDC_DeInit+0x100>)
 80095a4:	781b      	ldrb	r3, [r3, #0]
 80095a6:	f003 020f 	and.w	r2, r3, #15
 80095aa:	6879      	ldr	r1, [r7, #4]
 80095ac:	4613      	mov	r3, r2
 80095ae:	009b      	lsls	r3, r3, #2
 80095b0:	4413      	add	r3, r2
 80095b2:	009b      	lsls	r3, r3, #2
 80095b4:	440b      	add	r3, r1
 80095b6:	3324      	adds	r3, #36	; 0x24
 80095b8:	2200      	movs	r2, #0
 80095ba:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 80095bc:	4b1f      	ldr	r3, [pc, #124]	; (800963c <USBD_CDC_DeInit+0x100>)
 80095be:	781b      	ldrb	r3, [r3, #0]
 80095c0:	f003 020f 	and.w	r2, r3, #15
 80095c4:	6879      	ldr	r1, [r7, #4]
 80095c6:	4613      	mov	r3, r2
 80095c8:	009b      	lsls	r3, r3, #2
 80095ca:	4413      	add	r3, r2
 80095cc:	009b      	lsls	r3, r3, #2
 80095ce:	440b      	add	r3, r1
 80095d0:	3326      	adds	r3, #38	; 0x26
 80095d2:	2200      	movs	r2, #0
 80095d4:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	32b0      	adds	r2, #176	; 0xb0
 80095e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80095e4:	2b00      	cmp	r3, #0
 80095e6:	d01f      	beq.n	8009628 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80095ee:	687a      	ldr	r2, [r7, #4]
 80095f0:	33b0      	adds	r3, #176	; 0xb0
 80095f2:	009b      	lsls	r3, r3, #2
 80095f4:	4413      	add	r3, r2
 80095f6:	685b      	ldr	r3, [r3, #4]
 80095f8:	685b      	ldr	r3, [r3, #4]
 80095fa:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	32b0      	adds	r2, #176	; 0xb0
 8009606:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800960a:	4618      	mov	r0, r3
 800960c:	f002 fb0a 	bl	800bc24 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	32b0      	adds	r2, #176	; 0xb0
 800961a:	2100      	movs	r1, #0
 800961c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	2200      	movs	r2, #0
 8009624:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8009628:	2300      	movs	r3, #0
}
 800962a:	4618      	mov	r0, r3
 800962c:	3708      	adds	r7, #8
 800962e:	46bd      	mov	sp, r7
 8009630:	bd80      	pop	{r7, pc}
 8009632:	bf00      	nop
 8009634:	200000a3 	.word	0x200000a3
 8009638:	200000a4 	.word	0x200000a4
 800963c:	200000a5 	.word	0x200000a5

08009640 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8009640:	b580      	push	{r7, lr}
 8009642:	b086      	sub	sp, #24
 8009644:	af00      	add	r7, sp, #0
 8009646:	6078      	str	r0, [r7, #4]
 8009648:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	32b0      	adds	r2, #176	; 0xb0
 8009654:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009658:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800965a:	2300      	movs	r3, #0
 800965c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800965e:	2300      	movs	r3, #0
 8009660:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8009662:	2300      	movs	r3, #0
 8009664:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8009666:	693b      	ldr	r3, [r7, #16]
 8009668:	2b00      	cmp	r3, #0
 800966a:	d101      	bne.n	8009670 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800966c:	2303      	movs	r3, #3
 800966e:	e0bf      	b.n	80097f0 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009670:	683b      	ldr	r3, [r7, #0]
 8009672:	781b      	ldrb	r3, [r3, #0]
 8009674:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009678:	2b00      	cmp	r3, #0
 800967a:	d050      	beq.n	800971e <USBD_CDC_Setup+0xde>
 800967c:	2b20      	cmp	r3, #32
 800967e:	f040 80af 	bne.w	80097e0 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8009682:	683b      	ldr	r3, [r7, #0]
 8009684:	88db      	ldrh	r3, [r3, #6]
 8009686:	2b00      	cmp	r3, #0
 8009688:	d03a      	beq.n	8009700 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800968a:	683b      	ldr	r3, [r7, #0]
 800968c:	781b      	ldrb	r3, [r3, #0]
 800968e:	b25b      	sxtb	r3, r3
 8009690:	2b00      	cmp	r3, #0
 8009692:	da1b      	bge.n	80096cc <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800969a:	687a      	ldr	r2, [r7, #4]
 800969c:	33b0      	adds	r3, #176	; 0xb0
 800969e:	009b      	lsls	r3, r3, #2
 80096a0:	4413      	add	r3, r2
 80096a2:	685b      	ldr	r3, [r3, #4]
 80096a4:	689b      	ldr	r3, [r3, #8]
 80096a6:	683a      	ldr	r2, [r7, #0]
 80096a8:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 80096aa:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80096ac:	683a      	ldr	r2, [r7, #0]
 80096ae:	88d2      	ldrh	r2, [r2, #6]
 80096b0:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80096b2:	683b      	ldr	r3, [r7, #0]
 80096b4:	88db      	ldrh	r3, [r3, #6]
 80096b6:	2b07      	cmp	r3, #7
 80096b8:	bf28      	it	cs
 80096ba:	2307      	movcs	r3, #7
 80096bc:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80096be:	693b      	ldr	r3, [r7, #16]
 80096c0:	89fa      	ldrh	r2, [r7, #14]
 80096c2:	4619      	mov	r1, r3
 80096c4:	6878      	ldr	r0, [r7, #4]
 80096c6:	f001 fd43 	bl	800b150 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 80096ca:	e090      	b.n	80097ee <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 80096cc:	683b      	ldr	r3, [r7, #0]
 80096ce:	785a      	ldrb	r2, [r3, #1]
 80096d0:	693b      	ldr	r3, [r7, #16]
 80096d2:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 80096d6:	683b      	ldr	r3, [r7, #0]
 80096d8:	88db      	ldrh	r3, [r3, #6]
 80096da:	2b3f      	cmp	r3, #63	; 0x3f
 80096dc:	d803      	bhi.n	80096e6 <USBD_CDC_Setup+0xa6>
 80096de:	683b      	ldr	r3, [r7, #0]
 80096e0:	88db      	ldrh	r3, [r3, #6]
 80096e2:	b2da      	uxtb	r2, r3
 80096e4:	e000      	b.n	80096e8 <USBD_CDC_Setup+0xa8>
 80096e6:	2240      	movs	r2, #64	; 0x40
 80096e8:	693b      	ldr	r3, [r7, #16]
 80096ea:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 80096ee:	6939      	ldr	r1, [r7, #16]
 80096f0:	693b      	ldr	r3, [r7, #16]
 80096f2:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 80096f6:	461a      	mov	r2, r3
 80096f8:	6878      	ldr	r0, [r7, #4]
 80096fa:	f001 fd55 	bl	800b1a8 <USBD_CtlPrepareRx>
      break;
 80096fe:	e076      	b.n	80097ee <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009706:	687a      	ldr	r2, [r7, #4]
 8009708:	33b0      	adds	r3, #176	; 0xb0
 800970a:	009b      	lsls	r3, r3, #2
 800970c:	4413      	add	r3, r2
 800970e:	685b      	ldr	r3, [r3, #4]
 8009710:	689b      	ldr	r3, [r3, #8]
 8009712:	683a      	ldr	r2, [r7, #0]
 8009714:	7850      	ldrb	r0, [r2, #1]
 8009716:	2200      	movs	r2, #0
 8009718:	6839      	ldr	r1, [r7, #0]
 800971a:	4798      	blx	r3
      break;
 800971c:	e067      	b.n	80097ee <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800971e:	683b      	ldr	r3, [r7, #0]
 8009720:	785b      	ldrb	r3, [r3, #1]
 8009722:	2b0b      	cmp	r3, #11
 8009724:	d851      	bhi.n	80097ca <USBD_CDC_Setup+0x18a>
 8009726:	a201      	add	r2, pc, #4	; (adr r2, 800972c <USBD_CDC_Setup+0xec>)
 8009728:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800972c:	0800975d 	.word	0x0800975d
 8009730:	080097d9 	.word	0x080097d9
 8009734:	080097cb 	.word	0x080097cb
 8009738:	080097cb 	.word	0x080097cb
 800973c:	080097cb 	.word	0x080097cb
 8009740:	080097cb 	.word	0x080097cb
 8009744:	080097cb 	.word	0x080097cb
 8009748:	080097cb 	.word	0x080097cb
 800974c:	080097cb 	.word	0x080097cb
 8009750:	080097cb 	.word	0x080097cb
 8009754:	08009787 	.word	0x08009787
 8009758:	080097b1 	.word	0x080097b1
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009762:	b2db      	uxtb	r3, r3
 8009764:	2b03      	cmp	r3, #3
 8009766:	d107      	bne.n	8009778 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8009768:	f107 030a 	add.w	r3, r7, #10
 800976c:	2202      	movs	r2, #2
 800976e:	4619      	mov	r1, r3
 8009770:	6878      	ldr	r0, [r7, #4]
 8009772:	f001 fced 	bl	800b150 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009776:	e032      	b.n	80097de <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8009778:	6839      	ldr	r1, [r7, #0]
 800977a:	6878      	ldr	r0, [r7, #4]
 800977c:	f001 fc77 	bl	800b06e <USBD_CtlError>
            ret = USBD_FAIL;
 8009780:	2303      	movs	r3, #3
 8009782:	75fb      	strb	r3, [r7, #23]
          break;
 8009784:	e02b      	b.n	80097de <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800978c:	b2db      	uxtb	r3, r3
 800978e:	2b03      	cmp	r3, #3
 8009790:	d107      	bne.n	80097a2 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8009792:	f107 030d 	add.w	r3, r7, #13
 8009796:	2201      	movs	r2, #1
 8009798:	4619      	mov	r1, r3
 800979a:	6878      	ldr	r0, [r7, #4]
 800979c:	f001 fcd8 	bl	800b150 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80097a0:	e01d      	b.n	80097de <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80097a2:	6839      	ldr	r1, [r7, #0]
 80097a4:	6878      	ldr	r0, [r7, #4]
 80097a6:	f001 fc62 	bl	800b06e <USBD_CtlError>
            ret = USBD_FAIL;
 80097aa:	2303      	movs	r3, #3
 80097ac:	75fb      	strb	r3, [r7, #23]
          break;
 80097ae:	e016      	b.n	80097de <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80097b6:	b2db      	uxtb	r3, r3
 80097b8:	2b03      	cmp	r3, #3
 80097ba:	d00f      	beq.n	80097dc <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 80097bc:	6839      	ldr	r1, [r7, #0]
 80097be:	6878      	ldr	r0, [r7, #4]
 80097c0:	f001 fc55 	bl	800b06e <USBD_CtlError>
            ret = USBD_FAIL;
 80097c4:	2303      	movs	r3, #3
 80097c6:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80097c8:	e008      	b.n	80097dc <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80097ca:	6839      	ldr	r1, [r7, #0]
 80097cc:	6878      	ldr	r0, [r7, #4]
 80097ce:	f001 fc4e 	bl	800b06e <USBD_CtlError>
          ret = USBD_FAIL;
 80097d2:	2303      	movs	r3, #3
 80097d4:	75fb      	strb	r3, [r7, #23]
          break;
 80097d6:	e002      	b.n	80097de <USBD_CDC_Setup+0x19e>
          break;
 80097d8:	bf00      	nop
 80097da:	e008      	b.n	80097ee <USBD_CDC_Setup+0x1ae>
          break;
 80097dc:	bf00      	nop
      }
      break;
 80097de:	e006      	b.n	80097ee <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 80097e0:	6839      	ldr	r1, [r7, #0]
 80097e2:	6878      	ldr	r0, [r7, #4]
 80097e4:	f001 fc43 	bl	800b06e <USBD_CtlError>
      ret = USBD_FAIL;
 80097e8:	2303      	movs	r3, #3
 80097ea:	75fb      	strb	r3, [r7, #23]
      break;
 80097ec:	bf00      	nop
  }

  return (uint8_t)ret;
 80097ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80097f0:	4618      	mov	r0, r3
 80097f2:	3718      	adds	r7, #24
 80097f4:	46bd      	mov	sp, r7
 80097f6:	bd80      	pop	{r7, pc}

080097f8 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80097f8:	b580      	push	{r7, lr}
 80097fa:	b084      	sub	sp, #16
 80097fc:	af00      	add	r7, sp, #0
 80097fe:	6078      	str	r0, [r7, #4]
 8009800:	460b      	mov	r3, r1
 8009802:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800980a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	32b0      	adds	r2, #176	; 0xb0
 8009816:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800981a:	2b00      	cmp	r3, #0
 800981c:	d101      	bne.n	8009822 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800981e:	2303      	movs	r3, #3
 8009820:	e065      	b.n	80098ee <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	32b0      	adds	r2, #176	; 0xb0
 800982c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009830:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8009832:	78fb      	ldrb	r3, [r7, #3]
 8009834:	f003 020f 	and.w	r2, r3, #15
 8009838:	6879      	ldr	r1, [r7, #4]
 800983a:	4613      	mov	r3, r2
 800983c:	009b      	lsls	r3, r3, #2
 800983e:	4413      	add	r3, r2
 8009840:	009b      	lsls	r3, r3, #2
 8009842:	440b      	add	r3, r1
 8009844:	3318      	adds	r3, #24
 8009846:	681b      	ldr	r3, [r3, #0]
 8009848:	2b00      	cmp	r3, #0
 800984a:	d02f      	beq.n	80098ac <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800984c:	78fb      	ldrb	r3, [r7, #3]
 800984e:	f003 020f 	and.w	r2, r3, #15
 8009852:	6879      	ldr	r1, [r7, #4]
 8009854:	4613      	mov	r3, r2
 8009856:	009b      	lsls	r3, r3, #2
 8009858:	4413      	add	r3, r2
 800985a:	009b      	lsls	r3, r3, #2
 800985c:	440b      	add	r3, r1
 800985e:	3318      	adds	r3, #24
 8009860:	681a      	ldr	r2, [r3, #0]
 8009862:	78fb      	ldrb	r3, [r7, #3]
 8009864:	f003 010f 	and.w	r1, r3, #15
 8009868:	68f8      	ldr	r0, [r7, #12]
 800986a:	460b      	mov	r3, r1
 800986c:	00db      	lsls	r3, r3, #3
 800986e:	440b      	add	r3, r1
 8009870:	009b      	lsls	r3, r3, #2
 8009872:	4403      	add	r3, r0
 8009874:	3348      	adds	r3, #72	; 0x48
 8009876:	681b      	ldr	r3, [r3, #0]
 8009878:	fbb2 f1f3 	udiv	r1, r2, r3
 800987c:	fb01 f303 	mul.w	r3, r1, r3
 8009880:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8009882:	2b00      	cmp	r3, #0
 8009884:	d112      	bne.n	80098ac <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8009886:	78fb      	ldrb	r3, [r7, #3]
 8009888:	f003 020f 	and.w	r2, r3, #15
 800988c:	6879      	ldr	r1, [r7, #4]
 800988e:	4613      	mov	r3, r2
 8009890:	009b      	lsls	r3, r3, #2
 8009892:	4413      	add	r3, r2
 8009894:	009b      	lsls	r3, r3, #2
 8009896:	440b      	add	r3, r1
 8009898:	3318      	adds	r3, #24
 800989a:	2200      	movs	r2, #0
 800989c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800989e:	78f9      	ldrb	r1, [r7, #3]
 80098a0:	2300      	movs	r3, #0
 80098a2:	2200      	movs	r2, #0
 80098a4:	6878      	ldr	r0, [r7, #4]
 80098a6:	f002 f95a 	bl	800bb5e <USBD_LL_Transmit>
 80098aa:	e01f      	b.n	80098ec <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 80098ac:	68bb      	ldr	r3, [r7, #8]
 80098ae:	2200      	movs	r2, #0
 80098b0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80098ba:	687a      	ldr	r2, [r7, #4]
 80098bc:	33b0      	adds	r3, #176	; 0xb0
 80098be:	009b      	lsls	r3, r3, #2
 80098c0:	4413      	add	r3, r2
 80098c2:	685b      	ldr	r3, [r3, #4]
 80098c4:	691b      	ldr	r3, [r3, #16]
 80098c6:	2b00      	cmp	r3, #0
 80098c8:	d010      	beq.n	80098ec <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80098d0:	687a      	ldr	r2, [r7, #4]
 80098d2:	33b0      	adds	r3, #176	; 0xb0
 80098d4:	009b      	lsls	r3, r3, #2
 80098d6:	4413      	add	r3, r2
 80098d8:	685b      	ldr	r3, [r3, #4]
 80098da:	691b      	ldr	r3, [r3, #16]
 80098dc:	68ba      	ldr	r2, [r7, #8]
 80098de:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 80098e2:	68ba      	ldr	r2, [r7, #8]
 80098e4:	f502 7104 	add.w	r1, r2, #528	; 0x210
 80098e8:	78fa      	ldrb	r2, [r7, #3]
 80098ea:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80098ec:	2300      	movs	r3, #0
}
 80098ee:	4618      	mov	r0, r3
 80098f0:	3710      	adds	r7, #16
 80098f2:	46bd      	mov	sp, r7
 80098f4:	bd80      	pop	{r7, pc}

080098f6 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80098f6:	b580      	push	{r7, lr}
 80098f8:	b084      	sub	sp, #16
 80098fa:	af00      	add	r7, sp, #0
 80098fc:	6078      	str	r0, [r7, #4]
 80098fe:	460b      	mov	r3, r1
 8009900:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	32b0      	adds	r2, #176	; 0xb0
 800990c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009910:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	32b0      	adds	r2, #176	; 0xb0
 800991c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009920:	2b00      	cmp	r3, #0
 8009922:	d101      	bne.n	8009928 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8009924:	2303      	movs	r3, #3
 8009926:	e01a      	b.n	800995e <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8009928:	78fb      	ldrb	r3, [r7, #3]
 800992a:	4619      	mov	r1, r3
 800992c:	6878      	ldr	r0, [r7, #4]
 800992e:	f002 f958 	bl	800bbe2 <USBD_LL_GetRxDataSize>
 8009932:	4602      	mov	r2, r0
 8009934:	68fb      	ldr	r3, [r7, #12]
 8009936:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009940:	687a      	ldr	r2, [r7, #4]
 8009942:	33b0      	adds	r3, #176	; 0xb0
 8009944:	009b      	lsls	r3, r3, #2
 8009946:	4413      	add	r3, r2
 8009948:	685b      	ldr	r3, [r3, #4]
 800994a:	68db      	ldr	r3, [r3, #12]
 800994c:	68fa      	ldr	r2, [r7, #12]
 800994e:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8009952:	68fa      	ldr	r2, [r7, #12]
 8009954:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8009958:	4611      	mov	r1, r2
 800995a:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800995c:	2300      	movs	r3, #0
}
 800995e:	4618      	mov	r0, r3
 8009960:	3710      	adds	r7, #16
 8009962:	46bd      	mov	sp, r7
 8009964:	bd80      	pop	{r7, pc}

08009966 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8009966:	b580      	push	{r7, lr}
 8009968:	b084      	sub	sp, #16
 800996a:	af00      	add	r7, sp, #0
 800996c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	32b0      	adds	r2, #176	; 0xb0
 8009978:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800997c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800997e:	68fb      	ldr	r3, [r7, #12]
 8009980:	2b00      	cmp	r3, #0
 8009982:	d101      	bne.n	8009988 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8009984:	2303      	movs	r3, #3
 8009986:	e025      	b.n	80099d4 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800998e:	687a      	ldr	r2, [r7, #4]
 8009990:	33b0      	adds	r3, #176	; 0xb0
 8009992:	009b      	lsls	r3, r3, #2
 8009994:	4413      	add	r3, r2
 8009996:	685b      	ldr	r3, [r3, #4]
 8009998:	2b00      	cmp	r3, #0
 800999a:	d01a      	beq.n	80099d2 <USBD_CDC_EP0_RxReady+0x6c>
 800999c:	68fb      	ldr	r3, [r7, #12]
 800999e:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80099a2:	2bff      	cmp	r3, #255	; 0xff
 80099a4:	d015      	beq.n	80099d2 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80099ac:	687a      	ldr	r2, [r7, #4]
 80099ae:	33b0      	adds	r3, #176	; 0xb0
 80099b0:	009b      	lsls	r3, r3, #2
 80099b2:	4413      	add	r3, r2
 80099b4:	685b      	ldr	r3, [r3, #4]
 80099b6:	689b      	ldr	r3, [r3, #8]
 80099b8:	68fa      	ldr	r2, [r7, #12]
 80099ba:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 80099be:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 80099c0:	68fa      	ldr	r2, [r7, #12]
 80099c2:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80099c6:	b292      	uxth	r2, r2
 80099c8:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80099ca:	68fb      	ldr	r3, [r7, #12]
 80099cc:	22ff      	movs	r2, #255	; 0xff
 80099ce:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 80099d2:	2300      	movs	r3, #0
}
 80099d4:	4618      	mov	r0, r3
 80099d6:	3710      	adds	r7, #16
 80099d8:	46bd      	mov	sp, r7
 80099da:	bd80      	pop	{r7, pc}

080099dc <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80099dc:	b580      	push	{r7, lr}
 80099de:	b086      	sub	sp, #24
 80099e0:	af00      	add	r7, sp, #0
 80099e2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80099e4:	2182      	movs	r1, #130	; 0x82
 80099e6:	4818      	ldr	r0, [pc, #96]	; (8009a48 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80099e8:	f000 fd09 	bl	800a3fe <USBD_GetEpDesc>
 80099ec:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80099ee:	2101      	movs	r1, #1
 80099f0:	4815      	ldr	r0, [pc, #84]	; (8009a48 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80099f2:	f000 fd04 	bl	800a3fe <USBD_GetEpDesc>
 80099f6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80099f8:	2181      	movs	r1, #129	; 0x81
 80099fa:	4813      	ldr	r0, [pc, #76]	; (8009a48 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80099fc:	f000 fcff 	bl	800a3fe <USBD_GetEpDesc>
 8009a00:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8009a02:	697b      	ldr	r3, [r7, #20]
 8009a04:	2b00      	cmp	r3, #0
 8009a06:	d002      	beq.n	8009a0e <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8009a08:	697b      	ldr	r3, [r7, #20]
 8009a0a:	2210      	movs	r2, #16
 8009a0c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8009a0e:	693b      	ldr	r3, [r7, #16]
 8009a10:	2b00      	cmp	r3, #0
 8009a12:	d006      	beq.n	8009a22 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009a14:	693b      	ldr	r3, [r7, #16]
 8009a16:	2200      	movs	r2, #0
 8009a18:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009a1c:	711a      	strb	r2, [r3, #4]
 8009a1e:	2200      	movs	r2, #0
 8009a20:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8009a22:	68fb      	ldr	r3, [r7, #12]
 8009a24:	2b00      	cmp	r3, #0
 8009a26:	d006      	beq.n	8009a36 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009a28:	68fb      	ldr	r3, [r7, #12]
 8009a2a:	2200      	movs	r2, #0
 8009a2c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009a30:	711a      	strb	r2, [r3, #4]
 8009a32:	2200      	movs	r2, #0
 8009a34:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	2243      	movs	r2, #67	; 0x43
 8009a3a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8009a3c:	4b02      	ldr	r3, [pc, #8]	; (8009a48 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8009a3e:	4618      	mov	r0, r3
 8009a40:	3718      	adds	r7, #24
 8009a42:	46bd      	mov	sp, r7
 8009a44:	bd80      	pop	{r7, pc}
 8009a46:	bf00      	nop
 8009a48:	20000060 	.word	0x20000060

08009a4c <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8009a4c:	b580      	push	{r7, lr}
 8009a4e:	b086      	sub	sp, #24
 8009a50:	af00      	add	r7, sp, #0
 8009a52:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8009a54:	2182      	movs	r1, #130	; 0x82
 8009a56:	4818      	ldr	r0, [pc, #96]	; (8009ab8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8009a58:	f000 fcd1 	bl	800a3fe <USBD_GetEpDesc>
 8009a5c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8009a5e:	2101      	movs	r1, #1
 8009a60:	4815      	ldr	r0, [pc, #84]	; (8009ab8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8009a62:	f000 fccc 	bl	800a3fe <USBD_GetEpDesc>
 8009a66:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8009a68:	2181      	movs	r1, #129	; 0x81
 8009a6a:	4813      	ldr	r0, [pc, #76]	; (8009ab8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8009a6c:	f000 fcc7 	bl	800a3fe <USBD_GetEpDesc>
 8009a70:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8009a72:	697b      	ldr	r3, [r7, #20]
 8009a74:	2b00      	cmp	r3, #0
 8009a76:	d002      	beq.n	8009a7e <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8009a78:	697b      	ldr	r3, [r7, #20]
 8009a7a:	2210      	movs	r2, #16
 8009a7c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8009a7e:	693b      	ldr	r3, [r7, #16]
 8009a80:	2b00      	cmp	r3, #0
 8009a82:	d006      	beq.n	8009a92 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8009a84:	693b      	ldr	r3, [r7, #16]
 8009a86:	2200      	movs	r2, #0
 8009a88:	711a      	strb	r2, [r3, #4]
 8009a8a:	2200      	movs	r2, #0
 8009a8c:	f042 0202 	orr.w	r2, r2, #2
 8009a90:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8009a92:	68fb      	ldr	r3, [r7, #12]
 8009a94:	2b00      	cmp	r3, #0
 8009a96:	d006      	beq.n	8009aa6 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8009a98:	68fb      	ldr	r3, [r7, #12]
 8009a9a:	2200      	movs	r2, #0
 8009a9c:	711a      	strb	r2, [r3, #4]
 8009a9e:	2200      	movs	r2, #0
 8009aa0:	f042 0202 	orr.w	r2, r2, #2
 8009aa4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	2243      	movs	r2, #67	; 0x43
 8009aaa:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8009aac:	4b02      	ldr	r3, [pc, #8]	; (8009ab8 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8009aae:	4618      	mov	r0, r3
 8009ab0:	3718      	adds	r7, #24
 8009ab2:	46bd      	mov	sp, r7
 8009ab4:	bd80      	pop	{r7, pc}
 8009ab6:	bf00      	nop
 8009ab8:	20000060 	.word	0x20000060

08009abc <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8009abc:	b580      	push	{r7, lr}
 8009abe:	b086      	sub	sp, #24
 8009ac0:	af00      	add	r7, sp, #0
 8009ac2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8009ac4:	2182      	movs	r1, #130	; 0x82
 8009ac6:	4818      	ldr	r0, [pc, #96]	; (8009b28 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8009ac8:	f000 fc99 	bl	800a3fe <USBD_GetEpDesc>
 8009acc:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8009ace:	2101      	movs	r1, #1
 8009ad0:	4815      	ldr	r0, [pc, #84]	; (8009b28 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8009ad2:	f000 fc94 	bl	800a3fe <USBD_GetEpDesc>
 8009ad6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8009ad8:	2181      	movs	r1, #129	; 0x81
 8009ada:	4813      	ldr	r0, [pc, #76]	; (8009b28 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8009adc:	f000 fc8f 	bl	800a3fe <USBD_GetEpDesc>
 8009ae0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8009ae2:	697b      	ldr	r3, [r7, #20]
 8009ae4:	2b00      	cmp	r3, #0
 8009ae6:	d002      	beq.n	8009aee <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8009ae8:	697b      	ldr	r3, [r7, #20]
 8009aea:	2210      	movs	r2, #16
 8009aec:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8009aee:	693b      	ldr	r3, [r7, #16]
 8009af0:	2b00      	cmp	r3, #0
 8009af2:	d006      	beq.n	8009b02 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009af4:	693b      	ldr	r3, [r7, #16]
 8009af6:	2200      	movs	r2, #0
 8009af8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009afc:	711a      	strb	r2, [r3, #4]
 8009afe:	2200      	movs	r2, #0
 8009b00:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8009b02:	68fb      	ldr	r3, [r7, #12]
 8009b04:	2b00      	cmp	r3, #0
 8009b06:	d006      	beq.n	8009b16 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009b08:	68fb      	ldr	r3, [r7, #12]
 8009b0a:	2200      	movs	r2, #0
 8009b0c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009b10:	711a      	strb	r2, [r3, #4]
 8009b12:	2200      	movs	r2, #0
 8009b14:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	2243      	movs	r2, #67	; 0x43
 8009b1a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8009b1c:	4b02      	ldr	r3, [pc, #8]	; (8009b28 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8009b1e:	4618      	mov	r0, r3
 8009b20:	3718      	adds	r7, #24
 8009b22:	46bd      	mov	sp, r7
 8009b24:	bd80      	pop	{r7, pc}
 8009b26:	bf00      	nop
 8009b28:	20000060 	.word	0x20000060

08009b2c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8009b2c:	b480      	push	{r7}
 8009b2e:	b083      	sub	sp, #12
 8009b30:	af00      	add	r7, sp, #0
 8009b32:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	220a      	movs	r2, #10
 8009b38:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8009b3a:	4b03      	ldr	r3, [pc, #12]	; (8009b48 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8009b3c:	4618      	mov	r0, r3
 8009b3e:	370c      	adds	r7, #12
 8009b40:	46bd      	mov	sp, r7
 8009b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b46:	4770      	bx	lr
 8009b48:	2000001c 	.word	0x2000001c

08009b4c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8009b4c:	b480      	push	{r7}
 8009b4e:	b083      	sub	sp, #12
 8009b50:	af00      	add	r7, sp, #0
 8009b52:	6078      	str	r0, [r7, #4]
 8009b54:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8009b56:	683b      	ldr	r3, [r7, #0]
 8009b58:	2b00      	cmp	r3, #0
 8009b5a:	d101      	bne.n	8009b60 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8009b5c:	2303      	movs	r3, #3
 8009b5e:	e009      	b.n	8009b74 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009b66:	687a      	ldr	r2, [r7, #4]
 8009b68:	33b0      	adds	r3, #176	; 0xb0
 8009b6a:	009b      	lsls	r3, r3, #2
 8009b6c:	4413      	add	r3, r2
 8009b6e:	683a      	ldr	r2, [r7, #0]
 8009b70:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8009b72:	2300      	movs	r3, #0
}
 8009b74:	4618      	mov	r0, r3
 8009b76:	370c      	adds	r7, #12
 8009b78:	46bd      	mov	sp, r7
 8009b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b7e:	4770      	bx	lr

08009b80 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8009b80:	b480      	push	{r7}
 8009b82:	b087      	sub	sp, #28
 8009b84:	af00      	add	r7, sp, #0
 8009b86:	60f8      	str	r0, [r7, #12]
 8009b88:	60b9      	str	r1, [r7, #8]
 8009b8a:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009b8c:	68fb      	ldr	r3, [r7, #12]
 8009b8e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009b92:	68fb      	ldr	r3, [r7, #12]
 8009b94:	32b0      	adds	r2, #176	; 0xb0
 8009b96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009b9a:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8009b9c:	697b      	ldr	r3, [r7, #20]
 8009b9e:	2b00      	cmp	r3, #0
 8009ba0:	d101      	bne.n	8009ba6 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8009ba2:	2303      	movs	r3, #3
 8009ba4:	e008      	b.n	8009bb8 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8009ba6:	697b      	ldr	r3, [r7, #20]
 8009ba8:	68ba      	ldr	r2, [r7, #8]
 8009baa:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8009bae:	697b      	ldr	r3, [r7, #20]
 8009bb0:	687a      	ldr	r2, [r7, #4]
 8009bb2:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8009bb6:	2300      	movs	r3, #0
}
 8009bb8:	4618      	mov	r0, r3
 8009bba:	371c      	adds	r7, #28
 8009bbc:	46bd      	mov	sp, r7
 8009bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bc2:	4770      	bx	lr

08009bc4 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8009bc4:	b480      	push	{r7}
 8009bc6:	b085      	sub	sp, #20
 8009bc8:	af00      	add	r7, sp, #0
 8009bca:	6078      	str	r0, [r7, #4]
 8009bcc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	32b0      	adds	r2, #176	; 0xb0
 8009bd8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009bdc:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8009bde:	68fb      	ldr	r3, [r7, #12]
 8009be0:	2b00      	cmp	r3, #0
 8009be2:	d101      	bne.n	8009be8 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8009be4:	2303      	movs	r3, #3
 8009be6:	e004      	b.n	8009bf2 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8009be8:	68fb      	ldr	r3, [r7, #12]
 8009bea:	683a      	ldr	r2, [r7, #0]
 8009bec:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8009bf0:	2300      	movs	r3, #0
}
 8009bf2:	4618      	mov	r0, r3
 8009bf4:	3714      	adds	r7, #20
 8009bf6:	46bd      	mov	sp, r7
 8009bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bfc:	4770      	bx	lr
	...

08009c00 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8009c00:	b580      	push	{r7, lr}
 8009c02:	b084      	sub	sp, #16
 8009c04:	af00      	add	r7, sp, #0
 8009c06:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	32b0      	adds	r2, #176	; 0xb0
 8009c12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009c16:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	32b0      	adds	r2, #176	; 0xb0
 8009c22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009c26:	2b00      	cmp	r3, #0
 8009c28:	d101      	bne.n	8009c2e <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8009c2a:	2303      	movs	r3, #3
 8009c2c:	e018      	b.n	8009c60 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	7c1b      	ldrb	r3, [r3, #16]
 8009c32:	2b00      	cmp	r3, #0
 8009c34:	d10a      	bne.n	8009c4c <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009c36:	4b0c      	ldr	r3, [pc, #48]	; (8009c68 <USBD_CDC_ReceivePacket+0x68>)
 8009c38:	7819      	ldrb	r1, [r3, #0]
 8009c3a:	68fb      	ldr	r3, [r7, #12]
 8009c3c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009c40:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009c44:	6878      	ldr	r0, [r7, #4]
 8009c46:	f001 ffab 	bl	800bba0 <USBD_LL_PrepareReceive>
 8009c4a:	e008      	b.n	8009c5e <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009c4c:	4b06      	ldr	r3, [pc, #24]	; (8009c68 <USBD_CDC_ReceivePacket+0x68>)
 8009c4e:	7819      	ldrb	r1, [r3, #0]
 8009c50:	68fb      	ldr	r3, [r7, #12]
 8009c52:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009c56:	2340      	movs	r3, #64	; 0x40
 8009c58:	6878      	ldr	r0, [r7, #4]
 8009c5a:	f001 ffa1 	bl	800bba0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8009c5e:	2300      	movs	r3, #0
}
 8009c60:	4618      	mov	r0, r3
 8009c62:	3710      	adds	r7, #16
 8009c64:	46bd      	mov	sp, r7
 8009c66:	bd80      	pop	{r7, pc}
 8009c68:	200000a4 	.word	0x200000a4

08009c6c <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8009c6c:	b580      	push	{r7, lr}
 8009c6e:	b086      	sub	sp, #24
 8009c70:	af00      	add	r7, sp, #0
 8009c72:	60f8      	str	r0, [r7, #12]
 8009c74:	60b9      	str	r1, [r7, #8]
 8009c76:	4613      	mov	r3, r2
 8009c78:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8009c7a:	68fb      	ldr	r3, [r7, #12]
 8009c7c:	2b00      	cmp	r3, #0
 8009c7e:	d101      	bne.n	8009c84 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8009c80:	2303      	movs	r3, #3
 8009c82:	e01f      	b.n	8009cc4 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8009c84:	68fb      	ldr	r3, [r7, #12]
 8009c86:	2200      	movs	r2, #0
 8009c88:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8009c8c:	68fb      	ldr	r3, [r7, #12]
 8009c8e:	2200      	movs	r2, #0
 8009c90:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8009c94:	68fb      	ldr	r3, [r7, #12]
 8009c96:	2200      	movs	r2, #0
 8009c98:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8009c9c:	68bb      	ldr	r3, [r7, #8]
 8009c9e:	2b00      	cmp	r3, #0
 8009ca0:	d003      	beq.n	8009caa <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8009ca2:	68fb      	ldr	r3, [r7, #12]
 8009ca4:	68ba      	ldr	r2, [r7, #8]
 8009ca6:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009caa:	68fb      	ldr	r3, [r7, #12]
 8009cac:	2201      	movs	r2, #1
 8009cae:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8009cb2:	68fb      	ldr	r3, [r7, #12]
 8009cb4:	79fa      	ldrb	r2, [r7, #7]
 8009cb6:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8009cb8:	68f8      	ldr	r0, [r7, #12]
 8009cba:	f001 fe15 	bl	800b8e8 <USBD_LL_Init>
 8009cbe:	4603      	mov	r3, r0
 8009cc0:	75fb      	strb	r3, [r7, #23]

  return ret;
 8009cc2:	7dfb      	ldrb	r3, [r7, #23]
}
 8009cc4:	4618      	mov	r0, r3
 8009cc6:	3718      	adds	r7, #24
 8009cc8:	46bd      	mov	sp, r7
 8009cca:	bd80      	pop	{r7, pc}

08009ccc <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8009ccc:	b580      	push	{r7, lr}
 8009cce:	b084      	sub	sp, #16
 8009cd0:	af00      	add	r7, sp, #0
 8009cd2:	6078      	str	r0, [r7, #4]
 8009cd4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009cd6:	2300      	movs	r3, #0
 8009cd8:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8009cda:	683b      	ldr	r3, [r7, #0]
 8009cdc:	2b00      	cmp	r3, #0
 8009cde:	d101      	bne.n	8009ce4 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8009ce0:	2303      	movs	r3, #3
 8009ce2:	e025      	b.n	8009d30 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	683a      	ldr	r2, [r7, #0]
 8009ce8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	32ae      	adds	r2, #174	; 0xae
 8009cf6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009cfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009cfc:	2b00      	cmp	r3, #0
 8009cfe:	d00f      	beq.n	8009d20 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	32ae      	adds	r2, #174	; 0xae
 8009d0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009d0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d10:	f107 020e 	add.w	r2, r7, #14
 8009d14:	4610      	mov	r0, r2
 8009d16:	4798      	blx	r3
 8009d18:	4602      	mov	r2, r0
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8009d26:	1c5a      	adds	r2, r3, #1
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8009d2e:	2300      	movs	r3, #0
}
 8009d30:	4618      	mov	r0, r3
 8009d32:	3710      	adds	r7, #16
 8009d34:	46bd      	mov	sp, r7
 8009d36:	bd80      	pop	{r7, pc}

08009d38 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8009d38:	b580      	push	{r7, lr}
 8009d3a:	b082      	sub	sp, #8
 8009d3c:	af00      	add	r7, sp, #0
 8009d3e:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8009d40:	6878      	ldr	r0, [r7, #4]
 8009d42:	f001 fe23 	bl	800b98c <USBD_LL_Start>
 8009d46:	4603      	mov	r3, r0
}
 8009d48:	4618      	mov	r0, r3
 8009d4a:	3708      	adds	r7, #8
 8009d4c:	46bd      	mov	sp, r7
 8009d4e:	bd80      	pop	{r7, pc}

08009d50 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8009d50:	b480      	push	{r7}
 8009d52:	b083      	sub	sp, #12
 8009d54:	af00      	add	r7, sp, #0
 8009d56:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009d58:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8009d5a:	4618      	mov	r0, r3
 8009d5c:	370c      	adds	r7, #12
 8009d5e:	46bd      	mov	sp, r7
 8009d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d64:	4770      	bx	lr

08009d66 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009d66:	b580      	push	{r7, lr}
 8009d68:	b084      	sub	sp, #16
 8009d6a:	af00      	add	r7, sp, #0
 8009d6c:	6078      	str	r0, [r7, #4]
 8009d6e:	460b      	mov	r3, r1
 8009d70:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8009d72:	2300      	movs	r3, #0
 8009d74:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009d7c:	2b00      	cmp	r3, #0
 8009d7e:	d009      	beq.n	8009d94 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009d86:	681b      	ldr	r3, [r3, #0]
 8009d88:	78fa      	ldrb	r2, [r7, #3]
 8009d8a:	4611      	mov	r1, r2
 8009d8c:	6878      	ldr	r0, [r7, #4]
 8009d8e:	4798      	blx	r3
 8009d90:	4603      	mov	r3, r0
 8009d92:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8009d94:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d96:	4618      	mov	r0, r3
 8009d98:	3710      	adds	r7, #16
 8009d9a:	46bd      	mov	sp, r7
 8009d9c:	bd80      	pop	{r7, pc}

08009d9e <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009d9e:	b580      	push	{r7, lr}
 8009da0:	b084      	sub	sp, #16
 8009da2:	af00      	add	r7, sp, #0
 8009da4:	6078      	str	r0, [r7, #4]
 8009da6:	460b      	mov	r3, r1
 8009da8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8009daa:	2300      	movs	r3, #0
 8009dac:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009db4:	685b      	ldr	r3, [r3, #4]
 8009db6:	78fa      	ldrb	r2, [r7, #3]
 8009db8:	4611      	mov	r1, r2
 8009dba:	6878      	ldr	r0, [r7, #4]
 8009dbc:	4798      	blx	r3
 8009dbe:	4603      	mov	r3, r0
 8009dc0:	2b00      	cmp	r3, #0
 8009dc2:	d001      	beq.n	8009dc8 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8009dc4:	2303      	movs	r3, #3
 8009dc6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8009dc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8009dca:	4618      	mov	r0, r3
 8009dcc:	3710      	adds	r7, #16
 8009dce:	46bd      	mov	sp, r7
 8009dd0:	bd80      	pop	{r7, pc}

08009dd2 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8009dd2:	b580      	push	{r7, lr}
 8009dd4:	b084      	sub	sp, #16
 8009dd6:	af00      	add	r7, sp, #0
 8009dd8:	6078      	str	r0, [r7, #4]
 8009dda:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009de2:	6839      	ldr	r1, [r7, #0]
 8009de4:	4618      	mov	r0, r3
 8009de6:	f001 f908 	bl	800affa <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	2201      	movs	r2, #1
 8009dee:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8009df8:	461a      	mov	r2, r3
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8009e06:	f003 031f 	and.w	r3, r3, #31
 8009e0a:	2b02      	cmp	r3, #2
 8009e0c:	d01a      	beq.n	8009e44 <USBD_LL_SetupStage+0x72>
 8009e0e:	2b02      	cmp	r3, #2
 8009e10:	d822      	bhi.n	8009e58 <USBD_LL_SetupStage+0x86>
 8009e12:	2b00      	cmp	r3, #0
 8009e14:	d002      	beq.n	8009e1c <USBD_LL_SetupStage+0x4a>
 8009e16:	2b01      	cmp	r3, #1
 8009e18:	d00a      	beq.n	8009e30 <USBD_LL_SetupStage+0x5e>
 8009e1a:	e01d      	b.n	8009e58 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009e22:	4619      	mov	r1, r3
 8009e24:	6878      	ldr	r0, [r7, #4]
 8009e26:	f000 fb5f 	bl	800a4e8 <USBD_StdDevReq>
 8009e2a:	4603      	mov	r3, r0
 8009e2c:	73fb      	strb	r3, [r7, #15]
      break;
 8009e2e:	e020      	b.n	8009e72 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009e36:	4619      	mov	r1, r3
 8009e38:	6878      	ldr	r0, [r7, #4]
 8009e3a:	f000 fbc7 	bl	800a5cc <USBD_StdItfReq>
 8009e3e:	4603      	mov	r3, r0
 8009e40:	73fb      	strb	r3, [r7, #15]
      break;
 8009e42:	e016      	b.n	8009e72 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009e4a:	4619      	mov	r1, r3
 8009e4c:	6878      	ldr	r0, [r7, #4]
 8009e4e:	f000 fc29 	bl	800a6a4 <USBD_StdEPReq>
 8009e52:	4603      	mov	r3, r0
 8009e54:	73fb      	strb	r3, [r7, #15]
      break;
 8009e56:	e00c      	b.n	8009e72 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8009e5e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8009e62:	b2db      	uxtb	r3, r3
 8009e64:	4619      	mov	r1, r3
 8009e66:	6878      	ldr	r0, [r7, #4]
 8009e68:	f001 fdf0 	bl	800ba4c <USBD_LL_StallEP>
 8009e6c:	4603      	mov	r3, r0
 8009e6e:	73fb      	strb	r3, [r7, #15]
      break;
 8009e70:	bf00      	nop
  }

  return ret;
 8009e72:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e74:	4618      	mov	r0, r3
 8009e76:	3710      	adds	r7, #16
 8009e78:	46bd      	mov	sp, r7
 8009e7a:	bd80      	pop	{r7, pc}

08009e7c <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8009e7c:	b580      	push	{r7, lr}
 8009e7e:	b086      	sub	sp, #24
 8009e80:	af00      	add	r7, sp, #0
 8009e82:	60f8      	str	r0, [r7, #12]
 8009e84:	460b      	mov	r3, r1
 8009e86:	607a      	str	r2, [r7, #4]
 8009e88:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8009e8a:	2300      	movs	r3, #0
 8009e8c:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8009e8e:	7afb      	ldrb	r3, [r7, #11]
 8009e90:	2b00      	cmp	r3, #0
 8009e92:	d16e      	bne.n	8009f72 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8009e94:	68fb      	ldr	r3, [r7, #12]
 8009e96:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8009e9a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8009e9c:	68fb      	ldr	r3, [r7, #12]
 8009e9e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009ea2:	2b03      	cmp	r3, #3
 8009ea4:	f040 8098 	bne.w	8009fd8 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8009ea8:	693b      	ldr	r3, [r7, #16]
 8009eaa:	689a      	ldr	r2, [r3, #8]
 8009eac:	693b      	ldr	r3, [r7, #16]
 8009eae:	68db      	ldr	r3, [r3, #12]
 8009eb0:	429a      	cmp	r2, r3
 8009eb2:	d913      	bls.n	8009edc <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8009eb4:	693b      	ldr	r3, [r7, #16]
 8009eb6:	689a      	ldr	r2, [r3, #8]
 8009eb8:	693b      	ldr	r3, [r7, #16]
 8009eba:	68db      	ldr	r3, [r3, #12]
 8009ebc:	1ad2      	subs	r2, r2, r3
 8009ebe:	693b      	ldr	r3, [r7, #16]
 8009ec0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8009ec2:	693b      	ldr	r3, [r7, #16]
 8009ec4:	68da      	ldr	r2, [r3, #12]
 8009ec6:	693b      	ldr	r3, [r7, #16]
 8009ec8:	689b      	ldr	r3, [r3, #8]
 8009eca:	4293      	cmp	r3, r2
 8009ecc:	bf28      	it	cs
 8009ece:	4613      	movcs	r3, r2
 8009ed0:	461a      	mov	r2, r3
 8009ed2:	6879      	ldr	r1, [r7, #4]
 8009ed4:	68f8      	ldr	r0, [r7, #12]
 8009ed6:	f001 f984 	bl	800b1e2 <USBD_CtlContinueRx>
 8009eda:	e07d      	b.n	8009fd8 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8009edc:	68fb      	ldr	r3, [r7, #12]
 8009ede:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8009ee2:	f003 031f 	and.w	r3, r3, #31
 8009ee6:	2b02      	cmp	r3, #2
 8009ee8:	d014      	beq.n	8009f14 <USBD_LL_DataOutStage+0x98>
 8009eea:	2b02      	cmp	r3, #2
 8009eec:	d81d      	bhi.n	8009f2a <USBD_LL_DataOutStage+0xae>
 8009eee:	2b00      	cmp	r3, #0
 8009ef0:	d002      	beq.n	8009ef8 <USBD_LL_DataOutStage+0x7c>
 8009ef2:	2b01      	cmp	r3, #1
 8009ef4:	d003      	beq.n	8009efe <USBD_LL_DataOutStage+0x82>
 8009ef6:	e018      	b.n	8009f2a <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8009ef8:	2300      	movs	r3, #0
 8009efa:	75bb      	strb	r3, [r7, #22]
            break;
 8009efc:	e018      	b.n	8009f30 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8009efe:	68fb      	ldr	r3, [r7, #12]
 8009f00:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8009f04:	b2db      	uxtb	r3, r3
 8009f06:	4619      	mov	r1, r3
 8009f08:	68f8      	ldr	r0, [r7, #12]
 8009f0a:	f000 fa5e 	bl	800a3ca <USBD_CoreFindIF>
 8009f0e:	4603      	mov	r3, r0
 8009f10:	75bb      	strb	r3, [r7, #22]
            break;
 8009f12:	e00d      	b.n	8009f30 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8009f14:	68fb      	ldr	r3, [r7, #12]
 8009f16:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8009f1a:	b2db      	uxtb	r3, r3
 8009f1c:	4619      	mov	r1, r3
 8009f1e:	68f8      	ldr	r0, [r7, #12]
 8009f20:	f000 fa60 	bl	800a3e4 <USBD_CoreFindEP>
 8009f24:	4603      	mov	r3, r0
 8009f26:	75bb      	strb	r3, [r7, #22]
            break;
 8009f28:	e002      	b.n	8009f30 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8009f2a:	2300      	movs	r3, #0
 8009f2c:	75bb      	strb	r3, [r7, #22]
            break;
 8009f2e:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8009f30:	7dbb      	ldrb	r3, [r7, #22]
 8009f32:	2b00      	cmp	r3, #0
 8009f34:	d119      	bne.n	8009f6a <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009f36:	68fb      	ldr	r3, [r7, #12]
 8009f38:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009f3c:	b2db      	uxtb	r3, r3
 8009f3e:	2b03      	cmp	r3, #3
 8009f40:	d113      	bne.n	8009f6a <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8009f42:	7dba      	ldrb	r2, [r7, #22]
 8009f44:	68fb      	ldr	r3, [r7, #12]
 8009f46:	32ae      	adds	r2, #174	; 0xae
 8009f48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009f4c:	691b      	ldr	r3, [r3, #16]
 8009f4e:	2b00      	cmp	r3, #0
 8009f50:	d00b      	beq.n	8009f6a <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8009f52:	7dba      	ldrb	r2, [r7, #22]
 8009f54:	68fb      	ldr	r3, [r7, #12]
 8009f56:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8009f5a:	7dba      	ldrb	r2, [r7, #22]
 8009f5c:	68fb      	ldr	r3, [r7, #12]
 8009f5e:	32ae      	adds	r2, #174	; 0xae
 8009f60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009f64:	691b      	ldr	r3, [r3, #16]
 8009f66:	68f8      	ldr	r0, [r7, #12]
 8009f68:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8009f6a:	68f8      	ldr	r0, [r7, #12]
 8009f6c:	f001 f94a 	bl	800b204 <USBD_CtlSendStatus>
 8009f70:	e032      	b.n	8009fd8 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8009f72:	7afb      	ldrb	r3, [r7, #11]
 8009f74:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009f78:	b2db      	uxtb	r3, r3
 8009f7a:	4619      	mov	r1, r3
 8009f7c:	68f8      	ldr	r0, [r7, #12]
 8009f7e:	f000 fa31 	bl	800a3e4 <USBD_CoreFindEP>
 8009f82:	4603      	mov	r3, r0
 8009f84:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009f86:	7dbb      	ldrb	r3, [r7, #22]
 8009f88:	2bff      	cmp	r3, #255	; 0xff
 8009f8a:	d025      	beq.n	8009fd8 <USBD_LL_DataOutStage+0x15c>
 8009f8c:	7dbb      	ldrb	r3, [r7, #22]
 8009f8e:	2b00      	cmp	r3, #0
 8009f90:	d122      	bne.n	8009fd8 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009f92:	68fb      	ldr	r3, [r7, #12]
 8009f94:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009f98:	b2db      	uxtb	r3, r3
 8009f9a:	2b03      	cmp	r3, #3
 8009f9c:	d117      	bne.n	8009fce <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8009f9e:	7dba      	ldrb	r2, [r7, #22]
 8009fa0:	68fb      	ldr	r3, [r7, #12]
 8009fa2:	32ae      	adds	r2, #174	; 0xae
 8009fa4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009fa8:	699b      	ldr	r3, [r3, #24]
 8009faa:	2b00      	cmp	r3, #0
 8009fac:	d00f      	beq.n	8009fce <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8009fae:	7dba      	ldrb	r2, [r7, #22]
 8009fb0:	68fb      	ldr	r3, [r7, #12]
 8009fb2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8009fb6:	7dba      	ldrb	r2, [r7, #22]
 8009fb8:	68fb      	ldr	r3, [r7, #12]
 8009fba:	32ae      	adds	r2, #174	; 0xae
 8009fbc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009fc0:	699b      	ldr	r3, [r3, #24]
 8009fc2:	7afa      	ldrb	r2, [r7, #11]
 8009fc4:	4611      	mov	r1, r2
 8009fc6:	68f8      	ldr	r0, [r7, #12]
 8009fc8:	4798      	blx	r3
 8009fca:	4603      	mov	r3, r0
 8009fcc:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8009fce:	7dfb      	ldrb	r3, [r7, #23]
 8009fd0:	2b00      	cmp	r3, #0
 8009fd2:	d001      	beq.n	8009fd8 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8009fd4:	7dfb      	ldrb	r3, [r7, #23]
 8009fd6:	e000      	b.n	8009fda <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8009fd8:	2300      	movs	r3, #0
}
 8009fda:	4618      	mov	r0, r3
 8009fdc:	3718      	adds	r7, #24
 8009fde:	46bd      	mov	sp, r7
 8009fe0:	bd80      	pop	{r7, pc}

08009fe2 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8009fe2:	b580      	push	{r7, lr}
 8009fe4:	b086      	sub	sp, #24
 8009fe6:	af00      	add	r7, sp, #0
 8009fe8:	60f8      	str	r0, [r7, #12]
 8009fea:	460b      	mov	r3, r1
 8009fec:	607a      	str	r2, [r7, #4]
 8009fee:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8009ff0:	7afb      	ldrb	r3, [r7, #11]
 8009ff2:	2b00      	cmp	r3, #0
 8009ff4:	d16f      	bne.n	800a0d6 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8009ff6:	68fb      	ldr	r3, [r7, #12]
 8009ff8:	3314      	adds	r3, #20
 8009ffa:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8009ffc:	68fb      	ldr	r3, [r7, #12]
 8009ffe:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a002:	2b02      	cmp	r3, #2
 800a004:	d15a      	bne.n	800a0bc <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800a006:	693b      	ldr	r3, [r7, #16]
 800a008:	689a      	ldr	r2, [r3, #8]
 800a00a:	693b      	ldr	r3, [r7, #16]
 800a00c:	68db      	ldr	r3, [r3, #12]
 800a00e:	429a      	cmp	r2, r3
 800a010:	d914      	bls.n	800a03c <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800a012:	693b      	ldr	r3, [r7, #16]
 800a014:	689a      	ldr	r2, [r3, #8]
 800a016:	693b      	ldr	r3, [r7, #16]
 800a018:	68db      	ldr	r3, [r3, #12]
 800a01a:	1ad2      	subs	r2, r2, r3
 800a01c:	693b      	ldr	r3, [r7, #16]
 800a01e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800a020:	693b      	ldr	r3, [r7, #16]
 800a022:	689b      	ldr	r3, [r3, #8]
 800a024:	461a      	mov	r2, r3
 800a026:	6879      	ldr	r1, [r7, #4]
 800a028:	68f8      	ldr	r0, [r7, #12]
 800a02a:	f001 f8ac 	bl	800b186 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a02e:	2300      	movs	r3, #0
 800a030:	2200      	movs	r2, #0
 800a032:	2100      	movs	r1, #0
 800a034:	68f8      	ldr	r0, [r7, #12]
 800a036:	f001 fdb3 	bl	800bba0 <USBD_LL_PrepareReceive>
 800a03a:	e03f      	b.n	800a0bc <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800a03c:	693b      	ldr	r3, [r7, #16]
 800a03e:	68da      	ldr	r2, [r3, #12]
 800a040:	693b      	ldr	r3, [r7, #16]
 800a042:	689b      	ldr	r3, [r3, #8]
 800a044:	429a      	cmp	r2, r3
 800a046:	d11c      	bne.n	800a082 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800a048:	693b      	ldr	r3, [r7, #16]
 800a04a:	685a      	ldr	r2, [r3, #4]
 800a04c:	693b      	ldr	r3, [r7, #16]
 800a04e:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800a050:	429a      	cmp	r2, r3
 800a052:	d316      	bcc.n	800a082 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800a054:	693b      	ldr	r3, [r7, #16]
 800a056:	685a      	ldr	r2, [r3, #4]
 800a058:	68fb      	ldr	r3, [r7, #12]
 800a05a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800a05e:	429a      	cmp	r2, r3
 800a060:	d20f      	bcs.n	800a082 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800a062:	2200      	movs	r2, #0
 800a064:	2100      	movs	r1, #0
 800a066:	68f8      	ldr	r0, [r7, #12]
 800a068:	f001 f88d 	bl	800b186 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800a06c:	68fb      	ldr	r3, [r7, #12]
 800a06e:	2200      	movs	r2, #0
 800a070:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a074:	2300      	movs	r3, #0
 800a076:	2200      	movs	r2, #0
 800a078:	2100      	movs	r1, #0
 800a07a:	68f8      	ldr	r0, [r7, #12]
 800a07c:	f001 fd90 	bl	800bba0 <USBD_LL_PrepareReceive>
 800a080:	e01c      	b.n	800a0bc <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a082:	68fb      	ldr	r3, [r7, #12]
 800a084:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a088:	b2db      	uxtb	r3, r3
 800a08a:	2b03      	cmp	r3, #3
 800a08c:	d10f      	bne.n	800a0ae <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800a08e:	68fb      	ldr	r3, [r7, #12]
 800a090:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a094:	68db      	ldr	r3, [r3, #12]
 800a096:	2b00      	cmp	r3, #0
 800a098:	d009      	beq.n	800a0ae <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800a09a:	68fb      	ldr	r3, [r7, #12]
 800a09c:	2200      	movs	r2, #0
 800a09e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800a0a2:	68fb      	ldr	r3, [r7, #12]
 800a0a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a0a8:	68db      	ldr	r3, [r3, #12]
 800a0aa:	68f8      	ldr	r0, [r7, #12]
 800a0ac:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800a0ae:	2180      	movs	r1, #128	; 0x80
 800a0b0:	68f8      	ldr	r0, [r7, #12]
 800a0b2:	f001 fccb 	bl	800ba4c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800a0b6:	68f8      	ldr	r0, [r7, #12]
 800a0b8:	f001 f8b7 	bl	800b22a <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 800a0bc:	68fb      	ldr	r3, [r7, #12]
 800a0be:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800a0c2:	2b00      	cmp	r3, #0
 800a0c4:	d03a      	beq.n	800a13c <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800a0c6:	68f8      	ldr	r0, [r7, #12]
 800a0c8:	f7ff fe42 	bl	8009d50 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800a0cc:	68fb      	ldr	r3, [r7, #12]
 800a0ce:	2200      	movs	r2, #0
 800a0d0:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800a0d4:	e032      	b.n	800a13c <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800a0d6:	7afb      	ldrb	r3, [r7, #11]
 800a0d8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800a0dc:	b2db      	uxtb	r3, r3
 800a0de:	4619      	mov	r1, r3
 800a0e0:	68f8      	ldr	r0, [r7, #12]
 800a0e2:	f000 f97f 	bl	800a3e4 <USBD_CoreFindEP>
 800a0e6:	4603      	mov	r3, r0
 800a0e8:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a0ea:	7dfb      	ldrb	r3, [r7, #23]
 800a0ec:	2bff      	cmp	r3, #255	; 0xff
 800a0ee:	d025      	beq.n	800a13c <USBD_LL_DataInStage+0x15a>
 800a0f0:	7dfb      	ldrb	r3, [r7, #23]
 800a0f2:	2b00      	cmp	r3, #0
 800a0f4:	d122      	bne.n	800a13c <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a0f6:	68fb      	ldr	r3, [r7, #12]
 800a0f8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a0fc:	b2db      	uxtb	r3, r3
 800a0fe:	2b03      	cmp	r3, #3
 800a100:	d11c      	bne.n	800a13c <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800a102:	7dfa      	ldrb	r2, [r7, #23]
 800a104:	68fb      	ldr	r3, [r7, #12]
 800a106:	32ae      	adds	r2, #174	; 0xae
 800a108:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a10c:	695b      	ldr	r3, [r3, #20]
 800a10e:	2b00      	cmp	r3, #0
 800a110:	d014      	beq.n	800a13c <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800a112:	7dfa      	ldrb	r2, [r7, #23]
 800a114:	68fb      	ldr	r3, [r7, #12]
 800a116:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800a11a:	7dfa      	ldrb	r2, [r7, #23]
 800a11c:	68fb      	ldr	r3, [r7, #12]
 800a11e:	32ae      	adds	r2, #174	; 0xae
 800a120:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a124:	695b      	ldr	r3, [r3, #20]
 800a126:	7afa      	ldrb	r2, [r7, #11]
 800a128:	4611      	mov	r1, r2
 800a12a:	68f8      	ldr	r0, [r7, #12]
 800a12c:	4798      	blx	r3
 800a12e:	4603      	mov	r3, r0
 800a130:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800a132:	7dbb      	ldrb	r3, [r7, #22]
 800a134:	2b00      	cmp	r3, #0
 800a136:	d001      	beq.n	800a13c <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800a138:	7dbb      	ldrb	r3, [r7, #22]
 800a13a:	e000      	b.n	800a13e <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800a13c:	2300      	movs	r3, #0
}
 800a13e:	4618      	mov	r0, r3
 800a140:	3718      	adds	r7, #24
 800a142:	46bd      	mov	sp, r7
 800a144:	bd80      	pop	{r7, pc}

0800a146 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800a146:	b580      	push	{r7, lr}
 800a148:	b084      	sub	sp, #16
 800a14a:	af00      	add	r7, sp, #0
 800a14c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800a14e:	2300      	movs	r3, #0
 800a150:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	2201      	movs	r2, #1
 800a156:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	2200      	movs	r2, #0
 800a15e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	2200      	movs	r2, #0
 800a166:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	2200      	movs	r2, #0
 800a16c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	2200      	movs	r2, #0
 800a174:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a17e:	2b00      	cmp	r3, #0
 800a180:	d014      	beq.n	800a1ac <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a188:	685b      	ldr	r3, [r3, #4]
 800a18a:	2b00      	cmp	r3, #0
 800a18c:	d00e      	beq.n	800a1ac <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a194:	685b      	ldr	r3, [r3, #4]
 800a196:	687a      	ldr	r2, [r7, #4]
 800a198:	6852      	ldr	r2, [r2, #4]
 800a19a:	b2d2      	uxtb	r2, r2
 800a19c:	4611      	mov	r1, r2
 800a19e:	6878      	ldr	r0, [r7, #4]
 800a1a0:	4798      	blx	r3
 800a1a2:	4603      	mov	r3, r0
 800a1a4:	2b00      	cmp	r3, #0
 800a1a6:	d001      	beq.n	800a1ac <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800a1a8:	2303      	movs	r3, #3
 800a1aa:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a1ac:	2340      	movs	r3, #64	; 0x40
 800a1ae:	2200      	movs	r2, #0
 800a1b0:	2100      	movs	r1, #0
 800a1b2:	6878      	ldr	r0, [r7, #4]
 800a1b4:	f001 fc05 	bl	800b9c2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	2201      	movs	r2, #1
 800a1bc:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	2240      	movs	r2, #64	; 0x40
 800a1c4:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a1c8:	2340      	movs	r3, #64	; 0x40
 800a1ca:	2200      	movs	r2, #0
 800a1cc:	2180      	movs	r1, #128	; 0x80
 800a1ce:	6878      	ldr	r0, [r7, #4]
 800a1d0:	f001 fbf7 	bl	800b9c2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	2201      	movs	r2, #1
 800a1d8:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	2240      	movs	r2, #64	; 0x40
 800a1de:	621a      	str	r2, [r3, #32]

  return ret;
 800a1e0:	7bfb      	ldrb	r3, [r7, #15]
}
 800a1e2:	4618      	mov	r0, r3
 800a1e4:	3710      	adds	r7, #16
 800a1e6:	46bd      	mov	sp, r7
 800a1e8:	bd80      	pop	{r7, pc}

0800a1ea <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800a1ea:	b480      	push	{r7}
 800a1ec:	b083      	sub	sp, #12
 800a1ee:	af00      	add	r7, sp, #0
 800a1f0:	6078      	str	r0, [r7, #4]
 800a1f2:	460b      	mov	r3, r1
 800a1f4:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	78fa      	ldrb	r2, [r7, #3]
 800a1fa:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800a1fc:	2300      	movs	r3, #0
}
 800a1fe:	4618      	mov	r0, r3
 800a200:	370c      	adds	r7, #12
 800a202:	46bd      	mov	sp, r7
 800a204:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a208:	4770      	bx	lr

0800a20a <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800a20a:	b480      	push	{r7}
 800a20c:	b083      	sub	sp, #12
 800a20e:	af00      	add	r7, sp, #0
 800a210:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a218:	b2da      	uxtb	r2, r3
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	2204      	movs	r2, #4
 800a224:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800a228:	2300      	movs	r3, #0
}
 800a22a:	4618      	mov	r0, r3
 800a22c:	370c      	adds	r7, #12
 800a22e:	46bd      	mov	sp, r7
 800a230:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a234:	4770      	bx	lr

0800a236 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800a236:	b480      	push	{r7}
 800a238:	b083      	sub	sp, #12
 800a23a:	af00      	add	r7, sp, #0
 800a23c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a244:	b2db      	uxtb	r3, r3
 800a246:	2b04      	cmp	r3, #4
 800a248:	d106      	bne.n	800a258 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800a250:	b2da      	uxtb	r2, r3
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800a258:	2300      	movs	r3, #0
}
 800a25a:	4618      	mov	r0, r3
 800a25c:	370c      	adds	r7, #12
 800a25e:	46bd      	mov	sp, r7
 800a260:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a264:	4770      	bx	lr

0800a266 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800a266:	b580      	push	{r7, lr}
 800a268:	b082      	sub	sp, #8
 800a26a:	af00      	add	r7, sp, #0
 800a26c:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a274:	b2db      	uxtb	r3, r3
 800a276:	2b03      	cmp	r3, #3
 800a278:	d110      	bne.n	800a29c <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a280:	2b00      	cmp	r3, #0
 800a282:	d00b      	beq.n	800a29c <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a28a:	69db      	ldr	r3, [r3, #28]
 800a28c:	2b00      	cmp	r3, #0
 800a28e:	d005      	beq.n	800a29c <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a296:	69db      	ldr	r3, [r3, #28]
 800a298:	6878      	ldr	r0, [r7, #4]
 800a29a:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800a29c:	2300      	movs	r3, #0
}
 800a29e:	4618      	mov	r0, r3
 800a2a0:	3708      	adds	r7, #8
 800a2a2:	46bd      	mov	sp, r7
 800a2a4:	bd80      	pop	{r7, pc}

0800a2a6 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800a2a6:	b580      	push	{r7, lr}
 800a2a8:	b082      	sub	sp, #8
 800a2aa:	af00      	add	r7, sp, #0
 800a2ac:	6078      	str	r0, [r7, #4]
 800a2ae:	460b      	mov	r3, r1
 800a2b0:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	32ae      	adds	r2, #174	; 0xae
 800a2bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a2c0:	2b00      	cmp	r3, #0
 800a2c2:	d101      	bne.n	800a2c8 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800a2c4:	2303      	movs	r3, #3
 800a2c6:	e01c      	b.n	800a302 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a2ce:	b2db      	uxtb	r3, r3
 800a2d0:	2b03      	cmp	r3, #3
 800a2d2:	d115      	bne.n	800a300 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	32ae      	adds	r2, #174	; 0xae
 800a2de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a2e2:	6a1b      	ldr	r3, [r3, #32]
 800a2e4:	2b00      	cmp	r3, #0
 800a2e6:	d00b      	beq.n	800a300 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	32ae      	adds	r2, #174	; 0xae
 800a2f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a2f6:	6a1b      	ldr	r3, [r3, #32]
 800a2f8:	78fa      	ldrb	r2, [r7, #3]
 800a2fa:	4611      	mov	r1, r2
 800a2fc:	6878      	ldr	r0, [r7, #4]
 800a2fe:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800a300:	2300      	movs	r3, #0
}
 800a302:	4618      	mov	r0, r3
 800a304:	3708      	adds	r7, #8
 800a306:	46bd      	mov	sp, r7
 800a308:	bd80      	pop	{r7, pc}

0800a30a <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800a30a:	b580      	push	{r7, lr}
 800a30c:	b082      	sub	sp, #8
 800a30e:	af00      	add	r7, sp, #0
 800a310:	6078      	str	r0, [r7, #4]
 800a312:	460b      	mov	r3, r1
 800a314:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	32ae      	adds	r2, #174	; 0xae
 800a320:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a324:	2b00      	cmp	r3, #0
 800a326:	d101      	bne.n	800a32c <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800a328:	2303      	movs	r3, #3
 800a32a:	e01c      	b.n	800a366 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a332:	b2db      	uxtb	r3, r3
 800a334:	2b03      	cmp	r3, #3
 800a336:	d115      	bne.n	800a364 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	32ae      	adds	r2, #174	; 0xae
 800a342:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a346:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a348:	2b00      	cmp	r3, #0
 800a34a:	d00b      	beq.n	800a364 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	32ae      	adds	r2, #174	; 0xae
 800a356:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a35a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a35c:	78fa      	ldrb	r2, [r7, #3]
 800a35e:	4611      	mov	r1, r2
 800a360:	6878      	ldr	r0, [r7, #4]
 800a362:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800a364:	2300      	movs	r3, #0
}
 800a366:	4618      	mov	r0, r3
 800a368:	3708      	adds	r7, #8
 800a36a:	46bd      	mov	sp, r7
 800a36c:	bd80      	pop	{r7, pc}

0800a36e <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800a36e:	b480      	push	{r7}
 800a370:	b083      	sub	sp, #12
 800a372:	af00      	add	r7, sp, #0
 800a374:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a376:	2300      	movs	r3, #0
}
 800a378:	4618      	mov	r0, r3
 800a37a:	370c      	adds	r7, #12
 800a37c:	46bd      	mov	sp, r7
 800a37e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a382:	4770      	bx	lr

0800a384 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800a384:	b580      	push	{r7, lr}
 800a386:	b084      	sub	sp, #16
 800a388:	af00      	add	r7, sp, #0
 800a38a:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800a38c:	2300      	movs	r3, #0
 800a38e:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	2201      	movs	r2, #1
 800a394:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a39e:	2b00      	cmp	r3, #0
 800a3a0:	d00e      	beq.n	800a3c0 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a3a8:	685b      	ldr	r3, [r3, #4]
 800a3aa:	687a      	ldr	r2, [r7, #4]
 800a3ac:	6852      	ldr	r2, [r2, #4]
 800a3ae:	b2d2      	uxtb	r2, r2
 800a3b0:	4611      	mov	r1, r2
 800a3b2:	6878      	ldr	r0, [r7, #4]
 800a3b4:	4798      	blx	r3
 800a3b6:	4603      	mov	r3, r0
 800a3b8:	2b00      	cmp	r3, #0
 800a3ba:	d001      	beq.n	800a3c0 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800a3bc:	2303      	movs	r3, #3
 800a3be:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800a3c0:	7bfb      	ldrb	r3, [r7, #15]
}
 800a3c2:	4618      	mov	r0, r3
 800a3c4:	3710      	adds	r7, #16
 800a3c6:	46bd      	mov	sp, r7
 800a3c8:	bd80      	pop	{r7, pc}

0800a3ca <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800a3ca:	b480      	push	{r7}
 800a3cc:	b083      	sub	sp, #12
 800a3ce:	af00      	add	r7, sp, #0
 800a3d0:	6078      	str	r0, [r7, #4]
 800a3d2:	460b      	mov	r3, r1
 800a3d4:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800a3d6:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800a3d8:	4618      	mov	r0, r3
 800a3da:	370c      	adds	r7, #12
 800a3dc:	46bd      	mov	sp, r7
 800a3de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3e2:	4770      	bx	lr

0800a3e4 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800a3e4:	b480      	push	{r7}
 800a3e6:	b083      	sub	sp, #12
 800a3e8:	af00      	add	r7, sp, #0
 800a3ea:	6078      	str	r0, [r7, #4]
 800a3ec:	460b      	mov	r3, r1
 800a3ee:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800a3f0:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800a3f2:	4618      	mov	r0, r3
 800a3f4:	370c      	adds	r7, #12
 800a3f6:	46bd      	mov	sp, r7
 800a3f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3fc:	4770      	bx	lr

0800a3fe <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800a3fe:	b580      	push	{r7, lr}
 800a400:	b086      	sub	sp, #24
 800a402:	af00      	add	r7, sp, #0
 800a404:	6078      	str	r0, [r7, #4]
 800a406:	460b      	mov	r3, r1
 800a408:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800a412:	2300      	movs	r3, #0
 800a414:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800a416:	68fb      	ldr	r3, [r7, #12]
 800a418:	885b      	ldrh	r3, [r3, #2]
 800a41a:	b29a      	uxth	r2, r3
 800a41c:	68fb      	ldr	r3, [r7, #12]
 800a41e:	781b      	ldrb	r3, [r3, #0]
 800a420:	b29b      	uxth	r3, r3
 800a422:	429a      	cmp	r2, r3
 800a424:	d920      	bls.n	800a468 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800a426:	68fb      	ldr	r3, [r7, #12]
 800a428:	781b      	ldrb	r3, [r3, #0]
 800a42a:	b29b      	uxth	r3, r3
 800a42c:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800a42e:	e013      	b.n	800a458 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800a430:	f107 030a 	add.w	r3, r7, #10
 800a434:	4619      	mov	r1, r3
 800a436:	6978      	ldr	r0, [r7, #20]
 800a438:	f000 f81b 	bl	800a472 <USBD_GetNextDesc>
 800a43c:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800a43e:	697b      	ldr	r3, [r7, #20]
 800a440:	785b      	ldrb	r3, [r3, #1]
 800a442:	2b05      	cmp	r3, #5
 800a444:	d108      	bne.n	800a458 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800a446:	697b      	ldr	r3, [r7, #20]
 800a448:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800a44a:	693b      	ldr	r3, [r7, #16]
 800a44c:	789b      	ldrb	r3, [r3, #2]
 800a44e:	78fa      	ldrb	r2, [r7, #3]
 800a450:	429a      	cmp	r2, r3
 800a452:	d008      	beq.n	800a466 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800a454:	2300      	movs	r3, #0
 800a456:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800a458:	68fb      	ldr	r3, [r7, #12]
 800a45a:	885b      	ldrh	r3, [r3, #2]
 800a45c:	b29a      	uxth	r2, r3
 800a45e:	897b      	ldrh	r3, [r7, #10]
 800a460:	429a      	cmp	r2, r3
 800a462:	d8e5      	bhi.n	800a430 <USBD_GetEpDesc+0x32>
 800a464:	e000      	b.n	800a468 <USBD_GetEpDesc+0x6a>
          break;
 800a466:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800a468:	693b      	ldr	r3, [r7, #16]
}
 800a46a:	4618      	mov	r0, r3
 800a46c:	3718      	adds	r7, #24
 800a46e:	46bd      	mov	sp, r7
 800a470:	bd80      	pop	{r7, pc}

0800a472 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800a472:	b480      	push	{r7}
 800a474:	b085      	sub	sp, #20
 800a476:	af00      	add	r7, sp, #0
 800a478:	6078      	str	r0, [r7, #4]
 800a47a:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800a480:	683b      	ldr	r3, [r7, #0]
 800a482:	881a      	ldrh	r2, [r3, #0]
 800a484:	68fb      	ldr	r3, [r7, #12]
 800a486:	781b      	ldrb	r3, [r3, #0]
 800a488:	b29b      	uxth	r3, r3
 800a48a:	4413      	add	r3, r2
 800a48c:	b29a      	uxth	r2, r3
 800a48e:	683b      	ldr	r3, [r7, #0]
 800a490:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800a492:	68fb      	ldr	r3, [r7, #12]
 800a494:	781b      	ldrb	r3, [r3, #0]
 800a496:	461a      	mov	r2, r3
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	4413      	add	r3, r2
 800a49c:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800a49e:	68fb      	ldr	r3, [r7, #12]
}
 800a4a0:	4618      	mov	r0, r3
 800a4a2:	3714      	adds	r7, #20
 800a4a4:	46bd      	mov	sp, r7
 800a4a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4aa:	4770      	bx	lr

0800a4ac <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800a4ac:	b480      	push	{r7}
 800a4ae:	b087      	sub	sp, #28
 800a4b0:	af00      	add	r7, sp, #0
 800a4b2:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800a4b8:	697b      	ldr	r3, [r7, #20]
 800a4ba:	781b      	ldrb	r3, [r3, #0]
 800a4bc:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800a4be:	697b      	ldr	r3, [r7, #20]
 800a4c0:	3301      	adds	r3, #1
 800a4c2:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800a4c4:	697b      	ldr	r3, [r7, #20]
 800a4c6:	781b      	ldrb	r3, [r3, #0]
 800a4c8:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800a4ca:	8a3b      	ldrh	r3, [r7, #16]
 800a4cc:	021b      	lsls	r3, r3, #8
 800a4ce:	b21a      	sxth	r2, r3
 800a4d0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800a4d4:	4313      	orrs	r3, r2
 800a4d6:	b21b      	sxth	r3, r3
 800a4d8:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800a4da:	89fb      	ldrh	r3, [r7, #14]
}
 800a4dc:	4618      	mov	r0, r3
 800a4de:	371c      	adds	r7, #28
 800a4e0:	46bd      	mov	sp, r7
 800a4e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4e6:	4770      	bx	lr

0800a4e8 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a4e8:	b580      	push	{r7, lr}
 800a4ea:	b084      	sub	sp, #16
 800a4ec:	af00      	add	r7, sp, #0
 800a4ee:	6078      	str	r0, [r7, #4]
 800a4f0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a4f2:	2300      	movs	r3, #0
 800a4f4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a4f6:	683b      	ldr	r3, [r7, #0]
 800a4f8:	781b      	ldrb	r3, [r3, #0]
 800a4fa:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a4fe:	2b40      	cmp	r3, #64	; 0x40
 800a500:	d005      	beq.n	800a50e <USBD_StdDevReq+0x26>
 800a502:	2b40      	cmp	r3, #64	; 0x40
 800a504:	d857      	bhi.n	800a5b6 <USBD_StdDevReq+0xce>
 800a506:	2b00      	cmp	r3, #0
 800a508:	d00f      	beq.n	800a52a <USBD_StdDevReq+0x42>
 800a50a:	2b20      	cmp	r3, #32
 800a50c:	d153      	bne.n	800a5b6 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	32ae      	adds	r2, #174	; 0xae
 800a518:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a51c:	689b      	ldr	r3, [r3, #8]
 800a51e:	6839      	ldr	r1, [r7, #0]
 800a520:	6878      	ldr	r0, [r7, #4]
 800a522:	4798      	blx	r3
 800a524:	4603      	mov	r3, r0
 800a526:	73fb      	strb	r3, [r7, #15]
      break;
 800a528:	e04a      	b.n	800a5c0 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a52a:	683b      	ldr	r3, [r7, #0]
 800a52c:	785b      	ldrb	r3, [r3, #1]
 800a52e:	2b09      	cmp	r3, #9
 800a530:	d83b      	bhi.n	800a5aa <USBD_StdDevReq+0xc2>
 800a532:	a201      	add	r2, pc, #4	; (adr r2, 800a538 <USBD_StdDevReq+0x50>)
 800a534:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a538:	0800a58d 	.word	0x0800a58d
 800a53c:	0800a5a1 	.word	0x0800a5a1
 800a540:	0800a5ab 	.word	0x0800a5ab
 800a544:	0800a597 	.word	0x0800a597
 800a548:	0800a5ab 	.word	0x0800a5ab
 800a54c:	0800a56b 	.word	0x0800a56b
 800a550:	0800a561 	.word	0x0800a561
 800a554:	0800a5ab 	.word	0x0800a5ab
 800a558:	0800a583 	.word	0x0800a583
 800a55c:	0800a575 	.word	0x0800a575
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800a560:	6839      	ldr	r1, [r7, #0]
 800a562:	6878      	ldr	r0, [r7, #4]
 800a564:	f000 fa3c 	bl	800a9e0 <USBD_GetDescriptor>
          break;
 800a568:	e024      	b.n	800a5b4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800a56a:	6839      	ldr	r1, [r7, #0]
 800a56c:	6878      	ldr	r0, [r7, #4]
 800a56e:	f000 fba1 	bl	800acb4 <USBD_SetAddress>
          break;
 800a572:	e01f      	b.n	800a5b4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800a574:	6839      	ldr	r1, [r7, #0]
 800a576:	6878      	ldr	r0, [r7, #4]
 800a578:	f000 fbe0 	bl	800ad3c <USBD_SetConfig>
 800a57c:	4603      	mov	r3, r0
 800a57e:	73fb      	strb	r3, [r7, #15]
          break;
 800a580:	e018      	b.n	800a5b4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800a582:	6839      	ldr	r1, [r7, #0]
 800a584:	6878      	ldr	r0, [r7, #4]
 800a586:	f000 fc83 	bl	800ae90 <USBD_GetConfig>
          break;
 800a58a:	e013      	b.n	800a5b4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800a58c:	6839      	ldr	r1, [r7, #0]
 800a58e:	6878      	ldr	r0, [r7, #4]
 800a590:	f000 fcb4 	bl	800aefc <USBD_GetStatus>
          break;
 800a594:	e00e      	b.n	800a5b4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800a596:	6839      	ldr	r1, [r7, #0]
 800a598:	6878      	ldr	r0, [r7, #4]
 800a59a:	f000 fce3 	bl	800af64 <USBD_SetFeature>
          break;
 800a59e:	e009      	b.n	800a5b4 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800a5a0:	6839      	ldr	r1, [r7, #0]
 800a5a2:	6878      	ldr	r0, [r7, #4]
 800a5a4:	f000 fd07 	bl	800afb6 <USBD_ClrFeature>
          break;
 800a5a8:	e004      	b.n	800a5b4 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800a5aa:	6839      	ldr	r1, [r7, #0]
 800a5ac:	6878      	ldr	r0, [r7, #4]
 800a5ae:	f000 fd5e 	bl	800b06e <USBD_CtlError>
          break;
 800a5b2:	bf00      	nop
      }
      break;
 800a5b4:	e004      	b.n	800a5c0 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800a5b6:	6839      	ldr	r1, [r7, #0]
 800a5b8:	6878      	ldr	r0, [r7, #4]
 800a5ba:	f000 fd58 	bl	800b06e <USBD_CtlError>
      break;
 800a5be:	bf00      	nop
  }

  return ret;
 800a5c0:	7bfb      	ldrb	r3, [r7, #15]
}
 800a5c2:	4618      	mov	r0, r3
 800a5c4:	3710      	adds	r7, #16
 800a5c6:	46bd      	mov	sp, r7
 800a5c8:	bd80      	pop	{r7, pc}
 800a5ca:	bf00      	nop

0800a5cc <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a5cc:	b580      	push	{r7, lr}
 800a5ce:	b084      	sub	sp, #16
 800a5d0:	af00      	add	r7, sp, #0
 800a5d2:	6078      	str	r0, [r7, #4]
 800a5d4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a5d6:	2300      	movs	r3, #0
 800a5d8:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a5da:	683b      	ldr	r3, [r7, #0]
 800a5dc:	781b      	ldrb	r3, [r3, #0]
 800a5de:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a5e2:	2b40      	cmp	r3, #64	; 0x40
 800a5e4:	d005      	beq.n	800a5f2 <USBD_StdItfReq+0x26>
 800a5e6:	2b40      	cmp	r3, #64	; 0x40
 800a5e8:	d852      	bhi.n	800a690 <USBD_StdItfReq+0xc4>
 800a5ea:	2b00      	cmp	r3, #0
 800a5ec:	d001      	beq.n	800a5f2 <USBD_StdItfReq+0x26>
 800a5ee:	2b20      	cmp	r3, #32
 800a5f0:	d14e      	bne.n	800a690 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a5f8:	b2db      	uxtb	r3, r3
 800a5fa:	3b01      	subs	r3, #1
 800a5fc:	2b02      	cmp	r3, #2
 800a5fe:	d840      	bhi.n	800a682 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800a600:	683b      	ldr	r3, [r7, #0]
 800a602:	889b      	ldrh	r3, [r3, #4]
 800a604:	b2db      	uxtb	r3, r3
 800a606:	2b01      	cmp	r3, #1
 800a608:	d836      	bhi.n	800a678 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800a60a:	683b      	ldr	r3, [r7, #0]
 800a60c:	889b      	ldrh	r3, [r3, #4]
 800a60e:	b2db      	uxtb	r3, r3
 800a610:	4619      	mov	r1, r3
 800a612:	6878      	ldr	r0, [r7, #4]
 800a614:	f7ff fed9 	bl	800a3ca <USBD_CoreFindIF>
 800a618:	4603      	mov	r3, r0
 800a61a:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a61c:	7bbb      	ldrb	r3, [r7, #14]
 800a61e:	2bff      	cmp	r3, #255	; 0xff
 800a620:	d01d      	beq.n	800a65e <USBD_StdItfReq+0x92>
 800a622:	7bbb      	ldrb	r3, [r7, #14]
 800a624:	2b00      	cmp	r3, #0
 800a626:	d11a      	bne.n	800a65e <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800a628:	7bba      	ldrb	r2, [r7, #14]
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	32ae      	adds	r2, #174	; 0xae
 800a62e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a632:	689b      	ldr	r3, [r3, #8]
 800a634:	2b00      	cmp	r3, #0
 800a636:	d00f      	beq.n	800a658 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800a638:	7bba      	ldrb	r2, [r7, #14]
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800a640:	7bba      	ldrb	r2, [r7, #14]
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	32ae      	adds	r2, #174	; 0xae
 800a646:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a64a:	689b      	ldr	r3, [r3, #8]
 800a64c:	6839      	ldr	r1, [r7, #0]
 800a64e:	6878      	ldr	r0, [r7, #4]
 800a650:	4798      	blx	r3
 800a652:	4603      	mov	r3, r0
 800a654:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800a656:	e004      	b.n	800a662 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800a658:	2303      	movs	r3, #3
 800a65a:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800a65c:	e001      	b.n	800a662 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800a65e:	2303      	movs	r3, #3
 800a660:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800a662:	683b      	ldr	r3, [r7, #0]
 800a664:	88db      	ldrh	r3, [r3, #6]
 800a666:	2b00      	cmp	r3, #0
 800a668:	d110      	bne.n	800a68c <USBD_StdItfReq+0xc0>
 800a66a:	7bfb      	ldrb	r3, [r7, #15]
 800a66c:	2b00      	cmp	r3, #0
 800a66e:	d10d      	bne.n	800a68c <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800a670:	6878      	ldr	r0, [r7, #4]
 800a672:	f000 fdc7 	bl	800b204 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800a676:	e009      	b.n	800a68c <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800a678:	6839      	ldr	r1, [r7, #0]
 800a67a:	6878      	ldr	r0, [r7, #4]
 800a67c:	f000 fcf7 	bl	800b06e <USBD_CtlError>
          break;
 800a680:	e004      	b.n	800a68c <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800a682:	6839      	ldr	r1, [r7, #0]
 800a684:	6878      	ldr	r0, [r7, #4]
 800a686:	f000 fcf2 	bl	800b06e <USBD_CtlError>
          break;
 800a68a:	e000      	b.n	800a68e <USBD_StdItfReq+0xc2>
          break;
 800a68c:	bf00      	nop
      }
      break;
 800a68e:	e004      	b.n	800a69a <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800a690:	6839      	ldr	r1, [r7, #0]
 800a692:	6878      	ldr	r0, [r7, #4]
 800a694:	f000 fceb 	bl	800b06e <USBD_CtlError>
      break;
 800a698:	bf00      	nop
  }

  return ret;
 800a69a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a69c:	4618      	mov	r0, r3
 800a69e:	3710      	adds	r7, #16
 800a6a0:	46bd      	mov	sp, r7
 800a6a2:	bd80      	pop	{r7, pc}

0800a6a4 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a6a4:	b580      	push	{r7, lr}
 800a6a6:	b084      	sub	sp, #16
 800a6a8:	af00      	add	r7, sp, #0
 800a6aa:	6078      	str	r0, [r7, #4]
 800a6ac:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800a6ae:	2300      	movs	r3, #0
 800a6b0:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800a6b2:	683b      	ldr	r3, [r7, #0]
 800a6b4:	889b      	ldrh	r3, [r3, #4]
 800a6b6:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a6b8:	683b      	ldr	r3, [r7, #0]
 800a6ba:	781b      	ldrb	r3, [r3, #0]
 800a6bc:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a6c0:	2b40      	cmp	r3, #64	; 0x40
 800a6c2:	d007      	beq.n	800a6d4 <USBD_StdEPReq+0x30>
 800a6c4:	2b40      	cmp	r3, #64	; 0x40
 800a6c6:	f200 817f 	bhi.w	800a9c8 <USBD_StdEPReq+0x324>
 800a6ca:	2b00      	cmp	r3, #0
 800a6cc:	d02a      	beq.n	800a724 <USBD_StdEPReq+0x80>
 800a6ce:	2b20      	cmp	r3, #32
 800a6d0:	f040 817a 	bne.w	800a9c8 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800a6d4:	7bbb      	ldrb	r3, [r7, #14]
 800a6d6:	4619      	mov	r1, r3
 800a6d8:	6878      	ldr	r0, [r7, #4]
 800a6da:	f7ff fe83 	bl	800a3e4 <USBD_CoreFindEP>
 800a6de:	4603      	mov	r3, r0
 800a6e0:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a6e2:	7b7b      	ldrb	r3, [r7, #13]
 800a6e4:	2bff      	cmp	r3, #255	; 0xff
 800a6e6:	f000 8174 	beq.w	800a9d2 <USBD_StdEPReq+0x32e>
 800a6ea:	7b7b      	ldrb	r3, [r7, #13]
 800a6ec:	2b00      	cmp	r3, #0
 800a6ee:	f040 8170 	bne.w	800a9d2 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800a6f2:	7b7a      	ldrb	r2, [r7, #13]
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800a6fa:	7b7a      	ldrb	r2, [r7, #13]
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	32ae      	adds	r2, #174	; 0xae
 800a700:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a704:	689b      	ldr	r3, [r3, #8]
 800a706:	2b00      	cmp	r3, #0
 800a708:	f000 8163 	beq.w	800a9d2 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800a70c:	7b7a      	ldrb	r2, [r7, #13]
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	32ae      	adds	r2, #174	; 0xae
 800a712:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a716:	689b      	ldr	r3, [r3, #8]
 800a718:	6839      	ldr	r1, [r7, #0]
 800a71a:	6878      	ldr	r0, [r7, #4]
 800a71c:	4798      	blx	r3
 800a71e:	4603      	mov	r3, r0
 800a720:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800a722:	e156      	b.n	800a9d2 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a724:	683b      	ldr	r3, [r7, #0]
 800a726:	785b      	ldrb	r3, [r3, #1]
 800a728:	2b03      	cmp	r3, #3
 800a72a:	d008      	beq.n	800a73e <USBD_StdEPReq+0x9a>
 800a72c:	2b03      	cmp	r3, #3
 800a72e:	f300 8145 	bgt.w	800a9bc <USBD_StdEPReq+0x318>
 800a732:	2b00      	cmp	r3, #0
 800a734:	f000 809b 	beq.w	800a86e <USBD_StdEPReq+0x1ca>
 800a738:	2b01      	cmp	r3, #1
 800a73a:	d03c      	beq.n	800a7b6 <USBD_StdEPReq+0x112>
 800a73c:	e13e      	b.n	800a9bc <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a744:	b2db      	uxtb	r3, r3
 800a746:	2b02      	cmp	r3, #2
 800a748:	d002      	beq.n	800a750 <USBD_StdEPReq+0xac>
 800a74a:	2b03      	cmp	r3, #3
 800a74c:	d016      	beq.n	800a77c <USBD_StdEPReq+0xd8>
 800a74e:	e02c      	b.n	800a7aa <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a750:	7bbb      	ldrb	r3, [r7, #14]
 800a752:	2b00      	cmp	r3, #0
 800a754:	d00d      	beq.n	800a772 <USBD_StdEPReq+0xce>
 800a756:	7bbb      	ldrb	r3, [r7, #14]
 800a758:	2b80      	cmp	r3, #128	; 0x80
 800a75a:	d00a      	beq.n	800a772 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800a75c:	7bbb      	ldrb	r3, [r7, #14]
 800a75e:	4619      	mov	r1, r3
 800a760:	6878      	ldr	r0, [r7, #4]
 800a762:	f001 f973 	bl	800ba4c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800a766:	2180      	movs	r1, #128	; 0x80
 800a768:	6878      	ldr	r0, [r7, #4]
 800a76a:	f001 f96f 	bl	800ba4c <USBD_LL_StallEP>
 800a76e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a770:	e020      	b.n	800a7b4 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800a772:	6839      	ldr	r1, [r7, #0]
 800a774:	6878      	ldr	r0, [r7, #4]
 800a776:	f000 fc7a 	bl	800b06e <USBD_CtlError>
              break;
 800a77a:	e01b      	b.n	800a7b4 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a77c:	683b      	ldr	r3, [r7, #0]
 800a77e:	885b      	ldrh	r3, [r3, #2]
 800a780:	2b00      	cmp	r3, #0
 800a782:	d10e      	bne.n	800a7a2 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800a784:	7bbb      	ldrb	r3, [r7, #14]
 800a786:	2b00      	cmp	r3, #0
 800a788:	d00b      	beq.n	800a7a2 <USBD_StdEPReq+0xfe>
 800a78a:	7bbb      	ldrb	r3, [r7, #14]
 800a78c:	2b80      	cmp	r3, #128	; 0x80
 800a78e:	d008      	beq.n	800a7a2 <USBD_StdEPReq+0xfe>
 800a790:	683b      	ldr	r3, [r7, #0]
 800a792:	88db      	ldrh	r3, [r3, #6]
 800a794:	2b00      	cmp	r3, #0
 800a796:	d104      	bne.n	800a7a2 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800a798:	7bbb      	ldrb	r3, [r7, #14]
 800a79a:	4619      	mov	r1, r3
 800a79c:	6878      	ldr	r0, [r7, #4]
 800a79e:	f001 f955 	bl	800ba4c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800a7a2:	6878      	ldr	r0, [r7, #4]
 800a7a4:	f000 fd2e 	bl	800b204 <USBD_CtlSendStatus>

              break;
 800a7a8:	e004      	b.n	800a7b4 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800a7aa:	6839      	ldr	r1, [r7, #0]
 800a7ac:	6878      	ldr	r0, [r7, #4]
 800a7ae:	f000 fc5e 	bl	800b06e <USBD_CtlError>
              break;
 800a7b2:	bf00      	nop
          }
          break;
 800a7b4:	e107      	b.n	800a9c6 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a7bc:	b2db      	uxtb	r3, r3
 800a7be:	2b02      	cmp	r3, #2
 800a7c0:	d002      	beq.n	800a7c8 <USBD_StdEPReq+0x124>
 800a7c2:	2b03      	cmp	r3, #3
 800a7c4:	d016      	beq.n	800a7f4 <USBD_StdEPReq+0x150>
 800a7c6:	e04b      	b.n	800a860 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a7c8:	7bbb      	ldrb	r3, [r7, #14]
 800a7ca:	2b00      	cmp	r3, #0
 800a7cc:	d00d      	beq.n	800a7ea <USBD_StdEPReq+0x146>
 800a7ce:	7bbb      	ldrb	r3, [r7, #14]
 800a7d0:	2b80      	cmp	r3, #128	; 0x80
 800a7d2:	d00a      	beq.n	800a7ea <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800a7d4:	7bbb      	ldrb	r3, [r7, #14]
 800a7d6:	4619      	mov	r1, r3
 800a7d8:	6878      	ldr	r0, [r7, #4]
 800a7da:	f001 f937 	bl	800ba4c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800a7de:	2180      	movs	r1, #128	; 0x80
 800a7e0:	6878      	ldr	r0, [r7, #4]
 800a7e2:	f001 f933 	bl	800ba4c <USBD_LL_StallEP>
 800a7e6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a7e8:	e040      	b.n	800a86c <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800a7ea:	6839      	ldr	r1, [r7, #0]
 800a7ec:	6878      	ldr	r0, [r7, #4]
 800a7ee:	f000 fc3e 	bl	800b06e <USBD_CtlError>
              break;
 800a7f2:	e03b      	b.n	800a86c <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a7f4:	683b      	ldr	r3, [r7, #0]
 800a7f6:	885b      	ldrh	r3, [r3, #2]
 800a7f8:	2b00      	cmp	r3, #0
 800a7fa:	d136      	bne.n	800a86a <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800a7fc:	7bbb      	ldrb	r3, [r7, #14]
 800a7fe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a802:	2b00      	cmp	r3, #0
 800a804:	d004      	beq.n	800a810 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800a806:	7bbb      	ldrb	r3, [r7, #14]
 800a808:	4619      	mov	r1, r3
 800a80a:	6878      	ldr	r0, [r7, #4]
 800a80c:	f001 f93d 	bl	800ba8a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800a810:	6878      	ldr	r0, [r7, #4]
 800a812:	f000 fcf7 	bl	800b204 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800a816:	7bbb      	ldrb	r3, [r7, #14]
 800a818:	4619      	mov	r1, r3
 800a81a:	6878      	ldr	r0, [r7, #4]
 800a81c:	f7ff fde2 	bl	800a3e4 <USBD_CoreFindEP>
 800a820:	4603      	mov	r3, r0
 800a822:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a824:	7b7b      	ldrb	r3, [r7, #13]
 800a826:	2bff      	cmp	r3, #255	; 0xff
 800a828:	d01f      	beq.n	800a86a <USBD_StdEPReq+0x1c6>
 800a82a:	7b7b      	ldrb	r3, [r7, #13]
 800a82c:	2b00      	cmp	r3, #0
 800a82e:	d11c      	bne.n	800a86a <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800a830:	7b7a      	ldrb	r2, [r7, #13]
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800a838:	7b7a      	ldrb	r2, [r7, #13]
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	32ae      	adds	r2, #174	; 0xae
 800a83e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a842:	689b      	ldr	r3, [r3, #8]
 800a844:	2b00      	cmp	r3, #0
 800a846:	d010      	beq.n	800a86a <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800a848:	7b7a      	ldrb	r2, [r7, #13]
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	32ae      	adds	r2, #174	; 0xae
 800a84e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a852:	689b      	ldr	r3, [r3, #8]
 800a854:	6839      	ldr	r1, [r7, #0]
 800a856:	6878      	ldr	r0, [r7, #4]
 800a858:	4798      	blx	r3
 800a85a:	4603      	mov	r3, r0
 800a85c:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800a85e:	e004      	b.n	800a86a <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800a860:	6839      	ldr	r1, [r7, #0]
 800a862:	6878      	ldr	r0, [r7, #4]
 800a864:	f000 fc03 	bl	800b06e <USBD_CtlError>
              break;
 800a868:	e000      	b.n	800a86c <USBD_StdEPReq+0x1c8>
              break;
 800a86a:	bf00      	nop
          }
          break;
 800a86c:	e0ab      	b.n	800a9c6 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a874:	b2db      	uxtb	r3, r3
 800a876:	2b02      	cmp	r3, #2
 800a878:	d002      	beq.n	800a880 <USBD_StdEPReq+0x1dc>
 800a87a:	2b03      	cmp	r3, #3
 800a87c:	d032      	beq.n	800a8e4 <USBD_StdEPReq+0x240>
 800a87e:	e097      	b.n	800a9b0 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a880:	7bbb      	ldrb	r3, [r7, #14]
 800a882:	2b00      	cmp	r3, #0
 800a884:	d007      	beq.n	800a896 <USBD_StdEPReq+0x1f2>
 800a886:	7bbb      	ldrb	r3, [r7, #14]
 800a888:	2b80      	cmp	r3, #128	; 0x80
 800a88a:	d004      	beq.n	800a896 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800a88c:	6839      	ldr	r1, [r7, #0]
 800a88e:	6878      	ldr	r0, [r7, #4]
 800a890:	f000 fbed 	bl	800b06e <USBD_CtlError>
                break;
 800a894:	e091      	b.n	800a9ba <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a896:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a89a:	2b00      	cmp	r3, #0
 800a89c:	da0b      	bge.n	800a8b6 <USBD_StdEPReq+0x212>
 800a89e:	7bbb      	ldrb	r3, [r7, #14]
 800a8a0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a8a4:	4613      	mov	r3, r2
 800a8a6:	009b      	lsls	r3, r3, #2
 800a8a8:	4413      	add	r3, r2
 800a8aa:	009b      	lsls	r3, r3, #2
 800a8ac:	3310      	adds	r3, #16
 800a8ae:	687a      	ldr	r2, [r7, #4]
 800a8b0:	4413      	add	r3, r2
 800a8b2:	3304      	adds	r3, #4
 800a8b4:	e00b      	b.n	800a8ce <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a8b6:	7bbb      	ldrb	r3, [r7, #14]
 800a8b8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a8bc:	4613      	mov	r3, r2
 800a8be:	009b      	lsls	r3, r3, #2
 800a8c0:	4413      	add	r3, r2
 800a8c2:	009b      	lsls	r3, r3, #2
 800a8c4:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800a8c8:	687a      	ldr	r2, [r7, #4]
 800a8ca:	4413      	add	r3, r2
 800a8cc:	3304      	adds	r3, #4
 800a8ce:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800a8d0:	68bb      	ldr	r3, [r7, #8]
 800a8d2:	2200      	movs	r2, #0
 800a8d4:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800a8d6:	68bb      	ldr	r3, [r7, #8]
 800a8d8:	2202      	movs	r2, #2
 800a8da:	4619      	mov	r1, r3
 800a8dc:	6878      	ldr	r0, [r7, #4]
 800a8de:	f000 fc37 	bl	800b150 <USBD_CtlSendData>
              break;
 800a8e2:	e06a      	b.n	800a9ba <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800a8e4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a8e8:	2b00      	cmp	r3, #0
 800a8ea:	da11      	bge.n	800a910 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800a8ec:	7bbb      	ldrb	r3, [r7, #14]
 800a8ee:	f003 020f 	and.w	r2, r3, #15
 800a8f2:	6879      	ldr	r1, [r7, #4]
 800a8f4:	4613      	mov	r3, r2
 800a8f6:	009b      	lsls	r3, r3, #2
 800a8f8:	4413      	add	r3, r2
 800a8fa:	009b      	lsls	r3, r3, #2
 800a8fc:	440b      	add	r3, r1
 800a8fe:	3324      	adds	r3, #36	; 0x24
 800a900:	881b      	ldrh	r3, [r3, #0]
 800a902:	2b00      	cmp	r3, #0
 800a904:	d117      	bne.n	800a936 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800a906:	6839      	ldr	r1, [r7, #0]
 800a908:	6878      	ldr	r0, [r7, #4]
 800a90a:	f000 fbb0 	bl	800b06e <USBD_CtlError>
                  break;
 800a90e:	e054      	b.n	800a9ba <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800a910:	7bbb      	ldrb	r3, [r7, #14]
 800a912:	f003 020f 	and.w	r2, r3, #15
 800a916:	6879      	ldr	r1, [r7, #4]
 800a918:	4613      	mov	r3, r2
 800a91a:	009b      	lsls	r3, r3, #2
 800a91c:	4413      	add	r3, r2
 800a91e:	009b      	lsls	r3, r3, #2
 800a920:	440b      	add	r3, r1
 800a922:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800a926:	881b      	ldrh	r3, [r3, #0]
 800a928:	2b00      	cmp	r3, #0
 800a92a:	d104      	bne.n	800a936 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800a92c:	6839      	ldr	r1, [r7, #0]
 800a92e:	6878      	ldr	r0, [r7, #4]
 800a930:	f000 fb9d 	bl	800b06e <USBD_CtlError>
                  break;
 800a934:	e041      	b.n	800a9ba <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a936:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a93a:	2b00      	cmp	r3, #0
 800a93c:	da0b      	bge.n	800a956 <USBD_StdEPReq+0x2b2>
 800a93e:	7bbb      	ldrb	r3, [r7, #14]
 800a940:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a944:	4613      	mov	r3, r2
 800a946:	009b      	lsls	r3, r3, #2
 800a948:	4413      	add	r3, r2
 800a94a:	009b      	lsls	r3, r3, #2
 800a94c:	3310      	adds	r3, #16
 800a94e:	687a      	ldr	r2, [r7, #4]
 800a950:	4413      	add	r3, r2
 800a952:	3304      	adds	r3, #4
 800a954:	e00b      	b.n	800a96e <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a956:	7bbb      	ldrb	r3, [r7, #14]
 800a958:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a95c:	4613      	mov	r3, r2
 800a95e:	009b      	lsls	r3, r3, #2
 800a960:	4413      	add	r3, r2
 800a962:	009b      	lsls	r3, r3, #2
 800a964:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800a968:	687a      	ldr	r2, [r7, #4]
 800a96a:	4413      	add	r3, r2
 800a96c:	3304      	adds	r3, #4
 800a96e:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800a970:	7bbb      	ldrb	r3, [r7, #14]
 800a972:	2b00      	cmp	r3, #0
 800a974:	d002      	beq.n	800a97c <USBD_StdEPReq+0x2d8>
 800a976:	7bbb      	ldrb	r3, [r7, #14]
 800a978:	2b80      	cmp	r3, #128	; 0x80
 800a97a:	d103      	bne.n	800a984 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800a97c:	68bb      	ldr	r3, [r7, #8]
 800a97e:	2200      	movs	r2, #0
 800a980:	601a      	str	r2, [r3, #0]
 800a982:	e00e      	b.n	800a9a2 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800a984:	7bbb      	ldrb	r3, [r7, #14]
 800a986:	4619      	mov	r1, r3
 800a988:	6878      	ldr	r0, [r7, #4]
 800a98a:	f001 f89d 	bl	800bac8 <USBD_LL_IsStallEP>
 800a98e:	4603      	mov	r3, r0
 800a990:	2b00      	cmp	r3, #0
 800a992:	d003      	beq.n	800a99c <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800a994:	68bb      	ldr	r3, [r7, #8]
 800a996:	2201      	movs	r2, #1
 800a998:	601a      	str	r2, [r3, #0]
 800a99a:	e002      	b.n	800a9a2 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800a99c:	68bb      	ldr	r3, [r7, #8]
 800a99e:	2200      	movs	r2, #0
 800a9a0:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800a9a2:	68bb      	ldr	r3, [r7, #8]
 800a9a4:	2202      	movs	r2, #2
 800a9a6:	4619      	mov	r1, r3
 800a9a8:	6878      	ldr	r0, [r7, #4]
 800a9aa:	f000 fbd1 	bl	800b150 <USBD_CtlSendData>
              break;
 800a9ae:	e004      	b.n	800a9ba <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800a9b0:	6839      	ldr	r1, [r7, #0]
 800a9b2:	6878      	ldr	r0, [r7, #4]
 800a9b4:	f000 fb5b 	bl	800b06e <USBD_CtlError>
              break;
 800a9b8:	bf00      	nop
          }
          break;
 800a9ba:	e004      	b.n	800a9c6 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800a9bc:	6839      	ldr	r1, [r7, #0]
 800a9be:	6878      	ldr	r0, [r7, #4]
 800a9c0:	f000 fb55 	bl	800b06e <USBD_CtlError>
          break;
 800a9c4:	bf00      	nop
      }
      break;
 800a9c6:	e005      	b.n	800a9d4 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800a9c8:	6839      	ldr	r1, [r7, #0]
 800a9ca:	6878      	ldr	r0, [r7, #4]
 800a9cc:	f000 fb4f 	bl	800b06e <USBD_CtlError>
      break;
 800a9d0:	e000      	b.n	800a9d4 <USBD_StdEPReq+0x330>
      break;
 800a9d2:	bf00      	nop
  }

  return ret;
 800a9d4:	7bfb      	ldrb	r3, [r7, #15]
}
 800a9d6:	4618      	mov	r0, r3
 800a9d8:	3710      	adds	r7, #16
 800a9da:	46bd      	mov	sp, r7
 800a9dc:	bd80      	pop	{r7, pc}
	...

0800a9e0 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a9e0:	b580      	push	{r7, lr}
 800a9e2:	b084      	sub	sp, #16
 800a9e4:	af00      	add	r7, sp, #0
 800a9e6:	6078      	str	r0, [r7, #4]
 800a9e8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a9ea:	2300      	movs	r3, #0
 800a9ec:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800a9ee:	2300      	movs	r3, #0
 800a9f0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800a9f2:	2300      	movs	r3, #0
 800a9f4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800a9f6:	683b      	ldr	r3, [r7, #0]
 800a9f8:	885b      	ldrh	r3, [r3, #2]
 800a9fa:	0a1b      	lsrs	r3, r3, #8
 800a9fc:	b29b      	uxth	r3, r3
 800a9fe:	3b01      	subs	r3, #1
 800aa00:	2b06      	cmp	r3, #6
 800aa02:	f200 8128 	bhi.w	800ac56 <USBD_GetDescriptor+0x276>
 800aa06:	a201      	add	r2, pc, #4	; (adr r2, 800aa0c <USBD_GetDescriptor+0x2c>)
 800aa08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa0c:	0800aa29 	.word	0x0800aa29
 800aa10:	0800aa41 	.word	0x0800aa41
 800aa14:	0800aa81 	.word	0x0800aa81
 800aa18:	0800ac57 	.word	0x0800ac57
 800aa1c:	0800ac57 	.word	0x0800ac57
 800aa20:	0800abf7 	.word	0x0800abf7
 800aa24:	0800ac23 	.word	0x0800ac23
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800aa2e:	681b      	ldr	r3, [r3, #0]
 800aa30:	687a      	ldr	r2, [r7, #4]
 800aa32:	7c12      	ldrb	r2, [r2, #16]
 800aa34:	f107 0108 	add.w	r1, r7, #8
 800aa38:	4610      	mov	r0, r2
 800aa3a:	4798      	blx	r3
 800aa3c:	60f8      	str	r0, [r7, #12]
      break;
 800aa3e:	e112      	b.n	800ac66 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	7c1b      	ldrb	r3, [r3, #16]
 800aa44:	2b00      	cmp	r3, #0
 800aa46:	d10d      	bne.n	800aa64 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aa4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aa50:	f107 0208 	add.w	r2, r7, #8
 800aa54:	4610      	mov	r0, r2
 800aa56:	4798      	blx	r3
 800aa58:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800aa5a:	68fb      	ldr	r3, [r7, #12]
 800aa5c:	3301      	adds	r3, #1
 800aa5e:	2202      	movs	r2, #2
 800aa60:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800aa62:	e100      	b.n	800ac66 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aa6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa6c:	f107 0208 	add.w	r2, r7, #8
 800aa70:	4610      	mov	r0, r2
 800aa72:	4798      	blx	r3
 800aa74:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800aa76:	68fb      	ldr	r3, [r7, #12]
 800aa78:	3301      	adds	r3, #1
 800aa7a:	2202      	movs	r2, #2
 800aa7c:	701a      	strb	r2, [r3, #0]
      break;
 800aa7e:	e0f2      	b.n	800ac66 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800aa80:	683b      	ldr	r3, [r7, #0]
 800aa82:	885b      	ldrh	r3, [r3, #2]
 800aa84:	b2db      	uxtb	r3, r3
 800aa86:	2b05      	cmp	r3, #5
 800aa88:	f200 80ac 	bhi.w	800abe4 <USBD_GetDescriptor+0x204>
 800aa8c:	a201      	add	r2, pc, #4	; (adr r2, 800aa94 <USBD_GetDescriptor+0xb4>)
 800aa8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa92:	bf00      	nop
 800aa94:	0800aaad 	.word	0x0800aaad
 800aa98:	0800aae1 	.word	0x0800aae1
 800aa9c:	0800ab15 	.word	0x0800ab15
 800aaa0:	0800ab49 	.word	0x0800ab49
 800aaa4:	0800ab7d 	.word	0x0800ab7d
 800aaa8:	0800abb1 	.word	0x0800abb1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800aab2:	685b      	ldr	r3, [r3, #4]
 800aab4:	2b00      	cmp	r3, #0
 800aab6:	d00b      	beq.n	800aad0 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800aabe:	685b      	ldr	r3, [r3, #4]
 800aac0:	687a      	ldr	r2, [r7, #4]
 800aac2:	7c12      	ldrb	r2, [r2, #16]
 800aac4:	f107 0108 	add.w	r1, r7, #8
 800aac8:	4610      	mov	r0, r2
 800aaca:	4798      	blx	r3
 800aacc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800aace:	e091      	b.n	800abf4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800aad0:	6839      	ldr	r1, [r7, #0]
 800aad2:	6878      	ldr	r0, [r7, #4]
 800aad4:	f000 facb 	bl	800b06e <USBD_CtlError>
            err++;
 800aad8:	7afb      	ldrb	r3, [r7, #11]
 800aada:	3301      	adds	r3, #1
 800aadc:	72fb      	strb	r3, [r7, #11]
          break;
 800aade:	e089      	b.n	800abf4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800aae6:	689b      	ldr	r3, [r3, #8]
 800aae8:	2b00      	cmp	r3, #0
 800aaea:	d00b      	beq.n	800ab04 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800aaf2:	689b      	ldr	r3, [r3, #8]
 800aaf4:	687a      	ldr	r2, [r7, #4]
 800aaf6:	7c12      	ldrb	r2, [r2, #16]
 800aaf8:	f107 0108 	add.w	r1, r7, #8
 800aafc:	4610      	mov	r0, r2
 800aafe:	4798      	blx	r3
 800ab00:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ab02:	e077      	b.n	800abf4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ab04:	6839      	ldr	r1, [r7, #0]
 800ab06:	6878      	ldr	r0, [r7, #4]
 800ab08:	f000 fab1 	bl	800b06e <USBD_CtlError>
            err++;
 800ab0c:	7afb      	ldrb	r3, [r7, #11]
 800ab0e:	3301      	adds	r3, #1
 800ab10:	72fb      	strb	r3, [r7, #11]
          break;
 800ab12:	e06f      	b.n	800abf4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ab1a:	68db      	ldr	r3, [r3, #12]
 800ab1c:	2b00      	cmp	r3, #0
 800ab1e:	d00b      	beq.n	800ab38 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ab26:	68db      	ldr	r3, [r3, #12]
 800ab28:	687a      	ldr	r2, [r7, #4]
 800ab2a:	7c12      	ldrb	r2, [r2, #16]
 800ab2c:	f107 0108 	add.w	r1, r7, #8
 800ab30:	4610      	mov	r0, r2
 800ab32:	4798      	blx	r3
 800ab34:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ab36:	e05d      	b.n	800abf4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ab38:	6839      	ldr	r1, [r7, #0]
 800ab3a:	6878      	ldr	r0, [r7, #4]
 800ab3c:	f000 fa97 	bl	800b06e <USBD_CtlError>
            err++;
 800ab40:	7afb      	ldrb	r3, [r7, #11]
 800ab42:	3301      	adds	r3, #1
 800ab44:	72fb      	strb	r3, [r7, #11]
          break;
 800ab46:	e055      	b.n	800abf4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ab4e:	691b      	ldr	r3, [r3, #16]
 800ab50:	2b00      	cmp	r3, #0
 800ab52:	d00b      	beq.n	800ab6c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ab5a:	691b      	ldr	r3, [r3, #16]
 800ab5c:	687a      	ldr	r2, [r7, #4]
 800ab5e:	7c12      	ldrb	r2, [r2, #16]
 800ab60:	f107 0108 	add.w	r1, r7, #8
 800ab64:	4610      	mov	r0, r2
 800ab66:	4798      	blx	r3
 800ab68:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ab6a:	e043      	b.n	800abf4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ab6c:	6839      	ldr	r1, [r7, #0]
 800ab6e:	6878      	ldr	r0, [r7, #4]
 800ab70:	f000 fa7d 	bl	800b06e <USBD_CtlError>
            err++;
 800ab74:	7afb      	ldrb	r3, [r7, #11]
 800ab76:	3301      	adds	r3, #1
 800ab78:	72fb      	strb	r3, [r7, #11]
          break;
 800ab7a:	e03b      	b.n	800abf4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ab82:	695b      	ldr	r3, [r3, #20]
 800ab84:	2b00      	cmp	r3, #0
 800ab86:	d00b      	beq.n	800aba0 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ab8e:	695b      	ldr	r3, [r3, #20]
 800ab90:	687a      	ldr	r2, [r7, #4]
 800ab92:	7c12      	ldrb	r2, [r2, #16]
 800ab94:	f107 0108 	add.w	r1, r7, #8
 800ab98:	4610      	mov	r0, r2
 800ab9a:	4798      	blx	r3
 800ab9c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ab9e:	e029      	b.n	800abf4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800aba0:	6839      	ldr	r1, [r7, #0]
 800aba2:	6878      	ldr	r0, [r7, #4]
 800aba4:	f000 fa63 	bl	800b06e <USBD_CtlError>
            err++;
 800aba8:	7afb      	ldrb	r3, [r7, #11]
 800abaa:	3301      	adds	r3, #1
 800abac:	72fb      	strb	r3, [r7, #11]
          break;
 800abae:	e021      	b.n	800abf4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800abb6:	699b      	ldr	r3, [r3, #24]
 800abb8:	2b00      	cmp	r3, #0
 800abba:	d00b      	beq.n	800abd4 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800abc2:	699b      	ldr	r3, [r3, #24]
 800abc4:	687a      	ldr	r2, [r7, #4]
 800abc6:	7c12      	ldrb	r2, [r2, #16]
 800abc8:	f107 0108 	add.w	r1, r7, #8
 800abcc:	4610      	mov	r0, r2
 800abce:	4798      	blx	r3
 800abd0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800abd2:	e00f      	b.n	800abf4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800abd4:	6839      	ldr	r1, [r7, #0]
 800abd6:	6878      	ldr	r0, [r7, #4]
 800abd8:	f000 fa49 	bl	800b06e <USBD_CtlError>
            err++;
 800abdc:	7afb      	ldrb	r3, [r7, #11]
 800abde:	3301      	adds	r3, #1
 800abe0:	72fb      	strb	r3, [r7, #11]
          break;
 800abe2:	e007      	b.n	800abf4 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800abe4:	6839      	ldr	r1, [r7, #0]
 800abe6:	6878      	ldr	r0, [r7, #4]
 800abe8:	f000 fa41 	bl	800b06e <USBD_CtlError>
          err++;
 800abec:	7afb      	ldrb	r3, [r7, #11]
 800abee:	3301      	adds	r3, #1
 800abf0:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800abf2:	bf00      	nop
      }
      break;
 800abf4:	e037      	b.n	800ac66 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	7c1b      	ldrb	r3, [r3, #16]
 800abfa:	2b00      	cmp	r3, #0
 800abfc:	d109      	bne.n	800ac12 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ac04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ac06:	f107 0208 	add.w	r2, r7, #8
 800ac0a:	4610      	mov	r0, r2
 800ac0c:	4798      	blx	r3
 800ac0e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ac10:	e029      	b.n	800ac66 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800ac12:	6839      	ldr	r1, [r7, #0]
 800ac14:	6878      	ldr	r0, [r7, #4]
 800ac16:	f000 fa2a 	bl	800b06e <USBD_CtlError>
        err++;
 800ac1a:	7afb      	ldrb	r3, [r7, #11]
 800ac1c:	3301      	adds	r3, #1
 800ac1e:	72fb      	strb	r3, [r7, #11]
      break;
 800ac20:	e021      	b.n	800ac66 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	7c1b      	ldrb	r3, [r3, #16]
 800ac26:	2b00      	cmp	r3, #0
 800ac28:	d10d      	bne.n	800ac46 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ac30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ac32:	f107 0208 	add.w	r2, r7, #8
 800ac36:	4610      	mov	r0, r2
 800ac38:	4798      	blx	r3
 800ac3a:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800ac3c:	68fb      	ldr	r3, [r7, #12]
 800ac3e:	3301      	adds	r3, #1
 800ac40:	2207      	movs	r2, #7
 800ac42:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ac44:	e00f      	b.n	800ac66 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800ac46:	6839      	ldr	r1, [r7, #0]
 800ac48:	6878      	ldr	r0, [r7, #4]
 800ac4a:	f000 fa10 	bl	800b06e <USBD_CtlError>
        err++;
 800ac4e:	7afb      	ldrb	r3, [r7, #11]
 800ac50:	3301      	adds	r3, #1
 800ac52:	72fb      	strb	r3, [r7, #11]
      break;
 800ac54:	e007      	b.n	800ac66 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800ac56:	6839      	ldr	r1, [r7, #0]
 800ac58:	6878      	ldr	r0, [r7, #4]
 800ac5a:	f000 fa08 	bl	800b06e <USBD_CtlError>
      err++;
 800ac5e:	7afb      	ldrb	r3, [r7, #11]
 800ac60:	3301      	adds	r3, #1
 800ac62:	72fb      	strb	r3, [r7, #11]
      break;
 800ac64:	bf00      	nop
  }

  if (err != 0U)
 800ac66:	7afb      	ldrb	r3, [r7, #11]
 800ac68:	2b00      	cmp	r3, #0
 800ac6a:	d11e      	bne.n	800acaa <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800ac6c:	683b      	ldr	r3, [r7, #0]
 800ac6e:	88db      	ldrh	r3, [r3, #6]
 800ac70:	2b00      	cmp	r3, #0
 800ac72:	d016      	beq.n	800aca2 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800ac74:	893b      	ldrh	r3, [r7, #8]
 800ac76:	2b00      	cmp	r3, #0
 800ac78:	d00e      	beq.n	800ac98 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800ac7a:	683b      	ldr	r3, [r7, #0]
 800ac7c:	88da      	ldrh	r2, [r3, #6]
 800ac7e:	893b      	ldrh	r3, [r7, #8]
 800ac80:	4293      	cmp	r3, r2
 800ac82:	bf28      	it	cs
 800ac84:	4613      	movcs	r3, r2
 800ac86:	b29b      	uxth	r3, r3
 800ac88:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800ac8a:	893b      	ldrh	r3, [r7, #8]
 800ac8c:	461a      	mov	r2, r3
 800ac8e:	68f9      	ldr	r1, [r7, #12]
 800ac90:	6878      	ldr	r0, [r7, #4]
 800ac92:	f000 fa5d 	bl	800b150 <USBD_CtlSendData>
 800ac96:	e009      	b.n	800acac <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800ac98:	6839      	ldr	r1, [r7, #0]
 800ac9a:	6878      	ldr	r0, [r7, #4]
 800ac9c:	f000 f9e7 	bl	800b06e <USBD_CtlError>
 800aca0:	e004      	b.n	800acac <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800aca2:	6878      	ldr	r0, [r7, #4]
 800aca4:	f000 faae 	bl	800b204 <USBD_CtlSendStatus>
 800aca8:	e000      	b.n	800acac <USBD_GetDescriptor+0x2cc>
    return;
 800acaa:	bf00      	nop
  }
}
 800acac:	3710      	adds	r7, #16
 800acae:	46bd      	mov	sp, r7
 800acb0:	bd80      	pop	{r7, pc}
 800acb2:	bf00      	nop

0800acb4 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800acb4:	b580      	push	{r7, lr}
 800acb6:	b084      	sub	sp, #16
 800acb8:	af00      	add	r7, sp, #0
 800acba:	6078      	str	r0, [r7, #4]
 800acbc:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800acbe:	683b      	ldr	r3, [r7, #0]
 800acc0:	889b      	ldrh	r3, [r3, #4]
 800acc2:	2b00      	cmp	r3, #0
 800acc4:	d131      	bne.n	800ad2a <USBD_SetAddress+0x76>
 800acc6:	683b      	ldr	r3, [r7, #0]
 800acc8:	88db      	ldrh	r3, [r3, #6]
 800acca:	2b00      	cmp	r3, #0
 800accc:	d12d      	bne.n	800ad2a <USBD_SetAddress+0x76>
 800acce:	683b      	ldr	r3, [r7, #0]
 800acd0:	885b      	ldrh	r3, [r3, #2]
 800acd2:	2b7f      	cmp	r3, #127	; 0x7f
 800acd4:	d829      	bhi.n	800ad2a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800acd6:	683b      	ldr	r3, [r7, #0]
 800acd8:	885b      	ldrh	r3, [r3, #2]
 800acda:	b2db      	uxtb	r3, r3
 800acdc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ace0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ace8:	b2db      	uxtb	r3, r3
 800acea:	2b03      	cmp	r3, #3
 800acec:	d104      	bne.n	800acf8 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800acee:	6839      	ldr	r1, [r7, #0]
 800acf0:	6878      	ldr	r0, [r7, #4]
 800acf2:	f000 f9bc 	bl	800b06e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800acf6:	e01d      	b.n	800ad34 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	7bfa      	ldrb	r2, [r7, #15]
 800acfc:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800ad00:	7bfb      	ldrb	r3, [r7, #15]
 800ad02:	4619      	mov	r1, r3
 800ad04:	6878      	ldr	r0, [r7, #4]
 800ad06:	f000 ff0b 	bl	800bb20 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800ad0a:	6878      	ldr	r0, [r7, #4]
 800ad0c:	f000 fa7a 	bl	800b204 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800ad10:	7bfb      	ldrb	r3, [r7, #15]
 800ad12:	2b00      	cmp	r3, #0
 800ad14:	d004      	beq.n	800ad20 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	2202      	movs	r2, #2
 800ad1a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ad1e:	e009      	b.n	800ad34 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	2201      	movs	r2, #1
 800ad24:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ad28:	e004      	b.n	800ad34 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800ad2a:	6839      	ldr	r1, [r7, #0]
 800ad2c:	6878      	ldr	r0, [r7, #4]
 800ad2e:	f000 f99e 	bl	800b06e <USBD_CtlError>
  }
}
 800ad32:	bf00      	nop
 800ad34:	bf00      	nop
 800ad36:	3710      	adds	r7, #16
 800ad38:	46bd      	mov	sp, r7
 800ad3a:	bd80      	pop	{r7, pc}

0800ad3c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ad3c:	b580      	push	{r7, lr}
 800ad3e:	b084      	sub	sp, #16
 800ad40:	af00      	add	r7, sp, #0
 800ad42:	6078      	str	r0, [r7, #4]
 800ad44:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ad46:	2300      	movs	r3, #0
 800ad48:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800ad4a:	683b      	ldr	r3, [r7, #0]
 800ad4c:	885b      	ldrh	r3, [r3, #2]
 800ad4e:	b2da      	uxtb	r2, r3
 800ad50:	4b4e      	ldr	r3, [pc, #312]	; (800ae8c <USBD_SetConfig+0x150>)
 800ad52:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800ad54:	4b4d      	ldr	r3, [pc, #308]	; (800ae8c <USBD_SetConfig+0x150>)
 800ad56:	781b      	ldrb	r3, [r3, #0]
 800ad58:	2b01      	cmp	r3, #1
 800ad5a:	d905      	bls.n	800ad68 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800ad5c:	6839      	ldr	r1, [r7, #0]
 800ad5e:	6878      	ldr	r0, [r7, #4]
 800ad60:	f000 f985 	bl	800b06e <USBD_CtlError>
    return USBD_FAIL;
 800ad64:	2303      	movs	r3, #3
 800ad66:	e08c      	b.n	800ae82 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ad6e:	b2db      	uxtb	r3, r3
 800ad70:	2b02      	cmp	r3, #2
 800ad72:	d002      	beq.n	800ad7a <USBD_SetConfig+0x3e>
 800ad74:	2b03      	cmp	r3, #3
 800ad76:	d029      	beq.n	800adcc <USBD_SetConfig+0x90>
 800ad78:	e075      	b.n	800ae66 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800ad7a:	4b44      	ldr	r3, [pc, #272]	; (800ae8c <USBD_SetConfig+0x150>)
 800ad7c:	781b      	ldrb	r3, [r3, #0]
 800ad7e:	2b00      	cmp	r3, #0
 800ad80:	d020      	beq.n	800adc4 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800ad82:	4b42      	ldr	r3, [pc, #264]	; (800ae8c <USBD_SetConfig+0x150>)
 800ad84:	781b      	ldrb	r3, [r3, #0]
 800ad86:	461a      	mov	r2, r3
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800ad8c:	4b3f      	ldr	r3, [pc, #252]	; (800ae8c <USBD_SetConfig+0x150>)
 800ad8e:	781b      	ldrb	r3, [r3, #0]
 800ad90:	4619      	mov	r1, r3
 800ad92:	6878      	ldr	r0, [r7, #4]
 800ad94:	f7fe ffe7 	bl	8009d66 <USBD_SetClassConfig>
 800ad98:	4603      	mov	r3, r0
 800ad9a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800ad9c:	7bfb      	ldrb	r3, [r7, #15]
 800ad9e:	2b00      	cmp	r3, #0
 800ada0:	d008      	beq.n	800adb4 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800ada2:	6839      	ldr	r1, [r7, #0]
 800ada4:	6878      	ldr	r0, [r7, #4]
 800ada6:	f000 f962 	bl	800b06e <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	2202      	movs	r2, #2
 800adae:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800adb2:	e065      	b.n	800ae80 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800adb4:	6878      	ldr	r0, [r7, #4]
 800adb6:	f000 fa25 	bl	800b204 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	2203      	movs	r2, #3
 800adbe:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800adc2:	e05d      	b.n	800ae80 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800adc4:	6878      	ldr	r0, [r7, #4]
 800adc6:	f000 fa1d 	bl	800b204 <USBD_CtlSendStatus>
      break;
 800adca:	e059      	b.n	800ae80 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800adcc:	4b2f      	ldr	r3, [pc, #188]	; (800ae8c <USBD_SetConfig+0x150>)
 800adce:	781b      	ldrb	r3, [r3, #0]
 800add0:	2b00      	cmp	r3, #0
 800add2:	d112      	bne.n	800adfa <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	2202      	movs	r2, #2
 800add8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800addc:	4b2b      	ldr	r3, [pc, #172]	; (800ae8c <USBD_SetConfig+0x150>)
 800adde:	781b      	ldrb	r3, [r3, #0]
 800ade0:	461a      	mov	r2, r3
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800ade6:	4b29      	ldr	r3, [pc, #164]	; (800ae8c <USBD_SetConfig+0x150>)
 800ade8:	781b      	ldrb	r3, [r3, #0]
 800adea:	4619      	mov	r1, r3
 800adec:	6878      	ldr	r0, [r7, #4]
 800adee:	f7fe ffd6 	bl	8009d9e <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800adf2:	6878      	ldr	r0, [r7, #4]
 800adf4:	f000 fa06 	bl	800b204 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800adf8:	e042      	b.n	800ae80 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800adfa:	4b24      	ldr	r3, [pc, #144]	; (800ae8c <USBD_SetConfig+0x150>)
 800adfc:	781b      	ldrb	r3, [r3, #0]
 800adfe:	461a      	mov	r2, r3
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	685b      	ldr	r3, [r3, #4]
 800ae04:	429a      	cmp	r2, r3
 800ae06:	d02a      	beq.n	800ae5e <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	685b      	ldr	r3, [r3, #4]
 800ae0c:	b2db      	uxtb	r3, r3
 800ae0e:	4619      	mov	r1, r3
 800ae10:	6878      	ldr	r0, [r7, #4]
 800ae12:	f7fe ffc4 	bl	8009d9e <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800ae16:	4b1d      	ldr	r3, [pc, #116]	; (800ae8c <USBD_SetConfig+0x150>)
 800ae18:	781b      	ldrb	r3, [r3, #0]
 800ae1a:	461a      	mov	r2, r3
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800ae20:	4b1a      	ldr	r3, [pc, #104]	; (800ae8c <USBD_SetConfig+0x150>)
 800ae22:	781b      	ldrb	r3, [r3, #0]
 800ae24:	4619      	mov	r1, r3
 800ae26:	6878      	ldr	r0, [r7, #4]
 800ae28:	f7fe ff9d 	bl	8009d66 <USBD_SetClassConfig>
 800ae2c:	4603      	mov	r3, r0
 800ae2e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800ae30:	7bfb      	ldrb	r3, [r7, #15]
 800ae32:	2b00      	cmp	r3, #0
 800ae34:	d00f      	beq.n	800ae56 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800ae36:	6839      	ldr	r1, [r7, #0]
 800ae38:	6878      	ldr	r0, [r7, #4]
 800ae3a:	f000 f918 	bl	800b06e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	685b      	ldr	r3, [r3, #4]
 800ae42:	b2db      	uxtb	r3, r3
 800ae44:	4619      	mov	r1, r3
 800ae46:	6878      	ldr	r0, [r7, #4]
 800ae48:	f7fe ffa9 	bl	8009d9e <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	2202      	movs	r2, #2
 800ae50:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800ae54:	e014      	b.n	800ae80 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800ae56:	6878      	ldr	r0, [r7, #4]
 800ae58:	f000 f9d4 	bl	800b204 <USBD_CtlSendStatus>
      break;
 800ae5c:	e010      	b.n	800ae80 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800ae5e:	6878      	ldr	r0, [r7, #4]
 800ae60:	f000 f9d0 	bl	800b204 <USBD_CtlSendStatus>
      break;
 800ae64:	e00c      	b.n	800ae80 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800ae66:	6839      	ldr	r1, [r7, #0]
 800ae68:	6878      	ldr	r0, [r7, #4]
 800ae6a:	f000 f900 	bl	800b06e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800ae6e:	4b07      	ldr	r3, [pc, #28]	; (800ae8c <USBD_SetConfig+0x150>)
 800ae70:	781b      	ldrb	r3, [r3, #0]
 800ae72:	4619      	mov	r1, r3
 800ae74:	6878      	ldr	r0, [r7, #4]
 800ae76:	f7fe ff92 	bl	8009d9e <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800ae7a:	2303      	movs	r3, #3
 800ae7c:	73fb      	strb	r3, [r7, #15]
      break;
 800ae7e:	bf00      	nop
  }

  return ret;
 800ae80:	7bfb      	ldrb	r3, [r7, #15]
}
 800ae82:	4618      	mov	r0, r3
 800ae84:	3710      	adds	r7, #16
 800ae86:	46bd      	mov	sp, r7
 800ae88:	bd80      	pop	{r7, pc}
 800ae8a:	bf00      	nop
 800ae8c:	20000838 	.word	0x20000838

0800ae90 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ae90:	b580      	push	{r7, lr}
 800ae92:	b082      	sub	sp, #8
 800ae94:	af00      	add	r7, sp, #0
 800ae96:	6078      	str	r0, [r7, #4]
 800ae98:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800ae9a:	683b      	ldr	r3, [r7, #0]
 800ae9c:	88db      	ldrh	r3, [r3, #6]
 800ae9e:	2b01      	cmp	r3, #1
 800aea0:	d004      	beq.n	800aeac <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800aea2:	6839      	ldr	r1, [r7, #0]
 800aea4:	6878      	ldr	r0, [r7, #4]
 800aea6:	f000 f8e2 	bl	800b06e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800aeaa:	e023      	b.n	800aef4 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aeb2:	b2db      	uxtb	r3, r3
 800aeb4:	2b02      	cmp	r3, #2
 800aeb6:	dc02      	bgt.n	800aebe <USBD_GetConfig+0x2e>
 800aeb8:	2b00      	cmp	r3, #0
 800aeba:	dc03      	bgt.n	800aec4 <USBD_GetConfig+0x34>
 800aebc:	e015      	b.n	800aeea <USBD_GetConfig+0x5a>
 800aebe:	2b03      	cmp	r3, #3
 800aec0:	d00b      	beq.n	800aeda <USBD_GetConfig+0x4a>
 800aec2:	e012      	b.n	800aeea <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	2200      	movs	r2, #0
 800aec8:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	3308      	adds	r3, #8
 800aece:	2201      	movs	r2, #1
 800aed0:	4619      	mov	r1, r3
 800aed2:	6878      	ldr	r0, [r7, #4]
 800aed4:	f000 f93c 	bl	800b150 <USBD_CtlSendData>
        break;
 800aed8:	e00c      	b.n	800aef4 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	3304      	adds	r3, #4
 800aede:	2201      	movs	r2, #1
 800aee0:	4619      	mov	r1, r3
 800aee2:	6878      	ldr	r0, [r7, #4]
 800aee4:	f000 f934 	bl	800b150 <USBD_CtlSendData>
        break;
 800aee8:	e004      	b.n	800aef4 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800aeea:	6839      	ldr	r1, [r7, #0]
 800aeec:	6878      	ldr	r0, [r7, #4]
 800aeee:	f000 f8be 	bl	800b06e <USBD_CtlError>
        break;
 800aef2:	bf00      	nop
}
 800aef4:	bf00      	nop
 800aef6:	3708      	adds	r7, #8
 800aef8:	46bd      	mov	sp, r7
 800aefa:	bd80      	pop	{r7, pc}

0800aefc <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800aefc:	b580      	push	{r7, lr}
 800aefe:	b082      	sub	sp, #8
 800af00:	af00      	add	r7, sp, #0
 800af02:	6078      	str	r0, [r7, #4]
 800af04:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800af0c:	b2db      	uxtb	r3, r3
 800af0e:	3b01      	subs	r3, #1
 800af10:	2b02      	cmp	r3, #2
 800af12:	d81e      	bhi.n	800af52 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800af14:	683b      	ldr	r3, [r7, #0]
 800af16:	88db      	ldrh	r3, [r3, #6]
 800af18:	2b02      	cmp	r3, #2
 800af1a:	d004      	beq.n	800af26 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800af1c:	6839      	ldr	r1, [r7, #0]
 800af1e:	6878      	ldr	r0, [r7, #4]
 800af20:	f000 f8a5 	bl	800b06e <USBD_CtlError>
        break;
 800af24:	e01a      	b.n	800af5c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	2201      	movs	r2, #1
 800af2a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800af32:	2b00      	cmp	r3, #0
 800af34:	d005      	beq.n	800af42 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	68db      	ldr	r3, [r3, #12]
 800af3a:	f043 0202 	orr.w	r2, r3, #2
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	330c      	adds	r3, #12
 800af46:	2202      	movs	r2, #2
 800af48:	4619      	mov	r1, r3
 800af4a:	6878      	ldr	r0, [r7, #4]
 800af4c:	f000 f900 	bl	800b150 <USBD_CtlSendData>
      break;
 800af50:	e004      	b.n	800af5c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800af52:	6839      	ldr	r1, [r7, #0]
 800af54:	6878      	ldr	r0, [r7, #4]
 800af56:	f000 f88a 	bl	800b06e <USBD_CtlError>
      break;
 800af5a:	bf00      	nop
  }
}
 800af5c:	bf00      	nop
 800af5e:	3708      	adds	r7, #8
 800af60:	46bd      	mov	sp, r7
 800af62:	bd80      	pop	{r7, pc}

0800af64 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800af64:	b580      	push	{r7, lr}
 800af66:	b082      	sub	sp, #8
 800af68:	af00      	add	r7, sp, #0
 800af6a:	6078      	str	r0, [r7, #4]
 800af6c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800af6e:	683b      	ldr	r3, [r7, #0]
 800af70:	885b      	ldrh	r3, [r3, #2]
 800af72:	2b01      	cmp	r3, #1
 800af74:	d107      	bne.n	800af86 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	2201      	movs	r2, #1
 800af7a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800af7e:	6878      	ldr	r0, [r7, #4]
 800af80:	f000 f940 	bl	800b204 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800af84:	e013      	b.n	800afae <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800af86:	683b      	ldr	r3, [r7, #0]
 800af88:	885b      	ldrh	r3, [r3, #2]
 800af8a:	2b02      	cmp	r3, #2
 800af8c:	d10b      	bne.n	800afa6 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 800af8e:	683b      	ldr	r3, [r7, #0]
 800af90:	889b      	ldrh	r3, [r3, #4]
 800af92:	0a1b      	lsrs	r3, r3, #8
 800af94:	b29b      	uxth	r3, r3
 800af96:	b2da      	uxtb	r2, r3
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800af9e:	6878      	ldr	r0, [r7, #4]
 800afa0:	f000 f930 	bl	800b204 <USBD_CtlSendStatus>
}
 800afa4:	e003      	b.n	800afae <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800afa6:	6839      	ldr	r1, [r7, #0]
 800afa8:	6878      	ldr	r0, [r7, #4]
 800afaa:	f000 f860 	bl	800b06e <USBD_CtlError>
}
 800afae:	bf00      	nop
 800afb0:	3708      	adds	r7, #8
 800afb2:	46bd      	mov	sp, r7
 800afb4:	bd80      	pop	{r7, pc}

0800afb6 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800afb6:	b580      	push	{r7, lr}
 800afb8:	b082      	sub	sp, #8
 800afba:	af00      	add	r7, sp, #0
 800afbc:	6078      	str	r0, [r7, #4]
 800afbe:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800afc6:	b2db      	uxtb	r3, r3
 800afc8:	3b01      	subs	r3, #1
 800afca:	2b02      	cmp	r3, #2
 800afcc:	d80b      	bhi.n	800afe6 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800afce:	683b      	ldr	r3, [r7, #0]
 800afd0:	885b      	ldrh	r3, [r3, #2]
 800afd2:	2b01      	cmp	r3, #1
 800afd4:	d10c      	bne.n	800aff0 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	2200      	movs	r2, #0
 800afda:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800afde:	6878      	ldr	r0, [r7, #4]
 800afe0:	f000 f910 	bl	800b204 <USBD_CtlSendStatus>
      }
      break;
 800afe4:	e004      	b.n	800aff0 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800afe6:	6839      	ldr	r1, [r7, #0]
 800afe8:	6878      	ldr	r0, [r7, #4]
 800afea:	f000 f840 	bl	800b06e <USBD_CtlError>
      break;
 800afee:	e000      	b.n	800aff2 <USBD_ClrFeature+0x3c>
      break;
 800aff0:	bf00      	nop
  }
}
 800aff2:	bf00      	nop
 800aff4:	3708      	adds	r7, #8
 800aff6:	46bd      	mov	sp, r7
 800aff8:	bd80      	pop	{r7, pc}

0800affa <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800affa:	b580      	push	{r7, lr}
 800affc:	b084      	sub	sp, #16
 800affe:	af00      	add	r7, sp, #0
 800b000:	6078      	str	r0, [r7, #4]
 800b002:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800b004:	683b      	ldr	r3, [r7, #0]
 800b006:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800b008:	68fb      	ldr	r3, [r7, #12]
 800b00a:	781a      	ldrb	r2, [r3, #0]
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800b010:	68fb      	ldr	r3, [r7, #12]
 800b012:	3301      	adds	r3, #1
 800b014:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800b016:	68fb      	ldr	r3, [r7, #12]
 800b018:	781a      	ldrb	r2, [r3, #0]
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800b01e:	68fb      	ldr	r3, [r7, #12]
 800b020:	3301      	adds	r3, #1
 800b022:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800b024:	68f8      	ldr	r0, [r7, #12]
 800b026:	f7ff fa41 	bl	800a4ac <SWAPBYTE>
 800b02a:	4603      	mov	r3, r0
 800b02c:	461a      	mov	r2, r3
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800b032:	68fb      	ldr	r3, [r7, #12]
 800b034:	3301      	adds	r3, #1
 800b036:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b038:	68fb      	ldr	r3, [r7, #12]
 800b03a:	3301      	adds	r3, #1
 800b03c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800b03e:	68f8      	ldr	r0, [r7, #12]
 800b040:	f7ff fa34 	bl	800a4ac <SWAPBYTE>
 800b044:	4603      	mov	r3, r0
 800b046:	461a      	mov	r2, r3
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800b04c:	68fb      	ldr	r3, [r7, #12]
 800b04e:	3301      	adds	r3, #1
 800b050:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b052:	68fb      	ldr	r3, [r7, #12]
 800b054:	3301      	adds	r3, #1
 800b056:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800b058:	68f8      	ldr	r0, [r7, #12]
 800b05a:	f7ff fa27 	bl	800a4ac <SWAPBYTE>
 800b05e:	4603      	mov	r3, r0
 800b060:	461a      	mov	r2, r3
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	80da      	strh	r2, [r3, #6]
}
 800b066:	bf00      	nop
 800b068:	3710      	adds	r7, #16
 800b06a:	46bd      	mov	sp, r7
 800b06c:	bd80      	pop	{r7, pc}

0800b06e <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b06e:	b580      	push	{r7, lr}
 800b070:	b082      	sub	sp, #8
 800b072:	af00      	add	r7, sp, #0
 800b074:	6078      	str	r0, [r7, #4]
 800b076:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800b078:	2180      	movs	r1, #128	; 0x80
 800b07a:	6878      	ldr	r0, [r7, #4]
 800b07c:	f000 fce6 	bl	800ba4c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800b080:	2100      	movs	r1, #0
 800b082:	6878      	ldr	r0, [r7, #4]
 800b084:	f000 fce2 	bl	800ba4c <USBD_LL_StallEP>
}
 800b088:	bf00      	nop
 800b08a:	3708      	adds	r7, #8
 800b08c:	46bd      	mov	sp, r7
 800b08e:	bd80      	pop	{r7, pc}

0800b090 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800b090:	b580      	push	{r7, lr}
 800b092:	b086      	sub	sp, #24
 800b094:	af00      	add	r7, sp, #0
 800b096:	60f8      	str	r0, [r7, #12]
 800b098:	60b9      	str	r1, [r7, #8]
 800b09a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800b09c:	2300      	movs	r3, #0
 800b09e:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800b0a0:	68fb      	ldr	r3, [r7, #12]
 800b0a2:	2b00      	cmp	r3, #0
 800b0a4:	d036      	beq.n	800b114 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800b0a6:	68fb      	ldr	r3, [r7, #12]
 800b0a8:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800b0aa:	6938      	ldr	r0, [r7, #16]
 800b0ac:	f000 f836 	bl	800b11c <USBD_GetLen>
 800b0b0:	4603      	mov	r3, r0
 800b0b2:	3301      	adds	r3, #1
 800b0b4:	b29b      	uxth	r3, r3
 800b0b6:	005b      	lsls	r3, r3, #1
 800b0b8:	b29a      	uxth	r2, r3
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800b0be:	7dfb      	ldrb	r3, [r7, #23]
 800b0c0:	68ba      	ldr	r2, [r7, #8]
 800b0c2:	4413      	add	r3, r2
 800b0c4:	687a      	ldr	r2, [r7, #4]
 800b0c6:	7812      	ldrb	r2, [r2, #0]
 800b0c8:	701a      	strb	r2, [r3, #0]
  idx++;
 800b0ca:	7dfb      	ldrb	r3, [r7, #23]
 800b0cc:	3301      	adds	r3, #1
 800b0ce:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800b0d0:	7dfb      	ldrb	r3, [r7, #23]
 800b0d2:	68ba      	ldr	r2, [r7, #8]
 800b0d4:	4413      	add	r3, r2
 800b0d6:	2203      	movs	r2, #3
 800b0d8:	701a      	strb	r2, [r3, #0]
  idx++;
 800b0da:	7dfb      	ldrb	r3, [r7, #23]
 800b0dc:	3301      	adds	r3, #1
 800b0de:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800b0e0:	e013      	b.n	800b10a <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800b0e2:	7dfb      	ldrb	r3, [r7, #23]
 800b0e4:	68ba      	ldr	r2, [r7, #8]
 800b0e6:	4413      	add	r3, r2
 800b0e8:	693a      	ldr	r2, [r7, #16]
 800b0ea:	7812      	ldrb	r2, [r2, #0]
 800b0ec:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800b0ee:	693b      	ldr	r3, [r7, #16]
 800b0f0:	3301      	adds	r3, #1
 800b0f2:	613b      	str	r3, [r7, #16]
    idx++;
 800b0f4:	7dfb      	ldrb	r3, [r7, #23]
 800b0f6:	3301      	adds	r3, #1
 800b0f8:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800b0fa:	7dfb      	ldrb	r3, [r7, #23]
 800b0fc:	68ba      	ldr	r2, [r7, #8]
 800b0fe:	4413      	add	r3, r2
 800b100:	2200      	movs	r2, #0
 800b102:	701a      	strb	r2, [r3, #0]
    idx++;
 800b104:	7dfb      	ldrb	r3, [r7, #23]
 800b106:	3301      	adds	r3, #1
 800b108:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800b10a:	693b      	ldr	r3, [r7, #16]
 800b10c:	781b      	ldrb	r3, [r3, #0]
 800b10e:	2b00      	cmp	r3, #0
 800b110:	d1e7      	bne.n	800b0e2 <USBD_GetString+0x52>
 800b112:	e000      	b.n	800b116 <USBD_GetString+0x86>
    return;
 800b114:	bf00      	nop
  }
}
 800b116:	3718      	adds	r7, #24
 800b118:	46bd      	mov	sp, r7
 800b11a:	bd80      	pop	{r7, pc}

0800b11c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800b11c:	b480      	push	{r7}
 800b11e:	b085      	sub	sp, #20
 800b120:	af00      	add	r7, sp, #0
 800b122:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800b124:	2300      	movs	r3, #0
 800b126:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800b12c:	e005      	b.n	800b13a <USBD_GetLen+0x1e>
  {
    len++;
 800b12e:	7bfb      	ldrb	r3, [r7, #15]
 800b130:	3301      	adds	r3, #1
 800b132:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800b134:	68bb      	ldr	r3, [r7, #8]
 800b136:	3301      	adds	r3, #1
 800b138:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800b13a:	68bb      	ldr	r3, [r7, #8]
 800b13c:	781b      	ldrb	r3, [r3, #0]
 800b13e:	2b00      	cmp	r3, #0
 800b140:	d1f5      	bne.n	800b12e <USBD_GetLen+0x12>
  }

  return len;
 800b142:	7bfb      	ldrb	r3, [r7, #15]
}
 800b144:	4618      	mov	r0, r3
 800b146:	3714      	adds	r7, #20
 800b148:	46bd      	mov	sp, r7
 800b14a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b14e:	4770      	bx	lr

0800b150 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800b150:	b580      	push	{r7, lr}
 800b152:	b084      	sub	sp, #16
 800b154:	af00      	add	r7, sp, #0
 800b156:	60f8      	str	r0, [r7, #12]
 800b158:	60b9      	str	r1, [r7, #8]
 800b15a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800b15c:	68fb      	ldr	r3, [r7, #12]
 800b15e:	2202      	movs	r2, #2
 800b160:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800b164:	68fb      	ldr	r3, [r7, #12]
 800b166:	687a      	ldr	r2, [r7, #4]
 800b168:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800b16a:	68fb      	ldr	r3, [r7, #12]
 800b16c:	687a      	ldr	r2, [r7, #4]
 800b16e:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	68ba      	ldr	r2, [r7, #8]
 800b174:	2100      	movs	r1, #0
 800b176:	68f8      	ldr	r0, [r7, #12]
 800b178:	f000 fcf1 	bl	800bb5e <USBD_LL_Transmit>

  return USBD_OK;
 800b17c:	2300      	movs	r3, #0
}
 800b17e:	4618      	mov	r0, r3
 800b180:	3710      	adds	r7, #16
 800b182:	46bd      	mov	sp, r7
 800b184:	bd80      	pop	{r7, pc}

0800b186 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800b186:	b580      	push	{r7, lr}
 800b188:	b084      	sub	sp, #16
 800b18a:	af00      	add	r7, sp, #0
 800b18c:	60f8      	str	r0, [r7, #12]
 800b18e:	60b9      	str	r1, [r7, #8]
 800b190:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	68ba      	ldr	r2, [r7, #8]
 800b196:	2100      	movs	r1, #0
 800b198:	68f8      	ldr	r0, [r7, #12]
 800b19a:	f000 fce0 	bl	800bb5e <USBD_LL_Transmit>

  return USBD_OK;
 800b19e:	2300      	movs	r3, #0
}
 800b1a0:	4618      	mov	r0, r3
 800b1a2:	3710      	adds	r7, #16
 800b1a4:	46bd      	mov	sp, r7
 800b1a6:	bd80      	pop	{r7, pc}

0800b1a8 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800b1a8:	b580      	push	{r7, lr}
 800b1aa:	b084      	sub	sp, #16
 800b1ac:	af00      	add	r7, sp, #0
 800b1ae:	60f8      	str	r0, [r7, #12]
 800b1b0:	60b9      	str	r1, [r7, #8]
 800b1b2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800b1b4:	68fb      	ldr	r3, [r7, #12]
 800b1b6:	2203      	movs	r2, #3
 800b1b8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800b1bc:	68fb      	ldr	r3, [r7, #12]
 800b1be:	687a      	ldr	r2, [r7, #4]
 800b1c0:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800b1c4:	68fb      	ldr	r3, [r7, #12]
 800b1c6:	687a      	ldr	r2, [r7, #4]
 800b1c8:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	68ba      	ldr	r2, [r7, #8]
 800b1d0:	2100      	movs	r1, #0
 800b1d2:	68f8      	ldr	r0, [r7, #12]
 800b1d4:	f000 fce4 	bl	800bba0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b1d8:	2300      	movs	r3, #0
}
 800b1da:	4618      	mov	r0, r3
 800b1dc:	3710      	adds	r7, #16
 800b1de:	46bd      	mov	sp, r7
 800b1e0:	bd80      	pop	{r7, pc}

0800b1e2 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800b1e2:	b580      	push	{r7, lr}
 800b1e4:	b084      	sub	sp, #16
 800b1e6:	af00      	add	r7, sp, #0
 800b1e8:	60f8      	str	r0, [r7, #12]
 800b1ea:	60b9      	str	r1, [r7, #8]
 800b1ec:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	68ba      	ldr	r2, [r7, #8]
 800b1f2:	2100      	movs	r1, #0
 800b1f4:	68f8      	ldr	r0, [r7, #12]
 800b1f6:	f000 fcd3 	bl	800bba0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b1fa:	2300      	movs	r3, #0
}
 800b1fc:	4618      	mov	r0, r3
 800b1fe:	3710      	adds	r7, #16
 800b200:	46bd      	mov	sp, r7
 800b202:	bd80      	pop	{r7, pc}

0800b204 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800b204:	b580      	push	{r7, lr}
 800b206:	b082      	sub	sp, #8
 800b208:	af00      	add	r7, sp, #0
 800b20a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	2204      	movs	r2, #4
 800b210:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800b214:	2300      	movs	r3, #0
 800b216:	2200      	movs	r2, #0
 800b218:	2100      	movs	r1, #0
 800b21a:	6878      	ldr	r0, [r7, #4]
 800b21c:	f000 fc9f 	bl	800bb5e <USBD_LL_Transmit>

  return USBD_OK;
 800b220:	2300      	movs	r3, #0
}
 800b222:	4618      	mov	r0, r3
 800b224:	3708      	adds	r7, #8
 800b226:	46bd      	mov	sp, r7
 800b228:	bd80      	pop	{r7, pc}

0800b22a <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800b22a:	b580      	push	{r7, lr}
 800b22c:	b082      	sub	sp, #8
 800b22e:	af00      	add	r7, sp, #0
 800b230:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	2205      	movs	r2, #5
 800b236:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b23a:	2300      	movs	r3, #0
 800b23c:	2200      	movs	r2, #0
 800b23e:	2100      	movs	r1, #0
 800b240:	6878      	ldr	r0, [r7, #4]
 800b242:	f000 fcad 	bl	800bba0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b246:	2300      	movs	r3, #0
}
 800b248:	4618      	mov	r0, r3
 800b24a:	3708      	adds	r7, #8
 800b24c:	46bd      	mov	sp, r7
 800b24e:	bd80      	pop	{r7, pc}

0800b250 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800b250:	b580      	push	{r7, lr}
 800b252:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceHS, &HS_Desc, DEVICE_HS) != USBD_OK)
 800b254:	2201      	movs	r2, #1
 800b256:	4912      	ldr	r1, [pc, #72]	; (800b2a0 <MX_USB_DEVICE_Init+0x50>)
 800b258:	4812      	ldr	r0, [pc, #72]	; (800b2a4 <MX_USB_DEVICE_Init+0x54>)
 800b25a:	f7fe fd07 	bl	8009c6c <USBD_Init>
 800b25e:	4603      	mov	r3, r0
 800b260:	2b00      	cmp	r3, #0
 800b262:	d001      	beq.n	800b268 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800b264:	f7f6 fe02 	bl	8001e6c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceHS, &USBD_CDC) != USBD_OK)
 800b268:	490f      	ldr	r1, [pc, #60]	; (800b2a8 <MX_USB_DEVICE_Init+0x58>)
 800b26a:	480e      	ldr	r0, [pc, #56]	; (800b2a4 <MX_USB_DEVICE_Init+0x54>)
 800b26c:	f7fe fd2e 	bl	8009ccc <USBD_RegisterClass>
 800b270:	4603      	mov	r3, r0
 800b272:	2b00      	cmp	r3, #0
 800b274:	d001      	beq.n	800b27a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800b276:	f7f6 fdf9 	bl	8001e6c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceHS, &USBD_Interface_fops_HS) != USBD_OK)
 800b27a:	490c      	ldr	r1, [pc, #48]	; (800b2ac <MX_USB_DEVICE_Init+0x5c>)
 800b27c:	4809      	ldr	r0, [pc, #36]	; (800b2a4 <MX_USB_DEVICE_Init+0x54>)
 800b27e:	f7fe fc65 	bl	8009b4c <USBD_CDC_RegisterInterface>
 800b282:	4603      	mov	r3, r0
 800b284:	2b00      	cmp	r3, #0
 800b286:	d001      	beq.n	800b28c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800b288:	f7f6 fdf0 	bl	8001e6c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceHS) != USBD_OK)
 800b28c:	4805      	ldr	r0, [pc, #20]	; (800b2a4 <MX_USB_DEVICE_Init+0x54>)
 800b28e:	f7fe fd53 	bl	8009d38 <USBD_Start>
 800b292:	4603      	mov	r3, r0
 800b294:	2b00      	cmp	r3, #0
 800b296:	d001      	beq.n	800b29c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800b298:	f7f6 fde8 	bl	8001e6c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800b29c:	bf00      	nop
 800b29e:	bd80      	pop	{r7, pc}
 800b2a0:	200000bc 	.word	0x200000bc
 800b2a4:	2000083c 	.word	0x2000083c
 800b2a8:	20000028 	.word	0x20000028
 800b2ac:	200000a8 	.word	0x200000a8

0800b2b0 <CDC_Init_HS>:
/**
  * @brief  Initializes the CDC media low layer over the USB HS IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_HS(void)
{
 800b2b0:	b580      	push	{r7, lr}
 800b2b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, UserTxBufferHS, 0);
 800b2b4:	2200      	movs	r2, #0
 800b2b6:	4905      	ldr	r1, [pc, #20]	; (800b2cc <CDC_Init_HS+0x1c>)
 800b2b8:	4805      	ldr	r0, [pc, #20]	; (800b2d0 <CDC_Init_HS+0x20>)
 800b2ba:	f7fe fc61 	bl	8009b80 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, UserRxBufferHS);
 800b2be:	4905      	ldr	r1, [pc, #20]	; (800b2d4 <CDC_Init_HS+0x24>)
 800b2c0:	4803      	ldr	r0, [pc, #12]	; (800b2d0 <CDC_Init_HS+0x20>)
 800b2c2:	f7fe fc7f 	bl	8009bc4 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800b2c6:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 800b2c8:	4618      	mov	r0, r3
 800b2ca:	bd80      	pop	{r7, pc}
 800b2cc:	20001318 	.word	0x20001318
 800b2d0:	2000083c 	.word	0x2000083c
 800b2d4:	20000b18 	.word	0x20000b18

0800b2d8 <CDC_DeInit_HS>:
  * @brief  DeInitializes the CDC media low layer
  * @param  None
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_HS(void)
{
 800b2d8:	b480      	push	{r7}
 800b2da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 9 */
  return (USBD_OK);
 800b2dc:	2300      	movs	r3, #0
  /* USER CODE END 9 */
}
 800b2de:	4618      	mov	r0, r3
 800b2e0:	46bd      	mov	sp, r7
 800b2e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2e6:	4770      	bx	lr

0800b2e8 <CDC_Control_HS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_HS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800b2e8:	b480      	push	{r7}
 800b2ea:	b083      	sub	sp, #12
 800b2ec:	af00      	add	r7, sp, #0
 800b2ee:	4603      	mov	r3, r0
 800b2f0:	6039      	str	r1, [r7, #0]
 800b2f2:	71fb      	strb	r3, [r7, #7]
 800b2f4:	4613      	mov	r3, r2
 800b2f6:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 10 */
  switch(cmd)
 800b2f8:	79fb      	ldrb	r3, [r7, #7]
 800b2fa:	2b23      	cmp	r3, #35	; 0x23
 800b2fc:	d84a      	bhi.n	800b394 <CDC_Control_HS+0xac>
 800b2fe:	a201      	add	r2, pc, #4	; (adr r2, 800b304 <CDC_Control_HS+0x1c>)
 800b300:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b304:	0800b395 	.word	0x0800b395
 800b308:	0800b395 	.word	0x0800b395
 800b30c:	0800b395 	.word	0x0800b395
 800b310:	0800b395 	.word	0x0800b395
 800b314:	0800b395 	.word	0x0800b395
 800b318:	0800b395 	.word	0x0800b395
 800b31c:	0800b395 	.word	0x0800b395
 800b320:	0800b395 	.word	0x0800b395
 800b324:	0800b395 	.word	0x0800b395
 800b328:	0800b395 	.word	0x0800b395
 800b32c:	0800b395 	.word	0x0800b395
 800b330:	0800b395 	.word	0x0800b395
 800b334:	0800b395 	.word	0x0800b395
 800b338:	0800b395 	.word	0x0800b395
 800b33c:	0800b395 	.word	0x0800b395
 800b340:	0800b395 	.word	0x0800b395
 800b344:	0800b395 	.word	0x0800b395
 800b348:	0800b395 	.word	0x0800b395
 800b34c:	0800b395 	.word	0x0800b395
 800b350:	0800b395 	.word	0x0800b395
 800b354:	0800b395 	.word	0x0800b395
 800b358:	0800b395 	.word	0x0800b395
 800b35c:	0800b395 	.word	0x0800b395
 800b360:	0800b395 	.word	0x0800b395
 800b364:	0800b395 	.word	0x0800b395
 800b368:	0800b395 	.word	0x0800b395
 800b36c:	0800b395 	.word	0x0800b395
 800b370:	0800b395 	.word	0x0800b395
 800b374:	0800b395 	.word	0x0800b395
 800b378:	0800b395 	.word	0x0800b395
 800b37c:	0800b395 	.word	0x0800b395
 800b380:	0800b395 	.word	0x0800b395
 800b384:	0800b395 	.word	0x0800b395
 800b388:	0800b395 	.word	0x0800b395
 800b38c:	0800b395 	.word	0x0800b395
 800b390:	0800b395 	.word	0x0800b395
  case CDC_SEND_BREAK:

    break;

  default:
    break;
 800b394:	bf00      	nop
  }

  return (USBD_OK);
 800b396:	2300      	movs	r3, #0
  /* USER CODE END 10 */
}
 800b398:	4618      	mov	r0, r3
 800b39a:	370c      	adds	r7, #12
 800b39c:	46bd      	mov	sp, r7
 800b39e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3a2:	4770      	bx	lr

0800b3a4 <CDC_Receive_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAILL
  */
static int8_t CDC_Receive_HS(uint8_t* Buf, uint32_t *Len)
{
 800b3a4:	b580      	push	{r7, lr}
 800b3a6:	b082      	sub	sp, #8
 800b3a8:	af00      	add	r7, sp, #0
 800b3aa:	6078      	str	r0, [r7, #4]
 800b3ac:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 11 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, &Buf[0]);
 800b3ae:	6879      	ldr	r1, [r7, #4]
 800b3b0:	4818      	ldr	r0, [pc, #96]	; (800b414 <CDC_Receive_HS+0x70>)
 800b3b2:	f7fe fc07 	bl	8009bc4 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceHS);
 800b3b6:	4817      	ldr	r0, [pc, #92]	; (800b414 <CDC_Receive_HS+0x70>)
 800b3b8:	f7fe fc22 	bl	8009c00 <USBD_CDC_ReceivePacket>
  // Put usb data into usb buffer
  if((RF_transmit_buff_offset + *Len) > sizeof(RF_transmit_buffer)) RF_transmit_buff_offset = 0;
 800b3bc:	4b16      	ldr	r3, [pc, #88]	; (800b418 <CDC_Receive_HS+0x74>)
 800b3be:	781b      	ldrb	r3, [r3, #0]
 800b3c0:	461a      	mov	r2, r3
 800b3c2:	683b      	ldr	r3, [r7, #0]
 800b3c4:	681b      	ldr	r3, [r3, #0]
 800b3c6:	4413      	add	r3, r2
 800b3c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b3cc:	d902      	bls.n	800b3d4 <CDC_Receive_HS+0x30>
 800b3ce:	4b12      	ldr	r3, [pc, #72]	; (800b418 <CDC_Receive_HS+0x74>)
 800b3d0:	2200      	movs	r2, #0
 800b3d2:	701a      	strb	r2, [r3, #0]
  memcpy(&RF_transmit_buffer[RF_transmit_buff_offset], Buf, *Len);  // copy the data to the RF_transmit_buffer
 800b3d4:	4b10      	ldr	r3, [pc, #64]	; (800b418 <CDC_Receive_HS+0x74>)
 800b3d6:	781b      	ldrb	r3, [r3, #0]
 800b3d8:	461a      	mov	r2, r3
 800b3da:	4b10      	ldr	r3, [pc, #64]	; (800b41c <CDC_Receive_HS+0x78>)
 800b3dc:	18d0      	adds	r0, r2, r3
 800b3de:	683b      	ldr	r3, [r7, #0]
 800b3e0:	681b      	ldr	r3, [r3, #0]
 800b3e2:	461a      	mov	r2, r3
 800b3e4:	6879      	ldr	r1, [r7, #4]
 800b3e6:	f000 fc7d 	bl	800bce4 <memcpy>
  memset(Buf, '\0', *Len);   // clear the Buf
 800b3ea:	683b      	ldr	r3, [r7, #0]
 800b3ec:	681b      	ldr	r3, [r3, #0]
 800b3ee:	461a      	mov	r2, r3
 800b3f0:	2100      	movs	r1, #0
 800b3f2:	6878      	ldr	r0, [r7, #4]
 800b3f4:	f000 fc84 	bl	800bd00 <memset>
  RF_transmit_buff_offset += *Len;
 800b3f8:	683b      	ldr	r3, [r7, #0]
 800b3fa:	681b      	ldr	r3, [r3, #0]
 800b3fc:	b2da      	uxtb	r2, r3
 800b3fe:	4b06      	ldr	r3, [pc, #24]	; (800b418 <CDC_Receive_HS+0x74>)
 800b400:	781b      	ldrb	r3, [r3, #0]
 800b402:	4413      	add	r3, r2
 800b404:	b2da      	uxtb	r2, r3
 800b406:	4b04      	ldr	r3, [pc, #16]	; (800b418 <CDC_Receive_HS+0x74>)
 800b408:	701a      	strb	r2, [r3, #0]
  return (USBD_OK);
 800b40a:	2300      	movs	r3, #0
  /* USER CODE END 11 */
}
 800b40c:	4618      	mov	r0, r3
 800b40e:	3708      	adds	r7, #8
 800b410:	46bd      	mov	sp, r7
 800b412:	bd80      	pop	{r7, pc}
 800b414:	2000083c 	.word	0x2000083c
 800b418:	200007f8 	.word	0x200007f8
 800b41c:	200005f8 	.word	0x200005f8

0800b420 <CDC_TransmitCplt_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_HS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800b420:	b480      	push	{r7}
 800b422:	b087      	sub	sp, #28
 800b424:	af00      	add	r7, sp, #0
 800b426:	60f8      	str	r0, [r7, #12]
 800b428:	60b9      	str	r1, [r7, #8]
 800b42a:	4613      	mov	r3, r2
 800b42c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800b42e:	2300      	movs	r3, #0
 800b430:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 14 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 14 */
  return result;
 800b432:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b436:	4618      	mov	r0, r3
 800b438:	371c      	adds	r7, #28
 800b43a:	46bd      	mov	sp, r7
 800b43c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b440:	4770      	bx	lr
	...

0800b444 <USBD_HS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b444:	b480      	push	{r7}
 800b446:	b083      	sub	sp, #12
 800b448:	af00      	add	r7, sp, #0
 800b44a:	4603      	mov	r3, r0
 800b44c:	6039      	str	r1, [r7, #0]
 800b44e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_HS_DeviceDesc);
 800b450:	683b      	ldr	r3, [r7, #0]
 800b452:	2212      	movs	r2, #18
 800b454:	801a      	strh	r2, [r3, #0]
  return USBD_HS_DeviceDesc;
 800b456:	4b03      	ldr	r3, [pc, #12]	; (800b464 <USBD_HS_DeviceDescriptor+0x20>)
}
 800b458:	4618      	mov	r0, r3
 800b45a:	370c      	adds	r7, #12
 800b45c:	46bd      	mov	sp, r7
 800b45e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b462:	4770      	bx	lr
 800b464:	200000d8 	.word	0x200000d8

0800b468 <USBD_HS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b468:	b480      	push	{r7}
 800b46a:	b083      	sub	sp, #12
 800b46c:	af00      	add	r7, sp, #0
 800b46e:	4603      	mov	r3, r0
 800b470:	6039      	str	r1, [r7, #0]
 800b472:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800b474:	683b      	ldr	r3, [r7, #0]
 800b476:	2204      	movs	r2, #4
 800b478:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800b47a:	4b03      	ldr	r3, [pc, #12]	; (800b488 <USBD_HS_LangIDStrDescriptor+0x20>)
}
 800b47c:	4618      	mov	r0, r3
 800b47e:	370c      	adds	r7, #12
 800b480:	46bd      	mov	sp, r7
 800b482:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b486:	4770      	bx	lr
 800b488:	200000ec 	.word	0x200000ec

0800b48c <USBD_HS_ProductStrDescriptor>:
  * @param  speed : current device speed
  * @param  length : pointer to data length variable
  * @retval pointer to descriptor buffer
  */
uint8_t * USBD_HS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b48c:	b580      	push	{r7, lr}
 800b48e:	b082      	sub	sp, #8
 800b490:	af00      	add	r7, sp, #0
 800b492:	4603      	mov	r3, r0
 800b494:	6039      	str	r1, [r7, #0]
 800b496:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b498:	79fb      	ldrb	r3, [r7, #7]
 800b49a:	2b00      	cmp	r3, #0
 800b49c:	d105      	bne.n	800b4aa <USBD_HS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 800b49e:	683a      	ldr	r2, [r7, #0]
 800b4a0:	4907      	ldr	r1, [pc, #28]	; (800b4c0 <USBD_HS_ProductStrDescriptor+0x34>)
 800b4a2:	4808      	ldr	r0, [pc, #32]	; (800b4c4 <USBD_HS_ProductStrDescriptor+0x38>)
 800b4a4:	f7ff fdf4 	bl	800b090 <USBD_GetString>
 800b4a8:	e004      	b.n	800b4b4 <USBD_HS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 800b4aa:	683a      	ldr	r2, [r7, #0]
 800b4ac:	4904      	ldr	r1, [pc, #16]	; (800b4c0 <USBD_HS_ProductStrDescriptor+0x34>)
 800b4ae:	4805      	ldr	r0, [pc, #20]	; (800b4c4 <USBD_HS_ProductStrDescriptor+0x38>)
 800b4b0:	f7ff fdee 	bl	800b090 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b4b4:	4b02      	ldr	r3, [pc, #8]	; (800b4c0 <USBD_HS_ProductStrDescriptor+0x34>)
}
 800b4b6:	4618      	mov	r0, r3
 800b4b8:	3708      	adds	r7, #8
 800b4ba:	46bd      	mov	sp, r7
 800b4bc:	bd80      	pop	{r7, pc}
 800b4be:	bf00      	nop
 800b4c0:	20001b18 	.word	0x20001b18
 800b4c4:	0800c8f4 	.word	0x0800c8f4

0800b4c8 <USBD_HS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b4c8:	b580      	push	{r7, lr}
 800b4ca:	b082      	sub	sp, #8
 800b4cc:	af00      	add	r7, sp, #0
 800b4ce:	4603      	mov	r3, r0
 800b4d0:	6039      	str	r1, [r7, #0]
 800b4d2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800b4d4:	683a      	ldr	r2, [r7, #0]
 800b4d6:	4904      	ldr	r1, [pc, #16]	; (800b4e8 <USBD_HS_ManufacturerStrDescriptor+0x20>)
 800b4d8:	4804      	ldr	r0, [pc, #16]	; (800b4ec <USBD_HS_ManufacturerStrDescriptor+0x24>)
 800b4da:	f7ff fdd9 	bl	800b090 <USBD_GetString>
  return USBD_StrDesc;
 800b4de:	4b02      	ldr	r3, [pc, #8]	; (800b4e8 <USBD_HS_ManufacturerStrDescriptor+0x20>)
}
 800b4e0:	4618      	mov	r0, r3
 800b4e2:	3708      	adds	r7, #8
 800b4e4:	46bd      	mov	sp, r7
 800b4e6:	bd80      	pop	{r7, pc}
 800b4e8:	20001b18 	.word	0x20001b18
 800b4ec:	0800c90c 	.word	0x0800c90c

0800b4f0 <USBD_HS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b4f0:	b580      	push	{r7, lr}
 800b4f2:	b082      	sub	sp, #8
 800b4f4:	af00      	add	r7, sp, #0
 800b4f6:	4603      	mov	r3, r0
 800b4f8:	6039      	str	r1, [r7, #0]
 800b4fa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800b4fc:	683b      	ldr	r3, [r7, #0]
 800b4fe:	221a      	movs	r2, #26
 800b500:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800b502:	f000 f843 	bl	800b58c <Get_SerialNum>
  /* USER CODE BEGIN USBD_HS_SerialStrDescriptor */

  /* USER CODE END USBD_HS_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 800b506:	4b02      	ldr	r3, [pc, #8]	; (800b510 <USBD_HS_SerialStrDescriptor+0x20>)
}
 800b508:	4618      	mov	r0, r3
 800b50a:	3708      	adds	r7, #8
 800b50c:	46bd      	mov	sp, r7
 800b50e:	bd80      	pop	{r7, pc}
 800b510:	200000f0 	.word	0x200000f0

0800b514 <USBD_HS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b514:	b580      	push	{r7, lr}
 800b516:	b082      	sub	sp, #8
 800b518:	af00      	add	r7, sp, #0
 800b51a:	4603      	mov	r3, r0
 800b51c:	6039      	str	r1, [r7, #0]
 800b51e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800b520:	79fb      	ldrb	r3, [r7, #7]
 800b522:	2b00      	cmp	r3, #0
 800b524:	d105      	bne.n	800b532 <USBD_HS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 800b526:	683a      	ldr	r2, [r7, #0]
 800b528:	4907      	ldr	r1, [pc, #28]	; (800b548 <USBD_HS_ConfigStrDescriptor+0x34>)
 800b52a:	4808      	ldr	r0, [pc, #32]	; (800b54c <USBD_HS_ConfigStrDescriptor+0x38>)
 800b52c:	f7ff fdb0 	bl	800b090 <USBD_GetString>
 800b530:	e004      	b.n	800b53c <USBD_HS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 800b532:	683a      	ldr	r2, [r7, #0]
 800b534:	4904      	ldr	r1, [pc, #16]	; (800b548 <USBD_HS_ConfigStrDescriptor+0x34>)
 800b536:	4805      	ldr	r0, [pc, #20]	; (800b54c <USBD_HS_ConfigStrDescriptor+0x38>)
 800b538:	f7ff fdaa 	bl	800b090 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b53c:	4b02      	ldr	r3, [pc, #8]	; (800b548 <USBD_HS_ConfigStrDescriptor+0x34>)
}
 800b53e:	4618      	mov	r0, r3
 800b540:	3708      	adds	r7, #8
 800b542:	46bd      	mov	sp, r7
 800b544:	bd80      	pop	{r7, pc}
 800b546:	bf00      	nop
 800b548:	20001b18 	.word	0x20001b18
 800b54c:	0800c920 	.word	0x0800c920

0800b550 <USBD_HS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b550:	b580      	push	{r7, lr}
 800b552:	b082      	sub	sp, #8
 800b554:	af00      	add	r7, sp, #0
 800b556:	4603      	mov	r3, r0
 800b558:	6039      	str	r1, [r7, #0]
 800b55a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b55c:	79fb      	ldrb	r3, [r7, #7]
 800b55e:	2b00      	cmp	r3, #0
 800b560:	d105      	bne.n	800b56e <USBD_HS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 800b562:	683a      	ldr	r2, [r7, #0]
 800b564:	4907      	ldr	r1, [pc, #28]	; (800b584 <USBD_HS_InterfaceStrDescriptor+0x34>)
 800b566:	4808      	ldr	r0, [pc, #32]	; (800b588 <USBD_HS_InterfaceStrDescriptor+0x38>)
 800b568:	f7ff fd92 	bl	800b090 <USBD_GetString>
 800b56c:	e004      	b.n	800b578 <USBD_HS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 800b56e:	683a      	ldr	r2, [r7, #0]
 800b570:	4904      	ldr	r1, [pc, #16]	; (800b584 <USBD_HS_InterfaceStrDescriptor+0x34>)
 800b572:	4805      	ldr	r0, [pc, #20]	; (800b588 <USBD_HS_InterfaceStrDescriptor+0x38>)
 800b574:	f7ff fd8c 	bl	800b090 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b578:	4b02      	ldr	r3, [pc, #8]	; (800b584 <USBD_HS_InterfaceStrDescriptor+0x34>)
}
 800b57a:	4618      	mov	r0, r3
 800b57c:	3708      	adds	r7, #8
 800b57e:	46bd      	mov	sp, r7
 800b580:	bd80      	pop	{r7, pc}
 800b582:	bf00      	nop
 800b584:	20001b18 	.word	0x20001b18
 800b588:	0800c92c 	.word	0x0800c92c

0800b58c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800b58c:	b580      	push	{r7, lr}
 800b58e:	b084      	sub	sp, #16
 800b590:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800b592:	4b0f      	ldr	r3, [pc, #60]	; (800b5d0 <Get_SerialNum+0x44>)
 800b594:	681b      	ldr	r3, [r3, #0]
 800b596:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800b598:	4b0e      	ldr	r3, [pc, #56]	; (800b5d4 <Get_SerialNum+0x48>)
 800b59a:	681b      	ldr	r3, [r3, #0]
 800b59c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800b59e:	4b0e      	ldr	r3, [pc, #56]	; (800b5d8 <Get_SerialNum+0x4c>)
 800b5a0:	681b      	ldr	r3, [r3, #0]
 800b5a2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800b5a4:	68fa      	ldr	r2, [r7, #12]
 800b5a6:	687b      	ldr	r3, [r7, #4]
 800b5a8:	4413      	add	r3, r2
 800b5aa:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800b5ac:	68fb      	ldr	r3, [r7, #12]
 800b5ae:	2b00      	cmp	r3, #0
 800b5b0:	d009      	beq.n	800b5c6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800b5b2:	2208      	movs	r2, #8
 800b5b4:	4909      	ldr	r1, [pc, #36]	; (800b5dc <Get_SerialNum+0x50>)
 800b5b6:	68f8      	ldr	r0, [r7, #12]
 800b5b8:	f000 f814 	bl	800b5e4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800b5bc:	2204      	movs	r2, #4
 800b5be:	4908      	ldr	r1, [pc, #32]	; (800b5e0 <Get_SerialNum+0x54>)
 800b5c0:	68b8      	ldr	r0, [r7, #8]
 800b5c2:	f000 f80f 	bl	800b5e4 <IntToUnicode>
  }
}
 800b5c6:	bf00      	nop
 800b5c8:	3710      	adds	r7, #16
 800b5ca:	46bd      	mov	sp, r7
 800b5cc:	bd80      	pop	{r7, pc}
 800b5ce:	bf00      	nop
 800b5d0:	1fff7a10 	.word	0x1fff7a10
 800b5d4:	1fff7a14 	.word	0x1fff7a14
 800b5d8:	1fff7a18 	.word	0x1fff7a18
 800b5dc:	200000f2 	.word	0x200000f2
 800b5e0:	20000102 	.word	0x20000102

0800b5e4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800b5e4:	b480      	push	{r7}
 800b5e6:	b087      	sub	sp, #28
 800b5e8:	af00      	add	r7, sp, #0
 800b5ea:	60f8      	str	r0, [r7, #12]
 800b5ec:	60b9      	str	r1, [r7, #8]
 800b5ee:	4613      	mov	r3, r2
 800b5f0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800b5f2:	2300      	movs	r3, #0
 800b5f4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800b5f6:	2300      	movs	r3, #0
 800b5f8:	75fb      	strb	r3, [r7, #23]
 800b5fa:	e027      	b.n	800b64c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800b5fc:	68fb      	ldr	r3, [r7, #12]
 800b5fe:	0f1b      	lsrs	r3, r3, #28
 800b600:	2b09      	cmp	r3, #9
 800b602:	d80b      	bhi.n	800b61c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800b604:	68fb      	ldr	r3, [r7, #12]
 800b606:	0f1b      	lsrs	r3, r3, #28
 800b608:	b2da      	uxtb	r2, r3
 800b60a:	7dfb      	ldrb	r3, [r7, #23]
 800b60c:	005b      	lsls	r3, r3, #1
 800b60e:	4619      	mov	r1, r3
 800b610:	68bb      	ldr	r3, [r7, #8]
 800b612:	440b      	add	r3, r1
 800b614:	3230      	adds	r2, #48	; 0x30
 800b616:	b2d2      	uxtb	r2, r2
 800b618:	701a      	strb	r2, [r3, #0]
 800b61a:	e00a      	b.n	800b632 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800b61c:	68fb      	ldr	r3, [r7, #12]
 800b61e:	0f1b      	lsrs	r3, r3, #28
 800b620:	b2da      	uxtb	r2, r3
 800b622:	7dfb      	ldrb	r3, [r7, #23]
 800b624:	005b      	lsls	r3, r3, #1
 800b626:	4619      	mov	r1, r3
 800b628:	68bb      	ldr	r3, [r7, #8]
 800b62a:	440b      	add	r3, r1
 800b62c:	3237      	adds	r2, #55	; 0x37
 800b62e:	b2d2      	uxtb	r2, r2
 800b630:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800b632:	68fb      	ldr	r3, [r7, #12]
 800b634:	011b      	lsls	r3, r3, #4
 800b636:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800b638:	7dfb      	ldrb	r3, [r7, #23]
 800b63a:	005b      	lsls	r3, r3, #1
 800b63c:	3301      	adds	r3, #1
 800b63e:	68ba      	ldr	r2, [r7, #8]
 800b640:	4413      	add	r3, r2
 800b642:	2200      	movs	r2, #0
 800b644:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800b646:	7dfb      	ldrb	r3, [r7, #23]
 800b648:	3301      	adds	r3, #1
 800b64a:	75fb      	strb	r3, [r7, #23]
 800b64c:	7dfa      	ldrb	r2, [r7, #23]
 800b64e:	79fb      	ldrb	r3, [r7, #7]
 800b650:	429a      	cmp	r2, r3
 800b652:	d3d3      	bcc.n	800b5fc <IntToUnicode+0x18>
  }
}
 800b654:	bf00      	nop
 800b656:	bf00      	nop
 800b658:	371c      	adds	r7, #28
 800b65a:	46bd      	mov	sp, r7
 800b65c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b660:	4770      	bx	lr
	...

0800b664 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800b664:	b580      	push	{r7, lr}
 800b666:	b08a      	sub	sp, #40	; 0x28
 800b668:	af00      	add	r7, sp, #0
 800b66a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b66c:	f107 0314 	add.w	r3, r7, #20
 800b670:	2200      	movs	r2, #0
 800b672:	601a      	str	r2, [r3, #0]
 800b674:	605a      	str	r2, [r3, #4]
 800b676:	609a      	str	r2, [r3, #8]
 800b678:	60da      	str	r2, [r3, #12]
 800b67a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_HS)
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	681b      	ldr	r3, [r3, #0]
 800b680:	4a1d      	ldr	r2, [pc, #116]	; (800b6f8 <HAL_PCD_MspInit+0x94>)
 800b682:	4293      	cmp	r3, r2
 800b684:	d134      	bne.n	800b6f0 <HAL_PCD_MspInit+0x8c>
  {
  /* USER CODE BEGIN USB_OTG_HS_MspInit 0 */

  /* USER CODE END USB_OTG_HS_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800b686:	2300      	movs	r3, #0
 800b688:	613b      	str	r3, [r7, #16]
 800b68a:	4b1c      	ldr	r3, [pc, #112]	; (800b6fc <HAL_PCD_MspInit+0x98>)
 800b68c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b68e:	4a1b      	ldr	r2, [pc, #108]	; (800b6fc <HAL_PCD_MspInit+0x98>)
 800b690:	f043 0302 	orr.w	r3, r3, #2
 800b694:	6313      	str	r3, [r2, #48]	; 0x30
 800b696:	4b19      	ldr	r3, [pc, #100]	; (800b6fc <HAL_PCD_MspInit+0x98>)
 800b698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b69a:	f003 0302 	and.w	r3, r3, #2
 800b69e:	613b      	str	r3, [r7, #16]
 800b6a0:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_HS GPIO Configuration
    PB14     ------> USB_OTG_HS_DM
    PB15     ------> USB_OTG_HS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 800b6a2:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800b6a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b6a8:	2302      	movs	r3, #2
 800b6aa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b6ac:	2300      	movs	r3, #0
 800b6ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b6b0:	2303      	movs	r3, #3
 800b6b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 800b6b4:	230c      	movs	r3, #12
 800b6b6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800b6b8:	f107 0314 	add.w	r3, r7, #20
 800b6bc:	4619      	mov	r1, r3
 800b6be:	4810      	ldr	r0, [pc, #64]	; (800b700 <HAL_PCD_MspInit+0x9c>)
 800b6c0:	f7f7 fc80 	bl	8002fc4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 800b6c4:	2300      	movs	r3, #0
 800b6c6:	60fb      	str	r3, [r7, #12]
 800b6c8:	4b0c      	ldr	r3, [pc, #48]	; (800b6fc <HAL_PCD_MspInit+0x98>)
 800b6ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b6cc:	4a0b      	ldr	r2, [pc, #44]	; (800b6fc <HAL_PCD_MspInit+0x98>)
 800b6ce:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800b6d2:	6313      	str	r3, [r2, #48]	; 0x30
 800b6d4:	4b09      	ldr	r3, [pc, #36]	; (800b6fc <HAL_PCD_MspInit+0x98>)
 800b6d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b6d8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b6dc:	60fb      	str	r3, [r7, #12]
 800b6de:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 1, 0);
 800b6e0:	2200      	movs	r2, #0
 800b6e2:	2101      	movs	r1, #1
 800b6e4:	204d      	movs	r0, #77	; 0x4d
 800b6e6:	f7f7 f834 	bl	8002752 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 800b6ea:	204d      	movs	r0, #77	; 0x4d
 800b6ec:	f7f7 f84d 	bl	800278a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 800b6f0:	bf00      	nop
 800b6f2:	3728      	adds	r7, #40	; 0x28
 800b6f4:	46bd      	mov	sp, r7
 800b6f6:	bd80      	pop	{r7, pc}
 800b6f8:	40040000 	.word	0x40040000
 800b6fc:	40023800 	.word	0x40023800
 800b700:	40020400 	.word	0x40020400

0800b704 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b704:	b580      	push	{r7, lr}
 800b706:	b082      	sub	sp, #8
 800b708:	af00      	add	r7, sp, #0
 800b70a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800b718:	4619      	mov	r1, r3
 800b71a:	4610      	mov	r0, r2
 800b71c:	f7fe fb59 	bl	8009dd2 <USBD_LL_SetupStage>
}
 800b720:	bf00      	nop
 800b722:	3708      	adds	r7, #8
 800b724:	46bd      	mov	sp, r7
 800b726:	bd80      	pop	{r7, pc}

0800b728 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b728:	b580      	push	{r7, lr}
 800b72a:	b082      	sub	sp, #8
 800b72c:	af00      	add	r7, sp, #0
 800b72e:	6078      	str	r0, [r7, #4]
 800b730:	460b      	mov	r3, r1
 800b732:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800b73a:	78fa      	ldrb	r2, [r7, #3]
 800b73c:	6879      	ldr	r1, [r7, #4]
 800b73e:	4613      	mov	r3, r2
 800b740:	00db      	lsls	r3, r3, #3
 800b742:	4413      	add	r3, r2
 800b744:	009b      	lsls	r3, r3, #2
 800b746:	440b      	add	r3, r1
 800b748:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800b74c:	681a      	ldr	r2, [r3, #0]
 800b74e:	78fb      	ldrb	r3, [r7, #3]
 800b750:	4619      	mov	r1, r3
 800b752:	f7fe fb93 	bl	8009e7c <USBD_LL_DataOutStage>
}
 800b756:	bf00      	nop
 800b758:	3708      	adds	r7, #8
 800b75a:	46bd      	mov	sp, r7
 800b75c:	bd80      	pop	{r7, pc}

0800b75e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b75e:	b580      	push	{r7, lr}
 800b760:	b082      	sub	sp, #8
 800b762:	af00      	add	r7, sp, #0
 800b764:	6078      	str	r0, [r7, #4]
 800b766:	460b      	mov	r3, r1
 800b768:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800b770:	78fa      	ldrb	r2, [r7, #3]
 800b772:	6879      	ldr	r1, [r7, #4]
 800b774:	4613      	mov	r3, r2
 800b776:	00db      	lsls	r3, r3, #3
 800b778:	4413      	add	r3, r2
 800b77a:	009b      	lsls	r3, r3, #2
 800b77c:	440b      	add	r3, r1
 800b77e:	334c      	adds	r3, #76	; 0x4c
 800b780:	681a      	ldr	r2, [r3, #0]
 800b782:	78fb      	ldrb	r3, [r7, #3]
 800b784:	4619      	mov	r1, r3
 800b786:	f7fe fc2c 	bl	8009fe2 <USBD_LL_DataInStage>
}
 800b78a:	bf00      	nop
 800b78c:	3708      	adds	r7, #8
 800b78e:	46bd      	mov	sp, r7
 800b790:	bd80      	pop	{r7, pc}

0800b792 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b792:	b580      	push	{r7, lr}
 800b794:	b082      	sub	sp, #8
 800b796:	af00      	add	r7, sp, #0
 800b798:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b7a0:	4618      	mov	r0, r3
 800b7a2:	f7fe fd60 	bl	800a266 <USBD_LL_SOF>
}
 800b7a6:	bf00      	nop
 800b7a8:	3708      	adds	r7, #8
 800b7aa:	46bd      	mov	sp, r7
 800b7ac:	bd80      	pop	{r7, pc}

0800b7ae <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b7ae:	b580      	push	{r7, lr}
 800b7b0:	b084      	sub	sp, #16
 800b7b2:	af00      	add	r7, sp, #0
 800b7b4:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800b7b6:	2301      	movs	r3, #1
 800b7b8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	68db      	ldr	r3, [r3, #12]
 800b7be:	2b00      	cmp	r3, #0
 800b7c0:	d102      	bne.n	800b7c8 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800b7c2:	2300      	movs	r3, #0
 800b7c4:	73fb      	strb	r3, [r7, #15]
 800b7c6:	e008      	b.n	800b7da <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	68db      	ldr	r3, [r3, #12]
 800b7cc:	2b02      	cmp	r3, #2
 800b7ce:	d102      	bne.n	800b7d6 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800b7d0:	2301      	movs	r3, #1
 800b7d2:	73fb      	strb	r3, [r7, #15]
 800b7d4:	e001      	b.n	800b7da <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800b7d6:	f7f6 fb49 	bl	8001e6c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800b7da:	687b      	ldr	r3, [r7, #4]
 800b7dc:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b7e0:	7bfa      	ldrb	r2, [r7, #15]
 800b7e2:	4611      	mov	r1, r2
 800b7e4:	4618      	mov	r0, r3
 800b7e6:	f7fe fd00 	bl	800a1ea <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800b7ea:	687b      	ldr	r3, [r7, #4]
 800b7ec:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b7f0:	4618      	mov	r0, r3
 800b7f2:	f7fe fca8 	bl	800a146 <USBD_LL_Reset>
}
 800b7f6:	bf00      	nop
 800b7f8:	3710      	adds	r7, #16
 800b7fa:	46bd      	mov	sp, r7
 800b7fc:	bd80      	pop	{r7, pc}
	...

0800b800 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b800:	b580      	push	{r7, lr}
 800b802:	b082      	sub	sp, #8
 800b804:	af00      	add	r7, sp, #0
 800b806:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b80e:	4618      	mov	r0, r3
 800b810:	f7fe fcfb 	bl	800a20a <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	681b      	ldr	r3, [r3, #0]
 800b818:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800b81c:	681b      	ldr	r3, [r3, #0]
 800b81e:	687a      	ldr	r2, [r7, #4]
 800b820:	6812      	ldr	r2, [r2, #0]
 800b822:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800b826:	f043 0301 	orr.w	r3, r3, #1
 800b82a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	6a1b      	ldr	r3, [r3, #32]
 800b830:	2b00      	cmp	r3, #0
 800b832:	d005      	beq.n	800b840 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b834:	4b04      	ldr	r3, [pc, #16]	; (800b848 <HAL_PCD_SuspendCallback+0x48>)
 800b836:	691b      	ldr	r3, [r3, #16]
 800b838:	4a03      	ldr	r2, [pc, #12]	; (800b848 <HAL_PCD_SuspendCallback+0x48>)
 800b83a:	f043 0306 	orr.w	r3, r3, #6
 800b83e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800b840:	bf00      	nop
 800b842:	3708      	adds	r7, #8
 800b844:	46bd      	mov	sp, r7
 800b846:	bd80      	pop	{r7, pc}
 800b848:	e000ed00 	.word	0xe000ed00

0800b84c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b84c:	b580      	push	{r7, lr}
 800b84e:	b082      	sub	sp, #8
 800b850:	af00      	add	r7, sp, #0
 800b852:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b85a:	4618      	mov	r0, r3
 800b85c:	f7fe fceb 	bl	800a236 <USBD_LL_Resume>
}
 800b860:	bf00      	nop
 800b862:	3708      	adds	r7, #8
 800b864:	46bd      	mov	sp, r7
 800b866:	bd80      	pop	{r7, pc}

0800b868 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b868:	b580      	push	{r7, lr}
 800b86a:	b082      	sub	sp, #8
 800b86c:	af00      	add	r7, sp, #0
 800b86e:	6078      	str	r0, [r7, #4]
 800b870:	460b      	mov	r3, r1
 800b872:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b87a:	78fa      	ldrb	r2, [r7, #3]
 800b87c:	4611      	mov	r1, r2
 800b87e:	4618      	mov	r0, r3
 800b880:	f7fe fd43 	bl	800a30a <USBD_LL_IsoOUTIncomplete>
}
 800b884:	bf00      	nop
 800b886:	3708      	adds	r7, #8
 800b888:	46bd      	mov	sp, r7
 800b88a:	bd80      	pop	{r7, pc}

0800b88c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b88c:	b580      	push	{r7, lr}
 800b88e:	b082      	sub	sp, #8
 800b890:	af00      	add	r7, sp, #0
 800b892:	6078      	str	r0, [r7, #4]
 800b894:	460b      	mov	r3, r1
 800b896:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b89e:	78fa      	ldrb	r2, [r7, #3]
 800b8a0:	4611      	mov	r1, r2
 800b8a2:	4618      	mov	r0, r3
 800b8a4:	f7fe fcff 	bl	800a2a6 <USBD_LL_IsoINIncomplete>
}
 800b8a8:	bf00      	nop
 800b8aa:	3708      	adds	r7, #8
 800b8ac:	46bd      	mov	sp, r7
 800b8ae:	bd80      	pop	{r7, pc}

0800b8b0 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b8b0:	b580      	push	{r7, lr}
 800b8b2:	b082      	sub	sp, #8
 800b8b4:	af00      	add	r7, sp, #0
 800b8b6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b8be:	4618      	mov	r0, r3
 800b8c0:	f7fe fd55 	bl	800a36e <USBD_LL_DevConnected>
}
 800b8c4:	bf00      	nop
 800b8c6:	3708      	adds	r7, #8
 800b8c8:	46bd      	mov	sp, r7
 800b8ca:	bd80      	pop	{r7, pc}

0800b8cc <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b8cc:	b580      	push	{r7, lr}
 800b8ce:	b082      	sub	sp, #8
 800b8d0:	af00      	add	r7, sp, #0
 800b8d2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b8da:	4618      	mov	r0, r3
 800b8dc:	f7fe fd52 	bl	800a384 <USBD_LL_DevDisconnected>
}
 800b8e0:	bf00      	nop
 800b8e2:	3708      	adds	r7, #8
 800b8e4:	46bd      	mov	sp, r7
 800b8e6:	bd80      	pop	{r7, pc}

0800b8e8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800b8e8:	b580      	push	{r7, lr}
 800b8ea:	b082      	sub	sp, #8
 800b8ec:	af00      	add	r7, sp, #0
 800b8ee:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_HS) {
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	781b      	ldrb	r3, [r3, #0]
 800b8f4:	2b01      	cmp	r3, #1
 800b8f6:	d140      	bne.n	800b97a <USBD_LL_Init+0x92>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_HS.pData = pdev;
 800b8f8:	4a22      	ldr	r2, [pc, #136]	; (800b984 <USBD_LL_Init+0x9c>)
 800b8fa:	687b      	ldr	r3, [r7, #4]
 800b8fc:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_HS;
 800b900:	687b      	ldr	r3, [r7, #4]
 800b902:	4a20      	ldr	r2, [pc, #128]	; (800b984 <USBD_LL_Init+0x9c>)
 800b904:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 800b908:	4b1e      	ldr	r3, [pc, #120]	; (800b984 <USBD_LL_Init+0x9c>)
 800b90a:	4a1f      	ldr	r2, [pc, #124]	; (800b988 <USBD_LL_Init+0xa0>)
 800b90c:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_HS.Init.dev_endpoints = 6;
 800b90e:	4b1d      	ldr	r3, [pc, #116]	; (800b984 <USBD_LL_Init+0x9c>)
 800b910:	2206      	movs	r2, #6
 800b912:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_FULL;
 800b914:	4b1b      	ldr	r3, [pc, #108]	; (800b984 <USBD_LL_Init+0x9c>)
 800b916:	2202      	movs	r2, #2
 800b918:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 800b91a:	4b1a      	ldr	r3, [pc, #104]	; (800b984 <USBD_LL_Init+0x9c>)
 800b91c:	2200      	movs	r2, #0
 800b91e:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 800b920:	4b18      	ldr	r3, [pc, #96]	; (800b984 <USBD_LL_Init+0x9c>)
 800b922:	2202      	movs	r2, #2
 800b924:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 800b926:	4b17      	ldr	r3, [pc, #92]	; (800b984 <USBD_LL_Init+0x9c>)
 800b928:	2200      	movs	r2, #0
 800b92a:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 800b92c:	4b15      	ldr	r3, [pc, #84]	; (800b984 <USBD_LL_Init+0x9c>)
 800b92e:	2200      	movs	r2, #0
 800b930:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 800b932:	4b14      	ldr	r3, [pc, #80]	; (800b984 <USBD_LL_Init+0x9c>)
 800b934:	2200      	movs	r2, #0
 800b936:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 800b938:	4b12      	ldr	r3, [pc, #72]	; (800b984 <USBD_LL_Init+0x9c>)
 800b93a:	2200      	movs	r2, #0
 800b93c:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 800b93e:	4b11      	ldr	r3, [pc, #68]	; (800b984 <USBD_LL_Init+0x9c>)
 800b940:	2200      	movs	r2, #0
 800b942:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 800b944:	4b0f      	ldr	r3, [pc, #60]	; (800b984 <USBD_LL_Init+0x9c>)
 800b946:	2200      	movs	r2, #0
 800b948:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 800b94a:	480e      	ldr	r0, [pc, #56]	; (800b984 <USBD_LL_Init+0x9c>)
 800b94c:	f7f7 fd08 	bl	8003360 <HAL_PCD_Init>
 800b950:	4603      	mov	r3, r0
 800b952:	2b00      	cmp	r3, #0
 800b954:	d001      	beq.n	800b95a <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 800b956:	f7f6 fa89 	bl	8001e6c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_HS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_HS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_HS, 0x200);
 800b95a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800b95e:	4809      	ldr	r0, [pc, #36]	; (800b984 <USBD_LL_Init+0x9c>)
 800b960:	f7f8 ff5f 	bl	8004822 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 0, 0x80);
 800b964:	2280      	movs	r2, #128	; 0x80
 800b966:	2100      	movs	r1, #0
 800b968:	4806      	ldr	r0, [pc, #24]	; (800b984 <USBD_LL_Init+0x9c>)
 800b96a:	f7f8 ff13 	bl	8004794 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 1, 0x174);
 800b96e:	f44f 72ba 	mov.w	r2, #372	; 0x174
 800b972:	2101      	movs	r1, #1
 800b974:	4803      	ldr	r0, [pc, #12]	; (800b984 <USBD_LL_Init+0x9c>)
 800b976:	f7f8 ff0d 	bl	8004794 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800b97a:	2300      	movs	r3, #0
}
 800b97c:	4618      	mov	r0, r3
 800b97e:	3708      	adds	r7, #8
 800b980:	46bd      	mov	sp, r7
 800b982:	bd80      	pop	{r7, pc}
 800b984:	20001d18 	.word	0x20001d18
 800b988:	40040000 	.word	0x40040000

0800b98c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800b98c:	b580      	push	{r7, lr}
 800b98e:	b084      	sub	sp, #16
 800b990:	af00      	add	r7, sp, #0
 800b992:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b994:	2300      	movs	r3, #0
 800b996:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b998:	2300      	movs	r3, #0
 800b99a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b9a2:	4618      	mov	r0, r3
 800b9a4:	f7f7 fdf9 	bl	800359a <HAL_PCD_Start>
 800b9a8:	4603      	mov	r3, r0
 800b9aa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b9ac:	7bfb      	ldrb	r3, [r7, #15]
 800b9ae:	4618      	mov	r0, r3
 800b9b0:	f000 f942 	bl	800bc38 <USBD_Get_USB_Status>
 800b9b4:	4603      	mov	r3, r0
 800b9b6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b9b8:	7bbb      	ldrb	r3, [r7, #14]
}
 800b9ba:	4618      	mov	r0, r3
 800b9bc:	3710      	adds	r7, #16
 800b9be:	46bd      	mov	sp, r7
 800b9c0:	bd80      	pop	{r7, pc}

0800b9c2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800b9c2:	b580      	push	{r7, lr}
 800b9c4:	b084      	sub	sp, #16
 800b9c6:	af00      	add	r7, sp, #0
 800b9c8:	6078      	str	r0, [r7, #4]
 800b9ca:	4608      	mov	r0, r1
 800b9cc:	4611      	mov	r1, r2
 800b9ce:	461a      	mov	r2, r3
 800b9d0:	4603      	mov	r3, r0
 800b9d2:	70fb      	strb	r3, [r7, #3]
 800b9d4:	460b      	mov	r3, r1
 800b9d6:	70bb      	strb	r3, [r7, #2]
 800b9d8:	4613      	mov	r3, r2
 800b9da:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b9dc:	2300      	movs	r3, #0
 800b9de:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b9e0:	2300      	movs	r3, #0
 800b9e2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800b9ea:	78bb      	ldrb	r3, [r7, #2]
 800b9ec:	883a      	ldrh	r2, [r7, #0]
 800b9ee:	78f9      	ldrb	r1, [r7, #3]
 800b9f0:	f7f8 faca 	bl	8003f88 <HAL_PCD_EP_Open>
 800b9f4:	4603      	mov	r3, r0
 800b9f6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b9f8:	7bfb      	ldrb	r3, [r7, #15]
 800b9fa:	4618      	mov	r0, r3
 800b9fc:	f000 f91c 	bl	800bc38 <USBD_Get_USB_Status>
 800ba00:	4603      	mov	r3, r0
 800ba02:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ba04:	7bbb      	ldrb	r3, [r7, #14]
}
 800ba06:	4618      	mov	r0, r3
 800ba08:	3710      	adds	r7, #16
 800ba0a:	46bd      	mov	sp, r7
 800ba0c:	bd80      	pop	{r7, pc}

0800ba0e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ba0e:	b580      	push	{r7, lr}
 800ba10:	b084      	sub	sp, #16
 800ba12:	af00      	add	r7, sp, #0
 800ba14:	6078      	str	r0, [r7, #4]
 800ba16:	460b      	mov	r3, r1
 800ba18:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ba1a:	2300      	movs	r3, #0
 800ba1c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ba1e:	2300      	movs	r3, #0
 800ba20:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800ba22:	687b      	ldr	r3, [r7, #4]
 800ba24:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800ba28:	78fa      	ldrb	r2, [r7, #3]
 800ba2a:	4611      	mov	r1, r2
 800ba2c:	4618      	mov	r0, r3
 800ba2e:	f7f8 fb13 	bl	8004058 <HAL_PCD_EP_Close>
 800ba32:	4603      	mov	r3, r0
 800ba34:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ba36:	7bfb      	ldrb	r3, [r7, #15]
 800ba38:	4618      	mov	r0, r3
 800ba3a:	f000 f8fd 	bl	800bc38 <USBD_Get_USB_Status>
 800ba3e:	4603      	mov	r3, r0
 800ba40:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ba42:	7bbb      	ldrb	r3, [r7, #14]
}
 800ba44:	4618      	mov	r0, r3
 800ba46:	3710      	adds	r7, #16
 800ba48:	46bd      	mov	sp, r7
 800ba4a:	bd80      	pop	{r7, pc}

0800ba4c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ba4c:	b580      	push	{r7, lr}
 800ba4e:	b084      	sub	sp, #16
 800ba50:	af00      	add	r7, sp, #0
 800ba52:	6078      	str	r0, [r7, #4]
 800ba54:	460b      	mov	r3, r1
 800ba56:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ba58:	2300      	movs	r3, #0
 800ba5a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ba5c:	2300      	movs	r3, #0
 800ba5e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800ba66:	78fa      	ldrb	r2, [r7, #3]
 800ba68:	4611      	mov	r1, r2
 800ba6a:	4618      	mov	r0, r3
 800ba6c:	f7f8 fbeb 	bl	8004246 <HAL_PCD_EP_SetStall>
 800ba70:	4603      	mov	r3, r0
 800ba72:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ba74:	7bfb      	ldrb	r3, [r7, #15]
 800ba76:	4618      	mov	r0, r3
 800ba78:	f000 f8de 	bl	800bc38 <USBD_Get_USB_Status>
 800ba7c:	4603      	mov	r3, r0
 800ba7e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ba80:	7bbb      	ldrb	r3, [r7, #14]
}
 800ba82:	4618      	mov	r0, r3
 800ba84:	3710      	adds	r7, #16
 800ba86:	46bd      	mov	sp, r7
 800ba88:	bd80      	pop	{r7, pc}

0800ba8a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ba8a:	b580      	push	{r7, lr}
 800ba8c:	b084      	sub	sp, #16
 800ba8e:	af00      	add	r7, sp, #0
 800ba90:	6078      	str	r0, [r7, #4]
 800ba92:	460b      	mov	r3, r1
 800ba94:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ba96:	2300      	movs	r3, #0
 800ba98:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ba9a:	2300      	movs	r3, #0
 800ba9c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800ba9e:	687b      	ldr	r3, [r7, #4]
 800baa0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800baa4:	78fa      	ldrb	r2, [r7, #3]
 800baa6:	4611      	mov	r1, r2
 800baa8:	4618      	mov	r0, r3
 800baaa:	f7f8 fc30 	bl	800430e <HAL_PCD_EP_ClrStall>
 800baae:	4603      	mov	r3, r0
 800bab0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bab2:	7bfb      	ldrb	r3, [r7, #15]
 800bab4:	4618      	mov	r0, r3
 800bab6:	f000 f8bf 	bl	800bc38 <USBD_Get_USB_Status>
 800baba:	4603      	mov	r3, r0
 800babc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800babe:	7bbb      	ldrb	r3, [r7, #14]
}
 800bac0:	4618      	mov	r0, r3
 800bac2:	3710      	adds	r7, #16
 800bac4:	46bd      	mov	sp, r7
 800bac6:	bd80      	pop	{r7, pc}

0800bac8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bac8:	b480      	push	{r7}
 800baca:	b085      	sub	sp, #20
 800bacc:	af00      	add	r7, sp, #0
 800bace:	6078      	str	r0, [r7, #4]
 800bad0:	460b      	mov	r3, r1
 800bad2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800bada:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800badc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800bae0:	2b00      	cmp	r3, #0
 800bae2:	da0b      	bge.n	800bafc <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800bae4:	78fb      	ldrb	r3, [r7, #3]
 800bae6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800baea:	68f9      	ldr	r1, [r7, #12]
 800baec:	4613      	mov	r3, r2
 800baee:	00db      	lsls	r3, r3, #3
 800baf0:	4413      	add	r3, r2
 800baf2:	009b      	lsls	r3, r3, #2
 800baf4:	440b      	add	r3, r1
 800baf6:	333e      	adds	r3, #62	; 0x3e
 800baf8:	781b      	ldrb	r3, [r3, #0]
 800bafa:	e00b      	b.n	800bb14 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800bafc:	78fb      	ldrb	r3, [r7, #3]
 800bafe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800bb02:	68f9      	ldr	r1, [r7, #12]
 800bb04:	4613      	mov	r3, r2
 800bb06:	00db      	lsls	r3, r3, #3
 800bb08:	4413      	add	r3, r2
 800bb0a:	009b      	lsls	r3, r3, #2
 800bb0c:	440b      	add	r3, r1
 800bb0e:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800bb12:	781b      	ldrb	r3, [r3, #0]
  }
}
 800bb14:	4618      	mov	r0, r3
 800bb16:	3714      	adds	r7, #20
 800bb18:	46bd      	mov	sp, r7
 800bb1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb1e:	4770      	bx	lr

0800bb20 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800bb20:	b580      	push	{r7, lr}
 800bb22:	b084      	sub	sp, #16
 800bb24:	af00      	add	r7, sp, #0
 800bb26:	6078      	str	r0, [r7, #4]
 800bb28:	460b      	mov	r3, r1
 800bb2a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bb2c:	2300      	movs	r3, #0
 800bb2e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bb30:	2300      	movs	r3, #0
 800bb32:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800bb34:	687b      	ldr	r3, [r7, #4]
 800bb36:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800bb3a:	78fa      	ldrb	r2, [r7, #3]
 800bb3c:	4611      	mov	r1, r2
 800bb3e:	4618      	mov	r0, r3
 800bb40:	f7f8 f9fd 	bl	8003f3e <HAL_PCD_SetAddress>
 800bb44:	4603      	mov	r3, r0
 800bb46:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bb48:	7bfb      	ldrb	r3, [r7, #15]
 800bb4a:	4618      	mov	r0, r3
 800bb4c:	f000 f874 	bl	800bc38 <USBD_Get_USB_Status>
 800bb50:	4603      	mov	r3, r0
 800bb52:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bb54:	7bbb      	ldrb	r3, [r7, #14]
}
 800bb56:	4618      	mov	r0, r3
 800bb58:	3710      	adds	r7, #16
 800bb5a:	46bd      	mov	sp, r7
 800bb5c:	bd80      	pop	{r7, pc}

0800bb5e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800bb5e:	b580      	push	{r7, lr}
 800bb60:	b086      	sub	sp, #24
 800bb62:	af00      	add	r7, sp, #0
 800bb64:	60f8      	str	r0, [r7, #12]
 800bb66:	607a      	str	r2, [r7, #4]
 800bb68:	603b      	str	r3, [r7, #0]
 800bb6a:	460b      	mov	r3, r1
 800bb6c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bb6e:	2300      	movs	r3, #0
 800bb70:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bb72:	2300      	movs	r3, #0
 800bb74:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800bb76:	68fb      	ldr	r3, [r7, #12]
 800bb78:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800bb7c:	7af9      	ldrb	r1, [r7, #11]
 800bb7e:	683b      	ldr	r3, [r7, #0]
 800bb80:	687a      	ldr	r2, [r7, #4]
 800bb82:	f7f8 fb16 	bl	80041b2 <HAL_PCD_EP_Transmit>
 800bb86:	4603      	mov	r3, r0
 800bb88:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bb8a:	7dfb      	ldrb	r3, [r7, #23]
 800bb8c:	4618      	mov	r0, r3
 800bb8e:	f000 f853 	bl	800bc38 <USBD_Get_USB_Status>
 800bb92:	4603      	mov	r3, r0
 800bb94:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800bb96:	7dbb      	ldrb	r3, [r7, #22]
}
 800bb98:	4618      	mov	r0, r3
 800bb9a:	3718      	adds	r7, #24
 800bb9c:	46bd      	mov	sp, r7
 800bb9e:	bd80      	pop	{r7, pc}

0800bba0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800bba0:	b580      	push	{r7, lr}
 800bba2:	b086      	sub	sp, #24
 800bba4:	af00      	add	r7, sp, #0
 800bba6:	60f8      	str	r0, [r7, #12]
 800bba8:	607a      	str	r2, [r7, #4]
 800bbaa:	603b      	str	r3, [r7, #0]
 800bbac:	460b      	mov	r3, r1
 800bbae:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bbb0:	2300      	movs	r3, #0
 800bbb2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bbb4:	2300      	movs	r3, #0
 800bbb6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800bbb8:	68fb      	ldr	r3, [r7, #12]
 800bbba:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800bbbe:	7af9      	ldrb	r1, [r7, #11]
 800bbc0:	683b      	ldr	r3, [r7, #0]
 800bbc2:	687a      	ldr	r2, [r7, #4]
 800bbc4:	f7f8 fa92 	bl	80040ec <HAL_PCD_EP_Receive>
 800bbc8:	4603      	mov	r3, r0
 800bbca:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bbcc:	7dfb      	ldrb	r3, [r7, #23]
 800bbce:	4618      	mov	r0, r3
 800bbd0:	f000 f832 	bl	800bc38 <USBD_Get_USB_Status>
 800bbd4:	4603      	mov	r3, r0
 800bbd6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800bbd8:	7dbb      	ldrb	r3, [r7, #22]
}
 800bbda:	4618      	mov	r0, r3
 800bbdc:	3718      	adds	r7, #24
 800bbde:	46bd      	mov	sp, r7
 800bbe0:	bd80      	pop	{r7, pc}

0800bbe2 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bbe2:	b580      	push	{r7, lr}
 800bbe4:	b082      	sub	sp, #8
 800bbe6:	af00      	add	r7, sp, #0
 800bbe8:	6078      	str	r0, [r7, #4]
 800bbea:	460b      	mov	r3, r1
 800bbec:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800bbee:	687b      	ldr	r3, [r7, #4]
 800bbf0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800bbf4:	78fa      	ldrb	r2, [r7, #3]
 800bbf6:	4611      	mov	r1, r2
 800bbf8:	4618      	mov	r0, r3
 800bbfa:	f7f8 fac2 	bl	8004182 <HAL_PCD_EP_GetRxCount>
 800bbfe:	4603      	mov	r3, r0
}
 800bc00:	4618      	mov	r0, r3
 800bc02:	3708      	adds	r7, #8
 800bc04:	46bd      	mov	sp, r7
 800bc06:	bd80      	pop	{r7, pc}

0800bc08 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800bc08:	b480      	push	{r7}
 800bc0a:	b083      	sub	sp, #12
 800bc0c:	af00      	add	r7, sp, #0
 800bc0e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800bc10:	4b03      	ldr	r3, [pc, #12]	; (800bc20 <USBD_static_malloc+0x18>)
}
 800bc12:	4618      	mov	r0, r3
 800bc14:	370c      	adds	r7, #12
 800bc16:	46bd      	mov	sp, r7
 800bc18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc1c:	4770      	bx	lr
 800bc1e:	bf00      	nop
 800bc20:	20002224 	.word	0x20002224

0800bc24 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800bc24:	b480      	push	{r7}
 800bc26:	b083      	sub	sp, #12
 800bc28:	af00      	add	r7, sp, #0
 800bc2a:	6078      	str	r0, [r7, #4]

}
 800bc2c:	bf00      	nop
 800bc2e:	370c      	adds	r7, #12
 800bc30:	46bd      	mov	sp, r7
 800bc32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc36:	4770      	bx	lr

0800bc38 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800bc38:	b480      	push	{r7}
 800bc3a:	b085      	sub	sp, #20
 800bc3c:	af00      	add	r7, sp, #0
 800bc3e:	4603      	mov	r3, r0
 800bc40:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bc42:	2300      	movs	r3, #0
 800bc44:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800bc46:	79fb      	ldrb	r3, [r7, #7]
 800bc48:	2b03      	cmp	r3, #3
 800bc4a:	d817      	bhi.n	800bc7c <USBD_Get_USB_Status+0x44>
 800bc4c:	a201      	add	r2, pc, #4	; (adr r2, 800bc54 <USBD_Get_USB_Status+0x1c>)
 800bc4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc52:	bf00      	nop
 800bc54:	0800bc65 	.word	0x0800bc65
 800bc58:	0800bc6b 	.word	0x0800bc6b
 800bc5c:	0800bc71 	.word	0x0800bc71
 800bc60:	0800bc77 	.word	0x0800bc77
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800bc64:	2300      	movs	r3, #0
 800bc66:	73fb      	strb	r3, [r7, #15]
    break;
 800bc68:	e00b      	b.n	800bc82 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800bc6a:	2303      	movs	r3, #3
 800bc6c:	73fb      	strb	r3, [r7, #15]
    break;
 800bc6e:	e008      	b.n	800bc82 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800bc70:	2301      	movs	r3, #1
 800bc72:	73fb      	strb	r3, [r7, #15]
    break;
 800bc74:	e005      	b.n	800bc82 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800bc76:	2303      	movs	r3, #3
 800bc78:	73fb      	strb	r3, [r7, #15]
    break;
 800bc7a:	e002      	b.n	800bc82 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800bc7c:	2303      	movs	r3, #3
 800bc7e:	73fb      	strb	r3, [r7, #15]
    break;
 800bc80:	bf00      	nop
  }
  return usb_status;
 800bc82:	7bfb      	ldrb	r3, [r7, #15]
}
 800bc84:	4618      	mov	r0, r3
 800bc86:	3714      	adds	r7, #20
 800bc88:	46bd      	mov	sp, r7
 800bc8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc8e:	4770      	bx	lr

0800bc90 <__errno>:
 800bc90:	4b01      	ldr	r3, [pc, #4]	; (800bc98 <__errno+0x8>)
 800bc92:	6818      	ldr	r0, [r3, #0]
 800bc94:	4770      	bx	lr
 800bc96:	bf00      	nop
 800bc98:	2000010c 	.word	0x2000010c

0800bc9c <__libc_init_array>:
 800bc9c:	b570      	push	{r4, r5, r6, lr}
 800bc9e:	4d0d      	ldr	r5, [pc, #52]	; (800bcd4 <__libc_init_array+0x38>)
 800bca0:	4c0d      	ldr	r4, [pc, #52]	; (800bcd8 <__libc_init_array+0x3c>)
 800bca2:	1b64      	subs	r4, r4, r5
 800bca4:	10a4      	asrs	r4, r4, #2
 800bca6:	2600      	movs	r6, #0
 800bca8:	42a6      	cmp	r6, r4
 800bcaa:	d109      	bne.n	800bcc0 <__libc_init_array+0x24>
 800bcac:	4d0b      	ldr	r5, [pc, #44]	; (800bcdc <__libc_init_array+0x40>)
 800bcae:	4c0c      	ldr	r4, [pc, #48]	; (800bce0 <__libc_init_array+0x44>)
 800bcb0:	f000 fdfa 	bl	800c8a8 <_init>
 800bcb4:	1b64      	subs	r4, r4, r5
 800bcb6:	10a4      	asrs	r4, r4, #2
 800bcb8:	2600      	movs	r6, #0
 800bcba:	42a6      	cmp	r6, r4
 800bcbc:	d105      	bne.n	800bcca <__libc_init_array+0x2e>
 800bcbe:	bd70      	pop	{r4, r5, r6, pc}
 800bcc0:	f855 3b04 	ldr.w	r3, [r5], #4
 800bcc4:	4798      	blx	r3
 800bcc6:	3601      	adds	r6, #1
 800bcc8:	e7ee      	b.n	800bca8 <__libc_init_array+0xc>
 800bcca:	f855 3b04 	ldr.w	r3, [r5], #4
 800bcce:	4798      	blx	r3
 800bcd0:	3601      	adds	r6, #1
 800bcd2:	e7f2      	b.n	800bcba <__libc_init_array+0x1e>
 800bcd4:	0800c9c8 	.word	0x0800c9c8
 800bcd8:	0800c9c8 	.word	0x0800c9c8
 800bcdc:	0800c9c8 	.word	0x0800c9c8
 800bce0:	0800c9cc 	.word	0x0800c9cc

0800bce4 <memcpy>:
 800bce4:	440a      	add	r2, r1
 800bce6:	4291      	cmp	r1, r2
 800bce8:	f100 33ff 	add.w	r3, r0, #4294967295
 800bcec:	d100      	bne.n	800bcf0 <memcpy+0xc>
 800bcee:	4770      	bx	lr
 800bcf0:	b510      	push	{r4, lr}
 800bcf2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bcf6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bcfa:	4291      	cmp	r1, r2
 800bcfc:	d1f9      	bne.n	800bcf2 <memcpy+0xe>
 800bcfe:	bd10      	pop	{r4, pc}

0800bd00 <memset>:
 800bd00:	4402      	add	r2, r0
 800bd02:	4603      	mov	r3, r0
 800bd04:	4293      	cmp	r3, r2
 800bd06:	d100      	bne.n	800bd0a <memset+0xa>
 800bd08:	4770      	bx	lr
 800bd0a:	f803 1b01 	strb.w	r1, [r3], #1
 800bd0e:	e7f9      	b.n	800bd04 <memset+0x4>

0800bd10 <_puts_r>:
 800bd10:	b570      	push	{r4, r5, r6, lr}
 800bd12:	460e      	mov	r6, r1
 800bd14:	4605      	mov	r5, r0
 800bd16:	b118      	cbz	r0, 800bd20 <_puts_r+0x10>
 800bd18:	6983      	ldr	r3, [r0, #24]
 800bd1a:	b90b      	cbnz	r3, 800bd20 <_puts_r+0x10>
 800bd1c:	f000 fb0e 	bl	800c33c <__sinit>
 800bd20:	69ab      	ldr	r3, [r5, #24]
 800bd22:	68ac      	ldr	r4, [r5, #8]
 800bd24:	b913      	cbnz	r3, 800bd2c <_puts_r+0x1c>
 800bd26:	4628      	mov	r0, r5
 800bd28:	f000 fb08 	bl	800c33c <__sinit>
 800bd2c:	4b2c      	ldr	r3, [pc, #176]	; (800bde0 <_puts_r+0xd0>)
 800bd2e:	429c      	cmp	r4, r3
 800bd30:	d120      	bne.n	800bd74 <_puts_r+0x64>
 800bd32:	686c      	ldr	r4, [r5, #4]
 800bd34:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800bd36:	07db      	lsls	r3, r3, #31
 800bd38:	d405      	bmi.n	800bd46 <_puts_r+0x36>
 800bd3a:	89a3      	ldrh	r3, [r4, #12]
 800bd3c:	0598      	lsls	r0, r3, #22
 800bd3e:	d402      	bmi.n	800bd46 <_puts_r+0x36>
 800bd40:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bd42:	f000 fb99 	bl	800c478 <__retarget_lock_acquire_recursive>
 800bd46:	89a3      	ldrh	r3, [r4, #12]
 800bd48:	0719      	lsls	r1, r3, #28
 800bd4a:	d51d      	bpl.n	800bd88 <_puts_r+0x78>
 800bd4c:	6923      	ldr	r3, [r4, #16]
 800bd4e:	b1db      	cbz	r3, 800bd88 <_puts_r+0x78>
 800bd50:	3e01      	subs	r6, #1
 800bd52:	68a3      	ldr	r3, [r4, #8]
 800bd54:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800bd58:	3b01      	subs	r3, #1
 800bd5a:	60a3      	str	r3, [r4, #8]
 800bd5c:	bb39      	cbnz	r1, 800bdae <_puts_r+0x9e>
 800bd5e:	2b00      	cmp	r3, #0
 800bd60:	da38      	bge.n	800bdd4 <_puts_r+0xc4>
 800bd62:	4622      	mov	r2, r4
 800bd64:	210a      	movs	r1, #10
 800bd66:	4628      	mov	r0, r5
 800bd68:	f000 f90e 	bl	800bf88 <__swbuf_r>
 800bd6c:	3001      	adds	r0, #1
 800bd6e:	d011      	beq.n	800bd94 <_puts_r+0x84>
 800bd70:	250a      	movs	r5, #10
 800bd72:	e011      	b.n	800bd98 <_puts_r+0x88>
 800bd74:	4b1b      	ldr	r3, [pc, #108]	; (800bde4 <_puts_r+0xd4>)
 800bd76:	429c      	cmp	r4, r3
 800bd78:	d101      	bne.n	800bd7e <_puts_r+0x6e>
 800bd7a:	68ac      	ldr	r4, [r5, #8]
 800bd7c:	e7da      	b.n	800bd34 <_puts_r+0x24>
 800bd7e:	4b1a      	ldr	r3, [pc, #104]	; (800bde8 <_puts_r+0xd8>)
 800bd80:	429c      	cmp	r4, r3
 800bd82:	bf08      	it	eq
 800bd84:	68ec      	ldreq	r4, [r5, #12]
 800bd86:	e7d5      	b.n	800bd34 <_puts_r+0x24>
 800bd88:	4621      	mov	r1, r4
 800bd8a:	4628      	mov	r0, r5
 800bd8c:	f000 f94e 	bl	800c02c <__swsetup_r>
 800bd90:	2800      	cmp	r0, #0
 800bd92:	d0dd      	beq.n	800bd50 <_puts_r+0x40>
 800bd94:	f04f 35ff 	mov.w	r5, #4294967295
 800bd98:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800bd9a:	07da      	lsls	r2, r3, #31
 800bd9c:	d405      	bmi.n	800bdaa <_puts_r+0x9a>
 800bd9e:	89a3      	ldrh	r3, [r4, #12]
 800bda0:	059b      	lsls	r3, r3, #22
 800bda2:	d402      	bmi.n	800bdaa <_puts_r+0x9a>
 800bda4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bda6:	f000 fb68 	bl	800c47a <__retarget_lock_release_recursive>
 800bdaa:	4628      	mov	r0, r5
 800bdac:	bd70      	pop	{r4, r5, r6, pc}
 800bdae:	2b00      	cmp	r3, #0
 800bdb0:	da04      	bge.n	800bdbc <_puts_r+0xac>
 800bdb2:	69a2      	ldr	r2, [r4, #24]
 800bdb4:	429a      	cmp	r2, r3
 800bdb6:	dc06      	bgt.n	800bdc6 <_puts_r+0xb6>
 800bdb8:	290a      	cmp	r1, #10
 800bdba:	d004      	beq.n	800bdc6 <_puts_r+0xb6>
 800bdbc:	6823      	ldr	r3, [r4, #0]
 800bdbe:	1c5a      	adds	r2, r3, #1
 800bdc0:	6022      	str	r2, [r4, #0]
 800bdc2:	7019      	strb	r1, [r3, #0]
 800bdc4:	e7c5      	b.n	800bd52 <_puts_r+0x42>
 800bdc6:	4622      	mov	r2, r4
 800bdc8:	4628      	mov	r0, r5
 800bdca:	f000 f8dd 	bl	800bf88 <__swbuf_r>
 800bdce:	3001      	adds	r0, #1
 800bdd0:	d1bf      	bne.n	800bd52 <_puts_r+0x42>
 800bdd2:	e7df      	b.n	800bd94 <_puts_r+0x84>
 800bdd4:	6823      	ldr	r3, [r4, #0]
 800bdd6:	250a      	movs	r5, #10
 800bdd8:	1c5a      	adds	r2, r3, #1
 800bdda:	6022      	str	r2, [r4, #0]
 800bddc:	701d      	strb	r5, [r3, #0]
 800bdde:	e7db      	b.n	800bd98 <_puts_r+0x88>
 800bde0:	0800c980 	.word	0x0800c980
 800bde4:	0800c9a0 	.word	0x0800c9a0
 800bde8:	0800c960 	.word	0x0800c960

0800bdec <puts>:
 800bdec:	4b02      	ldr	r3, [pc, #8]	; (800bdf8 <puts+0xc>)
 800bdee:	4601      	mov	r1, r0
 800bdf0:	6818      	ldr	r0, [r3, #0]
 800bdf2:	f7ff bf8d 	b.w	800bd10 <_puts_r>
 800bdf6:	bf00      	nop
 800bdf8:	2000010c 	.word	0x2000010c

0800bdfc <setvbuf>:
 800bdfc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800be00:	461d      	mov	r5, r3
 800be02:	4b5d      	ldr	r3, [pc, #372]	; (800bf78 <setvbuf+0x17c>)
 800be04:	681f      	ldr	r7, [r3, #0]
 800be06:	4604      	mov	r4, r0
 800be08:	460e      	mov	r6, r1
 800be0a:	4690      	mov	r8, r2
 800be0c:	b127      	cbz	r7, 800be18 <setvbuf+0x1c>
 800be0e:	69bb      	ldr	r3, [r7, #24]
 800be10:	b913      	cbnz	r3, 800be18 <setvbuf+0x1c>
 800be12:	4638      	mov	r0, r7
 800be14:	f000 fa92 	bl	800c33c <__sinit>
 800be18:	4b58      	ldr	r3, [pc, #352]	; (800bf7c <setvbuf+0x180>)
 800be1a:	429c      	cmp	r4, r3
 800be1c:	d167      	bne.n	800beee <setvbuf+0xf2>
 800be1e:	687c      	ldr	r4, [r7, #4]
 800be20:	f1b8 0f02 	cmp.w	r8, #2
 800be24:	d006      	beq.n	800be34 <setvbuf+0x38>
 800be26:	f1b8 0f01 	cmp.w	r8, #1
 800be2a:	f200 809f 	bhi.w	800bf6c <setvbuf+0x170>
 800be2e:	2d00      	cmp	r5, #0
 800be30:	f2c0 809c 	blt.w	800bf6c <setvbuf+0x170>
 800be34:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800be36:	07db      	lsls	r3, r3, #31
 800be38:	d405      	bmi.n	800be46 <setvbuf+0x4a>
 800be3a:	89a3      	ldrh	r3, [r4, #12]
 800be3c:	0598      	lsls	r0, r3, #22
 800be3e:	d402      	bmi.n	800be46 <setvbuf+0x4a>
 800be40:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800be42:	f000 fb19 	bl	800c478 <__retarget_lock_acquire_recursive>
 800be46:	4621      	mov	r1, r4
 800be48:	4638      	mov	r0, r7
 800be4a:	f000 f9e3 	bl	800c214 <_fflush_r>
 800be4e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800be50:	b141      	cbz	r1, 800be64 <setvbuf+0x68>
 800be52:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800be56:	4299      	cmp	r1, r3
 800be58:	d002      	beq.n	800be60 <setvbuf+0x64>
 800be5a:	4638      	mov	r0, r7
 800be5c:	f000 fb7c 	bl	800c558 <_free_r>
 800be60:	2300      	movs	r3, #0
 800be62:	6363      	str	r3, [r4, #52]	; 0x34
 800be64:	2300      	movs	r3, #0
 800be66:	61a3      	str	r3, [r4, #24]
 800be68:	6063      	str	r3, [r4, #4]
 800be6a:	89a3      	ldrh	r3, [r4, #12]
 800be6c:	0619      	lsls	r1, r3, #24
 800be6e:	d503      	bpl.n	800be78 <setvbuf+0x7c>
 800be70:	6921      	ldr	r1, [r4, #16]
 800be72:	4638      	mov	r0, r7
 800be74:	f000 fb70 	bl	800c558 <_free_r>
 800be78:	89a3      	ldrh	r3, [r4, #12]
 800be7a:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 800be7e:	f023 0303 	bic.w	r3, r3, #3
 800be82:	f1b8 0f02 	cmp.w	r8, #2
 800be86:	81a3      	strh	r3, [r4, #12]
 800be88:	d06c      	beq.n	800bf64 <setvbuf+0x168>
 800be8a:	ab01      	add	r3, sp, #4
 800be8c:	466a      	mov	r2, sp
 800be8e:	4621      	mov	r1, r4
 800be90:	4638      	mov	r0, r7
 800be92:	f000 faf3 	bl	800c47c <__swhatbuf_r>
 800be96:	89a3      	ldrh	r3, [r4, #12]
 800be98:	4318      	orrs	r0, r3
 800be9a:	81a0      	strh	r0, [r4, #12]
 800be9c:	2d00      	cmp	r5, #0
 800be9e:	d130      	bne.n	800bf02 <setvbuf+0x106>
 800bea0:	9d00      	ldr	r5, [sp, #0]
 800bea2:	4628      	mov	r0, r5
 800bea4:	f000 fb50 	bl	800c548 <malloc>
 800bea8:	4606      	mov	r6, r0
 800beaa:	2800      	cmp	r0, #0
 800beac:	d155      	bne.n	800bf5a <setvbuf+0x15e>
 800beae:	f8dd 9000 	ldr.w	r9, [sp]
 800beb2:	45a9      	cmp	r9, r5
 800beb4:	d14a      	bne.n	800bf4c <setvbuf+0x150>
 800beb6:	f04f 35ff 	mov.w	r5, #4294967295
 800beba:	2200      	movs	r2, #0
 800bebc:	60a2      	str	r2, [r4, #8]
 800bebe:	f104 0247 	add.w	r2, r4, #71	; 0x47
 800bec2:	6022      	str	r2, [r4, #0]
 800bec4:	6122      	str	r2, [r4, #16]
 800bec6:	2201      	movs	r2, #1
 800bec8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800becc:	6162      	str	r2, [r4, #20]
 800bece:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800bed0:	f043 0302 	orr.w	r3, r3, #2
 800bed4:	07d2      	lsls	r2, r2, #31
 800bed6:	81a3      	strh	r3, [r4, #12]
 800bed8:	d405      	bmi.n	800bee6 <setvbuf+0xea>
 800beda:	f413 7f00 	tst.w	r3, #512	; 0x200
 800bede:	d102      	bne.n	800bee6 <setvbuf+0xea>
 800bee0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bee2:	f000 faca 	bl	800c47a <__retarget_lock_release_recursive>
 800bee6:	4628      	mov	r0, r5
 800bee8:	b003      	add	sp, #12
 800beea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800beee:	4b24      	ldr	r3, [pc, #144]	; (800bf80 <setvbuf+0x184>)
 800bef0:	429c      	cmp	r4, r3
 800bef2:	d101      	bne.n	800bef8 <setvbuf+0xfc>
 800bef4:	68bc      	ldr	r4, [r7, #8]
 800bef6:	e793      	b.n	800be20 <setvbuf+0x24>
 800bef8:	4b22      	ldr	r3, [pc, #136]	; (800bf84 <setvbuf+0x188>)
 800befa:	429c      	cmp	r4, r3
 800befc:	bf08      	it	eq
 800befe:	68fc      	ldreq	r4, [r7, #12]
 800bf00:	e78e      	b.n	800be20 <setvbuf+0x24>
 800bf02:	2e00      	cmp	r6, #0
 800bf04:	d0cd      	beq.n	800bea2 <setvbuf+0xa6>
 800bf06:	69bb      	ldr	r3, [r7, #24]
 800bf08:	b913      	cbnz	r3, 800bf10 <setvbuf+0x114>
 800bf0a:	4638      	mov	r0, r7
 800bf0c:	f000 fa16 	bl	800c33c <__sinit>
 800bf10:	f1b8 0f01 	cmp.w	r8, #1
 800bf14:	bf08      	it	eq
 800bf16:	89a3      	ldrheq	r3, [r4, #12]
 800bf18:	6026      	str	r6, [r4, #0]
 800bf1a:	bf04      	itt	eq
 800bf1c:	f043 0301 	orreq.w	r3, r3, #1
 800bf20:	81a3      	strheq	r3, [r4, #12]
 800bf22:	89a2      	ldrh	r2, [r4, #12]
 800bf24:	f012 0308 	ands.w	r3, r2, #8
 800bf28:	e9c4 6504 	strd	r6, r5, [r4, #16]
 800bf2c:	d01c      	beq.n	800bf68 <setvbuf+0x16c>
 800bf2e:	07d3      	lsls	r3, r2, #31
 800bf30:	bf41      	itttt	mi
 800bf32:	2300      	movmi	r3, #0
 800bf34:	426d      	negmi	r5, r5
 800bf36:	60a3      	strmi	r3, [r4, #8]
 800bf38:	61a5      	strmi	r5, [r4, #24]
 800bf3a:	bf58      	it	pl
 800bf3c:	60a5      	strpl	r5, [r4, #8]
 800bf3e:	6e65      	ldr	r5, [r4, #100]	; 0x64
 800bf40:	f015 0501 	ands.w	r5, r5, #1
 800bf44:	d115      	bne.n	800bf72 <setvbuf+0x176>
 800bf46:	f412 7f00 	tst.w	r2, #512	; 0x200
 800bf4a:	e7c8      	b.n	800bede <setvbuf+0xe2>
 800bf4c:	4648      	mov	r0, r9
 800bf4e:	f000 fafb 	bl	800c548 <malloc>
 800bf52:	4606      	mov	r6, r0
 800bf54:	2800      	cmp	r0, #0
 800bf56:	d0ae      	beq.n	800beb6 <setvbuf+0xba>
 800bf58:	464d      	mov	r5, r9
 800bf5a:	89a3      	ldrh	r3, [r4, #12]
 800bf5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bf60:	81a3      	strh	r3, [r4, #12]
 800bf62:	e7d0      	b.n	800bf06 <setvbuf+0x10a>
 800bf64:	2500      	movs	r5, #0
 800bf66:	e7a8      	b.n	800beba <setvbuf+0xbe>
 800bf68:	60a3      	str	r3, [r4, #8]
 800bf6a:	e7e8      	b.n	800bf3e <setvbuf+0x142>
 800bf6c:	f04f 35ff 	mov.w	r5, #4294967295
 800bf70:	e7b9      	b.n	800bee6 <setvbuf+0xea>
 800bf72:	2500      	movs	r5, #0
 800bf74:	e7b7      	b.n	800bee6 <setvbuf+0xea>
 800bf76:	bf00      	nop
 800bf78:	2000010c 	.word	0x2000010c
 800bf7c:	0800c980 	.word	0x0800c980
 800bf80:	0800c9a0 	.word	0x0800c9a0
 800bf84:	0800c960 	.word	0x0800c960

0800bf88 <__swbuf_r>:
 800bf88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bf8a:	460e      	mov	r6, r1
 800bf8c:	4614      	mov	r4, r2
 800bf8e:	4605      	mov	r5, r0
 800bf90:	b118      	cbz	r0, 800bf9a <__swbuf_r+0x12>
 800bf92:	6983      	ldr	r3, [r0, #24]
 800bf94:	b90b      	cbnz	r3, 800bf9a <__swbuf_r+0x12>
 800bf96:	f000 f9d1 	bl	800c33c <__sinit>
 800bf9a:	4b21      	ldr	r3, [pc, #132]	; (800c020 <__swbuf_r+0x98>)
 800bf9c:	429c      	cmp	r4, r3
 800bf9e:	d12b      	bne.n	800bff8 <__swbuf_r+0x70>
 800bfa0:	686c      	ldr	r4, [r5, #4]
 800bfa2:	69a3      	ldr	r3, [r4, #24]
 800bfa4:	60a3      	str	r3, [r4, #8]
 800bfa6:	89a3      	ldrh	r3, [r4, #12]
 800bfa8:	071a      	lsls	r2, r3, #28
 800bfaa:	d52f      	bpl.n	800c00c <__swbuf_r+0x84>
 800bfac:	6923      	ldr	r3, [r4, #16]
 800bfae:	b36b      	cbz	r3, 800c00c <__swbuf_r+0x84>
 800bfb0:	6923      	ldr	r3, [r4, #16]
 800bfb2:	6820      	ldr	r0, [r4, #0]
 800bfb4:	1ac0      	subs	r0, r0, r3
 800bfb6:	6963      	ldr	r3, [r4, #20]
 800bfb8:	b2f6      	uxtb	r6, r6
 800bfba:	4283      	cmp	r3, r0
 800bfbc:	4637      	mov	r7, r6
 800bfbe:	dc04      	bgt.n	800bfca <__swbuf_r+0x42>
 800bfc0:	4621      	mov	r1, r4
 800bfc2:	4628      	mov	r0, r5
 800bfc4:	f000 f926 	bl	800c214 <_fflush_r>
 800bfc8:	bb30      	cbnz	r0, 800c018 <__swbuf_r+0x90>
 800bfca:	68a3      	ldr	r3, [r4, #8]
 800bfcc:	3b01      	subs	r3, #1
 800bfce:	60a3      	str	r3, [r4, #8]
 800bfd0:	6823      	ldr	r3, [r4, #0]
 800bfd2:	1c5a      	adds	r2, r3, #1
 800bfd4:	6022      	str	r2, [r4, #0]
 800bfd6:	701e      	strb	r6, [r3, #0]
 800bfd8:	6963      	ldr	r3, [r4, #20]
 800bfda:	3001      	adds	r0, #1
 800bfdc:	4283      	cmp	r3, r0
 800bfde:	d004      	beq.n	800bfea <__swbuf_r+0x62>
 800bfe0:	89a3      	ldrh	r3, [r4, #12]
 800bfe2:	07db      	lsls	r3, r3, #31
 800bfe4:	d506      	bpl.n	800bff4 <__swbuf_r+0x6c>
 800bfe6:	2e0a      	cmp	r6, #10
 800bfe8:	d104      	bne.n	800bff4 <__swbuf_r+0x6c>
 800bfea:	4621      	mov	r1, r4
 800bfec:	4628      	mov	r0, r5
 800bfee:	f000 f911 	bl	800c214 <_fflush_r>
 800bff2:	b988      	cbnz	r0, 800c018 <__swbuf_r+0x90>
 800bff4:	4638      	mov	r0, r7
 800bff6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bff8:	4b0a      	ldr	r3, [pc, #40]	; (800c024 <__swbuf_r+0x9c>)
 800bffa:	429c      	cmp	r4, r3
 800bffc:	d101      	bne.n	800c002 <__swbuf_r+0x7a>
 800bffe:	68ac      	ldr	r4, [r5, #8]
 800c000:	e7cf      	b.n	800bfa2 <__swbuf_r+0x1a>
 800c002:	4b09      	ldr	r3, [pc, #36]	; (800c028 <__swbuf_r+0xa0>)
 800c004:	429c      	cmp	r4, r3
 800c006:	bf08      	it	eq
 800c008:	68ec      	ldreq	r4, [r5, #12]
 800c00a:	e7ca      	b.n	800bfa2 <__swbuf_r+0x1a>
 800c00c:	4621      	mov	r1, r4
 800c00e:	4628      	mov	r0, r5
 800c010:	f000 f80c 	bl	800c02c <__swsetup_r>
 800c014:	2800      	cmp	r0, #0
 800c016:	d0cb      	beq.n	800bfb0 <__swbuf_r+0x28>
 800c018:	f04f 37ff 	mov.w	r7, #4294967295
 800c01c:	e7ea      	b.n	800bff4 <__swbuf_r+0x6c>
 800c01e:	bf00      	nop
 800c020:	0800c980 	.word	0x0800c980
 800c024:	0800c9a0 	.word	0x0800c9a0
 800c028:	0800c960 	.word	0x0800c960

0800c02c <__swsetup_r>:
 800c02c:	4b32      	ldr	r3, [pc, #200]	; (800c0f8 <__swsetup_r+0xcc>)
 800c02e:	b570      	push	{r4, r5, r6, lr}
 800c030:	681d      	ldr	r5, [r3, #0]
 800c032:	4606      	mov	r6, r0
 800c034:	460c      	mov	r4, r1
 800c036:	b125      	cbz	r5, 800c042 <__swsetup_r+0x16>
 800c038:	69ab      	ldr	r3, [r5, #24]
 800c03a:	b913      	cbnz	r3, 800c042 <__swsetup_r+0x16>
 800c03c:	4628      	mov	r0, r5
 800c03e:	f000 f97d 	bl	800c33c <__sinit>
 800c042:	4b2e      	ldr	r3, [pc, #184]	; (800c0fc <__swsetup_r+0xd0>)
 800c044:	429c      	cmp	r4, r3
 800c046:	d10f      	bne.n	800c068 <__swsetup_r+0x3c>
 800c048:	686c      	ldr	r4, [r5, #4]
 800c04a:	89a3      	ldrh	r3, [r4, #12]
 800c04c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c050:	0719      	lsls	r1, r3, #28
 800c052:	d42c      	bmi.n	800c0ae <__swsetup_r+0x82>
 800c054:	06dd      	lsls	r5, r3, #27
 800c056:	d411      	bmi.n	800c07c <__swsetup_r+0x50>
 800c058:	2309      	movs	r3, #9
 800c05a:	6033      	str	r3, [r6, #0]
 800c05c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800c060:	81a3      	strh	r3, [r4, #12]
 800c062:	f04f 30ff 	mov.w	r0, #4294967295
 800c066:	e03e      	b.n	800c0e6 <__swsetup_r+0xba>
 800c068:	4b25      	ldr	r3, [pc, #148]	; (800c100 <__swsetup_r+0xd4>)
 800c06a:	429c      	cmp	r4, r3
 800c06c:	d101      	bne.n	800c072 <__swsetup_r+0x46>
 800c06e:	68ac      	ldr	r4, [r5, #8]
 800c070:	e7eb      	b.n	800c04a <__swsetup_r+0x1e>
 800c072:	4b24      	ldr	r3, [pc, #144]	; (800c104 <__swsetup_r+0xd8>)
 800c074:	429c      	cmp	r4, r3
 800c076:	bf08      	it	eq
 800c078:	68ec      	ldreq	r4, [r5, #12]
 800c07a:	e7e6      	b.n	800c04a <__swsetup_r+0x1e>
 800c07c:	0758      	lsls	r0, r3, #29
 800c07e:	d512      	bpl.n	800c0a6 <__swsetup_r+0x7a>
 800c080:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c082:	b141      	cbz	r1, 800c096 <__swsetup_r+0x6a>
 800c084:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c088:	4299      	cmp	r1, r3
 800c08a:	d002      	beq.n	800c092 <__swsetup_r+0x66>
 800c08c:	4630      	mov	r0, r6
 800c08e:	f000 fa63 	bl	800c558 <_free_r>
 800c092:	2300      	movs	r3, #0
 800c094:	6363      	str	r3, [r4, #52]	; 0x34
 800c096:	89a3      	ldrh	r3, [r4, #12]
 800c098:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800c09c:	81a3      	strh	r3, [r4, #12]
 800c09e:	2300      	movs	r3, #0
 800c0a0:	6063      	str	r3, [r4, #4]
 800c0a2:	6923      	ldr	r3, [r4, #16]
 800c0a4:	6023      	str	r3, [r4, #0]
 800c0a6:	89a3      	ldrh	r3, [r4, #12]
 800c0a8:	f043 0308 	orr.w	r3, r3, #8
 800c0ac:	81a3      	strh	r3, [r4, #12]
 800c0ae:	6923      	ldr	r3, [r4, #16]
 800c0b0:	b94b      	cbnz	r3, 800c0c6 <__swsetup_r+0x9a>
 800c0b2:	89a3      	ldrh	r3, [r4, #12]
 800c0b4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800c0b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c0bc:	d003      	beq.n	800c0c6 <__swsetup_r+0x9a>
 800c0be:	4621      	mov	r1, r4
 800c0c0:	4630      	mov	r0, r6
 800c0c2:	f000 fa01 	bl	800c4c8 <__smakebuf_r>
 800c0c6:	89a0      	ldrh	r0, [r4, #12]
 800c0c8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c0cc:	f010 0301 	ands.w	r3, r0, #1
 800c0d0:	d00a      	beq.n	800c0e8 <__swsetup_r+0xbc>
 800c0d2:	2300      	movs	r3, #0
 800c0d4:	60a3      	str	r3, [r4, #8]
 800c0d6:	6963      	ldr	r3, [r4, #20]
 800c0d8:	425b      	negs	r3, r3
 800c0da:	61a3      	str	r3, [r4, #24]
 800c0dc:	6923      	ldr	r3, [r4, #16]
 800c0de:	b943      	cbnz	r3, 800c0f2 <__swsetup_r+0xc6>
 800c0e0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800c0e4:	d1ba      	bne.n	800c05c <__swsetup_r+0x30>
 800c0e6:	bd70      	pop	{r4, r5, r6, pc}
 800c0e8:	0781      	lsls	r1, r0, #30
 800c0ea:	bf58      	it	pl
 800c0ec:	6963      	ldrpl	r3, [r4, #20]
 800c0ee:	60a3      	str	r3, [r4, #8]
 800c0f0:	e7f4      	b.n	800c0dc <__swsetup_r+0xb0>
 800c0f2:	2000      	movs	r0, #0
 800c0f4:	e7f7      	b.n	800c0e6 <__swsetup_r+0xba>
 800c0f6:	bf00      	nop
 800c0f8:	2000010c 	.word	0x2000010c
 800c0fc:	0800c980 	.word	0x0800c980
 800c100:	0800c9a0 	.word	0x0800c9a0
 800c104:	0800c960 	.word	0x0800c960

0800c108 <__sflush_r>:
 800c108:	898a      	ldrh	r2, [r1, #12]
 800c10a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c10e:	4605      	mov	r5, r0
 800c110:	0710      	lsls	r0, r2, #28
 800c112:	460c      	mov	r4, r1
 800c114:	d458      	bmi.n	800c1c8 <__sflush_r+0xc0>
 800c116:	684b      	ldr	r3, [r1, #4]
 800c118:	2b00      	cmp	r3, #0
 800c11a:	dc05      	bgt.n	800c128 <__sflush_r+0x20>
 800c11c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c11e:	2b00      	cmp	r3, #0
 800c120:	dc02      	bgt.n	800c128 <__sflush_r+0x20>
 800c122:	2000      	movs	r0, #0
 800c124:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c128:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c12a:	2e00      	cmp	r6, #0
 800c12c:	d0f9      	beq.n	800c122 <__sflush_r+0x1a>
 800c12e:	2300      	movs	r3, #0
 800c130:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c134:	682f      	ldr	r7, [r5, #0]
 800c136:	602b      	str	r3, [r5, #0]
 800c138:	d032      	beq.n	800c1a0 <__sflush_r+0x98>
 800c13a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c13c:	89a3      	ldrh	r3, [r4, #12]
 800c13e:	075a      	lsls	r2, r3, #29
 800c140:	d505      	bpl.n	800c14e <__sflush_r+0x46>
 800c142:	6863      	ldr	r3, [r4, #4]
 800c144:	1ac0      	subs	r0, r0, r3
 800c146:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c148:	b10b      	cbz	r3, 800c14e <__sflush_r+0x46>
 800c14a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c14c:	1ac0      	subs	r0, r0, r3
 800c14e:	2300      	movs	r3, #0
 800c150:	4602      	mov	r2, r0
 800c152:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c154:	6a21      	ldr	r1, [r4, #32]
 800c156:	4628      	mov	r0, r5
 800c158:	47b0      	blx	r6
 800c15a:	1c43      	adds	r3, r0, #1
 800c15c:	89a3      	ldrh	r3, [r4, #12]
 800c15e:	d106      	bne.n	800c16e <__sflush_r+0x66>
 800c160:	6829      	ldr	r1, [r5, #0]
 800c162:	291d      	cmp	r1, #29
 800c164:	d82c      	bhi.n	800c1c0 <__sflush_r+0xb8>
 800c166:	4a2a      	ldr	r2, [pc, #168]	; (800c210 <__sflush_r+0x108>)
 800c168:	40ca      	lsrs	r2, r1
 800c16a:	07d6      	lsls	r6, r2, #31
 800c16c:	d528      	bpl.n	800c1c0 <__sflush_r+0xb8>
 800c16e:	2200      	movs	r2, #0
 800c170:	6062      	str	r2, [r4, #4]
 800c172:	04d9      	lsls	r1, r3, #19
 800c174:	6922      	ldr	r2, [r4, #16]
 800c176:	6022      	str	r2, [r4, #0]
 800c178:	d504      	bpl.n	800c184 <__sflush_r+0x7c>
 800c17a:	1c42      	adds	r2, r0, #1
 800c17c:	d101      	bne.n	800c182 <__sflush_r+0x7a>
 800c17e:	682b      	ldr	r3, [r5, #0]
 800c180:	b903      	cbnz	r3, 800c184 <__sflush_r+0x7c>
 800c182:	6560      	str	r0, [r4, #84]	; 0x54
 800c184:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c186:	602f      	str	r7, [r5, #0]
 800c188:	2900      	cmp	r1, #0
 800c18a:	d0ca      	beq.n	800c122 <__sflush_r+0x1a>
 800c18c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c190:	4299      	cmp	r1, r3
 800c192:	d002      	beq.n	800c19a <__sflush_r+0x92>
 800c194:	4628      	mov	r0, r5
 800c196:	f000 f9df 	bl	800c558 <_free_r>
 800c19a:	2000      	movs	r0, #0
 800c19c:	6360      	str	r0, [r4, #52]	; 0x34
 800c19e:	e7c1      	b.n	800c124 <__sflush_r+0x1c>
 800c1a0:	6a21      	ldr	r1, [r4, #32]
 800c1a2:	2301      	movs	r3, #1
 800c1a4:	4628      	mov	r0, r5
 800c1a6:	47b0      	blx	r6
 800c1a8:	1c41      	adds	r1, r0, #1
 800c1aa:	d1c7      	bne.n	800c13c <__sflush_r+0x34>
 800c1ac:	682b      	ldr	r3, [r5, #0]
 800c1ae:	2b00      	cmp	r3, #0
 800c1b0:	d0c4      	beq.n	800c13c <__sflush_r+0x34>
 800c1b2:	2b1d      	cmp	r3, #29
 800c1b4:	d001      	beq.n	800c1ba <__sflush_r+0xb2>
 800c1b6:	2b16      	cmp	r3, #22
 800c1b8:	d101      	bne.n	800c1be <__sflush_r+0xb6>
 800c1ba:	602f      	str	r7, [r5, #0]
 800c1bc:	e7b1      	b.n	800c122 <__sflush_r+0x1a>
 800c1be:	89a3      	ldrh	r3, [r4, #12]
 800c1c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c1c4:	81a3      	strh	r3, [r4, #12]
 800c1c6:	e7ad      	b.n	800c124 <__sflush_r+0x1c>
 800c1c8:	690f      	ldr	r7, [r1, #16]
 800c1ca:	2f00      	cmp	r7, #0
 800c1cc:	d0a9      	beq.n	800c122 <__sflush_r+0x1a>
 800c1ce:	0793      	lsls	r3, r2, #30
 800c1d0:	680e      	ldr	r6, [r1, #0]
 800c1d2:	bf08      	it	eq
 800c1d4:	694b      	ldreq	r3, [r1, #20]
 800c1d6:	600f      	str	r7, [r1, #0]
 800c1d8:	bf18      	it	ne
 800c1da:	2300      	movne	r3, #0
 800c1dc:	eba6 0807 	sub.w	r8, r6, r7
 800c1e0:	608b      	str	r3, [r1, #8]
 800c1e2:	f1b8 0f00 	cmp.w	r8, #0
 800c1e6:	dd9c      	ble.n	800c122 <__sflush_r+0x1a>
 800c1e8:	6a21      	ldr	r1, [r4, #32]
 800c1ea:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c1ec:	4643      	mov	r3, r8
 800c1ee:	463a      	mov	r2, r7
 800c1f0:	4628      	mov	r0, r5
 800c1f2:	47b0      	blx	r6
 800c1f4:	2800      	cmp	r0, #0
 800c1f6:	dc06      	bgt.n	800c206 <__sflush_r+0xfe>
 800c1f8:	89a3      	ldrh	r3, [r4, #12]
 800c1fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c1fe:	81a3      	strh	r3, [r4, #12]
 800c200:	f04f 30ff 	mov.w	r0, #4294967295
 800c204:	e78e      	b.n	800c124 <__sflush_r+0x1c>
 800c206:	4407      	add	r7, r0
 800c208:	eba8 0800 	sub.w	r8, r8, r0
 800c20c:	e7e9      	b.n	800c1e2 <__sflush_r+0xda>
 800c20e:	bf00      	nop
 800c210:	20400001 	.word	0x20400001

0800c214 <_fflush_r>:
 800c214:	b538      	push	{r3, r4, r5, lr}
 800c216:	690b      	ldr	r3, [r1, #16]
 800c218:	4605      	mov	r5, r0
 800c21a:	460c      	mov	r4, r1
 800c21c:	b913      	cbnz	r3, 800c224 <_fflush_r+0x10>
 800c21e:	2500      	movs	r5, #0
 800c220:	4628      	mov	r0, r5
 800c222:	bd38      	pop	{r3, r4, r5, pc}
 800c224:	b118      	cbz	r0, 800c22e <_fflush_r+0x1a>
 800c226:	6983      	ldr	r3, [r0, #24]
 800c228:	b90b      	cbnz	r3, 800c22e <_fflush_r+0x1a>
 800c22a:	f000 f887 	bl	800c33c <__sinit>
 800c22e:	4b14      	ldr	r3, [pc, #80]	; (800c280 <_fflush_r+0x6c>)
 800c230:	429c      	cmp	r4, r3
 800c232:	d11b      	bne.n	800c26c <_fflush_r+0x58>
 800c234:	686c      	ldr	r4, [r5, #4]
 800c236:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c23a:	2b00      	cmp	r3, #0
 800c23c:	d0ef      	beq.n	800c21e <_fflush_r+0xa>
 800c23e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c240:	07d0      	lsls	r0, r2, #31
 800c242:	d404      	bmi.n	800c24e <_fflush_r+0x3a>
 800c244:	0599      	lsls	r1, r3, #22
 800c246:	d402      	bmi.n	800c24e <_fflush_r+0x3a>
 800c248:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c24a:	f000 f915 	bl	800c478 <__retarget_lock_acquire_recursive>
 800c24e:	4628      	mov	r0, r5
 800c250:	4621      	mov	r1, r4
 800c252:	f7ff ff59 	bl	800c108 <__sflush_r>
 800c256:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c258:	07da      	lsls	r2, r3, #31
 800c25a:	4605      	mov	r5, r0
 800c25c:	d4e0      	bmi.n	800c220 <_fflush_r+0xc>
 800c25e:	89a3      	ldrh	r3, [r4, #12]
 800c260:	059b      	lsls	r3, r3, #22
 800c262:	d4dd      	bmi.n	800c220 <_fflush_r+0xc>
 800c264:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c266:	f000 f908 	bl	800c47a <__retarget_lock_release_recursive>
 800c26a:	e7d9      	b.n	800c220 <_fflush_r+0xc>
 800c26c:	4b05      	ldr	r3, [pc, #20]	; (800c284 <_fflush_r+0x70>)
 800c26e:	429c      	cmp	r4, r3
 800c270:	d101      	bne.n	800c276 <_fflush_r+0x62>
 800c272:	68ac      	ldr	r4, [r5, #8]
 800c274:	e7df      	b.n	800c236 <_fflush_r+0x22>
 800c276:	4b04      	ldr	r3, [pc, #16]	; (800c288 <_fflush_r+0x74>)
 800c278:	429c      	cmp	r4, r3
 800c27a:	bf08      	it	eq
 800c27c:	68ec      	ldreq	r4, [r5, #12]
 800c27e:	e7da      	b.n	800c236 <_fflush_r+0x22>
 800c280:	0800c980 	.word	0x0800c980
 800c284:	0800c9a0 	.word	0x0800c9a0
 800c288:	0800c960 	.word	0x0800c960

0800c28c <std>:
 800c28c:	2300      	movs	r3, #0
 800c28e:	b510      	push	{r4, lr}
 800c290:	4604      	mov	r4, r0
 800c292:	e9c0 3300 	strd	r3, r3, [r0]
 800c296:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c29a:	6083      	str	r3, [r0, #8]
 800c29c:	8181      	strh	r1, [r0, #12]
 800c29e:	6643      	str	r3, [r0, #100]	; 0x64
 800c2a0:	81c2      	strh	r2, [r0, #14]
 800c2a2:	6183      	str	r3, [r0, #24]
 800c2a4:	4619      	mov	r1, r3
 800c2a6:	2208      	movs	r2, #8
 800c2a8:	305c      	adds	r0, #92	; 0x5c
 800c2aa:	f7ff fd29 	bl	800bd00 <memset>
 800c2ae:	4b05      	ldr	r3, [pc, #20]	; (800c2c4 <std+0x38>)
 800c2b0:	6263      	str	r3, [r4, #36]	; 0x24
 800c2b2:	4b05      	ldr	r3, [pc, #20]	; (800c2c8 <std+0x3c>)
 800c2b4:	62a3      	str	r3, [r4, #40]	; 0x28
 800c2b6:	4b05      	ldr	r3, [pc, #20]	; (800c2cc <std+0x40>)
 800c2b8:	62e3      	str	r3, [r4, #44]	; 0x2c
 800c2ba:	4b05      	ldr	r3, [pc, #20]	; (800c2d0 <std+0x44>)
 800c2bc:	6224      	str	r4, [r4, #32]
 800c2be:	6323      	str	r3, [r4, #48]	; 0x30
 800c2c0:	bd10      	pop	{r4, pc}
 800c2c2:	bf00      	nop
 800c2c4:	0800c739 	.word	0x0800c739
 800c2c8:	0800c75b 	.word	0x0800c75b
 800c2cc:	0800c793 	.word	0x0800c793
 800c2d0:	0800c7b7 	.word	0x0800c7b7

0800c2d4 <_cleanup_r>:
 800c2d4:	4901      	ldr	r1, [pc, #4]	; (800c2dc <_cleanup_r+0x8>)
 800c2d6:	f000 b8af 	b.w	800c438 <_fwalk_reent>
 800c2da:	bf00      	nop
 800c2dc:	0800c215 	.word	0x0800c215

0800c2e0 <__sfmoreglue>:
 800c2e0:	b570      	push	{r4, r5, r6, lr}
 800c2e2:	2268      	movs	r2, #104	; 0x68
 800c2e4:	1e4d      	subs	r5, r1, #1
 800c2e6:	4355      	muls	r5, r2
 800c2e8:	460e      	mov	r6, r1
 800c2ea:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800c2ee:	f000 f99f 	bl	800c630 <_malloc_r>
 800c2f2:	4604      	mov	r4, r0
 800c2f4:	b140      	cbz	r0, 800c308 <__sfmoreglue+0x28>
 800c2f6:	2100      	movs	r1, #0
 800c2f8:	e9c0 1600 	strd	r1, r6, [r0]
 800c2fc:	300c      	adds	r0, #12
 800c2fe:	60a0      	str	r0, [r4, #8]
 800c300:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800c304:	f7ff fcfc 	bl	800bd00 <memset>
 800c308:	4620      	mov	r0, r4
 800c30a:	bd70      	pop	{r4, r5, r6, pc}

0800c30c <__sfp_lock_acquire>:
 800c30c:	4801      	ldr	r0, [pc, #4]	; (800c314 <__sfp_lock_acquire+0x8>)
 800c30e:	f000 b8b3 	b.w	800c478 <__retarget_lock_acquire_recursive>
 800c312:	bf00      	nop
 800c314:	20002445 	.word	0x20002445

0800c318 <__sfp_lock_release>:
 800c318:	4801      	ldr	r0, [pc, #4]	; (800c320 <__sfp_lock_release+0x8>)
 800c31a:	f000 b8ae 	b.w	800c47a <__retarget_lock_release_recursive>
 800c31e:	bf00      	nop
 800c320:	20002445 	.word	0x20002445

0800c324 <__sinit_lock_acquire>:
 800c324:	4801      	ldr	r0, [pc, #4]	; (800c32c <__sinit_lock_acquire+0x8>)
 800c326:	f000 b8a7 	b.w	800c478 <__retarget_lock_acquire_recursive>
 800c32a:	bf00      	nop
 800c32c:	20002446 	.word	0x20002446

0800c330 <__sinit_lock_release>:
 800c330:	4801      	ldr	r0, [pc, #4]	; (800c338 <__sinit_lock_release+0x8>)
 800c332:	f000 b8a2 	b.w	800c47a <__retarget_lock_release_recursive>
 800c336:	bf00      	nop
 800c338:	20002446 	.word	0x20002446

0800c33c <__sinit>:
 800c33c:	b510      	push	{r4, lr}
 800c33e:	4604      	mov	r4, r0
 800c340:	f7ff fff0 	bl	800c324 <__sinit_lock_acquire>
 800c344:	69a3      	ldr	r3, [r4, #24]
 800c346:	b11b      	cbz	r3, 800c350 <__sinit+0x14>
 800c348:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c34c:	f7ff bff0 	b.w	800c330 <__sinit_lock_release>
 800c350:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800c354:	6523      	str	r3, [r4, #80]	; 0x50
 800c356:	4b13      	ldr	r3, [pc, #76]	; (800c3a4 <__sinit+0x68>)
 800c358:	4a13      	ldr	r2, [pc, #76]	; (800c3a8 <__sinit+0x6c>)
 800c35a:	681b      	ldr	r3, [r3, #0]
 800c35c:	62a2      	str	r2, [r4, #40]	; 0x28
 800c35e:	42a3      	cmp	r3, r4
 800c360:	bf04      	itt	eq
 800c362:	2301      	moveq	r3, #1
 800c364:	61a3      	streq	r3, [r4, #24]
 800c366:	4620      	mov	r0, r4
 800c368:	f000 f820 	bl	800c3ac <__sfp>
 800c36c:	6060      	str	r0, [r4, #4]
 800c36e:	4620      	mov	r0, r4
 800c370:	f000 f81c 	bl	800c3ac <__sfp>
 800c374:	60a0      	str	r0, [r4, #8]
 800c376:	4620      	mov	r0, r4
 800c378:	f000 f818 	bl	800c3ac <__sfp>
 800c37c:	2200      	movs	r2, #0
 800c37e:	60e0      	str	r0, [r4, #12]
 800c380:	2104      	movs	r1, #4
 800c382:	6860      	ldr	r0, [r4, #4]
 800c384:	f7ff ff82 	bl	800c28c <std>
 800c388:	68a0      	ldr	r0, [r4, #8]
 800c38a:	2201      	movs	r2, #1
 800c38c:	2109      	movs	r1, #9
 800c38e:	f7ff ff7d 	bl	800c28c <std>
 800c392:	68e0      	ldr	r0, [r4, #12]
 800c394:	2202      	movs	r2, #2
 800c396:	2112      	movs	r1, #18
 800c398:	f7ff ff78 	bl	800c28c <std>
 800c39c:	2301      	movs	r3, #1
 800c39e:	61a3      	str	r3, [r4, #24]
 800c3a0:	e7d2      	b.n	800c348 <__sinit+0xc>
 800c3a2:	bf00      	nop
 800c3a4:	0800c95c 	.word	0x0800c95c
 800c3a8:	0800c2d5 	.word	0x0800c2d5

0800c3ac <__sfp>:
 800c3ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c3ae:	4607      	mov	r7, r0
 800c3b0:	f7ff ffac 	bl	800c30c <__sfp_lock_acquire>
 800c3b4:	4b1e      	ldr	r3, [pc, #120]	; (800c430 <__sfp+0x84>)
 800c3b6:	681e      	ldr	r6, [r3, #0]
 800c3b8:	69b3      	ldr	r3, [r6, #24]
 800c3ba:	b913      	cbnz	r3, 800c3c2 <__sfp+0x16>
 800c3bc:	4630      	mov	r0, r6
 800c3be:	f7ff ffbd 	bl	800c33c <__sinit>
 800c3c2:	3648      	adds	r6, #72	; 0x48
 800c3c4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800c3c8:	3b01      	subs	r3, #1
 800c3ca:	d503      	bpl.n	800c3d4 <__sfp+0x28>
 800c3cc:	6833      	ldr	r3, [r6, #0]
 800c3ce:	b30b      	cbz	r3, 800c414 <__sfp+0x68>
 800c3d0:	6836      	ldr	r6, [r6, #0]
 800c3d2:	e7f7      	b.n	800c3c4 <__sfp+0x18>
 800c3d4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800c3d8:	b9d5      	cbnz	r5, 800c410 <__sfp+0x64>
 800c3da:	4b16      	ldr	r3, [pc, #88]	; (800c434 <__sfp+0x88>)
 800c3dc:	60e3      	str	r3, [r4, #12]
 800c3de:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800c3e2:	6665      	str	r5, [r4, #100]	; 0x64
 800c3e4:	f000 f847 	bl	800c476 <__retarget_lock_init_recursive>
 800c3e8:	f7ff ff96 	bl	800c318 <__sfp_lock_release>
 800c3ec:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800c3f0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800c3f4:	6025      	str	r5, [r4, #0]
 800c3f6:	61a5      	str	r5, [r4, #24]
 800c3f8:	2208      	movs	r2, #8
 800c3fa:	4629      	mov	r1, r5
 800c3fc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800c400:	f7ff fc7e 	bl	800bd00 <memset>
 800c404:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800c408:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800c40c:	4620      	mov	r0, r4
 800c40e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c410:	3468      	adds	r4, #104	; 0x68
 800c412:	e7d9      	b.n	800c3c8 <__sfp+0x1c>
 800c414:	2104      	movs	r1, #4
 800c416:	4638      	mov	r0, r7
 800c418:	f7ff ff62 	bl	800c2e0 <__sfmoreglue>
 800c41c:	4604      	mov	r4, r0
 800c41e:	6030      	str	r0, [r6, #0]
 800c420:	2800      	cmp	r0, #0
 800c422:	d1d5      	bne.n	800c3d0 <__sfp+0x24>
 800c424:	f7ff ff78 	bl	800c318 <__sfp_lock_release>
 800c428:	230c      	movs	r3, #12
 800c42a:	603b      	str	r3, [r7, #0]
 800c42c:	e7ee      	b.n	800c40c <__sfp+0x60>
 800c42e:	bf00      	nop
 800c430:	0800c95c 	.word	0x0800c95c
 800c434:	ffff0001 	.word	0xffff0001

0800c438 <_fwalk_reent>:
 800c438:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c43c:	4606      	mov	r6, r0
 800c43e:	4688      	mov	r8, r1
 800c440:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800c444:	2700      	movs	r7, #0
 800c446:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c44a:	f1b9 0901 	subs.w	r9, r9, #1
 800c44e:	d505      	bpl.n	800c45c <_fwalk_reent+0x24>
 800c450:	6824      	ldr	r4, [r4, #0]
 800c452:	2c00      	cmp	r4, #0
 800c454:	d1f7      	bne.n	800c446 <_fwalk_reent+0xe>
 800c456:	4638      	mov	r0, r7
 800c458:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c45c:	89ab      	ldrh	r3, [r5, #12]
 800c45e:	2b01      	cmp	r3, #1
 800c460:	d907      	bls.n	800c472 <_fwalk_reent+0x3a>
 800c462:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c466:	3301      	adds	r3, #1
 800c468:	d003      	beq.n	800c472 <_fwalk_reent+0x3a>
 800c46a:	4629      	mov	r1, r5
 800c46c:	4630      	mov	r0, r6
 800c46e:	47c0      	blx	r8
 800c470:	4307      	orrs	r7, r0
 800c472:	3568      	adds	r5, #104	; 0x68
 800c474:	e7e9      	b.n	800c44a <_fwalk_reent+0x12>

0800c476 <__retarget_lock_init_recursive>:
 800c476:	4770      	bx	lr

0800c478 <__retarget_lock_acquire_recursive>:
 800c478:	4770      	bx	lr

0800c47a <__retarget_lock_release_recursive>:
 800c47a:	4770      	bx	lr

0800c47c <__swhatbuf_r>:
 800c47c:	b570      	push	{r4, r5, r6, lr}
 800c47e:	460e      	mov	r6, r1
 800c480:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c484:	2900      	cmp	r1, #0
 800c486:	b096      	sub	sp, #88	; 0x58
 800c488:	4614      	mov	r4, r2
 800c48a:	461d      	mov	r5, r3
 800c48c:	da08      	bge.n	800c4a0 <__swhatbuf_r+0x24>
 800c48e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800c492:	2200      	movs	r2, #0
 800c494:	602a      	str	r2, [r5, #0]
 800c496:	061a      	lsls	r2, r3, #24
 800c498:	d410      	bmi.n	800c4bc <__swhatbuf_r+0x40>
 800c49a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c49e:	e00e      	b.n	800c4be <__swhatbuf_r+0x42>
 800c4a0:	466a      	mov	r2, sp
 800c4a2:	f000 f9af 	bl	800c804 <_fstat_r>
 800c4a6:	2800      	cmp	r0, #0
 800c4a8:	dbf1      	blt.n	800c48e <__swhatbuf_r+0x12>
 800c4aa:	9a01      	ldr	r2, [sp, #4]
 800c4ac:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800c4b0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800c4b4:	425a      	negs	r2, r3
 800c4b6:	415a      	adcs	r2, r3
 800c4b8:	602a      	str	r2, [r5, #0]
 800c4ba:	e7ee      	b.n	800c49a <__swhatbuf_r+0x1e>
 800c4bc:	2340      	movs	r3, #64	; 0x40
 800c4be:	2000      	movs	r0, #0
 800c4c0:	6023      	str	r3, [r4, #0]
 800c4c2:	b016      	add	sp, #88	; 0x58
 800c4c4:	bd70      	pop	{r4, r5, r6, pc}
	...

0800c4c8 <__smakebuf_r>:
 800c4c8:	898b      	ldrh	r3, [r1, #12]
 800c4ca:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c4cc:	079d      	lsls	r5, r3, #30
 800c4ce:	4606      	mov	r6, r0
 800c4d0:	460c      	mov	r4, r1
 800c4d2:	d507      	bpl.n	800c4e4 <__smakebuf_r+0x1c>
 800c4d4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c4d8:	6023      	str	r3, [r4, #0]
 800c4da:	6123      	str	r3, [r4, #16]
 800c4dc:	2301      	movs	r3, #1
 800c4de:	6163      	str	r3, [r4, #20]
 800c4e0:	b002      	add	sp, #8
 800c4e2:	bd70      	pop	{r4, r5, r6, pc}
 800c4e4:	ab01      	add	r3, sp, #4
 800c4e6:	466a      	mov	r2, sp
 800c4e8:	f7ff ffc8 	bl	800c47c <__swhatbuf_r>
 800c4ec:	9900      	ldr	r1, [sp, #0]
 800c4ee:	4605      	mov	r5, r0
 800c4f0:	4630      	mov	r0, r6
 800c4f2:	f000 f89d 	bl	800c630 <_malloc_r>
 800c4f6:	b948      	cbnz	r0, 800c50c <__smakebuf_r+0x44>
 800c4f8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c4fc:	059a      	lsls	r2, r3, #22
 800c4fe:	d4ef      	bmi.n	800c4e0 <__smakebuf_r+0x18>
 800c500:	f023 0303 	bic.w	r3, r3, #3
 800c504:	f043 0302 	orr.w	r3, r3, #2
 800c508:	81a3      	strh	r3, [r4, #12]
 800c50a:	e7e3      	b.n	800c4d4 <__smakebuf_r+0xc>
 800c50c:	4b0d      	ldr	r3, [pc, #52]	; (800c544 <__smakebuf_r+0x7c>)
 800c50e:	62b3      	str	r3, [r6, #40]	; 0x28
 800c510:	89a3      	ldrh	r3, [r4, #12]
 800c512:	6020      	str	r0, [r4, #0]
 800c514:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c518:	81a3      	strh	r3, [r4, #12]
 800c51a:	9b00      	ldr	r3, [sp, #0]
 800c51c:	6163      	str	r3, [r4, #20]
 800c51e:	9b01      	ldr	r3, [sp, #4]
 800c520:	6120      	str	r0, [r4, #16]
 800c522:	b15b      	cbz	r3, 800c53c <__smakebuf_r+0x74>
 800c524:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c528:	4630      	mov	r0, r6
 800c52a:	f000 f97d 	bl	800c828 <_isatty_r>
 800c52e:	b128      	cbz	r0, 800c53c <__smakebuf_r+0x74>
 800c530:	89a3      	ldrh	r3, [r4, #12]
 800c532:	f023 0303 	bic.w	r3, r3, #3
 800c536:	f043 0301 	orr.w	r3, r3, #1
 800c53a:	81a3      	strh	r3, [r4, #12]
 800c53c:	89a0      	ldrh	r0, [r4, #12]
 800c53e:	4305      	orrs	r5, r0
 800c540:	81a5      	strh	r5, [r4, #12]
 800c542:	e7cd      	b.n	800c4e0 <__smakebuf_r+0x18>
 800c544:	0800c2d5 	.word	0x0800c2d5

0800c548 <malloc>:
 800c548:	4b02      	ldr	r3, [pc, #8]	; (800c554 <malloc+0xc>)
 800c54a:	4601      	mov	r1, r0
 800c54c:	6818      	ldr	r0, [r3, #0]
 800c54e:	f000 b86f 	b.w	800c630 <_malloc_r>
 800c552:	bf00      	nop
 800c554:	2000010c 	.word	0x2000010c

0800c558 <_free_r>:
 800c558:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c55a:	2900      	cmp	r1, #0
 800c55c:	d044      	beq.n	800c5e8 <_free_r+0x90>
 800c55e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c562:	9001      	str	r0, [sp, #4]
 800c564:	2b00      	cmp	r3, #0
 800c566:	f1a1 0404 	sub.w	r4, r1, #4
 800c56a:	bfb8      	it	lt
 800c56c:	18e4      	addlt	r4, r4, r3
 800c56e:	f000 f97d 	bl	800c86c <__malloc_lock>
 800c572:	4a1e      	ldr	r2, [pc, #120]	; (800c5ec <_free_r+0x94>)
 800c574:	9801      	ldr	r0, [sp, #4]
 800c576:	6813      	ldr	r3, [r2, #0]
 800c578:	b933      	cbnz	r3, 800c588 <_free_r+0x30>
 800c57a:	6063      	str	r3, [r4, #4]
 800c57c:	6014      	str	r4, [r2, #0]
 800c57e:	b003      	add	sp, #12
 800c580:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c584:	f000 b978 	b.w	800c878 <__malloc_unlock>
 800c588:	42a3      	cmp	r3, r4
 800c58a:	d908      	bls.n	800c59e <_free_r+0x46>
 800c58c:	6825      	ldr	r5, [r4, #0]
 800c58e:	1961      	adds	r1, r4, r5
 800c590:	428b      	cmp	r3, r1
 800c592:	bf01      	itttt	eq
 800c594:	6819      	ldreq	r1, [r3, #0]
 800c596:	685b      	ldreq	r3, [r3, #4]
 800c598:	1949      	addeq	r1, r1, r5
 800c59a:	6021      	streq	r1, [r4, #0]
 800c59c:	e7ed      	b.n	800c57a <_free_r+0x22>
 800c59e:	461a      	mov	r2, r3
 800c5a0:	685b      	ldr	r3, [r3, #4]
 800c5a2:	b10b      	cbz	r3, 800c5a8 <_free_r+0x50>
 800c5a4:	42a3      	cmp	r3, r4
 800c5a6:	d9fa      	bls.n	800c59e <_free_r+0x46>
 800c5a8:	6811      	ldr	r1, [r2, #0]
 800c5aa:	1855      	adds	r5, r2, r1
 800c5ac:	42a5      	cmp	r5, r4
 800c5ae:	d10b      	bne.n	800c5c8 <_free_r+0x70>
 800c5b0:	6824      	ldr	r4, [r4, #0]
 800c5b2:	4421      	add	r1, r4
 800c5b4:	1854      	adds	r4, r2, r1
 800c5b6:	42a3      	cmp	r3, r4
 800c5b8:	6011      	str	r1, [r2, #0]
 800c5ba:	d1e0      	bne.n	800c57e <_free_r+0x26>
 800c5bc:	681c      	ldr	r4, [r3, #0]
 800c5be:	685b      	ldr	r3, [r3, #4]
 800c5c0:	6053      	str	r3, [r2, #4]
 800c5c2:	4421      	add	r1, r4
 800c5c4:	6011      	str	r1, [r2, #0]
 800c5c6:	e7da      	b.n	800c57e <_free_r+0x26>
 800c5c8:	d902      	bls.n	800c5d0 <_free_r+0x78>
 800c5ca:	230c      	movs	r3, #12
 800c5cc:	6003      	str	r3, [r0, #0]
 800c5ce:	e7d6      	b.n	800c57e <_free_r+0x26>
 800c5d0:	6825      	ldr	r5, [r4, #0]
 800c5d2:	1961      	adds	r1, r4, r5
 800c5d4:	428b      	cmp	r3, r1
 800c5d6:	bf04      	itt	eq
 800c5d8:	6819      	ldreq	r1, [r3, #0]
 800c5da:	685b      	ldreq	r3, [r3, #4]
 800c5dc:	6063      	str	r3, [r4, #4]
 800c5de:	bf04      	itt	eq
 800c5e0:	1949      	addeq	r1, r1, r5
 800c5e2:	6021      	streq	r1, [r4, #0]
 800c5e4:	6054      	str	r4, [r2, #4]
 800c5e6:	e7ca      	b.n	800c57e <_free_r+0x26>
 800c5e8:	b003      	add	sp, #12
 800c5ea:	bd30      	pop	{r4, r5, pc}
 800c5ec:	20002448 	.word	0x20002448

0800c5f0 <sbrk_aligned>:
 800c5f0:	b570      	push	{r4, r5, r6, lr}
 800c5f2:	4e0e      	ldr	r6, [pc, #56]	; (800c62c <sbrk_aligned+0x3c>)
 800c5f4:	460c      	mov	r4, r1
 800c5f6:	6831      	ldr	r1, [r6, #0]
 800c5f8:	4605      	mov	r5, r0
 800c5fa:	b911      	cbnz	r1, 800c602 <sbrk_aligned+0x12>
 800c5fc:	f000 f88c 	bl	800c718 <_sbrk_r>
 800c600:	6030      	str	r0, [r6, #0]
 800c602:	4621      	mov	r1, r4
 800c604:	4628      	mov	r0, r5
 800c606:	f000 f887 	bl	800c718 <_sbrk_r>
 800c60a:	1c43      	adds	r3, r0, #1
 800c60c:	d00a      	beq.n	800c624 <sbrk_aligned+0x34>
 800c60e:	1cc4      	adds	r4, r0, #3
 800c610:	f024 0403 	bic.w	r4, r4, #3
 800c614:	42a0      	cmp	r0, r4
 800c616:	d007      	beq.n	800c628 <sbrk_aligned+0x38>
 800c618:	1a21      	subs	r1, r4, r0
 800c61a:	4628      	mov	r0, r5
 800c61c:	f000 f87c 	bl	800c718 <_sbrk_r>
 800c620:	3001      	adds	r0, #1
 800c622:	d101      	bne.n	800c628 <sbrk_aligned+0x38>
 800c624:	f04f 34ff 	mov.w	r4, #4294967295
 800c628:	4620      	mov	r0, r4
 800c62a:	bd70      	pop	{r4, r5, r6, pc}
 800c62c:	2000244c 	.word	0x2000244c

0800c630 <_malloc_r>:
 800c630:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c634:	1ccd      	adds	r5, r1, #3
 800c636:	f025 0503 	bic.w	r5, r5, #3
 800c63a:	3508      	adds	r5, #8
 800c63c:	2d0c      	cmp	r5, #12
 800c63e:	bf38      	it	cc
 800c640:	250c      	movcc	r5, #12
 800c642:	2d00      	cmp	r5, #0
 800c644:	4607      	mov	r7, r0
 800c646:	db01      	blt.n	800c64c <_malloc_r+0x1c>
 800c648:	42a9      	cmp	r1, r5
 800c64a:	d905      	bls.n	800c658 <_malloc_r+0x28>
 800c64c:	230c      	movs	r3, #12
 800c64e:	603b      	str	r3, [r7, #0]
 800c650:	2600      	movs	r6, #0
 800c652:	4630      	mov	r0, r6
 800c654:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c658:	4e2e      	ldr	r6, [pc, #184]	; (800c714 <_malloc_r+0xe4>)
 800c65a:	f000 f907 	bl	800c86c <__malloc_lock>
 800c65e:	6833      	ldr	r3, [r6, #0]
 800c660:	461c      	mov	r4, r3
 800c662:	bb34      	cbnz	r4, 800c6b2 <_malloc_r+0x82>
 800c664:	4629      	mov	r1, r5
 800c666:	4638      	mov	r0, r7
 800c668:	f7ff ffc2 	bl	800c5f0 <sbrk_aligned>
 800c66c:	1c43      	adds	r3, r0, #1
 800c66e:	4604      	mov	r4, r0
 800c670:	d14d      	bne.n	800c70e <_malloc_r+0xde>
 800c672:	6834      	ldr	r4, [r6, #0]
 800c674:	4626      	mov	r6, r4
 800c676:	2e00      	cmp	r6, #0
 800c678:	d140      	bne.n	800c6fc <_malloc_r+0xcc>
 800c67a:	6823      	ldr	r3, [r4, #0]
 800c67c:	4631      	mov	r1, r6
 800c67e:	4638      	mov	r0, r7
 800c680:	eb04 0803 	add.w	r8, r4, r3
 800c684:	f000 f848 	bl	800c718 <_sbrk_r>
 800c688:	4580      	cmp	r8, r0
 800c68a:	d13a      	bne.n	800c702 <_malloc_r+0xd2>
 800c68c:	6821      	ldr	r1, [r4, #0]
 800c68e:	3503      	adds	r5, #3
 800c690:	1a6d      	subs	r5, r5, r1
 800c692:	f025 0503 	bic.w	r5, r5, #3
 800c696:	3508      	adds	r5, #8
 800c698:	2d0c      	cmp	r5, #12
 800c69a:	bf38      	it	cc
 800c69c:	250c      	movcc	r5, #12
 800c69e:	4629      	mov	r1, r5
 800c6a0:	4638      	mov	r0, r7
 800c6a2:	f7ff ffa5 	bl	800c5f0 <sbrk_aligned>
 800c6a6:	3001      	adds	r0, #1
 800c6a8:	d02b      	beq.n	800c702 <_malloc_r+0xd2>
 800c6aa:	6823      	ldr	r3, [r4, #0]
 800c6ac:	442b      	add	r3, r5
 800c6ae:	6023      	str	r3, [r4, #0]
 800c6b0:	e00e      	b.n	800c6d0 <_malloc_r+0xa0>
 800c6b2:	6822      	ldr	r2, [r4, #0]
 800c6b4:	1b52      	subs	r2, r2, r5
 800c6b6:	d41e      	bmi.n	800c6f6 <_malloc_r+0xc6>
 800c6b8:	2a0b      	cmp	r2, #11
 800c6ba:	d916      	bls.n	800c6ea <_malloc_r+0xba>
 800c6bc:	1961      	adds	r1, r4, r5
 800c6be:	42a3      	cmp	r3, r4
 800c6c0:	6025      	str	r5, [r4, #0]
 800c6c2:	bf18      	it	ne
 800c6c4:	6059      	strne	r1, [r3, #4]
 800c6c6:	6863      	ldr	r3, [r4, #4]
 800c6c8:	bf08      	it	eq
 800c6ca:	6031      	streq	r1, [r6, #0]
 800c6cc:	5162      	str	r2, [r4, r5]
 800c6ce:	604b      	str	r3, [r1, #4]
 800c6d0:	4638      	mov	r0, r7
 800c6d2:	f104 060b 	add.w	r6, r4, #11
 800c6d6:	f000 f8cf 	bl	800c878 <__malloc_unlock>
 800c6da:	f026 0607 	bic.w	r6, r6, #7
 800c6de:	1d23      	adds	r3, r4, #4
 800c6e0:	1af2      	subs	r2, r6, r3
 800c6e2:	d0b6      	beq.n	800c652 <_malloc_r+0x22>
 800c6e4:	1b9b      	subs	r3, r3, r6
 800c6e6:	50a3      	str	r3, [r4, r2]
 800c6e8:	e7b3      	b.n	800c652 <_malloc_r+0x22>
 800c6ea:	6862      	ldr	r2, [r4, #4]
 800c6ec:	42a3      	cmp	r3, r4
 800c6ee:	bf0c      	ite	eq
 800c6f0:	6032      	streq	r2, [r6, #0]
 800c6f2:	605a      	strne	r2, [r3, #4]
 800c6f4:	e7ec      	b.n	800c6d0 <_malloc_r+0xa0>
 800c6f6:	4623      	mov	r3, r4
 800c6f8:	6864      	ldr	r4, [r4, #4]
 800c6fa:	e7b2      	b.n	800c662 <_malloc_r+0x32>
 800c6fc:	4634      	mov	r4, r6
 800c6fe:	6876      	ldr	r6, [r6, #4]
 800c700:	e7b9      	b.n	800c676 <_malloc_r+0x46>
 800c702:	230c      	movs	r3, #12
 800c704:	603b      	str	r3, [r7, #0]
 800c706:	4638      	mov	r0, r7
 800c708:	f000 f8b6 	bl	800c878 <__malloc_unlock>
 800c70c:	e7a1      	b.n	800c652 <_malloc_r+0x22>
 800c70e:	6025      	str	r5, [r4, #0]
 800c710:	e7de      	b.n	800c6d0 <_malloc_r+0xa0>
 800c712:	bf00      	nop
 800c714:	20002448 	.word	0x20002448

0800c718 <_sbrk_r>:
 800c718:	b538      	push	{r3, r4, r5, lr}
 800c71a:	4d06      	ldr	r5, [pc, #24]	; (800c734 <_sbrk_r+0x1c>)
 800c71c:	2300      	movs	r3, #0
 800c71e:	4604      	mov	r4, r0
 800c720:	4608      	mov	r0, r1
 800c722:	602b      	str	r3, [r5, #0]
 800c724:	f7f5 fe32 	bl	800238c <_sbrk>
 800c728:	1c43      	adds	r3, r0, #1
 800c72a:	d102      	bne.n	800c732 <_sbrk_r+0x1a>
 800c72c:	682b      	ldr	r3, [r5, #0]
 800c72e:	b103      	cbz	r3, 800c732 <_sbrk_r+0x1a>
 800c730:	6023      	str	r3, [r4, #0]
 800c732:	bd38      	pop	{r3, r4, r5, pc}
 800c734:	20002450 	.word	0x20002450

0800c738 <__sread>:
 800c738:	b510      	push	{r4, lr}
 800c73a:	460c      	mov	r4, r1
 800c73c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c740:	f000 f8a0 	bl	800c884 <_read_r>
 800c744:	2800      	cmp	r0, #0
 800c746:	bfab      	itete	ge
 800c748:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c74a:	89a3      	ldrhlt	r3, [r4, #12]
 800c74c:	181b      	addge	r3, r3, r0
 800c74e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c752:	bfac      	ite	ge
 800c754:	6563      	strge	r3, [r4, #84]	; 0x54
 800c756:	81a3      	strhlt	r3, [r4, #12]
 800c758:	bd10      	pop	{r4, pc}

0800c75a <__swrite>:
 800c75a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c75e:	461f      	mov	r7, r3
 800c760:	898b      	ldrh	r3, [r1, #12]
 800c762:	05db      	lsls	r3, r3, #23
 800c764:	4605      	mov	r5, r0
 800c766:	460c      	mov	r4, r1
 800c768:	4616      	mov	r6, r2
 800c76a:	d505      	bpl.n	800c778 <__swrite+0x1e>
 800c76c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c770:	2302      	movs	r3, #2
 800c772:	2200      	movs	r2, #0
 800c774:	f000 f868 	bl	800c848 <_lseek_r>
 800c778:	89a3      	ldrh	r3, [r4, #12]
 800c77a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c77e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c782:	81a3      	strh	r3, [r4, #12]
 800c784:	4632      	mov	r2, r6
 800c786:	463b      	mov	r3, r7
 800c788:	4628      	mov	r0, r5
 800c78a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c78e:	f000 b817 	b.w	800c7c0 <_write_r>

0800c792 <__sseek>:
 800c792:	b510      	push	{r4, lr}
 800c794:	460c      	mov	r4, r1
 800c796:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c79a:	f000 f855 	bl	800c848 <_lseek_r>
 800c79e:	1c43      	adds	r3, r0, #1
 800c7a0:	89a3      	ldrh	r3, [r4, #12]
 800c7a2:	bf15      	itete	ne
 800c7a4:	6560      	strne	r0, [r4, #84]	; 0x54
 800c7a6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c7aa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c7ae:	81a3      	strheq	r3, [r4, #12]
 800c7b0:	bf18      	it	ne
 800c7b2:	81a3      	strhne	r3, [r4, #12]
 800c7b4:	bd10      	pop	{r4, pc}

0800c7b6 <__sclose>:
 800c7b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c7ba:	f000 b813 	b.w	800c7e4 <_close_r>
	...

0800c7c0 <_write_r>:
 800c7c0:	b538      	push	{r3, r4, r5, lr}
 800c7c2:	4d07      	ldr	r5, [pc, #28]	; (800c7e0 <_write_r+0x20>)
 800c7c4:	4604      	mov	r4, r0
 800c7c6:	4608      	mov	r0, r1
 800c7c8:	4611      	mov	r1, r2
 800c7ca:	2200      	movs	r2, #0
 800c7cc:	602a      	str	r2, [r5, #0]
 800c7ce:	461a      	mov	r2, r3
 800c7d0:	f7f5 fb80 	bl	8001ed4 <_write>
 800c7d4:	1c43      	adds	r3, r0, #1
 800c7d6:	d102      	bne.n	800c7de <_write_r+0x1e>
 800c7d8:	682b      	ldr	r3, [r5, #0]
 800c7da:	b103      	cbz	r3, 800c7de <_write_r+0x1e>
 800c7dc:	6023      	str	r3, [r4, #0]
 800c7de:	bd38      	pop	{r3, r4, r5, pc}
 800c7e0:	20002450 	.word	0x20002450

0800c7e4 <_close_r>:
 800c7e4:	b538      	push	{r3, r4, r5, lr}
 800c7e6:	4d06      	ldr	r5, [pc, #24]	; (800c800 <_close_r+0x1c>)
 800c7e8:	2300      	movs	r3, #0
 800c7ea:	4604      	mov	r4, r0
 800c7ec:	4608      	mov	r0, r1
 800c7ee:	602b      	str	r3, [r5, #0]
 800c7f0:	f7f5 fb9c 	bl	8001f2c <_close>
 800c7f4:	1c43      	adds	r3, r0, #1
 800c7f6:	d102      	bne.n	800c7fe <_close_r+0x1a>
 800c7f8:	682b      	ldr	r3, [r5, #0]
 800c7fa:	b103      	cbz	r3, 800c7fe <_close_r+0x1a>
 800c7fc:	6023      	str	r3, [r4, #0]
 800c7fe:	bd38      	pop	{r3, r4, r5, pc}
 800c800:	20002450 	.word	0x20002450

0800c804 <_fstat_r>:
 800c804:	b538      	push	{r3, r4, r5, lr}
 800c806:	4d07      	ldr	r5, [pc, #28]	; (800c824 <_fstat_r+0x20>)
 800c808:	2300      	movs	r3, #0
 800c80a:	4604      	mov	r4, r0
 800c80c:	4608      	mov	r0, r1
 800c80e:	4611      	mov	r1, r2
 800c810:	602b      	str	r3, [r5, #0]
 800c812:	f7f5 fbdb 	bl	8001fcc <_fstat>
 800c816:	1c43      	adds	r3, r0, #1
 800c818:	d102      	bne.n	800c820 <_fstat_r+0x1c>
 800c81a:	682b      	ldr	r3, [r5, #0]
 800c81c:	b103      	cbz	r3, 800c820 <_fstat_r+0x1c>
 800c81e:	6023      	str	r3, [r4, #0]
 800c820:	bd38      	pop	{r3, r4, r5, pc}
 800c822:	bf00      	nop
 800c824:	20002450 	.word	0x20002450

0800c828 <_isatty_r>:
 800c828:	b538      	push	{r3, r4, r5, lr}
 800c82a:	4d06      	ldr	r5, [pc, #24]	; (800c844 <_isatty_r+0x1c>)
 800c82c:	2300      	movs	r3, #0
 800c82e:	4604      	mov	r4, r0
 800c830:	4608      	mov	r0, r1
 800c832:	602b      	str	r3, [r5, #0]
 800c834:	f7f5 fb38 	bl	8001ea8 <_isatty>
 800c838:	1c43      	adds	r3, r0, #1
 800c83a:	d102      	bne.n	800c842 <_isatty_r+0x1a>
 800c83c:	682b      	ldr	r3, [r5, #0]
 800c83e:	b103      	cbz	r3, 800c842 <_isatty_r+0x1a>
 800c840:	6023      	str	r3, [r4, #0]
 800c842:	bd38      	pop	{r3, r4, r5, pc}
 800c844:	20002450 	.word	0x20002450

0800c848 <_lseek_r>:
 800c848:	b538      	push	{r3, r4, r5, lr}
 800c84a:	4d07      	ldr	r5, [pc, #28]	; (800c868 <_lseek_r+0x20>)
 800c84c:	4604      	mov	r4, r0
 800c84e:	4608      	mov	r0, r1
 800c850:	4611      	mov	r1, r2
 800c852:	2200      	movs	r2, #0
 800c854:	602a      	str	r2, [r5, #0]
 800c856:	461a      	mov	r2, r3
 800c858:	f7f5 fb7f 	bl	8001f5a <_lseek>
 800c85c:	1c43      	adds	r3, r0, #1
 800c85e:	d102      	bne.n	800c866 <_lseek_r+0x1e>
 800c860:	682b      	ldr	r3, [r5, #0]
 800c862:	b103      	cbz	r3, 800c866 <_lseek_r+0x1e>
 800c864:	6023      	str	r3, [r4, #0]
 800c866:	bd38      	pop	{r3, r4, r5, pc}
 800c868:	20002450 	.word	0x20002450

0800c86c <__malloc_lock>:
 800c86c:	4801      	ldr	r0, [pc, #4]	; (800c874 <__malloc_lock+0x8>)
 800c86e:	f7ff be03 	b.w	800c478 <__retarget_lock_acquire_recursive>
 800c872:	bf00      	nop
 800c874:	20002444 	.word	0x20002444

0800c878 <__malloc_unlock>:
 800c878:	4801      	ldr	r0, [pc, #4]	; (800c880 <__malloc_unlock+0x8>)
 800c87a:	f7ff bdfe 	b.w	800c47a <__retarget_lock_release_recursive>
 800c87e:	bf00      	nop
 800c880:	20002444 	.word	0x20002444

0800c884 <_read_r>:
 800c884:	b538      	push	{r3, r4, r5, lr}
 800c886:	4d07      	ldr	r5, [pc, #28]	; (800c8a4 <_read_r+0x20>)
 800c888:	4604      	mov	r4, r0
 800c88a:	4608      	mov	r0, r1
 800c88c:	4611      	mov	r1, r2
 800c88e:	2200      	movs	r2, #0
 800c890:	602a      	str	r2, [r5, #0]
 800c892:	461a      	mov	r2, r3
 800c894:	f7f5 fb72 	bl	8001f7c <_read>
 800c898:	1c43      	adds	r3, r0, #1
 800c89a:	d102      	bne.n	800c8a2 <_read_r+0x1e>
 800c89c:	682b      	ldr	r3, [r5, #0]
 800c89e:	b103      	cbz	r3, 800c8a2 <_read_r+0x1e>
 800c8a0:	6023      	str	r3, [r4, #0]
 800c8a2:	bd38      	pop	{r3, r4, r5, pc}
 800c8a4:	20002450 	.word	0x20002450

0800c8a8 <_init>:
 800c8a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c8aa:	bf00      	nop
 800c8ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c8ae:	bc08      	pop	{r3}
 800c8b0:	469e      	mov	lr, r3
 800c8b2:	4770      	bx	lr

0800c8b4 <_fini>:
 800c8b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c8b6:	bf00      	nop
 800c8b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c8ba:	bc08      	pop	{r3}
 800c8bc:	469e      	mov	lr, r3
 800c8be:	4770      	bx	lr
