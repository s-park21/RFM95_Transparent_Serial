
RFM95_Transparent_Serial.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bc94  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000dc  0800be1c  0800be1c  0001be1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bef8  0800bef8  00020170  2**0
                  CONTENTS
  4 .ARM          00000008  0800bef8  0800bef8  0001bef8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bf00  0800bf00  00020170  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bf00  0800bf00  0001bf00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bf04  0800bf04  0001bf04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000170  20000000  0800bf08  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020170  2**0
                  CONTENTS
 10 .bss          000030a4  20000170  20000170  00020170  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20003214  20003214  00020170  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020170  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001c1e5  00000000  00000000  000201a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003d29  00000000  00000000  0003c385  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000016a8  00000000  00000000  000400b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001520  00000000  00000000  00041758  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023ef0  00000000  00000000  00042c78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001ba94  00000000  00000000  00066b68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c875d  00000000  00000000  000825fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0014ad59  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006584  00000000  00000000  0014adac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000170 	.word	0x20000170
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800be04 	.word	0x0800be04

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000174 	.word	0x20000174
 80001c4:	0800be04 	.word	0x0800be04

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b974 	b.w	80004c8 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468e      	mov	lr, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14d      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000206:	428a      	cmp	r2, r1
 8000208:	4694      	mov	ip, r2
 800020a:	d969      	bls.n	80002e0 <__udivmoddi4+0xe8>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b152      	cbz	r2, 8000228 <__udivmoddi4+0x30>
 8000212:	fa01 f302 	lsl.w	r3, r1, r2
 8000216:	f1c2 0120 	rsb	r1, r2, #32
 800021a:	fa20 f101 	lsr.w	r1, r0, r1
 800021e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000222:	ea41 0e03 	orr.w	lr, r1, r3
 8000226:	4094      	lsls	r4, r2
 8000228:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800022c:	0c21      	lsrs	r1, r4, #16
 800022e:	fbbe f6f8 	udiv	r6, lr, r8
 8000232:	fa1f f78c 	uxth.w	r7, ip
 8000236:	fb08 e316 	mls	r3, r8, r6, lr
 800023a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800023e:	fb06 f107 	mul.w	r1, r6, r7
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f106 30ff 	add.w	r0, r6, #4294967295
 800024e:	f080 811f 	bcs.w	8000490 <__udivmoddi4+0x298>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 811c 	bls.w	8000490 <__udivmoddi4+0x298>
 8000258:	3e02      	subs	r6, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0f8 	udiv	r0, r3, r8
 8000264:	fb08 3310 	mls	r3, r8, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 f707 	mul.w	r7, r0, r7
 8000270:	42a7      	cmp	r7, r4
 8000272:	d90a      	bls.n	800028a <__udivmoddi4+0x92>
 8000274:	eb1c 0404 	adds.w	r4, ip, r4
 8000278:	f100 33ff 	add.w	r3, r0, #4294967295
 800027c:	f080 810a 	bcs.w	8000494 <__udivmoddi4+0x29c>
 8000280:	42a7      	cmp	r7, r4
 8000282:	f240 8107 	bls.w	8000494 <__udivmoddi4+0x29c>
 8000286:	4464      	add	r4, ip
 8000288:	3802      	subs	r0, #2
 800028a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800028e:	1be4      	subs	r4, r4, r7
 8000290:	2600      	movs	r6, #0
 8000292:	b11d      	cbz	r5, 800029c <__udivmoddi4+0xa4>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c5 4300 	strd	r4, r3, [r5]
 800029c:	4631      	mov	r1, r6
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d909      	bls.n	80002ba <__udivmoddi4+0xc2>
 80002a6:	2d00      	cmp	r5, #0
 80002a8:	f000 80ef 	beq.w	800048a <__udivmoddi4+0x292>
 80002ac:	2600      	movs	r6, #0
 80002ae:	e9c5 0100 	strd	r0, r1, [r5]
 80002b2:	4630      	mov	r0, r6
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	fab3 f683 	clz	r6, r3
 80002be:	2e00      	cmp	r6, #0
 80002c0:	d14a      	bne.n	8000358 <__udivmoddi4+0x160>
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xd4>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 80f9 	bhi.w	80004be <__udivmoddi4+0x2c6>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb61 0303 	sbc.w	r3, r1, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	469e      	mov	lr, r3
 80002d6:	2d00      	cmp	r5, #0
 80002d8:	d0e0      	beq.n	800029c <__udivmoddi4+0xa4>
 80002da:	e9c5 4e00 	strd	r4, lr, [r5]
 80002de:	e7dd      	b.n	800029c <__udivmoddi4+0xa4>
 80002e0:	b902      	cbnz	r2, 80002e4 <__udivmoddi4+0xec>
 80002e2:	deff      	udf	#255	; 0xff
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	2a00      	cmp	r2, #0
 80002ea:	f040 8092 	bne.w	8000412 <__udivmoddi4+0x21a>
 80002ee:	eba1 010c 	sub.w	r1, r1, ip
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2601      	movs	r6, #1
 80002fc:	0c20      	lsrs	r0, r4, #16
 80002fe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000302:	fb07 1113 	mls	r1, r7, r3, r1
 8000306:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800030a:	fb0e f003 	mul.w	r0, lr, r3
 800030e:	4288      	cmp	r0, r1
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x12c>
 8000312:	eb1c 0101 	adds.w	r1, ip, r1
 8000316:	f103 38ff 	add.w	r8, r3, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x12a>
 800031c:	4288      	cmp	r0, r1
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2c0>
 8000322:	4643      	mov	r3, r8
 8000324:	1a09      	subs	r1, r1, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb1 f0f7 	udiv	r0, r1, r7
 800032c:	fb07 1110 	mls	r1, r7, r0, r1
 8000330:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x156>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 31ff 	add.w	r1, r0, #4294967295
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x154>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 800034c:	4608      	mov	r0, r1
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000356:	e79c      	b.n	8000292 <__udivmoddi4+0x9a>
 8000358:	f1c6 0720 	rsb	r7, r6, #32
 800035c:	40b3      	lsls	r3, r6
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa20 f407 	lsr.w	r4, r0, r7
 800036a:	fa01 f306 	lsl.w	r3, r1, r6
 800036e:	431c      	orrs	r4, r3
 8000370:	40f9      	lsrs	r1, r7
 8000372:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000376:	fa00 f306 	lsl.w	r3, r0, r6
 800037a:	fbb1 f8f9 	udiv	r8, r1, r9
 800037e:	0c20      	lsrs	r0, r4, #16
 8000380:	fa1f fe8c 	uxth.w	lr, ip
 8000384:	fb09 1118 	mls	r1, r9, r8, r1
 8000388:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800038c:	fb08 f00e 	mul.w	r0, r8, lr
 8000390:	4288      	cmp	r0, r1
 8000392:	fa02 f206 	lsl.w	r2, r2, r6
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b8>
 8000398:	eb1c 0101 	adds.w	r1, ip, r1
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2bc>
 80003a4:	4288      	cmp	r0, r1
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2bc>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4461      	add	r1, ip
 80003b0:	1a09      	subs	r1, r1, r0
 80003b2:	b2a4      	uxth	r4, r4
 80003b4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003b8:	fb09 1110 	mls	r1, r9, r0, r1
 80003bc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c4:	458e      	cmp	lr, r1
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1e2>
 80003c8:	eb1c 0101 	adds.w	r1, ip, r1
 80003cc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2b4>
 80003d2:	458e      	cmp	lr, r1
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2b4>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4461      	add	r1, ip
 80003da:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003de:	fba0 9402 	umull	r9, r4, r0, r2
 80003e2:	eba1 010e 	sub.w	r1, r1, lr
 80003e6:	42a1      	cmp	r1, r4
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46a6      	mov	lr, r4
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x2a4>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x2a0>
 80003f0:	b15d      	cbz	r5, 800040a <__udivmoddi4+0x212>
 80003f2:	ebb3 0208 	subs.w	r2, r3, r8
 80003f6:	eb61 010e 	sbc.w	r1, r1, lr
 80003fa:	fa01 f707 	lsl.w	r7, r1, r7
 80003fe:	fa22 f306 	lsr.w	r3, r2, r6
 8000402:	40f1      	lsrs	r1, r6
 8000404:	431f      	orrs	r7, r3
 8000406:	e9c5 7100 	strd	r7, r1, [r5]
 800040a:	2600      	movs	r6, #0
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	f1c2 0320 	rsb	r3, r2, #32
 8000416:	40d8      	lsrs	r0, r3
 8000418:	fa0c fc02 	lsl.w	ip, ip, r2
 800041c:	fa21 f303 	lsr.w	r3, r1, r3
 8000420:	4091      	lsls	r1, r2
 8000422:	4301      	orrs	r1, r0
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000430:	fb07 3610 	mls	r6, r7, r0, r3
 8000434:	0c0b      	lsrs	r3, r1, #16
 8000436:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800043a:	fb00 f60e 	mul.w	r6, r0, lr
 800043e:	429e      	cmp	r6, r3
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x260>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 38ff 	add.w	r8, r0, #4294967295
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b8>
 8000450:	429e      	cmp	r6, r3
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b8>
 8000454:	3802      	subs	r0, #2
 8000456:	4463      	add	r3, ip
 8000458:	1b9b      	subs	r3, r3, r6
 800045a:	b289      	uxth	r1, r1
 800045c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000460:	fb07 3316 	mls	r3, r7, r6, r3
 8000464:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000468:	fb06 f30e 	mul.w	r3, r6, lr
 800046c:	428b      	cmp	r3, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x28a>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f106 38ff 	add.w	r8, r6, #4294967295
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 800047a:	428b      	cmp	r3, r1
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800047e:	3e02      	subs	r6, #2
 8000480:	4461      	add	r1, ip
 8000482:	1ac9      	subs	r1, r1, r3
 8000484:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0x104>
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e705      	b.n	800029c <__udivmoddi4+0xa4>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e3      	b.n	800025c <__udivmoddi4+0x64>
 8000494:	4618      	mov	r0, r3
 8000496:	e6f8      	b.n	800028a <__udivmoddi4+0x92>
 8000498:	454b      	cmp	r3, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f8>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f8>
 80004a8:	4646      	mov	r6, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x28a>
 80004ac:	4620      	mov	r0, r4
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1e2>
 80004b0:	4640      	mov	r0, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x260>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b8>
 80004b8:	3b02      	subs	r3, #2
 80004ba:	4461      	add	r1, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x12c>
 80004be:	4630      	mov	r0, r6
 80004c0:	e709      	b.n	80002d6 <__udivmoddi4+0xde>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x156>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <newLoRa>:
										  |    spreading factor = 7				       |
											|           bandwidth = 125 KHz        |
											| 		    coding rate = 4/5            |
											----------------------------------------
\* ----------------------------------------------------------------------------- */
LoRa newLoRa(){
 80004cc:	b4b0      	push	{r4, r5, r7}
 80004ce:	b08f      	sub	sp, #60	; 0x3c
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	6078      	str	r0, [r7, #4]
	LoRa new_LoRa;

	new_LoRa.frequency             = 433       ;
 80004d4:	f240 13b1 	movw	r3, #433	; 0x1b1
 80004d8:	62bb      	str	r3, [r7, #40]	; 0x28
	new_LoRa.spredingFactor        = SF_7      ;
 80004da:	2307      	movs	r3, #7
 80004dc:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
	new_LoRa.bandWidth			   = BW_125KHz ;
 80004e0:	2307      	movs	r3, #7
 80004e2:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	new_LoRa.crcRate               = CR_4_5    ;
 80004e6:	2301      	movs	r3, #1
 80004e8:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	new_LoRa.power				   = POWER_20db;
 80004ec:	23ff      	movs	r3, #255	; 0xff
 80004ee:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	new_LoRa.overCurrentProtection = 100       ;
 80004f2:	2364      	movs	r3, #100	; 0x64
 80004f4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	new_LoRa.preamble			   = 8         ;
 80004f8:	2308      	movs	r3, #8
 80004fa:	863b      	strh	r3, [r7, #48]	; 0x30

	return new_LoRa;
 80004fc:	687b      	ldr	r3, [r7, #4]
 80004fe:	461d      	mov	r5, r3
 8000500:	f107 0408 	add.w	r4, r7, #8
 8000504:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000506:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000508:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800050a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800050c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000510:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
}
 8000514:	6878      	ldr	r0, [r7, #4]
 8000516:	373c      	adds	r7, #60	; 0x3c
 8000518:	46bd      	mov	sp, r7
 800051a:	bcb0      	pop	{r4, r5, r7}
 800051c:	4770      	bx	lr

0800051e <LoRa_reset>:
		description : reset module
		arguments   :
			LoRa* LoRa --> LoRa object handler
		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_reset(LoRa* _LoRa){
 800051e:	b580      	push	{r7, lr}
 8000520:	b082      	sub	sp, #8
 8000522:	af00      	add	r7, sp, #0
 8000524:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(_LoRa->reset_port, _LoRa->reset_pin, GPIO_PIN_RESET);
 8000526:	687b      	ldr	r3, [r7, #4]
 8000528:	6898      	ldr	r0, [r3, #8]
 800052a:	687b      	ldr	r3, [r7, #4]
 800052c:	899b      	ldrh	r3, [r3, #12]
 800052e:	2200      	movs	r2, #0
 8000530:	4619      	mov	r1, r3
 8000532:	f002 fa91 	bl	8002a58 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000536:	2001      	movs	r0, #1
 8000538:	f001 fbba 	bl	8001cb0 <HAL_Delay>
	HAL_GPIO_WritePin(_LoRa->reset_port, _LoRa->reset_pin, GPIO_PIN_SET);
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	6898      	ldr	r0, [r3, #8]
 8000540:	687b      	ldr	r3, [r7, #4]
 8000542:	899b      	ldrh	r3, [r3, #12]
 8000544:	2201      	movs	r2, #1
 8000546:	4619      	mov	r1, r3
 8000548:	f002 fa86 	bl	8002a58 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 800054c:	2064      	movs	r0, #100	; 0x64
 800054e:	f001 fbaf 	bl	8001cb0 <HAL_Delay>
}
 8000552:	bf00      	nop
 8000554:	3708      	adds	r7, #8
 8000556:	46bd      	mov	sp, r7
 8000558:	bd80      	pop	{r7, pc}

0800055a <LoRa_gotoMode>:
		arguments   :
			LoRa* LoRa    --> LoRa object handler
			mode	        --> select from defined modes
		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_gotoMode(LoRa* _LoRa, int mode){
 800055a:	b580      	push	{r7, lr}
 800055c:	b084      	sub	sp, #16
 800055e:	af00      	add	r7, sp, #0
 8000560:	6078      	str	r0, [r7, #4]
 8000562:	6039      	str	r1, [r7, #0]
	uint8_t    read;
	uint8_t    data;

	read = LoRa_read(_LoRa, RegOpMode);
 8000564:	2101      	movs	r1, #1
 8000566:	6878      	ldr	r0, [r7, #4]
 8000568:	f000 f9db 	bl	8000922 <LoRa_read>
 800056c:	4603      	mov	r3, r0
 800056e:	73bb      	strb	r3, [r7, #14]
	data = read;
 8000570:	7bbb      	ldrb	r3, [r7, #14]
 8000572:	73fb      	strb	r3, [r7, #15]

	if(mode == SLEEP_MODE){
 8000574:	683b      	ldr	r3, [r7, #0]
 8000576:	2b00      	cmp	r3, #0
 8000578:	d107      	bne.n	800058a <LoRa_gotoMode+0x30>
		data = (read & 0xF8) | 0x00;
 800057a:	7bbb      	ldrb	r3, [r7, #14]
 800057c:	f023 0307 	bic.w	r3, r3, #7
 8000580:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = SLEEP_MODE;
 8000582:	687b      	ldr	r3, [r7, #4]
 8000584:	2200      	movs	r2, #0
 8000586:	61da      	str	r2, [r3, #28]
 8000588:	e03e      	b.n	8000608 <LoRa_gotoMode+0xae>
	}else if (mode == STNBY_MODE){
 800058a:	683b      	ldr	r3, [r7, #0]
 800058c:	2b01      	cmp	r3, #1
 800058e:	d10c      	bne.n	80005aa <LoRa_gotoMode+0x50>
		data = (read & 0xF8) | 0x01;
 8000590:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000594:	f023 0307 	bic.w	r3, r3, #7
 8000598:	b25b      	sxtb	r3, r3
 800059a:	f043 0301 	orr.w	r3, r3, #1
 800059e:	b25b      	sxtb	r3, r3
 80005a0:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = STNBY_MODE;
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	2201      	movs	r2, #1
 80005a6:	61da      	str	r2, [r3, #28]
 80005a8:	e02e      	b.n	8000608 <LoRa_gotoMode+0xae>
	}else if (mode == TRANSMIT_MODE){
 80005aa:	683b      	ldr	r3, [r7, #0]
 80005ac:	2b03      	cmp	r3, #3
 80005ae:	d10c      	bne.n	80005ca <LoRa_gotoMode+0x70>
		data = (read & 0xF8) | 0x03;
 80005b0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80005b4:	f023 0307 	bic.w	r3, r3, #7
 80005b8:	b25b      	sxtb	r3, r3
 80005ba:	f043 0303 	orr.w	r3, r3, #3
 80005be:	b25b      	sxtb	r3, r3
 80005c0:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = TRANSMIT_MODE;
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	2203      	movs	r2, #3
 80005c6:	61da      	str	r2, [r3, #28]
 80005c8:	e01e      	b.n	8000608 <LoRa_gotoMode+0xae>
	}else if (mode == RXCONTIN_MODE){
 80005ca:	683b      	ldr	r3, [r7, #0]
 80005cc:	2b05      	cmp	r3, #5
 80005ce:	d10c      	bne.n	80005ea <LoRa_gotoMode+0x90>
		data = (read & 0xF8) | 0x05;
 80005d0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80005d4:	f023 0307 	bic.w	r3, r3, #7
 80005d8:	b25b      	sxtb	r3, r3
 80005da:	f043 0305 	orr.w	r3, r3, #5
 80005de:	b25b      	sxtb	r3, r3
 80005e0:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = RXCONTIN_MODE;
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	2205      	movs	r2, #5
 80005e6:	61da      	str	r2, [r3, #28]
 80005e8:	e00e      	b.n	8000608 <LoRa_gotoMode+0xae>
	}else if (mode == RXSINGLE_MODE){
 80005ea:	683b      	ldr	r3, [r7, #0]
 80005ec:	2b06      	cmp	r3, #6
 80005ee:	d10b      	bne.n	8000608 <LoRa_gotoMode+0xae>
		data = (read & 0xF8) | 0x06;
 80005f0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80005f4:	f023 0307 	bic.w	r3, r3, #7
 80005f8:	b25b      	sxtb	r3, r3
 80005fa:	f043 0306 	orr.w	r3, r3, #6
 80005fe:	b25b      	sxtb	r3, r3
 8000600:	73fb      	strb	r3, [r7, #15]
		_LoRa->current_mode = RXSINGLE_MODE;
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	2206      	movs	r2, #6
 8000606:	61da      	str	r2, [r3, #28]
	}

	LoRa_write(_LoRa, RegOpMode, data);
 8000608:	7bfb      	ldrb	r3, [r7, #15]
 800060a:	461a      	mov	r2, r3
 800060c:	2101      	movs	r1, #1
 800060e:	6878      	ldr	r0, [r7, #4]
 8000610:	f000 f9a1 	bl	8000956 <LoRa_write>
	//HAL_Delay(10);
}
 8000614:	bf00      	nop
 8000616:	3710      	adds	r7, #16
 8000618:	46bd      	mov	sp, r7
 800061a:	bd80      	pop	{r7, pc}

0800061c <LoRa_readReg>:
														you want to send
			uint8_t* output		--> pointer to the beginning of output array
			uint16_t w_length	--> detemines number of bytes that you want to read
		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_readReg(LoRa* _LoRa, uint8_t* address, uint16_t r_length, uint8_t* output, uint16_t w_length){
 800061c:	b580      	push	{r7, lr}
 800061e:	b084      	sub	sp, #16
 8000620:	af00      	add	r7, sp, #0
 8000622:	60f8      	str	r0, [r7, #12]
 8000624:	60b9      	str	r1, [r7, #8]
 8000626:	603b      	str	r3, [r7, #0]
 8000628:	4613      	mov	r3, r2
 800062a:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_RESET);
 800062c:	68fb      	ldr	r3, [r7, #12]
 800062e:	6818      	ldr	r0, [r3, #0]
 8000630:	68fb      	ldr	r3, [r7, #12]
 8000632:	889b      	ldrh	r3, [r3, #4]
 8000634:	2200      	movs	r2, #0
 8000636:	4619      	mov	r1, r3
 8000638:	f002 fa0e 	bl	8002a58 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(_LoRa->hSPIx, address, r_length, TRANSMIT_TIMEOUT);
 800063c:	68fb      	ldr	r3, [r7, #12]
 800063e:	6998      	ldr	r0, [r3, #24]
 8000640:	88fa      	ldrh	r2, [r7, #6]
 8000642:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000646:	68b9      	ldr	r1, [r7, #8]
 8000648:	f004 f997 	bl	800497a <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 800064c:	bf00      	nop
 800064e:	68fb      	ldr	r3, [r7, #12]
 8000650:	699b      	ldr	r3, [r3, #24]
 8000652:	4618      	mov	r0, r3
 8000654:	f004 fd80 	bl	8005158 <HAL_SPI_GetState>
 8000658:	4603      	mov	r3, r0
 800065a:	2b01      	cmp	r3, #1
 800065c:	d1f7      	bne.n	800064e <LoRa_readReg+0x32>
		;
	HAL_SPI_Receive(_LoRa->hSPIx, output, w_length, RECEIVE_TIMEOUT);
 800065e:	68fb      	ldr	r3, [r7, #12]
 8000660:	6998      	ldr	r0, [r3, #24]
 8000662:	8b3a      	ldrh	r2, [r7, #24]
 8000664:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000668:	6839      	ldr	r1, [r7, #0]
 800066a:	f004 fac2 	bl	8004bf2 <HAL_SPI_Receive>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 800066e:	bf00      	nop
 8000670:	68fb      	ldr	r3, [r7, #12]
 8000672:	699b      	ldr	r3, [r3, #24]
 8000674:	4618      	mov	r0, r3
 8000676:	f004 fd6f 	bl	8005158 <HAL_SPI_GetState>
 800067a:	4603      	mov	r3, r0
 800067c:	2b01      	cmp	r3, #1
 800067e:	d1f7      	bne.n	8000670 <LoRa_readReg+0x54>
		;
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_SET);
 8000680:	68fb      	ldr	r3, [r7, #12]
 8000682:	6818      	ldr	r0, [r3, #0]
 8000684:	68fb      	ldr	r3, [r7, #12]
 8000686:	889b      	ldrh	r3, [r3, #4]
 8000688:	2201      	movs	r2, #1
 800068a:	4619      	mov	r1, r3
 800068c:	f002 f9e4 	bl	8002a58 <HAL_GPIO_WritePin>
}
 8000690:	bf00      	nop
 8000692:	3710      	adds	r7, #16
 8000694:	46bd      	mov	sp, r7
 8000696:	bd80      	pop	{r7, pc}

08000698 <LoRa_writeReg>:
														you want to send
			uint8_t* output		--> pointer to the beginning of values array
			uint16_t w_length	--> detemines number of bytes that you want to send
		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_writeReg(LoRa* _LoRa, uint8_t* address, uint16_t r_length, uint8_t* values, uint16_t w_length){
 8000698:	b580      	push	{r7, lr}
 800069a:	b084      	sub	sp, #16
 800069c:	af00      	add	r7, sp, #0
 800069e:	60f8      	str	r0, [r7, #12]
 80006a0:	60b9      	str	r1, [r7, #8]
 80006a2:	603b      	str	r3, [r7, #0]
 80006a4:	4613      	mov	r3, r2
 80006a6:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_RESET);
 80006a8:	68fb      	ldr	r3, [r7, #12]
 80006aa:	6818      	ldr	r0, [r3, #0]
 80006ac:	68fb      	ldr	r3, [r7, #12]
 80006ae:	889b      	ldrh	r3, [r3, #4]
 80006b0:	2200      	movs	r2, #0
 80006b2:	4619      	mov	r1, r3
 80006b4:	f002 f9d0 	bl	8002a58 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(_LoRa->hSPIx, address, r_length, TRANSMIT_TIMEOUT);
 80006b8:	68fb      	ldr	r3, [r7, #12]
 80006ba:	6998      	ldr	r0, [r3, #24]
 80006bc:	88fa      	ldrh	r2, [r7, #6]
 80006be:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80006c2:	68b9      	ldr	r1, [r7, #8]
 80006c4:	f004 f959 	bl	800497a <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 80006c8:	bf00      	nop
 80006ca:	68fb      	ldr	r3, [r7, #12]
 80006cc:	699b      	ldr	r3, [r3, #24]
 80006ce:	4618      	mov	r0, r3
 80006d0:	f004 fd42 	bl	8005158 <HAL_SPI_GetState>
 80006d4:	4603      	mov	r3, r0
 80006d6:	2b01      	cmp	r3, #1
 80006d8:	d1f7      	bne.n	80006ca <LoRa_writeReg+0x32>
		;
	HAL_SPI_Transmit(_LoRa->hSPIx, values, w_length, TRANSMIT_TIMEOUT);
 80006da:	68fb      	ldr	r3, [r7, #12]
 80006dc:	6998      	ldr	r0, [r3, #24]
 80006de:	8b3a      	ldrh	r2, [r7, #24]
 80006e0:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80006e4:	6839      	ldr	r1, [r7, #0]
 80006e6:	f004 f948 	bl	800497a <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 80006ea:	bf00      	nop
 80006ec:	68fb      	ldr	r3, [r7, #12]
 80006ee:	699b      	ldr	r3, [r3, #24]
 80006f0:	4618      	mov	r0, r3
 80006f2:	f004 fd31 	bl	8005158 <HAL_SPI_GetState>
 80006f6:	4603      	mov	r3, r0
 80006f8:	2b01      	cmp	r3, #1
 80006fa:	d1f7      	bne.n	80006ec <LoRa_writeReg+0x54>
		;
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_SET);
 80006fc:	68fb      	ldr	r3, [r7, #12]
 80006fe:	6818      	ldr	r0, [r3, #0]
 8000700:	68fb      	ldr	r3, [r7, #12]
 8000702:	889b      	ldrh	r3, [r3, #4]
 8000704:	2201      	movs	r2, #1
 8000706:	4619      	mov	r1, r3
 8000708:	f002 f9a6 	bl	8002a58 <HAL_GPIO_WritePin>
}
 800070c:	bf00      	nop
 800070e:	3710      	adds	r7, #16
 8000710:	46bd      	mov	sp, r7
 8000712:	bd80      	pop	{r7, pc}

08000714 <LoRa_setFrequency>:
		arguments   :
			LoRa* LoRa        --> LoRa object handler
			int   freq        --> desired frequency in MHz unit, e.g 434
		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setFrequency(LoRa* _LoRa, int freq){
 8000714:	b580      	push	{r7, lr}
 8000716:	b084      	sub	sp, #16
 8000718:	af00      	add	r7, sp, #0
 800071a:	6078      	str	r0, [r7, #4]
 800071c:	6039      	str	r1, [r7, #0]
	uint8_t  data;
	uint32_t F;
	F = (freq * 524288)>>5;
 800071e:	683b      	ldr	r3, [r7, #0]
 8000720:	04db      	lsls	r3, r3, #19
 8000722:	115b      	asrs	r3, r3, #5
 8000724:	60fb      	str	r3, [r7, #12]

	// write Msb:
	data = F >> 16;
 8000726:	68fb      	ldr	r3, [r7, #12]
 8000728:	0c1b      	lsrs	r3, r3, #16
 800072a:	72fb      	strb	r3, [r7, #11]
	LoRa_write(_LoRa, RegFrMsb, data);
 800072c:	7afb      	ldrb	r3, [r7, #11]
 800072e:	461a      	mov	r2, r3
 8000730:	2106      	movs	r1, #6
 8000732:	6878      	ldr	r0, [r7, #4]
 8000734:	f000 f90f 	bl	8000956 <LoRa_write>
	HAL_Delay(5);
 8000738:	2005      	movs	r0, #5
 800073a:	f001 fab9 	bl	8001cb0 <HAL_Delay>

	// write Mid:
	data = F >> 8;
 800073e:	68fb      	ldr	r3, [r7, #12]
 8000740:	0a1b      	lsrs	r3, r3, #8
 8000742:	72fb      	strb	r3, [r7, #11]
	LoRa_write(_LoRa, RegFrMid, data);
 8000744:	7afb      	ldrb	r3, [r7, #11]
 8000746:	461a      	mov	r2, r3
 8000748:	2107      	movs	r1, #7
 800074a:	6878      	ldr	r0, [r7, #4]
 800074c:	f000 f903 	bl	8000956 <LoRa_write>
	HAL_Delay(5);
 8000750:	2005      	movs	r0, #5
 8000752:	f001 faad 	bl	8001cb0 <HAL_Delay>

	// write Lsb:
	data = F >> 0;
 8000756:	68fb      	ldr	r3, [r7, #12]
 8000758:	72fb      	strb	r3, [r7, #11]
	LoRa_write(_LoRa, RegFrLsb, data);
 800075a:	7afb      	ldrb	r3, [r7, #11]
 800075c:	461a      	mov	r2, r3
 800075e:	2108      	movs	r1, #8
 8000760:	6878      	ldr	r0, [r7, #4]
 8000762:	f000 f8f8 	bl	8000956 <LoRa_write>
	HAL_Delay(5);
 8000766:	2005      	movs	r0, #5
 8000768:	f001 faa2 	bl	8001cb0 <HAL_Delay>
}
 800076c:	bf00      	nop
 800076e:	3710      	adds	r7, #16
 8000770:	46bd      	mov	sp, r7
 8000772:	bd80      	pop	{r7, pc}

08000774 <LoRa_setSpreadingFactor>:
		arguments   :
			LoRa* LoRa        --> LoRa object handler
			int   SP          --> desired spreading factor e.g 7
		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setSpreadingFactor(LoRa* _LoRa, int SF){
 8000774:	b580      	push	{r7, lr}
 8000776:	b084      	sub	sp, #16
 8000778:	af00      	add	r7, sp, #0
 800077a:	6078      	str	r0, [r7, #4]
 800077c:	6039      	str	r1, [r7, #0]
	uint8_t	data;
	uint8_t	read;

	if(SF>12)
 800077e:	683b      	ldr	r3, [r7, #0]
 8000780:	2b0c      	cmp	r3, #12
 8000782:	dd01      	ble.n	8000788 <LoRa_setSpreadingFactor+0x14>
		SF = 12;
 8000784:	230c      	movs	r3, #12
 8000786:	603b      	str	r3, [r7, #0]
	if(SF<7)
 8000788:	683b      	ldr	r3, [r7, #0]
 800078a:	2b06      	cmp	r3, #6
 800078c:	dc01      	bgt.n	8000792 <LoRa_setSpreadingFactor+0x1e>
		SF = 7;
 800078e:	2307      	movs	r3, #7
 8000790:	603b      	str	r3, [r7, #0]

	read = LoRa_read(_LoRa, RegModemConfig2);
 8000792:	211e      	movs	r1, #30
 8000794:	6878      	ldr	r0, [r7, #4]
 8000796:	f000 f8c4 	bl	8000922 <LoRa_read>
 800079a:	4603      	mov	r3, r0
 800079c:	73fb      	strb	r3, [r7, #15]
	HAL_Delay(10);
 800079e:	200a      	movs	r0, #10
 80007a0:	f001 fa86 	bl	8001cb0 <HAL_Delay>

	data = (SF << 4) + (read & 0x0F);
 80007a4:	683b      	ldr	r3, [r7, #0]
 80007a6:	b2db      	uxtb	r3, r3
 80007a8:	011b      	lsls	r3, r3, #4
 80007aa:	b2da      	uxtb	r2, r3
 80007ac:	7bfb      	ldrb	r3, [r7, #15]
 80007ae:	f003 030f 	and.w	r3, r3, #15
 80007b2:	b2db      	uxtb	r3, r3
 80007b4:	4413      	add	r3, r2
 80007b6:	73bb      	strb	r3, [r7, #14]
	LoRa_write(_LoRa, RegModemConfig2, data);
 80007b8:	7bbb      	ldrb	r3, [r7, #14]
 80007ba:	461a      	mov	r2, r3
 80007bc:	211e      	movs	r1, #30
 80007be:	6878      	ldr	r0, [r7, #4]
 80007c0:	f000 f8c9 	bl	8000956 <LoRa_write>
	HAL_Delay(10);
 80007c4:	200a      	movs	r0, #10
 80007c6:	f001 fa73 	bl	8001cb0 <HAL_Delay>
}
 80007ca:	bf00      	nop
 80007cc:	3710      	adds	r7, #16
 80007ce:	46bd      	mov	sp, r7
 80007d0:	bd80      	pop	{r7, pc}

080007d2 <LoRa_setPower>:
		arguments   :
			LoRa* LoRa        --> LoRa object handler
			int   power       --> desired power e.g POWER_17db
		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setPower(LoRa* _LoRa, uint8_t power){
 80007d2:	b580      	push	{r7, lr}
 80007d4:	b082      	sub	sp, #8
 80007d6:	af00      	add	r7, sp, #0
 80007d8:	6078      	str	r0, [r7, #4]
 80007da:	460b      	mov	r3, r1
 80007dc:	70fb      	strb	r3, [r7, #3]
	LoRa_write(_LoRa, RegPaConfig, power);
 80007de:	78fb      	ldrb	r3, [r7, #3]
 80007e0:	461a      	mov	r2, r3
 80007e2:	2109      	movs	r1, #9
 80007e4:	6878      	ldr	r0, [r7, #4]
 80007e6:	f000 f8b6 	bl	8000956 <LoRa_write>
	HAL_Delay(10);
 80007ea:	200a      	movs	r0, #10
 80007ec:	f001 fa60 	bl	8001cb0 <HAL_Delay>
}
 80007f0:	bf00      	nop
 80007f2:	3708      	adds	r7, #8
 80007f4:	46bd      	mov	sp, r7
 80007f6:	bd80      	pop	{r7, pc}

080007f8 <LoRa_setOCP>:
		arguments   :
			LoRa* LoRa        --> LoRa object handler
			int   current     --> desired max currnet in mA, e.g 120
		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setOCP(LoRa* _LoRa, uint8_t current){
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b084      	sub	sp, #16
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	6078      	str	r0, [r7, #4]
 8000800:	460b      	mov	r3, r1
 8000802:	70fb      	strb	r3, [r7, #3]
	uint8_t	OcpTrim = 0;
 8000804:	2300      	movs	r3, #0
 8000806:	73fb      	strb	r3, [r7, #15]

	if(current<45)
 8000808:	78fb      	ldrb	r3, [r7, #3]
 800080a:	2b2c      	cmp	r3, #44	; 0x2c
 800080c:	d801      	bhi.n	8000812 <LoRa_setOCP+0x1a>
		current = 45;
 800080e:	232d      	movs	r3, #45	; 0x2d
 8000810:	70fb      	strb	r3, [r7, #3]
	if(current>240)
 8000812:	78fb      	ldrb	r3, [r7, #3]
 8000814:	2bf0      	cmp	r3, #240	; 0xf0
 8000816:	d901      	bls.n	800081c <LoRa_setOCP+0x24>
		current = 240;
 8000818:	23f0      	movs	r3, #240	; 0xf0
 800081a:	70fb      	strb	r3, [r7, #3]

	if(current <= 120)
 800081c:	78fb      	ldrb	r3, [r7, #3]
 800081e:	2b78      	cmp	r3, #120	; 0x78
 8000820:	d809      	bhi.n	8000836 <LoRa_setOCP+0x3e>
		OcpTrim = (current - 45)/5;
 8000822:	78fb      	ldrb	r3, [r7, #3]
 8000824:	3b2d      	subs	r3, #45	; 0x2d
 8000826:	4a12      	ldr	r2, [pc, #72]	; (8000870 <LoRa_setOCP+0x78>)
 8000828:	fb82 1203 	smull	r1, r2, r2, r3
 800082c:	1052      	asrs	r2, r2, #1
 800082e:	17db      	asrs	r3, r3, #31
 8000830:	1ad3      	subs	r3, r2, r3
 8000832:	73fb      	strb	r3, [r7, #15]
 8000834:	e00b      	b.n	800084e <LoRa_setOCP+0x56>
	else if(current <= 240)
 8000836:	78fb      	ldrb	r3, [r7, #3]
 8000838:	2bf0      	cmp	r3, #240	; 0xf0
 800083a:	d808      	bhi.n	800084e <LoRa_setOCP+0x56>
		OcpTrim = (current + 30)/10;
 800083c:	78fb      	ldrb	r3, [r7, #3]
 800083e:	331e      	adds	r3, #30
 8000840:	4a0b      	ldr	r2, [pc, #44]	; (8000870 <LoRa_setOCP+0x78>)
 8000842:	fb82 1203 	smull	r1, r2, r2, r3
 8000846:	1092      	asrs	r2, r2, #2
 8000848:	17db      	asrs	r3, r3, #31
 800084a:	1ad3      	subs	r3, r2, r3
 800084c:	73fb      	strb	r3, [r7, #15]

	OcpTrim = OcpTrim + (1 << 5);
 800084e:	7bfb      	ldrb	r3, [r7, #15]
 8000850:	3320      	adds	r3, #32
 8000852:	73fb      	strb	r3, [r7, #15]
	LoRa_write(_LoRa, RegOcp, OcpTrim);
 8000854:	7bfb      	ldrb	r3, [r7, #15]
 8000856:	461a      	mov	r2, r3
 8000858:	210b      	movs	r1, #11
 800085a:	6878      	ldr	r0, [r7, #4]
 800085c:	f000 f87b 	bl	8000956 <LoRa_write>
	HAL_Delay(10);
 8000860:	200a      	movs	r0, #10
 8000862:	f001 fa25 	bl	8001cb0 <HAL_Delay>
}
 8000866:	bf00      	nop
 8000868:	3710      	adds	r7, #16
 800086a:	46bd      	mov	sp, r7
 800086c:	bd80      	pop	{r7, pc}
 800086e:	bf00      	nop
 8000870:	66666667 	.word	0x66666667

08000874 <LoRa_setTOMsb_setCRCon>:
		description : set timeout msb to 0xFF + set CRC enable.
		arguments   :
			LoRa* LoRa        --> LoRa object handler
		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setTOMsb_setCRCon(LoRa* _LoRa){
 8000874:	b580      	push	{r7, lr}
 8000876:	b084      	sub	sp, #16
 8000878:	af00      	add	r7, sp, #0
 800087a:	6078      	str	r0, [r7, #4]
	uint8_t read, data;

	read = LoRa_read(_LoRa, RegModemConfig2);
 800087c:	211e      	movs	r1, #30
 800087e:	6878      	ldr	r0, [r7, #4]
 8000880:	f000 f84f 	bl	8000922 <LoRa_read>
 8000884:	4603      	mov	r3, r0
 8000886:	73fb      	strb	r3, [r7, #15]

	data = read | 0x07;
 8000888:	7bfb      	ldrb	r3, [r7, #15]
 800088a:	f043 0307 	orr.w	r3, r3, #7
 800088e:	73bb      	strb	r3, [r7, #14]
	LoRa_write(_LoRa, RegModemConfig2, data);
 8000890:	7bbb      	ldrb	r3, [r7, #14]
 8000892:	461a      	mov	r2, r3
 8000894:	211e      	movs	r1, #30
 8000896:	6878      	ldr	r0, [r7, #4]
 8000898:	f000 f85d 	bl	8000956 <LoRa_write>
	HAL_Delay(10);
 800089c:	200a      	movs	r0, #10
 800089e:	f001 fa07 	bl	8001cb0 <HAL_Delay>
}
 80008a2:	bf00      	nop
 80008a4:	3710      	adds	r7, #16
 80008a6:	46bd      	mov	sp, r7
 80008a8:	bd80      	pop	{r7, pc}

080008aa <LoRa_setSyncWord>:
		arguments   :
			LoRa* LoRa        --> LoRa object handler
			syncWord		  --> Sync word
		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setSyncWord(LoRa* _LoRa, uint8_t syncWord) {
 80008aa:	b580      	push	{r7, lr}
 80008ac:	b082      	sub	sp, #8
 80008ae:	af00      	add	r7, sp, #0
 80008b0:	6078      	str	r0, [r7, #4]
 80008b2:	460b      	mov	r3, r1
 80008b4:	70fb      	strb	r3, [r7, #3]
	LoRa_write(_LoRa, RegSyncWord, syncWord);
 80008b6:	78fb      	ldrb	r3, [r7, #3]
 80008b8:	461a      	mov	r2, r3
 80008ba:	2139      	movs	r1, #57	; 0x39
 80008bc:	6878      	ldr	r0, [r7, #4]
 80008be:	f000 f84a 	bl	8000956 <LoRa_write>
	HAL_Delay(10);
 80008c2:	200a      	movs	r0, #10
 80008c4:	f001 f9f4 	bl	8001cb0 <HAL_Delay>
}
 80008c8:	bf00      	nop
 80008ca:	3708      	adds	r7, #8
 80008cc:	46bd      	mov	sp, r7
 80008ce:	bd80      	pop	{r7, pc}

080008d0 <LoRa_setPacketMode>:
		arguments   :
			LoRa* LoRa        --> LoRa object handler
			uint8_t packetFormat --> 0 Fixed length, 1 variable length
		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_setPacketMode(LoRa* _LoRa, uint8_t packetFormat) {
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b084      	sub	sp, #16
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	6078      	str	r0, [r7, #4]
 80008d8:	460b      	mov	r3, r1
 80008da:	70fb      	strb	r3, [r7, #3]
	uint8_t read;

	read = LoRa_read(_LoRa, RegPacketConfig1);
 80008dc:	2130      	movs	r1, #48	; 0x30
 80008de:	6878      	ldr	r0, [r7, #4]
 80008e0:	f000 f81f 	bl	8000922 <LoRa_read>
 80008e4:	4603      	mov	r3, r0
 80008e6:	73fb      	strb	r3, [r7, #15]
	if(packetFormat) LoRa_write(_LoRa, RegPacketConfig1, read | 0x80); // Set MSB
 80008e8:	78fb      	ldrb	r3, [r7, #3]
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d009      	beq.n	8000902 <LoRa_setPacketMode+0x32>
 80008ee:	7bfb      	ldrb	r3, [r7, #15]
 80008f0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80008f4:	b2db      	uxtb	r3, r3
 80008f6:	461a      	mov	r2, r3
 80008f8:	2130      	movs	r1, #48	; 0x30
 80008fa:	6878      	ldr	r0, [r7, #4]
 80008fc:	f000 f82b 	bl	8000956 <LoRa_write>
 8000900:	e008      	b.n	8000914 <LoRa_setPacketMode+0x44>
	else LoRa_write(_LoRa, RegPacketConfig1, read & ~0x80);	// Clear MSB
 8000902:	7bfb      	ldrb	r3, [r7, #15]
 8000904:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000908:	b2db      	uxtb	r3, r3
 800090a:	461a      	mov	r2, r3
 800090c:	2130      	movs	r1, #48	; 0x30
 800090e:	6878      	ldr	r0, [r7, #4]
 8000910:	f000 f821 	bl	8000956 <LoRa_write>
	HAL_Delay(10);
 8000914:	200a      	movs	r0, #10
 8000916:	f001 f9cb 	bl	8001cb0 <HAL_Delay>
}
 800091a:	bf00      	nop
 800091c:	3710      	adds	r7, #16
 800091e:	46bd      	mov	sp, r7
 8000920:	bd80      	pop	{r7, pc}

08000922 <LoRa_read>:
		arguments   :
			LoRa*   LoRa        --> LoRa object handler
			uint8_t address     -->	address of the register e.g 0x1D
		returns     : register value
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_read(LoRa* _LoRa, uint8_t address){
 8000922:	b580      	push	{r7, lr}
 8000924:	b086      	sub	sp, #24
 8000926:	af02      	add	r7, sp, #8
 8000928:	6078      	str	r0, [r7, #4]
 800092a:	460b      	mov	r3, r1
 800092c:	70fb      	strb	r3, [r7, #3]
	uint8_t read_data;
	uint8_t data_addr;

	data_addr = address & 0x7F;
 800092e:	78fb      	ldrb	r3, [r7, #3]
 8000930:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000934:	b2db      	uxtb	r3, r3
 8000936:	73bb      	strb	r3, [r7, #14]
	LoRa_readReg(_LoRa, &data_addr, 1, &read_data, 1);
 8000938:	f107 030f 	add.w	r3, r7, #15
 800093c:	f107 010e 	add.w	r1, r7, #14
 8000940:	2201      	movs	r2, #1
 8000942:	9200      	str	r2, [sp, #0]
 8000944:	2201      	movs	r2, #1
 8000946:	6878      	ldr	r0, [r7, #4]
 8000948:	f7ff fe68 	bl	800061c <LoRa_readReg>
	//HAL_Delay(5);

	return read_data;
 800094c:	7bfb      	ldrb	r3, [r7, #15]
}
 800094e:	4618      	mov	r0, r3
 8000950:	3710      	adds	r7, #16
 8000952:	46bd      	mov	sp, r7
 8000954:	bd80      	pop	{r7, pc}

08000956 <LoRa_write>:
			LoRa*   LoRa        --> LoRa object handler
			uint8_t address     -->	address of the register e.g 0x1D
			uint8_t value       --> value that you want to write
		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_write(LoRa* _LoRa, uint8_t address, uint8_t value){
 8000956:	b580      	push	{r7, lr}
 8000958:	b086      	sub	sp, #24
 800095a:	af02      	add	r7, sp, #8
 800095c:	6078      	str	r0, [r7, #4]
 800095e:	460b      	mov	r3, r1
 8000960:	70fb      	strb	r3, [r7, #3]
 8000962:	4613      	mov	r3, r2
 8000964:	70bb      	strb	r3, [r7, #2]
	uint8_t data;
	uint8_t addr;

	addr = address | 0x80;
 8000966:	78fb      	ldrb	r3, [r7, #3]
 8000968:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800096c:	b2db      	uxtb	r3, r3
 800096e:	73bb      	strb	r3, [r7, #14]
	data = value;
 8000970:	78bb      	ldrb	r3, [r7, #2]
 8000972:	73fb      	strb	r3, [r7, #15]
	LoRa_writeReg(_LoRa, &addr, 1, &data, 1);
 8000974:	f107 030f 	add.w	r3, r7, #15
 8000978:	f107 010e 	add.w	r1, r7, #14
 800097c:	2201      	movs	r2, #1
 800097e:	9200      	str	r2, [sp, #0]
 8000980:	2201      	movs	r2, #1
 8000982:	6878      	ldr	r0, [r7, #4]
 8000984:	f7ff fe88 	bl	8000698 <LoRa_writeReg>
	//HAL_Delay(5);
}
 8000988:	bf00      	nop
 800098a:	3710      	adds	r7, #16
 800098c:	46bd      	mov	sp, r7
 800098e:	bd80      	pop	{r7, pc}

08000990 <LoRa_BurstWrite>:
			LoRa*   LoRa        --> LoRa object handler
			uint8_t address     -->	address of the register e.g 0x1D
			uint8_t *value      --> address of values that you want to write
		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_BurstWrite(LoRa* _LoRa, uint8_t address, uint8_t *value, uint8_t length){
 8000990:	b580      	push	{r7, lr}
 8000992:	b086      	sub	sp, #24
 8000994:	af00      	add	r7, sp, #0
 8000996:	60f8      	str	r0, [r7, #12]
 8000998:	607a      	str	r2, [r7, #4]
 800099a:	461a      	mov	r2, r3
 800099c:	460b      	mov	r3, r1
 800099e:	72fb      	strb	r3, [r7, #11]
 80009a0:	4613      	mov	r3, r2
 80009a2:	72bb      	strb	r3, [r7, #10]
	uint8_t addr;
	addr = address | 0x80;
 80009a4:	7afb      	ldrb	r3, [r7, #11]
 80009a6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80009aa:	b2db      	uxtb	r3, r3
 80009ac:	75fb      	strb	r3, [r7, #23]

	//NSS = 1
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_RESET);
 80009ae:	68fb      	ldr	r3, [r7, #12]
 80009b0:	6818      	ldr	r0, [r3, #0]
 80009b2:	68fb      	ldr	r3, [r7, #12]
 80009b4:	889b      	ldrh	r3, [r3, #4]
 80009b6:	2200      	movs	r2, #0
 80009b8:	4619      	mov	r1, r3
 80009ba:	f002 f84d 	bl	8002a58 <HAL_GPIO_WritePin>
	//say module thai I want to write in RegFiFo
	HAL_SPI_Transmit(_LoRa->hSPIx, &addr, 1, TRANSMIT_TIMEOUT);
 80009be:	68fb      	ldr	r3, [r7, #12]
 80009c0:	6998      	ldr	r0, [r3, #24]
 80009c2:	f107 0117 	add.w	r1, r7, #23
 80009c6:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80009ca:	2201      	movs	r2, #1
 80009cc:	f003 ffd5 	bl	800497a <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 80009d0:	bf00      	nop
 80009d2:	68fb      	ldr	r3, [r7, #12]
 80009d4:	699b      	ldr	r3, [r3, #24]
 80009d6:	4618      	mov	r0, r3
 80009d8:	f004 fbbe 	bl	8005158 <HAL_SPI_GetState>
 80009dc:	4603      	mov	r3, r0
 80009de:	2b01      	cmp	r3, #1
 80009e0:	d1f7      	bne.n	80009d2 <LoRa_BurstWrite+0x42>
		;
	//Write data in FiFo
	HAL_SPI_Transmit(_LoRa->hSPIx, value, length, TRANSMIT_TIMEOUT);
 80009e2:	68fb      	ldr	r3, [r7, #12]
 80009e4:	6998      	ldr	r0, [r3, #24]
 80009e6:	7abb      	ldrb	r3, [r7, #10]
 80009e8:	b29a      	uxth	r2, r3
 80009ea:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80009ee:	6879      	ldr	r1, [r7, #4]
 80009f0:	f003 ffc3 	bl	800497a <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(_LoRa->hSPIx) != HAL_SPI_STATE_READY)
 80009f4:	bf00      	nop
 80009f6:	68fb      	ldr	r3, [r7, #12]
 80009f8:	699b      	ldr	r3, [r3, #24]
 80009fa:	4618      	mov	r0, r3
 80009fc:	f004 fbac 	bl	8005158 <HAL_SPI_GetState>
 8000a00:	4603      	mov	r3, r0
 8000a02:	2b01      	cmp	r3, #1
 8000a04:	d1f7      	bne.n	80009f6 <LoRa_BurstWrite+0x66>
		;
	//NSS = 0
	//HAL_Delay(5);
	HAL_GPIO_WritePin(_LoRa->CS_port, _LoRa->CS_pin, GPIO_PIN_SET);
 8000a06:	68fb      	ldr	r3, [r7, #12]
 8000a08:	6818      	ldr	r0, [r3, #0]
 8000a0a:	68fb      	ldr	r3, [r7, #12]
 8000a0c:	889b      	ldrh	r3, [r3, #4]
 8000a0e:	2201      	movs	r2, #1
 8000a10:	4619      	mov	r1, r3
 8000a12:	f002 f821 	bl	8002a58 <HAL_GPIO_WritePin>
}
 8000a16:	bf00      	nop
 8000a18:	3718      	adds	r7, #24
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	bd80      	pop	{r7, pc}

08000a1e <LoRa_isvalid>:
		description : check the LoRa instruct values
		arguments   :
			LoRa* LoRa --> LoRa object handler
		returns     : returns 1 if all of the values were given, otherwise returns 0
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_isvalid(LoRa* _LoRa){
 8000a1e:	b480      	push	{r7}
 8000a20:	b083      	sub	sp, #12
 8000a22:	af00      	add	r7, sp, #0
 8000a24:	6078      	str	r0, [r7, #4]

	return 1;
 8000a26:	2301      	movs	r3, #1
}
 8000a28:	4618      	mov	r0, r3
 8000a2a:	370c      	adds	r7, #12
 8000a2c:	46bd      	mov	sp, r7
 8000a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a32:	4770      	bx	lr

08000a34 <LoRa_transmit>:
			uint8_t  data			--> A pointer to the data you wanna send
			uint8_t	 length   --> Size of your data in Bytes
			uint16_t timeOut	--> Timeout in milliseconds
		returns     : 1 in case of success, 0 in case of timeout
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_transmit(LoRa* _LoRa, uint8_t* data, uint16_t length, uint16_t timeout){
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b086      	sub	sp, #24
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	60f8      	str	r0, [r7, #12]
 8000a3c:	60b9      	str	r1, [r7, #8]
 8000a3e:	4611      	mov	r1, r2
 8000a40:	461a      	mov	r2, r3
 8000a42:	460b      	mov	r3, r1
 8000a44:	80fb      	strh	r3, [r7, #6]
 8000a46:	4613      	mov	r3, r2
 8000a48:	80bb      	strh	r3, [r7, #4]
	uint8_t read;

	int mode = _LoRa->current_mode;
 8000a4a:	68fb      	ldr	r3, [r7, #12]
 8000a4c:	69db      	ldr	r3, [r3, #28]
 8000a4e:	617b      	str	r3, [r7, #20]
	LoRa_gotoMode(_LoRa, STNBY_MODE);
 8000a50:	2101      	movs	r1, #1
 8000a52:	68f8      	ldr	r0, [r7, #12]
 8000a54:	f7ff fd81 	bl	800055a <LoRa_gotoMode>
	read = LoRa_read(_LoRa, RegFiFoTxBaseAddr);
 8000a58:	210e      	movs	r1, #14
 8000a5a:	68f8      	ldr	r0, [r7, #12]
 8000a5c:	f7ff ff61 	bl	8000922 <LoRa_read>
 8000a60:	4603      	mov	r3, r0
 8000a62:	74fb      	strb	r3, [r7, #19]
	LoRa_write(_LoRa, RegFiFoAddPtr, read);
 8000a64:	7cfb      	ldrb	r3, [r7, #19]
 8000a66:	461a      	mov	r2, r3
 8000a68:	210d      	movs	r1, #13
 8000a6a:	68f8      	ldr	r0, [r7, #12]
 8000a6c:	f7ff ff73 	bl	8000956 <LoRa_write>
	LoRa_write(_LoRa, RegPayloadLength, length);
 8000a70:	88fb      	ldrh	r3, [r7, #6]
 8000a72:	b2db      	uxtb	r3, r3
 8000a74:	461a      	mov	r2, r3
 8000a76:	2122      	movs	r1, #34	; 0x22
 8000a78:	68f8      	ldr	r0, [r7, #12]
 8000a7a:	f7ff ff6c 	bl	8000956 <LoRa_write>
	LoRa_BurstWrite(_LoRa, RegFiFo, data, length);
 8000a7e:	88fb      	ldrh	r3, [r7, #6]
 8000a80:	b2db      	uxtb	r3, r3
 8000a82:	68ba      	ldr	r2, [r7, #8]
 8000a84:	2100      	movs	r1, #0
 8000a86:	68f8      	ldr	r0, [r7, #12]
 8000a88:	f7ff ff82 	bl	8000990 <LoRa_BurstWrite>
	LoRa_gotoMode(_LoRa, TRANSMIT_MODE);
 8000a8c:	2103      	movs	r1, #3
 8000a8e:	68f8      	ldr	r0, [r7, #12]
 8000a90:	f7ff fd63 	bl	800055a <LoRa_gotoMode>
	while(1){
		read = LoRa_read(_LoRa, RegIrqFlags);
 8000a94:	2112      	movs	r1, #18
 8000a96:	68f8      	ldr	r0, [r7, #12]
 8000a98:	f7ff ff43 	bl	8000922 <LoRa_read>
 8000a9c:	4603      	mov	r3, r0
 8000a9e:	74fb      	strb	r3, [r7, #19]
		if((read & 0x08)!=0){
 8000aa0:	7cfb      	ldrb	r3, [r7, #19]
 8000aa2:	f003 0308 	and.w	r3, r3, #8
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d00a      	beq.n	8000ac0 <LoRa_transmit+0x8c>
			LoRa_write(_LoRa, RegIrqFlags, 0xFF);
 8000aaa:	22ff      	movs	r2, #255	; 0xff
 8000aac:	2112      	movs	r1, #18
 8000aae:	68f8      	ldr	r0, [r7, #12]
 8000ab0:	f7ff ff51 	bl	8000956 <LoRa_write>
			LoRa_gotoMode(_LoRa, mode);
 8000ab4:	6979      	ldr	r1, [r7, #20]
 8000ab6:	68f8      	ldr	r0, [r7, #12]
 8000ab8:	f7ff fd4f 	bl	800055a <LoRa_gotoMode>
			return 1;
 8000abc:	2301      	movs	r3, #1
 8000abe:	e00f      	b.n	8000ae0 <LoRa_transmit+0xac>
		}
		else{
			if(--timeout==0){
 8000ac0:	88bb      	ldrh	r3, [r7, #4]
 8000ac2:	3b01      	subs	r3, #1
 8000ac4:	80bb      	strh	r3, [r7, #4]
 8000ac6:	88bb      	ldrh	r3, [r7, #4]
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d105      	bne.n	8000ad8 <LoRa_transmit+0xa4>
				LoRa_gotoMode(_LoRa, mode);
 8000acc:	6979      	ldr	r1, [r7, #20]
 8000ace:	68f8      	ldr	r0, [r7, #12]
 8000ad0:	f7ff fd43 	bl	800055a <LoRa_gotoMode>
				return 0;
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	e003      	b.n	8000ae0 <LoRa_transmit+0xac>
			}
		}
		HAL_Delay(1);
 8000ad8:	2001      	movs	r0, #1
 8000ada:	f001 f8e9 	bl	8001cb0 <HAL_Delay>
		read = LoRa_read(_LoRa, RegIrqFlags);
 8000ade:	e7d9      	b.n	8000a94 <LoRa_transmit+0x60>
	}

}
 8000ae0:	4618      	mov	r0, r3
 8000ae2:	3718      	adds	r7, #24
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	bd80      	pop	{r7, pc}

08000ae8 <LoRa_startReceiving>:
		description : Start receiving continuously
		arguments   :
			LoRa*    LoRa     --> LoRa object handler
		returns     : Nothing
\* ----------------------------------------------------------------------------- */
void LoRa_startReceiving(LoRa* _LoRa){
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b082      	sub	sp, #8
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	6078      	str	r0, [r7, #4]
	LoRa_gotoMode(_LoRa, RXCONTIN_MODE);
 8000af0:	2105      	movs	r1, #5
 8000af2:	6878      	ldr	r0, [r7, #4]
 8000af4:	f7ff fd31 	bl	800055a <LoRa_gotoMode>
}
 8000af8:	bf00      	nop
 8000afa:	3708      	adds	r7, #8
 8000afc:	46bd      	mov	sp, r7
 8000afe:	bd80      	pop	{r7, pc}

08000b00 <LoRa_receive>:
			LoRa*    LoRa     --> LoRa object handler
			uint8_t  data			--> A pointer to the array that you want to write bytes in it
			uint8_t	 length   --> Determines how many bytes you want to read
		returns     : The number of bytes received
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_receive(LoRa* _LoRa, uint8_t* data, uint16_t length){
 8000b00:	b590      	push	{r4, r7, lr}
 8000b02:	b089      	sub	sp, #36	; 0x24
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	60f8      	str	r0, [r7, #12]
 8000b08:	60b9      	str	r1, [r7, #8]
 8000b0a:	4613      	mov	r3, r2
 8000b0c:	80fb      	strh	r3, [r7, #6]
	uint8_t read;
	uint8_t number_of_bytes;
	uint8_t min = 0;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	77fb      	strb	r3, [r7, #31]

	for(int i=0; i<length; i++)
 8000b12:	2300      	movs	r3, #0
 8000b14:	61bb      	str	r3, [r7, #24]
 8000b16:	e007      	b.n	8000b28 <LoRa_receive+0x28>
		data[i]=0;
 8000b18:	69bb      	ldr	r3, [r7, #24]
 8000b1a:	68ba      	ldr	r2, [r7, #8]
 8000b1c:	4413      	add	r3, r2
 8000b1e:	2200      	movs	r2, #0
 8000b20:	701a      	strb	r2, [r3, #0]
	for(int i=0; i<length; i++)
 8000b22:	69bb      	ldr	r3, [r7, #24]
 8000b24:	3301      	adds	r3, #1
 8000b26:	61bb      	str	r3, [r7, #24]
 8000b28:	88fb      	ldrh	r3, [r7, #6]
 8000b2a:	69ba      	ldr	r2, [r7, #24]
 8000b2c:	429a      	cmp	r2, r3
 8000b2e:	dbf3      	blt.n	8000b18 <LoRa_receive+0x18>

	LoRa_gotoMode(_LoRa, STNBY_MODE);
 8000b30:	2101      	movs	r1, #1
 8000b32:	68f8      	ldr	r0, [r7, #12]
 8000b34:	f7ff fd11 	bl	800055a <LoRa_gotoMode>
	read = LoRa_read(_LoRa, RegIrqFlags);
 8000b38:	2112      	movs	r1, #18
 8000b3a:	68f8      	ldr	r0, [r7, #12]
 8000b3c:	f7ff fef1 	bl	8000922 <LoRa_read>
 8000b40:	4603      	mov	r3, r0
 8000b42:	74fb      	strb	r3, [r7, #19]
	if((read & 0x40) != 0){
 8000b44:	7cfb      	ldrb	r3, [r7, #19]
 8000b46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d033      	beq.n	8000bb6 <LoRa_receive+0xb6>
		LoRa_write(_LoRa, RegIrqFlags, 0xFF);
 8000b4e:	22ff      	movs	r2, #255	; 0xff
 8000b50:	2112      	movs	r1, #18
 8000b52:	68f8      	ldr	r0, [r7, #12]
 8000b54:	f7ff feff 	bl	8000956 <LoRa_write>
		number_of_bytes = LoRa_read(_LoRa, RegRxNbBytes);
 8000b58:	2113      	movs	r1, #19
 8000b5a:	68f8      	ldr	r0, [r7, #12]
 8000b5c:	f7ff fee1 	bl	8000922 <LoRa_read>
 8000b60:	4603      	mov	r3, r0
 8000b62:	74bb      	strb	r3, [r7, #18]
		read = LoRa_read(_LoRa, RegFiFoRxCurrentAddr);
 8000b64:	2110      	movs	r1, #16
 8000b66:	68f8      	ldr	r0, [r7, #12]
 8000b68:	f7ff fedb 	bl	8000922 <LoRa_read>
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	74fb      	strb	r3, [r7, #19]
		LoRa_write(_LoRa, RegFiFoAddPtr, read);
 8000b70:	7cfb      	ldrb	r3, [r7, #19]
 8000b72:	461a      	mov	r2, r3
 8000b74:	210d      	movs	r1, #13
 8000b76:	68f8      	ldr	r0, [r7, #12]
 8000b78:	f7ff feed 	bl	8000956 <LoRa_write>
		min = length >= number_of_bytes ? number_of_bytes : length;
 8000b7c:	7cbb      	ldrb	r3, [r7, #18]
 8000b7e:	b29b      	uxth	r3, r3
 8000b80:	88fa      	ldrh	r2, [r7, #6]
 8000b82:	429a      	cmp	r2, r3
 8000b84:	d202      	bcs.n	8000b8c <LoRa_receive+0x8c>
 8000b86:	88fb      	ldrh	r3, [r7, #6]
 8000b88:	b2db      	uxtb	r3, r3
 8000b8a:	e000      	b.n	8000b8e <LoRa_receive+0x8e>
 8000b8c:	7cbb      	ldrb	r3, [r7, #18]
 8000b8e:	77fb      	strb	r3, [r7, #31]
		for(int i=0; i<min; i++)
 8000b90:	2300      	movs	r3, #0
 8000b92:	617b      	str	r3, [r7, #20]
 8000b94:	e00b      	b.n	8000bae <LoRa_receive+0xae>
			data[i] = LoRa_read(_LoRa, RegFiFo);
 8000b96:	697b      	ldr	r3, [r7, #20]
 8000b98:	68ba      	ldr	r2, [r7, #8]
 8000b9a:	18d4      	adds	r4, r2, r3
 8000b9c:	2100      	movs	r1, #0
 8000b9e:	68f8      	ldr	r0, [r7, #12]
 8000ba0:	f7ff febf 	bl	8000922 <LoRa_read>
 8000ba4:	4603      	mov	r3, r0
 8000ba6:	7023      	strb	r3, [r4, #0]
		for(int i=0; i<min; i++)
 8000ba8:	697b      	ldr	r3, [r7, #20]
 8000baa:	3301      	adds	r3, #1
 8000bac:	617b      	str	r3, [r7, #20]
 8000bae:	7ffb      	ldrb	r3, [r7, #31]
 8000bb0:	697a      	ldr	r2, [r7, #20]
 8000bb2:	429a      	cmp	r2, r3
 8000bb4:	dbef      	blt.n	8000b96 <LoRa_receive+0x96>
	}
	LoRa_gotoMode(_LoRa, RXCONTIN_MODE);
 8000bb6:	2105      	movs	r1, #5
 8000bb8:	68f8      	ldr	r0, [r7, #12]
 8000bba:	f7ff fcce 	bl	800055a <LoRa_gotoMode>
    return min;
 8000bbe:	7ffb      	ldrb	r3, [r7, #31]
}
 8000bc0:	4618      	mov	r0, r3
 8000bc2:	3724      	adds	r7, #36	; 0x24
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	bd90      	pop	{r4, r7, pc}

08000bc8 <LoRa_init>:
		description : initialize and set the right setting according to LoRa sruct vars
		arguments   :
			LoRa* LoRa        --> LoRa object handler
		returns     : Nothing
\* ----------------------------------------------------------------------------- */
uint16_t LoRa_init(LoRa* _LoRa){
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b084      	sub	sp, #16
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	6078      	str	r0, [r7, #4]
	uint8_t    data;
	uint8_t    read;

	if(LoRa_isvalid(_LoRa)){
 8000bd0:	6878      	ldr	r0, [r7, #4]
 8000bd2:	f7ff ff24 	bl	8000a1e <LoRa_isvalid>
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	f000 809a 	beq.w	8000d12 <LoRa_init+0x14a>
		// goto sleep mode:
			LoRa_gotoMode(_LoRa, SLEEP_MODE);
 8000bde:	2100      	movs	r1, #0
 8000be0:	6878      	ldr	r0, [r7, #4]
 8000be2:	f7ff fcba 	bl	800055a <LoRa_gotoMode>
			HAL_Delay(10);
 8000be6:	200a      	movs	r0, #10
 8000be8:	f001 f862 	bl	8001cb0 <HAL_Delay>

		// turn on lora mode:
			read = LoRa_read(_LoRa, RegOpMode);
 8000bec:	2101      	movs	r1, #1
 8000bee:	6878      	ldr	r0, [r7, #4]
 8000bf0:	f7ff fe97 	bl	8000922 <LoRa_read>
 8000bf4:	4603      	mov	r3, r0
 8000bf6:	73fb      	strb	r3, [r7, #15]
			HAL_Delay(10);
 8000bf8:	200a      	movs	r0, #10
 8000bfa:	f001 f859 	bl	8001cb0 <HAL_Delay>
			data = read | 0x80;
 8000bfe:	7bfb      	ldrb	r3, [r7, #15]
 8000c00:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000c04:	73bb      	strb	r3, [r7, #14]
			LoRa_write(_LoRa, RegOpMode, data);
 8000c06:	7bbb      	ldrb	r3, [r7, #14]
 8000c08:	461a      	mov	r2, r3
 8000c0a:	2101      	movs	r1, #1
 8000c0c:	6878      	ldr	r0, [r7, #4]
 8000c0e:	f7ff fea2 	bl	8000956 <LoRa_write>
			HAL_Delay(100);
 8000c12:	2064      	movs	r0, #100	; 0x64
 8000c14:	f001 f84c 	bl	8001cb0 <HAL_Delay>

		// set frequency:
			LoRa_setFrequency(_LoRa, _LoRa->frequency);
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	6a1b      	ldr	r3, [r3, #32]
 8000c1c:	4619      	mov	r1, r3
 8000c1e:	6878      	ldr	r0, [r7, #4]
 8000c20:	f7ff fd78 	bl	8000714 <LoRa_setFrequency>

		// set output power gain:
			LoRa_setPower(_LoRa, _LoRa->power);
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8000c2a:	4619      	mov	r1, r3
 8000c2c:	6878      	ldr	r0, [r7, #4]
 8000c2e:	f7ff fdd0 	bl	80007d2 <LoRa_setPower>

		// set over current protection:
			LoRa_setOCP(_LoRa, _LoRa->overCurrentProtection);
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8000c38:	4619      	mov	r1, r3
 8000c3a:	6878      	ldr	r0, [r7, #4]
 8000c3c:	f7ff fddc 	bl	80007f8 <LoRa_setOCP>

		// set LNA gain:
			LoRa_write(_LoRa, RegLna, 0x23);
 8000c40:	2223      	movs	r2, #35	; 0x23
 8000c42:	210c      	movs	r1, #12
 8000c44:	6878      	ldr	r0, [r7, #4]
 8000c46:	f7ff fe86 	bl	8000956 <LoRa_write>

		// set sync word:
			LoRa_setSyncWord(_LoRa, _LoRa->syncWord);
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8000c50:	4619      	mov	r1, r3
 8000c52:	6878      	ldr	r0, [r7, #4]
 8000c54:	f7ff fe29 	bl	80008aa <LoRa_setSyncWord>

		// set spreading factor, CRC on, and Timeout Msb:
			LoRa_setTOMsb_setCRCon(_LoRa);
 8000c58:	6878      	ldr	r0, [r7, #4]
 8000c5a:	f7ff fe0b 	bl	8000874 <LoRa_setTOMsb_setCRCon>
			LoRa_setSpreadingFactor(_LoRa, _LoRa->spredingFactor);
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000c64:	4619      	mov	r1, r3
 8000c66:	6878      	ldr	r0, [r7, #4]
 8000c68:	f7ff fd84 	bl	8000774 <LoRa_setSpreadingFactor>

		// set Timeout Lsb:
			LoRa_write(_LoRa, RegSymbTimeoutL, 0xFF);
 8000c6c:	22ff      	movs	r2, #255	; 0xff
 8000c6e:	211f      	movs	r1, #31
 8000c70:	6878      	ldr	r0, [r7, #4]
 8000c72:	f7ff fe70 	bl	8000956 <LoRa_write>

		// set bandwidth, coding rate and expilicit mode:
			// 8 bit RegModemConfig --> | X | X | X | X | X | X | X | X |
			//       bits represent --> |   bandwidth   |     CR    |I/E|
			data = 0;
 8000c76:	2300      	movs	r3, #0
 8000c78:	73bb      	strb	r3, [r7, #14]
			data = (_LoRa->bandWidth << 4) + (_LoRa->crcRate << 1);
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000c80:	011b      	lsls	r3, r3, #4
 8000c82:	b2da      	uxtb	r2, r3
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8000c8a:	005b      	lsls	r3, r3, #1
 8000c8c:	b2db      	uxtb	r3, r3
 8000c8e:	4413      	add	r3, r2
 8000c90:	73bb      	strb	r3, [r7, #14]
			LoRa_write(_LoRa, RegModemConfig1, data);
 8000c92:	7bbb      	ldrb	r3, [r7, #14]
 8000c94:	461a      	mov	r2, r3
 8000c96:	211d      	movs	r1, #29
 8000c98:	6878      	ldr	r0, [r7, #4]
 8000c9a:	f7ff fe5c 	bl	8000956 <LoRa_write>

		// set preamble:
			LoRa_write(_LoRa, RegPreambleMsb, _LoRa->preamble >> 8);
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000ca2:	0a1b      	lsrs	r3, r3, #8
 8000ca4:	b29b      	uxth	r3, r3
 8000ca6:	b2db      	uxtb	r3, r3
 8000ca8:	461a      	mov	r2, r3
 8000caa:	2120      	movs	r1, #32
 8000cac:	6878      	ldr	r0, [r7, #4]
 8000cae:	f7ff fe52 	bl	8000956 <LoRa_write>
			LoRa_write(_LoRa, RegPreambleLsb, _LoRa->preamble >> 0);
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000cb6:	b2db      	uxtb	r3, r3
 8000cb8:	461a      	mov	r2, r3
 8000cba:	2121      	movs	r1, #33	; 0x21
 8000cbc:	6878      	ldr	r0, [r7, #4]
 8000cbe:	f7ff fe4a 	bl	8000956 <LoRa_write>

		// DIO mapping:   --> DIO: RxDone
			read = LoRa_read(_LoRa, RegDioMapping1);
 8000cc2:	2140      	movs	r1, #64	; 0x40
 8000cc4:	6878      	ldr	r0, [r7, #4]
 8000cc6:	f7ff fe2c 	bl	8000922 <LoRa_read>
 8000cca:	4603      	mov	r3, r0
 8000ccc:	73fb      	strb	r3, [r7, #15]
			data = read | 0x3F;
 8000cce:	7bfb      	ldrb	r3, [r7, #15]
 8000cd0:	f043 033f 	orr.w	r3, r3, #63	; 0x3f
 8000cd4:	73bb      	strb	r3, [r7, #14]
			LoRa_write(_LoRa, RegDioMapping1, data);
 8000cd6:	7bbb      	ldrb	r3, [r7, #14]
 8000cd8:	461a      	mov	r2, r3
 8000cda:	2140      	movs	r1, #64	; 0x40
 8000cdc:	6878      	ldr	r0, [r7, #4]
 8000cde:	f7ff fe3a 	bl	8000956 <LoRa_write>

		// goto standby mode:
			LoRa_gotoMode(_LoRa, STNBY_MODE);
 8000ce2:	2101      	movs	r1, #1
 8000ce4:	6878      	ldr	r0, [r7, #4]
 8000ce6:	f7ff fc38 	bl	800055a <LoRa_gotoMode>
			_LoRa->current_mode = STNBY_MODE;
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	2201      	movs	r2, #1
 8000cee:	61da      	str	r2, [r3, #28]
			HAL_Delay(10);
 8000cf0:	200a      	movs	r0, #10
 8000cf2:	f000 ffdd 	bl	8001cb0 <HAL_Delay>

			read = LoRa_read(_LoRa, RegVersion);
 8000cf6:	2142      	movs	r1, #66	; 0x42
 8000cf8:	6878      	ldr	r0, [r7, #4]
 8000cfa:	f7ff fe12 	bl	8000922 <LoRa_read>
 8000cfe:	4603      	mov	r3, r0
 8000d00:	73fb      	strb	r3, [r7, #15]
			if(read == 0x12)
 8000d02:	7bfb      	ldrb	r3, [r7, #15]
 8000d04:	2b12      	cmp	r3, #18
 8000d06:	d101      	bne.n	8000d0c <LoRa_init+0x144>
				return LORA_OK;
 8000d08:	23c8      	movs	r3, #200	; 0xc8
 8000d0a:	e004      	b.n	8000d16 <LoRa_init+0x14e>
			else
				return LORA_NOT_FOUND;
 8000d0c:	f44f 73ca 	mov.w	r3, #404	; 0x194
 8000d10:	e001      	b.n	8000d16 <LoRa_init+0x14e>
	}
	else {
		return LORA_UNAVAILABLE;
 8000d12:	f240 13f7 	movw	r3, #503	; 0x1f7
	}
}
 8000d16:	4618      	mov	r0, r3
 8000d18:	3710      	adds	r7, #16
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	bd80      	pop	{r7, pc}

08000d1e <LoRa_received_bytes>:
		description : check number of bytes available in FIFO RX buffer
		arguments   :
			LoRa* LoRa        --> LoRa object handler
		returns     : 8 bit integer, number of bytes available to read from FIFO RX buffer
\* ----------------------------------------------------------------------------- */
uint8_t LoRa_received_bytes(LoRa* _LoRa) {
 8000d1e:	b580      	push	{r7, lr}
 8000d20:	b082      	sub	sp, #8
 8000d22:	af00      	add	r7, sp, #0
 8000d24:	6078      	str	r0, [r7, #4]
	return LoRa_read(_LoRa, RegRxNbBytes);
 8000d26:	2113      	movs	r1, #19
 8000d28:	6878      	ldr	r0, [r7, #4]
 8000d2a:	f7ff fdfa 	bl	8000922 <LoRa_read>
 8000d2e:	4603      	mov	r3, r0
}
 8000d30:	4618      	mov	r0, r3
 8000d32:	3708      	adds	r7, #8
 8000d34:	46bd      	mov	sp, r7
 8000d36:	bd80      	pop	{r7, pc}

08000d38 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d38:	b5b0      	push	{r4, r5, r7, lr}
 8000d3a:	f5ad 7d10 	sub.w	sp, sp, #576	; 0x240
 8000d3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  RetargetInit(USB_UART);
 8000d40:	4b9f      	ldr	r3, [pc, #636]	; (8000fc0 <main+0x288>)
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	4618      	mov	r0, r3
 8000d46:	f000 fc5b 	bl	8001600 <RetargetInit>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d4a:	f000 ff3f 	bl	8001bcc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d4e:	f000 f9af 	bl	80010b0 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  //***************************** DMA CLK MUST BE ENABLED BEFORE UART ***********************
  // This is because the UART init writes to DMA registers (when DMA is enabled)
  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000d52:	2300      	movs	r3, #0
 8000d54:	f8c7 3234 	str.w	r3, [r7, #564]	; 0x234
 8000d58:	4b9a      	ldr	r3, [pc, #616]	; (8000fc4 <main+0x28c>)
 8000d5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d5c:	4a99      	ldr	r2, [pc, #612]	; (8000fc4 <main+0x28c>)
 8000d5e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000d62:	6313      	str	r3, [r2, #48]	; 0x30
 8000d64:	4b97      	ldr	r3, [pc, #604]	; (8000fc4 <main+0x28c>)
 8000d66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d68:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000d6c:	f8c7 3234 	str.w	r3, [r7, #564]	; 0x234
 8000d70:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d74:	f000 fafe 	bl	8001374 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000d78:	f000 fa88 	bl	800128c <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000d7c:	f000 fab0 	bl	80012e0 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 8000d80:	f000 fa00 	bl	8001184 <MX_SPI1_Init>
  MX_DMA_Init();
 8000d84:	f000 fad6 	bl	8001334 <MX_DMA_Init>
  MX_TIM2_Init();
 8000d88:	f000 fa32 	bl	80011f0 <MX_TIM2_Init>
  MX_USB_DEVICE_Init();
 8000d8c:	f009 fe5e 	bl	800aa4c <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */

  // Polling timer init
  HAL_TIM_Base_Start_IT(Poll_Timer);
 8000d90:	4b8d      	ldr	r3, [pc, #564]	; (8000fc8 <main+0x290>)
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	4618      	mov	r0, r3
 8000d96:	f004 fb6d 	bl	8005474 <HAL_TIM_Base_Start_IT>
  // UART interrupt init
  HAL_UART_Receive_DMA (USB_UART, UART_Buff, sizeof(UART_Buff));
 8000d9a:	4b89      	ldr	r3, [pc, #548]	; (8000fc0 <main+0x288>)
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8000da2:	498a      	ldr	r1, [pc, #552]	; (8000fcc <main+0x294>)
 8000da4:	4618      	mov	r0, r3
 8000da6:	f005 f922 	bl	8005fee <HAL_UART_Receive_DMA>

  // LoRa Class definitions
  LoRaClass = newLoRa();
 8000daa:	4c89      	ldr	r4, [pc, #548]	; (8000fd0 <main+0x298>)
 8000dac:	463b      	mov	r3, r7
 8000dae:	4618      	mov	r0, r3
 8000db0:	f7ff fb8c 	bl	80004cc <newLoRa>
 8000db4:	f507 7310 	add.w	r3, r7, #576	; 0x240
 8000db8:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
 8000dbc:	461d      	mov	r5, r3
 8000dbe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000dc0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000dc2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000dc4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000dc6:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000dca:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  LoRaClass.hSPIx                 = RF_SPI;
 8000dce:	4b81      	ldr	r3, [pc, #516]	; (8000fd4 <main+0x29c>)
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	4a7f      	ldr	r2, [pc, #508]	; (8000fd0 <main+0x298>)
 8000dd4:	6193      	str	r3, [r2, #24]
  LoRaClass.CS_port               = RF_SPI_NSS_GPIO_Port;
 8000dd6:	4b7e      	ldr	r3, [pc, #504]	; (8000fd0 <main+0x298>)
 8000dd8:	4a7f      	ldr	r2, [pc, #508]	; (8000fd8 <main+0x2a0>)
 8000dda:	601a      	str	r2, [r3, #0]
  LoRaClass.CS_pin                = RF_SPI_NSS_Pin;
 8000ddc:	4b7c      	ldr	r3, [pc, #496]	; (8000fd0 <main+0x298>)
 8000dde:	2210      	movs	r2, #16
 8000de0:	809a      	strh	r2, [r3, #4]
  LoRaClass.reset_port            = RESET_RF_GPIO_Port;
 8000de2:	4b7b      	ldr	r3, [pc, #492]	; (8000fd0 <main+0x298>)
 8000de4:	4a7d      	ldr	r2, [pc, #500]	; (8000fdc <main+0x2a4>)
 8000de6:	609a      	str	r2, [r3, #8]
  LoRaClass.reset_pin             = RESET_RF_Pin;
 8000de8:	4b79      	ldr	r3, [pc, #484]	; (8000fd0 <main+0x298>)
 8000dea:	2201      	movs	r2, #1
 8000dec:	819a      	strh	r2, [r3, #12]
  LoRaClass.DIO0_port			  = IO0_RF_GPIO_Port;
 8000dee:	4b78      	ldr	r3, [pc, #480]	; (8000fd0 <main+0x298>)
 8000df0:	4a7a      	ldr	r2, [pc, #488]	; (8000fdc <main+0x2a4>)
 8000df2:	611a      	str	r2, [r3, #16]
  LoRaClass.DIO0_pin			  = IO0_RF_Pin;
 8000df4:	4b76      	ldr	r3, [pc, #472]	; (8000fd0 <main+0x298>)
 8000df6:	2202      	movs	r2, #2
 8000df8:	829a      	strh	r2, [r3, #20]

  LoRaClass.frequency             = 915;
 8000dfa:	4b75      	ldr	r3, [pc, #468]	; (8000fd0 <main+0x298>)
 8000dfc:	f240 3293 	movw	r2, #915	; 0x393
 8000e00:	621a      	str	r2, [r3, #32]
  LoRaClass.spredingFactor        = SF_7;						// default = SF_7
 8000e02:	4b73      	ldr	r3, [pc, #460]	; (8000fd0 <main+0x298>)
 8000e04:	2207      	movs	r2, #7
 8000e06:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  LoRaClass.bandWidth			  = BW_500KHz;				  	// default = BW_125KHz
 8000e0a:	4b71      	ldr	r3, [pc, #452]	; (8000fd0 <main+0x298>)
 8000e0c:	2209      	movs	r2, #9
 8000e0e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  LoRaClass.crcRate				  = CR_4_5;						// default = CR_4_5
 8000e12:	4b6f      	ldr	r3, [pc, #444]	; (8000fd0 <main+0x298>)
 8000e14:	2201      	movs	r2, #1
 8000e16:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  LoRaClass.power			      = POWER_20db;					// default = 20db
 8000e1a:	4b6d      	ldr	r3, [pc, #436]	; (8000fd0 <main+0x298>)
 8000e1c:	22ff      	movs	r2, #255	; 0xff
 8000e1e:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  LoRaClass.overCurrentProtection = 120; 						// default = 100 mA
 8000e22:	4b6b      	ldr	r3, [pc, #428]	; (8000fd0 <main+0x298>)
 8000e24:	2278      	movs	r2, #120	; 0x78
 8000e26:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  LoRaClass.preamble			  = 10;		  					// default = 8;
 8000e2a:	4b69      	ldr	r3, [pc, #420]	; (8000fd0 <main+0x298>)
 8000e2c:	220a      	movs	r2, #10
 8000e2e:	851a      	strh	r2, [r3, #40]	; 0x28
  LoRaClass.syncWord			  = 0x22;
 8000e30:	4b67      	ldr	r3, [pc, #412]	; (8000fd0 <main+0x298>)
 8000e32:	2222      	movs	r2, #34	; 0x22
 8000e34:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  HAL_GPIO_WritePin(RF_SPI_NSS_GPIO_Port, RF_SPI_NSS_Pin, GPIO_PIN_SET);
 8000e38:	2201      	movs	r2, #1
 8000e3a:	2110      	movs	r1, #16
 8000e3c:	4866      	ldr	r0, [pc, #408]	; (8000fd8 <main+0x2a0>)
 8000e3e:	f001 fe0b 	bl	8002a58 <HAL_GPIO_WritePin>

  LoRa_reset(&LoRaClass);
 8000e42:	4863      	ldr	r0, [pc, #396]	; (8000fd0 <main+0x298>)
 8000e44:	f7ff fb6b 	bl	800051e <LoRa_reset>
  uint32_t result = LoRa_init(&LoRaClass);
 8000e48:	4861      	ldr	r0, [pc, #388]	; (8000fd0 <main+0x298>)
 8000e4a:	f7ff febd 	bl	8000bc8 <LoRa_init>
 8000e4e:	4603      	mov	r3, r0
 8000e50:	f8c7 323c 	str.w	r3, [r7, #572]	; 0x23c

  if(result == LORA_NOT_FOUND) {
 8000e54:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8000e58:	f5b3 7fca 	cmp.w	r3, #404	; 0x194
 8000e5c:	d103      	bne.n	8000e66 <main+0x12e>
	  Blocking_LED_Blink(1);
 8000e5e:	2001      	movs	r0, #1
 8000e60:	f000 fba6 	bl	80015b0 <Blocking_LED_Blink>
 8000e64:	e008      	b.n	8000e78 <main+0x140>
  }
  else if(result == LORA_UNAVAILABLE) {
 8000e66:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8000e6a:	f240 12f7 	movw	r2, #503	; 0x1f7
 8000e6e:	4293      	cmp	r3, r2
 8000e70:	d102      	bne.n	8000e78 <main+0x140>
	  Blocking_LED_Blink(1);
 8000e72:	2001      	movs	r0, #1
 8000e74:	f000 fb9c 	bl	80015b0 <Blocking_LED_Blink>
  }

  // Set fixed length packets at 2047 bytes
  LoRa_setPacketMode(&LoRaClass, 0);
 8000e78:	2100      	movs	r1, #0
 8000e7a:	4855      	ldr	r0, [pc, #340]	; (8000fd0 <main+0x298>)
 8000e7c:	f7ff fd28 	bl	80008d0 <LoRa_setPacketMode>

  // START CONTINUOUS RECEIVING -----------------------------------
  LoRa_startReceiving(&LoRaClass);
 8000e80:	4853      	ldr	r0, [pc, #332]	; (8000fd0 <main+0x298>)
 8000e82:	f7ff fe31 	bl	8000ae8 <LoRa_startReceiving>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  if(RF_available_bytes) {
 8000e86:	4b56      	ldr	r3, [pc, #344]	; (8000fe0 <main+0x2a8>)
 8000e88:	881b      	ldrh	r3, [r3, #0]
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	f000 80b9 	beq.w	8001002 <main+0x2ca>
		  // Bytes in RF RX buffer to read
		  // Read bytes into buffer
		  LoRa_receive(&LoRaClass, RF_RX_Buff, RF_available_bytes);
 8000e90:	4b53      	ldr	r3, [pc, #332]	; (8000fe0 <main+0x2a8>)
 8000e92:	881b      	ldrh	r3, [r3, #0]
 8000e94:	461a      	mov	r2, r3
 8000e96:	4953      	ldr	r1, [pc, #332]	; (8000fe4 <main+0x2ac>)
 8000e98:	484d      	ldr	r0, [pc, #308]	; (8000fd0 <main+0x298>)
 8000e9a:	f7ff fe31 	bl	8000b00 <LoRa_receive>
			  }
			  HAL_GPIO_WritePin(INDICATOR_LED_GPIO_Port, INDICATOR_LED_Pin, GPIO_PIN_RESET);
		  }

#elif defined SLAVE_DEVICE
		  if(!memcmp(RF_RX_Buff, (uint8_t*)"MREQ", HEADER_STRING_SIZE)) {
 8000e9e:	2204      	movs	r2, #4
 8000ea0:	4951      	ldr	r1, [pc, #324]	; (8000fe8 <main+0x2b0>)
 8000ea2:	4850      	ldr	r0, [pc, #320]	; (8000fe4 <main+0x2ac>)
 8000ea4:	f00a fb42 	bl	800b52c <memcmp>
 8000ea8:	4603      	mov	r3, r0
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	f040 80a6 	bne.w	8000ffc <main+0x2c4>
			  HAL_GPIO_WritePin(INDICATOR_LED_GPIO_Port, INDICATOR_LED_Pin, GPIO_PIN_SET);
 8000eb0:	2201      	movs	r2, #1
 8000eb2:	2104      	movs	r1, #4
 8000eb4:	484d      	ldr	r0, [pc, #308]	; (8000fec <main+0x2b4>)
 8000eb6:	f001 fdcf 	bl	8002a58 <HAL_GPIO_WritePin>
			  MASTER_READY = true;
 8000eba:	4b4d      	ldr	r3, [pc, #308]	; (8000ff0 <main+0x2b8>)
 8000ebc:	2201      	movs	r2, #1
 8000ebe:	701a      	strb	r2, [r3, #0]
			  // Header byte is packet type 1 (Master request)
			  uint16_t data_len = (uint16_t)(RF_RX_Buff[HEADER_STRING_SIZE]<<8 | RF_RX_Buff[HEADER_STRING_SIZE+1]);
 8000ec0:	4b48      	ldr	r3, [pc, #288]	; (8000fe4 <main+0x2ac>)
 8000ec2:	791b      	ldrb	r3, [r3, #4]
 8000ec4:	021b      	lsls	r3, r3, #8
 8000ec6:	b21a      	sxth	r2, r3
 8000ec8:	4b46      	ldr	r3, [pc, #280]	; (8000fe4 <main+0x2ac>)
 8000eca:	795b      	ldrb	r3, [r3, #5]
 8000ecc:	b21b      	sxth	r3, r3
 8000ece:	4313      	orrs	r3, r2
 8000ed0:	b21b      	sxth	r3, r3
 8000ed2:	f8a7 323a 	strh.w	r3, [r7, #570]	; 0x23a
			  if(data_len > MAX_DATA_SIZE(MAX_RF_PACKET_SIZE, HEADER_STRING_SIZE)) {
 8000ed6:	f8b7 323a 	ldrh.w	r3, [r7, #570]	; 0x23a
 8000eda:	2bfa      	cmp	r3, #250	; 0xfa
 8000edc:	d950      	bls.n	8000f80 <main+0x248>
				  RF_available_bytes = 0;
 8000ede:	4b40      	ldr	r3, [pc, #256]	; (8000fe0 <main+0x2a8>)
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	801a      	strh	r2, [r3, #0]
				  // Data spans over two packets
				  // Put all available bytes into serialBuff
				  memcpy(serialBuff,  &RF_RX_Buff[PREAMBLE_SIZE(HEADER_STRING_SIZE)], MAX_DATA_SIZE(MAX_RF_PACKET_SIZE, HEADER_STRING_SIZE));
 8000ee4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000ee8:	22fa      	movs	r2, #250	; 0xfa
 8000eea:	4942      	ldr	r1, [pc, #264]	; (8000ff4 <main+0x2bc>)
 8000eec:	4618      	mov	r0, r3
 8000eee:	f00a fb2d 	bl	800b54c <memcpy>
				  memset(RF_RX_Buff, '\0', sizeof(RF_RX_Buff));
 8000ef2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000ef6:	2100      	movs	r1, #0
 8000ef8:	483a      	ldr	r0, [pc, #232]	; (8000fe4 <main+0x2ac>)
 8000efa:	f00a fb35 	bl	800b568 <memset>
				  // Wait for next packet
				  while(memcmp(RF_RX_Buff, (uint8_t*)"SRSP", HEADER_STRING_SIZE) != 0) {
 8000efe:	e009      	b.n	8000f14 <main+0x1dc>
					  LoRa_receive(&LoRaClass, RF_RX_Buff, data_len - MAX_RF_PACKET_SIZE);
 8000f00:	f8b7 323a 	ldrh.w	r3, [r7, #570]	; 0x23a
 8000f04:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8000f08:	b29b      	uxth	r3, r3
 8000f0a:	461a      	mov	r2, r3
 8000f0c:	4935      	ldr	r1, [pc, #212]	; (8000fe4 <main+0x2ac>)
 8000f0e:	4830      	ldr	r0, [pc, #192]	; (8000fd0 <main+0x298>)
 8000f10:	f7ff fdf6 	bl	8000b00 <LoRa_receive>
				  while(memcmp(RF_RX_Buff, (uint8_t*)"SRSP", HEADER_STRING_SIZE) != 0) {
 8000f14:	2204      	movs	r2, #4
 8000f16:	4938      	ldr	r1, [pc, #224]	; (8000ff8 <main+0x2c0>)
 8000f18:	4832      	ldr	r0, [pc, #200]	; (8000fe4 <main+0x2ac>)
 8000f1a:	f00a fb07 	bl	800b52c <memcmp>
 8000f1e:	4603      	mov	r3, r0
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d1ed      	bne.n	8000f00 <main+0x1c8>
				  }
				  data_len = (uint16_t)(RF_RX_Buff[HEADER_STRING_SIZE]<<8 | RF_RX_Buff[HEADER_STRING_SIZE+1]);
 8000f24:	4b2f      	ldr	r3, [pc, #188]	; (8000fe4 <main+0x2ac>)
 8000f26:	791b      	ldrb	r3, [r3, #4]
 8000f28:	021b      	lsls	r3, r3, #8
 8000f2a:	b21a      	sxth	r2, r3
 8000f2c:	4b2d      	ldr	r3, [pc, #180]	; (8000fe4 <main+0x2ac>)
 8000f2e:	795b      	ldrb	r3, [r3, #5]
 8000f30:	b21b      	sxth	r3, r3
 8000f32:	4313      	orrs	r3, r2
 8000f34:	b21b      	sxth	r3, r3
 8000f36:	f8a7 323a 	strh.w	r3, [r7, #570]	; 0x23a
				  // Add new data to end of previous packet
				  memcpy(&serialBuff[MAX_DATA_SIZE(MAX_RF_PACKET_SIZE, HEADER_STRING_SIZE)], &RF_RX_Buff[PREAMBLE_SIZE(HEADER_STRING_SIZE)], data_len);
 8000f3a:	f8b7 223a 	ldrh.w	r2, [r7, #570]	; 0x23a
 8000f3e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000f42:	33fa      	adds	r3, #250	; 0xfa
 8000f44:	492b      	ldr	r1, [pc, #172]	; (8000ff4 <main+0x2bc>)
 8000f46:	4618      	mov	r0, r3
 8000f48:	f00a fb00 	bl	800b54c <memcpy>
				  // Transmit concatenated buffer over USB and UART
				  CDC_Transmit_HS(serialBuff, MAX_DATA_SIZE(MAX_RF_PACKET_SIZE, HEADER_STRING_SIZE) + data_len);
 8000f4c:	f8b7 323a 	ldrh.w	r3, [r7, #570]	; 0x23a
 8000f50:	f103 02fa 	add.w	r2, r3, #250	; 0xfa
 8000f54:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000f58:	4611      	mov	r1, r2
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	f009 fe5e 	bl	800ac1c <CDC_Transmit_HS>
				  HAL_UART_Transmit(USB_UART, serialBuff, MAX_DATA_SIZE(MAX_RF_PACKET_SIZE, HEADER_STRING_SIZE) + data_len, 1000);
 8000f60:	4b17      	ldr	r3, [pc, #92]	; (8000fc0 <main+0x288>)
 8000f62:	6818      	ldr	r0, [r3, #0]
 8000f64:	f8b7 323a 	ldrh.w	r3, [r7, #570]	; 0x23a
 8000f68:	33fa      	adds	r3, #250	; 0xfa
 8000f6a:	b29a      	uxth	r2, r3
 8000f6c:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8000f70:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f74:	f004 ff07 	bl	8005d86 <HAL_UART_Transmit>
				  RF_available_bytes = 0;
 8000f78:	4b19      	ldr	r3, [pc, #100]	; (8000fe0 <main+0x2a8>)
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	801a      	strh	r2, [r3, #0]
 8000f7e:	e018      	b.n	8000fb2 <main+0x27a>
			  }
			  else if (data_len > 0) {
 8000f80:	f8b7 323a 	ldrh.w	r3, [r7, #570]	; 0x23a
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d014      	beq.n	8000fb2 <main+0x27a>
				  // Data is all contained within one packet
				  // Transmit bytes from RF_RX_Buff over UART not including packet identifier or data length field
				  HAL_UART_Transmit(USB_UART, &RF_RX_Buff[PREAMBLE_SIZE(HEADER_STRING_SIZE)], RF_available_bytes-PREAMBLE_SIZE(HEADER_STRING_SIZE), 1000);
 8000f88:	4b0d      	ldr	r3, [pc, #52]	; (8000fc0 <main+0x288>)
 8000f8a:	6818      	ldr	r0, [r3, #0]
 8000f8c:	4b14      	ldr	r3, [pc, #80]	; (8000fe0 <main+0x2a8>)
 8000f8e:	881b      	ldrh	r3, [r3, #0]
 8000f90:	3b06      	subs	r3, #6
 8000f92:	b29a      	uxth	r2, r3
 8000f94:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f98:	4916      	ldr	r1, [pc, #88]	; (8000ff4 <main+0x2bc>)
 8000f9a:	f004 fef4 	bl	8005d86 <HAL_UART_Transmit>
				  // Transmit bytes from RF_RX Buff over USB not including packet identifier
				  CDC_Transmit_HS(&RF_RX_Buff[PREAMBLE_SIZE(HEADER_STRING_SIZE)], RF_available_bytes-PREAMBLE_SIZE(HEADER_STRING_SIZE));
 8000f9e:	4b10      	ldr	r3, [pc, #64]	; (8000fe0 <main+0x2a8>)
 8000fa0:	881b      	ldrh	r3, [r3, #0]
 8000fa2:	3b06      	subs	r3, #6
 8000fa4:	4619      	mov	r1, r3
 8000fa6:	4813      	ldr	r0, [pc, #76]	; (8000ff4 <main+0x2bc>)
 8000fa8:	f009 fe38 	bl	800ac1c <CDC_Transmit_HS>
				  RF_available_bytes = 0;
 8000fac:	4b0c      	ldr	r3, [pc, #48]	; (8000fe0 <main+0x2a8>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	801a      	strh	r2, [r3, #0]
			  }
			  HAL_GPIO_WritePin(INDICATOR_LED_GPIO_Port, INDICATOR_LED_Pin, GPIO_PIN_RESET);
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	2104      	movs	r1, #4
 8000fb6:	480d      	ldr	r0, [pc, #52]	; (8000fec <main+0x2b4>)
 8000fb8:	f001 fd4e 	bl	8002a58 <HAL_GPIO_WritePin>
 8000fbc:	e021      	b.n	8001002 <main+0x2ca>
 8000fbe:	bf00      	nop
 8000fc0:	20000000 	.word	0x20000000
 8000fc4:	40023800 	.word	0x40023800
 8000fc8:	20000008 	.word	0x20000008
 8000fcc:	20000418 	.word	0x20000418
 8000fd0:	200015bc 	.word	0x200015bc
 8000fd4:	20000004 	.word	0x20000004
 8000fd8:	40020000 	.word	0x40020000
 8000fdc:	40020400 	.word	0x40020400
 8000fe0:	20000314 	.word	0x20000314
 8000fe4:	20000318 	.word	0x20000318
 8000fe8:	0800be1c 	.word	0x0800be1c
 8000fec:	40020c00 	.word	0x40020c00
 8000ff0:	2000000e 	.word	0x2000000e
 8000ff4:	2000031e 	.word	0x2000031e
 8000ff8:	0800be24 	.word	0x0800be24
		  }
		  else RF_available_bytes = 0;
 8000ffc:	4b23      	ldr	r3, [pc, #140]	; (800108c <main+0x354>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	801a      	strh	r2, [r3, #0]
//		  }
	  }
	  POLL_READY = true;

#elif defined SLAVE_DEVICE
	  if(MASTER_READY) {
 8001002:	4b23      	ldr	r3, [pc, #140]	; (8001090 <main+0x358>)
 8001004:	781b      	ldrb	r3, [r3, #0]
 8001006:	2b00      	cmp	r3, #0
 8001008:	f43f af3d 	beq.w	8000e86 <main+0x14e>
		  MASTER_READY = true;
 800100c:	4b20      	ldr	r3, [pc, #128]	; (8001090 <main+0x358>)
 800100e:	2201      	movs	r2, #1
 8001010:	701a      	strb	r2, [r3, #0]
		  if(UART_READY) {
 8001012:	4b20      	ldr	r3, [pc, #128]	; (8001094 <main+0x35c>)
 8001014:	781b      	ldrb	r3, [r3, #0]
 8001016:	2b00      	cmp	r3, #0
 8001018:	f43f af35 	beq.w	8000e86 <main+0x14e>
			  UART_READY = false;
 800101c:	4b1d      	ldr	r3, [pc, #116]	; (8001094 <main+0x35c>)
 800101e:	2200      	movs	r2, #0
 8001020:	701a      	strb	r2, [r3, #0]
			  HAL_GPIO_WritePin(INDICATOR_LED_GPIO_Port, INDICATOR_LED_Pin, GPIO_PIN_SET);
 8001022:	2201      	movs	r2, #1
 8001024:	2104      	movs	r1, #4
 8001026:	481c      	ldr	r0, [pc, #112]	; (8001098 <main+0x360>)
 8001028:	f001 fd16 	bl	8002a58 <HAL_GPIO_WritePin>
			  uint8_t sendBuff[MAX_RF_PACKET_SIZE];
			  // Add packet identifier
			  memcpy(&sendBuff, (uint8_t*)"SRSP", sizeof("SRSP"));
 800102c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001030:	2205      	movs	r2, #5
 8001032:	491a      	ldr	r1, [pc, #104]	; (800109c <main+0x364>)
 8001034:	4618      	mov	r0, r3
 8001036:	f00a fa89 	bl	800b54c <memcpy>
 800103a:	4b19      	ldr	r3, [pc, #100]	; (80010a0 <main+0x368>)
 800103c:	881a      	ldrh	r2, [r3, #0]
			  // Add data length field
			  memcpy(&sendBuff[sizeof("SRSP")], &UART_PACKET_SIZE, sizeof(uint16_t));
 800103e:	f507 7310 	add.w	r3, r7, #576	; 0x240
 8001042:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8001046:	f8a3 2005 	strh.w	r2, [r3, #5]
			  // Add data to sendBuff
			  memcpy(&sendBuff[PREAMBLE_SIZE(HEADER_STRING_SIZE)], &RF_transmit_buffer, UART_PACKET_SIZE);
 800104a:	4b15      	ldr	r3, [pc, #84]	; (80010a0 <main+0x368>)
 800104c:	881b      	ldrh	r3, [r3, #0]
 800104e:	461a      	mov	r2, r3
 8001050:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001054:	3306      	adds	r3, #6
 8001056:	4913      	ldr	r1, [pc, #76]	; (80010a4 <main+0x36c>)
 8001058:	4618      	mov	r0, r3
 800105a:	f00a fa77 	bl	800b54c <memcpy>
			  // Transmit USB buffer over RF
			  if (!LoRa_transmit(&LoRaClass, sendBuff, UART_PACKET_SIZE+PREAMBLE_SIZE(HEADER_STRING_SIZE), 1000)) {
 800105e:	4b10      	ldr	r3, [pc, #64]	; (80010a0 <main+0x368>)
 8001060:	881b      	ldrh	r3, [r3, #0]
 8001062:	3306      	adds	r3, #6
 8001064:	b29a      	uxth	r2, r3
 8001066:	f107 0134 	add.w	r1, r7, #52	; 0x34
 800106a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800106e:	480e      	ldr	r0, [pc, #56]	; (80010a8 <main+0x370>)
 8001070:	f7ff fce0 	bl	8000a34 <LoRa_transmit>
						  // Print error msg
			  }
			  RF_transmit_buff_offset = 0;
 8001074:	4b0d      	ldr	r3, [pc, #52]	; (80010ac <main+0x374>)
 8001076:	2200      	movs	r2, #0
 8001078:	801a      	strh	r2, [r3, #0]
			  LoRa_startReceiving(&LoRaClass);
 800107a:	480b      	ldr	r0, [pc, #44]	; (80010a8 <main+0x370>)
 800107c:	f7ff fd34 	bl	8000ae8 <LoRa_startReceiving>
			  HAL_GPIO_WritePin(INDICATOR_LED_GPIO_Port, INDICATOR_LED_Pin, GPIO_PIN_RESET);
 8001080:	2200      	movs	r2, #0
 8001082:	2104      	movs	r1, #4
 8001084:	4804      	ldr	r0, [pc, #16]	; (8001098 <main+0x360>)
 8001086:	f001 fce7 	bl	8002a58 <HAL_GPIO_WritePin>
	  if(RF_available_bytes) {
 800108a:	e6fc      	b.n	8000e86 <main+0x14e>
 800108c:	20000314 	.word	0x20000314
 8001090:	2000000e 	.word	0x2000000e
 8001094:	200015ba 	.word	0x200015ba
 8001098:	40020c00 	.word	0x40020c00
 800109c:	0800be24 	.word	0x0800be24
 80010a0:	2000000c 	.word	0x2000000c
 80010a4:	200013b8 	.word	0x200013b8
 80010a8:	200015bc 	.word	0x200015bc
 80010ac:	200015b8 	.word	0x200015b8

080010b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b094      	sub	sp, #80	; 0x50
 80010b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010b6:	f107 0320 	add.w	r3, r7, #32
 80010ba:	2230      	movs	r2, #48	; 0x30
 80010bc:	2100      	movs	r1, #0
 80010be:	4618      	mov	r0, r3
 80010c0:	f00a fa52 	bl	800b568 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010c4:	f107 030c 	add.w	r3, r7, #12
 80010c8:	2200      	movs	r2, #0
 80010ca:	601a      	str	r2, [r3, #0]
 80010cc:	605a      	str	r2, [r3, #4]
 80010ce:	609a      	str	r2, [r3, #8]
 80010d0:	60da      	str	r2, [r3, #12]
 80010d2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80010d4:	2300      	movs	r3, #0
 80010d6:	60bb      	str	r3, [r7, #8]
 80010d8:	4b28      	ldr	r3, [pc, #160]	; (800117c <SystemClock_Config+0xcc>)
 80010da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010dc:	4a27      	ldr	r2, [pc, #156]	; (800117c <SystemClock_Config+0xcc>)
 80010de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010e2:	6413      	str	r3, [r2, #64]	; 0x40
 80010e4:	4b25      	ldr	r3, [pc, #148]	; (800117c <SystemClock_Config+0xcc>)
 80010e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010ec:	60bb      	str	r3, [r7, #8]
 80010ee:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80010f0:	2300      	movs	r3, #0
 80010f2:	607b      	str	r3, [r7, #4]
 80010f4:	4b22      	ldr	r3, [pc, #136]	; (8001180 <SystemClock_Config+0xd0>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	4a21      	ldr	r2, [pc, #132]	; (8001180 <SystemClock_Config+0xd0>)
 80010fa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010fe:	6013      	str	r3, [r2, #0]
 8001100:	4b1f      	ldr	r3, [pc, #124]	; (8001180 <SystemClock_Config+0xd0>)
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001108:	607b      	str	r3, [r7, #4]
 800110a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800110c:	2301      	movs	r3, #1
 800110e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001110:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001114:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001116:	2302      	movs	r3, #2
 8001118:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800111a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800111e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 12;
 8001120:	230c      	movs	r3, #12
 8001122:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001124:	23a8      	movs	r3, #168	; 0xa8
 8001126:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001128:	2302      	movs	r3, #2
 800112a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800112c:	2307      	movs	r3, #7
 800112e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001130:	f107 0320 	add.w	r3, r7, #32
 8001134:	4618      	mov	r0, r3
 8001136:	f002 ff3f 	bl	8003fb8 <HAL_RCC_OscConfig>
 800113a:	4603      	mov	r3, r0
 800113c:	2b00      	cmp	r3, #0
 800113e:	d001      	beq.n	8001144 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001140:	f000 fa58 	bl	80015f4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001144:	230f      	movs	r3, #15
 8001146:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001148:	2302      	movs	r3, #2
 800114a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800114c:	2300      	movs	r3, #0
 800114e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001150:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001154:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001156:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800115a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800115c:	f107 030c 	add.w	r3, r7, #12
 8001160:	2105      	movs	r1, #5
 8001162:	4618      	mov	r0, r3
 8001164:	f003 f9a0 	bl	80044a8 <HAL_RCC_ClockConfig>
 8001168:	4603      	mov	r3, r0
 800116a:	2b00      	cmp	r3, #0
 800116c:	d001      	beq.n	8001172 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800116e:	f000 fa41 	bl	80015f4 <Error_Handler>
  }
}
 8001172:	bf00      	nop
 8001174:	3750      	adds	r7, #80	; 0x50
 8001176:	46bd      	mov	sp, r7
 8001178:	bd80      	pop	{r7, pc}
 800117a:	bf00      	nop
 800117c:	40023800 	.word	0x40023800
 8001180:	40007000 	.word	0x40007000

08001184 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001188:	4b17      	ldr	r3, [pc, #92]	; (80011e8 <MX_SPI1_Init+0x64>)
 800118a:	4a18      	ldr	r2, [pc, #96]	; (80011ec <MX_SPI1_Init+0x68>)
 800118c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800118e:	4b16      	ldr	r3, [pc, #88]	; (80011e8 <MX_SPI1_Init+0x64>)
 8001190:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001194:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001196:	4b14      	ldr	r3, [pc, #80]	; (80011e8 <MX_SPI1_Init+0x64>)
 8001198:	2200      	movs	r2, #0
 800119a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800119c:	4b12      	ldr	r3, [pc, #72]	; (80011e8 <MX_SPI1_Init+0x64>)
 800119e:	2200      	movs	r2, #0
 80011a0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80011a2:	4b11      	ldr	r3, [pc, #68]	; (80011e8 <MX_SPI1_Init+0x64>)
 80011a4:	2200      	movs	r2, #0
 80011a6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80011a8:	4b0f      	ldr	r3, [pc, #60]	; (80011e8 <MX_SPI1_Init+0x64>)
 80011aa:	2200      	movs	r2, #0
 80011ac:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80011ae:	4b0e      	ldr	r3, [pc, #56]	; (80011e8 <MX_SPI1_Init+0x64>)
 80011b0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80011b4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 80011b6:	4b0c      	ldr	r3, [pc, #48]	; (80011e8 <MX_SPI1_Init+0x64>)
 80011b8:	2230      	movs	r2, #48	; 0x30
 80011ba:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80011bc:	4b0a      	ldr	r3, [pc, #40]	; (80011e8 <MX_SPI1_Init+0x64>)
 80011be:	2200      	movs	r2, #0
 80011c0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80011c2:	4b09      	ldr	r3, [pc, #36]	; (80011e8 <MX_SPI1_Init+0x64>)
 80011c4:	2200      	movs	r2, #0
 80011c6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80011c8:	4b07      	ldr	r3, [pc, #28]	; (80011e8 <MX_SPI1_Init+0x64>)
 80011ca:	2200      	movs	r2, #0
 80011cc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80011ce:	4b06      	ldr	r3, [pc, #24]	; (80011e8 <MX_SPI1_Init+0x64>)
 80011d0:	220a      	movs	r2, #10
 80011d2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80011d4:	4804      	ldr	r0, [pc, #16]	; (80011e8 <MX_SPI1_Init+0x64>)
 80011d6:	f003 fb47 	bl	8004868 <HAL_SPI_Init>
 80011da:	4603      	mov	r3, r0
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d001      	beq.n	80011e4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80011e0:	f000 fa08 	bl	80015f4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80011e4:	bf00      	nop
 80011e6:	bd80      	pop	{r7, pc}
 80011e8:	2000018c 	.word	0x2000018c
 80011ec:	40013000 	.word	0x40013000

080011f0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b086      	sub	sp, #24
 80011f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80011f6:	f107 0308 	add.w	r3, r7, #8
 80011fa:	2200      	movs	r2, #0
 80011fc:	601a      	str	r2, [r3, #0]
 80011fe:	605a      	str	r2, [r3, #4]
 8001200:	609a      	str	r2, [r3, #8]
 8001202:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001204:	463b      	mov	r3, r7
 8001206:	2200      	movs	r2, #0
 8001208:	601a      	str	r2, [r3, #0]
 800120a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800120c:	4b1e      	ldr	r3, [pc, #120]	; (8001288 <MX_TIM2_Init+0x98>)
 800120e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001212:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 2500;
 8001214:	4b1c      	ldr	r3, [pc, #112]	; (8001288 <MX_TIM2_Init+0x98>)
 8001216:	f640 12c4 	movw	r2, #2500	; 0x9c4
 800121a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800121c:	4b1a      	ldr	r3, [pc, #104]	; (8001288 <MX_TIM2_Init+0x98>)
 800121e:	2200      	movs	r2, #0
 8001220:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 16800;
 8001222:	4b19      	ldr	r3, [pc, #100]	; (8001288 <MX_TIM2_Init+0x98>)
 8001224:	f244 12a0 	movw	r2, #16800	; 0x41a0
 8001228:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800122a:	4b17      	ldr	r3, [pc, #92]	; (8001288 <MX_TIM2_Init+0x98>)
 800122c:	2200      	movs	r2, #0
 800122e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001230:	4b15      	ldr	r3, [pc, #84]	; (8001288 <MX_TIM2_Init+0x98>)
 8001232:	2280      	movs	r2, #128	; 0x80
 8001234:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001236:	4814      	ldr	r0, [pc, #80]	; (8001288 <MX_TIM2_Init+0x98>)
 8001238:	f004 f8cc 	bl	80053d4 <HAL_TIM_Base_Init>
 800123c:	4603      	mov	r3, r0
 800123e:	2b00      	cmp	r3, #0
 8001240:	d001      	beq.n	8001246 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001242:	f000 f9d7 	bl	80015f4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001246:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800124a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800124c:	f107 0308 	add.w	r3, r7, #8
 8001250:	4619      	mov	r1, r3
 8001252:	480d      	ldr	r0, [pc, #52]	; (8001288 <MX_TIM2_Init+0x98>)
 8001254:	f004 fa86 	bl	8005764 <HAL_TIM_ConfigClockSource>
 8001258:	4603      	mov	r3, r0
 800125a:	2b00      	cmp	r3, #0
 800125c:	d001      	beq.n	8001262 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800125e:	f000 f9c9 	bl	80015f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001262:	2300      	movs	r3, #0
 8001264:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001266:	2300      	movs	r3, #0
 8001268:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800126a:	463b      	mov	r3, r7
 800126c:	4619      	mov	r1, r3
 800126e:	4806      	ldr	r0, [pc, #24]	; (8001288 <MX_TIM2_Init+0x98>)
 8001270:	f004 fcac 	bl	8005bcc <HAL_TIMEx_MasterConfigSynchronization>
 8001274:	4603      	mov	r3, r0
 8001276:	2b00      	cmp	r3, #0
 8001278:	d001      	beq.n	800127e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800127a:	f000 f9bb 	bl	80015f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800127e:	bf00      	nop
 8001280:	3718      	adds	r7, #24
 8001282:	46bd      	mov	sp, r7
 8001284:	bd80      	pop	{r7, pc}
 8001286:	bf00      	nop
 8001288:	200001e4 	.word	0x200001e4

0800128c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001290:	4b11      	ldr	r3, [pc, #68]	; (80012d8 <MX_USART1_UART_Init+0x4c>)
 8001292:	4a12      	ldr	r2, [pc, #72]	; (80012dc <MX_USART1_UART_Init+0x50>)
 8001294:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 57600;
 8001296:	4b10      	ldr	r3, [pc, #64]	; (80012d8 <MX_USART1_UART_Init+0x4c>)
 8001298:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 800129c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800129e:	4b0e      	ldr	r3, [pc, #56]	; (80012d8 <MX_USART1_UART_Init+0x4c>)
 80012a0:	2200      	movs	r2, #0
 80012a2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80012a4:	4b0c      	ldr	r3, [pc, #48]	; (80012d8 <MX_USART1_UART_Init+0x4c>)
 80012a6:	2200      	movs	r2, #0
 80012a8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80012aa:	4b0b      	ldr	r3, [pc, #44]	; (80012d8 <MX_USART1_UART_Init+0x4c>)
 80012ac:	2200      	movs	r2, #0
 80012ae:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80012b0:	4b09      	ldr	r3, [pc, #36]	; (80012d8 <MX_USART1_UART_Init+0x4c>)
 80012b2:	220c      	movs	r2, #12
 80012b4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012b6:	4b08      	ldr	r3, [pc, #32]	; (80012d8 <MX_USART1_UART_Init+0x4c>)
 80012b8:	2200      	movs	r2, #0
 80012ba:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80012bc:	4b06      	ldr	r3, [pc, #24]	; (80012d8 <MX_USART1_UART_Init+0x4c>)
 80012be:	2200      	movs	r2, #0
 80012c0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80012c2:	4805      	ldr	r0, [pc, #20]	; (80012d8 <MX_USART1_UART_Init+0x4c>)
 80012c4:	f004 fd12 	bl	8005cec <HAL_UART_Init>
 80012c8:	4603      	mov	r3, r0
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d001      	beq.n	80012d2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80012ce:	f000 f991 	bl	80015f4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80012d2:	bf00      	nop
 80012d4:	bd80      	pop	{r7, pc}
 80012d6:	bf00      	nop
 80012d8:	2000022c 	.word	0x2000022c
 80012dc:	40011000 	.word	0x40011000

080012e0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80012e4:	4b11      	ldr	r3, [pc, #68]	; (800132c <MX_USART2_UART_Init+0x4c>)
 80012e6:	4a12      	ldr	r2, [pc, #72]	; (8001330 <MX_USART2_UART_Init+0x50>)
 80012e8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 57600;
 80012ea:	4b10      	ldr	r3, [pc, #64]	; (800132c <MX_USART2_UART_Init+0x4c>)
 80012ec:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 80012f0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80012f2:	4b0e      	ldr	r3, [pc, #56]	; (800132c <MX_USART2_UART_Init+0x4c>)
 80012f4:	2200      	movs	r2, #0
 80012f6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80012f8:	4b0c      	ldr	r3, [pc, #48]	; (800132c <MX_USART2_UART_Init+0x4c>)
 80012fa:	2200      	movs	r2, #0
 80012fc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80012fe:	4b0b      	ldr	r3, [pc, #44]	; (800132c <MX_USART2_UART_Init+0x4c>)
 8001300:	2200      	movs	r2, #0
 8001302:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001304:	4b09      	ldr	r3, [pc, #36]	; (800132c <MX_USART2_UART_Init+0x4c>)
 8001306:	220c      	movs	r2, #12
 8001308:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 800130a:	4b08      	ldr	r3, [pc, #32]	; (800132c <MX_USART2_UART_Init+0x4c>)
 800130c:	f44f 7240 	mov.w	r2, #768	; 0x300
 8001310:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001312:	4b06      	ldr	r3, [pc, #24]	; (800132c <MX_USART2_UART_Init+0x4c>)
 8001314:	2200      	movs	r2, #0
 8001316:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001318:	4804      	ldr	r0, [pc, #16]	; (800132c <MX_USART2_UART_Init+0x4c>)
 800131a:	f004 fce7 	bl	8005cec <HAL_UART_Init>
 800131e:	4603      	mov	r3, r0
 8001320:	2b00      	cmp	r3, #0
 8001322:	d001      	beq.n	8001328 <MX_USART2_UART_Init+0x48>
  {
    Error_Handler();
 8001324:	f000 f966 	bl	80015f4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001328:	bf00      	nop
 800132a:	bd80      	pop	{r7, pc}
 800132c:	20000270 	.word	0x20000270
 8001330:	40004400 	.word	0x40004400

08001334 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b082      	sub	sp, #8
 8001338:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800133a:	2300      	movs	r3, #0
 800133c:	607b      	str	r3, [r7, #4]
 800133e:	4b0c      	ldr	r3, [pc, #48]	; (8001370 <MX_DMA_Init+0x3c>)
 8001340:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001342:	4a0b      	ldr	r2, [pc, #44]	; (8001370 <MX_DMA_Init+0x3c>)
 8001344:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001348:	6313      	str	r3, [r2, #48]	; 0x30
 800134a:	4b09      	ldr	r3, [pc, #36]	; (8001370 <MX_DMA_Init+0x3c>)
 800134c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800134e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001352:	607b      	str	r3, [r7, #4]
 8001354:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8001356:	2200      	movs	r2, #0
 8001358:	2100      	movs	r1, #0
 800135a:	203a      	movs	r0, #58	; 0x3a
 800135c:	f000 fda7 	bl	8001eae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8001360:	203a      	movs	r0, #58	; 0x3a
 8001362:	f000 fdc0 	bl	8001ee6 <HAL_NVIC_EnableIRQ>

}
 8001366:	bf00      	nop
 8001368:	3708      	adds	r7, #8
 800136a:	46bd      	mov	sp, r7
 800136c:	bd80      	pop	{r7, pc}
 800136e:	bf00      	nop
 8001370:	40023800 	.word	0x40023800

08001374 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b08a      	sub	sp, #40	; 0x28
 8001378:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800137a:	f107 0314 	add.w	r3, r7, #20
 800137e:	2200      	movs	r2, #0
 8001380:	601a      	str	r2, [r3, #0]
 8001382:	605a      	str	r2, [r3, #4]
 8001384:	609a      	str	r2, [r3, #8]
 8001386:	60da      	str	r2, [r3, #12]
 8001388:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800138a:	2300      	movs	r3, #0
 800138c:	613b      	str	r3, [r7, #16]
 800138e:	4b56      	ldr	r3, [pc, #344]	; (80014e8 <MX_GPIO_Init+0x174>)
 8001390:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001392:	4a55      	ldr	r2, [pc, #340]	; (80014e8 <MX_GPIO_Init+0x174>)
 8001394:	f043 0304 	orr.w	r3, r3, #4
 8001398:	6313      	str	r3, [r2, #48]	; 0x30
 800139a:	4b53      	ldr	r3, [pc, #332]	; (80014e8 <MX_GPIO_Init+0x174>)
 800139c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800139e:	f003 0304 	and.w	r3, r3, #4
 80013a2:	613b      	str	r3, [r7, #16]
 80013a4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80013a6:	2300      	movs	r3, #0
 80013a8:	60fb      	str	r3, [r7, #12]
 80013aa:	4b4f      	ldr	r3, [pc, #316]	; (80014e8 <MX_GPIO_Init+0x174>)
 80013ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ae:	4a4e      	ldr	r2, [pc, #312]	; (80014e8 <MX_GPIO_Init+0x174>)
 80013b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80013b4:	6313      	str	r3, [r2, #48]	; 0x30
 80013b6:	4b4c      	ldr	r3, [pc, #304]	; (80014e8 <MX_GPIO_Init+0x174>)
 80013b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80013be:	60fb      	str	r3, [r7, #12]
 80013c0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013c2:	2300      	movs	r3, #0
 80013c4:	60bb      	str	r3, [r7, #8]
 80013c6:	4b48      	ldr	r3, [pc, #288]	; (80014e8 <MX_GPIO_Init+0x174>)
 80013c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ca:	4a47      	ldr	r2, [pc, #284]	; (80014e8 <MX_GPIO_Init+0x174>)
 80013cc:	f043 0301 	orr.w	r3, r3, #1
 80013d0:	6313      	str	r3, [r2, #48]	; 0x30
 80013d2:	4b45      	ldr	r3, [pc, #276]	; (80014e8 <MX_GPIO_Init+0x174>)
 80013d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013d6:	f003 0301 	and.w	r3, r3, #1
 80013da:	60bb      	str	r3, [r7, #8]
 80013dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013de:	2300      	movs	r3, #0
 80013e0:	607b      	str	r3, [r7, #4]
 80013e2:	4b41      	ldr	r3, [pc, #260]	; (80014e8 <MX_GPIO_Init+0x174>)
 80013e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013e6:	4a40      	ldr	r2, [pc, #256]	; (80014e8 <MX_GPIO_Init+0x174>)
 80013e8:	f043 0302 	orr.w	r3, r3, #2
 80013ec:	6313      	str	r3, [r2, #48]	; 0x30
 80013ee:	4b3e      	ldr	r3, [pc, #248]	; (80014e8 <MX_GPIO_Init+0x174>)
 80013f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013f2:	f003 0302 	and.w	r3, r3, #2
 80013f6:	607b      	str	r3, [r7, #4]
 80013f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80013fa:	2300      	movs	r3, #0
 80013fc:	603b      	str	r3, [r7, #0]
 80013fe:	4b3a      	ldr	r3, [pc, #232]	; (80014e8 <MX_GPIO_Init+0x174>)
 8001400:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001402:	4a39      	ldr	r2, [pc, #228]	; (80014e8 <MX_GPIO_Init+0x174>)
 8001404:	f043 0308 	orr.w	r3, r3, #8
 8001408:	6313      	str	r3, [r2, #48]	; 0x30
 800140a:	4b37      	ldr	r3, [pc, #220]	; (80014e8 <MX_GPIO_Init+0x174>)
 800140c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800140e:	f003 0308 	and.w	r3, r3, #8
 8001412:	603b      	str	r3, [r7, #0]
 8001414:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RF_SPI_NSS_GPIO_Port, RF_SPI_NSS_Pin, GPIO_PIN_RESET);
 8001416:	2200      	movs	r2, #0
 8001418:	2110      	movs	r1, #16
 800141a:	4834      	ldr	r0, [pc, #208]	; (80014ec <MX_GPIO_Init+0x178>)
 800141c:	f001 fb1c 	bl	8002a58 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RESET_RF_GPIO_Port, RESET_RF_Pin, GPIO_PIN_RESET);
 8001420:	2200      	movs	r2, #0
 8001422:	2101      	movs	r1, #1
 8001424:	4832      	ldr	r0, [pc, #200]	; (80014f0 <MX_GPIO_Init+0x17c>)
 8001426:	f001 fb17 	bl	8002a58 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(INDICATOR_LED_GPIO_Port, INDICATOR_LED_Pin, GPIO_PIN_RESET);
 800142a:	2200      	movs	r2, #0
 800142c:	2104      	movs	r1, #4
 800142e:	4831      	ldr	r0, [pc, #196]	; (80014f4 <MX_GPIO_Init+0x180>)
 8001430:	f001 fb12 	bl	8002a58 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : RF_SPI_NSS_Pin */
  GPIO_InitStruct.Pin = RF_SPI_NSS_Pin;
 8001434:	2310      	movs	r3, #16
 8001436:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001438:	2301      	movs	r3, #1
 800143a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800143c:	2300      	movs	r3, #0
 800143e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001440:	2300      	movs	r3, #0
 8001442:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(RF_SPI_NSS_GPIO_Port, &GPIO_InitStruct);
 8001444:	f107 0314 	add.w	r3, r7, #20
 8001448:	4619      	mov	r1, r3
 800144a:	4828      	ldr	r0, [pc, #160]	; (80014ec <MX_GPIO_Init+0x178>)
 800144c:	f001 f968 	bl	8002720 <HAL_GPIO_Init>

  /*Configure GPIO pin : RESET_RF_Pin */
  GPIO_InitStruct.Pin = RESET_RF_Pin;
 8001450:	2301      	movs	r3, #1
 8001452:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001454:	2301      	movs	r3, #1
 8001456:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001458:	2300      	movs	r3, #0
 800145a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800145c:	2300      	movs	r3, #0
 800145e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(RESET_RF_GPIO_Port, &GPIO_InitStruct);
 8001460:	f107 0314 	add.w	r3, r7, #20
 8001464:	4619      	mov	r1, r3
 8001466:	4822      	ldr	r0, [pc, #136]	; (80014f0 <MX_GPIO_Init+0x17c>)
 8001468:	f001 f95a 	bl	8002720 <HAL_GPIO_Init>

  /*Configure GPIO pins : IO0_RF_Pin IO1_RF_Pin IO2_RF_Pin IO3_RF_Pin
                           IO4_RF_Pin */
  GPIO_InitStruct.Pin = IO0_RF_Pin|IO1_RF_Pin|IO2_RF_Pin|IO3_RF_Pin
 800146c:	f643 4302 	movw	r3, #15362	; 0x3c02
 8001470:	617b      	str	r3, [r7, #20]
                          |IO4_RF_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001472:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001476:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001478:	2300      	movs	r3, #0
 800147a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800147c:	f107 0314 	add.w	r3, r7, #20
 8001480:	4619      	mov	r1, r3
 8001482:	481b      	ldr	r0, [pc, #108]	; (80014f0 <MX_GPIO_Init+0x17c>)
 8001484:	f001 f94c 	bl	8002720 <HAL_GPIO_Init>

  /*Configure GPIO pin : IO5_RF_Pin */
  GPIO_InitStruct.Pin = IO5_RF_Pin;
 8001488:	f44f 7380 	mov.w	r3, #256	; 0x100
 800148c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800148e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001492:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001494:	2300      	movs	r3, #0
 8001496:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(IO5_RF_GPIO_Port, &GPIO_InitStruct);
 8001498:	f107 0314 	add.w	r3, r7, #20
 800149c:	4619      	mov	r1, r3
 800149e:	4813      	ldr	r0, [pc, #76]	; (80014ec <MX_GPIO_Init+0x178>)
 80014a0:	f001 f93e 	bl	8002720 <HAL_GPIO_Init>

  /*Configure GPIO pin : INDICATOR_LED_Pin */
  GPIO_InitStruct.Pin = INDICATOR_LED_Pin;
 80014a4:	2304      	movs	r3, #4
 80014a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014a8:	2301      	movs	r3, #1
 80014aa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ac:	2300      	movs	r3, #0
 80014ae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014b0:	2300      	movs	r3, #0
 80014b2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(INDICATOR_LED_GPIO_Port, &GPIO_InitStruct);
 80014b4:	f107 0314 	add.w	r3, r7, #20
 80014b8:	4619      	mov	r1, r3
 80014ba:	480e      	ldr	r0, [pc, #56]	; (80014f4 <MX_GPIO_Init+0x180>)
 80014bc:	f001 f930 	bl	8002720 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 80014c0:	2200      	movs	r2, #0
 80014c2:	2100      	movs	r1, #0
 80014c4:	2007      	movs	r0, #7
 80014c6:	f000 fcf2 	bl	8001eae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80014ca:	2007      	movs	r0, #7
 80014cc:	f000 fd0b 	bl	8001ee6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80014d0:	2200      	movs	r2, #0
 80014d2:	2100      	movs	r1, #0
 80014d4:	2028      	movs	r0, #40	; 0x28
 80014d6:	f000 fcea 	bl	8001eae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80014da:	2028      	movs	r0, #40	; 0x28
 80014dc:	f000 fd03 	bl	8001ee6 <HAL_NVIC_EnableIRQ>

}
 80014e0:	bf00      	nop
 80014e2:	3728      	adds	r7, #40	; 0x28
 80014e4:	46bd      	mov	sp, r7
 80014e6:	bd80      	pop	{r7, pc}
 80014e8:	40023800 	.word	0x40023800
 80014ec:	40020000 	.word	0x40020000
 80014f0:	40020400 	.word	0x40020400
 80014f4:	40020c00 	.word	0x40020c00

080014f8 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b082      	sub	sp, #8
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	4603      	mov	r3, r0
 8001500:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == LoRaClass.DIO0_pin){
 8001502:	4b08      	ldr	r3, [pc, #32]	; (8001524 <HAL_GPIO_EXTI_Callback+0x2c>)
 8001504:	8a9b      	ldrh	r3, [r3, #20]
 8001506:	88fa      	ldrh	r2, [r7, #6]
 8001508:	429a      	cmp	r2, r3
 800150a:	d106      	bne.n	800151a <HAL_GPIO_EXTI_Callback+0x22>
		RF_available_bytes = LoRa_received_bytes(&LoRaClass);
 800150c:	4805      	ldr	r0, [pc, #20]	; (8001524 <HAL_GPIO_EXTI_Callback+0x2c>)
 800150e:	f7ff fc06 	bl	8000d1e <LoRa_received_bytes>
 8001512:	4603      	mov	r3, r0
 8001514:	b29a      	uxth	r2, r3
 8001516:	4b04      	ldr	r3, [pc, #16]	; (8001528 <HAL_GPIO_EXTI_Callback+0x30>)
 8001518:	801a      	strh	r2, [r3, #0]
	}
}
 800151a:	bf00      	nop
 800151c:	3708      	adds	r7, #8
 800151e:	46bd      	mov	sp, r7
 8001520:	bd80      	pop	{r7, pc}
 8001522:	bf00      	nop
 8001524:	200015bc 	.word	0x200015bc
 8001528:	20000314 	.word	0x20000314

0800152c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b082      	sub	sp, #8
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_DMA (USB_UART, UART_Buff, sizeof(UART_Buff));
 8001534:	4b0c      	ldr	r3, [pc, #48]	; (8001568 <HAL_UART_RxCpltCallback+0x3c>)
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 800153c:	490b      	ldr	r1, [pc, #44]	; (800156c <HAL_UART_RxCpltCallback+0x40>)
 800153e:	4618      	mov	r0, r3
 8001540:	f004 fd55 	bl	8005fee <HAL_UART_Receive_DMA>
	UART_READY = true;
 8001544:	4b0a      	ldr	r3, [pc, #40]	; (8001570 <HAL_UART_RxCpltCallback+0x44>)
 8001546:	2201      	movs	r2, #1
 8001548:	701a      	strb	r2, [r3, #0]
	// Add second half of data to sendBuff
	memcpy(RF_transmit_buffer, &UART_Buff[UART_PACKET_SIZE], UART_PACKET_SIZE);
 800154a:	4b0a      	ldr	r3, [pc, #40]	; (8001574 <HAL_UART_RxCpltCallback+0x48>)
 800154c:	881b      	ldrh	r3, [r3, #0]
 800154e:	461a      	mov	r2, r3
 8001550:	4b06      	ldr	r3, [pc, #24]	; (800156c <HAL_UART_RxCpltCallback+0x40>)
 8001552:	4413      	add	r3, r2
 8001554:	4a07      	ldr	r2, [pc, #28]	; (8001574 <HAL_UART_RxCpltCallback+0x48>)
 8001556:	8812      	ldrh	r2, [r2, #0]
 8001558:	4619      	mov	r1, r3
 800155a:	4807      	ldr	r0, [pc, #28]	; (8001578 <HAL_UART_RxCpltCallback+0x4c>)
 800155c:	f009 fff6 	bl	800b54c <memcpy>
}
 8001560:	bf00      	nop
 8001562:	3708      	adds	r7, #8
 8001564:	46bd      	mov	sp, r7
 8001566:	bd80      	pop	{r7, pc}
 8001568:	20000000 	.word	0x20000000
 800156c:	20000418 	.word	0x20000418
 8001570:	200015ba 	.word	0x200015ba
 8001574:	2000000c 	.word	0x2000000c
 8001578:	200013b8 	.word	0x200013b8

0800157c <HAL_UART_RxHalfCpltCallback>:

void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart) {
 800157c:	b580      	push	{r7, lr}
 800157e:	b082      	sub	sp, #8
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
	UART_READY = true;
 8001584:	4b06      	ldr	r3, [pc, #24]	; (80015a0 <HAL_UART_RxHalfCpltCallback+0x24>)
 8001586:	2201      	movs	r2, #1
 8001588:	701a      	strb	r2, [r3, #0]
	// Add first half of data to sendBuff
	memcpy(RF_transmit_buffer, &UART_Buff, UART_PACKET_SIZE);
 800158a:	4b06      	ldr	r3, [pc, #24]	; (80015a4 <HAL_UART_RxHalfCpltCallback+0x28>)
 800158c:	881b      	ldrh	r3, [r3, #0]
 800158e:	461a      	mov	r2, r3
 8001590:	4905      	ldr	r1, [pc, #20]	; (80015a8 <HAL_UART_RxHalfCpltCallback+0x2c>)
 8001592:	4806      	ldr	r0, [pc, #24]	; (80015ac <HAL_UART_RxHalfCpltCallback+0x30>)
 8001594:	f009 ffda 	bl	800b54c <memcpy>
}
 8001598:	bf00      	nop
 800159a:	3708      	adds	r7, #8
 800159c:	46bd      	mov	sp, r7
 800159e:	bd80      	pop	{r7, pc}
 80015a0:	200015ba 	.word	0x200015ba
 80015a4:	2000000c 	.word	0x2000000c
 80015a8:	20000418 	.word	0x20000418
 80015ac:	200013b8 	.word	0x200013b8

080015b0 <Blocking_LED_Blink>:
//    	POLL_READY = true;
//    }
//}
#endif

void Blocking_LED_Blink(uint8_t freq) {
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b082      	sub	sp, #8
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	4603      	mov	r3, r0
 80015b8:	71fb      	strb	r3, [r7, #7]
	while(1) {
		HAL_GPIO_WritePin(INDICATOR_LED_GPIO_Port, INDICATOR_LED_Pin, GPIO_PIN_SET);
 80015ba:	2201      	movs	r2, #1
 80015bc:	2104      	movs	r1, #4
 80015be:	480c      	ldr	r0, [pc, #48]	; (80015f0 <Blocking_LED_Blink+0x40>)
 80015c0:	f001 fa4a 	bl	8002a58 <HAL_GPIO_WritePin>
		HAL_Delay(1000/freq);
 80015c4:	79fb      	ldrb	r3, [r7, #7]
 80015c6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80015ca:	fb92 f3f3 	sdiv	r3, r2, r3
 80015ce:	4618      	mov	r0, r3
 80015d0:	f000 fb6e 	bl	8001cb0 <HAL_Delay>
		HAL_GPIO_WritePin(INDICATOR_LED_GPIO_Port, INDICATOR_LED_Pin, GPIO_PIN_RESET);
 80015d4:	2200      	movs	r2, #0
 80015d6:	2104      	movs	r1, #4
 80015d8:	4805      	ldr	r0, [pc, #20]	; (80015f0 <Blocking_LED_Blink+0x40>)
 80015da:	f001 fa3d 	bl	8002a58 <HAL_GPIO_WritePin>
		HAL_Delay(1000/freq);
 80015de:	79fb      	ldrb	r3, [r7, #7]
 80015e0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80015e4:	fb92 f3f3 	sdiv	r3, r2, r3
 80015e8:	4618      	mov	r0, r3
 80015ea:	f000 fb61 	bl	8001cb0 <HAL_Delay>
		HAL_GPIO_WritePin(INDICATOR_LED_GPIO_Port, INDICATOR_LED_Pin, GPIO_PIN_SET);
 80015ee:	e7e4      	b.n	80015ba <Blocking_LED_Blink+0xa>
 80015f0:	40020c00 	.word	0x40020c00

080015f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80015f4:	b480      	push	{r7}
 80015f6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80015f8:	b672      	cpsid	i
}
 80015fa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80015fc:	e7fe      	b.n	80015fc <Error_Handler+0x8>
	...

08001600 <RetargetInit>:
#define STDOUT_FILENO 1
#define STDERR_FILENO 2

UART_HandleTypeDef *gHuart;

void RetargetInit(UART_HandleTypeDef *huart) {
 8001600:	b580      	push	{r7, lr}
 8001602:	b082      	sub	sp, #8
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
  gHuart = huart;
 8001608:	4a07      	ldr	r2, [pc, #28]	; (8001628 <RetargetInit+0x28>)
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	6013      	str	r3, [r2, #0]

  /* Disable I/O buffering for STDOUT stream, so that
   * chars are sent out as soon as they are printed. */
  setvbuf(stdout, NULL, _IONBF, 0);
 800160e:	4b07      	ldr	r3, [pc, #28]	; (800162c <RetargetInit+0x2c>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	6898      	ldr	r0, [r3, #8]
 8001614:	2300      	movs	r3, #0
 8001616:	2202      	movs	r2, #2
 8001618:	2100      	movs	r1, #0
 800161a:	f009 ffad 	bl	800b578 <setvbuf>
}
 800161e:	bf00      	nop
 8001620:	3708      	adds	r7, #8
 8001622:	46bd      	mov	sp, r7
 8001624:	bd80      	pop	{r7, pc}
 8001626:	bf00      	nop
 8001628:	200015ec 	.word	0x200015ec
 800162c:	2000010c 	.word	0x2000010c

08001630 <_write>:

  errno = EBADF;
  return 0;
}

int _write(int fd, char* ptr, int len) {
 8001630:	b580      	push	{r7, lr}
 8001632:	b086      	sub	sp, #24
 8001634:	af00      	add	r7, sp, #0
 8001636:	60f8      	str	r0, [r7, #12]
 8001638:	60b9      	str	r1, [r7, #8]
 800163a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDOUT_FILENO || fd == STDERR_FILENO) {
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	2b01      	cmp	r3, #1
 8001640:	d002      	beq.n	8001648 <_write+0x18>
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	2b02      	cmp	r3, #2
 8001646:	d111      	bne.n	800166c <_write+0x3c>
    hstatus = HAL_UART_Transmit(gHuart, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 8001648:	4b0e      	ldr	r3, [pc, #56]	; (8001684 <_write+0x54>)
 800164a:	6818      	ldr	r0, [r3, #0]
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	b29a      	uxth	r2, r3
 8001650:	f04f 33ff 	mov.w	r3, #4294967295
 8001654:	68b9      	ldr	r1, [r7, #8]
 8001656:	f004 fb96 	bl	8005d86 <HAL_UART_Transmit>
 800165a:	4603      	mov	r3, r0
 800165c:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 800165e:	7dfb      	ldrb	r3, [r7, #23]
 8001660:	2b00      	cmp	r3, #0
 8001662:	d101      	bne.n	8001668 <_write+0x38>
      return len;
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	e008      	b.n	800167a <_write+0x4a>
    else
      return EIO;
 8001668:	2305      	movs	r3, #5
 800166a:	e006      	b.n	800167a <_write+0x4a>
  }
  errno = EBADF;
 800166c:	f009 ff34 	bl	800b4d8 <__errno>
 8001670:	4603      	mov	r3, r0
 8001672:	2209      	movs	r2, #9
 8001674:	601a      	str	r2, [r3, #0]
  return -1;
 8001676:	f04f 33ff 	mov.w	r3, #4294967295
}
 800167a:	4618      	mov	r0, r3
 800167c:	3718      	adds	r7, #24
 800167e:	46bd      	mov	sp, r7
 8001680:	bd80      	pop	{r7, pc}
 8001682:	bf00      	nop
 8001684:	200015ec 	.word	0x200015ec

08001688 <_close>:

int _close(int fd) {
 8001688:	b580      	push	{r7, lr}
 800168a:	b082      	sub	sp, #8
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	2b00      	cmp	r3, #0
 8001694:	db04      	blt.n	80016a0 <_close+0x18>
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	2b02      	cmp	r3, #2
 800169a:	dc01      	bgt.n	80016a0 <_close+0x18>
    return 0;
 800169c:	2300      	movs	r3, #0
 800169e:	e006      	b.n	80016ae <_close+0x26>

  errno = EBADF;
 80016a0:	f009 ff1a 	bl	800b4d8 <__errno>
 80016a4:	4603      	mov	r3, r0
 80016a6:	2209      	movs	r2, #9
 80016a8:	601a      	str	r2, [r3, #0]
  return -1;
 80016aa:	f04f 33ff 	mov.w	r3, #4294967295
}
 80016ae:	4618      	mov	r0, r3
 80016b0:	3708      	adds	r7, #8
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bd80      	pop	{r7, pc}

080016b6 <_lseek>:

int _lseek(int fd, int ptr, int dir) {
 80016b6:	b580      	push	{r7, lr}
 80016b8:	b084      	sub	sp, #16
 80016ba:	af00      	add	r7, sp, #0
 80016bc:	60f8      	str	r0, [r7, #12]
 80016be:	60b9      	str	r1, [r7, #8]
 80016c0:	607a      	str	r2, [r7, #4]
  (void) fd;
  (void) ptr;
  (void) dir;

  errno = EBADF;
 80016c2:	f009 ff09 	bl	800b4d8 <__errno>
 80016c6:	4603      	mov	r3, r0
 80016c8:	2209      	movs	r2, #9
 80016ca:	601a      	str	r2, [r3, #0]
  return -1;
 80016cc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80016d0:	4618      	mov	r0, r3
 80016d2:	3710      	adds	r7, #16
 80016d4:	46bd      	mov	sp, r7
 80016d6:	bd80      	pop	{r7, pc}

080016d8 <_read>:

int _read(int fd, char* ptr, int len) {
 80016d8:	b580      	push	{r7, lr}
 80016da:	b086      	sub	sp, #24
 80016dc:	af00      	add	r7, sp, #0
 80016de:	60f8      	str	r0, [r7, #12]
 80016e0:	60b9      	str	r1, [r7, #8]
 80016e2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDIN_FILENO) {
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d110      	bne.n	800170c <_read+0x34>
    hstatus = HAL_UART_Receive(gHuart, (uint8_t *) ptr, 1, HAL_MAX_DELAY);
 80016ea:	4b0e      	ldr	r3, [pc, #56]	; (8001724 <_read+0x4c>)
 80016ec:	6818      	ldr	r0, [r3, #0]
 80016ee:	f04f 33ff 	mov.w	r3, #4294967295
 80016f2:	2201      	movs	r2, #1
 80016f4:	68b9      	ldr	r1, [r7, #8]
 80016f6:	f004 fbd8 	bl	8005eaa <HAL_UART_Receive>
 80016fa:	4603      	mov	r3, r0
 80016fc:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 80016fe:	7dfb      	ldrb	r3, [r7, #23]
 8001700:	2b00      	cmp	r3, #0
 8001702:	d101      	bne.n	8001708 <_read+0x30>
      return 1;
 8001704:	2301      	movs	r3, #1
 8001706:	e008      	b.n	800171a <_read+0x42>
    else
      return EIO;
 8001708:	2305      	movs	r3, #5
 800170a:	e006      	b.n	800171a <_read+0x42>
  }
  errno = EBADF;
 800170c:	f009 fee4 	bl	800b4d8 <__errno>
 8001710:	4603      	mov	r3, r0
 8001712:	2209      	movs	r2, #9
 8001714:	601a      	str	r2, [r3, #0]
  return -1;
 8001716:	f04f 33ff 	mov.w	r3, #4294967295
}
 800171a:	4618      	mov	r0, r3
 800171c:	3718      	adds	r7, #24
 800171e:	46bd      	mov	sp, r7
 8001720:	bd80      	pop	{r7, pc}
 8001722:	bf00      	nop
 8001724:	200015ec 	.word	0x200015ec

08001728 <_fstat>:

int _fstat(int fd, struct stat* st) {
 8001728:	b580      	push	{r7, lr}
 800172a:	b082      	sub	sp, #8
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
 8001730:	6039      	str	r1, [r7, #0]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO) {
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	2b00      	cmp	r3, #0
 8001736:	db08      	blt.n	800174a <_fstat+0x22>
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	2b02      	cmp	r3, #2
 800173c:	dc05      	bgt.n	800174a <_fstat+0x22>
    st->st_mode = S_IFCHR;
 800173e:	683b      	ldr	r3, [r7, #0]
 8001740:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001744:	605a      	str	r2, [r3, #4]
    return 0;
 8001746:	2300      	movs	r3, #0
 8001748:	e005      	b.n	8001756 <_fstat+0x2e>
  }

  errno = EBADF;
 800174a:	f009 fec5 	bl	800b4d8 <__errno>
 800174e:	4603      	mov	r3, r0
 8001750:	2209      	movs	r2, #9
 8001752:	601a      	str	r2, [r3, #0]
  return 0;
 8001754:	2300      	movs	r3, #0
}
 8001756:	4618      	mov	r0, r3
 8001758:	3708      	adds	r7, #8
 800175a:	46bd      	mov	sp, r7
 800175c:	bd80      	pop	{r7, pc}
	...

08001760 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001760:	b480      	push	{r7}
 8001762:	b083      	sub	sp, #12
 8001764:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001766:	2300      	movs	r3, #0
 8001768:	607b      	str	r3, [r7, #4]
 800176a:	4b10      	ldr	r3, [pc, #64]	; (80017ac <HAL_MspInit+0x4c>)
 800176c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800176e:	4a0f      	ldr	r2, [pc, #60]	; (80017ac <HAL_MspInit+0x4c>)
 8001770:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001774:	6453      	str	r3, [r2, #68]	; 0x44
 8001776:	4b0d      	ldr	r3, [pc, #52]	; (80017ac <HAL_MspInit+0x4c>)
 8001778:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800177a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800177e:	607b      	str	r3, [r7, #4]
 8001780:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001782:	2300      	movs	r3, #0
 8001784:	603b      	str	r3, [r7, #0]
 8001786:	4b09      	ldr	r3, [pc, #36]	; (80017ac <HAL_MspInit+0x4c>)
 8001788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800178a:	4a08      	ldr	r2, [pc, #32]	; (80017ac <HAL_MspInit+0x4c>)
 800178c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001790:	6413      	str	r3, [r2, #64]	; 0x40
 8001792:	4b06      	ldr	r3, [pc, #24]	; (80017ac <HAL_MspInit+0x4c>)
 8001794:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001796:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800179a:	603b      	str	r3, [r7, #0]
 800179c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800179e:	bf00      	nop
 80017a0:	370c      	adds	r7, #12
 80017a2:	46bd      	mov	sp, r7
 80017a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a8:	4770      	bx	lr
 80017aa:	bf00      	nop
 80017ac:	40023800 	.word	0x40023800

080017b0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b08a      	sub	sp, #40	; 0x28
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017b8:	f107 0314 	add.w	r3, r7, #20
 80017bc:	2200      	movs	r2, #0
 80017be:	601a      	str	r2, [r3, #0]
 80017c0:	605a      	str	r2, [r3, #4]
 80017c2:	609a      	str	r2, [r3, #8]
 80017c4:	60da      	str	r2, [r3, #12]
 80017c6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	4a19      	ldr	r2, [pc, #100]	; (8001834 <HAL_SPI_MspInit+0x84>)
 80017ce:	4293      	cmp	r3, r2
 80017d0:	d12b      	bne.n	800182a <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80017d2:	2300      	movs	r3, #0
 80017d4:	613b      	str	r3, [r7, #16]
 80017d6:	4b18      	ldr	r3, [pc, #96]	; (8001838 <HAL_SPI_MspInit+0x88>)
 80017d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017da:	4a17      	ldr	r2, [pc, #92]	; (8001838 <HAL_SPI_MspInit+0x88>)
 80017dc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80017e0:	6453      	str	r3, [r2, #68]	; 0x44
 80017e2:	4b15      	ldr	r3, [pc, #84]	; (8001838 <HAL_SPI_MspInit+0x88>)
 80017e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017e6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80017ea:	613b      	str	r3, [r7, #16]
 80017ec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017ee:	2300      	movs	r3, #0
 80017f0:	60fb      	str	r3, [r7, #12]
 80017f2:	4b11      	ldr	r3, [pc, #68]	; (8001838 <HAL_SPI_MspInit+0x88>)
 80017f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017f6:	4a10      	ldr	r2, [pc, #64]	; (8001838 <HAL_SPI_MspInit+0x88>)
 80017f8:	f043 0301 	orr.w	r3, r3, #1
 80017fc:	6313      	str	r3, [r2, #48]	; 0x30
 80017fe:	4b0e      	ldr	r3, [pc, #56]	; (8001838 <HAL_SPI_MspInit+0x88>)
 8001800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001802:	f003 0301 	and.w	r3, r3, #1
 8001806:	60fb      	str	r3, [r7, #12]
 8001808:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800180a:	23e0      	movs	r3, #224	; 0xe0
 800180c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800180e:	2302      	movs	r3, #2
 8001810:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001812:	2300      	movs	r3, #0
 8001814:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001816:	2303      	movs	r3, #3
 8001818:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800181a:	2305      	movs	r3, #5
 800181c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800181e:	f107 0314 	add.w	r3, r7, #20
 8001822:	4619      	mov	r1, r3
 8001824:	4805      	ldr	r0, [pc, #20]	; (800183c <HAL_SPI_MspInit+0x8c>)
 8001826:	f000 ff7b 	bl	8002720 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800182a:	bf00      	nop
 800182c:	3728      	adds	r7, #40	; 0x28
 800182e:	46bd      	mov	sp, r7
 8001830:	bd80      	pop	{r7, pc}
 8001832:	bf00      	nop
 8001834:	40013000 	.word	0x40013000
 8001838:	40023800 	.word	0x40023800
 800183c:	40020000 	.word	0x40020000

08001840 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b084      	sub	sp, #16
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001850:	d115      	bne.n	800187e <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001852:	2300      	movs	r3, #0
 8001854:	60fb      	str	r3, [r7, #12]
 8001856:	4b0c      	ldr	r3, [pc, #48]	; (8001888 <HAL_TIM_Base_MspInit+0x48>)
 8001858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800185a:	4a0b      	ldr	r2, [pc, #44]	; (8001888 <HAL_TIM_Base_MspInit+0x48>)
 800185c:	f043 0301 	orr.w	r3, r3, #1
 8001860:	6413      	str	r3, [r2, #64]	; 0x40
 8001862:	4b09      	ldr	r3, [pc, #36]	; (8001888 <HAL_TIM_Base_MspInit+0x48>)
 8001864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001866:	f003 0301 	and.w	r3, r3, #1
 800186a:	60fb      	str	r3, [r7, #12]
 800186c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 2, 0);
 800186e:	2200      	movs	r2, #0
 8001870:	2102      	movs	r1, #2
 8001872:	201c      	movs	r0, #28
 8001874:	f000 fb1b 	bl	8001eae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001878:	201c      	movs	r0, #28
 800187a:	f000 fb34 	bl	8001ee6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800187e:	bf00      	nop
 8001880:	3710      	adds	r7, #16
 8001882:	46bd      	mov	sp, r7
 8001884:	bd80      	pop	{r7, pc}
 8001886:	bf00      	nop
 8001888:	40023800 	.word	0x40023800

0800188c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	b08c      	sub	sp, #48	; 0x30
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001894:	f107 031c 	add.w	r3, r7, #28
 8001898:	2200      	movs	r2, #0
 800189a:	601a      	str	r2, [r3, #0]
 800189c:	605a      	str	r2, [r3, #4]
 800189e:	609a      	str	r2, [r3, #8]
 80018a0:	60da      	str	r2, [r3, #12]
 80018a2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	4a52      	ldr	r2, [pc, #328]	; (80019f4 <HAL_UART_MspInit+0x168>)
 80018aa:	4293      	cmp	r3, r2
 80018ac:	d164      	bne.n	8001978 <HAL_UART_MspInit+0xec>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80018ae:	2300      	movs	r3, #0
 80018b0:	61bb      	str	r3, [r7, #24]
 80018b2:	4b51      	ldr	r3, [pc, #324]	; (80019f8 <HAL_UART_MspInit+0x16c>)
 80018b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018b6:	4a50      	ldr	r2, [pc, #320]	; (80019f8 <HAL_UART_MspInit+0x16c>)
 80018b8:	f043 0310 	orr.w	r3, r3, #16
 80018bc:	6453      	str	r3, [r2, #68]	; 0x44
 80018be:	4b4e      	ldr	r3, [pc, #312]	; (80019f8 <HAL_UART_MspInit+0x16c>)
 80018c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018c2:	f003 0310 	and.w	r3, r3, #16
 80018c6:	61bb      	str	r3, [r7, #24]
 80018c8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018ca:	2300      	movs	r3, #0
 80018cc:	617b      	str	r3, [r7, #20]
 80018ce:	4b4a      	ldr	r3, [pc, #296]	; (80019f8 <HAL_UART_MspInit+0x16c>)
 80018d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018d2:	4a49      	ldr	r2, [pc, #292]	; (80019f8 <HAL_UART_MspInit+0x16c>)
 80018d4:	f043 0301 	orr.w	r3, r3, #1
 80018d8:	6313      	str	r3, [r2, #48]	; 0x30
 80018da:	4b47      	ldr	r3, [pc, #284]	; (80019f8 <HAL_UART_MspInit+0x16c>)
 80018dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018de:	f003 0301 	and.w	r3, r3, #1
 80018e2:	617b      	str	r3, [r7, #20]
 80018e4:	697b      	ldr	r3, [r7, #20]
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    PA11     ------> USART1_CTS
    PA12     ------> USART1_RTS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 80018e6:	f44f 53f0 	mov.w	r3, #7680	; 0x1e00
 80018ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018ec:	2302      	movs	r3, #2
 80018ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018f0:	2300      	movs	r3, #0
 80018f2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018f4:	2303      	movs	r3, #3
 80018f6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80018f8:	2307      	movs	r3, #7
 80018fa:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018fc:	f107 031c 	add.w	r3, r7, #28
 8001900:	4619      	mov	r1, r3
 8001902:	483e      	ldr	r0, [pc, #248]	; (80019fc <HAL_UART_MspInit+0x170>)
 8001904:	f000 ff0c 	bl	8002720 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8001908:	4b3d      	ldr	r3, [pc, #244]	; (8001a00 <HAL_UART_MspInit+0x174>)
 800190a:	4a3e      	ldr	r2, [pc, #248]	; (8001a04 <HAL_UART_MspInit+0x178>)
 800190c:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 800190e:	4b3c      	ldr	r3, [pc, #240]	; (8001a00 <HAL_UART_MspInit+0x174>)
 8001910:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001914:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001916:	4b3a      	ldr	r3, [pc, #232]	; (8001a00 <HAL_UART_MspInit+0x174>)
 8001918:	2200      	movs	r2, #0
 800191a:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800191c:	4b38      	ldr	r3, [pc, #224]	; (8001a00 <HAL_UART_MspInit+0x174>)
 800191e:	2200      	movs	r2, #0
 8001920:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001922:	4b37      	ldr	r3, [pc, #220]	; (8001a00 <HAL_UART_MspInit+0x174>)
 8001924:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001928:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800192a:	4b35      	ldr	r3, [pc, #212]	; (8001a00 <HAL_UART_MspInit+0x174>)
 800192c:	2200      	movs	r2, #0
 800192e:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001930:	4b33      	ldr	r3, [pc, #204]	; (8001a00 <HAL_UART_MspInit+0x174>)
 8001932:	2200      	movs	r2, #0
 8001934:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8001936:	4b32      	ldr	r3, [pc, #200]	; (8001a00 <HAL_UART_MspInit+0x174>)
 8001938:	2200      	movs	r2, #0
 800193a:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800193c:	4b30      	ldr	r3, [pc, #192]	; (8001a00 <HAL_UART_MspInit+0x174>)
 800193e:	2200      	movs	r2, #0
 8001940:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001942:	4b2f      	ldr	r3, [pc, #188]	; (8001a00 <HAL_UART_MspInit+0x174>)
 8001944:	2204      	movs	r2, #4
 8001946:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_usart1_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_HALFFULL;
 8001948:	4b2d      	ldr	r3, [pc, #180]	; (8001a00 <HAL_UART_MspInit+0x174>)
 800194a:	2201      	movs	r2, #1
 800194c:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_usart1_rx.Init.MemBurst = DMA_MBURST_SINGLE;
 800194e:	4b2c      	ldr	r3, [pc, #176]	; (8001a00 <HAL_UART_MspInit+0x174>)
 8001950:	2200      	movs	r2, #0
 8001952:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_usart1_rx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8001954:	4b2a      	ldr	r3, [pc, #168]	; (8001a00 <HAL_UART_MspInit+0x174>)
 8001956:	2200      	movs	r2, #0
 8001958:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800195a:	4829      	ldr	r0, [pc, #164]	; (8001a00 <HAL_UART_MspInit+0x174>)
 800195c:	f000 fade 	bl	8001f1c <HAL_DMA_Init>
 8001960:	4603      	mov	r3, r0
 8001962:	2b00      	cmp	r3, #0
 8001964:	d001      	beq.n	800196a <HAL_UART_MspInit+0xde>
    {
      Error_Handler();
 8001966:	f7ff fe45 	bl	80015f4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	4a24      	ldr	r2, [pc, #144]	; (8001a00 <HAL_UART_MspInit+0x174>)
 800196e:	639a      	str	r2, [r3, #56]	; 0x38
 8001970:	4a23      	ldr	r2, [pc, #140]	; (8001a00 <HAL_UART_MspInit+0x174>)
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001976:	e038      	b.n	80019ea <HAL_UART_MspInit+0x15e>
  else if(huart->Instance==USART2)
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	4a22      	ldr	r2, [pc, #136]	; (8001a08 <HAL_UART_MspInit+0x17c>)
 800197e:	4293      	cmp	r3, r2
 8001980:	d133      	bne.n	80019ea <HAL_UART_MspInit+0x15e>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001982:	2300      	movs	r3, #0
 8001984:	613b      	str	r3, [r7, #16]
 8001986:	4b1c      	ldr	r3, [pc, #112]	; (80019f8 <HAL_UART_MspInit+0x16c>)
 8001988:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800198a:	4a1b      	ldr	r2, [pc, #108]	; (80019f8 <HAL_UART_MspInit+0x16c>)
 800198c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001990:	6413      	str	r3, [r2, #64]	; 0x40
 8001992:	4b19      	ldr	r3, [pc, #100]	; (80019f8 <HAL_UART_MspInit+0x16c>)
 8001994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001996:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800199a:	613b      	str	r3, [r7, #16]
 800199c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800199e:	2300      	movs	r3, #0
 80019a0:	60fb      	str	r3, [r7, #12]
 80019a2:	4b15      	ldr	r3, [pc, #84]	; (80019f8 <HAL_UART_MspInit+0x16c>)
 80019a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019a6:	4a14      	ldr	r2, [pc, #80]	; (80019f8 <HAL_UART_MspInit+0x16c>)
 80019a8:	f043 0301 	orr.w	r3, r3, #1
 80019ac:	6313      	str	r3, [r2, #48]	; 0x30
 80019ae:	4b12      	ldr	r3, [pc, #72]	; (80019f8 <HAL_UART_MspInit+0x16c>)
 80019b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019b2:	f003 0301 	and.w	r3, r3, #1
 80019b6:	60fb      	str	r3, [r7, #12]
 80019b8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 80019ba:	230f      	movs	r3, #15
 80019bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019be:	2302      	movs	r3, #2
 80019c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019c2:	2300      	movs	r3, #0
 80019c4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019c6:	2303      	movs	r3, #3
 80019c8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80019ca:	2307      	movs	r3, #7
 80019cc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019ce:	f107 031c 	add.w	r3, r7, #28
 80019d2:	4619      	mov	r1, r3
 80019d4:	4809      	ldr	r0, [pc, #36]	; (80019fc <HAL_UART_MspInit+0x170>)
 80019d6:	f000 fea3 	bl	8002720 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 1, 0);
 80019da:	2200      	movs	r2, #0
 80019dc:	2101      	movs	r1, #1
 80019de:	2026      	movs	r0, #38	; 0x26
 80019e0:	f000 fa65 	bl	8001eae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80019e4:	2026      	movs	r0, #38	; 0x26
 80019e6:	f000 fa7e 	bl	8001ee6 <HAL_NVIC_EnableIRQ>
}
 80019ea:	bf00      	nop
 80019ec:	3730      	adds	r7, #48	; 0x30
 80019ee:	46bd      	mov	sp, r7
 80019f0:	bd80      	pop	{r7, pc}
 80019f2:	bf00      	nop
 80019f4:	40011000 	.word	0x40011000
 80019f8:	40023800 	.word	0x40023800
 80019fc:	40020000 	.word	0x40020000
 8001a00:	200002b4 	.word	0x200002b4
 8001a04:	40026440 	.word	0x40026440
 8001a08:	40004400 	.word	0x40004400

08001a0c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001a10:	e7fe      	b.n	8001a10 <NMI_Handler+0x4>

08001a12 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a12:	b480      	push	{r7}
 8001a14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a16:	e7fe      	b.n	8001a16 <HardFault_Handler+0x4>

08001a18 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a18:	b480      	push	{r7}
 8001a1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a1c:	e7fe      	b.n	8001a1c <MemManage_Handler+0x4>

08001a1e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a1e:	b480      	push	{r7}
 8001a20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a22:	e7fe      	b.n	8001a22 <BusFault_Handler+0x4>

08001a24 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a24:	b480      	push	{r7}
 8001a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a28:	e7fe      	b.n	8001a28 <UsageFault_Handler+0x4>

08001a2a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a2a:	b480      	push	{r7}
 8001a2c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a2e:	bf00      	nop
 8001a30:	46bd      	mov	sp, r7
 8001a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a36:	4770      	bx	lr

08001a38 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a3c:	bf00      	nop
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a44:	4770      	bx	lr

08001a46 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a46:	b480      	push	{r7}
 8001a48:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a4a:	bf00      	nop
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a52:	4770      	bx	lr

08001a54 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a58:	f000 f90a 	bl	8001c70 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a5c:	bf00      	nop
 8001a5e:	bd80      	pop	{r7, pc}

08001a60 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(IO0_RF_Pin);
 8001a64:	2002      	movs	r0, #2
 8001a66:	f001 f811 	bl	8002a8c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8001a6a:	bf00      	nop
 8001a6c:	bd80      	pop	{r7, pc}
	...

08001a70 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001a74:	4802      	ldr	r0, [pc, #8]	; (8001a80 <TIM2_IRQHandler+0x10>)
 8001a76:	f003 fd6d 	bl	8005554 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001a7a:	bf00      	nop
 8001a7c:	bd80      	pop	{r7, pc}
 8001a7e:	bf00      	nop
 8001a80:	200001e4 	.word	0x200001e4

08001a84 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001a88:	4802      	ldr	r0, [pc, #8]	; (8001a94 <USART2_IRQHandler+0x10>)
 8001a8a:	f004 fae1 	bl	8006050 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001a8e:	bf00      	nop
 8001a90:	bd80      	pop	{r7, pc}
 8001a92:	bf00      	nop
 8001a94:	20000270 	.word	0x20000270

08001a98 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(IO1_RF_Pin);
 8001a9c:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001aa0:	f000 fff4 	bl	8002a8c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(IO2_RF_Pin);
 8001aa4:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8001aa8:	f000 fff0 	bl	8002a8c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(IO3_RF_Pin);
 8001aac:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001ab0:	f000 ffec 	bl	8002a8c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(IO4_RF_Pin);
 8001ab4:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001ab8:	f000 ffe8 	bl	8002a8c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001abc:	bf00      	nop
 8001abe:	bd80      	pop	{r7, pc}

08001ac0 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001ac4:	4802      	ldr	r0, [pc, #8]	; (8001ad0 <DMA2_Stream2_IRQHandler+0x10>)
 8001ac6:	f000 fbc1 	bl	800224c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8001aca:	bf00      	nop
 8001acc:	bd80      	pop	{r7, pc}
 8001ace:	bf00      	nop
 8001ad0:	200002b4 	.word	0x200002b4

08001ad4 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
 8001ad8:	4802      	ldr	r0, [pc, #8]	; (8001ae4 <OTG_HS_IRQHandler+0x10>)
 8001ada:	f001 f93f 	bl	8002d5c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 8001ade:	bf00      	nop
 8001ae0:	bd80      	pop	{r7, pc}
 8001ae2:	bf00      	nop
 8001ae4:	20002ad8 	.word	0x20002ad8

08001ae8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b086      	sub	sp, #24
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001af0:	4a14      	ldr	r2, [pc, #80]	; (8001b44 <_sbrk+0x5c>)
 8001af2:	4b15      	ldr	r3, [pc, #84]	; (8001b48 <_sbrk+0x60>)
 8001af4:	1ad3      	subs	r3, r2, r3
 8001af6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001af8:	697b      	ldr	r3, [r7, #20]
 8001afa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001afc:	4b13      	ldr	r3, [pc, #76]	; (8001b4c <_sbrk+0x64>)
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d102      	bne.n	8001b0a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b04:	4b11      	ldr	r3, [pc, #68]	; (8001b4c <_sbrk+0x64>)
 8001b06:	4a12      	ldr	r2, [pc, #72]	; (8001b50 <_sbrk+0x68>)
 8001b08:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b0a:	4b10      	ldr	r3, [pc, #64]	; (8001b4c <_sbrk+0x64>)
 8001b0c:	681a      	ldr	r2, [r3, #0]
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	4413      	add	r3, r2
 8001b12:	693a      	ldr	r2, [r7, #16]
 8001b14:	429a      	cmp	r2, r3
 8001b16:	d207      	bcs.n	8001b28 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b18:	f009 fcde 	bl	800b4d8 <__errno>
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	220c      	movs	r2, #12
 8001b20:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b22:	f04f 33ff 	mov.w	r3, #4294967295
 8001b26:	e009      	b.n	8001b3c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b28:	4b08      	ldr	r3, [pc, #32]	; (8001b4c <_sbrk+0x64>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b2e:	4b07      	ldr	r3, [pc, #28]	; (8001b4c <_sbrk+0x64>)
 8001b30:	681a      	ldr	r2, [r3, #0]
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	4413      	add	r3, r2
 8001b36:	4a05      	ldr	r2, [pc, #20]	; (8001b4c <_sbrk+0x64>)
 8001b38:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b3a:	68fb      	ldr	r3, [r7, #12]
}
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	3718      	adds	r7, #24
 8001b40:	46bd      	mov	sp, r7
 8001b42:	bd80      	pop	{r7, pc}
 8001b44:	20020000 	.word	0x20020000
 8001b48:	00000400 	.word	0x00000400
 8001b4c:	200015f0 	.word	0x200015f0
 8001b50:	20003218 	.word	0x20003218

08001b54 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001b54:	b480      	push	{r7}
 8001b56:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001b58:	4b06      	ldr	r3, [pc, #24]	; (8001b74 <SystemInit+0x20>)
 8001b5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b5e:	4a05      	ldr	r2, [pc, #20]	; (8001b74 <SystemInit+0x20>)
 8001b60:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001b64:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b68:	bf00      	nop
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b70:	4770      	bx	lr
 8001b72:	bf00      	nop
 8001b74:	e000ed00 	.word	0xe000ed00

08001b78 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001b78:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001bb0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001b7c:	480d      	ldr	r0, [pc, #52]	; (8001bb4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001b7e:	490e      	ldr	r1, [pc, #56]	; (8001bb8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001b80:	4a0e      	ldr	r2, [pc, #56]	; (8001bbc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001b82:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b84:	e002      	b.n	8001b8c <LoopCopyDataInit>

08001b86 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b86:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b88:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b8a:	3304      	adds	r3, #4

08001b8c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b8c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b8e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b90:	d3f9      	bcc.n	8001b86 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b92:	4a0b      	ldr	r2, [pc, #44]	; (8001bc0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001b94:	4c0b      	ldr	r4, [pc, #44]	; (8001bc4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001b96:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b98:	e001      	b.n	8001b9e <LoopFillZerobss>

08001b9a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b9a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b9c:	3204      	adds	r2, #4

08001b9e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b9e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ba0:	d3fb      	bcc.n	8001b9a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001ba2:	f7ff ffd7 	bl	8001b54 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001ba6:	f009 fc9d 	bl	800b4e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001baa:	f7ff f8c5 	bl	8000d38 <main>
  bx  lr    
 8001bae:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001bb0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001bb4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001bb8:	20000170 	.word	0x20000170
  ldr r2, =_sidata
 8001bbc:	0800bf08 	.word	0x0800bf08
  ldr r2, =_sbss
 8001bc0:	20000170 	.word	0x20000170
  ldr r4, =_ebss
 8001bc4:	20003214 	.word	0x20003214

08001bc8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001bc8:	e7fe      	b.n	8001bc8 <ADC_IRQHandler>
	...

08001bcc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001bd0:	4b0e      	ldr	r3, [pc, #56]	; (8001c0c <HAL_Init+0x40>)
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	4a0d      	ldr	r2, [pc, #52]	; (8001c0c <HAL_Init+0x40>)
 8001bd6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001bda:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001bdc:	4b0b      	ldr	r3, [pc, #44]	; (8001c0c <HAL_Init+0x40>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	4a0a      	ldr	r2, [pc, #40]	; (8001c0c <HAL_Init+0x40>)
 8001be2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001be6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001be8:	4b08      	ldr	r3, [pc, #32]	; (8001c0c <HAL_Init+0x40>)
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	4a07      	ldr	r2, [pc, #28]	; (8001c0c <HAL_Init+0x40>)
 8001bee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001bf2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001bf4:	2003      	movs	r0, #3
 8001bf6:	f000 f94f 	bl	8001e98 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001bfa:	200f      	movs	r0, #15
 8001bfc:	f000 f808 	bl	8001c10 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001c00:	f7ff fdae 	bl	8001760 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c04:	2300      	movs	r3, #0
}
 8001c06:	4618      	mov	r0, r3
 8001c08:	bd80      	pop	{r7, pc}
 8001c0a:	bf00      	nop
 8001c0c:	40023c00 	.word	0x40023c00

08001c10 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b082      	sub	sp, #8
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001c18:	4b12      	ldr	r3, [pc, #72]	; (8001c64 <HAL_InitTick+0x54>)
 8001c1a:	681a      	ldr	r2, [r3, #0]
 8001c1c:	4b12      	ldr	r3, [pc, #72]	; (8001c68 <HAL_InitTick+0x58>)
 8001c1e:	781b      	ldrb	r3, [r3, #0]
 8001c20:	4619      	mov	r1, r3
 8001c22:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c26:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c2e:	4618      	mov	r0, r3
 8001c30:	f000 f967 	bl	8001f02 <HAL_SYSTICK_Config>
 8001c34:	4603      	mov	r3, r0
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d001      	beq.n	8001c3e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001c3a:	2301      	movs	r3, #1
 8001c3c:	e00e      	b.n	8001c5c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	2b0f      	cmp	r3, #15
 8001c42:	d80a      	bhi.n	8001c5a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c44:	2200      	movs	r2, #0
 8001c46:	6879      	ldr	r1, [r7, #4]
 8001c48:	f04f 30ff 	mov.w	r0, #4294967295
 8001c4c:	f000 f92f 	bl	8001eae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c50:	4a06      	ldr	r2, [pc, #24]	; (8001c6c <HAL_InitTick+0x5c>)
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c56:	2300      	movs	r3, #0
 8001c58:	e000      	b.n	8001c5c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001c5a:	2301      	movs	r3, #1
}
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	3708      	adds	r7, #8
 8001c60:	46bd      	mov	sp, r7
 8001c62:	bd80      	pop	{r7, pc}
 8001c64:	20000010 	.word	0x20000010
 8001c68:	20000018 	.word	0x20000018
 8001c6c:	20000014 	.word	0x20000014

08001c70 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c70:	b480      	push	{r7}
 8001c72:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c74:	4b06      	ldr	r3, [pc, #24]	; (8001c90 <HAL_IncTick+0x20>)
 8001c76:	781b      	ldrb	r3, [r3, #0]
 8001c78:	461a      	mov	r2, r3
 8001c7a:	4b06      	ldr	r3, [pc, #24]	; (8001c94 <HAL_IncTick+0x24>)
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	4413      	add	r3, r2
 8001c80:	4a04      	ldr	r2, [pc, #16]	; (8001c94 <HAL_IncTick+0x24>)
 8001c82:	6013      	str	r3, [r2, #0]
}
 8001c84:	bf00      	nop
 8001c86:	46bd      	mov	sp, r7
 8001c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8c:	4770      	bx	lr
 8001c8e:	bf00      	nop
 8001c90:	20000018 	.word	0x20000018
 8001c94:	200015f4 	.word	0x200015f4

08001c98 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c98:	b480      	push	{r7}
 8001c9a:	af00      	add	r7, sp, #0
  return uwTick;
 8001c9c:	4b03      	ldr	r3, [pc, #12]	; (8001cac <HAL_GetTick+0x14>)
 8001c9e:	681b      	ldr	r3, [r3, #0]
}
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca8:	4770      	bx	lr
 8001caa:	bf00      	nop
 8001cac:	200015f4 	.word	0x200015f4

08001cb0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b084      	sub	sp, #16
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001cb8:	f7ff ffee 	bl	8001c98 <HAL_GetTick>
 8001cbc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001cc8:	d005      	beq.n	8001cd6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001cca:	4b0a      	ldr	r3, [pc, #40]	; (8001cf4 <HAL_Delay+0x44>)
 8001ccc:	781b      	ldrb	r3, [r3, #0]
 8001cce:	461a      	mov	r2, r3
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	4413      	add	r3, r2
 8001cd4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001cd6:	bf00      	nop
 8001cd8:	f7ff ffde 	bl	8001c98 <HAL_GetTick>
 8001cdc:	4602      	mov	r2, r0
 8001cde:	68bb      	ldr	r3, [r7, #8]
 8001ce0:	1ad3      	subs	r3, r2, r3
 8001ce2:	68fa      	ldr	r2, [r7, #12]
 8001ce4:	429a      	cmp	r2, r3
 8001ce6:	d8f7      	bhi.n	8001cd8 <HAL_Delay+0x28>
  {
  }
}
 8001ce8:	bf00      	nop
 8001cea:	bf00      	nop
 8001cec:	3710      	adds	r7, #16
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	bd80      	pop	{r7, pc}
 8001cf2:	bf00      	nop
 8001cf4:	20000018 	.word	0x20000018

08001cf8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	b085      	sub	sp, #20
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	f003 0307 	and.w	r3, r3, #7
 8001d06:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d08:	4b0c      	ldr	r3, [pc, #48]	; (8001d3c <__NVIC_SetPriorityGrouping+0x44>)
 8001d0a:	68db      	ldr	r3, [r3, #12]
 8001d0c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d0e:	68ba      	ldr	r2, [r7, #8]
 8001d10:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001d14:	4013      	ands	r3, r2
 8001d16:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d1c:	68bb      	ldr	r3, [r7, #8]
 8001d1e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d20:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001d24:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d28:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d2a:	4a04      	ldr	r2, [pc, #16]	; (8001d3c <__NVIC_SetPriorityGrouping+0x44>)
 8001d2c:	68bb      	ldr	r3, [r7, #8]
 8001d2e:	60d3      	str	r3, [r2, #12]
}
 8001d30:	bf00      	nop
 8001d32:	3714      	adds	r7, #20
 8001d34:	46bd      	mov	sp, r7
 8001d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3a:	4770      	bx	lr
 8001d3c:	e000ed00 	.word	0xe000ed00

08001d40 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d40:	b480      	push	{r7}
 8001d42:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d44:	4b04      	ldr	r3, [pc, #16]	; (8001d58 <__NVIC_GetPriorityGrouping+0x18>)
 8001d46:	68db      	ldr	r3, [r3, #12]
 8001d48:	0a1b      	lsrs	r3, r3, #8
 8001d4a:	f003 0307 	and.w	r3, r3, #7
}
 8001d4e:	4618      	mov	r0, r3
 8001d50:	46bd      	mov	sp, r7
 8001d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d56:	4770      	bx	lr
 8001d58:	e000ed00 	.word	0xe000ed00

08001d5c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d5c:	b480      	push	{r7}
 8001d5e:	b083      	sub	sp, #12
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	4603      	mov	r3, r0
 8001d64:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	db0b      	blt.n	8001d86 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d6e:	79fb      	ldrb	r3, [r7, #7]
 8001d70:	f003 021f 	and.w	r2, r3, #31
 8001d74:	4907      	ldr	r1, [pc, #28]	; (8001d94 <__NVIC_EnableIRQ+0x38>)
 8001d76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d7a:	095b      	lsrs	r3, r3, #5
 8001d7c:	2001      	movs	r0, #1
 8001d7e:	fa00 f202 	lsl.w	r2, r0, r2
 8001d82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001d86:	bf00      	nop
 8001d88:	370c      	adds	r7, #12
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d90:	4770      	bx	lr
 8001d92:	bf00      	nop
 8001d94:	e000e100 	.word	0xe000e100

08001d98 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d98:	b480      	push	{r7}
 8001d9a:	b083      	sub	sp, #12
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	4603      	mov	r3, r0
 8001da0:	6039      	str	r1, [r7, #0]
 8001da2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001da4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	db0a      	blt.n	8001dc2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001dac:	683b      	ldr	r3, [r7, #0]
 8001dae:	b2da      	uxtb	r2, r3
 8001db0:	490c      	ldr	r1, [pc, #48]	; (8001de4 <__NVIC_SetPriority+0x4c>)
 8001db2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001db6:	0112      	lsls	r2, r2, #4
 8001db8:	b2d2      	uxtb	r2, r2
 8001dba:	440b      	add	r3, r1
 8001dbc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001dc0:	e00a      	b.n	8001dd8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001dc2:	683b      	ldr	r3, [r7, #0]
 8001dc4:	b2da      	uxtb	r2, r3
 8001dc6:	4908      	ldr	r1, [pc, #32]	; (8001de8 <__NVIC_SetPriority+0x50>)
 8001dc8:	79fb      	ldrb	r3, [r7, #7]
 8001dca:	f003 030f 	and.w	r3, r3, #15
 8001dce:	3b04      	subs	r3, #4
 8001dd0:	0112      	lsls	r2, r2, #4
 8001dd2:	b2d2      	uxtb	r2, r2
 8001dd4:	440b      	add	r3, r1
 8001dd6:	761a      	strb	r2, [r3, #24]
}
 8001dd8:	bf00      	nop
 8001dda:	370c      	adds	r7, #12
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de2:	4770      	bx	lr
 8001de4:	e000e100 	.word	0xe000e100
 8001de8:	e000ed00 	.word	0xe000ed00

08001dec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001dec:	b480      	push	{r7}
 8001dee:	b089      	sub	sp, #36	; 0x24
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	60f8      	str	r0, [r7, #12]
 8001df4:	60b9      	str	r1, [r7, #8]
 8001df6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	f003 0307 	and.w	r3, r3, #7
 8001dfe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e00:	69fb      	ldr	r3, [r7, #28]
 8001e02:	f1c3 0307 	rsb	r3, r3, #7
 8001e06:	2b04      	cmp	r3, #4
 8001e08:	bf28      	it	cs
 8001e0a:	2304      	movcs	r3, #4
 8001e0c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e0e:	69fb      	ldr	r3, [r7, #28]
 8001e10:	3304      	adds	r3, #4
 8001e12:	2b06      	cmp	r3, #6
 8001e14:	d902      	bls.n	8001e1c <NVIC_EncodePriority+0x30>
 8001e16:	69fb      	ldr	r3, [r7, #28]
 8001e18:	3b03      	subs	r3, #3
 8001e1a:	e000      	b.n	8001e1e <NVIC_EncodePriority+0x32>
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e20:	f04f 32ff 	mov.w	r2, #4294967295
 8001e24:	69bb      	ldr	r3, [r7, #24]
 8001e26:	fa02 f303 	lsl.w	r3, r2, r3
 8001e2a:	43da      	mvns	r2, r3
 8001e2c:	68bb      	ldr	r3, [r7, #8]
 8001e2e:	401a      	ands	r2, r3
 8001e30:	697b      	ldr	r3, [r7, #20]
 8001e32:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e34:	f04f 31ff 	mov.w	r1, #4294967295
 8001e38:	697b      	ldr	r3, [r7, #20]
 8001e3a:	fa01 f303 	lsl.w	r3, r1, r3
 8001e3e:	43d9      	mvns	r1, r3
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e44:	4313      	orrs	r3, r2
         );
}
 8001e46:	4618      	mov	r0, r3
 8001e48:	3724      	adds	r7, #36	; 0x24
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e50:	4770      	bx	lr
	...

08001e54 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b082      	sub	sp, #8
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	3b01      	subs	r3, #1
 8001e60:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e64:	d301      	bcc.n	8001e6a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e66:	2301      	movs	r3, #1
 8001e68:	e00f      	b.n	8001e8a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e6a:	4a0a      	ldr	r2, [pc, #40]	; (8001e94 <SysTick_Config+0x40>)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	3b01      	subs	r3, #1
 8001e70:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e72:	210f      	movs	r1, #15
 8001e74:	f04f 30ff 	mov.w	r0, #4294967295
 8001e78:	f7ff ff8e 	bl	8001d98 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e7c:	4b05      	ldr	r3, [pc, #20]	; (8001e94 <SysTick_Config+0x40>)
 8001e7e:	2200      	movs	r2, #0
 8001e80:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e82:	4b04      	ldr	r3, [pc, #16]	; (8001e94 <SysTick_Config+0x40>)
 8001e84:	2207      	movs	r2, #7
 8001e86:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e88:	2300      	movs	r3, #0
}
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	3708      	adds	r7, #8
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	bd80      	pop	{r7, pc}
 8001e92:	bf00      	nop
 8001e94:	e000e010 	.word	0xe000e010

08001e98 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b082      	sub	sp, #8
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ea0:	6878      	ldr	r0, [r7, #4]
 8001ea2:	f7ff ff29 	bl	8001cf8 <__NVIC_SetPriorityGrouping>
}
 8001ea6:	bf00      	nop
 8001ea8:	3708      	adds	r7, #8
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	bd80      	pop	{r7, pc}

08001eae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001eae:	b580      	push	{r7, lr}
 8001eb0:	b086      	sub	sp, #24
 8001eb2:	af00      	add	r7, sp, #0
 8001eb4:	4603      	mov	r3, r0
 8001eb6:	60b9      	str	r1, [r7, #8]
 8001eb8:	607a      	str	r2, [r7, #4]
 8001eba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ec0:	f7ff ff3e 	bl	8001d40 <__NVIC_GetPriorityGrouping>
 8001ec4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ec6:	687a      	ldr	r2, [r7, #4]
 8001ec8:	68b9      	ldr	r1, [r7, #8]
 8001eca:	6978      	ldr	r0, [r7, #20]
 8001ecc:	f7ff ff8e 	bl	8001dec <NVIC_EncodePriority>
 8001ed0:	4602      	mov	r2, r0
 8001ed2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ed6:	4611      	mov	r1, r2
 8001ed8:	4618      	mov	r0, r3
 8001eda:	f7ff ff5d 	bl	8001d98 <__NVIC_SetPriority>
}
 8001ede:	bf00      	nop
 8001ee0:	3718      	adds	r7, #24
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	bd80      	pop	{r7, pc}

08001ee6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ee6:	b580      	push	{r7, lr}
 8001ee8:	b082      	sub	sp, #8
 8001eea:	af00      	add	r7, sp, #0
 8001eec:	4603      	mov	r3, r0
 8001eee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ef0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	f7ff ff31 	bl	8001d5c <__NVIC_EnableIRQ>
}
 8001efa:	bf00      	nop
 8001efc:	3708      	adds	r7, #8
 8001efe:	46bd      	mov	sp, r7
 8001f00:	bd80      	pop	{r7, pc}

08001f02 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f02:	b580      	push	{r7, lr}
 8001f04:	b082      	sub	sp, #8
 8001f06:	af00      	add	r7, sp, #0
 8001f08:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f0a:	6878      	ldr	r0, [r7, #4]
 8001f0c:	f7ff ffa2 	bl	8001e54 <SysTick_Config>
 8001f10:	4603      	mov	r3, r0
}
 8001f12:	4618      	mov	r0, r3
 8001f14:	3708      	adds	r7, #8
 8001f16:	46bd      	mov	sp, r7
 8001f18:	bd80      	pop	{r7, pc}
	...

08001f1c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b086      	sub	sp, #24
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001f24:	2300      	movs	r3, #0
 8001f26:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001f28:	f7ff feb6 	bl	8001c98 <HAL_GetTick>
 8001f2c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d101      	bne.n	8001f38 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001f34:	2301      	movs	r3, #1
 8001f36:	e099      	b.n	800206c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	2202      	movs	r2, #2
 8001f3c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	2200      	movs	r2, #0
 8001f44:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	681a      	ldr	r2, [r3, #0]
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f022 0201 	bic.w	r2, r2, #1
 8001f56:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001f58:	e00f      	b.n	8001f7a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001f5a:	f7ff fe9d 	bl	8001c98 <HAL_GetTick>
 8001f5e:	4602      	mov	r2, r0
 8001f60:	693b      	ldr	r3, [r7, #16]
 8001f62:	1ad3      	subs	r3, r2, r3
 8001f64:	2b05      	cmp	r3, #5
 8001f66:	d908      	bls.n	8001f7a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	2220      	movs	r2, #32
 8001f6c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	2203      	movs	r2, #3
 8001f72:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001f76:	2303      	movs	r3, #3
 8001f78:	e078      	b.n	800206c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f003 0301 	and.w	r3, r3, #1
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d1e8      	bne.n	8001f5a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001f90:	697a      	ldr	r2, [r7, #20]
 8001f92:	4b38      	ldr	r3, [pc, #224]	; (8002074 <HAL_DMA_Init+0x158>)
 8001f94:	4013      	ands	r3, r2
 8001f96:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	685a      	ldr	r2, [r3, #4]
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	689b      	ldr	r3, [r3, #8]
 8001fa0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001fa6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	691b      	ldr	r3, [r3, #16]
 8001fac:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001fb2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	699b      	ldr	r3, [r3, #24]
 8001fb8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001fbe:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	6a1b      	ldr	r3, [r3, #32]
 8001fc4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001fc6:	697a      	ldr	r2, [r7, #20]
 8001fc8:	4313      	orrs	r3, r2
 8001fca:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fd0:	2b04      	cmp	r3, #4
 8001fd2:	d107      	bne.n	8001fe4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fdc:	4313      	orrs	r3, r2
 8001fde:	697a      	ldr	r2, [r7, #20]
 8001fe0:	4313      	orrs	r3, r2
 8001fe2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	697a      	ldr	r2, [r7, #20]
 8001fea:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	695b      	ldr	r3, [r3, #20]
 8001ff2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001ff4:	697b      	ldr	r3, [r7, #20]
 8001ff6:	f023 0307 	bic.w	r3, r3, #7
 8001ffa:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002000:	697a      	ldr	r2, [r7, #20]
 8002002:	4313      	orrs	r3, r2
 8002004:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800200a:	2b04      	cmp	r3, #4
 800200c:	d117      	bne.n	800203e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002012:	697a      	ldr	r2, [r7, #20]
 8002014:	4313      	orrs	r3, r2
 8002016:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800201c:	2b00      	cmp	r3, #0
 800201e:	d00e      	beq.n	800203e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002020:	6878      	ldr	r0, [r7, #4]
 8002022:	f000 fb01 	bl	8002628 <DMA_CheckFifoParam>
 8002026:	4603      	mov	r3, r0
 8002028:	2b00      	cmp	r3, #0
 800202a:	d008      	beq.n	800203e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	2240      	movs	r2, #64	; 0x40
 8002030:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	2201      	movs	r2, #1
 8002036:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800203a:	2301      	movs	r3, #1
 800203c:	e016      	b.n	800206c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	697a      	ldr	r2, [r7, #20]
 8002044:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002046:	6878      	ldr	r0, [r7, #4]
 8002048:	f000 fab8 	bl	80025bc <DMA_CalcBaseAndBitshift>
 800204c:	4603      	mov	r3, r0
 800204e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002054:	223f      	movs	r2, #63	; 0x3f
 8002056:	409a      	lsls	r2, r3
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	2200      	movs	r2, #0
 8002060:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	2201      	movs	r2, #1
 8002066:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800206a:	2300      	movs	r3, #0
}
 800206c:	4618      	mov	r0, r3
 800206e:	3718      	adds	r7, #24
 8002070:	46bd      	mov	sp, r7
 8002072:	bd80      	pop	{r7, pc}
 8002074:	f010803f 	.word	0xf010803f

08002078 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	b086      	sub	sp, #24
 800207c:	af00      	add	r7, sp, #0
 800207e:	60f8      	str	r0, [r7, #12]
 8002080:	60b9      	str	r1, [r7, #8]
 8002082:	607a      	str	r2, [r7, #4]
 8002084:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002086:	2300      	movs	r3, #0
 8002088:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800208e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002096:	2b01      	cmp	r3, #1
 8002098:	d101      	bne.n	800209e <HAL_DMA_Start_IT+0x26>
 800209a:	2302      	movs	r3, #2
 800209c:	e040      	b.n	8002120 <HAL_DMA_Start_IT+0xa8>
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	2201      	movs	r2, #1
 80020a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80020ac:	b2db      	uxtb	r3, r3
 80020ae:	2b01      	cmp	r3, #1
 80020b0:	d12f      	bne.n	8002112 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	2202      	movs	r2, #2
 80020b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	2200      	movs	r2, #0
 80020be:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80020c0:	683b      	ldr	r3, [r7, #0]
 80020c2:	687a      	ldr	r2, [r7, #4]
 80020c4:	68b9      	ldr	r1, [r7, #8]
 80020c6:	68f8      	ldr	r0, [r7, #12]
 80020c8:	f000 fa4a 	bl	8002560 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020d0:	223f      	movs	r2, #63	; 0x3f
 80020d2:	409a      	lsls	r2, r3
 80020d4:	693b      	ldr	r3, [r7, #16]
 80020d6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	681a      	ldr	r2, [r3, #0]
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f042 0216 	orr.w	r2, r2, #22
 80020e6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d007      	beq.n	8002100 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	681a      	ldr	r2, [r3, #0]
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f042 0208 	orr.w	r2, r2, #8
 80020fe:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	681a      	ldr	r2, [r3, #0]
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f042 0201 	orr.w	r2, r2, #1
 800210e:	601a      	str	r2, [r3, #0]
 8002110:	e005      	b.n	800211e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	2200      	movs	r2, #0
 8002116:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800211a:	2302      	movs	r3, #2
 800211c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800211e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002120:	4618      	mov	r0, r3
 8002122:	3718      	adds	r7, #24
 8002124:	46bd      	mov	sp, r7
 8002126:	bd80      	pop	{r7, pc}

08002128 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	b084      	sub	sp, #16
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002134:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002136:	f7ff fdaf 	bl	8001c98 <HAL_GetTick>
 800213a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002142:	b2db      	uxtb	r3, r3
 8002144:	2b02      	cmp	r3, #2
 8002146:	d008      	beq.n	800215a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	2280      	movs	r2, #128	; 0x80
 800214c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	2200      	movs	r2, #0
 8002152:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002156:	2301      	movs	r3, #1
 8002158:	e052      	b.n	8002200 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	681a      	ldr	r2, [r3, #0]
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f022 0216 	bic.w	r2, r2, #22
 8002168:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	695a      	ldr	r2, [r3, #20]
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002178:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800217e:	2b00      	cmp	r3, #0
 8002180:	d103      	bne.n	800218a <HAL_DMA_Abort+0x62>
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002186:	2b00      	cmp	r3, #0
 8002188:	d007      	beq.n	800219a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	681a      	ldr	r2, [r3, #0]
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f022 0208 	bic.w	r2, r2, #8
 8002198:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	681a      	ldr	r2, [r3, #0]
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f022 0201 	bic.w	r2, r2, #1
 80021a8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80021aa:	e013      	b.n	80021d4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80021ac:	f7ff fd74 	bl	8001c98 <HAL_GetTick>
 80021b0:	4602      	mov	r2, r0
 80021b2:	68bb      	ldr	r3, [r7, #8]
 80021b4:	1ad3      	subs	r3, r2, r3
 80021b6:	2b05      	cmp	r3, #5
 80021b8:	d90c      	bls.n	80021d4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	2220      	movs	r2, #32
 80021be:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	2203      	movs	r2, #3
 80021c4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	2200      	movs	r2, #0
 80021cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80021d0:	2303      	movs	r3, #3
 80021d2:	e015      	b.n	8002200 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f003 0301 	and.w	r3, r3, #1
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d1e4      	bne.n	80021ac <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021e6:	223f      	movs	r2, #63	; 0x3f
 80021e8:	409a      	lsls	r2, r3
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	2201      	movs	r2, #1
 80021f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	2200      	movs	r2, #0
 80021fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80021fe:	2300      	movs	r3, #0
}
 8002200:	4618      	mov	r0, r3
 8002202:	3710      	adds	r7, #16
 8002204:	46bd      	mov	sp, r7
 8002206:	bd80      	pop	{r7, pc}

08002208 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002208:	b480      	push	{r7}
 800220a:	b083      	sub	sp, #12
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002216:	b2db      	uxtb	r3, r3
 8002218:	2b02      	cmp	r3, #2
 800221a:	d004      	beq.n	8002226 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	2280      	movs	r2, #128	; 0x80
 8002220:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002222:	2301      	movs	r3, #1
 8002224:	e00c      	b.n	8002240 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	2205      	movs	r2, #5
 800222a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	681a      	ldr	r2, [r3, #0]
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f022 0201 	bic.w	r2, r2, #1
 800223c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800223e:	2300      	movs	r3, #0
}
 8002240:	4618      	mov	r0, r3
 8002242:	370c      	adds	r7, #12
 8002244:	46bd      	mov	sp, r7
 8002246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224a:	4770      	bx	lr

0800224c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	b086      	sub	sp, #24
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002254:	2300      	movs	r3, #0
 8002256:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002258:	4b8e      	ldr	r3, [pc, #568]	; (8002494 <HAL_DMA_IRQHandler+0x248>)
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	4a8e      	ldr	r2, [pc, #568]	; (8002498 <HAL_DMA_IRQHandler+0x24c>)
 800225e:	fba2 2303 	umull	r2, r3, r2, r3
 8002262:	0a9b      	lsrs	r3, r3, #10
 8002264:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800226a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800226c:	693b      	ldr	r3, [r7, #16]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002276:	2208      	movs	r2, #8
 8002278:	409a      	lsls	r2, r3
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	4013      	ands	r3, r2
 800227e:	2b00      	cmp	r3, #0
 8002280:	d01a      	beq.n	80022b8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f003 0304 	and.w	r3, r3, #4
 800228c:	2b00      	cmp	r3, #0
 800228e:	d013      	beq.n	80022b8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	681a      	ldr	r2, [r3, #0]
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f022 0204 	bic.w	r2, r2, #4
 800229e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022a4:	2208      	movs	r2, #8
 80022a6:	409a      	lsls	r2, r3
 80022a8:	693b      	ldr	r3, [r7, #16]
 80022aa:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022b0:	f043 0201 	orr.w	r2, r3, #1
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022bc:	2201      	movs	r2, #1
 80022be:	409a      	lsls	r2, r3
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	4013      	ands	r3, r2
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d012      	beq.n	80022ee <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	695b      	ldr	r3, [r3, #20]
 80022ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d00b      	beq.n	80022ee <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022da:	2201      	movs	r2, #1
 80022dc:	409a      	lsls	r2, r3
 80022de:	693b      	ldr	r3, [r7, #16]
 80022e0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022e6:	f043 0202 	orr.w	r2, r3, #2
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022f2:	2204      	movs	r2, #4
 80022f4:	409a      	lsls	r2, r3
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	4013      	ands	r3, r2
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d012      	beq.n	8002324 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f003 0302 	and.w	r3, r3, #2
 8002308:	2b00      	cmp	r3, #0
 800230a:	d00b      	beq.n	8002324 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002310:	2204      	movs	r2, #4
 8002312:	409a      	lsls	r2, r3
 8002314:	693b      	ldr	r3, [r7, #16]
 8002316:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800231c:	f043 0204 	orr.w	r2, r3, #4
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002328:	2210      	movs	r2, #16
 800232a:	409a      	lsls	r2, r3
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	4013      	ands	r3, r2
 8002330:	2b00      	cmp	r3, #0
 8002332:	d043      	beq.n	80023bc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f003 0308 	and.w	r3, r3, #8
 800233e:	2b00      	cmp	r3, #0
 8002340:	d03c      	beq.n	80023bc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002346:	2210      	movs	r2, #16
 8002348:	409a      	lsls	r2, r3
 800234a:	693b      	ldr	r3, [r7, #16]
 800234c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002358:	2b00      	cmp	r3, #0
 800235a:	d018      	beq.n	800238e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002366:	2b00      	cmp	r3, #0
 8002368:	d108      	bne.n	800237c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800236e:	2b00      	cmp	r3, #0
 8002370:	d024      	beq.n	80023bc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002376:	6878      	ldr	r0, [r7, #4]
 8002378:	4798      	blx	r3
 800237a:	e01f      	b.n	80023bc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002380:	2b00      	cmp	r3, #0
 8002382:	d01b      	beq.n	80023bc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002388:	6878      	ldr	r0, [r7, #4]
 800238a:	4798      	blx	r3
 800238c:	e016      	b.n	80023bc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002398:	2b00      	cmp	r3, #0
 800239a:	d107      	bne.n	80023ac <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	681a      	ldr	r2, [r3, #0]
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f022 0208 	bic.w	r2, r2, #8
 80023aa:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d003      	beq.n	80023bc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023b8:	6878      	ldr	r0, [r7, #4]
 80023ba:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023c0:	2220      	movs	r2, #32
 80023c2:	409a      	lsls	r2, r3
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	4013      	ands	r3, r2
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	f000 808f 	beq.w	80024ec <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f003 0310 	and.w	r3, r3, #16
 80023d8:	2b00      	cmp	r3, #0
 80023da:	f000 8087 	beq.w	80024ec <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023e2:	2220      	movs	r2, #32
 80023e4:	409a      	lsls	r2, r3
 80023e6:	693b      	ldr	r3, [r7, #16]
 80023e8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80023f0:	b2db      	uxtb	r3, r3
 80023f2:	2b05      	cmp	r3, #5
 80023f4:	d136      	bne.n	8002464 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	681a      	ldr	r2, [r3, #0]
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f022 0216 	bic.w	r2, r2, #22
 8002404:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	695a      	ldr	r2, [r3, #20]
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002414:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800241a:	2b00      	cmp	r3, #0
 800241c:	d103      	bne.n	8002426 <HAL_DMA_IRQHandler+0x1da>
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002422:	2b00      	cmp	r3, #0
 8002424:	d007      	beq.n	8002436 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	681a      	ldr	r2, [r3, #0]
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f022 0208 	bic.w	r2, r2, #8
 8002434:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800243a:	223f      	movs	r2, #63	; 0x3f
 800243c:	409a      	lsls	r2, r3
 800243e:	693b      	ldr	r3, [r7, #16]
 8002440:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	2201      	movs	r2, #1
 8002446:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	2200      	movs	r2, #0
 800244e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002456:	2b00      	cmp	r3, #0
 8002458:	d07e      	beq.n	8002558 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800245e:	6878      	ldr	r0, [r7, #4]
 8002460:	4798      	blx	r3
        }
        return;
 8002462:	e079      	b.n	8002558 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800246e:	2b00      	cmp	r3, #0
 8002470:	d01d      	beq.n	80024ae <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800247c:	2b00      	cmp	r3, #0
 800247e:	d10d      	bne.n	800249c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002484:	2b00      	cmp	r3, #0
 8002486:	d031      	beq.n	80024ec <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800248c:	6878      	ldr	r0, [r7, #4]
 800248e:	4798      	blx	r3
 8002490:	e02c      	b.n	80024ec <HAL_DMA_IRQHandler+0x2a0>
 8002492:	bf00      	nop
 8002494:	20000010 	.word	0x20000010
 8002498:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d023      	beq.n	80024ec <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024a8:	6878      	ldr	r0, [r7, #4]
 80024aa:	4798      	blx	r3
 80024ac:	e01e      	b.n	80024ec <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d10f      	bne.n	80024dc <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	681a      	ldr	r2, [r3, #0]
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f022 0210 	bic.w	r2, r2, #16
 80024ca:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	2201      	movs	r2, #1
 80024d0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	2200      	movs	r2, #0
 80024d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d003      	beq.n	80024ec <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024e8:	6878      	ldr	r0, [r7, #4]
 80024ea:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d032      	beq.n	800255a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024f8:	f003 0301 	and.w	r3, r3, #1
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d022      	beq.n	8002546 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	2205      	movs	r2, #5
 8002504:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	681a      	ldr	r2, [r3, #0]
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f022 0201 	bic.w	r2, r2, #1
 8002516:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002518:	68bb      	ldr	r3, [r7, #8]
 800251a:	3301      	adds	r3, #1
 800251c:	60bb      	str	r3, [r7, #8]
 800251e:	697a      	ldr	r2, [r7, #20]
 8002520:	429a      	cmp	r2, r3
 8002522:	d307      	bcc.n	8002534 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f003 0301 	and.w	r3, r3, #1
 800252e:	2b00      	cmp	r3, #0
 8002530:	d1f2      	bne.n	8002518 <HAL_DMA_IRQHandler+0x2cc>
 8002532:	e000      	b.n	8002536 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002534:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	2201      	movs	r2, #1
 800253a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	2200      	movs	r2, #0
 8002542:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800254a:	2b00      	cmp	r3, #0
 800254c:	d005      	beq.n	800255a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002552:	6878      	ldr	r0, [r7, #4]
 8002554:	4798      	blx	r3
 8002556:	e000      	b.n	800255a <HAL_DMA_IRQHandler+0x30e>
        return;
 8002558:	bf00      	nop
    }
  }
}
 800255a:	3718      	adds	r7, #24
 800255c:	46bd      	mov	sp, r7
 800255e:	bd80      	pop	{r7, pc}

08002560 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002560:	b480      	push	{r7}
 8002562:	b085      	sub	sp, #20
 8002564:	af00      	add	r7, sp, #0
 8002566:	60f8      	str	r0, [r7, #12]
 8002568:	60b9      	str	r1, [r7, #8]
 800256a:	607a      	str	r2, [r7, #4]
 800256c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	681a      	ldr	r2, [r3, #0]
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800257c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	683a      	ldr	r2, [r7, #0]
 8002584:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	689b      	ldr	r3, [r3, #8]
 800258a:	2b40      	cmp	r3, #64	; 0x40
 800258c:	d108      	bne.n	80025a0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	687a      	ldr	r2, [r7, #4]
 8002594:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	68ba      	ldr	r2, [r7, #8]
 800259c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800259e:	e007      	b.n	80025b0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	68ba      	ldr	r2, [r7, #8]
 80025a6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	687a      	ldr	r2, [r7, #4]
 80025ae:	60da      	str	r2, [r3, #12]
}
 80025b0:	bf00      	nop
 80025b2:	3714      	adds	r7, #20
 80025b4:	46bd      	mov	sp, r7
 80025b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ba:	4770      	bx	lr

080025bc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80025bc:	b480      	push	{r7}
 80025be:	b085      	sub	sp, #20
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	b2db      	uxtb	r3, r3
 80025ca:	3b10      	subs	r3, #16
 80025cc:	4a14      	ldr	r2, [pc, #80]	; (8002620 <DMA_CalcBaseAndBitshift+0x64>)
 80025ce:	fba2 2303 	umull	r2, r3, r2, r3
 80025d2:	091b      	lsrs	r3, r3, #4
 80025d4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80025d6:	4a13      	ldr	r2, [pc, #76]	; (8002624 <DMA_CalcBaseAndBitshift+0x68>)
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	4413      	add	r3, r2
 80025dc:	781b      	ldrb	r3, [r3, #0]
 80025de:	461a      	mov	r2, r3
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	2b03      	cmp	r3, #3
 80025e8:	d909      	bls.n	80025fe <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80025f2:	f023 0303 	bic.w	r3, r3, #3
 80025f6:	1d1a      	adds	r2, r3, #4
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	659a      	str	r2, [r3, #88]	; 0x58
 80025fc:	e007      	b.n	800260e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002606:	f023 0303 	bic.w	r3, r3, #3
 800260a:	687a      	ldr	r2, [r7, #4]
 800260c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002612:	4618      	mov	r0, r3
 8002614:	3714      	adds	r7, #20
 8002616:	46bd      	mov	sp, r7
 8002618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261c:	4770      	bx	lr
 800261e:	bf00      	nop
 8002620:	aaaaaaab 	.word	0xaaaaaaab
 8002624:	0800be8c 	.word	0x0800be8c

08002628 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002628:	b480      	push	{r7}
 800262a:	b085      	sub	sp, #20
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002630:	2300      	movs	r3, #0
 8002632:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002638:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	699b      	ldr	r3, [r3, #24]
 800263e:	2b00      	cmp	r3, #0
 8002640:	d11f      	bne.n	8002682 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002642:	68bb      	ldr	r3, [r7, #8]
 8002644:	2b03      	cmp	r3, #3
 8002646:	d856      	bhi.n	80026f6 <DMA_CheckFifoParam+0xce>
 8002648:	a201      	add	r2, pc, #4	; (adr r2, 8002650 <DMA_CheckFifoParam+0x28>)
 800264a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800264e:	bf00      	nop
 8002650:	08002661 	.word	0x08002661
 8002654:	08002673 	.word	0x08002673
 8002658:	08002661 	.word	0x08002661
 800265c:	080026f7 	.word	0x080026f7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002664:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002668:	2b00      	cmp	r3, #0
 800266a:	d046      	beq.n	80026fa <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800266c:	2301      	movs	r3, #1
 800266e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002670:	e043      	b.n	80026fa <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002676:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800267a:	d140      	bne.n	80026fe <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800267c:	2301      	movs	r3, #1
 800267e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002680:	e03d      	b.n	80026fe <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	699b      	ldr	r3, [r3, #24]
 8002686:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800268a:	d121      	bne.n	80026d0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800268c:	68bb      	ldr	r3, [r7, #8]
 800268e:	2b03      	cmp	r3, #3
 8002690:	d837      	bhi.n	8002702 <DMA_CheckFifoParam+0xda>
 8002692:	a201      	add	r2, pc, #4	; (adr r2, 8002698 <DMA_CheckFifoParam+0x70>)
 8002694:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002698:	080026a9 	.word	0x080026a9
 800269c:	080026af 	.word	0x080026af
 80026a0:	080026a9 	.word	0x080026a9
 80026a4:	080026c1 	.word	0x080026c1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80026a8:	2301      	movs	r3, #1
 80026aa:	73fb      	strb	r3, [r7, #15]
      break;
 80026ac:	e030      	b.n	8002710 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026b2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d025      	beq.n	8002706 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80026ba:	2301      	movs	r3, #1
 80026bc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80026be:	e022      	b.n	8002706 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026c4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80026c8:	d11f      	bne.n	800270a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80026ca:	2301      	movs	r3, #1
 80026cc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80026ce:	e01c      	b.n	800270a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80026d0:	68bb      	ldr	r3, [r7, #8]
 80026d2:	2b02      	cmp	r3, #2
 80026d4:	d903      	bls.n	80026de <DMA_CheckFifoParam+0xb6>
 80026d6:	68bb      	ldr	r3, [r7, #8]
 80026d8:	2b03      	cmp	r3, #3
 80026da:	d003      	beq.n	80026e4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80026dc:	e018      	b.n	8002710 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80026de:	2301      	movs	r3, #1
 80026e0:	73fb      	strb	r3, [r7, #15]
      break;
 80026e2:	e015      	b.n	8002710 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026e8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d00e      	beq.n	800270e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80026f0:	2301      	movs	r3, #1
 80026f2:	73fb      	strb	r3, [r7, #15]
      break;
 80026f4:	e00b      	b.n	800270e <DMA_CheckFifoParam+0xe6>
      break;
 80026f6:	bf00      	nop
 80026f8:	e00a      	b.n	8002710 <DMA_CheckFifoParam+0xe8>
      break;
 80026fa:	bf00      	nop
 80026fc:	e008      	b.n	8002710 <DMA_CheckFifoParam+0xe8>
      break;
 80026fe:	bf00      	nop
 8002700:	e006      	b.n	8002710 <DMA_CheckFifoParam+0xe8>
      break;
 8002702:	bf00      	nop
 8002704:	e004      	b.n	8002710 <DMA_CheckFifoParam+0xe8>
      break;
 8002706:	bf00      	nop
 8002708:	e002      	b.n	8002710 <DMA_CheckFifoParam+0xe8>
      break;   
 800270a:	bf00      	nop
 800270c:	e000      	b.n	8002710 <DMA_CheckFifoParam+0xe8>
      break;
 800270e:	bf00      	nop
    }
  } 
  
  return status; 
 8002710:	7bfb      	ldrb	r3, [r7, #15]
}
 8002712:	4618      	mov	r0, r3
 8002714:	3714      	adds	r7, #20
 8002716:	46bd      	mov	sp, r7
 8002718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271c:	4770      	bx	lr
 800271e:	bf00      	nop

08002720 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002720:	b480      	push	{r7}
 8002722:	b089      	sub	sp, #36	; 0x24
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
 8002728:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800272a:	2300      	movs	r3, #0
 800272c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800272e:	2300      	movs	r3, #0
 8002730:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002732:	2300      	movs	r3, #0
 8002734:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002736:	2300      	movs	r3, #0
 8002738:	61fb      	str	r3, [r7, #28]
 800273a:	e16b      	b.n	8002a14 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800273c:	2201      	movs	r2, #1
 800273e:	69fb      	ldr	r3, [r7, #28]
 8002740:	fa02 f303 	lsl.w	r3, r2, r3
 8002744:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002746:	683b      	ldr	r3, [r7, #0]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	697a      	ldr	r2, [r7, #20]
 800274c:	4013      	ands	r3, r2
 800274e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002750:	693a      	ldr	r2, [r7, #16]
 8002752:	697b      	ldr	r3, [r7, #20]
 8002754:	429a      	cmp	r2, r3
 8002756:	f040 815a 	bne.w	8002a0e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800275a:	683b      	ldr	r3, [r7, #0]
 800275c:	685b      	ldr	r3, [r3, #4]
 800275e:	f003 0303 	and.w	r3, r3, #3
 8002762:	2b01      	cmp	r3, #1
 8002764:	d005      	beq.n	8002772 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002766:	683b      	ldr	r3, [r7, #0]
 8002768:	685b      	ldr	r3, [r3, #4]
 800276a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800276e:	2b02      	cmp	r3, #2
 8002770:	d130      	bne.n	80027d4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	689b      	ldr	r3, [r3, #8]
 8002776:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002778:	69fb      	ldr	r3, [r7, #28]
 800277a:	005b      	lsls	r3, r3, #1
 800277c:	2203      	movs	r2, #3
 800277e:	fa02 f303 	lsl.w	r3, r2, r3
 8002782:	43db      	mvns	r3, r3
 8002784:	69ba      	ldr	r2, [r7, #24]
 8002786:	4013      	ands	r3, r2
 8002788:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800278a:	683b      	ldr	r3, [r7, #0]
 800278c:	68da      	ldr	r2, [r3, #12]
 800278e:	69fb      	ldr	r3, [r7, #28]
 8002790:	005b      	lsls	r3, r3, #1
 8002792:	fa02 f303 	lsl.w	r3, r2, r3
 8002796:	69ba      	ldr	r2, [r7, #24]
 8002798:	4313      	orrs	r3, r2
 800279a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	69ba      	ldr	r2, [r7, #24]
 80027a0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	685b      	ldr	r3, [r3, #4]
 80027a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80027a8:	2201      	movs	r2, #1
 80027aa:	69fb      	ldr	r3, [r7, #28]
 80027ac:	fa02 f303 	lsl.w	r3, r2, r3
 80027b0:	43db      	mvns	r3, r3
 80027b2:	69ba      	ldr	r2, [r7, #24]
 80027b4:	4013      	ands	r3, r2
 80027b6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80027b8:	683b      	ldr	r3, [r7, #0]
 80027ba:	685b      	ldr	r3, [r3, #4]
 80027bc:	091b      	lsrs	r3, r3, #4
 80027be:	f003 0201 	and.w	r2, r3, #1
 80027c2:	69fb      	ldr	r3, [r7, #28]
 80027c4:	fa02 f303 	lsl.w	r3, r2, r3
 80027c8:	69ba      	ldr	r2, [r7, #24]
 80027ca:	4313      	orrs	r3, r2
 80027cc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	69ba      	ldr	r2, [r7, #24]
 80027d2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80027d4:	683b      	ldr	r3, [r7, #0]
 80027d6:	685b      	ldr	r3, [r3, #4]
 80027d8:	f003 0303 	and.w	r3, r3, #3
 80027dc:	2b03      	cmp	r3, #3
 80027de:	d017      	beq.n	8002810 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	68db      	ldr	r3, [r3, #12]
 80027e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80027e6:	69fb      	ldr	r3, [r7, #28]
 80027e8:	005b      	lsls	r3, r3, #1
 80027ea:	2203      	movs	r2, #3
 80027ec:	fa02 f303 	lsl.w	r3, r2, r3
 80027f0:	43db      	mvns	r3, r3
 80027f2:	69ba      	ldr	r2, [r7, #24]
 80027f4:	4013      	ands	r3, r2
 80027f6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80027f8:	683b      	ldr	r3, [r7, #0]
 80027fa:	689a      	ldr	r2, [r3, #8]
 80027fc:	69fb      	ldr	r3, [r7, #28]
 80027fe:	005b      	lsls	r3, r3, #1
 8002800:	fa02 f303 	lsl.w	r3, r2, r3
 8002804:	69ba      	ldr	r2, [r7, #24]
 8002806:	4313      	orrs	r3, r2
 8002808:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	69ba      	ldr	r2, [r7, #24]
 800280e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	685b      	ldr	r3, [r3, #4]
 8002814:	f003 0303 	and.w	r3, r3, #3
 8002818:	2b02      	cmp	r3, #2
 800281a:	d123      	bne.n	8002864 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800281c:	69fb      	ldr	r3, [r7, #28]
 800281e:	08da      	lsrs	r2, r3, #3
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	3208      	adds	r2, #8
 8002824:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002828:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800282a:	69fb      	ldr	r3, [r7, #28]
 800282c:	f003 0307 	and.w	r3, r3, #7
 8002830:	009b      	lsls	r3, r3, #2
 8002832:	220f      	movs	r2, #15
 8002834:	fa02 f303 	lsl.w	r3, r2, r3
 8002838:	43db      	mvns	r3, r3
 800283a:	69ba      	ldr	r2, [r7, #24]
 800283c:	4013      	ands	r3, r2
 800283e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	691a      	ldr	r2, [r3, #16]
 8002844:	69fb      	ldr	r3, [r7, #28]
 8002846:	f003 0307 	and.w	r3, r3, #7
 800284a:	009b      	lsls	r3, r3, #2
 800284c:	fa02 f303 	lsl.w	r3, r2, r3
 8002850:	69ba      	ldr	r2, [r7, #24]
 8002852:	4313      	orrs	r3, r2
 8002854:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002856:	69fb      	ldr	r3, [r7, #28]
 8002858:	08da      	lsrs	r2, r3, #3
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	3208      	adds	r2, #8
 800285e:	69b9      	ldr	r1, [r7, #24]
 8002860:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800286a:	69fb      	ldr	r3, [r7, #28]
 800286c:	005b      	lsls	r3, r3, #1
 800286e:	2203      	movs	r2, #3
 8002870:	fa02 f303 	lsl.w	r3, r2, r3
 8002874:	43db      	mvns	r3, r3
 8002876:	69ba      	ldr	r2, [r7, #24]
 8002878:	4013      	ands	r3, r2
 800287a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800287c:	683b      	ldr	r3, [r7, #0]
 800287e:	685b      	ldr	r3, [r3, #4]
 8002880:	f003 0203 	and.w	r2, r3, #3
 8002884:	69fb      	ldr	r3, [r7, #28]
 8002886:	005b      	lsls	r3, r3, #1
 8002888:	fa02 f303 	lsl.w	r3, r2, r3
 800288c:	69ba      	ldr	r2, [r7, #24]
 800288e:	4313      	orrs	r3, r2
 8002890:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	69ba      	ldr	r2, [r7, #24]
 8002896:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002898:	683b      	ldr	r3, [r7, #0]
 800289a:	685b      	ldr	r3, [r3, #4]
 800289c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	f000 80b4 	beq.w	8002a0e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80028a6:	2300      	movs	r3, #0
 80028a8:	60fb      	str	r3, [r7, #12]
 80028aa:	4b60      	ldr	r3, [pc, #384]	; (8002a2c <HAL_GPIO_Init+0x30c>)
 80028ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028ae:	4a5f      	ldr	r2, [pc, #380]	; (8002a2c <HAL_GPIO_Init+0x30c>)
 80028b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80028b4:	6453      	str	r3, [r2, #68]	; 0x44
 80028b6:	4b5d      	ldr	r3, [pc, #372]	; (8002a2c <HAL_GPIO_Init+0x30c>)
 80028b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80028be:	60fb      	str	r3, [r7, #12]
 80028c0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80028c2:	4a5b      	ldr	r2, [pc, #364]	; (8002a30 <HAL_GPIO_Init+0x310>)
 80028c4:	69fb      	ldr	r3, [r7, #28]
 80028c6:	089b      	lsrs	r3, r3, #2
 80028c8:	3302      	adds	r3, #2
 80028ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80028d0:	69fb      	ldr	r3, [r7, #28]
 80028d2:	f003 0303 	and.w	r3, r3, #3
 80028d6:	009b      	lsls	r3, r3, #2
 80028d8:	220f      	movs	r2, #15
 80028da:	fa02 f303 	lsl.w	r3, r2, r3
 80028de:	43db      	mvns	r3, r3
 80028e0:	69ba      	ldr	r2, [r7, #24]
 80028e2:	4013      	ands	r3, r2
 80028e4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	4a52      	ldr	r2, [pc, #328]	; (8002a34 <HAL_GPIO_Init+0x314>)
 80028ea:	4293      	cmp	r3, r2
 80028ec:	d02b      	beq.n	8002946 <HAL_GPIO_Init+0x226>
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	4a51      	ldr	r2, [pc, #324]	; (8002a38 <HAL_GPIO_Init+0x318>)
 80028f2:	4293      	cmp	r3, r2
 80028f4:	d025      	beq.n	8002942 <HAL_GPIO_Init+0x222>
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	4a50      	ldr	r2, [pc, #320]	; (8002a3c <HAL_GPIO_Init+0x31c>)
 80028fa:	4293      	cmp	r3, r2
 80028fc:	d01f      	beq.n	800293e <HAL_GPIO_Init+0x21e>
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	4a4f      	ldr	r2, [pc, #316]	; (8002a40 <HAL_GPIO_Init+0x320>)
 8002902:	4293      	cmp	r3, r2
 8002904:	d019      	beq.n	800293a <HAL_GPIO_Init+0x21a>
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	4a4e      	ldr	r2, [pc, #312]	; (8002a44 <HAL_GPIO_Init+0x324>)
 800290a:	4293      	cmp	r3, r2
 800290c:	d013      	beq.n	8002936 <HAL_GPIO_Init+0x216>
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	4a4d      	ldr	r2, [pc, #308]	; (8002a48 <HAL_GPIO_Init+0x328>)
 8002912:	4293      	cmp	r3, r2
 8002914:	d00d      	beq.n	8002932 <HAL_GPIO_Init+0x212>
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	4a4c      	ldr	r2, [pc, #304]	; (8002a4c <HAL_GPIO_Init+0x32c>)
 800291a:	4293      	cmp	r3, r2
 800291c:	d007      	beq.n	800292e <HAL_GPIO_Init+0x20e>
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	4a4b      	ldr	r2, [pc, #300]	; (8002a50 <HAL_GPIO_Init+0x330>)
 8002922:	4293      	cmp	r3, r2
 8002924:	d101      	bne.n	800292a <HAL_GPIO_Init+0x20a>
 8002926:	2307      	movs	r3, #7
 8002928:	e00e      	b.n	8002948 <HAL_GPIO_Init+0x228>
 800292a:	2308      	movs	r3, #8
 800292c:	e00c      	b.n	8002948 <HAL_GPIO_Init+0x228>
 800292e:	2306      	movs	r3, #6
 8002930:	e00a      	b.n	8002948 <HAL_GPIO_Init+0x228>
 8002932:	2305      	movs	r3, #5
 8002934:	e008      	b.n	8002948 <HAL_GPIO_Init+0x228>
 8002936:	2304      	movs	r3, #4
 8002938:	e006      	b.n	8002948 <HAL_GPIO_Init+0x228>
 800293a:	2303      	movs	r3, #3
 800293c:	e004      	b.n	8002948 <HAL_GPIO_Init+0x228>
 800293e:	2302      	movs	r3, #2
 8002940:	e002      	b.n	8002948 <HAL_GPIO_Init+0x228>
 8002942:	2301      	movs	r3, #1
 8002944:	e000      	b.n	8002948 <HAL_GPIO_Init+0x228>
 8002946:	2300      	movs	r3, #0
 8002948:	69fa      	ldr	r2, [r7, #28]
 800294a:	f002 0203 	and.w	r2, r2, #3
 800294e:	0092      	lsls	r2, r2, #2
 8002950:	4093      	lsls	r3, r2
 8002952:	69ba      	ldr	r2, [r7, #24]
 8002954:	4313      	orrs	r3, r2
 8002956:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002958:	4935      	ldr	r1, [pc, #212]	; (8002a30 <HAL_GPIO_Init+0x310>)
 800295a:	69fb      	ldr	r3, [r7, #28]
 800295c:	089b      	lsrs	r3, r3, #2
 800295e:	3302      	adds	r3, #2
 8002960:	69ba      	ldr	r2, [r7, #24]
 8002962:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002966:	4b3b      	ldr	r3, [pc, #236]	; (8002a54 <HAL_GPIO_Init+0x334>)
 8002968:	689b      	ldr	r3, [r3, #8]
 800296a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800296c:	693b      	ldr	r3, [r7, #16]
 800296e:	43db      	mvns	r3, r3
 8002970:	69ba      	ldr	r2, [r7, #24]
 8002972:	4013      	ands	r3, r2
 8002974:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002976:	683b      	ldr	r3, [r7, #0]
 8002978:	685b      	ldr	r3, [r3, #4]
 800297a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800297e:	2b00      	cmp	r3, #0
 8002980:	d003      	beq.n	800298a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002982:	69ba      	ldr	r2, [r7, #24]
 8002984:	693b      	ldr	r3, [r7, #16]
 8002986:	4313      	orrs	r3, r2
 8002988:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800298a:	4a32      	ldr	r2, [pc, #200]	; (8002a54 <HAL_GPIO_Init+0x334>)
 800298c:	69bb      	ldr	r3, [r7, #24]
 800298e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002990:	4b30      	ldr	r3, [pc, #192]	; (8002a54 <HAL_GPIO_Init+0x334>)
 8002992:	68db      	ldr	r3, [r3, #12]
 8002994:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002996:	693b      	ldr	r3, [r7, #16]
 8002998:	43db      	mvns	r3, r3
 800299a:	69ba      	ldr	r2, [r7, #24]
 800299c:	4013      	ands	r3, r2
 800299e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80029a0:	683b      	ldr	r3, [r7, #0]
 80029a2:	685b      	ldr	r3, [r3, #4]
 80029a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d003      	beq.n	80029b4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80029ac:	69ba      	ldr	r2, [r7, #24]
 80029ae:	693b      	ldr	r3, [r7, #16]
 80029b0:	4313      	orrs	r3, r2
 80029b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80029b4:	4a27      	ldr	r2, [pc, #156]	; (8002a54 <HAL_GPIO_Init+0x334>)
 80029b6:	69bb      	ldr	r3, [r7, #24]
 80029b8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80029ba:	4b26      	ldr	r3, [pc, #152]	; (8002a54 <HAL_GPIO_Init+0x334>)
 80029bc:	685b      	ldr	r3, [r3, #4]
 80029be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029c0:	693b      	ldr	r3, [r7, #16]
 80029c2:	43db      	mvns	r3, r3
 80029c4:	69ba      	ldr	r2, [r7, #24]
 80029c6:	4013      	ands	r3, r2
 80029c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80029ca:	683b      	ldr	r3, [r7, #0]
 80029cc:	685b      	ldr	r3, [r3, #4]
 80029ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d003      	beq.n	80029de <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80029d6:	69ba      	ldr	r2, [r7, #24]
 80029d8:	693b      	ldr	r3, [r7, #16]
 80029da:	4313      	orrs	r3, r2
 80029dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80029de:	4a1d      	ldr	r2, [pc, #116]	; (8002a54 <HAL_GPIO_Init+0x334>)
 80029e0:	69bb      	ldr	r3, [r7, #24]
 80029e2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80029e4:	4b1b      	ldr	r3, [pc, #108]	; (8002a54 <HAL_GPIO_Init+0x334>)
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029ea:	693b      	ldr	r3, [r7, #16]
 80029ec:	43db      	mvns	r3, r3
 80029ee:	69ba      	ldr	r2, [r7, #24]
 80029f0:	4013      	ands	r3, r2
 80029f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80029f4:	683b      	ldr	r3, [r7, #0]
 80029f6:	685b      	ldr	r3, [r3, #4]
 80029f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d003      	beq.n	8002a08 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002a00:	69ba      	ldr	r2, [r7, #24]
 8002a02:	693b      	ldr	r3, [r7, #16]
 8002a04:	4313      	orrs	r3, r2
 8002a06:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002a08:	4a12      	ldr	r2, [pc, #72]	; (8002a54 <HAL_GPIO_Init+0x334>)
 8002a0a:	69bb      	ldr	r3, [r7, #24]
 8002a0c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002a0e:	69fb      	ldr	r3, [r7, #28]
 8002a10:	3301      	adds	r3, #1
 8002a12:	61fb      	str	r3, [r7, #28]
 8002a14:	69fb      	ldr	r3, [r7, #28]
 8002a16:	2b0f      	cmp	r3, #15
 8002a18:	f67f ae90 	bls.w	800273c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002a1c:	bf00      	nop
 8002a1e:	bf00      	nop
 8002a20:	3724      	adds	r7, #36	; 0x24
 8002a22:	46bd      	mov	sp, r7
 8002a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a28:	4770      	bx	lr
 8002a2a:	bf00      	nop
 8002a2c:	40023800 	.word	0x40023800
 8002a30:	40013800 	.word	0x40013800
 8002a34:	40020000 	.word	0x40020000
 8002a38:	40020400 	.word	0x40020400
 8002a3c:	40020800 	.word	0x40020800
 8002a40:	40020c00 	.word	0x40020c00
 8002a44:	40021000 	.word	0x40021000
 8002a48:	40021400 	.word	0x40021400
 8002a4c:	40021800 	.word	0x40021800
 8002a50:	40021c00 	.word	0x40021c00
 8002a54:	40013c00 	.word	0x40013c00

08002a58 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002a58:	b480      	push	{r7}
 8002a5a:	b083      	sub	sp, #12
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]
 8002a60:	460b      	mov	r3, r1
 8002a62:	807b      	strh	r3, [r7, #2]
 8002a64:	4613      	mov	r3, r2
 8002a66:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002a68:	787b      	ldrb	r3, [r7, #1]
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d003      	beq.n	8002a76 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002a6e:	887a      	ldrh	r2, [r7, #2]
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002a74:	e003      	b.n	8002a7e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002a76:	887b      	ldrh	r3, [r7, #2]
 8002a78:	041a      	lsls	r2, r3, #16
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	619a      	str	r2, [r3, #24]
}
 8002a7e:	bf00      	nop
 8002a80:	370c      	adds	r7, #12
 8002a82:	46bd      	mov	sp, r7
 8002a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a88:	4770      	bx	lr
	...

08002a8c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	b082      	sub	sp, #8
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	4603      	mov	r3, r0
 8002a94:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002a96:	4b08      	ldr	r3, [pc, #32]	; (8002ab8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002a98:	695a      	ldr	r2, [r3, #20]
 8002a9a:	88fb      	ldrh	r3, [r7, #6]
 8002a9c:	4013      	ands	r3, r2
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d006      	beq.n	8002ab0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002aa2:	4a05      	ldr	r2, [pc, #20]	; (8002ab8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002aa4:	88fb      	ldrh	r3, [r7, #6]
 8002aa6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002aa8:	88fb      	ldrh	r3, [r7, #6]
 8002aaa:	4618      	mov	r0, r3
 8002aac:	f7fe fd24 	bl	80014f8 <HAL_GPIO_EXTI_Callback>
  }
}
 8002ab0:	bf00      	nop
 8002ab2:	3708      	adds	r7, #8
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	bd80      	pop	{r7, pc}
 8002ab8:	40013c00 	.word	0x40013c00

08002abc <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002abc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002abe:	b08f      	sub	sp, #60	; 0x3c
 8002ac0:	af0a      	add	r7, sp, #40	; 0x28
 8002ac2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d101      	bne.n	8002ace <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002aca:	2301      	movs	r3, #1
 8002acc:	e10f      	b.n	8002cee <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8002ada:	b2db      	uxtb	r3, r3
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d106      	bne.n	8002aee <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002ae8:	6878      	ldr	r0, [r7, #4]
 8002aea:	f008 f9df 	bl	800aeac <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	2203      	movs	r2, #3
 8002af2:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002af6:	68bb      	ldr	r3, [r7, #8]
 8002af8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002afa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d102      	bne.n	8002b08 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	2200      	movs	r2, #0
 8002b06:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	f004 fc9c 	bl	800744a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	603b      	str	r3, [r7, #0]
 8002b18:	687e      	ldr	r6, [r7, #4]
 8002b1a:	466d      	mov	r5, sp
 8002b1c:	f106 0410 	add.w	r4, r6, #16
 8002b20:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002b22:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002b24:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002b26:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002b28:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002b2c:	e885 0003 	stmia.w	r5, {r0, r1}
 8002b30:	1d33      	adds	r3, r6, #4
 8002b32:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002b34:	6838      	ldr	r0, [r7, #0]
 8002b36:	f004 fb73 	bl	8007220 <USB_CoreInit>
 8002b3a:	4603      	mov	r3, r0
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d005      	beq.n	8002b4c <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	2202      	movs	r2, #2
 8002b44:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002b48:	2301      	movs	r3, #1
 8002b4a:	e0d0      	b.n	8002cee <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	2100      	movs	r1, #0
 8002b52:	4618      	mov	r0, r3
 8002b54:	f004 fc8a 	bl	800746c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b58:	2300      	movs	r3, #0
 8002b5a:	73fb      	strb	r3, [r7, #15]
 8002b5c:	e04a      	b.n	8002bf4 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002b5e:	7bfa      	ldrb	r2, [r7, #15]
 8002b60:	6879      	ldr	r1, [r7, #4]
 8002b62:	4613      	mov	r3, r2
 8002b64:	00db      	lsls	r3, r3, #3
 8002b66:	4413      	add	r3, r2
 8002b68:	009b      	lsls	r3, r3, #2
 8002b6a:	440b      	add	r3, r1
 8002b6c:	333d      	adds	r3, #61	; 0x3d
 8002b6e:	2201      	movs	r2, #1
 8002b70:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002b72:	7bfa      	ldrb	r2, [r7, #15]
 8002b74:	6879      	ldr	r1, [r7, #4]
 8002b76:	4613      	mov	r3, r2
 8002b78:	00db      	lsls	r3, r3, #3
 8002b7a:	4413      	add	r3, r2
 8002b7c:	009b      	lsls	r3, r3, #2
 8002b7e:	440b      	add	r3, r1
 8002b80:	333c      	adds	r3, #60	; 0x3c
 8002b82:	7bfa      	ldrb	r2, [r7, #15]
 8002b84:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002b86:	7bfa      	ldrb	r2, [r7, #15]
 8002b88:	7bfb      	ldrb	r3, [r7, #15]
 8002b8a:	b298      	uxth	r0, r3
 8002b8c:	6879      	ldr	r1, [r7, #4]
 8002b8e:	4613      	mov	r3, r2
 8002b90:	00db      	lsls	r3, r3, #3
 8002b92:	4413      	add	r3, r2
 8002b94:	009b      	lsls	r3, r3, #2
 8002b96:	440b      	add	r3, r1
 8002b98:	3344      	adds	r3, #68	; 0x44
 8002b9a:	4602      	mov	r2, r0
 8002b9c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002b9e:	7bfa      	ldrb	r2, [r7, #15]
 8002ba0:	6879      	ldr	r1, [r7, #4]
 8002ba2:	4613      	mov	r3, r2
 8002ba4:	00db      	lsls	r3, r3, #3
 8002ba6:	4413      	add	r3, r2
 8002ba8:	009b      	lsls	r3, r3, #2
 8002baa:	440b      	add	r3, r1
 8002bac:	3340      	adds	r3, #64	; 0x40
 8002bae:	2200      	movs	r2, #0
 8002bb0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002bb2:	7bfa      	ldrb	r2, [r7, #15]
 8002bb4:	6879      	ldr	r1, [r7, #4]
 8002bb6:	4613      	mov	r3, r2
 8002bb8:	00db      	lsls	r3, r3, #3
 8002bba:	4413      	add	r3, r2
 8002bbc:	009b      	lsls	r3, r3, #2
 8002bbe:	440b      	add	r3, r1
 8002bc0:	3348      	adds	r3, #72	; 0x48
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002bc6:	7bfa      	ldrb	r2, [r7, #15]
 8002bc8:	6879      	ldr	r1, [r7, #4]
 8002bca:	4613      	mov	r3, r2
 8002bcc:	00db      	lsls	r3, r3, #3
 8002bce:	4413      	add	r3, r2
 8002bd0:	009b      	lsls	r3, r3, #2
 8002bd2:	440b      	add	r3, r1
 8002bd4:	334c      	adds	r3, #76	; 0x4c
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002bda:	7bfa      	ldrb	r2, [r7, #15]
 8002bdc:	6879      	ldr	r1, [r7, #4]
 8002bde:	4613      	mov	r3, r2
 8002be0:	00db      	lsls	r3, r3, #3
 8002be2:	4413      	add	r3, r2
 8002be4:	009b      	lsls	r3, r3, #2
 8002be6:	440b      	add	r3, r1
 8002be8:	3354      	adds	r3, #84	; 0x54
 8002bea:	2200      	movs	r2, #0
 8002bec:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002bee:	7bfb      	ldrb	r3, [r7, #15]
 8002bf0:	3301      	adds	r3, #1
 8002bf2:	73fb      	strb	r3, [r7, #15]
 8002bf4:	7bfa      	ldrb	r2, [r7, #15]
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	685b      	ldr	r3, [r3, #4]
 8002bfa:	429a      	cmp	r2, r3
 8002bfc:	d3af      	bcc.n	8002b5e <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002bfe:	2300      	movs	r3, #0
 8002c00:	73fb      	strb	r3, [r7, #15]
 8002c02:	e044      	b.n	8002c8e <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002c04:	7bfa      	ldrb	r2, [r7, #15]
 8002c06:	6879      	ldr	r1, [r7, #4]
 8002c08:	4613      	mov	r3, r2
 8002c0a:	00db      	lsls	r3, r3, #3
 8002c0c:	4413      	add	r3, r2
 8002c0e:	009b      	lsls	r3, r3, #2
 8002c10:	440b      	add	r3, r1
 8002c12:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8002c16:	2200      	movs	r2, #0
 8002c18:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002c1a:	7bfa      	ldrb	r2, [r7, #15]
 8002c1c:	6879      	ldr	r1, [r7, #4]
 8002c1e:	4613      	mov	r3, r2
 8002c20:	00db      	lsls	r3, r3, #3
 8002c22:	4413      	add	r3, r2
 8002c24:	009b      	lsls	r3, r3, #2
 8002c26:	440b      	add	r3, r1
 8002c28:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8002c2c:	7bfa      	ldrb	r2, [r7, #15]
 8002c2e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002c30:	7bfa      	ldrb	r2, [r7, #15]
 8002c32:	6879      	ldr	r1, [r7, #4]
 8002c34:	4613      	mov	r3, r2
 8002c36:	00db      	lsls	r3, r3, #3
 8002c38:	4413      	add	r3, r2
 8002c3a:	009b      	lsls	r3, r3, #2
 8002c3c:	440b      	add	r3, r1
 8002c3e:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002c42:	2200      	movs	r2, #0
 8002c44:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002c46:	7bfa      	ldrb	r2, [r7, #15]
 8002c48:	6879      	ldr	r1, [r7, #4]
 8002c4a:	4613      	mov	r3, r2
 8002c4c:	00db      	lsls	r3, r3, #3
 8002c4e:	4413      	add	r3, r2
 8002c50:	009b      	lsls	r3, r3, #2
 8002c52:	440b      	add	r3, r1
 8002c54:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8002c58:	2200      	movs	r2, #0
 8002c5a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002c5c:	7bfa      	ldrb	r2, [r7, #15]
 8002c5e:	6879      	ldr	r1, [r7, #4]
 8002c60:	4613      	mov	r3, r2
 8002c62:	00db      	lsls	r3, r3, #3
 8002c64:	4413      	add	r3, r2
 8002c66:	009b      	lsls	r3, r3, #2
 8002c68:	440b      	add	r3, r1
 8002c6a:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8002c6e:	2200      	movs	r2, #0
 8002c70:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002c72:	7bfa      	ldrb	r2, [r7, #15]
 8002c74:	6879      	ldr	r1, [r7, #4]
 8002c76:	4613      	mov	r3, r2
 8002c78:	00db      	lsls	r3, r3, #3
 8002c7a:	4413      	add	r3, r2
 8002c7c:	009b      	lsls	r3, r3, #2
 8002c7e:	440b      	add	r3, r1
 8002c80:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002c84:	2200      	movs	r2, #0
 8002c86:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c88:	7bfb      	ldrb	r3, [r7, #15]
 8002c8a:	3301      	adds	r3, #1
 8002c8c:	73fb      	strb	r3, [r7, #15]
 8002c8e:	7bfa      	ldrb	r2, [r7, #15]
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	685b      	ldr	r3, [r3, #4]
 8002c94:	429a      	cmp	r2, r3
 8002c96:	d3b5      	bcc.n	8002c04 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	603b      	str	r3, [r7, #0]
 8002c9e:	687e      	ldr	r6, [r7, #4]
 8002ca0:	466d      	mov	r5, sp
 8002ca2:	f106 0410 	add.w	r4, r6, #16
 8002ca6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002ca8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002caa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002cac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002cae:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002cb2:	e885 0003 	stmia.w	r5, {r0, r1}
 8002cb6:	1d33      	adds	r3, r6, #4
 8002cb8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002cba:	6838      	ldr	r0, [r7, #0]
 8002cbc:	f004 fc22 	bl	8007504 <USB_DevInit>
 8002cc0:	4603      	mov	r3, r0
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d005      	beq.n	8002cd2 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	2202      	movs	r2, #2
 8002cca:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002cce:	2301      	movs	r3, #1
 8002cd0:	e00d      	b.n	8002cee <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	2201      	movs	r2, #1
 8002cde:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	4618      	mov	r0, r3
 8002ce8:	f005 fd71 	bl	80087ce <USB_DevDisconnect>

  return HAL_OK;
 8002cec:	2300      	movs	r3, #0
}
 8002cee:	4618      	mov	r0, r3
 8002cf0:	3714      	adds	r7, #20
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002cf6 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002cf6:	b580      	push	{r7, lr}
 8002cf8:	b084      	sub	sp, #16
 8002cfa:	af00      	add	r7, sp, #0
 8002cfc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002d0a:	2b01      	cmp	r3, #1
 8002d0c:	d101      	bne.n	8002d12 <HAL_PCD_Start+0x1c>
 8002d0e:	2302      	movs	r3, #2
 8002d10:	e020      	b.n	8002d54 <HAL_PCD_Start+0x5e>
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	2201      	movs	r2, #1
 8002d16:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d1e:	2b01      	cmp	r3, #1
 8002d20:	d109      	bne.n	8002d36 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002d26:	2b01      	cmp	r3, #1
 8002d28:	d005      	beq.n	8002d36 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d2e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	f004 fb74 	bl	8007428 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	4618      	mov	r0, r3
 8002d46:	f005 fd21 	bl	800878c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002d52:	2300      	movs	r3, #0
}
 8002d54:	4618      	mov	r0, r3
 8002d56:	3710      	adds	r7, #16
 8002d58:	46bd      	mov	sp, r7
 8002d5a:	bd80      	pop	{r7, pc}

08002d5c <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002d5c:	b590      	push	{r4, r7, lr}
 8002d5e:	b08d      	sub	sp, #52	; 0x34
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002d6a:	6a3b      	ldr	r3, [r7, #32]
 8002d6c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	4618      	mov	r0, r3
 8002d74:	f005 fddf 	bl	8008936 <USB_GetMode>
 8002d78:	4603      	mov	r3, r0
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	f040 848a 	bne.w	8003694 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	4618      	mov	r0, r3
 8002d86:	f005 fd43 	bl	8008810 <USB_ReadInterrupts>
 8002d8a:	4603      	mov	r3, r0
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	f000 8480 	beq.w	8003692 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8002d92:	69fb      	ldr	r3, [r7, #28]
 8002d94:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d98:	689b      	ldr	r3, [r3, #8]
 8002d9a:	0a1b      	lsrs	r3, r3, #8
 8002d9c:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	4618      	mov	r0, r3
 8002dac:	f005 fd30 	bl	8008810 <USB_ReadInterrupts>
 8002db0:	4603      	mov	r3, r0
 8002db2:	f003 0302 	and.w	r3, r3, #2
 8002db6:	2b02      	cmp	r3, #2
 8002db8:	d107      	bne.n	8002dca <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	695a      	ldr	r2, [r3, #20]
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f002 0202 	and.w	r2, r2, #2
 8002dc8:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	4618      	mov	r0, r3
 8002dd0:	f005 fd1e 	bl	8008810 <USB_ReadInterrupts>
 8002dd4:	4603      	mov	r3, r0
 8002dd6:	f003 0310 	and.w	r3, r3, #16
 8002dda:	2b10      	cmp	r3, #16
 8002ddc:	d161      	bne.n	8002ea2 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	699a      	ldr	r2, [r3, #24]
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f022 0210 	bic.w	r2, r2, #16
 8002dec:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8002dee:	6a3b      	ldr	r3, [r7, #32]
 8002df0:	6a1b      	ldr	r3, [r3, #32]
 8002df2:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8002df4:	69bb      	ldr	r3, [r7, #24]
 8002df6:	f003 020f 	and.w	r2, r3, #15
 8002dfa:	4613      	mov	r3, r2
 8002dfc:	00db      	lsls	r3, r3, #3
 8002dfe:	4413      	add	r3, r2
 8002e00:	009b      	lsls	r3, r3, #2
 8002e02:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002e06:	687a      	ldr	r2, [r7, #4]
 8002e08:	4413      	add	r3, r2
 8002e0a:	3304      	adds	r3, #4
 8002e0c:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002e0e:	69bb      	ldr	r3, [r7, #24]
 8002e10:	0c5b      	lsrs	r3, r3, #17
 8002e12:	f003 030f 	and.w	r3, r3, #15
 8002e16:	2b02      	cmp	r3, #2
 8002e18:	d124      	bne.n	8002e64 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002e1a:	69ba      	ldr	r2, [r7, #24]
 8002e1c:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8002e20:	4013      	ands	r3, r2
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d035      	beq.n	8002e92 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002e26:	697b      	ldr	r3, [r7, #20]
 8002e28:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002e2a:	69bb      	ldr	r3, [r7, #24]
 8002e2c:	091b      	lsrs	r3, r3, #4
 8002e2e:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002e30:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002e34:	b29b      	uxth	r3, r3
 8002e36:	461a      	mov	r2, r3
 8002e38:	6a38      	ldr	r0, [r7, #32]
 8002e3a:	f005 fb55 	bl	80084e8 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002e3e:	697b      	ldr	r3, [r7, #20]
 8002e40:	691a      	ldr	r2, [r3, #16]
 8002e42:	69bb      	ldr	r3, [r7, #24]
 8002e44:	091b      	lsrs	r3, r3, #4
 8002e46:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002e4a:	441a      	add	r2, r3
 8002e4c:	697b      	ldr	r3, [r7, #20]
 8002e4e:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002e50:	697b      	ldr	r3, [r7, #20]
 8002e52:	6a1a      	ldr	r2, [r3, #32]
 8002e54:	69bb      	ldr	r3, [r7, #24]
 8002e56:	091b      	lsrs	r3, r3, #4
 8002e58:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002e5c:	441a      	add	r2, r3
 8002e5e:	697b      	ldr	r3, [r7, #20]
 8002e60:	621a      	str	r2, [r3, #32]
 8002e62:	e016      	b.n	8002e92 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8002e64:	69bb      	ldr	r3, [r7, #24]
 8002e66:	0c5b      	lsrs	r3, r3, #17
 8002e68:	f003 030f 	and.w	r3, r3, #15
 8002e6c:	2b06      	cmp	r3, #6
 8002e6e:	d110      	bne.n	8002e92 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002e76:	2208      	movs	r2, #8
 8002e78:	4619      	mov	r1, r3
 8002e7a:	6a38      	ldr	r0, [r7, #32]
 8002e7c:	f005 fb34 	bl	80084e8 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002e80:	697b      	ldr	r3, [r7, #20]
 8002e82:	6a1a      	ldr	r2, [r3, #32]
 8002e84:	69bb      	ldr	r3, [r7, #24]
 8002e86:	091b      	lsrs	r3, r3, #4
 8002e88:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002e8c:	441a      	add	r2, r3
 8002e8e:	697b      	ldr	r3, [r7, #20]
 8002e90:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	699a      	ldr	r2, [r3, #24]
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f042 0210 	orr.w	r2, r2, #16
 8002ea0:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	f005 fcb2 	bl	8008810 <USB_ReadInterrupts>
 8002eac:	4603      	mov	r3, r0
 8002eae:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002eb2:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002eb6:	f040 80a7 	bne.w	8003008 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8002eba:	2300      	movs	r3, #0
 8002ebc:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	f005 fcb7 	bl	8008836 <USB_ReadDevAllOutEpInterrupt>
 8002ec8:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8002eca:	e099      	b.n	8003000 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002ecc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ece:	f003 0301 	and.w	r3, r3, #1
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	f000 808e 	beq.w	8002ff4 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ede:	b2d2      	uxtb	r2, r2
 8002ee0:	4611      	mov	r1, r2
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	f005 fcdb 	bl	800889e <USB_ReadDevOutEPInterrupt>
 8002ee8:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002eea:	693b      	ldr	r3, [r7, #16]
 8002eec:	f003 0301 	and.w	r3, r3, #1
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d00c      	beq.n	8002f0e <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002ef4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ef6:	015a      	lsls	r2, r3, #5
 8002ef8:	69fb      	ldr	r3, [r7, #28]
 8002efa:	4413      	add	r3, r2
 8002efc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f00:	461a      	mov	r2, r3
 8002f02:	2301      	movs	r3, #1
 8002f04:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002f06:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002f08:	6878      	ldr	r0, [r7, #4]
 8002f0a:	f000 fec3 	bl	8003c94 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002f0e:	693b      	ldr	r3, [r7, #16]
 8002f10:	f003 0308 	and.w	r3, r3, #8
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d00c      	beq.n	8002f32 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002f18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f1a:	015a      	lsls	r2, r3, #5
 8002f1c:	69fb      	ldr	r3, [r7, #28]
 8002f1e:	4413      	add	r3, r2
 8002f20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f24:	461a      	mov	r2, r3
 8002f26:	2308      	movs	r3, #8
 8002f28:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002f2a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002f2c:	6878      	ldr	r0, [r7, #4]
 8002f2e:	f000 ff99 	bl	8003e64 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002f32:	693b      	ldr	r3, [r7, #16]
 8002f34:	f003 0310 	and.w	r3, r3, #16
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d008      	beq.n	8002f4e <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002f3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f3e:	015a      	lsls	r2, r3, #5
 8002f40:	69fb      	ldr	r3, [r7, #28]
 8002f42:	4413      	add	r3, r2
 8002f44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f48:	461a      	mov	r2, r3
 8002f4a:	2310      	movs	r3, #16
 8002f4c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8002f4e:	693b      	ldr	r3, [r7, #16]
 8002f50:	f003 0302 	and.w	r3, r3, #2
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d030      	beq.n	8002fba <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8002f58:	6a3b      	ldr	r3, [r7, #32]
 8002f5a:	695b      	ldr	r3, [r3, #20]
 8002f5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f60:	2b80      	cmp	r3, #128	; 0x80
 8002f62:	d109      	bne.n	8002f78 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8002f64:	69fb      	ldr	r3, [r7, #28]
 8002f66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002f6a:	685b      	ldr	r3, [r3, #4]
 8002f6c:	69fa      	ldr	r2, [r7, #28]
 8002f6e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002f72:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002f76:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8002f78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f7a:	4613      	mov	r3, r2
 8002f7c:	00db      	lsls	r3, r3, #3
 8002f7e:	4413      	add	r3, r2
 8002f80:	009b      	lsls	r3, r3, #2
 8002f82:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002f86:	687a      	ldr	r2, [r7, #4]
 8002f88:	4413      	add	r3, r2
 8002f8a:	3304      	adds	r3, #4
 8002f8c:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002f8e:	697b      	ldr	r3, [r7, #20]
 8002f90:	78db      	ldrb	r3, [r3, #3]
 8002f92:	2b01      	cmp	r3, #1
 8002f94:	d108      	bne.n	8002fa8 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8002f96:	697b      	ldr	r3, [r7, #20]
 8002f98:	2200      	movs	r2, #0
 8002f9a:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002f9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f9e:	b2db      	uxtb	r3, r3
 8002fa0:	4619      	mov	r1, r3
 8002fa2:	6878      	ldr	r0, [r7, #4]
 8002fa4:	f008 f884 	bl	800b0b0 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8002fa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002faa:	015a      	lsls	r2, r3, #5
 8002fac:	69fb      	ldr	r3, [r7, #28]
 8002fae:	4413      	add	r3, r2
 8002fb0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002fb4:	461a      	mov	r2, r3
 8002fb6:	2302      	movs	r3, #2
 8002fb8:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002fba:	693b      	ldr	r3, [r7, #16]
 8002fbc:	f003 0320 	and.w	r3, r3, #32
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d008      	beq.n	8002fd6 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002fc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fc6:	015a      	lsls	r2, r3, #5
 8002fc8:	69fb      	ldr	r3, [r7, #28]
 8002fca:	4413      	add	r3, r2
 8002fcc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002fd0:	461a      	mov	r2, r3
 8002fd2:	2320      	movs	r3, #32
 8002fd4:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002fd6:	693b      	ldr	r3, [r7, #16]
 8002fd8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d009      	beq.n	8002ff4 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002fe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fe2:	015a      	lsls	r2, r3, #5
 8002fe4:	69fb      	ldr	r3, [r7, #28]
 8002fe6:	4413      	add	r3, r2
 8002fe8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002fec:	461a      	mov	r2, r3
 8002fee:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002ff2:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002ff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ff6:	3301      	adds	r3, #1
 8002ff8:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002ffa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ffc:	085b      	lsrs	r3, r3, #1
 8002ffe:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003000:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003002:	2b00      	cmp	r3, #0
 8003004:	f47f af62 	bne.w	8002ecc <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	4618      	mov	r0, r3
 800300e:	f005 fbff 	bl	8008810 <USB_ReadInterrupts>
 8003012:	4603      	mov	r3, r0
 8003014:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003018:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800301c:	f040 80db 	bne.w	80031d6 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	4618      	mov	r0, r3
 8003026:	f005 fc20 	bl	800886a <USB_ReadDevAllInEpInterrupt>
 800302a:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800302c:	2300      	movs	r3, #0
 800302e:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8003030:	e0cd      	b.n	80031ce <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8003032:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003034:	f003 0301 	and.w	r3, r3, #1
 8003038:	2b00      	cmp	r3, #0
 800303a:	f000 80c2 	beq.w	80031c2 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003044:	b2d2      	uxtb	r2, r2
 8003046:	4611      	mov	r1, r2
 8003048:	4618      	mov	r0, r3
 800304a:	f005 fc46 	bl	80088da <USB_ReadDevInEPInterrupt>
 800304e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8003050:	693b      	ldr	r3, [r7, #16]
 8003052:	f003 0301 	and.w	r3, r3, #1
 8003056:	2b00      	cmp	r3, #0
 8003058:	d057      	beq.n	800310a <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800305a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800305c:	f003 030f 	and.w	r3, r3, #15
 8003060:	2201      	movs	r2, #1
 8003062:	fa02 f303 	lsl.w	r3, r2, r3
 8003066:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003068:	69fb      	ldr	r3, [r7, #28]
 800306a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800306e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	43db      	mvns	r3, r3
 8003074:	69f9      	ldr	r1, [r7, #28]
 8003076:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800307a:	4013      	ands	r3, r2
 800307c:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800307e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003080:	015a      	lsls	r2, r3, #5
 8003082:	69fb      	ldr	r3, [r7, #28]
 8003084:	4413      	add	r3, r2
 8003086:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800308a:	461a      	mov	r2, r3
 800308c:	2301      	movs	r3, #1
 800308e:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	691b      	ldr	r3, [r3, #16]
 8003094:	2b01      	cmp	r3, #1
 8003096:	d132      	bne.n	80030fe <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8003098:	6879      	ldr	r1, [r7, #4]
 800309a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800309c:	4613      	mov	r3, r2
 800309e:	00db      	lsls	r3, r3, #3
 80030a0:	4413      	add	r3, r2
 80030a2:	009b      	lsls	r3, r3, #2
 80030a4:	440b      	add	r3, r1
 80030a6:	334c      	adds	r3, #76	; 0x4c
 80030a8:	6819      	ldr	r1, [r3, #0]
 80030aa:	6878      	ldr	r0, [r7, #4]
 80030ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030ae:	4613      	mov	r3, r2
 80030b0:	00db      	lsls	r3, r3, #3
 80030b2:	4413      	add	r3, r2
 80030b4:	009b      	lsls	r3, r3, #2
 80030b6:	4403      	add	r3, r0
 80030b8:	3348      	adds	r3, #72	; 0x48
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	4419      	add	r1, r3
 80030be:	6878      	ldr	r0, [r7, #4]
 80030c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030c2:	4613      	mov	r3, r2
 80030c4:	00db      	lsls	r3, r3, #3
 80030c6:	4413      	add	r3, r2
 80030c8:	009b      	lsls	r3, r3, #2
 80030ca:	4403      	add	r3, r0
 80030cc:	334c      	adds	r3, #76	; 0x4c
 80030ce:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80030d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d113      	bne.n	80030fe <HAL_PCD_IRQHandler+0x3a2>
 80030d6:	6879      	ldr	r1, [r7, #4]
 80030d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030da:	4613      	mov	r3, r2
 80030dc:	00db      	lsls	r3, r3, #3
 80030de:	4413      	add	r3, r2
 80030e0:	009b      	lsls	r3, r3, #2
 80030e2:	440b      	add	r3, r1
 80030e4:	3354      	adds	r3, #84	; 0x54
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d108      	bne.n	80030fe <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	6818      	ldr	r0, [r3, #0]
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80030f6:	461a      	mov	r2, r3
 80030f8:	2101      	movs	r1, #1
 80030fa:	f005 fc4d 	bl	8008998 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80030fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003100:	b2db      	uxtb	r3, r3
 8003102:	4619      	mov	r1, r3
 8003104:	6878      	ldr	r0, [r7, #4]
 8003106:	f007 ff4e 	bl	800afa6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800310a:	693b      	ldr	r3, [r7, #16]
 800310c:	f003 0308 	and.w	r3, r3, #8
 8003110:	2b00      	cmp	r3, #0
 8003112:	d008      	beq.n	8003126 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003116:	015a      	lsls	r2, r3, #5
 8003118:	69fb      	ldr	r3, [r7, #28]
 800311a:	4413      	add	r3, r2
 800311c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003120:	461a      	mov	r2, r3
 8003122:	2308      	movs	r3, #8
 8003124:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003126:	693b      	ldr	r3, [r7, #16]
 8003128:	f003 0310 	and.w	r3, r3, #16
 800312c:	2b00      	cmp	r3, #0
 800312e:	d008      	beq.n	8003142 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8003130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003132:	015a      	lsls	r2, r3, #5
 8003134:	69fb      	ldr	r3, [r7, #28]
 8003136:	4413      	add	r3, r2
 8003138:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800313c:	461a      	mov	r2, r3
 800313e:	2310      	movs	r3, #16
 8003140:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8003142:	693b      	ldr	r3, [r7, #16]
 8003144:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003148:	2b00      	cmp	r3, #0
 800314a:	d008      	beq.n	800315e <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800314c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800314e:	015a      	lsls	r2, r3, #5
 8003150:	69fb      	ldr	r3, [r7, #28]
 8003152:	4413      	add	r3, r2
 8003154:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003158:	461a      	mov	r2, r3
 800315a:	2340      	movs	r3, #64	; 0x40
 800315c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800315e:	693b      	ldr	r3, [r7, #16]
 8003160:	f003 0302 	and.w	r3, r3, #2
 8003164:	2b00      	cmp	r3, #0
 8003166:	d023      	beq.n	80031b0 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8003168:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800316a:	6a38      	ldr	r0, [r7, #32]
 800316c:	f004 fb2e 	bl	80077cc <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8003170:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003172:	4613      	mov	r3, r2
 8003174:	00db      	lsls	r3, r3, #3
 8003176:	4413      	add	r3, r2
 8003178:	009b      	lsls	r3, r3, #2
 800317a:	3338      	adds	r3, #56	; 0x38
 800317c:	687a      	ldr	r2, [r7, #4]
 800317e:	4413      	add	r3, r2
 8003180:	3304      	adds	r3, #4
 8003182:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003184:	697b      	ldr	r3, [r7, #20]
 8003186:	78db      	ldrb	r3, [r3, #3]
 8003188:	2b01      	cmp	r3, #1
 800318a:	d108      	bne.n	800319e <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 800318c:	697b      	ldr	r3, [r7, #20]
 800318e:	2200      	movs	r2, #0
 8003190:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003192:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003194:	b2db      	uxtb	r3, r3
 8003196:	4619      	mov	r1, r3
 8003198:	6878      	ldr	r0, [r7, #4]
 800319a:	f007 ff9b 	bl	800b0d4 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800319e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031a0:	015a      	lsls	r2, r3, #5
 80031a2:	69fb      	ldr	r3, [r7, #28]
 80031a4:	4413      	add	r3, r2
 80031a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80031aa:	461a      	mov	r2, r3
 80031ac:	2302      	movs	r3, #2
 80031ae:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80031b0:	693b      	ldr	r3, [r7, #16]
 80031b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d003      	beq.n	80031c2 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80031ba:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80031bc:	6878      	ldr	r0, [r7, #4]
 80031be:	f000 fcdb 	bl	8003b78 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80031c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031c4:	3301      	adds	r3, #1
 80031c6:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80031c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031ca:	085b      	lsrs	r3, r3, #1
 80031cc:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80031ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	f47f af2e 	bne.w	8003032 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	4618      	mov	r0, r3
 80031dc:	f005 fb18 	bl	8008810 <USB_ReadInterrupts>
 80031e0:	4603      	mov	r3, r0
 80031e2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80031e6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80031ea:	d122      	bne.n	8003232 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80031ec:	69fb      	ldr	r3, [r7, #28]
 80031ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80031f2:	685b      	ldr	r3, [r3, #4]
 80031f4:	69fa      	ldr	r2, [r7, #28]
 80031f6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80031fa:	f023 0301 	bic.w	r3, r3, #1
 80031fe:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8003206:	2b01      	cmp	r3, #1
 8003208:	d108      	bne.n	800321c <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	2200      	movs	r2, #0
 800320e:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003212:	2100      	movs	r1, #0
 8003214:	6878      	ldr	r0, [r7, #4]
 8003216:	f000 fec3 	bl	8003fa0 <HAL_PCDEx_LPM_Callback>
 800321a:	e002      	b.n	8003222 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800321c:	6878      	ldr	r0, [r7, #4]
 800321e:	f007 ff39 	bl	800b094 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	695a      	ldr	r2, [r3, #20]
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8003230:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	4618      	mov	r0, r3
 8003238:	f005 faea 	bl	8008810 <USB_ReadInterrupts>
 800323c:	4603      	mov	r3, r0
 800323e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003242:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003246:	d112      	bne.n	800326e <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003248:	69fb      	ldr	r3, [r7, #28]
 800324a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800324e:	689b      	ldr	r3, [r3, #8]
 8003250:	f003 0301 	and.w	r3, r3, #1
 8003254:	2b01      	cmp	r3, #1
 8003256:	d102      	bne.n	800325e <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003258:	6878      	ldr	r0, [r7, #4]
 800325a:	f007 fef5 	bl	800b048 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	695a      	ldr	r2, [r3, #20]
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800326c:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	4618      	mov	r0, r3
 8003274:	f005 facc 	bl	8008810 <USB_ReadInterrupts>
 8003278:	4603      	mov	r3, r0
 800327a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800327e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003282:	f040 80b7 	bne.w	80033f4 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003286:	69fb      	ldr	r3, [r7, #28]
 8003288:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800328c:	685b      	ldr	r3, [r3, #4]
 800328e:	69fa      	ldr	r2, [r7, #28]
 8003290:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003294:	f023 0301 	bic.w	r3, r3, #1
 8003298:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	2110      	movs	r1, #16
 80032a0:	4618      	mov	r0, r3
 80032a2:	f004 fa93 	bl	80077cc <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80032a6:	2300      	movs	r3, #0
 80032a8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80032aa:	e046      	b.n	800333a <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80032ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032ae:	015a      	lsls	r2, r3, #5
 80032b0:	69fb      	ldr	r3, [r7, #28]
 80032b2:	4413      	add	r3, r2
 80032b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80032b8:	461a      	mov	r2, r3
 80032ba:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80032be:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80032c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032c2:	015a      	lsls	r2, r3, #5
 80032c4:	69fb      	ldr	r3, [r7, #28]
 80032c6:	4413      	add	r3, r2
 80032c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80032d0:	0151      	lsls	r1, r2, #5
 80032d2:	69fa      	ldr	r2, [r7, #28]
 80032d4:	440a      	add	r2, r1
 80032d6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80032da:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80032de:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80032e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032e2:	015a      	lsls	r2, r3, #5
 80032e4:	69fb      	ldr	r3, [r7, #28]
 80032e6:	4413      	add	r3, r2
 80032e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80032ec:	461a      	mov	r2, r3
 80032ee:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80032f2:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80032f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032f6:	015a      	lsls	r2, r3, #5
 80032f8:	69fb      	ldr	r3, [r7, #28]
 80032fa:	4413      	add	r3, r2
 80032fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003304:	0151      	lsls	r1, r2, #5
 8003306:	69fa      	ldr	r2, [r7, #28]
 8003308:	440a      	add	r2, r1
 800330a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800330e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003312:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003314:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003316:	015a      	lsls	r2, r3, #5
 8003318:	69fb      	ldr	r3, [r7, #28]
 800331a:	4413      	add	r3, r2
 800331c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003324:	0151      	lsls	r1, r2, #5
 8003326:	69fa      	ldr	r2, [r7, #28]
 8003328:	440a      	add	r2, r1
 800332a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800332e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003332:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003334:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003336:	3301      	adds	r3, #1
 8003338:	62fb      	str	r3, [r7, #44]	; 0x2c
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	685b      	ldr	r3, [r3, #4]
 800333e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003340:	429a      	cmp	r2, r3
 8003342:	d3b3      	bcc.n	80032ac <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003344:	69fb      	ldr	r3, [r7, #28]
 8003346:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800334a:	69db      	ldr	r3, [r3, #28]
 800334c:	69fa      	ldr	r2, [r7, #28]
 800334e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003352:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8003356:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800335c:	2b00      	cmp	r3, #0
 800335e:	d016      	beq.n	800338e <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003360:	69fb      	ldr	r3, [r7, #28]
 8003362:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003366:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800336a:	69fa      	ldr	r2, [r7, #28]
 800336c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003370:	f043 030b 	orr.w	r3, r3, #11
 8003374:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003378:	69fb      	ldr	r3, [r7, #28]
 800337a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800337e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003380:	69fa      	ldr	r2, [r7, #28]
 8003382:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003386:	f043 030b 	orr.w	r3, r3, #11
 800338a:	6453      	str	r3, [r2, #68]	; 0x44
 800338c:	e015      	b.n	80033ba <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800338e:	69fb      	ldr	r3, [r7, #28]
 8003390:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003394:	695b      	ldr	r3, [r3, #20]
 8003396:	69fa      	ldr	r2, [r7, #28]
 8003398:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800339c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80033a0:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80033a4:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80033a6:	69fb      	ldr	r3, [r7, #28]
 80033a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80033ac:	691b      	ldr	r3, [r3, #16]
 80033ae:	69fa      	ldr	r2, [r7, #28]
 80033b0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80033b4:	f043 030b 	orr.w	r3, r3, #11
 80033b8:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80033ba:	69fb      	ldr	r3, [r7, #28]
 80033bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	69fa      	ldr	r2, [r7, #28]
 80033c4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80033c8:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80033cc:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	6818      	ldr	r0, [r3, #0]
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	691b      	ldr	r3, [r3, #16]
 80033d6:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80033de:	461a      	mov	r2, r3
 80033e0:	f005 fada 	bl	8008998 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	695a      	ldr	r2, [r3, #20]
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80033f2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	4618      	mov	r0, r3
 80033fa:	f005 fa09 	bl	8008810 <USB_ReadInterrupts>
 80033fe:	4603      	mov	r3, r0
 8003400:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003404:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003408:	d124      	bne.n	8003454 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	4618      	mov	r0, r3
 8003410:	f005 fa9f 	bl	8008952 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	4618      	mov	r0, r3
 800341a:	f004 fa54 	bl	80078c6 <USB_GetDevSpeed>
 800341e:	4603      	mov	r3, r0
 8003420:	461a      	mov	r2, r3
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681c      	ldr	r4, [r3, #0]
 800342a:	f001 f9e9 	bl	8004800 <HAL_RCC_GetHCLKFreq>
 800342e:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003434:	b2db      	uxtb	r3, r3
 8003436:	461a      	mov	r2, r3
 8003438:	4620      	mov	r0, r4
 800343a:	f003 ff53 	bl	80072e4 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800343e:	6878      	ldr	r0, [r7, #4]
 8003440:	f007 fdd9 	bl	800aff6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	695a      	ldr	r2, [r3, #20]
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8003452:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	4618      	mov	r0, r3
 800345a:	f005 f9d9 	bl	8008810 <USB_ReadInterrupts>
 800345e:	4603      	mov	r3, r0
 8003460:	f003 0308 	and.w	r3, r3, #8
 8003464:	2b08      	cmp	r3, #8
 8003466:	d10a      	bne.n	800347e <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003468:	6878      	ldr	r0, [r7, #4]
 800346a:	f007 fdb6 	bl	800afda <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	695a      	ldr	r2, [r3, #20]
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f002 0208 	and.w	r2, r2, #8
 800347c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	4618      	mov	r0, r3
 8003484:	f005 f9c4 	bl	8008810 <USB_ReadInterrupts>
 8003488:	4603      	mov	r3, r0
 800348a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800348e:	2b80      	cmp	r3, #128	; 0x80
 8003490:	d122      	bne.n	80034d8 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8003492:	6a3b      	ldr	r3, [r7, #32]
 8003494:	699b      	ldr	r3, [r3, #24]
 8003496:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800349a:	6a3b      	ldr	r3, [r7, #32]
 800349c:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800349e:	2301      	movs	r3, #1
 80034a0:	627b      	str	r3, [r7, #36]	; 0x24
 80034a2:	e014      	b.n	80034ce <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80034a4:	6879      	ldr	r1, [r7, #4]
 80034a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034a8:	4613      	mov	r3, r2
 80034aa:	00db      	lsls	r3, r3, #3
 80034ac:	4413      	add	r3, r2
 80034ae:	009b      	lsls	r3, r3, #2
 80034b0:	440b      	add	r3, r1
 80034b2:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80034b6:	781b      	ldrb	r3, [r3, #0]
 80034b8:	2b01      	cmp	r3, #1
 80034ba:	d105      	bne.n	80034c8 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80034bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034be:	b2db      	uxtb	r3, r3
 80034c0:	4619      	mov	r1, r3
 80034c2:	6878      	ldr	r0, [r7, #4]
 80034c4:	f000 fb27 	bl	8003b16 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80034c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034ca:	3301      	adds	r3, #1
 80034cc:	627b      	str	r3, [r7, #36]	; 0x24
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	685b      	ldr	r3, [r3, #4]
 80034d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034d4:	429a      	cmp	r2, r3
 80034d6:	d3e5      	bcc.n	80034a4 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	4618      	mov	r0, r3
 80034de:	f005 f997 	bl	8008810 <USB_ReadInterrupts>
 80034e2:	4603      	mov	r3, r0
 80034e4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80034e8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80034ec:	d13b      	bne.n	8003566 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80034ee:	2301      	movs	r3, #1
 80034f0:	627b      	str	r3, [r7, #36]	; 0x24
 80034f2:	e02b      	b.n	800354c <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80034f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034f6:	015a      	lsls	r2, r3, #5
 80034f8:	69fb      	ldr	r3, [r7, #28]
 80034fa:	4413      	add	r3, r2
 80034fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003504:	6879      	ldr	r1, [r7, #4]
 8003506:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003508:	4613      	mov	r3, r2
 800350a:	00db      	lsls	r3, r3, #3
 800350c:	4413      	add	r3, r2
 800350e:	009b      	lsls	r3, r3, #2
 8003510:	440b      	add	r3, r1
 8003512:	3340      	adds	r3, #64	; 0x40
 8003514:	781b      	ldrb	r3, [r3, #0]
 8003516:	2b01      	cmp	r3, #1
 8003518:	d115      	bne.n	8003546 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 800351a:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800351c:	2b00      	cmp	r3, #0
 800351e:	da12      	bge.n	8003546 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8003520:	6879      	ldr	r1, [r7, #4]
 8003522:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003524:	4613      	mov	r3, r2
 8003526:	00db      	lsls	r3, r3, #3
 8003528:	4413      	add	r3, r2
 800352a:	009b      	lsls	r3, r3, #2
 800352c:	440b      	add	r3, r1
 800352e:	333f      	adds	r3, #63	; 0x3f
 8003530:	2201      	movs	r2, #1
 8003532:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8003534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003536:	b2db      	uxtb	r3, r3
 8003538:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800353c:	b2db      	uxtb	r3, r3
 800353e:	4619      	mov	r1, r3
 8003540:	6878      	ldr	r0, [r7, #4]
 8003542:	f000 fae8 	bl	8003b16 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003546:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003548:	3301      	adds	r3, #1
 800354a:	627b      	str	r3, [r7, #36]	; 0x24
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	685b      	ldr	r3, [r3, #4]
 8003550:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003552:	429a      	cmp	r2, r3
 8003554:	d3ce      	bcc.n	80034f4 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	695a      	ldr	r2, [r3, #20]
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8003564:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	4618      	mov	r0, r3
 800356c:	f005 f950 	bl	8008810 <USB_ReadInterrupts>
 8003570:	4603      	mov	r3, r0
 8003572:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003576:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800357a:	d155      	bne.n	8003628 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800357c:	2301      	movs	r3, #1
 800357e:	627b      	str	r3, [r7, #36]	; 0x24
 8003580:	e045      	b.n	800360e <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8003582:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003584:	015a      	lsls	r2, r3, #5
 8003586:	69fb      	ldr	r3, [r7, #28]
 8003588:	4413      	add	r3, r2
 800358a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003592:	6879      	ldr	r1, [r7, #4]
 8003594:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003596:	4613      	mov	r3, r2
 8003598:	00db      	lsls	r3, r3, #3
 800359a:	4413      	add	r3, r2
 800359c:	009b      	lsls	r3, r3, #2
 800359e:	440b      	add	r3, r1
 80035a0:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80035a4:	781b      	ldrb	r3, [r3, #0]
 80035a6:	2b01      	cmp	r3, #1
 80035a8:	d12e      	bne.n	8003608 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80035aa:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	da2b      	bge.n	8003608 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80035b0:	69bb      	ldr	r3, [r7, #24]
 80035b2:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 80035bc:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80035c0:	429a      	cmp	r2, r3
 80035c2:	d121      	bne.n	8003608 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80035c4:	6879      	ldr	r1, [r7, #4]
 80035c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035c8:	4613      	mov	r3, r2
 80035ca:	00db      	lsls	r3, r3, #3
 80035cc:	4413      	add	r3, r2
 80035ce:	009b      	lsls	r3, r3, #2
 80035d0:	440b      	add	r3, r1
 80035d2:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80035d6:	2201      	movs	r2, #1
 80035d8:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80035da:	6a3b      	ldr	r3, [r7, #32]
 80035dc:	699b      	ldr	r3, [r3, #24]
 80035de:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80035e2:	6a3b      	ldr	r3, [r7, #32]
 80035e4:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80035e6:	6a3b      	ldr	r3, [r7, #32]
 80035e8:	695b      	ldr	r3, [r3, #20]
 80035ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d10a      	bne.n	8003608 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80035f2:	69fb      	ldr	r3, [r7, #28]
 80035f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80035f8:	685b      	ldr	r3, [r3, #4]
 80035fa:	69fa      	ldr	r2, [r7, #28]
 80035fc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003600:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003604:	6053      	str	r3, [r2, #4]
            break;
 8003606:	e007      	b.n	8003618 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800360a:	3301      	adds	r3, #1
 800360c:	627b      	str	r3, [r7, #36]	; 0x24
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	685b      	ldr	r3, [r3, #4]
 8003612:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003614:	429a      	cmp	r2, r3
 8003616:	d3b4      	bcc.n	8003582 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	695a      	ldr	r2, [r3, #20]
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8003626:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	4618      	mov	r0, r3
 800362e:	f005 f8ef 	bl	8008810 <USB_ReadInterrupts>
 8003632:	4603      	mov	r3, r0
 8003634:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003638:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800363c:	d10a      	bne.n	8003654 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800363e:	6878      	ldr	r0, [r7, #4]
 8003640:	f007 fd5a 	bl	800b0f8 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	695a      	ldr	r2, [r3, #20]
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003652:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	4618      	mov	r0, r3
 800365a:	f005 f8d9 	bl	8008810 <USB_ReadInterrupts>
 800365e:	4603      	mov	r3, r0
 8003660:	f003 0304 	and.w	r3, r3, #4
 8003664:	2b04      	cmp	r3, #4
 8003666:	d115      	bne.n	8003694 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	685b      	ldr	r3, [r3, #4]
 800366e:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003670:	69bb      	ldr	r3, [r7, #24]
 8003672:	f003 0304 	and.w	r3, r3, #4
 8003676:	2b00      	cmp	r3, #0
 8003678:	d002      	beq.n	8003680 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800367a:	6878      	ldr	r0, [r7, #4]
 800367c:	f007 fd4a 	bl	800b114 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	6859      	ldr	r1, [r3, #4]
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	69ba      	ldr	r2, [r7, #24]
 800368c:	430a      	orrs	r2, r1
 800368e:	605a      	str	r2, [r3, #4]
 8003690:	e000      	b.n	8003694 <HAL_PCD_IRQHandler+0x938>
      return;
 8003692:	bf00      	nop
    }
  }
}
 8003694:	3734      	adds	r7, #52	; 0x34
 8003696:	46bd      	mov	sp, r7
 8003698:	bd90      	pop	{r4, r7, pc}

0800369a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800369a:	b580      	push	{r7, lr}
 800369c:	b082      	sub	sp, #8
 800369e:	af00      	add	r7, sp, #0
 80036a0:	6078      	str	r0, [r7, #4]
 80036a2:	460b      	mov	r3, r1
 80036a4:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80036ac:	2b01      	cmp	r3, #1
 80036ae:	d101      	bne.n	80036b4 <HAL_PCD_SetAddress+0x1a>
 80036b0:	2302      	movs	r3, #2
 80036b2:	e013      	b.n	80036dc <HAL_PCD_SetAddress+0x42>
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2201      	movs	r2, #1
 80036b8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	78fa      	ldrb	r2, [r7, #3]
 80036c0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	78fa      	ldrb	r2, [r7, #3]
 80036ca:	4611      	mov	r1, r2
 80036cc:	4618      	mov	r0, r3
 80036ce:	f005 f837 	bl	8008740 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	2200      	movs	r2, #0
 80036d6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80036da:	2300      	movs	r3, #0
}
 80036dc:	4618      	mov	r0, r3
 80036de:	3708      	adds	r7, #8
 80036e0:	46bd      	mov	sp, r7
 80036e2:	bd80      	pop	{r7, pc}

080036e4 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80036e4:	b580      	push	{r7, lr}
 80036e6:	b084      	sub	sp, #16
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	6078      	str	r0, [r7, #4]
 80036ec:	4608      	mov	r0, r1
 80036ee:	4611      	mov	r1, r2
 80036f0:	461a      	mov	r2, r3
 80036f2:	4603      	mov	r3, r0
 80036f4:	70fb      	strb	r3, [r7, #3]
 80036f6:	460b      	mov	r3, r1
 80036f8:	803b      	strh	r3, [r7, #0]
 80036fa:	4613      	mov	r3, r2
 80036fc:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80036fe:	2300      	movs	r3, #0
 8003700:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003702:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003706:	2b00      	cmp	r3, #0
 8003708:	da0f      	bge.n	800372a <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800370a:	78fb      	ldrb	r3, [r7, #3]
 800370c:	f003 020f 	and.w	r2, r3, #15
 8003710:	4613      	mov	r3, r2
 8003712:	00db      	lsls	r3, r3, #3
 8003714:	4413      	add	r3, r2
 8003716:	009b      	lsls	r3, r3, #2
 8003718:	3338      	adds	r3, #56	; 0x38
 800371a:	687a      	ldr	r2, [r7, #4]
 800371c:	4413      	add	r3, r2
 800371e:	3304      	adds	r3, #4
 8003720:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	2201      	movs	r2, #1
 8003726:	705a      	strb	r2, [r3, #1]
 8003728:	e00f      	b.n	800374a <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800372a:	78fb      	ldrb	r3, [r7, #3]
 800372c:	f003 020f 	and.w	r2, r3, #15
 8003730:	4613      	mov	r3, r2
 8003732:	00db      	lsls	r3, r3, #3
 8003734:	4413      	add	r3, r2
 8003736:	009b      	lsls	r3, r3, #2
 8003738:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800373c:	687a      	ldr	r2, [r7, #4]
 800373e:	4413      	add	r3, r2
 8003740:	3304      	adds	r3, #4
 8003742:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	2200      	movs	r2, #0
 8003748:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800374a:	78fb      	ldrb	r3, [r7, #3]
 800374c:	f003 030f 	and.w	r3, r3, #15
 8003750:	b2da      	uxtb	r2, r3
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003756:	883a      	ldrh	r2, [r7, #0]
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	78ba      	ldrb	r2, [r7, #2]
 8003760:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	785b      	ldrb	r3, [r3, #1]
 8003766:	2b00      	cmp	r3, #0
 8003768:	d004      	beq.n	8003774 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	781b      	ldrb	r3, [r3, #0]
 800376e:	b29a      	uxth	r2, r3
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003774:	78bb      	ldrb	r3, [r7, #2]
 8003776:	2b02      	cmp	r3, #2
 8003778:	d102      	bne.n	8003780 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	2200      	movs	r2, #0
 800377e:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003786:	2b01      	cmp	r3, #1
 8003788:	d101      	bne.n	800378e <HAL_PCD_EP_Open+0xaa>
 800378a:	2302      	movs	r3, #2
 800378c:	e00e      	b.n	80037ac <HAL_PCD_EP_Open+0xc8>
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	2201      	movs	r2, #1
 8003792:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	68f9      	ldr	r1, [r7, #12]
 800379c:	4618      	mov	r0, r3
 800379e:	f004 f8b7 	bl	8007910 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	2200      	movs	r2, #0
 80037a6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 80037aa:	7afb      	ldrb	r3, [r7, #11]
}
 80037ac:	4618      	mov	r0, r3
 80037ae:	3710      	adds	r7, #16
 80037b0:	46bd      	mov	sp, r7
 80037b2:	bd80      	pop	{r7, pc}

080037b4 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80037b4:	b580      	push	{r7, lr}
 80037b6:	b084      	sub	sp, #16
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	6078      	str	r0, [r7, #4]
 80037bc:	460b      	mov	r3, r1
 80037be:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80037c0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	da0f      	bge.n	80037e8 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80037c8:	78fb      	ldrb	r3, [r7, #3]
 80037ca:	f003 020f 	and.w	r2, r3, #15
 80037ce:	4613      	mov	r3, r2
 80037d0:	00db      	lsls	r3, r3, #3
 80037d2:	4413      	add	r3, r2
 80037d4:	009b      	lsls	r3, r3, #2
 80037d6:	3338      	adds	r3, #56	; 0x38
 80037d8:	687a      	ldr	r2, [r7, #4]
 80037da:	4413      	add	r3, r2
 80037dc:	3304      	adds	r3, #4
 80037de:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	2201      	movs	r2, #1
 80037e4:	705a      	strb	r2, [r3, #1]
 80037e6:	e00f      	b.n	8003808 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80037e8:	78fb      	ldrb	r3, [r7, #3]
 80037ea:	f003 020f 	and.w	r2, r3, #15
 80037ee:	4613      	mov	r3, r2
 80037f0:	00db      	lsls	r3, r3, #3
 80037f2:	4413      	add	r3, r2
 80037f4:	009b      	lsls	r3, r3, #2
 80037f6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80037fa:	687a      	ldr	r2, [r7, #4]
 80037fc:	4413      	add	r3, r2
 80037fe:	3304      	adds	r3, #4
 8003800:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	2200      	movs	r2, #0
 8003806:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8003808:	78fb      	ldrb	r3, [r7, #3]
 800380a:	f003 030f 	and.w	r3, r3, #15
 800380e:	b2da      	uxtb	r2, r3
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800381a:	2b01      	cmp	r3, #1
 800381c:	d101      	bne.n	8003822 <HAL_PCD_EP_Close+0x6e>
 800381e:	2302      	movs	r3, #2
 8003820:	e00e      	b.n	8003840 <HAL_PCD_EP_Close+0x8c>
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	2201      	movs	r2, #1
 8003826:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	68f9      	ldr	r1, [r7, #12]
 8003830:	4618      	mov	r0, r3
 8003832:	f004 f8f5 	bl	8007a20 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	2200      	movs	r2, #0
 800383a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 800383e:	2300      	movs	r3, #0
}
 8003840:	4618      	mov	r0, r3
 8003842:	3710      	adds	r7, #16
 8003844:	46bd      	mov	sp, r7
 8003846:	bd80      	pop	{r7, pc}

08003848 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003848:	b580      	push	{r7, lr}
 800384a:	b086      	sub	sp, #24
 800384c:	af00      	add	r7, sp, #0
 800384e:	60f8      	str	r0, [r7, #12]
 8003850:	607a      	str	r2, [r7, #4]
 8003852:	603b      	str	r3, [r7, #0]
 8003854:	460b      	mov	r3, r1
 8003856:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003858:	7afb      	ldrb	r3, [r7, #11]
 800385a:	f003 020f 	and.w	r2, r3, #15
 800385e:	4613      	mov	r3, r2
 8003860:	00db      	lsls	r3, r3, #3
 8003862:	4413      	add	r3, r2
 8003864:	009b      	lsls	r3, r3, #2
 8003866:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800386a:	68fa      	ldr	r2, [r7, #12]
 800386c:	4413      	add	r3, r2
 800386e:	3304      	adds	r3, #4
 8003870:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003872:	697b      	ldr	r3, [r7, #20]
 8003874:	687a      	ldr	r2, [r7, #4]
 8003876:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8003878:	697b      	ldr	r3, [r7, #20]
 800387a:	683a      	ldr	r2, [r7, #0]
 800387c:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800387e:	697b      	ldr	r3, [r7, #20]
 8003880:	2200      	movs	r2, #0
 8003882:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8003884:	697b      	ldr	r3, [r7, #20]
 8003886:	2200      	movs	r2, #0
 8003888:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800388a:	7afb      	ldrb	r3, [r7, #11]
 800388c:	f003 030f 	and.w	r3, r3, #15
 8003890:	b2da      	uxtb	r2, r3
 8003892:	697b      	ldr	r3, [r7, #20]
 8003894:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	691b      	ldr	r3, [r3, #16]
 800389a:	2b01      	cmp	r3, #1
 800389c:	d102      	bne.n	80038a4 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800389e:	687a      	ldr	r2, [r7, #4]
 80038a0:	697b      	ldr	r3, [r7, #20]
 80038a2:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80038a4:	7afb      	ldrb	r3, [r7, #11]
 80038a6:	f003 030f 	and.w	r3, r3, #15
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d109      	bne.n	80038c2 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	6818      	ldr	r0, [r3, #0]
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	691b      	ldr	r3, [r3, #16]
 80038b6:	b2db      	uxtb	r3, r3
 80038b8:	461a      	mov	r2, r3
 80038ba:	6979      	ldr	r1, [r7, #20]
 80038bc:	f004 fbd4 	bl	8008068 <USB_EP0StartXfer>
 80038c0:	e008      	b.n	80038d4 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	6818      	ldr	r0, [r3, #0]
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	691b      	ldr	r3, [r3, #16]
 80038ca:	b2db      	uxtb	r3, r3
 80038cc:	461a      	mov	r2, r3
 80038ce:	6979      	ldr	r1, [r7, #20]
 80038d0:	f004 f982 	bl	8007bd8 <USB_EPStartXfer>
  }

  return HAL_OK;
 80038d4:	2300      	movs	r3, #0
}
 80038d6:	4618      	mov	r0, r3
 80038d8:	3718      	adds	r7, #24
 80038da:	46bd      	mov	sp, r7
 80038dc:	bd80      	pop	{r7, pc}

080038de <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80038de:	b480      	push	{r7}
 80038e0:	b083      	sub	sp, #12
 80038e2:	af00      	add	r7, sp, #0
 80038e4:	6078      	str	r0, [r7, #4]
 80038e6:	460b      	mov	r3, r1
 80038e8:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80038ea:	78fb      	ldrb	r3, [r7, #3]
 80038ec:	f003 020f 	and.w	r2, r3, #15
 80038f0:	6879      	ldr	r1, [r7, #4]
 80038f2:	4613      	mov	r3, r2
 80038f4:	00db      	lsls	r3, r3, #3
 80038f6:	4413      	add	r3, r2
 80038f8:	009b      	lsls	r3, r3, #2
 80038fa:	440b      	add	r3, r1
 80038fc:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8003900:	681b      	ldr	r3, [r3, #0]
}
 8003902:	4618      	mov	r0, r3
 8003904:	370c      	adds	r7, #12
 8003906:	46bd      	mov	sp, r7
 8003908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390c:	4770      	bx	lr

0800390e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800390e:	b580      	push	{r7, lr}
 8003910:	b086      	sub	sp, #24
 8003912:	af00      	add	r7, sp, #0
 8003914:	60f8      	str	r0, [r7, #12]
 8003916:	607a      	str	r2, [r7, #4]
 8003918:	603b      	str	r3, [r7, #0]
 800391a:	460b      	mov	r3, r1
 800391c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800391e:	7afb      	ldrb	r3, [r7, #11]
 8003920:	f003 020f 	and.w	r2, r3, #15
 8003924:	4613      	mov	r3, r2
 8003926:	00db      	lsls	r3, r3, #3
 8003928:	4413      	add	r3, r2
 800392a:	009b      	lsls	r3, r3, #2
 800392c:	3338      	adds	r3, #56	; 0x38
 800392e:	68fa      	ldr	r2, [r7, #12]
 8003930:	4413      	add	r3, r2
 8003932:	3304      	adds	r3, #4
 8003934:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003936:	697b      	ldr	r3, [r7, #20]
 8003938:	687a      	ldr	r2, [r7, #4]
 800393a:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 800393c:	697b      	ldr	r3, [r7, #20]
 800393e:	683a      	ldr	r2, [r7, #0]
 8003940:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003942:	697b      	ldr	r3, [r7, #20]
 8003944:	2200      	movs	r2, #0
 8003946:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8003948:	697b      	ldr	r3, [r7, #20]
 800394a:	2201      	movs	r2, #1
 800394c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800394e:	7afb      	ldrb	r3, [r7, #11]
 8003950:	f003 030f 	and.w	r3, r3, #15
 8003954:	b2da      	uxtb	r2, r3
 8003956:	697b      	ldr	r3, [r7, #20]
 8003958:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	691b      	ldr	r3, [r3, #16]
 800395e:	2b01      	cmp	r3, #1
 8003960:	d102      	bne.n	8003968 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003962:	687a      	ldr	r2, [r7, #4]
 8003964:	697b      	ldr	r3, [r7, #20]
 8003966:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003968:	7afb      	ldrb	r3, [r7, #11]
 800396a:	f003 030f 	and.w	r3, r3, #15
 800396e:	2b00      	cmp	r3, #0
 8003970:	d109      	bne.n	8003986 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	6818      	ldr	r0, [r3, #0]
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	691b      	ldr	r3, [r3, #16]
 800397a:	b2db      	uxtb	r3, r3
 800397c:	461a      	mov	r2, r3
 800397e:	6979      	ldr	r1, [r7, #20]
 8003980:	f004 fb72 	bl	8008068 <USB_EP0StartXfer>
 8003984:	e008      	b.n	8003998 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	6818      	ldr	r0, [r3, #0]
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	691b      	ldr	r3, [r3, #16]
 800398e:	b2db      	uxtb	r3, r3
 8003990:	461a      	mov	r2, r3
 8003992:	6979      	ldr	r1, [r7, #20]
 8003994:	f004 f920 	bl	8007bd8 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003998:	2300      	movs	r3, #0
}
 800399a:	4618      	mov	r0, r3
 800399c:	3718      	adds	r7, #24
 800399e:	46bd      	mov	sp, r7
 80039a0:	bd80      	pop	{r7, pc}

080039a2 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80039a2:	b580      	push	{r7, lr}
 80039a4:	b084      	sub	sp, #16
 80039a6:	af00      	add	r7, sp, #0
 80039a8:	6078      	str	r0, [r7, #4]
 80039aa:	460b      	mov	r3, r1
 80039ac:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80039ae:	78fb      	ldrb	r3, [r7, #3]
 80039b0:	f003 020f 	and.w	r2, r3, #15
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	685b      	ldr	r3, [r3, #4]
 80039b8:	429a      	cmp	r2, r3
 80039ba:	d901      	bls.n	80039c0 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80039bc:	2301      	movs	r3, #1
 80039be:	e050      	b.n	8003a62 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80039c0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	da0f      	bge.n	80039e8 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80039c8:	78fb      	ldrb	r3, [r7, #3]
 80039ca:	f003 020f 	and.w	r2, r3, #15
 80039ce:	4613      	mov	r3, r2
 80039d0:	00db      	lsls	r3, r3, #3
 80039d2:	4413      	add	r3, r2
 80039d4:	009b      	lsls	r3, r3, #2
 80039d6:	3338      	adds	r3, #56	; 0x38
 80039d8:	687a      	ldr	r2, [r7, #4]
 80039da:	4413      	add	r3, r2
 80039dc:	3304      	adds	r3, #4
 80039de:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	2201      	movs	r2, #1
 80039e4:	705a      	strb	r2, [r3, #1]
 80039e6:	e00d      	b.n	8003a04 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80039e8:	78fa      	ldrb	r2, [r7, #3]
 80039ea:	4613      	mov	r3, r2
 80039ec:	00db      	lsls	r3, r3, #3
 80039ee:	4413      	add	r3, r2
 80039f0:	009b      	lsls	r3, r3, #2
 80039f2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80039f6:	687a      	ldr	r2, [r7, #4]
 80039f8:	4413      	add	r3, r2
 80039fa:	3304      	adds	r3, #4
 80039fc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	2200      	movs	r2, #0
 8003a02:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	2201      	movs	r2, #1
 8003a08:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003a0a:	78fb      	ldrb	r3, [r7, #3]
 8003a0c:	f003 030f 	and.w	r3, r3, #15
 8003a10:	b2da      	uxtb	r2, r3
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003a1c:	2b01      	cmp	r3, #1
 8003a1e:	d101      	bne.n	8003a24 <HAL_PCD_EP_SetStall+0x82>
 8003a20:	2302      	movs	r3, #2
 8003a22:	e01e      	b.n	8003a62 <HAL_PCD_EP_SetStall+0xc0>
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	2201      	movs	r2, #1
 8003a28:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	68f9      	ldr	r1, [r7, #12]
 8003a32:	4618      	mov	r0, r3
 8003a34:	f004 fdb0 	bl	8008598 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003a38:	78fb      	ldrb	r3, [r7, #3]
 8003a3a:	f003 030f 	and.w	r3, r3, #15
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d10a      	bne.n	8003a58 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	6818      	ldr	r0, [r3, #0]
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	691b      	ldr	r3, [r3, #16]
 8003a4a:	b2d9      	uxtb	r1, r3
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003a52:	461a      	mov	r2, r3
 8003a54:	f004 ffa0 	bl	8008998 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	2200      	movs	r2, #0
 8003a5c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003a60:	2300      	movs	r3, #0
}
 8003a62:	4618      	mov	r0, r3
 8003a64:	3710      	adds	r7, #16
 8003a66:	46bd      	mov	sp, r7
 8003a68:	bd80      	pop	{r7, pc}

08003a6a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003a6a:	b580      	push	{r7, lr}
 8003a6c:	b084      	sub	sp, #16
 8003a6e:	af00      	add	r7, sp, #0
 8003a70:	6078      	str	r0, [r7, #4]
 8003a72:	460b      	mov	r3, r1
 8003a74:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003a76:	78fb      	ldrb	r3, [r7, #3]
 8003a78:	f003 020f 	and.w	r2, r3, #15
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	685b      	ldr	r3, [r3, #4]
 8003a80:	429a      	cmp	r2, r3
 8003a82:	d901      	bls.n	8003a88 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003a84:	2301      	movs	r3, #1
 8003a86:	e042      	b.n	8003b0e <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003a88:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	da0f      	bge.n	8003ab0 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003a90:	78fb      	ldrb	r3, [r7, #3]
 8003a92:	f003 020f 	and.w	r2, r3, #15
 8003a96:	4613      	mov	r3, r2
 8003a98:	00db      	lsls	r3, r3, #3
 8003a9a:	4413      	add	r3, r2
 8003a9c:	009b      	lsls	r3, r3, #2
 8003a9e:	3338      	adds	r3, #56	; 0x38
 8003aa0:	687a      	ldr	r2, [r7, #4]
 8003aa2:	4413      	add	r3, r2
 8003aa4:	3304      	adds	r3, #4
 8003aa6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	2201      	movs	r2, #1
 8003aac:	705a      	strb	r2, [r3, #1]
 8003aae:	e00f      	b.n	8003ad0 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003ab0:	78fb      	ldrb	r3, [r7, #3]
 8003ab2:	f003 020f 	and.w	r2, r3, #15
 8003ab6:	4613      	mov	r3, r2
 8003ab8:	00db      	lsls	r3, r3, #3
 8003aba:	4413      	add	r3, r2
 8003abc:	009b      	lsls	r3, r3, #2
 8003abe:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003ac2:	687a      	ldr	r2, [r7, #4]
 8003ac4:	4413      	add	r3, r2
 8003ac6:	3304      	adds	r3, #4
 8003ac8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	2200      	movs	r2, #0
 8003ace:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	2200      	movs	r2, #0
 8003ad4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003ad6:	78fb      	ldrb	r3, [r7, #3]
 8003ad8:	f003 030f 	and.w	r3, r3, #15
 8003adc:	b2da      	uxtb	r2, r3
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003ae8:	2b01      	cmp	r3, #1
 8003aea:	d101      	bne.n	8003af0 <HAL_PCD_EP_ClrStall+0x86>
 8003aec:	2302      	movs	r3, #2
 8003aee:	e00e      	b.n	8003b0e <HAL_PCD_EP_ClrStall+0xa4>
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	2201      	movs	r2, #1
 8003af4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	68f9      	ldr	r1, [r7, #12]
 8003afe:	4618      	mov	r0, r3
 8003b00:	f004 fdb8 	bl	8008674 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	2200      	movs	r2, #0
 8003b08:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003b0c:	2300      	movs	r3, #0
}
 8003b0e:	4618      	mov	r0, r3
 8003b10:	3710      	adds	r7, #16
 8003b12:	46bd      	mov	sp, r7
 8003b14:	bd80      	pop	{r7, pc}

08003b16 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003b16:	b580      	push	{r7, lr}
 8003b18:	b084      	sub	sp, #16
 8003b1a:	af00      	add	r7, sp, #0
 8003b1c:	6078      	str	r0, [r7, #4]
 8003b1e:	460b      	mov	r3, r1
 8003b20:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8003b22:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	da0c      	bge.n	8003b44 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003b2a:	78fb      	ldrb	r3, [r7, #3]
 8003b2c:	f003 020f 	and.w	r2, r3, #15
 8003b30:	4613      	mov	r3, r2
 8003b32:	00db      	lsls	r3, r3, #3
 8003b34:	4413      	add	r3, r2
 8003b36:	009b      	lsls	r3, r3, #2
 8003b38:	3338      	adds	r3, #56	; 0x38
 8003b3a:	687a      	ldr	r2, [r7, #4]
 8003b3c:	4413      	add	r3, r2
 8003b3e:	3304      	adds	r3, #4
 8003b40:	60fb      	str	r3, [r7, #12]
 8003b42:	e00c      	b.n	8003b5e <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003b44:	78fb      	ldrb	r3, [r7, #3]
 8003b46:	f003 020f 	and.w	r2, r3, #15
 8003b4a:	4613      	mov	r3, r2
 8003b4c:	00db      	lsls	r3, r3, #3
 8003b4e:	4413      	add	r3, r2
 8003b50:	009b      	lsls	r3, r3, #2
 8003b52:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003b56:	687a      	ldr	r2, [r7, #4]
 8003b58:	4413      	add	r3, r2
 8003b5a:	3304      	adds	r3, #4
 8003b5c:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	68f9      	ldr	r1, [r7, #12]
 8003b64:	4618      	mov	r0, r3
 8003b66:	f004 fbd7 	bl	8008318 <USB_EPStopXfer>
 8003b6a:	4603      	mov	r3, r0
 8003b6c:	72fb      	strb	r3, [r7, #11]

  return ret;
 8003b6e:	7afb      	ldrb	r3, [r7, #11]
}
 8003b70:	4618      	mov	r0, r3
 8003b72:	3710      	adds	r7, #16
 8003b74:	46bd      	mov	sp, r7
 8003b76:	bd80      	pop	{r7, pc}

08003b78 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003b78:	b580      	push	{r7, lr}
 8003b7a:	b08a      	sub	sp, #40	; 0x28
 8003b7c:	af02      	add	r7, sp, #8
 8003b7e:	6078      	str	r0, [r7, #4]
 8003b80:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003b88:	697b      	ldr	r3, [r7, #20]
 8003b8a:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003b8c:	683a      	ldr	r2, [r7, #0]
 8003b8e:	4613      	mov	r3, r2
 8003b90:	00db      	lsls	r3, r3, #3
 8003b92:	4413      	add	r3, r2
 8003b94:	009b      	lsls	r3, r3, #2
 8003b96:	3338      	adds	r3, #56	; 0x38
 8003b98:	687a      	ldr	r2, [r7, #4]
 8003b9a:	4413      	add	r3, r2
 8003b9c:	3304      	adds	r3, #4
 8003b9e:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	6a1a      	ldr	r2, [r3, #32]
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	699b      	ldr	r3, [r3, #24]
 8003ba8:	429a      	cmp	r2, r3
 8003baa:	d901      	bls.n	8003bb0 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003bac:	2301      	movs	r3, #1
 8003bae:	e06c      	b.n	8003c8a <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	699a      	ldr	r2, [r3, #24]
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	6a1b      	ldr	r3, [r3, #32]
 8003bb8:	1ad3      	subs	r3, r2, r3
 8003bba:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	68db      	ldr	r3, [r3, #12]
 8003bc0:	69fa      	ldr	r2, [r7, #28]
 8003bc2:	429a      	cmp	r2, r3
 8003bc4:	d902      	bls.n	8003bcc <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	68db      	ldr	r3, [r3, #12]
 8003bca:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003bcc:	69fb      	ldr	r3, [r7, #28]
 8003bce:	3303      	adds	r3, #3
 8003bd0:	089b      	lsrs	r3, r3, #2
 8003bd2:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003bd4:	e02b      	b.n	8003c2e <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	699a      	ldr	r2, [r3, #24]
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	6a1b      	ldr	r3, [r3, #32]
 8003bde:	1ad3      	subs	r3, r2, r3
 8003be0:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	68db      	ldr	r3, [r3, #12]
 8003be6:	69fa      	ldr	r2, [r7, #28]
 8003be8:	429a      	cmp	r2, r3
 8003bea:	d902      	bls.n	8003bf2 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	68db      	ldr	r3, [r3, #12]
 8003bf0:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003bf2:	69fb      	ldr	r3, [r7, #28]
 8003bf4:	3303      	adds	r3, #3
 8003bf6:	089b      	lsrs	r3, r3, #2
 8003bf8:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	6919      	ldr	r1, [r3, #16]
 8003bfe:	683b      	ldr	r3, [r7, #0]
 8003c00:	b2da      	uxtb	r2, r3
 8003c02:	69fb      	ldr	r3, [r7, #28]
 8003c04:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003c0a:	b2db      	uxtb	r3, r3
 8003c0c:	9300      	str	r3, [sp, #0]
 8003c0e:	4603      	mov	r3, r0
 8003c10:	6978      	ldr	r0, [r7, #20]
 8003c12:	f004 fc2b 	bl	800846c <USB_WritePacket>

    ep->xfer_buff  += len;
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	691a      	ldr	r2, [r3, #16]
 8003c1a:	69fb      	ldr	r3, [r7, #28]
 8003c1c:	441a      	add	r2, r3
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	6a1a      	ldr	r2, [r3, #32]
 8003c26:	69fb      	ldr	r3, [r7, #28]
 8003c28:	441a      	add	r2, r3
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003c2e:	683b      	ldr	r3, [r7, #0]
 8003c30:	015a      	lsls	r2, r3, #5
 8003c32:	693b      	ldr	r3, [r7, #16]
 8003c34:	4413      	add	r3, r2
 8003c36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c3a:	699b      	ldr	r3, [r3, #24]
 8003c3c:	b29b      	uxth	r3, r3
 8003c3e:	69ba      	ldr	r2, [r7, #24]
 8003c40:	429a      	cmp	r2, r3
 8003c42:	d809      	bhi.n	8003c58 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	6a1a      	ldr	r2, [r3, #32]
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003c4c:	429a      	cmp	r2, r3
 8003c4e:	d203      	bcs.n	8003c58 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	699b      	ldr	r3, [r3, #24]
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d1be      	bne.n	8003bd6 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	699a      	ldr	r2, [r3, #24]
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	6a1b      	ldr	r3, [r3, #32]
 8003c60:	429a      	cmp	r2, r3
 8003c62:	d811      	bhi.n	8003c88 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003c64:	683b      	ldr	r3, [r7, #0]
 8003c66:	f003 030f 	and.w	r3, r3, #15
 8003c6a:	2201      	movs	r2, #1
 8003c6c:	fa02 f303 	lsl.w	r3, r2, r3
 8003c70:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003c72:	693b      	ldr	r3, [r7, #16]
 8003c74:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c78:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003c7a:	68bb      	ldr	r3, [r7, #8]
 8003c7c:	43db      	mvns	r3, r3
 8003c7e:	6939      	ldr	r1, [r7, #16]
 8003c80:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003c84:	4013      	ands	r3, r2
 8003c86:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8003c88:	2300      	movs	r3, #0
}
 8003c8a:	4618      	mov	r0, r3
 8003c8c:	3720      	adds	r7, #32
 8003c8e:	46bd      	mov	sp, r7
 8003c90:	bd80      	pop	{r7, pc}
	...

08003c94 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003c94:	b580      	push	{r7, lr}
 8003c96:	b088      	sub	sp, #32
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	6078      	str	r0, [r7, #4]
 8003c9c:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003ca4:	69fb      	ldr	r3, [r7, #28]
 8003ca6:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003ca8:	69fb      	ldr	r3, [r7, #28]
 8003caa:	333c      	adds	r3, #60	; 0x3c
 8003cac:	3304      	adds	r3, #4
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003cb2:	683b      	ldr	r3, [r7, #0]
 8003cb4:	015a      	lsls	r2, r3, #5
 8003cb6:	69bb      	ldr	r3, [r7, #24]
 8003cb8:	4413      	add	r3, r2
 8003cba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003cbe:	689b      	ldr	r3, [r3, #8]
 8003cc0:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	691b      	ldr	r3, [r3, #16]
 8003cc6:	2b01      	cmp	r3, #1
 8003cc8:	d17b      	bne.n	8003dc2 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003cca:	693b      	ldr	r3, [r7, #16]
 8003ccc:	f003 0308 	and.w	r3, r3, #8
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d015      	beq.n	8003d00 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003cd4:	697b      	ldr	r3, [r7, #20]
 8003cd6:	4a61      	ldr	r2, [pc, #388]	; (8003e5c <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003cd8:	4293      	cmp	r3, r2
 8003cda:	f240 80b9 	bls.w	8003e50 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003cde:	693b      	ldr	r3, [r7, #16]
 8003ce0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	f000 80b3 	beq.w	8003e50 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003cea:	683b      	ldr	r3, [r7, #0]
 8003cec:	015a      	lsls	r2, r3, #5
 8003cee:	69bb      	ldr	r3, [r7, #24]
 8003cf0:	4413      	add	r3, r2
 8003cf2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003cf6:	461a      	mov	r2, r3
 8003cf8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003cfc:	6093      	str	r3, [r2, #8]
 8003cfe:	e0a7      	b.n	8003e50 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003d00:	693b      	ldr	r3, [r7, #16]
 8003d02:	f003 0320 	and.w	r3, r3, #32
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d009      	beq.n	8003d1e <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003d0a:	683b      	ldr	r3, [r7, #0]
 8003d0c:	015a      	lsls	r2, r3, #5
 8003d0e:	69bb      	ldr	r3, [r7, #24]
 8003d10:	4413      	add	r3, r2
 8003d12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d16:	461a      	mov	r2, r3
 8003d18:	2320      	movs	r3, #32
 8003d1a:	6093      	str	r3, [r2, #8]
 8003d1c:	e098      	b.n	8003e50 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003d1e:	693b      	ldr	r3, [r7, #16]
 8003d20:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	f040 8093 	bne.w	8003e50 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003d2a:	697b      	ldr	r3, [r7, #20]
 8003d2c:	4a4b      	ldr	r2, [pc, #300]	; (8003e5c <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003d2e:	4293      	cmp	r3, r2
 8003d30:	d90f      	bls.n	8003d52 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003d32:	693b      	ldr	r3, [r7, #16]
 8003d34:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d00a      	beq.n	8003d52 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003d3c:	683b      	ldr	r3, [r7, #0]
 8003d3e:	015a      	lsls	r2, r3, #5
 8003d40:	69bb      	ldr	r3, [r7, #24]
 8003d42:	4413      	add	r3, r2
 8003d44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d48:	461a      	mov	r2, r3
 8003d4a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003d4e:	6093      	str	r3, [r2, #8]
 8003d50:	e07e      	b.n	8003e50 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8003d52:	683a      	ldr	r2, [r7, #0]
 8003d54:	4613      	mov	r3, r2
 8003d56:	00db      	lsls	r3, r3, #3
 8003d58:	4413      	add	r3, r2
 8003d5a:	009b      	lsls	r3, r3, #2
 8003d5c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003d60:	687a      	ldr	r2, [r7, #4]
 8003d62:	4413      	add	r3, r2
 8003d64:	3304      	adds	r3, #4
 8003d66:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	69da      	ldr	r2, [r3, #28]
 8003d6c:	683b      	ldr	r3, [r7, #0]
 8003d6e:	0159      	lsls	r1, r3, #5
 8003d70:	69bb      	ldr	r3, [r7, #24]
 8003d72:	440b      	add	r3, r1
 8003d74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d78:	691b      	ldr	r3, [r3, #16]
 8003d7a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003d7e:	1ad2      	subs	r2, r2, r3
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8003d84:	683b      	ldr	r3, [r7, #0]
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d114      	bne.n	8003db4 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	699b      	ldr	r3, [r3, #24]
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d109      	bne.n	8003da6 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	6818      	ldr	r0, [r3, #0]
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003d9c:	461a      	mov	r2, r3
 8003d9e:	2101      	movs	r1, #1
 8003da0:	f004 fdfa 	bl	8008998 <USB_EP0_OutStart>
 8003da4:	e006      	b.n	8003db4 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	691a      	ldr	r2, [r3, #16]
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	6a1b      	ldr	r3, [r3, #32]
 8003dae:	441a      	add	r2, r3
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003db4:	683b      	ldr	r3, [r7, #0]
 8003db6:	b2db      	uxtb	r3, r3
 8003db8:	4619      	mov	r1, r3
 8003dba:	6878      	ldr	r0, [r7, #4]
 8003dbc:	f007 f8d8 	bl	800af70 <HAL_PCD_DataOutStageCallback>
 8003dc0:	e046      	b.n	8003e50 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003dc2:	697b      	ldr	r3, [r7, #20]
 8003dc4:	4a26      	ldr	r2, [pc, #152]	; (8003e60 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8003dc6:	4293      	cmp	r3, r2
 8003dc8:	d124      	bne.n	8003e14 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003dca:	693b      	ldr	r3, [r7, #16]
 8003dcc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d00a      	beq.n	8003dea <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003dd4:	683b      	ldr	r3, [r7, #0]
 8003dd6:	015a      	lsls	r2, r3, #5
 8003dd8:	69bb      	ldr	r3, [r7, #24]
 8003dda:	4413      	add	r3, r2
 8003ddc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003de0:	461a      	mov	r2, r3
 8003de2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003de6:	6093      	str	r3, [r2, #8]
 8003de8:	e032      	b.n	8003e50 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003dea:	693b      	ldr	r3, [r7, #16]
 8003dec:	f003 0320 	and.w	r3, r3, #32
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d008      	beq.n	8003e06 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003df4:	683b      	ldr	r3, [r7, #0]
 8003df6:	015a      	lsls	r2, r3, #5
 8003df8:	69bb      	ldr	r3, [r7, #24]
 8003dfa:	4413      	add	r3, r2
 8003dfc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e00:	461a      	mov	r2, r3
 8003e02:	2320      	movs	r3, #32
 8003e04:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003e06:	683b      	ldr	r3, [r7, #0]
 8003e08:	b2db      	uxtb	r3, r3
 8003e0a:	4619      	mov	r1, r3
 8003e0c:	6878      	ldr	r0, [r7, #4]
 8003e0e:	f007 f8af 	bl	800af70 <HAL_PCD_DataOutStageCallback>
 8003e12:	e01d      	b.n	8003e50 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003e14:	683b      	ldr	r3, [r7, #0]
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d114      	bne.n	8003e44 <PCD_EP_OutXfrComplete_int+0x1b0>
 8003e1a:	6879      	ldr	r1, [r7, #4]
 8003e1c:	683a      	ldr	r2, [r7, #0]
 8003e1e:	4613      	mov	r3, r2
 8003e20:	00db      	lsls	r3, r3, #3
 8003e22:	4413      	add	r3, r2
 8003e24:	009b      	lsls	r3, r3, #2
 8003e26:	440b      	add	r3, r1
 8003e28:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d108      	bne.n	8003e44 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	6818      	ldr	r0, [r3, #0]
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003e3c:	461a      	mov	r2, r3
 8003e3e:	2100      	movs	r1, #0
 8003e40:	f004 fdaa 	bl	8008998 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003e44:	683b      	ldr	r3, [r7, #0]
 8003e46:	b2db      	uxtb	r3, r3
 8003e48:	4619      	mov	r1, r3
 8003e4a:	6878      	ldr	r0, [r7, #4]
 8003e4c:	f007 f890 	bl	800af70 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003e50:	2300      	movs	r3, #0
}
 8003e52:	4618      	mov	r0, r3
 8003e54:	3720      	adds	r7, #32
 8003e56:	46bd      	mov	sp, r7
 8003e58:	bd80      	pop	{r7, pc}
 8003e5a:	bf00      	nop
 8003e5c:	4f54300a 	.word	0x4f54300a
 8003e60:	4f54310a 	.word	0x4f54310a

08003e64 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003e64:	b580      	push	{r7, lr}
 8003e66:	b086      	sub	sp, #24
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	6078      	str	r0, [r7, #4]
 8003e6c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e74:	697b      	ldr	r3, [r7, #20]
 8003e76:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003e78:	697b      	ldr	r3, [r7, #20]
 8003e7a:	333c      	adds	r3, #60	; 0x3c
 8003e7c:	3304      	adds	r3, #4
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003e82:	683b      	ldr	r3, [r7, #0]
 8003e84:	015a      	lsls	r2, r3, #5
 8003e86:	693b      	ldr	r3, [r7, #16]
 8003e88:	4413      	add	r3, r2
 8003e8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e8e:	689b      	ldr	r3, [r3, #8]
 8003e90:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	4a15      	ldr	r2, [pc, #84]	; (8003eec <PCD_EP_OutSetupPacket_int+0x88>)
 8003e96:	4293      	cmp	r3, r2
 8003e98:	d90e      	bls.n	8003eb8 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003e9a:	68bb      	ldr	r3, [r7, #8]
 8003e9c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d009      	beq.n	8003eb8 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003ea4:	683b      	ldr	r3, [r7, #0]
 8003ea6:	015a      	lsls	r2, r3, #5
 8003ea8:	693b      	ldr	r3, [r7, #16]
 8003eaa:	4413      	add	r3, r2
 8003eac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003eb0:	461a      	mov	r2, r3
 8003eb2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003eb6:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003eb8:	6878      	ldr	r0, [r7, #4]
 8003eba:	f007 f847 	bl	800af4c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	4a0a      	ldr	r2, [pc, #40]	; (8003eec <PCD_EP_OutSetupPacket_int+0x88>)
 8003ec2:	4293      	cmp	r3, r2
 8003ec4:	d90c      	bls.n	8003ee0 <PCD_EP_OutSetupPacket_int+0x7c>
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	691b      	ldr	r3, [r3, #16]
 8003eca:	2b01      	cmp	r3, #1
 8003ecc:	d108      	bne.n	8003ee0 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	6818      	ldr	r0, [r3, #0]
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003ed8:	461a      	mov	r2, r3
 8003eda:	2101      	movs	r1, #1
 8003edc:	f004 fd5c 	bl	8008998 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003ee0:	2300      	movs	r3, #0
}
 8003ee2:	4618      	mov	r0, r3
 8003ee4:	3718      	adds	r7, #24
 8003ee6:	46bd      	mov	sp, r7
 8003ee8:	bd80      	pop	{r7, pc}
 8003eea:	bf00      	nop
 8003eec:	4f54300a 	.word	0x4f54300a

08003ef0 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003ef0:	b480      	push	{r7}
 8003ef2:	b085      	sub	sp, #20
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	6078      	str	r0, [r7, #4]
 8003ef8:	460b      	mov	r3, r1
 8003efa:	70fb      	strb	r3, [r7, #3]
 8003efc:	4613      	mov	r3, r2
 8003efe:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f06:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003f08:	78fb      	ldrb	r3, [r7, #3]
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d107      	bne.n	8003f1e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003f0e:	883b      	ldrh	r3, [r7, #0]
 8003f10:	0419      	lsls	r1, r3, #16
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	68ba      	ldr	r2, [r7, #8]
 8003f18:	430a      	orrs	r2, r1
 8003f1a:	629a      	str	r2, [r3, #40]	; 0x28
 8003f1c:	e028      	b.n	8003f70 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f24:	0c1b      	lsrs	r3, r3, #16
 8003f26:	68ba      	ldr	r2, [r7, #8]
 8003f28:	4413      	add	r3, r2
 8003f2a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003f2c:	2300      	movs	r3, #0
 8003f2e:	73fb      	strb	r3, [r7, #15]
 8003f30:	e00d      	b.n	8003f4e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681a      	ldr	r2, [r3, #0]
 8003f36:	7bfb      	ldrb	r3, [r7, #15]
 8003f38:	3340      	adds	r3, #64	; 0x40
 8003f3a:	009b      	lsls	r3, r3, #2
 8003f3c:	4413      	add	r3, r2
 8003f3e:	685b      	ldr	r3, [r3, #4]
 8003f40:	0c1b      	lsrs	r3, r3, #16
 8003f42:	68ba      	ldr	r2, [r7, #8]
 8003f44:	4413      	add	r3, r2
 8003f46:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003f48:	7bfb      	ldrb	r3, [r7, #15]
 8003f4a:	3301      	adds	r3, #1
 8003f4c:	73fb      	strb	r3, [r7, #15]
 8003f4e:	7bfa      	ldrb	r2, [r7, #15]
 8003f50:	78fb      	ldrb	r3, [r7, #3]
 8003f52:	3b01      	subs	r3, #1
 8003f54:	429a      	cmp	r2, r3
 8003f56:	d3ec      	bcc.n	8003f32 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003f58:	883b      	ldrh	r3, [r7, #0]
 8003f5a:	0418      	lsls	r0, r3, #16
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	6819      	ldr	r1, [r3, #0]
 8003f60:	78fb      	ldrb	r3, [r7, #3]
 8003f62:	3b01      	subs	r3, #1
 8003f64:	68ba      	ldr	r2, [r7, #8]
 8003f66:	4302      	orrs	r2, r0
 8003f68:	3340      	adds	r3, #64	; 0x40
 8003f6a:	009b      	lsls	r3, r3, #2
 8003f6c:	440b      	add	r3, r1
 8003f6e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003f70:	2300      	movs	r3, #0
}
 8003f72:	4618      	mov	r0, r3
 8003f74:	3714      	adds	r7, #20
 8003f76:	46bd      	mov	sp, r7
 8003f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f7c:	4770      	bx	lr

08003f7e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003f7e:	b480      	push	{r7}
 8003f80:	b083      	sub	sp, #12
 8003f82:	af00      	add	r7, sp, #0
 8003f84:	6078      	str	r0, [r7, #4]
 8003f86:	460b      	mov	r3, r1
 8003f88:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	887a      	ldrh	r2, [r7, #2]
 8003f90:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003f92:	2300      	movs	r3, #0
}
 8003f94:	4618      	mov	r0, r3
 8003f96:	370c      	adds	r7, #12
 8003f98:	46bd      	mov	sp, r7
 8003f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f9e:	4770      	bx	lr

08003fa0 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003fa0:	b480      	push	{r7}
 8003fa2:	b083      	sub	sp, #12
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	6078      	str	r0, [r7, #4]
 8003fa8:	460b      	mov	r3, r1
 8003faa:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003fac:	bf00      	nop
 8003fae:	370c      	adds	r7, #12
 8003fb0:	46bd      	mov	sp, r7
 8003fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb6:	4770      	bx	lr

08003fb8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003fb8:	b580      	push	{r7, lr}
 8003fba:	b086      	sub	sp, #24
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d101      	bne.n	8003fca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003fc6:	2301      	movs	r3, #1
 8003fc8:	e267      	b.n	800449a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f003 0301 	and.w	r3, r3, #1
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d075      	beq.n	80040c2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003fd6:	4b88      	ldr	r3, [pc, #544]	; (80041f8 <HAL_RCC_OscConfig+0x240>)
 8003fd8:	689b      	ldr	r3, [r3, #8]
 8003fda:	f003 030c 	and.w	r3, r3, #12
 8003fde:	2b04      	cmp	r3, #4
 8003fe0:	d00c      	beq.n	8003ffc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003fe2:	4b85      	ldr	r3, [pc, #532]	; (80041f8 <HAL_RCC_OscConfig+0x240>)
 8003fe4:	689b      	ldr	r3, [r3, #8]
 8003fe6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003fea:	2b08      	cmp	r3, #8
 8003fec:	d112      	bne.n	8004014 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003fee:	4b82      	ldr	r3, [pc, #520]	; (80041f8 <HAL_RCC_OscConfig+0x240>)
 8003ff0:	685b      	ldr	r3, [r3, #4]
 8003ff2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ff6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003ffa:	d10b      	bne.n	8004014 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ffc:	4b7e      	ldr	r3, [pc, #504]	; (80041f8 <HAL_RCC_OscConfig+0x240>)
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004004:	2b00      	cmp	r3, #0
 8004006:	d05b      	beq.n	80040c0 <HAL_RCC_OscConfig+0x108>
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	685b      	ldr	r3, [r3, #4]
 800400c:	2b00      	cmp	r3, #0
 800400e:	d157      	bne.n	80040c0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004010:	2301      	movs	r3, #1
 8004012:	e242      	b.n	800449a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	685b      	ldr	r3, [r3, #4]
 8004018:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800401c:	d106      	bne.n	800402c <HAL_RCC_OscConfig+0x74>
 800401e:	4b76      	ldr	r3, [pc, #472]	; (80041f8 <HAL_RCC_OscConfig+0x240>)
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	4a75      	ldr	r2, [pc, #468]	; (80041f8 <HAL_RCC_OscConfig+0x240>)
 8004024:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004028:	6013      	str	r3, [r2, #0]
 800402a:	e01d      	b.n	8004068 <HAL_RCC_OscConfig+0xb0>
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	685b      	ldr	r3, [r3, #4]
 8004030:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004034:	d10c      	bne.n	8004050 <HAL_RCC_OscConfig+0x98>
 8004036:	4b70      	ldr	r3, [pc, #448]	; (80041f8 <HAL_RCC_OscConfig+0x240>)
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	4a6f      	ldr	r2, [pc, #444]	; (80041f8 <HAL_RCC_OscConfig+0x240>)
 800403c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004040:	6013      	str	r3, [r2, #0]
 8004042:	4b6d      	ldr	r3, [pc, #436]	; (80041f8 <HAL_RCC_OscConfig+0x240>)
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	4a6c      	ldr	r2, [pc, #432]	; (80041f8 <HAL_RCC_OscConfig+0x240>)
 8004048:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800404c:	6013      	str	r3, [r2, #0]
 800404e:	e00b      	b.n	8004068 <HAL_RCC_OscConfig+0xb0>
 8004050:	4b69      	ldr	r3, [pc, #420]	; (80041f8 <HAL_RCC_OscConfig+0x240>)
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	4a68      	ldr	r2, [pc, #416]	; (80041f8 <HAL_RCC_OscConfig+0x240>)
 8004056:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800405a:	6013      	str	r3, [r2, #0]
 800405c:	4b66      	ldr	r3, [pc, #408]	; (80041f8 <HAL_RCC_OscConfig+0x240>)
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	4a65      	ldr	r2, [pc, #404]	; (80041f8 <HAL_RCC_OscConfig+0x240>)
 8004062:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004066:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	685b      	ldr	r3, [r3, #4]
 800406c:	2b00      	cmp	r3, #0
 800406e:	d013      	beq.n	8004098 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004070:	f7fd fe12 	bl	8001c98 <HAL_GetTick>
 8004074:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004076:	e008      	b.n	800408a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004078:	f7fd fe0e 	bl	8001c98 <HAL_GetTick>
 800407c:	4602      	mov	r2, r0
 800407e:	693b      	ldr	r3, [r7, #16]
 8004080:	1ad3      	subs	r3, r2, r3
 8004082:	2b64      	cmp	r3, #100	; 0x64
 8004084:	d901      	bls.n	800408a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004086:	2303      	movs	r3, #3
 8004088:	e207      	b.n	800449a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800408a:	4b5b      	ldr	r3, [pc, #364]	; (80041f8 <HAL_RCC_OscConfig+0x240>)
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004092:	2b00      	cmp	r3, #0
 8004094:	d0f0      	beq.n	8004078 <HAL_RCC_OscConfig+0xc0>
 8004096:	e014      	b.n	80040c2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004098:	f7fd fdfe 	bl	8001c98 <HAL_GetTick>
 800409c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800409e:	e008      	b.n	80040b2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80040a0:	f7fd fdfa 	bl	8001c98 <HAL_GetTick>
 80040a4:	4602      	mov	r2, r0
 80040a6:	693b      	ldr	r3, [r7, #16]
 80040a8:	1ad3      	subs	r3, r2, r3
 80040aa:	2b64      	cmp	r3, #100	; 0x64
 80040ac:	d901      	bls.n	80040b2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80040ae:	2303      	movs	r3, #3
 80040b0:	e1f3      	b.n	800449a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80040b2:	4b51      	ldr	r3, [pc, #324]	; (80041f8 <HAL_RCC_OscConfig+0x240>)
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d1f0      	bne.n	80040a0 <HAL_RCC_OscConfig+0xe8>
 80040be:	e000      	b.n	80040c2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80040c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	f003 0302 	and.w	r3, r3, #2
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d063      	beq.n	8004196 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80040ce:	4b4a      	ldr	r3, [pc, #296]	; (80041f8 <HAL_RCC_OscConfig+0x240>)
 80040d0:	689b      	ldr	r3, [r3, #8]
 80040d2:	f003 030c 	and.w	r3, r3, #12
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d00b      	beq.n	80040f2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80040da:	4b47      	ldr	r3, [pc, #284]	; (80041f8 <HAL_RCC_OscConfig+0x240>)
 80040dc:	689b      	ldr	r3, [r3, #8]
 80040de:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80040e2:	2b08      	cmp	r3, #8
 80040e4:	d11c      	bne.n	8004120 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80040e6:	4b44      	ldr	r3, [pc, #272]	; (80041f8 <HAL_RCC_OscConfig+0x240>)
 80040e8:	685b      	ldr	r3, [r3, #4]
 80040ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d116      	bne.n	8004120 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80040f2:	4b41      	ldr	r3, [pc, #260]	; (80041f8 <HAL_RCC_OscConfig+0x240>)
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f003 0302 	and.w	r3, r3, #2
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d005      	beq.n	800410a <HAL_RCC_OscConfig+0x152>
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	68db      	ldr	r3, [r3, #12]
 8004102:	2b01      	cmp	r3, #1
 8004104:	d001      	beq.n	800410a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004106:	2301      	movs	r3, #1
 8004108:	e1c7      	b.n	800449a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800410a:	4b3b      	ldr	r3, [pc, #236]	; (80041f8 <HAL_RCC_OscConfig+0x240>)
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	691b      	ldr	r3, [r3, #16]
 8004116:	00db      	lsls	r3, r3, #3
 8004118:	4937      	ldr	r1, [pc, #220]	; (80041f8 <HAL_RCC_OscConfig+0x240>)
 800411a:	4313      	orrs	r3, r2
 800411c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800411e:	e03a      	b.n	8004196 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	68db      	ldr	r3, [r3, #12]
 8004124:	2b00      	cmp	r3, #0
 8004126:	d020      	beq.n	800416a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004128:	4b34      	ldr	r3, [pc, #208]	; (80041fc <HAL_RCC_OscConfig+0x244>)
 800412a:	2201      	movs	r2, #1
 800412c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800412e:	f7fd fdb3 	bl	8001c98 <HAL_GetTick>
 8004132:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004134:	e008      	b.n	8004148 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004136:	f7fd fdaf 	bl	8001c98 <HAL_GetTick>
 800413a:	4602      	mov	r2, r0
 800413c:	693b      	ldr	r3, [r7, #16]
 800413e:	1ad3      	subs	r3, r2, r3
 8004140:	2b02      	cmp	r3, #2
 8004142:	d901      	bls.n	8004148 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004144:	2303      	movs	r3, #3
 8004146:	e1a8      	b.n	800449a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004148:	4b2b      	ldr	r3, [pc, #172]	; (80041f8 <HAL_RCC_OscConfig+0x240>)
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f003 0302 	and.w	r3, r3, #2
 8004150:	2b00      	cmp	r3, #0
 8004152:	d0f0      	beq.n	8004136 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004154:	4b28      	ldr	r3, [pc, #160]	; (80041f8 <HAL_RCC_OscConfig+0x240>)
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	691b      	ldr	r3, [r3, #16]
 8004160:	00db      	lsls	r3, r3, #3
 8004162:	4925      	ldr	r1, [pc, #148]	; (80041f8 <HAL_RCC_OscConfig+0x240>)
 8004164:	4313      	orrs	r3, r2
 8004166:	600b      	str	r3, [r1, #0]
 8004168:	e015      	b.n	8004196 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800416a:	4b24      	ldr	r3, [pc, #144]	; (80041fc <HAL_RCC_OscConfig+0x244>)
 800416c:	2200      	movs	r2, #0
 800416e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004170:	f7fd fd92 	bl	8001c98 <HAL_GetTick>
 8004174:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004176:	e008      	b.n	800418a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004178:	f7fd fd8e 	bl	8001c98 <HAL_GetTick>
 800417c:	4602      	mov	r2, r0
 800417e:	693b      	ldr	r3, [r7, #16]
 8004180:	1ad3      	subs	r3, r2, r3
 8004182:	2b02      	cmp	r3, #2
 8004184:	d901      	bls.n	800418a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004186:	2303      	movs	r3, #3
 8004188:	e187      	b.n	800449a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800418a:	4b1b      	ldr	r3, [pc, #108]	; (80041f8 <HAL_RCC_OscConfig+0x240>)
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f003 0302 	and.w	r3, r3, #2
 8004192:	2b00      	cmp	r3, #0
 8004194:	d1f0      	bne.n	8004178 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f003 0308 	and.w	r3, r3, #8
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d036      	beq.n	8004210 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	695b      	ldr	r3, [r3, #20]
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d016      	beq.n	80041d8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80041aa:	4b15      	ldr	r3, [pc, #84]	; (8004200 <HAL_RCC_OscConfig+0x248>)
 80041ac:	2201      	movs	r2, #1
 80041ae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041b0:	f7fd fd72 	bl	8001c98 <HAL_GetTick>
 80041b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80041b6:	e008      	b.n	80041ca <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80041b8:	f7fd fd6e 	bl	8001c98 <HAL_GetTick>
 80041bc:	4602      	mov	r2, r0
 80041be:	693b      	ldr	r3, [r7, #16]
 80041c0:	1ad3      	subs	r3, r2, r3
 80041c2:	2b02      	cmp	r3, #2
 80041c4:	d901      	bls.n	80041ca <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80041c6:	2303      	movs	r3, #3
 80041c8:	e167      	b.n	800449a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80041ca:	4b0b      	ldr	r3, [pc, #44]	; (80041f8 <HAL_RCC_OscConfig+0x240>)
 80041cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80041ce:	f003 0302 	and.w	r3, r3, #2
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d0f0      	beq.n	80041b8 <HAL_RCC_OscConfig+0x200>
 80041d6:	e01b      	b.n	8004210 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80041d8:	4b09      	ldr	r3, [pc, #36]	; (8004200 <HAL_RCC_OscConfig+0x248>)
 80041da:	2200      	movs	r2, #0
 80041dc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80041de:	f7fd fd5b 	bl	8001c98 <HAL_GetTick>
 80041e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80041e4:	e00e      	b.n	8004204 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80041e6:	f7fd fd57 	bl	8001c98 <HAL_GetTick>
 80041ea:	4602      	mov	r2, r0
 80041ec:	693b      	ldr	r3, [r7, #16]
 80041ee:	1ad3      	subs	r3, r2, r3
 80041f0:	2b02      	cmp	r3, #2
 80041f2:	d907      	bls.n	8004204 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80041f4:	2303      	movs	r3, #3
 80041f6:	e150      	b.n	800449a <HAL_RCC_OscConfig+0x4e2>
 80041f8:	40023800 	.word	0x40023800
 80041fc:	42470000 	.word	0x42470000
 8004200:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004204:	4b88      	ldr	r3, [pc, #544]	; (8004428 <HAL_RCC_OscConfig+0x470>)
 8004206:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004208:	f003 0302 	and.w	r3, r3, #2
 800420c:	2b00      	cmp	r3, #0
 800420e:	d1ea      	bne.n	80041e6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f003 0304 	and.w	r3, r3, #4
 8004218:	2b00      	cmp	r3, #0
 800421a:	f000 8097 	beq.w	800434c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800421e:	2300      	movs	r3, #0
 8004220:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004222:	4b81      	ldr	r3, [pc, #516]	; (8004428 <HAL_RCC_OscConfig+0x470>)
 8004224:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004226:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800422a:	2b00      	cmp	r3, #0
 800422c:	d10f      	bne.n	800424e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800422e:	2300      	movs	r3, #0
 8004230:	60bb      	str	r3, [r7, #8]
 8004232:	4b7d      	ldr	r3, [pc, #500]	; (8004428 <HAL_RCC_OscConfig+0x470>)
 8004234:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004236:	4a7c      	ldr	r2, [pc, #496]	; (8004428 <HAL_RCC_OscConfig+0x470>)
 8004238:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800423c:	6413      	str	r3, [r2, #64]	; 0x40
 800423e:	4b7a      	ldr	r3, [pc, #488]	; (8004428 <HAL_RCC_OscConfig+0x470>)
 8004240:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004242:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004246:	60bb      	str	r3, [r7, #8]
 8004248:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800424a:	2301      	movs	r3, #1
 800424c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800424e:	4b77      	ldr	r3, [pc, #476]	; (800442c <HAL_RCC_OscConfig+0x474>)
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004256:	2b00      	cmp	r3, #0
 8004258:	d118      	bne.n	800428c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800425a:	4b74      	ldr	r3, [pc, #464]	; (800442c <HAL_RCC_OscConfig+0x474>)
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	4a73      	ldr	r2, [pc, #460]	; (800442c <HAL_RCC_OscConfig+0x474>)
 8004260:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004264:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004266:	f7fd fd17 	bl	8001c98 <HAL_GetTick>
 800426a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800426c:	e008      	b.n	8004280 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800426e:	f7fd fd13 	bl	8001c98 <HAL_GetTick>
 8004272:	4602      	mov	r2, r0
 8004274:	693b      	ldr	r3, [r7, #16]
 8004276:	1ad3      	subs	r3, r2, r3
 8004278:	2b02      	cmp	r3, #2
 800427a:	d901      	bls.n	8004280 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800427c:	2303      	movs	r3, #3
 800427e:	e10c      	b.n	800449a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004280:	4b6a      	ldr	r3, [pc, #424]	; (800442c <HAL_RCC_OscConfig+0x474>)
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004288:	2b00      	cmp	r3, #0
 800428a:	d0f0      	beq.n	800426e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	689b      	ldr	r3, [r3, #8]
 8004290:	2b01      	cmp	r3, #1
 8004292:	d106      	bne.n	80042a2 <HAL_RCC_OscConfig+0x2ea>
 8004294:	4b64      	ldr	r3, [pc, #400]	; (8004428 <HAL_RCC_OscConfig+0x470>)
 8004296:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004298:	4a63      	ldr	r2, [pc, #396]	; (8004428 <HAL_RCC_OscConfig+0x470>)
 800429a:	f043 0301 	orr.w	r3, r3, #1
 800429e:	6713      	str	r3, [r2, #112]	; 0x70
 80042a0:	e01c      	b.n	80042dc <HAL_RCC_OscConfig+0x324>
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	689b      	ldr	r3, [r3, #8]
 80042a6:	2b05      	cmp	r3, #5
 80042a8:	d10c      	bne.n	80042c4 <HAL_RCC_OscConfig+0x30c>
 80042aa:	4b5f      	ldr	r3, [pc, #380]	; (8004428 <HAL_RCC_OscConfig+0x470>)
 80042ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042ae:	4a5e      	ldr	r2, [pc, #376]	; (8004428 <HAL_RCC_OscConfig+0x470>)
 80042b0:	f043 0304 	orr.w	r3, r3, #4
 80042b4:	6713      	str	r3, [r2, #112]	; 0x70
 80042b6:	4b5c      	ldr	r3, [pc, #368]	; (8004428 <HAL_RCC_OscConfig+0x470>)
 80042b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042ba:	4a5b      	ldr	r2, [pc, #364]	; (8004428 <HAL_RCC_OscConfig+0x470>)
 80042bc:	f043 0301 	orr.w	r3, r3, #1
 80042c0:	6713      	str	r3, [r2, #112]	; 0x70
 80042c2:	e00b      	b.n	80042dc <HAL_RCC_OscConfig+0x324>
 80042c4:	4b58      	ldr	r3, [pc, #352]	; (8004428 <HAL_RCC_OscConfig+0x470>)
 80042c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042c8:	4a57      	ldr	r2, [pc, #348]	; (8004428 <HAL_RCC_OscConfig+0x470>)
 80042ca:	f023 0301 	bic.w	r3, r3, #1
 80042ce:	6713      	str	r3, [r2, #112]	; 0x70
 80042d0:	4b55      	ldr	r3, [pc, #340]	; (8004428 <HAL_RCC_OscConfig+0x470>)
 80042d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042d4:	4a54      	ldr	r2, [pc, #336]	; (8004428 <HAL_RCC_OscConfig+0x470>)
 80042d6:	f023 0304 	bic.w	r3, r3, #4
 80042da:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	689b      	ldr	r3, [r3, #8]
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d015      	beq.n	8004310 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042e4:	f7fd fcd8 	bl	8001c98 <HAL_GetTick>
 80042e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80042ea:	e00a      	b.n	8004302 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80042ec:	f7fd fcd4 	bl	8001c98 <HAL_GetTick>
 80042f0:	4602      	mov	r2, r0
 80042f2:	693b      	ldr	r3, [r7, #16]
 80042f4:	1ad3      	subs	r3, r2, r3
 80042f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80042fa:	4293      	cmp	r3, r2
 80042fc:	d901      	bls.n	8004302 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80042fe:	2303      	movs	r3, #3
 8004300:	e0cb      	b.n	800449a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004302:	4b49      	ldr	r3, [pc, #292]	; (8004428 <HAL_RCC_OscConfig+0x470>)
 8004304:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004306:	f003 0302 	and.w	r3, r3, #2
 800430a:	2b00      	cmp	r3, #0
 800430c:	d0ee      	beq.n	80042ec <HAL_RCC_OscConfig+0x334>
 800430e:	e014      	b.n	800433a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004310:	f7fd fcc2 	bl	8001c98 <HAL_GetTick>
 8004314:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004316:	e00a      	b.n	800432e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004318:	f7fd fcbe 	bl	8001c98 <HAL_GetTick>
 800431c:	4602      	mov	r2, r0
 800431e:	693b      	ldr	r3, [r7, #16]
 8004320:	1ad3      	subs	r3, r2, r3
 8004322:	f241 3288 	movw	r2, #5000	; 0x1388
 8004326:	4293      	cmp	r3, r2
 8004328:	d901      	bls.n	800432e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800432a:	2303      	movs	r3, #3
 800432c:	e0b5      	b.n	800449a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800432e:	4b3e      	ldr	r3, [pc, #248]	; (8004428 <HAL_RCC_OscConfig+0x470>)
 8004330:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004332:	f003 0302 	and.w	r3, r3, #2
 8004336:	2b00      	cmp	r3, #0
 8004338:	d1ee      	bne.n	8004318 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800433a:	7dfb      	ldrb	r3, [r7, #23]
 800433c:	2b01      	cmp	r3, #1
 800433e:	d105      	bne.n	800434c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004340:	4b39      	ldr	r3, [pc, #228]	; (8004428 <HAL_RCC_OscConfig+0x470>)
 8004342:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004344:	4a38      	ldr	r2, [pc, #224]	; (8004428 <HAL_RCC_OscConfig+0x470>)
 8004346:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800434a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	699b      	ldr	r3, [r3, #24]
 8004350:	2b00      	cmp	r3, #0
 8004352:	f000 80a1 	beq.w	8004498 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004356:	4b34      	ldr	r3, [pc, #208]	; (8004428 <HAL_RCC_OscConfig+0x470>)
 8004358:	689b      	ldr	r3, [r3, #8]
 800435a:	f003 030c 	and.w	r3, r3, #12
 800435e:	2b08      	cmp	r3, #8
 8004360:	d05c      	beq.n	800441c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	699b      	ldr	r3, [r3, #24]
 8004366:	2b02      	cmp	r3, #2
 8004368:	d141      	bne.n	80043ee <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800436a:	4b31      	ldr	r3, [pc, #196]	; (8004430 <HAL_RCC_OscConfig+0x478>)
 800436c:	2200      	movs	r2, #0
 800436e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004370:	f7fd fc92 	bl	8001c98 <HAL_GetTick>
 8004374:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004376:	e008      	b.n	800438a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004378:	f7fd fc8e 	bl	8001c98 <HAL_GetTick>
 800437c:	4602      	mov	r2, r0
 800437e:	693b      	ldr	r3, [r7, #16]
 8004380:	1ad3      	subs	r3, r2, r3
 8004382:	2b02      	cmp	r3, #2
 8004384:	d901      	bls.n	800438a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004386:	2303      	movs	r3, #3
 8004388:	e087      	b.n	800449a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800438a:	4b27      	ldr	r3, [pc, #156]	; (8004428 <HAL_RCC_OscConfig+0x470>)
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004392:	2b00      	cmp	r3, #0
 8004394:	d1f0      	bne.n	8004378 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	69da      	ldr	r2, [r3, #28]
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	6a1b      	ldr	r3, [r3, #32]
 800439e:	431a      	orrs	r2, r3
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043a4:	019b      	lsls	r3, r3, #6
 80043a6:	431a      	orrs	r2, r3
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043ac:	085b      	lsrs	r3, r3, #1
 80043ae:	3b01      	subs	r3, #1
 80043b0:	041b      	lsls	r3, r3, #16
 80043b2:	431a      	orrs	r2, r3
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043b8:	061b      	lsls	r3, r3, #24
 80043ba:	491b      	ldr	r1, [pc, #108]	; (8004428 <HAL_RCC_OscConfig+0x470>)
 80043bc:	4313      	orrs	r3, r2
 80043be:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80043c0:	4b1b      	ldr	r3, [pc, #108]	; (8004430 <HAL_RCC_OscConfig+0x478>)
 80043c2:	2201      	movs	r2, #1
 80043c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043c6:	f7fd fc67 	bl	8001c98 <HAL_GetTick>
 80043ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80043cc:	e008      	b.n	80043e0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80043ce:	f7fd fc63 	bl	8001c98 <HAL_GetTick>
 80043d2:	4602      	mov	r2, r0
 80043d4:	693b      	ldr	r3, [r7, #16]
 80043d6:	1ad3      	subs	r3, r2, r3
 80043d8:	2b02      	cmp	r3, #2
 80043da:	d901      	bls.n	80043e0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80043dc:	2303      	movs	r3, #3
 80043de:	e05c      	b.n	800449a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80043e0:	4b11      	ldr	r3, [pc, #68]	; (8004428 <HAL_RCC_OscConfig+0x470>)
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d0f0      	beq.n	80043ce <HAL_RCC_OscConfig+0x416>
 80043ec:	e054      	b.n	8004498 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80043ee:	4b10      	ldr	r3, [pc, #64]	; (8004430 <HAL_RCC_OscConfig+0x478>)
 80043f0:	2200      	movs	r2, #0
 80043f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043f4:	f7fd fc50 	bl	8001c98 <HAL_GetTick>
 80043f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80043fa:	e008      	b.n	800440e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80043fc:	f7fd fc4c 	bl	8001c98 <HAL_GetTick>
 8004400:	4602      	mov	r2, r0
 8004402:	693b      	ldr	r3, [r7, #16]
 8004404:	1ad3      	subs	r3, r2, r3
 8004406:	2b02      	cmp	r3, #2
 8004408:	d901      	bls.n	800440e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800440a:	2303      	movs	r3, #3
 800440c:	e045      	b.n	800449a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800440e:	4b06      	ldr	r3, [pc, #24]	; (8004428 <HAL_RCC_OscConfig+0x470>)
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004416:	2b00      	cmp	r3, #0
 8004418:	d1f0      	bne.n	80043fc <HAL_RCC_OscConfig+0x444>
 800441a:	e03d      	b.n	8004498 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	699b      	ldr	r3, [r3, #24]
 8004420:	2b01      	cmp	r3, #1
 8004422:	d107      	bne.n	8004434 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004424:	2301      	movs	r3, #1
 8004426:	e038      	b.n	800449a <HAL_RCC_OscConfig+0x4e2>
 8004428:	40023800 	.word	0x40023800
 800442c:	40007000 	.word	0x40007000
 8004430:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004434:	4b1b      	ldr	r3, [pc, #108]	; (80044a4 <HAL_RCC_OscConfig+0x4ec>)
 8004436:	685b      	ldr	r3, [r3, #4]
 8004438:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	699b      	ldr	r3, [r3, #24]
 800443e:	2b01      	cmp	r3, #1
 8004440:	d028      	beq.n	8004494 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800444c:	429a      	cmp	r2, r3
 800444e:	d121      	bne.n	8004494 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800445a:	429a      	cmp	r2, r3
 800445c:	d11a      	bne.n	8004494 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800445e:	68fa      	ldr	r2, [r7, #12]
 8004460:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004464:	4013      	ands	r3, r2
 8004466:	687a      	ldr	r2, [r7, #4]
 8004468:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800446a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800446c:	4293      	cmp	r3, r2
 800446e:	d111      	bne.n	8004494 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800447a:	085b      	lsrs	r3, r3, #1
 800447c:	3b01      	subs	r3, #1
 800447e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004480:	429a      	cmp	r2, r3
 8004482:	d107      	bne.n	8004494 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800448e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004490:	429a      	cmp	r2, r3
 8004492:	d001      	beq.n	8004498 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004494:	2301      	movs	r3, #1
 8004496:	e000      	b.n	800449a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004498:	2300      	movs	r3, #0
}
 800449a:	4618      	mov	r0, r3
 800449c:	3718      	adds	r7, #24
 800449e:	46bd      	mov	sp, r7
 80044a0:	bd80      	pop	{r7, pc}
 80044a2:	bf00      	nop
 80044a4:	40023800 	.word	0x40023800

080044a8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80044a8:	b580      	push	{r7, lr}
 80044aa:	b084      	sub	sp, #16
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	6078      	str	r0, [r7, #4]
 80044b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d101      	bne.n	80044bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80044b8:	2301      	movs	r3, #1
 80044ba:	e0cc      	b.n	8004656 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80044bc:	4b68      	ldr	r3, [pc, #416]	; (8004660 <HAL_RCC_ClockConfig+0x1b8>)
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	f003 0307 	and.w	r3, r3, #7
 80044c4:	683a      	ldr	r2, [r7, #0]
 80044c6:	429a      	cmp	r2, r3
 80044c8:	d90c      	bls.n	80044e4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80044ca:	4b65      	ldr	r3, [pc, #404]	; (8004660 <HAL_RCC_ClockConfig+0x1b8>)
 80044cc:	683a      	ldr	r2, [r7, #0]
 80044ce:	b2d2      	uxtb	r2, r2
 80044d0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80044d2:	4b63      	ldr	r3, [pc, #396]	; (8004660 <HAL_RCC_ClockConfig+0x1b8>)
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f003 0307 	and.w	r3, r3, #7
 80044da:	683a      	ldr	r2, [r7, #0]
 80044dc:	429a      	cmp	r2, r3
 80044de:	d001      	beq.n	80044e4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80044e0:	2301      	movs	r3, #1
 80044e2:	e0b8      	b.n	8004656 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f003 0302 	and.w	r3, r3, #2
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d020      	beq.n	8004532 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	f003 0304 	and.w	r3, r3, #4
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d005      	beq.n	8004508 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80044fc:	4b59      	ldr	r3, [pc, #356]	; (8004664 <HAL_RCC_ClockConfig+0x1bc>)
 80044fe:	689b      	ldr	r3, [r3, #8]
 8004500:	4a58      	ldr	r2, [pc, #352]	; (8004664 <HAL_RCC_ClockConfig+0x1bc>)
 8004502:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004506:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	f003 0308 	and.w	r3, r3, #8
 8004510:	2b00      	cmp	r3, #0
 8004512:	d005      	beq.n	8004520 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004514:	4b53      	ldr	r3, [pc, #332]	; (8004664 <HAL_RCC_ClockConfig+0x1bc>)
 8004516:	689b      	ldr	r3, [r3, #8]
 8004518:	4a52      	ldr	r2, [pc, #328]	; (8004664 <HAL_RCC_ClockConfig+0x1bc>)
 800451a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800451e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004520:	4b50      	ldr	r3, [pc, #320]	; (8004664 <HAL_RCC_ClockConfig+0x1bc>)
 8004522:	689b      	ldr	r3, [r3, #8]
 8004524:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	689b      	ldr	r3, [r3, #8]
 800452c:	494d      	ldr	r1, [pc, #308]	; (8004664 <HAL_RCC_ClockConfig+0x1bc>)
 800452e:	4313      	orrs	r3, r2
 8004530:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f003 0301 	and.w	r3, r3, #1
 800453a:	2b00      	cmp	r3, #0
 800453c:	d044      	beq.n	80045c8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	685b      	ldr	r3, [r3, #4]
 8004542:	2b01      	cmp	r3, #1
 8004544:	d107      	bne.n	8004556 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004546:	4b47      	ldr	r3, [pc, #284]	; (8004664 <HAL_RCC_ClockConfig+0x1bc>)
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800454e:	2b00      	cmp	r3, #0
 8004550:	d119      	bne.n	8004586 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004552:	2301      	movs	r3, #1
 8004554:	e07f      	b.n	8004656 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	685b      	ldr	r3, [r3, #4]
 800455a:	2b02      	cmp	r3, #2
 800455c:	d003      	beq.n	8004566 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004562:	2b03      	cmp	r3, #3
 8004564:	d107      	bne.n	8004576 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004566:	4b3f      	ldr	r3, [pc, #252]	; (8004664 <HAL_RCC_ClockConfig+0x1bc>)
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800456e:	2b00      	cmp	r3, #0
 8004570:	d109      	bne.n	8004586 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004572:	2301      	movs	r3, #1
 8004574:	e06f      	b.n	8004656 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004576:	4b3b      	ldr	r3, [pc, #236]	; (8004664 <HAL_RCC_ClockConfig+0x1bc>)
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f003 0302 	and.w	r3, r3, #2
 800457e:	2b00      	cmp	r3, #0
 8004580:	d101      	bne.n	8004586 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004582:	2301      	movs	r3, #1
 8004584:	e067      	b.n	8004656 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004586:	4b37      	ldr	r3, [pc, #220]	; (8004664 <HAL_RCC_ClockConfig+0x1bc>)
 8004588:	689b      	ldr	r3, [r3, #8]
 800458a:	f023 0203 	bic.w	r2, r3, #3
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	685b      	ldr	r3, [r3, #4]
 8004592:	4934      	ldr	r1, [pc, #208]	; (8004664 <HAL_RCC_ClockConfig+0x1bc>)
 8004594:	4313      	orrs	r3, r2
 8004596:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004598:	f7fd fb7e 	bl	8001c98 <HAL_GetTick>
 800459c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800459e:	e00a      	b.n	80045b6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80045a0:	f7fd fb7a 	bl	8001c98 <HAL_GetTick>
 80045a4:	4602      	mov	r2, r0
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	1ad3      	subs	r3, r2, r3
 80045aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80045ae:	4293      	cmp	r3, r2
 80045b0:	d901      	bls.n	80045b6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80045b2:	2303      	movs	r3, #3
 80045b4:	e04f      	b.n	8004656 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80045b6:	4b2b      	ldr	r3, [pc, #172]	; (8004664 <HAL_RCC_ClockConfig+0x1bc>)
 80045b8:	689b      	ldr	r3, [r3, #8]
 80045ba:	f003 020c 	and.w	r2, r3, #12
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	685b      	ldr	r3, [r3, #4]
 80045c2:	009b      	lsls	r3, r3, #2
 80045c4:	429a      	cmp	r2, r3
 80045c6:	d1eb      	bne.n	80045a0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80045c8:	4b25      	ldr	r3, [pc, #148]	; (8004660 <HAL_RCC_ClockConfig+0x1b8>)
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	f003 0307 	and.w	r3, r3, #7
 80045d0:	683a      	ldr	r2, [r7, #0]
 80045d2:	429a      	cmp	r2, r3
 80045d4:	d20c      	bcs.n	80045f0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80045d6:	4b22      	ldr	r3, [pc, #136]	; (8004660 <HAL_RCC_ClockConfig+0x1b8>)
 80045d8:	683a      	ldr	r2, [r7, #0]
 80045da:	b2d2      	uxtb	r2, r2
 80045dc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80045de:	4b20      	ldr	r3, [pc, #128]	; (8004660 <HAL_RCC_ClockConfig+0x1b8>)
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	f003 0307 	and.w	r3, r3, #7
 80045e6:	683a      	ldr	r2, [r7, #0]
 80045e8:	429a      	cmp	r2, r3
 80045ea:	d001      	beq.n	80045f0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80045ec:	2301      	movs	r3, #1
 80045ee:	e032      	b.n	8004656 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f003 0304 	and.w	r3, r3, #4
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d008      	beq.n	800460e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80045fc:	4b19      	ldr	r3, [pc, #100]	; (8004664 <HAL_RCC_ClockConfig+0x1bc>)
 80045fe:	689b      	ldr	r3, [r3, #8]
 8004600:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	68db      	ldr	r3, [r3, #12]
 8004608:	4916      	ldr	r1, [pc, #88]	; (8004664 <HAL_RCC_ClockConfig+0x1bc>)
 800460a:	4313      	orrs	r3, r2
 800460c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f003 0308 	and.w	r3, r3, #8
 8004616:	2b00      	cmp	r3, #0
 8004618:	d009      	beq.n	800462e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800461a:	4b12      	ldr	r3, [pc, #72]	; (8004664 <HAL_RCC_ClockConfig+0x1bc>)
 800461c:	689b      	ldr	r3, [r3, #8]
 800461e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	691b      	ldr	r3, [r3, #16]
 8004626:	00db      	lsls	r3, r3, #3
 8004628:	490e      	ldr	r1, [pc, #56]	; (8004664 <HAL_RCC_ClockConfig+0x1bc>)
 800462a:	4313      	orrs	r3, r2
 800462c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800462e:	f000 f821 	bl	8004674 <HAL_RCC_GetSysClockFreq>
 8004632:	4602      	mov	r2, r0
 8004634:	4b0b      	ldr	r3, [pc, #44]	; (8004664 <HAL_RCC_ClockConfig+0x1bc>)
 8004636:	689b      	ldr	r3, [r3, #8]
 8004638:	091b      	lsrs	r3, r3, #4
 800463a:	f003 030f 	and.w	r3, r3, #15
 800463e:	490a      	ldr	r1, [pc, #40]	; (8004668 <HAL_RCC_ClockConfig+0x1c0>)
 8004640:	5ccb      	ldrb	r3, [r1, r3]
 8004642:	fa22 f303 	lsr.w	r3, r2, r3
 8004646:	4a09      	ldr	r2, [pc, #36]	; (800466c <HAL_RCC_ClockConfig+0x1c4>)
 8004648:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800464a:	4b09      	ldr	r3, [pc, #36]	; (8004670 <HAL_RCC_ClockConfig+0x1c8>)
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	4618      	mov	r0, r3
 8004650:	f7fd fade 	bl	8001c10 <HAL_InitTick>

  return HAL_OK;
 8004654:	2300      	movs	r3, #0
}
 8004656:	4618      	mov	r0, r3
 8004658:	3710      	adds	r7, #16
 800465a:	46bd      	mov	sp, r7
 800465c:	bd80      	pop	{r7, pc}
 800465e:	bf00      	nop
 8004660:	40023c00 	.word	0x40023c00
 8004664:	40023800 	.word	0x40023800
 8004668:	0800be74 	.word	0x0800be74
 800466c:	20000010 	.word	0x20000010
 8004670:	20000014 	.word	0x20000014

08004674 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004674:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004678:	b090      	sub	sp, #64	; 0x40
 800467a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800467c:	2300      	movs	r3, #0
 800467e:	637b      	str	r3, [r7, #52]	; 0x34
 8004680:	2300      	movs	r3, #0
 8004682:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004684:	2300      	movs	r3, #0
 8004686:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8004688:	2300      	movs	r3, #0
 800468a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800468c:	4b59      	ldr	r3, [pc, #356]	; (80047f4 <HAL_RCC_GetSysClockFreq+0x180>)
 800468e:	689b      	ldr	r3, [r3, #8]
 8004690:	f003 030c 	and.w	r3, r3, #12
 8004694:	2b08      	cmp	r3, #8
 8004696:	d00d      	beq.n	80046b4 <HAL_RCC_GetSysClockFreq+0x40>
 8004698:	2b08      	cmp	r3, #8
 800469a:	f200 80a1 	bhi.w	80047e0 <HAL_RCC_GetSysClockFreq+0x16c>
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d002      	beq.n	80046a8 <HAL_RCC_GetSysClockFreq+0x34>
 80046a2:	2b04      	cmp	r3, #4
 80046a4:	d003      	beq.n	80046ae <HAL_RCC_GetSysClockFreq+0x3a>
 80046a6:	e09b      	b.n	80047e0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80046a8:	4b53      	ldr	r3, [pc, #332]	; (80047f8 <HAL_RCC_GetSysClockFreq+0x184>)
 80046aa:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80046ac:	e09b      	b.n	80047e6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80046ae:	4b53      	ldr	r3, [pc, #332]	; (80047fc <HAL_RCC_GetSysClockFreq+0x188>)
 80046b0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80046b2:	e098      	b.n	80047e6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80046b4:	4b4f      	ldr	r3, [pc, #316]	; (80047f4 <HAL_RCC_GetSysClockFreq+0x180>)
 80046b6:	685b      	ldr	r3, [r3, #4]
 80046b8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80046bc:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80046be:	4b4d      	ldr	r3, [pc, #308]	; (80047f4 <HAL_RCC_GetSysClockFreq+0x180>)
 80046c0:	685b      	ldr	r3, [r3, #4]
 80046c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d028      	beq.n	800471c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80046ca:	4b4a      	ldr	r3, [pc, #296]	; (80047f4 <HAL_RCC_GetSysClockFreq+0x180>)
 80046cc:	685b      	ldr	r3, [r3, #4]
 80046ce:	099b      	lsrs	r3, r3, #6
 80046d0:	2200      	movs	r2, #0
 80046d2:	623b      	str	r3, [r7, #32]
 80046d4:	627a      	str	r2, [r7, #36]	; 0x24
 80046d6:	6a3b      	ldr	r3, [r7, #32]
 80046d8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80046dc:	2100      	movs	r1, #0
 80046de:	4b47      	ldr	r3, [pc, #284]	; (80047fc <HAL_RCC_GetSysClockFreq+0x188>)
 80046e0:	fb03 f201 	mul.w	r2, r3, r1
 80046e4:	2300      	movs	r3, #0
 80046e6:	fb00 f303 	mul.w	r3, r0, r3
 80046ea:	4413      	add	r3, r2
 80046ec:	4a43      	ldr	r2, [pc, #268]	; (80047fc <HAL_RCC_GetSysClockFreq+0x188>)
 80046ee:	fba0 1202 	umull	r1, r2, r0, r2
 80046f2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80046f4:	460a      	mov	r2, r1
 80046f6:	62ba      	str	r2, [r7, #40]	; 0x28
 80046f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80046fa:	4413      	add	r3, r2
 80046fc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80046fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004700:	2200      	movs	r2, #0
 8004702:	61bb      	str	r3, [r7, #24]
 8004704:	61fa      	str	r2, [r7, #28]
 8004706:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800470a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800470e:	f7fb fd5b 	bl	80001c8 <__aeabi_uldivmod>
 8004712:	4602      	mov	r2, r0
 8004714:	460b      	mov	r3, r1
 8004716:	4613      	mov	r3, r2
 8004718:	63fb      	str	r3, [r7, #60]	; 0x3c
 800471a:	e053      	b.n	80047c4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800471c:	4b35      	ldr	r3, [pc, #212]	; (80047f4 <HAL_RCC_GetSysClockFreq+0x180>)
 800471e:	685b      	ldr	r3, [r3, #4]
 8004720:	099b      	lsrs	r3, r3, #6
 8004722:	2200      	movs	r2, #0
 8004724:	613b      	str	r3, [r7, #16]
 8004726:	617a      	str	r2, [r7, #20]
 8004728:	693b      	ldr	r3, [r7, #16]
 800472a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800472e:	f04f 0b00 	mov.w	fp, #0
 8004732:	4652      	mov	r2, sl
 8004734:	465b      	mov	r3, fp
 8004736:	f04f 0000 	mov.w	r0, #0
 800473a:	f04f 0100 	mov.w	r1, #0
 800473e:	0159      	lsls	r1, r3, #5
 8004740:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004744:	0150      	lsls	r0, r2, #5
 8004746:	4602      	mov	r2, r0
 8004748:	460b      	mov	r3, r1
 800474a:	ebb2 080a 	subs.w	r8, r2, sl
 800474e:	eb63 090b 	sbc.w	r9, r3, fp
 8004752:	f04f 0200 	mov.w	r2, #0
 8004756:	f04f 0300 	mov.w	r3, #0
 800475a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800475e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8004762:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8004766:	ebb2 0408 	subs.w	r4, r2, r8
 800476a:	eb63 0509 	sbc.w	r5, r3, r9
 800476e:	f04f 0200 	mov.w	r2, #0
 8004772:	f04f 0300 	mov.w	r3, #0
 8004776:	00eb      	lsls	r3, r5, #3
 8004778:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800477c:	00e2      	lsls	r2, r4, #3
 800477e:	4614      	mov	r4, r2
 8004780:	461d      	mov	r5, r3
 8004782:	eb14 030a 	adds.w	r3, r4, sl
 8004786:	603b      	str	r3, [r7, #0]
 8004788:	eb45 030b 	adc.w	r3, r5, fp
 800478c:	607b      	str	r3, [r7, #4]
 800478e:	f04f 0200 	mov.w	r2, #0
 8004792:	f04f 0300 	mov.w	r3, #0
 8004796:	e9d7 4500 	ldrd	r4, r5, [r7]
 800479a:	4629      	mov	r1, r5
 800479c:	028b      	lsls	r3, r1, #10
 800479e:	4621      	mov	r1, r4
 80047a0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80047a4:	4621      	mov	r1, r4
 80047a6:	028a      	lsls	r2, r1, #10
 80047a8:	4610      	mov	r0, r2
 80047aa:	4619      	mov	r1, r3
 80047ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047ae:	2200      	movs	r2, #0
 80047b0:	60bb      	str	r3, [r7, #8]
 80047b2:	60fa      	str	r2, [r7, #12]
 80047b4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80047b8:	f7fb fd06 	bl	80001c8 <__aeabi_uldivmod>
 80047bc:	4602      	mov	r2, r0
 80047be:	460b      	mov	r3, r1
 80047c0:	4613      	mov	r3, r2
 80047c2:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80047c4:	4b0b      	ldr	r3, [pc, #44]	; (80047f4 <HAL_RCC_GetSysClockFreq+0x180>)
 80047c6:	685b      	ldr	r3, [r3, #4]
 80047c8:	0c1b      	lsrs	r3, r3, #16
 80047ca:	f003 0303 	and.w	r3, r3, #3
 80047ce:	3301      	adds	r3, #1
 80047d0:	005b      	lsls	r3, r3, #1
 80047d2:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80047d4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80047d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80047dc:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80047de:	e002      	b.n	80047e6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80047e0:	4b05      	ldr	r3, [pc, #20]	; (80047f8 <HAL_RCC_GetSysClockFreq+0x184>)
 80047e2:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80047e4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80047e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80047e8:	4618      	mov	r0, r3
 80047ea:	3740      	adds	r7, #64	; 0x40
 80047ec:	46bd      	mov	sp, r7
 80047ee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80047f2:	bf00      	nop
 80047f4:	40023800 	.word	0x40023800
 80047f8:	00f42400 	.word	0x00f42400
 80047fc:	016e3600 	.word	0x016e3600

08004800 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004800:	b480      	push	{r7}
 8004802:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004804:	4b03      	ldr	r3, [pc, #12]	; (8004814 <HAL_RCC_GetHCLKFreq+0x14>)
 8004806:	681b      	ldr	r3, [r3, #0]
}
 8004808:	4618      	mov	r0, r3
 800480a:	46bd      	mov	sp, r7
 800480c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004810:	4770      	bx	lr
 8004812:	bf00      	nop
 8004814:	20000010 	.word	0x20000010

08004818 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004818:	b580      	push	{r7, lr}
 800481a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800481c:	f7ff fff0 	bl	8004800 <HAL_RCC_GetHCLKFreq>
 8004820:	4602      	mov	r2, r0
 8004822:	4b05      	ldr	r3, [pc, #20]	; (8004838 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004824:	689b      	ldr	r3, [r3, #8]
 8004826:	0a9b      	lsrs	r3, r3, #10
 8004828:	f003 0307 	and.w	r3, r3, #7
 800482c:	4903      	ldr	r1, [pc, #12]	; (800483c <HAL_RCC_GetPCLK1Freq+0x24>)
 800482e:	5ccb      	ldrb	r3, [r1, r3]
 8004830:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004834:	4618      	mov	r0, r3
 8004836:	bd80      	pop	{r7, pc}
 8004838:	40023800 	.word	0x40023800
 800483c:	0800be84 	.word	0x0800be84

08004840 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004840:	b580      	push	{r7, lr}
 8004842:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004844:	f7ff ffdc 	bl	8004800 <HAL_RCC_GetHCLKFreq>
 8004848:	4602      	mov	r2, r0
 800484a:	4b05      	ldr	r3, [pc, #20]	; (8004860 <HAL_RCC_GetPCLK2Freq+0x20>)
 800484c:	689b      	ldr	r3, [r3, #8]
 800484e:	0b5b      	lsrs	r3, r3, #13
 8004850:	f003 0307 	and.w	r3, r3, #7
 8004854:	4903      	ldr	r1, [pc, #12]	; (8004864 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004856:	5ccb      	ldrb	r3, [r1, r3]
 8004858:	fa22 f303 	lsr.w	r3, r2, r3
}
 800485c:	4618      	mov	r0, r3
 800485e:	bd80      	pop	{r7, pc}
 8004860:	40023800 	.word	0x40023800
 8004864:	0800be84 	.word	0x0800be84

08004868 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004868:	b580      	push	{r7, lr}
 800486a:	b082      	sub	sp, #8
 800486c:	af00      	add	r7, sp, #0
 800486e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	2b00      	cmp	r3, #0
 8004874:	d101      	bne.n	800487a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004876:	2301      	movs	r3, #1
 8004878:	e07b      	b.n	8004972 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800487e:	2b00      	cmp	r3, #0
 8004880:	d108      	bne.n	8004894 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	685b      	ldr	r3, [r3, #4]
 8004886:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800488a:	d009      	beq.n	80048a0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	2200      	movs	r2, #0
 8004890:	61da      	str	r2, [r3, #28]
 8004892:	e005      	b.n	80048a0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	2200      	movs	r2, #0
 8004898:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	2200      	movs	r2, #0
 800489e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	2200      	movs	r2, #0
 80048a4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80048ac:	b2db      	uxtb	r3, r3
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d106      	bne.n	80048c0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	2200      	movs	r2, #0
 80048b6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80048ba:	6878      	ldr	r0, [r7, #4]
 80048bc:	f7fc ff78 	bl	80017b0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	2202      	movs	r2, #2
 80048c4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	681a      	ldr	r2, [r3, #0]
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80048d6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	685b      	ldr	r3, [r3, #4]
 80048dc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	689b      	ldr	r3, [r3, #8]
 80048e4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80048e8:	431a      	orrs	r2, r3
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	68db      	ldr	r3, [r3, #12]
 80048ee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80048f2:	431a      	orrs	r2, r3
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	691b      	ldr	r3, [r3, #16]
 80048f8:	f003 0302 	and.w	r3, r3, #2
 80048fc:	431a      	orrs	r2, r3
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	695b      	ldr	r3, [r3, #20]
 8004902:	f003 0301 	and.w	r3, r3, #1
 8004906:	431a      	orrs	r2, r3
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	699b      	ldr	r3, [r3, #24]
 800490c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004910:	431a      	orrs	r2, r3
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	69db      	ldr	r3, [r3, #28]
 8004916:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800491a:	431a      	orrs	r2, r3
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	6a1b      	ldr	r3, [r3, #32]
 8004920:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004924:	ea42 0103 	orr.w	r1, r2, r3
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800492c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	430a      	orrs	r2, r1
 8004936:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	699b      	ldr	r3, [r3, #24]
 800493c:	0c1b      	lsrs	r3, r3, #16
 800493e:	f003 0104 	and.w	r1, r3, #4
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004946:	f003 0210 	and.w	r2, r3, #16
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	430a      	orrs	r2, r1
 8004950:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	69da      	ldr	r2, [r3, #28]
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004960:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	2200      	movs	r2, #0
 8004966:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	2201      	movs	r2, #1
 800496c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004970:	2300      	movs	r3, #0
}
 8004972:	4618      	mov	r0, r3
 8004974:	3708      	adds	r7, #8
 8004976:	46bd      	mov	sp, r7
 8004978:	bd80      	pop	{r7, pc}

0800497a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800497a:	b580      	push	{r7, lr}
 800497c:	b088      	sub	sp, #32
 800497e:	af00      	add	r7, sp, #0
 8004980:	60f8      	str	r0, [r7, #12]
 8004982:	60b9      	str	r1, [r7, #8]
 8004984:	603b      	str	r3, [r7, #0]
 8004986:	4613      	mov	r3, r2
 8004988:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800498a:	2300      	movs	r3, #0
 800498c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004994:	2b01      	cmp	r3, #1
 8004996:	d101      	bne.n	800499c <HAL_SPI_Transmit+0x22>
 8004998:	2302      	movs	r3, #2
 800499a:	e126      	b.n	8004bea <HAL_SPI_Transmit+0x270>
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	2201      	movs	r2, #1
 80049a0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80049a4:	f7fd f978 	bl	8001c98 <HAL_GetTick>
 80049a8:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80049aa:	88fb      	ldrh	r3, [r7, #6]
 80049ac:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80049b4:	b2db      	uxtb	r3, r3
 80049b6:	2b01      	cmp	r3, #1
 80049b8:	d002      	beq.n	80049c0 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80049ba:	2302      	movs	r3, #2
 80049bc:	77fb      	strb	r3, [r7, #31]
    goto error;
 80049be:	e10b      	b.n	8004bd8 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80049c0:	68bb      	ldr	r3, [r7, #8]
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d002      	beq.n	80049cc <HAL_SPI_Transmit+0x52>
 80049c6:	88fb      	ldrh	r3, [r7, #6]
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d102      	bne.n	80049d2 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80049cc:	2301      	movs	r3, #1
 80049ce:	77fb      	strb	r3, [r7, #31]
    goto error;
 80049d0:	e102      	b.n	8004bd8 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	2203      	movs	r2, #3
 80049d6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	2200      	movs	r2, #0
 80049de:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	68ba      	ldr	r2, [r7, #8]
 80049e4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	88fa      	ldrh	r2, [r7, #6]
 80049ea:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	88fa      	ldrh	r2, [r7, #6]
 80049f0:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	2200      	movs	r2, #0
 80049f6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	2200      	movs	r2, #0
 80049fc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	2200      	movs	r2, #0
 8004a02:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	2200      	movs	r2, #0
 8004a08:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	2200      	movs	r2, #0
 8004a0e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	689b      	ldr	r3, [r3, #8]
 8004a14:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004a18:	d10f      	bne.n	8004a3a <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	681a      	ldr	r2, [r3, #0]
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004a28:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	681a      	ldr	r2, [r3, #0]
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004a38:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a44:	2b40      	cmp	r3, #64	; 0x40
 8004a46:	d007      	beq.n	8004a58 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	681a      	ldr	r2, [r3, #0]
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004a56:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	68db      	ldr	r3, [r3, #12]
 8004a5c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004a60:	d14b      	bne.n	8004afa <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	685b      	ldr	r3, [r3, #4]
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d002      	beq.n	8004a70 <HAL_SPI_Transmit+0xf6>
 8004a6a:	8afb      	ldrh	r3, [r7, #22]
 8004a6c:	2b01      	cmp	r3, #1
 8004a6e:	d13e      	bne.n	8004aee <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a74:	881a      	ldrh	r2, [r3, #0]
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a80:	1c9a      	adds	r2, r3, #2
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004a8a:	b29b      	uxth	r3, r3
 8004a8c:	3b01      	subs	r3, #1
 8004a8e:	b29a      	uxth	r2, r3
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004a94:	e02b      	b.n	8004aee <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	689b      	ldr	r3, [r3, #8]
 8004a9c:	f003 0302 	and.w	r3, r3, #2
 8004aa0:	2b02      	cmp	r3, #2
 8004aa2:	d112      	bne.n	8004aca <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004aa8:	881a      	ldrh	r2, [r3, #0]
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ab4:	1c9a      	adds	r2, r3, #2
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004abe:	b29b      	uxth	r3, r3
 8004ac0:	3b01      	subs	r3, #1
 8004ac2:	b29a      	uxth	r2, r3
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	86da      	strh	r2, [r3, #54]	; 0x36
 8004ac8:	e011      	b.n	8004aee <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004aca:	f7fd f8e5 	bl	8001c98 <HAL_GetTick>
 8004ace:	4602      	mov	r2, r0
 8004ad0:	69bb      	ldr	r3, [r7, #24]
 8004ad2:	1ad3      	subs	r3, r2, r3
 8004ad4:	683a      	ldr	r2, [r7, #0]
 8004ad6:	429a      	cmp	r2, r3
 8004ad8:	d803      	bhi.n	8004ae2 <HAL_SPI_Transmit+0x168>
 8004ada:	683b      	ldr	r3, [r7, #0]
 8004adc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ae0:	d102      	bne.n	8004ae8 <HAL_SPI_Transmit+0x16e>
 8004ae2:	683b      	ldr	r3, [r7, #0]
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d102      	bne.n	8004aee <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8004ae8:	2303      	movs	r3, #3
 8004aea:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004aec:	e074      	b.n	8004bd8 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004af2:	b29b      	uxth	r3, r3
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d1ce      	bne.n	8004a96 <HAL_SPI_Transmit+0x11c>
 8004af8:	e04c      	b.n	8004b94 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	685b      	ldr	r3, [r3, #4]
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d002      	beq.n	8004b08 <HAL_SPI_Transmit+0x18e>
 8004b02:	8afb      	ldrh	r3, [r7, #22]
 8004b04:	2b01      	cmp	r3, #1
 8004b06:	d140      	bne.n	8004b8a <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	330c      	adds	r3, #12
 8004b12:	7812      	ldrb	r2, [r2, #0]
 8004b14:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b1a:	1c5a      	adds	r2, r3, #1
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004b24:	b29b      	uxth	r3, r3
 8004b26:	3b01      	subs	r3, #1
 8004b28:	b29a      	uxth	r2, r3
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004b2e:	e02c      	b.n	8004b8a <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	689b      	ldr	r3, [r3, #8]
 8004b36:	f003 0302 	and.w	r3, r3, #2
 8004b3a:	2b02      	cmp	r3, #2
 8004b3c:	d113      	bne.n	8004b66 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	330c      	adds	r3, #12
 8004b48:	7812      	ldrb	r2, [r2, #0]
 8004b4a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b50:	1c5a      	adds	r2, r3, #1
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004b5a:	b29b      	uxth	r3, r3
 8004b5c:	3b01      	subs	r3, #1
 8004b5e:	b29a      	uxth	r2, r3
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	86da      	strh	r2, [r3, #54]	; 0x36
 8004b64:	e011      	b.n	8004b8a <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004b66:	f7fd f897 	bl	8001c98 <HAL_GetTick>
 8004b6a:	4602      	mov	r2, r0
 8004b6c:	69bb      	ldr	r3, [r7, #24]
 8004b6e:	1ad3      	subs	r3, r2, r3
 8004b70:	683a      	ldr	r2, [r7, #0]
 8004b72:	429a      	cmp	r2, r3
 8004b74:	d803      	bhi.n	8004b7e <HAL_SPI_Transmit+0x204>
 8004b76:	683b      	ldr	r3, [r7, #0]
 8004b78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b7c:	d102      	bne.n	8004b84 <HAL_SPI_Transmit+0x20a>
 8004b7e:	683b      	ldr	r3, [r7, #0]
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d102      	bne.n	8004b8a <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8004b84:	2303      	movs	r3, #3
 8004b86:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004b88:	e026      	b.n	8004bd8 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004b8e:	b29b      	uxth	r3, r3
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d1cd      	bne.n	8004b30 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004b94:	69ba      	ldr	r2, [r7, #24]
 8004b96:	6839      	ldr	r1, [r7, #0]
 8004b98:	68f8      	ldr	r0, [r7, #12]
 8004b9a:	f000 fbd9 	bl	8005350 <SPI_EndRxTxTransaction>
 8004b9e:	4603      	mov	r3, r0
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d002      	beq.n	8004baa <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	2220      	movs	r2, #32
 8004ba8:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	689b      	ldr	r3, [r3, #8]
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d10a      	bne.n	8004bc8 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004bb2:	2300      	movs	r3, #0
 8004bb4:	613b      	str	r3, [r7, #16]
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	68db      	ldr	r3, [r3, #12]
 8004bbc:	613b      	str	r3, [r7, #16]
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	689b      	ldr	r3, [r3, #8]
 8004bc4:	613b      	str	r3, [r7, #16]
 8004bc6:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d002      	beq.n	8004bd6 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8004bd0:	2301      	movs	r3, #1
 8004bd2:	77fb      	strb	r3, [r7, #31]
 8004bd4:	e000      	b.n	8004bd8 <HAL_SPI_Transmit+0x25e>
  }

error:
 8004bd6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	2201      	movs	r2, #1
 8004bdc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	2200      	movs	r2, #0
 8004be4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004be8:	7ffb      	ldrb	r3, [r7, #31]
}
 8004bea:	4618      	mov	r0, r3
 8004bec:	3720      	adds	r7, #32
 8004bee:	46bd      	mov	sp, r7
 8004bf0:	bd80      	pop	{r7, pc}

08004bf2 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004bf2:	b580      	push	{r7, lr}
 8004bf4:	b088      	sub	sp, #32
 8004bf6:	af02      	add	r7, sp, #8
 8004bf8:	60f8      	str	r0, [r7, #12]
 8004bfa:	60b9      	str	r1, [r7, #8]
 8004bfc:	603b      	str	r3, [r7, #0]
 8004bfe:	4613      	mov	r3, r2
 8004c00:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004c02:	2300      	movs	r3, #0
 8004c04:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	685b      	ldr	r3, [r3, #4]
 8004c0a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004c0e:	d112      	bne.n	8004c36 <HAL_SPI_Receive+0x44>
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	689b      	ldr	r3, [r3, #8]
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d10e      	bne.n	8004c36 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	2204      	movs	r2, #4
 8004c1c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004c20:	88fa      	ldrh	r2, [r7, #6]
 8004c22:	683b      	ldr	r3, [r7, #0]
 8004c24:	9300      	str	r3, [sp, #0]
 8004c26:	4613      	mov	r3, r2
 8004c28:	68ba      	ldr	r2, [r7, #8]
 8004c2a:	68b9      	ldr	r1, [r7, #8]
 8004c2c:	68f8      	ldr	r0, [r7, #12]
 8004c2e:	f000 f8f1 	bl	8004e14 <HAL_SPI_TransmitReceive>
 8004c32:	4603      	mov	r3, r0
 8004c34:	e0ea      	b.n	8004e0c <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004c3c:	2b01      	cmp	r3, #1
 8004c3e:	d101      	bne.n	8004c44 <HAL_SPI_Receive+0x52>
 8004c40:	2302      	movs	r3, #2
 8004c42:	e0e3      	b.n	8004e0c <HAL_SPI_Receive+0x21a>
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	2201      	movs	r2, #1
 8004c48:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004c4c:	f7fd f824 	bl	8001c98 <HAL_GetTick>
 8004c50:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004c58:	b2db      	uxtb	r3, r3
 8004c5a:	2b01      	cmp	r3, #1
 8004c5c:	d002      	beq.n	8004c64 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8004c5e:	2302      	movs	r3, #2
 8004c60:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004c62:	e0ca      	b.n	8004dfa <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8004c64:	68bb      	ldr	r3, [r7, #8]
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d002      	beq.n	8004c70 <HAL_SPI_Receive+0x7e>
 8004c6a:	88fb      	ldrh	r3, [r7, #6]
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d102      	bne.n	8004c76 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8004c70:	2301      	movs	r3, #1
 8004c72:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004c74:	e0c1      	b.n	8004dfa <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	2204      	movs	r2, #4
 8004c7a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	2200      	movs	r2, #0
 8004c82:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	68ba      	ldr	r2, [r7, #8]
 8004c88:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	88fa      	ldrh	r2, [r7, #6]
 8004c8e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	88fa      	ldrh	r2, [r7, #6]
 8004c94:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	2200      	movs	r2, #0
 8004c9a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	2200      	movs	r2, #0
 8004ca0:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	2200      	movs	r2, #0
 8004ca6:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	2200      	movs	r2, #0
 8004cac:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	2200      	movs	r2, #0
 8004cb2:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	689b      	ldr	r3, [r3, #8]
 8004cb8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004cbc:	d10f      	bne.n	8004cde <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	681a      	ldr	r2, [r3, #0]
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004ccc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	681a      	ldr	r2, [r3, #0]
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004cdc:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ce8:	2b40      	cmp	r3, #64	; 0x40
 8004cea:	d007      	beq.n	8004cfc <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	681a      	ldr	r2, [r3, #0]
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004cfa:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	68db      	ldr	r3, [r3, #12]
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d162      	bne.n	8004dca <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004d04:	e02e      	b.n	8004d64 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	689b      	ldr	r3, [r3, #8]
 8004d0c:	f003 0301 	and.w	r3, r3, #1
 8004d10:	2b01      	cmp	r3, #1
 8004d12:	d115      	bne.n	8004d40 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	f103 020c 	add.w	r2, r3, #12
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d20:	7812      	ldrb	r2, [r2, #0]
 8004d22:	b2d2      	uxtb	r2, r2
 8004d24:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d2a:	1c5a      	adds	r2, r3, #1
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d34:	b29b      	uxth	r3, r3
 8004d36:	3b01      	subs	r3, #1
 8004d38:	b29a      	uxth	r2, r3
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004d3e:	e011      	b.n	8004d64 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004d40:	f7fc ffaa 	bl	8001c98 <HAL_GetTick>
 8004d44:	4602      	mov	r2, r0
 8004d46:	693b      	ldr	r3, [r7, #16]
 8004d48:	1ad3      	subs	r3, r2, r3
 8004d4a:	683a      	ldr	r2, [r7, #0]
 8004d4c:	429a      	cmp	r2, r3
 8004d4e:	d803      	bhi.n	8004d58 <HAL_SPI_Receive+0x166>
 8004d50:	683b      	ldr	r3, [r7, #0]
 8004d52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d56:	d102      	bne.n	8004d5e <HAL_SPI_Receive+0x16c>
 8004d58:	683b      	ldr	r3, [r7, #0]
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d102      	bne.n	8004d64 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8004d5e:	2303      	movs	r3, #3
 8004d60:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004d62:	e04a      	b.n	8004dfa <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d68:	b29b      	uxth	r3, r3
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d1cb      	bne.n	8004d06 <HAL_SPI_Receive+0x114>
 8004d6e:	e031      	b.n	8004dd4 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	689b      	ldr	r3, [r3, #8]
 8004d76:	f003 0301 	and.w	r3, r3, #1
 8004d7a:	2b01      	cmp	r3, #1
 8004d7c:	d113      	bne.n	8004da6 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	68da      	ldr	r2, [r3, #12]
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d88:	b292      	uxth	r2, r2
 8004d8a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d90:	1c9a      	adds	r2, r3, #2
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d9a:	b29b      	uxth	r3, r3
 8004d9c:	3b01      	subs	r3, #1
 8004d9e:	b29a      	uxth	r2, r3
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004da4:	e011      	b.n	8004dca <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004da6:	f7fc ff77 	bl	8001c98 <HAL_GetTick>
 8004daa:	4602      	mov	r2, r0
 8004dac:	693b      	ldr	r3, [r7, #16]
 8004dae:	1ad3      	subs	r3, r2, r3
 8004db0:	683a      	ldr	r2, [r7, #0]
 8004db2:	429a      	cmp	r2, r3
 8004db4:	d803      	bhi.n	8004dbe <HAL_SPI_Receive+0x1cc>
 8004db6:	683b      	ldr	r3, [r7, #0]
 8004db8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004dbc:	d102      	bne.n	8004dc4 <HAL_SPI_Receive+0x1d2>
 8004dbe:	683b      	ldr	r3, [r7, #0]
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d102      	bne.n	8004dca <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8004dc4:	2303      	movs	r3, #3
 8004dc6:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004dc8:	e017      	b.n	8004dfa <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004dce:	b29b      	uxth	r3, r3
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d1cd      	bne.n	8004d70 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004dd4:	693a      	ldr	r2, [r7, #16]
 8004dd6:	6839      	ldr	r1, [r7, #0]
 8004dd8:	68f8      	ldr	r0, [r7, #12]
 8004dda:	f000 fa53 	bl	8005284 <SPI_EndRxTransaction>
 8004dde:	4603      	mov	r3, r0
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d002      	beq.n	8004dea <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	2220      	movs	r2, #32
 8004de8:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d002      	beq.n	8004df8 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8004df2:	2301      	movs	r3, #1
 8004df4:	75fb      	strb	r3, [r7, #23]
 8004df6:	e000      	b.n	8004dfa <HAL_SPI_Receive+0x208>
  }

error :
 8004df8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	2201      	movs	r2, #1
 8004dfe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	2200      	movs	r2, #0
 8004e06:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004e0a:	7dfb      	ldrb	r3, [r7, #23]
}
 8004e0c:	4618      	mov	r0, r3
 8004e0e:	3718      	adds	r7, #24
 8004e10:	46bd      	mov	sp, r7
 8004e12:	bd80      	pop	{r7, pc}

08004e14 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004e14:	b580      	push	{r7, lr}
 8004e16:	b08c      	sub	sp, #48	; 0x30
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	60f8      	str	r0, [r7, #12]
 8004e1c:	60b9      	str	r1, [r7, #8]
 8004e1e:	607a      	str	r2, [r7, #4]
 8004e20:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004e22:	2301      	movs	r3, #1
 8004e24:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004e26:	2300      	movs	r3, #0
 8004e28:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004e32:	2b01      	cmp	r3, #1
 8004e34:	d101      	bne.n	8004e3a <HAL_SPI_TransmitReceive+0x26>
 8004e36:	2302      	movs	r3, #2
 8004e38:	e18a      	b.n	8005150 <HAL_SPI_TransmitReceive+0x33c>
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	2201      	movs	r2, #1
 8004e3e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004e42:	f7fc ff29 	bl	8001c98 <HAL_GetTick>
 8004e46:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004e4e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	685b      	ldr	r3, [r3, #4]
 8004e56:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8004e58:	887b      	ldrh	r3, [r7, #2]
 8004e5a:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004e5c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004e60:	2b01      	cmp	r3, #1
 8004e62:	d00f      	beq.n	8004e84 <HAL_SPI_TransmitReceive+0x70>
 8004e64:	69fb      	ldr	r3, [r7, #28]
 8004e66:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004e6a:	d107      	bne.n	8004e7c <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	689b      	ldr	r3, [r3, #8]
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d103      	bne.n	8004e7c <HAL_SPI_TransmitReceive+0x68>
 8004e74:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004e78:	2b04      	cmp	r3, #4
 8004e7a:	d003      	beq.n	8004e84 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8004e7c:	2302      	movs	r3, #2
 8004e7e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004e82:	e15b      	b.n	800513c <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004e84:	68bb      	ldr	r3, [r7, #8]
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d005      	beq.n	8004e96 <HAL_SPI_TransmitReceive+0x82>
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d002      	beq.n	8004e96 <HAL_SPI_TransmitReceive+0x82>
 8004e90:	887b      	ldrh	r3, [r7, #2]
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d103      	bne.n	8004e9e <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8004e96:	2301      	movs	r3, #1
 8004e98:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004e9c:	e14e      	b.n	800513c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004ea4:	b2db      	uxtb	r3, r3
 8004ea6:	2b04      	cmp	r3, #4
 8004ea8:	d003      	beq.n	8004eb2 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	2205      	movs	r2, #5
 8004eae:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	2200      	movs	r2, #0
 8004eb6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	687a      	ldr	r2, [r7, #4]
 8004ebc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	887a      	ldrh	r2, [r7, #2]
 8004ec2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	887a      	ldrh	r2, [r7, #2]
 8004ec8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	68ba      	ldr	r2, [r7, #8]
 8004ece:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	887a      	ldrh	r2, [r7, #2]
 8004ed4:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	887a      	ldrh	r2, [r7, #2]
 8004eda:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	2200      	movs	r2, #0
 8004ee0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	2200      	movs	r2, #0
 8004ee6:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ef2:	2b40      	cmp	r3, #64	; 0x40
 8004ef4:	d007      	beq.n	8004f06 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	681a      	ldr	r2, [r3, #0]
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004f04:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	68db      	ldr	r3, [r3, #12]
 8004f0a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004f0e:	d178      	bne.n	8005002 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	685b      	ldr	r3, [r3, #4]
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d002      	beq.n	8004f1e <HAL_SPI_TransmitReceive+0x10a>
 8004f18:	8b7b      	ldrh	r3, [r7, #26]
 8004f1a:	2b01      	cmp	r3, #1
 8004f1c:	d166      	bne.n	8004fec <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f22:	881a      	ldrh	r2, [r3, #0]
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f2e:	1c9a      	adds	r2, r3, #2
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004f38:	b29b      	uxth	r3, r3
 8004f3a:	3b01      	subs	r3, #1
 8004f3c:	b29a      	uxth	r2, r3
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004f42:	e053      	b.n	8004fec <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	689b      	ldr	r3, [r3, #8]
 8004f4a:	f003 0302 	and.w	r3, r3, #2
 8004f4e:	2b02      	cmp	r3, #2
 8004f50:	d11b      	bne.n	8004f8a <HAL_SPI_TransmitReceive+0x176>
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004f56:	b29b      	uxth	r3, r3
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d016      	beq.n	8004f8a <HAL_SPI_TransmitReceive+0x176>
 8004f5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f5e:	2b01      	cmp	r3, #1
 8004f60:	d113      	bne.n	8004f8a <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f66:	881a      	ldrh	r2, [r3, #0]
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f72:	1c9a      	adds	r2, r3, #2
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004f7c:	b29b      	uxth	r3, r3
 8004f7e:	3b01      	subs	r3, #1
 8004f80:	b29a      	uxth	r2, r3
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004f86:	2300      	movs	r3, #0
 8004f88:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	689b      	ldr	r3, [r3, #8]
 8004f90:	f003 0301 	and.w	r3, r3, #1
 8004f94:	2b01      	cmp	r3, #1
 8004f96:	d119      	bne.n	8004fcc <HAL_SPI_TransmitReceive+0x1b8>
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f9c:	b29b      	uxth	r3, r3
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d014      	beq.n	8004fcc <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	68da      	ldr	r2, [r3, #12]
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fac:	b292      	uxth	r2, r2
 8004fae:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fb4:	1c9a      	adds	r2, r3, #2
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004fbe:	b29b      	uxth	r3, r3
 8004fc0:	3b01      	subs	r3, #1
 8004fc2:	b29a      	uxth	r2, r3
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004fc8:	2301      	movs	r3, #1
 8004fca:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004fcc:	f7fc fe64 	bl	8001c98 <HAL_GetTick>
 8004fd0:	4602      	mov	r2, r0
 8004fd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fd4:	1ad3      	subs	r3, r2, r3
 8004fd6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004fd8:	429a      	cmp	r2, r3
 8004fda:	d807      	bhi.n	8004fec <HAL_SPI_TransmitReceive+0x1d8>
 8004fdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fde:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fe2:	d003      	beq.n	8004fec <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8004fe4:	2303      	movs	r3, #3
 8004fe6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004fea:	e0a7      	b.n	800513c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004ff0:	b29b      	uxth	r3, r3
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d1a6      	bne.n	8004f44 <HAL_SPI_TransmitReceive+0x130>
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ffa:	b29b      	uxth	r3, r3
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d1a1      	bne.n	8004f44 <HAL_SPI_TransmitReceive+0x130>
 8005000:	e07c      	b.n	80050fc <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	685b      	ldr	r3, [r3, #4]
 8005006:	2b00      	cmp	r3, #0
 8005008:	d002      	beq.n	8005010 <HAL_SPI_TransmitReceive+0x1fc>
 800500a:	8b7b      	ldrh	r3, [r7, #26]
 800500c:	2b01      	cmp	r3, #1
 800500e:	d16b      	bne.n	80050e8 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	330c      	adds	r3, #12
 800501a:	7812      	ldrb	r2, [r2, #0]
 800501c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005022:	1c5a      	adds	r2, r3, #1
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800502c:	b29b      	uxth	r3, r3
 800502e:	3b01      	subs	r3, #1
 8005030:	b29a      	uxth	r2, r3
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005036:	e057      	b.n	80050e8 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	689b      	ldr	r3, [r3, #8]
 800503e:	f003 0302 	and.w	r3, r3, #2
 8005042:	2b02      	cmp	r3, #2
 8005044:	d11c      	bne.n	8005080 <HAL_SPI_TransmitReceive+0x26c>
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800504a:	b29b      	uxth	r3, r3
 800504c:	2b00      	cmp	r3, #0
 800504e:	d017      	beq.n	8005080 <HAL_SPI_TransmitReceive+0x26c>
 8005050:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005052:	2b01      	cmp	r3, #1
 8005054:	d114      	bne.n	8005080 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	330c      	adds	r3, #12
 8005060:	7812      	ldrb	r2, [r2, #0]
 8005062:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005068:	1c5a      	adds	r2, r3, #1
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005072:	b29b      	uxth	r3, r3
 8005074:	3b01      	subs	r3, #1
 8005076:	b29a      	uxth	r2, r3
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800507c:	2300      	movs	r3, #0
 800507e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	689b      	ldr	r3, [r3, #8]
 8005086:	f003 0301 	and.w	r3, r3, #1
 800508a:	2b01      	cmp	r3, #1
 800508c:	d119      	bne.n	80050c2 <HAL_SPI_TransmitReceive+0x2ae>
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005092:	b29b      	uxth	r3, r3
 8005094:	2b00      	cmp	r3, #0
 8005096:	d014      	beq.n	80050c2 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	68da      	ldr	r2, [r3, #12]
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050a2:	b2d2      	uxtb	r2, r2
 80050a4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050aa:	1c5a      	adds	r2, r3, #1
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80050b4:	b29b      	uxth	r3, r3
 80050b6:	3b01      	subs	r3, #1
 80050b8:	b29a      	uxth	r2, r3
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80050be:	2301      	movs	r3, #1
 80050c0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80050c2:	f7fc fde9 	bl	8001c98 <HAL_GetTick>
 80050c6:	4602      	mov	r2, r0
 80050c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050ca:	1ad3      	subs	r3, r2, r3
 80050cc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80050ce:	429a      	cmp	r2, r3
 80050d0:	d803      	bhi.n	80050da <HAL_SPI_TransmitReceive+0x2c6>
 80050d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050d8:	d102      	bne.n	80050e0 <HAL_SPI_TransmitReceive+0x2cc>
 80050da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d103      	bne.n	80050e8 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80050e0:	2303      	movs	r3, #3
 80050e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80050e6:	e029      	b.n	800513c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80050ec:	b29b      	uxth	r3, r3
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d1a2      	bne.n	8005038 <HAL_SPI_TransmitReceive+0x224>
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80050f6:	b29b      	uxth	r3, r3
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d19d      	bne.n	8005038 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80050fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80050fe:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005100:	68f8      	ldr	r0, [r7, #12]
 8005102:	f000 f925 	bl	8005350 <SPI_EndRxTxTransaction>
 8005106:	4603      	mov	r3, r0
 8005108:	2b00      	cmp	r3, #0
 800510a:	d006      	beq.n	800511a <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800510c:	2301      	movs	r3, #1
 800510e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	2220      	movs	r2, #32
 8005116:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8005118:	e010      	b.n	800513c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	689b      	ldr	r3, [r3, #8]
 800511e:	2b00      	cmp	r3, #0
 8005120:	d10b      	bne.n	800513a <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005122:	2300      	movs	r3, #0
 8005124:	617b      	str	r3, [r7, #20]
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	68db      	ldr	r3, [r3, #12]
 800512c:	617b      	str	r3, [r7, #20]
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	689b      	ldr	r3, [r3, #8]
 8005134:	617b      	str	r3, [r7, #20]
 8005136:	697b      	ldr	r3, [r7, #20]
 8005138:	e000      	b.n	800513c <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800513a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	2201      	movs	r2, #1
 8005140:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	2200      	movs	r2, #0
 8005148:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800514c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8005150:	4618      	mov	r0, r3
 8005152:	3730      	adds	r7, #48	; 0x30
 8005154:	46bd      	mov	sp, r7
 8005156:	bd80      	pop	{r7, pc}

08005158 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8005158:	b480      	push	{r7}
 800515a:	b083      	sub	sp, #12
 800515c:	af00      	add	r7, sp, #0
 800515e:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005166:	b2db      	uxtb	r3, r3
}
 8005168:	4618      	mov	r0, r3
 800516a:	370c      	adds	r7, #12
 800516c:	46bd      	mov	sp, r7
 800516e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005172:	4770      	bx	lr

08005174 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005174:	b580      	push	{r7, lr}
 8005176:	b088      	sub	sp, #32
 8005178:	af00      	add	r7, sp, #0
 800517a:	60f8      	str	r0, [r7, #12]
 800517c:	60b9      	str	r1, [r7, #8]
 800517e:	603b      	str	r3, [r7, #0]
 8005180:	4613      	mov	r3, r2
 8005182:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005184:	f7fc fd88 	bl	8001c98 <HAL_GetTick>
 8005188:	4602      	mov	r2, r0
 800518a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800518c:	1a9b      	subs	r3, r3, r2
 800518e:	683a      	ldr	r2, [r7, #0]
 8005190:	4413      	add	r3, r2
 8005192:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005194:	f7fc fd80 	bl	8001c98 <HAL_GetTick>
 8005198:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800519a:	4b39      	ldr	r3, [pc, #228]	; (8005280 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	015b      	lsls	r3, r3, #5
 80051a0:	0d1b      	lsrs	r3, r3, #20
 80051a2:	69fa      	ldr	r2, [r7, #28]
 80051a4:	fb02 f303 	mul.w	r3, r2, r3
 80051a8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80051aa:	e054      	b.n	8005256 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80051ac:	683b      	ldr	r3, [r7, #0]
 80051ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051b2:	d050      	beq.n	8005256 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80051b4:	f7fc fd70 	bl	8001c98 <HAL_GetTick>
 80051b8:	4602      	mov	r2, r0
 80051ba:	69bb      	ldr	r3, [r7, #24]
 80051bc:	1ad3      	subs	r3, r2, r3
 80051be:	69fa      	ldr	r2, [r7, #28]
 80051c0:	429a      	cmp	r2, r3
 80051c2:	d902      	bls.n	80051ca <SPI_WaitFlagStateUntilTimeout+0x56>
 80051c4:	69fb      	ldr	r3, [r7, #28]
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d13d      	bne.n	8005246 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	685a      	ldr	r2, [r3, #4]
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80051d8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	685b      	ldr	r3, [r3, #4]
 80051de:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80051e2:	d111      	bne.n	8005208 <SPI_WaitFlagStateUntilTimeout+0x94>
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	689b      	ldr	r3, [r3, #8]
 80051e8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80051ec:	d004      	beq.n	80051f8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	689b      	ldr	r3, [r3, #8]
 80051f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80051f6:	d107      	bne.n	8005208 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	681a      	ldr	r2, [r3, #0]
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005206:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800520c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005210:	d10f      	bne.n	8005232 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	681a      	ldr	r2, [r3, #0]
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005220:	601a      	str	r2, [r3, #0]
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	681a      	ldr	r2, [r3, #0]
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005230:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	2201      	movs	r2, #1
 8005236:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	2200      	movs	r2, #0
 800523e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8005242:	2303      	movs	r3, #3
 8005244:	e017      	b.n	8005276 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005246:	697b      	ldr	r3, [r7, #20]
 8005248:	2b00      	cmp	r3, #0
 800524a:	d101      	bne.n	8005250 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800524c:	2300      	movs	r3, #0
 800524e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005250:	697b      	ldr	r3, [r7, #20]
 8005252:	3b01      	subs	r3, #1
 8005254:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	689a      	ldr	r2, [r3, #8]
 800525c:	68bb      	ldr	r3, [r7, #8]
 800525e:	4013      	ands	r3, r2
 8005260:	68ba      	ldr	r2, [r7, #8]
 8005262:	429a      	cmp	r2, r3
 8005264:	bf0c      	ite	eq
 8005266:	2301      	moveq	r3, #1
 8005268:	2300      	movne	r3, #0
 800526a:	b2db      	uxtb	r3, r3
 800526c:	461a      	mov	r2, r3
 800526e:	79fb      	ldrb	r3, [r7, #7]
 8005270:	429a      	cmp	r2, r3
 8005272:	d19b      	bne.n	80051ac <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005274:	2300      	movs	r3, #0
}
 8005276:	4618      	mov	r0, r3
 8005278:	3720      	adds	r7, #32
 800527a:	46bd      	mov	sp, r7
 800527c:	bd80      	pop	{r7, pc}
 800527e:	bf00      	nop
 8005280:	20000010 	.word	0x20000010

08005284 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005284:	b580      	push	{r7, lr}
 8005286:	b086      	sub	sp, #24
 8005288:	af02      	add	r7, sp, #8
 800528a:	60f8      	str	r0, [r7, #12]
 800528c:	60b9      	str	r1, [r7, #8]
 800528e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	685b      	ldr	r3, [r3, #4]
 8005294:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005298:	d111      	bne.n	80052be <SPI_EndRxTransaction+0x3a>
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	689b      	ldr	r3, [r3, #8]
 800529e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80052a2:	d004      	beq.n	80052ae <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	689b      	ldr	r3, [r3, #8]
 80052a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80052ac:	d107      	bne.n	80052be <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	681a      	ldr	r2, [r3, #0]
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80052bc:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	685b      	ldr	r3, [r3, #4]
 80052c2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80052c6:	d12a      	bne.n	800531e <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	689b      	ldr	r3, [r3, #8]
 80052cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80052d0:	d012      	beq.n	80052f8 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	9300      	str	r3, [sp, #0]
 80052d6:	68bb      	ldr	r3, [r7, #8]
 80052d8:	2200      	movs	r2, #0
 80052da:	2180      	movs	r1, #128	; 0x80
 80052dc:	68f8      	ldr	r0, [r7, #12]
 80052de:	f7ff ff49 	bl	8005174 <SPI_WaitFlagStateUntilTimeout>
 80052e2:	4603      	mov	r3, r0
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d02d      	beq.n	8005344 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052ec:	f043 0220 	orr.w	r2, r3, #32
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80052f4:	2303      	movs	r3, #3
 80052f6:	e026      	b.n	8005346 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	9300      	str	r3, [sp, #0]
 80052fc:	68bb      	ldr	r3, [r7, #8]
 80052fe:	2200      	movs	r2, #0
 8005300:	2101      	movs	r1, #1
 8005302:	68f8      	ldr	r0, [r7, #12]
 8005304:	f7ff ff36 	bl	8005174 <SPI_WaitFlagStateUntilTimeout>
 8005308:	4603      	mov	r3, r0
 800530a:	2b00      	cmp	r3, #0
 800530c:	d01a      	beq.n	8005344 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005312:	f043 0220 	orr.w	r2, r3, #32
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800531a:	2303      	movs	r3, #3
 800531c:	e013      	b.n	8005346 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	9300      	str	r3, [sp, #0]
 8005322:	68bb      	ldr	r3, [r7, #8]
 8005324:	2200      	movs	r2, #0
 8005326:	2101      	movs	r1, #1
 8005328:	68f8      	ldr	r0, [r7, #12]
 800532a:	f7ff ff23 	bl	8005174 <SPI_WaitFlagStateUntilTimeout>
 800532e:	4603      	mov	r3, r0
 8005330:	2b00      	cmp	r3, #0
 8005332:	d007      	beq.n	8005344 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005338:	f043 0220 	orr.w	r2, r3, #32
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005340:	2303      	movs	r3, #3
 8005342:	e000      	b.n	8005346 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8005344:	2300      	movs	r3, #0
}
 8005346:	4618      	mov	r0, r3
 8005348:	3710      	adds	r7, #16
 800534a:	46bd      	mov	sp, r7
 800534c:	bd80      	pop	{r7, pc}
	...

08005350 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005350:	b580      	push	{r7, lr}
 8005352:	b088      	sub	sp, #32
 8005354:	af02      	add	r7, sp, #8
 8005356:	60f8      	str	r0, [r7, #12]
 8005358:	60b9      	str	r1, [r7, #8]
 800535a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800535c:	4b1b      	ldr	r3, [pc, #108]	; (80053cc <SPI_EndRxTxTransaction+0x7c>)
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	4a1b      	ldr	r2, [pc, #108]	; (80053d0 <SPI_EndRxTxTransaction+0x80>)
 8005362:	fba2 2303 	umull	r2, r3, r2, r3
 8005366:	0d5b      	lsrs	r3, r3, #21
 8005368:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800536c:	fb02 f303 	mul.w	r3, r2, r3
 8005370:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	685b      	ldr	r3, [r3, #4]
 8005376:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800537a:	d112      	bne.n	80053a2 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	9300      	str	r3, [sp, #0]
 8005380:	68bb      	ldr	r3, [r7, #8]
 8005382:	2200      	movs	r2, #0
 8005384:	2180      	movs	r1, #128	; 0x80
 8005386:	68f8      	ldr	r0, [r7, #12]
 8005388:	f7ff fef4 	bl	8005174 <SPI_WaitFlagStateUntilTimeout>
 800538c:	4603      	mov	r3, r0
 800538e:	2b00      	cmp	r3, #0
 8005390:	d016      	beq.n	80053c0 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005396:	f043 0220 	orr.w	r2, r3, #32
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800539e:	2303      	movs	r3, #3
 80053a0:	e00f      	b.n	80053c2 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80053a2:	697b      	ldr	r3, [r7, #20]
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d00a      	beq.n	80053be <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80053a8:	697b      	ldr	r3, [r7, #20]
 80053aa:	3b01      	subs	r3, #1
 80053ac:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	689b      	ldr	r3, [r3, #8]
 80053b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053b8:	2b80      	cmp	r3, #128	; 0x80
 80053ba:	d0f2      	beq.n	80053a2 <SPI_EndRxTxTransaction+0x52>
 80053bc:	e000      	b.n	80053c0 <SPI_EndRxTxTransaction+0x70>
        break;
 80053be:	bf00      	nop
  }

  return HAL_OK;
 80053c0:	2300      	movs	r3, #0
}
 80053c2:	4618      	mov	r0, r3
 80053c4:	3718      	adds	r7, #24
 80053c6:	46bd      	mov	sp, r7
 80053c8:	bd80      	pop	{r7, pc}
 80053ca:	bf00      	nop
 80053cc:	20000010 	.word	0x20000010
 80053d0:	165e9f81 	.word	0x165e9f81

080053d4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80053d4:	b580      	push	{r7, lr}
 80053d6:	b082      	sub	sp, #8
 80053d8:	af00      	add	r7, sp, #0
 80053da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d101      	bne.n	80053e6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80053e2:	2301      	movs	r3, #1
 80053e4:	e041      	b.n	800546a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80053ec:	b2db      	uxtb	r3, r3
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d106      	bne.n	8005400 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	2200      	movs	r2, #0
 80053f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80053fa:	6878      	ldr	r0, [r7, #4]
 80053fc:	f7fc fa20 	bl	8001840 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	2202      	movs	r2, #2
 8005404:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681a      	ldr	r2, [r3, #0]
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	3304      	adds	r3, #4
 8005410:	4619      	mov	r1, r3
 8005412:	4610      	mov	r0, r2
 8005414:	f000 faa0 	bl	8005958 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	2201      	movs	r2, #1
 800541c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	2201      	movs	r2, #1
 8005424:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	2201      	movs	r2, #1
 800542c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	2201      	movs	r2, #1
 8005434:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	2201      	movs	r2, #1
 800543c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	2201      	movs	r2, #1
 8005444:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	2201      	movs	r2, #1
 800544c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	2201      	movs	r2, #1
 8005454:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	2201      	movs	r2, #1
 800545c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	2201      	movs	r2, #1
 8005464:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005468:	2300      	movs	r3, #0
}
 800546a:	4618      	mov	r0, r3
 800546c:	3708      	adds	r7, #8
 800546e:	46bd      	mov	sp, r7
 8005470:	bd80      	pop	{r7, pc}
	...

08005474 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005474:	b480      	push	{r7}
 8005476:	b085      	sub	sp, #20
 8005478:	af00      	add	r7, sp, #0
 800547a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005482:	b2db      	uxtb	r3, r3
 8005484:	2b01      	cmp	r3, #1
 8005486:	d001      	beq.n	800548c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005488:	2301      	movs	r3, #1
 800548a:	e04e      	b.n	800552a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	2202      	movs	r2, #2
 8005490:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	68da      	ldr	r2, [r3, #12]
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	f042 0201 	orr.w	r2, r2, #1
 80054a2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	4a23      	ldr	r2, [pc, #140]	; (8005538 <HAL_TIM_Base_Start_IT+0xc4>)
 80054aa:	4293      	cmp	r3, r2
 80054ac:	d022      	beq.n	80054f4 <HAL_TIM_Base_Start_IT+0x80>
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80054b6:	d01d      	beq.n	80054f4 <HAL_TIM_Base_Start_IT+0x80>
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	4a1f      	ldr	r2, [pc, #124]	; (800553c <HAL_TIM_Base_Start_IT+0xc8>)
 80054be:	4293      	cmp	r3, r2
 80054c0:	d018      	beq.n	80054f4 <HAL_TIM_Base_Start_IT+0x80>
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	4a1e      	ldr	r2, [pc, #120]	; (8005540 <HAL_TIM_Base_Start_IT+0xcc>)
 80054c8:	4293      	cmp	r3, r2
 80054ca:	d013      	beq.n	80054f4 <HAL_TIM_Base_Start_IT+0x80>
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	4a1c      	ldr	r2, [pc, #112]	; (8005544 <HAL_TIM_Base_Start_IT+0xd0>)
 80054d2:	4293      	cmp	r3, r2
 80054d4:	d00e      	beq.n	80054f4 <HAL_TIM_Base_Start_IT+0x80>
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	4a1b      	ldr	r2, [pc, #108]	; (8005548 <HAL_TIM_Base_Start_IT+0xd4>)
 80054dc:	4293      	cmp	r3, r2
 80054de:	d009      	beq.n	80054f4 <HAL_TIM_Base_Start_IT+0x80>
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	4a19      	ldr	r2, [pc, #100]	; (800554c <HAL_TIM_Base_Start_IT+0xd8>)
 80054e6:	4293      	cmp	r3, r2
 80054e8:	d004      	beq.n	80054f4 <HAL_TIM_Base_Start_IT+0x80>
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	4a18      	ldr	r2, [pc, #96]	; (8005550 <HAL_TIM_Base_Start_IT+0xdc>)
 80054f0:	4293      	cmp	r3, r2
 80054f2:	d111      	bne.n	8005518 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	689b      	ldr	r3, [r3, #8]
 80054fa:	f003 0307 	and.w	r3, r3, #7
 80054fe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	2b06      	cmp	r3, #6
 8005504:	d010      	beq.n	8005528 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	681a      	ldr	r2, [r3, #0]
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	f042 0201 	orr.w	r2, r2, #1
 8005514:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005516:	e007      	b.n	8005528 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	681a      	ldr	r2, [r3, #0]
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	f042 0201 	orr.w	r2, r2, #1
 8005526:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005528:	2300      	movs	r3, #0
}
 800552a:	4618      	mov	r0, r3
 800552c:	3714      	adds	r7, #20
 800552e:	46bd      	mov	sp, r7
 8005530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005534:	4770      	bx	lr
 8005536:	bf00      	nop
 8005538:	40010000 	.word	0x40010000
 800553c:	40000400 	.word	0x40000400
 8005540:	40000800 	.word	0x40000800
 8005544:	40000c00 	.word	0x40000c00
 8005548:	40010400 	.word	0x40010400
 800554c:	40014000 	.word	0x40014000
 8005550:	40001800 	.word	0x40001800

08005554 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005554:	b580      	push	{r7, lr}
 8005556:	b082      	sub	sp, #8
 8005558:	af00      	add	r7, sp, #0
 800555a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	691b      	ldr	r3, [r3, #16]
 8005562:	f003 0302 	and.w	r3, r3, #2
 8005566:	2b02      	cmp	r3, #2
 8005568:	d122      	bne.n	80055b0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	68db      	ldr	r3, [r3, #12]
 8005570:	f003 0302 	and.w	r3, r3, #2
 8005574:	2b02      	cmp	r3, #2
 8005576:	d11b      	bne.n	80055b0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	f06f 0202 	mvn.w	r2, #2
 8005580:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	2201      	movs	r2, #1
 8005586:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	699b      	ldr	r3, [r3, #24]
 800558e:	f003 0303 	and.w	r3, r3, #3
 8005592:	2b00      	cmp	r3, #0
 8005594:	d003      	beq.n	800559e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005596:	6878      	ldr	r0, [r7, #4]
 8005598:	f000 f9bf 	bl	800591a <HAL_TIM_IC_CaptureCallback>
 800559c:	e005      	b.n	80055aa <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800559e:	6878      	ldr	r0, [r7, #4]
 80055a0:	f000 f9b1 	bl	8005906 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80055a4:	6878      	ldr	r0, [r7, #4]
 80055a6:	f000 f9c2 	bl	800592e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	2200      	movs	r2, #0
 80055ae:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	691b      	ldr	r3, [r3, #16]
 80055b6:	f003 0304 	and.w	r3, r3, #4
 80055ba:	2b04      	cmp	r3, #4
 80055bc:	d122      	bne.n	8005604 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	68db      	ldr	r3, [r3, #12]
 80055c4:	f003 0304 	and.w	r3, r3, #4
 80055c8:	2b04      	cmp	r3, #4
 80055ca:	d11b      	bne.n	8005604 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	f06f 0204 	mvn.w	r2, #4
 80055d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	2202      	movs	r2, #2
 80055da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	699b      	ldr	r3, [r3, #24]
 80055e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d003      	beq.n	80055f2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80055ea:	6878      	ldr	r0, [r7, #4]
 80055ec:	f000 f995 	bl	800591a <HAL_TIM_IC_CaptureCallback>
 80055f0:	e005      	b.n	80055fe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80055f2:	6878      	ldr	r0, [r7, #4]
 80055f4:	f000 f987 	bl	8005906 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80055f8:	6878      	ldr	r0, [r7, #4]
 80055fa:	f000 f998 	bl	800592e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	2200      	movs	r2, #0
 8005602:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	691b      	ldr	r3, [r3, #16]
 800560a:	f003 0308 	and.w	r3, r3, #8
 800560e:	2b08      	cmp	r3, #8
 8005610:	d122      	bne.n	8005658 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	68db      	ldr	r3, [r3, #12]
 8005618:	f003 0308 	and.w	r3, r3, #8
 800561c:	2b08      	cmp	r3, #8
 800561e:	d11b      	bne.n	8005658 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	f06f 0208 	mvn.w	r2, #8
 8005628:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	2204      	movs	r2, #4
 800562e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	69db      	ldr	r3, [r3, #28]
 8005636:	f003 0303 	and.w	r3, r3, #3
 800563a:	2b00      	cmp	r3, #0
 800563c:	d003      	beq.n	8005646 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800563e:	6878      	ldr	r0, [r7, #4]
 8005640:	f000 f96b 	bl	800591a <HAL_TIM_IC_CaptureCallback>
 8005644:	e005      	b.n	8005652 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005646:	6878      	ldr	r0, [r7, #4]
 8005648:	f000 f95d 	bl	8005906 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800564c:	6878      	ldr	r0, [r7, #4]
 800564e:	f000 f96e 	bl	800592e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	2200      	movs	r2, #0
 8005656:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	691b      	ldr	r3, [r3, #16]
 800565e:	f003 0310 	and.w	r3, r3, #16
 8005662:	2b10      	cmp	r3, #16
 8005664:	d122      	bne.n	80056ac <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	68db      	ldr	r3, [r3, #12]
 800566c:	f003 0310 	and.w	r3, r3, #16
 8005670:	2b10      	cmp	r3, #16
 8005672:	d11b      	bne.n	80056ac <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	f06f 0210 	mvn.w	r2, #16
 800567c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	2208      	movs	r2, #8
 8005682:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	69db      	ldr	r3, [r3, #28]
 800568a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800568e:	2b00      	cmp	r3, #0
 8005690:	d003      	beq.n	800569a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005692:	6878      	ldr	r0, [r7, #4]
 8005694:	f000 f941 	bl	800591a <HAL_TIM_IC_CaptureCallback>
 8005698:	e005      	b.n	80056a6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800569a:	6878      	ldr	r0, [r7, #4]
 800569c:	f000 f933 	bl	8005906 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80056a0:	6878      	ldr	r0, [r7, #4]
 80056a2:	f000 f944 	bl	800592e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	2200      	movs	r2, #0
 80056aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	691b      	ldr	r3, [r3, #16]
 80056b2:	f003 0301 	and.w	r3, r3, #1
 80056b6:	2b01      	cmp	r3, #1
 80056b8:	d10e      	bne.n	80056d8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	68db      	ldr	r3, [r3, #12]
 80056c0:	f003 0301 	and.w	r3, r3, #1
 80056c4:	2b01      	cmp	r3, #1
 80056c6:	d107      	bne.n	80056d8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	f06f 0201 	mvn.w	r2, #1
 80056d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80056d2:	6878      	ldr	r0, [r7, #4]
 80056d4:	f000 f90d 	bl	80058f2 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	691b      	ldr	r3, [r3, #16]
 80056de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056e2:	2b80      	cmp	r3, #128	; 0x80
 80056e4:	d10e      	bne.n	8005704 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	68db      	ldr	r3, [r3, #12]
 80056ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056f0:	2b80      	cmp	r3, #128	; 0x80
 80056f2:	d107      	bne.n	8005704 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80056fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80056fe:	6878      	ldr	r0, [r7, #4]
 8005700:	f000 faea 	bl	8005cd8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	691b      	ldr	r3, [r3, #16]
 800570a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800570e:	2b40      	cmp	r3, #64	; 0x40
 8005710:	d10e      	bne.n	8005730 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	68db      	ldr	r3, [r3, #12]
 8005718:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800571c:	2b40      	cmp	r3, #64	; 0x40
 800571e:	d107      	bne.n	8005730 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005728:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800572a:	6878      	ldr	r0, [r7, #4]
 800572c:	f000 f909 	bl	8005942 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	691b      	ldr	r3, [r3, #16]
 8005736:	f003 0320 	and.w	r3, r3, #32
 800573a:	2b20      	cmp	r3, #32
 800573c:	d10e      	bne.n	800575c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	68db      	ldr	r3, [r3, #12]
 8005744:	f003 0320 	and.w	r3, r3, #32
 8005748:	2b20      	cmp	r3, #32
 800574a:	d107      	bne.n	800575c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	f06f 0220 	mvn.w	r2, #32
 8005754:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005756:	6878      	ldr	r0, [r7, #4]
 8005758:	f000 fab4 	bl	8005cc4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800575c:	bf00      	nop
 800575e:	3708      	adds	r7, #8
 8005760:	46bd      	mov	sp, r7
 8005762:	bd80      	pop	{r7, pc}

08005764 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005764:	b580      	push	{r7, lr}
 8005766:	b084      	sub	sp, #16
 8005768:	af00      	add	r7, sp, #0
 800576a:	6078      	str	r0, [r7, #4]
 800576c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800576e:	2300      	movs	r3, #0
 8005770:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005778:	2b01      	cmp	r3, #1
 800577a:	d101      	bne.n	8005780 <HAL_TIM_ConfigClockSource+0x1c>
 800577c:	2302      	movs	r3, #2
 800577e:	e0b4      	b.n	80058ea <HAL_TIM_ConfigClockSource+0x186>
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	2201      	movs	r2, #1
 8005784:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	2202      	movs	r2, #2
 800578c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	689b      	ldr	r3, [r3, #8]
 8005796:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005798:	68bb      	ldr	r3, [r7, #8]
 800579a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800579e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80057a0:	68bb      	ldr	r3, [r7, #8]
 80057a2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80057a6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	68ba      	ldr	r2, [r7, #8]
 80057ae:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80057b0:	683b      	ldr	r3, [r7, #0]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80057b8:	d03e      	beq.n	8005838 <HAL_TIM_ConfigClockSource+0xd4>
 80057ba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80057be:	f200 8087 	bhi.w	80058d0 <HAL_TIM_ConfigClockSource+0x16c>
 80057c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80057c6:	f000 8086 	beq.w	80058d6 <HAL_TIM_ConfigClockSource+0x172>
 80057ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80057ce:	d87f      	bhi.n	80058d0 <HAL_TIM_ConfigClockSource+0x16c>
 80057d0:	2b70      	cmp	r3, #112	; 0x70
 80057d2:	d01a      	beq.n	800580a <HAL_TIM_ConfigClockSource+0xa6>
 80057d4:	2b70      	cmp	r3, #112	; 0x70
 80057d6:	d87b      	bhi.n	80058d0 <HAL_TIM_ConfigClockSource+0x16c>
 80057d8:	2b60      	cmp	r3, #96	; 0x60
 80057da:	d050      	beq.n	800587e <HAL_TIM_ConfigClockSource+0x11a>
 80057dc:	2b60      	cmp	r3, #96	; 0x60
 80057de:	d877      	bhi.n	80058d0 <HAL_TIM_ConfigClockSource+0x16c>
 80057e0:	2b50      	cmp	r3, #80	; 0x50
 80057e2:	d03c      	beq.n	800585e <HAL_TIM_ConfigClockSource+0xfa>
 80057e4:	2b50      	cmp	r3, #80	; 0x50
 80057e6:	d873      	bhi.n	80058d0 <HAL_TIM_ConfigClockSource+0x16c>
 80057e8:	2b40      	cmp	r3, #64	; 0x40
 80057ea:	d058      	beq.n	800589e <HAL_TIM_ConfigClockSource+0x13a>
 80057ec:	2b40      	cmp	r3, #64	; 0x40
 80057ee:	d86f      	bhi.n	80058d0 <HAL_TIM_ConfigClockSource+0x16c>
 80057f0:	2b30      	cmp	r3, #48	; 0x30
 80057f2:	d064      	beq.n	80058be <HAL_TIM_ConfigClockSource+0x15a>
 80057f4:	2b30      	cmp	r3, #48	; 0x30
 80057f6:	d86b      	bhi.n	80058d0 <HAL_TIM_ConfigClockSource+0x16c>
 80057f8:	2b20      	cmp	r3, #32
 80057fa:	d060      	beq.n	80058be <HAL_TIM_ConfigClockSource+0x15a>
 80057fc:	2b20      	cmp	r3, #32
 80057fe:	d867      	bhi.n	80058d0 <HAL_TIM_ConfigClockSource+0x16c>
 8005800:	2b00      	cmp	r3, #0
 8005802:	d05c      	beq.n	80058be <HAL_TIM_ConfigClockSource+0x15a>
 8005804:	2b10      	cmp	r3, #16
 8005806:	d05a      	beq.n	80058be <HAL_TIM_ConfigClockSource+0x15a>
 8005808:	e062      	b.n	80058d0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	6818      	ldr	r0, [r3, #0]
 800580e:	683b      	ldr	r3, [r7, #0]
 8005810:	6899      	ldr	r1, [r3, #8]
 8005812:	683b      	ldr	r3, [r7, #0]
 8005814:	685a      	ldr	r2, [r3, #4]
 8005816:	683b      	ldr	r3, [r7, #0]
 8005818:	68db      	ldr	r3, [r3, #12]
 800581a:	f000 f9b7 	bl	8005b8c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	689b      	ldr	r3, [r3, #8]
 8005824:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005826:	68bb      	ldr	r3, [r7, #8]
 8005828:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800582c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	68ba      	ldr	r2, [r7, #8]
 8005834:	609a      	str	r2, [r3, #8]
      break;
 8005836:	e04f      	b.n	80058d8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	6818      	ldr	r0, [r3, #0]
 800583c:	683b      	ldr	r3, [r7, #0]
 800583e:	6899      	ldr	r1, [r3, #8]
 8005840:	683b      	ldr	r3, [r7, #0]
 8005842:	685a      	ldr	r2, [r3, #4]
 8005844:	683b      	ldr	r3, [r7, #0]
 8005846:	68db      	ldr	r3, [r3, #12]
 8005848:	f000 f9a0 	bl	8005b8c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	689a      	ldr	r2, [r3, #8]
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800585a:	609a      	str	r2, [r3, #8]
      break;
 800585c:	e03c      	b.n	80058d8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	6818      	ldr	r0, [r3, #0]
 8005862:	683b      	ldr	r3, [r7, #0]
 8005864:	6859      	ldr	r1, [r3, #4]
 8005866:	683b      	ldr	r3, [r7, #0]
 8005868:	68db      	ldr	r3, [r3, #12]
 800586a:	461a      	mov	r2, r3
 800586c:	f000 f914 	bl	8005a98 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	2150      	movs	r1, #80	; 0x50
 8005876:	4618      	mov	r0, r3
 8005878:	f000 f96d 	bl	8005b56 <TIM_ITRx_SetConfig>
      break;
 800587c:	e02c      	b.n	80058d8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	6818      	ldr	r0, [r3, #0]
 8005882:	683b      	ldr	r3, [r7, #0]
 8005884:	6859      	ldr	r1, [r3, #4]
 8005886:	683b      	ldr	r3, [r7, #0]
 8005888:	68db      	ldr	r3, [r3, #12]
 800588a:	461a      	mov	r2, r3
 800588c:	f000 f933 	bl	8005af6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	2160      	movs	r1, #96	; 0x60
 8005896:	4618      	mov	r0, r3
 8005898:	f000 f95d 	bl	8005b56 <TIM_ITRx_SetConfig>
      break;
 800589c:	e01c      	b.n	80058d8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	6818      	ldr	r0, [r3, #0]
 80058a2:	683b      	ldr	r3, [r7, #0]
 80058a4:	6859      	ldr	r1, [r3, #4]
 80058a6:	683b      	ldr	r3, [r7, #0]
 80058a8:	68db      	ldr	r3, [r3, #12]
 80058aa:	461a      	mov	r2, r3
 80058ac:	f000 f8f4 	bl	8005a98 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	2140      	movs	r1, #64	; 0x40
 80058b6:	4618      	mov	r0, r3
 80058b8:	f000 f94d 	bl	8005b56 <TIM_ITRx_SetConfig>
      break;
 80058bc:	e00c      	b.n	80058d8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681a      	ldr	r2, [r3, #0]
 80058c2:	683b      	ldr	r3, [r7, #0]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	4619      	mov	r1, r3
 80058c8:	4610      	mov	r0, r2
 80058ca:	f000 f944 	bl	8005b56 <TIM_ITRx_SetConfig>
      break;
 80058ce:	e003      	b.n	80058d8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80058d0:	2301      	movs	r3, #1
 80058d2:	73fb      	strb	r3, [r7, #15]
      break;
 80058d4:	e000      	b.n	80058d8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80058d6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	2201      	movs	r2, #1
 80058dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	2200      	movs	r2, #0
 80058e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80058e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80058ea:	4618      	mov	r0, r3
 80058ec:	3710      	adds	r7, #16
 80058ee:	46bd      	mov	sp, r7
 80058f0:	bd80      	pop	{r7, pc}

080058f2 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80058f2:	b480      	push	{r7}
 80058f4:	b083      	sub	sp, #12
 80058f6:	af00      	add	r7, sp, #0
 80058f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80058fa:	bf00      	nop
 80058fc:	370c      	adds	r7, #12
 80058fe:	46bd      	mov	sp, r7
 8005900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005904:	4770      	bx	lr

08005906 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005906:	b480      	push	{r7}
 8005908:	b083      	sub	sp, #12
 800590a:	af00      	add	r7, sp, #0
 800590c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800590e:	bf00      	nop
 8005910:	370c      	adds	r7, #12
 8005912:	46bd      	mov	sp, r7
 8005914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005918:	4770      	bx	lr

0800591a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800591a:	b480      	push	{r7}
 800591c:	b083      	sub	sp, #12
 800591e:	af00      	add	r7, sp, #0
 8005920:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005922:	bf00      	nop
 8005924:	370c      	adds	r7, #12
 8005926:	46bd      	mov	sp, r7
 8005928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800592c:	4770      	bx	lr

0800592e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800592e:	b480      	push	{r7}
 8005930:	b083      	sub	sp, #12
 8005932:	af00      	add	r7, sp, #0
 8005934:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005936:	bf00      	nop
 8005938:	370c      	adds	r7, #12
 800593a:	46bd      	mov	sp, r7
 800593c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005940:	4770      	bx	lr

08005942 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005942:	b480      	push	{r7}
 8005944:	b083      	sub	sp, #12
 8005946:	af00      	add	r7, sp, #0
 8005948:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800594a:	bf00      	nop
 800594c:	370c      	adds	r7, #12
 800594e:	46bd      	mov	sp, r7
 8005950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005954:	4770      	bx	lr
	...

08005958 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005958:	b480      	push	{r7}
 800595a:	b085      	sub	sp, #20
 800595c:	af00      	add	r7, sp, #0
 800595e:	6078      	str	r0, [r7, #4]
 8005960:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	4a40      	ldr	r2, [pc, #256]	; (8005a6c <TIM_Base_SetConfig+0x114>)
 800596c:	4293      	cmp	r3, r2
 800596e:	d013      	beq.n	8005998 <TIM_Base_SetConfig+0x40>
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005976:	d00f      	beq.n	8005998 <TIM_Base_SetConfig+0x40>
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	4a3d      	ldr	r2, [pc, #244]	; (8005a70 <TIM_Base_SetConfig+0x118>)
 800597c:	4293      	cmp	r3, r2
 800597e:	d00b      	beq.n	8005998 <TIM_Base_SetConfig+0x40>
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	4a3c      	ldr	r2, [pc, #240]	; (8005a74 <TIM_Base_SetConfig+0x11c>)
 8005984:	4293      	cmp	r3, r2
 8005986:	d007      	beq.n	8005998 <TIM_Base_SetConfig+0x40>
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	4a3b      	ldr	r2, [pc, #236]	; (8005a78 <TIM_Base_SetConfig+0x120>)
 800598c:	4293      	cmp	r3, r2
 800598e:	d003      	beq.n	8005998 <TIM_Base_SetConfig+0x40>
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	4a3a      	ldr	r2, [pc, #232]	; (8005a7c <TIM_Base_SetConfig+0x124>)
 8005994:	4293      	cmp	r3, r2
 8005996:	d108      	bne.n	80059aa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800599e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80059a0:	683b      	ldr	r3, [r7, #0]
 80059a2:	685b      	ldr	r3, [r3, #4]
 80059a4:	68fa      	ldr	r2, [r7, #12]
 80059a6:	4313      	orrs	r3, r2
 80059a8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	4a2f      	ldr	r2, [pc, #188]	; (8005a6c <TIM_Base_SetConfig+0x114>)
 80059ae:	4293      	cmp	r3, r2
 80059b0:	d02b      	beq.n	8005a0a <TIM_Base_SetConfig+0xb2>
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80059b8:	d027      	beq.n	8005a0a <TIM_Base_SetConfig+0xb2>
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	4a2c      	ldr	r2, [pc, #176]	; (8005a70 <TIM_Base_SetConfig+0x118>)
 80059be:	4293      	cmp	r3, r2
 80059c0:	d023      	beq.n	8005a0a <TIM_Base_SetConfig+0xb2>
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	4a2b      	ldr	r2, [pc, #172]	; (8005a74 <TIM_Base_SetConfig+0x11c>)
 80059c6:	4293      	cmp	r3, r2
 80059c8:	d01f      	beq.n	8005a0a <TIM_Base_SetConfig+0xb2>
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	4a2a      	ldr	r2, [pc, #168]	; (8005a78 <TIM_Base_SetConfig+0x120>)
 80059ce:	4293      	cmp	r3, r2
 80059d0:	d01b      	beq.n	8005a0a <TIM_Base_SetConfig+0xb2>
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	4a29      	ldr	r2, [pc, #164]	; (8005a7c <TIM_Base_SetConfig+0x124>)
 80059d6:	4293      	cmp	r3, r2
 80059d8:	d017      	beq.n	8005a0a <TIM_Base_SetConfig+0xb2>
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	4a28      	ldr	r2, [pc, #160]	; (8005a80 <TIM_Base_SetConfig+0x128>)
 80059de:	4293      	cmp	r3, r2
 80059e0:	d013      	beq.n	8005a0a <TIM_Base_SetConfig+0xb2>
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	4a27      	ldr	r2, [pc, #156]	; (8005a84 <TIM_Base_SetConfig+0x12c>)
 80059e6:	4293      	cmp	r3, r2
 80059e8:	d00f      	beq.n	8005a0a <TIM_Base_SetConfig+0xb2>
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	4a26      	ldr	r2, [pc, #152]	; (8005a88 <TIM_Base_SetConfig+0x130>)
 80059ee:	4293      	cmp	r3, r2
 80059f0:	d00b      	beq.n	8005a0a <TIM_Base_SetConfig+0xb2>
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	4a25      	ldr	r2, [pc, #148]	; (8005a8c <TIM_Base_SetConfig+0x134>)
 80059f6:	4293      	cmp	r3, r2
 80059f8:	d007      	beq.n	8005a0a <TIM_Base_SetConfig+0xb2>
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	4a24      	ldr	r2, [pc, #144]	; (8005a90 <TIM_Base_SetConfig+0x138>)
 80059fe:	4293      	cmp	r3, r2
 8005a00:	d003      	beq.n	8005a0a <TIM_Base_SetConfig+0xb2>
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	4a23      	ldr	r2, [pc, #140]	; (8005a94 <TIM_Base_SetConfig+0x13c>)
 8005a06:	4293      	cmp	r3, r2
 8005a08:	d108      	bne.n	8005a1c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005a10:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005a12:	683b      	ldr	r3, [r7, #0]
 8005a14:	68db      	ldr	r3, [r3, #12]
 8005a16:	68fa      	ldr	r2, [r7, #12]
 8005a18:	4313      	orrs	r3, r2
 8005a1a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005a22:	683b      	ldr	r3, [r7, #0]
 8005a24:	695b      	ldr	r3, [r3, #20]
 8005a26:	4313      	orrs	r3, r2
 8005a28:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	68fa      	ldr	r2, [r7, #12]
 8005a2e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005a30:	683b      	ldr	r3, [r7, #0]
 8005a32:	689a      	ldr	r2, [r3, #8]
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005a38:	683b      	ldr	r3, [r7, #0]
 8005a3a:	681a      	ldr	r2, [r3, #0]
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	4a0a      	ldr	r2, [pc, #40]	; (8005a6c <TIM_Base_SetConfig+0x114>)
 8005a44:	4293      	cmp	r3, r2
 8005a46:	d003      	beq.n	8005a50 <TIM_Base_SetConfig+0xf8>
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	4a0c      	ldr	r2, [pc, #48]	; (8005a7c <TIM_Base_SetConfig+0x124>)
 8005a4c:	4293      	cmp	r3, r2
 8005a4e:	d103      	bne.n	8005a58 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005a50:	683b      	ldr	r3, [r7, #0]
 8005a52:	691a      	ldr	r2, [r3, #16]
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	2201      	movs	r2, #1
 8005a5c:	615a      	str	r2, [r3, #20]
}
 8005a5e:	bf00      	nop
 8005a60:	3714      	adds	r7, #20
 8005a62:	46bd      	mov	sp, r7
 8005a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a68:	4770      	bx	lr
 8005a6a:	bf00      	nop
 8005a6c:	40010000 	.word	0x40010000
 8005a70:	40000400 	.word	0x40000400
 8005a74:	40000800 	.word	0x40000800
 8005a78:	40000c00 	.word	0x40000c00
 8005a7c:	40010400 	.word	0x40010400
 8005a80:	40014000 	.word	0x40014000
 8005a84:	40014400 	.word	0x40014400
 8005a88:	40014800 	.word	0x40014800
 8005a8c:	40001800 	.word	0x40001800
 8005a90:	40001c00 	.word	0x40001c00
 8005a94:	40002000 	.word	0x40002000

08005a98 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005a98:	b480      	push	{r7}
 8005a9a:	b087      	sub	sp, #28
 8005a9c:	af00      	add	r7, sp, #0
 8005a9e:	60f8      	str	r0, [r7, #12]
 8005aa0:	60b9      	str	r1, [r7, #8]
 8005aa2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	6a1b      	ldr	r3, [r3, #32]
 8005aa8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	6a1b      	ldr	r3, [r3, #32]
 8005aae:	f023 0201 	bic.w	r2, r3, #1
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	699b      	ldr	r3, [r3, #24]
 8005aba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005abc:	693b      	ldr	r3, [r7, #16]
 8005abe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005ac2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	011b      	lsls	r3, r3, #4
 8005ac8:	693a      	ldr	r2, [r7, #16]
 8005aca:	4313      	orrs	r3, r2
 8005acc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005ace:	697b      	ldr	r3, [r7, #20]
 8005ad0:	f023 030a 	bic.w	r3, r3, #10
 8005ad4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005ad6:	697a      	ldr	r2, [r7, #20]
 8005ad8:	68bb      	ldr	r3, [r7, #8]
 8005ada:	4313      	orrs	r3, r2
 8005adc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	693a      	ldr	r2, [r7, #16]
 8005ae2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	697a      	ldr	r2, [r7, #20]
 8005ae8:	621a      	str	r2, [r3, #32]
}
 8005aea:	bf00      	nop
 8005aec:	371c      	adds	r7, #28
 8005aee:	46bd      	mov	sp, r7
 8005af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af4:	4770      	bx	lr

08005af6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005af6:	b480      	push	{r7}
 8005af8:	b087      	sub	sp, #28
 8005afa:	af00      	add	r7, sp, #0
 8005afc:	60f8      	str	r0, [r7, #12]
 8005afe:	60b9      	str	r1, [r7, #8]
 8005b00:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	6a1b      	ldr	r3, [r3, #32]
 8005b06:	f023 0210 	bic.w	r2, r3, #16
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	699b      	ldr	r3, [r3, #24]
 8005b12:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	6a1b      	ldr	r3, [r3, #32]
 8005b18:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005b1a:	697b      	ldr	r3, [r7, #20]
 8005b1c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005b20:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	031b      	lsls	r3, r3, #12
 8005b26:	697a      	ldr	r2, [r7, #20]
 8005b28:	4313      	orrs	r3, r2
 8005b2a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005b2c:	693b      	ldr	r3, [r7, #16]
 8005b2e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005b32:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005b34:	68bb      	ldr	r3, [r7, #8]
 8005b36:	011b      	lsls	r3, r3, #4
 8005b38:	693a      	ldr	r2, [r7, #16]
 8005b3a:	4313      	orrs	r3, r2
 8005b3c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	697a      	ldr	r2, [r7, #20]
 8005b42:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	693a      	ldr	r2, [r7, #16]
 8005b48:	621a      	str	r2, [r3, #32]
}
 8005b4a:	bf00      	nop
 8005b4c:	371c      	adds	r7, #28
 8005b4e:	46bd      	mov	sp, r7
 8005b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b54:	4770      	bx	lr

08005b56 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005b56:	b480      	push	{r7}
 8005b58:	b085      	sub	sp, #20
 8005b5a:	af00      	add	r7, sp, #0
 8005b5c:	6078      	str	r0, [r7, #4]
 8005b5e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	689b      	ldr	r3, [r3, #8]
 8005b64:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b6c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005b6e:	683a      	ldr	r2, [r7, #0]
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	4313      	orrs	r3, r2
 8005b74:	f043 0307 	orr.w	r3, r3, #7
 8005b78:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	68fa      	ldr	r2, [r7, #12]
 8005b7e:	609a      	str	r2, [r3, #8]
}
 8005b80:	bf00      	nop
 8005b82:	3714      	adds	r7, #20
 8005b84:	46bd      	mov	sp, r7
 8005b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b8a:	4770      	bx	lr

08005b8c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005b8c:	b480      	push	{r7}
 8005b8e:	b087      	sub	sp, #28
 8005b90:	af00      	add	r7, sp, #0
 8005b92:	60f8      	str	r0, [r7, #12]
 8005b94:	60b9      	str	r1, [r7, #8]
 8005b96:	607a      	str	r2, [r7, #4]
 8005b98:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	689b      	ldr	r3, [r3, #8]
 8005b9e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005ba0:	697b      	ldr	r3, [r7, #20]
 8005ba2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005ba6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005ba8:	683b      	ldr	r3, [r7, #0]
 8005baa:	021a      	lsls	r2, r3, #8
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	431a      	orrs	r2, r3
 8005bb0:	68bb      	ldr	r3, [r7, #8]
 8005bb2:	4313      	orrs	r3, r2
 8005bb4:	697a      	ldr	r2, [r7, #20]
 8005bb6:	4313      	orrs	r3, r2
 8005bb8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	697a      	ldr	r2, [r7, #20]
 8005bbe:	609a      	str	r2, [r3, #8]
}
 8005bc0:	bf00      	nop
 8005bc2:	371c      	adds	r7, #28
 8005bc4:	46bd      	mov	sp, r7
 8005bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bca:	4770      	bx	lr

08005bcc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005bcc:	b480      	push	{r7}
 8005bce:	b085      	sub	sp, #20
 8005bd0:	af00      	add	r7, sp, #0
 8005bd2:	6078      	str	r0, [r7, #4]
 8005bd4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005bdc:	2b01      	cmp	r3, #1
 8005bde:	d101      	bne.n	8005be4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005be0:	2302      	movs	r3, #2
 8005be2:	e05a      	b.n	8005c9a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	2201      	movs	r2, #1
 8005be8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	2202      	movs	r2, #2
 8005bf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	685b      	ldr	r3, [r3, #4]
 8005bfa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	689b      	ldr	r3, [r3, #8]
 8005c02:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c0a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005c0c:	683b      	ldr	r3, [r7, #0]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	68fa      	ldr	r2, [r7, #12]
 8005c12:	4313      	orrs	r3, r2
 8005c14:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	68fa      	ldr	r2, [r7, #12]
 8005c1c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	4a21      	ldr	r2, [pc, #132]	; (8005ca8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005c24:	4293      	cmp	r3, r2
 8005c26:	d022      	beq.n	8005c6e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c30:	d01d      	beq.n	8005c6e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	4a1d      	ldr	r2, [pc, #116]	; (8005cac <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005c38:	4293      	cmp	r3, r2
 8005c3a:	d018      	beq.n	8005c6e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	4a1b      	ldr	r2, [pc, #108]	; (8005cb0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005c42:	4293      	cmp	r3, r2
 8005c44:	d013      	beq.n	8005c6e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	4a1a      	ldr	r2, [pc, #104]	; (8005cb4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005c4c:	4293      	cmp	r3, r2
 8005c4e:	d00e      	beq.n	8005c6e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	4a18      	ldr	r2, [pc, #96]	; (8005cb8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005c56:	4293      	cmp	r3, r2
 8005c58:	d009      	beq.n	8005c6e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	4a17      	ldr	r2, [pc, #92]	; (8005cbc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005c60:	4293      	cmp	r3, r2
 8005c62:	d004      	beq.n	8005c6e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	4a15      	ldr	r2, [pc, #84]	; (8005cc0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005c6a:	4293      	cmp	r3, r2
 8005c6c:	d10c      	bne.n	8005c88 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005c6e:	68bb      	ldr	r3, [r7, #8]
 8005c70:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005c74:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005c76:	683b      	ldr	r3, [r7, #0]
 8005c78:	685b      	ldr	r3, [r3, #4]
 8005c7a:	68ba      	ldr	r2, [r7, #8]
 8005c7c:	4313      	orrs	r3, r2
 8005c7e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	68ba      	ldr	r2, [r7, #8]
 8005c86:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	2201      	movs	r2, #1
 8005c8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	2200      	movs	r2, #0
 8005c94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005c98:	2300      	movs	r3, #0
}
 8005c9a:	4618      	mov	r0, r3
 8005c9c:	3714      	adds	r7, #20
 8005c9e:	46bd      	mov	sp, r7
 8005ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca4:	4770      	bx	lr
 8005ca6:	bf00      	nop
 8005ca8:	40010000 	.word	0x40010000
 8005cac:	40000400 	.word	0x40000400
 8005cb0:	40000800 	.word	0x40000800
 8005cb4:	40000c00 	.word	0x40000c00
 8005cb8:	40010400 	.word	0x40010400
 8005cbc:	40014000 	.word	0x40014000
 8005cc0:	40001800 	.word	0x40001800

08005cc4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005cc4:	b480      	push	{r7}
 8005cc6:	b083      	sub	sp, #12
 8005cc8:	af00      	add	r7, sp, #0
 8005cca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005ccc:	bf00      	nop
 8005cce:	370c      	adds	r7, #12
 8005cd0:	46bd      	mov	sp, r7
 8005cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd6:	4770      	bx	lr

08005cd8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005cd8:	b480      	push	{r7}
 8005cda:	b083      	sub	sp, #12
 8005cdc:	af00      	add	r7, sp, #0
 8005cde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005ce0:	bf00      	nop
 8005ce2:	370c      	adds	r7, #12
 8005ce4:	46bd      	mov	sp, r7
 8005ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cea:	4770      	bx	lr

08005cec <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005cec:	b580      	push	{r7, lr}
 8005cee:	b082      	sub	sp, #8
 8005cf0:	af00      	add	r7, sp, #0
 8005cf2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d101      	bne.n	8005cfe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005cfa:	2301      	movs	r3, #1
 8005cfc:	e03f      	b.n	8005d7e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d04:	b2db      	uxtb	r3, r3
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d106      	bne.n	8005d18 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	2200      	movs	r2, #0
 8005d0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005d12:	6878      	ldr	r0, [r7, #4]
 8005d14:	f7fb fdba 	bl	800188c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	2224      	movs	r2, #36	; 0x24
 8005d1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	68da      	ldr	r2, [r3, #12]
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005d2e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005d30:	6878      	ldr	r0, [r7, #4]
 8005d32:	f001 f801 	bl	8006d38 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	691a      	ldr	r2, [r3, #16]
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005d44:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	695a      	ldr	r2, [r3, #20]
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005d54:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	68da      	ldr	r2, [r3, #12]
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005d64:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	2200      	movs	r2, #0
 8005d6a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	2220      	movs	r2, #32
 8005d70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	2220      	movs	r2, #32
 8005d78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005d7c:	2300      	movs	r3, #0
}
 8005d7e:	4618      	mov	r0, r3
 8005d80:	3708      	adds	r7, #8
 8005d82:	46bd      	mov	sp, r7
 8005d84:	bd80      	pop	{r7, pc}

08005d86 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005d86:	b580      	push	{r7, lr}
 8005d88:	b08a      	sub	sp, #40	; 0x28
 8005d8a:	af02      	add	r7, sp, #8
 8005d8c:	60f8      	str	r0, [r7, #12]
 8005d8e:	60b9      	str	r1, [r7, #8]
 8005d90:	603b      	str	r3, [r7, #0]
 8005d92:	4613      	mov	r3, r2
 8005d94:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005d96:	2300      	movs	r3, #0
 8005d98:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005da0:	b2db      	uxtb	r3, r3
 8005da2:	2b20      	cmp	r3, #32
 8005da4:	d17c      	bne.n	8005ea0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005da6:	68bb      	ldr	r3, [r7, #8]
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d002      	beq.n	8005db2 <HAL_UART_Transmit+0x2c>
 8005dac:	88fb      	ldrh	r3, [r7, #6]
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d101      	bne.n	8005db6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005db2:	2301      	movs	r3, #1
 8005db4:	e075      	b.n	8005ea2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005dbc:	2b01      	cmp	r3, #1
 8005dbe:	d101      	bne.n	8005dc4 <HAL_UART_Transmit+0x3e>
 8005dc0:	2302      	movs	r3, #2
 8005dc2:	e06e      	b.n	8005ea2 <HAL_UART_Transmit+0x11c>
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	2201      	movs	r2, #1
 8005dc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	2200      	movs	r2, #0
 8005dd0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	2221      	movs	r2, #33	; 0x21
 8005dd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005dda:	f7fb ff5d 	bl	8001c98 <HAL_GetTick>
 8005dde:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	88fa      	ldrh	r2, [r7, #6]
 8005de4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	88fa      	ldrh	r2, [r7, #6]
 8005dea:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	689b      	ldr	r3, [r3, #8]
 8005df0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005df4:	d108      	bne.n	8005e08 <HAL_UART_Transmit+0x82>
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	691b      	ldr	r3, [r3, #16]
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d104      	bne.n	8005e08 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8005dfe:	2300      	movs	r3, #0
 8005e00:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005e02:	68bb      	ldr	r3, [r7, #8]
 8005e04:	61bb      	str	r3, [r7, #24]
 8005e06:	e003      	b.n	8005e10 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005e08:	68bb      	ldr	r3, [r7, #8]
 8005e0a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005e0c:	2300      	movs	r3, #0
 8005e0e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	2200      	movs	r2, #0
 8005e14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8005e18:	e02a      	b.n	8005e70 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005e1a:	683b      	ldr	r3, [r7, #0]
 8005e1c:	9300      	str	r3, [sp, #0]
 8005e1e:	697b      	ldr	r3, [r7, #20]
 8005e20:	2200      	movs	r2, #0
 8005e22:	2180      	movs	r1, #128	; 0x80
 8005e24:	68f8      	ldr	r0, [r7, #12]
 8005e26:	f000 fcb9 	bl	800679c <UART_WaitOnFlagUntilTimeout>
 8005e2a:	4603      	mov	r3, r0
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d001      	beq.n	8005e34 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005e30:	2303      	movs	r3, #3
 8005e32:	e036      	b.n	8005ea2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005e34:	69fb      	ldr	r3, [r7, #28]
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d10b      	bne.n	8005e52 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005e3a:	69bb      	ldr	r3, [r7, #24]
 8005e3c:	881b      	ldrh	r3, [r3, #0]
 8005e3e:	461a      	mov	r2, r3
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005e48:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005e4a:	69bb      	ldr	r3, [r7, #24]
 8005e4c:	3302      	adds	r3, #2
 8005e4e:	61bb      	str	r3, [r7, #24]
 8005e50:	e007      	b.n	8005e62 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005e52:	69fb      	ldr	r3, [r7, #28]
 8005e54:	781a      	ldrb	r2, [r3, #0]
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005e5c:	69fb      	ldr	r3, [r7, #28]
 8005e5e:	3301      	adds	r3, #1
 8005e60:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005e66:	b29b      	uxth	r3, r3
 8005e68:	3b01      	subs	r3, #1
 8005e6a:	b29a      	uxth	r2, r3
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005e74:	b29b      	uxth	r3, r3
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d1cf      	bne.n	8005e1a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005e7a:	683b      	ldr	r3, [r7, #0]
 8005e7c:	9300      	str	r3, [sp, #0]
 8005e7e:	697b      	ldr	r3, [r7, #20]
 8005e80:	2200      	movs	r2, #0
 8005e82:	2140      	movs	r1, #64	; 0x40
 8005e84:	68f8      	ldr	r0, [r7, #12]
 8005e86:	f000 fc89 	bl	800679c <UART_WaitOnFlagUntilTimeout>
 8005e8a:	4603      	mov	r3, r0
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d001      	beq.n	8005e94 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005e90:	2303      	movs	r3, #3
 8005e92:	e006      	b.n	8005ea2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	2220      	movs	r2, #32
 8005e98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005e9c:	2300      	movs	r3, #0
 8005e9e:	e000      	b.n	8005ea2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005ea0:	2302      	movs	r3, #2
  }
}
 8005ea2:	4618      	mov	r0, r3
 8005ea4:	3720      	adds	r7, #32
 8005ea6:	46bd      	mov	sp, r7
 8005ea8:	bd80      	pop	{r7, pc}

08005eaa <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005eaa:	b580      	push	{r7, lr}
 8005eac:	b08a      	sub	sp, #40	; 0x28
 8005eae:	af02      	add	r7, sp, #8
 8005eb0:	60f8      	str	r0, [r7, #12]
 8005eb2:	60b9      	str	r1, [r7, #8]
 8005eb4:	603b      	str	r3, [r7, #0]
 8005eb6:	4613      	mov	r3, r2
 8005eb8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005eba:	2300      	movs	r3, #0
 8005ebc:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005ec4:	b2db      	uxtb	r3, r3
 8005ec6:	2b20      	cmp	r3, #32
 8005ec8:	f040 808c 	bne.w	8005fe4 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005ecc:	68bb      	ldr	r3, [r7, #8]
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d002      	beq.n	8005ed8 <HAL_UART_Receive+0x2e>
 8005ed2:	88fb      	ldrh	r3, [r7, #6]
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d101      	bne.n	8005edc <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8005ed8:	2301      	movs	r3, #1
 8005eda:	e084      	b.n	8005fe6 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005ee2:	2b01      	cmp	r3, #1
 8005ee4:	d101      	bne.n	8005eea <HAL_UART_Receive+0x40>
 8005ee6:	2302      	movs	r3, #2
 8005ee8:	e07d      	b.n	8005fe6 <HAL_UART_Receive+0x13c>
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	2201      	movs	r2, #1
 8005eee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	2200      	movs	r2, #0
 8005ef6:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	2222      	movs	r2, #34	; 0x22
 8005efc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	2200      	movs	r2, #0
 8005f04:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005f06:	f7fb fec7 	bl	8001c98 <HAL_GetTick>
 8005f0a:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	88fa      	ldrh	r2, [r7, #6]
 8005f10:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	88fa      	ldrh	r2, [r7, #6]
 8005f16:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	689b      	ldr	r3, [r3, #8]
 8005f1c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f20:	d108      	bne.n	8005f34 <HAL_UART_Receive+0x8a>
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	691b      	ldr	r3, [r3, #16]
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d104      	bne.n	8005f34 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8005f2a:	2300      	movs	r3, #0
 8005f2c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005f2e:	68bb      	ldr	r3, [r7, #8]
 8005f30:	61bb      	str	r3, [r7, #24]
 8005f32:	e003      	b.n	8005f3c <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8005f34:	68bb      	ldr	r3, [r7, #8]
 8005f36:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005f38:	2300      	movs	r3, #0
 8005f3a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	2200      	movs	r2, #0
 8005f40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8005f44:	e043      	b.n	8005fce <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8005f46:	683b      	ldr	r3, [r7, #0]
 8005f48:	9300      	str	r3, [sp, #0]
 8005f4a:	697b      	ldr	r3, [r7, #20]
 8005f4c:	2200      	movs	r2, #0
 8005f4e:	2120      	movs	r1, #32
 8005f50:	68f8      	ldr	r0, [r7, #12]
 8005f52:	f000 fc23 	bl	800679c <UART_WaitOnFlagUntilTimeout>
 8005f56:	4603      	mov	r3, r0
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d001      	beq.n	8005f60 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8005f5c:	2303      	movs	r3, #3
 8005f5e:	e042      	b.n	8005fe6 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8005f60:	69fb      	ldr	r3, [r7, #28]
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d10c      	bne.n	8005f80 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	685b      	ldr	r3, [r3, #4]
 8005f6c:	b29b      	uxth	r3, r3
 8005f6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f72:	b29a      	uxth	r2, r3
 8005f74:	69bb      	ldr	r3, [r7, #24]
 8005f76:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8005f78:	69bb      	ldr	r3, [r7, #24]
 8005f7a:	3302      	adds	r3, #2
 8005f7c:	61bb      	str	r3, [r7, #24]
 8005f7e:	e01f      	b.n	8005fc0 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	689b      	ldr	r3, [r3, #8]
 8005f84:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f88:	d007      	beq.n	8005f9a <HAL_UART_Receive+0xf0>
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	689b      	ldr	r3, [r3, #8]
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d10a      	bne.n	8005fa8 <HAL_UART_Receive+0xfe>
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	691b      	ldr	r3, [r3, #16]
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d106      	bne.n	8005fa8 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	685b      	ldr	r3, [r3, #4]
 8005fa0:	b2da      	uxtb	r2, r3
 8005fa2:	69fb      	ldr	r3, [r7, #28]
 8005fa4:	701a      	strb	r2, [r3, #0]
 8005fa6:	e008      	b.n	8005fba <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	685b      	ldr	r3, [r3, #4]
 8005fae:	b2db      	uxtb	r3, r3
 8005fb0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005fb4:	b2da      	uxtb	r2, r3
 8005fb6:	69fb      	ldr	r3, [r7, #28]
 8005fb8:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8005fba:	69fb      	ldr	r3, [r7, #28]
 8005fbc:	3301      	adds	r3, #1
 8005fbe:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005fc4:	b29b      	uxth	r3, r3
 8005fc6:	3b01      	subs	r3, #1
 8005fc8:	b29a      	uxth	r2, r3
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005fd2:	b29b      	uxth	r3, r3
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d1b6      	bne.n	8005f46 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	2220      	movs	r2, #32
 8005fdc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8005fe0:	2300      	movs	r3, #0
 8005fe2:	e000      	b.n	8005fe6 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8005fe4:	2302      	movs	r3, #2
  }
}
 8005fe6:	4618      	mov	r0, r3
 8005fe8:	3720      	adds	r7, #32
 8005fea:	46bd      	mov	sp, r7
 8005fec:	bd80      	pop	{r7, pc}

08005fee <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005fee:	b580      	push	{r7, lr}
 8005ff0:	b084      	sub	sp, #16
 8005ff2:	af00      	add	r7, sp, #0
 8005ff4:	60f8      	str	r0, [r7, #12]
 8005ff6:	60b9      	str	r1, [r7, #8]
 8005ff8:	4613      	mov	r3, r2
 8005ffa:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006002:	b2db      	uxtb	r3, r3
 8006004:	2b20      	cmp	r3, #32
 8006006:	d11d      	bne.n	8006044 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8006008:	68bb      	ldr	r3, [r7, #8]
 800600a:	2b00      	cmp	r3, #0
 800600c:	d002      	beq.n	8006014 <HAL_UART_Receive_DMA+0x26>
 800600e:	88fb      	ldrh	r3, [r7, #6]
 8006010:	2b00      	cmp	r3, #0
 8006012:	d101      	bne.n	8006018 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8006014:	2301      	movs	r3, #1
 8006016:	e016      	b.n	8006046 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800601e:	2b01      	cmp	r3, #1
 8006020:	d101      	bne.n	8006026 <HAL_UART_Receive_DMA+0x38>
 8006022:	2302      	movs	r3, #2
 8006024:	e00f      	b.n	8006046 <HAL_UART_Receive_DMA+0x58>
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	2201      	movs	r2, #1
 800602a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	2200      	movs	r2, #0
 8006032:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8006034:	88fb      	ldrh	r3, [r7, #6]
 8006036:	461a      	mov	r2, r3
 8006038:	68b9      	ldr	r1, [r7, #8]
 800603a:	68f8      	ldr	r0, [r7, #12]
 800603c:	f000 fc1c 	bl	8006878 <UART_Start_Receive_DMA>
 8006040:	4603      	mov	r3, r0
 8006042:	e000      	b.n	8006046 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8006044:	2302      	movs	r3, #2
  }
}
 8006046:	4618      	mov	r0, r3
 8006048:	3710      	adds	r7, #16
 800604a:	46bd      	mov	sp, r7
 800604c:	bd80      	pop	{r7, pc}
	...

08006050 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006050:	b580      	push	{r7, lr}
 8006052:	b0ba      	sub	sp, #232	; 0xe8
 8006054:	af00      	add	r7, sp, #0
 8006056:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	68db      	ldr	r3, [r3, #12]
 8006068:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	695b      	ldr	r3, [r3, #20]
 8006072:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8006076:	2300      	movs	r3, #0
 8006078:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800607c:	2300      	movs	r3, #0
 800607e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006082:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006086:	f003 030f 	and.w	r3, r3, #15
 800608a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800608e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006092:	2b00      	cmp	r3, #0
 8006094:	d10f      	bne.n	80060b6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006096:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800609a:	f003 0320 	and.w	r3, r3, #32
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d009      	beq.n	80060b6 <HAL_UART_IRQHandler+0x66>
 80060a2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80060a6:	f003 0320 	and.w	r3, r3, #32
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d003      	beq.n	80060b6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80060ae:	6878      	ldr	r0, [r7, #4]
 80060b0:	f000 fd87 	bl	8006bc2 <UART_Receive_IT>
      return;
 80060b4:	e256      	b.n	8006564 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80060b6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	f000 80de 	beq.w	800627c <HAL_UART_IRQHandler+0x22c>
 80060c0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80060c4:	f003 0301 	and.w	r3, r3, #1
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d106      	bne.n	80060da <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80060cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80060d0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	f000 80d1 	beq.w	800627c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80060da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80060de:	f003 0301 	and.w	r3, r3, #1
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d00b      	beq.n	80060fe <HAL_UART_IRQHandler+0xae>
 80060e6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80060ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d005      	beq.n	80060fe <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060f6:	f043 0201 	orr.w	r2, r3, #1
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80060fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006102:	f003 0304 	and.w	r3, r3, #4
 8006106:	2b00      	cmp	r3, #0
 8006108:	d00b      	beq.n	8006122 <HAL_UART_IRQHandler+0xd2>
 800610a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800610e:	f003 0301 	and.w	r3, r3, #1
 8006112:	2b00      	cmp	r3, #0
 8006114:	d005      	beq.n	8006122 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800611a:	f043 0202 	orr.w	r2, r3, #2
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006122:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006126:	f003 0302 	and.w	r3, r3, #2
 800612a:	2b00      	cmp	r3, #0
 800612c:	d00b      	beq.n	8006146 <HAL_UART_IRQHandler+0xf6>
 800612e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006132:	f003 0301 	and.w	r3, r3, #1
 8006136:	2b00      	cmp	r3, #0
 8006138:	d005      	beq.n	8006146 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800613e:	f043 0204 	orr.w	r2, r3, #4
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8006146:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800614a:	f003 0308 	and.w	r3, r3, #8
 800614e:	2b00      	cmp	r3, #0
 8006150:	d011      	beq.n	8006176 <HAL_UART_IRQHandler+0x126>
 8006152:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006156:	f003 0320 	and.w	r3, r3, #32
 800615a:	2b00      	cmp	r3, #0
 800615c:	d105      	bne.n	800616a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800615e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006162:	f003 0301 	and.w	r3, r3, #1
 8006166:	2b00      	cmp	r3, #0
 8006168:	d005      	beq.n	8006176 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800616e:	f043 0208 	orr.w	r2, r3, #8
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800617a:	2b00      	cmp	r3, #0
 800617c:	f000 81ed 	beq.w	800655a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006180:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006184:	f003 0320 	and.w	r3, r3, #32
 8006188:	2b00      	cmp	r3, #0
 800618a:	d008      	beq.n	800619e <HAL_UART_IRQHandler+0x14e>
 800618c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006190:	f003 0320 	and.w	r3, r3, #32
 8006194:	2b00      	cmp	r3, #0
 8006196:	d002      	beq.n	800619e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006198:	6878      	ldr	r0, [r7, #4]
 800619a:	f000 fd12 	bl	8006bc2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	695b      	ldr	r3, [r3, #20]
 80061a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061a8:	2b40      	cmp	r3, #64	; 0x40
 80061aa:	bf0c      	ite	eq
 80061ac:	2301      	moveq	r3, #1
 80061ae:	2300      	movne	r3, #0
 80061b0:	b2db      	uxtb	r3, r3
 80061b2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061ba:	f003 0308 	and.w	r3, r3, #8
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d103      	bne.n	80061ca <HAL_UART_IRQHandler+0x17a>
 80061c2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d04f      	beq.n	800626a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80061ca:	6878      	ldr	r0, [r7, #4]
 80061cc:	f000 fc1a 	bl	8006a04 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	695b      	ldr	r3, [r3, #20]
 80061d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061da:	2b40      	cmp	r3, #64	; 0x40
 80061dc:	d141      	bne.n	8006262 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	3314      	adds	r3, #20
 80061e4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061e8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80061ec:	e853 3f00 	ldrex	r3, [r3]
 80061f0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80061f4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80061f8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80061fc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	3314      	adds	r3, #20
 8006206:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800620a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800620e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006212:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006216:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800621a:	e841 2300 	strex	r3, r2, [r1]
 800621e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006222:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006226:	2b00      	cmp	r3, #0
 8006228:	d1d9      	bne.n	80061de <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800622e:	2b00      	cmp	r3, #0
 8006230:	d013      	beq.n	800625a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006236:	4a7d      	ldr	r2, [pc, #500]	; (800642c <HAL_UART_IRQHandler+0x3dc>)
 8006238:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800623e:	4618      	mov	r0, r3
 8006240:	f7fb ffe2 	bl	8002208 <HAL_DMA_Abort_IT>
 8006244:	4603      	mov	r3, r0
 8006246:	2b00      	cmp	r3, #0
 8006248:	d016      	beq.n	8006278 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800624e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006250:	687a      	ldr	r2, [r7, #4]
 8006252:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006254:	4610      	mov	r0, r2
 8006256:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006258:	e00e      	b.n	8006278 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800625a:	6878      	ldr	r0, [r7, #4]
 800625c:	f000 f990 	bl	8006580 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006260:	e00a      	b.n	8006278 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006262:	6878      	ldr	r0, [r7, #4]
 8006264:	f000 f98c 	bl	8006580 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006268:	e006      	b.n	8006278 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800626a:	6878      	ldr	r0, [r7, #4]
 800626c:	f000 f988 	bl	8006580 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	2200      	movs	r2, #0
 8006274:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8006276:	e170      	b.n	800655a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006278:	bf00      	nop
    return;
 800627a:	e16e      	b.n	800655a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006280:	2b01      	cmp	r3, #1
 8006282:	f040 814a 	bne.w	800651a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006286:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800628a:	f003 0310 	and.w	r3, r3, #16
 800628e:	2b00      	cmp	r3, #0
 8006290:	f000 8143 	beq.w	800651a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006294:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006298:	f003 0310 	and.w	r3, r3, #16
 800629c:	2b00      	cmp	r3, #0
 800629e:	f000 813c 	beq.w	800651a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80062a2:	2300      	movs	r3, #0
 80062a4:	60bb      	str	r3, [r7, #8]
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	60bb      	str	r3, [r7, #8]
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	685b      	ldr	r3, [r3, #4]
 80062b4:	60bb      	str	r3, [r7, #8]
 80062b6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	695b      	ldr	r3, [r3, #20]
 80062be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062c2:	2b40      	cmp	r3, #64	; 0x40
 80062c4:	f040 80b4 	bne.w	8006430 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	685b      	ldr	r3, [r3, #4]
 80062d0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80062d4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80062d8:	2b00      	cmp	r3, #0
 80062da:	f000 8140 	beq.w	800655e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80062e2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80062e6:	429a      	cmp	r2, r3
 80062e8:	f080 8139 	bcs.w	800655e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80062f2:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062f8:	69db      	ldr	r3, [r3, #28]
 80062fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80062fe:	f000 8088 	beq.w	8006412 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	330c      	adds	r3, #12
 8006308:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800630c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006310:	e853 3f00 	ldrex	r3, [r3]
 8006314:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006318:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800631c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006320:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	330c      	adds	r3, #12
 800632a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800632e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006332:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006336:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800633a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800633e:	e841 2300 	strex	r3, r2, [r1]
 8006342:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006346:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800634a:	2b00      	cmp	r3, #0
 800634c:	d1d9      	bne.n	8006302 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	3314      	adds	r3, #20
 8006354:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006356:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006358:	e853 3f00 	ldrex	r3, [r3]
 800635c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800635e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006360:	f023 0301 	bic.w	r3, r3, #1
 8006364:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	3314      	adds	r3, #20
 800636e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006372:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006376:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006378:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800637a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800637e:	e841 2300 	strex	r3, r2, [r1]
 8006382:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006384:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006386:	2b00      	cmp	r3, #0
 8006388:	d1e1      	bne.n	800634e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	3314      	adds	r3, #20
 8006390:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006392:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006394:	e853 3f00 	ldrex	r3, [r3]
 8006398:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800639a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800639c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80063a0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	3314      	adds	r3, #20
 80063aa:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80063ae:	66fa      	str	r2, [r7, #108]	; 0x6c
 80063b0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063b2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80063b4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80063b6:	e841 2300 	strex	r3, r2, [r1]
 80063ba:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80063bc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d1e3      	bne.n	800638a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	2220      	movs	r2, #32
 80063c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	2200      	movs	r2, #0
 80063ce:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	330c      	adds	r3, #12
 80063d6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80063da:	e853 3f00 	ldrex	r3, [r3]
 80063de:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80063e0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80063e2:	f023 0310 	bic.w	r3, r3, #16
 80063e6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	330c      	adds	r3, #12
 80063f0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80063f4:	65ba      	str	r2, [r7, #88]	; 0x58
 80063f6:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063f8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80063fa:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80063fc:	e841 2300 	strex	r3, r2, [r1]
 8006400:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006402:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006404:	2b00      	cmp	r3, #0
 8006406:	d1e3      	bne.n	80063d0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800640c:	4618      	mov	r0, r3
 800640e:	f7fb fe8b 	bl	8002128 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800641a:	b29b      	uxth	r3, r3
 800641c:	1ad3      	subs	r3, r2, r3
 800641e:	b29b      	uxth	r3, r3
 8006420:	4619      	mov	r1, r3
 8006422:	6878      	ldr	r0, [r7, #4]
 8006424:	f000 f8b6 	bl	8006594 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006428:	e099      	b.n	800655e <HAL_UART_IRQHandler+0x50e>
 800642a:	bf00      	nop
 800642c:	08006acb 	.word	0x08006acb
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006438:	b29b      	uxth	r3, r3
 800643a:	1ad3      	subs	r3, r2, r3
 800643c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006444:	b29b      	uxth	r3, r3
 8006446:	2b00      	cmp	r3, #0
 8006448:	f000 808b 	beq.w	8006562 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800644c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006450:	2b00      	cmp	r3, #0
 8006452:	f000 8086 	beq.w	8006562 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	330c      	adds	r3, #12
 800645c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800645e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006460:	e853 3f00 	ldrex	r3, [r3]
 8006464:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006466:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006468:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800646c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	330c      	adds	r3, #12
 8006476:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800647a:	647a      	str	r2, [r7, #68]	; 0x44
 800647c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800647e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006480:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006482:	e841 2300 	strex	r3, r2, [r1]
 8006486:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006488:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800648a:	2b00      	cmp	r3, #0
 800648c:	d1e3      	bne.n	8006456 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	3314      	adds	r3, #20
 8006494:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006498:	e853 3f00 	ldrex	r3, [r3]
 800649c:	623b      	str	r3, [r7, #32]
   return(result);
 800649e:	6a3b      	ldr	r3, [r7, #32]
 80064a0:	f023 0301 	bic.w	r3, r3, #1
 80064a4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	3314      	adds	r3, #20
 80064ae:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80064b2:	633a      	str	r2, [r7, #48]	; 0x30
 80064b4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064b6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80064b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80064ba:	e841 2300 	strex	r3, r2, [r1]
 80064be:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80064c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d1e3      	bne.n	800648e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	2220      	movs	r2, #32
 80064ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	2200      	movs	r2, #0
 80064d2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	330c      	adds	r3, #12
 80064da:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064dc:	693b      	ldr	r3, [r7, #16]
 80064de:	e853 3f00 	ldrex	r3, [r3]
 80064e2:	60fb      	str	r3, [r7, #12]
   return(result);
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	f023 0310 	bic.w	r3, r3, #16
 80064ea:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	330c      	adds	r3, #12
 80064f4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80064f8:	61fa      	str	r2, [r7, #28]
 80064fa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064fc:	69b9      	ldr	r1, [r7, #24]
 80064fe:	69fa      	ldr	r2, [r7, #28]
 8006500:	e841 2300 	strex	r3, r2, [r1]
 8006504:	617b      	str	r3, [r7, #20]
   return(result);
 8006506:	697b      	ldr	r3, [r7, #20]
 8006508:	2b00      	cmp	r3, #0
 800650a:	d1e3      	bne.n	80064d4 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800650c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006510:	4619      	mov	r1, r3
 8006512:	6878      	ldr	r0, [r7, #4]
 8006514:	f000 f83e 	bl	8006594 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006518:	e023      	b.n	8006562 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800651a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800651e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006522:	2b00      	cmp	r3, #0
 8006524:	d009      	beq.n	800653a <HAL_UART_IRQHandler+0x4ea>
 8006526:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800652a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800652e:	2b00      	cmp	r3, #0
 8006530:	d003      	beq.n	800653a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8006532:	6878      	ldr	r0, [r7, #4]
 8006534:	f000 fadd 	bl	8006af2 <UART_Transmit_IT>
    return;
 8006538:	e014      	b.n	8006564 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800653a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800653e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006542:	2b00      	cmp	r3, #0
 8006544:	d00e      	beq.n	8006564 <HAL_UART_IRQHandler+0x514>
 8006546:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800654a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800654e:	2b00      	cmp	r3, #0
 8006550:	d008      	beq.n	8006564 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8006552:	6878      	ldr	r0, [r7, #4]
 8006554:	f000 fb1d 	bl	8006b92 <UART_EndTransmit_IT>
    return;
 8006558:	e004      	b.n	8006564 <HAL_UART_IRQHandler+0x514>
    return;
 800655a:	bf00      	nop
 800655c:	e002      	b.n	8006564 <HAL_UART_IRQHandler+0x514>
      return;
 800655e:	bf00      	nop
 8006560:	e000      	b.n	8006564 <HAL_UART_IRQHandler+0x514>
      return;
 8006562:	bf00      	nop
  }
}
 8006564:	37e8      	adds	r7, #232	; 0xe8
 8006566:	46bd      	mov	sp, r7
 8006568:	bd80      	pop	{r7, pc}
 800656a:	bf00      	nop

0800656c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800656c:	b480      	push	{r7}
 800656e:	b083      	sub	sp, #12
 8006570:	af00      	add	r7, sp, #0
 8006572:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006574:	bf00      	nop
 8006576:	370c      	adds	r7, #12
 8006578:	46bd      	mov	sp, r7
 800657a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800657e:	4770      	bx	lr

08006580 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006580:	b480      	push	{r7}
 8006582:	b083      	sub	sp, #12
 8006584:	af00      	add	r7, sp, #0
 8006586:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006588:	bf00      	nop
 800658a:	370c      	adds	r7, #12
 800658c:	46bd      	mov	sp, r7
 800658e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006592:	4770      	bx	lr

08006594 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006594:	b480      	push	{r7}
 8006596:	b083      	sub	sp, #12
 8006598:	af00      	add	r7, sp, #0
 800659a:	6078      	str	r0, [r7, #4]
 800659c:	460b      	mov	r3, r1
 800659e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80065a0:	bf00      	nop
 80065a2:	370c      	adds	r7, #12
 80065a4:	46bd      	mov	sp, r7
 80065a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065aa:	4770      	bx	lr

080065ac <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80065ac:	b580      	push	{r7, lr}
 80065ae:	b09c      	sub	sp, #112	; 0x70
 80065b0:	af00      	add	r7, sp, #0
 80065b2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065b8:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d172      	bne.n	80066ae <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 80065c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80065ca:	2200      	movs	r2, #0
 80065cc:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80065ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	330c      	adds	r3, #12
 80065d4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80065d8:	e853 3f00 	ldrex	r3, [r3]
 80065dc:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80065de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80065e0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80065e4:	66bb      	str	r3, [r7, #104]	; 0x68
 80065e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	330c      	adds	r3, #12
 80065ec:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80065ee:	65ba      	str	r2, [r7, #88]	; 0x58
 80065f0:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065f2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80065f4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80065f6:	e841 2300 	strex	r3, r2, [r1]
 80065fa:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80065fc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d1e5      	bne.n	80065ce <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006602:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	3314      	adds	r3, #20
 8006608:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800660a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800660c:	e853 3f00 	ldrex	r3, [r3]
 8006610:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006612:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006614:	f023 0301 	bic.w	r3, r3, #1
 8006618:	667b      	str	r3, [r7, #100]	; 0x64
 800661a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	3314      	adds	r3, #20
 8006620:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8006622:	647a      	str	r2, [r7, #68]	; 0x44
 8006624:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006626:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006628:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800662a:	e841 2300 	strex	r3, r2, [r1]
 800662e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006630:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006632:	2b00      	cmp	r3, #0
 8006634:	d1e5      	bne.n	8006602 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006636:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	3314      	adds	r3, #20
 800663c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800663e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006640:	e853 3f00 	ldrex	r3, [r3]
 8006644:	623b      	str	r3, [r7, #32]
   return(result);
 8006646:	6a3b      	ldr	r3, [r7, #32]
 8006648:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800664c:	663b      	str	r3, [r7, #96]	; 0x60
 800664e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	3314      	adds	r3, #20
 8006654:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006656:	633a      	str	r2, [r7, #48]	; 0x30
 8006658:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800665a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800665c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800665e:	e841 2300 	strex	r3, r2, [r1]
 8006662:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006664:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006666:	2b00      	cmp	r3, #0
 8006668:	d1e5      	bne.n	8006636 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800666a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800666c:	2220      	movs	r2, #32
 800666e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006672:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006676:	2b01      	cmp	r3, #1
 8006678:	d119      	bne.n	80066ae <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800667a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	330c      	adds	r3, #12
 8006680:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006682:	693b      	ldr	r3, [r7, #16]
 8006684:	e853 3f00 	ldrex	r3, [r3]
 8006688:	60fb      	str	r3, [r7, #12]
   return(result);
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	f023 0310 	bic.w	r3, r3, #16
 8006690:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006692:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	330c      	adds	r3, #12
 8006698:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800669a:	61fa      	str	r2, [r7, #28]
 800669c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800669e:	69b9      	ldr	r1, [r7, #24]
 80066a0:	69fa      	ldr	r2, [r7, #28]
 80066a2:	e841 2300 	strex	r3, r2, [r1]
 80066a6:	617b      	str	r3, [r7, #20]
   return(result);
 80066a8:	697b      	ldr	r3, [r7, #20]
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d1e5      	bne.n	800667a <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80066ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80066b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066b2:	2b01      	cmp	r3, #1
 80066b4:	d106      	bne.n	80066c4 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80066b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80066b8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80066ba:	4619      	mov	r1, r3
 80066bc:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80066be:	f7ff ff69 	bl	8006594 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80066c2:	e002      	b.n	80066ca <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 80066c4:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80066c6:	f7fa ff31 	bl	800152c <HAL_UART_RxCpltCallback>
}
 80066ca:	bf00      	nop
 80066cc:	3770      	adds	r7, #112	; 0x70
 80066ce:	46bd      	mov	sp, r7
 80066d0:	bd80      	pop	{r7, pc}

080066d2 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80066d2:	b580      	push	{r7, lr}
 80066d4:	b084      	sub	sp, #16
 80066d6:	af00      	add	r7, sp, #0
 80066d8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066de:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066e4:	2b01      	cmp	r3, #1
 80066e6:	d108      	bne.n	80066fa <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80066ec:	085b      	lsrs	r3, r3, #1
 80066ee:	b29b      	uxth	r3, r3
 80066f0:	4619      	mov	r1, r3
 80066f2:	68f8      	ldr	r0, [r7, #12]
 80066f4:	f7ff ff4e 	bl	8006594 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80066f8:	e002      	b.n	8006700 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 80066fa:	68f8      	ldr	r0, [r7, #12]
 80066fc:	f7fa ff3e 	bl	800157c <HAL_UART_RxHalfCpltCallback>
}
 8006700:	bf00      	nop
 8006702:	3710      	adds	r7, #16
 8006704:	46bd      	mov	sp, r7
 8006706:	bd80      	pop	{r7, pc}

08006708 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8006708:	b580      	push	{r7, lr}
 800670a:	b084      	sub	sp, #16
 800670c:	af00      	add	r7, sp, #0
 800670e:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8006710:	2300      	movs	r3, #0
 8006712:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006718:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800671a:	68bb      	ldr	r3, [r7, #8]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	695b      	ldr	r3, [r3, #20]
 8006720:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006724:	2b80      	cmp	r3, #128	; 0x80
 8006726:	bf0c      	ite	eq
 8006728:	2301      	moveq	r3, #1
 800672a:	2300      	movne	r3, #0
 800672c:	b2db      	uxtb	r3, r3
 800672e:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8006730:	68bb      	ldr	r3, [r7, #8]
 8006732:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006736:	b2db      	uxtb	r3, r3
 8006738:	2b21      	cmp	r3, #33	; 0x21
 800673a:	d108      	bne.n	800674e <UART_DMAError+0x46>
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	2b00      	cmp	r3, #0
 8006740:	d005      	beq.n	800674e <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8006742:	68bb      	ldr	r3, [r7, #8]
 8006744:	2200      	movs	r2, #0
 8006746:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8006748:	68b8      	ldr	r0, [r7, #8]
 800674a:	f000 f933 	bl	80069b4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800674e:	68bb      	ldr	r3, [r7, #8]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	695b      	ldr	r3, [r3, #20]
 8006754:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006758:	2b40      	cmp	r3, #64	; 0x40
 800675a:	bf0c      	ite	eq
 800675c:	2301      	moveq	r3, #1
 800675e:	2300      	movne	r3, #0
 8006760:	b2db      	uxtb	r3, r3
 8006762:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8006764:	68bb      	ldr	r3, [r7, #8]
 8006766:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800676a:	b2db      	uxtb	r3, r3
 800676c:	2b22      	cmp	r3, #34	; 0x22
 800676e:	d108      	bne.n	8006782 <UART_DMAError+0x7a>
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	2b00      	cmp	r3, #0
 8006774:	d005      	beq.n	8006782 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8006776:	68bb      	ldr	r3, [r7, #8]
 8006778:	2200      	movs	r2, #0
 800677a:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800677c:	68b8      	ldr	r0, [r7, #8]
 800677e:	f000 f941 	bl	8006a04 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006782:	68bb      	ldr	r3, [r7, #8]
 8006784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006786:	f043 0210 	orr.w	r2, r3, #16
 800678a:	68bb      	ldr	r3, [r7, #8]
 800678c:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800678e:	68b8      	ldr	r0, [r7, #8]
 8006790:	f7ff fef6 	bl	8006580 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006794:	bf00      	nop
 8006796:	3710      	adds	r7, #16
 8006798:	46bd      	mov	sp, r7
 800679a:	bd80      	pop	{r7, pc}

0800679c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800679c:	b580      	push	{r7, lr}
 800679e:	b090      	sub	sp, #64	; 0x40
 80067a0:	af00      	add	r7, sp, #0
 80067a2:	60f8      	str	r0, [r7, #12]
 80067a4:	60b9      	str	r1, [r7, #8]
 80067a6:	603b      	str	r3, [r7, #0]
 80067a8:	4613      	mov	r3, r2
 80067aa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80067ac:	e050      	b.n	8006850 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80067ae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80067b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067b4:	d04c      	beq.n	8006850 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80067b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d007      	beq.n	80067cc <UART_WaitOnFlagUntilTimeout+0x30>
 80067bc:	f7fb fa6c 	bl	8001c98 <HAL_GetTick>
 80067c0:	4602      	mov	r2, r0
 80067c2:	683b      	ldr	r3, [r7, #0]
 80067c4:	1ad3      	subs	r3, r2, r3
 80067c6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80067c8:	429a      	cmp	r2, r3
 80067ca:	d241      	bcs.n	8006850 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	330c      	adds	r3, #12
 80067d2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067d6:	e853 3f00 	ldrex	r3, [r3]
 80067da:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80067dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067de:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80067e2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	330c      	adds	r3, #12
 80067ea:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80067ec:	637a      	str	r2, [r7, #52]	; 0x34
 80067ee:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067f0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80067f2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80067f4:	e841 2300 	strex	r3, r2, [r1]
 80067f8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80067fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d1e5      	bne.n	80067cc <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	3314      	adds	r3, #20
 8006806:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006808:	697b      	ldr	r3, [r7, #20]
 800680a:	e853 3f00 	ldrex	r3, [r3]
 800680e:	613b      	str	r3, [r7, #16]
   return(result);
 8006810:	693b      	ldr	r3, [r7, #16]
 8006812:	f023 0301 	bic.w	r3, r3, #1
 8006816:	63bb      	str	r3, [r7, #56]	; 0x38
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	3314      	adds	r3, #20
 800681e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006820:	623a      	str	r2, [r7, #32]
 8006822:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006824:	69f9      	ldr	r1, [r7, #28]
 8006826:	6a3a      	ldr	r2, [r7, #32]
 8006828:	e841 2300 	strex	r3, r2, [r1]
 800682c:	61bb      	str	r3, [r7, #24]
   return(result);
 800682e:	69bb      	ldr	r3, [r7, #24]
 8006830:	2b00      	cmp	r3, #0
 8006832:	d1e5      	bne.n	8006800 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	2220      	movs	r2, #32
 8006838:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	2220      	movs	r2, #32
 8006840:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	2200      	movs	r2, #0
 8006848:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800684c:	2303      	movs	r3, #3
 800684e:	e00f      	b.n	8006870 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	681a      	ldr	r2, [r3, #0]
 8006856:	68bb      	ldr	r3, [r7, #8]
 8006858:	4013      	ands	r3, r2
 800685a:	68ba      	ldr	r2, [r7, #8]
 800685c:	429a      	cmp	r2, r3
 800685e:	bf0c      	ite	eq
 8006860:	2301      	moveq	r3, #1
 8006862:	2300      	movne	r3, #0
 8006864:	b2db      	uxtb	r3, r3
 8006866:	461a      	mov	r2, r3
 8006868:	79fb      	ldrb	r3, [r7, #7]
 800686a:	429a      	cmp	r2, r3
 800686c:	d09f      	beq.n	80067ae <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800686e:	2300      	movs	r3, #0
}
 8006870:	4618      	mov	r0, r3
 8006872:	3740      	adds	r7, #64	; 0x40
 8006874:	46bd      	mov	sp, r7
 8006876:	bd80      	pop	{r7, pc}

08006878 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006878:	b580      	push	{r7, lr}
 800687a:	b098      	sub	sp, #96	; 0x60
 800687c:	af00      	add	r7, sp, #0
 800687e:	60f8      	str	r0, [r7, #12]
 8006880:	60b9      	str	r1, [r7, #8]
 8006882:	4613      	mov	r3, r2
 8006884:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8006886:	68ba      	ldr	r2, [r7, #8]
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	88fa      	ldrh	r2, [r7, #6]
 8006890:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	2200      	movs	r2, #0
 8006896:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	2222      	movs	r2, #34	; 0x22
 800689c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068a4:	4a40      	ldr	r2, [pc, #256]	; (80069a8 <UART_Start_Receive_DMA+0x130>)
 80068a6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068ac:	4a3f      	ldr	r2, [pc, #252]	; (80069ac <UART_Start_Receive_DMA+0x134>)
 80068ae:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068b4:	4a3e      	ldr	r2, [pc, #248]	; (80069b0 <UART_Start_Receive_DMA+0x138>)
 80068b6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068bc:	2200      	movs	r2, #0
 80068be:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 80068c0:	f107 0308 	add.w	r3, r7, #8
 80068c4:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	3304      	adds	r3, #4
 80068d0:	4619      	mov	r1, r3
 80068d2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80068d4:	681a      	ldr	r2, [r3, #0]
 80068d6:	88fb      	ldrh	r3, [r7, #6]
 80068d8:	f7fb fbce 	bl	8002078 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 80068dc:	2300      	movs	r3, #0
 80068de:	613b      	str	r3, [r7, #16]
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	613b      	str	r3, [r7, #16]
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	685b      	ldr	r3, [r3, #4]
 80068ee:	613b      	str	r3, [r7, #16]
 80068f0:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	2200      	movs	r2, #0
 80068f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	691b      	ldr	r3, [r3, #16]
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d019      	beq.n	8006936 <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	330c      	adds	r3, #12
 8006908:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800690a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800690c:	e853 3f00 	ldrex	r3, [r3]
 8006910:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006912:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006914:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006918:	65bb      	str	r3, [r7, #88]	; 0x58
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	330c      	adds	r3, #12
 8006920:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006922:	64fa      	str	r2, [r7, #76]	; 0x4c
 8006924:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006926:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8006928:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800692a:	e841 2300 	strex	r3, r2, [r1]
 800692e:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8006930:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006932:	2b00      	cmp	r3, #0
 8006934:	d1e5      	bne.n	8006902 <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	3314      	adds	r3, #20
 800693c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800693e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006940:	e853 3f00 	ldrex	r3, [r3]
 8006944:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006946:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006948:	f043 0301 	orr.w	r3, r3, #1
 800694c:	657b      	str	r3, [r7, #84]	; 0x54
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	3314      	adds	r3, #20
 8006954:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006956:	63ba      	str	r2, [r7, #56]	; 0x38
 8006958:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800695a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800695c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800695e:	e841 2300 	strex	r3, r2, [r1]
 8006962:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006964:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006966:	2b00      	cmp	r3, #0
 8006968:	d1e5      	bne.n	8006936 <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	3314      	adds	r3, #20
 8006970:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006972:	69bb      	ldr	r3, [r7, #24]
 8006974:	e853 3f00 	ldrex	r3, [r3]
 8006978:	617b      	str	r3, [r7, #20]
   return(result);
 800697a:	697b      	ldr	r3, [r7, #20]
 800697c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006980:	653b      	str	r3, [r7, #80]	; 0x50
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	3314      	adds	r3, #20
 8006988:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800698a:	627a      	str	r2, [r7, #36]	; 0x24
 800698c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800698e:	6a39      	ldr	r1, [r7, #32]
 8006990:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006992:	e841 2300 	strex	r3, r2, [r1]
 8006996:	61fb      	str	r3, [r7, #28]
   return(result);
 8006998:	69fb      	ldr	r3, [r7, #28]
 800699a:	2b00      	cmp	r3, #0
 800699c:	d1e5      	bne.n	800696a <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 800699e:	2300      	movs	r3, #0
}
 80069a0:	4618      	mov	r0, r3
 80069a2:	3760      	adds	r7, #96	; 0x60
 80069a4:	46bd      	mov	sp, r7
 80069a6:	bd80      	pop	{r7, pc}
 80069a8:	080065ad 	.word	0x080065ad
 80069ac:	080066d3 	.word	0x080066d3
 80069b0:	08006709 	.word	0x08006709

080069b4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80069b4:	b480      	push	{r7}
 80069b6:	b089      	sub	sp, #36	; 0x24
 80069b8:	af00      	add	r7, sp, #0
 80069ba:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	330c      	adds	r3, #12
 80069c2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	e853 3f00 	ldrex	r3, [r3]
 80069ca:	60bb      	str	r3, [r7, #8]
   return(result);
 80069cc:	68bb      	ldr	r3, [r7, #8]
 80069ce:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80069d2:	61fb      	str	r3, [r7, #28]
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	330c      	adds	r3, #12
 80069da:	69fa      	ldr	r2, [r7, #28]
 80069dc:	61ba      	str	r2, [r7, #24]
 80069de:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069e0:	6979      	ldr	r1, [r7, #20]
 80069e2:	69ba      	ldr	r2, [r7, #24]
 80069e4:	e841 2300 	strex	r3, r2, [r1]
 80069e8:	613b      	str	r3, [r7, #16]
   return(result);
 80069ea:	693b      	ldr	r3, [r7, #16]
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d1e5      	bne.n	80069bc <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	2220      	movs	r2, #32
 80069f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 80069f8:	bf00      	nop
 80069fa:	3724      	adds	r7, #36	; 0x24
 80069fc:	46bd      	mov	sp, r7
 80069fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a02:	4770      	bx	lr

08006a04 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006a04:	b480      	push	{r7}
 8006a06:	b095      	sub	sp, #84	; 0x54
 8006a08:	af00      	add	r7, sp, #0
 8006a0a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	330c      	adds	r3, #12
 8006a12:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a16:	e853 3f00 	ldrex	r3, [r3]
 8006a1a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006a1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a1e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006a22:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	330c      	adds	r3, #12
 8006a2a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006a2c:	643a      	str	r2, [r7, #64]	; 0x40
 8006a2e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a30:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006a32:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006a34:	e841 2300 	strex	r3, r2, [r1]
 8006a38:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006a3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d1e5      	bne.n	8006a0c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	3314      	adds	r3, #20
 8006a46:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a48:	6a3b      	ldr	r3, [r7, #32]
 8006a4a:	e853 3f00 	ldrex	r3, [r3]
 8006a4e:	61fb      	str	r3, [r7, #28]
   return(result);
 8006a50:	69fb      	ldr	r3, [r7, #28]
 8006a52:	f023 0301 	bic.w	r3, r3, #1
 8006a56:	64bb      	str	r3, [r7, #72]	; 0x48
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	3314      	adds	r3, #20
 8006a5e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006a60:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006a62:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a64:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006a66:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006a68:	e841 2300 	strex	r3, r2, [r1]
 8006a6c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006a6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d1e5      	bne.n	8006a40 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a78:	2b01      	cmp	r3, #1
 8006a7a:	d119      	bne.n	8006ab0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	330c      	adds	r3, #12
 8006a82:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	e853 3f00 	ldrex	r3, [r3]
 8006a8a:	60bb      	str	r3, [r7, #8]
   return(result);
 8006a8c:	68bb      	ldr	r3, [r7, #8]
 8006a8e:	f023 0310 	bic.w	r3, r3, #16
 8006a92:	647b      	str	r3, [r7, #68]	; 0x44
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	330c      	adds	r3, #12
 8006a9a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006a9c:	61ba      	str	r2, [r7, #24]
 8006a9e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006aa0:	6979      	ldr	r1, [r7, #20]
 8006aa2:	69ba      	ldr	r2, [r7, #24]
 8006aa4:	e841 2300 	strex	r3, r2, [r1]
 8006aa8:	613b      	str	r3, [r7, #16]
   return(result);
 8006aaa:	693b      	ldr	r3, [r7, #16]
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d1e5      	bne.n	8006a7c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	2220      	movs	r2, #32
 8006ab4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	2200      	movs	r2, #0
 8006abc:	631a      	str	r2, [r3, #48]	; 0x30
}
 8006abe:	bf00      	nop
 8006ac0:	3754      	adds	r7, #84	; 0x54
 8006ac2:	46bd      	mov	sp, r7
 8006ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac8:	4770      	bx	lr

08006aca <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006aca:	b580      	push	{r7, lr}
 8006acc:	b084      	sub	sp, #16
 8006ace:	af00      	add	r7, sp, #0
 8006ad0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ad6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	2200      	movs	r2, #0
 8006adc:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	2200      	movs	r2, #0
 8006ae2:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006ae4:	68f8      	ldr	r0, [r7, #12]
 8006ae6:	f7ff fd4b 	bl	8006580 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006aea:	bf00      	nop
 8006aec:	3710      	adds	r7, #16
 8006aee:	46bd      	mov	sp, r7
 8006af0:	bd80      	pop	{r7, pc}

08006af2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006af2:	b480      	push	{r7}
 8006af4:	b085      	sub	sp, #20
 8006af6:	af00      	add	r7, sp, #0
 8006af8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006b00:	b2db      	uxtb	r3, r3
 8006b02:	2b21      	cmp	r3, #33	; 0x21
 8006b04:	d13e      	bne.n	8006b84 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	689b      	ldr	r3, [r3, #8]
 8006b0a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006b0e:	d114      	bne.n	8006b3a <UART_Transmit_IT+0x48>
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	691b      	ldr	r3, [r3, #16]
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d110      	bne.n	8006b3a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	6a1b      	ldr	r3, [r3, #32]
 8006b1c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	881b      	ldrh	r3, [r3, #0]
 8006b22:	461a      	mov	r2, r3
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006b2c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	6a1b      	ldr	r3, [r3, #32]
 8006b32:	1c9a      	adds	r2, r3, #2
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	621a      	str	r2, [r3, #32]
 8006b38:	e008      	b.n	8006b4c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	6a1b      	ldr	r3, [r3, #32]
 8006b3e:	1c59      	adds	r1, r3, #1
 8006b40:	687a      	ldr	r2, [r7, #4]
 8006b42:	6211      	str	r1, [r2, #32]
 8006b44:	781a      	ldrb	r2, [r3, #0]
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006b50:	b29b      	uxth	r3, r3
 8006b52:	3b01      	subs	r3, #1
 8006b54:	b29b      	uxth	r3, r3
 8006b56:	687a      	ldr	r2, [r7, #4]
 8006b58:	4619      	mov	r1, r3
 8006b5a:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d10f      	bne.n	8006b80 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	68da      	ldr	r2, [r3, #12]
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006b6e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	68da      	ldr	r2, [r3, #12]
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006b7e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006b80:	2300      	movs	r3, #0
 8006b82:	e000      	b.n	8006b86 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006b84:	2302      	movs	r3, #2
  }
}
 8006b86:	4618      	mov	r0, r3
 8006b88:	3714      	adds	r7, #20
 8006b8a:	46bd      	mov	sp, r7
 8006b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b90:	4770      	bx	lr

08006b92 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006b92:	b580      	push	{r7, lr}
 8006b94:	b082      	sub	sp, #8
 8006b96:	af00      	add	r7, sp, #0
 8006b98:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	68da      	ldr	r2, [r3, #12]
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006ba8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	2220      	movs	r2, #32
 8006bae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006bb2:	6878      	ldr	r0, [r7, #4]
 8006bb4:	f7ff fcda 	bl	800656c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006bb8:	2300      	movs	r3, #0
}
 8006bba:	4618      	mov	r0, r3
 8006bbc:	3708      	adds	r7, #8
 8006bbe:	46bd      	mov	sp, r7
 8006bc0:	bd80      	pop	{r7, pc}

08006bc2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006bc2:	b580      	push	{r7, lr}
 8006bc4:	b08c      	sub	sp, #48	; 0x30
 8006bc6:	af00      	add	r7, sp, #0
 8006bc8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006bd0:	b2db      	uxtb	r3, r3
 8006bd2:	2b22      	cmp	r3, #34	; 0x22
 8006bd4:	f040 80ab 	bne.w	8006d2e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	689b      	ldr	r3, [r3, #8]
 8006bdc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006be0:	d117      	bne.n	8006c12 <UART_Receive_IT+0x50>
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	691b      	ldr	r3, [r3, #16]
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d113      	bne.n	8006c12 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006bea:	2300      	movs	r3, #0
 8006bec:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bf2:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	685b      	ldr	r3, [r3, #4]
 8006bfa:	b29b      	uxth	r3, r3
 8006bfc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c00:	b29a      	uxth	r2, r3
 8006c02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c04:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c0a:	1c9a      	adds	r2, r3, #2
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	629a      	str	r2, [r3, #40]	; 0x28
 8006c10:	e026      	b.n	8006c60 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c16:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8006c18:	2300      	movs	r3, #0
 8006c1a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	689b      	ldr	r3, [r3, #8]
 8006c20:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006c24:	d007      	beq.n	8006c36 <UART_Receive_IT+0x74>
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	689b      	ldr	r3, [r3, #8]
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d10a      	bne.n	8006c44 <UART_Receive_IT+0x82>
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	691b      	ldr	r3, [r3, #16]
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d106      	bne.n	8006c44 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	685b      	ldr	r3, [r3, #4]
 8006c3c:	b2da      	uxtb	r2, r3
 8006c3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c40:	701a      	strb	r2, [r3, #0]
 8006c42:	e008      	b.n	8006c56 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	685b      	ldr	r3, [r3, #4]
 8006c4a:	b2db      	uxtb	r3, r3
 8006c4c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006c50:	b2da      	uxtb	r2, r3
 8006c52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c54:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c5a:	1c5a      	adds	r2, r3, #1
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006c64:	b29b      	uxth	r3, r3
 8006c66:	3b01      	subs	r3, #1
 8006c68:	b29b      	uxth	r3, r3
 8006c6a:	687a      	ldr	r2, [r7, #4]
 8006c6c:	4619      	mov	r1, r3
 8006c6e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d15a      	bne.n	8006d2a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	68da      	ldr	r2, [r3, #12]
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	f022 0220 	bic.w	r2, r2, #32
 8006c82:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	68da      	ldr	r2, [r3, #12]
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006c92:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	695a      	ldr	r2, [r3, #20]
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	f022 0201 	bic.w	r2, r2, #1
 8006ca2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	2220      	movs	r2, #32
 8006ca8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cb0:	2b01      	cmp	r3, #1
 8006cb2:	d135      	bne.n	8006d20 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	2200      	movs	r2, #0
 8006cb8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	330c      	adds	r3, #12
 8006cc0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cc2:	697b      	ldr	r3, [r7, #20]
 8006cc4:	e853 3f00 	ldrex	r3, [r3]
 8006cc8:	613b      	str	r3, [r7, #16]
   return(result);
 8006cca:	693b      	ldr	r3, [r7, #16]
 8006ccc:	f023 0310 	bic.w	r3, r3, #16
 8006cd0:	627b      	str	r3, [r7, #36]	; 0x24
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	330c      	adds	r3, #12
 8006cd8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006cda:	623a      	str	r2, [r7, #32]
 8006cdc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cde:	69f9      	ldr	r1, [r7, #28]
 8006ce0:	6a3a      	ldr	r2, [r7, #32]
 8006ce2:	e841 2300 	strex	r3, r2, [r1]
 8006ce6:	61bb      	str	r3, [r7, #24]
   return(result);
 8006ce8:	69bb      	ldr	r3, [r7, #24]
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d1e5      	bne.n	8006cba <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	f003 0310 	and.w	r3, r3, #16
 8006cf8:	2b10      	cmp	r3, #16
 8006cfa:	d10a      	bne.n	8006d12 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006cfc:	2300      	movs	r3, #0
 8006cfe:	60fb      	str	r3, [r7, #12]
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	60fb      	str	r3, [r7, #12]
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	685b      	ldr	r3, [r3, #4]
 8006d0e:	60fb      	str	r3, [r7, #12]
 8006d10:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006d16:	4619      	mov	r1, r3
 8006d18:	6878      	ldr	r0, [r7, #4]
 8006d1a:	f7ff fc3b 	bl	8006594 <HAL_UARTEx_RxEventCallback>
 8006d1e:	e002      	b.n	8006d26 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006d20:	6878      	ldr	r0, [r7, #4]
 8006d22:	f7fa fc03 	bl	800152c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006d26:	2300      	movs	r3, #0
 8006d28:	e002      	b.n	8006d30 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8006d2a:	2300      	movs	r3, #0
 8006d2c:	e000      	b.n	8006d30 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8006d2e:	2302      	movs	r3, #2
  }
}
 8006d30:	4618      	mov	r0, r3
 8006d32:	3730      	adds	r7, #48	; 0x30
 8006d34:	46bd      	mov	sp, r7
 8006d36:	bd80      	pop	{r7, pc}

08006d38 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006d38:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006d3c:	b0c0      	sub	sp, #256	; 0x100
 8006d3e:	af00      	add	r7, sp, #0
 8006d40:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006d44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	691b      	ldr	r3, [r3, #16]
 8006d4c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006d50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d54:	68d9      	ldr	r1, [r3, #12]
 8006d56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d5a:	681a      	ldr	r2, [r3, #0]
 8006d5c:	ea40 0301 	orr.w	r3, r0, r1
 8006d60:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006d62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d66:	689a      	ldr	r2, [r3, #8]
 8006d68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d6c:	691b      	ldr	r3, [r3, #16]
 8006d6e:	431a      	orrs	r2, r3
 8006d70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d74:	695b      	ldr	r3, [r3, #20]
 8006d76:	431a      	orrs	r2, r3
 8006d78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d7c:	69db      	ldr	r3, [r3, #28]
 8006d7e:	4313      	orrs	r3, r2
 8006d80:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006d84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	68db      	ldr	r3, [r3, #12]
 8006d8c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006d90:	f021 010c 	bic.w	r1, r1, #12
 8006d94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d98:	681a      	ldr	r2, [r3, #0]
 8006d9a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006d9e:	430b      	orrs	r3, r1
 8006da0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006da2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	695b      	ldr	r3, [r3, #20]
 8006daa:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006dae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006db2:	6999      	ldr	r1, [r3, #24]
 8006db4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006db8:	681a      	ldr	r2, [r3, #0]
 8006dba:	ea40 0301 	orr.w	r3, r0, r1
 8006dbe:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006dc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006dc4:	681a      	ldr	r2, [r3, #0]
 8006dc6:	4b8f      	ldr	r3, [pc, #572]	; (8007004 <UART_SetConfig+0x2cc>)
 8006dc8:	429a      	cmp	r2, r3
 8006dca:	d005      	beq.n	8006dd8 <UART_SetConfig+0xa0>
 8006dcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006dd0:	681a      	ldr	r2, [r3, #0]
 8006dd2:	4b8d      	ldr	r3, [pc, #564]	; (8007008 <UART_SetConfig+0x2d0>)
 8006dd4:	429a      	cmp	r2, r3
 8006dd6:	d104      	bne.n	8006de2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006dd8:	f7fd fd32 	bl	8004840 <HAL_RCC_GetPCLK2Freq>
 8006ddc:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8006de0:	e003      	b.n	8006dea <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006de2:	f7fd fd19 	bl	8004818 <HAL_RCC_GetPCLK1Freq>
 8006de6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006dea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006dee:	69db      	ldr	r3, [r3, #28]
 8006df0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006df4:	f040 810c 	bne.w	8007010 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006df8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006dfc:	2200      	movs	r2, #0
 8006dfe:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006e02:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8006e06:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8006e0a:	4622      	mov	r2, r4
 8006e0c:	462b      	mov	r3, r5
 8006e0e:	1891      	adds	r1, r2, r2
 8006e10:	65b9      	str	r1, [r7, #88]	; 0x58
 8006e12:	415b      	adcs	r3, r3
 8006e14:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006e16:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8006e1a:	4621      	mov	r1, r4
 8006e1c:	eb12 0801 	adds.w	r8, r2, r1
 8006e20:	4629      	mov	r1, r5
 8006e22:	eb43 0901 	adc.w	r9, r3, r1
 8006e26:	f04f 0200 	mov.w	r2, #0
 8006e2a:	f04f 0300 	mov.w	r3, #0
 8006e2e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006e32:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006e36:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006e3a:	4690      	mov	r8, r2
 8006e3c:	4699      	mov	r9, r3
 8006e3e:	4623      	mov	r3, r4
 8006e40:	eb18 0303 	adds.w	r3, r8, r3
 8006e44:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006e48:	462b      	mov	r3, r5
 8006e4a:	eb49 0303 	adc.w	r3, r9, r3
 8006e4e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006e52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e56:	685b      	ldr	r3, [r3, #4]
 8006e58:	2200      	movs	r2, #0
 8006e5a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006e5e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8006e62:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8006e66:	460b      	mov	r3, r1
 8006e68:	18db      	adds	r3, r3, r3
 8006e6a:	653b      	str	r3, [r7, #80]	; 0x50
 8006e6c:	4613      	mov	r3, r2
 8006e6e:	eb42 0303 	adc.w	r3, r2, r3
 8006e72:	657b      	str	r3, [r7, #84]	; 0x54
 8006e74:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006e78:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8006e7c:	f7f9 f9a4 	bl	80001c8 <__aeabi_uldivmod>
 8006e80:	4602      	mov	r2, r0
 8006e82:	460b      	mov	r3, r1
 8006e84:	4b61      	ldr	r3, [pc, #388]	; (800700c <UART_SetConfig+0x2d4>)
 8006e86:	fba3 2302 	umull	r2, r3, r3, r2
 8006e8a:	095b      	lsrs	r3, r3, #5
 8006e8c:	011c      	lsls	r4, r3, #4
 8006e8e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006e92:	2200      	movs	r2, #0
 8006e94:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006e98:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8006e9c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8006ea0:	4642      	mov	r2, r8
 8006ea2:	464b      	mov	r3, r9
 8006ea4:	1891      	adds	r1, r2, r2
 8006ea6:	64b9      	str	r1, [r7, #72]	; 0x48
 8006ea8:	415b      	adcs	r3, r3
 8006eaa:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006eac:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006eb0:	4641      	mov	r1, r8
 8006eb2:	eb12 0a01 	adds.w	sl, r2, r1
 8006eb6:	4649      	mov	r1, r9
 8006eb8:	eb43 0b01 	adc.w	fp, r3, r1
 8006ebc:	f04f 0200 	mov.w	r2, #0
 8006ec0:	f04f 0300 	mov.w	r3, #0
 8006ec4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006ec8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006ecc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006ed0:	4692      	mov	sl, r2
 8006ed2:	469b      	mov	fp, r3
 8006ed4:	4643      	mov	r3, r8
 8006ed6:	eb1a 0303 	adds.w	r3, sl, r3
 8006eda:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006ede:	464b      	mov	r3, r9
 8006ee0:	eb4b 0303 	adc.w	r3, fp, r3
 8006ee4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006ee8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006eec:	685b      	ldr	r3, [r3, #4]
 8006eee:	2200      	movs	r2, #0
 8006ef0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006ef4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8006ef8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006efc:	460b      	mov	r3, r1
 8006efe:	18db      	adds	r3, r3, r3
 8006f00:	643b      	str	r3, [r7, #64]	; 0x40
 8006f02:	4613      	mov	r3, r2
 8006f04:	eb42 0303 	adc.w	r3, r2, r3
 8006f08:	647b      	str	r3, [r7, #68]	; 0x44
 8006f0a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006f0e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8006f12:	f7f9 f959 	bl	80001c8 <__aeabi_uldivmod>
 8006f16:	4602      	mov	r2, r0
 8006f18:	460b      	mov	r3, r1
 8006f1a:	4611      	mov	r1, r2
 8006f1c:	4b3b      	ldr	r3, [pc, #236]	; (800700c <UART_SetConfig+0x2d4>)
 8006f1e:	fba3 2301 	umull	r2, r3, r3, r1
 8006f22:	095b      	lsrs	r3, r3, #5
 8006f24:	2264      	movs	r2, #100	; 0x64
 8006f26:	fb02 f303 	mul.w	r3, r2, r3
 8006f2a:	1acb      	subs	r3, r1, r3
 8006f2c:	00db      	lsls	r3, r3, #3
 8006f2e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8006f32:	4b36      	ldr	r3, [pc, #216]	; (800700c <UART_SetConfig+0x2d4>)
 8006f34:	fba3 2302 	umull	r2, r3, r3, r2
 8006f38:	095b      	lsrs	r3, r3, #5
 8006f3a:	005b      	lsls	r3, r3, #1
 8006f3c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006f40:	441c      	add	r4, r3
 8006f42:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006f46:	2200      	movs	r2, #0
 8006f48:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006f4c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8006f50:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8006f54:	4642      	mov	r2, r8
 8006f56:	464b      	mov	r3, r9
 8006f58:	1891      	adds	r1, r2, r2
 8006f5a:	63b9      	str	r1, [r7, #56]	; 0x38
 8006f5c:	415b      	adcs	r3, r3
 8006f5e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006f60:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006f64:	4641      	mov	r1, r8
 8006f66:	1851      	adds	r1, r2, r1
 8006f68:	6339      	str	r1, [r7, #48]	; 0x30
 8006f6a:	4649      	mov	r1, r9
 8006f6c:	414b      	adcs	r3, r1
 8006f6e:	637b      	str	r3, [r7, #52]	; 0x34
 8006f70:	f04f 0200 	mov.w	r2, #0
 8006f74:	f04f 0300 	mov.w	r3, #0
 8006f78:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8006f7c:	4659      	mov	r1, fp
 8006f7e:	00cb      	lsls	r3, r1, #3
 8006f80:	4651      	mov	r1, sl
 8006f82:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006f86:	4651      	mov	r1, sl
 8006f88:	00ca      	lsls	r2, r1, #3
 8006f8a:	4610      	mov	r0, r2
 8006f8c:	4619      	mov	r1, r3
 8006f8e:	4603      	mov	r3, r0
 8006f90:	4642      	mov	r2, r8
 8006f92:	189b      	adds	r3, r3, r2
 8006f94:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006f98:	464b      	mov	r3, r9
 8006f9a:	460a      	mov	r2, r1
 8006f9c:	eb42 0303 	adc.w	r3, r2, r3
 8006fa0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006fa4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006fa8:	685b      	ldr	r3, [r3, #4]
 8006faa:	2200      	movs	r2, #0
 8006fac:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006fb0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006fb4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006fb8:	460b      	mov	r3, r1
 8006fba:	18db      	adds	r3, r3, r3
 8006fbc:	62bb      	str	r3, [r7, #40]	; 0x28
 8006fbe:	4613      	mov	r3, r2
 8006fc0:	eb42 0303 	adc.w	r3, r2, r3
 8006fc4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006fc6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006fca:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8006fce:	f7f9 f8fb 	bl	80001c8 <__aeabi_uldivmod>
 8006fd2:	4602      	mov	r2, r0
 8006fd4:	460b      	mov	r3, r1
 8006fd6:	4b0d      	ldr	r3, [pc, #52]	; (800700c <UART_SetConfig+0x2d4>)
 8006fd8:	fba3 1302 	umull	r1, r3, r3, r2
 8006fdc:	095b      	lsrs	r3, r3, #5
 8006fde:	2164      	movs	r1, #100	; 0x64
 8006fe0:	fb01 f303 	mul.w	r3, r1, r3
 8006fe4:	1ad3      	subs	r3, r2, r3
 8006fe6:	00db      	lsls	r3, r3, #3
 8006fe8:	3332      	adds	r3, #50	; 0x32
 8006fea:	4a08      	ldr	r2, [pc, #32]	; (800700c <UART_SetConfig+0x2d4>)
 8006fec:	fba2 2303 	umull	r2, r3, r2, r3
 8006ff0:	095b      	lsrs	r3, r3, #5
 8006ff2:	f003 0207 	and.w	r2, r3, #7
 8006ff6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	4422      	add	r2, r4
 8006ffe:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007000:	e105      	b.n	800720e <UART_SetConfig+0x4d6>
 8007002:	bf00      	nop
 8007004:	40011000 	.word	0x40011000
 8007008:	40011400 	.word	0x40011400
 800700c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007010:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007014:	2200      	movs	r2, #0
 8007016:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800701a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800701e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8007022:	4642      	mov	r2, r8
 8007024:	464b      	mov	r3, r9
 8007026:	1891      	adds	r1, r2, r2
 8007028:	6239      	str	r1, [r7, #32]
 800702a:	415b      	adcs	r3, r3
 800702c:	627b      	str	r3, [r7, #36]	; 0x24
 800702e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007032:	4641      	mov	r1, r8
 8007034:	1854      	adds	r4, r2, r1
 8007036:	4649      	mov	r1, r9
 8007038:	eb43 0501 	adc.w	r5, r3, r1
 800703c:	f04f 0200 	mov.w	r2, #0
 8007040:	f04f 0300 	mov.w	r3, #0
 8007044:	00eb      	lsls	r3, r5, #3
 8007046:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800704a:	00e2      	lsls	r2, r4, #3
 800704c:	4614      	mov	r4, r2
 800704e:	461d      	mov	r5, r3
 8007050:	4643      	mov	r3, r8
 8007052:	18e3      	adds	r3, r4, r3
 8007054:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007058:	464b      	mov	r3, r9
 800705a:	eb45 0303 	adc.w	r3, r5, r3
 800705e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007062:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007066:	685b      	ldr	r3, [r3, #4]
 8007068:	2200      	movs	r2, #0
 800706a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800706e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007072:	f04f 0200 	mov.w	r2, #0
 8007076:	f04f 0300 	mov.w	r3, #0
 800707a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800707e:	4629      	mov	r1, r5
 8007080:	008b      	lsls	r3, r1, #2
 8007082:	4621      	mov	r1, r4
 8007084:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007088:	4621      	mov	r1, r4
 800708a:	008a      	lsls	r2, r1, #2
 800708c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8007090:	f7f9 f89a 	bl	80001c8 <__aeabi_uldivmod>
 8007094:	4602      	mov	r2, r0
 8007096:	460b      	mov	r3, r1
 8007098:	4b60      	ldr	r3, [pc, #384]	; (800721c <UART_SetConfig+0x4e4>)
 800709a:	fba3 2302 	umull	r2, r3, r3, r2
 800709e:	095b      	lsrs	r3, r3, #5
 80070a0:	011c      	lsls	r4, r3, #4
 80070a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80070a6:	2200      	movs	r2, #0
 80070a8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80070ac:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80070b0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80070b4:	4642      	mov	r2, r8
 80070b6:	464b      	mov	r3, r9
 80070b8:	1891      	adds	r1, r2, r2
 80070ba:	61b9      	str	r1, [r7, #24]
 80070bc:	415b      	adcs	r3, r3
 80070be:	61fb      	str	r3, [r7, #28]
 80070c0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80070c4:	4641      	mov	r1, r8
 80070c6:	1851      	adds	r1, r2, r1
 80070c8:	6139      	str	r1, [r7, #16]
 80070ca:	4649      	mov	r1, r9
 80070cc:	414b      	adcs	r3, r1
 80070ce:	617b      	str	r3, [r7, #20]
 80070d0:	f04f 0200 	mov.w	r2, #0
 80070d4:	f04f 0300 	mov.w	r3, #0
 80070d8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80070dc:	4659      	mov	r1, fp
 80070de:	00cb      	lsls	r3, r1, #3
 80070e0:	4651      	mov	r1, sl
 80070e2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80070e6:	4651      	mov	r1, sl
 80070e8:	00ca      	lsls	r2, r1, #3
 80070ea:	4610      	mov	r0, r2
 80070ec:	4619      	mov	r1, r3
 80070ee:	4603      	mov	r3, r0
 80070f0:	4642      	mov	r2, r8
 80070f2:	189b      	adds	r3, r3, r2
 80070f4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80070f8:	464b      	mov	r3, r9
 80070fa:	460a      	mov	r2, r1
 80070fc:	eb42 0303 	adc.w	r3, r2, r3
 8007100:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007104:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007108:	685b      	ldr	r3, [r3, #4]
 800710a:	2200      	movs	r2, #0
 800710c:	67bb      	str	r3, [r7, #120]	; 0x78
 800710e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8007110:	f04f 0200 	mov.w	r2, #0
 8007114:	f04f 0300 	mov.w	r3, #0
 8007118:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800711c:	4649      	mov	r1, r9
 800711e:	008b      	lsls	r3, r1, #2
 8007120:	4641      	mov	r1, r8
 8007122:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007126:	4641      	mov	r1, r8
 8007128:	008a      	lsls	r2, r1, #2
 800712a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800712e:	f7f9 f84b 	bl	80001c8 <__aeabi_uldivmod>
 8007132:	4602      	mov	r2, r0
 8007134:	460b      	mov	r3, r1
 8007136:	4b39      	ldr	r3, [pc, #228]	; (800721c <UART_SetConfig+0x4e4>)
 8007138:	fba3 1302 	umull	r1, r3, r3, r2
 800713c:	095b      	lsrs	r3, r3, #5
 800713e:	2164      	movs	r1, #100	; 0x64
 8007140:	fb01 f303 	mul.w	r3, r1, r3
 8007144:	1ad3      	subs	r3, r2, r3
 8007146:	011b      	lsls	r3, r3, #4
 8007148:	3332      	adds	r3, #50	; 0x32
 800714a:	4a34      	ldr	r2, [pc, #208]	; (800721c <UART_SetConfig+0x4e4>)
 800714c:	fba2 2303 	umull	r2, r3, r2, r3
 8007150:	095b      	lsrs	r3, r3, #5
 8007152:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007156:	441c      	add	r4, r3
 8007158:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800715c:	2200      	movs	r2, #0
 800715e:	673b      	str	r3, [r7, #112]	; 0x70
 8007160:	677a      	str	r2, [r7, #116]	; 0x74
 8007162:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8007166:	4642      	mov	r2, r8
 8007168:	464b      	mov	r3, r9
 800716a:	1891      	adds	r1, r2, r2
 800716c:	60b9      	str	r1, [r7, #8]
 800716e:	415b      	adcs	r3, r3
 8007170:	60fb      	str	r3, [r7, #12]
 8007172:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007176:	4641      	mov	r1, r8
 8007178:	1851      	adds	r1, r2, r1
 800717a:	6039      	str	r1, [r7, #0]
 800717c:	4649      	mov	r1, r9
 800717e:	414b      	adcs	r3, r1
 8007180:	607b      	str	r3, [r7, #4]
 8007182:	f04f 0200 	mov.w	r2, #0
 8007186:	f04f 0300 	mov.w	r3, #0
 800718a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800718e:	4659      	mov	r1, fp
 8007190:	00cb      	lsls	r3, r1, #3
 8007192:	4651      	mov	r1, sl
 8007194:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007198:	4651      	mov	r1, sl
 800719a:	00ca      	lsls	r2, r1, #3
 800719c:	4610      	mov	r0, r2
 800719e:	4619      	mov	r1, r3
 80071a0:	4603      	mov	r3, r0
 80071a2:	4642      	mov	r2, r8
 80071a4:	189b      	adds	r3, r3, r2
 80071a6:	66bb      	str	r3, [r7, #104]	; 0x68
 80071a8:	464b      	mov	r3, r9
 80071aa:	460a      	mov	r2, r1
 80071ac:	eb42 0303 	adc.w	r3, r2, r3
 80071b0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80071b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80071b6:	685b      	ldr	r3, [r3, #4]
 80071b8:	2200      	movs	r2, #0
 80071ba:	663b      	str	r3, [r7, #96]	; 0x60
 80071bc:	667a      	str	r2, [r7, #100]	; 0x64
 80071be:	f04f 0200 	mov.w	r2, #0
 80071c2:	f04f 0300 	mov.w	r3, #0
 80071c6:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80071ca:	4649      	mov	r1, r9
 80071cc:	008b      	lsls	r3, r1, #2
 80071ce:	4641      	mov	r1, r8
 80071d0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80071d4:	4641      	mov	r1, r8
 80071d6:	008a      	lsls	r2, r1, #2
 80071d8:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80071dc:	f7f8 fff4 	bl	80001c8 <__aeabi_uldivmod>
 80071e0:	4602      	mov	r2, r0
 80071e2:	460b      	mov	r3, r1
 80071e4:	4b0d      	ldr	r3, [pc, #52]	; (800721c <UART_SetConfig+0x4e4>)
 80071e6:	fba3 1302 	umull	r1, r3, r3, r2
 80071ea:	095b      	lsrs	r3, r3, #5
 80071ec:	2164      	movs	r1, #100	; 0x64
 80071ee:	fb01 f303 	mul.w	r3, r1, r3
 80071f2:	1ad3      	subs	r3, r2, r3
 80071f4:	011b      	lsls	r3, r3, #4
 80071f6:	3332      	adds	r3, #50	; 0x32
 80071f8:	4a08      	ldr	r2, [pc, #32]	; (800721c <UART_SetConfig+0x4e4>)
 80071fa:	fba2 2303 	umull	r2, r3, r2, r3
 80071fe:	095b      	lsrs	r3, r3, #5
 8007200:	f003 020f 	and.w	r2, r3, #15
 8007204:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	4422      	add	r2, r4
 800720c:	609a      	str	r2, [r3, #8]
}
 800720e:	bf00      	nop
 8007210:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8007214:	46bd      	mov	sp, r7
 8007216:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800721a:	bf00      	nop
 800721c:	51eb851f 	.word	0x51eb851f

08007220 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007220:	b084      	sub	sp, #16
 8007222:	b580      	push	{r7, lr}
 8007224:	b084      	sub	sp, #16
 8007226:	af00      	add	r7, sp, #0
 8007228:	6078      	str	r0, [r7, #4]
 800722a:	f107 001c 	add.w	r0, r7, #28
 800722e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007232:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007234:	2b01      	cmp	r3, #1
 8007236:	d122      	bne.n	800727e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800723c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	68db      	ldr	r3, [r3, #12]
 8007248:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800724c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007250:	687a      	ldr	r2, [r7, #4]
 8007252:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	68db      	ldr	r3, [r3, #12]
 8007258:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007260:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007262:	2b01      	cmp	r3, #1
 8007264:	d105      	bne.n	8007272 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	68db      	ldr	r3, [r3, #12]
 800726a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007272:	6878      	ldr	r0, [r7, #4]
 8007274:	f001 fbee 	bl	8008a54 <USB_CoreReset>
 8007278:	4603      	mov	r3, r0
 800727a:	73fb      	strb	r3, [r7, #15]
 800727c:	e01a      	b.n	80072b4 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	68db      	ldr	r3, [r3, #12]
 8007282:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800728a:	6878      	ldr	r0, [r7, #4]
 800728c:	f001 fbe2 	bl	8008a54 <USB_CoreReset>
 8007290:	4603      	mov	r3, r0
 8007292:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8007294:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007296:	2b00      	cmp	r3, #0
 8007298:	d106      	bne.n	80072a8 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800729e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	639a      	str	r2, [r3, #56]	; 0x38
 80072a6:	e005      	b.n	80072b4 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072ac:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80072b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072b6:	2b01      	cmp	r3, #1
 80072b8:	d10b      	bne.n	80072d2 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	689b      	ldr	r3, [r3, #8]
 80072be:	f043 0206 	orr.w	r2, r3, #6
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	689b      	ldr	r3, [r3, #8]
 80072ca:	f043 0220 	orr.w	r2, r3, #32
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80072d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80072d4:	4618      	mov	r0, r3
 80072d6:	3710      	adds	r7, #16
 80072d8:	46bd      	mov	sp, r7
 80072da:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80072de:	b004      	add	sp, #16
 80072e0:	4770      	bx	lr
	...

080072e4 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80072e4:	b480      	push	{r7}
 80072e6:	b087      	sub	sp, #28
 80072e8:	af00      	add	r7, sp, #0
 80072ea:	60f8      	str	r0, [r7, #12]
 80072ec:	60b9      	str	r1, [r7, #8]
 80072ee:	4613      	mov	r3, r2
 80072f0:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80072f2:	79fb      	ldrb	r3, [r7, #7]
 80072f4:	2b02      	cmp	r3, #2
 80072f6:	d165      	bne.n	80073c4 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80072f8:	68bb      	ldr	r3, [r7, #8]
 80072fa:	4a41      	ldr	r2, [pc, #260]	; (8007400 <USB_SetTurnaroundTime+0x11c>)
 80072fc:	4293      	cmp	r3, r2
 80072fe:	d906      	bls.n	800730e <USB_SetTurnaroundTime+0x2a>
 8007300:	68bb      	ldr	r3, [r7, #8]
 8007302:	4a40      	ldr	r2, [pc, #256]	; (8007404 <USB_SetTurnaroundTime+0x120>)
 8007304:	4293      	cmp	r3, r2
 8007306:	d202      	bcs.n	800730e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8007308:	230f      	movs	r3, #15
 800730a:	617b      	str	r3, [r7, #20]
 800730c:	e062      	b.n	80073d4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800730e:	68bb      	ldr	r3, [r7, #8]
 8007310:	4a3c      	ldr	r2, [pc, #240]	; (8007404 <USB_SetTurnaroundTime+0x120>)
 8007312:	4293      	cmp	r3, r2
 8007314:	d306      	bcc.n	8007324 <USB_SetTurnaroundTime+0x40>
 8007316:	68bb      	ldr	r3, [r7, #8]
 8007318:	4a3b      	ldr	r2, [pc, #236]	; (8007408 <USB_SetTurnaroundTime+0x124>)
 800731a:	4293      	cmp	r3, r2
 800731c:	d202      	bcs.n	8007324 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800731e:	230e      	movs	r3, #14
 8007320:	617b      	str	r3, [r7, #20]
 8007322:	e057      	b.n	80073d4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8007324:	68bb      	ldr	r3, [r7, #8]
 8007326:	4a38      	ldr	r2, [pc, #224]	; (8007408 <USB_SetTurnaroundTime+0x124>)
 8007328:	4293      	cmp	r3, r2
 800732a:	d306      	bcc.n	800733a <USB_SetTurnaroundTime+0x56>
 800732c:	68bb      	ldr	r3, [r7, #8]
 800732e:	4a37      	ldr	r2, [pc, #220]	; (800740c <USB_SetTurnaroundTime+0x128>)
 8007330:	4293      	cmp	r3, r2
 8007332:	d202      	bcs.n	800733a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8007334:	230d      	movs	r3, #13
 8007336:	617b      	str	r3, [r7, #20]
 8007338:	e04c      	b.n	80073d4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800733a:	68bb      	ldr	r3, [r7, #8]
 800733c:	4a33      	ldr	r2, [pc, #204]	; (800740c <USB_SetTurnaroundTime+0x128>)
 800733e:	4293      	cmp	r3, r2
 8007340:	d306      	bcc.n	8007350 <USB_SetTurnaroundTime+0x6c>
 8007342:	68bb      	ldr	r3, [r7, #8]
 8007344:	4a32      	ldr	r2, [pc, #200]	; (8007410 <USB_SetTurnaroundTime+0x12c>)
 8007346:	4293      	cmp	r3, r2
 8007348:	d802      	bhi.n	8007350 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800734a:	230c      	movs	r3, #12
 800734c:	617b      	str	r3, [r7, #20]
 800734e:	e041      	b.n	80073d4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8007350:	68bb      	ldr	r3, [r7, #8]
 8007352:	4a2f      	ldr	r2, [pc, #188]	; (8007410 <USB_SetTurnaroundTime+0x12c>)
 8007354:	4293      	cmp	r3, r2
 8007356:	d906      	bls.n	8007366 <USB_SetTurnaroundTime+0x82>
 8007358:	68bb      	ldr	r3, [r7, #8]
 800735a:	4a2e      	ldr	r2, [pc, #184]	; (8007414 <USB_SetTurnaroundTime+0x130>)
 800735c:	4293      	cmp	r3, r2
 800735e:	d802      	bhi.n	8007366 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8007360:	230b      	movs	r3, #11
 8007362:	617b      	str	r3, [r7, #20]
 8007364:	e036      	b.n	80073d4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8007366:	68bb      	ldr	r3, [r7, #8]
 8007368:	4a2a      	ldr	r2, [pc, #168]	; (8007414 <USB_SetTurnaroundTime+0x130>)
 800736a:	4293      	cmp	r3, r2
 800736c:	d906      	bls.n	800737c <USB_SetTurnaroundTime+0x98>
 800736e:	68bb      	ldr	r3, [r7, #8]
 8007370:	4a29      	ldr	r2, [pc, #164]	; (8007418 <USB_SetTurnaroundTime+0x134>)
 8007372:	4293      	cmp	r3, r2
 8007374:	d802      	bhi.n	800737c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8007376:	230a      	movs	r3, #10
 8007378:	617b      	str	r3, [r7, #20]
 800737a:	e02b      	b.n	80073d4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800737c:	68bb      	ldr	r3, [r7, #8]
 800737e:	4a26      	ldr	r2, [pc, #152]	; (8007418 <USB_SetTurnaroundTime+0x134>)
 8007380:	4293      	cmp	r3, r2
 8007382:	d906      	bls.n	8007392 <USB_SetTurnaroundTime+0xae>
 8007384:	68bb      	ldr	r3, [r7, #8]
 8007386:	4a25      	ldr	r2, [pc, #148]	; (800741c <USB_SetTurnaroundTime+0x138>)
 8007388:	4293      	cmp	r3, r2
 800738a:	d202      	bcs.n	8007392 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800738c:	2309      	movs	r3, #9
 800738e:	617b      	str	r3, [r7, #20]
 8007390:	e020      	b.n	80073d4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8007392:	68bb      	ldr	r3, [r7, #8]
 8007394:	4a21      	ldr	r2, [pc, #132]	; (800741c <USB_SetTurnaroundTime+0x138>)
 8007396:	4293      	cmp	r3, r2
 8007398:	d306      	bcc.n	80073a8 <USB_SetTurnaroundTime+0xc4>
 800739a:	68bb      	ldr	r3, [r7, #8]
 800739c:	4a20      	ldr	r2, [pc, #128]	; (8007420 <USB_SetTurnaroundTime+0x13c>)
 800739e:	4293      	cmp	r3, r2
 80073a0:	d802      	bhi.n	80073a8 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80073a2:	2308      	movs	r3, #8
 80073a4:	617b      	str	r3, [r7, #20]
 80073a6:	e015      	b.n	80073d4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80073a8:	68bb      	ldr	r3, [r7, #8]
 80073aa:	4a1d      	ldr	r2, [pc, #116]	; (8007420 <USB_SetTurnaroundTime+0x13c>)
 80073ac:	4293      	cmp	r3, r2
 80073ae:	d906      	bls.n	80073be <USB_SetTurnaroundTime+0xda>
 80073b0:	68bb      	ldr	r3, [r7, #8]
 80073b2:	4a1c      	ldr	r2, [pc, #112]	; (8007424 <USB_SetTurnaroundTime+0x140>)
 80073b4:	4293      	cmp	r3, r2
 80073b6:	d202      	bcs.n	80073be <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80073b8:	2307      	movs	r3, #7
 80073ba:	617b      	str	r3, [r7, #20]
 80073bc:	e00a      	b.n	80073d4 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80073be:	2306      	movs	r3, #6
 80073c0:	617b      	str	r3, [r7, #20]
 80073c2:	e007      	b.n	80073d4 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80073c4:	79fb      	ldrb	r3, [r7, #7]
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d102      	bne.n	80073d0 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80073ca:	2309      	movs	r3, #9
 80073cc:	617b      	str	r3, [r7, #20]
 80073ce:	e001      	b.n	80073d4 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80073d0:	2309      	movs	r3, #9
 80073d2:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	68db      	ldr	r3, [r3, #12]
 80073d8:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	68da      	ldr	r2, [r3, #12]
 80073e4:	697b      	ldr	r3, [r7, #20]
 80073e6:	029b      	lsls	r3, r3, #10
 80073e8:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80073ec:	431a      	orrs	r2, r3
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80073f2:	2300      	movs	r3, #0
}
 80073f4:	4618      	mov	r0, r3
 80073f6:	371c      	adds	r7, #28
 80073f8:	46bd      	mov	sp, r7
 80073fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073fe:	4770      	bx	lr
 8007400:	00d8acbf 	.word	0x00d8acbf
 8007404:	00e4e1c0 	.word	0x00e4e1c0
 8007408:	00f42400 	.word	0x00f42400
 800740c:	01067380 	.word	0x01067380
 8007410:	011a499f 	.word	0x011a499f
 8007414:	01312cff 	.word	0x01312cff
 8007418:	014ca43f 	.word	0x014ca43f
 800741c:	016e3600 	.word	0x016e3600
 8007420:	01a6ab1f 	.word	0x01a6ab1f
 8007424:	01e84800 	.word	0x01e84800

08007428 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007428:	b480      	push	{r7}
 800742a:	b083      	sub	sp, #12
 800742c:	af00      	add	r7, sp, #0
 800742e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	689b      	ldr	r3, [r3, #8]
 8007434:	f043 0201 	orr.w	r2, r3, #1
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800743c:	2300      	movs	r3, #0
}
 800743e:	4618      	mov	r0, r3
 8007440:	370c      	adds	r7, #12
 8007442:	46bd      	mov	sp, r7
 8007444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007448:	4770      	bx	lr

0800744a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800744a:	b480      	push	{r7}
 800744c:	b083      	sub	sp, #12
 800744e:	af00      	add	r7, sp, #0
 8007450:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	689b      	ldr	r3, [r3, #8]
 8007456:	f023 0201 	bic.w	r2, r3, #1
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800745e:	2300      	movs	r3, #0
}
 8007460:	4618      	mov	r0, r3
 8007462:	370c      	adds	r7, #12
 8007464:	46bd      	mov	sp, r7
 8007466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800746a:	4770      	bx	lr

0800746c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800746c:	b580      	push	{r7, lr}
 800746e:	b084      	sub	sp, #16
 8007470:	af00      	add	r7, sp, #0
 8007472:	6078      	str	r0, [r7, #4]
 8007474:	460b      	mov	r3, r1
 8007476:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8007478:	2300      	movs	r3, #0
 800747a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	68db      	ldr	r3, [r3, #12]
 8007480:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007488:	78fb      	ldrb	r3, [r7, #3]
 800748a:	2b01      	cmp	r3, #1
 800748c:	d115      	bne.n	80074ba <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	68db      	ldr	r3, [r3, #12]
 8007492:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800749a:	2001      	movs	r0, #1
 800749c:	f7fa fc08 	bl	8001cb0 <HAL_Delay>
      ms++;
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	3301      	adds	r3, #1
 80074a4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80074a6:	6878      	ldr	r0, [r7, #4]
 80074a8:	f001 fa45 	bl	8008936 <USB_GetMode>
 80074ac:	4603      	mov	r3, r0
 80074ae:	2b01      	cmp	r3, #1
 80074b0:	d01e      	beq.n	80074f0 <USB_SetCurrentMode+0x84>
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	2b31      	cmp	r3, #49	; 0x31
 80074b6:	d9f0      	bls.n	800749a <USB_SetCurrentMode+0x2e>
 80074b8:	e01a      	b.n	80074f0 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80074ba:	78fb      	ldrb	r3, [r7, #3]
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d115      	bne.n	80074ec <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	68db      	ldr	r3, [r3, #12]
 80074c4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80074cc:	2001      	movs	r0, #1
 80074ce:	f7fa fbef 	bl	8001cb0 <HAL_Delay>
      ms++;
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	3301      	adds	r3, #1
 80074d6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80074d8:	6878      	ldr	r0, [r7, #4]
 80074da:	f001 fa2c 	bl	8008936 <USB_GetMode>
 80074de:	4603      	mov	r3, r0
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d005      	beq.n	80074f0 <USB_SetCurrentMode+0x84>
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	2b31      	cmp	r3, #49	; 0x31
 80074e8:	d9f0      	bls.n	80074cc <USB_SetCurrentMode+0x60>
 80074ea:	e001      	b.n	80074f0 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80074ec:	2301      	movs	r3, #1
 80074ee:	e005      	b.n	80074fc <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	2b32      	cmp	r3, #50	; 0x32
 80074f4:	d101      	bne.n	80074fa <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80074f6:	2301      	movs	r3, #1
 80074f8:	e000      	b.n	80074fc <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80074fa:	2300      	movs	r3, #0
}
 80074fc:	4618      	mov	r0, r3
 80074fe:	3710      	adds	r7, #16
 8007500:	46bd      	mov	sp, r7
 8007502:	bd80      	pop	{r7, pc}

08007504 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007504:	b084      	sub	sp, #16
 8007506:	b580      	push	{r7, lr}
 8007508:	b086      	sub	sp, #24
 800750a:	af00      	add	r7, sp, #0
 800750c:	6078      	str	r0, [r7, #4]
 800750e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8007512:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8007516:	2300      	movs	r3, #0
 8007518:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800751e:	2300      	movs	r3, #0
 8007520:	613b      	str	r3, [r7, #16]
 8007522:	e009      	b.n	8007538 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8007524:	687a      	ldr	r2, [r7, #4]
 8007526:	693b      	ldr	r3, [r7, #16]
 8007528:	3340      	adds	r3, #64	; 0x40
 800752a:	009b      	lsls	r3, r3, #2
 800752c:	4413      	add	r3, r2
 800752e:	2200      	movs	r2, #0
 8007530:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8007532:	693b      	ldr	r3, [r7, #16]
 8007534:	3301      	adds	r3, #1
 8007536:	613b      	str	r3, [r7, #16]
 8007538:	693b      	ldr	r3, [r7, #16]
 800753a:	2b0e      	cmp	r3, #14
 800753c:	d9f2      	bls.n	8007524 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800753e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007540:	2b00      	cmp	r3, #0
 8007542:	d11c      	bne.n	800757e <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800754a:	685b      	ldr	r3, [r3, #4]
 800754c:	68fa      	ldr	r2, [r7, #12]
 800754e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007552:	f043 0302 	orr.w	r3, r3, #2
 8007556:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800755c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007568:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007574:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	639a      	str	r2, [r3, #56]	; 0x38
 800757c:	e00b      	b.n	8007596 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007582:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800758e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800759c:	461a      	mov	r2, r3
 800759e:	2300      	movs	r3, #0
 80075a0:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80075a8:	4619      	mov	r1, r3
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80075b0:	461a      	mov	r2, r3
 80075b2:	680b      	ldr	r3, [r1, #0]
 80075b4:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80075b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075b8:	2b01      	cmp	r3, #1
 80075ba:	d10c      	bne.n	80075d6 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80075bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d104      	bne.n	80075cc <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80075c2:	2100      	movs	r1, #0
 80075c4:	6878      	ldr	r0, [r7, #4]
 80075c6:	f000 f965 	bl	8007894 <USB_SetDevSpeed>
 80075ca:	e008      	b.n	80075de <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80075cc:	2101      	movs	r1, #1
 80075ce:	6878      	ldr	r0, [r7, #4]
 80075d0:	f000 f960 	bl	8007894 <USB_SetDevSpeed>
 80075d4:	e003      	b.n	80075de <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80075d6:	2103      	movs	r1, #3
 80075d8:	6878      	ldr	r0, [r7, #4]
 80075da:	f000 f95b 	bl	8007894 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80075de:	2110      	movs	r1, #16
 80075e0:	6878      	ldr	r0, [r7, #4]
 80075e2:	f000 f8f3 	bl	80077cc <USB_FlushTxFifo>
 80075e6:	4603      	mov	r3, r0
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d001      	beq.n	80075f0 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 80075ec:	2301      	movs	r3, #1
 80075ee:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80075f0:	6878      	ldr	r0, [r7, #4]
 80075f2:	f000 f91f 	bl	8007834 <USB_FlushRxFifo>
 80075f6:	4603      	mov	r3, r0
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d001      	beq.n	8007600 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 80075fc:	2301      	movs	r3, #1
 80075fe:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007606:	461a      	mov	r2, r3
 8007608:	2300      	movs	r3, #0
 800760a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007612:	461a      	mov	r2, r3
 8007614:	2300      	movs	r3, #0
 8007616:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800761e:	461a      	mov	r2, r3
 8007620:	2300      	movs	r3, #0
 8007622:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007624:	2300      	movs	r3, #0
 8007626:	613b      	str	r3, [r7, #16]
 8007628:	e043      	b.n	80076b2 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800762a:	693b      	ldr	r3, [r7, #16]
 800762c:	015a      	lsls	r2, r3, #5
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	4413      	add	r3, r2
 8007632:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800763c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007640:	d118      	bne.n	8007674 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8007642:	693b      	ldr	r3, [r7, #16]
 8007644:	2b00      	cmp	r3, #0
 8007646:	d10a      	bne.n	800765e <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8007648:	693b      	ldr	r3, [r7, #16]
 800764a:	015a      	lsls	r2, r3, #5
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	4413      	add	r3, r2
 8007650:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007654:	461a      	mov	r2, r3
 8007656:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800765a:	6013      	str	r3, [r2, #0]
 800765c:	e013      	b.n	8007686 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800765e:	693b      	ldr	r3, [r7, #16]
 8007660:	015a      	lsls	r2, r3, #5
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	4413      	add	r3, r2
 8007666:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800766a:	461a      	mov	r2, r3
 800766c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007670:	6013      	str	r3, [r2, #0]
 8007672:	e008      	b.n	8007686 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8007674:	693b      	ldr	r3, [r7, #16]
 8007676:	015a      	lsls	r2, r3, #5
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	4413      	add	r3, r2
 800767c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007680:	461a      	mov	r2, r3
 8007682:	2300      	movs	r3, #0
 8007684:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8007686:	693b      	ldr	r3, [r7, #16]
 8007688:	015a      	lsls	r2, r3, #5
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	4413      	add	r3, r2
 800768e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007692:	461a      	mov	r2, r3
 8007694:	2300      	movs	r3, #0
 8007696:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8007698:	693b      	ldr	r3, [r7, #16]
 800769a:	015a      	lsls	r2, r3, #5
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	4413      	add	r3, r2
 80076a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80076a4:	461a      	mov	r2, r3
 80076a6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80076aa:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80076ac:	693b      	ldr	r3, [r7, #16]
 80076ae:	3301      	adds	r3, #1
 80076b0:	613b      	str	r3, [r7, #16]
 80076b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076b4:	693a      	ldr	r2, [r7, #16]
 80076b6:	429a      	cmp	r2, r3
 80076b8:	d3b7      	bcc.n	800762a <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80076ba:	2300      	movs	r3, #0
 80076bc:	613b      	str	r3, [r7, #16]
 80076be:	e043      	b.n	8007748 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80076c0:	693b      	ldr	r3, [r7, #16]
 80076c2:	015a      	lsls	r2, r3, #5
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	4413      	add	r3, r2
 80076c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80076d2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80076d6:	d118      	bne.n	800770a <USB_DevInit+0x206>
    {
      if (i == 0U)
 80076d8:	693b      	ldr	r3, [r7, #16]
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d10a      	bne.n	80076f4 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80076de:	693b      	ldr	r3, [r7, #16]
 80076e0:	015a      	lsls	r2, r3, #5
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	4413      	add	r3, r2
 80076e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80076ea:	461a      	mov	r2, r3
 80076ec:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80076f0:	6013      	str	r3, [r2, #0]
 80076f2:	e013      	b.n	800771c <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80076f4:	693b      	ldr	r3, [r7, #16]
 80076f6:	015a      	lsls	r2, r3, #5
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	4413      	add	r3, r2
 80076fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007700:	461a      	mov	r2, r3
 8007702:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007706:	6013      	str	r3, [r2, #0]
 8007708:	e008      	b.n	800771c <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800770a:	693b      	ldr	r3, [r7, #16]
 800770c:	015a      	lsls	r2, r3, #5
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	4413      	add	r3, r2
 8007712:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007716:	461a      	mov	r2, r3
 8007718:	2300      	movs	r3, #0
 800771a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800771c:	693b      	ldr	r3, [r7, #16]
 800771e:	015a      	lsls	r2, r3, #5
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	4413      	add	r3, r2
 8007724:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007728:	461a      	mov	r2, r3
 800772a:	2300      	movs	r3, #0
 800772c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800772e:	693b      	ldr	r3, [r7, #16]
 8007730:	015a      	lsls	r2, r3, #5
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	4413      	add	r3, r2
 8007736:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800773a:	461a      	mov	r2, r3
 800773c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007740:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007742:	693b      	ldr	r3, [r7, #16]
 8007744:	3301      	adds	r3, #1
 8007746:	613b      	str	r3, [r7, #16]
 8007748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800774a:	693a      	ldr	r2, [r7, #16]
 800774c:	429a      	cmp	r2, r3
 800774e:	d3b7      	bcc.n	80076c0 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007756:	691b      	ldr	r3, [r3, #16]
 8007758:	68fa      	ldr	r2, [r7, #12]
 800775a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800775e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007762:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	2200      	movs	r2, #0
 8007768:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8007770:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007772:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007774:	2b00      	cmp	r3, #0
 8007776:	d105      	bne.n	8007784 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	699b      	ldr	r3, [r3, #24]
 800777c:	f043 0210 	orr.w	r2, r3, #16
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	699a      	ldr	r2, [r3, #24]
 8007788:	4b0f      	ldr	r3, [pc, #60]	; (80077c8 <USB_DevInit+0x2c4>)
 800778a:	4313      	orrs	r3, r2
 800778c:	687a      	ldr	r2, [r7, #4]
 800778e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8007790:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007792:	2b00      	cmp	r3, #0
 8007794:	d005      	beq.n	80077a2 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	699b      	ldr	r3, [r3, #24]
 800779a:	f043 0208 	orr.w	r2, r3, #8
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80077a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80077a4:	2b01      	cmp	r3, #1
 80077a6:	d107      	bne.n	80077b8 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	699b      	ldr	r3, [r3, #24]
 80077ac:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80077b0:	f043 0304 	orr.w	r3, r3, #4
 80077b4:	687a      	ldr	r2, [r7, #4]
 80077b6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80077b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80077ba:	4618      	mov	r0, r3
 80077bc:	3718      	adds	r7, #24
 80077be:	46bd      	mov	sp, r7
 80077c0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80077c4:	b004      	add	sp, #16
 80077c6:	4770      	bx	lr
 80077c8:	803c3800 	.word	0x803c3800

080077cc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80077cc:	b480      	push	{r7}
 80077ce:	b085      	sub	sp, #20
 80077d0:	af00      	add	r7, sp, #0
 80077d2:	6078      	str	r0, [r7, #4]
 80077d4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80077d6:	2300      	movs	r3, #0
 80077d8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	3301      	adds	r3, #1
 80077de:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	4a13      	ldr	r2, [pc, #76]	; (8007830 <USB_FlushTxFifo+0x64>)
 80077e4:	4293      	cmp	r3, r2
 80077e6:	d901      	bls.n	80077ec <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80077e8:	2303      	movs	r3, #3
 80077ea:	e01b      	b.n	8007824 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	691b      	ldr	r3, [r3, #16]
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	daf2      	bge.n	80077da <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80077f4:	2300      	movs	r3, #0
 80077f6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80077f8:	683b      	ldr	r3, [r7, #0]
 80077fa:	019b      	lsls	r3, r3, #6
 80077fc:	f043 0220 	orr.w	r2, r3, #32
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	3301      	adds	r3, #1
 8007808:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	4a08      	ldr	r2, [pc, #32]	; (8007830 <USB_FlushTxFifo+0x64>)
 800780e:	4293      	cmp	r3, r2
 8007810:	d901      	bls.n	8007816 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8007812:	2303      	movs	r3, #3
 8007814:	e006      	b.n	8007824 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	691b      	ldr	r3, [r3, #16]
 800781a:	f003 0320 	and.w	r3, r3, #32
 800781e:	2b20      	cmp	r3, #32
 8007820:	d0f0      	beq.n	8007804 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8007822:	2300      	movs	r3, #0
}
 8007824:	4618      	mov	r0, r3
 8007826:	3714      	adds	r7, #20
 8007828:	46bd      	mov	sp, r7
 800782a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800782e:	4770      	bx	lr
 8007830:	00030d40 	.word	0x00030d40

08007834 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007834:	b480      	push	{r7}
 8007836:	b085      	sub	sp, #20
 8007838:	af00      	add	r7, sp, #0
 800783a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800783c:	2300      	movs	r3, #0
 800783e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	3301      	adds	r3, #1
 8007844:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	4a11      	ldr	r2, [pc, #68]	; (8007890 <USB_FlushRxFifo+0x5c>)
 800784a:	4293      	cmp	r3, r2
 800784c:	d901      	bls.n	8007852 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800784e:	2303      	movs	r3, #3
 8007850:	e018      	b.n	8007884 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	691b      	ldr	r3, [r3, #16]
 8007856:	2b00      	cmp	r3, #0
 8007858:	daf2      	bge.n	8007840 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800785a:	2300      	movs	r3, #0
 800785c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	2210      	movs	r2, #16
 8007862:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	3301      	adds	r3, #1
 8007868:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	4a08      	ldr	r2, [pc, #32]	; (8007890 <USB_FlushRxFifo+0x5c>)
 800786e:	4293      	cmp	r3, r2
 8007870:	d901      	bls.n	8007876 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8007872:	2303      	movs	r3, #3
 8007874:	e006      	b.n	8007884 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	691b      	ldr	r3, [r3, #16]
 800787a:	f003 0310 	and.w	r3, r3, #16
 800787e:	2b10      	cmp	r3, #16
 8007880:	d0f0      	beq.n	8007864 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8007882:	2300      	movs	r3, #0
}
 8007884:	4618      	mov	r0, r3
 8007886:	3714      	adds	r7, #20
 8007888:	46bd      	mov	sp, r7
 800788a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800788e:	4770      	bx	lr
 8007890:	00030d40 	.word	0x00030d40

08007894 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8007894:	b480      	push	{r7}
 8007896:	b085      	sub	sp, #20
 8007898:	af00      	add	r7, sp, #0
 800789a:	6078      	str	r0, [r7, #4]
 800789c:	460b      	mov	r3, r1
 800789e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80078aa:	681a      	ldr	r2, [r3, #0]
 80078ac:	78fb      	ldrb	r3, [r7, #3]
 80078ae:	68f9      	ldr	r1, [r7, #12]
 80078b0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80078b4:	4313      	orrs	r3, r2
 80078b6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80078b8:	2300      	movs	r3, #0
}
 80078ba:	4618      	mov	r0, r3
 80078bc:	3714      	adds	r7, #20
 80078be:	46bd      	mov	sp, r7
 80078c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078c4:	4770      	bx	lr

080078c6 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80078c6:	b480      	push	{r7}
 80078c8:	b087      	sub	sp, #28
 80078ca:	af00      	add	r7, sp, #0
 80078cc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80078d2:	693b      	ldr	r3, [r7, #16]
 80078d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80078d8:	689b      	ldr	r3, [r3, #8]
 80078da:	f003 0306 	and.w	r3, r3, #6
 80078de:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d102      	bne.n	80078ec <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80078e6:	2300      	movs	r3, #0
 80078e8:	75fb      	strb	r3, [r7, #23]
 80078ea:	e00a      	b.n	8007902 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	2b02      	cmp	r3, #2
 80078f0:	d002      	beq.n	80078f8 <USB_GetDevSpeed+0x32>
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	2b06      	cmp	r3, #6
 80078f6:	d102      	bne.n	80078fe <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80078f8:	2302      	movs	r3, #2
 80078fa:	75fb      	strb	r3, [r7, #23]
 80078fc:	e001      	b.n	8007902 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80078fe:	230f      	movs	r3, #15
 8007900:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8007902:	7dfb      	ldrb	r3, [r7, #23]
}
 8007904:	4618      	mov	r0, r3
 8007906:	371c      	adds	r7, #28
 8007908:	46bd      	mov	sp, r7
 800790a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800790e:	4770      	bx	lr

08007910 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007910:	b480      	push	{r7}
 8007912:	b085      	sub	sp, #20
 8007914:	af00      	add	r7, sp, #0
 8007916:	6078      	str	r0, [r7, #4]
 8007918:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800791e:	683b      	ldr	r3, [r7, #0]
 8007920:	781b      	ldrb	r3, [r3, #0]
 8007922:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007924:	683b      	ldr	r3, [r7, #0]
 8007926:	785b      	ldrb	r3, [r3, #1]
 8007928:	2b01      	cmp	r3, #1
 800792a:	d13a      	bne.n	80079a2 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007932:	69da      	ldr	r2, [r3, #28]
 8007934:	683b      	ldr	r3, [r7, #0]
 8007936:	781b      	ldrb	r3, [r3, #0]
 8007938:	f003 030f 	and.w	r3, r3, #15
 800793c:	2101      	movs	r1, #1
 800793e:	fa01 f303 	lsl.w	r3, r1, r3
 8007942:	b29b      	uxth	r3, r3
 8007944:	68f9      	ldr	r1, [r7, #12]
 8007946:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800794a:	4313      	orrs	r3, r2
 800794c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800794e:	68bb      	ldr	r3, [r7, #8]
 8007950:	015a      	lsls	r2, r3, #5
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	4413      	add	r3, r2
 8007956:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007960:	2b00      	cmp	r3, #0
 8007962:	d155      	bne.n	8007a10 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007964:	68bb      	ldr	r3, [r7, #8]
 8007966:	015a      	lsls	r2, r3, #5
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	4413      	add	r3, r2
 800796c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007970:	681a      	ldr	r2, [r3, #0]
 8007972:	683b      	ldr	r3, [r7, #0]
 8007974:	68db      	ldr	r3, [r3, #12]
 8007976:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800797a:	683b      	ldr	r3, [r7, #0]
 800797c:	791b      	ldrb	r3, [r3, #4]
 800797e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007980:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8007982:	68bb      	ldr	r3, [r7, #8]
 8007984:	059b      	lsls	r3, r3, #22
 8007986:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007988:	4313      	orrs	r3, r2
 800798a:	68ba      	ldr	r2, [r7, #8]
 800798c:	0151      	lsls	r1, r2, #5
 800798e:	68fa      	ldr	r2, [r7, #12]
 8007990:	440a      	add	r2, r1
 8007992:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007996:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800799a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800799e:	6013      	str	r3, [r2, #0]
 80079a0:	e036      	b.n	8007a10 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80079a8:	69da      	ldr	r2, [r3, #28]
 80079aa:	683b      	ldr	r3, [r7, #0]
 80079ac:	781b      	ldrb	r3, [r3, #0]
 80079ae:	f003 030f 	and.w	r3, r3, #15
 80079b2:	2101      	movs	r1, #1
 80079b4:	fa01 f303 	lsl.w	r3, r1, r3
 80079b8:	041b      	lsls	r3, r3, #16
 80079ba:	68f9      	ldr	r1, [r7, #12]
 80079bc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80079c0:	4313      	orrs	r3, r2
 80079c2:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80079c4:	68bb      	ldr	r3, [r7, #8]
 80079c6:	015a      	lsls	r2, r3, #5
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	4413      	add	r3, r2
 80079cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d11a      	bne.n	8007a10 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80079da:	68bb      	ldr	r3, [r7, #8]
 80079dc:	015a      	lsls	r2, r3, #5
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	4413      	add	r3, r2
 80079e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80079e6:	681a      	ldr	r2, [r3, #0]
 80079e8:	683b      	ldr	r3, [r7, #0]
 80079ea:	68db      	ldr	r3, [r3, #12]
 80079ec:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80079f0:	683b      	ldr	r3, [r7, #0]
 80079f2:	791b      	ldrb	r3, [r3, #4]
 80079f4:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80079f6:	430b      	orrs	r3, r1
 80079f8:	4313      	orrs	r3, r2
 80079fa:	68ba      	ldr	r2, [r7, #8]
 80079fc:	0151      	lsls	r1, r2, #5
 80079fe:	68fa      	ldr	r2, [r7, #12]
 8007a00:	440a      	add	r2, r1
 8007a02:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007a06:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007a0a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007a0e:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8007a10:	2300      	movs	r3, #0
}
 8007a12:	4618      	mov	r0, r3
 8007a14:	3714      	adds	r7, #20
 8007a16:	46bd      	mov	sp, r7
 8007a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a1c:	4770      	bx	lr
	...

08007a20 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007a20:	b480      	push	{r7}
 8007a22:	b085      	sub	sp, #20
 8007a24:	af00      	add	r7, sp, #0
 8007a26:	6078      	str	r0, [r7, #4]
 8007a28:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007a2e:	683b      	ldr	r3, [r7, #0]
 8007a30:	781b      	ldrb	r3, [r3, #0]
 8007a32:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8007a34:	683b      	ldr	r3, [r7, #0]
 8007a36:	785b      	ldrb	r3, [r3, #1]
 8007a38:	2b01      	cmp	r3, #1
 8007a3a:	d161      	bne.n	8007b00 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007a3c:	68bb      	ldr	r3, [r7, #8]
 8007a3e:	015a      	lsls	r2, r3, #5
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	4413      	add	r3, r2
 8007a44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007a4e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007a52:	d11f      	bne.n	8007a94 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8007a54:	68bb      	ldr	r3, [r7, #8]
 8007a56:	015a      	lsls	r2, r3, #5
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	4413      	add	r3, r2
 8007a5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	68ba      	ldr	r2, [r7, #8]
 8007a64:	0151      	lsls	r1, r2, #5
 8007a66:	68fa      	ldr	r2, [r7, #12]
 8007a68:	440a      	add	r2, r1
 8007a6a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007a6e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007a72:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8007a74:	68bb      	ldr	r3, [r7, #8]
 8007a76:	015a      	lsls	r2, r3, #5
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	4413      	add	r3, r2
 8007a7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	68ba      	ldr	r2, [r7, #8]
 8007a84:	0151      	lsls	r1, r2, #5
 8007a86:	68fa      	ldr	r2, [r7, #12]
 8007a88:	440a      	add	r2, r1
 8007a8a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007a8e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007a92:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007a9a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007a9c:	683b      	ldr	r3, [r7, #0]
 8007a9e:	781b      	ldrb	r3, [r3, #0]
 8007aa0:	f003 030f 	and.w	r3, r3, #15
 8007aa4:	2101      	movs	r1, #1
 8007aa6:	fa01 f303 	lsl.w	r3, r1, r3
 8007aaa:	b29b      	uxth	r3, r3
 8007aac:	43db      	mvns	r3, r3
 8007aae:	68f9      	ldr	r1, [r7, #12]
 8007ab0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007ab4:	4013      	ands	r3, r2
 8007ab6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007abe:	69da      	ldr	r2, [r3, #28]
 8007ac0:	683b      	ldr	r3, [r7, #0]
 8007ac2:	781b      	ldrb	r3, [r3, #0]
 8007ac4:	f003 030f 	and.w	r3, r3, #15
 8007ac8:	2101      	movs	r1, #1
 8007aca:	fa01 f303 	lsl.w	r3, r1, r3
 8007ace:	b29b      	uxth	r3, r3
 8007ad0:	43db      	mvns	r3, r3
 8007ad2:	68f9      	ldr	r1, [r7, #12]
 8007ad4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007ad8:	4013      	ands	r3, r2
 8007ada:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8007adc:	68bb      	ldr	r3, [r7, #8]
 8007ade:	015a      	lsls	r2, r3, #5
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	4413      	add	r3, r2
 8007ae4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ae8:	681a      	ldr	r2, [r3, #0]
 8007aea:	68bb      	ldr	r3, [r7, #8]
 8007aec:	0159      	lsls	r1, r3, #5
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	440b      	add	r3, r1
 8007af2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007af6:	4619      	mov	r1, r3
 8007af8:	4b35      	ldr	r3, [pc, #212]	; (8007bd0 <USB_DeactivateEndpoint+0x1b0>)
 8007afa:	4013      	ands	r3, r2
 8007afc:	600b      	str	r3, [r1, #0]
 8007afe:	e060      	b.n	8007bc2 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007b00:	68bb      	ldr	r3, [r7, #8]
 8007b02:	015a      	lsls	r2, r3, #5
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	4413      	add	r3, r2
 8007b08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007b12:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007b16:	d11f      	bne.n	8007b58 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8007b18:	68bb      	ldr	r3, [r7, #8]
 8007b1a:	015a      	lsls	r2, r3, #5
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	4413      	add	r3, r2
 8007b20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	68ba      	ldr	r2, [r7, #8]
 8007b28:	0151      	lsls	r1, r2, #5
 8007b2a:	68fa      	ldr	r2, [r7, #12]
 8007b2c:	440a      	add	r2, r1
 8007b2e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007b32:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007b36:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8007b38:	68bb      	ldr	r3, [r7, #8]
 8007b3a:	015a      	lsls	r2, r3, #5
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	4413      	add	r3, r2
 8007b40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	68ba      	ldr	r2, [r7, #8]
 8007b48:	0151      	lsls	r1, r2, #5
 8007b4a:	68fa      	ldr	r2, [r7, #12]
 8007b4c:	440a      	add	r2, r1
 8007b4e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007b52:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007b56:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007b5e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007b60:	683b      	ldr	r3, [r7, #0]
 8007b62:	781b      	ldrb	r3, [r3, #0]
 8007b64:	f003 030f 	and.w	r3, r3, #15
 8007b68:	2101      	movs	r1, #1
 8007b6a:	fa01 f303 	lsl.w	r3, r1, r3
 8007b6e:	041b      	lsls	r3, r3, #16
 8007b70:	43db      	mvns	r3, r3
 8007b72:	68f9      	ldr	r1, [r7, #12]
 8007b74:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007b78:	4013      	ands	r3, r2
 8007b7a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007b82:	69da      	ldr	r2, [r3, #28]
 8007b84:	683b      	ldr	r3, [r7, #0]
 8007b86:	781b      	ldrb	r3, [r3, #0]
 8007b88:	f003 030f 	and.w	r3, r3, #15
 8007b8c:	2101      	movs	r1, #1
 8007b8e:	fa01 f303 	lsl.w	r3, r1, r3
 8007b92:	041b      	lsls	r3, r3, #16
 8007b94:	43db      	mvns	r3, r3
 8007b96:	68f9      	ldr	r1, [r7, #12]
 8007b98:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007b9c:	4013      	ands	r3, r2
 8007b9e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8007ba0:	68bb      	ldr	r3, [r7, #8]
 8007ba2:	015a      	lsls	r2, r3, #5
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	4413      	add	r3, r2
 8007ba8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007bac:	681a      	ldr	r2, [r3, #0]
 8007bae:	68bb      	ldr	r3, [r7, #8]
 8007bb0:	0159      	lsls	r1, r3, #5
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	440b      	add	r3, r1
 8007bb6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007bba:	4619      	mov	r1, r3
 8007bbc:	4b05      	ldr	r3, [pc, #20]	; (8007bd4 <USB_DeactivateEndpoint+0x1b4>)
 8007bbe:	4013      	ands	r3, r2
 8007bc0:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8007bc2:	2300      	movs	r3, #0
}
 8007bc4:	4618      	mov	r0, r3
 8007bc6:	3714      	adds	r7, #20
 8007bc8:	46bd      	mov	sp, r7
 8007bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bce:	4770      	bx	lr
 8007bd0:	ec337800 	.word	0xec337800
 8007bd4:	eff37800 	.word	0xeff37800

08007bd8 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8007bd8:	b580      	push	{r7, lr}
 8007bda:	b08a      	sub	sp, #40	; 0x28
 8007bdc:	af02      	add	r7, sp, #8
 8007bde:	60f8      	str	r0, [r7, #12]
 8007be0:	60b9      	str	r1, [r7, #8]
 8007be2:	4613      	mov	r3, r2
 8007be4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8007bea:	68bb      	ldr	r3, [r7, #8]
 8007bec:	781b      	ldrb	r3, [r3, #0]
 8007bee:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007bf0:	68bb      	ldr	r3, [r7, #8]
 8007bf2:	785b      	ldrb	r3, [r3, #1]
 8007bf4:	2b01      	cmp	r3, #1
 8007bf6:	f040 815c 	bne.w	8007eb2 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8007bfa:	68bb      	ldr	r3, [r7, #8]
 8007bfc:	699b      	ldr	r3, [r3, #24]
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d132      	bne.n	8007c68 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007c02:	69bb      	ldr	r3, [r7, #24]
 8007c04:	015a      	lsls	r2, r3, #5
 8007c06:	69fb      	ldr	r3, [r7, #28]
 8007c08:	4413      	add	r3, r2
 8007c0a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c0e:	691b      	ldr	r3, [r3, #16]
 8007c10:	69ba      	ldr	r2, [r7, #24]
 8007c12:	0151      	lsls	r1, r2, #5
 8007c14:	69fa      	ldr	r2, [r7, #28]
 8007c16:	440a      	add	r2, r1
 8007c18:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007c1c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007c20:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007c24:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007c26:	69bb      	ldr	r3, [r7, #24]
 8007c28:	015a      	lsls	r2, r3, #5
 8007c2a:	69fb      	ldr	r3, [r7, #28]
 8007c2c:	4413      	add	r3, r2
 8007c2e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c32:	691b      	ldr	r3, [r3, #16]
 8007c34:	69ba      	ldr	r2, [r7, #24]
 8007c36:	0151      	lsls	r1, r2, #5
 8007c38:	69fa      	ldr	r2, [r7, #28]
 8007c3a:	440a      	add	r2, r1
 8007c3c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007c40:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007c44:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007c46:	69bb      	ldr	r3, [r7, #24]
 8007c48:	015a      	lsls	r2, r3, #5
 8007c4a:	69fb      	ldr	r3, [r7, #28]
 8007c4c:	4413      	add	r3, r2
 8007c4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c52:	691b      	ldr	r3, [r3, #16]
 8007c54:	69ba      	ldr	r2, [r7, #24]
 8007c56:	0151      	lsls	r1, r2, #5
 8007c58:	69fa      	ldr	r2, [r7, #28]
 8007c5a:	440a      	add	r2, r1
 8007c5c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007c60:	0cdb      	lsrs	r3, r3, #19
 8007c62:	04db      	lsls	r3, r3, #19
 8007c64:	6113      	str	r3, [r2, #16]
 8007c66:	e074      	b.n	8007d52 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007c68:	69bb      	ldr	r3, [r7, #24]
 8007c6a:	015a      	lsls	r2, r3, #5
 8007c6c:	69fb      	ldr	r3, [r7, #28]
 8007c6e:	4413      	add	r3, r2
 8007c70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c74:	691b      	ldr	r3, [r3, #16]
 8007c76:	69ba      	ldr	r2, [r7, #24]
 8007c78:	0151      	lsls	r1, r2, #5
 8007c7a:	69fa      	ldr	r2, [r7, #28]
 8007c7c:	440a      	add	r2, r1
 8007c7e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007c82:	0cdb      	lsrs	r3, r3, #19
 8007c84:	04db      	lsls	r3, r3, #19
 8007c86:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007c88:	69bb      	ldr	r3, [r7, #24]
 8007c8a:	015a      	lsls	r2, r3, #5
 8007c8c:	69fb      	ldr	r3, [r7, #28]
 8007c8e:	4413      	add	r3, r2
 8007c90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c94:	691b      	ldr	r3, [r3, #16]
 8007c96:	69ba      	ldr	r2, [r7, #24]
 8007c98:	0151      	lsls	r1, r2, #5
 8007c9a:	69fa      	ldr	r2, [r7, #28]
 8007c9c:	440a      	add	r2, r1
 8007c9e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007ca2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007ca6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007caa:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8007cac:	69bb      	ldr	r3, [r7, #24]
 8007cae:	015a      	lsls	r2, r3, #5
 8007cb0:	69fb      	ldr	r3, [r7, #28]
 8007cb2:	4413      	add	r3, r2
 8007cb4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007cb8:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8007cba:	68bb      	ldr	r3, [r7, #8]
 8007cbc:	6999      	ldr	r1, [r3, #24]
 8007cbe:	68bb      	ldr	r3, [r7, #8]
 8007cc0:	68db      	ldr	r3, [r3, #12]
 8007cc2:	440b      	add	r3, r1
 8007cc4:	1e59      	subs	r1, r3, #1
 8007cc6:	68bb      	ldr	r3, [r7, #8]
 8007cc8:	68db      	ldr	r3, [r3, #12]
 8007cca:	fbb1 f3f3 	udiv	r3, r1, r3
 8007cce:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8007cd0:	4b9d      	ldr	r3, [pc, #628]	; (8007f48 <USB_EPStartXfer+0x370>)
 8007cd2:	400b      	ands	r3, r1
 8007cd4:	69b9      	ldr	r1, [r7, #24]
 8007cd6:	0148      	lsls	r0, r1, #5
 8007cd8:	69f9      	ldr	r1, [r7, #28]
 8007cda:	4401      	add	r1, r0
 8007cdc:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8007ce0:	4313      	orrs	r3, r2
 8007ce2:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8007ce4:	69bb      	ldr	r3, [r7, #24]
 8007ce6:	015a      	lsls	r2, r3, #5
 8007ce8:	69fb      	ldr	r3, [r7, #28]
 8007cea:	4413      	add	r3, r2
 8007cec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007cf0:	691a      	ldr	r2, [r3, #16]
 8007cf2:	68bb      	ldr	r3, [r7, #8]
 8007cf4:	699b      	ldr	r3, [r3, #24]
 8007cf6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007cfa:	69b9      	ldr	r1, [r7, #24]
 8007cfc:	0148      	lsls	r0, r1, #5
 8007cfe:	69f9      	ldr	r1, [r7, #28]
 8007d00:	4401      	add	r1, r0
 8007d02:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8007d06:	4313      	orrs	r3, r2
 8007d08:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8007d0a:	68bb      	ldr	r3, [r7, #8]
 8007d0c:	791b      	ldrb	r3, [r3, #4]
 8007d0e:	2b01      	cmp	r3, #1
 8007d10:	d11f      	bne.n	8007d52 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8007d12:	69bb      	ldr	r3, [r7, #24]
 8007d14:	015a      	lsls	r2, r3, #5
 8007d16:	69fb      	ldr	r3, [r7, #28]
 8007d18:	4413      	add	r3, r2
 8007d1a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d1e:	691b      	ldr	r3, [r3, #16]
 8007d20:	69ba      	ldr	r2, [r7, #24]
 8007d22:	0151      	lsls	r1, r2, #5
 8007d24:	69fa      	ldr	r2, [r7, #28]
 8007d26:	440a      	add	r2, r1
 8007d28:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007d2c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8007d30:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8007d32:	69bb      	ldr	r3, [r7, #24]
 8007d34:	015a      	lsls	r2, r3, #5
 8007d36:	69fb      	ldr	r3, [r7, #28]
 8007d38:	4413      	add	r3, r2
 8007d3a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d3e:	691b      	ldr	r3, [r3, #16]
 8007d40:	69ba      	ldr	r2, [r7, #24]
 8007d42:	0151      	lsls	r1, r2, #5
 8007d44:	69fa      	ldr	r2, [r7, #28]
 8007d46:	440a      	add	r2, r1
 8007d48:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007d4c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007d50:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8007d52:	79fb      	ldrb	r3, [r7, #7]
 8007d54:	2b01      	cmp	r3, #1
 8007d56:	d14b      	bne.n	8007df0 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8007d58:	68bb      	ldr	r3, [r7, #8]
 8007d5a:	695b      	ldr	r3, [r3, #20]
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d009      	beq.n	8007d74 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8007d60:	69bb      	ldr	r3, [r7, #24]
 8007d62:	015a      	lsls	r2, r3, #5
 8007d64:	69fb      	ldr	r3, [r7, #28]
 8007d66:	4413      	add	r3, r2
 8007d68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d6c:	461a      	mov	r2, r3
 8007d6e:	68bb      	ldr	r3, [r7, #8]
 8007d70:	695b      	ldr	r3, [r3, #20]
 8007d72:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8007d74:	68bb      	ldr	r3, [r7, #8]
 8007d76:	791b      	ldrb	r3, [r3, #4]
 8007d78:	2b01      	cmp	r3, #1
 8007d7a:	d128      	bne.n	8007dce <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007d7c:	69fb      	ldr	r3, [r7, #28]
 8007d7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007d82:	689b      	ldr	r3, [r3, #8]
 8007d84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d110      	bne.n	8007dae <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007d8c:	69bb      	ldr	r3, [r7, #24]
 8007d8e:	015a      	lsls	r2, r3, #5
 8007d90:	69fb      	ldr	r3, [r7, #28]
 8007d92:	4413      	add	r3, r2
 8007d94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	69ba      	ldr	r2, [r7, #24]
 8007d9c:	0151      	lsls	r1, r2, #5
 8007d9e:	69fa      	ldr	r2, [r7, #28]
 8007da0:	440a      	add	r2, r1
 8007da2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007da6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007daa:	6013      	str	r3, [r2, #0]
 8007dac:	e00f      	b.n	8007dce <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8007dae:	69bb      	ldr	r3, [r7, #24]
 8007db0:	015a      	lsls	r2, r3, #5
 8007db2:	69fb      	ldr	r3, [r7, #28]
 8007db4:	4413      	add	r3, r2
 8007db6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	69ba      	ldr	r2, [r7, #24]
 8007dbe:	0151      	lsls	r1, r2, #5
 8007dc0:	69fa      	ldr	r2, [r7, #28]
 8007dc2:	440a      	add	r2, r1
 8007dc4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007dc8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007dcc:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007dce:	69bb      	ldr	r3, [r7, #24]
 8007dd0:	015a      	lsls	r2, r3, #5
 8007dd2:	69fb      	ldr	r3, [r7, #28]
 8007dd4:	4413      	add	r3, r2
 8007dd6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	69ba      	ldr	r2, [r7, #24]
 8007dde:	0151      	lsls	r1, r2, #5
 8007de0:	69fa      	ldr	r2, [r7, #28]
 8007de2:	440a      	add	r2, r1
 8007de4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007de8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007dec:	6013      	str	r3, [r2, #0]
 8007dee:	e133      	b.n	8008058 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007df0:	69bb      	ldr	r3, [r7, #24]
 8007df2:	015a      	lsls	r2, r3, #5
 8007df4:	69fb      	ldr	r3, [r7, #28]
 8007df6:	4413      	add	r3, r2
 8007df8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	69ba      	ldr	r2, [r7, #24]
 8007e00:	0151      	lsls	r1, r2, #5
 8007e02:	69fa      	ldr	r2, [r7, #28]
 8007e04:	440a      	add	r2, r1
 8007e06:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007e0a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007e0e:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007e10:	68bb      	ldr	r3, [r7, #8]
 8007e12:	791b      	ldrb	r3, [r3, #4]
 8007e14:	2b01      	cmp	r3, #1
 8007e16:	d015      	beq.n	8007e44 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8007e18:	68bb      	ldr	r3, [r7, #8]
 8007e1a:	699b      	ldr	r3, [r3, #24]
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	f000 811b 	beq.w	8008058 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8007e22:	69fb      	ldr	r3, [r7, #28]
 8007e24:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007e28:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007e2a:	68bb      	ldr	r3, [r7, #8]
 8007e2c:	781b      	ldrb	r3, [r3, #0]
 8007e2e:	f003 030f 	and.w	r3, r3, #15
 8007e32:	2101      	movs	r1, #1
 8007e34:	fa01 f303 	lsl.w	r3, r1, r3
 8007e38:	69f9      	ldr	r1, [r7, #28]
 8007e3a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007e3e:	4313      	orrs	r3, r2
 8007e40:	634b      	str	r3, [r1, #52]	; 0x34
 8007e42:	e109      	b.n	8008058 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007e44:	69fb      	ldr	r3, [r7, #28]
 8007e46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007e4a:	689b      	ldr	r3, [r3, #8]
 8007e4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d110      	bne.n	8007e76 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007e54:	69bb      	ldr	r3, [r7, #24]
 8007e56:	015a      	lsls	r2, r3, #5
 8007e58:	69fb      	ldr	r3, [r7, #28]
 8007e5a:	4413      	add	r3, r2
 8007e5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	69ba      	ldr	r2, [r7, #24]
 8007e64:	0151      	lsls	r1, r2, #5
 8007e66:	69fa      	ldr	r2, [r7, #28]
 8007e68:	440a      	add	r2, r1
 8007e6a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007e6e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007e72:	6013      	str	r3, [r2, #0]
 8007e74:	e00f      	b.n	8007e96 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8007e76:	69bb      	ldr	r3, [r7, #24]
 8007e78:	015a      	lsls	r2, r3, #5
 8007e7a:	69fb      	ldr	r3, [r7, #28]
 8007e7c:	4413      	add	r3, r2
 8007e7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	69ba      	ldr	r2, [r7, #24]
 8007e86:	0151      	lsls	r1, r2, #5
 8007e88:	69fa      	ldr	r2, [r7, #28]
 8007e8a:	440a      	add	r2, r1
 8007e8c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007e90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007e94:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8007e96:	68bb      	ldr	r3, [r7, #8]
 8007e98:	6919      	ldr	r1, [r3, #16]
 8007e9a:	68bb      	ldr	r3, [r7, #8]
 8007e9c:	781a      	ldrb	r2, [r3, #0]
 8007e9e:	68bb      	ldr	r3, [r7, #8]
 8007ea0:	699b      	ldr	r3, [r3, #24]
 8007ea2:	b298      	uxth	r0, r3
 8007ea4:	79fb      	ldrb	r3, [r7, #7]
 8007ea6:	9300      	str	r3, [sp, #0]
 8007ea8:	4603      	mov	r3, r0
 8007eaa:	68f8      	ldr	r0, [r7, #12]
 8007eac:	f000 fade 	bl	800846c <USB_WritePacket>
 8007eb0:	e0d2      	b.n	8008058 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8007eb2:	69bb      	ldr	r3, [r7, #24]
 8007eb4:	015a      	lsls	r2, r3, #5
 8007eb6:	69fb      	ldr	r3, [r7, #28]
 8007eb8:	4413      	add	r3, r2
 8007eba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ebe:	691b      	ldr	r3, [r3, #16]
 8007ec0:	69ba      	ldr	r2, [r7, #24]
 8007ec2:	0151      	lsls	r1, r2, #5
 8007ec4:	69fa      	ldr	r2, [r7, #28]
 8007ec6:	440a      	add	r2, r1
 8007ec8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007ecc:	0cdb      	lsrs	r3, r3, #19
 8007ece:	04db      	lsls	r3, r3, #19
 8007ed0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8007ed2:	69bb      	ldr	r3, [r7, #24]
 8007ed4:	015a      	lsls	r2, r3, #5
 8007ed6:	69fb      	ldr	r3, [r7, #28]
 8007ed8:	4413      	add	r3, r2
 8007eda:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ede:	691b      	ldr	r3, [r3, #16]
 8007ee0:	69ba      	ldr	r2, [r7, #24]
 8007ee2:	0151      	lsls	r1, r2, #5
 8007ee4:	69fa      	ldr	r2, [r7, #28]
 8007ee6:	440a      	add	r2, r1
 8007ee8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007eec:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007ef0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007ef4:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8007ef6:	68bb      	ldr	r3, [r7, #8]
 8007ef8:	699b      	ldr	r3, [r3, #24]
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d126      	bne.n	8007f4c <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8007efe:	69bb      	ldr	r3, [r7, #24]
 8007f00:	015a      	lsls	r2, r3, #5
 8007f02:	69fb      	ldr	r3, [r7, #28]
 8007f04:	4413      	add	r3, r2
 8007f06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f0a:	691a      	ldr	r2, [r3, #16]
 8007f0c:	68bb      	ldr	r3, [r7, #8]
 8007f0e:	68db      	ldr	r3, [r3, #12]
 8007f10:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007f14:	69b9      	ldr	r1, [r7, #24]
 8007f16:	0148      	lsls	r0, r1, #5
 8007f18:	69f9      	ldr	r1, [r7, #28]
 8007f1a:	4401      	add	r1, r0
 8007f1c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007f20:	4313      	orrs	r3, r2
 8007f22:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007f24:	69bb      	ldr	r3, [r7, #24]
 8007f26:	015a      	lsls	r2, r3, #5
 8007f28:	69fb      	ldr	r3, [r7, #28]
 8007f2a:	4413      	add	r3, r2
 8007f2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f30:	691b      	ldr	r3, [r3, #16]
 8007f32:	69ba      	ldr	r2, [r7, #24]
 8007f34:	0151      	lsls	r1, r2, #5
 8007f36:	69fa      	ldr	r2, [r7, #28]
 8007f38:	440a      	add	r2, r1
 8007f3a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007f3e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007f42:	6113      	str	r3, [r2, #16]
 8007f44:	e03a      	b.n	8007fbc <USB_EPStartXfer+0x3e4>
 8007f46:	bf00      	nop
 8007f48:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8007f4c:	68bb      	ldr	r3, [r7, #8]
 8007f4e:	699a      	ldr	r2, [r3, #24]
 8007f50:	68bb      	ldr	r3, [r7, #8]
 8007f52:	68db      	ldr	r3, [r3, #12]
 8007f54:	4413      	add	r3, r2
 8007f56:	1e5a      	subs	r2, r3, #1
 8007f58:	68bb      	ldr	r3, [r7, #8]
 8007f5a:	68db      	ldr	r3, [r3, #12]
 8007f5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f60:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8007f62:	68bb      	ldr	r3, [r7, #8]
 8007f64:	68db      	ldr	r3, [r3, #12]
 8007f66:	8afa      	ldrh	r2, [r7, #22]
 8007f68:	fb03 f202 	mul.w	r2, r3, r2
 8007f6c:	68bb      	ldr	r3, [r7, #8]
 8007f6e:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8007f70:	69bb      	ldr	r3, [r7, #24]
 8007f72:	015a      	lsls	r2, r3, #5
 8007f74:	69fb      	ldr	r3, [r7, #28]
 8007f76:	4413      	add	r3, r2
 8007f78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f7c:	691a      	ldr	r2, [r3, #16]
 8007f7e:	8afb      	ldrh	r3, [r7, #22]
 8007f80:	04d9      	lsls	r1, r3, #19
 8007f82:	4b38      	ldr	r3, [pc, #224]	; (8008064 <USB_EPStartXfer+0x48c>)
 8007f84:	400b      	ands	r3, r1
 8007f86:	69b9      	ldr	r1, [r7, #24]
 8007f88:	0148      	lsls	r0, r1, #5
 8007f8a:	69f9      	ldr	r1, [r7, #28]
 8007f8c:	4401      	add	r1, r0
 8007f8e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007f92:	4313      	orrs	r3, r2
 8007f94:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8007f96:	69bb      	ldr	r3, [r7, #24]
 8007f98:	015a      	lsls	r2, r3, #5
 8007f9a:	69fb      	ldr	r3, [r7, #28]
 8007f9c:	4413      	add	r3, r2
 8007f9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007fa2:	691a      	ldr	r2, [r3, #16]
 8007fa4:	68bb      	ldr	r3, [r7, #8]
 8007fa6:	69db      	ldr	r3, [r3, #28]
 8007fa8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007fac:	69b9      	ldr	r1, [r7, #24]
 8007fae:	0148      	lsls	r0, r1, #5
 8007fb0:	69f9      	ldr	r1, [r7, #28]
 8007fb2:	4401      	add	r1, r0
 8007fb4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007fb8:	4313      	orrs	r3, r2
 8007fba:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8007fbc:	79fb      	ldrb	r3, [r7, #7]
 8007fbe:	2b01      	cmp	r3, #1
 8007fc0:	d10d      	bne.n	8007fde <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8007fc2:	68bb      	ldr	r3, [r7, #8]
 8007fc4:	691b      	ldr	r3, [r3, #16]
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d009      	beq.n	8007fde <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8007fca:	68bb      	ldr	r3, [r7, #8]
 8007fcc:	6919      	ldr	r1, [r3, #16]
 8007fce:	69bb      	ldr	r3, [r7, #24]
 8007fd0:	015a      	lsls	r2, r3, #5
 8007fd2:	69fb      	ldr	r3, [r7, #28]
 8007fd4:	4413      	add	r3, r2
 8007fd6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007fda:	460a      	mov	r2, r1
 8007fdc:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8007fde:	68bb      	ldr	r3, [r7, #8]
 8007fe0:	791b      	ldrb	r3, [r3, #4]
 8007fe2:	2b01      	cmp	r3, #1
 8007fe4:	d128      	bne.n	8008038 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007fe6:	69fb      	ldr	r3, [r7, #28]
 8007fe8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007fec:	689b      	ldr	r3, [r3, #8]
 8007fee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	d110      	bne.n	8008018 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8007ff6:	69bb      	ldr	r3, [r7, #24]
 8007ff8:	015a      	lsls	r2, r3, #5
 8007ffa:	69fb      	ldr	r3, [r7, #28]
 8007ffc:	4413      	add	r3, r2
 8007ffe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	69ba      	ldr	r2, [r7, #24]
 8008006:	0151      	lsls	r1, r2, #5
 8008008:	69fa      	ldr	r2, [r7, #28]
 800800a:	440a      	add	r2, r1
 800800c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008010:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008014:	6013      	str	r3, [r2, #0]
 8008016:	e00f      	b.n	8008038 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8008018:	69bb      	ldr	r3, [r7, #24]
 800801a:	015a      	lsls	r2, r3, #5
 800801c:	69fb      	ldr	r3, [r7, #28]
 800801e:	4413      	add	r3, r2
 8008020:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	69ba      	ldr	r2, [r7, #24]
 8008028:	0151      	lsls	r1, r2, #5
 800802a:	69fa      	ldr	r2, [r7, #28]
 800802c:	440a      	add	r2, r1
 800802e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008032:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008036:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8008038:	69bb      	ldr	r3, [r7, #24]
 800803a:	015a      	lsls	r2, r3, #5
 800803c:	69fb      	ldr	r3, [r7, #28]
 800803e:	4413      	add	r3, r2
 8008040:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	69ba      	ldr	r2, [r7, #24]
 8008048:	0151      	lsls	r1, r2, #5
 800804a:	69fa      	ldr	r2, [r7, #28]
 800804c:	440a      	add	r2, r1
 800804e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008052:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008056:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008058:	2300      	movs	r3, #0
}
 800805a:	4618      	mov	r0, r3
 800805c:	3720      	adds	r7, #32
 800805e:	46bd      	mov	sp, r7
 8008060:	bd80      	pop	{r7, pc}
 8008062:	bf00      	nop
 8008064:	1ff80000 	.word	0x1ff80000

08008068 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8008068:	b480      	push	{r7}
 800806a:	b087      	sub	sp, #28
 800806c:	af00      	add	r7, sp, #0
 800806e:	60f8      	str	r0, [r7, #12]
 8008070:	60b9      	str	r1, [r7, #8]
 8008072:	4613      	mov	r3, r2
 8008074:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800807a:	68bb      	ldr	r3, [r7, #8]
 800807c:	781b      	ldrb	r3, [r3, #0]
 800807e:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008080:	68bb      	ldr	r3, [r7, #8]
 8008082:	785b      	ldrb	r3, [r3, #1]
 8008084:	2b01      	cmp	r3, #1
 8008086:	f040 80ce 	bne.w	8008226 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800808a:	68bb      	ldr	r3, [r7, #8]
 800808c:	699b      	ldr	r3, [r3, #24]
 800808e:	2b00      	cmp	r3, #0
 8008090:	d132      	bne.n	80080f8 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008092:	693b      	ldr	r3, [r7, #16]
 8008094:	015a      	lsls	r2, r3, #5
 8008096:	697b      	ldr	r3, [r7, #20]
 8008098:	4413      	add	r3, r2
 800809a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800809e:	691b      	ldr	r3, [r3, #16]
 80080a0:	693a      	ldr	r2, [r7, #16]
 80080a2:	0151      	lsls	r1, r2, #5
 80080a4:	697a      	ldr	r2, [r7, #20]
 80080a6:	440a      	add	r2, r1
 80080a8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80080ac:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80080b0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80080b4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80080b6:	693b      	ldr	r3, [r7, #16]
 80080b8:	015a      	lsls	r2, r3, #5
 80080ba:	697b      	ldr	r3, [r7, #20]
 80080bc:	4413      	add	r3, r2
 80080be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80080c2:	691b      	ldr	r3, [r3, #16]
 80080c4:	693a      	ldr	r2, [r7, #16]
 80080c6:	0151      	lsls	r1, r2, #5
 80080c8:	697a      	ldr	r2, [r7, #20]
 80080ca:	440a      	add	r2, r1
 80080cc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80080d0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80080d4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80080d6:	693b      	ldr	r3, [r7, #16]
 80080d8:	015a      	lsls	r2, r3, #5
 80080da:	697b      	ldr	r3, [r7, #20]
 80080dc:	4413      	add	r3, r2
 80080de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80080e2:	691b      	ldr	r3, [r3, #16]
 80080e4:	693a      	ldr	r2, [r7, #16]
 80080e6:	0151      	lsls	r1, r2, #5
 80080e8:	697a      	ldr	r2, [r7, #20]
 80080ea:	440a      	add	r2, r1
 80080ec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80080f0:	0cdb      	lsrs	r3, r3, #19
 80080f2:	04db      	lsls	r3, r3, #19
 80080f4:	6113      	str	r3, [r2, #16]
 80080f6:	e04e      	b.n	8008196 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80080f8:	693b      	ldr	r3, [r7, #16]
 80080fa:	015a      	lsls	r2, r3, #5
 80080fc:	697b      	ldr	r3, [r7, #20]
 80080fe:	4413      	add	r3, r2
 8008100:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008104:	691b      	ldr	r3, [r3, #16]
 8008106:	693a      	ldr	r2, [r7, #16]
 8008108:	0151      	lsls	r1, r2, #5
 800810a:	697a      	ldr	r2, [r7, #20]
 800810c:	440a      	add	r2, r1
 800810e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008112:	0cdb      	lsrs	r3, r3, #19
 8008114:	04db      	lsls	r3, r3, #19
 8008116:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008118:	693b      	ldr	r3, [r7, #16]
 800811a:	015a      	lsls	r2, r3, #5
 800811c:	697b      	ldr	r3, [r7, #20]
 800811e:	4413      	add	r3, r2
 8008120:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008124:	691b      	ldr	r3, [r3, #16]
 8008126:	693a      	ldr	r2, [r7, #16]
 8008128:	0151      	lsls	r1, r2, #5
 800812a:	697a      	ldr	r2, [r7, #20]
 800812c:	440a      	add	r2, r1
 800812e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008132:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008136:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800813a:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800813c:	68bb      	ldr	r3, [r7, #8]
 800813e:	699a      	ldr	r2, [r3, #24]
 8008140:	68bb      	ldr	r3, [r7, #8]
 8008142:	68db      	ldr	r3, [r3, #12]
 8008144:	429a      	cmp	r2, r3
 8008146:	d903      	bls.n	8008150 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8008148:	68bb      	ldr	r3, [r7, #8]
 800814a:	68da      	ldr	r2, [r3, #12]
 800814c:	68bb      	ldr	r3, [r7, #8]
 800814e:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008150:	693b      	ldr	r3, [r7, #16]
 8008152:	015a      	lsls	r2, r3, #5
 8008154:	697b      	ldr	r3, [r7, #20]
 8008156:	4413      	add	r3, r2
 8008158:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800815c:	691b      	ldr	r3, [r3, #16]
 800815e:	693a      	ldr	r2, [r7, #16]
 8008160:	0151      	lsls	r1, r2, #5
 8008162:	697a      	ldr	r2, [r7, #20]
 8008164:	440a      	add	r2, r1
 8008166:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800816a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800816e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8008170:	693b      	ldr	r3, [r7, #16]
 8008172:	015a      	lsls	r2, r3, #5
 8008174:	697b      	ldr	r3, [r7, #20]
 8008176:	4413      	add	r3, r2
 8008178:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800817c:	691a      	ldr	r2, [r3, #16]
 800817e:	68bb      	ldr	r3, [r7, #8]
 8008180:	699b      	ldr	r3, [r3, #24]
 8008182:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008186:	6939      	ldr	r1, [r7, #16]
 8008188:	0148      	lsls	r0, r1, #5
 800818a:	6979      	ldr	r1, [r7, #20]
 800818c:	4401      	add	r1, r0
 800818e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8008192:	4313      	orrs	r3, r2
 8008194:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8008196:	79fb      	ldrb	r3, [r7, #7]
 8008198:	2b01      	cmp	r3, #1
 800819a:	d11e      	bne.n	80081da <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800819c:	68bb      	ldr	r3, [r7, #8]
 800819e:	695b      	ldr	r3, [r3, #20]
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d009      	beq.n	80081b8 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80081a4:	693b      	ldr	r3, [r7, #16]
 80081a6:	015a      	lsls	r2, r3, #5
 80081a8:	697b      	ldr	r3, [r7, #20]
 80081aa:	4413      	add	r3, r2
 80081ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80081b0:	461a      	mov	r2, r3
 80081b2:	68bb      	ldr	r3, [r7, #8]
 80081b4:	695b      	ldr	r3, [r3, #20]
 80081b6:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80081b8:	693b      	ldr	r3, [r7, #16]
 80081ba:	015a      	lsls	r2, r3, #5
 80081bc:	697b      	ldr	r3, [r7, #20]
 80081be:	4413      	add	r3, r2
 80081c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	693a      	ldr	r2, [r7, #16]
 80081c8:	0151      	lsls	r1, r2, #5
 80081ca:	697a      	ldr	r2, [r7, #20]
 80081cc:	440a      	add	r2, r1
 80081ce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80081d2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80081d6:	6013      	str	r3, [r2, #0]
 80081d8:	e097      	b.n	800830a <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80081da:	693b      	ldr	r3, [r7, #16]
 80081dc:	015a      	lsls	r2, r3, #5
 80081de:	697b      	ldr	r3, [r7, #20]
 80081e0:	4413      	add	r3, r2
 80081e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	693a      	ldr	r2, [r7, #16]
 80081ea:	0151      	lsls	r1, r2, #5
 80081ec:	697a      	ldr	r2, [r7, #20]
 80081ee:	440a      	add	r2, r1
 80081f0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80081f4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80081f8:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80081fa:	68bb      	ldr	r3, [r7, #8]
 80081fc:	699b      	ldr	r3, [r3, #24]
 80081fe:	2b00      	cmp	r3, #0
 8008200:	f000 8083 	beq.w	800830a <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8008204:	697b      	ldr	r3, [r7, #20]
 8008206:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800820a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800820c:	68bb      	ldr	r3, [r7, #8]
 800820e:	781b      	ldrb	r3, [r3, #0]
 8008210:	f003 030f 	and.w	r3, r3, #15
 8008214:	2101      	movs	r1, #1
 8008216:	fa01 f303 	lsl.w	r3, r1, r3
 800821a:	6979      	ldr	r1, [r7, #20]
 800821c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008220:	4313      	orrs	r3, r2
 8008222:	634b      	str	r3, [r1, #52]	; 0x34
 8008224:	e071      	b.n	800830a <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8008226:	693b      	ldr	r3, [r7, #16]
 8008228:	015a      	lsls	r2, r3, #5
 800822a:	697b      	ldr	r3, [r7, #20]
 800822c:	4413      	add	r3, r2
 800822e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008232:	691b      	ldr	r3, [r3, #16]
 8008234:	693a      	ldr	r2, [r7, #16]
 8008236:	0151      	lsls	r1, r2, #5
 8008238:	697a      	ldr	r2, [r7, #20]
 800823a:	440a      	add	r2, r1
 800823c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008240:	0cdb      	lsrs	r3, r3, #19
 8008242:	04db      	lsls	r3, r3, #19
 8008244:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8008246:	693b      	ldr	r3, [r7, #16]
 8008248:	015a      	lsls	r2, r3, #5
 800824a:	697b      	ldr	r3, [r7, #20]
 800824c:	4413      	add	r3, r2
 800824e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008252:	691b      	ldr	r3, [r3, #16]
 8008254:	693a      	ldr	r2, [r7, #16]
 8008256:	0151      	lsls	r1, r2, #5
 8008258:	697a      	ldr	r2, [r7, #20]
 800825a:	440a      	add	r2, r1
 800825c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008260:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008264:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008268:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800826a:	68bb      	ldr	r3, [r7, #8]
 800826c:	699b      	ldr	r3, [r3, #24]
 800826e:	2b00      	cmp	r3, #0
 8008270:	d003      	beq.n	800827a <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8008272:	68bb      	ldr	r3, [r7, #8]
 8008274:	68da      	ldr	r2, [r3, #12]
 8008276:	68bb      	ldr	r3, [r7, #8]
 8008278:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 800827a:	68bb      	ldr	r3, [r7, #8]
 800827c:	68da      	ldr	r2, [r3, #12]
 800827e:	68bb      	ldr	r3, [r7, #8]
 8008280:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008282:	693b      	ldr	r3, [r7, #16]
 8008284:	015a      	lsls	r2, r3, #5
 8008286:	697b      	ldr	r3, [r7, #20]
 8008288:	4413      	add	r3, r2
 800828a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800828e:	691b      	ldr	r3, [r3, #16]
 8008290:	693a      	ldr	r2, [r7, #16]
 8008292:	0151      	lsls	r1, r2, #5
 8008294:	697a      	ldr	r2, [r7, #20]
 8008296:	440a      	add	r2, r1
 8008298:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800829c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80082a0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80082a2:	693b      	ldr	r3, [r7, #16]
 80082a4:	015a      	lsls	r2, r3, #5
 80082a6:	697b      	ldr	r3, [r7, #20]
 80082a8:	4413      	add	r3, r2
 80082aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80082ae:	691a      	ldr	r2, [r3, #16]
 80082b0:	68bb      	ldr	r3, [r7, #8]
 80082b2:	69db      	ldr	r3, [r3, #28]
 80082b4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80082b8:	6939      	ldr	r1, [r7, #16]
 80082ba:	0148      	lsls	r0, r1, #5
 80082bc:	6979      	ldr	r1, [r7, #20]
 80082be:	4401      	add	r1, r0
 80082c0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80082c4:	4313      	orrs	r3, r2
 80082c6:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 80082c8:	79fb      	ldrb	r3, [r7, #7]
 80082ca:	2b01      	cmp	r3, #1
 80082cc:	d10d      	bne.n	80082ea <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80082ce:	68bb      	ldr	r3, [r7, #8]
 80082d0:	691b      	ldr	r3, [r3, #16]
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d009      	beq.n	80082ea <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80082d6:	68bb      	ldr	r3, [r7, #8]
 80082d8:	6919      	ldr	r1, [r3, #16]
 80082da:	693b      	ldr	r3, [r7, #16]
 80082dc:	015a      	lsls	r2, r3, #5
 80082de:	697b      	ldr	r3, [r7, #20]
 80082e0:	4413      	add	r3, r2
 80082e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80082e6:	460a      	mov	r2, r1
 80082e8:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80082ea:	693b      	ldr	r3, [r7, #16]
 80082ec:	015a      	lsls	r2, r3, #5
 80082ee:	697b      	ldr	r3, [r7, #20]
 80082f0:	4413      	add	r3, r2
 80082f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	693a      	ldr	r2, [r7, #16]
 80082fa:	0151      	lsls	r1, r2, #5
 80082fc:	697a      	ldr	r2, [r7, #20]
 80082fe:	440a      	add	r2, r1
 8008300:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008304:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008308:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800830a:	2300      	movs	r3, #0
}
 800830c:	4618      	mov	r0, r3
 800830e:	371c      	adds	r7, #28
 8008310:	46bd      	mov	sp, r7
 8008312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008316:	4770      	bx	lr

08008318 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008318:	b480      	push	{r7}
 800831a:	b087      	sub	sp, #28
 800831c:	af00      	add	r7, sp, #0
 800831e:	6078      	str	r0, [r7, #4]
 8008320:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8008322:	2300      	movs	r3, #0
 8008324:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8008326:	2300      	movs	r3, #0
 8008328:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800832e:	683b      	ldr	r3, [r7, #0]
 8008330:	785b      	ldrb	r3, [r3, #1]
 8008332:	2b01      	cmp	r3, #1
 8008334:	d14a      	bne.n	80083cc <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008336:	683b      	ldr	r3, [r7, #0]
 8008338:	781b      	ldrb	r3, [r3, #0]
 800833a:	015a      	lsls	r2, r3, #5
 800833c:	693b      	ldr	r3, [r7, #16]
 800833e:	4413      	add	r3, r2
 8008340:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800834a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800834e:	f040 8086 	bne.w	800845e <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8008352:	683b      	ldr	r3, [r7, #0]
 8008354:	781b      	ldrb	r3, [r3, #0]
 8008356:	015a      	lsls	r2, r3, #5
 8008358:	693b      	ldr	r3, [r7, #16]
 800835a:	4413      	add	r3, r2
 800835c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	683a      	ldr	r2, [r7, #0]
 8008364:	7812      	ldrb	r2, [r2, #0]
 8008366:	0151      	lsls	r1, r2, #5
 8008368:	693a      	ldr	r2, [r7, #16]
 800836a:	440a      	add	r2, r1
 800836c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008370:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008374:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8008376:	683b      	ldr	r3, [r7, #0]
 8008378:	781b      	ldrb	r3, [r3, #0]
 800837a:	015a      	lsls	r2, r3, #5
 800837c:	693b      	ldr	r3, [r7, #16]
 800837e:	4413      	add	r3, r2
 8008380:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	683a      	ldr	r2, [r7, #0]
 8008388:	7812      	ldrb	r2, [r2, #0]
 800838a:	0151      	lsls	r1, r2, #5
 800838c:	693a      	ldr	r2, [r7, #16]
 800838e:	440a      	add	r2, r1
 8008390:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008394:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008398:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	3301      	adds	r3, #1
 800839e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	f242 7210 	movw	r2, #10000	; 0x2710
 80083a6:	4293      	cmp	r3, r2
 80083a8:	d902      	bls.n	80083b0 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80083aa:	2301      	movs	r3, #1
 80083ac:	75fb      	strb	r3, [r7, #23]
          break;
 80083ae:	e056      	b.n	800845e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80083b0:	683b      	ldr	r3, [r7, #0]
 80083b2:	781b      	ldrb	r3, [r3, #0]
 80083b4:	015a      	lsls	r2, r3, #5
 80083b6:	693b      	ldr	r3, [r7, #16]
 80083b8:	4413      	add	r3, r2
 80083ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80083c4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80083c8:	d0e7      	beq.n	800839a <USB_EPStopXfer+0x82>
 80083ca:	e048      	b.n	800845e <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80083cc:	683b      	ldr	r3, [r7, #0]
 80083ce:	781b      	ldrb	r3, [r3, #0]
 80083d0:	015a      	lsls	r2, r3, #5
 80083d2:	693b      	ldr	r3, [r7, #16]
 80083d4:	4413      	add	r3, r2
 80083d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80083e0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80083e4:	d13b      	bne.n	800845e <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80083e6:	683b      	ldr	r3, [r7, #0]
 80083e8:	781b      	ldrb	r3, [r3, #0]
 80083ea:	015a      	lsls	r2, r3, #5
 80083ec:	693b      	ldr	r3, [r7, #16]
 80083ee:	4413      	add	r3, r2
 80083f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	683a      	ldr	r2, [r7, #0]
 80083f8:	7812      	ldrb	r2, [r2, #0]
 80083fa:	0151      	lsls	r1, r2, #5
 80083fc:	693a      	ldr	r2, [r7, #16]
 80083fe:	440a      	add	r2, r1
 8008400:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008404:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008408:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800840a:	683b      	ldr	r3, [r7, #0]
 800840c:	781b      	ldrb	r3, [r3, #0]
 800840e:	015a      	lsls	r2, r3, #5
 8008410:	693b      	ldr	r3, [r7, #16]
 8008412:	4413      	add	r3, r2
 8008414:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	683a      	ldr	r2, [r7, #0]
 800841c:	7812      	ldrb	r2, [r2, #0]
 800841e:	0151      	lsls	r1, r2, #5
 8008420:	693a      	ldr	r2, [r7, #16]
 8008422:	440a      	add	r2, r1
 8008424:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008428:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800842c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	3301      	adds	r3, #1
 8008432:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	f242 7210 	movw	r2, #10000	; 0x2710
 800843a:	4293      	cmp	r3, r2
 800843c:	d902      	bls.n	8008444 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800843e:	2301      	movs	r3, #1
 8008440:	75fb      	strb	r3, [r7, #23]
          break;
 8008442:	e00c      	b.n	800845e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8008444:	683b      	ldr	r3, [r7, #0]
 8008446:	781b      	ldrb	r3, [r3, #0]
 8008448:	015a      	lsls	r2, r3, #5
 800844a:	693b      	ldr	r3, [r7, #16]
 800844c:	4413      	add	r3, r2
 800844e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008458:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800845c:	d0e7      	beq.n	800842e <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800845e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008460:	4618      	mov	r0, r3
 8008462:	371c      	adds	r7, #28
 8008464:	46bd      	mov	sp, r7
 8008466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800846a:	4770      	bx	lr

0800846c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800846c:	b480      	push	{r7}
 800846e:	b089      	sub	sp, #36	; 0x24
 8008470:	af00      	add	r7, sp, #0
 8008472:	60f8      	str	r0, [r7, #12]
 8008474:	60b9      	str	r1, [r7, #8]
 8008476:	4611      	mov	r1, r2
 8008478:	461a      	mov	r2, r3
 800847a:	460b      	mov	r3, r1
 800847c:	71fb      	strb	r3, [r7, #7]
 800847e:	4613      	mov	r3, r2
 8008480:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8008486:	68bb      	ldr	r3, [r7, #8]
 8008488:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800848a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800848e:	2b00      	cmp	r3, #0
 8008490:	d123      	bne.n	80084da <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8008492:	88bb      	ldrh	r3, [r7, #4]
 8008494:	3303      	adds	r3, #3
 8008496:	089b      	lsrs	r3, r3, #2
 8008498:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800849a:	2300      	movs	r3, #0
 800849c:	61bb      	str	r3, [r7, #24]
 800849e:	e018      	b.n	80084d2 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80084a0:	79fb      	ldrb	r3, [r7, #7]
 80084a2:	031a      	lsls	r2, r3, #12
 80084a4:	697b      	ldr	r3, [r7, #20]
 80084a6:	4413      	add	r3, r2
 80084a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80084ac:	461a      	mov	r2, r3
 80084ae:	69fb      	ldr	r3, [r7, #28]
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	6013      	str	r3, [r2, #0]
      pSrc++;
 80084b4:	69fb      	ldr	r3, [r7, #28]
 80084b6:	3301      	adds	r3, #1
 80084b8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80084ba:	69fb      	ldr	r3, [r7, #28]
 80084bc:	3301      	adds	r3, #1
 80084be:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80084c0:	69fb      	ldr	r3, [r7, #28]
 80084c2:	3301      	adds	r3, #1
 80084c4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80084c6:	69fb      	ldr	r3, [r7, #28]
 80084c8:	3301      	adds	r3, #1
 80084ca:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80084cc:	69bb      	ldr	r3, [r7, #24]
 80084ce:	3301      	adds	r3, #1
 80084d0:	61bb      	str	r3, [r7, #24]
 80084d2:	69ba      	ldr	r2, [r7, #24]
 80084d4:	693b      	ldr	r3, [r7, #16]
 80084d6:	429a      	cmp	r2, r3
 80084d8:	d3e2      	bcc.n	80084a0 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80084da:	2300      	movs	r3, #0
}
 80084dc:	4618      	mov	r0, r3
 80084de:	3724      	adds	r7, #36	; 0x24
 80084e0:	46bd      	mov	sp, r7
 80084e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084e6:	4770      	bx	lr

080084e8 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80084e8:	b480      	push	{r7}
 80084ea:	b08b      	sub	sp, #44	; 0x2c
 80084ec:	af00      	add	r7, sp, #0
 80084ee:	60f8      	str	r0, [r7, #12]
 80084f0:	60b9      	str	r1, [r7, #8]
 80084f2:	4613      	mov	r3, r2
 80084f4:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80084fa:	68bb      	ldr	r3, [r7, #8]
 80084fc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80084fe:	88fb      	ldrh	r3, [r7, #6]
 8008500:	089b      	lsrs	r3, r3, #2
 8008502:	b29b      	uxth	r3, r3
 8008504:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8008506:	88fb      	ldrh	r3, [r7, #6]
 8008508:	f003 0303 	and.w	r3, r3, #3
 800850c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800850e:	2300      	movs	r3, #0
 8008510:	623b      	str	r3, [r7, #32]
 8008512:	e014      	b.n	800853e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8008514:	69bb      	ldr	r3, [r7, #24]
 8008516:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800851a:	681a      	ldr	r2, [r3, #0]
 800851c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800851e:	601a      	str	r2, [r3, #0]
    pDest++;
 8008520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008522:	3301      	adds	r3, #1
 8008524:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8008526:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008528:	3301      	adds	r3, #1
 800852a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800852c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800852e:	3301      	adds	r3, #1
 8008530:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8008532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008534:	3301      	adds	r3, #1
 8008536:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8008538:	6a3b      	ldr	r3, [r7, #32]
 800853a:	3301      	adds	r3, #1
 800853c:	623b      	str	r3, [r7, #32]
 800853e:	6a3a      	ldr	r2, [r7, #32]
 8008540:	697b      	ldr	r3, [r7, #20]
 8008542:	429a      	cmp	r2, r3
 8008544:	d3e6      	bcc.n	8008514 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8008546:	8bfb      	ldrh	r3, [r7, #30]
 8008548:	2b00      	cmp	r3, #0
 800854a:	d01e      	beq.n	800858a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800854c:	2300      	movs	r3, #0
 800854e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8008550:	69bb      	ldr	r3, [r7, #24]
 8008552:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008556:	461a      	mov	r2, r3
 8008558:	f107 0310 	add.w	r3, r7, #16
 800855c:	6812      	ldr	r2, [r2, #0]
 800855e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8008560:	693a      	ldr	r2, [r7, #16]
 8008562:	6a3b      	ldr	r3, [r7, #32]
 8008564:	b2db      	uxtb	r3, r3
 8008566:	00db      	lsls	r3, r3, #3
 8008568:	fa22 f303 	lsr.w	r3, r2, r3
 800856c:	b2da      	uxtb	r2, r3
 800856e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008570:	701a      	strb	r2, [r3, #0]
      i++;
 8008572:	6a3b      	ldr	r3, [r7, #32]
 8008574:	3301      	adds	r3, #1
 8008576:	623b      	str	r3, [r7, #32]
      pDest++;
 8008578:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800857a:	3301      	adds	r3, #1
 800857c:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800857e:	8bfb      	ldrh	r3, [r7, #30]
 8008580:	3b01      	subs	r3, #1
 8008582:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8008584:	8bfb      	ldrh	r3, [r7, #30]
 8008586:	2b00      	cmp	r3, #0
 8008588:	d1ea      	bne.n	8008560 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800858a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800858c:	4618      	mov	r0, r3
 800858e:	372c      	adds	r7, #44	; 0x2c
 8008590:	46bd      	mov	sp, r7
 8008592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008596:	4770      	bx	lr

08008598 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008598:	b480      	push	{r7}
 800859a:	b085      	sub	sp, #20
 800859c:	af00      	add	r7, sp, #0
 800859e:	6078      	str	r0, [r7, #4]
 80085a0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80085a6:	683b      	ldr	r3, [r7, #0]
 80085a8:	781b      	ldrb	r3, [r3, #0]
 80085aa:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80085ac:	683b      	ldr	r3, [r7, #0]
 80085ae:	785b      	ldrb	r3, [r3, #1]
 80085b0:	2b01      	cmp	r3, #1
 80085b2:	d12c      	bne.n	800860e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80085b4:	68bb      	ldr	r3, [r7, #8]
 80085b6:	015a      	lsls	r2, r3, #5
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	4413      	add	r3, r2
 80085bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	db12      	blt.n	80085ec <USB_EPSetStall+0x54>
 80085c6:	68bb      	ldr	r3, [r7, #8]
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	d00f      	beq.n	80085ec <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80085cc:	68bb      	ldr	r3, [r7, #8]
 80085ce:	015a      	lsls	r2, r3, #5
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	4413      	add	r3, r2
 80085d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	68ba      	ldr	r2, [r7, #8]
 80085dc:	0151      	lsls	r1, r2, #5
 80085de:	68fa      	ldr	r2, [r7, #12]
 80085e0:	440a      	add	r2, r1
 80085e2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80085e6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80085ea:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80085ec:	68bb      	ldr	r3, [r7, #8]
 80085ee:	015a      	lsls	r2, r3, #5
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	4413      	add	r3, r2
 80085f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	68ba      	ldr	r2, [r7, #8]
 80085fc:	0151      	lsls	r1, r2, #5
 80085fe:	68fa      	ldr	r2, [r7, #12]
 8008600:	440a      	add	r2, r1
 8008602:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008606:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800860a:	6013      	str	r3, [r2, #0]
 800860c:	e02b      	b.n	8008666 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800860e:	68bb      	ldr	r3, [r7, #8]
 8008610:	015a      	lsls	r2, r3, #5
 8008612:	68fb      	ldr	r3, [r7, #12]
 8008614:	4413      	add	r3, r2
 8008616:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	2b00      	cmp	r3, #0
 800861e:	db12      	blt.n	8008646 <USB_EPSetStall+0xae>
 8008620:	68bb      	ldr	r3, [r7, #8]
 8008622:	2b00      	cmp	r3, #0
 8008624:	d00f      	beq.n	8008646 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8008626:	68bb      	ldr	r3, [r7, #8]
 8008628:	015a      	lsls	r2, r3, #5
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	4413      	add	r3, r2
 800862e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	68ba      	ldr	r2, [r7, #8]
 8008636:	0151      	lsls	r1, r2, #5
 8008638:	68fa      	ldr	r2, [r7, #12]
 800863a:	440a      	add	r2, r1
 800863c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008640:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008644:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8008646:	68bb      	ldr	r3, [r7, #8]
 8008648:	015a      	lsls	r2, r3, #5
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	4413      	add	r3, r2
 800864e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	68ba      	ldr	r2, [r7, #8]
 8008656:	0151      	lsls	r1, r2, #5
 8008658:	68fa      	ldr	r2, [r7, #12]
 800865a:	440a      	add	r2, r1
 800865c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008660:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008664:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008666:	2300      	movs	r3, #0
}
 8008668:	4618      	mov	r0, r3
 800866a:	3714      	adds	r7, #20
 800866c:	46bd      	mov	sp, r7
 800866e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008672:	4770      	bx	lr

08008674 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008674:	b480      	push	{r7}
 8008676:	b085      	sub	sp, #20
 8008678:	af00      	add	r7, sp, #0
 800867a:	6078      	str	r0, [r7, #4]
 800867c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008682:	683b      	ldr	r3, [r7, #0]
 8008684:	781b      	ldrb	r3, [r3, #0]
 8008686:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008688:	683b      	ldr	r3, [r7, #0]
 800868a:	785b      	ldrb	r3, [r3, #1]
 800868c:	2b01      	cmp	r3, #1
 800868e:	d128      	bne.n	80086e2 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8008690:	68bb      	ldr	r3, [r7, #8]
 8008692:	015a      	lsls	r2, r3, #5
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	4413      	add	r3, r2
 8008698:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	68ba      	ldr	r2, [r7, #8]
 80086a0:	0151      	lsls	r1, r2, #5
 80086a2:	68fa      	ldr	r2, [r7, #12]
 80086a4:	440a      	add	r2, r1
 80086a6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80086aa:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80086ae:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80086b0:	683b      	ldr	r3, [r7, #0]
 80086b2:	791b      	ldrb	r3, [r3, #4]
 80086b4:	2b03      	cmp	r3, #3
 80086b6:	d003      	beq.n	80086c0 <USB_EPClearStall+0x4c>
 80086b8:	683b      	ldr	r3, [r7, #0]
 80086ba:	791b      	ldrb	r3, [r3, #4]
 80086bc:	2b02      	cmp	r3, #2
 80086be:	d138      	bne.n	8008732 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80086c0:	68bb      	ldr	r3, [r7, #8]
 80086c2:	015a      	lsls	r2, r3, #5
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	4413      	add	r3, r2
 80086c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	68ba      	ldr	r2, [r7, #8]
 80086d0:	0151      	lsls	r1, r2, #5
 80086d2:	68fa      	ldr	r2, [r7, #12]
 80086d4:	440a      	add	r2, r1
 80086d6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80086da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80086de:	6013      	str	r3, [r2, #0]
 80086e0:	e027      	b.n	8008732 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80086e2:	68bb      	ldr	r3, [r7, #8]
 80086e4:	015a      	lsls	r2, r3, #5
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	4413      	add	r3, r2
 80086ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	68ba      	ldr	r2, [r7, #8]
 80086f2:	0151      	lsls	r1, r2, #5
 80086f4:	68fa      	ldr	r2, [r7, #12]
 80086f6:	440a      	add	r2, r1
 80086f8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80086fc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008700:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8008702:	683b      	ldr	r3, [r7, #0]
 8008704:	791b      	ldrb	r3, [r3, #4]
 8008706:	2b03      	cmp	r3, #3
 8008708:	d003      	beq.n	8008712 <USB_EPClearStall+0x9e>
 800870a:	683b      	ldr	r3, [r7, #0]
 800870c:	791b      	ldrb	r3, [r3, #4]
 800870e:	2b02      	cmp	r3, #2
 8008710:	d10f      	bne.n	8008732 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8008712:	68bb      	ldr	r3, [r7, #8]
 8008714:	015a      	lsls	r2, r3, #5
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	4413      	add	r3, r2
 800871a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	68ba      	ldr	r2, [r7, #8]
 8008722:	0151      	lsls	r1, r2, #5
 8008724:	68fa      	ldr	r2, [r7, #12]
 8008726:	440a      	add	r2, r1
 8008728:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800872c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008730:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8008732:	2300      	movs	r3, #0
}
 8008734:	4618      	mov	r0, r3
 8008736:	3714      	adds	r7, #20
 8008738:	46bd      	mov	sp, r7
 800873a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800873e:	4770      	bx	lr

08008740 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8008740:	b480      	push	{r7}
 8008742:	b085      	sub	sp, #20
 8008744:	af00      	add	r7, sp, #0
 8008746:	6078      	str	r0, [r7, #4]
 8008748:	460b      	mov	r3, r1
 800874a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8008750:	68fb      	ldr	r3, [r7, #12]
 8008752:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	68fa      	ldr	r2, [r7, #12]
 800875a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800875e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8008762:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800876a:	681a      	ldr	r2, [r3, #0]
 800876c:	78fb      	ldrb	r3, [r7, #3]
 800876e:	011b      	lsls	r3, r3, #4
 8008770:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8008774:	68f9      	ldr	r1, [r7, #12]
 8008776:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800877a:	4313      	orrs	r3, r2
 800877c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800877e:	2300      	movs	r3, #0
}
 8008780:	4618      	mov	r0, r3
 8008782:	3714      	adds	r7, #20
 8008784:	46bd      	mov	sp, r7
 8008786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800878a:	4770      	bx	lr

0800878c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800878c:	b480      	push	{r7}
 800878e:	b085      	sub	sp, #20
 8008790:	af00      	add	r7, sp, #0
 8008792:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	68fa      	ldr	r2, [r7, #12]
 80087a2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80087a6:	f023 0303 	bic.w	r3, r3, #3
 80087aa:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80087b2:	685b      	ldr	r3, [r3, #4]
 80087b4:	68fa      	ldr	r2, [r7, #12]
 80087b6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80087ba:	f023 0302 	bic.w	r3, r3, #2
 80087be:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80087c0:	2300      	movs	r3, #0
}
 80087c2:	4618      	mov	r0, r3
 80087c4:	3714      	adds	r7, #20
 80087c6:	46bd      	mov	sp, r7
 80087c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087cc:	4770      	bx	lr

080087ce <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80087ce:	b480      	push	{r7}
 80087d0:	b085      	sub	sp, #20
 80087d2:	af00      	add	r7, sp, #0
 80087d4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80087da:	68fb      	ldr	r3, [r7, #12]
 80087dc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	68fa      	ldr	r2, [r7, #12]
 80087e4:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80087e8:	f023 0303 	bic.w	r3, r3, #3
 80087ec:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80087ee:	68fb      	ldr	r3, [r7, #12]
 80087f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80087f4:	685b      	ldr	r3, [r3, #4]
 80087f6:	68fa      	ldr	r2, [r7, #12]
 80087f8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80087fc:	f043 0302 	orr.w	r3, r3, #2
 8008800:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008802:	2300      	movs	r3, #0
}
 8008804:	4618      	mov	r0, r3
 8008806:	3714      	adds	r7, #20
 8008808:	46bd      	mov	sp, r7
 800880a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800880e:	4770      	bx	lr

08008810 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8008810:	b480      	push	{r7}
 8008812:	b085      	sub	sp, #20
 8008814:	af00      	add	r7, sp, #0
 8008816:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	695b      	ldr	r3, [r3, #20]
 800881c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	699b      	ldr	r3, [r3, #24]
 8008822:	68fa      	ldr	r2, [r7, #12]
 8008824:	4013      	ands	r3, r2
 8008826:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8008828:	68fb      	ldr	r3, [r7, #12]
}
 800882a:	4618      	mov	r0, r3
 800882c:	3714      	adds	r7, #20
 800882e:	46bd      	mov	sp, r7
 8008830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008834:	4770      	bx	lr

08008836 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8008836:	b480      	push	{r7}
 8008838:	b085      	sub	sp, #20
 800883a:	af00      	add	r7, sp, #0
 800883c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008848:	699b      	ldr	r3, [r3, #24]
 800884a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008852:	69db      	ldr	r3, [r3, #28]
 8008854:	68ba      	ldr	r2, [r7, #8]
 8008856:	4013      	ands	r3, r2
 8008858:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800885a:	68bb      	ldr	r3, [r7, #8]
 800885c:	0c1b      	lsrs	r3, r3, #16
}
 800885e:	4618      	mov	r0, r3
 8008860:	3714      	adds	r7, #20
 8008862:	46bd      	mov	sp, r7
 8008864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008868:	4770      	bx	lr

0800886a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800886a:	b480      	push	{r7}
 800886c:	b085      	sub	sp, #20
 800886e:	af00      	add	r7, sp, #0
 8008870:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800887c:	699b      	ldr	r3, [r3, #24]
 800887e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008886:	69db      	ldr	r3, [r3, #28]
 8008888:	68ba      	ldr	r2, [r7, #8]
 800888a:	4013      	ands	r3, r2
 800888c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800888e:	68bb      	ldr	r3, [r7, #8]
 8008890:	b29b      	uxth	r3, r3
}
 8008892:	4618      	mov	r0, r3
 8008894:	3714      	adds	r7, #20
 8008896:	46bd      	mov	sp, r7
 8008898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800889c:	4770      	bx	lr

0800889e <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800889e:	b480      	push	{r7}
 80088a0:	b085      	sub	sp, #20
 80088a2:	af00      	add	r7, sp, #0
 80088a4:	6078      	str	r0, [r7, #4]
 80088a6:	460b      	mov	r3, r1
 80088a8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80088ae:	78fb      	ldrb	r3, [r7, #3]
 80088b0:	015a      	lsls	r2, r3, #5
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	4413      	add	r3, r2
 80088b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80088ba:	689b      	ldr	r3, [r3, #8]
 80088bc:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80088c4:	695b      	ldr	r3, [r3, #20]
 80088c6:	68ba      	ldr	r2, [r7, #8]
 80088c8:	4013      	ands	r3, r2
 80088ca:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80088cc:	68bb      	ldr	r3, [r7, #8]
}
 80088ce:	4618      	mov	r0, r3
 80088d0:	3714      	adds	r7, #20
 80088d2:	46bd      	mov	sp, r7
 80088d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088d8:	4770      	bx	lr

080088da <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80088da:	b480      	push	{r7}
 80088dc:	b087      	sub	sp, #28
 80088de:	af00      	add	r7, sp, #0
 80088e0:	6078      	str	r0, [r7, #4]
 80088e2:	460b      	mov	r3, r1
 80088e4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80088ea:	697b      	ldr	r3, [r7, #20]
 80088ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80088f0:	691b      	ldr	r3, [r3, #16]
 80088f2:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80088f4:	697b      	ldr	r3, [r7, #20]
 80088f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80088fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80088fc:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80088fe:	78fb      	ldrb	r3, [r7, #3]
 8008900:	f003 030f 	and.w	r3, r3, #15
 8008904:	68fa      	ldr	r2, [r7, #12]
 8008906:	fa22 f303 	lsr.w	r3, r2, r3
 800890a:	01db      	lsls	r3, r3, #7
 800890c:	b2db      	uxtb	r3, r3
 800890e:	693a      	ldr	r2, [r7, #16]
 8008910:	4313      	orrs	r3, r2
 8008912:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8008914:	78fb      	ldrb	r3, [r7, #3]
 8008916:	015a      	lsls	r2, r3, #5
 8008918:	697b      	ldr	r3, [r7, #20]
 800891a:	4413      	add	r3, r2
 800891c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008920:	689b      	ldr	r3, [r3, #8]
 8008922:	693a      	ldr	r2, [r7, #16]
 8008924:	4013      	ands	r3, r2
 8008926:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008928:	68bb      	ldr	r3, [r7, #8]
}
 800892a:	4618      	mov	r0, r3
 800892c:	371c      	adds	r7, #28
 800892e:	46bd      	mov	sp, r7
 8008930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008934:	4770      	bx	lr

08008936 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8008936:	b480      	push	{r7}
 8008938:	b083      	sub	sp, #12
 800893a:	af00      	add	r7, sp, #0
 800893c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	695b      	ldr	r3, [r3, #20]
 8008942:	f003 0301 	and.w	r3, r3, #1
}
 8008946:	4618      	mov	r0, r3
 8008948:	370c      	adds	r7, #12
 800894a:	46bd      	mov	sp, r7
 800894c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008950:	4770      	bx	lr

08008952 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8008952:	b480      	push	{r7}
 8008954:	b085      	sub	sp, #20
 8008956:	af00      	add	r7, sp, #0
 8008958:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	68fa      	ldr	r2, [r7, #12]
 8008968:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800896c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8008970:	f023 0307 	bic.w	r3, r3, #7
 8008974:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8008976:	68fb      	ldr	r3, [r7, #12]
 8008978:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800897c:	685b      	ldr	r3, [r3, #4]
 800897e:	68fa      	ldr	r2, [r7, #12]
 8008980:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008984:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008988:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800898a:	2300      	movs	r3, #0
}
 800898c:	4618      	mov	r0, r3
 800898e:	3714      	adds	r7, #20
 8008990:	46bd      	mov	sp, r7
 8008992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008996:	4770      	bx	lr

08008998 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8008998:	b480      	push	{r7}
 800899a:	b087      	sub	sp, #28
 800899c:	af00      	add	r7, sp, #0
 800899e:	60f8      	str	r0, [r7, #12]
 80089a0:	460b      	mov	r3, r1
 80089a2:	607a      	str	r2, [r7, #4]
 80089a4:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80089a6:	68fb      	ldr	r3, [r7, #12]
 80089a8:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80089aa:	68fb      	ldr	r3, [r7, #12]
 80089ac:	333c      	adds	r3, #60	; 0x3c
 80089ae:	3304      	adds	r3, #4
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80089b4:	693b      	ldr	r3, [r7, #16]
 80089b6:	4a26      	ldr	r2, [pc, #152]	; (8008a50 <USB_EP0_OutStart+0xb8>)
 80089b8:	4293      	cmp	r3, r2
 80089ba:	d90a      	bls.n	80089d2 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80089bc:	697b      	ldr	r3, [r7, #20]
 80089be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80089c8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80089cc:	d101      	bne.n	80089d2 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80089ce:	2300      	movs	r3, #0
 80089d0:	e037      	b.n	8008a42 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80089d2:	697b      	ldr	r3, [r7, #20]
 80089d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80089d8:	461a      	mov	r2, r3
 80089da:	2300      	movs	r3, #0
 80089dc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80089de:	697b      	ldr	r3, [r7, #20]
 80089e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80089e4:	691b      	ldr	r3, [r3, #16]
 80089e6:	697a      	ldr	r2, [r7, #20]
 80089e8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80089ec:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80089f0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80089f2:	697b      	ldr	r3, [r7, #20]
 80089f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80089f8:	691b      	ldr	r3, [r3, #16]
 80089fa:	697a      	ldr	r2, [r7, #20]
 80089fc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008a00:	f043 0318 	orr.w	r3, r3, #24
 8008a04:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8008a06:	697b      	ldr	r3, [r7, #20]
 8008a08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008a0c:	691b      	ldr	r3, [r3, #16]
 8008a0e:	697a      	ldr	r2, [r7, #20]
 8008a10:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008a14:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8008a18:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8008a1a:	7afb      	ldrb	r3, [r7, #11]
 8008a1c:	2b01      	cmp	r3, #1
 8008a1e:	d10f      	bne.n	8008a40 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8008a20:	697b      	ldr	r3, [r7, #20]
 8008a22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008a26:	461a      	mov	r2, r3
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8008a2c:	697b      	ldr	r3, [r7, #20]
 8008a2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	697a      	ldr	r2, [r7, #20]
 8008a36:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008a3a:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8008a3e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008a40:	2300      	movs	r3, #0
}
 8008a42:	4618      	mov	r0, r3
 8008a44:	371c      	adds	r7, #28
 8008a46:	46bd      	mov	sp, r7
 8008a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a4c:	4770      	bx	lr
 8008a4e:	bf00      	nop
 8008a50:	4f54300a 	.word	0x4f54300a

08008a54 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008a54:	b480      	push	{r7}
 8008a56:	b085      	sub	sp, #20
 8008a58:	af00      	add	r7, sp, #0
 8008a5a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008a5c:	2300      	movs	r3, #0
 8008a5e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008a60:	68fb      	ldr	r3, [r7, #12]
 8008a62:	3301      	adds	r3, #1
 8008a64:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	4a13      	ldr	r2, [pc, #76]	; (8008ab8 <USB_CoreReset+0x64>)
 8008a6a:	4293      	cmp	r3, r2
 8008a6c:	d901      	bls.n	8008a72 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8008a6e:	2303      	movs	r3, #3
 8008a70:	e01b      	b.n	8008aaa <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	691b      	ldr	r3, [r3, #16]
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	daf2      	bge.n	8008a60 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8008a7a:	2300      	movs	r3, #0
 8008a7c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	691b      	ldr	r3, [r3, #16]
 8008a82:	f043 0201 	orr.w	r2, r3, #1
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008a8a:	68fb      	ldr	r3, [r7, #12]
 8008a8c:	3301      	adds	r3, #1
 8008a8e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008a90:	68fb      	ldr	r3, [r7, #12]
 8008a92:	4a09      	ldr	r2, [pc, #36]	; (8008ab8 <USB_CoreReset+0x64>)
 8008a94:	4293      	cmp	r3, r2
 8008a96:	d901      	bls.n	8008a9c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8008a98:	2303      	movs	r3, #3
 8008a9a:	e006      	b.n	8008aaa <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	691b      	ldr	r3, [r3, #16]
 8008aa0:	f003 0301 	and.w	r3, r3, #1
 8008aa4:	2b01      	cmp	r3, #1
 8008aa6:	d0f0      	beq.n	8008a8a <USB_CoreReset+0x36>

  return HAL_OK;
 8008aa8:	2300      	movs	r3, #0
}
 8008aaa:	4618      	mov	r0, r3
 8008aac:	3714      	adds	r7, #20
 8008aae:	46bd      	mov	sp, r7
 8008ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ab4:	4770      	bx	lr
 8008ab6:	bf00      	nop
 8008ab8:	00030d40 	.word	0x00030d40

08008abc <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008abc:	b580      	push	{r7, lr}
 8008abe:	b084      	sub	sp, #16
 8008ac0:	af00      	add	r7, sp, #0
 8008ac2:	6078      	str	r0, [r7, #4]
 8008ac4:	460b      	mov	r3, r1
 8008ac6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8008ac8:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8008acc:	f002 fcc0 	bl	800b450 <USBD_static_malloc>
 8008ad0:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8008ad2:	68fb      	ldr	r3, [r7, #12]
 8008ad4:	2b00      	cmp	r3, #0
 8008ad6:	d109      	bne.n	8008aec <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	32b0      	adds	r2, #176	; 0xb0
 8008ae2:	2100      	movs	r1, #0
 8008ae4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8008ae8:	2302      	movs	r3, #2
 8008aea:	e0d4      	b.n	8008c96 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8008aec:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8008af0:	2100      	movs	r1, #0
 8008af2:	68f8      	ldr	r0, [r7, #12]
 8008af4:	f002 fd38 	bl	800b568 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	32b0      	adds	r2, #176	; 0xb0
 8008b02:	68f9      	ldr	r1, [r7, #12]
 8008b04:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	32b0      	adds	r2, #176	; 0xb0
 8008b12:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	7c1b      	ldrb	r3, [r3, #16]
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	d138      	bne.n	8008b96 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8008b24:	4b5e      	ldr	r3, [pc, #376]	; (8008ca0 <USBD_CDC_Init+0x1e4>)
 8008b26:	7819      	ldrb	r1, [r3, #0]
 8008b28:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008b2c:	2202      	movs	r2, #2
 8008b2e:	6878      	ldr	r0, [r7, #4]
 8008b30:	f002 fb6b 	bl	800b20a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8008b34:	4b5a      	ldr	r3, [pc, #360]	; (8008ca0 <USBD_CDC_Init+0x1e4>)
 8008b36:	781b      	ldrb	r3, [r3, #0]
 8008b38:	f003 020f 	and.w	r2, r3, #15
 8008b3c:	6879      	ldr	r1, [r7, #4]
 8008b3e:	4613      	mov	r3, r2
 8008b40:	009b      	lsls	r3, r3, #2
 8008b42:	4413      	add	r3, r2
 8008b44:	009b      	lsls	r3, r3, #2
 8008b46:	440b      	add	r3, r1
 8008b48:	3324      	adds	r3, #36	; 0x24
 8008b4a:	2201      	movs	r2, #1
 8008b4c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8008b4e:	4b55      	ldr	r3, [pc, #340]	; (8008ca4 <USBD_CDC_Init+0x1e8>)
 8008b50:	7819      	ldrb	r1, [r3, #0]
 8008b52:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008b56:	2202      	movs	r2, #2
 8008b58:	6878      	ldr	r0, [r7, #4]
 8008b5a:	f002 fb56 	bl	800b20a <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8008b5e:	4b51      	ldr	r3, [pc, #324]	; (8008ca4 <USBD_CDC_Init+0x1e8>)
 8008b60:	781b      	ldrb	r3, [r3, #0]
 8008b62:	f003 020f 	and.w	r2, r3, #15
 8008b66:	6879      	ldr	r1, [r7, #4]
 8008b68:	4613      	mov	r3, r2
 8008b6a:	009b      	lsls	r3, r3, #2
 8008b6c:	4413      	add	r3, r2
 8008b6e:	009b      	lsls	r3, r3, #2
 8008b70:	440b      	add	r3, r1
 8008b72:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008b76:	2201      	movs	r2, #1
 8008b78:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8008b7a:	4b4b      	ldr	r3, [pc, #300]	; (8008ca8 <USBD_CDC_Init+0x1ec>)
 8008b7c:	781b      	ldrb	r3, [r3, #0]
 8008b7e:	f003 020f 	and.w	r2, r3, #15
 8008b82:	6879      	ldr	r1, [r7, #4]
 8008b84:	4613      	mov	r3, r2
 8008b86:	009b      	lsls	r3, r3, #2
 8008b88:	4413      	add	r3, r2
 8008b8a:	009b      	lsls	r3, r3, #2
 8008b8c:	440b      	add	r3, r1
 8008b8e:	3326      	adds	r3, #38	; 0x26
 8008b90:	2210      	movs	r2, #16
 8008b92:	801a      	strh	r2, [r3, #0]
 8008b94:	e035      	b.n	8008c02 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8008b96:	4b42      	ldr	r3, [pc, #264]	; (8008ca0 <USBD_CDC_Init+0x1e4>)
 8008b98:	7819      	ldrb	r1, [r3, #0]
 8008b9a:	2340      	movs	r3, #64	; 0x40
 8008b9c:	2202      	movs	r2, #2
 8008b9e:	6878      	ldr	r0, [r7, #4]
 8008ba0:	f002 fb33 	bl	800b20a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8008ba4:	4b3e      	ldr	r3, [pc, #248]	; (8008ca0 <USBD_CDC_Init+0x1e4>)
 8008ba6:	781b      	ldrb	r3, [r3, #0]
 8008ba8:	f003 020f 	and.w	r2, r3, #15
 8008bac:	6879      	ldr	r1, [r7, #4]
 8008bae:	4613      	mov	r3, r2
 8008bb0:	009b      	lsls	r3, r3, #2
 8008bb2:	4413      	add	r3, r2
 8008bb4:	009b      	lsls	r3, r3, #2
 8008bb6:	440b      	add	r3, r1
 8008bb8:	3324      	adds	r3, #36	; 0x24
 8008bba:	2201      	movs	r2, #1
 8008bbc:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8008bbe:	4b39      	ldr	r3, [pc, #228]	; (8008ca4 <USBD_CDC_Init+0x1e8>)
 8008bc0:	7819      	ldrb	r1, [r3, #0]
 8008bc2:	2340      	movs	r3, #64	; 0x40
 8008bc4:	2202      	movs	r2, #2
 8008bc6:	6878      	ldr	r0, [r7, #4]
 8008bc8:	f002 fb1f 	bl	800b20a <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8008bcc:	4b35      	ldr	r3, [pc, #212]	; (8008ca4 <USBD_CDC_Init+0x1e8>)
 8008bce:	781b      	ldrb	r3, [r3, #0]
 8008bd0:	f003 020f 	and.w	r2, r3, #15
 8008bd4:	6879      	ldr	r1, [r7, #4]
 8008bd6:	4613      	mov	r3, r2
 8008bd8:	009b      	lsls	r3, r3, #2
 8008bda:	4413      	add	r3, r2
 8008bdc:	009b      	lsls	r3, r3, #2
 8008bde:	440b      	add	r3, r1
 8008be0:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008be4:	2201      	movs	r2, #1
 8008be6:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8008be8:	4b2f      	ldr	r3, [pc, #188]	; (8008ca8 <USBD_CDC_Init+0x1ec>)
 8008bea:	781b      	ldrb	r3, [r3, #0]
 8008bec:	f003 020f 	and.w	r2, r3, #15
 8008bf0:	6879      	ldr	r1, [r7, #4]
 8008bf2:	4613      	mov	r3, r2
 8008bf4:	009b      	lsls	r3, r3, #2
 8008bf6:	4413      	add	r3, r2
 8008bf8:	009b      	lsls	r3, r3, #2
 8008bfa:	440b      	add	r3, r1
 8008bfc:	3326      	adds	r3, #38	; 0x26
 8008bfe:	2210      	movs	r2, #16
 8008c00:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8008c02:	4b29      	ldr	r3, [pc, #164]	; (8008ca8 <USBD_CDC_Init+0x1ec>)
 8008c04:	7819      	ldrb	r1, [r3, #0]
 8008c06:	2308      	movs	r3, #8
 8008c08:	2203      	movs	r2, #3
 8008c0a:	6878      	ldr	r0, [r7, #4]
 8008c0c:	f002 fafd 	bl	800b20a <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8008c10:	4b25      	ldr	r3, [pc, #148]	; (8008ca8 <USBD_CDC_Init+0x1ec>)
 8008c12:	781b      	ldrb	r3, [r3, #0]
 8008c14:	f003 020f 	and.w	r2, r3, #15
 8008c18:	6879      	ldr	r1, [r7, #4]
 8008c1a:	4613      	mov	r3, r2
 8008c1c:	009b      	lsls	r3, r3, #2
 8008c1e:	4413      	add	r3, r2
 8008c20:	009b      	lsls	r3, r3, #2
 8008c22:	440b      	add	r3, r1
 8008c24:	3324      	adds	r3, #36	; 0x24
 8008c26:	2201      	movs	r2, #1
 8008c28:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8008c2a:	68fb      	ldr	r3, [r7, #12]
 8008c2c:	2200      	movs	r2, #0
 8008c2e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008c38:	687a      	ldr	r2, [r7, #4]
 8008c3a:	33b0      	adds	r3, #176	; 0xb0
 8008c3c:	009b      	lsls	r3, r3, #2
 8008c3e:	4413      	add	r3, r2
 8008c40:	685b      	ldr	r3, [r3, #4]
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8008c46:	68fb      	ldr	r3, [r7, #12]
 8008c48:	2200      	movs	r2, #0
 8008c4a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8008c4e:	68fb      	ldr	r3, [r7, #12]
 8008c50:	2200      	movs	r2, #0
 8008c52:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8008c56:	68fb      	ldr	r3, [r7, #12]
 8008c58:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	d101      	bne.n	8008c64 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8008c60:	2302      	movs	r3, #2
 8008c62:	e018      	b.n	8008c96 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	7c1b      	ldrb	r3, [r3, #16]
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	d10a      	bne.n	8008c82 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008c6c:	4b0d      	ldr	r3, [pc, #52]	; (8008ca4 <USBD_CDC_Init+0x1e8>)
 8008c6e:	7819      	ldrb	r1, [r3, #0]
 8008c70:	68fb      	ldr	r3, [r7, #12]
 8008c72:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008c76:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008c7a:	6878      	ldr	r0, [r7, #4]
 8008c7c:	f002 fbb4 	bl	800b3e8 <USBD_LL_PrepareReceive>
 8008c80:	e008      	b.n	8008c94 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008c82:	4b08      	ldr	r3, [pc, #32]	; (8008ca4 <USBD_CDC_Init+0x1e8>)
 8008c84:	7819      	ldrb	r1, [r3, #0]
 8008c86:	68fb      	ldr	r3, [r7, #12]
 8008c88:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008c8c:	2340      	movs	r3, #64	; 0x40
 8008c8e:	6878      	ldr	r0, [r7, #4]
 8008c90:	f002 fbaa 	bl	800b3e8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8008c94:	2300      	movs	r3, #0
}
 8008c96:	4618      	mov	r0, r3
 8008c98:	3710      	adds	r7, #16
 8008c9a:	46bd      	mov	sp, r7
 8008c9c:	bd80      	pop	{r7, pc}
 8008c9e:	bf00      	nop
 8008ca0:	200000a3 	.word	0x200000a3
 8008ca4:	200000a4 	.word	0x200000a4
 8008ca8:	200000a5 	.word	0x200000a5

08008cac <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008cac:	b580      	push	{r7, lr}
 8008cae:	b082      	sub	sp, #8
 8008cb0:	af00      	add	r7, sp, #0
 8008cb2:	6078      	str	r0, [r7, #4]
 8008cb4:	460b      	mov	r3, r1
 8008cb6:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8008cb8:	4b3a      	ldr	r3, [pc, #232]	; (8008da4 <USBD_CDC_DeInit+0xf8>)
 8008cba:	781b      	ldrb	r3, [r3, #0]
 8008cbc:	4619      	mov	r1, r3
 8008cbe:	6878      	ldr	r0, [r7, #4]
 8008cc0:	f002 fac9 	bl	800b256 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8008cc4:	4b37      	ldr	r3, [pc, #220]	; (8008da4 <USBD_CDC_DeInit+0xf8>)
 8008cc6:	781b      	ldrb	r3, [r3, #0]
 8008cc8:	f003 020f 	and.w	r2, r3, #15
 8008ccc:	6879      	ldr	r1, [r7, #4]
 8008cce:	4613      	mov	r3, r2
 8008cd0:	009b      	lsls	r3, r3, #2
 8008cd2:	4413      	add	r3, r2
 8008cd4:	009b      	lsls	r3, r3, #2
 8008cd6:	440b      	add	r3, r1
 8008cd8:	3324      	adds	r3, #36	; 0x24
 8008cda:	2200      	movs	r2, #0
 8008cdc:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8008cde:	4b32      	ldr	r3, [pc, #200]	; (8008da8 <USBD_CDC_DeInit+0xfc>)
 8008ce0:	781b      	ldrb	r3, [r3, #0]
 8008ce2:	4619      	mov	r1, r3
 8008ce4:	6878      	ldr	r0, [r7, #4]
 8008ce6:	f002 fab6 	bl	800b256 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8008cea:	4b2f      	ldr	r3, [pc, #188]	; (8008da8 <USBD_CDC_DeInit+0xfc>)
 8008cec:	781b      	ldrb	r3, [r3, #0]
 8008cee:	f003 020f 	and.w	r2, r3, #15
 8008cf2:	6879      	ldr	r1, [r7, #4]
 8008cf4:	4613      	mov	r3, r2
 8008cf6:	009b      	lsls	r3, r3, #2
 8008cf8:	4413      	add	r3, r2
 8008cfa:	009b      	lsls	r3, r3, #2
 8008cfc:	440b      	add	r3, r1
 8008cfe:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008d02:	2200      	movs	r2, #0
 8008d04:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8008d06:	4b29      	ldr	r3, [pc, #164]	; (8008dac <USBD_CDC_DeInit+0x100>)
 8008d08:	781b      	ldrb	r3, [r3, #0]
 8008d0a:	4619      	mov	r1, r3
 8008d0c:	6878      	ldr	r0, [r7, #4]
 8008d0e:	f002 faa2 	bl	800b256 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8008d12:	4b26      	ldr	r3, [pc, #152]	; (8008dac <USBD_CDC_DeInit+0x100>)
 8008d14:	781b      	ldrb	r3, [r3, #0]
 8008d16:	f003 020f 	and.w	r2, r3, #15
 8008d1a:	6879      	ldr	r1, [r7, #4]
 8008d1c:	4613      	mov	r3, r2
 8008d1e:	009b      	lsls	r3, r3, #2
 8008d20:	4413      	add	r3, r2
 8008d22:	009b      	lsls	r3, r3, #2
 8008d24:	440b      	add	r3, r1
 8008d26:	3324      	adds	r3, #36	; 0x24
 8008d28:	2200      	movs	r2, #0
 8008d2a:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8008d2c:	4b1f      	ldr	r3, [pc, #124]	; (8008dac <USBD_CDC_DeInit+0x100>)
 8008d2e:	781b      	ldrb	r3, [r3, #0]
 8008d30:	f003 020f 	and.w	r2, r3, #15
 8008d34:	6879      	ldr	r1, [r7, #4]
 8008d36:	4613      	mov	r3, r2
 8008d38:	009b      	lsls	r3, r3, #2
 8008d3a:	4413      	add	r3, r2
 8008d3c:	009b      	lsls	r3, r3, #2
 8008d3e:	440b      	add	r3, r1
 8008d40:	3326      	adds	r3, #38	; 0x26
 8008d42:	2200      	movs	r2, #0
 8008d44:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	32b0      	adds	r2, #176	; 0xb0
 8008d50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	d01f      	beq.n	8008d98 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008d5e:	687a      	ldr	r2, [r7, #4]
 8008d60:	33b0      	adds	r3, #176	; 0xb0
 8008d62:	009b      	lsls	r3, r3, #2
 8008d64:	4413      	add	r3, r2
 8008d66:	685b      	ldr	r3, [r3, #4]
 8008d68:	685b      	ldr	r3, [r3, #4]
 8008d6a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	32b0      	adds	r2, #176	; 0xb0
 8008d76:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008d7a:	4618      	mov	r0, r3
 8008d7c:	f002 fb76 	bl	800b46c <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	32b0      	adds	r2, #176	; 0xb0
 8008d8a:	2100      	movs	r1, #0
 8008d8c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	2200      	movs	r2, #0
 8008d94:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8008d98:	2300      	movs	r3, #0
}
 8008d9a:	4618      	mov	r0, r3
 8008d9c:	3708      	adds	r7, #8
 8008d9e:	46bd      	mov	sp, r7
 8008da0:	bd80      	pop	{r7, pc}
 8008da2:	bf00      	nop
 8008da4:	200000a3 	.word	0x200000a3
 8008da8:	200000a4 	.word	0x200000a4
 8008dac:	200000a5 	.word	0x200000a5

08008db0 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8008db0:	b580      	push	{r7, lr}
 8008db2:	b086      	sub	sp, #24
 8008db4:	af00      	add	r7, sp, #0
 8008db6:	6078      	str	r0, [r7, #4]
 8008db8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	32b0      	adds	r2, #176	; 0xb0
 8008dc4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008dc8:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8008dca:	2300      	movs	r3, #0
 8008dcc:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8008dce:	2300      	movs	r3, #0
 8008dd0:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8008dd2:	2300      	movs	r3, #0
 8008dd4:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8008dd6:	693b      	ldr	r3, [r7, #16]
 8008dd8:	2b00      	cmp	r3, #0
 8008dda:	d101      	bne.n	8008de0 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8008ddc:	2303      	movs	r3, #3
 8008dde:	e0bf      	b.n	8008f60 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008de0:	683b      	ldr	r3, [r7, #0]
 8008de2:	781b      	ldrb	r3, [r3, #0]
 8008de4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	d050      	beq.n	8008e8e <USBD_CDC_Setup+0xde>
 8008dec:	2b20      	cmp	r3, #32
 8008dee:	f040 80af 	bne.w	8008f50 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8008df2:	683b      	ldr	r3, [r7, #0]
 8008df4:	88db      	ldrh	r3, [r3, #6]
 8008df6:	2b00      	cmp	r3, #0
 8008df8:	d03a      	beq.n	8008e70 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8008dfa:	683b      	ldr	r3, [r7, #0]
 8008dfc:	781b      	ldrb	r3, [r3, #0]
 8008dfe:	b25b      	sxtb	r3, r3
 8008e00:	2b00      	cmp	r3, #0
 8008e02:	da1b      	bge.n	8008e3c <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008e0a:	687a      	ldr	r2, [r7, #4]
 8008e0c:	33b0      	adds	r3, #176	; 0xb0
 8008e0e:	009b      	lsls	r3, r3, #2
 8008e10:	4413      	add	r3, r2
 8008e12:	685b      	ldr	r3, [r3, #4]
 8008e14:	689b      	ldr	r3, [r3, #8]
 8008e16:	683a      	ldr	r2, [r7, #0]
 8008e18:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8008e1a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8008e1c:	683a      	ldr	r2, [r7, #0]
 8008e1e:	88d2      	ldrh	r2, [r2, #6]
 8008e20:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8008e22:	683b      	ldr	r3, [r7, #0]
 8008e24:	88db      	ldrh	r3, [r3, #6]
 8008e26:	2b07      	cmp	r3, #7
 8008e28:	bf28      	it	cs
 8008e2a:	2307      	movcs	r3, #7
 8008e2c:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8008e2e:	693b      	ldr	r3, [r7, #16]
 8008e30:	89fa      	ldrh	r2, [r7, #14]
 8008e32:	4619      	mov	r1, r3
 8008e34:	6878      	ldr	r0, [r7, #4]
 8008e36:	f001 fd89 	bl	800a94c <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8008e3a:	e090      	b.n	8008f5e <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8008e3c:	683b      	ldr	r3, [r7, #0]
 8008e3e:	785a      	ldrb	r2, [r3, #1]
 8008e40:	693b      	ldr	r3, [r7, #16]
 8008e42:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8008e46:	683b      	ldr	r3, [r7, #0]
 8008e48:	88db      	ldrh	r3, [r3, #6]
 8008e4a:	2b3f      	cmp	r3, #63	; 0x3f
 8008e4c:	d803      	bhi.n	8008e56 <USBD_CDC_Setup+0xa6>
 8008e4e:	683b      	ldr	r3, [r7, #0]
 8008e50:	88db      	ldrh	r3, [r3, #6]
 8008e52:	b2da      	uxtb	r2, r3
 8008e54:	e000      	b.n	8008e58 <USBD_CDC_Setup+0xa8>
 8008e56:	2240      	movs	r2, #64	; 0x40
 8008e58:	693b      	ldr	r3, [r7, #16]
 8008e5a:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8008e5e:	6939      	ldr	r1, [r7, #16]
 8008e60:	693b      	ldr	r3, [r7, #16]
 8008e62:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8008e66:	461a      	mov	r2, r3
 8008e68:	6878      	ldr	r0, [r7, #4]
 8008e6a:	f001 fd9b 	bl	800a9a4 <USBD_CtlPrepareRx>
      break;
 8008e6e:	e076      	b.n	8008f5e <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008e76:	687a      	ldr	r2, [r7, #4]
 8008e78:	33b0      	adds	r3, #176	; 0xb0
 8008e7a:	009b      	lsls	r3, r3, #2
 8008e7c:	4413      	add	r3, r2
 8008e7e:	685b      	ldr	r3, [r3, #4]
 8008e80:	689b      	ldr	r3, [r3, #8]
 8008e82:	683a      	ldr	r2, [r7, #0]
 8008e84:	7850      	ldrb	r0, [r2, #1]
 8008e86:	2200      	movs	r2, #0
 8008e88:	6839      	ldr	r1, [r7, #0]
 8008e8a:	4798      	blx	r3
      break;
 8008e8c:	e067      	b.n	8008f5e <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008e8e:	683b      	ldr	r3, [r7, #0]
 8008e90:	785b      	ldrb	r3, [r3, #1]
 8008e92:	2b0b      	cmp	r3, #11
 8008e94:	d851      	bhi.n	8008f3a <USBD_CDC_Setup+0x18a>
 8008e96:	a201      	add	r2, pc, #4	; (adr r2, 8008e9c <USBD_CDC_Setup+0xec>)
 8008e98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e9c:	08008ecd 	.word	0x08008ecd
 8008ea0:	08008f49 	.word	0x08008f49
 8008ea4:	08008f3b 	.word	0x08008f3b
 8008ea8:	08008f3b 	.word	0x08008f3b
 8008eac:	08008f3b 	.word	0x08008f3b
 8008eb0:	08008f3b 	.word	0x08008f3b
 8008eb4:	08008f3b 	.word	0x08008f3b
 8008eb8:	08008f3b 	.word	0x08008f3b
 8008ebc:	08008f3b 	.word	0x08008f3b
 8008ec0:	08008f3b 	.word	0x08008f3b
 8008ec4:	08008ef7 	.word	0x08008ef7
 8008ec8:	08008f21 	.word	0x08008f21
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008ed2:	b2db      	uxtb	r3, r3
 8008ed4:	2b03      	cmp	r3, #3
 8008ed6:	d107      	bne.n	8008ee8 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8008ed8:	f107 030a 	add.w	r3, r7, #10
 8008edc:	2202      	movs	r2, #2
 8008ede:	4619      	mov	r1, r3
 8008ee0:	6878      	ldr	r0, [r7, #4]
 8008ee2:	f001 fd33 	bl	800a94c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008ee6:	e032      	b.n	8008f4e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8008ee8:	6839      	ldr	r1, [r7, #0]
 8008eea:	6878      	ldr	r0, [r7, #4]
 8008eec:	f001 fcbd 	bl	800a86a <USBD_CtlError>
            ret = USBD_FAIL;
 8008ef0:	2303      	movs	r3, #3
 8008ef2:	75fb      	strb	r3, [r7, #23]
          break;
 8008ef4:	e02b      	b.n	8008f4e <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008efc:	b2db      	uxtb	r3, r3
 8008efe:	2b03      	cmp	r3, #3
 8008f00:	d107      	bne.n	8008f12 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8008f02:	f107 030d 	add.w	r3, r7, #13
 8008f06:	2201      	movs	r2, #1
 8008f08:	4619      	mov	r1, r3
 8008f0a:	6878      	ldr	r0, [r7, #4]
 8008f0c:	f001 fd1e 	bl	800a94c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008f10:	e01d      	b.n	8008f4e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8008f12:	6839      	ldr	r1, [r7, #0]
 8008f14:	6878      	ldr	r0, [r7, #4]
 8008f16:	f001 fca8 	bl	800a86a <USBD_CtlError>
            ret = USBD_FAIL;
 8008f1a:	2303      	movs	r3, #3
 8008f1c:	75fb      	strb	r3, [r7, #23]
          break;
 8008f1e:	e016      	b.n	8008f4e <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008f26:	b2db      	uxtb	r3, r3
 8008f28:	2b03      	cmp	r3, #3
 8008f2a:	d00f      	beq.n	8008f4c <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8008f2c:	6839      	ldr	r1, [r7, #0]
 8008f2e:	6878      	ldr	r0, [r7, #4]
 8008f30:	f001 fc9b 	bl	800a86a <USBD_CtlError>
            ret = USBD_FAIL;
 8008f34:	2303      	movs	r3, #3
 8008f36:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8008f38:	e008      	b.n	8008f4c <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8008f3a:	6839      	ldr	r1, [r7, #0]
 8008f3c:	6878      	ldr	r0, [r7, #4]
 8008f3e:	f001 fc94 	bl	800a86a <USBD_CtlError>
          ret = USBD_FAIL;
 8008f42:	2303      	movs	r3, #3
 8008f44:	75fb      	strb	r3, [r7, #23]
          break;
 8008f46:	e002      	b.n	8008f4e <USBD_CDC_Setup+0x19e>
          break;
 8008f48:	bf00      	nop
 8008f4a:	e008      	b.n	8008f5e <USBD_CDC_Setup+0x1ae>
          break;
 8008f4c:	bf00      	nop
      }
      break;
 8008f4e:	e006      	b.n	8008f5e <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8008f50:	6839      	ldr	r1, [r7, #0]
 8008f52:	6878      	ldr	r0, [r7, #4]
 8008f54:	f001 fc89 	bl	800a86a <USBD_CtlError>
      ret = USBD_FAIL;
 8008f58:	2303      	movs	r3, #3
 8008f5a:	75fb      	strb	r3, [r7, #23]
      break;
 8008f5c:	bf00      	nop
  }

  return (uint8_t)ret;
 8008f5e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008f60:	4618      	mov	r0, r3
 8008f62:	3718      	adds	r7, #24
 8008f64:	46bd      	mov	sp, r7
 8008f66:	bd80      	pop	{r7, pc}

08008f68 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008f68:	b580      	push	{r7, lr}
 8008f6a:	b084      	sub	sp, #16
 8008f6c:	af00      	add	r7, sp, #0
 8008f6e:	6078      	str	r0, [r7, #4]
 8008f70:	460b      	mov	r3, r1
 8008f72:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008f7a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	32b0      	adds	r2, #176	; 0xb0
 8008f86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	d101      	bne.n	8008f92 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8008f8e:	2303      	movs	r3, #3
 8008f90:	e065      	b.n	800905e <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	32b0      	adds	r2, #176	; 0xb0
 8008f9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008fa0:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8008fa2:	78fb      	ldrb	r3, [r7, #3]
 8008fa4:	f003 020f 	and.w	r2, r3, #15
 8008fa8:	6879      	ldr	r1, [r7, #4]
 8008faa:	4613      	mov	r3, r2
 8008fac:	009b      	lsls	r3, r3, #2
 8008fae:	4413      	add	r3, r2
 8008fb0:	009b      	lsls	r3, r3, #2
 8008fb2:	440b      	add	r3, r1
 8008fb4:	3318      	adds	r3, #24
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	d02f      	beq.n	800901c <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8008fbc:	78fb      	ldrb	r3, [r7, #3]
 8008fbe:	f003 020f 	and.w	r2, r3, #15
 8008fc2:	6879      	ldr	r1, [r7, #4]
 8008fc4:	4613      	mov	r3, r2
 8008fc6:	009b      	lsls	r3, r3, #2
 8008fc8:	4413      	add	r3, r2
 8008fca:	009b      	lsls	r3, r3, #2
 8008fcc:	440b      	add	r3, r1
 8008fce:	3318      	adds	r3, #24
 8008fd0:	681a      	ldr	r2, [r3, #0]
 8008fd2:	78fb      	ldrb	r3, [r7, #3]
 8008fd4:	f003 010f 	and.w	r1, r3, #15
 8008fd8:	68f8      	ldr	r0, [r7, #12]
 8008fda:	460b      	mov	r3, r1
 8008fdc:	00db      	lsls	r3, r3, #3
 8008fde:	440b      	add	r3, r1
 8008fe0:	009b      	lsls	r3, r3, #2
 8008fe2:	4403      	add	r3, r0
 8008fe4:	3348      	adds	r3, #72	; 0x48
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	fbb2 f1f3 	udiv	r1, r2, r3
 8008fec:	fb01 f303 	mul.w	r3, r1, r3
 8008ff0:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8008ff2:	2b00      	cmp	r3, #0
 8008ff4:	d112      	bne.n	800901c <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8008ff6:	78fb      	ldrb	r3, [r7, #3]
 8008ff8:	f003 020f 	and.w	r2, r3, #15
 8008ffc:	6879      	ldr	r1, [r7, #4]
 8008ffe:	4613      	mov	r3, r2
 8009000:	009b      	lsls	r3, r3, #2
 8009002:	4413      	add	r3, r2
 8009004:	009b      	lsls	r3, r3, #2
 8009006:	440b      	add	r3, r1
 8009008:	3318      	adds	r3, #24
 800900a:	2200      	movs	r2, #0
 800900c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800900e:	78f9      	ldrb	r1, [r7, #3]
 8009010:	2300      	movs	r3, #0
 8009012:	2200      	movs	r2, #0
 8009014:	6878      	ldr	r0, [r7, #4]
 8009016:	f002 f9c6 	bl	800b3a6 <USBD_LL_Transmit>
 800901a:	e01f      	b.n	800905c <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800901c:	68bb      	ldr	r3, [r7, #8]
 800901e:	2200      	movs	r2, #0
 8009020:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800902a:	687a      	ldr	r2, [r7, #4]
 800902c:	33b0      	adds	r3, #176	; 0xb0
 800902e:	009b      	lsls	r3, r3, #2
 8009030:	4413      	add	r3, r2
 8009032:	685b      	ldr	r3, [r3, #4]
 8009034:	691b      	ldr	r3, [r3, #16]
 8009036:	2b00      	cmp	r3, #0
 8009038:	d010      	beq.n	800905c <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009040:	687a      	ldr	r2, [r7, #4]
 8009042:	33b0      	adds	r3, #176	; 0xb0
 8009044:	009b      	lsls	r3, r3, #2
 8009046:	4413      	add	r3, r2
 8009048:	685b      	ldr	r3, [r3, #4]
 800904a:	691b      	ldr	r3, [r3, #16]
 800904c:	68ba      	ldr	r2, [r7, #8]
 800904e:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8009052:	68ba      	ldr	r2, [r7, #8]
 8009054:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8009058:	78fa      	ldrb	r2, [r7, #3]
 800905a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800905c:	2300      	movs	r3, #0
}
 800905e:	4618      	mov	r0, r3
 8009060:	3710      	adds	r7, #16
 8009062:	46bd      	mov	sp, r7
 8009064:	bd80      	pop	{r7, pc}

08009066 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009066:	b580      	push	{r7, lr}
 8009068:	b084      	sub	sp, #16
 800906a:	af00      	add	r7, sp, #0
 800906c:	6078      	str	r0, [r7, #4]
 800906e:	460b      	mov	r3, r1
 8009070:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	32b0      	adds	r2, #176	; 0xb0
 800907c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009080:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	32b0      	adds	r2, #176	; 0xb0
 800908c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009090:	2b00      	cmp	r3, #0
 8009092:	d101      	bne.n	8009098 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8009094:	2303      	movs	r3, #3
 8009096:	e01a      	b.n	80090ce <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8009098:	78fb      	ldrb	r3, [r7, #3]
 800909a:	4619      	mov	r1, r3
 800909c:	6878      	ldr	r0, [r7, #4]
 800909e:	f002 f9c4 	bl	800b42a <USBD_LL_GetRxDataSize>
 80090a2:	4602      	mov	r2, r0
 80090a4:	68fb      	ldr	r3, [r7, #12]
 80090a6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80090b0:	687a      	ldr	r2, [r7, #4]
 80090b2:	33b0      	adds	r3, #176	; 0xb0
 80090b4:	009b      	lsls	r3, r3, #2
 80090b6:	4413      	add	r3, r2
 80090b8:	685b      	ldr	r3, [r3, #4]
 80090ba:	68db      	ldr	r3, [r3, #12]
 80090bc:	68fa      	ldr	r2, [r7, #12]
 80090be:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80090c2:	68fa      	ldr	r2, [r7, #12]
 80090c4:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80090c8:	4611      	mov	r1, r2
 80090ca:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80090cc:	2300      	movs	r3, #0
}
 80090ce:	4618      	mov	r0, r3
 80090d0:	3710      	adds	r7, #16
 80090d2:	46bd      	mov	sp, r7
 80090d4:	bd80      	pop	{r7, pc}

080090d6 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80090d6:	b580      	push	{r7, lr}
 80090d8:	b084      	sub	sp, #16
 80090da:	af00      	add	r7, sp, #0
 80090dc:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	32b0      	adds	r2, #176	; 0xb0
 80090e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80090ec:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80090ee:	68fb      	ldr	r3, [r7, #12]
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	d101      	bne.n	80090f8 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80090f4:	2303      	movs	r3, #3
 80090f6:	e025      	b.n	8009144 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80090fe:	687a      	ldr	r2, [r7, #4]
 8009100:	33b0      	adds	r3, #176	; 0xb0
 8009102:	009b      	lsls	r3, r3, #2
 8009104:	4413      	add	r3, r2
 8009106:	685b      	ldr	r3, [r3, #4]
 8009108:	2b00      	cmp	r3, #0
 800910a:	d01a      	beq.n	8009142 <USBD_CDC_EP0_RxReady+0x6c>
 800910c:	68fb      	ldr	r3, [r7, #12]
 800910e:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8009112:	2bff      	cmp	r3, #255	; 0xff
 8009114:	d015      	beq.n	8009142 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800911c:	687a      	ldr	r2, [r7, #4]
 800911e:	33b0      	adds	r3, #176	; 0xb0
 8009120:	009b      	lsls	r3, r3, #2
 8009122:	4413      	add	r3, r2
 8009124:	685b      	ldr	r3, [r3, #4]
 8009126:	689b      	ldr	r3, [r3, #8]
 8009128:	68fa      	ldr	r2, [r7, #12]
 800912a:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 800912e:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8009130:	68fa      	ldr	r2, [r7, #12]
 8009132:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8009136:	b292      	uxth	r2, r2
 8009138:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800913a:	68fb      	ldr	r3, [r7, #12]
 800913c:	22ff      	movs	r2, #255	; 0xff
 800913e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8009142:	2300      	movs	r3, #0
}
 8009144:	4618      	mov	r0, r3
 8009146:	3710      	adds	r7, #16
 8009148:	46bd      	mov	sp, r7
 800914a:	bd80      	pop	{r7, pc}

0800914c <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800914c:	b580      	push	{r7, lr}
 800914e:	b086      	sub	sp, #24
 8009150:	af00      	add	r7, sp, #0
 8009152:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8009154:	2182      	movs	r1, #130	; 0x82
 8009156:	4818      	ldr	r0, [pc, #96]	; (80091b8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8009158:	f000 fd4f 	bl	8009bfa <USBD_GetEpDesc>
 800915c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800915e:	2101      	movs	r1, #1
 8009160:	4815      	ldr	r0, [pc, #84]	; (80091b8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8009162:	f000 fd4a 	bl	8009bfa <USBD_GetEpDesc>
 8009166:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8009168:	2181      	movs	r1, #129	; 0x81
 800916a:	4813      	ldr	r0, [pc, #76]	; (80091b8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800916c:	f000 fd45 	bl	8009bfa <USBD_GetEpDesc>
 8009170:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8009172:	697b      	ldr	r3, [r7, #20]
 8009174:	2b00      	cmp	r3, #0
 8009176:	d002      	beq.n	800917e <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8009178:	697b      	ldr	r3, [r7, #20]
 800917a:	2210      	movs	r2, #16
 800917c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800917e:	693b      	ldr	r3, [r7, #16]
 8009180:	2b00      	cmp	r3, #0
 8009182:	d006      	beq.n	8009192 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009184:	693b      	ldr	r3, [r7, #16]
 8009186:	2200      	movs	r2, #0
 8009188:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800918c:	711a      	strb	r2, [r3, #4]
 800918e:	2200      	movs	r2, #0
 8009190:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8009192:	68fb      	ldr	r3, [r7, #12]
 8009194:	2b00      	cmp	r3, #0
 8009196:	d006      	beq.n	80091a6 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009198:	68fb      	ldr	r3, [r7, #12]
 800919a:	2200      	movs	r2, #0
 800919c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80091a0:	711a      	strb	r2, [r3, #4]
 80091a2:	2200      	movs	r2, #0
 80091a4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	2243      	movs	r2, #67	; 0x43
 80091aa:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80091ac:	4b02      	ldr	r3, [pc, #8]	; (80091b8 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 80091ae:	4618      	mov	r0, r3
 80091b0:	3718      	adds	r7, #24
 80091b2:	46bd      	mov	sp, r7
 80091b4:	bd80      	pop	{r7, pc}
 80091b6:	bf00      	nop
 80091b8:	20000060 	.word	0x20000060

080091bc <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80091bc:	b580      	push	{r7, lr}
 80091be:	b086      	sub	sp, #24
 80091c0:	af00      	add	r7, sp, #0
 80091c2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80091c4:	2182      	movs	r1, #130	; 0x82
 80091c6:	4818      	ldr	r0, [pc, #96]	; (8009228 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80091c8:	f000 fd17 	bl	8009bfa <USBD_GetEpDesc>
 80091cc:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80091ce:	2101      	movs	r1, #1
 80091d0:	4815      	ldr	r0, [pc, #84]	; (8009228 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80091d2:	f000 fd12 	bl	8009bfa <USBD_GetEpDesc>
 80091d6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80091d8:	2181      	movs	r1, #129	; 0x81
 80091da:	4813      	ldr	r0, [pc, #76]	; (8009228 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80091dc:	f000 fd0d 	bl	8009bfa <USBD_GetEpDesc>
 80091e0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80091e2:	697b      	ldr	r3, [r7, #20]
 80091e4:	2b00      	cmp	r3, #0
 80091e6:	d002      	beq.n	80091ee <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 80091e8:	697b      	ldr	r3, [r7, #20]
 80091ea:	2210      	movs	r2, #16
 80091ec:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80091ee:	693b      	ldr	r3, [r7, #16]
 80091f0:	2b00      	cmp	r3, #0
 80091f2:	d006      	beq.n	8009202 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80091f4:	693b      	ldr	r3, [r7, #16]
 80091f6:	2200      	movs	r2, #0
 80091f8:	711a      	strb	r2, [r3, #4]
 80091fa:	2200      	movs	r2, #0
 80091fc:	f042 0202 	orr.w	r2, r2, #2
 8009200:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8009202:	68fb      	ldr	r3, [r7, #12]
 8009204:	2b00      	cmp	r3, #0
 8009206:	d006      	beq.n	8009216 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8009208:	68fb      	ldr	r3, [r7, #12]
 800920a:	2200      	movs	r2, #0
 800920c:	711a      	strb	r2, [r3, #4]
 800920e:	2200      	movs	r2, #0
 8009210:	f042 0202 	orr.w	r2, r2, #2
 8009214:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	2243      	movs	r2, #67	; 0x43
 800921a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800921c:	4b02      	ldr	r3, [pc, #8]	; (8009228 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800921e:	4618      	mov	r0, r3
 8009220:	3718      	adds	r7, #24
 8009222:	46bd      	mov	sp, r7
 8009224:	bd80      	pop	{r7, pc}
 8009226:	bf00      	nop
 8009228:	20000060 	.word	0x20000060

0800922c <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800922c:	b580      	push	{r7, lr}
 800922e:	b086      	sub	sp, #24
 8009230:	af00      	add	r7, sp, #0
 8009232:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8009234:	2182      	movs	r1, #130	; 0x82
 8009236:	4818      	ldr	r0, [pc, #96]	; (8009298 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8009238:	f000 fcdf 	bl	8009bfa <USBD_GetEpDesc>
 800923c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800923e:	2101      	movs	r1, #1
 8009240:	4815      	ldr	r0, [pc, #84]	; (8009298 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8009242:	f000 fcda 	bl	8009bfa <USBD_GetEpDesc>
 8009246:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8009248:	2181      	movs	r1, #129	; 0x81
 800924a:	4813      	ldr	r0, [pc, #76]	; (8009298 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800924c:	f000 fcd5 	bl	8009bfa <USBD_GetEpDesc>
 8009250:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8009252:	697b      	ldr	r3, [r7, #20]
 8009254:	2b00      	cmp	r3, #0
 8009256:	d002      	beq.n	800925e <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8009258:	697b      	ldr	r3, [r7, #20]
 800925a:	2210      	movs	r2, #16
 800925c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800925e:	693b      	ldr	r3, [r7, #16]
 8009260:	2b00      	cmp	r3, #0
 8009262:	d006      	beq.n	8009272 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009264:	693b      	ldr	r3, [r7, #16]
 8009266:	2200      	movs	r2, #0
 8009268:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800926c:	711a      	strb	r2, [r3, #4]
 800926e:	2200      	movs	r2, #0
 8009270:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8009272:	68fb      	ldr	r3, [r7, #12]
 8009274:	2b00      	cmp	r3, #0
 8009276:	d006      	beq.n	8009286 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009278:	68fb      	ldr	r3, [r7, #12]
 800927a:	2200      	movs	r2, #0
 800927c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009280:	711a      	strb	r2, [r3, #4]
 8009282:	2200      	movs	r2, #0
 8009284:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	2243      	movs	r2, #67	; 0x43
 800928a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800928c:	4b02      	ldr	r3, [pc, #8]	; (8009298 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800928e:	4618      	mov	r0, r3
 8009290:	3718      	adds	r7, #24
 8009292:	46bd      	mov	sp, r7
 8009294:	bd80      	pop	{r7, pc}
 8009296:	bf00      	nop
 8009298:	20000060 	.word	0x20000060

0800929c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800929c:	b480      	push	{r7}
 800929e:	b083      	sub	sp, #12
 80092a0:	af00      	add	r7, sp, #0
 80092a2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	220a      	movs	r2, #10
 80092a8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80092aa:	4b03      	ldr	r3, [pc, #12]	; (80092b8 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80092ac:	4618      	mov	r0, r3
 80092ae:	370c      	adds	r7, #12
 80092b0:	46bd      	mov	sp, r7
 80092b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092b6:	4770      	bx	lr
 80092b8:	2000001c 	.word	0x2000001c

080092bc <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80092bc:	b480      	push	{r7}
 80092be:	b083      	sub	sp, #12
 80092c0:	af00      	add	r7, sp, #0
 80092c2:	6078      	str	r0, [r7, #4]
 80092c4:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80092c6:	683b      	ldr	r3, [r7, #0]
 80092c8:	2b00      	cmp	r3, #0
 80092ca:	d101      	bne.n	80092d0 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80092cc:	2303      	movs	r3, #3
 80092ce:	e009      	b.n	80092e4 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80092d6:	687a      	ldr	r2, [r7, #4]
 80092d8:	33b0      	adds	r3, #176	; 0xb0
 80092da:	009b      	lsls	r3, r3, #2
 80092dc:	4413      	add	r3, r2
 80092de:	683a      	ldr	r2, [r7, #0]
 80092e0:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 80092e2:	2300      	movs	r3, #0
}
 80092e4:	4618      	mov	r0, r3
 80092e6:	370c      	adds	r7, #12
 80092e8:	46bd      	mov	sp, r7
 80092ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ee:	4770      	bx	lr

080092f0 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80092f0:	b480      	push	{r7}
 80092f2:	b087      	sub	sp, #28
 80092f4:	af00      	add	r7, sp, #0
 80092f6:	60f8      	str	r0, [r7, #12]
 80092f8:	60b9      	str	r1, [r7, #8]
 80092fa:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80092fc:	68fb      	ldr	r3, [r7, #12]
 80092fe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009302:	68fb      	ldr	r3, [r7, #12]
 8009304:	32b0      	adds	r2, #176	; 0xb0
 8009306:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800930a:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800930c:	697b      	ldr	r3, [r7, #20]
 800930e:	2b00      	cmp	r3, #0
 8009310:	d101      	bne.n	8009316 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8009312:	2303      	movs	r3, #3
 8009314:	e008      	b.n	8009328 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8009316:	697b      	ldr	r3, [r7, #20]
 8009318:	68ba      	ldr	r2, [r7, #8]
 800931a:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800931e:	697b      	ldr	r3, [r7, #20]
 8009320:	687a      	ldr	r2, [r7, #4]
 8009322:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8009326:	2300      	movs	r3, #0
}
 8009328:	4618      	mov	r0, r3
 800932a:	371c      	adds	r7, #28
 800932c:	46bd      	mov	sp, r7
 800932e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009332:	4770      	bx	lr

08009334 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8009334:	b480      	push	{r7}
 8009336:	b085      	sub	sp, #20
 8009338:	af00      	add	r7, sp, #0
 800933a:	6078      	str	r0, [r7, #4]
 800933c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	32b0      	adds	r2, #176	; 0xb0
 8009348:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800934c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800934e:	68fb      	ldr	r3, [r7, #12]
 8009350:	2b00      	cmp	r3, #0
 8009352:	d101      	bne.n	8009358 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8009354:	2303      	movs	r3, #3
 8009356:	e004      	b.n	8009362 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8009358:	68fb      	ldr	r3, [r7, #12]
 800935a:	683a      	ldr	r2, [r7, #0]
 800935c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8009360:	2300      	movs	r3, #0
}
 8009362:	4618      	mov	r0, r3
 8009364:	3714      	adds	r7, #20
 8009366:	46bd      	mov	sp, r7
 8009368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800936c:	4770      	bx	lr
	...

08009370 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8009370:	b580      	push	{r7, lr}
 8009372:	b084      	sub	sp, #16
 8009374:	af00      	add	r7, sp, #0
 8009376:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	32b0      	adds	r2, #176	; 0xb0
 8009382:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009386:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8009388:	2301      	movs	r3, #1
 800938a:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	32b0      	adds	r2, #176	; 0xb0
 8009396:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800939a:	2b00      	cmp	r3, #0
 800939c:	d101      	bne.n	80093a2 <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800939e:	2303      	movs	r3, #3
 80093a0:	e025      	b.n	80093ee <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 80093a2:	68bb      	ldr	r3, [r7, #8]
 80093a4:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80093a8:	2b00      	cmp	r3, #0
 80093aa:	d11f      	bne.n	80093ec <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 80093ac:	68bb      	ldr	r3, [r7, #8]
 80093ae:	2201      	movs	r2, #1
 80093b0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 80093b4:	4b10      	ldr	r3, [pc, #64]	; (80093f8 <USBD_CDC_TransmitPacket+0x88>)
 80093b6:	781b      	ldrb	r3, [r3, #0]
 80093b8:	f003 020f 	and.w	r2, r3, #15
 80093bc:	68bb      	ldr	r3, [r7, #8]
 80093be:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 80093c2:	6878      	ldr	r0, [r7, #4]
 80093c4:	4613      	mov	r3, r2
 80093c6:	009b      	lsls	r3, r3, #2
 80093c8:	4413      	add	r3, r2
 80093ca:	009b      	lsls	r3, r3, #2
 80093cc:	4403      	add	r3, r0
 80093ce:	3318      	adds	r3, #24
 80093d0:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 80093d2:	4b09      	ldr	r3, [pc, #36]	; (80093f8 <USBD_CDC_TransmitPacket+0x88>)
 80093d4:	7819      	ldrb	r1, [r3, #0]
 80093d6:	68bb      	ldr	r3, [r7, #8]
 80093d8:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 80093dc:	68bb      	ldr	r3, [r7, #8]
 80093de:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80093e2:	6878      	ldr	r0, [r7, #4]
 80093e4:	f001 ffdf 	bl	800b3a6 <USBD_LL_Transmit>

    ret = USBD_OK;
 80093e8:	2300      	movs	r3, #0
 80093ea:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 80093ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80093ee:	4618      	mov	r0, r3
 80093f0:	3710      	adds	r7, #16
 80093f2:	46bd      	mov	sp, r7
 80093f4:	bd80      	pop	{r7, pc}
 80093f6:	bf00      	nop
 80093f8:	200000a3 	.word	0x200000a3

080093fc <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80093fc:	b580      	push	{r7, lr}
 80093fe:	b084      	sub	sp, #16
 8009400:	af00      	add	r7, sp, #0
 8009402:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	32b0      	adds	r2, #176	; 0xb0
 800940e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009412:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	32b0      	adds	r2, #176	; 0xb0
 800941e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009422:	2b00      	cmp	r3, #0
 8009424:	d101      	bne.n	800942a <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8009426:	2303      	movs	r3, #3
 8009428:	e018      	b.n	800945c <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	7c1b      	ldrb	r3, [r3, #16]
 800942e:	2b00      	cmp	r3, #0
 8009430:	d10a      	bne.n	8009448 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009432:	4b0c      	ldr	r3, [pc, #48]	; (8009464 <USBD_CDC_ReceivePacket+0x68>)
 8009434:	7819      	ldrb	r1, [r3, #0]
 8009436:	68fb      	ldr	r3, [r7, #12]
 8009438:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800943c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009440:	6878      	ldr	r0, [r7, #4]
 8009442:	f001 ffd1 	bl	800b3e8 <USBD_LL_PrepareReceive>
 8009446:	e008      	b.n	800945a <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009448:	4b06      	ldr	r3, [pc, #24]	; (8009464 <USBD_CDC_ReceivePacket+0x68>)
 800944a:	7819      	ldrb	r1, [r3, #0]
 800944c:	68fb      	ldr	r3, [r7, #12]
 800944e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009452:	2340      	movs	r3, #64	; 0x40
 8009454:	6878      	ldr	r0, [r7, #4]
 8009456:	f001 ffc7 	bl	800b3e8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800945a:	2300      	movs	r3, #0
}
 800945c:	4618      	mov	r0, r3
 800945e:	3710      	adds	r7, #16
 8009460:	46bd      	mov	sp, r7
 8009462:	bd80      	pop	{r7, pc}
 8009464:	200000a4 	.word	0x200000a4

08009468 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8009468:	b580      	push	{r7, lr}
 800946a:	b086      	sub	sp, #24
 800946c:	af00      	add	r7, sp, #0
 800946e:	60f8      	str	r0, [r7, #12]
 8009470:	60b9      	str	r1, [r7, #8]
 8009472:	4613      	mov	r3, r2
 8009474:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8009476:	68fb      	ldr	r3, [r7, #12]
 8009478:	2b00      	cmp	r3, #0
 800947a:	d101      	bne.n	8009480 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800947c:	2303      	movs	r3, #3
 800947e:	e01f      	b.n	80094c0 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8009480:	68fb      	ldr	r3, [r7, #12]
 8009482:	2200      	movs	r2, #0
 8009484:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8009488:	68fb      	ldr	r3, [r7, #12]
 800948a:	2200      	movs	r2, #0
 800948c:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8009490:	68fb      	ldr	r3, [r7, #12]
 8009492:	2200      	movs	r2, #0
 8009494:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8009498:	68bb      	ldr	r3, [r7, #8]
 800949a:	2b00      	cmp	r3, #0
 800949c:	d003      	beq.n	80094a6 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800949e:	68fb      	ldr	r3, [r7, #12]
 80094a0:	68ba      	ldr	r2, [r7, #8]
 80094a2:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80094a6:	68fb      	ldr	r3, [r7, #12]
 80094a8:	2201      	movs	r2, #1
 80094aa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80094ae:	68fb      	ldr	r3, [r7, #12]
 80094b0:	79fa      	ldrb	r2, [r7, #7]
 80094b2:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80094b4:	68f8      	ldr	r0, [r7, #12]
 80094b6:	f001 fe3b 	bl	800b130 <USBD_LL_Init>
 80094ba:	4603      	mov	r3, r0
 80094bc:	75fb      	strb	r3, [r7, #23]

  return ret;
 80094be:	7dfb      	ldrb	r3, [r7, #23]
}
 80094c0:	4618      	mov	r0, r3
 80094c2:	3718      	adds	r7, #24
 80094c4:	46bd      	mov	sp, r7
 80094c6:	bd80      	pop	{r7, pc}

080094c8 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80094c8:	b580      	push	{r7, lr}
 80094ca:	b084      	sub	sp, #16
 80094cc:	af00      	add	r7, sp, #0
 80094ce:	6078      	str	r0, [r7, #4]
 80094d0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80094d2:	2300      	movs	r3, #0
 80094d4:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80094d6:	683b      	ldr	r3, [r7, #0]
 80094d8:	2b00      	cmp	r3, #0
 80094da:	d101      	bne.n	80094e0 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80094dc:	2303      	movs	r3, #3
 80094de:	e025      	b.n	800952c <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	683a      	ldr	r2, [r7, #0]
 80094e4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	32ae      	adds	r2, #174	; 0xae
 80094f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80094f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094f8:	2b00      	cmp	r3, #0
 80094fa:	d00f      	beq.n	800951c <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	32ae      	adds	r2, #174	; 0xae
 8009506:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800950a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800950c:	f107 020e 	add.w	r2, r7, #14
 8009510:	4610      	mov	r0, r2
 8009512:	4798      	blx	r3
 8009514:	4602      	mov	r2, r0
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8009522:	1c5a      	adds	r2, r3, #1
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800952a:	2300      	movs	r3, #0
}
 800952c:	4618      	mov	r0, r3
 800952e:	3710      	adds	r7, #16
 8009530:	46bd      	mov	sp, r7
 8009532:	bd80      	pop	{r7, pc}

08009534 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8009534:	b580      	push	{r7, lr}
 8009536:	b082      	sub	sp, #8
 8009538:	af00      	add	r7, sp, #0
 800953a:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800953c:	6878      	ldr	r0, [r7, #4]
 800953e:	f001 fe49 	bl	800b1d4 <USBD_LL_Start>
 8009542:	4603      	mov	r3, r0
}
 8009544:	4618      	mov	r0, r3
 8009546:	3708      	adds	r7, #8
 8009548:	46bd      	mov	sp, r7
 800954a:	bd80      	pop	{r7, pc}

0800954c <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800954c:	b480      	push	{r7}
 800954e:	b083      	sub	sp, #12
 8009550:	af00      	add	r7, sp, #0
 8009552:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009554:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8009556:	4618      	mov	r0, r3
 8009558:	370c      	adds	r7, #12
 800955a:	46bd      	mov	sp, r7
 800955c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009560:	4770      	bx	lr

08009562 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009562:	b580      	push	{r7, lr}
 8009564:	b084      	sub	sp, #16
 8009566:	af00      	add	r7, sp, #0
 8009568:	6078      	str	r0, [r7, #4]
 800956a:	460b      	mov	r3, r1
 800956c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800956e:	2300      	movs	r3, #0
 8009570:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009578:	2b00      	cmp	r3, #0
 800957a:	d009      	beq.n	8009590 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009582:	681b      	ldr	r3, [r3, #0]
 8009584:	78fa      	ldrb	r2, [r7, #3]
 8009586:	4611      	mov	r1, r2
 8009588:	6878      	ldr	r0, [r7, #4]
 800958a:	4798      	blx	r3
 800958c:	4603      	mov	r3, r0
 800958e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8009590:	7bfb      	ldrb	r3, [r7, #15]
}
 8009592:	4618      	mov	r0, r3
 8009594:	3710      	adds	r7, #16
 8009596:	46bd      	mov	sp, r7
 8009598:	bd80      	pop	{r7, pc}

0800959a <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800959a:	b580      	push	{r7, lr}
 800959c:	b084      	sub	sp, #16
 800959e:	af00      	add	r7, sp, #0
 80095a0:	6078      	str	r0, [r7, #4]
 80095a2:	460b      	mov	r3, r1
 80095a4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80095a6:	2300      	movs	r3, #0
 80095a8:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80095b0:	685b      	ldr	r3, [r3, #4]
 80095b2:	78fa      	ldrb	r2, [r7, #3]
 80095b4:	4611      	mov	r1, r2
 80095b6:	6878      	ldr	r0, [r7, #4]
 80095b8:	4798      	blx	r3
 80095ba:	4603      	mov	r3, r0
 80095bc:	2b00      	cmp	r3, #0
 80095be:	d001      	beq.n	80095c4 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 80095c0:	2303      	movs	r3, #3
 80095c2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80095c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80095c6:	4618      	mov	r0, r3
 80095c8:	3710      	adds	r7, #16
 80095ca:	46bd      	mov	sp, r7
 80095cc:	bd80      	pop	{r7, pc}

080095ce <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80095ce:	b580      	push	{r7, lr}
 80095d0:	b084      	sub	sp, #16
 80095d2:	af00      	add	r7, sp, #0
 80095d4:	6078      	str	r0, [r7, #4]
 80095d6:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80095de:	6839      	ldr	r1, [r7, #0]
 80095e0:	4618      	mov	r0, r3
 80095e2:	f001 f908 	bl	800a7f6 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	2201      	movs	r2, #1
 80095ea:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80095f4:	461a      	mov	r2, r3
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8009602:	f003 031f 	and.w	r3, r3, #31
 8009606:	2b02      	cmp	r3, #2
 8009608:	d01a      	beq.n	8009640 <USBD_LL_SetupStage+0x72>
 800960a:	2b02      	cmp	r3, #2
 800960c:	d822      	bhi.n	8009654 <USBD_LL_SetupStage+0x86>
 800960e:	2b00      	cmp	r3, #0
 8009610:	d002      	beq.n	8009618 <USBD_LL_SetupStage+0x4a>
 8009612:	2b01      	cmp	r3, #1
 8009614:	d00a      	beq.n	800962c <USBD_LL_SetupStage+0x5e>
 8009616:	e01d      	b.n	8009654 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800961e:	4619      	mov	r1, r3
 8009620:	6878      	ldr	r0, [r7, #4]
 8009622:	f000 fb5f 	bl	8009ce4 <USBD_StdDevReq>
 8009626:	4603      	mov	r3, r0
 8009628:	73fb      	strb	r3, [r7, #15]
      break;
 800962a:	e020      	b.n	800966e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009632:	4619      	mov	r1, r3
 8009634:	6878      	ldr	r0, [r7, #4]
 8009636:	f000 fbc7 	bl	8009dc8 <USBD_StdItfReq>
 800963a:	4603      	mov	r3, r0
 800963c:	73fb      	strb	r3, [r7, #15]
      break;
 800963e:	e016      	b.n	800966e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009646:	4619      	mov	r1, r3
 8009648:	6878      	ldr	r0, [r7, #4]
 800964a:	f000 fc29 	bl	8009ea0 <USBD_StdEPReq>
 800964e:	4603      	mov	r3, r0
 8009650:	73fb      	strb	r3, [r7, #15]
      break;
 8009652:	e00c      	b.n	800966e <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800965a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800965e:	b2db      	uxtb	r3, r3
 8009660:	4619      	mov	r1, r3
 8009662:	6878      	ldr	r0, [r7, #4]
 8009664:	f001 fe16 	bl	800b294 <USBD_LL_StallEP>
 8009668:	4603      	mov	r3, r0
 800966a:	73fb      	strb	r3, [r7, #15]
      break;
 800966c:	bf00      	nop
  }

  return ret;
 800966e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009670:	4618      	mov	r0, r3
 8009672:	3710      	adds	r7, #16
 8009674:	46bd      	mov	sp, r7
 8009676:	bd80      	pop	{r7, pc}

08009678 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8009678:	b580      	push	{r7, lr}
 800967a:	b086      	sub	sp, #24
 800967c:	af00      	add	r7, sp, #0
 800967e:	60f8      	str	r0, [r7, #12]
 8009680:	460b      	mov	r3, r1
 8009682:	607a      	str	r2, [r7, #4]
 8009684:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8009686:	2300      	movs	r3, #0
 8009688:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800968a:	7afb      	ldrb	r3, [r7, #11]
 800968c:	2b00      	cmp	r3, #0
 800968e:	d16e      	bne.n	800976e <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8009690:	68fb      	ldr	r3, [r7, #12]
 8009692:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8009696:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8009698:	68fb      	ldr	r3, [r7, #12]
 800969a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800969e:	2b03      	cmp	r3, #3
 80096a0:	f040 8098 	bne.w	80097d4 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 80096a4:	693b      	ldr	r3, [r7, #16]
 80096a6:	689a      	ldr	r2, [r3, #8]
 80096a8:	693b      	ldr	r3, [r7, #16]
 80096aa:	68db      	ldr	r3, [r3, #12]
 80096ac:	429a      	cmp	r2, r3
 80096ae:	d913      	bls.n	80096d8 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 80096b0:	693b      	ldr	r3, [r7, #16]
 80096b2:	689a      	ldr	r2, [r3, #8]
 80096b4:	693b      	ldr	r3, [r7, #16]
 80096b6:	68db      	ldr	r3, [r3, #12]
 80096b8:	1ad2      	subs	r2, r2, r3
 80096ba:	693b      	ldr	r3, [r7, #16]
 80096bc:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80096be:	693b      	ldr	r3, [r7, #16]
 80096c0:	68da      	ldr	r2, [r3, #12]
 80096c2:	693b      	ldr	r3, [r7, #16]
 80096c4:	689b      	ldr	r3, [r3, #8]
 80096c6:	4293      	cmp	r3, r2
 80096c8:	bf28      	it	cs
 80096ca:	4613      	movcs	r3, r2
 80096cc:	461a      	mov	r2, r3
 80096ce:	6879      	ldr	r1, [r7, #4]
 80096d0:	68f8      	ldr	r0, [r7, #12]
 80096d2:	f001 f984 	bl	800a9de <USBD_CtlContinueRx>
 80096d6:	e07d      	b.n	80097d4 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80096d8:	68fb      	ldr	r3, [r7, #12]
 80096da:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80096de:	f003 031f 	and.w	r3, r3, #31
 80096e2:	2b02      	cmp	r3, #2
 80096e4:	d014      	beq.n	8009710 <USBD_LL_DataOutStage+0x98>
 80096e6:	2b02      	cmp	r3, #2
 80096e8:	d81d      	bhi.n	8009726 <USBD_LL_DataOutStage+0xae>
 80096ea:	2b00      	cmp	r3, #0
 80096ec:	d002      	beq.n	80096f4 <USBD_LL_DataOutStage+0x7c>
 80096ee:	2b01      	cmp	r3, #1
 80096f0:	d003      	beq.n	80096fa <USBD_LL_DataOutStage+0x82>
 80096f2:	e018      	b.n	8009726 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 80096f4:	2300      	movs	r3, #0
 80096f6:	75bb      	strb	r3, [r7, #22]
            break;
 80096f8:	e018      	b.n	800972c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 80096fa:	68fb      	ldr	r3, [r7, #12]
 80096fc:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8009700:	b2db      	uxtb	r3, r3
 8009702:	4619      	mov	r1, r3
 8009704:	68f8      	ldr	r0, [r7, #12]
 8009706:	f000 fa5e 	bl	8009bc6 <USBD_CoreFindIF>
 800970a:	4603      	mov	r3, r0
 800970c:	75bb      	strb	r3, [r7, #22]
            break;
 800970e:	e00d      	b.n	800972c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8009710:	68fb      	ldr	r3, [r7, #12]
 8009712:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8009716:	b2db      	uxtb	r3, r3
 8009718:	4619      	mov	r1, r3
 800971a:	68f8      	ldr	r0, [r7, #12]
 800971c:	f000 fa60 	bl	8009be0 <USBD_CoreFindEP>
 8009720:	4603      	mov	r3, r0
 8009722:	75bb      	strb	r3, [r7, #22]
            break;
 8009724:	e002      	b.n	800972c <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8009726:	2300      	movs	r3, #0
 8009728:	75bb      	strb	r3, [r7, #22]
            break;
 800972a:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800972c:	7dbb      	ldrb	r3, [r7, #22]
 800972e:	2b00      	cmp	r3, #0
 8009730:	d119      	bne.n	8009766 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009732:	68fb      	ldr	r3, [r7, #12]
 8009734:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009738:	b2db      	uxtb	r3, r3
 800973a:	2b03      	cmp	r3, #3
 800973c:	d113      	bne.n	8009766 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800973e:	7dba      	ldrb	r2, [r7, #22]
 8009740:	68fb      	ldr	r3, [r7, #12]
 8009742:	32ae      	adds	r2, #174	; 0xae
 8009744:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009748:	691b      	ldr	r3, [r3, #16]
 800974a:	2b00      	cmp	r3, #0
 800974c:	d00b      	beq.n	8009766 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800974e:	7dba      	ldrb	r2, [r7, #22]
 8009750:	68fb      	ldr	r3, [r7, #12]
 8009752:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8009756:	7dba      	ldrb	r2, [r7, #22]
 8009758:	68fb      	ldr	r3, [r7, #12]
 800975a:	32ae      	adds	r2, #174	; 0xae
 800975c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009760:	691b      	ldr	r3, [r3, #16]
 8009762:	68f8      	ldr	r0, [r7, #12]
 8009764:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8009766:	68f8      	ldr	r0, [r7, #12]
 8009768:	f001 f94a 	bl	800aa00 <USBD_CtlSendStatus>
 800976c:	e032      	b.n	80097d4 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800976e:	7afb      	ldrb	r3, [r7, #11]
 8009770:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009774:	b2db      	uxtb	r3, r3
 8009776:	4619      	mov	r1, r3
 8009778:	68f8      	ldr	r0, [r7, #12]
 800977a:	f000 fa31 	bl	8009be0 <USBD_CoreFindEP>
 800977e:	4603      	mov	r3, r0
 8009780:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009782:	7dbb      	ldrb	r3, [r7, #22]
 8009784:	2bff      	cmp	r3, #255	; 0xff
 8009786:	d025      	beq.n	80097d4 <USBD_LL_DataOutStage+0x15c>
 8009788:	7dbb      	ldrb	r3, [r7, #22]
 800978a:	2b00      	cmp	r3, #0
 800978c:	d122      	bne.n	80097d4 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800978e:	68fb      	ldr	r3, [r7, #12]
 8009790:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009794:	b2db      	uxtb	r3, r3
 8009796:	2b03      	cmp	r3, #3
 8009798:	d117      	bne.n	80097ca <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800979a:	7dba      	ldrb	r2, [r7, #22]
 800979c:	68fb      	ldr	r3, [r7, #12]
 800979e:	32ae      	adds	r2, #174	; 0xae
 80097a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80097a4:	699b      	ldr	r3, [r3, #24]
 80097a6:	2b00      	cmp	r3, #0
 80097a8:	d00f      	beq.n	80097ca <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 80097aa:	7dba      	ldrb	r2, [r7, #22]
 80097ac:	68fb      	ldr	r3, [r7, #12]
 80097ae:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 80097b2:	7dba      	ldrb	r2, [r7, #22]
 80097b4:	68fb      	ldr	r3, [r7, #12]
 80097b6:	32ae      	adds	r2, #174	; 0xae
 80097b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80097bc:	699b      	ldr	r3, [r3, #24]
 80097be:	7afa      	ldrb	r2, [r7, #11]
 80097c0:	4611      	mov	r1, r2
 80097c2:	68f8      	ldr	r0, [r7, #12]
 80097c4:	4798      	blx	r3
 80097c6:	4603      	mov	r3, r0
 80097c8:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 80097ca:	7dfb      	ldrb	r3, [r7, #23]
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	d001      	beq.n	80097d4 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 80097d0:	7dfb      	ldrb	r3, [r7, #23]
 80097d2:	e000      	b.n	80097d6 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 80097d4:	2300      	movs	r3, #0
}
 80097d6:	4618      	mov	r0, r3
 80097d8:	3718      	adds	r7, #24
 80097da:	46bd      	mov	sp, r7
 80097dc:	bd80      	pop	{r7, pc}

080097de <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80097de:	b580      	push	{r7, lr}
 80097e0:	b086      	sub	sp, #24
 80097e2:	af00      	add	r7, sp, #0
 80097e4:	60f8      	str	r0, [r7, #12]
 80097e6:	460b      	mov	r3, r1
 80097e8:	607a      	str	r2, [r7, #4]
 80097ea:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 80097ec:	7afb      	ldrb	r3, [r7, #11]
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	d16f      	bne.n	80098d2 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 80097f2:	68fb      	ldr	r3, [r7, #12]
 80097f4:	3314      	adds	r3, #20
 80097f6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80097f8:	68fb      	ldr	r3, [r7, #12]
 80097fa:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80097fe:	2b02      	cmp	r3, #2
 8009800:	d15a      	bne.n	80098b8 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8009802:	693b      	ldr	r3, [r7, #16]
 8009804:	689a      	ldr	r2, [r3, #8]
 8009806:	693b      	ldr	r3, [r7, #16]
 8009808:	68db      	ldr	r3, [r3, #12]
 800980a:	429a      	cmp	r2, r3
 800980c:	d914      	bls.n	8009838 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800980e:	693b      	ldr	r3, [r7, #16]
 8009810:	689a      	ldr	r2, [r3, #8]
 8009812:	693b      	ldr	r3, [r7, #16]
 8009814:	68db      	ldr	r3, [r3, #12]
 8009816:	1ad2      	subs	r2, r2, r3
 8009818:	693b      	ldr	r3, [r7, #16]
 800981a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800981c:	693b      	ldr	r3, [r7, #16]
 800981e:	689b      	ldr	r3, [r3, #8]
 8009820:	461a      	mov	r2, r3
 8009822:	6879      	ldr	r1, [r7, #4]
 8009824:	68f8      	ldr	r0, [r7, #12]
 8009826:	f001 f8ac 	bl	800a982 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800982a:	2300      	movs	r3, #0
 800982c:	2200      	movs	r2, #0
 800982e:	2100      	movs	r1, #0
 8009830:	68f8      	ldr	r0, [r7, #12]
 8009832:	f001 fdd9 	bl	800b3e8 <USBD_LL_PrepareReceive>
 8009836:	e03f      	b.n	80098b8 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8009838:	693b      	ldr	r3, [r7, #16]
 800983a:	68da      	ldr	r2, [r3, #12]
 800983c:	693b      	ldr	r3, [r7, #16]
 800983e:	689b      	ldr	r3, [r3, #8]
 8009840:	429a      	cmp	r2, r3
 8009842:	d11c      	bne.n	800987e <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8009844:	693b      	ldr	r3, [r7, #16]
 8009846:	685a      	ldr	r2, [r3, #4]
 8009848:	693b      	ldr	r3, [r7, #16]
 800984a:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800984c:	429a      	cmp	r2, r3
 800984e:	d316      	bcc.n	800987e <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8009850:	693b      	ldr	r3, [r7, #16]
 8009852:	685a      	ldr	r2, [r3, #4]
 8009854:	68fb      	ldr	r3, [r7, #12]
 8009856:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800985a:	429a      	cmp	r2, r3
 800985c:	d20f      	bcs.n	800987e <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800985e:	2200      	movs	r2, #0
 8009860:	2100      	movs	r1, #0
 8009862:	68f8      	ldr	r0, [r7, #12]
 8009864:	f001 f88d 	bl	800a982 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8009868:	68fb      	ldr	r3, [r7, #12]
 800986a:	2200      	movs	r2, #0
 800986c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009870:	2300      	movs	r3, #0
 8009872:	2200      	movs	r2, #0
 8009874:	2100      	movs	r1, #0
 8009876:	68f8      	ldr	r0, [r7, #12]
 8009878:	f001 fdb6 	bl	800b3e8 <USBD_LL_PrepareReceive>
 800987c:	e01c      	b.n	80098b8 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800987e:	68fb      	ldr	r3, [r7, #12]
 8009880:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009884:	b2db      	uxtb	r3, r3
 8009886:	2b03      	cmp	r3, #3
 8009888:	d10f      	bne.n	80098aa <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800988a:	68fb      	ldr	r3, [r7, #12]
 800988c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009890:	68db      	ldr	r3, [r3, #12]
 8009892:	2b00      	cmp	r3, #0
 8009894:	d009      	beq.n	80098aa <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8009896:	68fb      	ldr	r3, [r7, #12]
 8009898:	2200      	movs	r2, #0
 800989a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800989e:	68fb      	ldr	r3, [r7, #12]
 80098a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80098a4:	68db      	ldr	r3, [r3, #12]
 80098a6:	68f8      	ldr	r0, [r7, #12]
 80098a8:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80098aa:	2180      	movs	r1, #128	; 0x80
 80098ac:	68f8      	ldr	r0, [r7, #12]
 80098ae:	f001 fcf1 	bl	800b294 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80098b2:	68f8      	ldr	r0, [r7, #12]
 80098b4:	f001 f8b7 	bl	800aa26 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 80098b8:	68fb      	ldr	r3, [r7, #12]
 80098ba:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80098be:	2b00      	cmp	r3, #0
 80098c0:	d03a      	beq.n	8009938 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 80098c2:	68f8      	ldr	r0, [r7, #12]
 80098c4:	f7ff fe42 	bl	800954c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80098c8:	68fb      	ldr	r3, [r7, #12]
 80098ca:	2200      	movs	r2, #0
 80098cc:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80098d0:	e032      	b.n	8009938 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 80098d2:	7afb      	ldrb	r3, [r7, #11]
 80098d4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80098d8:	b2db      	uxtb	r3, r3
 80098da:	4619      	mov	r1, r3
 80098dc:	68f8      	ldr	r0, [r7, #12]
 80098de:	f000 f97f 	bl	8009be0 <USBD_CoreFindEP>
 80098e2:	4603      	mov	r3, r0
 80098e4:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80098e6:	7dfb      	ldrb	r3, [r7, #23]
 80098e8:	2bff      	cmp	r3, #255	; 0xff
 80098ea:	d025      	beq.n	8009938 <USBD_LL_DataInStage+0x15a>
 80098ec:	7dfb      	ldrb	r3, [r7, #23]
 80098ee:	2b00      	cmp	r3, #0
 80098f0:	d122      	bne.n	8009938 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80098f2:	68fb      	ldr	r3, [r7, #12]
 80098f4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80098f8:	b2db      	uxtb	r3, r3
 80098fa:	2b03      	cmp	r3, #3
 80098fc:	d11c      	bne.n	8009938 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 80098fe:	7dfa      	ldrb	r2, [r7, #23]
 8009900:	68fb      	ldr	r3, [r7, #12]
 8009902:	32ae      	adds	r2, #174	; 0xae
 8009904:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009908:	695b      	ldr	r3, [r3, #20]
 800990a:	2b00      	cmp	r3, #0
 800990c:	d014      	beq.n	8009938 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800990e:	7dfa      	ldrb	r2, [r7, #23]
 8009910:	68fb      	ldr	r3, [r7, #12]
 8009912:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8009916:	7dfa      	ldrb	r2, [r7, #23]
 8009918:	68fb      	ldr	r3, [r7, #12]
 800991a:	32ae      	adds	r2, #174	; 0xae
 800991c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009920:	695b      	ldr	r3, [r3, #20]
 8009922:	7afa      	ldrb	r2, [r7, #11]
 8009924:	4611      	mov	r1, r2
 8009926:	68f8      	ldr	r0, [r7, #12]
 8009928:	4798      	blx	r3
 800992a:	4603      	mov	r3, r0
 800992c:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800992e:	7dbb      	ldrb	r3, [r7, #22]
 8009930:	2b00      	cmp	r3, #0
 8009932:	d001      	beq.n	8009938 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8009934:	7dbb      	ldrb	r3, [r7, #22]
 8009936:	e000      	b.n	800993a <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8009938:	2300      	movs	r3, #0
}
 800993a:	4618      	mov	r0, r3
 800993c:	3718      	adds	r7, #24
 800993e:	46bd      	mov	sp, r7
 8009940:	bd80      	pop	{r7, pc}

08009942 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8009942:	b580      	push	{r7, lr}
 8009944:	b084      	sub	sp, #16
 8009946:	af00      	add	r7, sp, #0
 8009948:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800994a:	2300      	movs	r3, #0
 800994c:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	2201      	movs	r2, #1
 8009952:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	2200      	movs	r2, #0
 800995a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	2200      	movs	r2, #0
 8009962:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	2200      	movs	r2, #0
 8009968:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	2200      	movs	r2, #0
 8009970:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800997a:	2b00      	cmp	r3, #0
 800997c:	d014      	beq.n	80099a8 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009984:	685b      	ldr	r3, [r3, #4]
 8009986:	2b00      	cmp	r3, #0
 8009988:	d00e      	beq.n	80099a8 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009990:	685b      	ldr	r3, [r3, #4]
 8009992:	687a      	ldr	r2, [r7, #4]
 8009994:	6852      	ldr	r2, [r2, #4]
 8009996:	b2d2      	uxtb	r2, r2
 8009998:	4611      	mov	r1, r2
 800999a:	6878      	ldr	r0, [r7, #4]
 800999c:	4798      	blx	r3
 800999e:	4603      	mov	r3, r0
 80099a0:	2b00      	cmp	r3, #0
 80099a2:	d001      	beq.n	80099a8 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 80099a4:	2303      	movs	r3, #3
 80099a6:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80099a8:	2340      	movs	r3, #64	; 0x40
 80099aa:	2200      	movs	r2, #0
 80099ac:	2100      	movs	r1, #0
 80099ae:	6878      	ldr	r0, [r7, #4]
 80099b0:	f001 fc2b 	bl	800b20a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	2201      	movs	r2, #1
 80099b8:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	2240      	movs	r2, #64	; 0x40
 80099c0:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80099c4:	2340      	movs	r3, #64	; 0x40
 80099c6:	2200      	movs	r2, #0
 80099c8:	2180      	movs	r1, #128	; 0x80
 80099ca:	6878      	ldr	r0, [r7, #4]
 80099cc:	f001 fc1d 	bl	800b20a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	2201      	movs	r2, #1
 80099d4:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	2240      	movs	r2, #64	; 0x40
 80099da:	621a      	str	r2, [r3, #32]

  return ret;
 80099dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80099de:	4618      	mov	r0, r3
 80099e0:	3710      	adds	r7, #16
 80099e2:	46bd      	mov	sp, r7
 80099e4:	bd80      	pop	{r7, pc}

080099e6 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80099e6:	b480      	push	{r7}
 80099e8:	b083      	sub	sp, #12
 80099ea:	af00      	add	r7, sp, #0
 80099ec:	6078      	str	r0, [r7, #4]
 80099ee:	460b      	mov	r3, r1
 80099f0:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	78fa      	ldrb	r2, [r7, #3]
 80099f6:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80099f8:	2300      	movs	r3, #0
}
 80099fa:	4618      	mov	r0, r3
 80099fc:	370c      	adds	r7, #12
 80099fe:	46bd      	mov	sp, r7
 8009a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a04:	4770      	bx	lr

08009a06 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8009a06:	b480      	push	{r7}
 8009a08:	b083      	sub	sp, #12
 8009a0a:	af00      	add	r7, sp, #0
 8009a0c:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009a14:	b2da      	uxtb	r2, r3
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	2204      	movs	r2, #4
 8009a20:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8009a24:	2300      	movs	r3, #0
}
 8009a26:	4618      	mov	r0, r3
 8009a28:	370c      	adds	r7, #12
 8009a2a:	46bd      	mov	sp, r7
 8009a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a30:	4770      	bx	lr

08009a32 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8009a32:	b480      	push	{r7}
 8009a34:	b083      	sub	sp, #12
 8009a36:	af00      	add	r7, sp, #0
 8009a38:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009a40:	b2db      	uxtb	r3, r3
 8009a42:	2b04      	cmp	r3, #4
 8009a44:	d106      	bne.n	8009a54 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8009a4c:	b2da      	uxtb	r2, r3
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8009a54:	2300      	movs	r3, #0
}
 8009a56:	4618      	mov	r0, r3
 8009a58:	370c      	adds	r7, #12
 8009a5a:	46bd      	mov	sp, r7
 8009a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a60:	4770      	bx	lr

08009a62 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8009a62:	b580      	push	{r7, lr}
 8009a64:	b082      	sub	sp, #8
 8009a66:	af00      	add	r7, sp, #0
 8009a68:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009a70:	b2db      	uxtb	r3, r3
 8009a72:	2b03      	cmp	r3, #3
 8009a74:	d110      	bne.n	8009a98 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009a7c:	2b00      	cmp	r3, #0
 8009a7e:	d00b      	beq.n	8009a98 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009a86:	69db      	ldr	r3, [r3, #28]
 8009a88:	2b00      	cmp	r3, #0
 8009a8a:	d005      	beq.n	8009a98 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009a92:	69db      	ldr	r3, [r3, #28]
 8009a94:	6878      	ldr	r0, [r7, #4]
 8009a96:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8009a98:	2300      	movs	r3, #0
}
 8009a9a:	4618      	mov	r0, r3
 8009a9c:	3708      	adds	r7, #8
 8009a9e:	46bd      	mov	sp, r7
 8009aa0:	bd80      	pop	{r7, pc}

08009aa2 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8009aa2:	b580      	push	{r7, lr}
 8009aa4:	b082      	sub	sp, #8
 8009aa6:	af00      	add	r7, sp, #0
 8009aa8:	6078      	str	r0, [r7, #4]
 8009aaa:	460b      	mov	r3, r1
 8009aac:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	32ae      	adds	r2, #174	; 0xae
 8009ab8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009abc:	2b00      	cmp	r3, #0
 8009abe:	d101      	bne.n	8009ac4 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8009ac0:	2303      	movs	r3, #3
 8009ac2:	e01c      	b.n	8009afe <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009aca:	b2db      	uxtb	r3, r3
 8009acc:	2b03      	cmp	r3, #3
 8009ace:	d115      	bne.n	8009afc <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	32ae      	adds	r2, #174	; 0xae
 8009ada:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009ade:	6a1b      	ldr	r3, [r3, #32]
 8009ae0:	2b00      	cmp	r3, #0
 8009ae2:	d00b      	beq.n	8009afc <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	32ae      	adds	r2, #174	; 0xae
 8009aee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009af2:	6a1b      	ldr	r3, [r3, #32]
 8009af4:	78fa      	ldrb	r2, [r7, #3]
 8009af6:	4611      	mov	r1, r2
 8009af8:	6878      	ldr	r0, [r7, #4]
 8009afa:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009afc:	2300      	movs	r3, #0
}
 8009afe:	4618      	mov	r0, r3
 8009b00:	3708      	adds	r7, #8
 8009b02:	46bd      	mov	sp, r7
 8009b04:	bd80      	pop	{r7, pc}

08009b06 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8009b06:	b580      	push	{r7, lr}
 8009b08:	b082      	sub	sp, #8
 8009b0a:	af00      	add	r7, sp, #0
 8009b0c:	6078      	str	r0, [r7, #4]
 8009b0e:	460b      	mov	r3, r1
 8009b10:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	32ae      	adds	r2, #174	; 0xae
 8009b1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009b20:	2b00      	cmp	r3, #0
 8009b22:	d101      	bne.n	8009b28 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8009b24:	2303      	movs	r3, #3
 8009b26:	e01c      	b.n	8009b62 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009b2e:	b2db      	uxtb	r3, r3
 8009b30:	2b03      	cmp	r3, #3
 8009b32:	d115      	bne.n	8009b60 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	32ae      	adds	r2, #174	; 0xae
 8009b3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009b42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b44:	2b00      	cmp	r3, #0
 8009b46:	d00b      	beq.n	8009b60 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	32ae      	adds	r2, #174	; 0xae
 8009b52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009b56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b58:	78fa      	ldrb	r2, [r7, #3]
 8009b5a:	4611      	mov	r1, r2
 8009b5c:	6878      	ldr	r0, [r7, #4]
 8009b5e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009b60:	2300      	movs	r3, #0
}
 8009b62:	4618      	mov	r0, r3
 8009b64:	3708      	adds	r7, #8
 8009b66:	46bd      	mov	sp, r7
 8009b68:	bd80      	pop	{r7, pc}

08009b6a <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8009b6a:	b480      	push	{r7}
 8009b6c:	b083      	sub	sp, #12
 8009b6e:	af00      	add	r7, sp, #0
 8009b70:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009b72:	2300      	movs	r3, #0
}
 8009b74:	4618      	mov	r0, r3
 8009b76:	370c      	adds	r7, #12
 8009b78:	46bd      	mov	sp, r7
 8009b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b7e:	4770      	bx	lr

08009b80 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8009b80:	b580      	push	{r7, lr}
 8009b82:	b084      	sub	sp, #16
 8009b84:	af00      	add	r7, sp, #0
 8009b86:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8009b88:	2300      	movs	r3, #0
 8009b8a:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	2201      	movs	r2, #1
 8009b90:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009b9a:	2b00      	cmp	r3, #0
 8009b9c:	d00e      	beq.n	8009bbc <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009ba4:	685b      	ldr	r3, [r3, #4]
 8009ba6:	687a      	ldr	r2, [r7, #4]
 8009ba8:	6852      	ldr	r2, [r2, #4]
 8009baa:	b2d2      	uxtb	r2, r2
 8009bac:	4611      	mov	r1, r2
 8009bae:	6878      	ldr	r0, [r7, #4]
 8009bb0:	4798      	blx	r3
 8009bb2:	4603      	mov	r3, r0
 8009bb4:	2b00      	cmp	r3, #0
 8009bb6:	d001      	beq.n	8009bbc <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8009bb8:	2303      	movs	r3, #3
 8009bba:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8009bbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8009bbe:	4618      	mov	r0, r3
 8009bc0:	3710      	adds	r7, #16
 8009bc2:	46bd      	mov	sp, r7
 8009bc4:	bd80      	pop	{r7, pc}

08009bc6 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8009bc6:	b480      	push	{r7}
 8009bc8:	b083      	sub	sp, #12
 8009bca:	af00      	add	r7, sp, #0
 8009bcc:	6078      	str	r0, [r7, #4]
 8009bce:	460b      	mov	r3, r1
 8009bd0:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8009bd2:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8009bd4:	4618      	mov	r0, r3
 8009bd6:	370c      	adds	r7, #12
 8009bd8:	46bd      	mov	sp, r7
 8009bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bde:	4770      	bx	lr

08009be0 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8009be0:	b480      	push	{r7}
 8009be2:	b083      	sub	sp, #12
 8009be4:	af00      	add	r7, sp, #0
 8009be6:	6078      	str	r0, [r7, #4]
 8009be8:	460b      	mov	r3, r1
 8009bea:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8009bec:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8009bee:	4618      	mov	r0, r3
 8009bf0:	370c      	adds	r7, #12
 8009bf2:	46bd      	mov	sp, r7
 8009bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bf8:	4770      	bx	lr

08009bfa <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8009bfa:	b580      	push	{r7, lr}
 8009bfc:	b086      	sub	sp, #24
 8009bfe:	af00      	add	r7, sp, #0
 8009c00:	6078      	str	r0, [r7, #4]
 8009c02:	460b      	mov	r3, r1
 8009c04:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8009c0e:	2300      	movs	r3, #0
 8009c10:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8009c12:	68fb      	ldr	r3, [r7, #12]
 8009c14:	885b      	ldrh	r3, [r3, #2]
 8009c16:	b29a      	uxth	r2, r3
 8009c18:	68fb      	ldr	r3, [r7, #12]
 8009c1a:	781b      	ldrb	r3, [r3, #0]
 8009c1c:	b29b      	uxth	r3, r3
 8009c1e:	429a      	cmp	r2, r3
 8009c20:	d920      	bls.n	8009c64 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8009c22:	68fb      	ldr	r3, [r7, #12]
 8009c24:	781b      	ldrb	r3, [r3, #0]
 8009c26:	b29b      	uxth	r3, r3
 8009c28:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8009c2a:	e013      	b.n	8009c54 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8009c2c:	f107 030a 	add.w	r3, r7, #10
 8009c30:	4619      	mov	r1, r3
 8009c32:	6978      	ldr	r0, [r7, #20]
 8009c34:	f000 f81b 	bl	8009c6e <USBD_GetNextDesc>
 8009c38:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8009c3a:	697b      	ldr	r3, [r7, #20]
 8009c3c:	785b      	ldrb	r3, [r3, #1]
 8009c3e:	2b05      	cmp	r3, #5
 8009c40:	d108      	bne.n	8009c54 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8009c42:	697b      	ldr	r3, [r7, #20]
 8009c44:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8009c46:	693b      	ldr	r3, [r7, #16]
 8009c48:	789b      	ldrb	r3, [r3, #2]
 8009c4a:	78fa      	ldrb	r2, [r7, #3]
 8009c4c:	429a      	cmp	r2, r3
 8009c4e:	d008      	beq.n	8009c62 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8009c50:	2300      	movs	r3, #0
 8009c52:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8009c54:	68fb      	ldr	r3, [r7, #12]
 8009c56:	885b      	ldrh	r3, [r3, #2]
 8009c58:	b29a      	uxth	r2, r3
 8009c5a:	897b      	ldrh	r3, [r7, #10]
 8009c5c:	429a      	cmp	r2, r3
 8009c5e:	d8e5      	bhi.n	8009c2c <USBD_GetEpDesc+0x32>
 8009c60:	e000      	b.n	8009c64 <USBD_GetEpDesc+0x6a>
          break;
 8009c62:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8009c64:	693b      	ldr	r3, [r7, #16]
}
 8009c66:	4618      	mov	r0, r3
 8009c68:	3718      	adds	r7, #24
 8009c6a:	46bd      	mov	sp, r7
 8009c6c:	bd80      	pop	{r7, pc}

08009c6e <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8009c6e:	b480      	push	{r7}
 8009c70:	b085      	sub	sp, #20
 8009c72:	af00      	add	r7, sp, #0
 8009c74:	6078      	str	r0, [r7, #4]
 8009c76:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8009c7c:	683b      	ldr	r3, [r7, #0]
 8009c7e:	881a      	ldrh	r2, [r3, #0]
 8009c80:	68fb      	ldr	r3, [r7, #12]
 8009c82:	781b      	ldrb	r3, [r3, #0]
 8009c84:	b29b      	uxth	r3, r3
 8009c86:	4413      	add	r3, r2
 8009c88:	b29a      	uxth	r2, r3
 8009c8a:	683b      	ldr	r3, [r7, #0]
 8009c8c:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8009c8e:	68fb      	ldr	r3, [r7, #12]
 8009c90:	781b      	ldrb	r3, [r3, #0]
 8009c92:	461a      	mov	r2, r3
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	4413      	add	r3, r2
 8009c98:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8009c9a:	68fb      	ldr	r3, [r7, #12]
}
 8009c9c:	4618      	mov	r0, r3
 8009c9e:	3714      	adds	r7, #20
 8009ca0:	46bd      	mov	sp, r7
 8009ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ca6:	4770      	bx	lr

08009ca8 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8009ca8:	b480      	push	{r7}
 8009caa:	b087      	sub	sp, #28
 8009cac:	af00      	add	r7, sp, #0
 8009cae:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8009cb4:	697b      	ldr	r3, [r7, #20]
 8009cb6:	781b      	ldrb	r3, [r3, #0]
 8009cb8:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8009cba:	697b      	ldr	r3, [r7, #20]
 8009cbc:	3301      	adds	r3, #1
 8009cbe:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8009cc0:	697b      	ldr	r3, [r7, #20]
 8009cc2:	781b      	ldrb	r3, [r3, #0]
 8009cc4:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8009cc6:	8a3b      	ldrh	r3, [r7, #16]
 8009cc8:	021b      	lsls	r3, r3, #8
 8009cca:	b21a      	sxth	r2, r3
 8009ccc:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8009cd0:	4313      	orrs	r3, r2
 8009cd2:	b21b      	sxth	r3, r3
 8009cd4:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8009cd6:	89fb      	ldrh	r3, [r7, #14]
}
 8009cd8:	4618      	mov	r0, r3
 8009cda:	371c      	adds	r7, #28
 8009cdc:	46bd      	mov	sp, r7
 8009cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ce2:	4770      	bx	lr

08009ce4 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009ce4:	b580      	push	{r7, lr}
 8009ce6:	b084      	sub	sp, #16
 8009ce8:	af00      	add	r7, sp, #0
 8009cea:	6078      	str	r0, [r7, #4]
 8009cec:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009cee:	2300      	movs	r3, #0
 8009cf0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009cf2:	683b      	ldr	r3, [r7, #0]
 8009cf4:	781b      	ldrb	r3, [r3, #0]
 8009cf6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009cfa:	2b40      	cmp	r3, #64	; 0x40
 8009cfc:	d005      	beq.n	8009d0a <USBD_StdDevReq+0x26>
 8009cfe:	2b40      	cmp	r3, #64	; 0x40
 8009d00:	d857      	bhi.n	8009db2 <USBD_StdDevReq+0xce>
 8009d02:	2b00      	cmp	r3, #0
 8009d04:	d00f      	beq.n	8009d26 <USBD_StdDevReq+0x42>
 8009d06:	2b20      	cmp	r3, #32
 8009d08:	d153      	bne.n	8009db2 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	32ae      	adds	r2, #174	; 0xae
 8009d14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009d18:	689b      	ldr	r3, [r3, #8]
 8009d1a:	6839      	ldr	r1, [r7, #0]
 8009d1c:	6878      	ldr	r0, [r7, #4]
 8009d1e:	4798      	blx	r3
 8009d20:	4603      	mov	r3, r0
 8009d22:	73fb      	strb	r3, [r7, #15]
      break;
 8009d24:	e04a      	b.n	8009dbc <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009d26:	683b      	ldr	r3, [r7, #0]
 8009d28:	785b      	ldrb	r3, [r3, #1]
 8009d2a:	2b09      	cmp	r3, #9
 8009d2c:	d83b      	bhi.n	8009da6 <USBD_StdDevReq+0xc2>
 8009d2e:	a201      	add	r2, pc, #4	; (adr r2, 8009d34 <USBD_StdDevReq+0x50>)
 8009d30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d34:	08009d89 	.word	0x08009d89
 8009d38:	08009d9d 	.word	0x08009d9d
 8009d3c:	08009da7 	.word	0x08009da7
 8009d40:	08009d93 	.word	0x08009d93
 8009d44:	08009da7 	.word	0x08009da7
 8009d48:	08009d67 	.word	0x08009d67
 8009d4c:	08009d5d 	.word	0x08009d5d
 8009d50:	08009da7 	.word	0x08009da7
 8009d54:	08009d7f 	.word	0x08009d7f
 8009d58:	08009d71 	.word	0x08009d71
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8009d5c:	6839      	ldr	r1, [r7, #0]
 8009d5e:	6878      	ldr	r0, [r7, #4]
 8009d60:	f000 fa3c 	bl	800a1dc <USBD_GetDescriptor>
          break;
 8009d64:	e024      	b.n	8009db0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8009d66:	6839      	ldr	r1, [r7, #0]
 8009d68:	6878      	ldr	r0, [r7, #4]
 8009d6a:	f000 fba1 	bl	800a4b0 <USBD_SetAddress>
          break;
 8009d6e:	e01f      	b.n	8009db0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8009d70:	6839      	ldr	r1, [r7, #0]
 8009d72:	6878      	ldr	r0, [r7, #4]
 8009d74:	f000 fbe0 	bl	800a538 <USBD_SetConfig>
 8009d78:	4603      	mov	r3, r0
 8009d7a:	73fb      	strb	r3, [r7, #15]
          break;
 8009d7c:	e018      	b.n	8009db0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8009d7e:	6839      	ldr	r1, [r7, #0]
 8009d80:	6878      	ldr	r0, [r7, #4]
 8009d82:	f000 fc83 	bl	800a68c <USBD_GetConfig>
          break;
 8009d86:	e013      	b.n	8009db0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8009d88:	6839      	ldr	r1, [r7, #0]
 8009d8a:	6878      	ldr	r0, [r7, #4]
 8009d8c:	f000 fcb4 	bl	800a6f8 <USBD_GetStatus>
          break;
 8009d90:	e00e      	b.n	8009db0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8009d92:	6839      	ldr	r1, [r7, #0]
 8009d94:	6878      	ldr	r0, [r7, #4]
 8009d96:	f000 fce3 	bl	800a760 <USBD_SetFeature>
          break;
 8009d9a:	e009      	b.n	8009db0 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8009d9c:	6839      	ldr	r1, [r7, #0]
 8009d9e:	6878      	ldr	r0, [r7, #4]
 8009da0:	f000 fd07 	bl	800a7b2 <USBD_ClrFeature>
          break;
 8009da4:	e004      	b.n	8009db0 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8009da6:	6839      	ldr	r1, [r7, #0]
 8009da8:	6878      	ldr	r0, [r7, #4]
 8009daa:	f000 fd5e 	bl	800a86a <USBD_CtlError>
          break;
 8009dae:	bf00      	nop
      }
      break;
 8009db0:	e004      	b.n	8009dbc <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8009db2:	6839      	ldr	r1, [r7, #0]
 8009db4:	6878      	ldr	r0, [r7, #4]
 8009db6:	f000 fd58 	bl	800a86a <USBD_CtlError>
      break;
 8009dba:	bf00      	nop
  }

  return ret;
 8009dbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8009dbe:	4618      	mov	r0, r3
 8009dc0:	3710      	adds	r7, #16
 8009dc2:	46bd      	mov	sp, r7
 8009dc4:	bd80      	pop	{r7, pc}
 8009dc6:	bf00      	nop

08009dc8 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009dc8:	b580      	push	{r7, lr}
 8009dca:	b084      	sub	sp, #16
 8009dcc:	af00      	add	r7, sp, #0
 8009dce:	6078      	str	r0, [r7, #4]
 8009dd0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009dd2:	2300      	movs	r3, #0
 8009dd4:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009dd6:	683b      	ldr	r3, [r7, #0]
 8009dd8:	781b      	ldrb	r3, [r3, #0]
 8009dda:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009dde:	2b40      	cmp	r3, #64	; 0x40
 8009de0:	d005      	beq.n	8009dee <USBD_StdItfReq+0x26>
 8009de2:	2b40      	cmp	r3, #64	; 0x40
 8009de4:	d852      	bhi.n	8009e8c <USBD_StdItfReq+0xc4>
 8009de6:	2b00      	cmp	r3, #0
 8009de8:	d001      	beq.n	8009dee <USBD_StdItfReq+0x26>
 8009dea:	2b20      	cmp	r3, #32
 8009dec:	d14e      	bne.n	8009e8c <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009df4:	b2db      	uxtb	r3, r3
 8009df6:	3b01      	subs	r3, #1
 8009df8:	2b02      	cmp	r3, #2
 8009dfa:	d840      	bhi.n	8009e7e <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8009dfc:	683b      	ldr	r3, [r7, #0]
 8009dfe:	889b      	ldrh	r3, [r3, #4]
 8009e00:	b2db      	uxtb	r3, r3
 8009e02:	2b01      	cmp	r3, #1
 8009e04:	d836      	bhi.n	8009e74 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8009e06:	683b      	ldr	r3, [r7, #0]
 8009e08:	889b      	ldrh	r3, [r3, #4]
 8009e0a:	b2db      	uxtb	r3, r3
 8009e0c:	4619      	mov	r1, r3
 8009e0e:	6878      	ldr	r0, [r7, #4]
 8009e10:	f7ff fed9 	bl	8009bc6 <USBD_CoreFindIF>
 8009e14:	4603      	mov	r3, r0
 8009e16:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009e18:	7bbb      	ldrb	r3, [r7, #14]
 8009e1a:	2bff      	cmp	r3, #255	; 0xff
 8009e1c:	d01d      	beq.n	8009e5a <USBD_StdItfReq+0x92>
 8009e1e:	7bbb      	ldrb	r3, [r7, #14]
 8009e20:	2b00      	cmp	r3, #0
 8009e22:	d11a      	bne.n	8009e5a <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8009e24:	7bba      	ldrb	r2, [r7, #14]
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	32ae      	adds	r2, #174	; 0xae
 8009e2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009e2e:	689b      	ldr	r3, [r3, #8]
 8009e30:	2b00      	cmp	r3, #0
 8009e32:	d00f      	beq.n	8009e54 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8009e34:	7bba      	ldrb	r2, [r7, #14]
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8009e3c:	7bba      	ldrb	r2, [r7, #14]
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	32ae      	adds	r2, #174	; 0xae
 8009e42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009e46:	689b      	ldr	r3, [r3, #8]
 8009e48:	6839      	ldr	r1, [r7, #0]
 8009e4a:	6878      	ldr	r0, [r7, #4]
 8009e4c:	4798      	blx	r3
 8009e4e:	4603      	mov	r3, r0
 8009e50:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8009e52:	e004      	b.n	8009e5e <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8009e54:	2303      	movs	r3, #3
 8009e56:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8009e58:	e001      	b.n	8009e5e <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8009e5a:	2303      	movs	r3, #3
 8009e5c:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8009e5e:	683b      	ldr	r3, [r7, #0]
 8009e60:	88db      	ldrh	r3, [r3, #6]
 8009e62:	2b00      	cmp	r3, #0
 8009e64:	d110      	bne.n	8009e88 <USBD_StdItfReq+0xc0>
 8009e66:	7bfb      	ldrb	r3, [r7, #15]
 8009e68:	2b00      	cmp	r3, #0
 8009e6a:	d10d      	bne.n	8009e88 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8009e6c:	6878      	ldr	r0, [r7, #4]
 8009e6e:	f000 fdc7 	bl	800aa00 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8009e72:	e009      	b.n	8009e88 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8009e74:	6839      	ldr	r1, [r7, #0]
 8009e76:	6878      	ldr	r0, [r7, #4]
 8009e78:	f000 fcf7 	bl	800a86a <USBD_CtlError>
          break;
 8009e7c:	e004      	b.n	8009e88 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8009e7e:	6839      	ldr	r1, [r7, #0]
 8009e80:	6878      	ldr	r0, [r7, #4]
 8009e82:	f000 fcf2 	bl	800a86a <USBD_CtlError>
          break;
 8009e86:	e000      	b.n	8009e8a <USBD_StdItfReq+0xc2>
          break;
 8009e88:	bf00      	nop
      }
      break;
 8009e8a:	e004      	b.n	8009e96 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8009e8c:	6839      	ldr	r1, [r7, #0]
 8009e8e:	6878      	ldr	r0, [r7, #4]
 8009e90:	f000 fceb 	bl	800a86a <USBD_CtlError>
      break;
 8009e94:	bf00      	nop
  }

  return ret;
 8009e96:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e98:	4618      	mov	r0, r3
 8009e9a:	3710      	adds	r7, #16
 8009e9c:	46bd      	mov	sp, r7
 8009e9e:	bd80      	pop	{r7, pc}

08009ea0 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009ea0:	b580      	push	{r7, lr}
 8009ea2:	b084      	sub	sp, #16
 8009ea4:	af00      	add	r7, sp, #0
 8009ea6:	6078      	str	r0, [r7, #4]
 8009ea8:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8009eaa:	2300      	movs	r3, #0
 8009eac:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8009eae:	683b      	ldr	r3, [r7, #0]
 8009eb0:	889b      	ldrh	r3, [r3, #4]
 8009eb2:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009eb4:	683b      	ldr	r3, [r7, #0]
 8009eb6:	781b      	ldrb	r3, [r3, #0]
 8009eb8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009ebc:	2b40      	cmp	r3, #64	; 0x40
 8009ebe:	d007      	beq.n	8009ed0 <USBD_StdEPReq+0x30>
 8009ec0:	2b40      	cmp	r3, #64	; 0x40
 8009ec2:	f200 817f 	bhi.w	800a1c4 <USBD_StdEPReq+0x324>
 8009ec6:	2b00      	cmp	r3, #0
 8009ec8:	d02a      	beq.n	8009f20 <USBD_StdEPReq+0x80>
 8009eca:	2b20      	cmp	r3, #32
 8009ecc:	f040 817a 	bne.w	800a1c4 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8009ed0:	7bbb      	ldrb	r3, [r7, #14]
 8009ed2:	4619      	mov	r1, r3
 8009ed4:	6878      	ldr	r0, [r7, #4]
 8009ed6:	f7ff fe83 	bl	8009be0 <USBD_CoreFindEP>
 8009eda:	4603      	mov	r3, r0
 8009edc:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009ede:	7b7b      	ldrb	r3, [r7, #13]
 8009ee0:	2bff      	cmp	r3, #255	; 0xff
 8009ee2:	f000 8174 	beq.w	800a1ce <USBD_StdEPReq+0x32e>
 8009ee6:	7b7b      	ldrb	r3, [r7, #13]
 8009ee8:	2b00      	cmp	r3, #0
 8009eea:	f040 8170 	bne.w	800a1ce <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8009eee:	7b7a      	ldrb	r2, [r7, #13]
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8009ef6:	7b7a      	ldrb	r2, [r7, #13]
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	32ae      	adds	r2, #174	; 0xae
 8009efc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009f00:	689b      	ldr	r3, [r3, #8]
 8009f02:	2b00      	cmp	r3, #0
 8009f04:	f000 8163 	beq.w	800a1ce <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8009f08:	7b7a      	ldrb	r2, [r7, #13]
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	32ae      	adds	r2, #174	; 0xae
 8009f0e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009f12:	689b      	ldr	r3, [r3, #8]
 8009f14:	6839      	ldr	r1, [r7, #0]
 8009f16:	6878      	ldr	r0, [r7, #4]
 8009f18:	4798      	blx	r3
 8009f1a:	4603      	mov	r3, r0
 8009f1c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8009f1e:	e156      	b.n	800a1ce <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009f20:	683b      	ldr	r3, [r7, #0]
 8009f22:	785b      	ldrb	r3, [r3, #1]
 8009f24:	2b03      	cmp	r3, #3
 8009f26:	d008      	beq.n	8009f3a <USBD_StdEPReq+0x9a>
 8009f28:	2b03      	cmp	r3, #3
 8009f2a:	f300 8145 	bgt.w	800a1b8 <USBD_StdEPReq+0x318>
 8009f2e:	2b00      	cmp	r3, #0
 8009f30:	f000 809b 	beq.w	800a06a <USBD_StdEPReq+0x1ca>
 8009f34:	2b01      	cmp	r3, #1
 8009f36:	d03c      	beq.n	8009fb2 <USBD_StdEPReq+0x112>
 8009f38:	e13e      	b.n	800a1b8 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009f40:	b2db      	uxtb	r3, r3
 8009f42:	2b02      	cmp	r3, #2
 8009f44:	d002      	beq.n	8009f4c <USBD_StdEPReq+0xac>
 8009f46:	2b03      	cmp	r3, #3
 8009f48:	d016      	beq.n	8009f78 <USBD_StdEPReq+0xd8>
 8009f4a:	e02c      	b.n	8009fa6 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009f4c:	7bbb      	ldrb	r3, [r7, #14]
 8009f4e:	2b00      	cmp	r3, #0
 8009f50:	d00d      	beq.n	8009f6e <USBD_StdEPReq+0xce>
 8009f52:	7bbb      	ldrb	r3, [r7, #14]
 8009f54:	2b80      	cmp	r3, #128	; 0x80
 8009f56:	d00a      	beq.n	8009f6e <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009f58:	7bbb      	ldrb	r3, [r7, #14]
 8009f5a:	4619      	mov	r1, r3
 8009f5c:	6878      	ldr	r0, [r7, #4]
 8009f5e:	f001 f999 	bl	800b294 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8009f62:	2180      	movs	r1, #128	; 0x80
 8009f64:	6878      	ldr	r0, [r7, #4]
 8009f66:	f001 f995 	bl	800b294 <USBD_LL_StallEP>
 8009f6a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009f6c:	e020      	b.n	8009fb0 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8009f6e:	6839      	ldr	r1, [r7, #0]
 8009f70:	6878      	ldr	r0, [r7, #4]
 8009f72:	f000 fc7a 	bl	800a86a <USBD_CtlError>
              break;
 8009f76:	e01b      	b.n	8009fb0 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009f78:	683b      	ldr	r3, [r7, #0]
 8009f7a:	885b      	ldrh	r3, [r3, #2]
 8009f7c:	2b00      	cmp	r3, #0
 8009f7e:	d10e      	bne.n	8009f9e <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8009f80:	7bbb      	ldrb	r3, [r7, #14]
 8009f82:	2b00      	cmp	r3, #0
 8009f84:	d00b      	beq.n	8009f9e <USBD_StdEPReq+0xfe>
 8009f86:	7bbb      	ldrb	r3, [r7, #14]
 8009f88:	2b80      	cmp	r3, #128	; 0x80
 8009f8a:	d008      	beq.n	8009f9e <USBD_StdEPReq+0xfe>
 8009f8c:	683b      	ldr	r3, [r7, #0]
 8009f8e:	88db      	ldrh	r3, [r3, #6]
 8009f90:	2b00      	cmp	r3, #0
 8009f92:	d104      	bne.n	8009f9e <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8009f94:	7bbb      	ldrb	r3, [r7, #14]
 8009f96:	4619      	mov	r1, r3
 8009f98:	6878      	ldr	r0, [r7, #4]
 8009f9a:	f001 f97b 	bl	800b294 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8009f9e:	6878      	ldr	r0, [r7, #4]
 8009fa0:	f000 fd2e 	bl	800aa00 <USBD_CtlSendStatus>

              break;
 8009fa4:	e004      	b.n	8009fb0 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8009fa6:	6839      	ldr	r1, [r7, #0]
 8009fa8:	6878      	ldr	r0, [r7, #4]
 8009faa:	f000 fc5e 	bl	800a86a <USBD_CtlError>
              break;
 8009fae:	bf00      	nop
          }
          break;
 8009fb0:	e107      	b.n	800a1c2 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009fb8:	b2db      	uxtb	r3, r3
 8009fba:	2b02      	cmp	r3, #2
 8009fbc:	d002      	beq.n	8009fc4 <USBD_StdEPReq+0x124>
 8009fbe:	2b03      	cmp	r3, #3
 8009fc0:	d016      	beq.n	8009ff0 <USBD_StdEPReq+0x150>
 8009fc2:	e04b      	b.n	800a05c <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009fc4:	7bbb      	ldrb	r3, [r7, #14]
 8009fc6:	2b00      	cmp	r3, #0
 8009fc8:	d00d      	beq.n	8009fe6 <USBD_StdEPReq+0x146>
 8009fca:	7bbb      	ldrb	r3, [r7, #14]
 8009fcc:	2b80      	cmp	r3, #128	; 0x80
 8009fce:	d00a      	beq.n	8009fe6 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009fd0:	7bbb      	ldrb	r3, [r7, #14]
 8009fd2:	4619      	mov	r1, r3
 8009fd4:	6878      	ldr	r0, [r7, #4]
 8009fd6:	f001 f95d 	bl	800b294 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8009fda:	2180      	movs	r1, #128	; 0x80
 8009fdc:	6878      	ldr	r0, [r7, #4]
 8009fde:	f001 f959 	bl	800b294 <USBD_LL_StallEP>
 8009fe2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009fe4:	e040      	b.n	800a068 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8009fe6:	6839      	ldr	r1, [r7, #0]
 8009fe8:	6878      	ldr	r0, [r7, #4]
 8009fea:	f000 fc3e 	bl	800a86a <USBD_CtlError>
              break;
 8009fee:	e03b      	b.n	800a068 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009ff0:	683b      	ldr	r3, [r7, #0]
 8009ff2:	885b      	ldrh	r3, [r3, #2]
 8009ff4:	2b00      	cmp	r3, #0
 8009ff6:	d136      	bne.n	800a066 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8009ff8:	7bbb      	ldrb	r3, [r7, #14]
 8009ffa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009ffe:	2b00      	cmp	r3, #0
 800a000:	d004      	beq.n	800a00c <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800a002:	7bbb      	ldrb	r3, [r7, #14]
 800a004:	4619      	mov	r1, r3
 800a006:	6878      	ldr	r0, [r7, #4]
 800a008:	f001 f963 	bl	800b2d2 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800a00c:	6878      	ldr	r0, [r7, #4]
 800a00e:	f000 fcf7 	bl	800aa00 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800a012:	7bbb      	ldrb	r3, [r7, #14]
 800a014:	4619      	mov	r1, r3
 800a016:	6878      	ldr	r0, [r7, #4]
 800a018:	f7ff fde2 	bl	8009be0 <USBD_CoreFindEP>
 800a01c:	4603      	mov	r3, r0
 800a01e:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a020:	7b7b      	ldrb	r3, [r7, #13]
 800a022:	2bff      	cmp	r3, #255	; 0xff
 800a024:	d01f      	beq.n	800a066 <USBD_StdEPReq+0x1c6>
 800a026:	7b7b      	ldrb	r3, [r7, #13]
 800a028:	2b00      	cmp	r3, #0
 800a02a:	d11c      	bne.n	800a066 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800a02c:	7b7a      	ldrb	r2, [r7, #13]
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800a034:	7b7a      	ldrb	r2, [r7, #13]
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	32ae      	adds	r2, #174	; 0xae
 800a03a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a03e:	689b      	ldr	r3, [r3, #8]
 800a040:	2b00      	cmp	r3, #0
 800a042:	d010      	beq.n	800a066 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800a044:	7b7a      	ldrb	r2, [r7, #13]
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	32ae      	adds	r2, #174	; 0xae
 800a04a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a04e:	689b      	ldr	r3, [r3, #8]
 800a050:	6839      	ldr	r1, [r7, #0]
 800a052:	6878      	ldr	r0, [r7, #4]
 800a054:	4798      	blx	r3
 800a056:	4603      	mov	r3, r0
 800a058:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800a05a:	e004      	b.n	800a066 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800a05c:	6839      	ldr	r1, [r7, #0]
 800a05e:	6878      	ldr	r0, [r7, #4]
 800a060:	f000 fc03 	bl	800a86a <USBD_CtlError>
              break;
 800a064:	e000      	b.n	800a068 <USBD_StdEPReq+0x1c8>
              break;
 800a066:	bf00      	nop
          }
          break;
 800a068:	e0ab      	b.n	800a1c2 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a070:	b2db      	uxtb	r3, r3
 800a072:	2b02      	cmp	r3, #2
 800a074:	d002      	beq.n	800a07c <USBD_StdEPReq+0x1dc>
 800a076:	2b03      	cmp	r3, #3
 800a078:	d032      	beq.n	800a0e0 <USBD_StdEPReq+0x240>
 800a07a:	e097      	b.n	800a1ac <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a07c:	7bbb      	ldrb	r3, [r7, #14]
 800a07e:	2b00      	cmp	r3, #0
 800a080:	d007      	beq.n	800a092 <USBD_StdEPReq+0x1f2>
 800a082:	7bbb      	ldrb	r3, [r7, #14]
 800a084:	2b80      	cmp	r3, #128	; 0x80
 800a086:	d004      	beq.n	800a092 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800a088:	6839      	ldr	r1, [r7, #0]
 800a08a:	6878      	ldr	r0, [r7, #4]
 800a08c:	f000 fbed 	bl	800a86a <USBD_CtlError>
                break;
 800a090:	e091      	b.n	800a1b6 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a092:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a096:	2b00      	cmp	r3, #0
 800a098:	da0b      	bge.n	800a0b2 <USBD_StdEPReq+0x212>
 800a09a:	7bbb      	ldrb	r3, [r7, #14]
 800a09c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a0a0:	4613      	mov	r3, r2
 800a0a2:	009b      	lsls	r3, r3, #2
 800a0a4:	4413      	add	r3, r2
 800a0a6:	009b      	lsls	r3, r3, #2
 800a0a8:	3310      	adds	r3, #16
 800a0aa:	687a      	ldr	r2, [r7, #4]
 800a0ac:	4413      	add	r3, r2
 800a0ae:	3304      	adds	r3, #4
 800a0b0:	e00b      	b.n	800a0ca <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a0b2:	7bbb      	ldrb	r3, [r7, #14]
 800a0b4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a0b8:	4613      	mov	r3, r2
 800a0ba:	009b      	lsls	r3, r3, #2
 800a0bc:	4413      	add	r3, r2
 800a0be:	009b      	lsls	r3, r3, #2
 800a0c0:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800a0c4:	687a      	ldr	r2, [r7, #4]
 800a0c6:	4413      	add	r3, r2
 800a0c8:	3304      	adds	r3, #4
 800a0ca:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800a0cc:	68bb      	ldr	r3, [r7, #8]
 800a0ce:	2200      	movs	r2, #0
 800a0d0:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800a0d2:	68bb      	ldr	r3, [r7, #8]
 800a0d4:	2202      	movs	r2, #2
 800a0d6:	4619      	mov	r1, r3
 800a0d8:	6878      	ldr	r0, [r7, #4]
 800a0da:	f000 fc37 	bl	800a94c <USBD_CtlSendData>
              break;
 800a0de:	e06a      	b.n	800a1b6 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800a0e0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a0e4:	2b00      	cmp	r3, #0
 800a0e6:	da11      	bge.n	800a10c <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800a0e8:	7bbb      	ldrb	r3, [r7, #14]
 800a0ea:	f003 020f 	and.w	r2, r3, #15
 800a0ee:	6879      	ldr	r1, [r7, #4]
 800a0f0:	4613      	mov	r3, r2
 800a0f2:	009b      	lsls	r3, r3, #2
 800a0f4:	4413      	add	r3, r2
 800a0f6:	009b      	lsls	r3, r3, #2
 800a0f8:	440b      	add	r3, r1
 800a0fa:	3324      	adds	r3, #36	; 0x24
 800a0fc:	881b      	ldrh	r3, [r3, #0]
 800a0fe:	2b00      	cmp	r3, #0
 800a100:	d117      	bne.n	800a132 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800a102:	6839      	ldr	r1, [r7, #0]
 800a104:	6878      	ldr	r0, [r7, #4]
 800a106:	f000 fbb0 	bl	800a86a <USBD_CtlError>
                  break;
 800a10a:	e054      	b.n	800a1b6 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800a10c:	7bbb      	ldrb	r3, [r7, #14]
 800a10e:	f003 020f 	and.w	r2, r3, #15
 800a112:	6879      	ldr	r1, [r7, #4]
 800a114:	4613      	mov	r3, r2
 800a116:	009b      	lsls	r3, r3, #2
 800a118:	4413      	add	r3, r2
 800a11a:	009b      	lsls	r3, r3, #2
 800a11c:	440b      	add	r3, r1
 800a11e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800a122:	881b      	ldrh	r3, [r3, #0]
 800a124:	2b00      	cmp	r3, #0
 800a126:	d104      	bne.n	800a132 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800a128:	6839      	ldr	r1, [r7, #0]
 800a12a:	6878      	ldr	r0, [r7, #4]
 800a12c:	f000 fb9d 	bl	800a86a <USBD_CtlError>
                  break;
 800a130:	e041      	b.n	800a1b6 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a132:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a136:	2b00      	cmp	r3, #0
 800a138:	da0b      	bge.n	800a152 <USBD_StdEPReq+0x2b2>
 800a13a:	7bbb      	ldrb	r3, [r7, #14]
 800a13c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a140:	4613      	mov	r3, r2
 800a142:	009b      	lsls	r3, r3, #2
 800a144:	4413      	add	r3, r2
 800a146:	009b      	lsls	r3, r3, #2
 800a148:	3310      	adds	r3, #16
 800a14a:	687a      	ldr	r2, [r7, #4]
 800a14c:	4413      	add	r3, r2
 800a14e:	3304      	adds	r3, #4
 800a150:	e00b      	b.n	800a16a <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a152:	7bbb      	ldrb	r3, [r7, #14]
 800a154:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a158:	4613      	mov	r3, r2
 800a15a:	009b      	lsls	r3, r3, #2
 800a15c:	4413      	add	r3, r2
 800a15e:	009b      	lsls	r3, r3, #2
 800a160:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800a164:	687a      	ldr	r2, [r7, #4]
 800a166:	4413      	add	r3, r2
 800a168:	3304      	adds	r3, #4
 800a16a:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800a16c:	7bbb      	ldrb	r3, [r7, #14]
 800a16e:	2b00      	cmp	r3, #0
 800a170:	d002      	beq.n	800a178 <USBD_StdEPReq+0x2d8>
 800a172:	7bbb      	ldrb	r3, [r7, #14]
 800a174:	2b80      	cmp	r3, #128	; 0x80
 800a176:	d103      	bne.n	800a180 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800a178:	68bb      	ldr	r3, [r7, #8]
 800a17a:	2200      	movs	r2, #0
 800a17c:	601a      	str	r2, [r3, #0]
 800a17e:	e00e      	b.n	800a19e <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800a180:	7bbb      	ldrb	r3, [r7, #14]
 800a182:	4619      	mov	r1, r3
 800a184:	6878      	ldr	r0, [r7, #4]
 800a186:	f001 f8c3 	bl	800b310 <USBD_LL_IsStallEP>
 800a18a:	4603      	mov	r3, r0
 800a18c:	2b00      	cmp	r3, #0
 800a18e:	d003      	beq.n	800a198 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800a190:	68bb      	ldr	r3, [r7, #8]
 800a192:	2201      	movs	r2, #1
 800a194:	601a      	str	r2, [r3, #0]
 800a196:	e002      	b.n	800a19e <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800a198:	68bb      	ldr	r3, [r7, #8]
 800a19a:	2200      	movs	r2, #0
 800a19c:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800a19e:	68bb      	ldr	r3, [r7, #8]
 800a1a0:	2202      	movs	r2, #2
 800a1a2:	4619      	mov	r1, r3
 800a1a4:	6878      	ldr	r0, [r7, #4]
 800a1a6:	f000 fbd1 	bl	800a94c <USBD_CtlSendData>
              break;
 800a1aa:	e004      	b.n	800a1b6 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800a1ac:	6839      	ldr	r1, [r7, #0]
 800a1ae:	6878      	ldr	r0, [r7, #4]
 800a1b0:	f000 fb5b 	bl	800a86a <USBD_CtlError>
              break;
 800a1b4:	bf00      	nop
          }
          break;
 800a1b6:	e004      	b.n	800a1c2 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800a1b8:	6839      	ldr	r1, [r7, #0]
 800a1ba:	6878      	ldr	r0, [r7, #4]
 800a1bc:	f000 fb55 	bl	800a86a <USBD_CtlError>
          break;
 800a1c0:	bf00      	nop
      }
      break;
 800a1c2:	e005      	b.n	800a1d0 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800a1c4:	6839      	ldr	r1, [r7, #0]
 800a1c6:	6878      	ldr	r0, [r7, #4]
 800a1c8:	f000 fb4f 	bl	800a86a <USBD_CtlError>
      break;
 800a1cc:	e000      	b.n	800a1d0 <USBD_StdEPReq+0x330>
      break;
 800a1ce:	bf00      	nop
  }

  return ret;
 800a1d0:	7bfb      	ldrb	r3, [r7, #15]
}
 800a1d2:	4618      	mov	r0, r3
 800a1d4:	3710      	adds	r7, #16
 800a1d6:	46bd      	mov	sp, r7
 800a1d8:	bd80      	pop	{r7, pc}
	...

0800a1dc <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a1dc:	b580      	push	{r7, lr}
 800a1de:	b084      	sub	sp, #16
 800a1e0:	af00      	add	r7, sp, #0
 800a1e2:	6078      	str	r0, [r7, #4]
 800a1e4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a1e6:	2300      	movs	r3, #0
 800a1e8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800a1ea:	2300      	movs	r3, #0
 800a1ec:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800a1ee:	2300      	movs	r3, #0
 800a1f0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800a1f2:	683b      	ldr	r3, [r7, #0]
 800a1f4:	885b      	ldrh	r3, [r3, #2]
 800a1f6:	0a1b      	lsrs	r3, r3, #8
 800a1f8:	b29b      	uxth	r3, r3
 800a1fa:	3b01      	subs	r3, #1
 800a1fc:	2b06      	cmp	r3, #6
 800a1fe:	f200 8128 	bhi.w	800a452 <USBD_GetDescriptor+0x276>
 800a202:	a201      	add	r2, pc, #4	; (adr r2, 800a208 <USBD_GetDescriptor+0x2c>)
 800a204:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a208:	0800a225 	.word	0x0800a225
 800a20c:	0800a23d 	.word	0x0800a23d
 800a210:	0800a27d 	.word	0x0800a27d
 800a214:	0800a453 	.word	0x0800a453
 800a218:	0800a453 	.word	0x0800a453
 800a21c:	0800a3f3 	.word	0x0800a3f3
 800a220:	0800a41f 	.word	0x0800a41f
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a22a:	681b      	ldr	r3, [r3, #0]
 800a22c:	687a      	ldr	r2, [r7, #4]
 800a22e:	7c12      	ldrb	r2, [r2, #16]
 800a230:	f107 0108 	add.w	r1, r7, #8
 800a234:	4610      	mov	r0, r2
 800a236:	4798      	blx	r3
 800a238:	60f8      	str	r0, [r7, #12]
      break;
 800a23a:	e112      	b.n	800a462 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	7c1b      	ldrb	r3, [r3, #16]
 800a240:	2b00      	cmp	r3, #0
 800a242:	d10d      	bne.n	800a260 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a24a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a24c:	f107 0208 	add.w	r2, r7, #8
 800a250:	4610      	mov	r0, r2
 800a252:	4798      	blx	r3
 800a254:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a256:	68fb      	ldr	r3, [r7, #12]
 800a258:	3301      	adds	r3, #1
 800a25a:	2202      	movs	r2, #2
 800a25c:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800a25e:	e100      	b.n	800a462 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a266:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a268:	f107 0208 	add.w	r2, r7, #8
 800a26c:	4610      	mov	r0, r2
 800a26e:	4798      	blx	r3
 800a270:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a272:	68fb      	ldr	r3, [r7, #12]
 800a274:	3301      	adds	r3, #1
 800a276:	2202      	movs	r2, #2
 800a278:	701a      	strb	r2, [r3, #0]
      break;
 800a27a:	e0f2      	b.n	800a462 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800a27c:	683b      	ldr	r3, [r7, #0]
 800a27e:	885b      	ldrh	r3, [r3, #2]
 800a280:	b2db      	uxtb	r3, r3
 800a282:	2b05      	cmp	r3, #5
 800a284:	f200 80ac 	bhi.w	800a3e0 <USBD_GetDescriptor+0x204>
 800a288:	a201      	add	r2, pc, #4	; (adr r2, 800a290 <USBD_GetDescriptor+0xb4>)
 800a28a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a28e:	bf00      	nop
 800a290:	0800a2a9 	.word	0x0800a2a9
 800a294:	0800a2dd 	.word	0x0800a2dd
 800a298:	0800a311 	.word	0x0800a311
 800a29c:	0800a345 	.word	0x0800a345
 800a2a0:	0800a379 	.word	0x0800a379
 800a2a4:	0800a3ad 	.word	0x0800a3ad
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a2ae:	685b      	ldr	r3, [r3, #4]
 800a2b0:	2b00      	cmp	r3, #0
 800a2b2:	d00b      	beq.n	800a2cc <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a2ba:	685b      	ldr	r3, [r3, #4]
 800a2bc:	687a      	ldr	r2, [r7, #4]
 800a2be:	7c12      	ldrb	r2, [r2, #16]
 800a2c0:	f107 0108 	add.w	r1, r7, #8
 800a2c4:	4610      	mov	r0, r2
 800a2c6:	4798      	blx	r3
 800a2c8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a2ca:	e091      	b.n	800a3f0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a2cc:	6839      	ldr	r1, [r7, #0]
 800a2ce:	6878      	ldr	r0, [r7, #4]
 800a2d0:	f000 facb 	bl	800a86a <USBD_CtlError>
            err++;
 800a2d4:	7afb      	ldrb	r3, [r7, #11]
 800a2d6:	3301      	adds	r3, #1
 800a2d8:	72fb      	strb	r3, [r7, #11]
          break;
 800a2da:	e089      	b.n	800a3f0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a2e2:	689b      	ldr	r3, [r3, #8]
 800a2e4:	2b00      	cmp	r3, #0
 800a2e6:	d00b      	beq.n	800a300 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a2ee:	689b      	ldr	r3, [r3, #8]
 800a2f0:	687a      	ldr	r2, [r7, #4]
 800a2f2:	7c12      	ldrb	r2, [r2, #16]
 800a2f4:	f107 0108 	add.w	r1, r7, #8
 800a2f8:	4610      	mov	r0, r2
 800a2fa:	4798      	blx	r3
 800a2fc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a2fe:	e077      	b.n	800a3f0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a300:	6839      	ldr	r1, [r7, #0]
 800a302:	6878      	ldr	r0, [r7, #4]
 800a304:	f000 fab1 	bl	800a86a <USBD_CtlError>
            err++;
 800a308:	7afb      	ldrb	r3, [r7, #11]
 800a30a:	3301      	adds	r3, #1
 800a30c:	72fb      	strb	r3, [r7, #11]
          break;
 800a30e:	e06f      	b.n	800a3f0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a316:	68db      	ldr	r3, [r3, #12]
 800a318:	2b00      	cmp	r3, #0
 800a31a:	d00b      	beq.n	800a334 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a322:	68db      	ldr	r3, [r3, #12]
 800a324:	687a      	ldr	r2, [r7, #4]
 800a326:	7c12      	ldrb	r2, [r2, #16]
 800a328:	f107 0108 	add.w	r1, r7, #8
 800a32c:	4610      	mov	r0, r2
 800a32e:	4798      	blx	r3
 800a330:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a332:	e05d      	b.n	800a3f0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a334:	6839      	ldr	r1, [r7, #0]
 800a336:	6878      	ldr	r0, [r7, #4]
 800a338:	f000 fa97 	bl	800a86a <USBD_CtlError>
            err++;
 800a33c:	7afb      	ldrb	r3, [r7, #11]
 800a33e:	3301      	adds	r3, #1
 800a340:	72fb      	strb	r3, [r7, #11]
          break;
 800a342:	e055      	b.n	800a3f0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a34a:	691b      	ldr	r3, [r3, #16]
 800a34c:	2b00      	cmp	r3, #0
 800a34e:	d00b      	beq.n	800a368 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a356:	691b      	ldr	r3, [r3, #16]
 800a358:	687a      	ldr	r2, [r7, #4]
 800a35a:	7c12      	ldrb	r2, [r2, #16]
 800a35c:	f107 0108 	add.w	r1, r7, #8
 800a360:	4610      	mov	r0, r2
 800a362:	4798      	blx	r3
 800a364:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a366:	e043      	b.n	800a3f0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a368:	6839      	ldr	r1, [r7, #0]
 800a36a:	6878      	ldr	r0, [r7, #4]
 800a36c:	f000 fa7d 	bl	800a86a <USBD_CtlError>
            err++;
 800a370:	7afb      	ldrb	r3, [r7, #11]
 800a372:	3301      	adds	r3, #1
 800a374:	72fb      	strb	r3, [r7, #11]
          break;
 800a376:	e03b      	b.n	800a3f0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a37e:	695b      	ldr	r3, [r3, #20]
 800a380:	2b00      	cmp	r3, #0
 800a382:	d00b      	beq.n	800a39c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a38a:	695b      	ldr	r3, [r3, #20]
 800a38c:	687a      	ldr	r2, [r7, #4]
 800a38e:	7c12      	ldrb	r2, [r2, #16]
 800a390:	f107 0108 	add.w	r1, r7, #8
 800a394:	4610      	mov	r0, r2
 800a396:	4798      	blx	r3
 800a398:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a39a:	e029      	b.n	800a3f0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a39c:	6839      	ldr	r1, [r7, #0]
 800a39e:	6878      	ldr	r0, [r7, #4]
 800a3a0:	f000 fa63 	bl	800a86a <USBD_CtlError>
            err++;
 800a3a4:	7afb      	ldrb	r3, [r7, #11]
 800a3a6:	3301      	adds	r3, #1
 800a3a8:	72fb      	strb	r3, [r7, #11]
          break;
 800a3aa:	e021      	b.n	800a3f0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a3b2:	699b      	ldr	r3, [r3, #24]
 800a3b4:	2b00      	cmp	r3, #0
 800a3b6:	d00b      	beq.n	800a3d0 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a3be:	699b      	ldr	r3, [r3, #24]
 800a3c0:	687a      	ldr	r2, [r7, #4]
 800a3c2:	7c12      	ldrb	r2, [r2, #16]
 800a3c4:	f107 0108 	add.w	r1, r7, #8
 800a3c8:	4610      	mov	r0, r2
 800a3ca:	4798      	blx	r3
 800a3cc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a3ce:	e00f      	b.n	800a3f0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a3d0:	6839      	ldr	r1, [r7, #0]
 800a3d2:	6878      	ldr	r0, [r7, #4]
 800a3d4:	f000 fa49 	bl	800a86a <USBD_CtlError>
            err++;
 800a3d8:	7afb      	ldrb	r3, [r7, #11]
 800a3da:	3301      	adds	r3, #1
 800a3dc:	72fb      	strb	r3, [r7, #11]
          break;
 800a3de:	e007      	b.n	800a3f0 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800a3e0:	6839      	ldr	r1, [r7, #0]
 800a3e2:	6878      	ldr	r0, [r7, #4]
 800a3e4:	f000 fa41 	bl	800a86a <USBD_CtlError>
          err++;
 800a3e8:	7afb      	ldrb	r3, [r7, #11]
 800a3ea:	3301      	adds	r3, #1
 800a3ec:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800a3ee:	bf00      	nop
      }
      break;
 800a3f0:	e037      	b.n	800a462 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	7c1b      	ldrb	r3, [r3, #16]
 800a3f6:	2b00      	cmp	r3, #0
 800a3f8:	d109      	bne.n	800a40e <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a400:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a402:	f107 0208 	add.w	r2, r7, #8
 800a406:	4610      	mov	r0, r2
 800a408:	4798      	blx	r3
 800a40a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a40c:	e029      	b.n	800a462 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800a40e:	6839      	ldr	r1, [r7, #0]
 800a410:	6878      	ldr	r0, [r7, #4]
 800a412:	f000 fa2a 	bl	800a86a <USBD_CtlError>
        err++;
 800a416:	7afb      	ldrb	r3, [r7, #11]
 800a418:	3301      	adds	r3, #1
 800a41a:	72fb      	strb	r3, [r7, #11]
      break;
 800a41c:	e021      	b.n	800a462 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	7c1b      	ldrb	r3, [r3, #16]
 800a422:	2b00      	cmp	r3, #0
 800a424:	d10d      	bne.n	800a442 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a42c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a42e:	f107 0208 	add.w	r2, r7, #8
 800a432:	4610      	mov	r0, r2
 800a434:	4798      	blx	r3
 800a436:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800a438:	68fb      	ldr	r3, [r7, #12]
 800a43a:	3301      	adds	r3, #1
 800a43c:	2207      	movs	r2, #7
 800a43e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a440:	e00f      	b.n	800a462 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800a442:	6839      	ldr	r1, [r7, #0]
 800a444:	6878      	ldr	r0, [r7, #4]
 800a446:	f000 fa10 	bl	800a86a <USBD_CtlError>
        err++;
 800a44a:	7afb      	ldrb	r3, [r7, #11]
 800a44c:	3301      	adds	r3, #1
 800a44e:	72fb      	strb	r3, [r7, #11]
      break;
 800a450:	e007      	b.n	800a462 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800a452:	6839      	ldr	r1, [r7, #0]
 800a454:	6878      	ldr	r0, [r7, #4]
 800a456:	f000 fa08 	bl	800a86a <USBD_CtlError>
      err++;
 800a45a:	7afb      	ldrb	r3, [r7, #11]
 800a45c:	3301      	adds	r3, #1
 800a45e:	72fb      	strb	r3, [r7, #11]
      break;
 800a460:	bf00      	nop
  }

  if (err != 0U)
 800a462:	7afb      	ldrb	r3, [r7, #11]
 800a464:	2b00      	cmp	r3, #0
 800a466:	d11e      	bne.n	800a4a6 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800a468:	683b      	ldr	r3, [r7, #0]
 800a46a:	88db      	ldrh	r3, [r3, #6]
 800a46c:	2b00      	cmp	r3, #0
 800a46e:	d016      	beq.n	800a49e <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800a470:	893b      	ldrh	r3, [r7, #8]
 800a472:	2b00      	cmp	r3, #0
 800a474:	d00e      	beq.n	800a494 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800a476:	683b      	ldr	r3, [r7, #0]
 800a478:	88da      	ldrh	r2, [r3, #6]
 800a47a:	893b      	ldrh	r3, [r7, #8]
 800a47c:	4293      	cmp	r3, r2
 800a47e:	bf28      	it	cs
 800a480:	4613      	movcs	r3, r2
 800a482:	b29b      	uxth	r3, r3
 800a484:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800a486:	893b      	ldrh	r3, [r7, #8]
 800a488:	461a      	mov	r2, r3
 800a48a:	68f9      	ldr	r1, [r7, #12]
 800a48c:	6878      	ldr	r0, [r7, #4]
 800a48e:	f000 fa5d 	bl	800a94c <USBD_CtlSendData>
 800a492:	e009      	b.n	800a4a8 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800a494:	6839      	ldr	r1, [r7, #0]
 800a496:	6878      	ldr	r0, [r7, #4]
 800a498:	f000 f9e7 	bl	800a86a <USBD_CtlError>
 800a49c:	e004      	b.n	800a4a8 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800a49e:	6878      	ldr	r0, [r7, #4]
 800a4a0:	f000 faae 	bl	800aa00 <USBD_CtlSendStatus>
 800a4a4:	e000      	b.n	800a4a8 <USBD_GetDescriptor+0x2cc>
    return;
 800a4a6:	bf00      	nop
  }
}
 800a4a8:	3710      	adds	r7, #16
 800a4aa:	46bd      	mov	sp, r7
 800a4ac:	bd80      	pop	{r7, pc}
 800a4ae:	bf00      	nop

0800a4b0 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a4b0:	b580      	push	{r7, lr}
 800a4b2:	b084      	sub	sp, #16
 800a4b4:	af00      	add	r7, sp, #0
 800a4b6:	6078      	str	r0, [r7, #4]
 800a4b8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800a4ba:	683b      	ldr	r3, [r7, #0]
 800a4bc:	889b      	ldrh	r3, [r3, #4]
 800a4be:	2b00      	cmp	r3, #0
 800a4c0:	d131      	bne.n	800a526 <USBD_SetAddress+0x76>
 800a4c2:	683b      	ldr	r3, [r7, #0]
 800a4c4:	88db      	ldrh	r3, [r3, #6]
 800a4c6:	2b00      	cmp	r3, #0
 800a4c8:	d12d      	bne.n	800a526 <USBD_SetAddress+0x76>
 800a4ca:	683b      	ldr	r3, [r7, #0]
 800a4cc:	885b      	ldrh	r3, [r3, #2]
 800a4ce:	2b7f      	cmp	r3, #127	; 0x7f
 800a4d0:	d829      	bhi.n	800a526 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800a4d2:	683b      	ldr	r3, [r7, #0]
 800a4d4:	885b      	ldrh	r3, [r3, #2]
 800a4d6:	b2db      	uxtb	r3, r3
 800a4d8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a4dc:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a4e4:	b2db      	uxtb	r3, r3
 800a4e6:	2b03      	cmp	r3, #3
 800a4e8:	d104      	bne.n	800a4f4 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800a4ea:	6839      	ldr	r1, [r7, #0]
 800a4ec:	6878      	ldr	r0, [r7, #4]
 800a4ee:	f000 f9bc 	bl	800a86a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a4f2:	e01d      	b.n	800a530 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	7bfa      	ldrb	r2, [r7, #15]
 800a4f8:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800a4fc:	7bfb      	ldrb	r3, [r7, #15]
 800a4fe:	4619      	mov	r1, r3
 800a500:	6878      	ldr	r0, [r7, #4]
 800a502:	f000 ff31 	bl	800b368 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800a506:	6878      	ldr	r0, [r7, #4]
 800a508:	f000 fa7a 	bl	800aa00 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800a50c:	7bfb      	ldrb	r3, [r7, #15]
 800a50e:	2b00      	cmp	r3, #0
 800a510:	d004      	beq.n	800a51c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	2202      	movs	r2, #2
 800a516:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a51a:	e009      	b.n	800a530 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	2201      	movs	r2, #1
 800a520:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a524:	e004      	b.n	800a530 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800a526:	6839      	ldr	r1, [r7, #0]
 800a528:	6878      	ldr	r0, [r7, #4]
 800a52a:	f000 f99e 	bl	800a86a <USBD_CtlError>
  }
}
 800a52e:	bf00      	nop
 800a530:	bf00      	nop
 800a532:	3710      	adds	r7, #16
 800a534:	46bd      	mov	sp, r7
 800a536:	bd80      	pop	{r7, pc}

0800a538 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a538:	b580      	push	{r7, lr}
 800a53a:	b084      	sub	sp, #16
 800a53c:	af00      	add	r7, sp, #0
 800a53e:	6078      	str	r0, [r7, #4]
 800a540:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a542:	2300      	movs	r3, #0
 800a544:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800a546:	683b      	ldr	r3, [r7, #0]
 800a548:	885b      	ldrh	r3, [r3, #2]
 800a54a:	b2da      	uxtb	r2, r3
 800a54c:	4b4e      	ldr	r3, [pc, #312]	; (800a688 <USBD_SetConfig+0x150>)
 800a54e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800a550:	4b4d      	ldr	r3, [pc, #308]	; (800a688 <USBD_SetConfig+0x150>)
 800a552:	781b      	ldrb	r3, [r3, #0]
 800a554:	2b01      	cmp	r3, #1
 800a556:	d905      	bls.n	800a564 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800a558:	6839      	ldr	r1, [r7, #0]
 800a55a:	6878      	ldr	r0, [r7, #4]
 800a55c:	f000 f985 	bl	800a86a <USBD_CtlError>
    return USBD_FAIL;
 800a560:	2303      	movs	r3, #3
 800a562:	e08c      	b.n	800a67e <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a56a:	b2db      	uxtb	r3, r3
 800a56c:	2b02      	cmp	r3, #2
 800a56e:	d002      	beq.n	800a576 <USBD_SetConfig+0x3e>
 800a570:	2b03      	cmp	r3, #3
 800a572:	d029      	beq.n	800a5c8 <USBD_SetConfig+0x90>
 800a574:	e075      	b.n	800a662 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800a576:	4b44      	ldr	r3, [pc, #272]	; (800a688 <USBD_SetConfig+0x150>)
 800a578:	781b      	ldrb	r3, [r3, #0]
 800a57a:	2b00      	cmp	r3, #0
 800a57c:	d020      	beq.n	800a5c0 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800a57e:	4b42      	ldr	r3, [pc, #264]	; (800a688 <USBD_SetConfig+0x150>)
 800a580:	781b      	ldrb	r3, [r3, #0]
 800a582:	461a      	mov	r2, r3
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800a588:	4b3f      	ldr	r3, [pc, #252]	; (800a688 <USBD_SetConfig+0x150>)
 800a58a:	781b      	ldrb	r3, [r3, #0]
 800a58c:	4619      	mov	r1, r3
 800a58e:	6878      	ldr	r0, [r7, #4]
 800a590:	f7fe ffe7 	bl	8009562 <USBD_SetClassConfig>
 800a594:	4603      	mov	r3, r0
 800a596:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800a598:	7bfb      	ldrb	r3, [r7, #15]
 800a59a:	2b00      	cmp	r3, #0
 800a59c:	d008      	beq.n	800a5b0 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800a59e:	6839      	ldr	r1, [r7, #0]
 800a5a0:	6878      	ldr	r0, [r7, #4]
 800a5a2:	f000 f962 	bl	800a86a <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	2202      	movs	r2, #2
 800a5aa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800a5ae:	e065      	b.n	800a67c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800a5b0:	6878      	ldr	r0, [r7, #4]
 800a5b2:	f000 fa25 	bl	800aa00 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	2203      	movs	r2, #3
 800a5ba:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800a5be:	e05d      	b.n	800a67c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800a5c0:	6878      	ldr	r0, [r7, #4]
 800a5c2:	f000 fa1d 	bl	800aa00 <USBD_CtlSendStatus>
      break;
 800a5c6:	e059      	b.n	800a67c <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800a5c8:	4b2f      	ldr	r3, [pc, #188]	; (800a688 <USBD_SetConfig+0x150>)
 800a5ca:	781b      	ldrb	r3, [r3, #0]
 800a5cc:	2b00      	cmp	r3, #0
 800a5ce:	d112      	bne.n	800a5f6 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	2202      	movs	r2, #2
 800a5d4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800a5d8:	4b2b      	ldr	r3, [pc, #172]	; (800a688 <USBD_SetConfig+0x150>)
 800a5da:	781b      	ldrb	r3, [r3, #0]
 800a5dc:	461a      	mov	r2, r3
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a5e2:	4b29      	ldr	r3, [pc, #164]	; (800a688 <USBD_SetConfig+0x150>)
 800a5e4:	781b      	ldrb	r3, [r3, #0]
 800a5e6:	4619      	mov	r1, r3
 800a5e8:	6878      	ldr	r0, [r7, #4]
 800a5ea:	f7fe ffd6 	bl	800959a <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800a5ee:	6878      	ldr	r0, [r7, #4]
 800a5f0:	f000 fa06 	bl	800aa00 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800a5f4:	e042      	b.n	800a67c <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800a5f6:	4b24      	ldr	r3, [pc, #144]	; (800a688 <USBD_SetConfig+0x150>)
 800a5f8:	781b      	ldrb	r3, [r3, #0]
 800a5fa:	461a      	mov	r2, r3
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	685b      	ldr	r3, [r3, #4]
 800a600:	429a      	cmp	r2, r3
 800a602:	d02a      	beq.n	800a65a <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	685b      	ldr	r3, [r3, #4]
 800a608:	b2db      	uxtb	r3, r3
 800a60a:	4619      	mov	r1, r3
 800a60c:	6878      	ldr	r0, [r7, #4]
 800a60e:	f7fe ffc4 	bl	800959a <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800a612:	4b1d      	ldr	r3, [pc, #116]	; (800a688 <USBD_SetConfig+0x150>)
 800a614:	781b      	ldrb	r3, [r3, #0]
 800a616:	461a      	mov	r2, r3
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800a61c:	4b1a      	ldr	r3, [pc, #104]	; (800a688 <USBD_SetConfig+0x150>)
 800a61e:	781b      	ldrb	r3, [r3, #0]
 800a620:	4619      	mov	r1, r3
 800a622:	6878      	ldr	r0, [r7, #4]
 800a624:	f7fe ff9d 	bl	8009562 <USBD_SetClassConfig>
 800a628:	4603      	mov	r3, r0
 800a62a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800a62c:	7bfb      	ldrb	r3, [r7, #15]
 800a62e:	2b00      	cmp	r3, #0
 800a630:	d00f      	beq.n	800a652 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800a632:	6839      	ldr	r1, [r7, #0]
 800a634:	6878      	ldr	r0, [r7, #4]
 800a636:	f000 f918 	bl	800a86a <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	685b      	ldr	r3, [r3, #4]
 800a63e:	b2db      	uxtb	r3, r3
 800a640:	4619      	mov	r1, r3
 800a642:	6878      	ldr	r0, [r7, #4]
 800a644:	f7fe ffa9 	bl	800959a <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	2202      	movs	r2, #2
 800a64c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800a650:	e014      	b.n	800a67c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800a652:	6878      	ldr	r0, [r7, #4]
 800a654:	f000 f9d4 	bl	800aa00 <USBD_CtlSendStatus>
      break;
 800a658:	e010      	b.n	800a67c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800a65a:	6878      	ldr	r0, [r7, #4]
 800a65c:	f000 f9d0 	bl	800aa00 <USBD_CtlSendStatus>
      break;
 800a660:	e00c      	b.n	800a67c <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800a662:	6839      	ldr	r1, [r7, #0]
 800a664:	6878      	ldr	r0, [r7, #4]
 800a666:	f000 f900 	bl	800a86a <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a66a:	4b07      	ldr	r3, [pc, #28]	; (800a688 <USBD_SetConfig+0x150>)
 800a66c:	781b      	ldrb	r3, [r3, #0]
 800a66e:	4619      	mov	r1, r3
 800a670:	6878      	ldr	r0, [r7, #4]
 800a672:	f7fe ff92 	bl	800959a <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800a676:	2303      	movs	r3, #3
 800a678:	73fb      	strb	r3, [r7, #15]
      break;
 800a67a:	bf00      	nop
  }

  return ret;
 800a67c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a67e:	4618      	mov	r0, r3
 800a680:	3710      	adds	r7, #16
 800a682:	46bd      	mov	sp, r7
 800a684:	bd80      	pop	{r7, pc}
 800a686:	bf00      	nop
 800a688:	200015f8 	.word	0x200015f8

0800a68c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a68c:	b580      	push	{r7, lr}
 800a68e:	b082      	sub	sp, #8
 800a690:	af00      	add	r7, sp, #0
 800a692:	6078      	str	r0, [r7, #4]
 800a694:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800a696:	683b      	ldr	r3, [r7, #0]
 800a698:	88db      	ldrh	r3, [r3, #6]
 800a69a:	2b01      	cmp	r3, #1
 800a69c:	d004      	beq.n	800a6a8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800a69e:	6839      	ldr	r1, [r7, #0]
 800a6a0:	6878      	ldr	r0, [r7, #4]
 800a6a2:	f000 f8e2 	bl	800a86a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800a6a6:	e023      	b.n	800a6f0 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a6ae:	b2db      	uxtb	r3, r3
 800a6b0:	2b02      	cmp	r3, #2
 800a6b2:	dc02      	bgt.n	800a6ba <USBD_GetConfig+0x2e>
 800a6b4:	2b00      	cmp	r3, #0
 800a6b6:	dc03      	bgt.n	800a6c0 <USBD_GetConfig+0x34>
 800a6b8:	e015      	b.n	800a6e6 <USBD_GetConfig+0x5a>
 800a6ba:	2b03      	cmp	r3, #3
 800a6bc:	d00b      	beq.n	800a6d6 <USBD_GetConfig+0x4a>
 800a6be:	e012      	b.n	800a6e6 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	2200      	movs	r2, #0
 800a6c4:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	3308      	adds	r3, #8
 800a6ca:	2201      	movs	r2, #1
 800a6cc:	4619      	mov	r1, r3
 800a6ce:	6878      	ldr	r0, [r7, #4]
 800a6d0:	f000 f93c 	bl	800a94c <USBD_CtlSendData>
        break;
 800a6d4:	e00c      	b.n	800a6f0 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	3304      	adds	r3, #4
 800a6da:	2201      	movs	r2, #1
 800a6dc:	4619      	mov	r1, r3
 800a6de:	6878      	ldr	r0, [r7, #4]
 800a6e0:	f000 f934 	bl	800a94c <USBD_CtlSendData>
        break;
 800a6e4:	e004      	b.n	800a6f0 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800a6e6:	6839      	ldr	r1, [r7, #0]
 800a6e8:	6878      	ldr	r0, [r7, #4]
 800a6ea:	f000 f8be 	bl	800a86a <USBD_CtlError>
        break;
 800a6ee:	bf00      	nop
}
 800a6f0:	bf00      	nop
 800a6f2:	3708      	adds	r7, #8
 800a6f4:	46bd      	mov	sp, r7
 800a6f6:	bd80      	pop	{r7, pc}

0800a6f8 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a6f8:	b580      	push	{r7, lr}
 800a6fa:	b082      	sub	sp, #8
 800a6fc:	af00      	add	r7, sp, #0
 800a6fe:	6078      	str	r0, [r7, #4]
 800a700:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a708:	b2db      	uxtb	r3, r3
 800a70a:	3b01      	subs	r3, #1
 800a70c:	2b02      	cmp	r3, #2
 800a70e:	d81e      	bhi.n	800a74e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800a710:	683b      	ldr	r3, [r7, #0]
 800a712:	88db      	ldrh	r3, [r3, #6]
 800a714:	2b02      	cmp	r3, #2
 800a716:	d004      	beq.n	800a722 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800a718:	6839      	ldr	r1, [r7, #0]
 800a71a:	6878      	ldr	r0, [r7, #4]
 800a71c:	f000 f8a5 	bl	800a86a <USBD_CtlError>
        break;
 800a720:	e01a      	b.n	800a758 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	2201      	movs	r2, #1
 800a726:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800a72e:	2b00      	cmp	r3, #0
 800a730:	d005      	beq.n	800a73e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	68db      	ldr	r3, [r3, #12]
 800a736:	f043 0202 	orr.w	r2, r3, #2
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	330c      	adds	r3, #12
 800a742:	2202      	movs	r2, #2
 800a744:	4619      	mov	r1, r3
 800a746:	6878      	ldr	r0, [r7, #4]
 800a748:	f000 f900 	bl	800a94c <USBD_CtlSendData>
      break;
 800a74c:	e004      	b.n	800a758 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800a74e:	6839      	ldr	r1, [r7, #0]
 800a750:	6878      	ldr	r0, [r7, #4]
 800a752:	f000 f88a 	bl	800a86a <USBD_CtlError>
      break;
 800a756:	bf00      	nop
  }
}
 800a758:	bf00      	nop
 800a75a:	3708      	adds	r7, #8
 800a75c:	46bd      	mov	sp, r7
 800a75e:	bd80      	pop	{r7, pc}

0800a760 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a760:	b580      	push	{r7, lr}
 800a762:	b082      	sub	sp, #8
 800a764:	af00      	add	r7, sp, #0
 800a766:	6078      	str	r0, [r7, #4]
 800a768:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a76a:	683b      	ldr	r3, [r7, #0]
 800a76c:	885b      	ldrh	r3, [r3, #2]
 800a76e:	2b01      	cmp	r3, #1
 800a770:	d107      	bne.n	800a782 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	2201      	movs	r2, #1
 800a776:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800a77a:	6878      	ldr	r0, [r7, #4]
 800a77c:	f000 f940 	bl	800aa00 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800a780:	e013      	b.n	800a7aa <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800a782:	683b      	ldr	r3, [r7, #0]
 800a784:	885b      	ldrh	r3, [r3, #2]
 800a786:	2b02      	cmp	r3, #2
 800a788:	d10b      	bne.n	800a7a2 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 800a78a:	683b      	ldr	r3, [r7, #0]
 800a78c:	889b      	ldrh	r3, [r3, #4]
 800a78e:	0a1b      	lsrs	r3, r3, #8
 800a790:	b29b      	uxth	r3, r3
 800a792:	b2da      	uxtb	r2, r3
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800a79a:	6878      	ldr	r0, [r7, #4]
 800a79c:	f000 f930 	bl	800aa00 <USBD_CtlSendStatus>
}
 800a7a0:	e003      	b.n	800a7aa <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800a7a2:	6839      	ldr	r1, [r7, #0]
 800a7a4:	6878      	ldr	r0, [r7, #4]
 800a7a6:	f000 f860 	bl	800a86a <USBD_CtlError>
}
 800a7aa:	bf00      	nop
 800a7ac:	3708      	adds	r7, #8
 800a7ae:	46bd      	mov	sp, r7
 800a7b0:	bd80      	pop	{r7, pc}

0800a7b2 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a7b2:	b580      	push	{r7, lr}
 800a7b4:	b082      	sub	sp, #8
 800a7b6:	af00      	add	r7, sp, #0
 800a7b8:	6078      	str	r0, [r7, #4]
 800a7ba:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a7c2:	b2db      	uxtb	r3, r3
 800a7c4:	3b01      	subs	r3, #1
 800a7c6:	2b02      	cmp	r3, #2
 800a7c8:	d80b      	bhi.n	800a7e2 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a7ca:	683b      	ldr	r3, [r7, #0]
 800a7cc:	885b      	ldrh	r3, [r3, #2]
 800a7ce:	2b01      	cmp	r3, #1
 800a7d0:	d10c      	bne.n	800a7ec <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	2200      	movs	r2, #0
 800a7d6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800a7da:	6878      	ldr	r0, [r7, #4]
 800a7dc:	f000 f910 	bl	800aa00 <USBD_CtlSendStatus>
      }
      break;
 800a7e0:	e004      	b.n	800a7ec <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800a7e2:	6839      	ldr	r1, [r7, #0]
 800a7e4:	6878      	ldr	r0, [r7, #4]
 800a7e6:	f000 f840 	bl	800a86a <USBD_CtlError>
      break;
 800a7ea:	e000      	b.n	800a7ee <USBD_ClrFeature+0x3c>
      break;
 800a7ec:	bf00      	nop
  }
}
 800a7ee:	bf00      	nop
 800a7f0:	3708      	adds	r7, #8
 800a7f2:	46bd      	mov	sp, r7
 800a7f4:	bd80      	pop	{r7, pc}

0800a7f6 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800a7f6:	b580      	push	{r7, lr}
 800a7f8:	b084      	sub	sp, #16
 800a7fa:	af00      	add	r7, sp, #0
 800a7fc:	6078      	str	r0, [r7, #4]
 800a7fe:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800a800:	683b      	ldr	r3, [r7, #0]
 800a802:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800a804:	68fb      	ldr	r3, [r7, #12]
 800a806:	781a      	ldrb	r2, [r3, #0]
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800a80c:	68fb      	ldr	r3, [r7, #12]
 800a80e:	3301      	adds	r3, #1
 800a810:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800a812:	68fb      	ldr	r3, [r7, #12]
 800a814:	781a      	ldrb	r2, [r3, #0]
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800a81a:	68fb      	ldr	r3, [r7, #12]
 800a81c:	3301      	adds	r3, #1
 800a81e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800a820:	68f8      	ldr	r0, [r7, #12]
 800a822:	f7ff fa41 	bl	8009ca8 <SWAPBYTE>
 800a826:	4603      	mov	r3, r0
 800a828:	461a      	mov	r2, r3
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800a82e:	68fb      	ldr	r3, [r7, #12]
 800a830:	3301      	adds	r3, #1
 800a832:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a834:	68fb      	ldr	r3, [r7, #12]
 800a836:	3301      	adds	r3, #1
 800a838:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800a83a:	68f8      	ldr	r0, [r7, #12]
 800a83c:	f7ff fa34 	bl	8009ca8 <SWAPBYTE>
 800a840:	4603      	mov	r3, r0
 800a842:	461a      	mov	r2, r3
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800a848:	68fb      	ldr	r3, [r7, #12]
 800a84a:	3301      	adds	r3, #1
 800a84c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a84e:	68fb      	ldr	r3, [r7, #12]
 800a850:	3301      	adds	r3, #1
 800a852:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800a854:	68f8      	ldr	r0, [r7, #12]
 800a856:	f7ff fa27 	bl	8009ca8 <SWAPBYTE>
 800a85a:	4603      	mov	r3, r0
 800a85c:	461a      	mov	r2, r3
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	80da      	strh	r2, [r3, #6]
}
 800a862:	bf00      	nop
 800a864:	3710      	adds	r7, #16
 800a866:	46bd      	mov	sp, r7
 800a868:	bd80      	pop	{r7, pc}

0800a86a <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a86a:	b580      	push	{r7, lr}
 800a86c:	b082      	sub	sp, #8
 800a86e:	af00      	add	r7, sp, #0
 800a870:	6078      	str	r0, [r7, #4]
 800a872:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800a874:	2180      	movs	r1, #128	; 0x80
 800a876:	6878      	ldr	r0, [r7, #4]
 800a878:	f000 fd0c 	bl	800b294 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800a87c:	2100      	movs	r1, #0
 800a87e:	6878      	ldr	r0, [r7, #4]
 800a880:	f000 fd08 	bl	800b294 <USBD_LL_StallEP>
}
 800a884:	bf00      	nop
 800a886:	3708      	adds	r7, #8
 800a888:	46bd      	mov	sp, r7
 800a88a:	bd80      	pop	{r7, pc}

0800a88c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800a88c:	b580      	push	{r7, lr}
 800a88e:	b086      	sub	sp, #24
 800a890:	af00      	add	r7, sp, #0
 800a892:	60f8      	str	r0, [r7, #12]
 800a894:	60b9      	str	r1, [r7, #8]
 800a896:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800a898:	2300      	movs	r3, #0
 800a89a:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800a89c:	68fb      	ldr	r3, [r7, #12]
 800a89e:	2b00      	cmp	r3, #0
 800a8a0:	d036      	beq.n	800a910 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800a8a2:	68fb      	ldr	r3, [r7, #12]
 800a8a4:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800a8a6:	6938      	ldr	r0, [r7, #16]
 800a8a8:	f000 f836 	bl	800a918 <USBD_GetLen>
 800a8ac:	4603      	mov	r3, r0
 800a8ae:	3301      	adds	r3, #1
 800a8b0:	b29b      	uxth	r3, r3
 800a8b2:	005b      	lsls	r3, r3, #1
 800a8b4:	b29a      	uxth	r2, r3
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800a8ba:	7dfb      	ldrb	r3, [r7, #23]
 800a8bc:	68ba      	ldr	r2, [r7, #8]
 800a8be:	4413      	add	r3, r2
 800a8c0:	687a      	ldr	r2, [r7, #4]
 800a8c2:	7812      	ldrb	r2, [r2, #0]
 800a8c4:	701a      	strb	r2, [r3, #0]
  idx++;
 800a8c6:	7dfb      	ldrb	r3, [r7, #23]
 800a8c8:	3301      	adds	r3, #1
 800a8ca:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800a8cc:	7dfb      	ldrb	r3, [r7, #23]
 800a8ce:	68ba      	ldr	r2, [r7, #8]
 800a8d0:	4413      	add	r3, r2
 800a8d2:	2203      	movs	r2, #3
 800a8d4:	701a      	strb	r2, [r3, #0]
  idx++;
 800a8d6:	7dfb      	ldrb	r3, [r7, #23]
 800a8d8:	3301      	adds	r3, #1
 800a8da:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800a8dc:	e013      	b.n	800a906 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800a8de:	7dfb      	ldrb	r3, [r7, #23]
 800a8e0:	68ba      	ldr	r2, [r7, #8]
 800a8e2:	4413      	add	r3, r2
 800a8e4:	693a      	ldr	r2, [r7, #16]
 800a8e6:	7812      	ldrb	r2, [r2, #0]
 800a8e8:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800a8ea:	693b      	ldr	r3, [r7, #16]
 800a8ec:	3301      	adds	r3, #1
 800a8ee:	613b      	str	r3, [r7, #16]
    idx++;
 800a8f0:	7dfb      	ldrb	r3, [r7, #23]
 800a8f2:	3301      	adds	r3, #1
 800a8f4:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800a8f6:	7dfb      	ldrb	r3, [r7, #23]
 800a8f8:	68ba      	ldr	r2, [r7, #8]
 800a8fa:	4413      	add	r3, r2
 800a8fc:	2200      	movs	r2, #0
 800a8fe:	701a      	strb	r2, [r3, #0]
    idx++;
 800a900:	7dfb      	ldrb	r3, [r7, #23]
 800a902:	3301      	adds	r3, #1
 800a904:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800a906:	693b      	ldr	r3, [r7, #16]
 800a908:	781b      	ldrb	r3, [r3, #0]
 800a90a:	2b00      	cmp	r3, #0
 800a90c:	d1e7      	bne.n	800a8de <USBD_GetString+0x52>
 800a90e:	e000      	b.n	800a912 <USBD_GetString+0x86>
    return;
 800a910:	bf00      	nop
  }
}
 800a912:	3718      	adds	r7, #24
 800a914:	46bd      	mov	sp, r7
 800a916:	bd80      	pop	{r7, pc}

0800a918 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800a918:	b480      	push	{r7}
 800a91a:	b085      	sub	sp, #20
 800a91c:	af00      	add	r7, sp, #0
 800a91e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800a920:	2300      	movs	r3, #0
 800a922:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800a928:	e005      	b.n	800a936 <USBD_GetLen+0x1e>
  {
    len++;
 800a92a:	7bfb      	ldrb	r3, [r7, #15]
 800a92c:	3301      	adds	r3, #1
 800a92e:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800a930:	68bb      	ldr	r3, [r7, #8]
 800a932:	3301      	adds	r3, #1
 800a934:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800a936:	68bb      	ldr	r3, [r7, #8]
 800a938:	781b      	ldrb	r3, [r3, #0]
 800a93a:	2b00      	cmp	r3, #0
 800a93c:	d1f5      	bne.n	800a92a <USBD_GetLen+0x12>
  }

  return len;
 800a93e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a940:	4618      	mov	r0, r3
 800a942:	3714      	adds	r7, #20
 800a944:	46bd      	mov	sp, r7
 800a946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a94a:	4770      	bx	lr

0800a94c <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800a94c:	b580      	push	{r7, lr}
 800a94e:	b084      	sub	sp, #16
 800a950:	af00      	add	r7, sp, #0
 800a952:	60f8      	str	r0, [r7, #12]
 800a954:	60b9      	str	r1, [r7, #8]
 800a956:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800a958:	68fb      	ldr	r3, [r7, #12]
 800a95a:	2202      	movs	r2, #2
 800a95c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800a960:	68fb      	ldr	r3, [r7, #12]
 800a962:	687a      	ldr	r2, [r7, #4]
 800a964:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800a966:	68fb      	ldr	r3, [r7, #12]
 800a968:	687a      	ldr	r2, [r7, #4]
 800a96a:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	68ba      	ldr	r2, [r7, #8]
 800a970:	2100      	movs	r1, #0
 800a972:	68f8      	ldr	r0, [r7, #12]
 800a974:	f000 fd17 	bl	800b3a6 <USBD_LL_Transmit>

  return USBD_OK;
 800a978:	2300      	movs	r3, #0
}
 800a97a:	4618      	mov	r0, r3
 800a97c:	3710      	adds	r7, #16
 800a97e:	46bd      	mov	sp, r7
 800a980:	bd80      	pop	{r7, pc}

0800a982 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800a982:	b580      	push	{r7, lr}
 800a984:	b084      	sub	sp, #16
 800a986:	af00      	add	r7, sp, #0
 800a988:	60f8      	str	r0, [r7, #12]
 800a98a:	60b9      	str	r1, [r7, #8]
 800a98c:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	68ba      	ldr	r2, [r7, #8]
 800a992:	2100      	movs	r1, #0
 800a994:	68f8      	ldr	r0, [r7, #12]
 800a996:	f000 fd06 	bl	800b3a6 <USBD_LL_Transmit>

  return USBD_OK;
 800a99a:	2300      	movs	r3, #0
}
 800a99c:	4618      	mov	r0, r3
 800a99e:	3710      	adds	r7, #16
 800a9a0:	46bd      	mov	sp, r7
 800a9a2:	bd80      	pop	{r7, pc}

0800a9a4 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800a9a4:	b580      	push	{r7, lr}
 800a9a6:	b084      	sub	sp, #16
 800a9a8:	af00      	add	r7, sp, #0
 800a9aa:	60f8      	str	r0, [r7, #12]
 800a9ac:	60b9      	str	r1, [r7, #8]
 800a9ae:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800a9b0:	68fb      	ldr	r3, [r7, #12]
 800a9b2:	2203      	movs	r2, #3
 800a9b4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800a9b8:	68fb      	ldr	r3, [r7, #12]
 800a9ba:	687a      	ldr	r2, [r7, #4]
 800a9bc:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800a9c0:	68fb      	ldr	r3, [r7, #12]
 800a9c2:	687a      	ldr	r2, [r7, #4]
 800a9c4:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	68ba      	ldr	r2, [r7, #8]
 800a9cc:	2100      	movs	r1, #0
 800a9ce:	68f8      	ldr	r0, [r7, #12]
 800a9d0:	f000 fd0a 	bl	800b3e8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a9d4:	2300      	movs	r3, #0
}
 800a9d6:	4618      	mov	r0, r3
 800a9d8:	3710      	adds	r7, #16
 800a9da:	46bd      	mov	sp, r7
 800a9dc:	bd80      	pop	{r7, pc}

0800a9de <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800a9de:	b580      	push	{r7, lr}
 800a9e0:	b084      	sub	sp, #16
 800a9e2:	af00      	add	r7, sp, #0
 800a9e4:	60f8      	str	r0, [r7, #12]
 800a9e6:	60b9      	str	r1, [r7, #8]
 800a9e8:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	68ba      	ldr	r2, [r7, #8]
 800a9ee:	2100      	movs	r1, #0
 800a9f0:	68f8      	ldr	r0, [r7, #12]
 800a9f2:	f000 fcf9 	bl	800b3e8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a9f6:	2300      	movs	r3, #0
}
 800a9f8:	4618      	mov	r0, r3
 800a9fa:	3710      	adds	r7, #16
 800a9fc:	46bd      	mov	sp, r7
 800a9fe:	bd80      	pop	{r7, pc}

0800aa00 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800aa00:	b580      	push	{r7, lr}
 800aa02:	b082      	sub	sp, #8
 800aa04:	af00      	add	r7, sp, #0
 800aa06:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	2204      	movs	r2, #4
 800aa0c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800aa10:	2300      	movs	r3, #0
 800aa12:	2200      	movs	r2, #0
 800aa14:	2100      	movs	r1, #0
 800aa16:	6878      	ldr	r0, [r7, #4]
 800aa18:	f000 fcc5 	bl	800b3a6 <USBD_LL_Transmit>

  return USBD_OK;
 800aa1c:	2300      	movs	r3, #0
}
 800aa1e:	4618      	mov	r0, r3
 800aa20:	3708      	adds	r7, #8
 800aa22:	46bd      	mov	sp, r7
 800aa24:	bd80      	pop	{r7, pc}

0800aa26 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800aa26:	b580      	push	{r7, lr}
 800aa28:	b082      	sub	sp, #8
 800aa2a:	af00      	add	r7, sp, #0
 800aa2c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	2205      	movs	r2, #5
 800aa32:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800aa36:	2300      	movs	r3, #0
 800aa38:	2200      	movs	r2, #0
 800aa3a:	2100      	movs	r1, #0
 800aa3c:	6878      	ldr	r0, [r7, #4]
 800aa3e:	f000 fcd3 	bl	800b3e8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800aa42:	2300      	movs	r3, #0
}
 800aa44:	4618      	mov	r0, r3
 800aa46:	3708      	adds	r7, #8
 800aa48:	46bd      	mov	sp, r7
 800aa4a:	bd80      	pop	{r7, pc}

0800aa4c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800aa4c:	b580      	push	{r7, lr}
 800aa4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceHS, &HS_Desc, DEVICE_HS) != USBD_OK)
 800aa50:	2201      	movs	r2, #1
 800aa52:	4912      	ldr	r1, [pc, #72]	; (800aa9c <MX_USB_DEVICE_Init+0x50>)
 800aa54:	4812      	ldr	r0, [pc, #72]	; (800aaa0 <MX_USB_DEVICE_Init+0x54>)
 800aa56:	f7fe fd07 	bl	8009468 <USBD_Init>
 800aa5a:	4603      	mov	r3, r0
 800aa5c:	2b00      	cmp	r3, #0
 800aa5e:	d001      	beq.n	800aa64 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800aa60:	f7f6 fdc8 	bl	80015f4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceHS, &USBD_CDC) != USBD_OK)
 800aa64:	490f      	ldr	r1, [pc, #60]	; (800aaa4 <MX_USB_DEVICE_Init+0x58>)
 800aa66:	480e      	ldr	r0, [pc, #56]	; (800aaa0 <MX_USB_DEVICE_Init+0x54>)
 800aa68:	f7fe fd2e 	bl	80094c8 <USBD_RegisterClass>
 800aa6c:	4603      	mov	r3, r0
 800aa6e:	2b00      	cmp	r3, #0
 800aa70:	d001      	beq.n	800aa76 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800aa72:	f7f6 fdbf 	bl	80015f4 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceHS, &USBD_Interface_fops_HS) != USBD_OK)
 800aa76:	490c      	ldr	r1, [pc, #48]	; (800aaa8 <MX_USB_DEVICE_Init+0x5c>)
 800aa78:	4809      	ldr	r0, [pc, #36]	; (800aaa0 <MX_USB_DEVICE_Init+0x54>)
 800aa7a:	f7fe fc1f 	bl	80092bc <USBD_CDC_RegisterInterface>
 800aa7e:	4603      	mov	r3, r0
 800aa80:	2b00      	cmp	r3, #0
 800aa82:	d001      	beq.n	800aa88 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800aa84:	f7f6 fdb6 	bl	80015f4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceHS) != USBD_OK)
 800aa88:	4805      	ldr	r0, [pc, #20]	; (800aaa0 <MX_USB_DEVICE_Init+0x54>)
 800aa8a:	f7fe fd53 	bl	8009534 <USBD_Start>
 800aa8e:	4603      	mov	r3, r0
 800aa90:	2b00      	cmp	r3, #0
 800aa92:	d001      	beq.n	800aa98 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800aa94:	f7f6 fdae 	bl	80015f4 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800aa98:	bf00      	nop
 800aa9a:	bd80      	pop	{r7, pc}
 800aa9c:	200000bc 	.word	0x200000bc
 800aaa0:	200015fc 	.word	0x200015fc
 800aaa4:	20000028 	.word	0x20000028
 800aaa8:	200000a8 	.word	0x200000a8

0800aaac <CDC_Init_HS>:
/**
  * @brief  Initializes the CDC media low layer over the USB HS IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_HS(void)
{
 800aaac:	b580      	push	{r7, lr}
 800aaae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, UserTxBufferHS, 0);
 800aab0:	2200      	movs	r2, #0
 800aab2:	4905      	ldr	r1, [pc, #20]	; (800aac8 <CDC_Init_HS+0x1c>)
 800aab4:	4805      	ldr	r0, [pc, #20]	; (800aacc <CDC_Init_HS+0x20>)
 800aab6:	f7fe fc1b 	bl	80092f0 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, UserRxBufferHS);
 800aaba:	4905      	ldr	r1, [pc, #20]	; (800aad0 <CDC_Init_HS+0x24>)
 800aabc:	4803      	ldr	r0, [pc, #12]	; (800aacc <CDC_Init_HS+0x20>)
 800aabe:	f7fe fc39 	bl	8009334 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800aac2:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 800aac4:	4618      	mov	r0, r3
 800aac6:	bd80      	pop	{r7, pc}
 800aac8:	200020d8 	.word	0x200020d8
 800aacc:	200015fc 	.word	0x200015fc
 800aad0:	200018d8 	.word	0x200018d8

0800aad4 <CDC_DeInit_HS>:
  * @brief  DeInitializes the CDC media low layer
  * @param  None
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_HS(void)
{
 800aad4:	b480      	push	{r7}
 800aad6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 9 */
  return (USBD_OK);
 800aad8:	2300      	movs	r3, #0
  /* USER CODE END 9 */
}
 800aada:	4618      	mov	r0, r3
 800aadc:	46bd      	mov	sp, r7
 800aade:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aae2:	4770      	bx	lr

0800aae4 <CDC_Control_HS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_HS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800aae4:	b480      	push	{r7}
 800aae6:	b083      	sub	sp, #12
 800aae8:	af00      	add	r7, sp, #0
 800aaea:	4603      	mov	r3, r0
 800aaec:	6039      	str	r1, [r7, #0]
 800aaee:	71fb      	strb	r3, [r7, #7]
 800aaf0:	4613      	mov	r3, r2
 800aaf2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 10 */
  switch(cmd)
 800aaf4:	79fb      	ldrb	r3, [r7, #7]
 800aaf6:	2b23      	cmp	r3, #35	; 0x23
 800aaf8:	d84a      	bhi.n	800ab90 <CDC_Control_HS+0xac>
 800aafa:	a201      	add	r2, pc, #4	; (adr r2, 800ab00 <CDC_Control_HS+0x1c>)
 800aafc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab00:	0800ab91 	.word	0x0800ab91
 800ab04:	0800ab91 	.word	0x0800ab91
 800ab08:	0800ab91 	.word	0x0800ab91
 800ab0c:	0800ab91 	.word	0x0800ab91
 800ab10:	0800ab91 	.word	0x0800ab91
 800ab14:	0800ab91 	.word	0x0800ab91
 800ab18:	0800ab91 	.word	0x0800ab91
 800ab1c:	0800ab91 	.word	0x0800ab91
 800ab20:	0800ab91 	.word	0x0800ab91
 800ab24:	0800ab91 	.word	0x0800ab91
 800ab28:	0800ab91 	.word	0x0800ab91
 800ab2c:	0800ab91 	.word	0x0800ab91
 800ab30:	0800ab91 	.word	0x0800ab91
 800ab34:	0800ab91 	.word	0x0800ab91
 800ab38:	0800ab91 	.word	0x0800ab91
 800ab3c:	0800ab91 	.word	0x0800ab91
 800ab40:	0800ab91 	.word	0x0800ab91
 800ab44:	0800ab91 	.word	0x0800ab91
 800ab48:	0800ab91 	.word	0x0800ab91
 800ab4c:	0800ab91 	.word	0x0800ab91
 800ab50:	0800ab91 	.word	0x0800ab91
 800ab54:	0800ab91 	.word	0x0800ab91
 800ab58:	0800ab91 	.word	0x0800ab91
 800ab5c:	0800ab91 	.word	0x0800ab91
 800ab60:	0800ab91 	.word	0x0800ab91
 800ab64:	0800ab91 	.word	0x0800ab91
 800ab68:	0800ab91 	.word	0x0800ab91
 800ab6c:	0800ab91 	.word	0x0800ab91
 800ab70:	0800ab91 	.word	0x0800ab91
 800ab74:	0800ab91 	.word	0x0800ab91
 800ab78:	0800ab91 	.word	0x0800ab91
 800ab7c:	0800ab91 	.word	0x0800ab91
 800ab80:	0800ab91 	.word	0x0800ab91
 800ab84:	0800ab91 	.word	0x0800ab91
 800ab88:	0800ab91 	.word	0x0800ab91
 800ab8c:	0800ab91 	.word	0x0800ab91
  case CDC_SEND_BREAK:

    break;

  default:
    break;
 800ab90:	bf00      	nop
  }

  return (USBD_OK);
 800ab92:	2300      	movs	r3, #0
  /* USER CODE END 10 */
}
 800ab94:	4618      	mov	r0, r3
 800ab96:	370c      	adds	r7, #12
 800ab98:	46bd      	mov	sp, r7
 800ab9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab9e:	4770      	bx	lr

0800aba0 <CDC_Receive_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAILL
  */
static int8_t CDC_Receive_HS(uint8_t* Buf, uint32_t *Len)
{
 800aba0:	b580      	push	{r7, lr}
 800aba2:	b082      	sub	sp, #8
 800aba4:	af00      	add	r7, sp, #0
 800aba6:	6078      	str	r0, [r7, #4]
 800aba8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 11 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, &Buf[0]);
 800abaa:	6879      	ldr	r1, [r7, #4]
 800abac:	4818      	ldr	r0, [pc, #96]	; (800ac10 <CDC_Receive_HS+0x70>)
 800abae:	f7fe fbc1 	bl	8009334 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceHS);
 800abb2:	4817      	ldr	r0, [pc, #92]	; (800ac10 <CDC_Receive_HS+0x70>)
 800abb4:	f7fe fc22 	bl	80093fc <USBD_CDC_ReceivePacket>
  // Put usb data into usb buffer
  if((RF_transmit_buff_offset + *Len) > sizeof(RF_transmit_buffer)) RF_transmit_buff_offset = 0;
 800abb8:	4b16      	ldr	r3, [pc, #88]	; (800ac14 <CDC_Receive_HS+0x74>)
 800abba:	781b      	ldrb	r3, [r3, #0]
 800abbc:	461a      	mov	r2, r3
 800abbe:	683b      	ldr	r3, [r7, #0]
 800abc0:	681b      	ldr	r3, [r3, #0]
 800abc2:	4413      	add	r3, r2
 800abc4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800abc8:	d902      	bls.n	800abd0 <CDC_Receive_HS+0x30>
 800abca:	4b12      	ldr	r3, [pc, #72]	; (800ac14 <CDC_Receive_HS+0x74>)
 800abcc:	2200      	movs	r2, #0
 800abce:	701a      	strb	r2, [r3, #0]
  memcpy(&RF_transmit_buffer[RF_transmit_buff_offset], Buf, *Len);  // copy the data to the RF_transmit_buffer
 800abd0:	4b10      	ldr	r3, [pc, #64]	; (800ac14 <CDC_Receive_HS+0x74>)
 800abd2:	781b      	ldrb	r3, [r3, #0]
 800abd4:	461a      	mov	r2, r3
 800abd6:	4b10      	ldr	r3, [pc, #64]	; (800ac18 <CDC_Receive_HS+0x78>)
 800abd8:	18d0      	adds	r0, r2, r3
 800abda:	683b      	ldr	r3, [r7, #0]
 800abdc:	681b      	ldr	r3, [r3, #0]
 800abde:	461a      	mov	r2, r3
 800abe0:	6879      	ldr	r1, [r7, #4]
 800abe2:	f000 fcb3 	bl	800b54c <memcpy>
  memset(Buf, '\0', *Len);   // clear the Buf
 800abe6:	683b      	ldr	r3, [r7, #0]
 800abe8:	681b      	ldr	r3, [r3, #0]
 800abea:	461a      	mov	r2, r3
 800abec:	2100      	movs	r1, #0
 800abee:	6878      	ldr	r0, [r7, #4]
 800abf0:	f000 fcba 	bl	800b568 <memset>
  RF_transmit_buff_offset += *Len;
 800abf4:	683b      	ldr	r3, [r7, #0]
 800abf6:	681b      	ldr	r3, [r3, #0]
 800abf8:	b2da      	uxtb	r2, r3
 800abfa:	4b06      	ldr	r3, [pc, #24]	; (800ac14 <CDC_Receive_HS+0x74>)
 800abfc:	781b      	ldrb	r3, [r3, #0]
 800abfe:	4413      	add	r3, r2
 800ac00:	b2da      	uxtb	r2, r3
 800ac02:	4b04      	ldr	r3, [pc, #16]	; (800ac14 <CDC_Receive_HS+0x74>)
 800ac04:	701a      	strb	r2, [r3, #0]
  return (USBD_OK);
 800ac06:	2300      	movs	r3, #0
  /* USER CODE END 11 */
}
 800ac08:	4618      	mov	r0, r3
 800ac0a:	3708      	adds	r7, #8
 800ac0c:	46bd      	mov	sp, r7
 800ac0e:	bd80      	pop	{r7, pc}
 800ac10:	200015fc 	.word	0x200015fc
 800ac14:	200015b8 	.word	0x200015b8
 800ac18:	200013b8 	.word	0x200013b8

0800ac1c <CDC_Transmit_HS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_HS(uint8_t* Buf, uint16_t Len)
{
 800ac1c:	b580      	push	{r7, lr}
 800ac1e:	b084      	sub	sp, #16
 800ac20:	af00      	add	r7, sp, #0
 800ac22:	6078      	str	r0, [r7, #4]
 800ac24:	460b      	mov	r3, r1
 800ac26:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800ac28:	2300      	movs	r3, #0
 800ac2a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 12 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceHS.pClassData;
 800ac2c:	4b0d      	ldr	r3, [pc, #52]	; (800ac64 <CDC_Transmit_HS+0x48>)
 800ac2e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ac32:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800ac34:	68bb      	ldr	r3, [r7, #8]
 800ac36:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800ac3a:	2b00      	cmp	r3, #0
 800ac3c:	d001      	beq.n	800ac42 <CDC_Transmit_HS+0x26>
    return USBD_BUSY;
 800ac3e:	2301      	movs	r3, #1
 800ac40:	e00b      	b.n	800ac5a <CDC_Transmit_HS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, Buf, Len);
 800ac42:	887b      	ldrh	r3, [r7, #2]
 800ac44:	461a      	mov	r2, r3
 800ac46:	6879      	ldr	r1, [r7, #4]
 800ac48:	4806      	ldr	r0, [pc, #24]	; (800ac64 <CDC_Transmit_HS+0x48>)
 800ac4a:	f7fe fb51 	bl	80092f0 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceHS);
 800ac4e:	4805      	ldr	r0, [pc, #20]	; (800ac64 <CDC_Transmit_HS+0x48>)
 800ac50:	f7fe fb8e 	bl	8009370 <USBD_CDC_TransmitPacket>
 800ac54:	4603      	mov	r3, r0
 800ac56:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 12 */
  return result;
 800ac58:	7bfb      	ldrb	r3, [r7, #15]
}
 800ac5a:	4618      	mov	r0, r3
 800ac5c:	3710      	adds	r7, #16
 800ac5e:	46bd      	mov	sp, r7
 800ac60:	bd80      	pop	{r7, pc}
 800ac62:	bf00      	nop
 800ac64:	200015fc 	.word	0x200015fc

0800ac68 <CDC_TransmitCplt_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_HS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800ac68:	b480      	push	{r7}
 800ac6a:	b087      	sub	sp, #28
 800ac6c:	af00      	add	r7, sp, #0
 800ac6e:	60f8      	str	r0, [r7, #12]
 800ac70:	60b9      	str	r1, [r7, #8]
 800ac72:	4613      	mov	r3, r2
 800ac74:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800ac76:	2300      	movs	r3, #0
 800ac78:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 14 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 14 */
  return result;
 800ac7a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ac7e:	4618      	mov	r0, r3
 800ac80:	371c      	adds	r7, #28
 800ac82:	46bd      	mov	sp, r7
 800ac84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac88:	4770      	bx	lr
	...

0800ac8c <USBD_HS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ac8c:	b480      	push	{r7}
 800ac8e:	b083      	sub	sp, #12
 800ac90:	af00      	add	r7, sp, #0
 800ac92:	4603      	mov	r3, r0
 800ac94:	6039      	str	r1, [r7, #0]
 800ac96:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_HS_DeviceDesc);
 800ac98:	683b      	ldr	r3, [r7, #0]
 800ac9a:	2212      	movs	r2, #18
 800ac9c:	801a      	strh	r2, [r3, #0]
  return USBD_HS_DeviceDesc;
 800ac9e:	4b03      	ldr	r3, [pc, #12]	; (800acac <USBD_HS_DeviceDescriptor+0x20>)
}
 800aca0:	4618      	mov	r0, r3
 800aca2:	370c      	adds	r7, #12
 800aca4:	46bd      	mov	sp, r7
 800aca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acaa:	4770      	bx	lr
 800acac:	200000d8 	.word	0x200000d8

0800acb0 <USBD_HS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800acb0:	b480      	push	{r7}
 800acb2:	b083      	sub	sp, #12
 800acb4:	af00      	add	r7, sp, #0
 800acb6:	4603      	mov	r3, r0
 800acb8:	6039      	str	r1, [r7, #0]
 800acba:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800acbc:	683b      	ldr	r3, [r7, #0]
 800acbe:	2204      	movs	r2, #4
 800acc0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800acc2:	4b03      	ldr	r3, [pc, #12]	; (800acd0 <USBD_HS_LangIDStrDescriptor+0x20>)
}
 800acc4:	4618      	mov	r0, r3
 800acc6:	370c      	adds	r7, #12
 800acc8:	46bd      	mov	sp, r7
 800acca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acce:	4770      	bx	lr
 800acd0:	200000ec 	.word	0x200000ec

0800acd4 <USBD_HS_ProductStrDescriptor>:
  * @param  speed : current device speed
  * @param  length : pointer to data length variable
  * @retval pointer to descriptor buffer
  */
uint8_t * USBD_HS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800acd4:	b580      	push	{r7, lr}
 800acd6:	b082      	sub	sp, #8
 800acd8:	af00      	add	r7, sp, #0
 800acda:	4603      	mov	r3, r0
 800acdc:	6039      	str	r1, [r7, #0]
 800acde:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800ace0:	79fb      	ldrb	r3, [r7, #7]
 800ace2:	2b00      	cmp	r3, #0
 800ace4:	d105      	bne.n	800acf2 <USBD_HS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 800ace6:	683a      	ldr	r2, [r7, #0]
 800ace8:	4907      	ldr	r1, [pc, #28]	; (800ad08 <USBD_HS_ProductStrDescriptor+0x34>)
 800acea:	4808      	ldr	r0, [pc, #32]	; (800ad0c <USBD_HS_ProductStrDescriptor+0x38>)
 800acec:	f7ff fdce 	bl	800a88c <USBD_GetString>
 800acf0:	e004      	b.n	800acfc <USBD_HS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 800acf2:	683a      	ldr	r2, [r7, #0]
 800acf4:	4904      	ldr	r1, [pc, #16]	; (800ad08 <USBD_HS_ProductStrDescriptor+0x34>)
 800acf6:	4805      	ldr	r0, [pc, #20]	; (800ad0c <USBD_HS_ProductStrDescriptor+0x38>)
 800acf8:	f7ff fdc8 	bl	800a88c <USBD_GetString>
  }
  return USBD_StrDesc;
 800acfc:	4b02      	ldr	r3, [pc, #8]	; (800ad08 <USBD_HS_ProductStrDescriptor+0x34>)
}
 800acfe:	4618      	mov	r0, r3
 800ad00:	3708      	adds	r7, #8
 800ad02:	46bd      	mov	sp, r7
 800ad04:	bd80      	pop	{r7, pc}
 800ad06:	bf00      	nop
 800ad08:	200028d8 	.word	0x200028d8
 800ad0c:	0800be2c 	.word	0x0800be2c

0800ad10 <USBD_HS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ad10:	b580      	push	{r7, lr}
 800ad12:	b082      	sub	sp, #8
 800ad14:	af00      	add	r7, sp, #0
 800ad16:	4603      	mov	r3, r0
 800ad18:	6039      	str	r1, [r7, #0]
 800ad1a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800ad1c:	683a      	ldr	r2, [r7, #0]
 800ad1e:	4904      	ldr	r1, [pc, #16]	; (800ad30 <USBD_HS_ManufacturerStrDescriptor+0x20>)
 800ad20:	4804      	ldr	r0, [pc, #16]	; (800ad34 <USBD_HS_ManufacturerStrDescriptor+0x24>)
 800ad22:	f7ff fdb3 	bl	800a88c <USBD_GetString>
  return USBD_StrDesc;
 800ad26:	4b02      	ldr	r3, [pc, #8]	; (800ad30 <USBD_HS_ManufacturerStrDescriptor+0x20>)
}
 800ad28:	4618      	mov	r0, r3
 800ad2a:	3708      	adds	r7, #8
 800ad2c:	46bd      	mov	sp, r7
 800ad2e:	bd80      	pop	{r7, pc}
 800ad30:	200028d8 	.word	0x200028d8
 800ad34:	0800be44 	.word	0x0800be44

0800ad38 <USBD_HS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ad38:	b580      	push	{r7, lr}
 800ad3a:	b082      	sub	sp, #8
 800ad3c:	af00      	add	r7, sp, #0
 800ad3e:	4603      	mov	r3, r0
 800ad40:	6039      	str	r1, [r7, #0]
 800ad42:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800ad44:	683b      	ldr	r3, [r7, #0]
 800ad46:	221a      	movs	r2, #26
 800ad48:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800ad4a:	f000 f843 	bl	800add4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_HS_SerialStrDescriptor */

  /* USER CODE END USBD_HS_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 800ad4e:	4b02      	ldr	r3, [pc, #8]	; (800ad58 <USBD_HS_SerialStrDescriptor+0x20>)
}
 800ad50:	4618      	mov	r0, r3
 800ad52:	3708      	adds	r7, #8
 800ad54:	46bd      	mov	sp, r7
 800ad56:	bd80      	pop	{r7, pc}
 800ad58:	200000f0 	.word	0x200000f0

0800ad5c <USBD_HS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ad5c:	b580      	push	{r7, lr}
 800ad5e:	b082      	sub	sp, #8
 800ad60:	af00      	add	r7, sp, #0
 800ad62:	4603      	mov	r3, r0
 800ad64:	6039      	str	r1, [r7, #0]
 800ad66:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800ad68:	79fb      	ldrb	r3, [r7, #7]
 800ad6a:	2b00      	cmp	r3, #0
 800ad6c:	d105      	bne.n	800ad7a <USBD_HS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 800ad6e:	683a      	ldr	r2, [r7, #0]
 800ad70:	4907      	ldr	r1, [pc, #28]	; (800ad90 <USBD_HS_ConfigStrDescriptor+0x34>)
 800ad72:	4808      	ldr	r0, [pc, #32]	; (800ad94 <USBD_HS_ConfigStrDescriptor+0x38>)
 800ad74:	f7ff fd8a 	bl	800a88c <USBD_GetString>
 800ad78:	e004      	b.n	800ad84 <USBD_HS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 800ad7a:	683a      	ldr	r2, [r7, #0]
 800ad7c:	4904      	ldr	r1, [pc, #16]	; (800ad90 <USBD_HS_ConfigStrDescriptor+0x34>)
 800ad7e:	4805      	ldr	r0, [pc, #20]	; (800ad94 <USBD_HS_ConfigStrDescriptor+0x38>)
 800ad80:	f7ff fd84 	bl	800a88c <USBD_GetString>
  }
  return USBD_StrDesc;
 800ad84:	4b02      	ldr	r3, [pc, #8]	; (800ad90 <USBD_HS_ConfigStrDescriptor+0x34>)
}
 800ad86:	4618      	mov	r0, r3
 800ad88:	3708      	adds	r7, #8
 800ad8a:	46bd      	mov	sp, r7
 800ad8c:	bd80      	pop	{r7, pc}
 800ad8e:	bf00      	nop
 800ad90:	200028d8 	.word	0x200028d8
 800ad94:	0800be58 	.word	0x0800be58

0800ad98 <USBD_HS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ad98:	b580      	push	{r7, lr}
 800ad9a:	b082      	sub	sp, #8
 800ad9c:	af00      	add	r7, sp, #0
 800ad9e:	4603      	mov	r3, r0
 800ada0:	6039      	str	r1, [r7, #0]
 800ada2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800ada4:	79fb      	ldrb	r3, [r7, #7]
 800ada6:	2b00      	cmp	r3, #0
 800ada8:	d105      	bne.n	800adb6 <USBD_HS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 800adaa:	683a      	ldr	r2, [r7, #0]
 800adac:	4907      	ldr	r1, [pc, #28]	; (800adcc <USBD_HS_InterfaceStrDescriptor+0x34>)
 800adae:	4808      	ldr	r0, [pc, #32]	; (800add0 <USBD_HS_InterfaceStrDescriptor+0x38>)
 800adb0:	f7ff fd6c 	bl	800a88c <USBD_GetString>
 800adb4:	e004      	b.n	800adc0 <USBD_HS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 800adb6:	683a      	ldr	r2, [r7, #0]
 800adb8:	4904      	ldr	r1, [pc, #16]	; (800adcc <USBD_HS_InterfaceStrDescriptor+0x34>)
 800adba:	4805      	ldr	r0, [pc, #20]	; (800add0 <USBD_HS_InterfaceStrDescriptor+0x38>)
 800adbc:	f7ff fd66 	bl	800a88c <USBD_GetString>
  }
  return USBD_StrDesc;
 800adc0:	4b02      	ldr	r3, [pc, #8]	; (800adcc <USBD_HS_InterfaceStrDescriptor+0x34>)
}
 800adc2:	4618      	mov	r0, r3
 800adc4:	3708      	adds	r7, #8
 800adc6:	46bd      	mov	sp, r7
 800adc8:	bd80      	pop	{r7, pc}
 800adca:	bf00      	nop
 800adcc:	200028d8 	.word	0x200028d8
 800add0:	0800be64 	.word	0x0800be64

0800add4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800add4:	b580      	push	{r7, lr}
 800add6:	b084      	sub	sp, #16
 800add8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800adda:	4b0f      	ldr	r3, [pc, #60]	; (800ae18 <Get_SerialNum+0x44>)
 800addc:	681b      	ldr	r3, [r3, #0]
 800adde:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800ade0:	4b0e      	ldr	r3, [pc, #56]	; (800ae1c <Get_SerialNum+0x48>)
 800ade2:	681b      	ldr	r3, [r3, #0]
 800ade4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800ade6:	4b0e      	ldr	r3, [pc, #56]	; (800ae20 <Get_SerialNum+0x4c>)
 800ade8:	681b      	ldr	r3, [r3, #0]
 800adea:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800adec:	68fa      	ldr	r2, [r7, #12]
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	4413      	add	r3, r2
 800adf2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800adf4:	68fb      	ldr	r3, [r7, #12]
 800adf6:	2b00      	cmp	r3, #0
 800adf8:	d009      	beq.n	800ae0e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800adfa:	2208      	movs	r2, #8
 800adfc:	4909      	ldr	r1, [pc, #36]	; (800ae24 <Get_SerialNum+0x50>)
 800adfe:	68f8      	ldr	r0, [r7, #12]
 800ae00:	f000 f814 	bl	800ae2c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800ae04:	2204      	movs	r2, #4
 800ae06:	4908      	ldr	r1, [pc, #32]	; (800ae28 <Get_SerialNum+0x54>)
 800ae08:	68b8      	ldr	r0, [r7, #8]
 800ae0a:	f000 f80f 	bl	800ae2c <IntToUnicode>
  }
}
 800ae0e:	bf00      	nop
 800ae10:	3710      	adds	r7, #16
 800ae12:	46bd      	mov	sp, r7
 800ae14:	bd80      	pop	{r7, pc}
 800ae16:	bf00      	nop
 800ae18:	1fff7a10 	.word	0x1fff7a10
 800ae1c:	1fff7a14 	.word	0x1fff7a14
 800ae20:	1fff7a18 	.word	0x1fff7a18
 800ae24:	200000f2 	.word	0x200000f2
 800ae28:	20000102 	.word	0x20000102

0800ae2c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800ae2c:	b480      	push	{r7}
 800ae2e:	b087      	sub	sp, #28
 800ae30:	af00      	add	r7, sp, #0
 800ae32:	60f8      	str	r0, [r7, #12]
 800ae34:	60b9      	str	r1, [r7, #8]
 800ae36:	4613      	mov	r3, r2
 800ae38:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800ae3a:	2300      	movs	r3, #0
 800ae3c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800ae3e:	2300      	movs	r3, #0
 800ae40:	75fb      	strb	r3, [r7, #23]
 800ae42:	e027      	b.n	800ae94 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800ae44:	68fb      	ldr	r3, [r7, #12]
 800ae46:	0f1b      	lsrs	r3, r3, #28
 800ae48:	2b09      	cmp	r3, #9
 800ae4a:	d80b      	bhi.n	800ae64 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800ae4c:	68fb      	ldr	r3, [r7, #12]
 800ae4e:	0f1b      	lsrs	r3, r3, #28
 800ae50:	b2da      	uxtb	r2, r3
 800ae52:	7dfb      	ldrb	r3, [r7, #23]
 800ae54:	005b      	lsls	r3, r3, #1
 800ae56:	4619      	mov	r1, r3
 800ae58:	68bb      	ldr	r3, [r7, #8]
 800ae5a:	440b      	add	r3, r1
 800ae5c:	3230      	adds	r2, #48	; 0x30
 800ae5e:	b2d2      	uxtb	r2, r2
 800ae60:	701a      	strb	r2, [r3, #0]
 800ae62:	e00a      	b.n	800ae7a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800ae64:	68fb      	ldr	r3, [r7, #12]
 800ae66:	0f1b      	lsrs	r3, r3, #28
 800ae68:	b2da      	uxtb	r2, r3
 800ae6a:	7dfb      	ldrb	r3, [r7, #23]
 800ae6c:	005b      	lsls	r3, r3, #1
 800ae6e:	4619      	mov	r1, r3
 800ae70:	68bb      	ldr	r3, [r7, #8]
 800ae72:	440b      	add	r3, r1
 800ae74:	3237      	adds	r2, #55	; 0x37
 800ae76:	b2d2      	uxtb	r2, r2
 800ae78:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800ae7a:	68fb      	ldr	r3, [r7, #12]
 800ae7c:	011b      	lsls	r3, r3, #4
 800ae7e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800ae80:	7dfb      	ldrb	r3, [r7, #23]
 800ae82:	005b      	lsls	r3, r3, #1
 800ae84:	3301      	adds	r3, #1
 800ae86:	68ba      	ldr	r2, [r7, #8]
 800ae88:	4413      	add	r3, r2
 800ae8a:	2200      	movs	r2, #0
 800ae8c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800ae8e:	7dfb      	ldrb	r3, [r7, #23]
 800ae90:	3301      	adds	r3, #1
 800ae92:	75fb      	strb	r3, [r7, #23]
 800ae94:	7dfa      	ldrb	r2, [r7, #23]
 800ae96:	79fb      	ldrb	r3, [r7, #7]
 800ae98:	429a      	cmp	r2, r3
 800ae9a:	d3d3      	bcc.n	800ae44 <IntToUnicode+0x18>
  }
}
 800ae9c:	bf00      	nop
 800ae9e:	bf00      	nop
 800aea0:	371c      	adds	r7, #28
 800aea2:	46bd      	mov	sp, r7
 800aea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aea8:	4770      	bx	lr
	...

0800aeac <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800aeac:	b580      	push	{r7, lr}
 800aeae:	b08a      	sub	sp, #40	; 0x28
 800aeb0:	af00      	add	r7, sp, #0
 800aeb2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800aeb4:	f107 0314 	add.w	r3, r7, #20
 800aeb8:	2200      	movs	r2, #0
 800aeba:	601a      	str	r2, [r3, #0]
 800aebc:	605a      	str	r2, [r3, #4]
 800aebe:	609a      	str	r2, [r3, #8]
 800aec0:	60da      	str	r2, [r3, #12]
 800aec2:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_HS)
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	681b      	ldr	r3, [r3, #0]
 800aec8:	4a1d      	ldr	r2, [pc, #116]	; (800af40 <HAL_PCD_MspInit+0x94>)
 800aeca:	4293      	cmp	r3, r2
 800aecc:	d134      	bne.n	800af38 <HAL_PCD_MspInit+0x8c>
  {
  /* USER CODE BEGIN USB_OTG_HS_MspInit 0 */

  /* USER CODE END USB_OTG_HS_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800aece:	2300      	movs	r3, #0
 800aed0:	613b      	str	r3, [r7, #16]
 800aed2:	4b1c      	ldr	r3, [pc, #112]	; (800af44 <HAL_PCD_MspInit+0x98>)
 800aed4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aed6:	4a1b      	ldr	r2, [pc, #108]	; (800af44 <HAL_PCD_MspInit+0x98>)
 800aed8:	f043 0302 	orr.w	r3, r3, #2
 800aedc:	6313      	str	r3, [r2, #48]	; 0x30
 800aede:	4b19      	ldr	r3, [pc, #100]	; (800af44 <HAL_PCD_MspInit+0x98>)
 800aee0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aee2:	f003 0302 	and.w	r3, r3, #2
 800aee6:	613b      	str	r3, [r7, #16]
 800aee8:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_HS GPIO Configuration
    PB14     ------> USB_OTG_HS_DM
    PB15     ------> USB_OTG_HS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 800aeea:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800aeee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800aef0:	2302      	movs	r3, #2
 800aef2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800aef4:	2300      	movs	r3, #0
 800aef6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800aef8:	2303      	movs	r3, #3
 800aefa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 800aefc:	230c      	movs	r3, #12
 800aefe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800af00:	f107 0314 	add.w	r3, r7, #20
 800af04:	4619      	mov	r1, r3
 800af06:	4810      	ldr	r0, [pc, #64]	; (800af48 <HAL_PCD_MspInit+0x9c>)
 800af08:	f7f7 fc0a 	bl	8002720 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 800af0c:	2300      	movs	r3, #0
 800af0e:	60fb      	str	r3, [r7, #12]
 800af10:	4b0c      	ldr	r3, [pc, #48]	; (800af44 <HAL_PCD_MspInit+0x98>)
 800af12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800af14:	4a0b      	ldr	r2, [pc, #44]	; (800af44 <HAL_PCD_MspInit+0x98>)
 800af16:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800af1a:	6313      	str	r3, [r2, #48]	; 0x30
 800af1c:	4b09      	ldr	r3, [pc, #36]	; (800af44 <HAL_PCD_MspInit+0x98>)
 800af1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800af20:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800af24:	60fb      	str	r3, [r7, #12]
 800af26:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 1, 0);
 800af28:	2200      	movs	r2, #0
 800af2a:	2101      	movs	r1, #1
 800af2c:	204d      	movs	r0, #77	; 0x4d
 800af2e:	f7f6 ffbe 	bl	8001eae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 800af32:	204d      	movs	r0, #77	; 0x4d
 800af34:	f7f6 ffd7 	bl	8001ee6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 800af38:	bf00      	nop
 800af3a:	3728      	adds	r7, #40	; 0x28
 800af3c:	46bd      	mov	sp, r7
 800af3e:	bd80      	pop	{r7, pc}
 800af40:	40040000 	.word	0x40040000
 800af44:	40023800 	.word	0x40023800
 800af48:	40020400 	.word	0x40020400

0800af4c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800af4c:	b580      	push	{r7, lr}
 800af4e:	b082      	sub	sp, #8
 800af50:	af00      	add	r7, sp, #0
 800af52:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800af60:	4619      	mov	r1, r3
 800af62:	4610      	mov	r0, r2
 800af64:	f7fe fb33 	bl	80095ce <USBD_LL_SetupStage>
}
 800af68:	bf00      	nop
 800af6a:	3708      	adds	r7, #8
 800af6c:	46bd      	mov	sp, r7
 800af6e:	bd80      	pop	{r7, pc}

0800af70 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800af70:	b580      	push	{r7, lr}
 800af72:	b082      	sub	sp, #8
 800af74:	af00      	add	r7, sp, #0
 800af76:	6078      	str	r0, [r7, #4]
 800af78:	460b      	mov	r3, r1
 800af7a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800af82:	78fa      	ldrb	r2, [r7, #3]
 800af84:	6879      	ldr	r1, [r7, #4]
 800af86:	4613      	mov	r3, r2
 800af88:	00db      	lsls	r3, r3, #3
 800af8a:	4413      	add	r3, r2
 800af8c:	009b      	lsls	r3, r3, #2
 800af8e:	440b      	add	r3, r1
 800af90:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800af94:	681a      	ldr	r2, [r3, #0]
 800af96:	78fb      	ldrb	r3, [r7, #3]
 800af98:	4619      	mov	r1, r3
 800af9a:	f7fe fb6d 	bl	8009678 <USBD_LL_DataOutStage>
}
 800af9e:	bf00      	nop
 800afa0:	3708      	adds	r7, #8
 800afa2:	46bd      	mov	sp, r7
 800afa4:	bd80      	pop	{r7, pc}

0800afa6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800afa6:	b580      	push	{r7, lr}
 800afa8:	b082      	sub	sp, #8
 800afaa:	af00      	add	r7, sp, #0
 800afac:	6078      	str	r0, [r7, #4]
 800afae:	460b      	mov	r3, r1
 800afb0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800afb8:	78fa      	ldrb	r2, [r7, #3]
 800afba:	6879      	ldr	r1, [r7, #4]
 800afbc:	4613      	mov	r3, r2
 800afbe:	00db      	lsls	r3, r3, #3
 800afc0:	4413      	add	r3, r2
 800afc2:	009b      	lsls	r3, r3, #2
 800afc4:	440b      	add	r3, r1
 800afc6:	334c      	adds	r3, #76	; 0x4c
 800afc8:	681a      	ldr	r2, [r3, #0]
 800afca:	78fb      	ldrb	r3, [r7, #3]
 800afcc:	4619      	mov	r1, r3
 800afce:	f7fe fc06 	bl	80097de <USBD_LL_DataInStage>
}
 800afd2:	bf00      	nop
 800afd4:	3708      	adds	r7, #8
 800afd6:	46bd      	mov	sp, r7
 800afd8:	bd80      	pop	{r7, pc}

0800afda <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800afda:	b580      	push	{r7, lr}
 800afdc:	b082      	sub	sp, #8
 800afde:	af00      	add	r7, sp, #0
 800afe0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800afe8:	4618      	mov	r0, r3
 800afea:	f7fe fd3a 	bl	8009a62 <USBD_LL_SOF>
}
 800afee:	bf00      	nop
 800aff0:	3708      	adds	r7, #8
 800aff2:	46bd      	mov	sp, r7
 800aff4:	bd80      	pop	{r7, pc}

0800aff6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aff6:	b580      	push	{r7, lr}
 800aff8:	b084      	sub	sp, #16
 800affa:	af00      	add	r7, sp, #0
 800affc:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800affe:	2301      	movs	r3, #1
 800b000:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	68db      	ldr	r3, [r3, #12]
 800b006:	2b00      	cmp	r3, #0
 800b008:	d102      	bne.n	800b010 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800b00a:	2300      	movs	r3, #0
 800b00c:	73fb      	strb	r3, [r7, #15]
 800b00e:	e008      	b.n	800b022 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	68db      	ldr	r3, [r3, #12]
 800b014:	2b02      	cmp	r3, #2
 800b016:	d102      	bne.n	800b01e <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800b018:	2301      	movs	r3, #1
 800b01a:	73fb      	strb	r3, [r7, #15]
 800b01c:	e001      	b.n	800b022 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800b01e:	f7f6 fae9 	bl	80015f4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b028:	7bfa      	ldrb	r2, [r7, #15]
 800b02a:	4611      	mov	r1, r2
 800b02c:	4618      	mov	r0, r3
 800b02e:	f7fe fcda 	bl	80099e6 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b038:	4618      	mov	r0, r3
 800b03a:	f7fe fc82 	bl	8009942 <USBD_LL_Reset>
}
 800b03e:	bf00      	nop
 800b040:	3710      	adds	r7, #16
 800b042:	46bd      	mov	sp, r7
 800b044:	bd80      	pop	{r7, pc}
	...

0800b048 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b048:	b580      	push	{r7, lr}
 800b04a:	b082      	sub	sp, #8
 800b04c:	af00      	add	r7, sp, #0
 800b04e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b056:	4618      	mov	r0, r3
 800b058:	f7fe fcd5 	bl	8009a06 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	681b      	ldr	r3, [r3, #0]
 800b060:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800b064:	681b      	ldr	r3, [r3, #0]
 800b066:	687a      	ldr	r2, [r7, #4]
 800b068:	6812      	ldr	r2, [r2, #0]
 800b06a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800b06e:	f043 0301 	orr.w	r3, r3, #1
 800b072:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	6a1b      	ldr	r3, [r3, #32]
 800b078:	2b00      	cmp	r3, #0
 800b07a:	d005      	beq.n	800b088 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b07c:	4b04      	ldr	r3, [pc, #16]	; (800b090 <HAL_PCD_SuspendCallback+0x48>)
 800b07e:	691b      	ldr	r3, [r3, #16]
 800b080:	4a03      	ldr	r2, [pc, #12]	; (800b090 <HAL_PCD_SuspendCallback+0x48>)
 800b082:	f043 0306 	orr.w	r3, r3, #6
 800b086:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800b088:	bf00      	nop
 800b08a:	3708      	adds	r7, #8
 800b08c:	46bd      	mov	sp, r7
 800b08e:	bd80      	pop	{r7, pc}
 800b090:	e000ed00 	.word	0xe000ed00

0800b094 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b094:	b580      	push	{r7, lr}
 800b096:	b082      	sub	sp, #8
 800b098:	af00      	add	r7, sp, #0
 800b09a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b0a2:	4618      	mov	r0, r3
 800b0a4:	f7fe fcc5 	bl	8009a32 <USBD_LL_Resume>
}
 800b0a8:	bf00      	nop
 800b0aa:	3708      	adds	r7, #8
 800b0ac:	46bd      	mov	sp, r7
 800b0ae:	bd80      	pop	{r7, pc}

0800b0b0 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b0b0:	b580      	push	{r7, lr}
 800b0b2:	b082      	sub	sp, #8
 800b0b4:	af00      	add	r7, sp, #0
 800b0b6:	6078      	str	r0, [r7, #4]
 800b0b8:	460b      	mov	r3, r1
 800b0ba:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b0c2:	78fa      	ldrb	r2, [r7, #3]
 800b0c4:	4611      	mov	r1, r2
 800b0c6:	4618      	mov	r0, r3
 800b0c8:	f7fe fd1d 	bl	8009b06 <USBD_LL_IsoOUTIncomplete>
}
 800b0cc:	bf00      	nop
 800b0ce:	3708      	adds	r7, #8
 800b0d0:	46bd      	mov	sp, r7
 800b0d2:	bd80      	pop	{r7, pc}

0800b0d4 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b0d4:	b580      	push	{r7, lr}
 800b0d6:	b082      	sub	sp, #8
 800b0d8:	af00      	add	r7, sp, #0
 800b0da:	6078      	str	r0, [r7, #4]
 800b0dc:	460b      	mov	r3, r1
 800b0de:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b0e6:	78fa      	ldrb	r2, [r7, #3]
 800b0e8:	4611      	mov	r1, r2
 800b0ea:	4618      	mov	r0, r3
 800b0ec:	f7fe fcd9 	bl	8009aa2 <USBD_LL_IsoINIncomplete>
}
 800b0f0:	bf00      	nop
 800b0f2:	3708      	adds	r7, #8
 800b0f4:	46bd      	mov	sp, r7
 800b0f6:	bd80      	pop	{r7, pc}

0800b0f8 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b0f8:	b580      	push	{r7, lr}
 800b0fa:	b082      	sub	sp, #8
 800b0fc:	af00      	add	r7, sp, #0
 800b0fe:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b106:	4618      	mov	r0, r3
 800b108:	f7fe fd2f 	bl	8009b6a <USBD_LL_DevConnected>
}
 800b10c:	bf00      	nop
 800b10e:	3708      	adds	r7, #8
 800b110:	46bd      	mov	sp, r7
 800b112:	bd80      	pop	{r7, pc}

0800b114 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b114:	b580      	push	{r7, lr}
 800b116:	b082      	sub	sp, #8
 800b118:	af00      	add	r7, sp, #0
 800b11a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b122:	4618      	mov	r0, r3
 800b124:	f7fe fd2c 	bl	8009b80 <USBD_LL_DevDisconnected>
}
 800b128:	bf00      	nop
 800b12a:	3708      	adds	r7, #8
 800b12c:	46bd      	mov	sp, r7
 800b12e:	bd80      	pop	{r7, pc}

0800b130 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800b130:	b580      	push	{r7, lr}
 800b132:	b082      	sub	sp, #8
 800b134:	af00      	add	r7, sp, #0
 800b136:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_HS) {
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	781b      	ldrb	r3, [r3, #0]
 800b13c:	2b01      	cmp	r3, #1
 800b13e:	d140      	bne.n	800b1c2 <USBD_LL_Init+0x92>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_HS.pData = pdev;
 800b140:	4a22      	ldr	r2, [pc, #136]	; (800b1cc <USBD_LL_Init+0x9c>)
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_HS;
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	4a20      	ldr	r2, [pc, #128]	; (800b1cc <USBD_LL_Init+0x9c>)
 800b14c:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 800b150:	4b1e      	ldr	r3, [pc, #120]	; (800b1cc <USBD_LL_Init+0x9c>)
 800b152:	4a1f      	ldr	r2, [pc, #124]	; (800b1d0 <USBD_LL_Init+0xa0>)
 800b154:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_HS.Init.dev_endpoints = 6;
 800b156:	4b1d      	ldr	r3, [pc, #116]	; (800b1cc <USBD_LL_Init+0x9c>)
 800b158:	2206      	movs	r2, #6
 800b15a:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_FULL;
 800b15c:	4b1b      	ldr	r3, [pc, #108]	; (800b1cc <USBD_LL_Init+0x9c>)
 800b15e:	2202      	movs	r2, #2
 800b160:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 800b162:	4b1a      	ldr	r3, [pc, #104]	; (800b1cc <USBD_LL_Init+0x9c>)
 800b164:	2200      	movs	r2, #0
 800b166:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 800b168:	4b18      	ldr	r3, [pc, #96]	; (800b1cc <USBD_LL_Init+0x9c>)
 800b16a:	2202      	movs	r2, #2
 800b16c:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 800b16e:	4b17      	ldr	r3, [pc, #92]	; (800b1cc <USBD_LL_Init+0x9c>)
 800b170:	2200      	movs	r2, #0
 800b172:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 800b174:	4b15      	ldr	r3, [pc, #84]	; (800b1cc <USBD_LL_Init+0x9c>)
 800b176:	2200      	movs	r2, #0
 800b178:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 800b17a:	4b14      	ldr	r3, [pc, #80]	; (800b1cc <USBD_LL_Init+0x9c>)
 800b17c:	2200      	movs	r2, #0
 800b17e:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 800b180:	4b12      	ldr	r3, [pc, #72]	; (800b1cc <USBD_LL_Init+0x9c>)
 800b182:	2200      	movs	r2, #0
 800b184:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 800b186:	4b11      	ldr	r3, [pc, #68]	; (800b1cc <USBD_LL_Init+0x9c>)
 800b188:	2200      	movs	r2, #0
 800b18a:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 800b18c:	4b0f      	ldr	r3, [pc, #60]	; (800b1cc <USBD_LL_Init+0x9c>)
 800b18e:	2200      	movs	r2, #0
 800b190:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 800b192:	480e      	ldr	r0, [pc, #56]	; (800b1cc <USBD_LL_Init+0x9c>)
 800b194:	f7f7 fc92 	bl	8002abc <HAL_PCD_Init>
 800b198:	4603      	mov	r3, r0
 800b19a:	2b00      	cmp	r3, #0
 800b19c:	d001      	beq.n	800b1a2 <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 800b19e:	f7f6 fa29 	bl	80015f4 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_HS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_HS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_HS, 0x200);
 800b1a2:	f44f 7100 	mov.w	r1, #512	; 0x200
 800b1a6:	4809      	ldr	r0, [pc, #36]	; (800b1cc <USBD_LL_Init+0x9c>)
 800b1a8:	f7f8 fee9 	bl	8003f7e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 0, 0x80);
 800b1ac:	2280      	movs	r2, #128	; 0x80
 800b1ae:	2100      	movs	r1, #0
 800b1b0:	4806      	ldr	r0, [pc, #24]	; (800b1cc <USBD_LL_Init+0x9c>)
 800b1b2:	f7f8 fe9d 	bl	8003ef0 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 1, 0x174);
 800b1b6:	f44f 72ba 	mov.w	r2, #372	; 0x174
 800b1ba:	2101      	movs	r1, #1
 800b1bc:	4803      	ldr	r0, [pc, #12]	; (800b1cc <USBD_LL_Init+0x9c>)
 800b1be:	f7f8 fe97 	bl	8003ef0 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800b1c2:	2300      	movs	r3, #0
}
 800b1c4:	4618      	mov	r0, r3
 800b1c6:	3708      	adds	r7, #8
 800b1c8:	46bd      	mov	sp, r7
 800b1ca:	bd80      	pop	{r7, pc}
 800b1cc:	20002ad8 	.word	0x20002ad8
 800b1d0:	40040000 	.word	0x40040000

0800b1d4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800b1d4:	b580      	push	{r7, lr}
 800b1d6:	b084      	sub	sp, #16
 800b1d8:	af00      	add	r7, sp, #0
 800b1da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b1dc:	2300      	movs	r3, #0
 800b1de:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b1e0:	2300      	movs	r3, #0
 800b1e2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b1ea:	4618      	mov	r0, r3
 800b1ec:	f7f7 fd83 	bl	8002cf6 <HAL_PCD_Start>
 800b1f0:	4603      	mov	r3, r0
 800b1f2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b1f4:	7bfb      	ldrb	r3, [r7, #15]
 800b1f6:	4618      	mov	r0, r3
 800b1f8:	f000 f942 	bl	800b480 <USBD_Get_USB_Status>
 800b1fc:	4603      	mov	r3, r0
 800b1fe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b200:	7bbb      	ldrb	r3, [r7, #14]
}
 800b202:	4618      	mov	r0, r3
 800b204:	3710      	adds	r7, #16
 800b206:	46bd      	mov	sp, r7
 800b208:	bd80      	pop	{r7, pc}

0800b20a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800b20a:	b580      	push	{r7, lr}
 800b20c:	b084      	sub	sp, #16
 800b20e:	af00      	add	r7, sp, #0
 800b210:	6078      	str	r0, [r7, #4]
 800b212:	4608      	mov	r0, r1
 800b214:	4611      	mov	r1, r2
 800b216:	461a      	mov	r2, r3
 800b218:	4603      	mov	r3, r0
 800b21a:	70fb      	strb	r3, [r7, #3]
 800b21c:	460b      	mov	r3, r1
 800b21e:	70bb      	strb	r3, [r7, #2]
 800b220:	4613      	mov	r3, r2
 800b222:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b224:	2300      	movs	r3, #0
 800b226:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b228:	2300      	movs	r3, #0
 800b22a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800b232:	78bb      	ldrb	r3, [r7, #2]
 800b234:	883a      	ldrh	r2, [r7, #0]
 800b236:	78f9      	ldrb	r1, [r7, #3]
 800b238:	f7f8 fa54 	bl	80036e4 <HAL_PCD_EP_Open>
 800b23c:	4603      	mov	r3, r0
 800b23e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b240:	7bfb      	ldrb	r3, [r7, #15]
 800b242:	4618      	mov	r0, r3
 800b244:	f000 f91c 	bl	800b480 <USBD_Get_USB_Status>
 800b248:	4603      	mov	r3, r0
 800b24a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b24c:	7bbb      	ldrb	r3, [r7, #14]
}
 800b24e:	4618      	mov	r0, r3
 800b250:	3710      	adds	r7, #16
 800b252:	46bd      	mov	sp, r7
 800b254:	bd80      	pop	{r7, pc}

0800b256 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b256:	b580      	push	{r7, lr}
 800b258:	b084      	sub	sp, #16
 800b25a:	af00      	add	r7, sp, #0
 800b25c:	6078      	str	r0, [r7, #4]
 800b25e:	460b      	mov	r3, r1
 800b260:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b262:	2300      	movs	r3, #0
 800b264:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b266:	2300      	movs	r3, #0
 800b268:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b270:	78fa      	ldrb	r2, [r7, #3]
 800b272:	4611      	mov	r1, r2
 800b274:	4618      	mov	r0, r3
 800b276:	f7f8 fa9d 	bl	80037b4 <HAL_PCD_EP_Close>
 800b27a:	4603      	mov	r3, r0
 800b27c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b27e:	7bfb      	ldrb	r3, [r7, #15]
 800b280:	4618      	mov	r0, r3
 800b282:	f000 f8fd 	bl	800b480 <USBD_Get_USB_Status>
 800b286:	4603      	mov	r3, r0
 800b288:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b28a:	7bbb      	ldrb	r3, [r7, #14]
}
 800b28c:	4618      	mov	r0, r3
 800b28e:	3710      	adds	r7, #16
 800b290:	46bd      	mov	sp, r7
 800b292:	bd80      	pop	{r7, pc}

0800b294 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b294:	b580      	push	{r7, lr}
 800b296:	b084      	sub	sp, #16
 800b298:	af00      	add	r7, sp, #0
 800b29a:	6078      	str	r0, [r7, #4]
 800b29c:	460b      	mov	r3, r1
 800b29e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b2a0:	2300      	movs	r3, #0
 800b2a2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b2a4:	2300      	movs	r3, #0
 800b2a6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b2ae:	78fa      	ldrb	r2, [r7, #3]
 800b2b0:	4611      	mov	r1, r2
 800b2b2:	4618      	mov	r0, r3
 800b2b4:	f7f8 fb75 	bl	80039a2 <HAL_PCD_EP_SetStall>
 800b2b8:	4603      	mov	r3, r0
 800b2ba:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b2bc:	7bfb      	ldrb	r3, [r7, #15]
 800b2be:	4618      	mov	r0, r3
 800b2c0:	f000 f8de 	bl	800b480 <USBD_Get_USB_Status>
 800b2c4:	4603      	mov	r3, r0
 800b2c6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b2c8:	7bbb      	ldrb	r3, [r7, #14]
}
 800b2ca:	4618      	mov	r0, r3
 800b2cc:	3710      	adds	r7, #16
 800b2ce:	46bd      	mov	sp, r7
 800b2d0:	bd80      	pop	{r7, pc}

0800b2d2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b2d2:	b580      	push	{r7, lr}
 800b2d4:	b084      	sub	sp, #16
 800b2d6:	af00      	add	r7, sp, #0
 800b2d8:	6078      	str	r0, [r7, #4]
 800b2da:	460b      	mov	r3, r1
 800b2dc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b2de:	2300      	movs	r3, #0
 800b2e0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b2e2:	2300      	movs	r3, #0
 800b2e4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b2ec:	78fa      	ldrb	r2, [r7, #3]
 800b2ee:	4611      	mov	r1, r2
 800b2f0:	4618      	mov	r0, r3
 800b2f2:	f7f8 fbba 	bl	8003a6a <HAL_PCD_EP_ClrStall>
 800b2f6:	4603      	mov	r3, r0
 800b2f8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b2fa:	7bfb      	ldrb	r3, [r7, #15]
 800b2fc:	4618      	mov	r0, r3
 800b2fe:	f000 f8bf 	bl	800b480 <USBD_Get_USB_Status>
 800b302:	4603      	mov	r3, r0
 800b304:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b306:	7bbb      	ldrb	r3, [r7, #14]
}
 800b308:	4618      	mov	r0, r3
 800b30a:	3710      	adds	r7, #16
 800b30c:	46bd      	mov	sp, r7
 800b30e:	bd80      	pop	{r7, pc}

0800b310 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b310:	b480      	push	{r7}
 800b312:	b085      	sub	sp, #20
 800b314:	af00      	add	r7, sp, #0
 800b316:	6078      	str	r0, [r7, #4]
 800b318:	460b      	mov	r3, r1
 800b31a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b322:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800b324:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b328:	2b00      	cmp	r3, #0
 800b32a:	da0b      	bge.n	800b344 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800b32c:	78fb      	ldrb	r3, [r7, #3]
 800b32e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b332:	68f9      	ldr	r1, [r7, #12]
 800b334:	4613      	mov	r3, r2
 800b336:	00db      	lsls	r3, r3, #3
 800b338:	4413      	add	r3, r2
 800b33a:	009b      	lsls	r3, r3, #2
 800b33c:	440b      	add	r3, r1
 800b33e:	333e      	adds	r3, #62	; 0x3e
 800b340:	781b      	ldrb	r3, [r3, #0]
 800b342:	e00b      	b.n	800b35c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800b344:	78fb      	ldrb	r3, [r7, #3]
 800b346:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b34a:	68f9      	ldr	r1, [r7, #12]
 800b34c:	4613      	mov	r3, r2
 800b34e:	00db      	lsls	r3, r3, #3
 800b350:	4413      	add	r3, r2
 800b352:	009b      	lsls	r3, r3, #2
 800b354:	440b      	add	r3, r1
 800b356:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800b35a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800b35c:	4618      	mov	r0, r3
 800b35e:	3714      	adds	r7, #20
 800b360:	46bd      	mov	sp, r7
 800b362:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b366:	4770      	bx	lr

0800b368 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800b368:	b580      	push	{r7, lr}
 800b36a:	b084      	sub	sp, #16
 800b36c:	af00      	add	r7, sp, #0
 800b36e:	6078      	str	r0, [r7, #4]
 800b370:	460b      	mov	r3, r1
 800b372:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b374:	2300      	movs	r3, #0
 800b376:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b378:	2300      	movs	r3, #0
 800b37a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b382:	78fa      	ldrb	r2, [r7, #3]
 800b384:	4611      	mov	r1, r2
 800b386:	4618      	mov	r0, r3
 800b388:	f7f8 f987 	bl	800369a <HAL_PCD_SetAddress>
 800b38c:	4603      	mov	r3, r0
 800b38e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b390:	7bfb      	ldrb	r3, [r7, #15]
 800b392:	4618      	mov	r0, r3
 800b394:	f000 f874 	bl	800b480 <USBD_Get_USB_Status>
 800b398:	4603      	mov	r3, r0
 800b39a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b39c:	7bbb      	ldrb	r3, [r7, #14]
}
 800b39e:	4618      	mov	r0, r3
 800b3a0:	3710      	adds	r7, #16
 800b3a2:	46bd      	mov	sp, r7
 800b3a4:	bd80      	pop	{r7, pc}

0800b3a6 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800b3a6:	b580      	push	{r7, lr}
 800b3a8:	b086      	sub	sp, #24
 800b3aa:	af00      	add	r7, sp, #0
 800b3ac:	60f8      	str	r0, [r7, #12]
 800b3ae:	607a      	str	r2, [r7, #4]
 800b3b0:	603b      	str	r3, [r7, #0]
 800b3b2:	460b      	mov	r3, r1
 800b3b4:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b3b6:	2300      	movs	r3, #0
 800b3b8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b3ba:	2300      	movs	r3, #0
 800b3bc:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800b3be:	68fb      	ldr	r3, [r7, #12]
 800b3c0:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800b3c4:	7af9      	ldrb	r1, [r7, #11]
 800b3c6:	683b      	ldr	r3, [r7, #0]
 800b3c8:	687a      	ldr	r2, [r7, #4]
 800b3ca:	f7f8 faa0 	bl	800390e <HAL_PCD_EP_Transmit>
 800b3ce:	4603      	mov	r3, r0
 800b3d0:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b3d2:	7dfb      	ldrb	r3, [r7, #23]
 800b3d4:	4618      	mov	r0, r3
 800b3d6:	f000 f853 	bl	800b480 <USBD_Get_USB_Status>
 800b3da:	4603      	mov	r3, r0
 800b3dc:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800b3de:	7dbb      	ldrb	r3, [r7, #22]
}
 800b3e0:	4618      	mov	r0, r3
 800b3e2:	3718      	adds	r7, #24
 800b3e4:	46bd      	mov	sp, r7
 800b3e6:	bd80      	pop	{r7, pc}

0800b3e8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800b3e8:	b580      	push	{r7, lr}
 800b3ea:	b086      	sub	sp, #24
 800b3ec:	af00      	add	r7, sp, #0
 800b3ee:	60f8      	str	r0, [r7, #12]
 800b3f0:	607a      	str	r2, [r7, #4]
 800b3f2:	603b      	str	r3, [r7, #0]
 800b3f4:	460b      	mov	r3, r1
 800b3f6:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b3f8:	2300      	movs	r3, #0
 800b3fa:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b3fc:	2300      	movs	r3, #0
 800b3fe:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800b400:	68fb      	ldr	r3, [r7, #12]
 800b402:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800b406:	7af9      	ldrb	r1, [r7, #11]
 800b408:	683b      	ldr	r3, [r7, #0]
 800b40a:	687a      	ldr	r2, [r7, #4]
 800b40c:	f7f8 fa1c 	bl	8003848 <HAL_PCD_EP_Receive>
 800b410:	4603      	mov	r3, r0
 800b412:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b414:	7dfb      	ldrb	r3, [r7, #23]
 800b416:	4618      	mov	r0, r3
 800b418:	f000 f832 	bl	800b480 <USBD_Get_USB_Status>
 800b41c:	4603      	mov	r3, r0
 800b41e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800b420:	7dbb      	ldrb	r3, [r7, #22]
}
 800b422:	4618      	mov	r0, r3
 800b424:	3718      	adds	r7, #24
 800b426:	46bd      	mov	sp, r7
 800b428:	bd80      	pop	{r7, pc}

0800b42a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b42a:	b580      	push	{r7, lr}
 800b42c:	b082      	sub	sp, #8
 800b42e:	af00      	add	r7, sp, #0
 800b430:	6078      	str	r0, [r7, #4]
 800b432:	460b      	mov	r3, r1
 800b434:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b43c:	78fa      	ldrb	r2, [r7, #3]
 800b43e:	4611      	mov	r1, r2
 800b440:	4618      	mov	r0, r3
 800b442:	f7f8 fa4c 	bl	80038de <HAL_PCD_EP_GetRxCount>
 800b446:	4603      	mov	r3, r0
}
 800b448:	4618      	mov	r0, r3
 800b44a:	3708      	adds	r7, #8
 800b44c:	46bd      	mov	sp, r7
 800b44e:	bd80      	pop	{r7, pc}

0800b450 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800b450:	b480      	push	{r7}
 800b452:	b083      	sub	sp, #12
 800b454:	af00      	add	r7, sp, #0
 800b456:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800b458:	4b03      	ldr	r3, [pc, #12]	; (800b468 <USBD_static_malloc+0x18>)
}
 800b45a:	4618      	mov	r0, r3
 800b45c:	370c      	adds	r7, #12
 800b45e:	46bd      	mov	sp, r7
 800b460:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b464:	4770      	bx	lr
 800b466:	bf00      	nop
 800b468:	20002fe4 	.word	0x20002fe4

0800b46c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800b46c:	b480      	push	{r7}
 800b46e:	b083      	sub	sp, #12
 800b470:	af00      	add	r7, sp, #0
 800b472:	6078      	str	r0, [r7, #4]

}
 800b474:	bf00      	nop
 800b476:	370c      	adds	r7, #12
 800b478:	46bd      	mov	sp, r7
 800b47a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b47e:	4770      	bx	lr

0800b480 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800b480:	b480      	push	{r7}
 800b482:	b085      	sub	sp, #20
 800b484:	af00      	add	r7, sp, #0
 800b486:	4603      	mov	r3, r0
 800b488:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b48a:	2300      	movs	r3, #0
 800b48c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800b48e:	79fb      	ldrb	r3, [r7, #7]
 800b490:	2b03      	cmp	r3, #3
 800b492:	d817      	bhi.n	800b4c4 <USBD_Get_USB_Status+0x44>
 800b494:	a201      	add	r2, pc, #4	; (adr r2, 800b49c <USBD_Get_USB_Status+0x1c>)
 800b496:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b49a:	bf00      	nop
 800b49c:	0800b4ad 	.word	0x0800b4ad
 800b4a0:	0800b4b3 	.word	0x0800b4b3
 800b4a4:	0800b4b9 	.word	0x0800b4b9
 800b4a8:	0800b4bf 	.word	0x0800b4bf
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800b4ac:	2300      	movs	r3, #0
 800b4ae:	73fb      	strb	r3, [r7, #15]
    break;
 800b4b0:	e00b      	b.n	800b4ca <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800b4b2:	2303      	movs	r3, #3
 800b4b4:	73fb      	strb	r3, [r7, #15]
    break;
 800b4b6:	e008      	b.n	800b4ca <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800b4b8:	2301      	movs	r3, #1
 800b4ba:	73fb      	strb	r3, [r7, #15]
    break;
 800b4bc:	e005      	b.n	800b4ca <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800b4be:	2303      	movs	r3, #3
 800b4c0:	73fb      	strb	r3, [r7, #15]
    break;
 800b4c2:	e002      	b.n	800b4ca <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800b4c4:	2303      	movs	r3, #3
 800b4c6:	73fb      	strb	r3, [r7, #15]
    break;
 800b4c8:	bf00      	nop
  }
  return usb_status;
 800b4ca:	7bfb      	ldrb	r3, [r7, #15]
}
 800b4cc:	4618      	mov	r0, r3
 800b4ce:	3714      	adds	r7, #20
 800b4d0:	46bd      	mov	sp, r7
 800b4d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4d6:	4770      	bx	lr

0800b4d8 <__errno>:
 800b4d8:	4b01      	ldr	r3, [pc, #4]	; (800b4e0 <__errno+0x8>)
 800b4da:	6818      	ldr	r0, [r3, #0]
 800b4dc:	4770      	bx	lr
 800b4de:	bf00      	nop
 800b4e0:	2000010c 	.word	0x2000010c

0800b4e4 <__libc_init_array>:
 800b4e4:	b570      	push	{r4, r5, r6, lr}
 800b4e6:	4d0d      	ldr	r5, [pc, #52]	; (800b51c <__libc_init_array+0x38>)
 800b4e8:	4c0d      	ldr	r4, [pc, #52]	; (800b520 <__libc_init_array+0x3c>)
 800b4ea:	1b64      	subs	r4, r4, r5
 800b4ec:	10a4      	asrs	r4, r4, #2
 800b4ee:	2600      	movs	r6, #0
 800b4f0:	42a6      	cmp	r6, r4
 800b4f2:	d109      	bne.n	800b508 <__libc_init_array+0x24>
 800b4f4:	4d0b      	ldr	r5, [pc, #44]	; (800b524 <__libc_init_array+0x40>)
 800b4f6:	4c0c      	ldr	r4, [pc, #48]	; (800b528 <__libc_init_array+0x44>)
 800b4f8:	f000 fc84 	bl	800be04 <_init>
 800b4fc:	1b64      	subs	r4, r4, r5
 800b4fe:	10a4      	asrs	r4, r4, #2
 800b500:	2600      	movs	r6, #0
 800b502:	42a6      	cmp	r6, r4
 800b504:	d105      	bne.n	800b512 <__libc_init_array+0x2e>
 800b506:	bd70      	pop	{r4, r5, r6, pc}
 800b508:	f855 3b04 	ldr.w	r3, [r5], #4
 800b50c:	4798      	blx	r3
 800b50e:	3601      	adds	r6, #1
 800b510:	e7ee      	b.n	800b4f0 <__libc_init_array+0xc>
 800b512:	f855 3b04 	ldr.w	r3, [r5], #4
 800b516:	4798      	blx	r3
 800b518:	3601      	adds	r6, #1
 800b51a:	e7f2      	b.n	800b502 <__libc_init_array+0x1e>
 800b51c:	0800bf00 	.word	0x0800bf00
 800b520:	0800bf00 	.word	0x0800bf00
 800b524:	0800bf00 	.word	0x0800bf00
 800b528:	0800bf04 	.word	0x0800bf04

0800b52c <memcmp>:
 800b52c:	b510      	push	{r4, lr}
 800b52e:	3901      	subs	r1, #1
 800b530:	4402      	add	r2, r0
 800b532:	4290      	cmp	r0, r2
 800b534:	d101      	bne.n	800b53a <memcmp+0xe>
 800b536:	2000      	movs	r0, #0
 800b538:	e005      	b.n	800b546 <memcmp+0x1a>
 800b53a:	7803      	ldrb	r3, [r0, #0]
 800b53c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800b540:	42a3      	cmp	r3, r4
 800b542:	d001      	beq.n	800b548 <memcmp+0x1c>
 800b544:	1b18      	subs	r0, r3, r4
 800b546:	bd10      	pop	{r4, pc}
 800b548:	3001      	adds	r0, #1
 800b54a:	e7f2      	b.n	800b532 <memcmp+0x6>

0800b54c <memcpy>:
 800b54c:	440a      	add	r2, r1
 800b54e:	4291      	cmp	r1, r2
 800b550:	f100 33ff 	add.w	r3, r0, #4294967295
 800b554:	d100      	bne.n	800b558 <memcpy+0xc>
 800b556:	4770      	bx	lr
 800b558:	b510      	push	{r4, lr}
 800b55a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b55e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b562:	4291      	cmp	r1, r2
 800b564:	d1f9      	bne.n	800b55a <memcpy+0xe>
 800b566:	bd10      	pop	{r4, pc}

0800b568 <memset>:
 800b568:	4402      	add	r2, r0
 800b56a:	4603      	mov	r3, r0
 800b56c:	4293      	cmp	r3, r2
 800b56e:	d100      	bne.n	800b572 <memset+0xa>
 800b570:	4770      	bx	lr
 800b572:	f803 1b01 	strb.w	r1, [r3], #1
 800b576:	e7f9      	b.n	800b56c <memset+0x4>

0800b578 <setvbuf>:
 800b578:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b57c:	461d      	mov	r5, r3
 800b57e:	4b5d      	ldr	r3, [pc, #372]	; (800b6f4 <setvbuf+0x17c>)
 800b580:	681f      	ldr	r7, [r3, #0]
 800b582:	4604      	mov	r4, r0
 800b584:	460e      	mov	r6, r1
 800b586:	4690      	mov	r8, r2
 800b588:	b127      	cbz	r7, 800b594 <setvbuf+0x1c>
 800b58a:	69bb      	ldr	r3, [r7, #24]
 800b58c:	b913      	cbnz	r3, 800b594 <setvbuf+0x1c>
 800b58e:	4638      	mov	r0, r7
 800b590:	f000 f9d2 	bl	800b938 <__sinit>
 800b594:	4b58      	ldr	r3, [pc, #352]	; (800b6f8 <setvbuf+0x180>)
 800b596:	429c      	cmp	r4, r3
 800b598:	d167      	bne.n	800b66a <setvbuf+0xf2>
 800b59a:	687c      	ldr	r4, [r7, #4]
 800b59c:	f1b8 0f02 	cmp.w	r8, #2
 800b5a0:	d006      	beq.n	800b5b0 <setvbuf+0x38>
 800b5a2:	f1b8 0f01 	cmp.w	r8, #1
 800b5a6:	f200 809f 	bhi.w	800b6e8 <setvbuf+0x170>
 800b5aa:	2d00      	cmp	r5, #0
 800b5ac:	f2c0 809c 	blt.w	800b6e8 <setvbuf+0x170>
 800b5b0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b5b2:	07db      	lsls	r3, r3, #31
 800b5b4:	d405      	bmi.n	800b5c2 <setvbuf+0x4a>
 800b5b6:	89a3      	ldrh	r3, [r4, #12]
 800b5b8:	0598      	lsls	r0, r3, #22
 800b5ba:	d402      	bmi.n	800b5c2 <setvbuf+0x4a>
 800b5bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b5be:	f000 fa59 	bl	800ba74 <__retarget_lock_acquire_recursive>
 800b5c2:	4621      	mov	r1, r4
 800b5c4:	4638      	mov	r0, r7
 800b5c6:	f000 f923 	bl	800b810 <_fflush_r>
 800b5ca:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b5cc:	b141      	cbz	r1, 800b5e0 <setvbuf+0x68>
 800b5ce:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b5d2:	4299      	cmp	r1, r3
 800b5d4:	d002      	beq.n	800b5dc <setvbuf+0x64>
 800b5d6:	4638      	mov	r0, r7
 800b5d8:	f000 fa7c 	bl	800bad4 <_free_r>
 800b5dc:	2300      	movs	r3, #0
 800b5de:	6363      	str	r3, [r4, #52]	; 0x34
 800b5e0:	2300      	movs	r3, #0
 800b5e2:	61a3      	str	r3, [r4, #24]
 800b5e4:	6063      	str	r3, [r4, #4]
 800b5e6:	89a3      	ldrh	r3, [r4, #12]
 800b5e8:	0619      	lsls	r1, r3, #24
 800b5ea:	d503      	bpl.n	800b5f4 <setvbuf+0x7c>
 800b5ec:	6921      	ldr	r1, [r4, #16]
 800b5ee:	4638      	mov	r0, r7
 800b5f0:	f000 fa70 	bl	800bad4 <_free_r>
 800b5f4:	89a3      	ldrh	r3, [r4, #12]
 800b5f6:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 800b5fa:	f023 0303 	bic.w	r3, r3, #3
 800b5fe:	f1b8 0f02 	cmp.w	r8, #2
 800b602:	81a3      	strh	r3, [r4, #12]
 800b604:	d06c      	beq.n	800b6e0 <setvbuf+0x168>
 800b606:	ab01      	add	r3, sp, #4
 800b608:	466a      	mov	r2, sp
 800b60a:	4621      	mov	r1, r4
 800b60c:	4638      	mov	r0, r7
 800b60e:	f000 fa33 	bl	800ba78 <__swhatbuf_r>
 800b612:	89a3      	ldrh	r3, [r4, #12]
 800b614:	4318      	orrs	r0, r3
 800b616:	81a0      	strh	r0, [r4, #12]
 800b618:	2d00      	cmp	r5, #0
 800b61a:	d130      	bne.n	800b67e <setvbuf+0x106>
 800b61c:	9d00      	ldr	r5, [sp, #0]
 800b61e:	4628      	mov	r0, r5
 800b620:	f000 fa50 	bl	800bac4 <malloc>
 800b624:	4606      	mov	r6, r0
 800b626:	2800      	cmp	r0, #0
 800b628:	d155      	bne.n	800b6d6 <setvbuf+0x15e>
 800b62a:	f8dd 9000 	ldr.w	r9, [sp]
 800b62e:	45a9      	cmp	r9, r5
 800b630:	d14a      	bne.n	800b6c8 <setvbuf+0x150>
 800b632:	f04f 35ff 	mov.w	r5, #4294967295
 800b636:	2200      	movs	r2, #0
 800b638:	60a2      	str	r2, [r4, #8]
 800b63a:	f104 0247 	add.w	r2, r4, #71	; 0x47
 800b63e:	6022      	str	r2, [r4, #0]
 800b640:	6122      	str	r2, [r4, #16]
 800b642:	2201      	movs	r2, #1
 800b644:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b648:	6162      	str	r2, [r4, #20]
 800b64a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b64c:	f043 0302 	orr.w	r3, r3, #2
 800b650:	07d2      	lsls	r2, r2, #31
 800b652:	81a3      	strh	r3, [r4, #12]
 800b654:	d405      	bmi.n	800b662 <setvbuf+0xea>
 800b656:	f413 7f00 	tst.w	r3, #512	; 0x200
 800b65a:	d102      	bne.n	800b662 <setvbuf+0xea>
 800b65c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b65e:	f000 fa0a 	bl	800ba76 <__retarget_lock_release_recursive>
 800b662:	4628      	mov	r0, r5
 800b664:	b003      	add	sp, #12
 800b666:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b66a:	4b24      	ldr	r3, [pc, #144]	; (800b6fc <setvbuf+0x184>)
 800b66c:	429c      	cmp	r4, r3
 800b66e:	d101      	bne.n	800b674 <setvbuf+0xfc>
 800b670:	68bc      	ldr	r4, [r7, #8]
 800b672:	e793      	b.n	800b59c <setvbuf+0x24>
 800b674:	4b22      	ldr	r3, [pc, #136]	; (800b700 <setvbuf+0x188>)
 800b676:	429c      	cmp	r4, r3
 800b678:	bf08      	it	eq
 800b67a:	68fc      	ldreq	r4, [r7, #12]
 800b67c:	e78e      	b.n	800b59c <setvbuf+0x24>
 800b67e:	2e00      	cmp	r6, #0
 800b680:	d0cd      	beq.n	800b61e <setvbuf+0xa6>
 800b682:	69bb      	ldr	r3, [r7, #24]
 800b684:	b913      	cbnz	r3, 800b68c <setvbuf+0x114>
 800b686:	4638      	mov	r0, r7
 800b688:	f000 f956 	bl	800b938 <__sinit>
 800b68c:	f1b8 0f01 	cmp.w	r8, #1
 800b690:	bf08      	it	eq
 800b692:	89a3      	ldrheq	r3, [r4, #12]
 800b694:	6026      	str	r6, [r4, #0]
 800b696:	bf04      	itt	eq
 800b698:	f043 0301 	orreq.w	r3, r3, #1
 800b69c:	81a3      	strheq	r3, [r4, #12]
 800b69e:	89a2      	ldrh	r2, [r4, #12]
 800b6a0:	f012 0308 	ands.w	r3, r2, #8
 800b6a4:	e9c4 6504 	strd	r6, r5, [r4, #16]
 800b6a8:	d01c      	beq.n	800b6e4 <setvbuf+0x16c>
 800b6aa:	07d3      	lsls	r3, r2, #31
 800b6ac:	bf41      	itttt	mi
 800b6ae:	2300      	movmi	r3, #0
 800b6b0:	426d      	negmi	r5, r5
 800b6b2:	60a3      	strmi	r3, [r4, #8]
 800b6b4:	61a5      	strmi	r5, [r4, #24]
 800b6b6:	bf58      	it	pl
 800b6b8:	60a5      	strpl	r5, [r4, #8]
 800b6ba:	6e65      	ldr	r5, [r4, #100]	; 0x64
 800b6bc:	f015 0501 	ands.w	r5, r5, #1
 800b6c0:	d115      	bne.n	800b6ee <setvbuf+0x176>
 800b6c2:	f412 7f00 	tst.w	r2, #512	; 0x200
 800b6c6:	e7c8      	b.n	800b65a <setvbuf+0xe2>
 800b6c8:	4648      	mov	r0, r9
 800b6ca:	f000 f9fb 	bl	800bac4 <malloc>
 800b6ce:	4606      	mov	r6, r0
 800b6d0:	2800      	cmp	r0, #0
 800b6d2:	d0ae      	beq.n	800b632 <setvbuf+0xba>
 800b6d4:	464d      	mov	r5, r9
 800b6d6:	89a3      	ldrh	r3, [r4, #12]
 800b6d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b6dc:	81a3      	strh	r3, [r4, #12]
 800b6de:	e7d0      	b.n	800b682 <setvbuf+0x10a>
 800b6e0:	2500      	movs	r5, #0
 800b6e2:	e7a8      	b.n	800b636 <setvbuf+0xbe>
 800b6e4:	60a3      	str	r3, [r4, #8]
 800b6e6:	e7e8      	b.n	800b6ba <setvbuf+0x142>
 800b6e8:	f04f 35ff 	mov.w	r5, #4294967295
 800b6ec:	e7b9      	b.n	800b662 <setvbuf+0xea>
 800b6ee:	2500      	movs	r5, #0
 800b6f0:	e7b7      	b.n	800b662 <setvbuf+0xea>
 800b6f2:	bf00      	nop
 800b6f4:	2000010c 	.word	0x2000010c
 800b6f8:	0800beb8 	.word	0x0800beb8
 800b6fc:	0800bed8 	.word	0x0800bed8
 800b700:	0800be98 	.word	0x0800be98

0800b704 <__sflush_r>:
 800b704:	898a      	ldrh	r2, [r1, #12]
 800b706:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b70a:	4605      	mov	r5, r0
 800b70c:	0710      	lsls	r0, r2, #28
 800b70e:	460c      	mov	r4, r1
 800b710:	d458      	bmi.n	800b7c4 <__sflush_r+0xc0>
 800b712:	684b      	ldr	r3, [r1, #4]
 800b714:	2b00      	cmp	r3, #0
 800b716:	dc05      	bgt.n	800b724 <__sflush_r+0x20>
 800b718:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b71a:	2b00      	cmp	r3, #0
 800b71c:	dc02      	bgt.n	800b724 <__sflush_r+0x20>
 800b71e:	2000      	movs	r0, #0
 800b720:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b724:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b726:	2e00      	cmp	r6, #0
 800b728:	d0f9      	beq.n	800b71e <__sflush_r+0x1a>
 800b72a:	2300      	movs	r3, #0
 800b72c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b730:	682f      	ldr	r7, [r5, #0]
 800b732:	602b      	str	r3, [r5, #0]
 800b734:	d032      	beq.n	800b79c <__sflush_r+0x98>
 800b736:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b738:	89a3      	ldrh	r3, [r4, #12]
 800b73a:	075a      	lsls	r2, r3, #29
 800b73c:	d505      	bpl.n	800b74a <__sflush_r+0x46>
 800b73e:	6863      	ldr	r3, [r4, #4]
 800b740:	1ac0      	subs	r0, r0, r3
 800b742:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b744:	b10b      	cbz	r3, 800b74a <__sflush_r+0x46>
 800b746:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b748:	1ac0      	subs	r0, r0, r3
 800b74a:	2300      	movs	r3, #0
 800b74c:	4602      	mov	r2, r0
 800b74e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b750:	6a21      	ldr	r1, [r4, #32]
 800b752:	4628      	mov	r0, r5
 800b754:	47b0      	blx	r6
 800b756:	1c43      	adds	r3, r0, #1
 800b758:	89a3      	ldrh	r3, [r4, #12]
 800b75a:	d106      	bne.n	800b76a <__sflush_r+0x66>
 800b75c:	6829      	ldr	r1, [r5, #0]
 800b75e:	291d      	cmp	r1, #29
 800b760:	d82c      	bhi.n	800b7bc <__sflush_r+0xb8>
 800b762:	4a2a      	ldr	r2, [pc, #168]	; (800b80c <__sflush_r+0x108>)
 800b764:	40ca      	lsrs	r2, r1
 800b766:	07d6      	lsls	r6, r2, #31
 800b768:	d528      	bpl.n	800b7bc <__sflush_r+0xb8>
 800b76a:	2200      	movs	r2, #0
 800b76c:	6062      	str	r2, [r4, #4]
 800b76e:	04d9      	lsls	r1, r3, #19
 800b770:	6922      	ldr	r2, [r4, #16]
 800b772:	6022      	str	r2, [r4, #0]
 800b774:	d504      	bpl.n	800b780 <__sflush_r+0x7c>
 800b776:	1c42      	adds	r2, r0, #1
 800b778:	d101      	bne.n	800b77e <__sflush_r+0x7a>
 800b77a:	682b      	ldr	r3, [r5, #0]
 800b77c:	b903      	cbnz	r3, 800b780 <__sflush_r+0x7c>
 800b77e:	6560      	str	r0, [r4, #84]	; 0x54
 800b780:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b782:	602f      	str	r7, [r5, #0]
 800b784:	2900      	cmp	r1, #0
 800b786:	d0ca      	beq.n	800b71e <__sflush_r+0x1a>
 800b788:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b78c:	4299      	cmp	r1, r3
 800b78e:	d002      	beq.n	800b796 <__sflush_r+0x92>
 800b790:	4628      	mov	r0, r5
 800b792:	f000 f99f 	bl	800bad4 <_free_r>
 800b796:	2000      	movs	r0, #0
 800b798:	6360      	str	r0, [r4, #52]	; 0x34
 800b79a:	e7c1      	b.n	800b720 <__sflush_r+0x1c>
 800b79c:	6a21      	ldr	r1, [r4, #32]
 800b79e:	2301      	movs	r3, #1
 800b7a0:	4628      	mov	r0, r5
 800b7a2:	47b0      	blx	r6
 800b7a4:	1c41      	adds	r1, r0, #1
 800b7a6:	d1c7      	bne.n	800b738 <__sflush_r+0x34>
 800b7a8:	682b      	ldr	r3, [r5, #0]
 800b7aa:	2b00      	cmp	r3, #0
 800b7ac:	d0c4      	beq.n	800b738 <__sflush_r+0x34>
 800b7ae:	2b1d      	cmp	r3, #29
 800b7b0:	d001      	beq.n	800b7b6 <__sflush_r+0xb2>
 800b7b2:	2b16      	cmp	r3, #22
 800b7b4:	d101      	bne.n	800b7ba <__sflush_r+0xb6>
 800b7b6:	602f      	str	r7, [r5, #0]
 800b7b8:	e7b1      	b.n	800b71e <__sflush_r+0x1a>
 800b7ba:	89a3      	ldrh	r3, [r4, #12]
 800b7bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b7c0:	81a3      	strh	r3, [r4, #12]
 800b7c2:	e7ad      	b.n	800b720 <__sflush_r+0x1c>
 800b7c4:	690f      	ldr	r7, [r1, #16]
 800b7c6:	2f00      	cmp	r7, #0
 800b7c8:	d0a9      	beq.n	800b71e <__sflush_r+0x1a>
 800b7ca:	0793      	lsls	r3, r2, #30
 800b7cc:	680e      	ldr	r6, [r1, #0]
 800b7ce:	bf08      	it	eq
 800b7d0:	694b      	ldreq	r3, [r1, #20]
 800b7d2:	600f      	str	r7, [r1, #0]
 800b7d4:	bf18      	it	ne
 800b7d6:	2300      	movne	r3, #0
 800b7d8:	eba6 0807 	sub.w	r8, r6, r7
 800b7dc:	608b      	str	r3, [r1, #8]
 800b7de:	f1b8 0f00 	cmp.w	r8, #0
 800b7e2:	dd9c      	ble.n	800b71e <__sflush_r+0x1a>
 800b7e4:	6a21      	ldr	r1, [r4, #32]
 800b7e6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b7e8:	4643      	mov	r3, r8
 800b7ea:	463a      	mov	r2, r7
 800b7ec:	4628      	mov	r0, r5
 800b7ee:	47b0      	blx	r6
 800b7f0:	2800      	cmp	r0, #0
 800b7f2:	dc06      	bgt.n	800b802 <__sflush_r+0xfe>
 800b7f4:	89a3      	ldrh	r3, [r4, #12]
 800b7f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b7fa:	81a3      	strh	r3, [r4, #12]
 800b7fc:	f04f 30ff 	mov.w	r0, #4294967295
 800b800:	e78e      	b.n	800b720 <__sflush_r+0x1c>
 800b802:	4407      	add	r7, r0
 800b804:	eba8 0800 	sub.w	r8, r8, r0
 800b808:	e7e9      	b.n	800b7de <__sflush_r+0xda>
 800b80a:	bf00      	nop
 800b80c:	20400001 	.word	0x20400001

0800b810 <_fflush_r>:
 800b810:	b538      	push	{r3, r4, r5, lr}
 800b812:	690b      	ldr	r3, [r1, #16]
 800b814:	4605      	mov	r5, r0
 800b816:	460c      	mov	r4, r1
 800b818:	b913      	cbnz	r3, 800b820 <_fflush_r+0x10>
 800b81a:	2500      	movs	r5, #0
 800b81c:	4628      	mov	r0, r5
 800b81e:	bd38      	pop	{r3, r4, r5, pc}
 800b820:	b118      	cbz	r0, 800b82a <_fflush_r+0x1a>
 800b822:	6983      	ldr	r3, [r0, #24]
 800b824:	b90b      	cbnz	r3, 800b82a <_fflush_r+0x1a>
 800b826:	f000 f887 	bl	800b938 <__sinit>
 800b82a:	4b14      	ldr	r3, [pc, #80]	; (800b87c <_fflush_r+0x6c>)
 800b82c:	429c      	cmp	r4, r3
 800b82e:	d11b      	bne.n	800b868 <_fflush_r+0x58>
 800b830:	686c      	ldr	r4, [r5, #4]
 800b832:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b836:	2b00      	cmp	r3, #0
 800b838:	d0ef      	beq.n	800b81a <_fflush_r+0xa>
 800b83a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b83c:	07d0      	lsls	r0, r2, #31
 800b83e:	d404      	bmi.n	800b84a <_fflush_r+0x3a>
 800b840:	0599      	lsls	r1, r3, #22
 800b842:	d402      	bmi.n	800b84a <_fflush_r+0x3a>
 800b844:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b846:	f000 f915 	bl	800ba74 <__retarget_lock_acquire_recursive>
 800b84a:	4628      	mov	r0, r5
 800b84c:	4621      	mov	r1, r4
 800b84e:	f7ff ff59 	bl	800b704 <__sflush_r>
 800b852:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b854:	07da      	lsls	r2, r3, #31
 800b856:	4605      	mov	r5, r0
 800b858:	d4e0      	bmi.n	800b81c <_fflush_r+0xc>
 800b85a:	89a3      	ldrh	r3, [r4, #12]
 800b85c:	059b      	lsls	r3, r3, #22
 800b85e:	d4dd      	bmi.n	800b81c <_fflush_r+0xc>
 800b860:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b862:	f000 f908 	bl	800ba76 <__retarget_lock_release_recursive>
 800b866:	e7d9      	b.n	800b81c <_fflush_r+0xc>
 800b868:	4b05      	ldr	r3, [pc, #20]	; (800b880 <_fflush_r+0x70>)
 800b86a:	429c      	cmp	r4, r3
 800b86c:	d101      	bne.n	800b872 <_fflush_r+0x62>
 800b86e:	68ac      	ldr	r4, [r5, #8]
 800b870:	e7df      	b.n	800b832 <_fflush_r+0x22>
 800b872:	4b04      	ldr	r3, [pc, #16]	; (800b884 <_fflush_r+0x74>)
 800b874:	429c      	cmp	r4, r3
 800b876:	bf08      	it	eq
 800b878:	68ec      	ldreq	r4, [r5, #12]
 800b87a:	e7da      	b.n	800b832 <_fflush_r+0x22>
 800b87c:	0800beb8 	.word	0x0800beb8
 800b880:	0800bed8 	.word	0x0800bed8
 800b884:	0800be98 	.word	0x0800be98

0800b888 <std>:
 800b888:	2300      	movs	r3, #0
 800b88a:	b510      	push	{r4, lr}
 800b88c:	4604      	mov	r4, r0
 800b88e:	e9c0 3300 	strd	r3, r3, [r0]
 800b892:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b896:	6083      	str	r3, [r0, #8]
 800b898:	8181      	strh	r1, [r0, #12]
 800b89a:	6643      	str	r3, [r0, #100]	; 0x64
 800b89c:	81c2      	strh	r2, [r0, #14]
 800b89e:	6183      	str	r3, [r0, #24]
 800b8a0:	4619      	mov	r1, r3
 800b8a2:	2208      	movs	r2, #8
 800b8a4:	305c      	adds	r0, #92	; 0x5c
 800b8a6:	f7ff fe5f 	bl	800b568 <memset>
 800b8aa:	4b05      	ldr	r3, [pc, #20]	; (800b8c0 <std+0x38>)
 800b8ac:	6263      	str	r3, [r4, #36]	; 0x24
 800b8ae:	4b05      	ldr	r3, [pc, #20]	; (800b8c4 <std+0x3c>)
 800b8b0:	62a3      	str	r3, [r4, #40]	; 0x28
 800b8b2:	4b05      	ldr	r3, [pc, #20]	; (800b8c8 <std+0x40>)
 800b8b4:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b8b6:	4b05      	ldr	r3, [pc, #20]	; (800b8cc <std+0x44>)
 800b8b8:	6224      	str	r4, [r4, #32]
 800b8ba:	6323      	str	r3, [r4, #48]	; 0x30
 800b8bc:	bd10      	pop	{r4, pc}
 800b8be:	bf00      	nop
 800b8c0:	0800bcb5 	.word	0x0800bcb5
 800b8c4:	0800bcd7 	.word	0x0800bcd7
 800b8c8:	0800bd0f 	.word	0x0800bd0f
 800b8cc:	0800bd33 	.word	0x0800bd33

0800b8d0 <_cleanup_r>:
 800b8d0:	4901      	ldr	r1, [pc, #4]	; (800b8d8 <_cleanup_r+0x8>)
 800b8d2:	f000 b8af 	b.w	800ba34 <_fwalk_reent>
 800b8d6:	bf00      	nop
 800b8d8:	0800b811 	.word	0x0800b811

0800b8dc <__sfmoreglue>:
 800b8dc:	b570      	push	{r4, r5, r6, lr}
 800b8de:	2268      	movs	r2, #104	; 0x68
 800b8e0:	1e4d      	subs	r5, r1, #1
 800b8e2:	4355      	muls	r5, r2
 800b8e4:	460e      	mov	r6, r1
 800b8e6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800b8ea:	f000 f95f 	bl	800bbac <_malloc_r>
 800b8ee:	4604      	mov	r4, r0
 800b8f0:	b140      	cbz	r0, 800b904 <__sfmoreglue+0x28>
 800b8f2:	2100      	movs	r1, #0
 800b8f4:	e9c0 1600 	strd	r1, r6, [r0]
 800b8f8:	300c      	adds	r0, #12
 800b8fa:	60a0      	str	r0, [r4, #8]
 800b8fc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800b900:	f7ff fe32 	bl	800b568 <memset>
 800b904:	4620      	mov	r0, r4
 800b906:	bd70      	pop	{r4, r5, r6, pc}

0800b908 <__sfp_lock_acquire>:
 800b908:	4801      	ldr	r0, [pc, #4]	; (800b910 <__sfp_lock_acquire+0x8>)
 800b90a:	f000 b8b3 	b.w	800ba74 <__retarget_lock_acquire_recursive>
 800b90e:	bf00      	nop
 800b910:	20003205 	.word	0x20003205

0800b914 <__sfp_lock_release>:
 800b914:	4801      	ldr	r0, [pc, #4]	; (800b91c <__sfp_lock_release+0x8>)
 800b916:	f000 b8ae 	b.w	800ba76 <__retarget_lock_release_recursive>
 800b91a:	bf00      	nop
 800b91c:	20003205 	.word	0x20003205

0800b920 <__sinit_lock_acquire>:
 800b920:	4801      	ldr	r0, [pc, #4]	; (800b928 <__sinit_lock_acquire+0x8>)
 800b922:	f000 b8a7 	b.w	800ba74 <__retarget_lock_acquire_recursive>
 800b926:	bf00      	nop
 800b928:	20003206 	.word	0x20003206

0800b92c <__sinit_lock_release>:
 800b92c:	4801      	ldr	r0, [pc, #4]	; (800b934 <__sinit_lock_release+0x8>)
 800b92e:	f000 b8a2 	b.w	800ba76 <__retarget_lock_release_recursive>
 800b932:	bf00      	nop
 800b934:	20003206 	.word	0x20003206

0800b938 <__sinit>:
 800b938:	b510      	push	{r4, lr}
 800b93a:	4604      	mov	r4, r0
 800b93c:	f7ff fff0 	bl	800b920 <__sinit_lock_acquire>
 800b940:	69a3      	ldr	r3, [r4, #24]
 800b942:	b11b      	cbz	r3, 800b94c <__sinit+0x14>
 800b944:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b948:	f7ff bff0 	b.w	800b92c <__sinit_lock_release>
 800b94c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800b950:	6523      	str	r3, [r4, #80]	; 0x50
 800b952:	4b13      	ldr	r3, [pc, #76]	; (800b9a0 <__sinit+0x68>)
 800b954:	4a13      	ldr	r2, [pc, #76]	; (800b9a4 <__sinit+0x6c>)
 800b956:	681b      	ldr	r3, [r3, #0]
 800b958:	62a2      	str	r2, [r4, #40]	; 0x28
 800b95a:	42a3      	cmp	r3, r4
 800b95c:	bf04      	itt	eq
 800b95e:	2301      	moveq	r3, #1
 800b960:	61a3      	streq	r3, [r4, #24]
 800b962:	4620      	mov	r0, r4
 800b964:	f000 f820 	bl	800b9a8 <__sfp>
 800b968:	6060      	str	r0, [r4, #4]
 800b96a:	4620      	mov	r0, r4
 800b96c:	f000 f81c 	bl	800b9a8 <__sfp>
 800b970:	60a0      	str	r0, [r4, #8]
 800b972:	4620      	mov	r0, r4
 800b974:	f000 f818 	bl	800b9a8 <__sfp>
 800b978:	2200      	movs	r2, #0
 800b97a:	60e0      	str	r0, [r4, #12]
 800b97c:	2104      	movs	r1, #4
 800b97e:	6860      	ldr	r0, [r4, #4]
 800b980:	f7ff ff82 	bl	800b888 <std>
 800b984:	68a0      	ldr	r0, [r4, #8]
 800b986:	2201      	movs	r2, #1
 800b988:	2109      	movs	r1, #9
 800b98a:	f7ff ff7d 	bl	800b888 <std>
 800b98e:	68e0      	ldr	r0, [r4, #12]
 800b990:	2202      	movs	r2, #2
 800b992:	2112      	movs	r1, #18
 800b994:	f7ff ff78 	bl	800b888 <std>
 800b998:	2301      	movs	r3, #1
 800b99a:	61a3      	str	r3, [r4, #24]
 800b99c:	e7d2      	b.n	800b944 <__sinit+0xc>
 800b99e:	bf00      	nop
 800b9a0:	0800be94 	.word	0x0800be94
 800b9a4:	0800b8d1 	.word	0x0800b8d1

0800b9a8 <__sfp>:
 800b9a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b9aa:	4607      	mov	r7, r0
 800b9ac:	f7ff ffac 	bl	800b908 <__sfp_lock_acquire>
 800b9b0:	4b1e      	ldr	r3, [pc, #120]	; (800ba2c <__sfp+0x84>)
 800b9b2:	681e      	ldr	r6, [r3, #0]
 800b9b4:	69b3      	ldr	r3, [r6, #24]
 800b9b6:	b913      	cbnz	r3, 800b9be <__sfp+0x16>
 800b9b8:	4630      	mov	r0, r6
 800b9ba:	f7ff ffbd 	bl	800b938 <__sinit>
 800b9be:	3648      	adds	r6, #72	; 0x48
 800b9c0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800b9c4:	3b01      	subs	r3, #1
 800b9c6:	d503      	bpl.n	800b9d0 <__sfp+0x28>
 800b9c8:	6833      	ldr	r3, [r6, #0]
 800b9ca:	b30b      	cbz	r3, 800ba10 <__sfp+0x68>
 800b9cc:	6836      	ldr	r6, [r6, #0]
 800b9ce:	e7f7      	b.n	800b9c0 <__sfp+0x18>
 800b9d0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800b9d4:	b9d5      	cbnz	r5, 800ba0c <__sfp+0x64>
 800b9d6:	4b16      	ldr	r3, [pc, #88]	; (800ba30 <__sfp+0x88>)
 800b9d8:	60e3      	str	r3, [r4, #12]
 800b9da:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b9de:	6665      	str	r5, [r4, #100]	; 0x64
 800b9e0:	f000 f847 	bl	800ba72 <__retarget_lock_init_recursive>
 800b9e4:	f7ff ff96 	bl	800b914 <__sfp_lock_release>
 800b9e8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800b9ec:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800b9f0:	6025      	str	r5, [r4, #0]
 800b9f2:	61a5      	str	r5, [r4, #24]
 800b9f4:	2208      	movs	r2, #8
 800b9f6:	4629      	mov	r1, r5
 800b9f8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800b9fc:	f7ff fdb4 	bl	800b568 <memset>
 800ba00:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800ba04:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800ba08:	4620      	mov	r0, r4
 800ba0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ba0c:	3468      	adds	r4, #104	; 0x68
 800ba0e:	e7d9      	b.n	800b9c4 <__sfp+0x1c>
 800ba10:	2104      	movs	r1, #4
 800ba12:	4638      	mov	r0, r7
 800ba14:	f7ff ff62 	bl	800b8dc <__sfmoreglue>
 800ba18:	4604      	mov	r4, r0
 800ba1a:	6030      	str	r0, [r6, #0]
 800ba1c:	2800      	cmp	r0, #0
 800ba1e:	d1d5      	bne.n	800b9cc <__sfp+0x24>
 800ba20:	f7ff ff78 	bl	800b914 <__sfp_lock_release>
 800ba24:	230c      	movs	r3, #12
 800ba26:	603b      	str	r3, [r7, #0]
 800ba28:	e7ee      	b.n	800ba08 <__sfp+0x60>
 800ba2a:	bf00      	nop
 800ba2c:	0800be94 	.word	0x0800be94
 800ba30:	ffff0001 	.word	0xffff0001

0800ba34 <_fwalk_reent>:
 800ba34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ba38:	4606      	mov	r6, r0
 800ba3a:	4688      	mov	r8, r1
 800ba3c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800ba40:	2700      	movs	r7, #0
 800ba42:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ba46:	f1b9 0901 	subs.w	r9, r9, #1
 800ba4a:	d505      	bpl.n	800ba58 <_fwalk_reent+0x24>
 800ba4c:	6824      	ldr	r4, [r4, #0]
 800ba4e:	2c00      	cmp	r4, #0
 800ba50:	d1f7      	bne.n	800ba42 <_fwalk_reent+0xe>
 800ba52:	4638      	mov	r0, r7
 800ba54:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ba58:	89ab      	ldrh	r3, [r5, #12]
 800ba5a:	2b01      	cmp	r3, #1
 800ba5c:	d907      	bls.n	800ba6e <_fwalk_reent+0x3a>
 800ba5e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ba62:	3301      	adds	r3, #1
 800ba64:	d003      	beq.n	800ba6e <_fwalk_reent+0x3a>
 800ba66:	4629      	mov	r1, r5
 800ba68:	4630      	mov	r0, r6
 800ba6a:	47c0      	blx	r8
 800ba6c:	4307      	orrs	r7, r0
 800ba6e:	3568      	adds	r5, #104	; 0x68
 800ba70:	e7e9      	b.n	800ba46 <_fwalk_reent+0x12>

0800ba72 <__retarget_lock_init_recursive>:
 800ba72:	4770      	bx	lr

0800ba74 <__retarget_lock_acquire_recursive>:
 800ba74:	4770      	bx	lr

0800ba76 <__retarget_lock_release_recursive>:
 800ba76:	4770      	bx	lr

0800ba78 <__swhatbuf_r>:
 800ba78:	b570      	push	{r4, r5, r6, lr}
 800ba7a:	460e      	mov	r6, r1
 800ba7c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ba80:	2900      	cmp	r1, #0
 800ba82:	b096      	sub	sp, #88	; 0x58
 800ba84:	4614      	mov	r4, r2
 800ba86:	461d      	mov	r5, r3
 800ba88:	da08      	bge.n	800ba9c <__swhatbuf_r+0x24>
 800ba8a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800ba8e:	2200      	movs	r2, #0
 800ba90:	602a      	str	r2, [r5, #0]
 800ba92:	061a      	lsls	r2, r3, #24
 800ba94:	d410      	bmi.n	800bab8 <__swhatbuf_r+0x40>
 800ba96:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ba9a:	e00e      	b.n	800baba <__swhatbuf_r+0x42>
 800ba9c:	466a      	mov	r2, sp
 800ba9e:	f000 f96f 	bl	800bd80 <_fstat_r>
 800baa2:	2800      	cmp	r0, #0
 800baa4:	dbf1      	blt.n	800ba8a <__swhatbuf_r+0x12>
 800baa6:	9a01      	ldr	r2, [sp, #4]
 800baa8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800baac:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800bab0:	425a      	negs	r2, r3
 800bab2:	415a      	adcs	r2, r3
 800bab4:	602a      	str	r2, [r5, #0]
 800bab6:	e7ee      	b.n	800ba96 <__swhatbuf_r+0x1e>
 800bab8:	2340      	movs	r3, #64	; 0x40
 800baba:	2000      	movs	r0, #0
 800babc:	6023      	str	r3, [r4, #0]
 800babe:	b016      	add	sp, #88	; 0x58
 800bac0:	bd70      	pop	{r4, r5, r6, pc}
	...

0800bac4 <malloc>:
 800bac4:	4b02      	ldr	r3, [pc, #8]	; (800bad0 <malloc+0xc>)
 800bac6:	4601      	mov	r1, r0
 800bac8:	6818      	ldr	r0, [r3, #0]
 800baca:	f000 b86f 	b.w	800bbac <_malloc_r>
 800bace:	bf00      	nop
 800bad0:	2000010c 	.word	0x2000010c

0800bad4 <_free_r>:
 800bad4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800bad6:	2900      	cmp	r1, #0
 800bad8:	d044      	beq.n	800bb64 <_free_r+0x90>
 800bada:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bade:	9001      	str	r0, [sp, #4]
 800bae0:	2b00      	cmp	r3, #0
 800bae2:	f1a1 0404 	sub.w	r4, r1, #4
 800bae6:	bfb8      	it	lt
 800bae8:	18e4      	addlt	r4, r4, r3
 800baea:	f000 f96d 	bl	800bdc8 <__malloc_lock>
 800baee:	4a1e      	ldr	r2, [pc, #120]	; (800bb68 <_free_r+0x94>)
 800baf0:	9801      	ldr	r0, [sp, #4]
 800baf2:	6813      	ldr	r3, [r2, #0]
 800baf4:	b933      	cbnz	r3, 800bb04 <_free_r+0x30>
 800baf6:	6063      	str	r3, [r4, #4]
 800baf8:	6014      	str	r4, [r2, #0]
 800bafa:	b003      	add	sp, #12
 800bafc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800bb00:	f000 b968 	b.w	800bdd4 <__malloc_unlock>
 800bb04:	42a3      	cmp	r3, r4
 800bb06:	d908      	bls.n	800bb1a <_free_r+0x46>
 800bb08:	6825      	ldr	r5, [r4, #0]
 800bb0a:	1961      	adds	r1, r4, r5
 800bb0c:	428b      	cmp	r3, r1
 800bb0e:	bf01      	itttt	eq
 800bb10:	6819      	ldreq	r1, [r3, #0]
 800bb12:	685b      	ldreq	r3, [r3, #4]
 800bb14:	1949      	addeq	r1, r1, r5
 800bb16:	6021      	streq	r1, [r4, #0]
 800bb18:	e7ed      	b.n	800baf6 <_free_r+0x22>
 800bb1a:	461a      	mov	r2, r3
 800bb1c:	685b      	ldr	r3, [r3, #4]
 800bb1e:	b10b      	cbz	r3, 800bb24 <_free_r+0x50>
 800bb20:	42a3      	cmp	r3, r4
 800bb22:	d9fa      	bls.n	800bb1a <_free_r+0x46>
 800bb24:	6811      	ldr	r1, [r2, #0]
 800bb26:	1855      	adds	r5, r2, r1
 800bb28:	42a5      	cmp	r5, r4
 800bb2a:	d10b      	bne.n	800bb44 <_free_r+0x70>
 800bb2c:	6824      	ldr	r4, [r4, #0]
 800bb2e:	4421      	add	r1, r4
 800bb30:	1854      	adds	r4, r2, r1
 800bb32:	42a3      	cmp	r3, r4
 800bb34:	6011      	str	r1, [r2, #0]
 800bb36:	d1e0      	bne.n	800bafa <_free_r+0x26>
 800bb38:	681c      	ldr	r4, [r3, #0]
 800bb3a:	685b      	ldr	r3, [r3, #4]
 800bb3c:	6053      	str	r3, [r2, #4]
 800bb3e:	4421      	add	r1, r4
 800bb40:	6011      	str	r1, [r2, #0]
 800bb42:	e7da      	b.n	800bafa <_free_r+0x26>
 800bb44:	d902      	bls.n	800bb4c <_free_r+0x78>
 800bb46:	230c      	movs	r3, #12
 800bb48:	6003      	str	r3, [r0, #0]
 800bb4a:	e7d6      	b.n	800bafa <_free_r+0x26>
 800bb4c:	6825      	ldr	r5, [r4, #0]
 800bb4e:	1961      	adds	r1, r4, r5
 800bb50:	428b      	cmp	r3, r1
 800bb52:	bf04      	itt	eq
 800bb54:	6819      	ldreq	r1, [r3, #0]
 800bb56:	685b      	ldreq	r3, [r3, #4]
 800bb58:	6063      	str	r3, [r4, #4]
 800bb5a:	bf04      	itt	eq
 800bb5c:	1949      	addeq	r1, r1, r5
 800bb5e:	6021      	streq	r1, [r4, #0]
 800bb60:	6054      	str	r4, [r2, #4]
 800bb62:	e7ca      	b.n	800bafa <_free_r+0x26>
 800bb64:	b003      	add	sp, #12
 800bb66:	bd30      	pop	{r4, r5, pc}
 800bb68:	20003208 	.word	0x20003208

0800bb6c <sbrk_aligned>:
 800bb6c:	b570      	push	{r4, r5, r6, lr}
 800bb6e:	4e0e      	ldr	r6, [pc, #56]	; (800bba8 <sbrk_aligned+0x3c>)
 800bb70:	460c      	mov	r4, r1
 800bb72:	6831      	ldr	r1, [r6, #0]
 800bb74:	4605      	mov	r5, r0
 800bb76:	b911      	cbnz	r1, 800bb7e <sbrk_aligned+0x12>
 800bb78:	f000 f88c 	bl	800bc94 <_sbrk_r>
 800bb7c:	6030      	str	r0, [r6, #0]
 800bb7e:	4621      	mov	r1, r4
 800bb80:	4628      	mov	r0, r5
 800bb82:	f000 f887 	bl	800bc94 <_sbrk_r>
 800bb86:	1c43      	adds	r3, r0, #1
 800bb88:	d00a      	beq.n	800bba0 <sbrk_aligned+0x34>
 800bb8a:	1cc4      	adds	r4, r0, #3
 800bb8c:	f024 0403 	bic.w	r4, r4, #3
 800bb90:	42a0      	cmp	r0, r4
 800bb92:	d007      	beq.n	800bba4 <sbrk_aligned+0x38>
 800bb94:	1a21      	subs	r1, r4, r0
 800bb96:	4628      	mov	r0, r5
 800bb98:	f000 f87c 	bl	800bc94 <_sbrk_r>
 800bb9c:	3001      	adds	r0, #1
 800bb9e:	d101      	bne.n	800bba4 <sbrk_aligned+0x38>
 800bba0:	f04f 34ff 	mov.w	r4, #4294967295
 800bba4:	4620      	mov	r0, r4
 800bba6:	bd70      	pop	{r4, r5, r6, pc}
 800bba8:	2000320c 	.word	0x2000320c

0800bbac <_malloc_r>:
 800bbac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bbb0:	1ccd      	adds	r5, r1, #3
 800bbb2:	f025 0503 	bic.w	r5, r5, #3
 800bbb6:	3508      	adds	r5, #8
 800bbb8:	2d0c      	cmp	r5, #12
 800bbba:	bf38      	it	cc
 800bbbc:	250c      	movcc	r5, #12
 800bbbe:	2d00      	cmp	r5, #0
 800bbc0:	4607      	mov	r7, r0
 800bbc2:	db01      	blt.n	800bbc8 <_malloc_r+0x1c>
 800bbc4:	42a9      	cmp	r1, r5
 800bbc6:	d905      	bls.n	800bbd4 <_malloc_r+0x28>
 800bbc8:	230c      	movs	r3, #12
 800bbca:	603b      	str	r3, [r7, #0]
 800bbcc:	2600      	movs	r6, #0
 800bbce:	4630      	mov	r0, r6
 800bbd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bbd4:	4e2e      	ldr	r6, [pc, #184]	; (800bc90 <_malloc_r+0xe4>)
 800bbd6:	f000 f8f7 	bl	800bdc8 <__malloc_lock>
 800bbda:	6833      	ldr	r3, [r6, #0]
 800bbdc:	461c      	mov	r4, r3
 800bbde:	bb34      	cbnz	r4, 800bc2e <_malloc_r+0x82>
 800bbe0:	4629      	mov	r1, r5
 800bbe2:	4638      	mov	r0, r7
 800bbe4:	f7ff ffc2 	bl	800bb6c <sbrk_aligned>
 800bbe8:	1c43      	adds	r3, r0, #1
 800bbea:	4604      	mov	r4, r0
 800bbec:	d14d      	bne.n	800bc8a <_malloc_r+0xde>
 800bbee:	6834      	ldr	r4, [r6, #0]
 800bbf0:	4626      	mov	r6, r4
 800bbf2:	2e00      	cmp	r6, #0
 800bbf4:	d140      	bne.n	800bc78 <_malloc_r+0xcc>
 800bbf6:	6823      	ldr	r3, [r4, #0]
 800bbf8:	4631      	mov	r1, r6
 800bbfa:	4638      	mov	r0, r7
 800bbfc:	eb04 0803 	add.w	r8, r4, r3
 800bc00:	f000 f848 	bl	800bc94 <_sbrk_r>
 800bc04:	4580      	cmp	r8, r0
 800bc06:	d13a      	bne.n	800bc7e <_malloc_r+0xd2>
 800bc08:	6821      	ldr	r1, [r4, #0]
 800bc0a:	3503      	adds	r5, #3
 800bc0c:	1a6d      	subs	r5, r5, r1
 800bc0e:	f025 0503 	bic.w	r5, r5, #3
 800bc12:	3508      	adds	r5, #8
 800bc14:	2d0c      	cmp	r5, #12
 800bc16:	bf38      	it	cc
 800bc18:	250c      	movcc	r5, #12
 800bc1a:	4629      	mov	r1, r5
 800bc1c:	4638      	mov	r0, r7
 800bc1e:	f7ff ffa5 	bl	800bb6c <sbrk_aligned>
 800bc22:	3001      	adds	r0, #1
 800bc24:	d02b      	beq.n	800bc7e <_malloc_r+0xd2>
 800bc26:	6823      	ldr	r3, [r4, #0]
 800bc28:	442b      	add	r3, r5
 800bc2a:	6023      	str	r3, [r4, #0]
 800bc2c:	e00e      	b.n	800bc4c <_malloc_r+0xa0>
 800bc2e:	6822      	ldr	r2, [r4, #0]
 800bc30:	1b52      	subs	r2, r2, r5
 800bc32:	d41e      	bmi.n	800bc72 <_malloc_r+0xc6>
 800bc34:	2a0b      	cmp	r2, #11
 800bc36:	d916      	bls.n	800bc66 <_malloc_r+0xba>
 800bc38:	1961      	adds	r1, r4, r5
 800bc3a:	42a3      	cmp	r3, r4
 800bc3c:	6025      	str	r5, [r4, #0]
 800bc3e:	bf18      	it	ne
 800bc40:	6059      	strne	r1, [r3, #4]
 800bc42:	6863      	ldr	r3, [r4, #4]
 800bc44:	bf08      	it	eq
 800bc46:	6031      	streq	r1, [r6, #0]
 800bc48:	5162      	str	r2, [r4, r5]
 800bc4a:	604b      	str	r3, [r1, #4]
 800bc4c:	4638      	mov	r0, r7
 800bc4e:	f104 060b 	add.w	r6, r4, #11
 800bc52:	f000 f8bf 	bl	800bdd4 <__malloc_unlock>
 800bc56:	f026 0607 	bic.w	r6, r6, #7
 800bc5a:	1d23      	adds	r3, r4, #4
 800bc5c:	1af2      	subs	r2, r6, r3
 800bc5e:	d0b6      	beq.n	800bbce <_malloc_r+0x22>
 800bc60:	1b9b      	subs	r3, r3, r6
 800bc62:	50a3      	str	r3, [r4, r2]
 800bc64:	e7b3      	b.n	800bbce <_malloc_r+0x22>
 800bc66:	6862      	ldr	r2, [r4, #4]
 800bc68:	42a3      	cmp	r3, r4
 800bc6a:	bf0c      	ite	eq
 800bc6c:	6032      	streq	r2, [r6, #0]
 800bc6e:	605a      	strne	r2, [r3, #4]
 800bc70:	e7ec      	b.n	800bc4c <_malloc_r+0xa0>
 800bc72:	4623      	mov	r3, r4
 800bc74:	6864      	ldr	r4, [r4, #4]
 800bc76:	e7b2      	b.n	800bbde <_malloc_r+0x32>
 800bc78:	4634      	mov	r4, r6
 800bc7a:	6876      	ldr	r6, [r6, #4]
 800bc7c:	e7b9      	b.n	800bbf2 <_malloc_r+0x46>
 800bc7e:	230c      	movs	r3, #12
 800bc80:	603b      	str	r3, [r7, #0]
 800bc82:	4638      	mov	r0, r7
 800bc84:	f000 f8a6 	bl	800bdd4 <__malloc_unlock>
 800bc88:	e7a1      	b.n	800bbce <_malloc_r+0x22>
 800bc8a:	6025      	str	r5, [r4, #0]
 800bc8c:	e7de      	b.n	800bc4c <_malloc_r+0xa0>
 800bc8e:	bf00      	nop
 800bc90:	20003208 	.word	0x20003208

0800bc94 <_sbrk_r>:
 800bc94:	b538      	push	{r3, r4, r5, lr}
 800bc96:	4d06      	ldr	r5, [pc, #24]	; (800bcb0 <_sbrk_r+0x1c>)
 800bc98:	2300      	movs	r3, #0
 800bc9a:	4604      	mov	r4, r0
 800bc9c:	4608      	mov	r0, r1
 800bc9e:	602b      	str	r3, [r5, #0]
 800bca0:	f7f5 ff22 	bl	8001ae8 <_sbrk>
 800bca4:	1c43      	adds	r3, r0, #1
 800bca6:	d102      	bne.n	800bcae <_sbrk_r+0x1a>
 800bca8:	682b      	ldr	r3, [r5, #0]
 800bcaa:	b103      	cbz	r3, 800bcae <_sbrk_r+0x1a>
 800bcac:	6023      	str	r3, [r4, #0]
 800bcae:	bd38      	pop	{r3, r4, r5, pc}
 800bcb0:	20003210 	.word	0x20003210

0800bcb4 <__sread>:
 800bcb4:	b510      	push	{r4, lr}
 800bcb6:	460c      	mov	r4, r1
 800bcb8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bcbc:	f000 f890 	bl	800bde0 <_read_r>
 800bcc0:	2800      	cmp	r0, #0
 800bcc2:	bfab      	itete	ge
 800bcc4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800bcc6:	89a3      	ldrhlt	r3, [r4, #12]
 800bcc8:	181b      	addge	r3, r3, r0
 800bcca:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800bcce:	bfac      	ite	ge
 800bcd0:	6563      	strge	r3, [r4, #84]	; 0x54
 800bcd2:	81a3      	strhlt	r3, [r4, #12]
 800bcd4:	bd10      	pop	{r4, pc}

0800bcd6 <__swrite>:
 800bcd6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bcda:	461f      	mov	r7, r3
 800bcdc:	898b      	ldrh	r3, [r1, #12]
 800bcde:	05db      	lsls	r3, r3, #23
 800bce0:	4605      	mov	r5, r0
 800bce2:	460c      	mov	r4, r1
 800bce4:	4616      	mov	r6, r2
 800bce6:	d505      	bpl.n	800bcf4 <__swrite+0x1e>
 800bce8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bcec:	2302      	movs	r3, #2
 800bcee:	2200      	movs	r2, #0
 800bcf0:	f000 f858 	bl	800bda4 <_lseek_r>
 800bcf4:	89a3      	ldrh	r3, [r4, #12]
 800bcf6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bcfa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800bcfe:	81a3      	strh	r3, [r4, #12]
 800bd00:	4632      	mov	r2, r6
 800bd02:	463b      	mov	r3, r7
 800bd04:	4628      	mov	r0, r5
 800bd06:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bd0a:	f000 b817 	b.w	800bd3c <_write_r>

0800bd0e <__sseek>:
 800bd0e:	b510      	push	{r4, lr}
 800bd10:	460c      	mov	r4, r1
 800bd12:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bd16:	f000 f845 	bl	800bda4 <_lseek_r>
 800bd1a:	1c43      	adds	r3, r0, #1
 800bd1c:	89a3      	ldrh	r3, [r4, #12]
 800bd1e:	bf15      	itete	ne
 800bd20:	6560      	strne	r0, [r4, #84]	; 0x54
 800bd22:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800bd26:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800bd2a:	81a3      	strheq	r3, [r4, #12]
 800bd2c:	bf18      	it	ne
 800bd2e:	81a3      	strhne	r3, [r4, #12]
 800bd30:	bd10      	pop	{r4, pc}

0800bd32 <__sclose>:
 800bd32:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bd36:	f000 b813 	b.w	800bd60 <_close_r>
	...

0800bd3c <_write_r>:
 800bd3c:	b538      	push	{r3, r4, r5, lr}
 800bd3e:	4d07      	ldr	r5, [pc, #28]	; (800bd5c <_write_r+0x20>)
 800bd40:	4604      	mov	r4, r0
 800bd42:	4608      	mov	r0, r1
 800bd44:	4611      	mov	r1, r2
 800bd46:	2200      	movs	r2, #0
 800bd48:	602a      	str	r2, [r5, #0]
 800bd4a:	461a      	mov	r2, r3
 800bd4c:	f7f5 fc70 	bl	8001630 <_write>
 800bd50:	1c43      	adds	r3, r0, #1
 800bd52:	d102      	bne.n	800bd5a <_write_r+0x1e>
 800bd54:	682b      	ldr	r3, [r5, #0]
 800bd56:	b103      	cbz	r3, 800bd5a <_write_r+0x1e>
 800bd58:	6023      	str	r3, [r4, #0]
 800bd5a:	bd38      	pop	{r3, r4, r5, pc}
 800bd5c:	20003210 	.word	0x20003210

0800bd60 <_close_r>:
 800bd60:	b538      	push	{r3, r4, r5, lr}
 800bd62:	4d06      	ldr	r5, [pc, #24]	; (800bd7c <_close_r+0x1c>)
 800bd64:	2300      	movs	r3, #0
 800bd66:	4604      	mov	r4, r0
 800bd68:	4608      	mov	r0, r1
 800bd6a:	602b      	str	r3, [r5, #0]
 800bd6c:	f7f5 fc8c 	bl	8001688 <_close>
 800bd70:	1c43      	adds	r3, r0, #1
 800bd72:	d102      	bne.n	800bd7a <_close_r+0x1a>
 800bd74:	682b      	ldr	r3, [r5, #0]
 800bd76:	b103      	cbz	r3, 800bd7a <_close_r+0x1a>
 800bd78:	6023      	str	r3, [r4, #0]
 800bd7a:	bd38      	pop	{r3, r4, r5, pc}
 800bd7c:	20003210 	.word	0x20003210

0800bd80 <_fstat_r>:
 800bd80:	b538      	push	{r3, r4, r5, lr}
 800bd82:	4d07      	ldr	r5, [pc, #28]	; (800bda0 <_fstat_r+0x20>)
 800bd84:	2300      	movs	r3, #0
 800bd86:	4604      	mov	r4, r0
 800bd88:	4608      	mov	r0, r1
 800bd8a:	4611      	mov	r1, r2
 800bd8c:	602b      	str	r3, [r5, #0]
 800bd8e:	f7f5 fccb 	bl	8001728 <_fstat>
 800bd92:	1c43      	adds	r3, r0, #1
 800bd94:	d102      	bne.n	800bd9c <_fstat_r+0x1c>
 800bd96:	682b      	ldr	r3, [r5, #0]
 800bd98:	b103      	cbz	r3, 800bd9c <_fstat_r+0x1c>
 800bd9a:	6023      	str	r3, [r4, #0]
 800bd9c:	bd38      	pop	{r3, r4, r5, pc}
 800bd9e:	bf00      	nop
 800bda0:	20003210 	.word	0x20003210

0800bda4 <_lseek_r>:
 800bda4:	b538      	push	{r3, r4, r5, lr}
 800bda6:	4d07      	ldr	r5, [pc, #28]	; (800bdc4 <_lseek_r+0x20>)
 800bda8:	4604      	mov	r4, r0
 800bdaa:	4608      	mov	r0, r1
 800bdac:	4611      	mov	r1, r2
 800bdae:	2200      	movs	r2, #0
 800bdb0:	602a      	str	r2, [r5, #0]
 800bdb2:	461a      	mov	r2, r3
 800bdb4:	f7f5 fc7f 	bl	80016b6 <_lseek>
 800bdb8:	1c43      	adds	r3, r0, #1
 800bdba:	d102      	bne.n	800bdc2 <_lseek_r+0x1e>
 800bdbc:	682b      	ldr	r3, [r5, #0]
 800bdbe:	b103      	cbz	r3, 800bdc2 <_lseek_r+0x1e>
 800bdc0:	6023      	str	r3, [r4, #0]
 800bdc2:	bd38      	pop	{r3, r4, r5, pc}
 800bdc4:	20003210 	.word	0x20003210

0800bdc8 <__malloc_lock>:
 800bdc8:	4801      	ldr	r0, [pc, #4]	; (800bdd0 <__malloc_lock+0x8>)
 800bdca:	f7ff be53 	b.w	800ba74 <__retarget_lock_acquire_recursive>
 800bdce:	bf00      	nop
 800bdd0:	20003204 	.word	0x20003204

0800bdd4 <__malloc_unlock>:
 800bdd4:	4801      	ldr	r0, [pc, #4]	; (800bddc <__malloc_unlock+0x8>)
 800bdd6:	f7ff be4e 	b.w	800ba76 <__retarget_lock_release_recursive>
 800bdda:	bf00      	nop
 800bddc:	20003204 	.word	0x20003204

0800bde0 <_read_r>:
 800bde0:	b538      	push	{r3, r4, r5, lr}
 800bde2:	4d07      	ldr	r5, [pc, #28]	; (800be00 <_read_r+0x20>)
 800bde4:	4604      	mov	r4, r0
 800bde6:	4608      	mov	r0, r1
 800bde8:	4611      	mov	r1, r2
 800bdea:	2200      	movs	r2, #0
 800bdec:	602a      	str	r2, [r5, #0]
 800bdee:	461a      	mov	r2, r3
 800bdf0:	f7f5 fc72 	bl	80016d8 <_read>
 800bdf4:	1c43      	adds	r3, r0, #1
 800bdf6:	d102      	bne.n	800bdfe <_read_r+0x1e>
 800bdf8:	682b      	ldr	r3, [r5, #0]
 800bdfa:	b103      	cbz	r3, 800bdfe <_read_r+0x1e>
 800bdfc:	6023      	str	r3, [r4, #0]
 800bdfe:	bd38      	pop	{r3, r4, r5, pc}
 800be00:	20003210 	.word	0x20003210

0800be04 <_init>:
 800be04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800be06:	bf00      	nop
 800be08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800be0a:	bc08      	pop	{r3}
 800be0c:	469e      	mov	lr, r3
 800be0e:	4770      	bx	lr

0800be10 <_fini>:
 800be10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800be12:	bf00      	nop
 800be14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800be16:	bc08      	pop	{r3}
 800be18:	469e      	mov	lr, r3
 800be1a:	4770      	bx	lr
